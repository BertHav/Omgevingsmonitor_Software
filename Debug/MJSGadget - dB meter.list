
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a564  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048f0  0802a628  0802a628  0002b628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ef18  0802ef18  0003043c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802ef18  0802ef18  0002ff18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ef20  0802ef20  0003043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ef20  0802ef20  0002ff20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802ef24  0802ef24  0002ff24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802ef28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  2000043c  0802f364  0003043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000391c  0802f364  0003091c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036edb  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e59  00000000  00000000  0006733f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc0  00000000  00000000  00071198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000221f  00000000  00000000  00073f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024651  00000000  00000000  00076177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000469ea  00000000  00000000  0009a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35c4  00000000  00000000  000e11b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00184776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbe4  00000000  00000000  00184828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0019040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00190479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  001929f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a60c 	.word	0x0802a60c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a60c 	.word	0x0802a60c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802dcfc 	.word	0x0802dcfc
 8000ec8:	0802dd3c 	.word	0x0802dd3c
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802dd78 	.word	0x0802dd78
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 fede 	bl	8014918 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 feb5 	bl	801492c <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 f8f5 	bl	8013e28 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a628 	.word	0x0802a628
 8003c84:	0802a634 	.word	0x0802a634
 8003c88:	0802a638 	.word	0x0802a638
 8003c8c:	0802a644 	.word	0x0802a644
 8003c90:	0802a664 	.word	0x0802a664
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fe3a 	bl	801492c <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fe26 	bl	801492c <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f881 	bl	8013e28 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fe00 	bl	801492c <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a668 	.word	0x0802a668
 8003d4c:	0802a634 	.word	0x0802a634
 8003d50:	0802a66c 	.word	0x0802a66c
 8003d54:	0802a664 	.word	0x0802a664

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fde2 	bl	801492c <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fdd6 	bl	801492c <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f010 f823 	bl	8013e28 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fda2 	bl	801492c <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a698 	.word	0x0802a698
 8003e08:	0802a664 	.word	0x0802a664

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fd6f 	bl	801492c <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f ffb0 	bl	8013e28 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f ff71 	bl	8013e28 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a6b4 	.word	0x0802a6b4
 8003f5c:	0802a6d4 	.word	0x0802a6d4
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a6d8 	.word	0x0802a6d8
 8003f68:	0802a664 	.word	0x0802a664

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f ff4a 	bl	8013e28 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a70c 	.word	0x0802a70c
 8003fa8:	0802a664 	.word	0x0802a664

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f ff2a 	bl	8013e28 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fca5 	bl	801492c <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fc94 	bl	801492c <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a720 	.word	0x0802a720
 8004098:	0802a664 	.word	0x0802a664
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f feae 	bl	8013e28 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fc29 	bl	801492c <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 ffaf 	bl	8029098 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 ff8b 	bl	8029098 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 ff67 	bl	8029098 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 ff43 	bl	8029098 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 ff19 	bl	8029098 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 fef5 	bl	8029098 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 fed1 	bl	8029098 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 fead 	bl	8029098 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a73c 	.word	0x0802a73c
 800437c:	0802a664 	.word	0x0802a664
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bce      	ldr	r3, [pc, #824]	@ (8004798 <ENS_Upkeep+0x340>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fc8a 	bl	8013d7c <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc9      	ldr	r3, [pc, #804]	@ (800479c <ENS_Upkeep+0x344>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e22e      	b.n	80048da <ENS_Upkeep+0x482>
  }
  switch(ENSState) {
 800447c:	4bc7      	ldr	r3, [pc, #796]	@ (800479c <ENS_Upkeep+0x344>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e210      	b.n	80048a8 <ENS_Upkeep+0x450>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bc5      	ldr	r3, [pc, #788]	@ (80047a0 <ENS_Upkeep+0x348>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4ac4      	ldr	r2, [pc, #784]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004492:	4bc5      	ldr	r3, [pc, #788]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fcc6 	bl	8013e28 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fa3c 	bl	8014918 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ac2      	ldr	r2, [pc, #776]	@ (80047ac <ENS_Upkeep+0x354>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bbc      	ldr	r3, [pc, #752]	@ (8004798 <ENS_Upkeep+0x340>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bc1      	ldr	r3, [pc, #772]	@ (80047b0 <ENS_Upkeep+0x358>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bc1      	ldr	r3, [pc, #772]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e203      	b.n	80048c0 <ENS_Upkeep+0x468>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4bb8      	ldr	r3, [pc, #736]	@ (800479c <ENS_Upkeep+0x344>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1ff      	b.n	80048c0 <ENS_Upkeep+0x468>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fc9c 	bl	800ddfc <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1fc      	b.n	80048c4 <ENS_Upkeep+0x46c>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fc82 	bl	800ddd4 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bb4      	ldr	r3, [pc, #720]	@ (80047b8 <ENS_Upkeep+0x360>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bb4      	ldr	r3, [pc, #720]	@ (80047bc <ENS_Upkeep+0x364>)
 80044ea:	4ab5      	ldr	r2, [pc, #724]	@ (80047c0 <ENS_Upkeep+0x368>)
 80044ec:	49ae      	ldr	r1, [pc, #696]	@ (80047a8 <ENS_Upkeep+0x350>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fc9a 	bl	8013e28 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 fa19 	bl	801492c <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fc6a 	bl	800ddd4 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4ba6      	ldr	r3, [pc, #664]	@ (800479c <ENS_Upkeep+0x344>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 fa07 	bl	8014918 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4ba1      	ldr	r3, [pc, #644]	@ (8004798 <ENS_Upkeep+0x340>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1de      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fc70 	bl	800ddfc <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e1d2      	b.n	80048c8 <ENS_Upkeep+0x470>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fc56 	bl	800ddd4 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 f9fa 	bl	801492c <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fc4b 	bl	800ddd4 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a98      	ldr	r2, [pc, #608]	@ (80047c4 <ENS_Upkeep+0x36c>)
 8004562:	4b91      	ldr	r3, [pc, #580]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fc5e 	bl	8013e28 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a96      	ldr	r2, [pc, #600]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004570:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fc57 	bl	8013e28 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a93      	ldr	r2, [pc, #588]	@ (80047cc <ENS_Upkeep+0x374>)
 800457e:	4b8a      	ldr	r3, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fc50 	bl	8013e28 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 f9c0 	bl	8014918 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <ENS_Upkeep+0x340>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e197      	b.n	80048d6 <ENS_Upkeep+0x47e>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b7d      	ldr	r3, [pc, #500]	@ (800479c <ENS_Upkeep+0x344>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e193      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fc25 	bl	800ddfc <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fc21 	bl	800ddfc <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fc1b 	bl	800ddfc <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b77      	ldr	r3, [pc, #476]	@ (80047d0 <ENS_Upkeep+0x378>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b77      	ldr	r3, [pc, #476]	@ (80047d4 <ENS_Upkeep+0x37c>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b77      	ldr	r3, [pc, #476]	@ (80047d8 <ENS_Upkeep+0x380>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b77      	ldr	r3, [pc, #476]	@ (80047dc <ENS_Upkeep+0x384>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b77      	ldr	r3, [pc, #476]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004608:	4a77      	ldr	r2, [pc, #476]	@ (80047e8 <ENS_Upkeep+0x390>)
 800460a:	4967      	ldr	r1, [pc, #412]	@ (80047a8 <ENS_Upkeep+0x350>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fc0b 	bl	8013e28 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 f981 	bl	8014918 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b5e      	ldr	r3, [pc, #376]	@ (8004798 <ENS_Upkeep+0x340>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e158      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fbd5 	bl	800ddd4 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 f96b 	bl	8014918 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <ENS_Upkeep+0x340>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 f96c 	bl	801492c <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fbbd 	bl	800ddd4 <setSensorLock>
      break;
 800465a:	e13c      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 f962 	bl	801492c <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 f95c 	bl	801492c <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fbad 	bl	800ddd4 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b48      	ldr	r3, [pc, #288]	@ (800479c <ENS_Upkeep+0x344>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e129      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b5a      	ldr	r3, [pc, #360]	@ (80047ec <ENS_Upkeep+0x394>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d13b      	bne.n	8004702 <ENS_Upkeep+0x2aa>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <ENS_Upkeep+0x398>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b57      	ldr	r3, [pc, #348]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b56      	ldr	r3, [pc, #344]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a56      	ldr	r2, [pc, #344]	@ (80047f4 <ENS_Upkeep+0x39c>)
 800469c:	4956      	ldr	r1, [pc, #344]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fbbf 	bl	8013e28 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4a53      	ldr	r2, [pc, #332]	@ (8004800 <ENS_Upkeep+0x3a8>)
 80046b4:	4950      	ldr	r1, [pc, #320]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	0003      	movs	r3, r0
 80046ba:	2002      	movs	r0, #2
 80046bc:	f00f fbb4 	bl	8013e28 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046c0:	4b4e      	ldr	r3, [pc, #312]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c2:	6898      	ldr	r0, [r3, #8]
 80046c4:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004804 <ENS_Upkeep+0x3ac>)
 80046ca:	494b      	ldr	r1, [pc, #300]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	0003      	movs	r3, r0
 80046d0:	2002      	movs	r0, #2
 80046d2:	f00f fba9 	bl	8013e28 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046d6:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046d8:	6918      	ldr	r0, [r3, #16]
 80046da:	4b48      	ldr	r3, [pc, #288]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <ENS_Upkeep+0x3b0>)
 80046e0:	4945      	ldr	r1, [pc, #276]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	0003      	movs	r3, r0
 80046e6:	2002      	movs	r0, #2
 80046e8:	f00f fb9e 	bl	8013e28 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046ec:	4b43      	ldr	r3, [pc, #268]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ee:	6998      	ldr	r0, [r3, #24]
 80046f0:	4b42      	ldr	r3, [pc, #264]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a45      	ldr	r2, [pc, #276]	@ (800480c <ENS_Upkeep+0x3b4>)
 80046f6:	4940      	ldr	r1, [pc, #256]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	0003      	movs	r3, r0
 80046fc:	2002      	movs	r0, #2
 80046fe:	f00f fb93 	bl	8013e28 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <ENS_Upkeep+0x394>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d103      	bne.n	8004712 <ENS_Upkeep+0x2ba>
 800470a:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <ENS_Upkeep+0x394>)
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e005      	b.n	800471e <ENS_Upkeep+0x2c6>
 8004712:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <ENS_Upkeep+0x394>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <ENS_Upkeep+0x394>)
 800471c:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004720:	7818      	ldrb	r0, [r3, #0]
 8004722:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004724:	8859      	ldrh	r1, [r3, #2]
 8004726:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004728:	889b      	ldrh	r3, [r3, #4]
 800472a:	001a      	movs	r2, r3
 800472c:	f000 fa3c 	bl	8004ba8 <setENS160>
    ENSState = ENS_LOW_POWER;
 8004730:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <ENS_Upkeep+0x344>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    break;
 8004736:	e0ce      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004738:	f010 f8ee 	bl	8014918 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	22fa      	movs	r2, #250	@ 0xfa
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	189a      	adds	r2, r3, r2
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <ENS_Upkeep+0x340>)
 8004746:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004748:	4b31      	ldr	r3, [pc, #196]	@ (8004810 <ENS_Upkeep+0x3b8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2201      	movs	r2, #1
 800474e:	4053      	eors	r3, r2
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d100      	bne.n	8004758 <ENS_Upkeep+0x300>
 8004756:	e076      	b.n	8004846 <ENS_Upkeep+0x3ee>
 8004758:	4b2e      	ldr	r3, [pc, #184]	@ (8004814 <ENS_Upkeep+0x3bc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4053      	eors	r3, r2
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06f      	beq.n	8004846 <ENS_Upkeep+0x3ee>
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <ENS_Upkeep+0x394>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d96b      	bls.n	8004846 <ENS_Upkeep+0x3ee>
      if (getSensorLock() != FREE) {
 800476e:	f009 fb45 	bl	800ddfc <getSensorLock>
 8004772:	1e03      	subs	r3, r0, #0
 8004774:	d000      	beq.n	8004778 <ENS_Upkeep+0x320>
 8004776:	e0a9      	b.n	80048cc <ENS_Upkeep+0x474>
        break;
      }
      setSensorLock(ENS160);
 8004778:	2004      	movs	r0, #4
 800477a:	f009 fb2b 	bl	800ddd4 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 800477e:	1cfc      	adds	r4, r7, #3
 8004780:	2000      	movs	r0, #0
 8004782:	f7ff fb43 	bl	8003e0c <ENS160_setMode>
 8004786:	0003      	movs	r3, r0
 8004788:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 800478a:	1cfb      	adds	r3, r7, #3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d042      	beq.n	8004818 <ENS_Upkeep+0x3c0>
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004794:	e041      	b.n	800481a <ENS_Upkeep+0x3c2>
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	2000045c 	.word	0x2000045c
 800479c:	20000000 	.word	0x20000000
 80047a0:	0802ddb8 	.word	0x0802ddb8
 80047a4:	0802a75c 	.word	0x0802a75c
 80047a8:	0802a664 	.word	0x0802a664
 80047ac:	000be6e0 	.word	0x000be6e0
 80047b0:	20000e43 	.word	0x20000e43
 80047b4:	20000461 	.word	0x20000461
 80047b8:	0802a790 	.word	0x0802a790
 80047bc:	0802a798 	.word	0x0802a798
 80047c0:	0802a7a0 	.word	0x0802a7a0
 80047c4:	0802a7c4 	.word	0x0802a7c4
 80047c8:	0802a7dc 	.word	0x0802a7dc
 80047cc:	0802a7fc 	.word	0x0802a7fc
 80047d0:	0802a814 	.word	0x0802a814
 80047d4:	0802a81c 	.word	0x0802a81c
 80047d8:	0802a824 	.word	0x0802a824
 80047dc:	0802a82c 	.word	0x0802a82c
 80047e0:	0802a834 	.word	0x0802a834
 80047e4:	0802a83c 	.word	0x0802a83c
 80047e8:	0802a844 	.word	0x0802a844
 80047ec:	20000460 	.word	0x20000460
 80047f0:	20000490 	.word	0x20000490
 80047f4:	0802a86c 	.word	0x0802a86c
 80047f8:	0802a6d4 	.word	0x0802a6d4
 80047fc:	2000046c 	.word	0x2000046c
 8004800:	0802a898 	.word	0x0802a898
 8004804:	0802a8b4 	.word	0x0802a8b4
 8004808:	0802a8d0 	.word	0x0802a8d0
 800480c:	0802a8ec 	.word	0x0802a8ec
 8004810:	20002151 	.word	0x20002151
 8004814:	20002152 	.word	0x20002152
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800481a:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <ENS_Upkeep+0x490>)
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0010      	movs	r0, r2
 8004820:	4a32      	ldr	r2, [pc, #200]	@ (80048ec <ENS_Upkeep+0x494>)
 8004822:	4933      	ldr	r1, [pc, #204]	@ (80048f0 <ENS_Upkeep+0x498>)
 8004824:	9000      	str	r0, [sp, #0]
 8004826:	2003      	movs	r0, #3
 8004828:	f00f fafe 	bl	8013e28 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800482c:	200a      	movs	r0, #10
 800482e:	f010 f87d 	bl	801492c <HAL_Delay>
      setSensorLock(FREE);
 8004832:	2000      	movs	r0, #0
 8004834:	f009 face 	bl	800ddd4 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004838:	f010 f86e 	bl	8014918 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <ENS_Upkeep+0x49c>)
 8004840:	189a      	adds	r2, r3, r2
 8004842:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <ENS_Upkeep+0x4a0>)
 8004844:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <ENS_Upkeep+0x4a4>)
 8004848:	2208      	movs	r2, #8
 800484a:	701a      	strb	r2, [r3, #0]
    break;
 800484c:	e043      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800484e:	f009 fad5 	bl	800ddfc <getSensorLock>
 8004852:	1e03      	subs	r3, r0, #0
 8004854:	d13c      	bne.n	80048d0 <ENS_Upkeep+0x478>
        break;
      }
      setSensorLock(ENS160);
 8004856:	2004      	movs	r0, #4
 8004858:	f009 fabc 	bl	800ddd4 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800485c:	1cba      	adds	r2, r7, #2
 800485e:	2301      	movs	r3, #1
 8004860:	2101      	movs	r1, #1
 8004862:	2010      	movs	r0, #16
 8004864:	f7ff f93a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004868:	1cbb      	adds	r3, r7, #2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <ENS_Upkeep+0x43c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004870:	1dfc      	adds	r4, r7, #7
 8004872:	2002      	movs	r0, #2
 8004874:	f7ff faca 	bl	8003e0c <ENS160_setMode>
 8004878:	0003      	movs	r3, r0
 800487a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <ENS_Upkeep+0x430>
 8004884:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <ENS_Upkeep+0x4a8>)
 8004886:	e000      	b.n	800488a <ENS_Upkeep+0x432>
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800488a:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <ENS_Upkeep+0x4ac>)
 800488c:	4918      	ldr	r1, [pc, #96]	@ (80048f0 <ENS_Upkeep+0x498>)
 800488e:	2003      	movs	r0, #3
 8004890:	f00f faca 	bl	8013e28 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004894:	200a      	movs	r0, #10
 8004896:	f010 f849 	bl	801492c <HAL_Delay>
      setSensorLock(FREE);
 800489a:	2000      	movs	r0, #0
 800489c:	f009 fa9a 	bl	800ddd4 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 80048a0:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048a2:	2203      	movs	r2, #3
 80048a4:	701a      	strb	r2, [r3, #0]
    break;
 80048a6:	e016      	b.n	80048d6 <ENS_Upkeep+0x47e>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 80048a8:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 80048ae:	f009 faa5 	bl	800ddfc <getSensorLock>
 80048b2:	0003      	movs	r3, r0
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d00d      	beq.n	80048d4 <ENS_Upkeep+0x47c>
      setSensorLock(FREE);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f009 fa8b 	bl	800ddd4 <setSensorLock>
    }
    break;
 80048be:	e009      	b.n	80048d4 <ENS_Upkeep+0x47c>
    break;
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	e008      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	e006      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	e004      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	e002      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	e000      	b.n	80048d6 <ENS_Upkeep+0x47e>
    break;
 80048d4:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b003      	add	sp, #12
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	0802a798 	.word	0x0802a798
 80048e8:	20000460 	.word	0x20000460
 80048ec:	0802a908 	.word	0x0802a908
 80048f0:	0802a664 	.word	0x0802a664
 80048f4:	0000afc8 	.word	0x0000afc8
 80048f8:	2000045c 	.word	0x2000045c
 80048fc:	20000000 	.word	0x20000000
 8004900:	0802a790 	.word	0x0802a790
 8004904:	0802a940 	.word	0x0802a940

08004908 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <forceNTPupdate+0x10>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000698 	.word	0x20000698

0800491c <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004924:	f00f fff8 	bl	8014918 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	4b03      	ldr	r3, [pc, #12]	@ (800493c <setESPTimeStamp+0x20>)
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	20000694 	.word	0x20000694

08004940 <setCharges>:

void setCharges(){
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004944:	f005 f890 	bl	8009a68 <ReadBatteryVoltage>
 8004948:	1c02      	adds	r2, r0, #0
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <setCharges+0x3c>)
 800494c:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800494e:	f005 f8ed 	bl	8009b2c <ReadSolarVoltage>
 8004952:	0003      	movs	r3, r0
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe ff4b 	bl	80037f0 <__aeabi_i2d>
 800495a:	2200      	movs	r2, #0
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <setCharges+0x40>)
 800495e:	f7fd fbbf 	bl	80020e0 <__aeabi_ddiv>
 8004962:	0002      	movs	r2, r0
 8004964:	000b      	movs	r3, r1
 8004966:	0010      	movs	r0, r2
 8004968:	0019      	movs	r1, r3
 800496a:	f7fe ffdb 	bl	8003924 <__aeabi_d2f>
 800496e:	1c02      	adds	r2, r0, #0
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <setCharges+0x44>)
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	20002160 	.word	0x20002160
 8004980:	408f4000 	.word	0x408f4000
 8004984:	200005c0 	.word	0x200005c0

08004988 <getWifiCred>:

void getWifiCred(void){
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <getWifiCred+0x58>)
 800498e:	4815      	ldr	r0, [pc, #84]	@ (80049e4 <getWifiCred+0x5c>)
 8004990:	2220      	movs	r2, #32
 8004992:	0019      	movs	r1, r3
 8004994:	f007 fbae 	bl	800c0f4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <getWifiCred+0x60>)
 800499a:	4814      	ldr	r0, [pc, #80]	@ (80049ec <getWifiCred+0x64>)
 800499c:	2240      	movs	r2, #64	@ 0x40
 800499e:	0019      	movs	r1, r3
 80049a0:	f007 fba8 	bl	800c0f4 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 80049a4:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <getWifiCred+0x58>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <getWifiCred+0x2e>
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <getWifiCred+0x58>)
 80049ae:	2220      	movs	r2, #32
 80049b0:	5c9b      	ldrb	r3, [r3, r2]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 80049b6:	4a0e      	ldr	r2, [pc, #56]	@ (80049f0 <getWifiCred+0x68>)
 80049b8:	4b0e      	ldr	r3, [pc, #56]	@ (80049f4 <getWifiCred+0x6c>)
 80049ba:	0019      	movs	r1, r3
 80049bc:	2001      	movs	r0, #1
 80049be:	f00f fa33 	bl	8013e28 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 80049c2:	4b07      	ldr	r3, [pc, #28]	@ (80049e0 <getWifiCred+0x58>)
 80049c4:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <getWifiCred+0x70>)
 80049c6:	490d      	ldr	r1, [pc, #52]	@ (80049fc <getWifiCred+0x74>)
 80049c8:	2002      	movs	r0, #2
 80049ca:	f00f fa2d 	bl	8013e28 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <getWifiCred+0x60>)
 80049d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004a00 <getWifiCred+0x78>)
 80049d2:	490a      	ldr	r1, [pc, #40]	@ (80049fc <getWifiCred+0x74>)
 80049d4:	2002      	movs	r0, #2
 80049d6:	f00f fa27 	bl	8013e28 <CreateLine>
}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200006a0 	.word	0x200006a0
 80049e4:	08080200 	.word	0x08080200
 80049e8:	200006c0 	.word	0x200006c0
 80049ec:	08080220 	.word	0x08080220
 80049f0:	0802a970 	.word	0x0802a970
 80049f4:	0802a9b8 	.word	0x0802a9b8
 80049f8:	0802a9bc 	.word	0x0802a9bc
 80049fc:	0802a9cc 	.word	0x0802a9cc
 8004a00:	0802a9d0 	.word	0x0802a9d0

08004a04 <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004a0a:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <checkName+0x5c>)
 8004a0c:	4815      	ldr	r0, [pc, #84]	@ (8004a64 <checkName+0x60>)
 8004a0e:	2220      	movs	r2, #32
 8004a10:	0019      	movs	r1, r3
 8004a12:	f007 fb6f 	bl	800c0f4 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004a16:	1dfb      	adds	r3, r7, #7
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	e00e      	b.n	8004a3c <checkName+0x38>
    configSum += nameConfig[i];
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	4a0f      	ldr	r2, [pc, #60]	@ (8004a60 <checkName+0x5c>)
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
 8004a26:	001a      	movs	r2, r3
 8004a28:	4b0f      	ldr	r3, [pc, #60]	@ (8004a68 <checkName+0x64>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	18d2      	adds	r2, r2, r3
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <checkName+0x64>)
 8004a30:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004a32:	1dfb      	adds	r3, r7, #7
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	3201      	adds	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	1dfb      	adds	r3, r7, #7
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b0b      	cmp	r3, #11
 8004a42:	d9ec      	bls.n	8004a1e <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a44:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <checkName+0x64>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	4193      	sbcs	r3, r2
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <checkName+0x68>)
 8004a50:	701a      	strb	r2, [r3, #0]
  return test;
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <checkName+0x68>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	20000768 	.word	0x20000768
 8004a64:	08080090 	.word	0x08080090
 8004a68:	20000788 	.word	0x20000788
 8004a6c:	2000078c 	.word	0x2000078c

08004a70 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	@ 0x30
 8004a74:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8004a76:	003b      	movs	r3, r7
 8004a78:	4814      	ldr	r0, [pc, #80]	@ (8004acc <setModePowerMail+0x5c>)
 8004a7a:	2230      	movs	r2, #48	@ 0x30
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	f007 fb39 	bl	800c0f4 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 8004a82:	003b      	movs	r3, r7
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a8a:	4a11      	ldr	r2, [pc, #68]	@ (8004ad0 <setModePowerMail+0x60>)
 8004a8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <setModePowerMail+0x64>)
 8004a8e:	0019      	movs	r1, r3
 8004a90:	2001      	movs	r0, #1
 8004a92:	f00f f9c9 	bl	8013e28 <CreateLine>
 8004a96:	e015      	b.n	8004ac4 <setModePowerMail+0x54>
    return;
  }
//  Debug("Powermail is forced.");
  sendpwremail = DO_PWR_MAIL;
 8004a98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <setModePowerMail+0x68>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <setModePowerMail+0x6c>)
 8004aa0:	2206      	movs	r2, #6
 8004aa2:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <setModePowerMail+0x70>)
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <setModePowerMail+0x74>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <setModePowerMail+0x78>)
 8004ab0:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <setModePowerMail+0x74>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
  sendpwrmaildate = getDate();
 8004ab8:	f005 f942 	bl	8009d40 <getDate>
 8004abc:	0003      	movs	r3, r0
 8004abe:	001a      	movs	r2, r3
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <setModePowerMail+0x7c>)
 8004ac2:	701a      	strb	r2, [r3, #0]
}
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b00c      	add	sp, #48	@ 0x30
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	080802c0 	.word	0x080802c0
 8004ad0:	0802a9e4 	.word	0x0802a9e4
 8004ad4:	0802a9b8 	.word	0x0802a9b8
 8004ad8:	200010f9 	.word	0x200010f9
 8004adc:	20000702 	.word	0x20000702
 8004ae0:	20000030 	.word	0x20000030
 8004ae4:	20000694 	.word	0x20000694
 8004ae8:	2000002c 	.word	0x2000002c
 8004aec:	20001110 	.word	0x20001110

08004af0 <pwrmailTodaySend>:

void pwrmailTodaySend() {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  if (sendpwrmaildate != getDate()) {
 8004af4:	f005 f924 	bl	8009d40 <getDate>
 8004af8:	0003      	movs	r3, r0
 8004afa:	001a      	movs	r2, r3
 8004afc:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <pwrmailTodaySend+0x20>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d002      	beq.n	8004b0a <pwrmailTodaySend+0x1a>
    sendpwremail = CLEAR;
 8004b04:	4b03      	ldr	r3, [pc, #12]	@ (8004b14 <pwrmailTodaySend+0x24>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	701a      	strb	r2, [r3, #0]
  }
}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20001110 	.word	0x20001110
 8004b14:	200010f9 	.word	0x200010f9

08004b18 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004b22:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <setHIDS+0x20>)
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004b28:	4b03      	ldr	r3, [pc, #12]	@ (8004b38 <setHIDS+0x20>)
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b002      	add	sp, #8
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	20000704 	.word	0x20000704

08004b3c <setVOC>:

void setVOC(uint16_t voc) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	0002      	movs	r2, r0
 8004b44:	1dbb      	adds	r3, r7, #6
 8004b46:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004b48:	4b04      	ldr	r3, [pc, #16]	@ (8004b5c <setVOC+0x20>)
 8004b4a:	1dba      	adds	r2, r7, #6
 8004b4c:	2148      	movs	r1, #72	@ 0x48
 8004b4e:	8812      	ldrh	r2, [r2, #0]
 8004b50:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b002      	add	sp, #8
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	20000704 	.word	0x20000704

08004b60 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <setAHT2x+0x20>)
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004b70:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <setAHT2x+0x20>)
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	20000704 	.word	0x20000704

08004b84 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <setBMP280+0x20>)
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004b94:	4b03      	ldr	r3, [pc, #12]	@ (8004ba4 <setBMP280+0x20>)
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	20000704 	.word	0x20000704

08004ba8 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	0004      	movs	r4, r0
 8004bb0:	0008      	movs	r0, r1
 8004bb2:	0011      	movs	r1, r2
 8004bb4:	1dfb      	adds	r3, r7, #7
 8004bb6:	1c22      	adds	r2, r4, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	1c02      	adds	r2, r0, #0
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	1cbb      	adds	r3, r7, #2
 8004bc2:	1c0a      	adds	r2, r1, #0
 8004bc4:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <setENS160+0x74>)
 8004bc8:	1dfa      	adds	r2, r7, #7
 8004bca:	2154      	movs	r1, #84	@ 0x54
 8004bcc:	7812      	ldrb	r2, [r2, #0]
 8004bce:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004bd0:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <setENS160+0x74>)
 8004bd2:	2255      	movs	r2, #85	@ 0x55
 8004bd4:	5c9b      	ldrb	r3, [r3, r2]
 8004bd6:	1dfa      	adds	r2, r7, #7
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d904      	bls.n	8004be8 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004bde:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <setENS160+0x74>)
 8004be0:	1dfa      	adds	r2, r7, #7
 8004be2:	2155      	movs	r1, #85	@ 0x55
 8004be4:	7812      	ldrb	r2, [r2, #0]
 8004be6:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <setENS160+0x74>)
 8004bea:	1d3a      	adds	r2, r7, #4
 8004bec:	214a      	movs	r1, #74	@ 0x4a
 8004bee:	8812      	ldrh	r2, [r2, #0]
 8004bf0:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <setENS160+0x74>)
 8004bf4:	1cba      	adds	r2, r7, #2
 8004bf6:	2150      	movs	r1, #80	@ 0x50
 8004bf8:	8812      	ldrh	r2, [r2, #0]
 8004bfa:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004bfc:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <setENS160+0x74>)
 8004bfe:	2252      	movs	r2, #82	@ 0x52
 8004c00:	5a9b      	ldrh	r3, [r3, r2]
 8004c02:	1cba      	adds	r2, r7, #2
 8004c04:	8812      	ldrh	r2, [r2, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d904      	bls.n	8004c14 <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004c0a:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <setENS160+0x74>)
 8004c0c:	1cba      	adds	r2, r7, #2
 8004c0e:	2152      	movs	r1, #82	@ 0x52
 8004c10:	8812      	ldrh	r2, [r2, #0]
 8004c12:	525a      	strh	r2, [r3, r1]
  }
}
 8004c14:	46c0      	nop			@ (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b003      	add	sp, #12
 8004c1a:	bd90      	pop	{r4, r7, pc}
 8004c1c:	20000704 	.word	0x20000704

08004c20 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <setMic+0x28>)
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004c32:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <setMic+0x28>)
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004c38:	4b03      	ldr	r3, [pc, #12]	@ (8004c48 <setMic+0x28>)
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b004      	add	sp, #16
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	20000704 	.word	0x20000704

08004c4c <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	0002      	movs	r2, r0
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004c58:	1dbb      	adds	r3, r7, #6
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f7fc fde3 	bl	8001828 <__aeabi_i2f>
 8004c62:	1c03      	adds	r3, r0, #0
 8004c64:	490d      	ldr	r1, [pc, #52]	@ (8004c9c <setPM1p0+0x50>)
 8004c66:	1c18      	adds	r0, r3, #0
 8004c68:	f7fc f81c 	bl	8000ca4 <__aeabi_fdiv>
 8004c6c:	1c03      	adds	r3, r0, #0
 8004c6e:	1c1a      	adds	r2, r3, #0
 8004c70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <setPM1p0+0x54>)
 8004c72:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <setPM1p0+0x54>)
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <setPM1p0+0x54>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	1c19      	adds	r1, r3, #0
 8004c7e:	1c10      	adds	r0, r2, #0
 8004c80:	f7fb fc6a 	bl	8000558 <__aeabi_fcmpgt>
 8004c84:	1e03      	subs	r3, r0, #0
 8004c86:	d100      	bne.n	8004c8a <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c88:	e003      	b.n	8004c92 <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <setPM1p0+0x54>)
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ca0 <setPM1p0+0x54>)
 8004c90:	60da      	str	r2, [r3, #12]
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	41200000 	.word	0x41200000
 8004ca0:	20000704 	.word	0x20000704

08004ca4 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	0002      	movs	r2, r0
 8004cac:	1dbb      	adds	r3, r7, #6
 8004cae:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004cb0:	1dbb      	adds	r3, r7, #6
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7fc fdb7 	bl	8001828 <__aeabi_i2f>
 8004cba:	1c03      	adds	r3, r0, #0
 8004cbc:	490d      	ldr	r1, [pc, #52]	@ (8004cf4 <setPM2p5+0x50>)
 8004cbe:	1c18      	adds	r0, r3, #0
 8004cc0:	f7fb fff0 	bl	8000ca4 <__aeabi_fdiv>
 8004cc4:	1c03      	adds	r3, r0, #0
 8004cc6:	1c1a      	adds	r2, r3, #0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <setPM2p5+0x54>)
 8004cca:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <setPM2p5+0x54>)
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <setPM2p5+0x54>)
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	1c19      	adds	r1, r3, #0
 8004cd6:	1c10      	adds	r0, r2, #0
 8004cd8:	f7fb fc3e 	bl	8000558 <__aeabi_fcmpgt>
 8004cdc:	1e03      	subs	r3, r0, #0
 8004cde:	d100      	bne.n	8004ce2 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004ce0:	e003      	b.n	8004cea <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004ce2:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <setPM2p5+0x54>)
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	4b04      	ldr	r3, [pc, #16]	@ (8004cf8 <setPM2p5+0x54>)
 8004ce8:	615a      	str	r2, [r3, #20]
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	41200000 	.word	0x41200000
 8004cf8:	20000704 	.word	0x20000704

08004cfc <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	0002      	movs	r2, r0
 8004d04:	1dbb      	adds	r3, r7, #6
 8004d06:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004d08:	1dbb      	adds	r3, r7, #6
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7fc fd8b 	bl	8001828 <__aeabi_i2f>
 8004d12:	1c03      	adds	r3, r0, #0
 8004d14:	490d      	ldr	r1, [pc, #52]	@ (8004d4c <setPM4p0+0x50>)
 8004d16:	1c18      	adds	r0, r3, #0
 8004d18:	f7fb ffc4 	bl	8000ca4 <__aeabi_fdiv>
 8004d1c:	1c03      	adds	r3, r0, #0
 8004d1e:	1c1a      	adds	r2, r3, #0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <setPM4p0+0x54>)
 8004d22:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004d24:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <setPM4p0+0x54>)
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <setPM4p0+0x54>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	1c19      	adds	r1, r3, #0
 8004d2e:	1c10      	adds	r0, r2, #0
 8004d30:	f7fb fc12 	bl	8000558 <__aeabi_fcmpgt>
 8004d34:	1e03      	subs	r3, r0, #0
 8004d36:	d100      	bne.n	8004d3a <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004d38:	e003      	b.n	8004d42 <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004d3a:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <setPM4p0+0x54>)
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <setPM4p0+0x54>)
 8004d40:	61da      	str	r2, [r3, #28]
}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b002      	add	sp, #8
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	41200000 	.word	0x41200000
 8004d50:	20000704 	.word	0x20000704

08004d54 <setPM10>:

void setPM10(uint16_t PM10) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	1dbb      	adds	r3, r7, #6
 8004d5e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004d60:	1dbb      	adds	r3, r7, #6
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7fc fd5f 	bl	8001828 <__aeabi_i2f>
 8004d6a:	1c03      	adds	r3, r0, #0
 8004d6c:	490d      	ldr	r1, [pc, #52]	@ (8004da4 <setPM10+0x50>)
 8004d6e:	1c18      	adds	r0, r3, #0
 8004d70:	f7fb ff98 	bl	8000ca4 <__aeabi_fdiv>
 8004d74:	1c03      	adds	r3, r0, #0
 8004d76:	1c1a      	adds	r2, r3, #0
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <setPM10+0x54>)
 8004d7a:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <setPM10+0x54>)
 8004d7e:	6a1a      	ldr	r2, [r3, #32]
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <setPM10+0x54>)
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	1c19      	adds	r1, r3, #0
 8004d86:	1c10      	adds	r0, r2, #0
 8004d88:	f7fb fbe6 	bl	8000558 <__aeabi_fcmpgt>
 8004d8c:	1e03      	subs	r3, r0, #0
 8004d8e:	d100      	bne.n	8004d92 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d90:	e003      	b.n	8004d9a <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d92:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <setPM10+0x54>)
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <setPM10+0x54>)
 8004d98:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	41200000 	.word	0x41200000
 8004da8:	20000704 	.word	0x20000704

08004dac <setNOx>:

void setNOx(uint16_t nox) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	0002      	movs	r2, r0
 8004db4:	1dbb      	adds	r3, r7, #6
 8004db6:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <setNOx+0x38>)
 8004dba:	1dba      	adds	r2, r7, #6
 8004dbc:	214c      	movs	r1, #76	@ 0x4c
 8004dbe:	8812      	ldrh	r2, [r2, #0]
 8004dc0:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004dc2:	4b08      	ldr	r3, [pc, #32]	@ (8004de4 <setNOx+0x38>)
 8004dc4:	224e      	movs	r2, #78	@ 0x4e
 8004dc6:	5a9b      	ldrh	r3, [r3, r2]
 8004dc8:	1dba      	adds	r2, r7, #6
 8004dca:	8812      	ldrh	r2, [r2, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d904      	bls.n	8004dda <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <setNOx+0x38>)
 8004dd2:	1dba      	adds	r2, r7, #6
 8004dd4:	214e      	movs	r1, #78	@ 0x4e
 8004dd6:	8812      	ldrh	r2, [r2, #0]
 8004dd8:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000704 	.word	0x20000704

08004de8 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004df2:	490a      	ldr	r1, [pc, #40]	@ (8004e1c <SetSEN545temphum+0x34>)
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fb ff55 	bl	8000ca4 <__aeabi_fdiv>
 8004dfa:	1c03      	adds	r3, r0, #0
 8004dfc:	1c1a      	adds	r2, r3, #0
 8004dfe:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <SetSEN545temphum+0x38>)
 8004e00:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004e02:	4908      	ldr	r1, [pc, #32]	@ (8004e24 <SetSEN545temphum+0x3c>)
 8004e04:	6838      	ldr	r0, [r7, #0]
 8004e06:	f7fb ff4d 	bl	8000ca4 <__aeabi_fdiv>
 8004e0a:	1c03      	adds	r3, r0, #0
 8004e0c:	1c1a      	adds	r2, r3, #0
 8004e0e:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <SetSEN545temphum+0x38>)
 8004e10:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b002      	add	sp, #8
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	43480000 	.word	0x43480000
 8004e20:	20000704 	.word	0x20000704
 8004e24:	42c80000 	.word	0x42c80000

08004e28 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004e2c:	f009 fba2 	bl	800e574 <sen5x_Get_sen5x_enable_state>
 8004e30:	1e03      	subs	r3, r0, #0
 8004e32:	d00f      	beq.n	8004e54 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004e34:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <resetMaxMeasurementValues+0x44>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e6c <resetMaxMeasurementValues+0x44>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <resetMaxMeasurementValues+0x44>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004e46:	4b09      	ldr	r3, [pc, #36]	@ (8004e6c <resetMaxMeasurementValues+0x44>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004e4c:	4b07      	ldr	r3, [pc, #28]	@ (8004e6c <resetMaxMeasurementValues+0x44>)
 8004e4e:	224e      	movs	r2, #78	@ 0x4e
 8004e50:	2100      	movs	r1, #0
 8004e52:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <resetMaxMeasurementValues+0x44>)
 8004e56:	2252      	movs	r2, #82	@ 0x52
 8004e58:	2100      	movs	r1, #0
 8004e5a:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	@ (8004e6c <resetMaxMeasurementValues+0x44>)
 8004e5e:	2255      	movs	r2, #85	@ 0x55
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]
}
 8004e64:	46c0      	nop			@ (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	20000704 	.word	0x20000704

08004e70 <SetConfigMode>:

void SetConfigMode(){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004e74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea0 <SetConfigMode+0x30>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4053      	eors	r3, r2
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004e82:	4a08      	ldr	r2, [pc, #32]	@ (8004ea4 <SetConfigMode+0x34>)
 8004e84:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <SetConfigMode+0x38>)
 8004e86:	0019      	movs	r1, r3
 8004e88:	2003      	movs	r0, #3
 8004e8a:	f00e ffcd 	bl	8013e28 <CreateLine>
  }
  ReconfigSet = true;
 8004e8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ea0 <SetConfigMode+0x30>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e94:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <SetConfigMode+0x3c>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200005af 	.word	0x200005af
 8004ea4:	0802a9fc 	.word	0x0802a9fc
 8004ea8:	0802aa1c 	.word	0x0802aa1c
 8004eac:	200010f7 	.word	0x200010f7

08004eb0 <GetReconfigMode>:

bool GetReconfigMode() {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	@ (8004ec0 <GetReconfigMode+0x10>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	200005af 	.word	0x200005af

08004ec4 <ESP_Init>:
  uid[1] = HAL_GetUIDw1();
  uid[2] = HAL_GetUIDw2();
}
#endif

void ESP_Init(UART_HandleTypeDef* espUart) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004ecc:	4b04      	ldr	r3, [pc, #16]	@ (8004ee0 <ESP_Init+0x1c>)
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004ed2:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <ESP_Init+0x20>)
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	701a      	strb	r2, [r3, #0]
#ifndef OPENSENSEMAP
  ESP_GetUID();
#endif
//  beurs = checkEEprom();
}
 8004ed8:	46c0      	nop			@ (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b002      	add	sp, #8
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	200004a4 	.word	0x200004a4
 8004ee4:	20000030 	.word	0x20000030

08004ee8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	000a      	movs	r2, r1
 8004ef2:	1cbb      	adds	r3, r7, #2
 8004ef4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004ef6:	4b27      	ldr	r3, [pc, #156]	@ (8004f94 <ESP_Send+0xac>)
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	250f      	movs	r5, #15
 8004efc:	197c      	adds	r4, r7, r5
 8004efe:	1cbb      	adds	r3, r7, #2
 8004f00:	881a      	ldrh	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	0019      	movs	r1, r3
 8004f06:	f018 fbb7 	bl	801d678 <HAL_UART_Transmit_DMA>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f0e:	197b      	adds	r3, r7, r5
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004f16:	4a20      	ldr	r2, [pc, #128]	@ (8004f98 <ESP_Send+0xb0>)
 8004f18:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <ESP_Send+0xb4>)
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f00e ff83 	bl	8013e28 <CreateLine>
    return false;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e032      	b.n	8004f8c <ESP_Send+0xa4>
  }
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004f26:	1cbb      	adds	r3, r7, #2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	2b5a      	cmp	r3, #90	@ 0x5a
 8004f2c:	d927      	bls.n	8004f7e <ESP_Send+0x96>
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa0 <ESP_Send+0xb8>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d023      	beq.n	8004f7e <ESP_Send+0x96>
 8004f36:	f004 fe4d 	bl	8009bd4 <Check_USB_PowerOn>
 8004f3a:	1e03      	subs	r3, r0, #0
 8004f3c:	d01f      	beq.n	8004f7e <ESP_Send+0x96>
    char splitchar;
    splitchar = command[SPLIT_POS];
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	334c      	adds	r3, #76	@ 0x4c
 8004f42:	001a      	movs	r2, r3
 8004f44:	240e      	movs	r4, #14
 8004f46:	193b      	adds	r3, r7, r4
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	334c      	adds	r3, #76	@ 0x4c
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
//    printf_USB((char*)"ESP_Send: ");
    printf_USB((char*)command);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f003 fd82 	bl	8008a60 <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	334c      	adds	r3, #76	@ 0x4c
 8004f60:	193a      	adds	r2, r7, r4
 8004f62:	7812      	ldrb	r2, [r2, #0]
 8004f64:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	334c      	adds	r3, #76	@ 0x4c
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f003 fd78 	bl	8008a60 <printf_USB>
    printf("ESP_Send: %s", command);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <ESP_Send+0xbc>)
 8004f74:	0011      	movs	r1, r2
 8004f76:	0018      	movs	r0, r3
 8004f78:	f021 f910 	bl	802619c <iprintf>
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004f7c:	e005      	b.n	8004f8a <ESP_Send+0xa2>
  }
  else
    Debug("ESP_Send: %s", command);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <ESP_Send+0xbc>)
 8004f82:	4909      	ldr	r1, [pc, #36]	@ (8004fa8 <ESP_Send+0xc0>)
 8004f84:	2003      	movs	r0, #3
 8004f86:	f00e ff4f 	bl	8013e28 <CreateLine>
  return true;
 8004f8a:	2301      	movs	r3, #1
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bdb0      	pop	{r4, r5, r7, pc}
 8004f94:	200004a4 	.word	0x200004a4
 8004f98:	0802aa20 	.word	0x0802aa20
 8004f9c:	0802a9b8 	.word	0x0802a9b8
 8004fa0:	200010f7 	.word	0x200010f7
 8004fa4:	0802aa40 	.word	0x0802aa40
 8004fa8:	0802aa1c 	.word	0x0802aa1c

08004fac <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fae:	b08b      	sub	sp, #44	@ 0x2c
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	000a      	movs	r2, r1
 8004fb6:	1cbb      	adds	r3, r7, #2
 8004fb8:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004fba:	4b6c      	ldr	r3, [pc, #432]	@ (800516c <ESP_Receive+0x1c0>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004fc0:	2627      	movs	r6, #39	@ 0x27
 8004fc2:	19bb      	adds	r3, r7, r6
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004fc8:	4b69      	ldr	r3, [pc, #420]	@ (8005170 <ESP_Receive+0x1c4>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	2525      	movs	r5, #37	@ 0x25
 8004fce:	197c      	adds	r4, r7, r5
 8004fd0:	1cbb      	adds	r3, r7, #2
 8004fd2:	881a      	ldrh	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	f018 fbde 	bl	801d798 <HAL_UART_Receive_DMA>
 8004fdc:	0003      	movs	r3, r0
 8004fde:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004fe0:	197b      	adds	r3, r7, r5
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d100      	bne.n	8004fea <ESP_Receive+0x3e>
 8004fe8:	e0ba      	b.n	8005160 <ESP_Receive+0x1b4>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004fea:	4b61      	ldr	r3, [pc, #388]	@ (8005170 <ESP_Receive+0x1c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2284      	movs	r2, #132	@ 0x84
 8004ff0:	589b      	ldr	r3, [r3, r2]
 8004ff2:	4a60      	ldr	r2, [pc, #384]	@ (8005174 <ESP_Receive+0x1c8>)
 8004ff4:	4960      	ldr	r1, [pc, #384]	@ (8005178 <ESP_Receive+0x1cc>)
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	f00e ff16 	bl	8013e28 <CreateLine>
#ifndef SMALLBUILD
    char uartespmod[] =" error in UART to ESP module";
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	4a5e      	ldr	r2, [pc, #376]	@ (800517c <ESP_Receive+0x1d0>)
 8005002:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005004:	c313      	stmia	r3!, {r0, r1, r4}
 8005006:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005008:	c313      	stmia	r3!, {r0, r1, r4}
 800500a:	6811      	ldr	r1, [r2, #0]
 800500c:	6019      	str	r1, [r3, #0]
 800500e:	7912      	ldrb	r2, [r2, #4]
 8005010:	711a      	strb	r2, [r3, #4]
    if (status & HAL_UART_ERROR_PE) {
 8005012:	197b      	adds	r3, r7, r5
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	4013      	ands	r3, r2
 800501a:	d009      	beq.n	8005030 <ESP_Receive+0x84>
      Error("Parity%s", uartespmod);
 800501c:	2308      	movs	r3, #8
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	4a57      	ldr	r2, [pc, #348]	@ (8005180 <ESP_Receive+0x1d4>)
 8005022:	4955      	ldr	r1, [pc, #340]	@ (8005178 <ESP_Receive+0x1cc>)
 8005024:	2001      	movs	r0, #1
 8005026:	f00e feff 	bl	8013e28 <CreateLine>
      reset = true;
 800502a:	19bb      	adds	r3, r7, r6
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8005030:	2325      	movs	r3, #37	@ 0x25
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2202      	movs	r2, #2
 8005038:	4013      	ands	r3, r2
 800503a:	d00a      	beq.n	8005052 <ESP_Receive+0xa6>
      Error("Noise%s", uartespmod);
 800503c:	2308      	movs	r3, #8
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	4a50      	ldr	r2, [pc, #320]	@ (8005184 <ESP_Receive+0x1d8>)
 8005042:	494d      	ldr	r1, [pc, #308]	@ (8005178 <ESP_Receive+0x1cc>)
 8005044:	2001      	movs	r0, #1
 8005046:	f00e feef 	bl	8013e28 <CreateLine>
      reset = true;
 800504a:	2327      	movs	r3, #39	@ 0x27
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	2201      	movs	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_FE) {
 8005052:	2325      	movs	r3, #37	@ 0x25
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2204      	movs	r2, #4
 800505a:	4013      	ands	r3, r2
 800505c:	d006      	beq.n	800506c <ESP_Receive+0xc0>
      Error("Frame%s", uartespmod);
 800505e:	2308      	movs	r3, #8
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	4a49      	ldr	r2, [pc, #292]	@ (8005188 <ESP_Receive+0x1dc>)
 8005064:	4944      	ldr	r1, [pc, #272]	@ (8005178 <ESP_Receive+0x1cc>)
 8005066:	2001      	movs	r0, #1
 8005068:	f00e fede 	bl	8013e28 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 800506c:	2325      	movs	r3, #37	@ 0x25
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2208      	movs	r2, #8
 8005074:	4013      	ands	r3, r2
 8005076:	d006      	beq.n	8005086 <ESP_Receive+0xda>
      Error("Overrun%s", uartespmod);
 8005078:	2308      	movs	r3, #8
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	4a43      	ldr	r2, [pc, #268]	@ (800518c <ESP_Receive+0x1e0>)
 800507e:	493e      	ldr	r1, [pc, #248]	@ (8005178 <ESP_Receive+0x1cc>)
 8005080:	2001      	movs	r0, #1
 8005082:	f00e fed1 	bl	8013e28 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8005086:	2325      	movs	r3, #37	@ 0x25
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2210      	movs	r2, #16
 800508e:	4013      	ands	r3, r2
 8005090:	d006      	beq.n	80050a0 <ESP_Receive+0xf4>
      Error("DMA transfer%s", uartespmod);
 8005092:	2308      	movs	r3, #8
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	4a3e      	ldr	r2, [pc, #248]	@ (8005190 <ESP_Receive+0x1e4>)
 8005098:	4937      	ldr	r1, [pc, #220]	@ (8005178 <ESP_Receive+0x1cc>)
 800509a:	2001      	movs	r0, #1
 800509c:	f00e fec4 	bl	8013e28 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 80050a0:	2325      	movs	r3, #37	@ 0x25
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2220      	movs	r2, #32
 80050a8:	4013      	ands	r3, r2
 80050aa:	d006      	beq.n	80050ba <ESP_Receive+0x10e>
      Error("Receiver Timeout%s", uartespmod);
 80050ac:	2308      	movs	r3, #8
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	4a38      	ldr	r2, [pc, #224]	@ (8005194 <ESP_Receive+0x1e8>)
 80050b2:	4931      	ldr	r1, [pc, #196]	@ (8005178 <ESP_Receive+0x1cc>)
 80050b4:	2001      	movs	r0, #1
 80050b6:	f00e feb7 	bl	8013e28 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 80050ba:	2325      	movs	r3, #37	@ 0x25
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2240      	movs	r2, #64	@ 0x40
 80050c2:	4013      	ands	r3, r2
 80050c4:	d006      	beq.n	80050d4 <ESP_Receive+0x128>
      Error("Invalid Callback%s", uartespmod);
 80050c6:	2308      	movs	r3, #8
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	4a33      	ldr	r2, [pc, #204]	@ (8005198 <ESP_Receive+0x1ec>)
 80050cc:	492a      	ldr	r1, [pc, #168]	@ (8005178 <ESP_Receive+0x1cc>)
 80050ce:	2001      	movs	r0, #1
 80050d0:	f00e feaa 	bl	8013e28 <CreateLine>
    }
#endif
    if (reset) {
 80050d4:	2327      	movs	r3, #39	@ 0x27
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d03b      	beq.n	8005156 <ESP_Receive+0x1aa>
      //switch off the ESP and reset the system
//      HAL_UART_Abort_IT(EspUart);
//      HAL_UART_DMAStop(EspUart);
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80050de:	4b2f      	ldr	r3, [pc, #188]	@ (800519c <ESP_Receive+0x1f0>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	2101      	movs	r1, #1
 80050e4:	0018      	movs	r0, r3
 80050e6:	f010 fe8a 	bl	8015dfe <HAL_GPIO_WritePin>
      HAL_Delay(10);
 80050ea:	200a      	movs	r0, #10
 80050ec:	f00f fc1e 	bl	801492c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	482a      	ldr	r0, [pc, #168]	@ (80051a0 <ESP_Receive+0x1f4>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	0019      	movs	r1, r3
 80050fa:	f010 fe80 	bl	8015dfe <HAL_GPIO_WritePin>
      HAL_Delay(10);
 80050fe:	200a      	movs	r0, #10
 8005100:	f00f fc14 	bl	801492c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005104:	4b25      	ldr	r3, [pc, #148]	@ (800519c <ESP_Receive+0x1f0>)
 8005106:	2200      	movs	r2, #0
 8005108:	2102      	movs	r1, #2
 800510a:	0018      	movs	r0, r3
 800510c:	f010 fe77 	bl	8015dfe <HAL_GPIO_WritePin>
//      HAL_UART_DMAStop(EspUart);
      // line below from: https://stackoverflow.com/questions/71287996/stm32-uart-in-dma-mode-stops-receiving-after-receiving-from-a-host-with-wrong-ba
      UART_Start_Receive_DMA(EspUart, EspUart->pRxBuffPtr, EspUart->RxXferSize);
 8005110:	4b17      	ldr	r3, [pc, #92]	@ (8005170 <ESP_Receive+0x1c4>)
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	4b16      	ldr	r3, [pc, #88]	@ (8005170 <ESP_Receive+0x1c4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800511a:	4b15      	ldr	r3, [pc, #84]	@ (8005170 <ESP_Receive+0x1c4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2258      	movs	r2, #88	@ 0x58
 8005120:	5a9b      	ldrh	r3, [r3, r2]
 8005122:	001a      	movs	r2, r3
 8005124:	f019 fc30 	bl	801e988 <UART_Start_Receive_DMA>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 8005128:	2326      	movs	r3, #38	@ 0x26
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e00a      	b.n	8005148 <ESP_Receive+0x19c>
        SetAllREDLED();
 8005132:	f00d fcef 	bl	8012b14 <SetAllREDLED>
        HAL_Delay(100);
 8005136:	2064      	movs	r0, #100	@ 0x64
 8005138:	f00f fbf8 	bl	801492c <HAL_Delay>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 800513c:	2126      	movs	r1, #38	@ 0x26
 800513e:	187b      	adds	r3, r7, r1
 8005140:	781a      	ldrb	r2, [r3, #0]
 8005142:	187b      	adds	r3, r7, r1
 8005144:	3201      	adds	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	2326      	movs	r3, #38	@ 0x26
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b09      	cmp	r3, #9
 8005150:	d9ef      	bls.n	8005132 <ESP_Receive+0x186>
      }
      HAL_NVIC_SystemReset();
 8005152:	f010 f88c 	bl	801526e <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8005156:	4b05      	ldr	r3, [pc, #20]	@ (800516c <ESP_Receive+0x1c0>)
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
    return false;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <ESP_Receive+0x1b6>
#endif
  }
  return true;
 8005160:	2301      	movs	r3, #1
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	b00b      	add	sp, #44	@ 0x2c
 8005168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	200004a8 	.word	0x200004a8
 8005170:	200004a4 	.word	0x200004a4
 8005174:	0802aa50 	.word	0x0802aa50
 8005178:	0802a9b8 	.word	0x0802a9b8
 800517c:	0802aae0 	.word	0x0802aae0
 8005180:	0802aa80 	.word	0x0802aa80
 8005184:	0802aa8c 	.word	0x0802aa8c
 8005188:	0802aa94 	.word	0x0802aa94
 800518c:	0802aa9c 	.word	0x0802aa9c
 8005190:	0802aaa8 	.word	0x0802aaa8
 8005194:	0802aab8 	.word	0x0802aab8
 8005198:	0802aacc 	.word	0x0802aacc
 800519c:	50001c00 	.word	0x50001c00
 80051a0:	50000800 	.word	0x50000800

080051a4 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b093      	sub	sp, #76	@ 0x4c
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
  char espconnuart[] = "ESP connection UART ";
 80051ac:	2328      	movs	r3, #40	@ 0x28
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005360 <HAL_UART_ErrorCallback+0x1bc>)
 80051b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051b4:	c313      	stmia	r3!, {r0, r1, r4}
 80051b6:	ca03      	ldmia	r2!, {r0, r1}
 80051b8:	c303      	stmia	r3!, {r0, r1}
 80051ba:	7812      	ldrb	r2, [r2, #0]
 80051bc:	701a      	strb	r2, [r3, #0]
  char comcalb[] = " Complete";
 80051be:	231c      	movs	r3, #28
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	4a68      	ldr	r2, [pc, #416]	@ (8005364 <HAL_UART_ErrorCallback+0x1c0>)
 80051c4:	ca03      	ldmia	r2!, {r0, r1}
 80051c6:	c303      	stmia	r3!, {r0, r1}
 80051c8:	8812      	ldrh	r2, [r2, #0]
 80051ca:	801a      	strh	r2, [r3, #0]
  char cid[] = " Callback ID";
 80051cc:	230c      	movs	r3, #12
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	4a65      	ldr	r2, [pc, #404]	@ (8005368 <HAL_UART_ErrorCallback+0x1c4>)
 80051d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051d4:	c313      	stmia	r3!, {r0, r1, r4}
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	701a      	strb	r2, [r3, #0]
  if (huart == EspUart) {
 80051da:	4b64      	ldr	r3, [pc, #400]	@ (800536c <HAL_UART_ErrorCallback+0x1c8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d000      	beq.n	80051e6 <HAL_UART_ErrorCallback+0x42>
 80051e4:	e0b9      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
    if (huart->ErrorCode == 4) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2284      	movs	r2, #132	@ 0x84
 80051ea:	589b      	ldr	r3, [r3, r2]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d100      	bne.n	80051f2 <HAL_UART_ErrorCallback+0x4e>
 80051f0:	e0b2      	b.n	8005358 <HAL_UART_ErrorCallback+0x1b4>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2284      	movs	r2, #132	@ 0x84
 80051f6:	589b      	ldr	r3, [r3, r2]
 80051f8:	4a5d      	ldr	r2, [pc, #372]	@ (8005370 <HAL_UART_ErrorCallback+0x1cc>)
 80051fa:	495e      	ldr	r1, [pc, #376]	@ (8005374 <HAL_UART_ErrorCallback+0x1d0>)
 80051fc:	2003      	movs	r0, #3
 80051fe:	f00e fe13 	bl	8013e28 <CreateLine>
    switch (huart->ErrorCode) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2284      	movs	r2, #132	@ 0x84
 8005206:	589b      	ldr	r3, [r3, r2]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d900      	bls.n	800520e <HAL_UART_ErrorCallback+0x6a>
 800520c:	e09d      	b.n	800534a <HAL_UART_ErrorCallback+0x1a6>
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	4b59      	ldr	r3, [pc, #356]	@ (8005378 <HAL_UART_ErrorCallback+0x1d4>)
 8005212:	18d3      	adds	r3, r2, r3
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("%sTx Half%s%s", espconnuart, comcalb, cid);
 8005218:	2328      	movs	r3, #40	@ 0x28
 800521a:	18f8      	adds	r0, r7, r3
 800521c:	4a57      	ldr	r2, [pc, #348]	@ (800537c <HAL_UART_ErrorCallback+0x1d8>)
 800521e:	4958      	ldr	r1, [pc, #352]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 8005220:	230c      	movs	r3, #12
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	231c      	movs	r3, #28
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	0003      	movs	r3, r0
 800522e:	2001      	movs	r0, #1
 8005230:	f00e fdfa 	bl	8013e28 <CreateLine>
        break;
 8005234:	e091      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("%sTx%s%s", espconnuart, comcalb, cid);
 8005236:	2328      	movs	r3, #40	@ 0x28
 8005238:	18f8      	adds	r0, r7, r3
 800523a:	4a52      	ldr	r2, [pc, #328]	@ (8005384 <HAL_UART_ErrorCallback+0x1e0>)
 800523c:	4950      	ldr	r1, [pc, #320]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 800523e:	230c      	movs	r3, #12
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	231c      	movs	r3, #28
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	0003      	movs	r3, r0
 800524c:	2001      	movs	r0, #1
 800524e:	f00e fdeb 	bl	8013e28 <CreateLine>
        break;
 8005252:	e082      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("%sRx Half%s%s", espconnuart, comcalb, cid);
 8005254:	2328      	movs	r3, #40	@ 0x28
 8005256:	18f8      	adds	r0, r7, r3
 8005258:	4a4b      	ldr	r2, [pc, #300]	@ (8005388 <HAL_UART_ErrorCallback+0x1e4>)
 800525a:	4949      	ldr	r1, [pc, #292]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 800525c:	230c      	movs	r3, #12
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	231c      	movs	r3, #28
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	0003      	movs	r3, r0
 800526a:	2001      	movs	r0, #1
 800526c:	f00e fddc 	bl	8013e28 <CreateLine>
        break;
 8005270:	e073      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("%sRx%s%s", espconnuart, comcalb, cid);
 8005272:	2328      	movs	r3, #40	@ 0x28
 8005274:	18f8      	adds	r0, r7, r3
 8005276:	4a45      	ldr	r2, [pc, #276]	@ (800538c <HAL_UART_ErrorCallback+0x1e8>)
 8005278:	4941      	ldr	r1, [pc, #260]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 800527a:	230c      	movs	r3, #12
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	231c      	movs	r3, #28
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	0003      	movs	r3, r0
 8005288:	2001      	movs	r0, #1
 800528a:	f00e fdcd 	bl	8013e28 <CreateLine>
        break;
 800528e:	e064      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ERROR_CB_ID:
        Error("%sError%s", espconnuart, cid);
 8005290:	2328      	movs	r3, #40	@ 0x28
 8005292:	18f8      	adds	r0, r7, r3
 8005294:	4a3e      	ldr	r2, [pc, #248]	@ (8005390 <HAL_UART_ErrorCallback+0x1ec>)
 8005296:	493a      	ldr	r1, [pc, #232]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 8005298:	230c      	movs	r3, #12
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	0003      	movs	r3, r0
 80052a0:	2001      	movs	r0, #1
 80052a2:	f00e fdc1 	bl	8013e28 <CreateLine>
        break;
 80052a6:	e058      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("%sAbort%s%s", espconnuart, comcalb, cid);
 80052a8:	2328      	movs	r3, #40	@ 0x28
 80052aa:	18f8      	adds	r0, r7, r3
 80052ac:	4a39      	ldr	r2, [pc, #228]	@ (8005394 <HAL_UART_ErrorCallback+0x1f0>)
 80052ae:	4934      	ldr	r1, [pc, #208]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 80052b0:	230c      	movs	r3, #12
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	231c      	movs	r3, #28
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	0003      	movs	r3, r0
 80052be:	2001      	movs	r0, #1
 80052c0:	f00e fdb2 	bl	8013e28 <CreateLine>
        break;
 80052c4:	e049      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("%sAbort Transmit%s%s", espconnuart, comcalb, cid);
 80052c6:	2328      	movs	r3, #40	@ 0x28
 80052c8:	18f8      	adds	r0, r7, r3
 80052ca:	4a33      	ldr	r2, [pc, #204]	@ (8005398 <HAL_UART_ErrorCallback+0x1f4>)
 80052cc:	492c      	ldr	r1, [pc, #176]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 80052ce:	230c      	movs	r3, #12
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	231c      	movs	r3, #28
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	0003      	movs	r3, r0
 80052dc:	2001      	movs	r0, #1
 80052de:	f00e fda3 	bl	8013e28 <CreateLine>
        break;
 80052e2:	e03a      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("%sAbort Receive%s%s", espconnuart, comcalb, cid);
 80052e4:	2328      	movs	r3, #40	@ 0x28
 80052e6:	18f8      	adds	r0, r7, r3
 80052e8:	4a2c      	ldr	r2, [pc, #176]	@ (800539c <HAL_UART_ErrorCallback+0x1f8>)
 80052ea:	4925      	ldr	r1, [pc, #148]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 80052ec:	230c      	movs	r3, #12
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	231c      	movs	r3, #28
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	0003      	movs	r3, r0
 80052fa:	2001      	movs	r0, #1
 80052fc:	f00e fd94 	bl	8013e28 <CreateLine>
        break;
 8005300:	e02b      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_WAKEUP_CB_ID:
        Error("%sWakeup%s", espconnuart, cid);
 8005302:	2328      	movs	r3, #40	@ 0x28
 8005304:	18f8      	adds	r0, r7, r3
 8005306:	4a26      	ldr	r2, [pc, #152]	@ (80053a0 <HAL_UART_ErrorCallback+0x1fc>)
 8005308:	491d      	ldr	r1, [pc, #116]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 800530a:	230c      	movs	r3, #12
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	0003      	movs	r3, r0
 8005312:	2001      	movs	r0, #1
 8005314:	f00e fd88 	bl	8013e28 <CreateLine>
        break;
 8005318:	e01f      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPINIT_CB_ID:
        Error("%sMspInit%s", espconnuart, cid);
 800531a:	2328      	movs	r3, #40	@ 0x28
 800531c:	18f8      	adds	r0, r7, r3
 800531e:	4a21      	ldr	r2, [pc, #132]	@ (80053a4 <HAL_UART_ErrorCallback+0x200>)
 8005320:	4917      	ldr	r1, [pc, #92]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 8005322:	230c      	movs	r3, #12
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	0003      	movs	r3, r0
 800532a:	2001      	movs	r0, #1
 800532c:	f00e fd7c 	bl	8013e28 <CreateLine>
        break;
 8005330:	e013      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("%sMspDeInit%s", espconnuart, cid);
 8005332:	2328      	movs	r3, #40	@ 0x28
 8005334:	18f8      	adds	r0, r7, r3
 8005336:	4a1c      	ldr	r2, [pc, #112]	@ (80053a8 <HAL_UART_ErrorCallback+0x204>)
 8005338:	4911      	ldr	r1, [pc, #68]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 800533a:	230c      	movs	r3, #12
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	0003      	movs	r3, r0
 8005342:	2001      	movs	r0, #1
 8005344:	f00e fd70 	bl	8013e28 <CreateLine>
        break;
 8005348:	e007      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      default:
        Error("%sUnknown error");
 800534a:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <HAL_UART_ErrorCallback+0x208>)
 800534c:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <HAL_UART_ErrorCallback+0x1dc>)
 800534e:	0019      	movs	r1, r3
 8005350:	2001      	movs	r0, #1
 8005352:	f00e fd69 	bl	8013e28 <CreateLine>
 8005356:	e000      	b.n	800535a <HAL_UART_ErrorCallback+0x1b6>
      return;
 8005358:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800535a:	46bd      	mov	sp, r7
 800535c:	b011      	add	sp, #68	@ 0x44
 800535e:	bd90      	pop	{r4, r7, pc}
 8005360:	0802abe4 	.word	0x0802abe4
 8005364:	0802abfc 	.word	0x0802abfc
 8005368:	0802ac08 	.word	0x0802ac08
 800536c:	200004a4 	.word	0x200004a4
 8005370:	0802ab00 	.word	0x0802ab00
 8005374:	0802aa1c 	.word	0x0802aa1c
 8005378:	0802de0c 	.word	0x0802de0c
 800537c:	0802ab30 	.word	0x0802ab30
 8005380:	0802a9b8 	.word	0x0802a9b8
 8005384:	0802ab40 	.word	0x0802ab40
 8005388:	0802ab4c 	.word	0x0802ab4c
 800538c:	0802ab5c 	.word	0x0802ab5c
 8005390:	0802ab68 	.word	0x0802ab68
 8005394:	0802ab74 	.word	0x0802ab74
 8005398:	0802ab80 	.word	0x0802ab80
 800539c:	0802ab98 	.word	0x0802ab98
 80053a0:	0802abac 	.word	0x0802abac
 80053a4:	0802abb8 	.word	0x0802abb8
 80053a8:	0802abc4 	.word	0x0802abc4
 80053ac:	0802abd4 	.word	0x0802abd4

080053b0 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b42      	cmp	r3, #66	@ 0x42
 80053c2:	d905      	bls.n	80053d0 <isKeyValid+0x20>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2bff      	cmp	r3, #255	@ 0xff
 80053ca:	d001      	beq.n	80053d0 <isKeyValid+0x20>
    return true;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e03e      	b.n	800544e <isKeyValid+0x9e>
  else {
    Error("Error sensor %s has no stored key for %s: ", sensormodel, sensortype);
 80053d0:	68b8      	ldr	r0, [r7, #8]
 80053d2:	4a21      	ldr	r2, [pc, #132]	@ (8005458 <isKeyValid+0xa8>)
 80053d4:	4921      	ldr	r1, [pc, #132]	@ (800545c <isKeyValid+0xac>)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	0003      	movs	r3, r0
 80053dc:	2001      	movs	r0, #1
 80053de:	f00e fd23 	bl	8013e28 <CreateLine>
    for (int i = 0; i < 12; i++) {
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e01e      	b.n	8005426 <isKeyValid+0x76>
      if (usblog && Check_USB_PowerOn()) {
 80053e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <isKeyValid+0xb0>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <isKeyValid+0x5c>
 80053f0:	f004 fbf0 	bl	8009bd4 <Check_USB_PowerOn>
 80053f4:	1e03      	subs	r3, r0, #0
 80053f6:	d009      	beq.n	800540c <isKeyValid+0x5c>
        printf_USB("%02x", data[i]);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	18d3      	adds	r3, r2, r3
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	001a      	movs	r2, r3
 8005402:	4b18      	ldr	r3, [pc, #96]	@ (8005464 <isKeyValid+0xb4>)
 8005404:	0011      	movs	r1, r2
 8005406:	0018      	movs	r0, r3
 8005408:	f003 fb2a 	bl	8008a60 <printf_USB>
      }
      printf("%02x", data[i]);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	18d3      	adds	r3, r2, r3
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	001a      	movs	r2, r3
 8005416:	4b13      	ldr	r3, [pc, #76]	@ (8005464 <isKeyValid+0xb4>)
 8005418:	0011      	movs	r1, r2
 800541a:	0018      	movs	r0, r3
 800541c:	f020 febe 	bl	802619c <iprintf>
    for (int i = 0; i < 12; i++) {
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3301      	adds	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b0b      	cmp	r3, #11
 800542a:	dddd      	ble.n	80053e8 <isKeyValid+0x38>
    }
    if (usblog && Check_USB_PowerOn()) {
 800542c:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <isKeyValid+0xb0>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <isKeyValid+0x94>
 8005434:	f004 fbce 	bl	8009bd4 <Check_USB_PowerOn>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d003      	beq.n	8005444 <isKeyValid+0x94>
      printf_USB("\r\n");
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <isKeyValid+0xb8>)
 800543e:	0018      	movs	r0, r3
 8005440:	f003 fb0e 	bl	8008a60 <printf_USB>
    }
    printf("\r\n");
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <isKeyValid+0xbc>)
 8005446:	0018      	movs	r0, r3
 8005448:	f020 ff0e 	bl	8026268 <puts>
    return false;
 800544c:	2300      	movs	r3, #0
  }
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b006      	add	sp, #24
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	0802ac18 	.word	0x0802ac18
 800545c:	0802a9b8 	.word	0x0802a9b8
 8005460:	200010f7 	.word	0x200010f7
 8005464:	0802ac44 	.word	0x0802ac44
 8005468:	0802ac4c 	.word	0x0802ac4c
 800546c:	0802ac50 	.word	0x0802ac50

08005470 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e010      	b.n	80054a2 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	001a      	movs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	1898      	adds	r0, r3, r2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	18d3      	adds	r3, r2, r3
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	001a      	movs	r2, r3
 8005494:	4b07      	ldr	r3, [pc, #28]	@ (80054b4 <uint8ArrayToString+0x44>)
 8005496:	0019      	movs	r1, r3
 8005498:	f020 fef0 	bl	802627c <siprintf>
  for (int i = 0; i < 12; i++) {
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b0b      	cmp	r3, #11
 80054a6:	ddeb      	ble.n	8005480 <uint8ArrayToString+0x10>
  }
}
 80054a8:	46c0      	nop			@ (mov r8, r8)
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b004      	add	sp, #16
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	0802ac44 	.word	0x0802ac44

080054b8 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af02      	add	r7, sp, #8
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	000a      	movs	r2, r1
 80054c2:	1cfb      	adds	r3, r7, #3
 80054c4:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 80054c6:	240e      	movs	r4, #14
 80054c8:	193b      	adds	r3, r7, r4
 80054ca:	2200      	movs	r2, #0
 80054cc:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80054ce:	4b41      	ldr	r3, [pc, #260]	@ (80055d4 <CreateMailMessage+0x11c>)
 80054d0:	4841      	ldr	r0, [pc, #260]	@ (80055d8 <CreateMailMessage+0x120>)
 80054d2:	2220      	movs	r2, #32
 80054d4:	0019      	movs	r1, r3
 80054d6:	f006 fe0d 	bl	800c0f4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 80054da:	4b40      	ldr	r3, [pc, #256]	@ (80055dc <CreateMailMessage+0x124>)
 80054dc:	4840      	ldr	r0, [pc, #256]	@ (80055e0 <CreateMailMessage+0x128>)
 80054de:	2230      	movs	r2, #48	@ 0x30
 80054e0:	0019      	movs	r1, r3
 80054e2:	f006 fe07 	bl	800c0f4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 80054e6:	4b3f      	ldr	r3, [pc, #252]	@ (80055e4 <CreateMailMessage+0x12c>)
 80054e8:	483f      	ldr	r0, [pc, #252]	@ (80055e8 <CreateMailMessage+0x130>)
 80054ea:	2230      	movs	r2, #48	@ 0x30
 80054ec:	0019      	movs	r1, r3
 80054ee:	f006 fe01 	bl	800c0f4 <ReadUint8ArrayEEprom>
  sprintf(message, "{\r\n\"sender\": \"%s\",\r\n\"to\": [\r\n\"%s\"\r\n],\r\n\"subject\": \"Battery status\",\r\n", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 80054f2:	4b3c      	ldr	r3, [pc, #240]	@ (80055e4 <CreateMailMessage+0x12c>)
 80054f4:	4a39      	ldr	r2, [pc, #228]	@ (80055dc <CreateMailMessage+0x124>)
 80054f6:	493d      	ldr	r1, [pc, #244]	@ (80055ec <CreateMailMessage+0x134>)
 80054f8:	483d      	ldr	r0, [pc, #244]	@ (80055f0 <CreateMailMessage+0x138>)
 80054fa:	f020 febf 	bl	802627c <siprintf>
  lngth = strlen(message);
 80054fe:	4b3c      	ldr	r3, [pc, #240]	@ (80055f0 <CreateMailMessage+0x138>)
 8005500:	0018      	movs	r0, r3
 8005502:	f7fa fe33 	bl	800016c <strlen>
 8005506:	0002      	movs	r2, r0
 8005508:	193b      	adds	r3, r7, r4
 800550a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800550c:	1cfb      	adds	r3, r7, #3
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d019      	beq.n	8005548 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005514:	4b36      	ldr	r3, [pc, #216]	@ (80055f0 <CreateMailMessage+0x138>)
 8005516:	0018      	movs	r0, r3
 8005518:	f7fa fe28 	bl	800016c <strlen>
 800551c:	0003      	movs	r3, r0
 800551e:	b29a      	uxth	r2, r3
 8005520:	4b33      	ldr	r3, [pc, #204]	@ (80055f0 <CreateMailMessage+0x138>)
 8005522:	0011      	movs	r1, r2
 8005524:	0018      	movs	r0, r3
 8005526:	f7ff fcdf 	bl	8004ee8 <ESP_Send>
 800552a:	0003      	movs	r3, r0
 800552c:	001a      	movs	r2, r3
 800552e:	4b31      	ldr	r3, [pc, #196]	@ (80055f4 <CreateMailMessage+0x13c>)
 8005530:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005532:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <CreateMailMessage+0x140>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	001a      	movs	r2, r3
 8005538:	4b2e      	ldr	r3, [pc, #184]	@ (80055f4 <CreateMailMessage+0x13c>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	4013      	ands	r3, r2
 800553e:	1e5a      	subs	r2, r3, #1
 8005540:	4193      	sbcs	r3, r2
 8005542:	b2da      	uxtb	r2, r3
 8005544:	4b2c      	ldr	r3, [pc, #176]	@ (80055f8 <CreateMailMessage+0x140>)
 8005546:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV\"\r\n}\r\n", (char*)nameConfig, ReadBatteryVoltage());
 8005548:	f004 fa8e 	bl	8009a68 <ReadBatteryVoltage>
 800554c:	1c03      	adds	r3, r0, #0
 800554e:	1c18      	adds	r0, r3, #0
 8005550:	f7fe f9a0 	bl	8003894 <__aeabi_f2d>
 8005554:	0002      	movs	r2, r0
 8005556:	000b      	movs	r3, r1
 8005558:	4c1e      	ldr	r4, [pc, #120]	@ (80055d4 <CreateMailMessage+0x11c>)
 800555a:	4928      	ldr	r1, [pc, #160]	@ (80055fc <CreateMailMessage+0x144>)
 800555c:	4824      	ldr	r0, [pc, #144]	@ (80055f0 <CreateMailMessage+0x138>)
 800555e:	9200      	str	r2, [sp, #0]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	0022      	movs	r2, r4
 8005564:	f020 fe8a 	bl	802627c <siprintf>
  lngth += strlen(message);
 8005568:	4b21      	ldr	r3, [pc, #132]	@ (80055f0 <CreateMailMessage+0x138>)
 800556a:	0018      	movs	r0, r3
 800556c:	f7fa fdfe 	bl	800016c <strlen>
 8005570:	0003      	movs	r3, r0
 8005572:	b299      	uxth	r1, r3
 8005574:	220e      	movs	r2, #14
 8005576:	18bb      	adds	r3, r7, r2
 8005578:	18ba      	adds	r2, r7, r2
 800557a:	8812      	ldrh	r2, [r2, #0]
 800557c:	188a      	adds	r2, r1, r2
 800557e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005580:	1cfb      	adds	r3, r7, #3
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d019      	beq.n	80055bc <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005588:	4b19      	ldr	r3, [pc, #100]	@ (80055f0 <CreateMailMessage+0x138>)
 800558a:	0018      	movs	r0, r3
 800558c:	f7fa fdee 	bl	800016c <strlen>
 8005590:	0003      	movs	r3, r0
 8005592:	b29a      	uxth	r2, r3
 8005594:	4b16      	ldr	r3, [pc, #88]	@ (80055f0 <CreateMailMessage+0x138>)
 8005596:	0011      	movs	r1, r2
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff fca5 	bl	8004ee8 <ESP_Send>
 800559e:	0003      	movs	r3, r0
 80055a0:	001a      	movs	r2, r3
 80055a2:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <CreateMailMessage+0x13c>)
 80055a4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80055a6:	4b14      	ldr	r3, [pc, #80]	@ (80055f8 <CreateMailMessage+0x140>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	001a      	movs	r2, r3
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <CreateMailMessage+0x13c>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	4013      	ands	r3, r2
 80055b2:	1e5a      	subs	r2, r3, #1
 80055b4:	4193      	sbcs	r3, r2
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <CreateMailMessage+0x140>)
 80055ba:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80055bc:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <CreateMailMessage+0x140>)
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	701a      	strb	r2, [r3, #0]
  return lngth;
 80055c4:	230e      	movs	r3, #14
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	881b      	ldrh	r3, [r3, #0]
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b005      	add	sp, #20
 80055d0:	bd90      	pop	{r4, r7, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	20000790 	.word	0x20000790
 80055d8:	08080090 	.word	0x08080090
 80055dc:	200007b0 	.word	0x200007b0
 80055e0:	08080260 	.word	0x08080260
 80055e4:	200007e0 	.word	0x200007e0
 80055e8:	08080290 	.word	0x08080290
 80055ec:	0802ac54 	.word	0x0802ac54
 80055f0:	200005c4 	.word	0x200005c4
 80055f4:	20000810 	.word	0x20000810
 80055f8:	20000031 	.word	0x20000031
 80055fc:	0802ac9c 	.word	0x0802ac9c

08005600 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005600:	b5b0      	push	{r4, r5, r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af02      	add	r7, sp, #8
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	000a      	movs	r2, r1
 800560a:	1cfb      	adds	r3, r7, #3
 800560c:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 800560e:	f7ff f9f9 	bl	8004a04 <checkName>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d00a      	beq.n	800562c <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005616:	4b03      	ldr	r3, [pc, #12]	@ (8005624 <CreateMessage+0x24>)
 8005618:	4803      	ldr	r0, [pc, #12]	@ (8005628 <CreateMessage+0x28>)
 800561a:	2220      	movs	r2, #32
 800561c:	0019      	movs	r1, r3
 800561e:	f006 fd69 	bl	800c0f4 <ReadUint8ArrayEEprom>
 8005622:	e009      	b.n	8005638 <CreateMessage+0x38>
 8005624:	20000814 	.word	0x20000814
 8005628:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 800562c:	4bed      	ldr	r3, [pc, #948]	@ (80059e4 <CreateMessage+0x3e4>)
 800562e:	4aee      	ldr	r2, [pc, #952]	@ (80059e8 <CreateMessage+0x3e8>)
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	6019      	str	r1, [r3, #0]
 8005634:	7912      	ldrb	r2, [r2, #4]
 8005636:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8005638:	f7ff f982 	bl	8004940 <setCharges>
  uint16_t index = 0;
 800563c:	250e      	movs	r5, #14
 800563e:	197b      	adds	r3, r7, r5
 8005640:	2200      	movs	r2, #0
 8005642:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8005644:	197b      	adds	r3, r7, r5
 8005646:	881a      	ldrh	r2, [r3, #0]
 8005648:	4be8      	ldr	r3, [pc, #928]	@ (80059ec <CreateMessage+0x3ec>)
 800564a:	18d3      	adds	r3, r2, r3
 800564c:	4ae8      	ldr	r2, [pc, #928]	@ (80059f0 <CreateMessage+0x3f0>)
 800564e:	0011      	movs	r1, r2
 8005650:	0018      	movs	r0, r3
 8005652:	f020 fe13 	bl	802627c <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 8005656:	4be7      	ldr	r3, [pc, #924]	@ (80059f4 <CreateMessage+0x3f4>)
 8005658:	48e7      	ldr	r0, [pc, #924]	@ (80059f8 <CreateMessage+0x3f8>)
 800565a:	220c      	movs	r2, #12
 800565c:	0019      	movs	r1, r3
 800565e:	f006 fd49 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005662:	4ae4      	ldr	r2, [pc, #912]	@ (80059f4 <CreateMessage+0x3f4>)
 8005664:	4be5      	ldr	r3, [pc, #916]	@ (80059fc <CreateMessage+0x3fc>)
 8005666:	0011      	movs	r1, r2
 8005668:	0018      	movs	r0, r3
 800566a:	f7ff ff01 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 800566e:	4be4      	ldr	r3, [pc, #912]	@ (8005a00 <CreateMessage+0x400>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	1c18      	adds	r0, r3, #0
 8005674:	f7fe f90e 	bl	8003894 <__aeabi_f2d>
 8005678:	0002      	movs	r2, r0
 800567a:	000b      	movs	r3, r1
 800567c:	4cdf      	ldr	r4, [pc, #892]	@ (80059fc <CreateMessage+0x3fc>)
 800567e:	49e1      	ldr	r1, [pc, #900]	@ (8005a04 <CreateMessage+0x404>)
 8005680:	48e1      	ldr	r0, [pc, #900]	@ (8005a08 <CreateMessage+0x408>)
 8005682:	9200      	str	r2, [sp, #0]
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	0022      	movs	r2, r4
 8005688:	f020 fdf8 	bl	802627c <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 800568c:	4bd7      	ldr	r3, [pc, #860]	@ (80059ec <CreateMessage+0x3ec>)
 800568e:	0018      	movs	r0, r3
 8005690:	f7fa fd6c 	bl	800016c <strlen>
 8005694:	0002      	movs	r2, r0
 8005696:	197b      	adds	r3, r7, r5
 8005698:	801a      	strh	r2, [r3, #0]
  if (send) {
 800569a:	1cfb      	adds	r3, r7, #3
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d019      	beq.n	80056d6 <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80056a2:	4bd2      	ldr	r3, [pc, #840]	@ (80059ec <CreateMessage+0x3ec>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fa fd61 	bl	800016c <strlen>
 80056aa:	0003      	movs	r3, r0
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	4bcf      	ldr	r3, [pc, #828]	@ (80059ec <CreateMessage+0x3ec>)
 80056b0:	0011      	movs	r1, r2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff fc18 	bl	8004ee8 <ESP_Send>
 80056b8:	0003      	movs	r3, r0
 80056ba:	001a      	movs	r2, r3
 80056bc:	4bd3      	ldr	r3, [pc, #844]	@ (8005a0c <CreateMessage+0x40c>)
 80056be:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80056c0:	4bd3      	ldr	r3, [pc, #844]	@ (8005a10 <CreateMessage+0x410>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	001a      	movs	r2, r3
 80056c6:	4bd1      	ldr	r3, [pc, #836]	@ (8005a0c <CreateMessage+0x40c>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	4193      	sbcs	r3, r2
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4bcf      	ldr	r3, [pc, #828]	@ (8005a10 <CreateMessage+0x410>)
 80056d4:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 80056d6:	4bc7      	ldr	r3, [pc, #796]	@ (80059f4 <CreateMessage+0x3f4>)
 80056d8:	48ce      	ldr	r0, [pc, #824]	@ (8005a14 <CreateMessage+0x414>)
 80056da:	220c      	movs	r2, #12
 80056dc:	0019      	movs	r1, r3
 80056de:	f006 fd09 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80056e2:	4ac4      	ldr	r2, [pc, #784]	@ (80059f4 <CreateMessage+0x3f4>)
 80056e4:	4bc5      	ldr	r3, [pc, #788]	@ (80059fc <CreateMessage+0x3fc>)
 80056e6:	0011      	movs	r1, r2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fec1 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 80056ee:	4bc4      	ldr	r3, [pc, #784]	@ (8005a00 <CreateMessage+0x400>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	1c18      	adds	r0, r3, #0
 80056f4:	f7fe f8ce 	bl	8003894 <__aeabi_f2d>
 80056f8:	0002      	movs	r2, r0
 80056fa:	000b      	movs	r3, r1
 80056fc:	4cbf      	ldr	r4, [pc, #764]	@ (80059fc <CreateMessage+0x3fc>)
 80056fe:	49c6      	ldr	r1, [pc, #792]	@ (8005a18 <CreateMessage+0x418>)
 8005700:	48ba      	ldr	r0, [pc, #744]	@ (80059ec <CreateMessage+0x3ec>)
 8005702:	9200      	str	r2, [sp, #0]
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	0022      	movs	r2, r4
 8005708:	f020 fdb8 	bl	802627c <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 800570c:	4bb7      	ldr	r3, [pc, #732]	@ (80059ec <CreateMessage+0x3ec>)
 800570e:	0018      	movs	r0, r3
 8005710:	f7fa fd2c 	bl	800016c <strlen>
 8005714:	0003      	movs	r3, r0
 8005716:	b299      	uxth	r1, r3
 8005718:	220e      	movs	r2, #14
 800571a:	18bb      	adds	r3, r7, r2
 800571c:	18ba      	adds	r2, r7, r2
 800571e:	8812      	ldrh	r2, [r2, #0]
 8005720:	188a      	adds	r2, r1, r2
 8005722:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005724:	1cfb      	adds	r3, r7, #3
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d019      	beq.n	8005760 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800572c:	4baf      	ldr	r3, [pc, #700]	@ (80059ec <CreateMessage+0x3ec>)
 800572e:	0018      	movs	r0, r3
 8005730:	f7fa fd1c 	bl	800016c <strlen>
 8005734:	0003      	movs	r3, r0
 8005736:	b29a      	uxth	r2, r3
 8005738:	4bac      	ldr	r3, [pc, #688]	@ (80059ec <CreateMessage+0x3ec>)
 800573a:	0011      	movs	r1, r2
 800573c:	0018      	movs	r0, r3
 800573e:	f7ff fbd3 	bl	8004ee8 <ESP_Send>
 8005742:	0003      	movs	r3, r0
 8005744:	001a      	movs	r2, r3
 8005746:	4bb1      	ldr	r3, [pc, #708]	@ (8005a0c <CreateMessage+0x40c>)
 8005748:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800574a:	4bb1      	ldr	r3, [pc, #708]	@ (8005a10 <CreateMessage+0x410>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	001a      	movs	r2, r3
 8005750:	4bae      	ldr	r3, [pc, #696]	@ (8005a0c <CreateMessage+0x40c>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	4193      	sbcs	r3, r2
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4bac      	ldr	r3, [pc, #688]	@ (8005a10 <CreateMessage+0x410>)
 800575e:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8005760:	4ba4      	ldr	r3, [pc, #656]	@ (80059f4 <CreateMessage+0x3f4>)
 8005762:	48ae      	ldr	r0, [pc, #696]	@ (8005a1c <CreateMessage+0x41c>)
 8005764:	220c      	movs	r2, #12
 8005766:	0019      	movs	r1, r3
 8005768:	f006 fcc4 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800576c:	4aa1      	ldr	r2, [pc, #644]	@ (80059f4 <CreateMessage+0x3f4>)
 800576e:	4ba3      	ldr	r3, [pc, #652]	@ (80059fc <CreateMessage+0x3fc>)
 8005770:	0011      	movs	r1, r2
 8005772:	0018      	movs	r0, r3
 8005774:	f7ff fe7c 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 8005778:	4ba1      	ldr	r3, [pc, #644]	@ (8005a00 <CreateMessage+0x400>)
 800577a:	2248      	movs	r2, #72	@ 0x48
 800577c:	5a9b      	ldrh	r3, [r3, r2]
 800577e:	4a9f      	ldr	r2, [pc, #636]	@ (80059fc <CreateMessage+0x3fc>)
 8005780:	49a7      	ldr	r1, [pc, #668]	@ (8005a20 <CreateMessage+0x420>)
 8005782:	489a      	ldr	r0, [pc, #616]	@ (80059ec <CreateMessage+0x3ec>)
 8005784:	f020 fd7a 	bl	802627c <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 8005788:	4b98      	ldr	r3, [pc, #608]	@ (80059ec <CreateMessage+0x3ec>)
 800578a:	0018      	movs	r0, r3
 800578c:	f7fa fcee 	bl	800016c <strlen>
 8005790:	0003      	movs	r3, r0
 8005792:	b299      	uxth	r1, r3
 8005794:	220e      	movs	r2, #14
 8005796:	18bb      	adds	r3, r7, r2
 8005798:	18ba      	adds	r2, r7, r2
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	188a      	adds	r2, r1, r2
 800579e:	801a      	strh	r2, [r3, #0]
  if (send) {
 80057a0:	1cfb      	adds	r3, r7, #3
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d019      	beq.n	80057dc <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80057a8:	4b90      	ldr	r3, [pc, #576]	@ (80059ec <CreateMessage+0x3ec>)
 80057aa:	0018      	movs	r0, r3
 80057ac:	f7fa fcde 	bl	800016c <strlen>
 80057b0:	0003      	movs	r3, r0
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	4b8d      	ldr	r3, [pc, #564]	@ (80059ec <CreateMessage+0x3ec>)
 80057b6:	0011      	movs	r1, r2
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7ff fb95 	bl	8004ee8 <ESP_Send>
 80057be:	0003      	movs	r3, r0
 80057c0:	001a      	movs	r2, r3
 80057c2:	4b92      	ldr	r3, [pc, #584]	@ (8005a0c <CreateMessage+0x40c>)
 80057c4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80057c6:	4b92      	ldr	r3, [pc, #584]	@ (8005a10 <CreateMessage+0x410>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	001a      	movs	r2, r3
 80057cc:	4b8f      	ldr	r3, [pc, #572]	@ (8005a0c <CreateMessage+0x40c>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	4013      	ands	r3, r2
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	4193      	sbcs	r3, r2
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	4b8d      	ldr	r3, [pc, #564]	@ (8005a10 <CreateMessage+0x410>)
 80057da:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 80057dc:	4b85      	ldr	r3, [pc, #532]	@ (80059f4 <CreateMessage+0x3f4>)
 80057de:	4891      	ldr	r0, [pc, #580]	@ (8005a24 <CreateMessage+0x424>)
 80057e0:	220c      	movs	r2, #12
 80057e2:	0019      	movs	r1, r3
 80057e4:	f006 fc86 	bl	800c0f4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 80057e8:	4a8f      	ldr	r2, [pc, #572]	@ (8005a28 <CreateMessage+0x428>)
 80057ea:	4990      	ldr	r1, [pc, #576]	@ (8005a2c <CreateMessage+0x42c>)
 80057ec:	4b81      	ldr	r3, [pc, #516]	@ (80059f4 <CreateMessage+0x3f4>)
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff fdde 	bl	80053b0 <isKeyValid>
 80057f4:	1e03      	subs	r3, r0, #0
 80057f6:	d039      	beq.n	800586c <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, keybuffer);
 80057f8:	4a7e      	ldr	r2, [pc, #504]	@ (80059f4 <CreateMessage+0x3f4>)
 80057fa:	4b80      	ldr	r3, [pc, #512]	@ (80059fc <CreateMessage+0x3fc>)
 80057fc:	0011      	movs	r1, r2
 80057fe:	0018      	movs	r0, r3
 8005800:	f7ff fe36 	bl	8005470 <uint8ArrayToString>
    getUptime(uptimeBuf);
 8005804:	4b8a      	ldr	r3, [pc, #552]	@ (8005a30 <CreateMessage+0x430>)
 8005806:	0018      	movs	r0, r3
 8005808:	f004 fa80 	bl	8009d0c <getUptime>

#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 800580c:	4b88      	ldr	r3, [pc, #544]	@ (8005a30 <CreateMessage+0x430>)
 800580e:	4a7b      	ldr	r2, [pc, #492]	@ (80059fc <CreateMessage+0x3fc>)
 8005810:	4988      	ldr	r1, [pc, #544]	@ (8005a34 <CreateMessage+0x434>)
 8005812:	4876      	ldr	r0, [pc, #472]	@ (80059ec <CreateMessage+0x3ec>)
 8005814:	f020 fd32 	bl	802627c <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 8005818:	4b74      	ldr	r3, [pc, #464]	@ (80059ec <CreateMessage+0x3ec>)
 800581a:	0018      	movs	r0, r3
 800581c:	f7fa fca6 	bl	800016c <strlen>
 8005820:	0003      	movs	r3, r0
 8005822:	b299      	uxth	r1, r3
 8005824:	220e      	movs	r2, #14
 8005826:	18bb      	adds	r3, r7, r2
 8005828:	18ba      	adds	r2, r7, r2
 800582a:	8812      	ldrh	r2, [r2, #0]
 800582c:	188a      	adds	r2, r1, r2
 800582e:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005830:	1cfb      	adds	r3, r7, #3
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d019      	beq.n	800586c <CreateMessage+0x26c>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005838:	4b6c      	ldr	r3, [pc, #432]	@ (80059ec <CreateMessage+0x3ec>)
 800583a:	0018      	movs	r0, r3
 800583c:	f7fa fc96 	bl	800016c <strlen>
 8005840:	0003      	movs	r3, r0
 8005842:	b29a      	uxth	r2, r3
 8005844:	4b69      	ldr	r3, [pc, #420]	@ (80059ec <CreateMessage+0x3ec>)
 8005846:	0011      	movs	r1, r2
 8005848:	0018      	movs	r0, r3
 800584a:	f7ff fb4d 	bl	8004ee8 <ESP_Send>
 800584e:	0003      	movs	r3, r0
 8005850:	001a      	movs	r2, r3
 8005852:	4b6e      	ldr	r3, [pc, #440]	@ (8005a0c <CreateMessage+0x40c>)
 8005854:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005856:	4b6e      	ldr	r3, [pc, #440]	@ (8005a10 <CreateMessage+0x410>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	001a      	movs	r2, r3
 800585c:	4b6b      	ldr	r3, [pc, #428]	@ (8005a0c <CreateMessage+0x40c>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4013      	ands	r3, r2
 8005862:	1e5a      	subs	r2, r3, #1
 8005864:	4193      	sbcs	r3, r2
 8005866:	b2da      	uxtb	r2, r3
 8005868:	4b69      	ldr	r3, [pc, #420]	@ (8005a10 <CreateMessage+0x410>)
 800586a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 800586c:	f007 fdf8 	bl	800d460 <IsBMP280SensorPresent>
 8005870:	1e03      	subs	r3, r0, #0
 8005872:	d100      	bne.n	8005876 <CreateMessage+0x276>
 8005874:	e0a1      	b.n	80059ba <CreateMessage+0x3ba>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005876:	4b5f      	ldr	r3, [pc, #380]	@ (80059f4 <CreateMessage+0x3f4>)
 8005878:	486f      	ldr	r0, [pc, #444]	@ (8005a38 <CreateMessage+0x438>)
 800587a:	220c      	movs	r2, #12
 800587c:	0019      	movs	r1, r3
 800587e:	f006 fc39 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 8005882:	4a6e      	ldr	r2, [pc, #440]	@ (8005a3c <CreateMessage+0x43c>)
 8005884:	496e      	ldr	r1, [pc, #440]	@ (8005a40 <CreateMessage+0x440>)
 8005886:	4b5b      	ldr	r3, [pc, #364]	@ (80059f4 <CreateMessage+0x3f4>)
 8005888:	0018      	movs	r0, r3
 800588a:	f7ff fd91 	bl	80053b0 <isKeyValid>
 800588e:	1e03      	subs	r3, r0, #0
 8005890:	d046      	beq.n	8005920 <CreateMessage+0x320>
 8005892:	4b5b      	ldr	r3, [pc, #364]	@ (8005a00 <CreateMessage+0x400>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	2100      	movs	r1, #0
 8005898:	1c18      	adds	r0, r3, #0
 800589a:	f7fa fe43 	bl	8000524 <__aeabi_fcmpeq>
 800589e:	1e03      	subs	r3, r0, #0
 80058a0:	d13e      	bne.n	8005920 <CreateMessage+0x320>
      uint8ArrayToString(Buffer, keybuffer);
 80058a2:	4a54      	ldr	r2, [pc, #336]	@ (80059f4 <CreateMessage+0x3f4>)
 80058a4:	4b55      	ldr	r3, [pc, #340]	@ (80059fc <CreateMessage+0x3fc>)
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7ff fde1 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 80058ae:	4b54      	ldr	r3, [pc, #336]	@ (8005a00 <CreateMessage+0x400>)
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	1c18      	adds	r0, r3, #0
 80058b4:	f7fd ffee 	bl	8003894 <__aeabi_f2d>
 80058b8:	0002      	movs	r2, r0
 80058ba:	000b      	movs	r3, r1
 80058bc:	4c4f      	ldr	r4, [pc, #316]	@ (80059fc <CreateMessage+0x3fc>)
 80058be:	4956      	ldr	r1, [pc, #344]	@ (8005a18 <CreateMessage+0x418>)
 80058c0:	484a      	ldr	r0, [pc, #296]	@ (80059ec <CreateMessage+0x3ec>)
 80058c2:	9200      	str	r2, [sp, #0]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	0022      	movs	r2, r4
 80058c8:	f020 fcd8 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80058cc:	4b47      	ldr	r3, [pc, #284]	@ (80059ec <CreateMessage+0x3ec>)
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7fa fc4c 	bl	800016c <strlen>
 80058d4:	0003      	movs	r3, r0
 80058d6:	b299      	uxth	r1, r3
 80058d8:	220e      	movs	r2, #14
 80058da:	18bb      	adds	r3, r7, r2
 80058dc:	18ba      	adds	r2, r7, r2
 80058de:	8812      	ldrh	r2, [r2, #0]
 80058e0:	188a      	adds	r2, r1, r2
 80058e2:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058e4:	1cfb      	adds	r3, r7, #3
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d019      	beq.n	8005920 <CreateMessage+0x320>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80058ec:	4b3f      	ldr	r3, [pc, #252]	@ (80059ec <CreateMessage+0x3ec>)
 80058ee:	0018      	movs	r0, r3
 80058f0:	f7fa fc3c 	bl	800016c <strlen>
 80058f4:	0003      	movs	r3, r0
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	4b3c      	ldr	r3, [pc, #240]	@ (80059ec <CreateMessage+0x3ec>)
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff faf3 	bl	8004ee8 <ESP_Send>
 8005902:	0003      	movs	r3, r0
 8005904:	001a      	movs	r2, r3
 8005906:	4b41      	ldr	r3, [pc, #260]	@ (8005a0c <CreateMessage+0x40c>)
 8005908:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800590a:	4b41      	ldr	r3, [pc, #260]	@ (8005a10 <CreateMessage+0x410>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	001a      	movs	r2, r3
 8005910:	4b3e      	ldr	r3, [pc, #248]	@ (8005a0c <CreateMessage+0x40c>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	4013      	ands	r3, r2
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	4193      	sbcs	r3, r2
 800591a:	b2da      	uxtb	r2, r3
 800591c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a10 <CreateMessage+0x410>)
 800591e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 8005920:	4b34      	ldr	r3, [pc, #208]	@ (80059f4 <CreateMessage+0x3f4>)
 8005922:	4848      	ldr	r0, [pc, #288]	@ (8005a44 <CreateMessage+0x444>)
 8005924:	220c      	movs	r2, #12
 8005926:	0019      	movs	r1, r3
 8005928:	f006 fbe4 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 800592c:	4a46      	ldr	r2, [pc, #280]	@ (8005a48 <CreateMessage+0x448>)
 800592e:	4944      	ldr	r1, [pc, #272]	@ (8005a40 <CreateMessage+0x440>)
 8005930:	4b30      	ldr	r3, [pc, #192]	@ (80059f4 <CreateMessage+0x3f4>)
 8005932:	0018      	movs	r0, r3
 8005934:	f7ff fd3c 	bl	80053b0 <isKeyValid>
 8005938:	1e03      	subs	r3, r0, #0
 800593a:	d03e      	beq.n	80059ba <CreateMessage+0x3ba>
      uint8ArrayToString(Buffer, keybuffer);
 800593c:	4a2d      	ldr	r2, [pc, #180]	@ (80059f4 <CreateMessage+0x3f4>)
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <CreateMessage+0x3fc>)
 8005940:	0011      	movs	r1, r2
 8005942:	0018      	movs	r0, r3
 8005944:	f7ff fd94 	bl	8005470 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 8005948:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <CreateMessage+0x400>)
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	1c18      	adds	r0, r3, #0
 800594e:	f7fd ffa1 	bl	8003894 <__aeabi_f2d>
 8005952:	0002      	movs	r2, r0
 8005954:	000b      	movs	r3, r1
 8005956:	4c29      	ldr	r4, [pc, #164]	@ (80059fc <CreateMessage+0x3fc>)
 8005958:	492f      	ldr	r1, [pc, #188]	@ (8005a18 <CreateMessage+0x418>)
 800595a:	4824      	ldr	r0, [pc, #144]	@ (80059ec <CreateMessage+0x3ec>)
 800595c:	9200      	str	r2, [sp, #0]
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	0022      	movs	r2, r4
 8005962:	f020 fc8b 	bl	802627c <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 8005966:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <CreateMessage+0x3ec>)
 8005968:	0018      	movs	r0, r3
 800596a:	f7fa fbff 	bl	800016c <strlen>
 800596e:	0003      	movs	r3, r0
 8005970:	b299      	uxth	r1, r3
 8005972:	220e      	movs	r2, #14
 8005974:	18bb      	adds	r3, r7, r2
 8005976:	18ba      	adds	r2, r7, r2
 8005978:	8812      	ldrh	r2, [r2, #0]
 800597a:	188a      	adds	r2, r1, r2
 800597c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800597e:	1cfb      	adds	r3, r7, #3
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d019      	beq.n	80059ba <CreateMessage+0x3ba>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005986:	4b19      	ldr	r3, [pc, #100]	@ (80059ec <CreateMessage+0x3ec>)
 8005988:	0018      	movs	r0, r3
 800598a:	f7fa fbef 	bl	800016c <strlen>
 800598e:	0003      	movs	r3, r0
 8005990:	b29a      	uxth	r2, r3
 8005992:	4b16      	ldr	r3, [pc, #88]	@ (80059ec <CreateMessage+0x3ec>)
 8005994:	0011      	movs	r1, r2
 8005996:	0018      	movs	r0, r3
 8005998:	f7ff faa6 	bl	8004ee8 <ESP_Send>
 800599c:	0003      	movs	r3, r0
 800599e:	001a      	movs	r2, r3
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <CreateMessage+0x40c>)
 80059a2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <CreateMessage+0x410>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	001a      	movs	r2, r3
 80059aa:	4b18      	ldr	r3, [pc, #96]	@ (8005a0c <CreateMessage+0x40c>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	4013      	ands	r3, r2
 80059b0:	1e5a      	subs	r2, r3, #1
 80059b2:	4193      	sbcs	r3, r2
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4b16      	ldr	r3, [pc, #88]	@ (8005a10 <CreateMessage+0x410>)
 80059b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 80059ba:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <CreateMessage+0x3f4>)
 80059bc:	4823      	ldr	r0, [pc, #140]	@ (8005a4c <CreateMessage+0x44c>)
 80059be:	220c      	movs	r2, #12
 80059c0:	0019      	movs	r1, r3
 80059c2:	f006 fb97 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80059c6:	4a0b      	ldr	r2, [pc, #44]	@ (80059f4 <CreateMessage+0x3f4>)
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <CreateMessage+0x3fc>)
 80059ca:	0011      	movs	r1, r2
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7ff fd4f 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 80059d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <CreateMessage+0x400>)
 80059d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d6:	1c18      	adds	r0, r3, #0
 80059d8:	f7fd ff5c 	bl	8003894 <__aeabi_f2d>
 80059dc:	0002      	movs	r2, r0
 80059de:	000b      	movs	r3, r1
 80059e0:	e036      	b.n	8005a50 <CreateMessage+0x450>
 80059e2:	46c0      	nop			@ (mov r8, r8)
 80059e4:	20000814 	.word	0x20000814
 80059e8:	0802dddc 	.word	0x0802dddc
 80059ec:	200005c4 	.word	0x200005c4
 80059f0:	0802acf0 	.word	0x0802acf0
 80059f4:	20000834 	.word	0x20000834
 80059f8:	0808000c 	.word	0x0808000c
 80059fc:	20000840 	.word	0x20000840
 8005a00:	20000704 	.word	0x20000704
 8005a04:	0802acf4 	.word	0x0802acf4
 8005a08:	200005c5 	.word	0x200005c5
 8005a0c:	20000859 	.word	0x20000859
 8005a10:	20000032 	.word	0x20000032
 8005a14:	08080018 	.word	0x08080018
 8005a18:	0802ad14 	.word	0x0802ad14
 8005a1c:	08080030 	.word	0x08080030
 8005a20:	0802ad34 	.word	0x0802ad34
 8005a24:	080801a0 	.word	0x080801a0
 8005a28:	0802ad54 	.word	0x0802ad54
 8005a2c:	0802ad5c 	.word	0x0802ad5c
 8005a30:	2000085c 	.word	0x2000085c
 8005a34:	0802ad64 	.word	0x0802ad64
 8005a38:	08080188 	.word	0x08080188
 8005a3c:	0802ad84 	.word	0x0802ad84
 8005a40:	0802ad88 	.word	0x0802ad88
 8005a44:	080800e0 	.word	0x080800e0
 8005a48:	0802ad90 	.word	0x0802ad90
 8005a4c:	08080048 	.word	0x08080048
 8005a50:	4ce6      	ldr	r4, [pc, #920]	@ (8005dec <CreateMessage+0x7ec>)
 8005a52:	49e7      	ldr	r1, [pc, #924]	@ (8005df0 <CreateMessage+0x7f0>)
 8005a54:	48e7      	ldr	r0, [pc, #924]	@ (8005df4 <CreateMessage+0x7f4>)
 8005a56:	9200      	str	r2, [sp, #0]
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	0022      	movs	r2, r4
 8005a5c:	f020 fc0e 	bl	802627c <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
  index += strlen(message);
 8005a60:	4be4      	ldr	r3, [pc, #912]	@ (8005df4 <CreateMessage+0x7f4>)
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7fa fb82 	bl	800016c <strlen>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	b299      	uxth	r1, r3
 8005a6c:	220e      	movs	r2, #14
 8005a6e:	18bb      	adds	r3, r7, r2
 8005a70:	18ba      	adds	r2, r7, r2
 8005a72:	8812      	ldrh	r2, [r2, #0]
 8005a74:	188a      	adds	r2, r1, r2
 8005a76:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005a78:	1cfb      	adds	r3, r7, #3
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d019      	beq.n	8005ab4 <CreateMessage+0x4b4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005a80:	4bdc      	ldr	r3, [pc, #880]	@ (8005df4 <CreateMessage+0x7f4>)
 8005a82:	0018      	movs	r0, r3
 8005a84:	f7fa fb72 	bl	800016c <strlen>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	4bd9      	ldr	r3, [pc, #868]	@ (8005df4 <CreateMessage+0x7f4>)
 8005a8e:	0011      	movs	r1, r2
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7ff fa29 	bl	8004ee8 <ESP_Send>
 8005a96:	0003      	movs	r3, r0
 8005a98:	001a      	movs	r2, r3
 8005a9a:	4bd7      	ldr	r3, [pc, #860]	@ (8005df8 <CreateMessage+0x7f8>)
 8005a9c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005a9e:	4bd7      	ldr	r3, [pc, #860]	@ (8005dfc <CreateMessage+0x7fc>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	4bd4      	ldr	r3, [pc, #848]	@ (8005df8 <CreateMessage+0x7f8>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	4193      	sbcs	r3, r2
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	4bd2      	ldr	r3, [pc, #840]	@ (8005dfc <CreateMessage+0x7fc>)
 8005ab2:	701a      	strb	r2, [r3, #0]
  }

//  if(!onBeurs){
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005ab4:	4bd2      	ldr	r3, [pc, #840]	@ (8005e00 <CreateMessage+0x800>)
 8005ab6:	48d3      	ldr	r0, [pc, #844]	@ (8005e04 <CreateMessage+0x804>)
 8005ab8:	220c      	movs	r2, #12
 8005aba:	0019      	movs	r1, r3
 8005abc:	f006 fb1a 	bl	800c0f4 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005ac0:	4acf      	ldr	r2, [pc, #828]	@ (8005e00 <CreateMessage+0x800>)
 8005ac2:	4bca      	ldr	r3, [pc, #808]	@ (8005dec <CreateMessage+0x7ec>)
 8005ac4:	0011      	movs	r1, r2
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7ff fcd2 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 8005acc:	4bce      	ldr	r3, [pc, #824]	@ (8005e08 <CreateMessage+0x808>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	1c18      	adds	r0, r3, #0
 8005ad2:	f7fd fedf 	bl	8003894 <__aeabi_f2d>
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	000b      	movs	r3, r1
 8005ada:	4cc4      	ldr	r4, [pc, #784]	@ (8005dec <CreateMessage+0x7ec>)
 8005adc:	49c4      	ldr	r1, [pc, #784]	@ (8005df0 <CreateMessage+0x7f0>)
 8005ade:	48c5      	ldr	r0, [pc, #788]	@ (8005df4 <CreateMessage+0x7f4>)
 8005ae0:	9200      	str	r2, [sp, #0]
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	0022      	movs	r2, r4
 8005ae6:	f020 fbc9 	bl	802627c <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 8005aea:	4bc2      	ldr	r3, [pc, #776]	@ (8005df4 <CreateMessage+0x7f4>)
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7fa fb3d 	bl	800016c <strlen>
 8005af2:	0003      	movs	r3, r0
 8005af4:	b299      	uxth	r1, r3
 8005af6:	220e      	movs	r2, #14
 8005af8:	18bb      	adds	r3, r7, r2
 8005afa:	18ba      	adds	r2, r7, r2
 8005afc:	8812      	ldrh	r2, [r2, #0]
 8005afe:	188a      	adds	r2, r1, r2
 8005b00:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005b02:	1cfb      	adds	r3, r7, #3
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d019      	beq.n	8005b3e <CreateMessage+0x53e>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005b0a:	4bba      	ldr	r3, [pc, #744]	@ (8005df4 <CreateMessage+0x7f4>)
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7fa fb2d 	bl	800016c <strlen>
 8005b12:	0003      	movs	r3, r0
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	4bb7      	ldr	r3, [pc, #732]	@ (8005df4 <CreateMessage+0x7f4>)
 8005b18:	0011      	movs	r1, r2
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7ff f9e4 	bl	8004ee8 <ESP_Send>
 8005b20:	0003      	movs	r3, r0
 8005b22:	001a      	movs	r2, r3
 8005b24:	4bb4      	ldr	r3, [pc, #720]	@ (8005df8 <CreateMessage+0x7f8>)
 8005b26:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005b28:	4bb4      	ldr	r3, [pc, #720]	@ (8005dfc <CreateMessage+0x7fc>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	001a      	movs	r2, r3
 8005b2e:	4bb2      	ldr	r3, [pc, #712]	@ (8005df8 <CreateMessage+0x7f8>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	4013      	ands	r3, r2
 8005b34:	1e5a      	subs	r2, r3, #1
 8005b36:	4193      	sbcs	r3, r2
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4bb0      	ldr	r3, [pc, #704]	@ (8005dfc <CreateMessage+0x7fc>)
 8005b3c:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005b3e:	4bb3      	ldr	r3, [pc, #716]	@ (8005e0c <CreateMessage+0x80c>)
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	2b35      	cmp	r3, #53	@ 0x35
 8005b44:	d141      	bne.n	8005bca <CreateMessage+0x5ca>
 8005b46:	f004 f845 	bl	8009bd4 <Check_USB_PowerOn>
 8005b4a:	1e03      	subs	r3, r0, #0
 8005b4c:	d03d      	beq.n	8005bca <CreateMessage+0x5ca>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005b4e:	4bac      	ldr	r3, [pc, #688]	@ (8005e00 <CreateMessage+0x800>)
 8005b50:	48af      	ldr	r0, [pc, #700]	@ (8005e10 <CreateMessage+0x810>)
 8005b52:	220c      	movs	r2, #12
 8005b54:	0019      	movs	r1, r3
 8005b56:	f006 facd 	bl	800c0f4 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005b5a:	4aa9      	ldr	r2, [pc, #676]	@ (8005e00 <CreateMessage+0x800>)
 8005b5c:	4ba3      	ldr	r3, [pc, #652]	@ (8005dec <CreateMessage+0x7ec>)
 8005b5e:	0011      	movs	r1, r2
 8005b60:	0018      	movs	r0, r3
 8005b62:	f7ff fc85 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005b66:	4bab      	ldr	r3, [pc, #684]	@ (8005e14 <CreateMessage+0x814>)
 8005b68:	224e      	movs	r2, #78	@ 0x4e
 8005b6a:	5a9b      	ldrh	r3, [r3, r2]
 8005b6c:	4a9f      	ldr	r2, [pc, #636]	@ (8005dec <CreateMessage+0x7ec>)
 8005b6e:	49aa      	ldr	r1, [pc, #680]	@ (8005e18 <CreateMessage+0x818>)
 8005b70:	48a0      	ldr	r0, [pc, #640]	@ (8005df4 <CreateMessage+0x7f4>)
 8005b72:	f020 fb83 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005b76:	4b9f      	ldr	r3, [pc, #636]	@ (8005df4 <CreateMessage+0x7f4>)
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7fa faf7 	bl	800016c <strlen>
 8005b7e:	0003      	movs	r3, r0
 8005b80:	b299      	uxth	r1, r3
 8005b82:	220e      	movs	r2, #14
 8005b84:	18bb      	adds	r3, r7, r2
 8005b86:	18ba      	adds	r2, r7, r2
 8005b88:	8812      	ldrh	r2, [r2, #0]
 8005b8a:	188a      	adds	r2, r1, r2
 8005b8c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b8e:	1cfb      	adds	r3, r7, #3
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d019      	beq.n	8005bca <CreateMessage+0x5ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b96:	4b97      	ldr	r3, [pc, #604]	@ (8005df4 <CreateMessage+0x7f4>)
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7fa fae7 	bl	800016c <strlen>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	4b94      	ldr	r3, [pc, #592]	@ (8005df4 <CreateMessage+0x7f4>)
 8005ba4:	0011      	movs	r1, r2
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f7ff f99e 	bl	8004ee8 <ESP_Send>
 8005bac:	0003      	movs	r3, r0
 8005bae:	001a      	movs	r2, r3
 8005bb0:	4b91      	ldr	r3, [pc, #580]	@ (8005df8 <CreateMessage+0x7f8>)
 8005bb2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005bb4:	4b91      	ldr	r3, [pc, #580]	@ (8005dfc <CreateMessage+0x7fc>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	001a      	movs	r2, r3
 8005bba:	4b8f      	ldr	r3, [pc, #572]	@ (8005df8 <CreateMessage+0x7f8>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	1e5a      	subs	r2, r3, #1
 8005bc2:	4193      	sbcs	r3, r2
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	4b8d      	ldr	r3, [pc, #564]	@ (8005dfc <CreateMessage+0x7fc>)
 8005bc8:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005bca:	4b8d      	ldr	r3, [pc, #564]	@ (8005e00 <CreateMessage+0x800>)
 8005bcc:	4893      	ldr	r0, [pc, #588]	@ (8005e1c <CreateMessage+0x81c>)
 8005bce:	220c      	movs	r2, #12
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	f006 fa8f 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8005e0c <CreateMessage+0x80c>)
 8005bd8:	791b      	ldrb	r3, [r3, #4]
 8005bda:	2b34      	cmp	r3, #52	@ 0x34
 8005bdc:	d003      	beq.n	8005be6 <CreateMessage+0x5e6>
 8005bde:	4b8b      	ldr	r3, [pc, #556]	@ (8005e0c <CreateMessage+0x80c>)
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	2b35      	cmp	r3, #53	@ 0x35
 8005be4:	d146      	bne.n	8005c74 <CreateMessage+0x674>
 8005be6:	4a8e      	ldr	r2, [pc, #568]	@ (8005e20 <CreateMessage+0x820>)
 8005be8:	498e      	ldr	r1, [pc, #568]	@ (8005e24 <CreateMessage+0x824>)
 8005bea:	4b85      	ldr	r3, [pc, #532]	@ (8005e00 <CreateMessage+0x800>)
 8005bec:	0018      	movs	r0, r3
 8005bee:	f7ff fbdf 	bl	80053b0 <isKeyValid>
 8005bf2:	1e03      	subs	r3, r0, #0
 8005bf4:	d03e      	beq.n	8005c74 <CreateMessage+0x674>
      uint8ArrayToString(Buffer, keybuffer);
 8005bf6:	4a82      	ldr	r2, [pc, #520]	@ (8005e00 <CreateMessage+0x800>)
 8005bf8:	4b7c      	ldr	r3, [pc, #496]	@ (8005dec <CreateMessage+0x7ec>)
 8005bfa:	0011      	movs	r1, r2
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f7ff fc37 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005c02:	4b84      	ldr	r3, [pc, #528]	@ (8005e14 <CreateMessage+0x814>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	1c18      	adds	r0, r3, #0
 8005c08:	f7fd fe44 	bl	8003894 <__aeabi_f2d>
 8005c0c:	0002      	movs	r2, r0
 8005c0e:	000b      	movs	r3, r1
 8005c10:	4c76      	ldr	r4, [pc, #472]	@ (8005dec <CreateMessage+0x7ec>)
 8005c12:	4985      	ldr	r1, [pc, #532]	@ (8005e28 <CreateMessage+0x828>)
 8005c14:	4877      	ldr	r0, [pc, #476]	@ (8005df4 <CreateMessage+0x7f4>)
 8005c16:	9200      	str	r2, [sp, #0]
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	0022      	movs	r2, r4
 8005c1c:	f020 fb2e 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005c20:	4b74      	ldr	r3, [pc, #464]	@ (8005df4 <CreateMessage+0x7f4>)
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7fa faa2 	bl	800016c <strlen>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	b299      	uxth	r1, r3
 8005c2c:	220e      	movs	r2, #14
 8005c2e:	18bb      	adds	r3, r7, r2
 8005c30:	18ba      	adds	r2, r7, r2
 8005c32:	8812      	ldrh	r2, [r2, #0]
 8005c34:	188a      	adds	r2, r1, r2
 8005c36:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c38:	1cfb      	adds	r3, r7, #3
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d019      	beq.n	8005c74 <CreateMessage+0x674>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c40:	4b6c      	ldr	r3, [pc, #432]	@ (8005df4 <CreateMessage+0x7f4>)
 8005c42:	0018      	movs	r0, r3
 8005c44:	f7fa fa92 	bl	800016c <strlen>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	4b69      	ldr	r3, [pc, #420]	@ (8005df4 <CreateMessage+0x7f4>)
 8005c4e:	0011      	movs	r1, r2
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7ff f949 	bl	8004ee8 <ESP_Send>
 8005c56:	0003      	movs	r3, r0
 8005c58:	001a      	movs	r2, r3
 8005c5a:	4b67      	ldr	r3, [pc, #412]	@ (8005df8 <CreateMessage+0x7f8>)
 8005c5c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c5e:	4b67      	ldr	r3, [pc, #412]	@ (8005dfc <CreateMessage+0x7fc>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	001a      	movs	r2, r3
 8005c64:	4b64      	ldr	r3, [pc, #400]	@ (8005df8 <CreateMessage+0x7f8>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	1e5a      	subs	r2, r3, #1
 8005c6c:	4193      	sbcs	r3, r2
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	4b62      	ldr	r3, [pc, #392]	@ (8005dfc <CreateMessage+0x7fc>)
 8005c72:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005c74:	4b62      	ldr	r3, [pc, #392]	@ (8005e00 <CreateMessage+0x800>)
 8005c76:	486d      	ldr	r0, [pc, #436]	@ (8005e2c <CreateMessage+0x82c>)
 8005c78:	220c      	movs	r2, #12
 8005c7a:	0019      	movs	r1, r3
 8005c7c:	f006 fa3a 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005c80:	4b62      	ldr	r3, [pc, #392]	@ (8005e0c <CreateMessage+0x80c>)
 8005c82:	791b      	ldrb	r3, [r3, #4]
 8005c84:	2b34      	cmp	r3, #52	@ 0x34
 8005c86:	d003      	beq.n	8005c90 <CreateMessage+0x690>
 8005c88:	4b60      	ldr	r3, [pc, #384]	@ (8005e0c <CreateMessage+0x80c>)
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	2b35      	cmp	r3, #53	@ 0x35
 8005c8e:	d146      	bne.n	8005d1e <CreateMessage+0x71e>
 8005c90:	4a67      	ldr	r2, [pc, #412]	@ (8005e30 <CreateMessage+0x830>)
 8005c92:	4964      	ldr	r1, [pc, #400]	@ (8005e24 <CreateMessage+0x824>)
 8005c94:	4b5a      	ldr	r3, [pc, #360]	@ (8005e00 <CreateMessage+0x800>)
 8005c96:	0018      	movs	r0, r3
 8005c98:	f7ff fb8a 	bl	80053b0 <isKeyValid>
 8005c9c:	1e03      	subs	r3, r0, #0
 8005c9e:	d03e      	beq.n	8005d1e <CreateMessage+0x71e>
      uint8ArrayToString(Buffer, keybuffer);
 8005ca0:	4a57      	ldr	r2, [pc, #348]	@ (8005e00 <CreateMessage+0x800>)
 8005ca2:	4b52      	ldr	r3, [pc, #328]	@ (8005dec <CreateMessage+0x7ec>)
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7ff fbe2 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005cac:	4b59      	ldr	r3, [pc, #356]	@ (8005e14 <CreateMessage+0x814>)
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	1c18      	adds	r0, r3, #0
 8005cb2:	f7fd fdef 	bl	8003894 <__aeabi_f2d>
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	000b      	movs	r3, r1
 8005cba:	4c4c      	ldr	r4, [pc, #304]	@ (8005dec <CreateMessage+0x7ec>)
 8005cbc:	495a      	ldr	r1, [pc, #360]	@ (8005e28 <CreateMessage+0x828>)
 8005cbe:	484d      	ldr	r0, [pc, #308]	@ (8005df4 <CreateMessage+0x7f4>)
 8005cc0:	9200      	str	r2, [sp, #0]
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	0022      	movs	r2, r4
 8005cc6:	f020 fad9 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005cca:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <CreateMessage+0x7f4>)
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f7fa fa4d 	bl	800016c <strlen>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	b299      	uxth	r1, r3
 8005cd6:	220e      	movs	r2, #14
 8005cd8:	18bb      	adds	r3, r7, r2
 8005cda:	18ba      	adds	r2, r7, r2
 8005cdc:	8812      	ldrh	r2, [r2, #0]
 8005cde:	188a      	adds	r2, r1, r2
 8005ce0:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ce2:	1cfb      	adds	r3, r7, #3
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d019      	beq.n	8005d1e <CreateMessage+0x71e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cea:	4b42      	ldr	r3, [pc, #264]	@ (8005df4 <CreateMessage+0x7f4>)
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7fa fa3d 	bl	800016c <strlen>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8005df4 <CreateMessage+0x7f4>)
 8005cf8:	0011      	movs	r1, r2
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7ff f8f4 	bl	8004ee8 <ESP_Send>
 8005d00:	0003      	movs	r3, r0
 8005d02:	001a      	movs	r2, r3
 8005d04:	4b3c      	ldr	r3, [pc, #240]	@ (8005df8 <CreateMessage+0x7f8>)
 8005d06:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d08:	4b3c      	ldr	r3, [pc, #240]	@ (8005dfc <CreateMessage+0x7fc>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	001a      	movs	r2, r3
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005df8 <CreateMessage+0x7f8>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	4013      	ands	r3, r2
 8005d14:	1e5a      	subs	r2, r3, #1
 8005d16:	4193      	sbcs	r3, r2
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4b38      	ldr	r3, [pc, #224]	@ (8005dfc <CreateMessage+0x7fc>)
 8005d1c:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 8005d1e:	f008 fc29 	bl	800e574 <sen5x_Get_sen5x_enable_state>
 8005d22:	1e03      	subs	r3, r0, #0
 8005d24:	d100      	bne.n	8005d28 <CreateMessage+0x728>
 8005d26:	e150      	b.n	8005fca <CreateMessage+0x9ca>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005d28:	4b35      	ldr	r3, [pc, #212]	@ (8005e00 <CreateMessage+0x800>)
 8005d2a:	4842      	ldr	r0, [pc, #264]	@ (8005e34 <CreateMessage+0x834>)
 8005d2c:	220c      	movs	r2, #12
 8005d2e:	0019      	movs	r1, r3
 8005d30:	f006 f9e0 	bl	800c0f4 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005d34:	4a40      	ldr	r2, [pc, #256]	@ (8005e38 <CreateMessage+0x838>)
 8005d36:	4941      	ldr	r1, [pc, #260]	@ (8005e3c <CreateMessage+0x83c>)
 8005d38:	4b31      	ldr	r3, [pc, #196]	@ (8005e00 <CreateMessage+0x800>)
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f7ff fb38 	bl	80053b0 <isKeyValid>
 8005d40:	1e03      	subs	r3, r0, #0
 8005d42:	d03e      	beq.n	8005dc2 <CreateMessage+0x7c2>
        uint8ArrayToString(Buffer, keybuffer);
 8005d44:	4a2e      	ldr	r2, [pc, #184]	@ (8005e00 <CreateMessage+0x800>)
 8005d46:	4b29      	ldr	r3, [pc, #164]	@ (8005dec <CreateMessage+0x7ec>)
 8005d48:	0011      	movs	r1, r2
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f7ff fb90 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005d50:	4b30      	ldr	r3, [pc, #192]	@ (8005e14 <CreateMessage+0x814>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	1c18      	adds	r0, r3, #0
 8005d56:	f7fd fd9d 	bl	8003894 <__aeabi_f2d>
 8005d5a:	0002      	movs	r2, r0
 8005d5c:	000b      	movs	r3, r1
 8005d5e:	4c23      	ldr	r4, [pc, #140]	@ (8005dec <CreateMessage+0x7ec>)
 8005d60:	4923      	ldr	r1, [pc, #140]	@ (8005df0 <CreateMessage+0x7f0>)
 8005d62:	4824      	ldr	r0, [pc, #144]	@ (8005df4 <CreateMessage+0x7f4>)
 8005d64:	9200      	str	r2, [sp, #0]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	0022      	movs	r2, r4
 8005d6a:	f020 fa87 	bl	802627c <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
        index += strlen(message);
 8005d6e:	4b21      	ldr	r3, [pc, #132]	@ (8005df4 <CreateMessage+0x7f4>)
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7fa f9fb 	bl	800016c <strlen>
 8005d76:	0003      	movs	r3, r0
 8005d78:	b299      	uxth	r1, r3
 8005d7a:	220e      	movs	r2, #14
 8005d7c:	18bb      	adds	r3, r7, r2
 8005d7e:	18ba      	adds	r2, r7, r2
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	188a      	adds	r2, r1, r2
 8005d84:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005d86:	1cfb      	adds	r3, r7, #3
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d019      	beq.n	8005dc2 <CreateMessage+0x7c2>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005d8e:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <CreateMessage+0x7f4>)
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7fa f9eb 	bl	800016c <strlen>
 8005d96:	0003      	movs	r3, r0
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	4b16      	ldr	r3, [pc, #88]	@ (8005df4 <CreateMessage+0x7f4>)
 8005d9c:	0011      	movs	r1, r2
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f7ff f8a2 	bl	8004ee8 <ESP_Send>
 8005da4:	0003      	movs	r3, r0
 8005da6:	001a      	movs	r2, r3
 8005da8:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <CreateMessage+0x7f8>)
 8005daa:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005dac:	4b13      	ldr	r3, [pc, #76]	@ (8005dfc <CreateMessage+0x7fc>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	001a      	movs	r2, r3
 8005db2:	4b11      	ldr	r3, [pc, #68]	@ (8005df8 <CreateMessage+0x7f8>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	4013      	ands	r3, r2
 8005db8:	1e5a      	subs	r2, r3, #1
 8005dba:	4193      	sbcs	r3, r2
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <CreateMessage+0x7fc>)
 8005dc0:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e00 <CreateMessage+0x800>)
 8005dc4:	481e      	ldr	r0, [pc, #120]	@ (8005e40 <CreateMessage+0x840>)
 8005dc6:	220c      	movs	r2, #12
 8005dc8:	0019      	movs	r1, r3
 8005dca:	f006 f993 	bl	800c0f4 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005dce:	4a0c      	ldr	r2, [pc, #48]	@ (8005e00 <CreateMessage+0x800>)
 8005dd0:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <CreateMessage+0x7ec>)
 8005dd2:	0011      	movs	r1, r2
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f7ff fb4b 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005dda:	4b0e      	ldr	r3, [pc, #56]	@ (8005e14 <CreateMessage+0x814>)
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	1c18      	adds	r0, r3, #0
 8005de0:	f7fd fd58 	bl	8003894 <__aeabi_f2d>
 8005de4:	0002      	movs	r2, r0
 8005de6:	000b      	movs	r3, r1
 8005de8:	4c00      	ldr	r4, [pc, #0]	@ (8005dec <CreateMessage+0x7ec>)
 8005dea:	e02b      	b.n	8005e44 <CreateMessage+0x844>
 8005dec:	20000840 	.word	0x20000840
 8005df0:	0802ad14 	.word	0x0802ad14
 8005df4:	200005c4 	.word	0x200005c4
 8005df8:	20000859 	.word	0x20000859
 8005dfc:	20000032 	.word	0x20000032
 8005e00:	20000834 	.word	0x20000834
 8005e04:	08080078 	.word	0x08080078
 8005e08:	200005c0 	.word	0x200005c0
 8005e0c:	200011c4 	.word	0x200011c4
 8005e10:	08080024 	.word	0x08080024
 8005e14:	20000704 	.word	0x20000704
 8005e18:	0802ad34 	.word	0x0802ad34
 8005e1c:	08080170 	.word	0x08080170
 8005e20:	0802ad9c 	.word	0x0802ad9c
 8005e24:	0802ada8 	.word	0x0802ada8
 8005e28:	0802adb0 	.word	0x0802adb0
 8005e2c:	0808017c 	.word	0x0808017c
 8005e30:	0802add0 	.word	0x0802add0
 8005e34:	080800b0 	.word	0x080800b0
 8005e38:	0802addc 	.word	0x0802addc
 8005e3c:	0802ade8 	.word	0x0802ade8
 8005e40:	08080054 	.word	0x08080054
 8005e44:	49ea      	ldr	r1, [pc, #936]	@ (80061f0 <CreateMessage+0xbf0>)
 8005e46:	48eb      	ldr	r0, [pc, #940]	@ (80061f4 <CreateMessage+0xbf4>)
 8005e48:	9200      	str	r2, [sp, #0]
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	0022      	movs	r2, r4
 8005e4e:	f020 fa15 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005e52:	4be8      	ldr	r3, [pc, #928]	@ (80061f4 <CreateMessage+0xbf4>)
 8005e54:	0018      	movs	r0, r3
 8005e56:	f7fa f989 	bl	800016c <strlen>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	b299      	uxth	r1, r3
 8005e5e:	220e      	movs	r2, #14
 8005e60:	18bb      	adds	r3, r7, r2
 8005e62:	18ba      	adds	r2, r7, r2
 8005e64:	8812      	ldrh	r2, [r2, #0]
 8005e66:	188a      	adds	r2, r1, r2
 8005e68:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e6a:	1cfb      	adds	r3, r7, #3
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d019      	beq.n	8005ea6 <CreateMessage+0x8a6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e72:	4be0      	ldr	r3, [pc, #896]	@ (80061f4 <CreateMessage+0xbf4>)
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7fa f979 	bl	800016c <strlen>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	4bdd      	ldr	r3, [pc, #884]	@ (80061f4 <CreateMessage+0xbf4>)
 8005e80:	0011      	movs	r1, r2
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7ff f830 	bl	8004ee8 <ESP_Send>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	4bda      	ldr	r3, [pc, #872]	@ (80061f8 <CreateMessage+0xbf8>)
 8005e8e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e90:	4bda      	ldr	r3, [pc, #872]	@ (80061fc <CreateMessage+0xbfc>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	001a      	movs	r2, r3
 8005e96:	4bd8      	ldr	r3, [pc, #864]	@ (80061f8 <CreateMessage+0xbf8>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	1e5a      	subs	r2, r3, #1
 8005e9e:	4193      	sbcs	r3, r2
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	4bd6      	ldr	r3, [pc, #856]	@ (80061fc <CreateMessage+0xbfc>)
 8005ea4:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005ea6:	4bd6      	ldr	r3, [pc, #856]	@ (8006200 <CreateMessage+0xc00>)
 8005ea8:	48d6      	ldr	r0, [pc, #856]	@ (8006204 <CreateMessage+0xc04>)
 8005eaa:	220c      	movs	r2, #12
 8005eac:	0019      	movs	r1, r3
 8005eae:	f006 f921 	bl	800c0f4 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005eb2:	4ad5      	ldr	r2, [pc, #852]	@ (8006208 <CreateMessage+0xc08>)
 8005eb4:	49d5      	ldr	r1, [pc, #852]	@ (800620c <CreateMessage+0xc0c>)
 8005eb6:	4bd2      	ldr	r3, [pc, #840]	@ (8006200 <CreateMessage+0xc00>)
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f7ff fa79 	bl	80053b0 <isKeyValid>
 8005ebe:	1e03      	subs	r3, r0, #0
 8005ec0:	d03e      	beq.n	8005f40 <CreateMessage+0x940>
        uint8ArrayToString(Buffer, keybuffer);
 8005ec2:	4acf      	ldr	r2, [pc, #828]	@ (8006200 <CreateMessage+0xc00>)
 8005ec4:	4bd2      	ldr	r3, [pc, #840]	@ (8006210 <CreateMessage+0xc10>)
 8005ec6:	0011      	movs	r1, r2
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f7ff fad1 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005ece:	4bd1      	ldr	r3, [pc, #836]	@ (8006214 <CreateMessage+0xc14>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	1c18      	adds	r0, r3, #0
 8005ed4:	f7fd fcde 	bl	8003894 <__aeabi_f2d>
 8005ed8:	0002      	movs	r2, r0
 8005eda:	000b      	movs	r3, r1
 8005edc:	4ccc      	ldr	r4, [pc, #816]	@ (8006210 <CreateMessage+0xc10>)
 8005ede:	49c4      	ldr	r1, [pc, #784]	@ (80061f0 <CreateMessage+0xbf0>)
 8005ee0:	48c4      	ldr	r0, [pc, #784]	@ (80061f4 <CreateMessage+0xbf4>)
 8005ee2:	9200      	str	r2, [sp, #0]
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	0022      	movs	r2, r4
 8005ee8:	f020 f9c8 	bl	802627c <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
        index += strlen(message);
 8005eec:	4bc1      	ldr	r3, [pc, #772]	@ (80061f4 <CreateMessage+0xbf4>)
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7fa f93c 	bl	800016c <strlen>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	b299      	uxth	r1, r3
 8005ef8:	220e      	movs	r2, #14
 8005efa:	18bb      	adds	r3, r7, r2
 8005efc:	18ba      	adds	r2, r7, r2
 8005efe:	8812      	ldrh	r2, [r2, #0]
 8005f00:	188a      	adds	r2, r1, r2
 8005f02:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005f04:	1cfb      	adds	r3, r7, #3
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <CreateMessage+0x940>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005f0c:	4bb9      	ldr	r3, [pc, #740]	@ (80061f4 <CreateMessage+0xbf4>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7fa f92c 	bl	800016c <strlen>
 8005f14:	0003      	movs	r3, r0
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	4bb6      	ldr	r3, [pc, #728]	@ (80061f4 <CreateMessage+0xbf4>)
 8005f1a:	0011      	movs	r1, r2
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f7fe ffe3 	bl	8004ee8 <ESP_Send>
 8005f22:	0003      	movs	r3, r0
 8005f24:	001a      	movs	r2, r3
 8005f26:	4bb4      	ldr	r3, [pc, #720]	@ (80061f8 <CreateMessage+0xbf8>)
 8005f28:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005f2a:	4bb4      	ldr	r3, [pc, #720]	@ (80061fc <CreateMessage+0xbfc>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	001a      	movs	r2, r3
 8005f30:	4bb1      	ldr	r3, [pc, #708]	@ (80061f8 <CreateMessage+0xbf8>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	4013      	ands	r3, r2
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	4193      	sbcs	r3, r2
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	4baf      	ldr	r3, [pc, #700]	@ (80061fc <CreateMessage+0xbfc>)
 8005f3e:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005f40:	4baf      	ldr	r3, [pc, #700]	@ (8006200 <CreateMessage+0xc00>)
 8005f42:	48b5      	ldr	r0, [pc, #724]	@ (8006218 <CreateMessage+0xc18>)
 8005f44:	220c      	movs	r2, #12
 8005f46:	0019      	movs	r1, r3
 8005f48:	f006 f8d4 	bl	800c0f4 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005f4c:	4aac      	ldr	r2, [pc, #688]	@ (8006200 <CreateMessage+0xc00>)
 8005f4e:	4bb0      	ldr	r3, [pc, #704]	@ (8006210 <CreateMessage+0xc10>)
 8005f50:	0011      	movs	r1, r2
 8005f52:	0018      	movs	r0, r3
 8005f54:	f7ff fa8c 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005f58:	4bae      	ldr	r3, [pc, #696]	@ (8006214 <CreateMessage+0xc14>)
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	1c18      	adds	r0, r3, #0
 8005f5e:	f7fd fc99 	bl	8003894 <__aeabi_f2d>
 8005f62:	0002      	movs	r2, r0
 8005f64:	000b      	movs	r3, r1
 8005f66:	4caa      	ldr	r4, [pc, #680]	@ (8006210 <CreateMessage+0xc10>)
 8005f68:	49a1      	ldr	r1, [pc, #644]	@ (80061f0 <CreateMessage+0xbf0>)
 8005f6a:	48a2      	ldr	r0, [pc, #648]	@ (80061f4 <CreateMessage+0xbf4>)
 8005f6c:	9200      	str	r2, [sp, #0]
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	0022      	movs	r2, r4
 8005f72:	f020 f983 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005f76:	4b9f      	ldr	r3, [pc, #636]	@ (80061f4 <CreateMessage+0xbf4>)
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f7fa f8f7 	bl	800016c <strlen>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	b299      	uxth	r1, r3
 8005f82:	220e      	movs	r2, #14
 8005f84:	18bb      	adds	r3, r7, r2
 8005f86:	18ba      	adds	r2, r7, r2
 8005f88:	8812      	ldrh	r2, [r2, #0]
 8005f8a:	188a      	adds	r2, r1, r2
 8005f8c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f8e:	1cfb      	adds	r3, r7, #3
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d019      	beq.n	8005fca <CreateMessage+0x9ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f96:	4b97      	ldr	r3, [pc, #604]	@ (80061f4 <CreateMessage+0xbf4>)
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f7fa f8e7 	bl	800016c <strlen>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	4b94      	ldr	r3, [pc, #592]	@ (80061f4 <CreateMessage+0xbf4>)
 8005fa4:	0011      	movs	r1, r2
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fe ff9e 	bl	8004ee8 <ESP_Send>
 8005fac:	0003      	movs	r3, r0
 8005fae:	001a      	movs	r2, r3
 8005fb0:	4b91      	ldr	r3, [pc, #580]	@ (80061f8 <CreateMessage+0xbf8>)
 8005fb2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fb4:	4b91      	ldr	r3, [pc, #580]	@ (80061fc <CreateMessage+0xbfc>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	001a      	movs	r2, r3
 8005fba:	4b8f      	ldr	r3, [pc, #572]	@ (80061f8 <CreateMessage+0xbf8>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e5a      	subs	r2, r3, #1
 8005fc2:	4193      	sbcs	r3, r2
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80061fc <CreateMessage+0xbfc>)
 8005fc8:	701a      	strb	r2, [r3, #0]
      }
    }
//  }

  if (IsAHT20SensorPresent()) {
 8005fca:	f007 fa3f 	bl	800d44c <IsAHT20SensorPresent>
 8005fce:	1e03      	subs	r3, r0, #0
 8005fd0:	d100      	bne.n	8005fd4 <CreateMessage+0x9d4>
 8005fd2:	e099      	b.n	8006108 <CreateMessage+0xb08>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005fd4:	4b8a      	ldr	r3, [pc, #552]	@ (8006200 <CreateMessage+0xc00>)
 8005fd6:	4891      	ldr	r0, [pc, #580]	@ (800621c <CreateMessage+0xc1c>)
 8005fd8:	220c      	movs	r2, #12
 8005fda:	0019      	movs	r1, r3
 8005fdc:	f006 f88a 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005fe0:	4a8f      	ldr	r2, [pc, #572]	@ (8006220 <CreateMessage+0xc20>)
 8005fe2:	4990      	ldr	r1, [pc, #576]	@ (8006224 <CreateMessage+0xc24>)
 8005fe4:	4b86      	ldr	r3, [pc, #536]	@ (8006200 <CreateMessage+0xc00>)
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7ff f9e2 	bl	80053b0 <isKeyValid>
 8005fec:	1e03      	subs	r3, r0, #0
 8005fee:	d03e      	beq.n	800606e <CreateMessage+0xa6e>
      uint8ArrayToString(Buffer, keybuffer);
 8005ff0:	4a83      	ldr	r2, [pc, #524]	@ (8006200 <CreateMessage+0xc00>)
 8005ff2:	4b87      	ldr	r3, [pc, #540]	@ (8006210 <CreateMessage+0xc10>)
 8005ff4:	0011      	movs	r1, r2
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f7ff fa3a 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005ffc:	4b85      	ldr	r3, [pc, #532]	@ (8006214 <CreateMessage+0xc14>)
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006000:	1c18      	adds	r0, r3, #0
 8006002:	f7fd fc47 	bl	8003894 <__aeabi_f2d>
 8006006:	0002      	movs	r2, r0
 8006008:	000b      	movs	r3, r1
 800600a:	4c81      	ldr	r4, [pc, #516]	@ (8006210 <CreateMessage+0xc10>)
 800600c:	4978      	ldr	r1, [pc, #480]	@ (80061f0 <CreateMessage+0xbf0>)
 800600e:	4879      	ldr	r0, [pc, #484]	@ (80061f4 <CreateMessage+0xbf4>)
 8006010:	9200      	str	r2, [sp, #0]
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	0022      	movs	r2, r4
 8006016:	f020 f931 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 800601a:	4b76      	ldr	r3, [pc, #472]	@ (80061f4 <CreateMessage+0xbf4>)
 800601c:	0018      	movs	r0, r3
 800601e:	f7fa f8a5 	bl	800016c <strlen>
 8006022:	0003      	movs	r3, r0
 8006024:	b299      	uxth	r1, r3
 8006026:	220e      	movs	r2, #14
 8006028:	18bb      	adds	r3, r7, r2
 800602a:	18ba      	adds	r2, r7, r2
 800602c:	8812      	ldrh	r2, [r2, #0]
 800602e:	188a      	adds	r2, r1, r2
 8006030:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006032:	1cfb      	adds	r3, r7, #3
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d019      	beq.n	800606e <CreateMessage+0xa6e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800603a:	4b6e      	ldr	r3, [pc, #440]	@ (80061f4 <CreateMessage+0xbf4>)
 800603c:	0018      	movs	r0, r3
 800603e:	f7fa f895 	bl	800016c <strlen>
 8006042:	0003      	movs	r3, r0
 8006044:	b29a      	uxth	r2, r3
 8006046:	4b6b      	ldr	r3, [pc, #428]	@ (80061f4 <CreateMessage+0xbf4>)
 8006048:	0011      	movs	r1, r2
 800604a:	0018      	movs	r0, r3
 800604c:	f7fe ff4c 	bl	8004ee8 <ESP_Send>
 8006050:	0003      	movs	r3, r0
 8006052:	001a      	movs	r2, r3
 8006054:	4b68      	ldr	r3, [pc, #416]	@ (80061f8 <CreateMessage+0xbf8>)
 8006056:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006058:	4b68      	ldr	r3, [pc, #416]	@ (80061fc <CreateMessage+0xbfc>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	001a      	movs	r2, r3
 800605e:	4b66      	ldr	r3, [pc, #408]	@ (80061f8 <CreateMessage+0xbf8>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	4013      	ands	r3, r2
 8006064:	1e5a      	subs	r2, r3, #1
 8006066:	4193      	sbcs	r3, r2
 8006068:	b2da      	uxtb	r2, r3
 800606a:	4b64      	ldr	r3, [pc, #400]	@ (80061fc <CreateMessage+0xbfc>)
 800606c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 800606e:	4b64      	ldr	r3, [pc, #400]	@ (8006200 <CreateMessage+0xc00>)
 8006070:	486d      	ldr	r0, [pc, #436]	@ (8006228 <CreateMessage+0xc28>)
 8006072:	220c      	movs	r2, #12
 8006074:	0019      	movs	r1, r3
 8006076:	f006 f83d 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 800607a:	4a6c      	ldr	r2, [pc, #432]	@ (800622c <CreateMessage+0xc2c>)
 800607c:	4969      	ldr	r1, [pc, #420]	@ (8006224 <CreateMessage+0xc24>)
 800607e:	4b60      	ldr	r3, [pc, #384]	@ (8006200 <CreateMessage+0xc00>)
 8006080:	0018      	movs	r0, r3
 8006082:	f7ff f995 	bl	80053b0 <isKeyValid>
 8006086:	1e03      	subs	r3, r0, #0
 8006088:	d03e      	beq.n	8006108 <CreateMessage+0xb08>
      uint8ArrayToString(Buffer, keybuffer);
 800608a:	4a5d      	ldr	r2, [pc, #372]	@ (8006200 <CreateMessage+0xc00>)
 800608c:	4b60      	ldr	r3, [pc, #384]	@ (8006210 <CreateMessage+0xc10>)
 800608e:	0011      	movs	r1, r2
 8006090:	0018      	movs	r0, r3
 8006092:	f7ff f9ed 	bl	8005470 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 8006096:	4b5f      	ldr	r3, [pc, #380]	@ (8006214 <CreateMessage+0xc14>)
 8006098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609a:	1c18      	adds	r0, r3, #0
 800609c:	f7fd fbfa 	bl	8003894 <__aeabi_f2d>
 80060a0:	0002      	movs	r2, r0
 80060a2:	000b      	movs	r3, r1
 80060a4:	4c5a      	ldr	r4, [pc, #360]	@ (8006210 <CreateMessage+0xc10>)
 80060a6:	4952      	ldr	r1, [pc, #328]	@ (80061f0 <CreateMessage+0xbf0>)
 80060a8:	4852      	ldr	r0, [pc, #328]	@ (80061f4 <CreateMessage+0xbf4>)
 80060aa:	9200      	str	r2, [sp, #0]
 80060ac:	9301      	str	r3, [sp, #4]
 80060ae:	0022      	movs	r2, r4
 80060b0:	f020 f8e4 	bl	802627c <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 80060b4:	4b4f      	ldr	r3, [pc, #316]	@ (80061f4 <CreateMessage+0xbf4>)
 80060b6:	0018      	movs	r0, r3
 80060b8:	f7fa f858 	bl	800016c <strlen>
 80060bc:	0003      	movs	r3, r0
 80060be:	b299      	uxth	r1, r3
 80060c0:	220e      	movs	r2, #14
 80060c2:	18bb      	adds	r3, r7, r2
 80060c4:	18ba      	adds	r2, r7, r2
 80060c6:	8812      	ldrh	r2, [r2, #0]
 80060c8:	188a      	adds	r2, r1, r2
 80060ca:	801a      	strh	r2, [r3, #0]
      if (send) {
 80060cc:	1cfb      	adds	r3, r7, #3
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d019      	beq.n	8006108 <CreateMessage+0xb08>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80060d4:	4b47      	ldr	r3, [pc, #284]	@ (80061f4 <CreateMessage+0xbf4>)
 80060d6:	0018      	movs	r0, r3
 80060d8:	f7fa f848 	bl	800016c <strlen>
 80060dc:	0003      	movs	r3, r0
 80060de:	b29a      	uxth	r2, r3
 80060e0:	4b44      	ldr	r3, [pc, #272]	@ (80061f4 <CreateMessage+0xbf4>)
 80060e2:	0011      	movs	r1, r2
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7fe feff 	bl	8004ee8 <ESP_Send>
 80060ea:	0003      	movs	r3, r0
 80060ec:	001a      	movs	r2, r3
 80060ee:	4b42      	ldr	r3, [pc, #264]	@ (80061f8 <CreateMessage+0xbf8>)
 80060f0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80060f2:	4b42      	ldr	r3, [pc, #264]	@ (80061fc <CreateMessage+0xbfc>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	001a      	movs	r2, r3
 80060f8:	4b3f      	ldr	r3, [pc, #252]	@ (80061f8 <CreateMessage+0xbf8>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	4013      	ands	r3, r2
 80060fe:	1e5a      	subs	r2, r3, #1
 8006100:	4193      	sbcs	r3, r2
 8006102:	b2da      	uxtb	r2, r3
 8006104:	4b3d      	ldr	r3, [pc, #244]	@ (80061fc <CreateMessage+0xbfc>)
 8006106:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8006108:	f007 f9b4 	bl	800d474 <IsENS160SensorPresent>
 800610c:	1e03      	subs	r3, r0, #0
 800610e:	d100      	bne.n	8006112 <CreateMessage+0xb12>
 8006110:	e0ff      	b.n	8006312 <CreateMessage+0xd12>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8006112:	4b3b      	ldr	r3, [pc, #236]	@ (8006200 <CreateMessage+0xc00>)
 8006114:	4846      	ldr	r0, [pc, #280]	@ (8006230 <CreateMessage+0xc30>)
 8006116:	220c      	movs	r2, #12
 8006118:	0019      	movs	r1, r3
 800611a:	f005 ffeb 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 800611e:	4a45      	ldr	r2, [pc, #276]	@ (8006234 <CreateMessage+0xc34>)
 8006120:	4945      	ldr	r1, [pc, #276]	@ (8006238 <CreateMessage+0xc38>)
 8006122:	4b37      	ldr	r3, [pc, #220]	@ (8006200 <CreateMessage+0xc00>)
 8006124:	0018      	movs	r0, r3
 8006126:	f7ff f943 	bl	80053b0 <isKeyValid>
 800612a:	1e03      	subs	r3, r0, #0
 800612c:	d037      	beq.n	800619e <CreateMessage+0xb9e>
      uint8ArrayToString(Buffer, keybuffer);
 800612e:	4a34      	ldr	r2, [pc, #208]	@ (8006200 <CreateMessage+0xc00>)
 8006130:	4b37      	ldr	r3, [pc, #220]	@ (8006210 <CreateMessage+0xc10>)
 8006132:	0011      	movs	r1, r2
 8006134:	0018      	movs	r0, r3
 8006136:	f7ff f99b 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 800613a:	4b36      	ldr	r3, [pc, #216]	@ (8006214 <CreateMessage+0xc14>)
 800613c:	2255      	movs	r2, #85	@ 0x55
 800613e:	5c9b      	ldrb	r3, [r3, r2]
 8006140:	4a33      	ldr	r2, [pc, #204]	@ (8006210 <CreateMessage+0xc10>)
 8006142:	493e      	ldr	r1, [pc, #248]	@ (800623c <CreateMessage+0xc3c>)
 8006144:	482b      	ldr	r0, [pc, #172]	@ (80061f4 <CreateMessage+0xbf4>)
 8006146:	f020 f899 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 800614a:	4b2a      	ldr	r3, [pc, #168]	@ (80061f4 <CreateMessage+0xbf4>)
 800614c:	0018      	movs	r0, r3
 800614e:	f7fa f80d 	bl	800016c <strlen>
 8006152:	0003      	movs	r3, r0
 8006154:	b299      	uxth	r1, r3
 8006156:	220e      	movs	r2, #14
 8006158:	18bb      	adds	r3, r7, r2
 800615a:	18ba      	adds	r2, r7, r2
 800615c:	8812      	ldrh	r2, [r2, #0]
 800615e:	188a      	adds	r2, r1, r2
 8006160:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006162:	1cfb      	adds	r3, r7, #3
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d019      	beq.n	800619e <CreateMessage+0xb9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800616a:	4b22      	ldr	r3, [pc, #136]	@ (80061f4 <CreateMessage+0xbf4>)
 800616c:	0018      	movs	r0, r3
 800616e:	f7f9 fffd 	bl	800016c <strlen>
 8006172:	0003      	movs	r3, r0
 8006174:	b29a      	uxth	r2, r3
 8006176:	4b1f      	ldr	r3, [pc, #124]	@ (80061f4 <CreateMessage+0xbf4>)
 8006178:	0011      	movs	r1, r2
 800617a:	0018      	movs	r0, r3
 800617c:	f7fe feb4 	bl	8004ee8 <ESP_Send>
 8006180:	0003      	movs	r3, r0
 8006182:	001a      	movs	r2, r3
 8006184:	4b1c      	ldr	r3, [pc, #112]	@ (80061f8 <CreateMessage+0xbf8>)
 8006186:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006188:	4b1c      	ldr	r3, [pc, #112]	@ (80061fc <CreateMessage+0xbfc>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	001a      	movs	r2, r3
 800618e:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <CreateMessage+0xbf8>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	4013      	ands	r3, r2
 8006194:	1e5a      	subs	r2, r3, #1
 8006196:	4193      	sbcs	r3, r2
 8006198:	b2da      	uxtb	r2, r3
 800619a:	4b18      	ldr	r3, [pc, #96]	@ (80061fc <CreateMessage+0xbfc>)
 800619c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 800619e:	4b18      	ldr	r3, [pc, #96]	@ (8006200 <CreateMessage+0xc00>)
 80061a0:	4827      	ldr	r0, [pc, #156]	@ (8006240 <CreateMessage+0xc40>)
 80061a2:	220c      	movs	r2, #12
 80061a4:	0019      	movs	r1, r3
 80061a6:	f005 ffa5 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 80061aa:	4a26      	ldr	r2, [pc, #152]	@ (8006244 <CreateMessage+0xc44>)
 80061ac:	4922      	ldr	r1, [pc, #136]	@ (8006238 <CreateMessage+0xc38>)
 80061ae:	4b14      	ldr	r3, [pc, #80]	@ (8006200 <CreateMessage+0xc00>)
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7ff f8fd 	bl	80053b0 <isKeyValid>
 80061b6:	1e03      	subs	r3, r0, #0
 80061b8:	d065      	beq.n	8006286 <CreateMessage+0xc86>
      uint8ArrayToString(Buffer, keybuffer);
 80061ba:	4a11      	ldr	r2, [pc, #68]	@ (8006200 <CreateMessage+0xc00>)
 80061bc:	4b14      	ldr	r3, [pc, #80]	@ (8006210 <CreateMessage+0xc10>)
 80061be:	0011      	movs	r1, r2
 80061c0:	0018      	movs	r0, r3
 80061c2:	f7ff f955 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 80061c6:	4b13      	ldr	r3, [pc, #76]	@ (8006214 <CreateMessage+0xc14>)
 80061c8:	224a      	movs	r2, #74	@ 0x4a
 80061ca:	5a9b      	ldrh	r3, [r3, r2]
 80061cc:	4a10      	ldr	r2, [pc, #64]	@ (8006210 <CreateMessage+0xc10>)
 80061ce:	491b      	ldr	r1, [pc, #108]	@ (800623c <CreateMessage+0xc3c>)
 80061d0:	4808      	ldr	r0, [pc, #32]	@ (80061f4 <CreateMessage+0xbf4>)
 80061d2:	f020 f853 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 80061d6:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <CreateMessage+0xbf4>)
 80061d8:	0018      	movs	r0, r3
 80061da:	f7f9 ffc7 	bl	800016c <strlen>
 80061de:	0003      	movs	r3, r0
 80061e0:	b299      	uxth	r1, r3
 80061e2:	220e      	movs	r2, #14
 80061e4:	18bb      	adds	r3, r7, r2
 80061e6:	18ba      	adds	r2, r7, r2
 80061e8:	8812      	ldrh	r2, [r2, #0]
 80061ea:	188a      	adds	r2, r1, r2
 80061ec:	e02c      	b.n	8006248 <CreateMessage+0xc48>
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	0802ad14 	.word	0x0802ad14
 80061f4:	200005c4 	.word	0x200005c4
 80061f8:	20000859 	.word	0x20000859
 80061fc:	20000032 	.word	0x20000032
 8006200:	20000834 	.word	0x20000834
 8006204:	080800bc 	.word	0x080800bc
 8006208:	0802addc 	.word	0x0802addc
 800620c:	0802adec 	.word	0x0802adec
 8006210:	20000840 	.word	0x20000840
 8006214:	20000704 	.word	0x20000704
 8006218:	08080060 	.word	0x08080060
 800621c:	080800c8 	.word	0x080800c8
 8006220:	0802ad9c 	.word	0x0802ad9c
 8006224:	0802adf0 	.word	0x0802adf0
 8006228:	080800d4 	.word	0x080800d4
 800622c:	0802add0 	.word	0x0802add0
 8006230:	080800ec 	.word	0x080800ec
 8006234:	0802adf8 	.word	0x0802adf8
 8006238:	0802ae0c 	.word	0x0802ae0c
 800623c:	0802ad34 	.word	0x0802ad34
 8006240:	080800f8 	.word	0x080800f8
 8006244:	0802ae14 	.word	0x0802ae14
 8006248:	801a      	strh	r2, [r3, #0]
      if (send) {
 800624a:	1cfb      	adds	r3, r7, #3
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d019      	beq.n	8006286 <CreateMessage+0xc86>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006252:	4b5e      	ldr	r3, [pc, #376]	@ (80063cc <CreateMessage+0xdcc>)
 8006254:	0018      	movs	r0, r3
 8006256:	f7f9 ff89 	bl	800016c <strlen>
 800625a:	0003      	movs	r3, r0
 800625c:	b29a      	uxth	r2, r3
 800625e:	4b5b      	ldr	r3, [pc, #364]	@ (80063cc <CreateMessage+0xdcc>)
 8006260:	0011      	movs	r1, r2
 8006262:	0018      	movs	r0, r3
 8006264:	f7fe fe40 	bl	8004ee8 <ESP_Send>
 8006268:	0003      	movs	r3, r0
 800626a:	001a      	movs	r2, r3
 800626c:	4b58      	ldr	r3, [pc, #352]	@ (80063d0 <CreateMessage+0xdd0>)
 800626e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006270:	4b58      	ldr	r3, [pc, #352]	@ (80063d4 <CreateMessage+0xdd4>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	001a      	movs	r2, r3
 8006276:	4b56      	ldr	r3, [pc, #344]	@ (80063d0 <CreateMessage+0xdd0>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	4013      	ands	r3, r2
 800627c:	1e5a      	subs	r2, r3, #1
 800627e:	4193      	sbcs	r3, r2
 8006280:	b2da      	uxtb	r2, r3
 8006282:	4b54      	ldr	r3, [pc, #336]	@ (80063d4 <CreateMessage+0xdd4>)
 8006284:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8006286:	4b54      	ldr	r3, [pc, #336]	@ (80063d8 <CreateMessage+0xdd8>)
 8006288:	4854      	ldr	r0, [pc, #336]	@ (80063dc <CreateMessage+0xddc>)
 800628a:	220c      	movs	r2, #12
 800628c:	0019      	movs	r1, r3
 800628e:	f005 ff31 	bl	800c0f4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8006292:	4a53      	ldr	r2, [pc, #332]	@ (80063e0 <CreateMessage+0xde0>)
 8006294:	4953      	ldr	r1, [pc, #332]	@ (80063e4 <CreateMessage+0xde4>)
 8006296:	4b50      	ldr	r3, [pc, #320]	@ (80063d8 <CreateMessage+0xdd8>)
 8006298:	0018      	movs	r0, r3
 800629a:	f7ff f889 	bl	80053b0 <isKeyValid>
 800629e:	1e03      	subs	r3, r0, #0
 80062a0:	d037      	beq.n	8006312 <CreateMessage+0xd12>
      uint8ArrayToString(Buffer, keybuffer);
 80062a2:	4a4d      	ldr	r2, [pc, #308]	@ (80063d8 <CreateMessage+0xdd8>)
 80062a4:	4b50      	ldr	r3, [pc, #320]	@ (80063e8 <CreateMessage+0xde8>)
 80062a6:	0011      	movs	r1, r2
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7ff f8e1 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 80062ae:	4b4f      	ldr	r3, [pc, #316]	@ (80063ec <CreateMessage+0xdec>)
 80062b0:	2252      	movs	r2, #82	@ 0x52
 80062b2:	5a9b      	ldrh	r3, [r3, r2]
 80062b4:	4a4c      	ldr	r2, [pc, #304]	@ (80063e8 <CreateMessage+0xde8>)
 80062b6:	494e      	ldr	r1, [pc, #312]	@ (80063f0 <CreateMessage+0xdf0>)
 80062b8:	4844      	ldr	r0, [pc, #272]	@ (80063cc <CreateMessage+0xdcc>)
 80062ba:	f01f ffdf 	bl	802627c <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 80062be:	4b43      	ldr	r3, [pc, #268]	@ (80063cc <CreateMessage+0xdcc>)
 80062c0:	0018      	movs	r0, r3
 80062c2:	f7f9 ff53 	bl	800016c <strlen>
 80062c6:	0003      	movs	r3, r0
 80062c8:	b299      	uxth	r1, r3
 80062ca:	220e      	movs	r2, #14
 80062cc:	18bb      	adds	r3, r7, r2
 80062ce:	18ba      	adds	r2, r7, r2
 80062d0:	8812      	ldrh	r2, [r2, #0]
 80062d2:	188a      	adds	r2, r1, r2
 80062d4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80062d6:	1cfb      	adds	r3, r7, #3
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d019      	beq.n	8006312 <CreateMessage+0xd12>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80062de:	4b3b      	ldr	r3, [pc, #236]	@ (80063cc <CreateMessage+0xdcc>)
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7f9 ff43 	bl	800016c <strlen>
 80062e6:	0003      	movs	r3, r0
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	4b38      	ldr	r3, [pc, #224]	@ (80063cc <CreateMessage+0xdcc>)
 80062ec:	0011      	movs	r1, r2
 80062ee:	0018      	movs	r0, r3
 80062f0:	f7fe fdfa 	bl	8004ee8 <ESP_Send>
 80062f4:	0003      	movs	r3, r0
 80062f6:	001a      	movs	r2, r3
 80062f8:	4b35      	ldr	r3, [pc, #212]	@ (80063d0 <CreateMessage+0xdd0>)
 80062fa:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80062fc:	4b35      	ldr	r3, [pc, #212]	@ (80063d4 <CreateMessage+0xdd4>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	001a      	movs	r2, r3
 8006302:	4b33      	ldr	r3, [pc, #204]	@ (80063d0 <CreateMessage+0xdd0>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	4013      	ands	r3, r2
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	4193      	sbcs	r3, r2
 800630c:	b2da      	uxtb	r2, r3
 800630e:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <CreateMessage+0xdd4>)
 8006310:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8006312:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <CreateMessage+0xdd8>)
 8006314:	4837      	ldr	r0, [pc, #220]	@ (80063f4 <CreateMessage+0xdf4>)
 8006316:	220c      	movs	r2, #12
 8006318:	0019      	movs	r1, r3
 800631a:	f005 feeb 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800631e:	4a2e      	ldr	r2, [pc, #184]	@ (80063d8 <CreateMessage+0xdd8>)
 8006320:	4b31      	ldr	r3, [pc, #196]	@ (80063e8 <CreateMessage+0xde8>)
 8006322:	0011      	movs	r1, r2
 8006324:	0018      	movs	r0, r3
 8006326:	f7ff f8a3 	bl	8005470 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 800632a:	4b33      	ldr	r3, [pc, #204]	@ (80063f8 <CreateMessage+0xdf8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	1c18      	adds	r0, r3, #0
 8006330:	f7fd fab0 	bl	8003894 <__aeabi_f2d>
 8006334:	0002      	movs	r2, r0
 8006336:	000b      	movs	r3, r1
 8006338:	4c2b      	ldr	r4, [pc, #172]	@ (80063e8 <CreateMessage+0xde8>)
 800633a:	4930      	ldr	r1, [pc, #192]	@ (80063fc <CreateMessage+0xdfc>)
 800633c:	4823      	ldr	r0, [pc, #140]	@ (80063cc <CreateMessage+0xdcc>)
 800633e:	9200      	str	r2, [sp, #0]
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	0022      	movs	r2, r4
 8006344:	f01f ff9a 	bl	802627c <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8006348:	4b20      	ldr	r3, [pc, #128]	@ (80063cc <CreateMessage+0xdcc>)
 800634a:	0018      	movs	r0, r3
 800634c:	f7f9 ff0e 	bl	800016c <strlen>
 8006350:	0002      	movs	r2, r0
 8006352:	4b1e      	ldr	r3, [pc, #120]	@ (80063cc <CreateMessage+0xdcc>)
 8006354:	18d3      	adds	r3, r2, r3
 8006356:	4a2a      	ldr	r2, [pc, #168]	@ (8006400 <CreateMessage+0xe00>)
 8006358:	0011      	movs	r1, r2
 800635a:	0018      	movs	r0, r3
 800635c:	f01f ff8e 	bl	802627c <siprintf>
  index += strlen(message);
 8006360:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <CreateMessage+0xdcc>)
 8006362:	0018      	movs	r0, r3
 8006364:	f7f9 ff02 	bl	800016c <strlen>
 8006368:	0003      	movs	r3, r0
 800636a:	b299      	uxth	r1, r3
 800636c:	220e      	movs	r2, #14
 800636e:	18bb      	adds	r3, r7, r2
 8006370:	18ba      	adds	r2, r7, r2
 8006372:	8812      	ldrh	r2, [r2, #0]
 8006374:	188a      	adds	r2, r1, r2
 8006376:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006378:	1cfb      	adds	r3, r7, #3
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d019      	beq.n	80063b4 <CreateMessage+0xdb4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006380:	4b12      	ldr	r3, [pc, #72]	@ (80063cc <CreateMessage+0xdcc>)
 8006382:	0018      	movs	r0, r3
 8006384:	f7f9 fef2 	bl	800016c <strlen>
 8006388:	0003      	movs	r3, r0
 800638a:	b29a      	uxth	r2, r3
 800638c:	4b0f      	ldr	r3, [pc, #60]	@ (80063cc <CreateMessage+0xdcc>)
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f7fe fda9 	bl	8004ee8 <ESP_Send>
 8006396:	0003      	movs	r3, r0
 8006398:	001a      	movs	r2, r3
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <CreateMessage+0xdd0>)
 800639c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800639e:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <CreateMessage+0xdd4>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	001a      	movs	r2, r3
 80063a4:	4b0a      	ldr	r3, [pc, #40]	@ (80063d0 <CreateMessage+0xdd0>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	4013      	ands	r3, r2
 80063aa:	1e5a      	subs	r2, r3, #1
 80063ac:	4193      	sbcs	r3, r2
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	4b08      	ldr	r3, [pc, #32]	@ (80063d4 <CreateMessage+0xdd4>)
 80063b2:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80063b4:	4b07      	ldr	r3, [pc, #28]	@ (80063d4 <CreateMessage+0xdd4>)
 80063b6:	781a      	ldrb	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	701a      	strb	r2, [r3, #0]
  return index;
 80063bc:	230e      	movs	r3, #14
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	881b      	ldrh	r3, [r3, #0]
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b004      	add	sp, #16
 80063c8:	bdb0      	pop	{r4, r5, r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	200005c4 	.word	0x200005c4
 80063d0:	20000859 	.word	0x20000859
 80063d4:	20000032 	.word	0x20000032
 80063d8:	20000834 	.word	0x20000834
 80063dc:	08080104 	.word	0x08080104
 80063e0:	0802ae1c 	.word	0x0802ae1c
 80063e4:	0802ae0c 	.word	0x0802ae0c
 80063e8:	20000840 	.word	0x20000840
 80063ec:	20000704 	.word	0x20000704
 80063f0:	0802ad34 	.word	0x0802ad34
 80063f4:	0808006c 	.word	0x0808006c
 80063f8:	20002160 	.word	0x20002160
 80063fc:	0802ad14 	.word	0x0802ad14
 8006400:	0802ae24 	.word	0x0802ae24

08006404 <StartProg>:

void StartProg(){
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8006408:	2064      	movs	r0, #100	@ 0x64
 800640a:	f00e fa8f 	bl	801492c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800640e:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <StartProg+0x60>)
 8006410:	2200      	movs	r2, #0
 8006412:	2101      	movs	r1, #1
 8006414:	0018      	movs	r0, r3
 8006416:	f00f fcf2 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800641a:	2064      	movs	r0, #100	@ 0x64
 800641c:	f00e fa86 	bl	801492c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006420:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <StartProg+0x60>)
 8006422:	2200      	movs	r2, #0
 8006424:	2102      	movs	r1, #2
 8006426:	0018      	movs	r0, r3
 8006428:	f00f fce9 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800642c:	23fa      	movs	r3, #250	@ 0xfa
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	0018      	movs	r0, r3
 8006432:	f00e fa7b 	bl	801492c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <StartProg+0x60>)
 8006438:	2201      	movs	r2, #1
 800643a:	2101      	movs	r1, #1
 800643c:	0018      	movs	r0, r3
 800643e:	f00f fcde 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006442:	23fa      	movs	r3, #250	@ 0xfa
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	0018      	movs	r0, r3
 8006448:	f00e fa70 	bl	801492c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800644c:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <StartProg+0x60>)
 800644e:	2201      	movs	r2, #1
 8006450:	2102      	movs	r1, #2
 8006452:	0018      	movs	r0, r3
 8006454:	f00f fcd3 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006458:	2028      	movs	r0, #40	@ 0x28
 800645a:	f00e fa67 	bl	801492c <HAL_Delay>
}
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	50001c00 	.word	0x50001c00

08006468 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646a:	b0d9      	sub	sp, #356	@ 0x164
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	0008      	movs	r0, r1
 8006472:	0011      	movs	r1, r2
 8006474:	4bab      	ldr	r3, [pc, #684]	@ (8006724 <ParseBuffer+0x2bc>)
 8006476:	24b0      	movs	r4, #176	@ 0xb0
 8006478:	0064      	lsls	r4, r4, #1
 800647a:	191b      	adds	r3, r3, r4
 800647c:	19db      	adds	r3, r3, r7
 800647e:	1c02      	adds	r2, r0, #0
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	4ba9      	ldr	r3, [pc, #676]	@ (8006728 <ParseBuffer+0x2c0>)
 8006484:	191b      	adds	r3, r3, r4
 8006486:	19db      	adds	r3, r3, r7
 8006488:	1c0a      	adds	r2, r1, #0
 800648a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800648c:	2380      	movs	r3, #128	@ 0x80
 800648e:	005a      	lsls	r2, r3, #1
 8006490:	2348      	movs	r3, #72	@ 0x48
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	2100      	movs	r1, #0
 8006496:	0018      	movs	r0, r3
 8006498:	f020 f838 	bl	802650c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800649c:	2360      	movs	r3, #96	@ 0x60
 800649e:	33ff      	adds	r3, #255	@ 0xff
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	2203      	movs	r2, #3
 80064a4:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80064a6:	23ae      	movs	r3, #174	@ 0xae
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	2200      	movs	r2, #0
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	e013      	b.n	80064da <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80064b2:	20ae      	movs	r0, #174	@ 0xae
 80064b4:	0040      	lsls	r0, r0, #1
 80064b6:	183b      	adds	r3, r7, r0
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	18d2      	adds	r2, r2, r3
 80064be:	183b      	adds	r3, r7, r0
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	7811      	ldrb	r1, [r2, #0]
 80064c4:	4a99      	ldr	r2, [pc, #612]	@ (800672c <ParseBuffer+0x2c4>)
 80064c6:	24b0      	movs	r4, #176	@ 0xb0
 80064c8:	0064      	lsls	r4, r4, #1
 80064ca:	1912      	adds	r2, r2, r4
 80064cc:	19d2      	adds	r2, r2, r7
 80064ce:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80064d0:	183b      	adds	r3, r7, r0
 80064d2:	881a      	ldrh	r2, [r3, #0]
 80064d4:	183b      	adds	r3, r7, r0
 80064d6:	3201      	adds	r2, #1
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	23ae      	movs	r3, #174	@ 0xae
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	18fa      	adds	r2, r7, r3
 80064e0:	4b90      	ldr	r3, [pc, #576]	@ (8006724 <ParseBuffer+0x2bc>)
 80064e2:	21b0      	movs	r1, #176	@ 0xb0
 80064e4:	0049      	lsls	r1, r1, #1
 80064e6:	185b      	adds	r3, r3, r1
 80064e8:	19db      	adds	r3, r3, r7
 80064ea:	8812      	ldrh	r2, [r2, #0]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3df      	bcc.n	80064b2 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80064f2:	4b8c      	ldr	r3, [pc, #560]	@ (8006724 <ParseBuffer+0x2bc>)
 80064f4:	185b      	adds	r3, r3, r1
 80064f6:	19db      	adds	r3, r3, r7
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	4a8c      	ldr	r2, [pc, #560]	@ (800672c <ParseBuffer+0x2c4>)
 80064fc:	1852      	adds	r2, r2, r1
 80064fe:	19d2      	adds	r2, r2, r7
 8006500:	2100      	movs	r1, #0
 8006502:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8006504:	f00d fd1a 	bl	8013f3c <GetVerboseLevel>
 8006508:	0003      	movs	r3, r0
 800650a:	2b03      	cmp	r3, #3
 800650c:	d115      	bne.n	800653a <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 800650e:	4b88      	ldr	r3, [pc, #544]	@ (8006730 <ParseBuffer+0x2c8>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <ParseBuffer+0xc4>
 8006516:	f003 fb5d 	bl	8009bd4 <Check_USB_PowerOn>
 800651a:	1e03      	subs	r3, r0, #0
 800651c:	d006      	beq.n	800652c <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 800651e:	2348      	movs	r3, #72	@ 0x48
 8006520:	18fa      	adds	r2, r7, r3
 8006522:	4b84      	ldr	r3, [pc, #528]	@ (8006734 <ParseBuffer+0x2cc>)
 8006524:	0011      	movs	r1, r2
 8006526:	0018      	movs	r0, r3
 8006528:	f002 fa9a 	bl	8008a60 <printf_USB>
  }
  printf("Receive ParseBuffer: %s\r\n", tempBuf );
 800652c:	2348      	movs	r3, #72	@ 0x48
 800652e:	18fa      	adds	r2, r7, r3
 8006530:	4b81      	ldr	r3, [pc, #516]	@ (8006738 <ParseBuffer+0x2d0>)
 8006532:	0011      	movs	r1, r2
 8006534:	0018      	movs	r0, r3
 8006536:	f01f fe31 	bl	802619c <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	26ac      	movs	r6, #172	@ 0xac
 800653e:	0076      	lsls	r6, r6, #1
 8006540:	19ba      	adds	r2, r7, r6
 8006542:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8006544:	4b7d      	ldr	r3, [pc, #500]	@ (800673c <ParseBuffer+0x2d4>)
 8006546:	25b0      	movs	r5, #176	@ 0xb0
 8006548:	006d      	lsls	r5, r5, #1
 800654a:	195b      	adds	r3, r3, r5
 800654c:	19db      	adds	r3, r3, r7
 800654e:	4a7c      	ldr	r2, [pc, #496]	@ (8006740 <ParseBuffer+0x2d8>)
 8006550:	8811      	ldrh	r1, [r2, #0]
 8006552:	8019      	strh	r1, [r3, #0]
 8006554:	7892      	ldrb	r2, [r2, #2]
 8006556:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006558:	4b7a      	ldr	r3, [pc, #488]	@ (8006744 <ParseBuffer+0x2dc>)
 800655a:	195b      	adds	r3, r3, r5
 800655c:	19db      	adds	r3, r3, r7
 800655e:	4a7a      	ldr	r2, [pc, #488]	@ (8006748 <ParseBuffer+0x2e0>)
 8006560:	6811      	ldr	r1, [r2, #0]
 8006562:	6019      	str	r1, [r3, #0]
 8006564:	8892      	ldrh	r2, [r2, #4]
 8006566:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006568:	4b78      	ldr	r3, [pc, #480]	@ (800674c <ParseBuffer+0x2e4>)
 800656a:	195b      	adds	r3, r3, r5
 800656c:	19db      	adds	r3, r3, r7
 800656e:	4a78      	ldr	r2, [pc, #480]	@ (8006750 <ParseBuffer+0x2e8>)
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006576:	4b77      	ldr	r3, [pc, #476]	@ (8006754 <ParseBuffer+0x2ec>)
 8006578:	195b      	adds	r3, r3, r5
 800657a:	19db      	adds	r3, r3, r7
 800657c:	4a76      	ldr	r2, [pc, #472]	@ (8006758 <ParseBuffer+0x2f0>)
 800657e:	6811      	ldr	r1, [r2, #0]
 8006580:	6019      	str	r1, [r3, #0]
 8006582:	8892      	ldrh	r2, [r2, #4]
 8006584:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006586:	4b75      	ldr	r3, [pc, #468]	@ (800675c <ParseBuffer+0x2f4>)
 8006588:	195b      	adds	r3, r3, r5
 800658a:	19db      	adds	r3, r3, r7
 800658c:	223e      	movs	r2, #62	@ 0x3e
 800658e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8006590:	4b73      	ldr	r3, [pc, #460]	@ (8006760 <ParseBuffer+0x2f8>)
 8006592:	195b      	adds	r3, r3, r5
 8006594:	19db      	adds	r3, r3, r7
 8006596:	4a73      	ldr	r2, [pc, #460]	@ (8006764 <ParseBuffer+0x2fc>)
 8006598:	ca13      	ldmia	r2!, {r0, r1, r4}
 800659a:	c313      	stmia	r3!, {r0, r1, r4}
 800659c:	8811      	ldrh	r1, [r2, #0]
 800659e:	8019      	strh	r1, [r3, #0]
 80065a0:	7892      	ldrb	r2, [r2, #2]
 80065a2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80065a4:	4b70      	ldr	r3, [pc, #448]	@ (8006768 <ParseBuffer+0x300>)
 80065a6:	195b      	adds	r3, r3, r5
 80065a8:	19db      	adds	r3, r3, r7
 80065aa:	4a70      	ldr	r2, [pc, #448]	@ (800676c <ParseBuffer+0x304>)
 80065ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80065ae:	c313      	stmia	r3!, {r0, r1, r4}
 80065b0:	8812      	ldrh	r2, [r2, #0]
 80065b2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80065b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006728 <ParseBuffer+0x2c0>)
 80065b6:	195b      	adds	r3, r3, r5
 80065b8:	19db      	adds	r3, r3, r7
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, OK);
 80065c0:	2344      	movs	r3, #68	@ 0x44
 80065c2:	18fa      	adds	r2, r7, r3
 80065c4:	2348      	movs	r3, #72	@ 0x48
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f01f ffd9 	bl	8026582 <strstr>
 80065d0:	0003      	movs	r3, r0
 80065d2:	19ba      	adds	r2, r7, r6
 80065d4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80065d6:	4b54      	ldr	r3, [pc, #336]	@ (8006728 <ParseBuffer+0x2c0>)
 80065d8:	22b0      	movs	r2, #176	@ 0xb0
 80065da:	0052      	lsls	r2, r2, #1
 80065dc:	189b      	adds	r3, r3, r2
 80065de:	19db      	adds	r3, r3, r7
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10c      	bne.n	8006600 <ParseBuffer+0x198>
    ParsePoint = strstr(tempBuf, ready);
 80065e6:	232c      	movs	r3, #44	@ 0x2c
 80065e8:	18fa      	adds	r2, r7, r3
 80065ea:	2348      	movs	r3, #72	@ 0x48
 80065ec:	18fb      	adds	r3, r7, r3
 80065ee:	0011      	movs	r1, r2
 80065f0:	0018      	movs	r0, r3
 80065f2:	f01f ffc6 	bl	8026582 <strstr>
 80065f6:	0003      	movs	r3, r0
 80065f8:	22ac      	movs	r2, #172	@ 0xac
 80065fa:	0052      	lsls	r2, r2, #1
 80065fc:	18ba      	adds	r2, r7, r2
 80065fe:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8006600:	4b49      	ldr	r3, [pc, #292]	@ (8006728 <ParseBuffer+0x2c0>)
 8006602:	22b0      	movs	r2, #176	@ 0xb0
 8006604:	0052      	lsls	r2, r2, #1
 8006606:	189b      	adds	r3, r3, r2
 8006608:	19db      	adds	r3, r3, r7
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d10c      	bne.n	800662a <ParseBuffer+0x1c2>
    ParsePoint = strstr(tempBuf, start);
 8006610:	2328      	movs	r3, #40	@ 0x28
 8006612:	18fa      	adds	r2, r7, r3
 8006614:	2348      	movs	r3, #72	@ 0x48
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	0011      	movs	r1, r2
 800661a:	0018      	movs	r0, r3
 800661c:	f01f ffb1 	bl	8026582 <strstr>
 8006620:	0003      	movs	r3, r0
 8006622:	22ac      	movs	r2, #172	@ 0xac
 8006624:	0052      	lsls	r2, r2, #1
 8006626:	18ba      	adds	r2, r7, r2
 8006628:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800662a:	4b3f      	ldr	r3, [pc, #252]	@ (8006728 <ParseBuffer+0x2c0>)
 800662c:	22b0      	movs	r2, #176	@ 0xb0
 800662e:	0052      	lsls	r2, r2, #1
 8006630:	189b      	adds	r3, r3, r2
 8006632:	19db      	adds	r3, r3, r7
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b05      	cmp	r3, #5
 8006638:	d10c      	bne.n	8006654 <ParseBuffer+0x1ec>
    ParsePoint = strstr(tempBuf, TIME);
 800663a:	2308      	movs	r3, #8
 800663c:	18fa      	adds	r2, r7, r3
 800663e:	2348      	movs	r3, #72	@ 0x48
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	0011      	movs	r1, r2
 8006644:	0018      	movs	r0, r3
 8006646:	f01f ff9c 	bl	8026582 <strstr>
 800664a:	0003      	movs	r3, r0
 800664c:	22ac      	movs	r2, #172	@ 0xac
 800664e:	0052      	lsls	r2, r2, #1
 8006650:	18ba      	adds	r2, r7, r2
 8006652:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006654:	233c      	movs	r3, #60	@ 0x3c
 8006656:	18fa      	adds	r2, r7, r3
 8006658:	2448      	movs	r4, #72	@ 0x48
 800665a:	193b      	adds	r3, r7, r4
 800665c:	0011      	movs	r1, r2
 800665e:	0018      	movs	r0, r3
 8006660:	f01f ff8f 	bl	8026582 <strstr>
 8006664:	0003      	movs	r3, r0
 8006666:	22aa      	movs	r2, #170	@ 0xaa
 8006668:	0052      	lsls	r2, r2, #1
 800666a:	18ba      	adds	r2, r7, r2
 800666c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800666e:	2318      	movs	r3, #24
 8006670:	18fa      	adds	r2, r7, r3
 8006672:	193b      	adds	r3, r7, r4
 8006674:	0011      	movs	r1, r2
 8006676:	0018      	movs	r0, r3
 8006678:	f01f ff83 	bl	8026582 <strstr>
 800667c:	0003      	movs	r3, r0
 800667e:	22a8      	movs	r2, #168	@ 0xa8
 8006680:	0052      	lsls	r2, r2, #1
 8006682:	18ba      	adds	r2, r7, r2
 8006684:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 8006686:	4a3a      	ldr	r2, [pc, #232]	@ (8006770 <ParseBuffer+0x308>)
 8006688:	193b      	adds	r3, r7, r4
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f01f ff78 	bl	8026582 <strstr>
 8006692:	0003      	movs	r3, r0
 8006694:	22a6      	movs	r2, #166	@ 0xa6
 8006696:	0052      	lsls	r2, r2, #1
 8006698:	18ba      	adds	r2, r7, r2
 800669a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800669c:	2334      	movs	r3, #52	@ 0x34
 800669e:	18fa      	adds	r2, r7, r3
 80066a0:	193b      	adds	r3, r7, r4
 80066a2:	0011      	movs	r1, r2
 80066a4:	0018      	movs	r0, r3
 80066a6:	f01f ff6c 	bl	8026582 <strstr>
 80066aa:	0003      	movs	r3, r0
 80066ac:	22a4      	movs	r2, #164	@ 0xa4
 80066ae:	0052      	lsls	r2, r2, #1
 80066b0:	18ba      	adds	r2, r7, r2
 80066b2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80066b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006724 <ParseBuffer+0x2bc>)
 80066b6:	21b0      	movs	r1, #176	@ 0xb0
 80066b8:	0049      	lsls	r1, r1, #1
 80066ba:	185b      	adds	r3, r3, r1
 80066bc:	19db      	adds	r3, r3, r7
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d800      	bhi.n	80066c6 <ParseBuffer+0x25e>
 80066c4:	e0b5      	b.n	8006832 <ParseBuffer+0x3ca>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80066c6:	22ac      	movs	r2, #172	@ 0xac
 80066c8:	0052      	lsls	r2, r2, #1
 80066ca:	18bb      	adds	r3, r7, r2
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d056      	beq.n	8006780 <ParseBuffer+0x318>
 80066d2:	18bb      	adds	r3, r7, r2
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b4f      	cmp	r3, #79	@ 0x4f
 80066da:	d151      	bne.n	8006780 <ParseBuffer+0x318>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80066dc:	2360      	movs	r3, #96	@ 0x60
 80066de:	33ff      	adds	r3, #255	@ 0xff
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80066e6:	4b23      	ldr	r3, [pc, #140]	@ (8006774 <ParseBuffer+0x30c>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b12      	cmp	r3, #18
 80066ec:	d148      	bne.n	8006780 <ParseBuffer+0x318>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80066ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <ParseBuffer+0x2bc>)
 80066f0:	185b      	adds	r3, r3, r1
 80066f2:	19db      	adds	r3, r3, r7
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80066f8:	d10b      	bne.n	8006712 <ParseBuffer+0x2aa>
 80066fa:	4b0c      	ldr	r3, [pc, #48]	@ (800672c <ParseBuffer+0x2c4>)
 80066fc:	185b      	adds	r3, r3, r1
 80066fe:	19db      	adds	r3, r3, r7
 8006700:	2221      	movs	r2, #33	@ 0x21
 8006702:	5c9b      	ldrb	r3, [r3, r2]
 8006704:	2b32      	cmp	r3, #50	@ 0x32
 8006706:	d104      	bne.n	8006712 <ParseBuffer+0x2aa>
          ParseTime(tempBuf);
 8006708:	193b      	adds	r3, r7, r4
 800670a:	0018      	movs	r0, r3
 800670c:	f003 fd10 	bl	800a130 <ParseTime>
 8006710:	e036      	b.n	8006780 <ParseBuffer+0x318>
        }
        else {
          Error("Error getting time");
 8006712:	4a19      	ldr	r2, [pc, #100]	@ (8006778 <ParseBuffer+0x310>)
 8006714:	4b19      	ldr	r3, [pc, #100]	@ (800677c <ParseBuffer+0x314>)
 8006716:	0019      	movs	r1, r3
 8006718:	2001      	movs	r0, #1
 800671a:	f00d fb85 	bl	8013e28 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800671e:	2306      	movs	r3, #6
 8006720:	e08b      	b.n	800683a <ParseBuffer+0x3d2>
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	fffffea2 	.word	0xfffffea2
 8006728:	fffffea1 	.word	0xfffffea1
 800672c:	fffffee8 	.word	0xfffffee8
 8006730:	200010f7 	.word	0x200010f7
 8006734:	0802ae28 	.word	0x0802ae28
 8006738:	0802ae30 	.word	0x0802ae30
 800673c:	fffffee4 	.word	0xfffffee4
 8006740:	0802ae60 	.word	0x0802ae60
 8006744:	fffffedc 	.word	0xfffffedc
 8006748:	0802ae64 	.word	0x0802ae64
 800674c:	fffffed4 	.word	0xfffffed4
 8006750:	4c494146 	.word	0x4c494146
 8006754:	fffffecc 	.word	0xfffffecc
 8006758:	0802ae6c 	.word	0x0802ae6c
 800675c:	fffffec8 	.word	0xfffffec8
 8006760:	fffffeb8 	.word	0xfffffeb8
 8006764:	0802ae74 	.word	0x0802ae74
 8006768:	fffffea8 	.word	0xfffffea8
 800676c:	0802ae84 	.word	0x0802ae84
 8006770:	200006a0 	.word	0x200006a0
 8006774:	20000701 	.word	0x20000701
 8006778:	0802ae4c 	.word	0x0802ae4c
 800677c:	0802a9b8 	.word	0x0802a9b8
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006780:	22ac      	movs	r2, #172	@ 0xac
 8006782:	0052      	lsls	r2, r2, #1
 8006784:	18bb      	adds	r3, r7, r2
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <ParseBuffer+0x338>
 800678c:	18bb      	adds	r3, r7, r2
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b72      	cmp	r3, #114	@ 0x72
 8006794:	d104      	bne.n	80067a0 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_READY;
 8006796:	2360      	movs	r3, #96	@ 0x60
 8006798:	33ff      	adds	r3, #255	@ 0xff
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	2202      	movs	r2, #2
 800679e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80067a0:	22ac      	movs	r2, #172	@ 0xac
 80067a2:	0052      	lsls	r2, r2, #1
 80067a4:	18bb      	adds	r3, r7, r2
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <ParseBuffer+0x358>
 80067ac:	18bb      	adds	r3, r7, r2
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80067b4:	d104      	bne.n	80067c0 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_START;
 80067b6:	2360      	movs	r3, #96	@ 0x60
 80067b8:	33ff      	adds	r3, #255	@ 0xff
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	2205      	movs	r2, #5
 80067be:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80067c0:	22ac      	movs	r2, #172	@ 0xac
 80067c2:	0052      	lsls	r2, r2, #1
 80067c4:	18bb      	adds	r3, r7, r2
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <ParseBuffer+0x378>
 80067cc:	18bb      	adds	r3, r7, r2
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80067d4:	d104      	bne.n	80067e0 <ParseBuffer+0x378>
      status = RECEIVE_STATUS_TIME;
 80067d6:	2360      	movs	r3, #96	@ 0x60
 80067d8:	33ff      	adds	r3, #255	@ 0xff
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	220b      	movs	r2, #11
 80067de:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80067e0:	22aa      	movs	r2, #170	@ 0xaa
 80067e2:	0052      	lsls	r2, r2, #1
 80067e4:	18bb      	adds	r3, r7, r2
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <ParseBuffer+0x38e>
 80067ec:	18bb      	adds	r3, r7, r2
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b45      	cmp	r3, #69	@ 0x45
 80067f4:	d00a      	beq.n	800680c <ParseBuffer+0x3a4>
 80067f6:	22a4      	movs	r2, #164	@ 0xa4
 80067f8:	0052      	lsls	r2, r2, #1
 80067fa:	18bb      	adds	r3, r7, r2
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <ParseBuffer+0x3ae>
 8006802:	18bb      	adds	r3, r7, r2
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b46      	cmp	r3, #70	@ 0x46
 800680a:	d104      	bne.n	8006816 <ParseBuffer+0x3ae>
      status = RECEIVE_STATUS_ERROR;
 800680c:	2360      	movs	r3, #96	@ 0x60
 800680e:	33ff      	adds	r3, #255	@ 0xff
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006816:	22a8      	movs	r2, #168	@ 0xa8
 8006818:	0052      	lsls	r2, r2, #1
 800681a:	18bb      	adds	r3, r7, r2
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <ParseBuffer+0x3ca>
 8006822:	18bb      	adds	r3, r7, r2
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b57      	cmp	r3, #87	@ 0x57
 800682a:	d102      	bne.n	8006832 <ParseBuffer+0x3ca>
      ConnectionMade = true;
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <ParseBuffer+0x3dc>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
  }
  return(status);
 8006832:	2360      	movs	r3, #96	@ 0x60
 8006834:	33ff      	adds	r3, #255	@ 0xff
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	781b      	ldrb	r3, [r3, #0]

}
 800683a:	0018      	movs	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	b059      	add	sp, #356	@ 0x164
 8006840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	200005b0 	.word	0x200005b0

08006848 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800684e:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <PollAwake+0x34>)
 8006850:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f7f9 fc89 	bl	800016c <strlen>
 800685a:	0003      	movs	r3, r0
 800685c:	b29a      	uxth	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	0011      	movs	r1, r2
 8006862:	0018      	movs	r0, r3
 8006864:	f7fe fb40 	bl	8004ee8 <ESP_Send>
 8006868:	1e03      	subs	r3, r0, #0
 800686a:	d001      	beq.n	8006870 <PollAwake+0x28>
    return true;
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <PollAwake+0x2a>
  }
  else{
    return false;
 8006870:	2300      	movs	r3, #0
  }
}
 8006872:	0018      	movs	r0, r3
 8006874:	46bd      	mov	sp, r7
 8006876:	b002      	add	sp, #8
 8006878:	bd80      	pop	{r7, pc}
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	0802ae94 	.word	0x0802ae94

08006880 <RFPower>:

bool RFPower(){
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8006886:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <RFPower+0x34>)
 8006888:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	0018      	movs	r0, r3
 800688e:	f7f9 fc6d 	bl	800016c <strlen>
 8006892:	0003      	movs	r3, r0
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	0011      	movs	r1, r2
 800689a:	0018      	movs	r0, r3
 800689c:	f7fe fb24 	bl	8004ee8 <ESP_Send>
 80068a0:	1e03      	subs	r3, r0, #0
 80068a2:	d001      	beq.n	80068a8 <RFPower+0x28>
    return true;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <RFPower+0x2a>
  }
  else{
    return false;
 80068a8:	2300      	movs	r3, #0
  }
}
 80068aa:	0018      	movs	r0, r3
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b002      	add	sp, #8
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	0802ae9c 	.word	0x0802ae9c

080068b8 <CheckRFPower>:

bool CheckRFPower(){
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80068be:	4b0b      	ldr	r3, [pc, #44]	@ (80068ec <CheckRFPower+0x34>)
 80068c0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7f9 fc51 	bl	800016c <strlen>
 80068ca:	0003      	movs	r3, r0
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	0011      	movs	r1, r2
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7fe fb08 	bl	8004ee8 <ESP_Send>
 80068d8:	1e03      	subs	r3, r0, #0
 80068da:	d001      	beq.n	80068e0 <CheckRFPower+0x28>
    return true;
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80068e0:	2300      	movs	r3, #0
  }
}
 80068e2:	0018      	movs	r0, r3
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b002      	add	sp, #8
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	0802aeac 	.word	0x0802aeac

080068f0 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <ATRestore+0x34>)
 80068f8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7f9 fc35 	bl	800016c <strlen>
 8006902:	0003      	movs	r3, r0
 8006904:	b29a      	uxth	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	0011      	movs	r1, r2
 800690a:	0018      	movs	r0, r3
 800690c:	f7fe faec 	bl	8004ee8 <ESP_Send>
 8006910:	1e03      	subs	r3, r0, #0
 8006912:	d001      	beq.n	8006918 <ATRestore+0x28>
    return true;
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <ATRestore+0x2a>
  }
  else{
    return false;
 8006918:	2300      	movs	r3, #0
  }
}
 800691a:	0018      	movs	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	b002      	add	sp, #8
 8006920:	bd80      	pop	{r7, pc}
 8006922:	46c0      	nop			@ (mov r8, r8)
 8006924:	0802aebc 	.word	0x0802aebc

08006928 <CWINIT>:

bool CWINIT(){
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800692e:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <CWINIT+0x34>)
 8006930:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f7f9 fc19 	bl	800016c <strlen>
 800693a:	0003      	movs	r3, r0
 800693c:	b29a      	uxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f7fe fad0 	bl	8004ee8 <ESP_Send>
 8006948:	1e03      	subs	r3, r0, #0
 800694a:	d001      	beq.n	8006950 <CWINIT+0x28>
    return true;
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <CWINIT+0x2a>
  }
  else{
    return false;
 8006950:	2300      	movs	r3, #0
  }
}
 8006952:	0018      	movs	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	b002      	add	sp, #8
 8006958:	bd80      	pop	{r7, pc}
 800695a:	46c0      	nop			@ (mov r8, r8)
 800695c:	0802aecc 	.word	0x0802aecc

08006960 <CWMODE1>:

bool CWMODE1(){
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <CWMODE1+0x34>)
 8006968:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0018      	movs	r0, r3
 800696e:	f7f9 fbfd 	bl	800016c <strlen>
 8006972:	0003      	movs	r3, r0
 8006974:	b29a      	uxth	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f7fe fab4 	bl	8004ee8 <ESP_Send>
 8006980:	1e03      	subs	r3, r0, #0
 8006982:	d001      	beq.n	8006988 <CWMODE1+0x28>
    return true;
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <CWMODE1+0x2a>
  }
  else{
    return false;
 8006988:	2300      	movs	r3, #0
  }
}
 800698a:	0018      	movs	r0, r3
 800698c:	46bd      	mov	sp, r7
 800698e:	b002      	add	sp, #8
 8006990:	bd80      	pop	{r7, pc}
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	0802aedc 	.word	0x0802aedc

08006998 <CWMODE2>:

bool CWMODE2(){
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800699e:	4b0b      	ldr	r3, [pc, #44]	@ (80069cc <CWMODE2+0x34>)
 80069a0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7f9 fbe1 	bl	800016c <strlen>
 80069aa:	0003      	movs	r3, r0
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0011      	movs	r1, r2
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7fe fa98 	bl	8004ee8 <ESP_Send>
 80069b8:	1e03      	subs	r3, r0, #0
 80069ba:	d001      	beq.n	80069c0 <CWMODE2+0x28>
    return true;
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <CWMODE2+0x2a>
  }
  else{
    return false;
 80069c0:	2300      	movs	r3, #0
  }
}
 80069c2:	0018      	movs	r0, r3
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b002      	add	sp, #8
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	0802aeec 	.word	0x0802aeec

080069d0 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80069d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <CWAUTOCONN+0x34>)
 80069d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	0018      	movs	r0, r3
 80069de:	f7f9 fbc5 	bl	800016c <strlen>
 80069e2:	0003      	movs	r3, r0
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0011      	movs	r1, r2
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7fe fa7c 	bl	8004ee8 <ESP_Send>
 80069f0:	1e03      	subs	r3, r0, #0
 80069f2:	d001      	beq.n	80069f8 <CWAUTOCONN+0x28>
    return true;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80069f8:	2300      	movs	r3, #0
  }
}
 80069fa:	0018      	movs	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b002      	add	sp, #8
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	0802aefc 	.word	0x0802aefc

08006a08 <CWJAP>:

bool CWJAP()
{
 8006a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0a:	46c6      	mov	lr, r8
 8006a0c:	b500      	push	{lr}
 8006a0e:	b08a      	sub	sp, #40	@ 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	466b      	mov	r3, sp
 8006a14:	4698      	mov	r8, r3
  APtested = true;
 8006a16:	4b36      	ldr	r3, [pc, #216]	@ (8006af0 <CWJAP+0xe8>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 8006a1c:	f7fd ffb4 	bl	8004988 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 8006a20:	4b34      	ldr	r3, [pc, #208]	@ (8006af4 <CWJAP+0xec>)
 8006a22:	2270      	movs	r2, #112	@ 0x70
 8006a24:	2100      	movs	r1, #0
 8006a26:	0018      	movs	r0, r3
 8006a28:	f01f fd70 	bl	802650c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 8006a2c:	4b32      	ldr	r3, [pc, #200]	@ (8006af8 <CWJAP+0xf0>)
 8006a2e:	4a33      	ldr	r2, [pc, #204]	@ (8006afc <CWJAP+0xf4>)
 8006a30:	4933      	ldr	r1, [pc, #204]	@ (8006b00 <CWJAP+0xf8>)
 8006a32:	4830      	ldr	r0, [pc, #192]	@ (8006af4 <CWJAP+0xec>)
 8006a34:	f01f fc22 	bl	802627c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006a38:	4b2e      	ldr	r3, [pc, #184]	@ (8006af4 <CWJAP+0xec>)
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f7f9 fb96 	bl	800016c <strlen>
 8006a40:	0002      	movs	r2, r0
 8006a42:	210f      	movs	r1, #15
 8006a44:	2018      	movs	r0, #24
 8006a46:	180b      	adds	r3, r1, r0
 8006a48:	19db      	adds	r3, r3, r7
 8006a4a:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 8006a4c:	180b      	adds	r3, r1, r0
 8006a4e:	19db      	adds	r3, r3, r7
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	1e5a      	subs	r2, r3, #1
 8006a56:	623a      	str	r2, [r7, #32]
 8006a58:	001a      	movs	r2, r3
 8006a5a:	60ba      	str	r2, [r7, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	60fa      	str	r2, [r7, #12]
 8006a60:	68b8      	ldr	r0, [r7, #8]
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	0002      	movs	r2, r0
 8006a66:	0f52      	lsrs	r2, r2, #29
 8006a68:	000e      	movs	r6, r1
 8006a6a:	00f6      	lsls	r6, r6, #3
 8006a6c:	617e      	str	r6, [r7, #20]
 8006a6e:	697e      	ldr	r6, [r7, #20]
 8006a70:	4316      	orrs	r6, r2
 8006a72:	617e      	str	r6, [r7, #20]
 8006a74:	0002      	movs	r2, r0
 8006a76:	00d2      	lsls	r2, r2, #3
 8006a78:	613a      	str	r2, [r7, #16]
 8006a7a:	001a      	movs	r2, r3
 8006a7c:	603a      	str	r2, [r7, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	6838      	ldr	r0, [r7, #0]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	0002      	movs	r2, r0
 8006a88:	0f52      	lsrs	r2, r2, #29
 8006a8a:	000e      	movs	r6, r1
 8006a8c:	00f5      	lsls	r5, r6, #3
 8006a8e:	4315      	orrs	r5, r2
 8006a90:	0002      	movs	r2, r0
 8006a92:	00d4      	lsls	r4, r2, #3
 8006a94:	3307      	adds	r3, #7
 8006a96:	08db      	lsrs	r3, r3, #3
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	466a      	mov	r2, sp
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	469d      	mov	sp, r3
 8006aa0:	466b      	mov	r3, sp
 8006aa2:	3300      	adds	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 8006aa6:	240f      	movs	r4, #15
 8006aa8:	2518      	movs	r5, #24
 8006aaa:	1963      	adds	r3, r4, r5
 8006aac:	19db      	adds	r3, r3, r7
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f01f fd27 	bl	802650c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006abe:	1963      	adds	r3, r4, r5
 8006ac0:	19db      	adds	r3, r3, r7
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	490b      	ldr	r1, [pc, #44]	@ (8006af4 <CWJAP+0xec>)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f01f fd46 	bl	802655a <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006ace:	1963      	adds	r3, r4, r5
 8006ad0:	19db      	adds	r3, r3, r7
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	0011      	movs	r1, r2
 8006ada:	0018      	movs	r0, r3
 8006adc:	f7fe fa04 	bl	8004ee8 <ESP_Send>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	46c5      	mov	sp, r8
}
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b00a      	add	sp, #40	@ 0x28
 8006aea:	bc80      	pop	{r7}
 8006aec:	46b8      	mov	r8, r7
 8006aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af0:	200005b1 	.word	0x200005b1
 8006af4:	2000086c 	.word	0x2000086c
 8006af8:	200006c0 	.word	0x200006c0
 8006afc:	200006a0 	.word	0x200006a0
 8006b00:	0802af10 	.word	0x0802af10

08006b04 <CWMODE3>:


bool CWMODE3(){
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <CWMODE3+0x34>)
 8006b0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7f9 fb2b 	bl	800016c <strlen>
 8006b16:	0003      	movs	r3, r0
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fe f9e2 	bl	8004ee8 <ESP_Send>
 8006b24:	1e03      	subs	r3, r0, #0
 8006b26:	d001      	beq.n	8006b2c <CWMODE3+0x28>
    return true;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <CWMODE3+0x2a>
  }
  else{
    return false;
 8006b2c:	2300      	movs	r3, #0
  }
}
 8006b2e:	0018      	movs	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	b002      	add	sp, #8
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			@ (mov r8, r8)
 8006b38:	0802af28 	.word	0x0802af28

08006b3c <CWSTATE>:

bool CWSTATE(){
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006b42:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <CWSTATE+0x34>)
 8006b44:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f7f9 fb0f 	bl	800016c <strlen>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0011      	movs	r1, r2
 8006b56:	0018      	movs	r0, r3
 8006b58:	f7fe f9c6 	bl	8004ee8 <ESP_Send>
 8006b5c:	1e03      	subs	r3, r0, #0
 8006b5e:	d001      	beq.n	8006b64 <CWSTATE+0x28>
    return true;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006b64:	2300      	movs	r3, #0
  }
}
 8006b66:	0018      	movs	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b002      	add	sp, #8
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	0802af38 	.word	0x0802af38

08006b74 <CWSAP>:

bool CWSAP(){
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <CWSAP+0x34>)
 8006b7c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7f9 faf3 	bl	800016c <strlen>
 8006b86:	0003      	movs	r3, r0
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	0011      	movs	r1, r2
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f7fe f9aa 	bl	8004ee8 <ESP_Send>
 8006b94:	1e03      	subs	r3, r0, #0
 8006b96:	d001      	beq.n	8006b9c <CWSAP+0x28>
    return true;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <CWSAP+0x2a>
  }
  else{
    return false;
 8006b9c:	2300      	movs	r3, #0
  }
}
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	b002      	add	sp, #8
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	0802af48 	.word	0x0802af48

08006bac <CIPMUX>:

bool CIPMUX(){
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <CIPMUX+0x34>)
 8006bb4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f7f9 fad7 	bl	800016c <strlen>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0011      	movs	r1, r2
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7fe f98e 	bl	8004ee8 <ESP_Send>
 8006bcc:	1e03      	subs	r3, r0, #0
 8006bce:	d001      	beq.n	8006bd4 <CIPMUX+0x28>
    return true;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006bd4:	2300      	movs	r3, #0
  }
}
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b002      	add	sp, #8
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	0802af6c 	.word	0x0802af6c

08006be4 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006bea:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <WEBSERVER+0x34>)
 8006bec:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7f9 fabb 	bl	800016c <strlen>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0011      	movs	r1, r2
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7fe f972 	bl	8004ee8 <ESP_Send>
 8006c04:	1e03      	subs	r3, r0, #0
 8006c06:	d001      	beq.n	8006c0c <WEBSERVER+0x28>
    return true;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006c0c:	2300      	movs	r3, #0
  }
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b002      	add	sp, #8
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			@ (mov r8, r8)
 8006c18:	0802af7c 	.word	0x0802af7c

08006c1c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006c1c:	b5b0      	push	{r4, r5, r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006c22:	1cfb      	adds	r3, r7, #3
 8006c24:	2200      	movs	r2, #0
 8006c26:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006c28:	1dbc      	adds	r4, r7, #6
 8006c2a:	1cfb      	adds	r3, r7, #3
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7fe fce6 	bl	8005600 <CreateMessage>
 8006c34:	0003      	movs	r3, r0
 8006c36:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006c38:	4b22      	ldr	r3, [pc, #136]	@ (8006cc4 <HTTPCPOST+0xa8>)
 8006c3a:	4823      	ldr	r0, [pc, #140]	@ (8006cc8 <HTTPCPOST+0xac>)
 8006c3c:	220c      	movs	r2, #12
 8006c3e:	0019      	movs	r1, r3
 8006c40:	f005 fa58 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006c44:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc4 <HTTPCPOST+0xa8>)
 8006c46:	4b21      	ldr	r3, [pc, #132]	@ (8006ccc <HTTPCPOST+0xb0>)
 8006c48:	0011      	movs	r1, r2
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7fe fc10 	bl	8005470 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006c50:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd0 <HTTPCPOST+0xb4>)
 8006c52:	4820      	ldr	r0, [pc, #128]	@ (8006cd4 <HTTPCPOST+0xb8>)
 8006c54:	2230      	movs	r2, #48	@ 0x30
 8006c56:	0019      	movs	r1, r3
 8006c58:	f005 fa4c 	bl	800c0f4 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd0 <HTTPCPOST+0xb4>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <HTTPCPOST+0xb4>)
 8006c66:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd8 <HTTPCPOST+0xbc>)
 8006c68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c6a:	c313      	stmia	r3!, {r0, r1, r4}
 8006c6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c6e:	c313      	stmia	r3!, {r0, r1, r4}
 8006c70:	ca03      	ldmia	r2!, {r0, r1}
 8006c72:	c303      	stmia	r3!, {r0, r1}
 8006c74:	8811      	ldrh	r1, [r2, #0]
 8006c76:	8019      	strh	r1, [r3, #0]
 8006c78:	7892      	ldrb	r2, [r2, #2]
 8006c7a:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006c7c:	1dbb      	adds	r3, r7, #6
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	4d12      	ldr	r5, [pc, #72]	@ (8006ccc <HTTPCPOST+0xb0>)
 8006c82:	4c13      	ldr	r4, [pc, #76]	@ (8006cd0 <HTTPCPOST+0xb4>)
 8006c84:	4915      	ldr	r1, [pc, #84]	@ (8006cdc <HTTPCPOST+0xc0>)
 8006c86:	4816      	ldr	r0, [pc, #88]	@ (8006ce0 <HTTPCPOST+0xc4>)
 8006c88:	4a16      	ldr	r2, [pc, #88]	@ (8006ce4 <HTTPCPOST+0xc8>)
 8006c8a:	9201      	str	r2, [sp, #4]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	002b      	movs	r3, r5
 8006c90:	0022      	movs	r2, r4
 8006c92:	f01f faf3 	bl	802627c <siprintf>
  uint16_t len = strlen(message);
 8006c96:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <HTTPCPOST+0xc4>)
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7f9 fa67 	bl	800016c <strlen>
 8006c9e:	0002      	movs	r2, r0
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	801a      	strh	r2, [r3, #0]
//  Debug("ESP_send result of header: %d, transmitted data %d chars", txresult, len);
  if(ESP_Send((uint8_t*)message, len)){
 8006ca4:	1d3b      	adds	r3, r7, #4
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <HTTPCPOST+0xc4>)
 8006caa:	0011      	movs	r1, r2
 8006cac:	0018      	movs	r0, r3
 8006cae:	f7fe f91b 	bl	8004ee8 <ESP_Send>
 8006cb2:	1e03      	subs	r3, r0, #0
 8006cb4:	d001      	beq.n	8006cba <HTTPCPOST+0x9e>
    return true;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006cba:	2300      	movs	r3, #0
  }
}
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8006cc4:	200008dc 	.word	0x200008dc
 8006cc8:	08080000 	.word	0x08080000
 8006ccc:	200008e8 	.word	0x200008e8
 8006cd0:	20000904 	.word	0x20000904
 8006cd4:	08080110 	.word	0x08080110
 8006cd8:	0802af94 	.word	0x0802af94
 8006cdc:	0802afb8 	.word	0x0802afb8
 8006ce0:	200005c4 	.word	0x200005c4
 8006ce4:	0802afdc 	.word	0x0802afdc

08006ce8 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
  bool result = false;
 8006cee:	1dfb      	adds	r3, r7, #7
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006cf4:	1dfb      	adds	r3, r7, #7
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f7fe fbdd 	bl	80054b8 <CreateMailMessage>
 8006cfe:	0003      	movs	r3, r0
 8006d00:	001a      	movs	r2, r3
 8006d02:	4b04      	ldr	r3, [pc, #16]	@ (8006d14 <SENDMAIL+0x2c>)
 8006d04:	801a      	strh	r2, [r3, #0]
//  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006d06:	1dfb      	adds	r3, r7, #7
 8006d08:	781b      	ldrb	r3, [r3, #0]
}
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b002      	add	sp, #8
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	46c0      	nop			@ (mov r8, r8)
 8006d14:	200005bc 	.word	0x200005bc

08006d18 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006d18:	b5b0      	push	{r4, r5, r7, lr}
 8006d1a:	b090      	sub	sp, #64	@ 0x40
 8006d1c:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006d1e:	2133      	movs	r1, #51	@ 0x33
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006d26:	2536      	movs	r5, #54	@ 0x36
 8006d28:	197c      	adds	r4, r7, r5
 8006d2a:	187b      	adds	r3, r7, r1
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f7fe fbc2 	bl	80054b8 <CreateMailMessage>
 8006d34:	0003      	movs	r3, r0
 8006d36:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006d38:	003b      	movs	r3, r7
 8006d3a:	4814      	ldr	r0, [pc, #80]	@ (8006d8c <HTTPCPOST_MAILAPI+0x74>)
 8006d3c:	2230      	movs	r2, #48	@ 0x30
 8006d3e:	0019      	movs	r1, r3
 8006d40:	f005 f9d8 	bl	800c0f4 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006d44:	197b      	adds	r3, r7, r5
 8006d46:	881c      	ldrh	r4, [r3, #0]
 8006d48:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <HTTPCPOST_MAILAPI+0x78>)
 8006d4a:	4912      	ldr	r1, [pc, #72]	@ (8006d94 <HTTPCPOST_MAILAPI+0x7c>)
 8006d4c:	4812      	ldr	r0, [pc, #72]	@ (8006d98 <HTTPCPOST_MAILAPI+0x80>)
 8006d4e:	003b      	movs	r3, r7
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <HTTPCPOST_MAILAPI+0x84>)
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	0023      	movs	r3, r4
 8006d58:	f01f fa90 	bl	802627c <siprintf>
  uint16_t len = strlen(message);
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d98 <HTTPCPOST_MAILAPI+0x80>)
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7f9 fa04 	bl	800016c <strlen>
 8006d64:	0002      	movs	r2, r0
 8006d66:	2134      	movs	r1, #52	@ 0x34
 8006d68:	187b      	adds	r3, r7, r1
 8006d6a:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	881a      	ldrh	r2, [r3, #0]
 8006d70:	4b09      	ldr	r3, [pc, #36]	@ (8006d98 <HTTPCPOST_MAILAPI+0x80>)
 8006d72:	0011      	movs	r1, r2
 8006d74:	0018      	movs	r0, r3
 8006d76:	f7fe f8b7 	bl	8004ee8 <ESP_Send>
 8006d7a:	1e03      	subs	r3, r0, #0
 8006d7c:	d001      	beq.n	8006d82 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b00e      	add	sp, #56	@ 0x38
 8006d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8c:	080802c0 	.word	0x080802c0
 8006d90:	0802dde4 	.word	0x0802dde4
 8006d94:	0802b000 	.word	0x0802b000
 8006d98:	200005c4 	.word	0x200005c4
 8006d9c:	0802afdc 	.word	0x0802afdc

08006da0 <SENDDATA>:
#endif

bool SENDDATA(){
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
  bool result = false;
 8006da6:	1dfb      	adds	r3, r7, #7
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006dac:	1dfb      	adds	r3, r7, #7
 8006dae:	2101      	movs	r1, #1
 8006db0:	0018      	movs	r0, r3
 8006db2:	f7fe fc25 	bl	8005600 <CreateMessage>
 8006db6:	0003      	movs	r3, r0
 8006db8:	001a      	movs	r2, r3
 8006dba:	4b04      	ldr	r3, [pc, #16]	@ (8006dcc <SENDDATA+0x2c>)
 8006dbc:	801a      	strh	r2, [r3, #0]
//  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006dbe:	1dfb      	adds	r3, r7, #7
 8006dc0:	781b      	ldrb	r3, [r3, #0]
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b002      	add	sp, #8
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	200005bc 	.word	0x200005bc

08006dd0 <SLEEP>:

bool SLEEP(){
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <SLEEP+0x34>)
 8006dd8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f7f9 f9c5 	bl	800016c <strlen>
 8006de2:	0003      	movs	r3, r0
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0011      	movs	r1, r2
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7fe f87c 	bl	8004ee8 <ESP_Send>
 8006df0:	1e03      	subs	r3, r0, #0
 8006df2:	d001      	beq.n	8006df8 <SLEEP+0x28>
    return true;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <SLEEP+0x2a>
  }
  else{
    return false;
 8006df8:	2300      	movs	r3, #0
  }
}
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b002      	add	sp, #8
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	0802b050 	.word	0x0802b050

08006e08 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e44 <CIPSNTPCFG+0x3c>)
 8006e10:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7f9 f9a9 	bl	800016c <strlen>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0011      	movs	r1, r2
 8006e22:	0018      	movs	r0, r3
 8006e24:	f7fe f860 	bl	8004ee8 <ESP_Send>
 8006e28:	1e03      	subs	r3, r0, #0
 8006e2a:	d006      	beq.n	8006e3a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006e2c:	23fa      	movs	r3, #250	@ 0xfa
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	0018      	movs	r0, r3
 8006e32:	f00d fd7b 	bl	801492c <HAL_Delay>
    return true;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006e3a:	2300      	movs	r3, #0
  }
}
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b002      	add	sp, #8
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	0802b060 	.word	0x0802b060

08006e48 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <CIPSNTPTIME+0x34>)
 8006e50:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	0018      	movs	r0, r3
 8006e56:	f7f9 f989 	bl	800016c <strlen>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0011      	movs	r1, r2
 8006e62:	0018      	movs	r0, r3
 8006e64:	f7fe f840 	bl	8004ee8 <ESP_Send>
 8006e68:	1e03      	subs	r3, r0, #0
 8006e6a:	d001      	beq.n	8006e70 <CIPSNTPTIME+0x28>
    return true;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006e70:	2300      	movs	r3, #0
  }
}
 8006e72:	0018      	movs	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b002      	add	sp, #8
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	0802b0b0 	.word	0x0802b0b0

08006e80 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006e86:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <CIPSNTPINTV+0x34>)
 8006e88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f7f9 f96d 	bl	800016c <strlen>
 8006e92:	0003      	movs	r3, r0
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	0011      	movs	r1, r2
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7fe f824 	bl	8004ee8 <ESP_Send>
 8006ea0:	1e03      	subs	r3, r0, #0
 8006ea2:	d001      	beq.n	8006ea8 <CIPSNTPINTV+0x28>
    return true;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006ea8:	2300      	movs	r3, #0
  }
}
 8006eaa:	0018      	movs	r0, r3
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b002      	add	sp, #8
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	46c0      	nop			@ (mov r8, r8)
 8006eb4:	0802b0c4 	.word	0x0802b0c4

08006eb8 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006eb8:	b5b0      	push	{r4, r5, r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	0002      	movs	r2, r0
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8007078 <DMA_ProcessBuffer+0x1c0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	200e      	movs	r0, #14
 8006ece:	183b      	adds	r3, r7, r0
 8006ed0:	2180      	movs	r1, #128	@ 0x80
 8006ed2:	0049      	lsls	r1, r1, #1
 8006ed4:	1a8a      	subs	r2, r1, r2
 8006ed6:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006ed8:	230d      	movs	r3, #13
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	2203      	movs	r2, #3
 8006ede:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006ee0:	183b      	adds	r3, r7, r0
 8006ee2:	881a      	ldrh	r2, [r3, #0]
 8006ee4:	2380      	movs	r3, #128	@ 0x80
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d903      	bls.n	8006ef4 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006eec:	183b      	adds	r3, r7, r0
 8006eee:	2280      	movs	r2, #128	@ 0x80
 8006ef0:	0052      	lsls	r2, r2, #1
 8006ef2:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006ef4:	4b61      	ldr	r3, [pc, #388]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	001a      	movs	r2, r3
 8006efc:	230e      	movs	r3, #14
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d131      	bne.n	8006f6a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006f06:	4b5e      	ldr	r3, [pc, #376]	@ (8007080 <DMA_ProcessBuffer+0x1c8>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b14      	cmp	r3, #20
 8006f0c:	d91b      	bls.n	8006f46 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8007080 <DMA_ProcessBuffer+0x1c8>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006f14:	4b5b      	ldr	r3, [pc, #364]	@ (8007084 <DMA_ProcessBuffer+0x1cc>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d107      	bne.n	8006f2c <DMA_ProcessBuffer+0x74>
 8006f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8007088 <DMA_ProcessBuffer+0x1d0>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006f24:	230d      	movs	r3, #13
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	2207      	movs	r2, #7
 8006f2a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006f2c:	4b55      	ldr	r3, [pc, #340]	@ (8007084 <DMA_ProcessBuffer+0x1cc>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d103      	bne.n	8006f3c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006f34:	4b55      	ldr	r3, [pc, #340]	@ (800708c <DMA_ProcessBuffer+0x1d4>)
 8006f36:	220b      	movs	r2, #11
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e016      	b.n	8006f6a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006f3c:	230d      	movs	r3, #13
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	2206      	movs	r2, #6
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	e011      	b.n	8006f6a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006f46:	4b4e      	ldr	r3, [pc, #312]	@ (8007080 <DMA_ProcessBuffer+0x1c8>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8007080 <DMA_ProcessBuffer+0x1c8>)
 8006f50:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006f52:	f00d fce1 	bl	8014918 <HAL_GetTick>
 8006f56:	0003      	movs	r3, r0
 8006f58:	33f5      	adds	r3, #245	@ 0xf5
 8006f5a:	33ff      	adds	r3, #255	@ 0xff
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8007090 <DMA_ProcessBuffer+0x1d8>)
 8006f60:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006f62:	230d      	movs	r3, #13
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	2204      	movs	r2, #4
 8006f68:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006f6a:	4b44      	ldr	r3, [pc, #272]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	001a      	movs	r2, r3
 8006f72:	210e      	movs	r1, #14
 8006f74:	187b      	adds	r3, r7, r1
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d100      	bne.n	8006f7e <DMA_ProcessBuffer+0xc6>
 8006f7c:	e075      	b.n	800706a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f7e:	4b40      	ldr	r3, [pc, #256]	@ (8007080 <DMA_ProcessBuffer+0x1c8>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006f84:	4b43      	ldr	r3, [pc, #268]	@ (8007094 <DMA_ProcessBuffer+0x1dc>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d109      	bne.n	8006fa8 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8007094 <DMA_ProcessBuffer+0x1dc>)
 8006f9c:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006f9e:	230d      	movs	r3, #13
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	220a      	movs	r2, #10
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	e060      	b.n	800706a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8007094 <DMA_ProcessBuffer+0x1dc>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	001a      	movs	r2, r3
 8006fb0:	210e      	movs	r1, #14
 8006fb2:	187b      	adds	r3, r7, r1
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d009      	beq.n	8006fce <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006fba:	187b      	adds	r3, r7, r1
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	4b34      	ldr	r3, [pc, #208]	@ (8007094 <DMA_ProcessBuffer+0x1dc>)
 8006fc2:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006fc4:	230d      	movs	r3, #13
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	220a      	movs	r2, #10
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e04d      	b.n	800706a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006fce:	4b2b      	ldr	r3, [pc, #172]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	210e      	movs	r1, #14
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d917      	bls.n	8007010 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006fe0:	4b26      	ldr	r3, [pc, #152]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	001a      	movs	r2, r3
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <DMA_ProcessBuffer+0x1e0>)
 8006fea:	18d0      	adds	r0, r2, r3
 8006fec:	4b23      	ldr	r3, [pc, #140]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	001a      	movs	r2, r3
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	b299      	uxth	r1, r3
 8006ffc:	230d      	movs	r3, #13
 8006ffe:	18fc      	adds	r4, r7, r3
 8007000:	1dfb      	adds	r3, r7, #7
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	001a      	movs	r2, r3
 8007006:	f7ff fa2f 	bl	8006468 <ParseBuffer>
 800700a:	0003      	movs	r3, r0
 800700c:	7023      	strb	r3, [r4, #0]
 800700e:	e026      	b.n	800705e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8007010:	4b1a      	ldr	r3, [pc, #104]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	001a      	movs	r2, r3
 8007018:	4b1f      	ldr	r3, [pc, #124]	@ (8007098 <DMA_ProcessBuffer+0x1e0>)
 800701a:	18d0      	adds	r0, r2, r3
 800701c:	4b17      	ldr	r3, [pc, #92]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	001a      	movs	r2, r3
 8007024:	2380      	movs	r3, #128	@ 0x80
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	1a9b      	subs	r3, r3, r2
 800702a:	b299      	uxth	r1, r3
 800702c:	250d      	movs	r5, #13
 800702e:	197c      	adds	r4, r7, r5
 8007030:	1dfb      	adds	r3, r7, #7
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	001a      	movs	r2, r3
 8007036:	f7ff fa17 	bl	8006468 <ParseBuffer>
 800703a:	0003      	movs	r3, r0
 800703c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 800703e:	210e      	movs	r1, #14
 8007040:	187b      	adds	r3, r7, r1
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8007048:	197c      	adds	r4, r7, r5
 800704a:	1dfb      	adds	r3, r7, #7
 800704c:	781a      	ldrb	r2, [r3, #0]
 800704e:	187b      	adds	r3, r7, r1
 8007050:	8819      	ldrh	r1, [r3, #0]
 8007052:	4b11      	ldr	r3, [pc, #68]	@ (8007098 <DMA_ProcessBuffer+0x1e0>)
 8007054:	0018      	movs	r0, r3
 8007056:	f7ff fa07 	bl	8006468 <ParseBuffer>
 800705a:	0003      	movs	r3, r0
 800705c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800705e:	230e      	movs	r3, #14
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	4b05      	ldr	r3, [pc, #20]	@ (800707c <DMA_ProcessBuffer+0x1c4>)
 8007068:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800706a:	230d      	movs	r3, #13
 800706c:	18fb      	adds	r3, r7, r3
 800706e:	781b      	ldrb	r3, [r3, #0]
}
 8007070:	0018      	movs	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	b004      	add	sp, #16
 8007076:	bdb0      	pop	{r4, r5, r7, pc}
 8007078:	20002458 	.word	0x20002458
 800707c:	20000934 	.word	0x20000934
 8007080:	2000069c 	.word	0x2000069c
 8007084:	20000701 	.word	0x20000701
 8007088:	20000001 	.word	0x20000001
 800708c:	20000030 	.word	0x20000030
 8007090:	20000694 	.word	0x20000694
 8007094:	20000935 	.word	0x20000935
 8007098:	200004ac 	.word	0x200004ac

0800709c <clearDMABuffer>:

void clearDMABuffer(){
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 80070a0:	2380      	movs	r3, #128	@ 0x80
 80070a2:	005a      	lsls	r2, r3, #1
 80070a4:	4b03      	ldr	r3, [pc, #12]	@ (80070b4 <clearDMABuffer+0x18>)
 80070a6:	2100      	movs	r1, #0
 80070a8:	0018      	movs	r0, r3
 80070aa:	f01f fa2f 	bl	802650c <memset>
}
 80070ae:	46c0      	nop			@ (mov r8, r8)
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	200004ac 	.word	0x200004ac

080070b8 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	0002      	movs	r2, r0
 80070c0:	1dfb      	adds	r3, r7, #7
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	1dbb      	adds	r3, r7, #6
 80070c6:	1c0a      	adds	r2, r1, #0
 80070c8:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80070ca:	210f      	movs	r1, #15
 80070cc:	187b      	adds	r3, r7, r1
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80070d2:	1dbb      	adds	r3, r7, #6
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d105      	bne.n	80070e6 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80070da:	187b      	adds	r3, r7, r1
 80070dc:	1dfa      	adds	r2, r7, #7
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	4251      	negs	r1, r2
 80070e2:	414a      	adcs	r2, r1
 80070e4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80070e6:	1dbb      	adds	r3, r7, #6
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d107      	bne.n	80070fe <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80070ee:	230f      	movs	r3, #15
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	1dfa      	adds	r2, r7, #7
 80070f4:	7812      	ldrb	r2, [r2, #0]
 80070f6:	3a02      	subs	r2, #2
 80070f8:	4251      	negs	r1, r2
 80070fa:	414a      	adcs	r2, r1
 80070fc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80070fe:	1dbb      	adds	r3, r7, #6
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d107      	bne.n	8007116 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8007106:	230f      	movs	r3, #15
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	1dfa      	adds	r2, r7, #7
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	3a05      	subs	r2, #5
 8007110:	4251      	negs	r1, r2
 8007112:	414a      	adcs	r2, r1
 8007114:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8007116:	1dbb      	adds	r3, r7, #6
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b05      	cmp	r3, #5
 800711c:	d107      	bne.n	800712e <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800711e:	230f      	movs	r3, #15
 8007120:	18fb      	adds	r3, r7, r3
 8007122:	1dfa      	adds	r2, r7, #7
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	3a0b      	subs	r2, #11
 8007128:	4251      	negs	r1, r2
 800712a:	414a      	adcs	r2, r1
 800712c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800712e:	230f      	movs	r3, #15
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	781b      	ldrb	r3, [r3, #0]
}
 8007134:	0018      	movs	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	b004      	add	sp, #16
 800713a:	bd80      	pop	{r7, pc}

0800713c <AT_Send>:

bool AT_Send(AT_Commands state){
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	0002      	movs	r2, r0
 8007144:	1dfb      	adds	r3, r7, #7
 8007146:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8007148:	230f      	movs	r3, #15
 800714a:	18fb      	adds	r3, r7, r3
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007150:	1dfb      	adds	r3, r7, #7
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b16      	cmp	r3, #22
 8007156:	d900      	bls.n	800715a <AT_Send+0x1e>
 8007158:	e161      	b.n	800741e <AT_Send+0x2e2>
 800715a:	009a      	lsls	r2, r3, #2
 800715c:	4bb3      	ldr	r3, [pc, #716]	@ (800742c <AT_Send+0x2f0>)
 800715e:	18d3      	adds	r3, r2, r3
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8007164:	4bb2      	ldr	r3, [pc, #712]	@ (8007430 <AT_Send+0x2f4>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0018      	movs	r0, r3
 800716a:	f00c fe07 	bl	8013d7c <TimestampIsReached>
 800716e:	1e03      	subs	r3, r0, #0
 8007170:	d100      	bne.n	8007174 <AT_Send+0x38>
 8007172:	e153      	b.n	800741c <AT_Send+0x2e0>
    Debug("AT_WAKEUP");
 8007174:	4aaf      	ldr	r2, [pc, #700]	@ (8007434 <AT_Send+0x2f8>)
 8007176:	4bb0      	ldr	r3, [pc, #704]	@ (8007438 <AT_Send+0x2fc>)
 8007178:	0019      	movs	r1, r3
 800717a:	2003      	movs	r0, #3
 800717c:	f00c fe54 	bl	8013e28 <CreateLine>
    ATCommandSend = PollAwake();
 8007180:	230f      	movs	r3, #15
 8007182:	18fc      	adds	r4, r7, r3
 8007184:	f7ff fb60 	bl	8006848 <PollAwake>
 8007188:	0003      	movs	r3, r0
 800718a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800718c:	f00d fbc4 	bl	8014918 <HAL_GetTick>
 8007190:	0003      	movs	r3, r0
 8007192:	3332      	adds	r3, #50	@ 0x32
 8007194:	001a      	movs	r2, r3
 8007196:	4ba6      	ldr	r3, [pc, #664]	@ (8007430 <AT_Send+0x2f4>)
 8007198:	601a      	str	r2, [r3, #0]
  }
  break;
 800719a:	e13f      	b.n	800741c <AT_Send+0x2e0>

  case AT_SET_RFPOWER:
//    Debug("Setting RF Power");
    ATCommandSend = RFPower();
 800719c:	230f      	movs	r3, #15
 800719e:	18fc      	adds	r4, r7, r3
 80071a0:	f7ff fb6e 	bl	8006880 <RFPower>
 80071a4:	0003      	movs	r3, r0
 80071a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071a8:	f00d fbb6 	bl	8014918 <HAL_GetTick>
 80071ac:	0003      	movs	r3, r0
 80071ae:	330a      	adds	r3, #10
 80071b0:	001a      	movs	r2, r3
 80071b2:	4b9f      	ldr	r3, [pc, #636]	@ (8007430 <AT_Send+0x2f4>)
 80071b4:	601a      	str	r2, [r3, #0]
    break;
 80071b6:	e132      	b.n	800741e <AT_Send+0x2e2>

  case AT_CHECK_RFPOWER:
//    Debug("Checking RF Power");
    ATCommandSend = CheckRFPower();
 80071b8:	230f      	movs	r3, #15
 80071ba:	18fc      	adds	r4, r7, r3
 80071bc:	f7ff fb7c 	bl	80068b8 <CheckRFPower>
 80071c0:	0003      	movs	r3, r0
 80071c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071c4:	f00d fba8 	bl	8014918 <HAL_GetTick>
 80071c8:	0003      	movs	r3, r0
 80071ca:	330a      	adds	r3, #10
 80071cc:	001a      	movs	r2, r3
 80071ce:	4b98      	ldr	r3, [pc, #608]	@ (8007430 <AT_Send+0x2f4>)
 80071d0:	601a      	str	r2, [r3, #0]
    break;
 80071d2:	e124      	b.n	800741e <AT_Send+0x2e2>

  case AT_RESTORE:
//    Debug("Restoring ESP");
    ATCommandSend = ATRestore();
 80071d4:	230f      	movs	r3, #15
 80071d6:	18fc      	adds	r4, r7, r3
 80071d8:	f7ff fb8a 	bl	80068f0 <ATRestore>
 80071dc:	0003      	movs	r3, r0
 80071de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80071e0:	f00d fb9a 	bl	8014918 <HAL_GetTick>
 80071e4:	0003      	movs	r3, r0
 80071e6:	3332      	adds	r3, #50	@ 0x32
 80071e8:	001a      	movs	r2, r3
 80071ea:	4b91      	ldr	r3, [pc, #580]	@ (8007430 <AT_Send+0x2f4>)
 80071ec:	601a      	str	r2, [r3, #0]
    break;
 80071ee:	e116      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWINIT:
//    Debug("Initializing Wi-Fi");
    ATCommandSend = CWINIT();
 80071f0:	230f      	movs	r3, #15
 80071f2:	18fc      	adds	r4, r7, r3
 80071f4:	f7ff fb98 	bl	8006928 <CWINIT>
 80071f8:	0003      	movs	r3, r0
 80071fa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071fc:	f00d fb8c 	bl	8014918 <HAL_GetTick>
 8007200:	0003      	movs	r3, r0
 8007202:	33f5      	adds	r3, #245	@ 0xf5
 8007204:	33ff      	adds	r3, #255	@ 0xff
 8007206:	001a      	movs	r2, r3
 8007208:	4b89      	ldr	r3, [pc, #548]	@ (8007430 <AT_Send+0x2f4>)
 800720a:	601a      	str	r2, [r3, #0]
    break;
 800720c:	e107      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWSTATE:
//    Debug("Checking current SSID");
    ATCommandSend = CWSTATE();
 800720e:	230f      	movs	r3, #15
 8007210:	18fc      	adds	r4, r7, r3
 8007212:	f7ff fc93 	bl	8006b3c <CWSTATE>
 8007216:	0003      	movs	r3, r0
 8007218:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800721a:	f00d fb7d 	bl	8014918 <HAL_GetTick>
 800721e:	0003      	movs	r3, r0
 8007220:	33f5      	adds	r3, #245	@ 0xf5
 8007222:	33ff      	adds	r3, #255	@ 0xff
 8007224:	001a      	movs	r2, r3
 8007226:	4b82      	ldr	r3, [pc, #520]	@ (8007430 <AT_Send+0x2f4>)
 8007228:	601a      	str	r2, [r3, #0]
    break;
 800722a:	e0f8      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWMODE1:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE1();
 800722c:	230f      	movs	r3, #15
 800722e:	18fc      	adds	r4, r7, r3
 8007230:	f7ff fb96 	bl	8006960 <CWMODE1>
 8007234:	0003      	movs	r3, r0
 8007236:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007238:	f00d fb6e 	bl	8014918 <HAL_GetTick>
 800723c:	0003      	movs	r3, r0
 800723e:	330a      	adds	r3, #10
 8007240:	001a      	movs	r2, r3
 8007242:	4b7b      	ldr	r3, [pc, #492]	@ (8007430 <AT_Send+0x2f4>)
 8007244:	601a      	str	r2, [r3, #0]
    break;
 8007246:	e0ea      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWMODE2:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE2();
 8007248:	230f      	movs	r3, #15
 800724a:	18fc      	adds	r4, r7, r3
 800724c:	f7ff fba4 	bl	8006998 <CWMODE2>
 8007250:	0003      	movs	r3, r0
 8007252:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007254:	f00d fb60 	bl	8014918 <HAL_GetTick>
 8007258:	0003      	movs	r3, r0
 800725a:	330a      	adds	r3, #10
 800725c:	001a      	movs	r2, r3
 800725e:	4b74      	ldr	r3, [pc, #464]	@ (8007430 <AT_Send+0x2f4>)
 8007260:	601a      	str	r2, [r3, #0]
    break;
 8007262:	e0dc      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWAUTOCONN:
//    Debug("Setting auto connect");
    ATCommandSend = CWAUTOCONN();
 8007264:	230f      	movs	r3, #15
 8007266:	18fc      	adds	r4, r7, r3
 8007268:	f7ff fbb2 	bl	80069d0 <CWAUTOCONN>
 800726c:	0003      	movs	r3, r0
 800726e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007270:	f00d fb52 	bl	8014918 <HAL_GetTick>
 8007274:	0003      	movs	r3, r0
 8007276:	330a      	adds	r3, #10
 8007278:	001a      	movs	r2, r3
 800727a:	4b6d      	ldr	r3, [pc, #436]	@ (8007430 <AT_Send+0x2f4>)
 800727c:	601a      	str	r2, [r3, #0]
    break;
 800727e:	e0ce      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8007280:	4a6e      	ldr	r2, [pc, #440]	@ (800743c <AT_Send+0x300>)
 8007282:	4b6d      	ldr	r3, [pc, #436]	@ (8007438 <AT_Send+0x2fc>)
 8007284:	0019      	movs	r1, r3
 8007286:	2003      	movs	r0, #3
 8007288:	f00c fdce 	bl	8013e28 <CreateLine>
    ATCommandSend = CWJAP();
 800728c:	230f      	movs	r3, #15
 800728e:	18fc      	adds	r4, r7, r3
 8007290:	f7ff fbba 	bl	8006a08 <CWJAP>
 8007294:	0003      	movs	r3, r0
 8007296:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007298:	f00d fb3e 	bl	8014918 <HAL_GetTick>
 800729c:	0003      	movs	r3, r0
 800729e:	3332      	adds	r3, #50	@ 0x32
 80072a0:	001a      	movs	r2, r3
 80072a2:	4b63      	ldr	r3, [pc, #396]	@ (8007430 <AT_Send+0x2f4>)
 80072a4:	601a      	str	r2, [r3, #0]
    break;
 80072a6:	e0ba      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWMODE3:
//    Debug("SET in station/soft-ap mode");
    ATCommandSend = CWMODE3();
 80072a8:	230f      	movs	r3, #15
 80072aa:	18fc      	adds	r4, r7, r3
 80072ac:	f7ff fc2a 	bl	8006b04 <CWMODE3>
 80072b0:	0003      	movs	r3, r0
 80072b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072b4:	f00d fb30 	bl	8014918 <HAL_GetTick>
 80072b8:	0003      	movs	r3, r0
 80072ba:	330a      	adds	r3, #10
 80072bc:	001a      	movs	r2, r3
 80072be:	4b5c      	ldr	r3, [pc, #368]	@ (8007430 <AT_Send+0x2f4>)
 80072c0:	601a      	str	r2, [r3, #0]
    break;
 80072c2:	e0ac      	b.n	800741e <AT_Send+0x2e2>

  case AT_CWSAP:
//    Debug("SET soft AP mode parameters");
    ATCommandSend = CWSAP();
 80072c4:	230f      	movs	r3, #15
 80072c6:	18fc      	adds	r4, r7, r3
 80072c8:	f7ff fc54 	bl	8006b74 <CWSAP>
 80072cc:	0003      	movs	r3, r0
 80072ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072d0:	f00d fb22 	bl	8014918 <HAL_GetTick>
 80072d4:	0003      	movs	r3, r0
 80072d6:	330a      	adds	r3, #10
 80072d8:	001a      	movs	r2, r3
 80072da:	4b55      	ldr	r3, [pc, #340]	@ (8007430 <AT_Send+0x2f4>)
 80072dc:	601a      	str	r2, [r3, #0]
    break;
 80072de:	e09e      	b.n	800741e <AT_Send+0x2e2>

  case AT_CIPMUX:
//    Debug("ATCommandSend = CIPMUX()");
    ATCommandSend = CIPMUX();
 80072e0:	230f      	movs	r3, #15
 80072e2:	18fc      	adds	r4, r7, r3
 80072e4:	f7ff fc62 	bl	8006bac <CIPMUX>
 80072e8:	0003      	movs	r3, r0
 80072ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072ec:	f00d fb14 	bl	8014918 <HAL_GetTick>
 80072f0:	0003      	movs	r3, r0
 80072f2:	330a      	adds	r3, #10
 80072f4:	001a      	movs	r2, r3
 80072f6:	4b4e      	ldr	r3, [pc, #312]	@ (8007430 <AT_Send+0x2f4>)
 80072f8:	601a      	str	r2, [r3, #0]
    break;
 80072fa:	e090      	b.n	800741e <AT_Send+0x2e2>

  case AT_WEBSERVER:
//    Debug("ATCommandSend = WEBSERVER()");
    ATCommandSend = WEBSERVER();
 80072fc:	230f      	movs	r3, #15
 80072fe:	18fc      	adds	r4, r7, r3
 8007300:	f7ff fc70 	bl	8006be4 <WEBSERVER>
 8007304:	0003      	movs	r3, r0
 8007306:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007308:	f00d fb06 	bl	8014918 <HAL_GetTick>
 800730c:	0003      	movs	r3, r0
 800730e:	330a      	adds	r3, #10
 8007310:	001a      	movs	r2, r3
 8007312:	4b47      	ldr	r3, [pc, #284]	@ (8007430 <AT_Send+0x2f4>)
 8007314:	601a      	str	r2, [r3, #0]
    break;
 8007316:	e082      	b.n	800741e <AT_Send+0x2e2>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8007318:	230f      	movs	r3, #15
 800731a:	18fc      	adds	r4, r7, r3
 800731c:	f7ff fc7e 	bl	8006c1c <HTTPCPOST>
 8007320:	0003      	movs	r3, r0
 8007322:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007324:	f00d faf8 	bl	8014918 <HAL_GetTick>
 8007328:	0003      	movs	r3, r0
 800732a:	33f5      	adds	r3, #245	@ 0xf5
 800732c:	33ff      	adds	r3, #255	@ 0xff
 800732e:	001a      	movs	r2, r3
 8007330:	4b3f      	ldr	r3, [pc, #252]	@ (8007430 <AT_Send+0x2f4>)
 8007332:	601a      	str	r2, [r3, #0]
    break;
 8007334:	e073      	b.n	800741e <AT_Send+0x2e2>

  case AT_SENDDATA:
//    Debug("Send the data");
    ATCommandSend = SENDDATA();
 8007336:	230f      	movs	r3, #15
 8007338:	18fc      	adds	r4, r7, r3
 800733a:	f7ff fd31 	bl	8006da0 <SENDDATA>
 800733e:	0003      	movs	r3, r0
 8007340:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007342:	f00d fae9 	bl	8014918 <HAL_GetTick>
 8007346:	0003      	movs	r3, r0
 8007348:	33f5      	adds	r3, #245	@ 0xf5
 800734a:	33ff      	adds	r3, #255	@ 0xff
 800734c:	001a      	movs	r2, r3
 800734e:	4b38      	ldr	r3, [pc, #224]	@ (8007430 <AT_Send+0x2f4>)
 8007350:	601a      	str	r2, [r3, #0]
    break;
 8007352:	e064      	b.n	800741e <AT_Send+0x2e2>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007354:	4a3a      	ldr	r2, [pc, #232]	@ (8007440 <AT_Send+0x304>)
 8007356:	4b38      	ldr	r3, [pc, #224]	@ (8007438 <AT_Send+0x2fc>)
 8007358:	0019      	movs	r1, r3
 800735a:	2003      	movs	r0, #3
 800735c:	f00c fd64 	bl	8013e28 <CreateLine>
    ATCommandSend = SLEEP();
 8007360:	230f      	movs	r3, #15
 8007362:	18fc      	adds	r4, r7, r3
 8007364:	f7ff fd34 	bl	8006dd0 <SLEEP>
 8007368:	0003      	movs	r3, r0
 800736a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800736c:	f00d fad4 	bl	8014918 <HAL_GetTick>
 8007370:	0003      	movs	r3, r0
 8007372:	330a      	adds	r3, #10
 8007374:	001a      	movs	r2, r3
 8007376:	4b2e      	ldr	r3, [pc, #184]	@ (8007430 <AT_Send+0x2f4>)
 8007378:	601a      	str	r2, [r3, #0]
    break;
 800737a:	e050      	b.n	800741e <AT_Send+0x2e2>

  case AT_CIPSNTPCFG:
//    Debug("Config SNTP client");
    ATCommandSend = CIPSNTPCFG();
 800737c:	230f      	movs	r3, #15
 800737e:	18fc      	adds	r4, r7, r3
 8007380:	f7ff fd42 	bl	8006e08 <CIPSNTPCFG>
 8007384:	0003      	movs	r3, r0
 8007386:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007388:	f00d fac6 	bl	8014918 <HAL_GetTick>
 800738c:	0003      	movs	r3, r0
 800738e:	330a      	adds	r3, #10
 8007390:	001a      	movs	r2, r3
 8007392:	4b27      	ldr	r3, [pc, #156]	@ (8007430 <AT_Send+0x2f4>)
 8007394:	601a      	str	r2, [r3, #0]
    break;
 8007396:	e042      	b.n	800741e <AT_Send+0x2e2>

  case AT_CIPSNTPTIME:
//    Debug("Get time from internet");
    ATCommandSend = CIPSNTPTIME();
 8007398:	230f      	movs	r3, #15
 800739a:	18fc      	adds	r4, r7, r3
 800739c:	f7ff fd54 	bl	8006e48 <CIPSNTPTIME>
 80073a0:	0003      	movs	r3, r0
 80073a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80073a4:	f00d fab8 	bl	8014918 <HAL_GetTick>
 80073a8:	0003      	movs	r3, r0
 80073aa:	33f5      	adds	r3, #245	@ 0xf5
 80073ac:	33ff      	adds	r3, #255	@ 0xff
 80073ae:	001a      	movs	r2, r3
 80073b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007430 <AT_Send+0x2f4>)
 80073b2:	601a      	str	r2, [r3, #0]
    break;
 80073b4:	e033      	b.n	800741e <AT_Send+0x2e2>

  case AT_CIPSNTPINTV:
//    Debug("Set the interval to timesync");
    ATCommandSend = CIPSNTPINTV();
 80073b6:	230f      	movs	r3, #15
 80073b8:	18fc      	adds	r4, r7, r3
 80073ba:	f7ff fd61 	bl	8006e80 <CIPSNTPINTV>
 80073be:	0003      	movs	r3, r0
 80073c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073c2:	f00d faa9 	bl	8014918 <HAL_GetTick>
 80073c6:	0003      	movs	r3, r0
 80073c8:	330a      	adds	r3, #10
 80073ca:	001a      	movs	r2, r3
 80073cc:	4b18      	ldr	r3, [pc, #96]	@ (8007430 <AT_Send+0x2f4>)
 80073ce:	601a      	str	r2, [r3, #0]
    break;
 80073d0:	e025      	b.n	800741e <AT_Send+0x2e2>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL via API");
 80073d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007444 <AT_Send+0x308>)
 80073d4:	4b18      	ldr	r3, [pc, #96]	@ (8007438 <AT_Send+0x2fc>)
 80073d6:	0019      	movs	r1, r3
 80073d8:	2003      	movs	r0, #3
 80073da:	f00c fd25 	bl	8013e28 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 80073de:	230f      	movs	r3, #15
 80073e0:	18fc      	adds	r4, r7, r3
 80073e2:	f7ff fc99 	bl	8006d18 <HTTPCPOST_MAILAPI>
 80073e6:	0003      	movs	r3, r0
 80073e8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80073ea:	f00d fa95 	bl	8014918 <HAL_GetTick>
 80073ee:	0003      	movs	r3, r0
 80073f0:	3332      	adds	r3, #50	@ 0x32
 80073f2:	001a      	movs	r2, r3
 80073f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007430 <AT_Send+0x2f4>)
 80073f6:	601a      	str	r2, [r3, #0]
    break;
 80073f8:	e011      	b.n	800741e <AT_Send+0x2e2>

  case AT_SENDMAIL:
//    Debug("Send Email content");
    ATCommandSend = SENDMAIL();
 80073fa:	230f      	movs	r3, #15
 80073fc:	18fc      	adds	r4, r7, r3
 80073fe:	f7ff fc73 	bl	8006ce8 <SENDMAIL>
 8007402:	0003      	movs	r3, r0
 8007404:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007406:	f00d fa87 	bl	8014918 <HAL_GetTick>
 800740a:	0003      	movs	r3, r0
 800740c:	33f5      	adds	r3, #245	@ 0xf5
 800740e:	33ff      	adds	r3, #255	@ 0xff
 8007410:	001a      	movs	r2, r3
 8007412:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <AT_Send+0x2f4>)
 8007414:	601a      	str	r2, [r3, #0]
    break;
 8007416:	e002      	b.n	800741e <AT_Send+0x2e2>
#endif

  case AT_END:
    break;
 8007418:	46c0      	nop			@ (mov r8, r8)
 800741a:	e000      	b.n	800741e <AT_Send+0x2e2>
  break;
 800741c:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800741e:	230f      	movs	r3, #15
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	781b      	ldrb	r3, [r3, #0]
}
 8007424:	0018      	movs	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	b005      	add	sp, #20
 800742a:	bd90      	pop	{r4, r7, pc}
 800742c:	0802de40 	.word	0x0802de40
 8007430:	20000694 	.word	0x20000694
 8007434:	0802b0dc 	.word	0x0802b0dc
 8007438:	0802aa1c 	.word	0x0802aa1c
 800743c:	0802b0e8 	.word	0x0802b0e8
 8007440:	0802b0fc 	.word	0x0802b0fc
 8007444:	0802b120 	.word	0x0802b120

08007448 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800744e:	1dfb      	adds	r3, r7, #7
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007454:	4b82      	ldr	r3, [pc, #520]	@ (8007660 <ESP_WakeTest+0x218>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b05      	cmp	r3, #5
 800745a:	d900      	bls.n	800745e <ESP_WakeTest+0x16>
 800745c:	e0e4      	b.n	8007628 <ESP_WakeTest+0x1e0>
 800745e:	009a      	lsls	r2, r3, #2
 8007460:	4b80      	ldr	r3, [pc, #512]	@ (8007664 <ESP_WakeTest+0x21c>)
 8007462:	18d3      	adds	r3, r2, r3
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007468:	4b7f      	ldr	r3, [pc, #508]	@ (8007668 <ESP_WakeTest+0x220>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2201      	movs	r2, #1
 800746e:	4053      	eors	r3, r2
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d041      	beq.n	80074fa <ESP_WakeTest+0xb2>
        EspTurnedOn = true;
 8007476:	4b7c      	ldr	r3, [pc, #496]	@ (8007668 <ESP_WakeTest+0x220>)
 8007478:	2201      	movs	r2, #1
 800747a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800747c:	2380      	movs	r3, #128	@ 0x80
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	487a      	ldr	r0, [pc, #488]	@ (800766c <ESP_WakeTest+0x224>)
 8007482:	2200      	movs	r2, #0
 8007484:	0019      	movs	r1, r3
 8007486:	f00e fcba 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800748a:	2032      	movs	r0, #50	@ 0x32
 800748c:	f00d fa4e 	bl	801492c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007490:	2380      	movs	r3, #128	@ 0x80
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	4875      	ldr	r0, [pc, #468]	@ (800766c <ESP_WakeTest+0x224>)
 8007496:	2201      	movs	r2, #1
 8007498:	0019      	movs	r1, r3
 800749a:	f00e fcb0 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800749e:	200a      	movs	r0, #10
 80074a0:	f00d fa44 	bl	801492c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80074a4:	4b72      	ldr	r3, [pc, #456]	@ (8007670 <ESP_WakeTest+0x228>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	2101      	movs	r1, #1
 80074aa:	0018      	movs	r0, r3
 80074ac:	f00e fca7 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074b0:	200a      	movs	r0, #10
 80074b2:	f00d fa3b 	bl	801492c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80074b6:	4b6e      	ldr	r3, [pc, #440]	@ (8007670 <ESP_WakeTest+0x228>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	2102      	movs	r1, #2
 80074bc:	0018      	movs	r0, r3
 80074be:	f00e fc9e 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(50); // wait for 5RC
 80074c2:	2032      	movs	r0, #50	@ 0x32
 80074c4:	f00d fa32 	bl	801492c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074c8:	4b69      	ldr	r3, [pc, #420]	@ (8007670 <ESP_WakeTest+0x228>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	2101      	movs	r1, #1
 80074ce:	0018      	movs	r0, r3
 80074d0:	f00e fc95 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80074d4:	2064      	movs	r0, #100	@ 0x64
 80074d6:	f00d fa29 	bl	801492c <HAL_Delay>
        batteryCharge = ReadBatteryVoltage();  // read voltage in loaded condition
 80074da:	f002 fac5 	bl	8009a68 <ReadBatteryVoltage>
 80074de:	1c02      	adds	r2, r0, #0
 80074e0:	4b64      	ldr	r3, [pc, #400]	@ (8007674 <ESP_WakeTest+0x22c>)
 80074e2:	601a      	str	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80074e4:	f00d fa18 	bl	8014918 <HAL_GetTick>
 80074e8:	0003      	movs	r3, r0
 80074ea:	22e1      	movs	r2, #225	@ 0xe1
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	189a      	adds	r2, r3, r2
 80074f0:	4b61      	ldr	r3, [pc, #388]	@ (8007678 <ESP_WakeTest+0x230>)
 80074f2:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80074f4:	4b5c      	ldr	r3, [pc, #368]	@ (8007668 <ESP_WakeTest+0x220>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80074fa:	2380      	movs	r3, #128	@ 0x80
 80074fc:	005a      	lsls	r2, r3, #1
 80074fe:	4b5f      	ldr	r3, [pc, #380]	@ (800767c <ESP_WakeTest+0x234>)
 8007500:	0011      	movs	r1, r2
 8007502:	0018      	movs	r0, r3
 8007504:	f7fd fd52 	bl	8004fac <ESP_Receive>
 8007508:	1e03      	subs	r3, r0, #0
 800750a:	d100      	bne.n	800750e <ESP_WakeTest+0xc6>
 800750c:	e09f      	b.n	800764e <ESP_WakeTest+0x206>
        TestState = ESP_TEST_SEND;
 800750e:	4b54      	ldr	r3, [pc, #336]	@ (8007660 <ESP_WakeTest+0x218>)
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007514:	e09b      	b.n	800764e <ESP_WakeTest+0x206>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007516:	4b58      	ldr	r3, [pc, #352]	@ (8007678 <ESP_WakeTest+0x230>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	0018      	movs	r0, r3
 800751c:	f00c fc2e 	bl	8013d7c <TimestampIsReached>
 8007520:	1e03      	subs	r3, r0, #0
 8007522:	d100      	bne.n	8007526 <ESP_WakeTest+0xde>
 8007524:	e095      	b.n	8007652 <ESP_WakeTest+0x20a>
        ATSend = AT_Send(ATCommand);
 8007526:	4b56      	ldr	r3, [pc, #344]	@ (8007680 <ESP_WakeTest+0x238>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	1dfc      	adds	r4, r7, #7
 800752c:	0018      	movs	r0, r3
 800752e:	f7ff fe05 	bl	800713c <AT_Send>
 8007532:	0003      	movs	r3, r0
 8007534:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007536:	1dfb      	adds	r3, r7, #7
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d100      	bne.n	8007540 <ESP_WakeTest+0xf8>
 800753e:	e088      	b.n	8007652 <ESP_WakeTest+0x20a>
          TestState = ESP_TEST_RECEIVE;
 8007540:	4b47      	ldr	r3, [pc, #284]	@ (8007660 <ESP_WakeTest+0x218>)
 8007542:	2202      	movs	r2, #2
 8007544:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007546:	e084      	b.n	8007652 <ESP_WakeTest+0x20a>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8007548:	4b4b      	ldr	r3, [pc, #300]	@ (8007678 <ESP_WakeTest+0x230>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	0018      	movs	r0, r3
 800754e:	f00c fc15 	bl	8013d7c <TimestampIsReached>
 8007552:	1e03      	subs	r3, r0, #0
 8007554:	d100      	bne.n	8007558 <ESP_WakeTest+0x110>
 8007556:	e07e      	b.n	8007656 <ESP_WakeTest+0x20e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007558:	4b4a      	ldr	r3, [pc, #296]	@ (8007684 <ESP_WakeTest+0x23c>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	0018      	movs	r0, r3
 800755e:	f7ff fcab 	bl	8006eb8 <DMA_ProcessBuffer>
 8007562:	0003      	movs	r3, r0
 8007564:	001a      	movs	r2, r3
 8007566:	4b48      	ldr	r3, [pc, #288]	@ (8007688 <ESP_WakeTest+0x240>)
 8007568:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800756a:	4b47      	ldr	r3, [pc, #284]	@ (8007688 <ESP_WakeTest+0x240>)
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	4b45      	ldr	r3, [pc, #276]	@ (8007684 <ESP_WakeTest+0x23c>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	1dbc      	adds	r4, r7, #6
 8007574:	0019      	movs	r1, r3
 8007576:	0010      	movs	r0, r2
 8007578:	f7ff fd9e 	bl	80070b8 <ATCompare>
 800757c:	0003      	movs	r3, r0
 800757e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007580:	4b41      	ldr	r3, [pc, #260]	@ (8007688 <ESP_WakeTest+0x240>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d102      	bne.n	800758e <ESP_WakeTest+0x146>
          TestState = ESP_TEST_SEND;
 8007588:	4b35      	ldr	r3, [pc, #212]	@ (8007660 <ESP_WakeTest+0x218>)
 800758a:	2201      	movs	r2, #1
 800758c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800758e:	4b3e      	ldr	r3, [pc, #248]	@ (8007688 <ESP_WakeTest+0x240>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b07      	cmp	r3, #7
 8007594:	d104      	bne.n	80075a0 <ESP_WakeTest+0x158>
          StartProg();
 8007596:	f7fe ff35 	bl	8006404 <StartProg>
          TestState = ESP_TEST_BOOT;
 800759a:	4b31      	ldr	r3, [pc, #196]	@ (8007660 <ESP_WakeTest+0x218>)
 800759c:	2205      	movs	r2, #5
 800759e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80075a0:	4b39      	ldr	r3, [pc, #228]	@ (8007688 <ESP_WakeTest+0x240>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d109      	bne.n	80075bc <ESP_WakeTest+0x174>
          ESPTimeStamp = HAL_GetTick() + 50;
 80075a8:	f00d f9b6 	bl	8014918 <HAL_GetTick>
 80075ac:	0003      	movs	r3, r0
 80075ae:	3332      	adds	r3, #50	@ 0x32
 80075b0:	001a      	movs	r2, r3
 80075b2:	4b31      	ldr	r3, [pc, #196]	@ (8007678 <ESP_WakeTest+0x230>)
 80075b4:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80075b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007660 <ESP_WakeTest+0x218>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80075bc:	1dbb      	adds	r3, r7, #6
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d048      	beq.n	8007656 <ESP_WakeTest+0x20e>
          TestState = ESP_TEST_VALIDATE;
 80075c4:	4b26      	ldr	r3, [pc, #152]	@ (8007660 <ESP_WakeTest+0x218>)
 80075c6:	2203      	movs	r2, #3
 80075c8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075ca:	e044      	b.n	8007656 <ESP_WakeTest+0x20e>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80075cc:	4b2f      	ldr	r3, [pc, #188]	@ (800768c <ESP_WakeTest+0x244>)
 80075ce:	22fa      	movs	r2, #250	@ 0xfa
 80075d0:	0112      	lsls	r2, r2, #4
 80075d2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80075d4:	f00b f87c 	bl	80126d0 <Calculate_LED_ON>
 80075d8:	0003      	movs	r3, r0
 80075da:	001a      	movs	r2, r3
 80075dc:	4b2b      	ldr	r3, [pc, #172]	@ (800768c <ESP_WakeTest+0x244>)
 80075de:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80075e0:	4b2a      	ldr	r3, [pc, #168]	@ (800768c <ESP_WakeTest+0x244>)
 80075e2:	22fa      	movs	r2, #250	@ 0xfa
 80075e4:	0112      	lsls	r2, r2, #4
 80075e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80075e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007660 <ESP_WakeTest+0x218>)
 80075ea:	2204      	movs	r2, #4
 80075ec:	701a      	strb	r2, [r3, #0]

      break;
 80075ee:	e033      	b.n	8007658 <ESP_WakeTest+0x210>

    case ESP_TEST_DEINIT:
      testRound = false;
 80075f0:	4b27      	ldr	r3, [pc, #156]	@ (8007690 <ESP_WakeTest+0x248>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80075f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007670 <ESP_WakeTest+0x228>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	2101      	movs	r1, #1
 80075fc:	0018      	movs	r0, r3
 80075fe:	f00e fbfe 	bl	8015dfe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007602:	2380      	movs	r3, #128	@ 0x80
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	4819      	ldr	r0, [pc, #100]	@ (800766c <ESP_WakeTest+0x224>)
 8007608:	2200      	movs	r2, #0
 800760a:	0019      	movs	r1, r3
 800760c:	f00e fbf7 	bl	8015dfe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007610:	4b17      	ldr	r3, [pc, #92]	@ (8007670 <ESP_WakeTest+0x228>)
 8007612:	2200      	movs	r2, #0
 8007614:	2102      	movs	r1, #2
 8007616:	0018      	movs	r0, r3
 8007618:	f00e fbf1 	bl	8015dfe <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800761c:	f005 ff98 	bl	800d550 <SetESPMeasurementDone>
      EspTurnedOn = false;
 8007620:	4b11      	ldr	r3, [pc, #68]	@ (8007668 <ESP_WakeTest+0x220>)
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
      break;
 8007626:	e017      	b.n	8007658 <ESP_WakeTest+0x210>

    default:
      TestState = ESP_TEST_INIT;
 8007628:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <ESP_WakeTest+0x218>)
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
      break;
 800762e:	e013      	b.n	8007658 <ESP_WakeTest+0x210>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007630:	4b16      	ldr	r3, [pc, #88]	@ (800768c <ESP_WakeTest+0x244>)
 8007632:	22fa      	movs	r2, #250	@ 0xfa
 8007634:	0112      	lsls	r2, r2, #4
 8007636:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8007638:	4b14      	ldr	r3, [pc, #80]	@ (800768c <ESP_WakeTest+0x244>)
 800763a:	22fa      	movs	r2, #250	@ 0xfa
 800763c:	0112      	lsls	r2, r2, #4
 800763e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007640:	f00b f846 	bl	80126d0 <Calculate_LED_ON>
 8007644:	0003      	movs	r3, r0
 8007646:	001a      	movs	r2, r3
 8007648:	4b10      	ldr	r3, [pc, #64]	@ (800768c <ESP_WakeTest+0x244>)
 800764a:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800764c:	e004      	b.n	8007658 <ESP_WakeTest+0x210>
      break;
 800764e:	46c0      	nop			@ (mov r8, r8)
 8007650:	e002      	b.n	8007658 <ESP_WakeTest+0x210>
      break;
 8007652:	46c0      	nop			@ (mov r8, r8)
 8007654:	e000      	b.n	8007658 <ESP_WakeTest+0x210>
      break;
 8007656:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007658:	46c0      	nop			@ (mov r8, r8)
 800765a:	46bd      	mov	sp, r7
 800765c:	b003      	add	sp, #12
 800765e:	bd90      	pop	{r4, r7, pc}
 8007660:	20000703 	.word	0x20000703
 8007664:	0802de9c 	.word	0x0802de9c
 8007668:	200005ac 	.word	0x200005ac
 800766c:	50000800 	.word	0x50000800
 8007670:	50001c00 	.word	0x50001c00
 8007674:	20002160 	.word	0x20002160
 8007678:	20000694 	.word	0x20000694
 800767c:	200004ac 	.word	0x200004ac
 8007680:	20000701 	.word	0x20000701
 8007684:	20000700 	.word	0x20000700
 8007688:	20000033 	.word	0x20000033
 800768c:	40000400 	.word	0x40000400
 8007690:	20000001 	.word	0x20000001

08007694 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8007694:	b5b0      	push	{r4, r5, r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800769a:	1dfb      	adds	r3, r7, #7
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
// Het lijkt er op dat ESP32  niet meer start indien de batterijspanning onder de 3,77 Volt daalt.
// Om uart fouten te voorkomen mogelijk ESP niet meer afhandelen.
  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80076a0:	4b67      	ldr	r3, [pc, #412]	@ (8007840 <ESP_Upkeep+0x1ac>)
 80076a2:	781a      	ldrb	r2, [r3, #0]
 80076a4:	4b67      	ldr	r3, [pc, #412]	@ (8007844 <ESP_Upkeep+0x1b0>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d028      	beq.n	80076fe <ESP_Upkeep+0x6a>
 80076ac:	f00c fc46 	bl	8013f3c <GetVerboseLevel>
 80076b0:	0003      	movs	r3, r0
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d123      	bne.n	80076fe <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 80076b6:	4b62      	ldr	r3, [pc, #392]	@ (8007840 <ESP_Upkeep+0x1ac>)
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	4b62      	ldr	r3, [pc, #392]	@ (8007844 <ESP_Upkeep+0x1b0>)
 80076bc:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 80076be:	4b61      	ldr	r3, [pc, #388]	@ (8007844 <ESP_Upkeep+0x1b0>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d107      	bne.n	80076d6 <ESP_Upkeep+0x42>
 80076c6:	4b60      	ldr	r3, [pc, #384]	@ (8007848 <ESP_Upkeep+0x1b4>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b0e      	cmp	r3, #14
 80076cc:	d017      	beq.n	80076fe <ESP_Upkeep+0x6a>
 80076ce:	4b5e      	ldr	r3, [pc, #376]	@ (8007848 <ESP_Upkeep+0x1b4>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b14      	cmp	r3, #20
 80076d4:	d013      	beq.n	80076fe <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80076d6:	4b5b      	ldr	r3, [pc, #364]	@ (8007844 <ESP_Upkeep+0x1b0>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	001d      	movs	r5, r3
 80076dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007848 <ESP_Upkeep+0x1b4>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	0018      	movs	r0, r3
 80076e2:	4b5a      	ldr	r3, [pc, #360]	@ (800784c <ESP_Upkeep+0x1b8>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	001c      	movs	r4, r3
 80076e8:	4b59      	ldr	r3, [pc, #356]	@ (8007850 <ESP_Upkeep+0x1bc>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	4a59      	ldr	r2, [pc, #356]	@ (8007854 <ESP_Upkeep+0x1c0>)
 80076ee:	495a      	ldr	r1, [pc, #360]	@ (8007858 <ESP_Upkeep+0x1c4>)
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	9401      	str	r4, [sp, #4]
 80076f4:	9000      	str	r0, [sp, #0]
 80076f6:	002b      	movs	r3, r5
 80076f8:	2003      	movs	r0, #3
 80076fa:	f00c fb95 	bl	8013e28 <CreateLine>
    }
  }
  switch (EspState) {
 80076fe:	4b50      	ldr	r3, [pc, #320]	@ (8007840 <ESP_Upkeep+0x1ac>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b0f      	cmp	r3, #15
 8007704:	d901      	bls.n	800770a <ESP_Upkeep+0x76>
 8007706:	f000 fcea 	bl	80080de <ESP_Upkeep+0xa4a>
 800770a:	009a      	lsls	r2, r3, #2
 800770c:	4b53      	ldr	r3, [pc, #332]	@ (800785c <ESP_Upkeep+0x1c8>)
 800770e:	18d3      	adds	r3, r2, r3
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007714:	4b4a      	ldr	r3, [pc, #296]	@ (8007840 <ESP_Upkeep+0x1ac>)
 8007716:	2201      	movs	r2, #1
 8007718:	701a      	strb	r2, [r3, #0]
      break;
 800771a:	f000 fcfb 	bl	8008114 <ESP_Upkeep+0xa80>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800771e:	4b50      	ldr	r3, [pc, #320]	@ (8007860 <ESP_Upkeep+0x1cc>)
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007724:	f006 f974 	bl	800da10 <AllDevicesReady>
 8007728:	0003      	movs	r3, r0
 800772a:	001a      	movs	r2, r3
 800772c:	2301      	movs	r3, #1
 800772e:	4053      	eors	r3, r2
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <ESP_Upkeep+0xa6>
 8007736:	f000 fcde 	bl	80080f6 <ESP_Upkeep+0xa62>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 800773a:	f00b f95b 	bl	80129f4 <SetESPIndicator>
      if(!EspTurnedOn){
 800773e:	4b49      	ldr	r3, [pc, #292]	@ (8007864 <ESP_Upkeep+0x1d0>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2201      	movs	r2, #1
 8007744:	4053      	eors	r3, r2
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d03f      	beq.n	80077cc <ESP_Upkeep+0x138>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800774c:	2380      	movs	r3, #128	@ 0x80
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	4845      	ldr	r0, [pc, #276]	@ (8007868 <ESP_Upkeep+0x1d4>)
 8007752:	2200      	movs	r2, #0
 8007754:	0019      	movs	r1, r3
 8007756:	f00e fb52 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800775a:	200a      	movs	r0, #10
 800775c:	f00d f8e6 	bl	801492c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007760:	2380      	movs	r3, #128	@ 0x80
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	4840      	ldr	r0, [pc, #256]	@ (8007868 <ESP_Upkeep+0x1d4>)
 8007766:	2201      	movs	r2, #1
 8007768:	0019      	movs	r1, r3
 800776a:	f00e fb48 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800776e:	2032      	movs	r0, #50	@ 0x32
 8007770:	f00d f8dc 	bl	801492c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007774:	4b3d      	ldr	r3, [pc, #244]	@ (800786c <ESP_Upkeep+0x1d8>)
 8007776:	2200      	movs	r2, #0
 8007778:	2101      	movs	r1, #1
 800777a:	0018      	movs	r0, r3
 800777c:	f00e fb3f 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007780:	200a      	movs	r0, #10
 8007782:	f00d f8d3 	bl	801492c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007786:	4b39      	ldr	r3, [pc, #228]	@ (800786c <ESP_Upkeep+0x1d8>)
 8007788:	2201      	movs	r2, #1
 800778a:	2102      	movs	r1, #2
 800778c:	0018      	movs	r0, r3
 800778e:	f00e fb36 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8007792:	2032      	movs	r0, #50	@ 0x32
 8007794:	f00d f8ca 	bl	801492c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007798:	4b34      	ldr	r3, [pc, #208]	@ (800786c <ESP_Upkeep+0x1d8>)
 800779a:	2201      	movs	r2, #1
 800779c:	2101      	movs	r1, #1
 800779e:	0018      	movs	r0, r3
 80077a0:	f00e fb2d 	bl	8015dfe <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077a4:	2032      	movs	r0, #50	@ 0x32
 80077a6:	f00d f8c1 	bl	801492c <HAL_Delay>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80077aa:	f00d f8b5 	bl	8014918 <HAL_GetTick>
 80077ae:	0003      	movs	r3, r0
 80077b0:	22e1      	movs	r2, #225	@ 0xe1
 80077b2:	0092      	lsls	r2, r2, #2
 80077b4:	189a      	adds	r2, r3, r2
 80077b6:	4b2e      	ldr	r3, [pc, #184]	@ (8007870 <ESP_Upkeep+0x1dc>)
 80077b8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80077ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007864 <ESP_Upkeep+0x1d0>)
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 80077c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007874 <ESP_Upkeep+0x1e0>)
 80077c2:	4b25      	ldr	r3, [pc, #148]	@ (8007858 <ESP_Upkeep+0x1c4>)
 80077c4:	0019      	movs	r1, r3
 80077c6:	2003      	movs	r0, #3
 80077c8:	f00c fb2e 	bl	8013e28 <CreateLine>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80077cc:	2380      	movs	r3, #128	@ 0x80
 80077ce:	005a      	lsls	r2, r3, #1
 80077d0:	4b29      	ldr	r3, [pc, #164]	@ (8007878 <ESP_Upkeep+0x1e4>)
 80077d2:	0011      	movs	r1, r2
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7fd fbe9 	bl	8004fac <ESP_Receive>
 80077da:	1e03      	subs	r3, r0, #0
 80077dc:	d101      	bne.n	80077e2 <ESP_Upkeep+0x14e>
 80077de:	f000 fc8c 	bl	80080fa <ESP_Upkeep+0xa66>
        EspState = ESP_STATE_WAIT_AWAKE;
 80077e2:	4b17      	ldr	r3, [pc, #92]	@ (8007840 <ESP_Upkeep+0x1ac>)
 80077e4:	220f      	movs	r2, #15
 80077e6:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80077e8:	f00d f896 	bl	8014918 <HAL_GetTick>
 80077ec:	0003      	movs	r3, r0
 80077ee:	22fa      	movs	r2, #250	@ 0xfa
 80077f0:	00d2      	lsls	r2, r2, #3
 80077f2:	189a      	adds	r2, r3, r2
 80077f4:	4b21      	ldr	r3, [pc, #132]	@ (800787c <ESP_Upkeep+0x1e8>)
 80077f6:	601a      	str	r2, [r3, #0]
      }
      break;
 80077f8:	f000 fc7f 	bl	80080fa <ESP_Upkeep+0xa66>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80077fc:	2001      	movs	r0, #1
 80077fe:	f7ff fb5b 	bl	8006eb8 <DMA_ProcessBuffer>
 8007802:	0003      	movs	r3, r0
 8007804:	001a      	movs	r2, r3
 8007806:	4b1e      	ldr	r3, [pc, #120]	@ (8007880 <ESP_Upkeep+0x1ec>)
 8007808:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800780a:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <ESP_Upkeep+0x1ec>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	1dbc      	adds	r4, r7, #6
 8007810:	2101      	movs	r1, #1
 8007812:	0018      	movs	r0, r3
 8007814:	f7ff fc50 	bl	80070b8 <ATCompare>
 8007818:	0003      	movs	r3, r0
 800781a:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800781c:	1dbb      	adds	r3, r7, #6
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d108      	bne.n	8007836 <ESP_Upkeep+0x1a2>
 8007824:	4b15      	ldr	r3, [pc, #84]	@ (800787c <ESP_Upkeep+0x1e8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	0018      	movs	r0, r3
 800782a:	f00c faa7 	bl	8013d7c <TimestampIsReached>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d101      	bne.n	8007836 <ESP_Upkeep+0x1a2>
 8007832:	f000 fc64 	bl	80080fe <ESP_Upkeep+0xa6a>
          EspState = ESP_STATE_MODE_SELECT;
 8007836:	4b02      	ldr	r3, [pc, #8]	@ (8007840 <ESP_Upkeep+0x1ac>)
 8007838:	220b      	movs	r2, #11
 800783a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800783c:	f000 fc5f 	bl	80080fe <ESP_Upkeep+0xa6a>
 8007840:	20000030 	.word	0x20000030
 8007844:	20000003 	.word	0x20000003
 8007848:	20000701 	.word	0x20000701
 800784c:	20000702 	.word	0x20000702
 8007850:	20000700 	.word	0x20000700
 8007854:	0802b134 	.word	0x0802b134
 8007858:	0802aa1c 	.word	0x0802aa1c
 800785c:	0802deb4 	.word	0x0802deb4
 8007860:	20001114 	.word	0x20001114
 8007864:	200005ac 	.word	0x200005ac
 8007868:	50000800 	.word	0x50000800
 800786c:	50001c00 	.word	0x50001c00
 8007870:	20000694 	.word	0x20000694
 8007874:	0802b160 	.word	0x0802b160
 8007878:	200004ac 	.word	0x200004ac
 800787c:	20000938 	.word	0x20000938
 8007880:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8007884:	4bd6      	ldr	r3, [pc, #856]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007886:	2209      	movs	r2, #9
 8007888:	2116      	movs	r1, #22
 800788a:	0018      	movs	r0, r3
 800788c:	f01e fe3e 	bl	802650c <memset>
      if(!InitIsDone || WifiReset){
 8007890:	4bd4      	ldr	r3, [pc, #848]	@ (8007be4 <ESP_Upkeep+0x550>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2201      	movs	r2, #1
 8007896:	4053      	eors	r3, r2
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <ESP_Upkeep+0x212>
 800789e:	4bd2      	ldr	r3, [pc, #840]	@ (8007be8 <ESP_Upkeep+0x554>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d016      	beq.n	80078d4 <ESP_Upkeep+0x240>
        memcpy(ATCommandArray, AT_INIT, sizeof(AT_INIT));
 80078a6:	4bce      	ldr	r3, [pc, #824]	@ (8007be0 <ESP_Upkeep+0x54c>)
 80078a8:	4ad0      	ldr	r2, [pc, #832]	@ (8007bec <ESP_Upkeep+0x558>)
 80078aa:	ca03      	ldmia	r2!, {r0, r1}
 80078ac:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 80078ae:	4bd0      	ldr	r3, [pc, #832]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 80078b0:	2204      	movs	r2, #4
 80078b2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078b4:	4bcf      	ldr	r3, [pc, #828]	@ (8007bf4 <ESP_Upkeep+0x560>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80078ba:	4bcf      	ldr	r3, [pc, #828]	@ (8007bf8 <ESP_Upkeep+0x564>)
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078c0:	4bcc      	ldr	r3, [pc, #816]	@ (8007bf4 <ESP_Upkeep+0x560>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	001a      	movs	r2, r3
 80078c6:	4bc6      	ldr	r3, [pc, #792]	@ (8007be0 <ESP_Upkeep+0x54c>)
 80078c8:	5c9a      	ldrb	r2, [r3, r2]
 80078ca:	4bcc      	ldr	r3, [pc, #816]	@ (8007bfc <ESP_Upkeep+0x568>)
 80078cc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078ce:	4bcc      	ldr	r3, [pc, #816]	@ (8007c00 <ESP_Upkeep+0x56c>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80078d4:	4bc3      	ldr	r3, [pc, #780]	@ (8007be4 <ESP_Upkeep+0x550>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01f      	beq.n	800791c <ESP_Upkeep+0x288>
 80078dc:	4bc9      	ldr	r3, [pc, #804]	@ (8007c04 <ESP_Upkeep+0x570>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2201      	movs	r2, #1
 80078e2:	4053      	eors	r3, r2
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d018      	beq.n	800791c <ESP_Upkeep+0x288>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80078ea:	4bbd      	ldr	r3, [pc, #756]	@ (8007be0 <ESP_Upkeep+0x54c>)
 80078ec:	4ac6      	ldr	r2, [pc, #792]	@ (8007c08 <ESP_Upkeep+0x574>)
 80078ee:	6811      	ldr	r1, [r2, #0]
 80078f0:	6019      	str	r1, [r3, #0]
 80078f2:	8892      	ldrh	r2, [r2, #4]
 80078f4:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80078f6:	4bbe      	ldr	r3, [pc, #760]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 80078f8:	2204      	movs	r2, #4
 80078fa:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078fc:	4bbd      	ldr	r3, [pc, #756]	@ (8007bf4 <ESP_Upkeep+0x560>)
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8007902:	4bbd      	ldr	r3, [pc, #756]	@ (8007bf8 <ESP_Upkeep+0x564>)
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007908:	4bba      	ldr	r3, [pc, #744]	@ (8007bf4 <ESP_Upkeep+0x560>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	001a      	movs	r2, r3
 800790e:	4bb4      	ldr	r3, [pc, #720]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007910:	5c9a      	ldrb	r2, [r3, r2]
 8007912:	4bba      	ldr	r3, [pc, #744]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007914:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007916:	4bba      	ldr	r3, [pc, #744]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !APtested){
 800791c:	4bb1      	ldr	r3, [pc, #708]	@ (8007be4 <ESP_Upkeep+0x550>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d021      	beq.n	8007968 <ESP_Upkeep+0x2d4>
 8007924:	4bb7      	ldr	r3, [pc, #732]	@ (8007c04 <ESP_Upkeep+0x570>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01d      	beq.n	8007968 <ESP_Upkeep+0x2d4>
 800792c:	4bb7      	ldr	r3, [pc, #732]	@ (8007c0c <ESP_Upkeep+0x578>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2201      	movs	r2, #1
 8007932:	4053      	eors	r3, r2
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <ESP_Upkeep+0x2d4>
        memcpy(ATCommandArray, AT_TEST, 2);
 800793a:	4bb5      	ldr	r3, [pc, #724]	@ (8007c10 <ESP_Upkeep+0x57c>)
 800793c:	881a      	ldrh	r2, [r3, #0]
 800793e:	4ba8      	ldr	r3, [pc, #672]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007940:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007942:	4bab      	ldr	r3, [pc, #684]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007944:	2204      	movs	r2, #4
 8007946:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007948:	4baa      	ldr	r3, [pc, #680]	@ (8007bf4 <ESP_Upkeep+0x560>)
 800794a:	2200      	movs	r2, #0
 800794c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800794e:	4baa      	ldr	r3, [pc, #680]	@ (8007bf8 <ESP_Upkeep+0x564>)
 8007950:	2204      	movs	r2, #4
 8007952:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007954:	4ba7      	ldr	r3, [pc, #668]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	001a      	movs	r2, r3
 800795a:	4ba1      	ldr	r3, [pc, #644]	@ (8007be0 <ESP_Upkeep+0x54c>)
 800795c:	5c9a      	ldrb	r2, [r3, r2]
 800795e:	4ba7      	ldr	r3, [pc, #668]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007960:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007962:	4ba7      	ldr	r3, [pc, #668]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007964:	2200      	movs	r2, #0
 8007966:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007968:	4b9e      	ldr	r3, [pc, #632]	@ (8007be4 <ESP_Upkeep+0x550>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d024      	beq.n	80079ba <ESP_Upkeep+0x326>
 8007970:	4ba4      	ldr	r3, [pc, #656]	@ (8007c04 <ESP_Upkeep+0x570>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d020      	beq.n	80079ba <ESP_Upkeep+0x326>
 8007978:	4ba4      	ldr	r3, [pc, #656]	@ (8007c0c <ESP_Upkeep+0x578>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01c      	beq.n	80079ba <ESP_Upkeep+0x326>
 8007980:	4ba4      	ldr	r3, [pc, #656]	@ (8007c14 <ESP_Upkeep+0x580>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d118      	bne.n	80079ba <ESP_Upkeep+0x326>
        memcpy(ATCommandArray, AT_MAIL, 3);
 8007988:	4b95      	ldr	r3, [pc, #596]	@ (8007be0 <ESP_Upkeep+0x54c>)
 800798a:	4aa3      	ldr	r2, [pc, #652]	@ (8007c18 <ESP_Upkeep+0x584>)
 800798c:	8811      	ldrh	r1, [r2, #0]
 800798e:	8019      	strh	r1, [r3, #0]
 8007990:	7892      	ldrb	r2, [r2, #2]
 8007992:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007994:	4b96      	ldr	r3, [pc, #600]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007996:	2204      	movs	r2, #4
 8007998:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800799a:	4b96      	ldr	r3, [pc, #600]	@ (8007bf4 <ESP_Upkeep+0x560>)
 800799c:	2200      	movs	r2, #0
 800799e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 80079a0:	4b95      	ldr	r3, [pc, #596]	@ (8007bf8 <ESP_Upkeep+0x564>)
 80079a2:	2206      	movs	r2, #6
 80079a4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079a6:	4b93      	ldr	r3, [pc, #588]	@ (8007bf4 <ESP_Upkeep+0x560>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	001a      	movs	r2, r3
 80079ac:	4b8c      	ldr	r3, [pc, #560]	@ (8007be0 <ESP_Upkeep+0x54c>)
 80079ae:	5c9a      	ldrb	r2, [r3, r2]
 80079b0:	4b92      	ldr	r3, [pc, #584]	@ (8007bfc <ESP_Upkeep+0x568>)
 80079b2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079b4:	4b92      	ldr	r3, [pc, #584]	@ (8007c00 <ESP_Upkeep+0x56c>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
      }
#endif
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 80079ba:	4b8a      	ldr	r3, [pc, #552]	@ (8007be4 <ESP_Upkeep+0x550>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d030      	beq.n	8007a24 <ESP_Upkeep+0x390>
 80079c2:	4b90      	ldr	r3, [pc, #576]	@ (8007c04 <ESP_Upkeep+0x570>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d02c      	beq.n	8007a24 <ESP_Upkeep+0x390>
 80079ca:	4b90      	ldr	r3, [pc, #576]	@ (8007c0c <ESP_Upkeep+0x578>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d028      	beq.n	8007a24 <ESP_Upkeep+0x390>
 80079d2:	4b92      	ldr	r3, [pc, #584]	@ (8007c1c <ESP_Upkeep+0x588>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2201      	movs	r2, #1
 80079d8:	4053      	eors	r3, r2
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d021      	beq.n	8007a24 <ESP_Upkeep+0x390>
 80079e0:	4b8c      	ldr	r3, [pc, #560]	@ (8007c14 <ESP_Upkeep+0x580>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d01d      	beq.n	8007a24 <ESP_Upkeep+0x390>
        memcpy(ATCommandArray, AT_SEND, 3);
 80079e8:	4b7d      	ldr	r3, [pc, #500]	@ (8007be0 <ESP_Upkeep+0x54c>)
 80079ea:	4a8d      	ldr	r2, [pc, #564]	@ (8007c20 <ESP_Upkeep+0x58c>)
 80079ec:	8811      	ldrh	r1, [r2, #0]
 80079ee:	8019      	strh	r1, [r3, #0]
 80079f0:	7892      	ldrb	r2, [r2, #2]
 80079f2:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80079f4:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 80079f6:	2204      	movs	r2, #4
 80079f8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079fa:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf4 <ESP_Upkeep+0x560>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007a00:	4b7d      	ldr	r3, [pc, #500]	@ (8007bf8 <ESP_Upkeep+0x564>)
 8007a02:	2202      	movs	r2, #2
 8007a04:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a06:	f00c ff87 	bl	8014918 <HAL_GetTick>
 8007a0a:	0002      	movs	r2, r0
 8007a0c:	4b85      	ldr	r3, [pc, #532]	@ (8007c24 <ESP_Upkeep+0x590>)
 8007a0e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a10:	4b78      	ldr	r3, [pc, #480]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	001a      	movs	r2, r3
 8007a16:	4b72      	ldr	r3, [pc, #456]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007a18:	5c9a      	ldrb	r2, [r3, r2]
 8007a1a:	4b78      	ldr	r3, [pc, #480]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007a1c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a1e:	4b78      	ldr	r3, [pc, #480]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a24:	4b6f      	ldr	r3, [pc, #444]	@ (8007be4 <ESP_Upkeep+0x550>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d02b      	beq.n	8007a84 <ESP_Upkeep+0x3f0>
 8007a2c:	4b75      	ldr	r3, [pc, #468]	@ (8007c04 <ESP_Upkeep+0x570>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d027      	beq.n	8007a84 <ESP_Upkeep+0x3f0>
 8007a34:	4b75      	ldr	r3, [pc, #468]	@ (8007c0c <ESP_Upkeep+0x578>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d023      	beq.n	8007a84 <ESP_Upkeep+0x3f0>
 8007a3c:	4b77      	ldr	r3, [pc, #476]	@ (8007c1c <ESP_Upkeep+0x588>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01f      	beq.n	8007a84 <ESP_Upkeep+0x3f0>
 8007a44:	4b73      	ldr	r3, [pc, #460]	@ (8007c14 <ESP_Upkeep+0x580>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d01b      	beq.n	8007a84 <ESP_Upkeep+0x3f0>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007a4c:	4b76      	ldr	r3, [pc, #472]	@ (8007c28 <ESP_Upkeep+0x594>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	4b63      	ldr	r3, [pc, #396]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007a52:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a54:	4b66      	ldr	r3, [pc, #408]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007a56:	2204      	movs	r2, #4
 8007a58:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a5a:	4b66      	ldr	r3, [pc, #408]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007a60:	4b65      	ldr	r3, [pc, #404]	@ (8007bf8 <ESP_Upkeep+0x564>)
 8007a62:	2205      	movs	r2, #5
 8007a64:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a66:	f00c ff57 	bl	8014918 <HAL_GetTick>
 8007a6a:	0002      	movs	r2, r0
 8007a6c:	4b6d      	ldr	r3, [pc, #436]	@ (8007c24 <ESP_Upkeep+0x590>)
 8007a6e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a70:	4b60      	ldr	r3, [pc, #384]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	001a      	movs	r2, r3
 8007a76:	4b5a      	ldr	r3, [pc, #360]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007a78:	5c9a      	ldrb	r2, [r3, r2]
 8007a7a:	4b60      	ldr	r3, [pc, #384]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007a7c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a7e:	4b60      	ldr	r3, [pc, #384]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007a84:	4b69      	ldr	r3, [pc, #420]	@ (8007c2c <ESP_Upkeep+0x598>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d100      	bne.n	8007a8e <ESP_Upkeep+0x3fa>
 8007a8c:	e339      	b.n	8008102 <ESP_Upkeep+0xa6e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007a8e:	4b54      	ldr	r3, [pc, #336]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007a90:	4a67      	ldr	r2, [pc, #412]	@ (8007c30 <ESP_Upkeep+0x59c>)
 8007a92:	6811      	ldr	r1, [r2, #0]
 8007a94:	6019      	str	r1, [r3, #0]
 8007a96:	7912      	ldrb	r2, [r2, #4]
 8007a98:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode for local wifi config selected");
 8007a9a:	4a66      	ldr	r2, [pc, #408]	@ (8007c34 <ESP_Upkeep+0x5a0>)
 8007a9c:	4b66      	ldr	r3, [pc, #408]	@ (8007c38 <ESP_Upkeep+0x5a4>)
 8007a9e:	0019      	movs	r1, r3
 8007aa0:	2003      	movs	r0, #3
 8007aa2:	f00c f9c1 	bl	8013e28 <CreateLine>
        DisableConnectedDevices();
 8007aa6:	f006 f96f 	bl	800dd88 <DisableConnectedDevices>
        usblog = false;
 8007aaa:	4b64      	ldr	r3, [pc, #400]	@ (8007c3c <ESP_Upkeep+0x5a8>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007abc:	4b4e      	ldr	r3, [pc, #312]	@ (8007bf8 <ESP_Upkeep+0x564>)
 8007abe:	2203      	movs	r2, #3
 8007ac0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	001a      	movs	r2, r3
 8007ac8:	4b45      	ldr	r3, [pc, #276]	@ (8007be0 <ESP_Upkeep+0x54c>)
 8007aca:	5c9a      	ldrb	r2, [r3, r2]
 8007acc:	4b4b      	ldr	r3, [pc, #300]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007ace:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007ad6:	e314      	b.n	8008102 <ESP_Upkeep+0xa6e>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007ad8:	4b48      	ldr	r3, [pc, #288]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	1dfc      	adds	r4, r7, #7
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f7ff fb2c 	bl	800713c <AT_Send>
 8007ae4:	0003      	movs	r3, r0
 8007ae6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007ae8:	1dfb      	adds	r3, r7, #7
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d100      	bne.n	8007af2 <ESP_Upkeep+0x45e>
 8007af0:	e309      	b.n	8008106 <ESP_Upkeep+0xa72>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007af2:	4b3f      	ldr	r3, [pc, #252]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007af4:	2203      	movs	r2, #3
 8007af6:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007af8:	e305      	b.n	8008106 <ESP_Upkeep+0xa72>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007afa:	4b4c      	ldr	r3, [pc, #304]	@ (8007c2c <ESP_Upkeep+0x598>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d007      	beq.n	8007b12 <ESP_Upkeep+0x47e>
 8007b02:	4b3d      	ldr	r3, [pc, #244]	@ (8007bf8 <ESP_Upkeep+0x564>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d003      	beq.n	8007b12 <ESP_Upkeep+0x47e>
        EspState = ESP_STATE_MODE_SELECT;
 8007b0a:	4b39      	ldr	r3, [pc, #228]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007b0c:	220b      	movs	r2, #11
 8007b0e:	701a      	strb	r2, [r3, #0]
        break;
 8007b10:	e300      	b.n	8008114 <ESP_Upkeep+0xa80>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007b12:	4b4b      	ldr	r3, [pc, #300]	@ (8007c40 <ESP_Upkeep+0x5ac>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	0018      	movs	r0, r3
 8007b18:	f00c f930 	bl	8013d7c <TimestampIsReached>
 8007b1c:	1e03      	subs	r3, r0, #0
 8007b1e:	d100      	bne.n	8007b22 <ESP_Upkeep+0x48e>
 8007b20:	e2f3      	b.n	800810a <ESP_Upkeep+0xa76>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007b22:	4b37      	ldr	r3, [pc, #220]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f7ff f9c6 	bl	8006eb8 <DMA_ProcessBuffer>
 8007b2c:	0003      	movs	r3, r0
 8007b2e:	001a      	movs	r2, r3
 8007b30:	4b44      	ldr	r3, [pc, #272]	@ (8007c44 <ESP_Upkeep+0x5b0>)
 8007b32:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007b34:	4b43      	ldr	r3, [pc, #268]	@ (8007c44 <ESP_Upkeep+0x5b0>)
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	4b31      	ldr	r3, [pc, #196]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	1d7c      	adds	r4, r7, #5
 8007b3e:	0019      	movs	r1, r3
 8007b40:	0010      	movs	r0, r2
 8007b42:	f7ff fab9 	bl	80070b8 <ATCompare>
 8007b46:	0003      	movs	r3, r0
 8007b48:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c44 <ESP_Upkeep+0x5b0>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d000      	beq.n	8007b54 <ESP_Upkeep+0x4c0>
 8007b52:	e085      	b.n	8007c60 <ESP_Upkeep+0x5cc>
          if(ATCommand == AT_SENDDATA){
 8007b54:	4b29      	ldr	r3, [pc, #164]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b0f      	cmp	r3, #15
 8007b5a:	d108      	bne.n	8007b6e <ESP_Upkeep+0x4da>
            ATCommand = AT_HTTPCPOST;
 8007b5c:	4b27      	ldr	r3, [pc, #156]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007b5e:	220e      	movs	r2, #14
 8007b60:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b62:	4b27      	ldr	r3, [pc, #156]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007b64:	2202      	movs	r2, #2
 8007b66:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b68:	4b22      	ldr	r3, [pc, #136]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand == AT_SENDMAIL){
 8007b6e:	4b23      	ldr	r3, [pc, #140]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b15      	cmp	r3, #21
 8007b74:	d108      	bne.n	8007b88 <ESP_Upkeep+0x4f4>
            ATCommand = AT_HTTPCPOST_MAILAPI;
 8007b76:	4b21      	ldr	r3, [pc, #132]	@ (8007bfc <ESP_Upkeep+0x568>)
 8007b78:	2214      	movs	r2, #20
 8007b7a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b7c:	4b20      	ldr	r3, [pc, #128]	@ (8007c00 <ESP_Upkeep+0x56c>)
 8007b7e:	2202      	movs	r2, #2
 8007b80:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b82:	4b1c      	ldr	r3, [pc, #112]	@ (8007bf4 <ESP_Upkeep+0x560>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007b88:	4b19      	ldr	r3, [pc, #100]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8007c48 <ESP_Upkeep+0x5b4>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	4b2c      	ldr	r3, [pc, #176]	@ (8007c48 <ESP_Upkeep+0x5b4>)
 8007b98:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8007c48 <ESP_Upkeep+0x5b4>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d95e      	bls.n	8007c60 <ESP_Upkeep+0x5cc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007ba2:	f00c feb9 	bl	8014918 <HAL_GetTick>
 8007ba6:	0003      	movs	r3, r0
 8007ba8:	4a28      	ldr	r2, [pc, #160]	@ (8007c4c <ESP_Upkeep+0x5b8>)
 8007baa:	189a      	adds	r2, r3, r2
 8007bac:	4b24      	ldr	r3, [pc, #144]	@ (8007c40 <ESP_Upkeep+0x5ac>)
 8007bae:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007bb0:	4b27      	ldr	r3, [pc, #156]	@ (8007c50 <ESP_Upkeep+0x5bc>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007bb6:	f7ff fa71 	bl	800709c <clearDMABuffer>
            stop = HAL_GetTick();
 8007bba:	f00c fead 	bl	8014918 <HAL_GetTick>
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	4b24      	ldr	r3, [pc, #144]	@ (8007c54 <ESP_Upkeep+0x5c0>)
 8007bc2:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007bc4:	4b23      	ldr	r3, [pc, #140]	@ (8007c54 <ESP_Upkeep+0x5c0>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	4b16      	ldr	r3, [pc, #88]	@ (8007c24 <ESP_Upkeep+0x590>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	4a22      	ldr	r2, [pc, #136]	@ (8007c58 <ESP_Upkeep+0x5c4>)
 8007bd0:	4922      	ldr	r1, [pc, #136]	@ (8007c5c <ESP_Upkeep+0x5c8>)
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	f00c f928 	bl	8013e28 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007bd8:	4b05      	ldr	r3, [pc, #20]	@ (8007bf0 <ESP_Upkeep+0x55c>)
 8007bda:	220d      	movs	r2, #13
 8007bdc:	701a      	strb	r2, [r3, #0]
            break;
 8007bde:	e299      	b.n	8008114 <ESP_Upkeep+0xa80>
 8007be0:	20000684 	.word	0x20000684
 8007be4:	200005ad 	.word	0x200005ad
 8007be8:	200005ae 	.word	0x200005ae
 8007bec:	20000004 	.word	0x20000004
 8007bf0:	20000030 	.word	0x20000030
 8007bf4:	2000068e 	.word	0x2000068e
 8007bf8:	20000702 	.word	0x20000702
 8007bfc:	20000701 	.word	0x20000701
 8007c00:	20000700 	.word	0x20000700
 8007c04:	200005b0 	.word	0x200005b0
 8007c08:	20000014 	.word	0x20000014
 8007c0c:	200005b1 	.word	0x200005b1
 8007c10:	20000010 	.word	0x20000010
 8007c14:	200010f9 	.word	0x200010f9
 8007c18:	20000028 	.word	0x20000028
 8007c1c:	20000002 	.word	0x20000002
 8007c20:	2000000c 	.word	0x2000000c
 8007c24:	200005b4 	.word	0x200005b4
 8007c28:	20000024 	.word	0x20000024
 8007c2c:	200005af 	.word	0x200005af
 8007c30:	2000001c 	.word	0x2000001c
 8007c34:	0802b170 	.word	0x0802b170
 8007c38:	0802aa1c 	.word	0x0802aa1c
 8007c3c:	200010f7 	.word	0x200010f7
 8007c40:	20000694 	.word	0x20000694
 8007c44:	20000034 	.word	0x20000034
 8007c48:	2000068f 	.word	0x2000068f
 8007c4c:	0003a980 	.word	0x0003a980
 8007c50:	200005b3 	.word	0x200005b3
 8007c54:	200005b8 	.word	0x200005b8
 8007c58:	0802b1a0 	.word	0x0802b1a0
 8007c5c:	0802a9b8 	.word	0x0802a9b8
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007c60:	4bb3      	ldr	r3, [pc, #716]	@ (8007f30 <ESP_Upkeep+0x89c>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d106      	bne.n	8007c76 <ESP_Upkeep+0x5e2>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c68:	f00c fe56 	bl	8014918 <HAL_GetTick>
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	330a      	adds	r3, #10
 8007c70:	001a      	movs	r2, r3
 8007c72:	4bb0      	ldr	r3, [pc, #704]	@ (8007f34 <ESP_Upkeep+0x8a0>)
 8007c74:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007c76:	4bae      	ldr	r3, [pc, #696]	@ (8007f30 <ESP_Upkeep+0x89c>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b0a      	cmp	r3, #10
 8007c7c:	d106      	bne.n	8007c8c <ESP_Upkeep+0x5f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c7e:	f00c fe4b 	bl	8014918 <HAL_GetTick>
 8007c82:	0003      	movs	r3, r0
 8007c84:	330a      	adds	r3, #10
 8007c86:	001a      	movs	r2, r3
 8007c88:	4baa      	ldr	r3, [pc, #680]	@ (8007f34 <ESP_Upkeep+0x8a0>)
 8007c8a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007c8c:	4ba8      	ldr	r3, [pc, #672]	@ (8007f30 <ESP_Upkeep+0x89c>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b06      	cmp	r3, #6
 8007c92:	d14b      	bne.n	8007d2c <ESP_Upkeep+0x698>
          timeoutcntr++;
 8007c94:	4ba8      	ldr	r3, [pc, #672]	@ (8007f38 <ESP_Upkeep+0x8a4>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	4ba6      	ldr	r3, [pc, #664]	@ (8007f38 <ESP_Upkeep+0x8a4>)
 8007c9e:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007ca0:	4aa6      	ldr	r2, [pc, #664]	@ (8007f3c <ESP_Upkeep+0x8a8>)
 8007ca2:	4ba7      	ldr	r3, [pc, #668]	@ (8007f40 <ESP_Upkeep+0x8ac>)
 8007ca4:	0019      	movs	r1, r3
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	f00c f8be 	bl	8013e28 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007cac:	4ba2      	ldr	r3, [pc, #648]	@ (8007f38 <ESP_Upkeep+0x8a4>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d924      	bls.n	8007cfe <ESP_Upkeep+0x66a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007cb4:	f00c fe30 	bl	8014918 <HAL_GetTick>
 8007cb8:	0003      	movs	r3, r0
 8007cba:	4aa2      	ldr	r2, [pc, #648]	@ (8007f44 <ESP_Upkeep+0x8b0>)
 8007cbc:	189a      	adds	r2, r3, r2
 8007cbe:	4b9d      	ldr	r3, [pc, #628]	@ (8007f34 <ESP_Upkeep+0x8a0>)
 8007cc0:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8007f48 <ESP_Upkeep+0x8b4>)
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007cc8:	f7ff f9e8 	bl	800709c <clearDMABuffer>
            stop = HAL_GetTick();
 8007ccc:	f00c fe24 	bl	8014918 <HAL_GetTick>
 8007cd0:	0002      	movs	r2, r0
 8007cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8007f4c <ESP_Upkeep+0x8b8>)
 8007cd4:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8007f4c <ESP_Upkeep+0x8b8>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b9d      	ldr	r3, [pc, #628]	@ (8007f50 <ESP_Upkeep+0x8bc>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	4a9c      	ldr	r2, [pc, #624]	@ (8007f54 <ESP_Upkeep+0x8c0>)
 8007ce2:	4997      	ldr	r1, [pc, #604]	@ (8007f40 <ESP_Upkeep+0x8ac>)
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	f00c f89f 	bl	8013e28 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007cea:	4b9b      	ldr	r3, [pc, #620]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007cec:	220d      	movs	r2, #13
 8007cee:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007cf2:	2216      	movs	r2, #22
 8007cf4:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007cf6:	4b9a      	ldr	r3, [pc, #616]	@ (8007f60 <ESP_Upkeep+0x8cc>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
            break;
 8007cfc:	e20a      	b.n	8008114 <ESP_Upkeep+0xa80>
          }
          if(ATCommand != AT_SENDDATA){
 8007cfe:	4b97      	ldr	r3, [pc, #604]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b0f      	cmp	r3, #15
 8007d04:	d003      	beq.n	8007d0e <ESP_Upkeep+0x67a>
            EspState = ESP_STATE_SEND;
 8007d06:	4b94      	ldr	r3, [pc, #592]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007d08:	2204      	movs	r2, #4
 8007d0a:	701a      	strb	r2, [r3, #0]
 8007d0c:	e00e      	b.n	8007d2c <ESP_Upkeep+0x698>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007d0e:	4b93      	ldr	r3, [pc, #588]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d10:	220e      	movs	r2, #14
 8007d12:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007d14:	4b93      	ldr	r3, [pc, #588]	@ (8007f64 <ESP_Upkeep+0x8d0>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	4b91      	ldr	r3, [pc, #580]	@ (8007f64 <ESP_Upkeep+0x8d0>)
 8007d1e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007d20:	4b8f      	ldr	r3, [pc, #572]	@ (8007f60 <ESP_Upkeep+0x8cc>)
 8007d22:	2202      	movs	r2, #2
 8007d24:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007d26:	4b8c      	ldr	r3, [pc, #560]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007d28:	2204      	movs	r2, #4
 8007d2a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007d2c:	1d7b      	adds	r3, r7, #5
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d100      	bne.n	8007d36 <ESP_Upkeep+0x6a2>
 8007d34:	e1e9      	b.n	800810a <ESP_Upkeep+0xa76>
          EspState = ESP_STATE_NEXT_AT;
 8007d36:	4b88      	ldr	r3, [pc, #544]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007d38:	2205      	movs	r2, #5
 8007d3a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d3c:	e1e5      	b.n	800810a <ESP_Upkeep+0xa76>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007d3e:	4b89      	ldr	r3, [pc, #548]	@ (8007f64 <ESP_Upkeep+0x8d0>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	4b87      	ldr	r3, [pc, #540]	@ (8007f64 <ESP_Upkeep+0x8d0>)
 8007d48:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007d4a:	4b86      	ldr	r3, [pc, #536]	@ (8007f64 <ESP_Upkeep+0x8d0>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	001a      	movs	r2, r3
 8007d50:	4b85      	ldr	r3, [pc, #532]	@ (8007f68 <ESP_Upkeep+0x8d4>)
 8007d52:	5c9a      	ldrb	r2, [r3, r2]
 8007d54:	4b81      	ldr	r3, [pc, #516]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d56:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007d58:	4b80      	ldr	r3, [pc, #512]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d102      	bne.n	8007d66 <ESP_Upkeep+0x6d2>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007d60:	4b7f      	ldr	r3, [pc, #508]	@ (8007f60 <ESP_Upkeep+0x8cc>)
 8007d62:	2201      	movs	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007d66:	4b7d      	ldr	r3, [pc, #500]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b0e      	cmp	r3, #14
 8007d6c:	d102      	bne.n	8007d74 <ESP_Upkeep+0x6e0>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8007f60 <ESP_Upkeep+0x8cc>)
 8007d70:	2202      	movs	r2, #2
 8007d72:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007d74:	4b79      	ldr	r3, [pc, #484]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b0e      	cmp	r3, #14
 8007d7a:	d006      	beq.n	8007d8a <ESP_Upkeep+0x6f6>
 8007d7c:	4b77      	ldr	r3, [pc, #476]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d002      	beq.n	8007d8a <ESP_Upkeep+0x6f6>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d84:	4b76      	ldr	r3, [pc, #472]	@ (8007f60 <ESP_Upkeep+0x8cc>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007d8a:	4b74      	ldr	r3, [pc, #464]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b11      	cmp	r3, #17
 8007d90:	d102      	bne.n	8007d98 <ESP_Upkeep+0x704>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007d92:	4b73      	ldr	r3, [pc, #460]	@ (8007f60 <ESP_Upkeep+0x8cc>)
 8007d94:	2205      	movs	r2, #5
 8007d96:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007d98:	4b70      	ldr	r3, [pc, #448]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b15      	cmp	r3, #21
 8007d9e:	d102      	bne.n	8007da6 <ESP_Upkeep+0x712>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007da0:	4b6f      	ldr	r3, [pc, #444]	@ (8007f60 <ESP_Upkeep+0x8cc>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007da6:	4b6c      	ldr	r3, [pc, #432]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007da8:	2204      	movs	r2, #4
 8007daa:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007dac:	4b6b      	ldr	r3, [pc, #428]	@ (8007f5c <ESP_Upkeep+0x8c8>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b16      	cmp	r3, #22
 8007db2:	d000      	beq.n	8007db6 <ESP_Upkeep+0x722>
 8007db4:	e1ab      	b.n	800810e <ESP_Upkeep+0xa7a>
        if(Mode == AT_MODE_SEND){
 8007db6:	4b6d      	ldr	r3, [pc, #436]	@ (8007f6c <ESP_Upkeep+0x8d8>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d124      	bne.n	8007e08 <ESP_Upkeep+0x774>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007dbe:	f00c fdab 	bl	8014918 <HAL_GetTick>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8007f70 <ESP_Upkeep+0x8dc>)
 8007dc6:	189a      	adds	r2, r3, r2
 8007dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8007f34 <ESP_Upkeep+0x8a0>)
 8007dca:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007dcc:	f7ff f966 	bl	800709c <clearDMABuffer>
          stop = HAL_GetTick();
 8007dd0:	f00c fda2 	bl	8014918 <HAL_GetTick>
 8007dd4:	0002      	movs	r2, r0
 8007dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8007f4c <ESP_Upkeep+0x8b8>)
 8007dd8:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007dda:	4b5c      	ldr	r3, [pc, #368]	@ (8007f4c <ESP_Upkeep+0x8b8>)
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	4b5c      	ldr	r3, [pc, #368]	@ (8007f50 <ESP_Upkeep+0x8bc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	4a63      	ldr	r2, [pc, #396]	@ (8007f74 <ESP_Upkeep+0x8e0>)
 8007de6:	4964      	ldr	r1, [pc, #400]	@ (8007f78 <ESP_Upkeep+0x8e4>)
 8007de8:	2002      	movs	r0, #2
 8007dea:	f00c f81d 	bl	8013e28 <CreateLine>
          ResetdBAmax();
 8007dee:	f006 f853 	bl	800de98 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007df2:	f7fd f819 	bl	8004e28 <resetMaxMeasurementValues>
          showTime();
 8007df6:	f001 fff5 	bl	8009de4 <showTime>
          ESPTransmitDone = true;
 8007dfa:	4b53      	ldr	r3, [pc, #332]	@ (8007f48 <ESP_Upkeep+0x8b4>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007e00:	4b55      	ldr	r3, [pc, #340]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007e02:	220d      	movs	r2, #13
 8007e04:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007e06:	e182      	b.n	800810e <ESP_Upkeep+0xa7a>
        else if (Mode == AT_MODE_GETTIME) {
 8007e08:	4b58      	ldr	r3, [pc, #352]	@ (8007f6c <ESP_Upkeep+0x8d8>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d13a      	bne.n	8007e86 <ESP_Upkeep+0x7f2>
            setTime = false;
 8007e10:	4b5a      	ldr	r3, [pc, #360]	@ (8007f7c <ESP_Upkeep+0x8e8>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007e16:	f002 f887 	bl	8009f28 <calculateNextNTPTime>
 8007e1a:	0002      	movs	r2, r0
 8007e1c:	4b58      	ldr	r3, [pc, #352]	@ (8007f80 <ESP_Upkeep+0x8ec>)
 8007e1e:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007e20:	4b57      	ldr	r3, [pc, #348]	@ (8007f80 <ESP_Upkeep+0x8ec>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a57      	ldr	r2, [pc, #348]	@ (8007f84 <ESP_Upkeep+0x8f0>)
 8007e26:	189a      	adds	r2, r3, r2
 8007e28:	4b55      	ldr	r3, [pc, #340]	@ (8007f80 <ESP_Upkeep+0x8ec>)
 8007e2a:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <ESP_Upkeep+0x8f0>)
 8007e2e:	4a56      	ldr	r2, [pc, #344]	@ (8007f88 <ESP_Upkeep+0x8f4>)
 8007e30:	4951      	ldr	r1, [pc, #324]	@ (8007f78 <ESP_Upkeep+0x8e4>)
 8007e32:	2002      	movs	r0, #2
 8007e34:	f00b fff8 	bl	8013e28 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007e38:	4b54      	ldr	r3, [pc, #336]	@ (8007f8c <ESP_Upkeep+0x8f8>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8007f34 <ESP_Upkeep+0x8a0>)
 8007e3e:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007e40:	f7ff f92c 	bl	800709c <clearDMABuffer>
            stop = HAL_GetTick();
 8007e44:	f00c fd68 	bl	8014918 <HAL_GetTick>
 8007e48:	0002      	movs	r2, r0
 8007e4a:	4b40      	ldr	r3, [pc, #256]	@ (8007f4c <ESP_Upkeep+0x8b8>)
 8007e4c:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f4c <ESP_Upkeep+0x8b8>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b3f      	ldr	r3, [pc, #252]	@ (8007f50 <ESP_Upkeep+0x8bc>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	4a4d      	ldr	r2, [pc, #308]	@ (8007f90 <ESP_Upkeep+0x8fc>)
 8007e5a:	4947      	ldr	r1, [pc, #284]	@ (8007f78 <ESP_Upkeep+0x8e4>)
 8007e5c:	2002      	movs	r0, #2
 8007e5e:	f00b ffe3 	bl	8013e28 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007e62:	f00c fd59 	bl	8014918 <HAL_GetTick>
 8007e66:	0003      	movs	r3, r0
 8007e68:	4a4a      	ldr	r2, [pc, #296]	@ (8007f94 <ESP_Upkeep+0x900>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d804      	bhi.n	8007e78 <ESP_Upkeep+0x7e4>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8007f98 <ESP_Upkeep+0x904>)
 8007e70:	4a4a      	ldr	r2, [pc, #296]	@ (8007f9c <ESP_Upkeep+0x908>)
 8007e72:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007e74:	f005 ff18 	bl	800dca8 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007e78:	4b37      	ldr	r3, [pc, #220]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007e7a:	220d      	movs	r2, #13
 8007e7c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8007f6c <ESP_Upkeep+0x8d8>)
 8007e80:	2202      	movs	r2, #2
 8007e82:	701a      	strb	r2, [r3, #0]
    break;
 8007e84:	e143      	b.n	800810e <ESP_Upkeep+0xa7a>
        else if (Mode == AT_MODE_MAIL) {
 8007e86:	4b39      	ldr	r3, [pc, #228]	@ (8007f6c <ESP_Upkeep+0x8d8>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b06      	cmp	r3, #6
 8007e8c:	d111      	bne.n	8007eb2 <ESP_Upkeep+0x81e>
            clearDMABuffer();
 8007e8e:	f7ff f905 	bl	800709c <clearDMABuffer>
            ESPTimeStamp = savedESPTimeStamp;
 8007e92:	4b3e      	ldr	r3, [pc, #248]	@ (8007f8c <ESP_Upkeep+0x8f8>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b27      	ldr	r3, [pc, #156]	@ (8007f34 <ESP_Upkeep+0x8a0>)
 8007e98:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007e9a:	4b41      	ldr	r3, [pc, #260]	@ (8007fa0 <ESP_Upkeep+0x90c>)
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007ea2:	220d      	movs	r2, #13
 8007ea4:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ea6:	4b31      	ldr	r3, [pc, #196]	@ (8007f6c <ESP_Upkeep+0x8d8>)
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007eac:	f005 fefc 	bl	800dca8 <EnabledConnectedDevices>
    break;
 8007eb0:	e12d      	b.n	800810e <ESP_Upkeep+0xa7a>
          EspState = ESP_STATE_RESET;
 8007eb2:	4b29      	ldr	r3, [pc, #164]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007eb4:	2209      	movs	r2, #9
 8007eb6:	701a      	strb	r2, [r3, #0]
    break;
 8007eb8:	e129      	b.n	800810e <ESP_Upkeep+0xa7a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007eba:	4b3a      	ldr	r3, [pc, #232]	@ (8007fa4 <ESP_Upkeep+0x910>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007ec0:	4b39      	ldr	r3, [pc, #228]	@ (8007fa8 <ESP_Upkeep+0x914>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	f00d ff99 	bl	8015dfe <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ecc:	2001      	movs	r0, #1
 8007ece:	f00c fd2d 	bl	801492c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007ed2:	2380      	movs	r3, #128	@ 0x80
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	4835      	ldr	r0, [pc, #212]	@ (8007fac <ESP_Upkeep+0x918>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	0019      	movs	r1, r3
 8007edc:	f00d ff8f 	bl	8015dfe <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	f00c fd23 	bl	801492c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007ee6:	4b30      	ldr	r3, [pc, #192]	@ (8007fa8 <ESP_Upkeep+0x914>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2102      	movs	r1, #2
 8007eec:	0018      	movs	r0, r3
 8007eee:	f00d ff86 	bl	8015dfe <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007ef2:	4b19      	ldr	r3, [pc, #100]	@ (8007f58 <ESP_Upkeep+0x8c4>)
 8007ef4:	2209      	movs	r2, #9
 8007ef6:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f00c fd17 	bl	801492c <HAL_Delay>
      ResetESPIndicator();
 8007efe:	f00a fd91 	bl	8012a24 <ResetESPIndicator>
      Debug("ESP powered off.");
 8007f02:	4a2b      	ldr	r2, [pc, #172]	@ (8007fb0 <ESP_Upkeep+0x91c>)
 8007f04:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb4 <ESP_Upkeep+0x920>)
 8007f06:	0019      	movs	r1, r3
 8007f08:	2003      	movs	r0, #3
 8007f0a:	f00b ff8d 	bl	8013e28 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007f0e:	f001 fe61 	bl	8009bd4 <Check_USB_PowerOn>
 8007f12:	1e03      	subs	r3, r0, #0
 8007f14:	d103      	bne.n	8007f1e <ESP_Upkeep+0x88a>
 8007f16:	4b28      	ldr	r3, [pc, #160]	@ (8007fb8 <ESP_Upkeep+0x924>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <ESP_Upkeep+0x88e>
        EnabledConnectedDevices();
 8007f1e:	f005 fec3 	bl	800dca8 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007f22:	4b26      	ldr	r3, [pc, #152]	@ (8007fbc <ESP_Upkeep+0x928>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007f28:	4b03      	ldr	r3, [pc, #12]	@ (8007f38 <ESP_Upkeep+0x8a4>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
      break;
 8007f2e:	e0f1      	b.n	8008114 <ESP_Upkeep+0xa80>
 8007f30:	20000034 	.word	0x20000034
 8007f34:	20000694 	.word	0x20000694
 8007f38:	20000690 	.word	0x20000690
 8007f3c:	0802b1d4 	.word	0x0802b1d4
 8007f40:	0802a9b8 	.word	0x0802a9b8
 8007f44:	0000c350 	.word	0x0000c350
 8007f48:	200005b3 	.word	0x200005b3
 8007f4c:	200005b8 	.word	0x200005b8
 8007f50:	200005b4 	.word	0x200005b4
 8007f54:	0802b210 	.word	0x0802b210
 8007f58:	20000030 	.word	0x20000030
 8007f5c:	20000701 	.word	0x20000701
 8007f60:	20000700 	.word	0x20000700
 8007f64:	2000068e 	.word	0x2000068e
 8007f68:	20000684 	.word	0x20000684
 8007f6c:	20000702 	.word	0x20000702
 8007f70:	0003a980 	.word	0x0003a980
 8007f74:	0802b240 	.word	0x0802b240
 8007f78:	0802a9cc 	.word	0x0802a9cc
 8007f7c:	20000002 	.word	0x20000002
 8007f80:	20000698 	.word	0x20000698
 8007f84:	00012686 	.word	0x00012686
 8007f88:	0802b258 	.word	0x0802b258
 8007f8c:	2000002c 	.word	0x2000002c
 8007f90:	0802b29c 	.word	0x0802b29c
 8007f94:	000061a7 	.word	0x000061a7
 8007f98:	20001114 	.word	0x20001114
 8007f9c:	000061a8 	.word	0x000061a8
 8007fa0:	200010f9 	.word	0x200010f9
 8007fa4:	200005ac 	.word	0x200005ac
 8007fa8:	50001c00 	.word	0x50001c00
 8007fac:	50000800 	.word	0x50000800
 8007fb0:	0802b2bc 	.word	0x0802b2bc
 8007fb4:	0802aa1c 	.word	0x0802aa1c
 8007fb8:	20002152 	.word	0x20002152
 8007fbc:	2000068f 	.word	0x2000068f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007fc0:	4b57      	ldr	r3, [pc, #348]	@ (8008120 <ESP_Upkeep+0xa8c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f00b fed9 	bl	8013d7c <TimestampIsReached>
 8007fca:	1e03      	subs	r3, r0, #0
 8007fcc:	d103      	bne.n	8007fd6 <ESP_Upkeep+0x942>
 8007fce:	4b55      	ldr	r3, [pc, #340]	@ (8008124 <ESP_Upkeep+0xa90>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d047      	beq.n	8008066 <ESP_Upkeep+0x9d2>
        ESPTransmitDone = false;
 8007fd6:	4b54      	ldr	r3, [pc, #336]	@ (8008128 <ESP_Upkeep+0xa94>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007fdc:	4b53      	ldr	r3, [pc, #332]	@ (800812c <ESP_Upkeep+0xa98>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d105      	bne.n	8007ff0 <ESP_Upkeep+0x95c>
          InitIsDone = true;
 8007fe4:	4b52      	ldr	r3, [pc, #328]	@ (8008130 <ESP_Upkeep+0xa9c>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007fea:	4b52      	ldr	r3, [pc, #328]	@ (8008134 <ESP_Upkeep+0xaa0>)
 8007fec:	220b      	movs	r2, #11
 8007fee:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800812c <ESP_Upkeep+0xa98>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d105      	bne.n	8008004 <ESP_Upkeep+0x970>
          ConnectionMade = true;
 8007ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8008138 <ESP_Upkeep+0xaa4>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8008134 <ESP_Upkeep+0xaa0>)
 8008000:	220b      	movs	r2, #11
 8008002:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8008004:	4b49      	ldr	r3, [pc, #292]	@ (800812c <ESP_Upkeep+0xa98>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d102      	bne.n	8008012 <ESP_Upkeep+0x97e>
          EspState = ESP_STATE_INIT;
 800800c:	4b49      	ldr	r3, [pc, #292]	@ (8008134 <ESP_Upkeep+0xaa0>)
 800800e:	2202      	movs	r2, #2
 8008010:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if(Mode == AT_MODE_MAIL){
 8008012:	4b46      	ldr	r3, [pc, #280]	@ (800812c <ESP_Upkeep+0xa98>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b06      	cmp	r3, #6
 8008018:	d102      	bne.n	8008020 <ESP_Upkeep+0x98c>
          EspState = ESP_STATE_CONFIG;
 800801a:	4b46      	ldr	r3, [pc, #280]	@ (8008134 <ESP_Upkeep+0xaa0>)
 800801c:	220e      	movs	r2, #14
 800801e:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 8008020:	4b42      	ldr	r3, [pc, #264]	@ (800812c <ESP_Upkeep+0xa98>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d108      	bne.n	800803a <ESP_Upkeep+0x9a6>
          EspState = ESP_STATE_CONFIG;
 8008028:	4b42      	ldr	r3, [pc, #264]	@ (8008134 <ESP_Upkeep+0xaa0>)
 800802a:	220e      	movs	r2, #14
 800802c:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 800802e:	4a43      	ldr	r2, [pc, #268]	@ (800813c <ESP_Upkeep+0xaa8>)
 8008030:	4b43      	ldr	r3, [pc, #268]	@ (8008140 <ESP_Upkeep+0xaac>)
 8008032:	0019      	movs	r1, r3
 8008034:	2002      	movs	r0, #2
 8008036:	f00b fef7 	bl	8013e28 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800803a:	4b3c      	ldr	r3, [pc, #240]	@ (800812c <ESP_Upkeep+0xa98>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d105      	bne.n	800804e <ESP_Upkeep+0x9ba>
          EspState = ESP_STATE_MODE_SELECT;
 8008042:	4b3c      	ldr	r3, [pc, #240]	@ (8008134 <ESP_Upkeep+0xaa0>)
 8008044:	220b      	movs	r2, #11
 8008046:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 8008048:	4b3e      	ldr	r3, [pc, #248]	@ (8008144 <ESP_Upkeep+0xab0>)
 800804a:	2201      	movs	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800804e:	4b35      	ldr	r3, [pc, #212]	@ (8008124 <ESP_Upkeep+0xa90>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d020      	beq.n	8008098 <ESP_Upkeep+0xa04>
 8008056:	4b35      	ldr	r3, [pc, #212]	@ (800812c <ESP_Upkeep+0xa98>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b03      	cmp	r3, #3
 800805c:	d01c      	beq.n	8008098 <ESP_Upkeep+0xa04>
          EspState = ESP_STATE_INIT;
 800805e:	4b35      	ldr	r3, [pc, #212]	@ (8008134 <ESP_Upkeep+0xaa0>)
 8008060:	2202      	movs	r2, #2
 8008062:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008064:	e018      	b.n	8008098 <ESP_Upkeep+0xa04>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8008066:	f001 ff5f 	bl	8009f28 <calculateNextNTPTime>
 800806a:	0002      	movs	r2, r0
 800806c:	4b36      	ldr	r3, [pc, #216]	@ (8008148 <ESP_Upkeep+0xab4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d94e      	bls.n	8008112 <ESP_Upkeep+0xa7e>
        if(Mode == AT_MODE_SEND ) {
 8008074:	4b2d      	ldr	r3, [pc, #180]	@ (800812c <ESP_Upkeep+0xa98>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d14a      	bne.n	8008112 <ESP_Upkeep+0xa7e>
           Mode = AT_MODE_GETTIME;
 800807c:	4b2b      	ldr	r3, [pc, #172]	@ (800812c <ESP_Upkeep+0xa98>)
 800807e:	2205      	movs	r2, #5
 8008080:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8008082:	4b2c      	ldr	r3, [pc, #176]	@ (8008134 <ESP_Upkeep+0xaa0>)
 8008084:	2202      	movs	r2, #2
 8008086:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8008088:	4b25      	ldr	r3, [pc, #148]	@ (8008120 <ESP_Upkeep+0xa8c>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	4b2f      	ldr	r3, [pc, #188]	@ (800814c <ESP_Upkeep+0xab8>)
 800808e:	601a      	str	r2, [r3, #0]
           setTime = true;
 8008090:	4b2f      	ldr	r3, [pc, #188]	@ (8008150 <ESP_Upkeep+0xabc>)
 8008092:	2201      	movs	r2, #1
 8008094:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8008096:	e03c      	b.n	8008112 <ESP_Upkeep+0xa7e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008098:	46c0      	nop			@ (mov r8, r8)
      break;
 800809a:	e03a      	b.n	8008112 <ESP_Upkeep+0xa7e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 800809c:	4b2d      	ldr	r3, [pc, #180]	@ (8008154 <ESP_Upkeep+0xac0>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2201      	movs	r2, #1
 80080a2:	4053      	eors	r3, r2
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <ESP_Upkeep+0xa28>
        Info("Do nothing until reset");
 80080aa:	4a24      	ldr	r2, [pc, #144]	@ (800813c <ESP_Upkeep+0xaa8>)
 80080ac:	4b24      	ldr	r3, [pc, #144]	@ (8008140 <ESP_Upkeep+0xaac>)
 80080ae:	0019      	movs	r1, r3
 80080b0:	2002      	movs	r0, #2
 80080b2:	f00b feb9 	bl	8013e28 <CreateLine>
        msgdone = true;
 80080b6:	4b27      	ldr	r3, [pc, #156]	@ (8008154 <ESP_Upkeep+0xac0>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 80080bc:	f01b f800 	bl	80230c0 <GetUsbRxPointer>
 80080c0:	0003      	movs	r3, r0
 80080c2:	0018      	movs	r0, r3
 80080c4:	f000 f98c 	bl	80083e0 <Process_PC_Config>
      break;
 80080c8:	e024      	b.n	8008114 <ESP_Upkeep+0xa80>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 80080ca:	4a23      	ldr	r2, [pc, #140]	@ (8008158 <ESP_Upkeep+0xac4>)
 80080cc:	4b23      	ldr	r3, [pc, #140]	@ (800815c <ESP_Upkeep+0xac8>)
 80080ce:	0019      	movs	r1, r3
 80080d0:	2001      	movs	r0, #1
 80080d2:	f00b fea9 	bl	8013e28 <CreateLine>
      EspState = ESP_STATE_INIT;
 80080d6:	4b17      	ldr	r3, [pc, #92]	@ (8008134 <ESP_Upkeep+0xaa0>)
 80080d8:	2202      	movs	r2, #2
 80080da:	701a      	strb	r2, [r3, #0]
      break;
 80080dc:	e01a      	b.n	8008114 <ESP_Upkeep+0xa80>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 80080de:	4a20      	ldr	r2, [pc, #128]	@ (8008160 <ESP_Upkeep+0xacc>)
 80080e0:	4b1e      	ldr	r3, [pc, #120]	@ (800815c <ESP_Upkeep+0xac8>)
 80080e2:	0019      	movs	r1, r3
 80080e4:	2001      	movs	r0, #1
 80080e6:	f00b fe9f 	bl	8013e28 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80080ea:	4b12      	ldr	r3, [pc, #72]	@ (8008134 <ESP_Upkeep+0xaa0>)
 80080ec:	2207      	movs	r2, #7
 80080ee:	701a      	strb	r2, [r3, #0]
      break;
 80080f0:	e010      	b.n	8008114 <ESP_Upkeep+0xa80>
      break;
 80080f2:	46c0      	nop			@ (mov r8, r8)
 80080f4:	e00e      	b.n	8008114 <ESP_Upkeep+0xa80>
        break;
 80080f6:	46c0      	nop			@ (mov r8, r8)
 80080f8:	e00c      	b.n	8008114 <ESP_Upkeep+0xa80>
      break;
 80080fa:	46c0      	nop			@ (mov r8, r8)
 80080fc:	e00a      	b.n	8008114 <ESP_Upkeep+0xa80>
        break;
 80080fe:	46c0      	nop			@ (mov r8, r8)
 8008100:	e008      	b.n	8008114 <ESP_Upkeep+0xa80>
    break;
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	e006      	b.n	8008114 <ESP_Upkeep+0xa80>
    break;
 8008106:	46c0      	nop			@ (mov r8, r8)
 8008108:	e004      	b.n	8008114 <ESP_Upkeep+0xa80>
      break;
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	e002      	b.n	8008114 <ESP_Upkeep+0xa80>
    break;
 800810e:	46c0      	nop			@ (mov r8, r8)
 8008110:	e000      	b.n	8008114 <ESP_Upkeep+0xa80>
      break;
 8008112:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8008114:	4b07      	ldr	r3, [pc, #28]	@ (8008134 <ESP_Upkeep+0xaa0>)
 8008116:	781b      	ldrb	r3, [r3, #0]
}
 8008118:	0018      	movs	r0, r3
 800811a:	46bd      	mov	sp, r7
 800811c:	b002      	add	sp, #8
 800811e:	bdb0      	pop	{r4, r5, r7, pc}
 8008120:	20000694 	.word	0x20000694
 8008124:	200005af 	.word	0x200005af
 8008128:	200005b3 	.word	0x200005b3
 800812c:	20000702 	.word	0x20000702
 8008130:	200005ad 	.word	0x200005ad
 8008134:	20000030 	.word	0x20000030
 8008138:	200005b0 	.word	0x200005b0
 800813c:	0802b2d0 	.word	0x0802b2d0
 8008140:	0802a9cc 	.word	0x0802a9cc
 8008144:	200005b1 	.word	0x200005b1
 8008148:	20000698 	.word	0x20000698
 800814c:	2000002c 	.word	0x2000002c
 8008150:	20000002 	.word	0x20000002
 8008154:	200005b2 	.word	0x200005b2
 8008158:	0802b2e8 	.word	0x0802b2e8
 800815c:	0802a9b8 	.word	0x0802a9b8
 8008160:	0802b2fc 	.word	0x0802b2fc

08008164 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 800816c:	4b12      	ldr	r3, [pc, #72]	@ (80081b8 <I2CSensors_Init+0x54>)
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8008172:	4a12      	ldr	r2, [pc, #72]	@ (80081bc <I2CSensors_Init+0x58>)
 8008174:	4b12      	ldr	r3, [pc, #72]	@ (80081c0 <I2CSensors_Init+0x5c>)
 8008176:	0011      	movs	r1, r2
 8008178:	0018      	movs	r0, r3
 800817a:	f00c f88b 	bl	8014294 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800817e:	4a0f      	ldr	r2, [pc, #60]	@ (80081bc <I2CSensors_Init+0x58>)
 8008180:	4b0f      	ldr	r3, [pc, #60]	@ (80081c0 <I2CSensors_Init+0x5c>)
 8008182:	0011      	movs	r1, r2
 8008184:	0018      	movs	r0, r3
 8008186:	f008 fe0f 	bl	8010da8 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 800818a:	4a0e      	ldr	r2, [pc, #56]	@ (80081c4 <I2CSensors_Init+0x60>)
 800818c:	490b      	ldr	r1, [pc, #44]	@ (80081bc <I2CSensors_Init+0x58>)
 800818e:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <I2CSensors_Init+0x5c>)
 8008190:	0018      	movs	r0, r3
 8008192:	f002 febf 	bl	800af14 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8008196:	4a0c      	ldr	r2, [pc, #48]	@ (80081c8 <I2CSensors_Init+0x64>)
 8008198:	4b0c      	ldr	r3, [pc, #48]	@ (80081cc <I2CSensors_Init+0x68>)
 800819a:	0011      	movs	r1, r2
 800819c:	0018      	movs	r0, r3
 800819e:	f003 fa9f 	bl	800b6e0 <BMP_Init>
//    BMP_Init(ReadI2CDirect, WriteI2CDirect);
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80081a2:	4a09      	ldr	r2, [pc, #36]	@ (80081c8 <I2CSensors_Init+0x64>)
 80081a4:	4b09      	ldr	r3, [pc, #36]	@ (80081cc <I2CSensors_Init+0x68>)
 80081a6:	0011      	movs	r1, r2
 80081a8:	0018      	movs	r0, r3
 80081aa:	f7fb fce3 	bl	8003b74 <ENS_Init>
}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	46bd      	mov	sp, r7
 80081b2:	b002      	add	sp, #8
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	46c0      	nop			@ (mov r8, r8)
 80081b8:	2000093c 	.word	0x2000093c
 80081bc:	08008289 	.word	0x08008289
 80081c0:	08008231 	.word	0x08008231
 80081c4:	080081d1 	.word	0x080081d1
 80081c8:	08008361 	.word	0x08008361
 80081cc:	080082dd 	.word	0x080082dd

080081d0 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80081d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	6039      	str	r1, [r7, #0]
 80081d8:	0011      	movs	r1, r2
 80081da:	1dfb      	adds	r3, r7, #7
 80081dc:	1c02      	adds	r2, r0, #0
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	1dbb      	adds	r3, r7, #6
 80081e2:	1c0a      	adds	r2, r1, #0
 80081e4:	701a      	strb	r2, [r3, #0]
//  Debug("ReadI2CDirect address 0x%02X", address);
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, ((address << 1)+1), buffer, nrBytes, 1000);
 80081e6:	4b11      	ldr	r3, [pc, #68]	@ (800822c <ReadI2CDirect+0x5c>)
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	1dfb      	adds	r3, r7, #7
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	18db      	adds	r3, r3, r3
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3301      	adds	r3, #1
 80081f6:	b299      	uxth	r1, r3
 80081f8:	1dbb      	adds	r3, r7, #6
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b29d      	uxth	r5, r3
 80081fe:	260f      	movs	r6, #15
 8008200:	19bc      	adds	r4, r7, r6
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	23fa      	movs	r3, #250	@ 0xfa
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	002b      	movs	r3, r5
 800820c:	f00d ffce 	bl	80161ac <HAL_I2C_Master_Receive>
 8008210:	0003      	movs	r3, r0
 8008212:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008214:	19bb      	adds	r3, r7, r6
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <ReadI2CDirect+0x50>
        return false;
 800821c:	2300      	movs	r3, #0
 800821e:	e000      	b.n	8008222 <ReadI2CDirect+0x52>
    }
    return true;
 8008220:	2301      	movs	r3, #1
}
 8008222:	0018      	movs	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	b005      	add	sp, #20
 8008228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800822a:	46c0      	nop			@ (mov r8, r8)
 800822c:	2000093c 	.word	0x2000093c

08008230 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008230:	b5b0      	push	{r4, r5, r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6039      	str	r1, [r7, #0]
 8008238:	0011      	movs	r1, r2
 800823a:	1dfb      	adds	r3, r7, #7
 800823c:	1c02      	adds	r2, r0, #0
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	1dbb      	adds	r3, r7, #6
 8008242:	1c0a      	adds	r2, r1, #0
 8008244:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, ((address << 1)+1), buffer, nrBytes);
 8008246:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <ReadI2C+0x54>)
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	1dfb      	adds	r3, r7, #7
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	18db      	adds	r3, r3, r3
 8008252:	b29b      	uxth	r3, r3
 8008254:	3301      	adds	r3, #1
 8008256:	b299      	uxth	r1, r3
 8008258:	1dbb      	adds	r3, r7, #6
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	250f      	movs	r5, #15
 8008260:	197c      	adds	r4, r7, r5
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	f00e f9b0 	bl	80165c8 <HAL_I2C_Master_Receive_DMA>
 8008268:	0003      	movs	r3, r0
 800826a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800826c:	197b      	adds	r3, r7, r5
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <ReadI2C+0x48>
        return false;
 8008274:	2300      	movs	r3, #0
 8008276:	e000      	b.n	800827a <ReadI2C+0x4a>
    }
    return true;
 8008278:	2301      	movs	r3, #1
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	b004      	add	sp, #16
 8008280:	bdb0      	pop	{r4, r5, r7, pc}
 8008282:	46c0      	nop			@ (mov r8, r8)
 8008284:	2000093c 	.word	0x2000093c

08008288 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008288:	b5b0      	push	{r4, r5, r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6039      	str	r1, [r7, #0]
 8008290:	0011      	movs	r1, r2
 8008292:	1dfb      	adds	r3, r7, #7
 8008294:	1c02      	adds	r2, r0, #0
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	1dbb      	adds	r3, r7, #6
 800829a:	1c0a      	adds	r2, r1, #0
 800829c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800829e:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <WriteI2C+0x50>)
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	1dfb      	adds	r3, r7, #7
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	18db      	adds	r3, r3, r3
 80082aa:	b299      	uxth	r1, r3
 80082ac:	1dbb      	adds	r3, r7, #6
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	250f      	movs	r5, #15
 80082b4:	197c      	adds	r4, r7, r5
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	f00e f880 	bl	80163bc <HAL_I2C_Master_Transmit_DMA>
 80082bc:	0003      	movs	r3, r0
 80082be:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082c0:	197b      	adds	r3, r7, r5
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <WriteI2C+0x44>
        return false;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e000      	b.n	80082ce <WriteI2C+0x46>
    }
    return true;
 80082cc:	2301      	movs	r3, #1
}
 80082ce:	0018      	movs	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	b004      	add	sp, #16
 80082d4:	bdb0      	pop	{r4, r5, r7, pc}
 80082d6:	46c0      	nop			@ (mov r8, r8)
 80082d8:	2000093c 	.word	0x2000093c

080082dc <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80082dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082de:	b08b      	sub	sp, #44	@ 0x2c
 80082e0:	af04      	add	r7, sp, #16
 80082e2:	0004      	movs	r4, r0
 80082e4:	0008      	movs	r0, r1
 80082e6:	0011      	movs	r1, r2
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	250f      	movs	r5, #15
 80082ec:	197b      	adds	r3, r7, r5
 80082ee:	1c22      	adds	r2, r4, #0
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	260c      	movs	r6, #12
 80082f4:	19bb      	adds	r3, r7, r6
 80082f6:	1c02      	adds	r2, r0, #0
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	230a      	movs	r3, #10
 80082fc:	18fb      	adds	r3, r7, r3
 80082fe:	1c0a      	adds	r2, r1, #0
 8008300:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, ((address << 1)+1), MemAddress, MemSize, buffer, nrBytes,1000);
 8008302:	4b16      	ldr	r3, [pc, #88]	@ (800835c <ReadI2CMem+0x80>)
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	197b      	adds	r3, r7, r5
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	18db      	adds	r3, r3, r3
 800830e:	b29b      	uxth	r3, r3
 8008310:	3301      	adds	r3, #1
 8008312:	b299      	uxth	r1, r3
 8008314:	2217      	movs	r2, #23
 8008316:	18bc      	adds	r4, r7, r2
 8008318:	230a      	movs	r3, #10
 800831a:	18fb      	adds	r3, r7, r3
 800831c:	881d      	ldrh	r5, [r3, #0]
 800831e:	19bb      	adds	r3, r7, r6
 8008320:	881a      	ldrh	r2, [r3, #0]
 8008322:	23fa      	movs	r3, #250	@ 0xfa
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	9302      	str	r3, [sp, #8]
 8008328:	2328      	movs	r3, #40	@ 0x28
 800832a:	2608      	movs	r6, #8
 800832c:	199b      	adds	r3, r3, r6
 800832e:	19db      	adds	r3, r3, r7
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	002b      	movs	r3, r5
 800833a:	f00e fb79 	bl	8016a30 <HAL_I2C_Mem_Read>
 800833e:	0003      	movs	r3, r0
 8008340:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008342:	2217      	movs	r2, #23
 8008344:	18bb      	adds	r3, r7, r2
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <ReadI2CMem+0x74>
     return false;
 800834c:	2300      	movs	r3, #0
 800834e:	e000      	b.n	8008352 <ReadI2CMem+0x76>
   }
   return true;
 8008350:	2301      	movs	r3, #1
}
 8008352:	0018      	movs	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	b007      	add	sp, #28
 8008358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800835a:	46c0      	nop			@ (mov r8, r8)
 800835c:	2000093c 	.word	0x2000093c

08008360 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008362:	b08b      	sub	sp, #44	@ 0x2c
 8008364:	af04      	add	r7, sp, #16
 8008366:	0004      	movs	r4, r0
 8008368:	0008      	movs	r0, r1
 800836a:	0011      	movs	r1, r2
 800836c:	607b      	str	r3, [r7, #4]
 800836e:	250f      	movs	r5, #15
 8008370:	197b      	adds	r3, r7, r5
 8008372:	1c22      	adds	r2, r4, #0
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	260c      	movs	r6, #12
 8008378:	19bb      	adds	r3, r7, r6
 800837a:	1c02      	adds	r2, r0, #0
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	230a      	movs	r3, #10
 8008380:	18fb      	adds	r3, r7, r3
 8008382:	1c0a      	adds	r2, r1, #0
 8008384:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,1000);  // de dma verwijderd 16-8-2025
 8008386:	4b15      	ldr	r3, [pc, #84]	@ (80083dc <WriteI2CMem+0x7c>)
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	197b      	adds	r3, r7, r5
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	18db      	adds	r3, r3, r3
 8008392:	b299      	uxth	r1, r3
 8008394:	2217      	movs	r2, #23
 8008396:	18bc      	adds	r4, r7, r2
 8008398:	230a      	movs	r3, #10
 800839a:	18fb      	adds	r3, r7, r3
 800839c:	881d      	ldrh	r5, [r3, #0]
 800839e:	19bb      	adds	r3, r7, r6
 80083a0:	881a      	ldrh	r2, [r3, #0]
 80083a2:	23fa      	movs	r3, #250	@ 0xfa
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	2328      	movs	r3, #40	@ 0x28
 80083aa:	2608      	movs	r6, #8
 80083ac:	199b      	adds	r3, r3, r6
 80083ae:	19db      	adds	r3, r3, r7
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	002b      	movs	r3, r5
 80083ba:	f00e fa0b 	bl	80167d4 <HAL_I2C_Mem_Write>
 80083be:	0003      	movs	r3, r0
 80083c0:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80083c2:	2217      	movs	r2, #23
 80083c4:	18bb      	adds	r3, r7, r2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <WriteI2CMem+0x70>
     return false;
 80083cc:	2300      	movs	r3, #0
 80083ce:	e000      	b.n	80083d2 <WriteI2CMem+0x72>
   }
   return true;
 80083d0:	2301      	movs	r3, #1
}
 80083d2:	0018      	movs	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	b007      	add	sp, #28
 80083d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083da:	46c0      	nop			@ (mov r8, r8)
 80083dc:	2000093c 	.word	0x2000093c

080083e0 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80083e0:	b590      	push	{r4, r7, lr}
 80083e2:	b0c3      	sub	sp, #268	@ 0x10c
 80083e4:	af3e      	add	r7, sp, #248	@ 0xf8
 80083e6:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80083e8:	f01a fe8a 	bl	8023100 <GetUsbRxDataSize>
 80083ec:	0003      	movs	r3, r0
 80083ee:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d972      	bls.n	80084dc <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2123      	movs	r1, #35	@ 0x23
 80083fa:	0018      	movs	r0, r3
 80083fc:	f01e f88e 	bl	802651c <strchr>
 8008400:	0003      	movs	r3, r0
 8008402:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d066      	beq.n	80084d8 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	785a      	ldrb	r2, [r3, #1]
 800840e:	4b35      	ldr	r3, [pc, #212]	@ (80084e4 <Process_PC_Config+0x104>)
 8008410:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	789a      	ldrb	r2, [r3, #2]
 8008416:	4b33      	ldr	r3, [pc, #204]	@ (80084e4 <Process_PC_Config+0x104>)
 8008418:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800841a:	4b32      	ldr	r3, [pc, #200]	@ (80084e4 <Process_PC_Config+0x104>)
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	3305      	adds	r3, #5
 8008420:	001a      	movs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4293      	cmp	r3, r2
 8008426:	d352      	bcc.n	80084ce <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	1cd9      	adds	r1, r3, #3
 800842c:	4b2d      	ldr	r3, [pc, #180]	@ (80084e4 <Process_PC_Config+0x104>)
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	001a      	movs	r2, r3
 8008432:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <Process_PC_Config+0x108>)
 8008434:	0018      	movs	r0, r3
 8008436:	f01e f945 	bl	80266c4 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800843a:	4b2a      	ldr	r3, [pc, #168]	@ (80084e4 <Process_PC_Config+0x104>)
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	3303      	adds	r3, #3
 8008440:	001a      	movs	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	189b      	adds	r3, r3, r2
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b21b      	sxth	r3, r3
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	b21a      	sxth	r2, r3
 800844e:	4b25      	ldr	r3, [pc, #148]	@ (80084e4 <Process_PC_Config+0x104>)
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	3304      	adds	r3, #4
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	18cb      	adds	r3, r1, r3
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	b21b      	sxth	r3, r3
 800845c:	4313      	orrs	r3, r2
 800845e:	b21b      	sxth	r3, r3
 8008460:	b299      	uxth	r1, r3
 8008462:	4a20      	ldr	r2, [pc, #128]	@ (80084e4 <Process_PC_Config+0x104>)
 8008464:	2381      	movs	r3, #129	@ 0x81
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 800846a:	4a1e      	ldr	r2, [pc, #120]	@ (80084e4 <Process_PC_Config+0x104>)
 800846c:	2381      	movs	r3, #129	@ 0x81
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	5ad4      	ldrh	r4, [r2, r3]
 8008472:	4b1c      	ldr	r3, [pc, #112]	@ (80084e4 <Process_PC_Config+0x104>)
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	3303      	adds	r3, #3
 8008478:	b29a      	uxth	r2, r3
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	0011      	movs	r1, r2
 800847e:	0018      	movs	r0, r3
 8008480:	f000 faa2 	bl	80089c8 <CRC16_ARC>
 8008484:	0003      	movs	r3, r0
 8008486:	429c      	cmp	r4, r3
 8008488:	d007      	beq.n	800849a <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 800848a:	4b16      	ldr	r3, [pc, #88]	@ (80084e4 <Process_PC_Config+0x104>)
 800848c:	785a      	ldrb	r2, [r3, #1]
 800848e:	4b16      	ldr	r3, [pc, #88]	@ (80084e8 <Process_PC_Config+0x108>)
 8008490:	0019      	movs	r1, r3
 8008492:	2001      	movs	r0, #1
 8008494:	f000 fa46 	bl	8008924 <Create_Message>
 8008498:	e016      	b.n	80084c8 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 800849a:	4c12      	ldr	r4, [pc, #72]	@ (80084e4 <Process_PC_Config+0x104>)
 800849c:	466b      	mov	r3, sp
 800849e:	0018      	movs	r0, r3
 80084a0:	0023      	movs	r3, r4
 80084a2:	3310      	adds	r3, #16
 80084a4:	22f4      	movs	r2, #244	@ 0xf4
 80084a6:	0019      	movs	r1, r3
 80084a8:	f01e f90c 	bl	80266c4 <memcpy>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	6861      	ldr	r1, [r4, #4]
 80084b0:	68a2      	ldr	r2, [r4, #8]
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	f000 f81a 	bl	80084ec <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80084b8:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <Process_PC_Config+0x104>)
 80084ba:	7818      	ldrb	r0, [r3, #0]
 80084bc:	4b09      	ldr	r3, [pc, #36]	@ (80084e4 <Process_PC_Config+0x104>)
 80084be:	785a      	ldrb	r2, [r3, #1]
 80084c0:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <Process_PC_Config+0x108>)
 80084c2:	0019      	movs	r1, r3
 80084c4:	f000 fa2e 	bl	8008924 <Create_Message>
                }
                ResetUsbRxDataSize();
 80084c8:	f01a fe02 	bl	80230d0 <ResetUsbRxDataSize>
                return;
 80084cc:	e006      	b.n	80084dc <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	0018      	movs	r0, r3
 80084d2:	f01a fe1f 	bl	8023114 <GetUsbRxNextChunk>
 80084d6:	e001      	b.n	80084dc <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 80084d8:	f01a fdfa 	bl	80230d0 <ResetUsbRxDataSize>
        }
    }
}
 80084dc:	46bd      	mov	sp, r7
 80084de:	b005      	add	sp, #20
 80084e0:	bd90      	pop	{r4, r7, pc}
 80084e2:	46c0      	nop			@ (mov r8, r8)
 80084e4:	20000940 	.word	0x20000940
 80084e8:	20000942 	.word	0x20000942

080084ec <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80084ec:	b084      	sub	sp, #16
 80084ee:	b5b0      	push	{r4, r5, r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	2518      	movs	r5, #24
 80084f6:	197c      	adds	r4, r7, r5
 80084f8:	6020      	str	r0, [r4, #0]
 80084fa:	6061      	str	r1, [r4, #4]
 80084fc:	60a2      	str	r2, [r4, #8]
 80084fe:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 8008500:	197b      	adds	r3, r7, r5
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2bfe      	cmp	r3, #254	@ 0xfe
 8008506:	d900      	bls.n	800850a <ProcessCmd+0x1e>
 8008508:	e202      	b.n	8008910 <ProcessCmd+0x424>
 800850a:	009a      	lsls	r2, r3, #2
 800850c:	4bdc      	ldr	r3, [pc, #880]	@ (8008880 <ProcessCmd+0x394>)
 800850e:	18d3      	adds	r3, r2, r3
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008514:	2118      	movs	r1, #24
 8008516:	187b      	adds	r3, r7, r1
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	001a      	movs	r2, r3
 800851c:	187b      	adds	r3, r7, r1
 800851e:	1c99      	adds	r1, r3, #2
 8008520:	48d8      	ldr	r0, [pc, #864]	@ (8008884 <ProcessCmd+0x398>)
 8008522:	230c      	movs	r3, #12
 8008524:	f003 fdca 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008528:	e1f2      	b.n	8008910 <ProcessCmd+0x424>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800852a:	2118      	movs	r1, #24
 800852c:	187b      	adds	r3, r7, r1
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	001a      	movs	r2, r3
 8008532:	187b      	adds	r3, r7, r1
 8008534:	1c99      	adds	r1, r3, #2
 8008536:	48d4      	ldr	r0, [pc, #848]	@ (8008888 <ProcessCmd+0x39c>)
 8008538:	230c      	movs	r3, #12
 800853a:	f003 fdbf 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 800853e:	e1e7      	b.n	8008910 <ProcessCmd+0x424>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008540:	2118      	movs	r1, #24
 8008542:	187b      	adds	r3, r7, r1
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	001a      	movs	r2, r3
 8008548:	187b      	adds	r3, r7, r1
 800854a:	1c99      	adds	r1, r3, #2
 800854c:	48cf      	ldr	r0, [pc, #828]	@ (800888c <ProcessCmd+0x3a0>)
 800854e:	230c      	movs	r3, #12
 8008550:	f003 fdb4 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008554:	e1dc      	b.n	8008910 <ProcessCmd+0x424>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008556:	2118      	movs	r1, #24
 8008558:	187b      	adds	r3, r7, r1
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	001a      	movs	r2, r3
 800855e:	187b      	adds	r3, r7, r1
 8008560:	1c99      	adds	r1, r3, #2
 8008562:	48cb      	ldr	r0, [pc, #812]	@ (8008890 <ProcessCmd+0x3a4>)
 8008564:	230c      	movs	r3, #12
 8008566:	f003 fda9 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 800856a:	e1d1      	b.n	8008910 <ProcessCmd+0x424>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800856c:	2118      	movs	r1, #24
 800856e:	187b      	adds	r3, r7, r1
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	001a      	movs	r2, r3
 8008574:	187b      	adds	r3, r7, r1
 8008576:	1c99      	adds	r1, r3, #2
 8008578:	48c6      	ldr	r0, [pc, #792]	@ (8008894 <ProcessCmd+0x3a8>)
 800857a:	230c      	movs	r3, #12
 800857c:	f003 fd9e 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008580:	e1c6      	b.n	8008910 <ProcessCmd+0x424>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008582:	2118      	movs	r1, #24
 8008584:	187b      	adds	r3, r7, r1
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	001a      	movs	r2, r3
 800858a:	187b      	adds	r3, r7, r1
 800858c:	1c99      	adds	r1, r3, #2
 800858e:	48c2      	ldr	r0, [pc, #776]	@ (8008898 <ProcessCmd+0x3ac>)
 8008590:	230c      	movs	r3, #12
 8008592:	f003 fd93 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008596:	e1bb      	b.n	8008910 <ProcessCmd+0x424>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008598:	2118      	movs	r1, #24
 800859a:	187b      	adds	r3, r7, r1
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	001a      	movs	r2, r3
 80085a0:	187b      	adds	r3, r7, r1
 80085a2:	1c99      	adds	r1, r3, #2
 80085a4:	48bd      	ldr	r0, [pc, #756]	@ (800889c <ProcessCmd+0x3b0>)
 80085a6:	230c      	movs	r3, #12
 80085a8:	f003 fd88 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80085ac:	e1b0      	b.n	8008910 <ProcessCmd+0x424>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085ae:	2118      	movs	r1, #24
 80085b0:	187b      	adds	r3, r7, r1
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	001a      	movs	r2, r3
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	1c99      	adds	r1, r3, #2
 80085ba:	48b9      	ldr	r0, [pc, #740]	@ (80088a0 <ProcessCmd+0x3b4>)
 80085bc:	230c      	movs	r3, #12
 80085be:	f003 fd7d 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80085c2:	e1a5      	b.n	8008910 <ProcessCmd+0x424>
        case PM10ConfigCmd:  // 8
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085c4:	2118      	movs	r1, #24
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	001a      	movs	r2, r3
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	1c99      	adds	r1, r3, #2
 80085d0:	48b4      	ldr	r0, [pc, #720]	@ (80088a4 <ProcessCmd+0x3b8>)
 80085d2:	230c      	movs	r3, #12
 80085d4:	f003 fd72 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80085d8:	e19a      	b.n	8008910 <ProcessCmd+0x424>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085da:	2118      	movs	r1, #24
 80085dc:	187b      	adds	r3, r7, r1
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	001a      	movs	r2, r3
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	1c99      	adds	r1, r3, #2
 80085e6:	48b0      	ldr	r0, [pc, #704]	@ (80088a8 <ProcessCmd+0x3bc>)
 80085e8:	230c      	movs	r3, #12
 80085ea:	f003 fd67 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80085ee:	e18f      	b.n	8008910 <ProcessCmd+0x424>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085f0:	2118      	movs	r1, #24
 80085f2:	187b      	adds	r3, r7, r1
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	001a      	movs	r2, r3
 80085f8:	187b      	adds	r3, r7, r1
 80085fa:	1c99      	adds	r1, r3, #2
 80085fc:	48ab      	ldr	r0, [pc, #684]	@ (80088ac <ProcessCmd+0x3c0>)
 80085fe:	230c      	movs	r3, #12
 8008600:	f003 fd5c 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008604:	e184      	b.n	8008910 <ProcessCmd+0x424>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008606:	2118      	movs	r1, #24
 8008608:	187b      	adds	r3, r7, r1
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	001a      	movs	r2, r3
 800860e:	187b      	adds	r3, r7, r1
 8008610:	1c99      	adds	r1, r3, #2
 8008612:	48a7      	ldr	r0, [pc, #668]	@ (80088b0 <ProcessCmd+0x3c4>)
 8008614:	2320      	movs	r3, #32
 8008616:	f003 fd51 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 800861a:	e179      	b.n	8008910 <ProcessCmd+0x424>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 800861c:	4ba5      	ldr	r3, [pc, #660]	@ (80088b4 <ProcessCmd+0x3c8>)
 800861e:	2120      	movs	r1, #32
 8008620:	0018      	movs	r0, r3
 8008622:	f003 fd90 	bl	800c146 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 8008626:	2118      	movs	r1, #24
 8008628:	187b      	adds	r3, r7, r1
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	001a      	movs	r2, r3
 800862e:	187b      	adds	r3, r7, r1
 8008630:	1c99      	adds	r1, r3, #2
 8008632:	48a0      	ldr	r0, [pc, #640]	@ (80088b4 <ProcessCmd+0x3c8>)
 8008634:	2320      	movs	r3, #32
 8008636:	f003 fd41 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 800863a:	e169      	b.n	8008910 <ProcessCmd+0x424>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 800863c:	4b9e      	ldr	r3, [pc, #632]	@ (80088b8 <ProcessCmd+0x3cc>)
 800863e:	2140      	movs	r1, #64	@ 0x40
 8008640:	0018      	movs	r0, r3
 8008642:	f003 fd80 	bl	800c146 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 8008646:	2218      	movs	r2, #24
 8008648:	18bb      	adds	r3, r7, r2
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	0019      	movs	r1, r3
 800864e:	18bb      	adds	r3, r7, r2
 8008650:	785b      	ldrb	r3, [r3, #1]
 8008652:	001c      	movs	r4, r3
 8008654:	0015      	movs	r5, r2
 8008656:	18bb      	adds	r3, r7, r2
 8008658:	1c9a      	adds	r2, r3, #2
 800865a:	4898      	ldr	r0, [pc, #608]	@ (80088bc <ProcessCmd+0x3d0>)
 800865c:	0023      	movs	r3, r4
 800865e:	f000 f9ff 	bl	8008a60 <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 8008662:	0029      	movs	r1, r5
 8008664:	187b      	adds	r3, r7, r1
 8008666:	785b      	ldrb	r3, [r3, #1]
 8008668:	001a      	movs	r2, r3
 800866a:	187b      	adds	r3, r7, r1
 800866c:	1c99      	adds	r1, r3, #2
 800866e:	4892      	ldr	r0, [pc, #584]	@ (80088b8 <ProcessCmd+0x3cc>)
 8008670:	2340      	movs	r3, #64	@ 0x40
 8008672:	f003 fd23 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008676:	e14b      	b.n	8008910 <ProcessCmd+0x424>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008678:	2118      	movs	r1, #24
 800867a:	187b      	adds	r3, r7, r1
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	001a      	movs	r2, r3
 8008680:	187b      	adds	r3, r7, r1
 8008682:	1c99      	adds	r1, r3, #2
 8008684:	488e      	ldr	r0, [pc, #568]	@ (80088c0 <ProcessCmd+0x3d4>)
 8008686:	230c      	movs	r3, #12
 8008688:	f003 fd18 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 800868c:	e140      	b.n	8008910 <ProcessCmd+0x424>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800868e:	2118      	movs	r1, #24
 8008690:	187b      	adds	r3, r7, r1
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	001a      	movs	r2, r3
 8008696:	187b      	adds	r3, r7, r1
 8008698:	1c99      	adds	r1, r3, #2
 800869a:	488a      	ldr	r0, [pc, #552]	@ (80088c4 <ProcessCmd+0x3d8>)
 800869c:	230c      	movs	r3, #12
 800869e:	f003 fd0d 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80086a2:	e135      	b.n	8008910 <ProcessCmd+0x424>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086a4:	2118      	movs	r1, #24
 80086a6:	187b      	adds	r3, r7, r1
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	001a      	movs	r2, r3
 80086ac:	187b      	adds	r3, r7, r1
 80086ae:	1c99      	adds	r1, r3, #2
 80086b0:	4885      	ldr	r0, [pc, #532]	@ (80088c8 <ProcessCmd+0x3dc>)
 80086b2:	230c      	movs	r3, #12
 80086b4:	f003 fd02 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80086b8:	e12a      	b.n	8008910 <ProcessCmd+0x424>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086ba:	2118      	movs	r1, #24
 80086bc:	187b      	adds	r3, r7, r1
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	001a      	movs	r2, r3
 80086c2:	187b      	adds	r3, r7, r1
 80086c4:	1c99      	adds	r1, r3, #2
 80086c6:	4881      	ldr	r0, [pc, #516]	@ (80088cc <ProcessCmd+0x3e0>)
 80086c8:	230c      	movs	r3, #12
 80086ca:	f003 fcf7 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80086ce:	e11f      	b.n	8008910 <ProcessCmd+0x424>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086d0:	2118      	movs	r1, #24
 80086d2:	187b      	adds	r3, r7, r1
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	001a      	movs	r2, r3
 80086d8:	187b      	adds	r3, r7, r1
 80086da:	1c99      	adds	r1, r3, #2
 80086dc:	487c      	ldr	r0, [pc, #496]	@ (80088d0 <ProcessCmd+0x3e4>)
 80086de:	230c      	movs	r3, #12
 80086e0:	f003 fcec 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80086e4:	e114      	b.n	8008910 <ProcessCmd+0x424>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086e6:	2118      	movs	r1, #24
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	001a      	movs	r2, r3
 80086ee:	187b      	adds	r3, r7, r1
 80086f0:	1c99      	adds	r1, r3, #2
 80086f2:	4878      	ldr	r0, [pc, #480]	@ (80088d4 <ProcessCmd+0x3e8>)
 80086f4:	230c      	movs	r3, #12
 80086f6:	f003 fce1 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80086fa:	e109      	b.n	8008910 <ProcessCmd+0x424>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086fc:	2118      	movs	r1, #24
 80086fe:	187b      	adds	r3, r7, r1
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	001a      	movs	r2, r3
 8008704:	187b      	adds	r3, r7, r1
 8008706:	1c99      	adds	r1, r3, #2
 8008708:	4873      	ldr	r0, [pc, #460]	@ (80088d8 <ProcessCmd+0x3ec>)
 800870a:	230c      	movs	r3, #12
 800870c:	f003 fcd6 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008710:	e0fe      	b.n	8008910 <ProcessCmd+0x424>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008712:	2118      	movs	r1, #24
 8008714:	187b      	adds	r3, r7, r1
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	001a      	movs	r2, r3
 800871a:	187b      	adds	r3, r7, r1
 800871c:	1c99      	adds	r1, r3, #2
 800871e:	486f      	ldr	r0, [pc, #444]	@ (80088dc <ProcessCmd+0x3f0>)
 8008720:	230c      	movs	r3, #12
 8008722:	f003 fccb 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008726:	e0f3      	b.n	8008910 <ProcessCmd+0x424>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008728:	2118      	movs	r1, #24
 800872a:	187b      	adds	r3, r7, r1
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	001a      	movs	r2, r3
 8008730:	187b      	adds	r3, r7, r1
 8008732:	1c99      	adds	r1, r3, #2
 8008734:	486a      	ldr	r0, [pc, #424]	@ (80088e0 <ProcessCmd+0x3f4>)
 8008736:	230c      	movs	r3, #12
 8008738:	f003 fcc0 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 800873c:	e0e8      	b.n	8008910 <ProcessCmd+0x424>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800873e:	2118      	movs	r1, #24
 8008740:	187b      	adds	r3, r7, r1
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	001a      	movs	r2, r3
 8008746:	187b      	adds	r3, r7, r1
 8008748:	1c99      	adds	r1, r3, #2
 800874a:	4866      	ldr	r0, [pc, #408]	@ (80088e4 <ProcessCmd+0x3f8>)
 800874c:	230c      	movs	r3, #12
 800874e:	f003 fcb5 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008752:	e0dd      	b.n	8008910 <ProcessCmd+0x424>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 8008754:	4b64      	ldr	r3, [pc, #400]	@ (80088e8 <ProcessCmd+0x3fc>)
 8008756:	2130      	movs	r1, #48	@ 0x30
 8008758:	0018      	movs	r0, r3
 800875a:	f003 fcf4 	bl	800c146 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 800875e:	2118      	movs	r1, #24
 8008760:	187b      	adds	r3, r7, r1
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	001a      	movs	r2, r3
 8008766:	187b      	adds	r3, r7, r1
 8008768:	1c99      	adds	r1, r3, #2
 800876a:	485f      	ldr	r0, [pc, #380]	@ (80088e8 <ProcessCmd+0x3fc>)
 800876c:	2330      	movs	r3, #48	@ 0x30
 800876e:	f003 fca5 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 8008772:	e0cd      	b.n	8008910 <ProcessCmd+0x424>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 8008774:	4b5d      	ldr	r3, [pc, #372]	@ (80088ec <ProcessCmd+0x400>)
 8008776:	2130      	movs	r1, #48	@ 0x30
 8008778:	0018      	movs	r0, r3
 800877a:	f003 fce4 	bl	800c146 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 800877e:	2218      	movs	r2, #24
 8008780:	18bb      	adds	r3, r7, r2
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	0019      	movs	r1, r3
 8008786:	18bb      	adds	r3, r7, r2
 8008788:	785b      	ldrb	r3, [r3, #1]
 800878a:	001c      	movs	r4, r3
 800878c:	0015      	movs	r5, r2
 800878e:	18bb      	adds	r3, r7, r2
 8008790:	1c9a      	adds	r2, r3, #2
 8008792:	484a      	ldr	r0, [pc, #296]	@ (80088bc <ProcessCmd+0x3d0>)
 8008794:	0023      	movs	r3, r4
 8008796:	f000 f963 	bl	8008a60 <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 800879a:	0029      	movs	r1, r5
 800879c:	187b      	adds	r3, r7, r1
 800879e:	785b      	ldrb	r3, [r3, #1]
 80087a0:	001a      	movs	r2, r3
 80087a2:	187b      	adds	r3, r7, r1
 80087a4:	1c99      	adds	r1, r3, #2
 80087a6:	4851      	ldr	r0, [pc, #324]	@ (80088ec <ProcessCmd+0x400>)
 80087a8:	2330      	movs	r3, #48	@ 0x30
 80087aa:	f003 fc87 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80087ae:	e0af      	b.n	8008910 <ProcessCmd+0x424>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 80087b0:	4b4f      	ldr	r3, [pc, #316]	@ (80088f0 <ProcessCmd+0x404>)
 80087b2:	2130      	movs	r1, #48	@ 0x30
 80087b4:	0018      	movs	r0, r3
 80087b6:	f003 fcc6 	bl	800c146 <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 80087ba:	2118      	movs	r1, #24
 80087bc:	187b      	adds	r3, r7, r1
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	001a      	movs	r2, r3
 80087c2:	187b      	adds	r3, r7, r1
 80087c4:	1c99      	adds	r1, r3, #2
 80087c6:	484a      	ldr	r0, [pc, #296]	@ (80088f0 <ProcessCmd+0x404>)
 80087c8:	2330      	movs	r3, #48	@ 0x30
 80087ca:	f003 fc77 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80087ce:	e09f      	b.n	8008910 <ProcessCmd+0x424>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087d0:	2118      	movs	r1, #24
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	001a      	movs	r2, r3
 80087d8:	187b      	adds	r3, r7, r1
 80087da:	1c99      	adds	r1, r3, #2
 80087dc:	4845      	ldr	r0, [pc, #276]	@ (80088f4 <ProcessCmd+0x408>)
 80087de:	230c      	movs	r3, #12
 80087e0:	f003 fc6c 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80087e4:	e094      	b.n	8008910 <ProcessCmd+0x424>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087e6:	2118      	movs	r1, #24
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	001a      	movs	r2, r3
 80087ee:	187b      	adds	r3, r7, r1
 80087f0:	1c99      	adds	r1, r3, #2
 80087f2:	4841      	ldr	r0, [pc, #260]	@ (80088f8 <ProcessCmd+0x40c>)
 80087f4:	230c      	movs	r3, #12
 80087f6:	f003 fc61 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 80087fa:	e089      	b.n	8008910 <ProcessCmd+0x424>
        case URLToUploadConfigCmd: // 30
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80087fc:	2218      	movs	r2, #24
 80087fe:	18bb      	adds	r3, r7, r2
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	0019      	movs	r1, r3
 8008804:	18bb      	adds	r3, r7, r2
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	001c      	movs	r4, r3
 800880a:	0015      	movs	r5, r2
 800880c:	18bb      	adds	r3, r7, r2
 800880e:	1c9a      	adds	r2, r3, #2
 8008810:	482a      	ldr	r0, [pc, #168]	@ (80088bc <ProcessCmd+0x3d0>)
 8008812:	0023      	movs	r3, r4
 8008814:	f000 f924 	bl	8008a60 <printf_USB>
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 8008818:	0029      	movs	r1, r5
 800881a:	187b      	adds	r3, r7, r1
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	001a      	movs	r2, r3
 8008820:	187b      	adds	r3, r7, r1
 8008822:	1c99      	adds	r1, r3, #2
 8008824:	4835      	ldr	r0, [pc, #212]	@ (80088fc <ProcessCmd+0x410>)
 8008826:	2330      	movs	r3, #48	@ 0x30
 8008828:	f003 fc48 	bl	800c0bc <WriteUint8ArrayEepromSafe>
        break;
 800882c:	e070      	b.n	8008910 <ProcessCmd+0x424>

        case ClearConfigCmd: // 253
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800882e:	2396      	movs	r3, #150	@ 0x96
 8008830:	33ff      	adds	r3, #255	@ 0xff
 8008832:	4a14      	ldr	r2, [pc, #80]	@ (8008884 <ProcessCmd+0x398>)
 8008834:	0019      	movs	r1, r3
 8008836:	0010      	movs	r0, r2
 8008838:	f003 fc85 	bl	800c146 <ClearEEprom>
            ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 800883c:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <ProcessCmd+0x3c8>)
 800883e:	21f0      	movs	r1, #240	@ 0xf0
 8008840:	0018      	movs	r0, r3
 8008842:	f003 fc80 	bl	800c146 <ClearEEprom>
        break;
 8008846:	e063      	b.n	8008910 <ProcessCmd+0x424>
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8008848:	2118      	movs	r1, #24
 800884a:	187b      	adds	r3, r7, r1
 800884c:	789b      	ldrb	r3, [r3, #2]
 800884e:	b21b      	sxth	r3, r3
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	b21a      	sxth	r2, r3
 8008854:	187b      	adds	r3, r7, r1
 8008856:	78db      	ldrb	r3, [r3, #3]
 8008858:	b21b      	sxth	r3, r3
 800885a:	4313      	orrs	r3, r2
 800885c:	b21a      	sxth	r2, r3
 800885e:	1dbb      	adds	r3, r7, #6
 8008860:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8008862:	1dbb      	adds	r3, r7, #6
 8008864:	881a      	ldrh	r2, [r3, #0]
 8008866:	23c0      	movs	r3, #192	@ 0xc0
 8008868:	015b      	lsls	r3, r3, #5
 800886a:	429a      	cmp	r2, r3
 800886c:	d248      	bcs.n	8008900 <ProcessCmd+0x414>
            {
                ClearEEprom(EEPromStartAddr, size);
 800886e:	1dbb      	adds	r3, r7, #6
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	4a04      	ldr	r2, [pc, #16]	@ (8008884 <ProcessCmd+0x398>)
 8008874:	0019      	movs	r1, r3
 8008876:	0010      	movs	r0, r2
 8008878:	f003 fc65 	bl	800c146 <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 800887c:	e047      	b.n	800890e <ProcessCmd+0x422>
 800887e:	46c0      	nop			@ (mov r8, r8)
 8008880:	0802def4 	.word	0x0802def4
 8008884:	08080000 	.word	0x08080000
 8008888:	0808000c 	.word	0x0808000c
 800888c:	08080018 	.word	0x08080018
 8008890:	08080024 	.word	0x08080024
 8008894:	08080030 	.word	0x08080030
 8008898:	08080048 	.word	0x08080048
 800889c:	0808003c 	.word	0x0808003c
 80088a0:	08080054 	.word	0x08080054
 80088a4:	08080060 	.word	0x08080060
 80088a8:	0808006c 	.word	0x0808006c
 80088ac:	08080078 	.word	0x08080078
 80088b0:	08080090 	.word	0x08080090
 80088b4:	08080200 	.word	0x08080200
 80088b8:	08080220 	.word	0x08080220
 80088bc:	0802b32c 	.word	0x0802b32c
 80088c0:	080800b0 	.word	0x080800b0
 80088c4:	080800bc 	.word	0x080800bc
 80088c8:	080800c8 	.word	0x080800c8
 80088cc:	080800d4 	.word	0x080800d4
 80088d0:	080800e0 	.word	0x080800e0
 80088d4:	080800ec 	.word	0x080800ec
 80088d8:	080800f8 	.word	0x080800f8
 80088dc:	08080104 	.word	0x08080104
 80088e0:	08080170 	.word	0x08080170
 80088e4:	0808017c 	.word	0x0808017c
 80088e8:	08080260 	.word	0x08080260
 80088ec:	08080290 	.word	0x08080290
 80088f0:	080802c0 	.word	0x080802c0
 80088f4:	08080188 	.word	0x08080188
 80088f8:	080801a0 	.word	0x080801a0
 80088fc:	08080110 	.word	0x08080110
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8008900:	23c0      	movs	r3, #192	@ 0xc0
 8008902:	015b      	lsls	r3, r3, #5
 8008904:	4a06      	ldr	r2, [pc, #24]	@ (8008920 <ProcessCmd+0x434>)
 8008906:	0019      	movs	r1, r3
 8008908:	0010      	movs	r0, r2
 800890a:	f003 fc1c 	bl	800c146 <ClearEEprom>
            break;
 800890e:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 8008910:	46c0      	nop			@ (mov r8, r8)
 8008912:	46bd      	mov	sp, r7
 8008914:	b002      	add	sp, #8
 8008916:	bcb0      	pop	{r4, r5, r7}
 8008918:	bc08      	pop	{r3}
 800891a:	b004      	add	sp, #16
 800891c:	4718      	bx	r3
 800891e:	46c0      	nop			@ (mov r8, r8)
 8008920:	08080000 	.word	0x08080000

08008924 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6039      	str	r1, [r7, #0]
 800892c:	0011      	movs	r1, r2
 800892e:	1dfb      	adds	r3, r7, #7
 8008930:	1c02      	adds	r2, r0, #0
 8008932:	701a      	strb	r2, [r3, #0]
 8008934:	1dbb      	adds	r3, r7, #6
 8008936:	1c0a      	adds	r2, r1, #0
 8008938:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 800893a:	2223      	movs	r2, #35	@ 0x23
 800893c:	4b20      	ldr	r3, [pc, #128]	@ (80089c0 <Create_Message+0x9c>)
 800893e:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8008940:	4b1f      	ldr	r3, [pc, #124]	@ (80089c0 <Create_Message+0x9c>)
 8008942:	1dfa      	adds	r2, r7, #7
 8008944:	7812      	ldrb	r2, [r2, #0]
 8008946:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8008948:	4b1d      	ldr	r3, [pc, #116]	@ (80089c0 <Create_Message+0x9c>)
 800894a:	1dba      	adds	r2, r7, #6
 800894c:	7812      	ldrb	r2, [r2, #0]
 800894e:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8008950:	1dbb      	adds	r3, r7, #6
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	4b1b      	ldr	r3, [pc, #108]	@ (80089c4 <Create_Message+0xa0>)
 8008958:	0018      	movs	r0, r3
 800895a:	f01d feb3 	bl	80266c4 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800895e:	1dbb      	adds	r3, r7, #6
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	b29a      	uxth	r2, r3
 8008964:	250e      	movs	r5, #14
 8008966:	197b      	adds	r3, r7, r5
 8008968:	3203      	adds	r2, #3
 800896a:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 800896c:	260c      	movs	r6, #12
 800896e:	19bc      	adds	r4, r7, r6
 8008970:	197b      	adds	r3, r7, r5
 8008972:	881a      	ldrh	r2, [r3, #0]
 8008974:	4b12      	ldr	r3, [pc, #72]	@ (80089c0 <Create_Message+0x9c>)
 8008976:	0011      	movs	r1, r2
 8008978:	0018      	movs	r0, r3
 800897a:	f000 f825 	bl	80089c8 <CRC16_ARC>
 800897e:	0003      	movs	r3, r0
 8008980:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8008982:	0030      	movs	r0, r6
 8008984:	183b      	adds	r3, r7, r0
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	b29a      	uxth	r2, r3
 800898c:	197b      	adds	r3, r7, r5
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b2d1      	uxtb	r1, r2
 8008992:	4a0b      	ldr	r2, [pc, #44]	@ (80089c0 <Create_Message+0x9c>)
 8008994:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008996:	197b      	adds	r3, r7, r5
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	3301      	adds	r3, #1
 800899c:	183a      	adds	r2, r7, r0
 800899e:	8812      	ldrh	r2, [r2, #0]
 80089a0:	b2d1      	uxtb	r1, r2
 80089a2:	4a07      	ldr	r2, [pc, #28]	@ (80089c0 <Create_Message+0x9c>)
 80089a4:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80089a6:	197b      	adds	r3, r7, r5
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	3302      	adds	r3, #2
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	4b04      	ldr	r3, [pc, #16]	@ (80089c0 <Create_Message+0x9c>)
 80089b0:	0011      	movs	r1, r2
 80089b2:	0018      	movs	r0, r3
 80089b4:	f01a fb4a 	bl	802304c <CDC_Transmit_FS>
}
 80089b8:	46c0      	nop			@ (mov r8, r8)
 80089ba:	46bd      	mov	sp, r7
 80089bc:	b005      	add	sp, #20
 80089be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c0:	20000a4c 	.word	0x20000a4c
 80089c4:	20000a4f 	.word	0x20000a4f

080089c8 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	000a      	movs	r2, r1
 80089d2:	1cbb      	adds	r3, r7, #2
 80089d4:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80089d6:	2316      	movs	r3, #22
 80089d8:	18fb      	adds	r3, r7, r3
 80089da:	2200      	movs	r2, #0
 80089dc:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	e02e      	b.n	8008a42 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	18d3      	adds	r3, r2, r3
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	0019      	movs	r1, r3
 80089ee:	2216      	movs	r2, #22
 80089f0:	18bb      	adds	r3, r7, r2
 80089f2:	18ba      	adds	r2, r7, r2
 80089f4:	8812      	ldrh	r2, [r2, #0]
 80089f6:	404a      	eors	r2, r1
 80089f8:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e01a      	b.n	8008a36 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008a00:	2116      	movs	r1, #22
 8008a02:	187b      	adds	r3, r7, r1
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	2201      	movs	r2, #1
 8008a08:	4013      	ands	r3, r2
 8008a0a:	d00b      	beq.n	8008a24 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008a0c:	187b      	adds	r3, r7, r1
 8008a0e:	187a      	adds	r2, r7, r1
 8008a10:	8812      	ldrh	r2, [r2, #0]
 8008a12:	0852      	lsrs	r2, r2, #1
 8008a14:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008a16:	187b      	adds	r3, r7, r1
 8008a18:	187a      	adds	r2, r7, r1
 8008a1a:	8812      	ldrh	r2, [r2, #0]
 8008a1c:	490f      	ldr	r1, [pc, #60]	@ (8008a5c <CRC16_ARC+0x94>)
 8008a1e:	404a      	eors	r2, r1
 8008a20:	801a      	strh	r2, [r3, #0]
 8008a22:	e005      	b.n	8008a30 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008a24:	2216      	movs	r2, #22
 8008a26:	18bb      	adds	r3, r7, r2
 8008a28:	18ba      	adds	r2, r7, r2
 8008a2a:	8812      	ldrh	r2, [r2, #0]
 8008a2c:	0852      	lsrs	r2, r2, #1
 8008a2e:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b07      	cmp	r3, #7
 8008a3a:	dde1      	ble.n	8008a00 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	1cbb      	adds	r3, r7, #2
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	dbcb      	blt.n	80089e4 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008a4c:	2316      	movs	r3, #22
 8008a4e:	18fb      	adds	r3, r7, r3
 8008a50:	881b      	ldrh	r3, [r3, #0]
}
 8008a52:	0018      	movs	r0, r3
 8008a54:	46bd      	mov	sp, r7
 8008a56:	b006      	add	sp, #24
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	46c0      	nop			@ (mov r8, r8)
 8008a5c:	ffffa001 	.word	0xffffa001

08008a60 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008a60:	b40f      	push	{r0, r1, r2, r3}
 8008a62:	b590      	push	{r4, r7, lr}
 8008a64:	b0a9      	sub	sp, #164	@ 0xa4
 8008a66:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008a68:	23ac      	movs	r3, #172	@ 0xac
 8008a6a:	2108      	movs	r1, #8
 8008a6c:	185b      	adds	r3, r3, r1
 8008a6e:	19db      	adds	r3, r3, r7
 8008a70:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	22a8      	movs	r2, #168	@ 0xa8
 8008a76:	1852      	adds	r2, r2, r1
 8008a78:	19d2      	adds	r2, r2, r7
 8008a7a:	6812      	ldr	r2, [r2, #0]
 8008a7c:	2408      	movs	r4, #8
 8008a7e:	1938      	adds	r0, r7, r4
 8008a80:	2196      	movs	r1, #150	@ 0x96
 8008a82:	f01d fc97 	bl	80263b4 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f7f7 fb6f 	bl	800016c <strlen>
 8008a8e:	0003      	movs	r3, r0
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	193b      	adds	r3, r7, r4
 8008a94:	0011      	movs	r1, r2
 8008a96:	0018      	movs	r0, r3
 8008a98:	f01a fad8 	bl	802304c <CDC_Transmit_FS>
}
 8008a9c:	46c0      	nop			@ (mov r8, r8)
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b029      	add	sp, #164	@ 0xa4
 8008aa2:	bc90      	pop	{r4, r7}
 8008aa4:	bc08      	pop	{r3}
 8008aa6:	b004      	add	sp, #16
 8008aa8:	4718      	bx	r3

08008aaa <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	000a      	movs	r2, r1
 8008ab4:	1cfb      	adds	r3, r7, #3
 8008ab6:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008ab8:	1cfb      	adds	r3, r7, #3
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d006      	beq.n	8008ace <PC_selectout+0x24>
    printf_USB(msg);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f7ff ffcc 	bl	8008a60 <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008ac8:	200a      	movs	r0, #10
 8008aca:	f00b ff2f 	bl	801492c <HAL_Delay>
  }
//  else {
    printf(msg);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f01d fb63 	bl	802619c <iprintf>
//  }
}
 8008ad6:	46c0      	nop			@ (mov r8, r8)
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	b002      	add	sp, #8
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <PC_show_Keys>:

void PC_show_Keys() {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008ae4:	f001 f876 	bl	8009bd4 <Check_USB_PowerOn>
 8008ae8:	1e03      	subs	r3, r0, #0
 8008aea:	d005      	beq.n	8008af8 <PC_show_Keys+0x18>
    usb_out = true;
 8008aec:	4b01      	ldr	r3, [pc, #4]	@ (8008af4 <PC_show_Keys+0x14>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	701a      	strb	r2, [r3, #0]
 8008af2:	e004      	b.n	8008afe <PC_show_Keys+0x1e>
 8008af4:	20000b51 	.word	0x20000b51
  }
  else {
    usb_out = false;
 8008af8:	4bfd      	ldr	r3, [pc, #1012]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008afe:	4afd      	ldr	r2, [pc, #1012]	@ (8008ef4 <PC_show_Keys+0x414>)
 8008b00:	4bfd      	ldr	r3, [pc, #1012]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008b02:	0011      	movs	r1, r2
 8008b04:	0018      	movs	r0, r3
 8008b06:	f01d fbb9 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b0a:	4bf9      	ldr	r3, [pc, #996]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008b0c:	781a      	ldrb	r2, [r3, #0]
 8008b0e:	4bfa      	ldr	r3, [pc, #1000]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008b10:	0011      	movs	r1, r2
 8008b12:	0018      	movs	r0, r3
 8008b14:	f7ff ffc9 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008b18:	4bf8      	ldr	r3, [pc, #992]	@ (8008efc <PC_show_Keys+0x41c>)
 8008b1a:	48f9      	ldr	r0, [pc, #996]	@ (8008f00 <PC_show_Keys+0x420>)
 8008b1c:	220c      	movs	r2, #12
 8008b1e:	0019      	movs	r1, r3
 8008b20:	f003 fae8 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008b24:	4af5      	ldr	r2, [pc, #980]	@ (8008efc <PC_show_Keys+0x41c>)
 8008b26:	4bf7      	ldr	r3, [pc, #988]	@ (8008f04 <PC_show_Keys+0x424>)
 8008b28:	0011      	movs	r1, r2
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7fc fca0 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008b30:	4bf4      	ldr	r3, [pc, #976]	@ (8008f04 <PC_show_Keys+0x424>)
 8008b32:	49f5      	ldr	r1, [pc, #980]	@ (8008f08 <PC_show_Keys+0x428>)
 8008b34:	48f0      	ldr	r0, [pc, #960]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	f01d fba0 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b3c:	4bec      	ldr	r3, [pc, #944]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	4bed      	ldr	r3, [pc, #948]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008b42:	0011      	movs	r1, r2
 8008b44:	0018      	movs	r0, r3
 8008b46:	f7ff ffb0 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008b4a:	4bf0      	ldr	r3, [pc, #960]	@ (8008f0c <PC_show_Keys+0x42c>)
 8008b4c:	48f0      	ldr	r0, [pc, #960]	@ (8008f10 <PC_show_Keys+0x430>)
 8008b4e:	220c      	movs	r2, #12
 8008b50:	0019      	movs	r1, r3
 8008b52:	f003 facf 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008b56:	4aed      	ldr	r2, [pc, #948]	@ (8008f0c <PC_show_Keys+0x42c>)
 8008b58:	4bea      	ldr	r3, [pc, #936]	@ (8008f04 <PC_show_Keys+0x424>)
 8008b5a:	0011      	movs	r1, r2
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	f7fc fc87 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008b62:	4be8      	ldr	r3, [pc, #928]	@ (8008f04 <PC_show_Keys+0x424>)
 8008b64:	49eb      	ldr	r1, [pc, #940]	@ (8008f14 <PC_show_Keys+0x434>)
 8008b66:	48e4      	ldr	r0, [pc, #912]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f01d fb87 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b6e:	4be0      	ldr	r3, [pc, #896]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	4be1      	ldr	r3, [pc, #900]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008b74:	0011      	movs	r1, r2
 8008b76:	0018      	movs	r0, r3
 8008b78:	f7ff ff97 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008b7c:	4be6      	ldr	r3, [pc, #920]	@ (8008f18 <PC_show_Keys+0x438>)
 8008b7e:	48e7      	ldr	r0, [pc, #924]	@ (8008f1c <PC_show_Keys+0x43c>)
 8008b80:	220c      	movs	r2, #12
 8008b82:	0019      	movs	r1, r3
 8008b84:	f003 fab6 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008b88:	4ae3      	ldr	r2, [pc, #908]	@ (8008f18 <PC_show_Keys+0x438>)
 8008b8a:	4bde      	ldr	r3, [pc, #888]	@ (8008f04 <PC_show_Keys+0x424>)
 8008b8c:	0011      	movs	r1, r2
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f7fc fc6e 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008b94:	4bdb      	ldr	r3, [pc, #876]	@ (8008f04 <PC_show_Keys+0x424>)
 8008b96:	49e2      	ldr	r1, [pc, #904]	@ (8008f20 <PC_show_Keys+0x440>)
 8008b98:	48d7      	ldr	r0, [pc, #860]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f01d fb6e 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ba0:	4bd3      	ldr	r3, [pc, #844]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008ba2:	781a      	ldrb	r2, [r3, #0]
 8008ba4:	4bd4      	ldr	r3, [pc, #848]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008ba6:	0011      	movs	r1, r2
 8008ba8:	0018      	movs	r0, r3
 8008baa:	f7ff ff7e 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008bae:	4bdd      	ldr	r3, [pc, #884]	@ (8008f24 <PC_show_Keys+0x444>)
 8008bb0:	48dd      	ldr	r0, [pc, #884]	@ (8008f28 <PC_show_Keys+0x448>)
 8008bb2:	220c      	movs	r2, #12
 8008bb4:	0019      	movs	r1, r3
 8008bb6:	f003 fa9d 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008bba:	4ada      	ldr	r2, [pc, #872]	@ (8008f24 <PC_show_Keys+0x444>)
 8008bbc:	4bd1      	ldr	r3, [pc, #836]	@ (8008f04 <PC_show_Keys+0x424>)
 8008bbe:	0011      	movs	r1, r2
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7fc fc55 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008bc6:	4bcf      	ldr	r3, [pc, #828]	@ (8008f04 <PC_show_Keys+0x424>)
 8008bc8:	49d8      	ldr	r1, [pc, #864]	@ (8008f2c <PC_show_Keys+0x44c>)
 8008bca:	48cb      	ldr	r0, [pc, #812]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008bcc:	2203      	movs	r2, #3
 8008bce:	f01d fb55 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bd2:	4bc7      	ldr	r3, [pc, #796]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	4bc8      	ldr	r3, [pc, #800]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008bd8:	0011      	movs	r1, r2
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7ff ff65 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008be0:	4bd3      	ldr	r3, [pc, #844]	@ (8008f30 <PC_show_Keys+0x450>)
 8008be2:	48d4      	ldr	r0, [pc, #848]	@ (8008f34 <PC_show_Keys+0x454>)
 8008be4:	220c      	movs	r2, #12
 8008be6:	0019      	movs	r1, r3
 8008be8:	f003 fa84 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008bec:	4ad0      	ldr	r2, [pc, #832]	@ (8008f30 <PC_show_Keys+0x450>)
 8008bee:	4bc5      	ldr	r3, [pc, #788]	@ (8008f04 <PC_show_Keys+0x424>)
 8008bf0:	0011      	movs	r1, r2
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7fc fc3c 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008bf8:	4bc2      	ldr	r3, [pc, #776]	@ (8008f04 <PC_show_Keys+0x424>)
 8008bfa:	49cf      	ldr	r1, [pc, #828]	@ (8008f38 <PC_show_Keys+0x458>)
 8008bfc:	48be      	ldr	r0, [pc, #760]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008bfe:	2204      	movs	r2, #4
 8008c00:	f01d fb3c 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c04:	4bba      	ldr	r3, [pc, #744]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	4bbb      	ldr	r3, [pc, #748]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008c0a:	0011      	movs	r1, r2
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f7ff ff4c 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008c12:	4bca      	ldr	r3, [pc, #808]	@ (8008f3c <PC_show_Keys+0x45c>)
 8008c14:	48ca      	ldr	r0, [pc, #808]	@ (8008f40 <PC_show_Keys+0x460>)
 8008c16:	220c      	movs	r2, #12
 8008c18:	0019      	movs	r1, r3
 8008c1a:	f003 fa6b 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008c1e:	4ac7      	ldr	r2, [pc, #796]	@ (8008f3c <PC_show_Keys+0x45c>)
 8008c20:	4bb8      	ldr	r3, [pc, #736]	@ (8008f04 <PC_show_Keys+0x424>)
 8008c22:	0011      	movs	r1, r2
 8008c24:	0018      	movs	r0, r3
 8008c26:	f7fc fc23 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008c2a:	4bb6      	ldr	r3, [pc, #728]	@ (8008f04 <PC_show_Keys+0x424>)
 8008c2c:	49c5      	ldr	r1, [pc, #788]	@ (8008f44 <PC_show_Keys+0x464>)
 8008c2e:	48b2      	ldr	r0, [pc, #712]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008c30:	2205      	movs	r2, #5
 8008c32:	f01d fb23 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c36:	4bae      	ldr	r3, [pc, #696]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	4baf      	ldr	r3, [pc, #700]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008c3c:	0011      	movs	r1, r2
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f7ff ff33 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008c44:	4bc0      	ldr	r3, [pc, #768]	@ (8008f48 <PC_show_Keys+0x468>)
 8008c46:	48c1      	ldr	r0, [pc, #772]	@ (8008f4c <PC_show_Keys+0x46c>)
 8008c48:	220c      	movs	r2, #12
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	f003 fa52 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008c50:	4abd      	ldr	r2, [pc, #756]	@ (8008f48 <PC_show_Keys+0x468>)
 8008c52:	4bac      	ldr	r3, [pc, #688]	@ (8008f04 <PC_show_Keys+0x424>)
 8008c54:	0011      	movs	r1, r2
 8008c56:	0018      	movs	r0, r3
 8008c58:	f7fc fc0a 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008c5c:	4ba9      	ldr	r3, [pc, #676]	@ (8008f04 <PC_show_Keys+0x424>)
 8008c5e:	49bc      	ldr	r1, [pc, #752]	@ (8008f50 <PC_show_Keys+0x470>)
 8008c60:	48a5      	ldr	r0, [pc, #660]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008c62:	2206      	movs	r2, #6
 8008c64:	f01d fb0a 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c68:	4ba1      	ldr	r3, [pc, #644]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008c6a:	781a      	ldrb	r2, [r3, #0]
 8008c6c:	4ba2      	ldr	r3, [pc, #648]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008c6e:	0011      	movs	r1, r2
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff ff1a 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008c76:	4bb7      	ldr	r3, [pc, #732]	@ (8008f54 <PC_show_Keys+0x474>)
 8008c78:	48b7      	ldr	r0, [pc, #732]	@ (8008f58 <PC_show_Keys+0x478>)
 8008c7a:	220c      	movs	r2, #12
 8008c7c:	0019      	movs	r1, r3
 8008c7e:	f003 fa39 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008c82:	4ab4      	ldr	r2, [pc, #720]	@ (8008f54 <PC_show_Keys+0x474>)
 8008c84:	4b9f      	ldr	r3, [pc, #636]	@ (8008f04 <PC_show_Keys+0x424>)
 8008c86:	0011      	movs	r1, r2
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f7fc fbf1 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008c8e:	4b9d      	ldr	r3, [pc, #628]	@ (8008f04 <PC_show_Keys+0x424>)
 8008c90:	49b2      	ldr	r1, [pc, #712]	@ (8008f5c <PC_show_Keys+0x47c>)
 8008c92:	4899      	ldr	r0, [pc, #612]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008c94:	2207      	movs	r2, #7
 8008c96:	f01d faf1 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c9a:	4b95      	ldr	r3, [pc, #596]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008c9c:	781a      	ldrb	r2, [r3, #0]
 8008c9e:	4b96      	ldr	r3, [pc, #600]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008ca0:	0011      	movs	r1, r2
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	f7ff ff01 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008ca8:	4bad      	ldr	r3, [pc, #692]	@ (8008f60 <PC_show_Keys+0x480>)
 8008caa:	48ae      	ldr	r0, [pc, #696]	@ (8008f64 <PC_show_Keys+0x484>)
 8008cac:	220c      	movs	r2, #12
 8008cae:	0019      	movs	r1, r3
 8008cb0:	f003 fa20 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008cb4:	4aaa      	ldr	r2, [pc, #680]	@ (8008f60 <PC_show_Keys+0x480>)
 8008cb6:	4b93      	ldr	r3, [pc, #588]	@ (8008f04 <PC_show_Keys+0x424>)
 8008cb8:	0011      	movs	r1, r2
 8008cba:	0018      	movs	r0, r3
 8008cbc:	f7fc fbd8 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008cc0:	4b90      	ldr	r3, [pc, #576]	@ (8008f04 <PC_show_Keys+0x424>)
 8008cc2:	49a9      	ldr	r1, [pc, #676]	@ (8008f68 <PC_show_Keys+0x488>)
 8008cc4:	488c      	ldr	r0, [pc, #560]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	f01d fad8 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ccc:	4b88      	ldr	r3, [pc, #544]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	4b89      	ldr	r3, [pc, #548]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008cd2:	0011      	movs	r1, r2
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f7ff fee8 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008cda:	4ba4      	ldr	r3, [pc, #656]	@ (8008f6c <PC_show_Keys+0x48c>)
 8008cdc:	48a4      	ldr	r0, [pc, #656]	@ (8008f70 <PC_show_Keys+0x490>)
 8008cde:	220c      	movs	r2, #12
 8008ce0:	0019      	movs	r1, r3
 8008ce2:	f003 fa07 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008ce6:	4aa1      	ldr	r2, [pc, #644]	@ (8008f6c <PC_show_Keys+0x48c>)
 8008ce8:	4b86      	ldr	r3, [pc, #536]	@ (8008f04 <PC_show_Keys+0x424>)
 8008cea:	0011      	movs	r1, r2
 8008cec:	0018      	movs	r0, r3
 8008cee:	f7fc fbbf 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008cf2:	4b84      	ldr	r3, [pc, #528]	@ (8008f04 <PC_show_Keys+0x424>)
 8008cf4:	499f      	ldr	r1, [pc, #636]	@ (8008f74 <PC_show_Keys+0x494>)
 8008cf6:	4880      	ldr	r0, [pc, #512]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008cf8:	2209      	movs	r2, #9
 8008cfa:	f01d fabf 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008d00:	781a      	ldrb	r2, [r3, #0]
 8008d02:	4b7d      	ldr	r3, [pc, #500]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d04:	0011      	movs	r1, r2
 8008d06:	0018      	movs	r0, r3
 8008d08:	f7ff fecf 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008d0c:	4b9a      	ldr	r3, [pc, #616]	@ (8008f78 <PC_show_Keys+0x498>)
 8008d0e:	489b      	ldr	r0, [pc, #620]	@ (8008f7c <PC_show_Keys+0x49c>)
 8008d10:	220c      	movs	r2, #12
 8008d12:	0019      	movs	r1, r3
 8008d14:	f003 f9ee 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008d18:	4a97      	ldr	r2, [pc, #604]	@ (8008f78 <PC_show_Keys+0x498>)
 8008d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8008f04 <PC_show_Keys+0x424>)
 8008d1c:	0011      	movs	r1, r2
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f7fc fba6 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008d24:	4b77      	ldr	r3, [pc, #476]	@ (8008f04 <PC_show_Keys+0x424>)
 8008d26:	4996      	ldr	r1, [pc, #600]	@ (8008f80 <PC_show_Keys+0x4a0>)
 8008d28:	4873      	ldr	r0, [pc, #460]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d2a:	220a      	movs	r2, #10
 8008d2c:	f01d faa6 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d30:	4b6f      	ldr	r3, [pc, #444]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008d32:	781a      	ldrb	r2, [r3, #0]
 8008d34:	4b70      	ldr	r3, [pc, #448]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d36:	0011      	movs	r1, r2
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f7ff feb6 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008d3e:	4b91      	ldr	r3, [pc, #580]	@ (8008f84 <PC_show_Keys+0x4a4>)
 8008d40:	4891      	ldr	r0, [pc, #580]	@ (8008f88 <PC_show_Keys+0x4a8>)
 8008d42:	220c      	movs	r2, #12
 8008d44:	0019      	movs	r1, r3
 8008d46:	f003 f9d5 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008d4a:	4a8e      	ldr	r2, [pc, #568]	@ (8008f84 <PC_show_Keys+0x4a4>)
 8008d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8008f04 <PC_show_Keys+0x424>)
 8008d4e:	0011      	movs	r1, r2
 8008d50:	0018      	movs	r0, r3
 8008d52:	f7fc fb8d 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status (not used) -----: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008d56:	4b6b      	ldr	r3, [pc, #428]	@ (8008f04 <PC_show_Keys+0x424>)
 8008d58:	498c      	ldr	r1, [pc, #560]	@ (8008f8c <PC_show_Keys+0x4ac>)
 8008d5a:	4867      	ldr	r0, [pc, #412]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d5c:	220b      	movs	r2, #11
 8008d5e:	f01d fa8d 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d62:	4b63      	ldr	r3, [pc, #396]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	4b64      	ldr	r3, [pc, #400]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d68:	0011      	movs	r1, r2
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7ff fe9d 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008d70:	4b87      	ldr	r3, [pc, #540]	@ (8008f90 <PC_show_Keys+0x4b0>)
 8008d72:	4888      	ldr	r0, [pc, #544]	@ (8008f94 <PC_show_Keys+0x4b4>)
 8008d74:	2220      	movs	r2, #32
 8008d76:	0019      	movs	r1, r3
 8008d78:	f003 f9bc 	bl	800c0f4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ---max 12 char--------: ", CustomNameConfigCmd);
 8008d7c:	4986      	ldr	r1, [pc, #536]	@ (8008f98 <PC_show_Keys+0x4b8>)
 8008d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d80:	220c      	movs	r2, #12
 8008d82:	0018      	movs	r0, r3
 8008d84:	f01d fa7a 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d88:	4b59      	ldr	r3, [pc, #356]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008d8a:	781a      	ldrb	r2, [r3, #0]
 8008d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d8e:	0011      	movs	r1, r2
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7ff fe8a 	bl	8008aaa <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008d96:	4a7e      	ldr	r2, [pc, #504]	@ (8008f90 <PC_show_Keys+0x4b0>)
 8008d98:	4980      	ldr	r1, [pc, #512]	@ (8008f9c <PC_show_Keys+0x4bc>)
 8008d9a:	4b57      	ldr	r3, [pc, #348]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f01d fa6d 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008da2:	4b53      	ldr	r3, [pc, #332]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008da4:	781a      	ldrb	r2, [r3, #0]
 8008da6:	4b54      	ldr	r3, [pc, #336]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008da8:	0011      	movs	r1, r2
 8008daa:	0018      	movs	r0, r3
 8008dac:	f7ff fe7d 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008db0:	4b7b      	ldr	r3, [pc, #492]	@ (8008fa0 <PC_show_Keys+0x4c0>)
 8008db2:	487c      	ldr	r0, [pc, #496]	@ (8008fa4 <PC_show_Keys+0x4c4>)
 8008db4:	2220      	movs	r2, #32
 8008db6:	0019      	movs	r1, r3
 8008db8:	f003 f99c 	bl	800c0f4 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, SSIDConfig);
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008dbc:	497a      	ldr	r1, [pc, #488]	@ (8008fa8 <PC_show_Keys+0x4c8>)
 8008dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008dc0:	220d      	movs	r2, #13
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f01d fa5a 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dc8:	4b49      	ldr	r3, [pc, #292]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008dca:	781a      	ldrb	r2, [r3, #0]
 8008dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008dce:	0011      	movs	r1, r2
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f7ff fe6a 	bl	8008aaa <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008dd6:	4a72      	ldr	r2, [pc, #456]	@ (8008fa0 <PC_show_Keys+0x4c0>)
 8008dd8:	4970      	ldr	r1, [pc, #448]	@ (8008f9c <PC_show_Keys+0x4bc>)
 8008dda:	4b47      	ldr	r3, [pc, #284]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f01d fa4d 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008de2:	4b43      	ldr	r3, [pc, #268]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	4b44      	ldr	r3, [pc, #272]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008de8:	0011      	movs	r1, r2
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7ff fe5d 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008df0:	4b6e      	ldr	r3, [pc, #440]	@ (8008fac <PC_show_Keys+0x4cc>)
 8008df2:	486f      	ldr	r0, [pc, #444]	@ (8008fb0 <PC_show_Keys+0x4d0>)
 8008df4:	2240      	movs	r2, #64	@ 0x40
 8008df6:	0019      	movs	r1, r3
 8008df8:	f003 f97c 	bl	800c0f4 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, pwdConfig);
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008dfc:	496d      	ldr	r1, [pc, #436]	@ (8008fb4 <PC_show_Keys+0x4d4>)
 8008dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e00:	220e      	movs	r2, #14
 8008e02:	0018      	movs	r0, r3
 8008e04:	f01d fa3a 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e08:	4b39      	ldr	r3, [pc, #228]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008e0a:	781a      	ldrb	r2, [r3, #0]
 8008e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e0e:	0011      	movs	r1, r2
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7ff fe4a 	bl	8008aaa <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008e16:	4a65      	ldr	r2, [pc, #404]	@ (8008fac <PC_show_Keys+0x4cc>)
 8008e18:	4960      	ldr	r1, [pc, #384]	@ (8008f9c <PC_show_Keys+0x4bc>)
 8008e1a:	4b37      	ldr	r3, [pc, #220]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	f01d fa2d 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e22:	4b33      	ldr	r3, [pc, #204]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008e24:	781a      	ldrb	r2, [r3, #0]
 8008e26:	4b34      	ldr	r3, [pc, #208]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e28:	0011      	movs	r1, r2
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7ff fe3d 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008e30:	4b61      	ldr	r3, [pc, #388]	@ (8008fb8 <PC_show_Keys+0x4d8>)
 8008e32:	4862      	ldr	r0, [pc, #392]	@ (8008fbc <PC_show_Keys+0x4dc>)
 8008e34:	220c      	movs	r2, #12
 8008e36:	0019      	movs	r1, r3
 8008e38:	f003 f95c 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8008fb8 <PC_show_Keys+0x4d8>)
 8008e3e:	4b31      	ldr	r3, [pc, #196]	@ (8008f04 <PC_show_Keys+0x424>)
 8008e40:	0011      	movs	r1, r2
 8008e42:	0018      	movs	r0, r3
 8008e44:	f7fc fb14 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008e48:	4b2e      	ldr	r3, [pc, #184]	@ (8008f04 <PC_show_Keys+0x424>)
 8008e4a:	495d      	ldr	r1, [pc, #372]	@ (8008fc0 <PC_show_Keys+0x4e0>)
 8008e4c:	482a      	ldr	r0, [pc, #168]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e4e:	220f      	movs	r2, #15
 8008e50:	f01d fa14 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e54:	4b26      	ldr	r3, [pc, #152]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	4b27      	ldr	r3, [pc, #156]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e5a:	0011      	movs	r1, r2
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7ff fe24 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008e62:	4b58      	ldr	r3, [pc, #352]	@ (8008fc4 <PC_show_Keys+0x4e4>)
 8008e64:	4858      	ldr	r0, [pc, #352]	@ (8008fc8 <PC_show_Keys+0x4e8>)
 8008e66:	220c      	movs	r2, #12
 8008e68:	0019      	movs	r1, r3
 8008e6a:	f003 f943 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008e6e:	4a55      	ldr	r2, [pc, #340]	@ (8008fc4 <PC_show_Keys+0x4e4>)
 8008e70:	4b24      	ldr	r3, [pc, #144]	@ (8008f04 <PC_show_Keys+0x424>)
 8008e72:	0011      	movs	r1, r2
 8008e74:	0018      	movs	r0, r3
 8008e76:	f7fc fafb 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008e7a:	4b22      	ldr	r3, [pc, #136]	@ (8008f04 <PC_show_Keys+0x424>)
 8008e7c:	4953      	ldr	r1, [pc, #332]	@ (8008fcc <PC_show_Keys+0x4ec>)
 8008e7e:	481e      	ldr	r0, [pc, #120]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e80:	2210      	movs	r2, #16
 8008e82:	f01d f9fb 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e86:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008e8c:	0011      	movs	r1, r2
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7ff fe0b 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008e94:	4b4e      	ldr	r3, [pc, #312]	@ (8008fd0 <PC_show_Keys+0x4f0>)
 8008e96:	484f      	ldr	r0, [pc, #316]	@ (8008fd4 <PC_show_Keys+0x4f4>)
 8008e98:	220c      	movs	r2, #12
 8008e9a:	0019      	movs	r1, r3
 8008e9c:	f003 f92a 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8008fd0 <PC_show_Keys+0x4f0>)
 8008ea2:	4b18      	ldr	r3, [pc, #96]	@ (8008f04 <PC_show_Keys+0x424>)
 8008ea4:	0011      	movs	r1, r2
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7fc fae2 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008eac:	4b15      	ldr	r3, [pc, #84]	@ (8008f04 <PC_show_Keys+0x424>)
 8008eae:	494a      	ldr	r1, [pc, #296]	@ (8008fd8 <PC_show_Keys+0x4f8>)
 8008eb0:	4811      	ldr	r0, [pc, #68]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008eb2:	2211      	movs	r2, #17
 8008eb4:	f01d f9e2 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008ebe:	0011      	movs	r1, r2
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f7ff fdf2 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008ec6:	4b45      	ldr	r3, [pc, #276]	@ (8008fdc <PC_show_Keys+0x4fc>)
 8008ec8:	4845      	ldr	r0, [pc, #276]	@ (8008fe0 <PC_show_Keys+0x500>)
 8008eca:	220c      	movs	r2, #12
 8008ecc:	0019      	movs	r1, r3
 8008ece:	f003 f911 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008ed2:	4a42      	ldr	r2, [pc, #264]	@ (8008fdc <PC_show_Keys+0x4fc>)
 8008ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f04 <PC_show_Keys+0x424>)
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f7fc fac9 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008ede:	4b09      	ldr	r3, [pc, #36]	@ (8008f04 <PC_show_Keys+0x424>)
 8008ee0:	4940      	ldr	r1, [pc, #256]	@ (8008fe4 <PC_show_Keys+0x504>)
 8008ee2:	4805      	ldr	r0, [pc, #20]	@ (8008ef8 <PC_show_Keys+0x418>)
 8008ee4:	2212      	movs	r2, #18
 8008ee6:	f01d f9c9 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eea:	4b01      	ldr	r3, [pc, #4]	@ (8008ef0 <PC_show_Keys+0x410>)
 8008eec:	781a      	ldrb	r2, [r3, #0]
 8008eee:	e07b      	b.n	8008fe8 <PC_show_Keys+0x508>
 8008ef0:	20000b51 	.word	0x20000b51
 8008ef4:	0802b360 	.word	0x0802b360
 8008ef8:	20000b54 	.word	0x20000b54
 8008efc:	20000b9c 	.word	0x20000b9c
 8008f00:	08080000 	.word	0x08080000
 8008f04:	20000ba8 	.word	0x20000ba8
 8008f08:	0802b380 	.word	0x0802b380
 8008f0c:	20000bc4 	.word	0x20000bc4
 8008f10:	0808000c 	.word	0x0808000c
 8008f14:	0802b3b0 	.word	0x0802b3b0
 8008f18:	20000bd0 	.word	0x20000bd0
 8008f1c:	08080018 	.word	0x08080018
 8008f20:	0802b3e0 	.word	0x0802b3e0
 8008f24:	20000bdc 	.word	0x20000bdc
 8008f28:	08080024 	.word	0x08080024
 8008f2c:	0802b410 	.word	0x0802b410
 8008f30:	20000be8 	.word	0x20000be8
 8008f34:	08080030 	.word	0x08080030
 8008f38:	0802b440 	.word	0x0802b440
 8008f3c:	20000bf4 	.word	0x20000bf4
 8008f40:	08080048 	.word	0x08080048
 8008f44:	0802b470 	.word	0x0802b470
 8008f48:	20000c00 	.word	0x20000c00
 8008f4c:	0808003c 	.word	0x0808003c
 8008f50:	0802b4a0 	.word	0x0802b4a0
 8008f54:	20000c0c 	.word	0x20000c0c
 8008f58:	08080054 	.word	0x08080054
 8008f5c:	0802b4d0 	.word	0x0802b4d0
 8008f60:	20000c18 	.word	0x20000c18
 8008f64:	08080060 	.word	0x08080060
 8008f68:	0802b500 	.word	0x0802b500
 8008f6c:	20000c24 	.word	0x20000c24
 8008f70:	0808006c 	.word	0x0808006c
 8008f74:	0802b530 	.word	0x0802b530
 8008f78:	20000c30 	.word	0x20000c30
 8008f7c:	08080078 	.word	0x08080078
 8008f80:	0802b560 	.word	0x0802b560
 8008f84:	20000c3c 	.word	0x20000c3c
 8008f88:	08080084 	.word	0x08080084
 8008f8c:	0802b590 	.word	0x0802b590
 8008f90:	20000c48 	.word	0x20000c48
 8008f94:	08080090 	.word	0x08080090
 8008f98:	0802b5c0 	.word	0x0802b5c0
 8008f9c:	0802b5ec 	.word	0x0802b5ec
 8008fa0:	20000c68 	.word	0x20000c68
 8008fa4:	08080200 	.word	0x08080200
 8008fa8:	0802b5f4 	.word	0x0802b5f4
 8008fac:	20000c88 	.word	0x20000c88
 8008fb0:	08080220 	.word	0x08080220
 8008fb4:	0802b620 	.word	0x0802b620
 8008fb8:	20000cc8 	.word	0x20000cc8
 8008fbc:	080800c8 	.word	0x080800c8
 8008fc0:	0802b64c 	.word	0x0802b64c
 8008fc4:	20000cd4 	.word	0x20000cd4
 8008fc8:	080800d4 	.word	0x080800d4
 8008fcc:	0802b67c 	.word	0x0802b67c
 8008fd0:	20000ce0 	.word	0x20000ce0
 8008fd4:	080800e0 	.word	0x080800e0
 8008fd8:	0802b6ac 	.word	0x0802b6ac
 8008fdc:	20000cec 	.word	0x20000cec
 8008fe0:	080800ec 	.word	0x080800ec
 8008fe4:	0802b6dc 	.word	0x0802b6dc
 8008fe8:	4be2      	ldr	r3, [pc, #904]	@ (8009374 <PC_show_Keys+0x894>)
 8008fea:	0011      	movs	r1, r2
 8008fec:	0018      	movs	r0, r3
 8008fee:	f7ff fd5c 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008ff2:	4be1      	ldr	r3, [pc, #900]	@ (8009378 <PC_show_Keys+0x898>)
 8008ff4:	48e1      	ldr	r0, [pc, #900]	@ (800937c <PC_show_Keys+0x89c>)
 8008ff6:	220c      	movs	r2, #12
 8008ff8:	0019      	movs	r1, r3
 8008ffa:	f003 f87b 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008ffe:	4ade      	ldr	r2, [pc, #888]	@ (8009378 <PC_show_Keys+0x898>)
 8009000:	4bdf      	ldr	r3, [pc, #892]	@ (8009380 <PC_show_Keys+0x8a0>)
 8009002:	0011      	movs	r1, r2
 8009004:	0018      	movs	r0, r3
 8009006:	f7fc fa33 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 800900a:	4bdd      	ldr	r3, [pc, #884]	@ (8009380 <PC_show_Keys+0x8a0>)
 800900c:	49dd      	ldr	r1, [pc, #884]	@ (8009384 <PC_show_Keys+0x8a4>)
 800900e:	48d9      	ldr	r0, [pc, #868]	@ (8009374 <PC_show_Keys+0x894>)
 8009010:	2213      	movs	r2, #19
 8009012:	f01d f933 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009016:	4bdc      	ldr	r3, [pc, #880]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	4bd6      	ldr	r3, [pc, #856]	@ (8009374 <PC_show_Keys+0x894>)
 800901c:	0011      	movs	r1, r2
 800901e:	0018      	movs	r0, r3
 8009020:	f7ff fd43 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8009024:	4bd9      	ldr	r3, [pc, #868]	@ (800938c <PC_show_Keys+0x8ac>)
 8009026:	48da      	ldr	r0, [pc, #872]	@ (8009390 <PC_show_Keys+0x8b0>)
 8009028:	220c      	movs	r2, #12
 800902a:	0019      	movs	r1, r3
 800902c:	f003 f862 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8009030:	4ad6      	ldr	r2, [pc, #856]	@ (800938c <PC_show_Keys+0x8ac>)
 8009032:	4bd3      	ldr	r3, [pc, #844]	@ (8009380 <PC_show_Keys+0x8a0>)
 8009034:	0011      	movs	r1, r2
 8009036:	0018      	movs	r0, r3
 8009038:	f7fc fa1a 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 800903c:	4bd0      	ldr	r3, [pc, #832]	@ (8009380 <PC_show_Keys+0x8a0>)
 800903e:	49d5      	ldr	r1, [pc, #852]	@ (8009394 <PC_show_Keys+0x8b4>)
 8009040:	48cc      	ldr	r0, [pc, #816]	@ (8009374 <PC_show_Keys+0x894>)
 8009042:	2214      	movs	r2, #20
 8009044:	f01d f91a 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009048:	4bcf      	ldr	r3, [pc, #828]	@ (8009388 <PC_show_Keys+0x8a8>)
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	4bc9      	ldr	r3, [pc, #804]	@ (8009374 <PC_show_Keys+0x894>)
 800904e:	0011      	movs	r1, r2
 8009050:	0018      	movs	r0, r3
 8009052:	f7ff fd2a 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8009056:	4bd0      	ldr	r3, [pc, #832]	@ (8009398 <PC_show_Keys+0x8b8>)
 8009058:	48d0      	ldr	r0, [pc, #832]	@ (800939c <PC_show_Keys+0x8bc>)
 800905a:	220c      	movs	r2, #12
 800905c:	0019      	movs	r1, r3
 800905e:	f003 f849 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8009062:	4acd      	ldr	r2, [pc, #820]	@ (8009398 <PC_show_Keys+0x8b8>)
 8009064:	4bc6      	ldr	r3, [pc, #792]	@ (8009380 <PC_show_Keys+0x8a0>)
 8009066:	0011      	movs	r1, r2
 8009068:	0018      	movs	r0, r3
 800906a:	f7fc fa01 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 800906e:	4bc4      	ldr	r3, [pc, #784]	@ (8009380 <PC_show_Keys+0x8a0>)
 8009070:	49cb      	ldr	r1, [pc, #812]	@ (80093a0 <PC_show_Keys+0x8c0>)
 8009072:	48c0      	ldr	r0, [pc, #768]	@ (8009374 <PC_show_Keys+0x894>)
 8009074:	2215      	movs	r2, #21
 8009076:	f01d f901 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800907a:	4bc3      	ldr	r3, [pc, #780]	@ (8009388 <PC_show_Keys+0x8a8>)
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	4bbd      	ldr	r3, [pc, #756]	@ (8009374 <PC_show_Keys+0x894>)
 8009080:	0011      	movs	r1, r2
 8009082:	0018      	movs	r0, r3
 8009084:	f7ff fd11 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 8009088:	4bc6      	ldr	r3, [pc, #792]	@ (80093a4 <PC_show_Keys+0x8c4>)
 800908a:	48c7      	ldr	r0, [pc, #796]	@ (80093a8 <PC_show_Keys+0x8c8>)
 800908c:	220c      	movs	r2, #12
 800908e:	0019      	movs	r1, r3
 8009090:	f003 f830 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 8009094:	4ac3      	ldr	r2, [pc, #780]	@ (80093a4 <PC_show_Keys+0x8c4>)
 8009096:	4bba      	ldr	r3, [pc, #744]	@ (8009380 <PC_show_Keys+0x8a0>)
 8009098:	0011      	movs	r1, r2
 800909a:	0018      	movs	r0, r3
 800909c:	f7fc f9e8 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 80090a0:	4bb7      	ldr	r3, [pc, #732]	@ (8009380 <PC_show_Keys+0x8a0>)
 80090a2:	49c2      	ldr	r1, [pc, #776]	@ (80093ac <PC_show_Keys+0x8cc>)
 80090a4:	48b3      	ldr	r0, [pc, #716]	@ (8009374 <PC_show_Keys+0x894>)
 80090a6:	2216      	movs	r2, #22
 80090a8:	f01d f8e8 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090ac:	4bb6      	ldr	r3, [pc, #728]	@ (8009388 <PC_show_Keys+0x8a8>)
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	4bb0      	ldr	r3, [pc, #704]	@ (8009374 <PC_show_Keys+0x894>)
 80090b2:	0011      	movs	r1, r2
 80090b4:	0018      	movs	r0, r3
 80090b6:	f7ff fcf8 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 80090ba:	4bbd      	ldr	r3, [pc, #756]	@ (80093b0 <PC_show_Keys+0x8d0>)
 80090bc:	48bd      	ldr	r0, [pc, #756]	@ (80093b4 <PC_show_Keys+0x8d4>)
 80090be:	220c      	movs	r2, #12
 80090c0:	0019      	movs	r1, r3
 80090c2:	f003 f817 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 80090c6:	4aba      	ldr	r2, [pc, #744]	@ (80093b0 <PC_show_Keys+0x8d0>)
 80090c8:	4bad      	ldr	r3, [pc, #692]	@ (8009380 <PC_show_Keys+0x8a0>)
 80090ca:	0011      	movs	r1, r2
 80090cc:	0018      	movs	r0, r3
 80090ce:	f7fc f9cf 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 80090d2:	4bab      	ldr	r3, [pc, #684]	@ (8009380 <PC_show_Keys+0x8a0>)
 80090d4:	49b8      	ldr	r1, [pc, #736]	@ (80093b8 <PC_show_Keys+0x8d8>)
 80090d6:	48a7      	ldr	r0, [pc, #668]	@ (8009374 <PC_show_Keys+0x894>)
 80090d8:	2217      	movs	r2, #23
 80090da:	f01d f8cf 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090de:	4baa      	ldr	r3, [pc, #680]	@ (8009388 <PC_show_Keys+0x8a8>)
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	4ba4      	ldr	r3, [pc, #656]	@ (8009374 <PC_show_Keys+0x894>)
 80090e4:	0011      	movs	r1, r2
 80090e6:	0018      	movs	r0, r3
 80090e8:	f7ff fcdf 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 80090ec:	4bb3      	ldr	r3, [pc, #716]	@ (80093bc <PC_show_Keys+0x8dc>)
 80090ee:	48b4      	ldr	r0, [pc, #720]	@ (80093c0 <PC_show_Keys+0x8e0>)
 80090f0:	220c      	movs	r2, #12
 80090f2:	0019      	movs	r1, r3
 80090f4:	f002 fffe 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 80090f8:	4ab0      	ldr	r2, [pc, #704]	@ (80093bc <PC_show_Keys+0x8dc>)
 80090fa:	4ba1      	ldr	r3, [pc, #644]	@ (8009380 <PC_show_Keys+0x8a0>)
 80090fc:	0011      	movs	r1, r2
 80090fe:	0018      	movs	r0, r3
 8009100:	f7fc f9b6 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 8009104:	4b9e      	ldr	r3, [pc, #632]	@ (8009380 <PC_show_Keys+0x8a0>)
 8009106:	49af      	ldr	r1, [pc, #700]	@ (80093c4 <PC_show_Keys+0x8e4>)
 8009108:	489a      	ldr	r0, [pc, #616]	@ (8009374 <PC_show_Keys+0x894>)
 800910a:	2218      	movs	r2, #24
 800910c:	f01d f8b6 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009110:	4b9d      	ldr	r3, [pc, #628]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	4b97      	ldr	r3, [pc, #604]	@ (8009374 <PC_show_Keys+0x894>)
 8009116:	0011      	movs	r1, r2
 8009118:	0018      	movs	r0, r3
 800911a:	f7ff fcc6 	bl	8008aaa <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 800911e:	4baa      	ldr	r3, [pc, #680]	@ (80093c8 <PC_show_Keys+0x8e8>)
 8009120:	48aa      	ldr	r0, [pc, #680]	@ (80093cc <PC_show_Keys+0x8ec>)
 8009122:	2230      	movs	r2, #48	@ 0x30
 8009124:	0019      	movs	r1, r3
 8009126:	f002 ffe5 	bl	800c0f4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 800912a:	49a9      	ldr	r1, [pc, #676]	@ (80093d0 <PC_show_Keys+0x8f0>)
 800912c:	4b91      	ldr	r3, [pc, #580]	@ (8009374 <PC_show_Keys+0x894>)
 800912e:	2219      	movs	r2, #25
 8009130:	0018      	movs	r0, r3
 8009132:	f01d f8a3 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009136:	4b94      	ldr	r3, [pc, #592]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	4b8e      	ldr	r3, [pc, #568]	@ (8009374 <PC_show_Keys+0x894>)
 800913c:	0011      	movs	r1, r2
 800913e:	0018      	movs	r0, r3
 8009140:	f7ff fcb3 	bl	8008aaa <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 8009144:	4aa0      	ldr	r2, [pc, #640]	@ (80093c8 <PC_show_Keys+0x8e8>)
 8009146:	49a3      	ldr	r1, [pc, #652]	@ (80093d4 <PC_show_Keys+0x8f4>)
 8009148:	4b8a      	ldr	r3, [pc, #552]	@ (8009374 <PC_show_Keys+0x894>)
 800914a:	0018      	movs	r0, r3
 800914c:	f01d f896 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009150:	4b8d      	ldr	r3, [pc, #564]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009152:	781a      	ldrb	r2, [r3, #0]
 8009154:	4b87      	ldr	r3, [pc, #540]	@ (8009374 <PC_show_Keys+0x894>)
 8009156:	0011      	movs	r1, r2
 8009158:	0018      	movs	r0, r3
 800915a:	f7ff fca6 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 800915e:	4b9e      	ldr	r3, [pc, #632]	@ (80093d8 <PC_show_Keys+0x8f8>)
 8009160:	489e      	ldr	r0, [pc, #632]	@ (80093dc <PC_show_Keys+0x8fc>)
 8009162:	2230      	movs	r2, #48	@ 0x30
 8009164:	0019      	movs	r1, r3
 8009166:	f002 ffc5 	bl	800c0f4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 800916a:	499d      	ldr	r1, [pc, #628]	@ (80093e0 <PC_show_Keys+0x900>)
 800916c:	4b81      	ldr	r3, [pc, #516]	@ (8009374 <PC_show_Keys+0x894>)
 800916e:	221a      	movs	r2, #26
 8009170:	0018      	movs	r0, r3
 8009172:	f01d f883 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009176:	4b84      	ldr	r3, [pc, #528]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009178:	781a      	ldrb	r2, [r3, #0]
 800917a:	4b7e      	ldr	r3, [pc, #504]	@ (8009374 <PC_show_Keys+0x894>)
 800917c:	0011      	movs	r1, r2
 800917e:	0018      	movs	r0, r3
 8009180:	f7ff fc93 	bl	8008aaa <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 8009184:	4a94      	ldr	r2, [pc, #592]	@ (80093d8 <PC_show_Keys+0x8f8>)
 8009186:	4993      	ldr	r1, [pc, #588]	@ (80093d4 <PC_show_Keys+0x8f4>)
 8009188:	4b7a      	ldr	r3, [pc, #488]	@ (8009374 <PC_show_Keys+0x894>)
 800918a:	0018      	movs	r0, r3
 800918c:	f01d f876 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009190:	4b7d      	ldr	r3, [pc, #500]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	4b77      	ldr	r3, [pc, #476]	@ (8009374 <PC_show_Keys+0x894>)
 8009196:	0011      	movs	r1, r2
 8009198:	0018      	movs	r0, r3
 800919a:	f7ff fc86 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 800919e:	4b91      	ldr	r3, [pc, #580]	@ (80093e4 <PC_show_Keys+0x904>)
 80091a0:	4891      	ldr	r0, [pc, #580]	@ (80093e8 <PC_show_Keys+0x908>)
 80091a2:	2230      	movs	r2, #48	@ 0x30
 80091a4:	0019      	movs	r1, r3
 80091a6:	f002 ffa5 	bl	800c0f4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 80091aa:	4990      	ldr	r1, [pc, #576]	@ (80093ec <PC_show_Keys+0x90c>)
 80091ac:	4b71      	ldr	r3, [pc, #452]	@ (8009374 <PC_show_Keys+0x894>)
 80091ae:	221b      	movs	r2, #27
 80091b0:	0018      	movs	r0, r3
 80091b2:	f01d f863 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091b6:	4b74      	ldr	r3, [pc, #464]	@ (8009388 <PC_show_Keys+0x8a8>)
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	4b6e      	ldr	r3, [pc, #440]	@ (8009374 <PC_show_Keys+0x894>)
 80091bc:	0011      	movs	r1, r2
 80091be:	0018      	movs	r0, r3
 80091c0:	f7ff fc73 	bl	8008aaa <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 80091c4:	4a87      	ldr	r2, [pc, #540]	@ (80093e4 <PC_show_Keys+0x904>)
 80091c6:	4983      	ldr	r1, [pc, #524]	@ (80093d4 <PC_show_Keys+0x8f4>)
 80091c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009374 <PC_show_Keys+0x894>)
 80091ca:	0018      	movs	r0, r3
 80091cc:	f01d f856 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091d0:	4b6d      	ldr	r3, [pc, #436]	@ (8009388 <PC_show_Keys+0x8a8>)
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	4b67      	ldr	r3, [pc, #412]	@ (8009374 <PC_show_Keys+0x894>)
 80091d6:	0011      	movs	r1, r2
 80091d8:	0018      	movs	r0, r3
 80091da:	f7ff fc66 	bl	8008aaa <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80091de:	4b84      	ldr	r3, [pc, #528]	@ (80093f0 <PC_show_Keys+0x910>)
 80091e0:	4884      	ldr	r0, [pc, #528]	@ (80093f4 <PC_show_Keys+0x914>)
 80091e2:	220c      	movs	r2, #12
 80091e4:	0019      	movs	r1, r3
 80091e6:	f002 ff85 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80091ea:	4a81      	ldr	r2, [pc, #516]	@ (80093f0 <PC_show_Keys+0x910>)
 80091ec:	4b64      	ldr	r3, [pc, #400]	@ (8009380 <PC_show_Keys+0x8a0>)
 80091ee:	0011      	movs	r1, r2
 80091f0:	0018      	movs	r0, r3
 80091f2:	f7fc f93d 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Air pressure sensor id --------: %s\r\n", hPaConfigCmd, Buffer);
 80091f6:	4b62      	ldr	r3, [pc, #392]	@ (8009380 <PC_show_Keys+0x8a0>)
 80091f8:	497f      	ldr	r1, [pc, #508]	@ (80093f8 <PC_show_Keys+0x918>)
 80091fa:	485e      	ldr	r0, [pc, #376]	@ (8009374 <PC_show_Keys+0x894>)
 80091fc:	221c      	movs	r2, #28
 80091fe:	f01d f83d 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009202:	4b61      	ldr	r3, [pc, #388]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009204:	781a      	ldrb	r2, [r3, #0]
 8009206:	4b5b      	ldr	r3, [pc, #364]	@ (8009374 <PC_show_Keys+0x894>)
 8009208:	0011      	movs	r1, r2
 800920a:	0018      	movs	r0, r3
 800920c:	f7ff fc4d 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 8009210:	4b7a      	ldr	r3, [pc, #488]	@ (80093fc <PC_show_Keys+0x91c>)
 8009212:	487b      	ldr	r0, [pc, #492]	@ (8009400 <PC_show_Keys+0x920>)
 8009214:	220c      	movs	r2, #12
 8009216:	0019      	movs	r1, r3
 8009218:	f002 ff6c 	bl	800c0f4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 800921c:	4a77      	ldr	r2, [pc, #476]	@ (80093fc <PC_show_Keys+0x91c>)
 800921e:	4b58      	ldr	r3, [pc, #352]	@ (8009380 <PC_show_Keys+0x8a0>)
 8009220:	0011      	movs	r1, r2
 8009222:	0018      	movs	r0, r3
 8009224:	f7fc f924 	bl	8005470 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 8009228:	4b55      	ldr	r3, [pc, #340]	@ (8009380 <PC_show_Keys+0x8a0>)
 800922a:	4976      	ldr	r1, [pc, #472]	@ (8009404 <PC_show_Keys+0x924>)
 800922c:	4851      	ldr	r0, [pc, #324]	@ (8009374 <PC_show_Keys+0x894>)
 800922e:	221d      	movs	r2, #29
 8009230:	f01d f824 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009234:	4b54      	ldr	r3, [pc, #336]	@ (8009388 <PC_show_Keys+0x8a8>)
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	4b4e      	ldr	r3, [pc, #312]	@ (8009374 <PC_show_Keys+0x894>)
 800923a:	0011      	movs	r1, r2
 800923c:	0018      	movs	r0, r3
 800923e:	f7ff fc34 	bl	8008aaa <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 8009242:	4b71      	ldr	r3, [pc, #452]	@ (8009408 <PC_show_Keys+0x928>)
 8009244:	4871      	ldr	r0, [pc, #452]	@ (800940c <PC_show_Keys+0x92c>)
 8009246:	2230      	movs	r2, #48	@ 0x30
 8009248:	0019      	movs	r1, r3
 800924a:	f002 ff53 	bl	800c0f4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 800924e:	4970      	ldr	r1, [pc, #448]	@ (8009410 <PC_show_Keys+0x930>)
 8009250:	4b48      	ldr	r3, [pc, #288]	@ (8009374 <PC_show_Keys+0x894>)
 8009252:	221e      	movs	r2, #30
 8009254:	0018      	movs	r0, r3
 8009256:	f01d f811 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800925a:	4b4b      	ldr	r3, [pc, #300]	@ (8009388 <PC_show_Keys+0x8a8>)
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	4b45      	ldr	r3, [pc, #276]	@ (8009374 <PC_show_Keys+0x894>)
 8009260:	0011      	movs	r1, r2
 8009262:	0018      	movs	r0, r3
 8009264:	f7ff fc21 	bl	8008aaa <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 8009268:	4b67      	ldr	r3, [pc, #412]	@ (8009408 <PC_show_Keys+0x928>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d11b      	bne.n	80092a8 <PC_show_Keys+0x7c8>
    sprintf(msg, "Undefined, defaulted to ");
 8009270:	4a68      	ldr	r2, [pc, #416]	@ (8009414 <PC_show_Keys+0x934>)
 8009272:	4b40      	ldr	r3, [pc, #256]	@ (8009374 <PC_show_Keys+0x894>)
 8009274:	0011      	movs	r1, r2
 8009276:	0018      	movs	r0, r3
 8009278:	f01d f800 	bl	802627c <siprintf>
    PC_selectout(&msg[0], usb_out);
 800927c:	4b42      	ldr	r3, [pc, #264]	@ (8009388 <PC_show_Keys+0x8a8>)
 800927e:	781a      	ldrb	r2, [r3, #0]
 8009280:	4b3c      	ldr	r3, [pc, #240]	@ (8009374 <PC_show_Keys+0x894>)
 8009282:	0011      	movs	r1, r2
 8009284:	0018      	movs	r0, r3
 8009286:	f7ff fc10 	bl	8008aaa <PC_selectout>
    PC_selectout((char*)API, usb_out);
 800928a:	4b3f      	ldr	r3, [pc, #252]	@ (8009388 <PC_show_Keys+0x8a8>)
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	4b62      	ldr	r3, [pc, #392]	@ (8009418 <PC_show_Keys+0x938>)
 8009290:	0011      	movs	r1, r2
 8009292:	0018      	movs	r0, r3
 8009294:	f7ff fc09 	bl	8008aaa <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 8009298:	4b3b      	ldr	r3, [pc, #236]	@ (8009388 <PC_show_Keys+0x8a8>)
 800929a:	781a      	ldrb	r2, [r3, #0]
 800929c:	4b5f      	ldr	r3, [pc, #380]	@ (800941c <PC_show_Keys+0x93c>)
 800929e:	0011      	movs	r1, r2
 80092a0:	0018      	movs	r0, r3
 80092a2:	f7ff fc02 	bl	8008aaa <PC_selectout>
 80092a6:	e00c      	b.n	80092c2 <PC_show_Keys+0x7e2>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 80092a8:	4a57      	ldr	r2, [pc, #348]	@ (8009408 <PC_show_Keys+0x928>)
 80092aa:	494a      	ldr	r1, [pc, #296]	@ (80093d4 <PC_show_Keys+0x8f4>)
 80092ac:	4b31      	ldr	r3, [pc, #196]	@ (8009374 <PC_show_Keys+0x894>)
 80092ae:	0018      	movs	r0, r3
 80092b0:	f01c ffe4 	bl	802627c <siprintf>
    PC_selectout(&msg[0], usb_out);
 80092b4:	4b34      	ldr	r3, [pc, #208]	@ (8009388 <PC_show_Keys+0x8a8>)
 80092b6:	781a      	ldrb	r2, [r3, #0]
 80092b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009374 <PC_show_Keys+0x894>)
 80092ba:	0011      	movs	r1, r2
 80092bc:	0018      	movs	r0, r3
 80092be:	f7ff fbf4 	bl	8008aaa <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 80092c2:	4957      	ldr	r1, [pc, #348]	@ (8009420 <PC_show_Keys+0x940>)
 80092c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009374 <PC_show_Keys+0x894>)
 80092c6:	221f      	movs	r2, #31
 80092c8:	0018      	movs	r0, r3
 80092ca:	f01c ffd7 	bl	802627c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092ce:	4b2e      	ldr	r3, [pc, #184]	@ (8009388 <PC_show_Keys+0x8a8>)
 80092d0:	781a      	ldrb	r2, [r3, #0]
 80092d2:	4b28      	ldr	r3, [pc, #160]	@ (8009374 <PC_show_Keys+0x894>)
 80092d4:	0011      	movs	r1, r2
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff fbe7 	bl	8008aaa <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 80092dc:	4b51      	ldr	r3, [pc, #324]	@ (8009424 <PC_show_Keys+0x944>)
 80092de:	0018      	movs	r0, r3
 80092e0:	f7ff fbbe 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 80092e4:	200a      	movs	r0, #10
 80092e6:	f00b fb21 	bl	801492c <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 80092ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009428 <PC_show_Keys+0x948>)
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7ff fbb7 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 80092f2:	200a      	movs	r0, #10
 80092f4:	f00b fb1a 	bl	801492c <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 80092f8:	4b4c      	ldr	r3, [pc, #304]	@ (800942c <PC_show_Keys+0x94c>)
 80092fa:	0018      	movs	r0, r3
 80092fc:	f7ff fbb0 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 8009300:	200a      	movs	r0, #10
 8009302:	f00b fb13 	bl	801492c <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8009306:	4b4a      	ldr	r3, [pc, #296]	@ (8009430 <PC_show_Keys+0x950>)
 8009308:	0018      	movs	r0, r3
 800930a:	f7ff fba9 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 800930e:	200a      	movs	r0, #10
 8009310:	f00b fb0c 	bl	801492c <HAL_Delay>
  printf_USB(" from opensensemap.org in your account to this input.\r\n");
 8009314:	4b47      	ldr	r3, [pc, #284]	@ (8009434 <PC_show_Keys+0x954>)
 8009316:	0018      	movs	r0, r3
 8009318:	f7ff fba2 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 800931c:	200a      	movs	r0, #10
 800931e:	f00b fb05 	bl	801492c <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 8009322:	4b45      	ldr	r3, [pc, #276]	@ (8009438 <PC_show_Keys+0x958>)
 8009324:	0018      	movs	r0, r3
 8009326:	f7ff fb9b 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 800932a:	200a      	movs	r0, #10
 800932c:	f00b fafe 	bl	801492c <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 8009330:	4b42      	ldr	r3, [pc, #264]	@ (800943c <PC_show_Keys+0x95c>)
 8009332:	0018      	movs	r0, r3
 8009334:	f7ff fb94 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 8009338:	200a      	movs	r0, #10
 800933a:	f00b faf7 	bl	801492c <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 800933e:	4b40      	ldr	r3, [pc, #256]	@ (8009440 <PC_show_Keys+0x960>)
 8009340:	0018      	movs	r0, r3
 8009342:	f7ff fb8d 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 8009346:	200a      	movs	r0, #10
 8009348:	f00b faf0 	bl	801492c <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 800934c:	4b3d      	ldr	r3, [pc, #244]	@ (8009444 <PC_show_Keys+0x964>)
 800934e:	0018      	movs	r0, r3
 8009350:	f7ff fb86 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 8009354:	200a      	movs	r0, #10
 8009356:	f00b fae9 	bl	801492c <HAL_Delay>
  printf_USB("To clear a string: $30,000000000000000000000000\r\n");
 800935a:	4b3b      	ldr	r3, [pc, #236]	@ (8009448 <PC_show_Keys+0x968>)
 800935c:	0018      	movs	r0, r3
 800935e:	f7ff fb7f 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 8009362:	200a      	movs	r0, #10
 8009364:	f00b fae2 	bl	801492c <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 8009368:	4b38      	ldr	r3, [pc, #224]	@ (800944c <PC_show_Keys+0x96c>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d071      	beq.n	8009454 <PC_show_Keys+0x974>
 8009370:	4b37      	ldr	r3, [pc, #220]	@ (8009450 <PC_show_Keys+0x970>)
 8009372:	e070      	b.n	8009456 <PC_show_Keys+0x976>
 8009374:	20000b54 	.word	0x20000b54
 8009378:	20000cf8 	.word	0x20000cf8
 800937c:	080800f8 	.word	0x080800f8
 8009380:	20000ba8 	.word	0x20000ba8
 8009384:	0802b70c 	.word	0x0802b70c
 8009388:	20000b51 	.word	0x20000b51
 800938c:	20000d04 	.word	0x20000d04
 8009390:	08080104 	.word	0x08080104
 8009394:	0802b73c 	.word	0x0802b73c
 8009398:	20000d10 	.word	0x20000d10
 800939c:	080800b0 	.word	0x080800b0
 80093a0:	0802b76c 	.word	0x0802b76c
 80093a4:	20000d1c 	.word	0x20000d1c
 80093a8:	080800bc 	.word	0x080800bc
 80093ac:	0802b79c 	.word	0x0802b79c
 80093b0:	20000d28 	.word	0x20000d28
 80093b4:	08080170 	.word	0x08080170
 80093b8:	0802b7cc 	.word	0x0802b7cc
 80093bc:	20000d34 	.word	0x20000d34
 80093c0:	0808017c 	.word	0x0808017c
 80093c4:	0802b7fc 	.word	0x0802b7fc
 80093c8:	20000d40 	.word	0x20000d40
 80093cc:	08080260 	.word	0x08080260
 80093d0:	0802b82c 	.word	0x0802b82c
 80093d4:	0802b5ec 	.word	0x0802b5ec
 80093d8:	20000d70 	.word	0x20000d70
 80093dc:	08080290 	.word	0x08080290
 80093e0:	0802b858 	.word	0x0802b858
 80093e4:	20000da0 	.word	0x20000da0
 80093e8:	080802c0 	.word	0x080802c0
 80093ec:	0802b884 	.word	0x0802b884
 80093f0:	20000dd0 	.word	0x20000dd0
 80093f4:	08080188 	.word	0x08080188
 80093f8:	0802b8b0 	.word	0x0802b8b0
 80093fc:	20000ddc 	.word	0x20000ddc
 8009400:	080801a0 	.word	0x080801a0
 8009404:	0802b8e0 	.word	0x0802b8e0
 8009408:	20000de8 	.word	0x20000de8
 800940c:	08080110 	.word	0x08080110
 8009410:	0802b910 	.word	0x0802b910
 8009414:	0802b93c 	.word	0x0802b93c
 8009418:	0802b958 	.word	0x0802b958
 800941c:	0802b97c 	.word	0x0802b97c
 8009420:	0802b980 	.word	0x0802b980
 8009424:	0802b9ac 	.word	0x0802b9ac
 8009428:	0802b9c4 	.word	0x0802b9c4
 800942c:	0802b9f0 	.word	0x0802b9f0
 8009430:	0802ba20 	.word	0x0802ba20
 8009434:	0802ba5c 	.word	0x0802ba5c
 8009438:	0802ba94 	.word	0x0802ba94
 800943c:	0802bac8 	.word	0x0802bac8
 8009440:	0802bae8 	.word	0x0802bae8
 8009444:	0802bb1c 	.word	0x0802bb1c
 8009448:	0802bb40 	.word	0x0802bb40
 800944c:	200010f7 	.word	0x200010f7
 8009450:	0802bb74 	.word	0x0802bb74
 8009454:	4b0e      	ldr	r3, [pc, #56]	@ (8009490 <PC_show_Keys+0x9b0>)
 8009456:	4a0f      	ldr	r2, [pc, #60]	@ (8009494 <PC_show_Keys+0x9b4>)
 8009458:	0019      	movs	r1, r3
 800945a:	0010      	movs	r0, r2
 800945c:	f7ff fb00 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 8009460:	200a      	movs	r0, #10
 8009462:	f00b fa63 	bl	801492c <HAL_Delay>
  printf_USB("B - show build information\r\n");
 8009466:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <PC_show_Keys+0x9b8>)
 8009468:	0018      	movs	r0, r3
 800946a:	f7ff faf9 	bl	8008a60 <printf_USB>
  HAL_Delay(10);
 800946e:	200a      	movs	r0, #10
 8009470:	f00b fa5c 	bl	801492c <HAL_Delay>
  if (!usb_out) {
 8009474:	4b09      	ldr	r3, [pc, #36]	@ (800949c <PC_show_Keys+0x9bc>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2201      	movs	r2, #1
 800947a:	4053      	eors	r3, r2
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <PC_show_Keys+0x9aa>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 8009482:	4b07      	ldr	r3, [pc, #28]	@ (80094a0 <PC_show_Keys+0x9c0>)
 8009484:	0018      	movs	r0, r3
 8009486:	f01c feef 	bl	8026268 <puts>
  }
}
 800948a:	46c0      	nop			@ (mov r8, r8)
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	0802bb78 	.word	0x0802bb78
 8009494:	0802bb7c 	.word	0x0802bb7c
 8009498:	0802bba8 	.word	0x0802bba8
 800949c:	20000b51 	.word	0x20000b51
 80094a0:	0802bbc8 	.word	0x0802bbc8

080094a4 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	4b20      	ldr	r3, [pc, #128]	@ (8009534 <ascii_to_uint8+0x90>)
 80094b4:	18d3      	adds	r3, r2, r3
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	001a      	movs	r2, r3
 80094ba:	2304      	movs	r3, #4
 80094bc:	4013      	ands	r3, r2
 80094be:	d00a      	beq.n	80094d6 <ascii_to_uint8+0x32>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3301      	adds	r3, #1
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009534 <ascii_to_uint8+0x90>)
 80094ca:	18d3      	adds	r3, r2, r3
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	001a      	movs	r2, r3
 80094d0:	2304      	movs	r3, #4
 80094d2:	4013      	ands	r3, r2
 80094d4:	d105      	bne.n	80094e2 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 80094d6:	4b18      	ldr	r3, [pc, #96]	@ (8009538 <ascii_to_uint8+0x94>)
 80094d8:	0018      	movs	r0, r3
 80094da:	f7ff fac1 	bl	8008a60 <printf_USB>
    return 100;
 80094de:	2364      	movs	r3, #100	@ 0x64
 80094e0:	e024      	b.n	800952c <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	1c1a      	adds	r2, r3, #0
 80094e8:	0092      	lsls	r2, r2, #2
 80094ea:	18d3      	adds	r3, r2, r3
 80094ec:	18db      	adds	r3, r3, r3
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3301      	adds	r3, #1
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	18d3      	adds	r3, r2, r3
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	210f      	movs	r1, #15
 80094fc:	187b      	adds	r3, r7, r1
 80094fe:	3a10      	subs	r2, #16
 8009500:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 8009502:	187b      	adds	r3, r7, r1
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b1f      	cmp	r3, #31
 8009508:	d905      	bls.n	8009516 <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 800950a:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <ascii_to_uint8+0x98>)
 800950c:	0018      	movs	r0, r3
 800950e:	f7ff faa7 	bl	8008a60 <printf_USB>
    return 100;
 8009512:	2364      	movs	r3, #100	@ 0x64
 8009514:	e00a      	b.n	800952c <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 8009516:	220f      	movs	r2, #15
 8009518:	18bb      	adds	r3, r7, r2
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b1f      	cmp	r3, #31
 800951e:	d102      	bne.n	8009526 <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 8009520:	18bb      	adds	r3, r7, r2
 8009522:	22fd      	movs	r2, #253	@ 0xfd
 8009524:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 8009526:	230f      	movs	r3, #15
 8009528:	18fb      	adds	r3, r7, r3
 800952a:	781b      	ldrb	r3, [r3, #0]
}
 800952c:	0018      	movs	r0, r3
 800952e:	46bd      	mov	sp, r7
 8009530:	b004      	add	sp, #16
 8009532:	bd80      	pop	{r7, pc}
 8009534:	0802ecb8 	.word	0x0802ecb8
 8009538:	0802bc1c 	.word	0x0802bc1c
 800953c:	0802bc44 	.word	0x0802bc44

08009540 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8009540:	b590      	push	{r4, r7, lr}
 8009542:	b0d9      	sub	sp, #356	@ 0x164
 8009544:	af3e      	add	r7, sp, #248	@ 0xf8
 8009546:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8009548:	f019 fdda 	bl	8023100 <GetUsbRxDataSize>
 800954c:	0003      	movs	r3, r0
 800954e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 8009550:	2367      	movs	r3, #103	@ 0x67
 8009552:	18fb      	adds	r3, r7, r3
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 8009558:	2366      	movs	r3, #102	@ 0x66
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2124      	movs	r1, #36	@ 0x24
 8009564:	0018      	movs	r0, r3
 8009566:	f01c ffd9 	bl	802651c <strchr>
 800956a:	0003      	movs	r3, r0
 800956c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 800956e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d109      	bne.n	8009588 <Process_USB_input+0x48>
 8009574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009576:	2b00      	cmp	r3, #0
 8009578:	d006      	beq.n	8009588 <Process_USB_input+0x48>
 800957a:	4bc6      	ldr	r3, [pc, #792]	@ (8009894 <Process_USB_input+0x354>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b1c      	cmp	r3, #28
 8009580:	d002      	beq.n	8009588 <Process_USB_input+0x48>
      len = 28;
 8009582:	4bc4      	ldr	r3, [pc, #784]	@ (8009894 <Process_USB_input+0x354>)
 8009584:	221c      	movs	r2, #28
 8009586:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2153      	movs	r1, #83	@ 0x53
 800958c:	0018      	movs	r0, r3
 800958e:	f01c ffc5 	bl	802651c <strchr>
 8009592:	0003      	movs	r3, r0
 8009594:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 8009596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d109      	bne.n	80095b0 <Process_USB_input+0x70>
 800959c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <Process_USB_input+0x70>
 80095a2:	4bbc      	ldr	r3, [pc, #752]	@ (8009894 <Process_USB_input+0x354>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b40      	cmp	r3, #64	@ 0x40
 80095a8:	d002      	beq.n	80095b0 <Process_USB_input+0x70>
      len = pwdMaxLength;
 80095aa:	4bba      	ldr	r3, [pc, #744]	@ (8009894 <Process_USB_input+0x354>)
 80095ac:	2240      	movs	r2, #64	@ 0x40
 80095ae:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'L'to toggle USB logging
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	214c      	movs	r1, #76	@ 0x4c
 80095b4:	0018      	movs	r0, r3
 80095b6:	f01c ffb1 	bl	802651c <strchr>
 80095ba:	0003      	movs	r3, r0
 80095bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 80095be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d131      	bne.n	8009628 <Process_USB_input+0xe8>
 80095c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d02e      	beq.n	8009628 <Process_USB_input+0xe8>
    usblog = !usblog; // log info to usb too
 80095ca:	4bb3      	ldr	r3, [pc, #716]	@ (8009898 <Process_USB_input+0x358>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	1e5a      	subs	r2, r3, #1
 80095d0:	4193      	sbcs	r3, r2
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2201      	movs	r2, #1
 80095d6:	4053      	eors	r3, r2
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	1c1a      	adds	r2, r3, #0
 80095dc:	2301      	movs	r3, #1
 80095de:	4013      	ands	r3, r2
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	4bad      	ldr	r3, [pc, #692]	@ (8009898 <Process_USB_input+0x358>)
 80095e4:	701a      	strb	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 80095e6:	f00c f9af 	bl	8015948 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, USBlogstatusConfigAddr, usblog);
 80095ea:	4bab      	ldr	r3, [pc, #684]	@ (8009898 <Process_USB_input+0x358>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	001a      	movs	r2, r3
 80095f0:	4baa      	ldr	r3, [pc, #680]	@ (800989c <Process_USB_input+0x35c>)
 80095f2:	0019      	movs	r1, r3
 80095f4:	2000      	movs	r0, #0
 80095f6:	f00c fa0f 	bl	8015a18 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 80095fa:	f00c f9d3 	bl	80159a4 <HAL_FLASHEx_DATAEEPROM_Lock>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 80095fe:	4ba6      	ldr	r3, [pc, #664]	@ (8009898 <Process_USB_input+0x358>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <Process_USB_input+0xca>
 8009606:	4ba6      	ldr	r3, [pc, #664]	@ (80098a0 <Process_USB_input+0x360>)
 8009608:	e000      	b.n	800960c <Process_USB_input+0xcc>
 800960a:	4ba6      	ldr	r3, [pc, #664]	@ (80098a4 <Process_USB_input+0x364>)
 800960c:	4aa6      	ldr	r2, [pc, #664]	@ (80098a8 <Process_USB_input+0x368>)
 800960e:	0019      	movs	r1, r3
 8009610:	0010      	movs	r0, r2
 8009612:	f7ff fa25 	bl	8008a60 <printf_USB>
    length = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009620:	f019 fd56 	bl	80230d0 <ResetUsbRxDataSize>
    return true;
 8009624:	2301      	movs	r3, #1
 8009626:	e20b      	b.n	8009a40 <Process_USB_input+0x500>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2142      	movs	r1, #66	@ 0x42
 800962c:	0018      	movs	r0, r3
 800962e:	f01c ff75 	bl	802651c <strchr>
 8009632:	0003      	movs	r3, r0
 8009634:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009638:	2b01      	cmp	r3, #1
 800963a:	d10f      	bne.n	800965c <Process_USB_input+0x11c>
 800963c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00c      	beq.n	800965c <Process_USB_input+0x11c>
    BinaryReleaseInfo();
 8009642:	f00a fc85 	bl	8013f50 <BinaryReleaseInfo>
    showUpTime();
 8009646:	f000 fb8d 	bl	8009d64 <showUpTime>
    length = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009654:	f019 fd3c 	bl	80230d0 <ResetUsbRxDataSize>
    return true;
 8009658:	2301      	movs	r3, #1
 800965a:	e1f1      	b.n	8009a40 <Process_USB_input+0x500>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 800965c:	4b8d      	ldr	r3, [pc, #564]	@ (8009894 <Process_USB_input+0x354>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009662:	429a      	cmp	r2, r3
 8009664:	d207      	bcs.n	8009676 <Process_USB_input+0x136>
 8009666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009668:	3b01      	subs	r3, #1
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	18d3      	adds	r3, r2, r3
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b0d      	cmp	r3, #13
 8009672:	d000      	beq.n	8009676 <Process_USB_input+0x136>
 8009674:	e1d1      	b.n	8009a1a <Process_USB_input+0x4da>
    // 'S' is for entering a ASCII string
    if (data[length-1] == 13) {
 8009676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009678:	3b01      	subs	r3, #1
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	18d3      	adds	r3, r2, r3
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b0d      	cmp	r3, #13
 8009682:	d109      	bne.n	8009698 <Process_USB_input+0x158>
      printf_USB("Inputstring detected, string terminated\r\n");
 8009684:	4b89      	ldr	r3, [pc, #548]	@ (80098ac <Process_USB_input+0x36c>)
 8009686:	0018      	movs	r0, r3
 8009688:	f7ff f9ea 	bl	8008a60 <printf_USB>
      data[length-1] = 0;
 800968c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800968e:	3b01      	subs	r3, #1
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	18d3      	adds	r3, r2, r3
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2b23      	cmp	r3, #35	@ 0x23
 800969e:	d00c      	beq.n	80096ba <Process_USB_input+0x17a>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b24      	cmp	r3, #36	@ 0x24
 80096a6:	d008      	beq.n	80096ba <Process_USB_input+0x17a>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b53      	cmp	r3, #83	@ 0x53
 80096ae:	d004      	beq.n	80096ba <Process_USB_input+0x17a>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b45      	cmp	r3, #69	@ 0x45
 80096b6:	d000      	beq.n	80096ba <Process_USB_input+0x17a>
 80096b8:	e191      	b.n	80099de <Process_USB_input+0x49e>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3301      	adds	r3, #1
 80096be:	0018      	movs	r0, r3
 80096c0:	f7ff fef0 	bl	80094a4 <ascii_to_uint8>
 80096c4:	0003      	movs	r3, r0
 80096c6:	001a      	movs	r2, r3
 80096c8:	4b79      	ldr	r3, [pc, #484]	@ (80098b0 <Process_USB_input+0x370>)
 80096ca:	701a      	strb	r2, [r3, #0]
      printf_USB("Command nr determined: %d", received.Command);
 80096cc:	4b78      	ldr	r3, [pc, #480]	@ (80098b0 <Process_USB_input+0x370>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	001a      	movs	r2, r3
 80096d2:	4b78      	ldr	r3, [pc, #480]	@ (80098b4 <Process_USB_input+0x374>)
 80096d4:	0011      	movs	r1, r2
 80096d6:	0018      	movs	r0, r3
 80096d8:	f7ff f9c2 	bl	8008a60 <printf_USB>
      if (received.Command == 100) {
 80096dc:	4b74      	ldr	r3, [pc, #464]	@ (80098b0 <Process_USB_input+0x370>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b64      	cmp	r3, #100	@ 0x64
 80096e2:	d11f      	bne.n	8009724 <Process_USB_input+0x1e4>
        printf_USB("\r\nCommandvalue out of range.\r\n");
 80096e4:	4b74      	ldr	r3, [pc, #464]	@ (80098b8 <Process_USB_input+0x378>)
 80096e6:	0018      	movs	r0, r3
 80096e8:	f7ff f9ba 	bl	8008a60 <printf_USB>
        ResetUsbRxDataSize();
 80096ec:	f019 fcf0 	bl	80230d0 <ResetUsbRxDataSize>
        PC_show_Keys();
 80096f0:	f7ff f9f6 	bl	8008ae0 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 80096f4:	2365      	movs	r3, #101	@ 0x65
 80096f6:	18fb      	adds	r3, r7, r3
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
 80096fc:	e00b      	b.n	8009716 <Process_USB_input+0x1d6>
          data[i] = '\0';
 80096fe:	2165      	movs	r1, #101	@ 0x65
 8009700:	187b      	adds	r3, r7, r1
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	18d3      	adds	r3, r2, r3
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 800970c:	187b      	adds	r3, r7, r1
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	187b      	adds	r3, r7, r1
 8009712:	3201      	adds	r2, #1
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	2365      	movs	r3, #101	@ 0x65
 8009718:	18fb      	adds	r3, r7, r3
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b1f      	cmp	r3, #31
 800971e:	d9ee      	bls.n	80096fe <Process_USB_input+0x1be>
        }
        return false; // value out of range
 8009720:	2300      	movs	r3, #0
 8009722:	e18d      	b.n	8009a40 <Process_USB_input+0x500>
      }
      if (data[3] == ',') {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3303      	adds	r3, #3
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b2c      	cmp	r3, #44	@ 0x2c
 800972c:	d000      	beq.n	8009730 <Process_USB_input+0x1f0>
 800972e:	e152      	b.n	80099d6 <Process_USB_input+0x496>
        if ((data[0] == 'S') || (data[0] == 'E')) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b53      	cmp	r3, #83	@ 0x53
 8009736:	d003      	beq.n	8009740 <Process_USB_input+0x200>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b45      	cmp	r3, #69	@ 0x45
 800973e:	d10a      	bne.n	8009756 <Process_USB_input+0x216>
          if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b45      	cmp	r3, #69	@ 0x45
 8009746:	d106      	bne.n	8009756 <Process_USB_input+0x216>
 8009748:	4b59      	ldr	r3, [pc, #356]	@ (80098b0 <Process_USB_input+0x370>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b1f      	cmp	r3, #31
 800974e:	d102      	bne.n	8009756 <Process_USB_input+0x216>
//            printf_USB("\r\nClear EEPROM request\r\n");
            received.Command = ClearConfigCmd;
 8009750:	4b57      	ldr	r3, [pc, #348]	@ (80098b0 <Process_USB_input+0x370>)
 8009752:	22fd      	movs	r2, #253	@ 0xfd
 8009754:	701a      	strb	r2, [r3, #0]
          }
        }
        if ((data[0] == '$') || (data[0] == '#')) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b24      	cmp	r3, #36	@ 0x24
 800975c:	d004      	beq.n	8009768 <Process_USB_input+0x228>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b23      	cmp	r3, #35	@ 0x23
 8009764:	d000      	beq.n	8009768 <Process_USB_input+0x228>
 8009766:	e0bd      	b.n	80098e4 <Process_USB_input+0x3a4>
          for (i=4; i < len; i++) {
 8009768:	2366      	movs	r3, #102	@ 0x66
 800976a:	18fb      	adds	r3, r7, r3
 800976c:	2204      	movs	r2, #4
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	e0b0      	b.n	80098d4 <Process_USB_input+0x394>
            HAL_Delay(10);
 8009772:	200a      	movs	r0, #10
 8009774:	f00b f8da 	bl	801492c <HAL_Delay>
            if (isxdigit(data[i])) {
 8009778:	2166      	movs	r1, #102	@ 0x66
 800977a:	187b      	adds	r3, r7, r1
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	18d3      	adds	r3, r2, r3
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	4b4d      	ldr	r3, [pc, #308]	@ (80098bc <Process_USB_input+0x37c>)
 8009788:	18d3      	adds	r3, r2, r3
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	001a      	movs	r2, r3
 800978e:	2344      	movs	r3, #68	@ 0x44
 8009790:	4013      	ands	r3, r2
 8009792:	d05c      	beq.n	800984e <Process_USB_input+0x30e>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8009794:	4b4a      	ldr	r3, [pc, #296]	@ (80098c0 <Process_USB_input+0x380>)
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	b25b      	sxtb	r3, r3
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	b25a      	sxtb	r2, r3
 800979e:	0008      	movs	r0, r1
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	18cb      	adds	r3, r1, r3
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	1c59      	adds	r1, r3, #1
 80097ac:	4b43      	ldr	r3, [pc, #268]	@ (80098bc <Process_USB_input+0x37c>)
 80097ae:	18cb      	adds	r3, r1, r3
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	0019      	movs	r1, r3
 80097b4:	2304      	movs	r3, #4
 80097b6:	400b      	ands	r3, r1
 80097b8:	d008      	beq.n	80097cc <Process_USB_input+0x28c>
 80097ba:	183b      	adds	r3, r7, r0
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	18cb      	adds	r3, r1, r3
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	3b30      	subs	r3, #48	@ 0x30
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	b25b      	sxtb	r3, r3
 80097ca:	e01e      	b.n	800980a <Process_USB_input+0x2ca>
 80097cc:	2366      	movs	r3, #102	@ 0x66
 80097ce:	18fb      	adds	r3, r7, r3
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	18c9      	adds	r1, r1, r3
 80097d6:	2056      	movs	r0, #86	@ 0x56
 80097d8:	183b      	adds	r3, r7, r0
 80097da:	7809      	ldrb	r1, [r1, #0]
 80097dc:	7019      	strb	r1, [r3, #0]
 80097de:	183b      	adds	r3, r7, r0
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	1c59      	adds	r1, r3, #1
 80097e4:	4b35      	ldr	r3, [pc, #212]	@ (80098bc <Process_USB_input+0x37c>)
 80097e6:	18cb      	adds	r3, r1, r3
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	0019      	movs	r1, r3
 80097ec:	2303      	movs	r3, #3
 80097ee:	400b      	ands	r3, r1
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d103      	bne.n	80097fc <Process_USB_input+0x2bc>
 80097f4:	183b      	adds	r3, r7, r0
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	3b20      	subs	r3, #32
 80097fa:	e002      	b.n	8009802 <Process_USB_input+0x2c2>
 80097fc:	2356      	movs	r3, #86	@ 0x56
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	3b37      	subs	r3, #55	@ 0x37
 8009806:	b2db      	uxtb	r3, r3
 8009808:	b25b      	sxtb	r3, r3
 800980a:	4313      	orrs	r3, r2
 800980c:	b25b      	sxtb	r3, r3
 800980e:	b2da      	uxtb	r2, r3
 8009810:	4b2b      	ldr	r3, [pc, #172]	@ (80098c0 <Process_USB_input+0x380>)
 8009812:	701a      	strb	r2, [r3, #0]
//              printf_USB("Result is 0x%02X\r\n", result);
              HAL_Delay(10);
 8009814:	200a      	movs	r0, #10
 8009816:	f00b f889 	bl	801492c <HAL_Delay>
              if (len == 28) {
 800981a:	4b1e      	ldr	r3, [pc, #120]	@ (8009894 <Process_USB_input+0x354>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b1c      	cmp	r3, #28
 8009820:	d152      	bne.n	80098c8 <Process_USB_input+0x388>
                if ((i % 2) == 1) {
 8009822:	2366      	movs	r3, #102	@ 0x66
 8009824:	18fb      	adds	r3, r7, r3
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2201      	movs	r2, #1
 800982a:	4013      	ands	r3, r2
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d04a      	beq.n	80098c8 <Process_USB_input+0x388>
                  data[r] = result;
 8009832:	2167      	movs	r1, #103	@ 0x67
 8009834:	187b      	adds	r3, r7, r1
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	18d3      	adds	r3, r2, r3
 800983c:	4a20      	ldr	r2, [pc, #128]	@ (80098c0 <Process_USB_input+0x380>)
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	701a      	strb	r2, [r3, #0]
//                  printf_USB("data[%d] = 0x%02X",r, data[r]);
                  r++;
 8009842:	187b      	adds	r3, r7, r1
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	187b      	adds	r3, r7, r1
 8009848:	3201      	adds	r2, #1
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e03c      	b.n	80098c8 <Process_USB_input+0x388>
                }
              }
            }
            else {
              printf_USB("\r\nInvalid hexadecimal character: '%c at position %d\r\n", data[i], i);
 800984e:	2066      	movs	r0, #102	@ 0x66
 8009850:	183b      	adds	r3, r7, r0
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	18d3      	adds	r3, r2, r3
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	0019      	movs	r1, r3
 800985c:	183b      	adds	r3, r7, r0
 800985e:	781a      	ldrb	r2, [r3, #0]
 8009860:	4b18      	ldr	r3, [pc, #96]	@ (80098c4 <Process_USB_input+0x384>)
 8009862:	0018      	movs	r0, r3
 8009864:	f7ff f8fc 	bl	8008a60 <printf_USB>
              ResetUsbRxDataSize();
 8009868:	f019 fc32 	bl	80230d0 <ResetUsbRxDataSize>
              PC_show_Keys();
 800986c:	f7ff f938 	bl	8008ae0 <PC_show_Keys>
              for (uint8_t i=0; i < length; i++) {
 8009870:	2157      	movs	r1, #87	@ 0x57
 8009872:	187b      	adds	r3, r7, r1
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	46c0      	nop			@ (mov r8, r8)
 800987a:	187b      	adds	r3, r7, r1
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009880:	429a      	cmp	r2, r3
 8009882:	d921      	bls.n	80098c8 <Process_USB_input+0x388>
                data[i] = '\0';
 8009884:	187b      	adds	r3, r7, r1
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	18d3      	adds	r3, r2, r3
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
                return false; // Of een andere foutwaarde
 8009890:	2300      	movs	r3, #0
 8009892:	e0d5      	b.n	8009a40 <Process_USB_input+0x500>
 8009894:	20000038 	.word	0x20000038
 8009898:	200010f7 	.word	0x200010f7
 800989c:	08080194 	.word	0x08080194
 80098a0:	0802bb74 	.word	0x0802bb74
 80098a4:	0802bb78 	.word	0x0802bb78
 80098a8:	0802bc60 	.word	0x0802bc60
 80098ac:	0802bc80 	.word	0x0802bc80
 80098b0:	20000940 	.word	0x20000940
 80098b4:	0802bcac 	.word	0x0802bcac
 80098b8:	0802bcc8 	.word	0x0802bcc8
 80098bc:	0802ecb8 	.word	0x0802ecb8
 80098c0:	20000a44 	.word	0x20000a44
 80098c4:	0802bce8 	.word	0x0802bce8
          for (i=4; i < len; i++) {
 80098c8:	2166      	movs	r1, #102	@ 0x66
 80098ca:	187b      	adds	r3, r7, r1
 80098cc:	781a      	ldrb	r2, [r3, #0]
 80098ce:	187b      	adds	r3, r7, r1
 80098d0:	3201      	adds	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	2366      	movs	r3, #102	@ 0x66
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	4b5b      	ldr	r3, [pc, #364]	@ (8009a48 <Process_USB_input+0x508>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d200      	bcs.n	80098e4 <Process_USB_input+0x3a4>
 80098e2:	e746      	b.n	8009772 <Process_USB_input+0x232>
              }
            }
          }  // end for
//          printf_USB("\r\n");
        }
        if (len < pwdMaxLength) {
 80098e4:	4b58      	ldr	r3, [pc, #352]	@ (8009a48 <Process_USB_input+0x508>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80098ea:	d825      	bhi.n	8009938 <Process_USB_input+0x3f8>
          if (len == 6) {
 80098ec:	4b56      	ldr	r3, [pc, #344]	@ (8009a48 <Process_USB_input+0x508>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b06      	cmp	r3, #6
 80098f2:	d114      	bne.n	800991e <Process_USB_input+0x3de>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80098f4:	2448      	movs	r4, #72	@ 0x48
 80098f6:	193b      	adds	r3, r7, r4
 80098f8:	4854      	ldr	r0, [pc, #336]	@ (8009a4c <Process_USB_input+0x50c>)
 80098fa:	220c      	movs	r2, #12
 80098fc:	0019      	movs	r1, r3
 80098fe:	f002 fbf9 	bl	800c0f4 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 8009902:	4b53      	ldr	r3, [pc, #332]	@ (8009a50 <Process_USB_input+0x510>)
 8009904:	781a      	ldrb	r2, [r3, #0]
 8009906:	0021      	movs	r1, r4
 8009908:	187b      	adds	r3, r7, r1
 800990a:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 800990c:	4b51      	ldr	r3, [pc, #324]	@ (8009a54 <Process_USB_input+0x514>)
 800990e:	2202      	movs	r2, #2
 8009910:	1879      	adds	r1, r7, r1
 8009912:	189b      	adds	r3, r3, r2
 8009914:	220c      	movs	r2, #12
 8009916:	0018      	movs	r0, r3
 8009918:	f01c fed4 	bl	80266c4 <memcpy>
 800991c:	e005      	b.n	800992a <Process_USB_input+0x3ea>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	4b4d      	ldr	r3, [pc, #308]	@ (8009a58 <Process_USB_input+0x518>)
 8009922:	220c      	movs	r2, #12
 8009924:	0018      	movs	r0, r3
 8009926:	f01c fecd 	bl	80266c4 <memcpy>
          }
          received.Payload[12] = '\0';
 800992a:	4b4a      	ldr	r3, [pc, #296]	@ (8009a54 <Process_USB_input+0x514>)
 800992c:	2200      	movs	r2, #0
 800992e:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 8009930:	4b48      	ldr	r3, [pc, #288]	@ (8009a54 <Process_USB_input+0x514>)
 8009932:	220c      	movs	r2, #12
 8009934:	705a      	strb	r2, [r3, #1]
 8009936:	e005      	b.n	8009944 <Process_USB_input+0x404>
        }
        else {
          received.PayloadLength = length-4;  // The string terminator counts
 8009938:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800993a:	b2db      	uxtb	r3, r3
 800993c:	3b04      	subs	r3, #4
 800993e:	b2da      	uxtb	r2, r3
 8009940:	4b44      	ldr	r3, [pc, #272]	@ (8009a54 <Process_USB_input+0x514>)
 8009942:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 8009944:	4b40      	ldr	r3, [pc, #256]	@ (8009a48 <Process_USB_input+0x508>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b3f      	cmp	r3, #63	@ 0x3f
 800994a:	d80b      	bhi.n	8009964 <Process_USB_input+0x424>
 800994c:	4b3e      	ldr	r3, [pc, #248]	@ (8009a48 <Process_USB_input+0x508>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b06      	cmp	r3, #6
 8009952:	d007      	beq.n	8009964 <Process_USB_input+0x424>
          uint8ArrayToString(Buffer, received.Payload);
 8009954:	4a40      	ldr	r2, [pc, #256]	@ (8009a58 <Process_USB_input+0x518>)
 8009956:	2308      	movs	r3, #8
 8009958:	18fb      	adds	r3, r7, r3
 800995a:	0011      	movs	r1, r2
 800995c:	0018      	movs	r0, r3
 800995e:	f7fb fd87 	bl	8005470 <uint8ArrayToString>
 8009962:	e00c      	b.n	800997e <Process_USB_input+0x43e>
        }
        else if (len == pwdMaxLength) {
 8009964:	4b38      	ldr	r3, [pc, #224]	@ (8009a48 <Process_USB_input+0x508>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b40      	cmp	r3, #64	@ 0x40
 800996a:	d108      	bne.n	800997e <Process_USB_input+0x43e>
          memcpy(received.Payload, &data[4], received.PayloadLength);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	1d19      	adds	r1, r3, #4
 8009970:	4b38      	ldr	r3, [pc, #224]	@ (8009a54 <Process_USB_input+0x514>)
 8009972:	785b      	ldrb	r3, [r3, #1]
 8009974:	001a      	movs	r2, r3
 8009976:	4b38      	ldr	r3, [pc, #224]	@ (8009a58 <Process_USB_input+0x518>)
 8009978:	0018      	movs	r0, r3
 800997a:	f01c fea3 	bl	80266c4 <memcpy>
        }
        ProcessCmd(received);
 800997e:	4c35      	ldr	r4, [pc, #212]	@ (8009a54 <Process_USB_input+0x514>)
 8009980:	466b      	mov	r3, sp
 8009982:	0018      	movs	r0, r3
 8009984:	0023      	movs	r3, r4
 8009986:	3310      	adds	r3, #16
 8009988:	22f4      	movs	r2, #244	@ 0xf4
 800998a:	0019      	movs	r1, r3
 800998c:	f01c fe9a 	bl	80266c4 <memcpy>
 8009990:	6820      	ldr	r0, [r4, #0]
 8009992:	6861      	ldr	r1, [r4, #4]
 8009994:	68a2      	ldr	r2, [r4, #8]
 8009996:	68e3      	ldr	r3, [r4, #12]
 8009998:	f7fe fda8 	bl	80084ec <ProcessCmd>
        ResetUsbRxDataSize();
 800999c:	f019 fb98 	bl	80230d0 <ResetUsbRxDataSize>
        PC_show_Keys();
 80099a0:	f7ff f89e 	bl	8008ae0 <PC_show_Keys>
        for (uint8_t i=0; i < length; i++) {
 80099a4:	2364      	movs	r3, #100	@ 0x64
 80099a6:	18fb      	adds	r3, r7, r3
 80099a8:	2200      	movs	r2, #0
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	e00b      	b.n	80099c6 <Process_USB_input+0x486>
          data[i] = '\0';
 80099ae:	2164      	movs	r1, #100	@ 0x64
 80099b0:	187b      	adds	r3, r7, r1
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	18d3      	adds	r3, r2, r3
 80099b8:	2200      	movs	r2, #0
 80099ba:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < length; i++) {
 80099bc:	187b      	adds	r3, r7, r1
 80099be:	781a      	ldrb	r2, [r3, #0]
 80099c0:	187b      	adds	r3, r7, r1
 80099c2:	3201      	adds	r2, #1
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	2364      	movs	r3, #100	@ 0x64
 80099c8:	18fb      	adds	r3, r7, r3
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d8ed      	bhi.n	80099ae <Process_USB_input+0x46e>
        }
        return true;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e034      	b.n	8009a40 <Process_USB_input+0x500>
      }
      else {
        printf_USB("\r\nInvalid input; comma not found\r\n");
 80099d6:	4b21      	ldr	r3, [pc, #132]	@ (8009a5c <Process_USB_input+0x51c>)
 80099d8:	0018      	movs	r0, r3
 80099da:	f7ff f841 	bl	8008a60 <printf_USB>
//        for (uint8_t i=0; i < length; i++) {
//          data[i] = '\0';
//        }
      }
    }
    PC_show_Keys();
 80099de:	f7ff f87f 	bl	8008ae0 <PC_show_Keys>
    ResetUsbRxDataSize();
 80099e2:	f019 fb75 	bl	80230d0 <ResetUsbRxDataSize>
    for (uint8_t i=0; i < length; i++) {
 80099e6:	2363      	movs	r3, #99	@ 0x63
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	2200      	movs	r2, #0
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	e00b      	b.n	8009a08 <Process_USB_input+0x4c8>
      data[i] = '\0';
 80099f0:	2163      	movs	r1, #99	@ 0x63
 80099f2:	187b      	adds	r3, r7, r1
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	18d3      	adds	r3, r2, r3
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	187b      	adds	r3, r7, r1
 8009a04:	3201      	adds	r2, #1
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	2363      	movs	r3, #99	@ 0x63
 8009a0a:	18fb      	adds	r3, r7, r3
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d8ed      	bhi.n	80099f0 <Process_USB_input+0x4b0>
    }
    len = 6;
 8009a14:	4b0c      	ldr	r3, [pc, #48]	@ (8009a48 <Process_USB_input+0x508>)
 8009a16:	2206      	movs	r2, #6
 8009a18:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 8009a1a:	4b11      	ldr	r3, [pc, #68]	@ (8009a60 <Process_USB_input+0x520>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d008      	beq.n	8009a36 <Process_USB_input+0x4f6>
    printf_USB("USB input: %s\r", (const char*)data);
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <Process_USB_input+0x524>)
 8009a28:	0011      	movs	r1, r2
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f7ff f818 	bl	8008a60 <printf_USB>
    formerlength = length;
 8009a30:	4b0b      	ldr	r3, [pc, #44]	@ (8009a60 <Process_USB_input+0x520>)
 8009a32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a34:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f019 fb6b 	bl	8023114 <GetUsbRxNextChunk>
  return false;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	0018      	movs	r0, r3
 8009a42:	46bd      	mov	sp, r7
 8009a44:	b01b      	add	sp, #108	@ 0x6c
 8009a46:	bd90      	pop	{r4, r7, pc}
 8009a48:	20000038 	.word	0x20000038
 8009a4c:	08080000 	.word	0x08080000
 8009a50:	20000a44 	.word	0x20000a44
 8009a54:	20000940 	.word	0x20000940
 8009a58:	20000942 	.word	0x20000942
 8009a5c:	0802bd20 	.word	0x0802bd20
 8009a60:	20000a48 	.word	0x20000a48
 8009a64:	0802bd44 	.word	0x0802bd44

08009a68 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009a6c:	4b26      	ldr	r3, [pc, #152]	@ (8009b08 <ReadBatteryVoltage+0xa0>)
 8009a6e:	4a27      	ldr	r2, [pc, #156]	@ (8009b0c <ReadBatteryVoltage+0xa4>)
 8009a70:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009a72:	4b25      	ldr	r3, [pc, #148]	@ (8009b08 <ReadBatteryVoltage+0xa0>)
 8009a74:	2280      	movs	r2, #128	@ 0x80
 8009a76:	0152      	lsls	r2, r2, #5
 8009a78:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009a7a:	4a23      	ldr	r2, [pc, #140]	@ (8009b08 <ReadBatteryVoltage+0xa0>)
 8009a7c:	4b24      	ldr	r3, [pc, #144]	@ (8009b10 <ReadBatteryVoltage+0xa8>)
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0018      	movs	r0, r3
 8009a82:	f00b fa03 	bl	8014e8c <HAL_ADC_ConfigChannel>
 8009a86:	1e03      	subs	r3, r0, #0
 8009a88:	d001      	beq.n	8009a8e <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009a8a:	f003 fc79 	bl	800d380 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009a8e:	4b20      	ldr	r3, [pc, #128]	@ (8009b10 <ReadBatteryVoltage+0xa8>)
 8009a90:	0018      	movs	r0, r3
 8009a92:	f00b f8ff 	bl	8014c94 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009a96:	4b1e      	ldr	r3, [pc, #120]	@ (8009b10 <ReadBatteryVoltage+0xa8>)
 8009a98:	2101      	movs	r1, #1
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f00b f94e 	bl	8014d3c <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b10 <ReadBatteryVoltage+0xa8>)
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f00b f9e6 	bl	8014e74 <HAL_ADC_GetValue>
 8009aa8:	0002      	movs	r2, r0
 8009aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <ReadBatteryVoltage+0xac>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4353      	muls	r3, r2
 8009ab0:	005b      	lsls	r3, r3, #1
 8009ab2:	4919      	ldr	r1, [pc, #100]	@ (8009b18 <ReadBatteryVoltage+0xb0>)
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f7f6 fb75 	bl	80001a4 <__udivsi3>
 8009aba:	0003      	movs	r3, r0
 8009abc:	001a      	movs	r2, r3
 8009abe:	4b17      	ldr	r3, [pc, #92]	@ (8009b1c <ReadBatteryVoltage+0xb4>)
 8009ac0:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009ac2:	4b16      	ldr	r3, [pc, #88]	@ (8009b1c <ReadBatteryVoltage+0xb4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f7f7 fefe 	bl	80018c8 <__aeabi_ui2f>
 8009acc:	1c03      	adds	r3, r0, #0
 8009ace:	4914      	ldr	r1, [pc, #80]	@ (8009b20 <ReadBatteryVoltage+0xb8>)
 8009ad0:	1c18      	adds	r0, r3, #0
 8009ad2:	f7f7 f8e7 	bl	8000ca4 <__aeabi_fdiv>
 8009ad6:	1c03      	adds	r3, r0, #0
 8009ad8:	1c1a      	adds	r2, r3, #0
 8009ada:	4b12      	ldr	r3, [pc, #72]	@ (8009b24 <ReadBatteryVoltage+0xbc>)
 8009adc:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009ade:	4b0a      	ldr	r3, [pc, #40]	@ (8009b08 <ReadBatteryVoltage+0xa0>)
 8009ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8009b0c <ReadBatteryVoltage+0xa4>)
 8009ae2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009ae4:	4b08      	ldr	r3, [pc, #32]	@ (8009b08 <ReadBatteryVoltage+0xa0>)
 8009ae6:	4a10      	ldr	r2, [pc, #64]	@ (8009b28 <ReadBatteryVoltage+0xc0>)
 8009ae8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009aea:	4a07      	ldr	r2, [pc, #28]	@ (8009b08 <ReadBatteryVoltage+0xa0>)
 8009aec:	4b08      	ldr	r3, [pc, #32]	@ (8009b10 <ReadBatteryVoltage+0xa8>)
 8009aee:	0011      	movs	r1, r2
 8009af0:	0018      	movs	r0, r3
 8009af2:	f00b f9cb 	bl	8014e8c <HAL_ADC_ConfigChannel>
 8009af6:	1e03      	subs	r3, r0, #0
 8009af8:	d001      	beq.n	8009afe <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009afa:	f003 fc41 	bl	800d380 <Error_Handler>
  }
  return trueValue;
 8009afe:	4b09      	ldr	r3, [pc, #36]	@ (8009b24 <ReadBatteryVoltage+0xbc>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 }
 8009b02:	1c18      	adds	r0, r3, #0
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20000e18 	.word	0x20000e18
 8009b0c:	38004000 	.word	0x38004000
 8009b10:	20000e84 	.word	0x20000e84
 8009b14:	2000003c 	.word	0x2000003c
 8009b18:	00000fff 	.word	0x00000fff
 8009b1c:	20000e34 	.word	0x20000e34
 8009b20:	447a0000 	.word	0x447a0000
 8009b24:	20000e38 	.word	0x20000e38
 8009b28:	00001001 	.word	0x00001001

08009b2c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009b30:	4b21      	ldr	r3, [pc, #132]	@ (8009bb8 <ReadSolarVoltage+0x8c>)
 8009b32:	4a22      	ldr	r2, [pc, #136]	@ (8009bbc <ReadSolarVoltage+0x90>)
 8009b34:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009b36:	4b20      	ldr	r3, [pc, #128]	@ (8009bb8 <ReadSolarVoltage+0x8c>)
 8009b38:	2280      	movs	r2, #128	@ 0x80
 8009b3a:	0152      	lsls	r2, r2, #5
 8009b3c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009bb8 <ReadSolarVoltage+0x8c>)
 8009b40:	4b1f      	ldr	r3, [pc, #124]	@ (8009bc0 <ReadSolarVoltage+0x94>)
 8009b42:	0011      	movs	r1, r2
 8009b44:	0018      	movs	r0, r3
 8009b46:	f00b f9a1 	bl	8014e8c <HAL_ADC_ConfigChannel>
 8009b4a:	1e03      	subs	r3, r0, #0
 8009b4c:	d001      	beq.n	8009b52 <ReadSolarVoltage+0x26>
    Error_Handler();
 8009b4e:	f003 fc17 	bl	800d380 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009b52:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc0 <ReadSolarVoltage+0x94>)
 8009b54:	0018      	movs	r0, r3
 8009b56:	f00b f89d 	bl	8014c94 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009b5a:	4b19      	ldr	r3, [pc, #100]	@ (8009bc0 <ReadSolarVoltage+0x94>)
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f00b f8ec 	bl	8014d3c <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009b64:	4b16      	ldr	r3, [pc, #88]	@ (8009bc0 <ReadSolarVoltage+0x94>)
 8009b66:	0018      	movs	r0, r3
 8009b68:	f00b f984 	bl	8014e74 <HAL_ADC_GetValue>
 8009b6c:	0002      	movs	r2, r0
 8009b6e:	4b15      	ldr	r3, [pc, #84]	@ (8009bc4 <ReadSolarVoltage+0x98>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	435a      	muls	r2, r3
 8009b74:	0013      	movs	r3, r2
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	189b      	adds	r3, r3, r2
 8009b7a:	4913      	ldr	r1, [pc, #76]	@ (8009bc8 <ReadSolarVoltage+0x9c>)
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	f7f6 fb11 	bl	80001a4 <__udivsi3>
 8009b82:	0003      	movs	r3, r0
 8009b84:	001a      	movs	r2, r3
 8009b86:	4b11      	ldr	r3, [pc, #68]	@ (8009bcc <ReadSolarVoltage+0xa0>)
 8009b88:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb8 <ReadSolarVoltage+0x8c>)
 8009b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8009bbc <ReadSolarVoltage+0x90>)
 8009b8e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009b90:	4b09      	ldr	r3, [pc, #36]	@ (8009bb8 <ReadSolarVoltage+0x8c>)
 8009b92:	4a0f      	ldr	r2, [pc, #60]	@ (8009bd0 <ReadSolarVoltage+0xa4>)
 8009b94:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b96:	4a08      	ldr	r2, [pc, #32]	@ (8009bb8 <ReadSolarVoltage+0x8c>)
 8009b98:	4b09      	ldr	r3, [pc, #36]	@ (8009bc0 <ReadSolarVoltage+0x94>)
 8009b9a:	0011      	movs	r1, r2
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f00b f975 	bl	8014e8c <HAL_ADC_ConfigChannel>
 8009ba2:	1e03      	subs	r3, r0, #0
 8009ba4:	d001      	beq.n	8009baa <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009ba6:	f003 fbeb 	bl	800d380 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009baa:	4b08      	ldr	r3, [pc, #32]	@ (8009bcc <ReadSolarVoltage+0xa0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 }
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	46c0      	nop			@ (mov r8, r8)
 8009bb8:	20000e18 	.word	0x20000e18
 8009bbc:	3c008000 	.word	0x3c008000
 8009bc0:	20000e84 	.word	0x20000e84
 8009bc4:	2000003c 	.word	0x2000003c
 8009bc8:	00000fff 	.word	0x00000fff
 8009bcc:	20000e3c 	.word	0x20000e3c
 8009bd0:	00001001 	.word	0x00001001

08009bd4 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009bd8:	23a0      	movs	r3, #160	@ 0xa0
 8009bda:	05db      	lsls	r3, r3, #23
 8009bdc:	2180      	movs	r1, #128	@ 0x80
 8009bde:	0018      	movs	r0, r3
 8009be0:	f00c f8f0 	bl	8015dc4 <HAL_GPIO_ReadPin>
 8009be4:	1e03      	subs	r3, r0, #0
 8009be6:	d00b      	beq.n	8009c00 <Check_USB_PowerOn+0x2c>
     if (sendpwremail == DONE) {
 8009be8:	4b07      	ldr	r3, [pc, #28]	@ (8009c08 <Check_USB_PowerOn+0x34>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d105      	bne.n	8009bfc <Check_USB_PowerOn+0x28>
       sendpwremail = CLEAR;
 8009bf0:	4b05      	ldr	r3, [pc, #20]	@ (8009c08 <Check_USB_PowerOn+0x34>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	701a      	strb	r2, [r3, #0]
       sendpwrmaildate = 0;
 8009bf6:	4b05      	ldr	r3, [pc, #20]	@ (8009c0c <Check_USB_PowerOn+0x38>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <Check_USB_PowerOn+0x2e>
   }
   return false;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	0018      	movs	r0, r3
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	200010f9 	.word	0x200010f9
 8009c0c:	20001110 	.word	0x20001110

08009c10 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009c16:	1dfb      	adds	r3, r7, #7
 8009c18:	2201      	movs	r2, #1
 8009c1a:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009c1c:	1dbb      	adds	r3, r7, #6
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009c22:	4b27      	ldr	r3, [pc, #156]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c24:	2280      	movs	r2, #128	@ 0x80
 8009c26:	0092      	lsls	r2, r2, #2
 8009c28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c2a:	4b25      	ldr	r3, [pc, #148]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c30:	4b23      	ldr	r3, [pc, #140]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009c36:	4b22      	ldr	r3, [pc, #136]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c38:	4a22      	ldr	r2, [pc, #136]	@ (8009cc4 <Read_Charge_Status+0xb4>)
 8009c3a:	0019      	movs	r1, r3
 8009c3c:	0010      	movs	r0, r2
 8009c3e:	f00b ff43 	bl	8015ac8 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c42:	2380      	movs	r3, #128	@ 0x80
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4a1f      	ldr	r2, [pc, #124]	@ (8009cc4 <Read_Charge_Status+0xb4>)
 8009c48:	0019      	movs	r1, r3
 8009c4a:	0010      	movs	r0, r2
 8009c4c:	f00c f8ba 	bl	8015dc4 <HAL_GPIO_ReadPin>
 8009c50:	0003      	movs	r3, r0
 8009c52:	001a      	movs	r2, r3
 8009c54:	1dfb      	adds	r3, r7, #7
 8009c56:	1e51      	subs	r1, r2, #1
 8009c58:	418a      	sbcs	r2, r1
 8009c5a:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009c5c:	4b18      	ldr	r3, [pc, #96]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c5e:	2280      	movs	r2, #128	@ 0x80
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c64:	4b16      	ldr	r3, [pc, #88]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009c6a:	4b15      	ldr	r3, [pc, #84]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009c70:	4b13      	ldr	r3, [pc, #76]	@ (8009cc0 <Read_Charge_Status+0xb0>)
 8009c72:	4a14      	ldr	r2, [pc, #80]	@ (8009cc4 <Read_Charge_Status+0xb4>)
 8009c74:	0019      	movs	r1, r3
 8009c76:	0010      	movs	r0, r2
 8009c78:	f00b ff26 	bl	8015ac8 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c7c:	2380      	movs	r3, #128	@ 0x80
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4a10      	ldr	r2, [pc, #64]	@ (8009cc4 <Read_Charge_Status+0xb4>)
 8009c82:	0019      	movs	r1, r3
 8009c84:	0010      	movs	r0, r2
 8009c86:	f00c f89d 	bl	8015dc4 <HAL_GPIO_ReadPin>
 8009c8a:	0003      	movs	r3, r0
 8009c8c:	001a      	movs	r2, r3
 8009c8e:	1dbb      	adds	r3, r7, #6
 8009c90:	1e51      	subs	r1, r2, #1
 8009c92:	418a      	sbcs	r2, r1
 8009c94:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009c96:	1dfb      	adds	r3, r7, #7
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4053      	eors	r3, r2
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e006      	b.n	8009cb6 <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009ca8:	1dbb      	adds	r3, r7, #6
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e000      	b.n	8009cb6 <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	0018      	movs	r0, r3
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	b002      	add	sp, #8
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	46c0      	nop			@ (mov r8, r8)
 8009cc0:	20000e20 	.word	0x20000e20
 8009cc4:	50000800 	.word	0x50000800

08009cc8 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009ccc:	2380      	movs	r3, #128	@ 0x80
 8009cce:	021a      	lsls	r2, r3, #8
 8009cd0:	23a0      	movs	r3, #160	@ 0xa0
 8009cd2:	05db      	lsls	r3, r3, #23
 8009cd4:	0011      	movs	r1, r2
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	f00c f874 	bl	8015dc4 <HAL_GPIO_ReadPin>
 8009cdc:	0003      	movs	r3, r0
 8009cde:	1e5a      	subs	r2, r3, #1
 8009ce0:	4193      	sbcs	r3, r2
 8009ce2:	b2db      	uxtb	r3, r3
}
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009cf0:	4b05      	ldr	r3, [pc, #20]	@ (8009d08 <UserButton_Pressed+0x1c>)
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f00c f865 	bl	8015dc4 <HAL_GPIO_ReadPin>
 8009cfa:	0003      	movs	r3, r0
 8009cfc:	425a      	negs	r2, r3
 8009cfe:	4153      	adcs	r3, r2
 8009d00:	b2db      	uxtb	r3, r3
}
 8009d02:	0018      	movs	r0, r3
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	50000c00 	.word	0x50000c00

08009d0c <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009d14:	4b08      	ldr	r3, [pc, #32]	@ (8009d38 <getUptime+0x2c>)
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	001a      	movs	r2, r3
 8009d1a:	4b07      	ldr	r3, [pc, #28]	@ (8009d38 <getUptime+0x2c>)
 8009d1c:	789b      	ldrb	r3, [r3, #2]
 8009d1e:	001c      	movs	r4, r3
 8009d20:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <getUptime+0x2c>)
 8009d22:	78db      	ldrb	r3, [r3, #3]
 8009d24:	4905      	ldr	r1, [pc, #20]	@ (8009d3c <getUptime+0x30>)
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	0023      	movs	r3, r4
 8009d2c:	f01c faa6 	bl	802627c <siprintf>
}
 8009d30:	46c0      	nop			@ (mov r8, r8)
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b003      	add	sp, #12
 8009d36:	bd90      	pop	{r4, r7, pc}
 8009d38:	20000e48 	.word	0x20000e48
 8009d3c:	0802bda0 	.word	0x0802bda0

08009d40 <getDate>:
#endif

uint8_t getDate() {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009d44:	4a05      	ldr	r2, [pc, #20]	@ (8009d5c <getDate+0x1c>)
 8009d46:	4b06      	ldr	r3, [pc, #24]	@ (8009d60 <getDate+0x20>)
 8009d48:	0011      	movs	r1, r2
 8009d4a:	0018      	movs	r0, r3
 8009d4c:	f000 fb66 	bl	800a41c <RTC_GetTime>
  return currentDate.Date;
 8009d50:	4b02      	ldr	r3, [pc, #8]	@ (8009d5c <getDate+0x1c>)
 8009d52:	789b      	ldrb	r3, [r3, #2]
}
 8009d54:	0018      	movs	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	46c0      	nop			@ (mov r8, r8)
 8009d5c:	20000e68 	.word	0x20000e68
 8009d60:	20000e54 	.word	0x20000e54

08009d64 <showUpTime>:

void showUpTime() {
 8009d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d66:	46ce      	mov	lr, r9
 8009d68:	4647      	mov	r7, r8
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b087      	sub	sp, #28
 8009d6e:	af06      	add	r7, sp, #24
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d70:	4b17      	ldr	r3, [pc, #92]	@ (8009dd0 <showUpTime+0x6c>)
 8009d72:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d74:	4698      	mov	r8, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d76:	4b16      	ldr	r3, [pc, #88]	@ (8009dd0 <showUpTime+0x6c>)
 8009d78:	785b      	ldrb	r3, [r3, #1]
 8009d7a:	1e5a      	subs	r2, r3, #1
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d7c:	4b15      	ldr	r3, [pc, #84]	@ (8009dd4 <showUpTime+0x70>)
 8009d7e:	0092      	lsls	r2, r2, #2
 8009d80:	58d2      	ldr	r2, [r2, r3]
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d82:	4b13      	ldr	r3, [pc, #76]	@ (8009dd0 <showUpTime+0x6c>)
 8009d84:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d86:	4699      	mov	r9, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d88:	4b13      	ldr	r3, [pc, #76]	@ (8009dd8 <showUpTime+0x74>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d8c:	0019      	movs	r1, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d8e:	4b12      	ldr	r3, [pc, #72]	@ (8009dd8 <showUpTime+0x74>)
 8009d90:	785b      	ldrb	r3, [r3, #1]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d92:	001c      	movs	r4, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009d94:	4b10      	ldr	r3, [pc, #64]	@ (8009dd8 <showUpTime+0x74>)
 8009d96:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d98:	001d      	movs	r5, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009d9a:	4b10      	ldr	r3, [pc, #64]	@ (8009ddc <showUpTime+0x78>)
 8009d9c:	881b      	ldrh	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d9e:	001e      	movs	r6, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009da0:	4b0e      	ldr	r3, [pc, #56]	@ (8009ddc <showUpTime+0x78>)
 8009da2:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009da4:	469c      	mov	ip, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009da6:	4b0d      	ldr	r3, [pc, #52]	@ (8009ddc <showUpTime+0x78>)
 8009da8:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009daa:	480d      	ldr	r0, [pc, #52]	@ (8009de0 <showUpTime+0x7c>)
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	4663      	mov	r3, ip
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	9603      	str	r6, [sp, #12]
 8009db4:	9502      	str	r5, [sp, #8]
 8009db6:	9401      	str	r4, [sp, #4]
 8009db8:	9100      	str	r1, [sp, #0]
 8009dba:	464b      	mov	r3, r9
 8009dbc:	4641      	mov	r1, r8
 8009dbe:	f7fe fe4f 	bl	8008a60 <printf_USB>
}
 8009dc2:	46c0      	nop			@ (mov r8, r8)
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	b001      	add	sp, #4
 8009dc8:	bcc0      	pop	{r6, r7}
 8009dca:	46b9      	mov	r9, r7
 8009dcc:	46b0      	mov	r8, r6
 8009dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dd0:	20000e68 	.word	0x20000e68
 8009dd4:	2000005c 	.word	0x2000005c
 8009dd8:	20000e54 	.word	0x20000e54
 8009ddc:	20000e48 	.word	0x20000e48
 8009de0:	0802bdac 	.word	0x0802bdac

08009de4 <showTime>:

void showTime() {
 8009de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009de6:	46de      	mov	lr, fp
 8009de8:	4657      	mov	r7, sl
 8009dea:	464e      	mov	r6, r9
 8009dec:	4645      	mov	r5, r8
 8009dee:	b5e0      	push	{r5, r6, r7, lr}
 8009df0:	b08d      	sub	sp, #52	@ 0x34
 8009df2:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009df4:	4b41      	ldr	r3, [pc, #260]	@ (8009efc <showTime+0x118>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d100      	bne.n	8009dfe <showTime+0x1a>
 8009dfc:	e075      	b.n	8009eea <showTime+0x106>
    return;
  }
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009dfe:	4a40      	ldr	r2, [pc, #256]	@ (8009f00 <showTime+0x11c>)
 8009e00:	4b40      	ldr	r3, [pc, #256]	@ (8009f04 <showTime+0x120>)
 8009e02:	0011      	movs	r1, r2
 8009e04:	0018      	movs	r0, r3
 8009e06:	f000 fb09 	bl	800a41c <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8009f04 <showTime+0x120>)
 8009e0c:	781a      	ldrb	r2, [r3, #0]
 8009e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f08 <showTime+0x124>)
 8009e10:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009e12:	4b3b      	ldr	r3, [pc, #236]	@ (8009f00 <showTime+0x11c>)
 8009e14:	781a      	ldrb	r2, [r3, #0]
 8009e16:	4b3d      	ldr	r3, [pc, #244]	@ (8009f0c <showTime+0x128>)
 8009e18:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009e1a:	f000 f89b 	bl	8009f54 <UpdateSystemUptime>
  if (lastminute != currentTime.Minutes) {
 8009e1e:	4b39      	ldr	r3, [pc, #228]	@ (8009f04 <showTime+0x120>)
 8009e20:	785a      	ldrb	r2, [r3, #1]
 8009e22:	4b3b      	ldr	r3, [pc, #236]	@ (8009f10 <showTime+0x12c>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d039      	beq.n	8009e9e <showTime+0xba>
    lastminute = currentTime.Minutes;
 8009e2a:	4b36      	ldr	r3, [pc, #216]	@ (8009f04 <showTime+0x120>)
 8009e2c:	785a      	ldrb	r2, [r3, #1]
 8009e2e:	4b38      	ldr	r3, [pc, #224]	@ (8009f10 <showTime+0x12c>)
 8009e30:	701a      	strb	r2, [r3, #0]
    Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009e32:	4b33      	ldr	r3, [pc, #204]	@ (8009f00 <showTime+0x11c>)
 8009e34:	789b      	ldrb	r3, [r3, #2]
 8009e36:	469b      	mov	fp, r3
 8009e38:	4b31      	ldr	r3, [pc, #196]	@ (8009f00 <showTime+0x11c>)
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	1e5a      	subs	r2, r3, #1
 8009e3e:	4b35      	ldr	r3, [pc, #212]	@ (8009f14 <showTime+0x130>)
 8009e40:	0092      	lsls	r2, r2, #2
 8009e42:	58d3      	ldr	r3, [r2, r3]
 8009e44:	607b      	str	r3, [r7, #4]
 8009e46:	4a2e      	ldr	r2, [pc, #184]	@ (8009f00 <showTime+0x11c>)
 8009e48:	78d2      	ldrb	r2, [r2, #3]
 8009e4a:	0010      	movs	r0, r2
 8009e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8009f04 <showTime+0x120>)
 8009e4e:	7812      	ldrb	r2, [r2, #0]
 8009e50:	0014      	movs	r4, r2
 8009e52:	4a2c      	ldr	r2, [pc, #176]	@ (8009f04 <showTime+0x120>)
 8009e54:	7852      	ldrb	r2, [r2, #1]
 8009e56:	0015      	movs	r5, r2
 8009e58:	4a2a      	ldr	r2, [pc, #168]	@ (8009f04 <showTime+0x120>)
 8009e5a:	7892      	ldrb	r2, [r2, #2]
 8009e5c:	0016      	movs	r6, r2
 8009e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8009f18 <showTime+0x134>)
 8009e60:	8812      	ldrh	r2, [r2, #0]
 8009e62:	4694      	mov	ip, r2
 8009e64:	4a2c      	ldr	r2, [pc, #176]	@ (8009f18 <showTime+0x134>)
 8009e66:	7892      	ldrb	r2, [r2, #2]
 8009e68:	4690      	mov	r8, r2
 8009e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8009f18 <showTime+0x134>)
 8009e6c:	78d2      	ldrb	r2, [r2, #3]
 8009e6e:	4691      	mov	r9, r2
 8009e70:	4a29      	ldr	r2, [pc, #164]	@ (8009f18 <showTime+0x134>)
 8009e72:	7912      	ldrb	r2, [r2, #4]
 8009e74:	4692      	mov	sl, r2
 8009e76:	4a29      	ldr	r2, [pc, #164]	@ (8009f1c <showTime+0x138>)
 8009e78:	4929      	ldr	r1, [pc, #164]	@ (8009f20 <showTime+0x13c>)
 8009e7a:	4653      	mov	r3, sl
 8009e7c:	9308      	str	r3, [sp, #32]
 8009e7e:	464b      	mov	r3, r9
 8009e80:	9307      	str	r3, [sp, #28]
 8009e82:	4643      	mov	r3, r8
 8009e84:	9306      	str	r3, [sp, #24]
 8009e86:	4663      	mov	r3, ip
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	9604      	str	r6, [sp, #16]
 8009e8c:	9503      	str	r5, [sp, #12]
 8009e8e:	9402      	str	r4, [sp, #8]
 8009e90:	9001      	str	r0, [sp, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	465b      	mov	r3, fp
 8009e98:	2002      	movs	r0, #2
 8009e9a:	f009 ffc5 	bl	8013e28 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  }
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8009f0c <showTime+0x128>)
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	2b07      	cmp	r3, #7
 8009ea4:	d122      	bne.n	8009eec <showTime+0x108>
 8009ea6:	4b18      	ldr	r3, [pc, #96]	@ (8009f08 <showTime+0x124>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d11e      	bne.n	8009eec <showTime+0x108>
 8009eae:	4b15      	ldr	r3, [pc, #84]	@ (8009f04 <showTime+0x120>)
 8009eb0:	785b      	ldrb	r3, [r3, #1]
 8009eb2:	2b10      	cmp	r3, #16
 8009eb4:	d81a      	bhi.n	8009eec <showTime+0x108>
 8009eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8009f24 <showTime+0x140>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4053      	eors	r3, r2
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d013      	beq.n	8009eec <showTime+0x108>
 8009ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f00 <showTime+0x11c>)
 8009ec6:	789b      	ldrb	r3, [r3, #2]
 8009ec8:	2b18      	cmp	r3, #24
 8009eca:	d90f      	bls.n	8009eec <showTime+0x108>
 8009ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <showTime+0x11c>)
 8009ece:	785b      	ldrb	r3, [r3, #1]
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d003      	beq.n	8009edc <showTime+0xf8>
 8009ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f00 <showTime+0x11c>)
 8009ed6:	785b      	ldrb	r3, [r3, #1]
 8009ed8:	2b0a      	cmp	r3, #10
 8009eda:	d107      	bne.n	8009eec <showTime+0x108>
    dstchkd = true;
 8009edc:	4b11      	ldr	r3, [pc, #68]	@ (8009f24 <showTime+0x140>)
 8009ede:	2201      	movs	r2, #1
 8009ee0:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	f7fa fd1a 	bl	800491c <setESPTimeStamp>
 8009ee8:	e000      	b.n	8009eec <showTime+0x108>
    return;
 8009eea:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009eec:	46bd      	mov	sp, r7
 8009eee:	b003      	add	sp, #12
 8009ef0:	bcf0      	pop	{r4, r5, r6, r7}
 8009ef2:	46bb      	mov	fp, r7
 8009ef4:	46b2      	mov	sl, r6
 8009ef6:	46a9      	mov	r9, r5
 8009ef8:	46a0      	mov	r8, r4
 8009efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efc:	20000e44 	.word	0x20000e44
 8009f00:	20000e68 	.word	0x20000e68
 8009f04:	20000e54 	.word	0x20000e54
 8009f08:	20000e42 	.word	0x20000e42
 8009f0c:	20000e43 	.word	0x20000e43
 8009f10:	20000e41 	.word	0x20000e41
 8009f14:	2000005c 	.word	0x2000005c
 8009f18:	20000e48 	.word	0x20000e48
 8009f1c:	0802be00 	.word	0x0802be00
 8009f20:	0802be58 	.word	0x0802be58
 8009f24:	20000e40 	.word	0x20000e40

08009f28 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009f2c:	4a07      	ldr	r2, [pc, #28]	@ (8009f4c <calculateNextNTPTime+0x24>)
 8009f2e:	4b08      	ldr	r3, [pc, #32]	@ (8009f50 <calculateNextNTPTime+0x28>)
 8009f30:	0011      	movs	r1, r2
 8009f32:	0018      	movs	r0, r3
 8009f34:	f000 fa72 	bl	800a41c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009f38:	4a05      	ldr	r2, [pc, #20]	@ (8009f50 <calculateNextNTPTime+0x28>)
 8009f3a:	4b04      	ldr	r3, [pc, #16]	@ (8009f4c <calculateNextNTPTime+0x24>)
 8009f3c:	0011      	movs	r1, r2
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f000 fc7a 	bl	800a838 <makeTime>
 8009f44:	0003      	movs	r3, r0
}
 8009f46:	0018      	movs	r0, r3
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000e68 	.word	0x20000e68
 8009f50:	20000e54 	.word	0x20000e54

08009f54 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009f5a:	4a25      	ldr	r2, [pc, #148]	@ (8009ff0 <UpdateSystemUptime+0x9c>)
 8009f5c:	4b25      	ldr	r3, [pc, #148]	@ (8009ff4 <UpdateSystemUptime+0xa0>)
 8009f5e:	0011      	movs	r1, r2
 8009f60:	0018      	movs	r0, r3
 8009f62:	f000 fa5b 	bl	800a41c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009f66:	4a23      	ldr	r2, [pc, #140]	@ (8009ff4 <UpdateSystemUptime+0xa0>)
 8009f68:	4b21      	ldr	r3, [pc, #132]	@ (8009ff0 <UpdateSystemUptime+0x9c>)
 8009f6a:	0011      	movs	r1, r2
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f000 fc63 	bl	800a838 <makeTime>
 8009f72:	0002      	movs	r2, r0
 8009f74:	4b20      	ldr	r3, [pc, #128]	@ (8009ff8 <UpdateSystemUptime+0xa4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	607b      	str	r3, [r7, #4]
  time = uxUptime;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	603b      	str	r3, [r7, #0]
  myUpTime.Seconds = time % 60;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	213c      	movs	r1, #60	@ 0x3c
 8009f84:	0018      	movs	r0, r3
 8009f86:	f7f6 f993 	bl	80002b0 <__aeabi_uidivmod>
 8009f8a:	000b      	movs	r3, r1
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ffc <UpdateSystemUptime+0xa8>)
 8009f90:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	213c      	movs	r1, #60	@ 0x3c
 8009f96:	0018      	movs	r0, r3
 8009f98:	f7f6 f904 	bl	80001a4 <__udivsi3>
 8009f9c:	0003      	movs	r3, r0
 8009f9e:	603b      	str	r3, [r7, #0]
  myUpTime.Minutes = time % 60;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	213c      	movs	r1, #60	@ 0x3c
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f7f6 f983 	bl	80002b0 <__aeabi_uidivmod>
 8009faa:	000b      	movs	r3, r1
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	4b13      	ldr	r3, [pc, #76]	@ (8009ffc <UpdateSystemUptime+0xa8>)
 8009fb0:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	213c      	movs	r1, #60	@ 0x3c
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f7f6 f8f4 	bl	80001a4 <__udivsi3>
 8009fbc:	0003      	movs	r3, r0
 8009fbe:	603b      	str	r3, [r7, #0]
  myUpTime.Hour = time % 24;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2118      	movs	r1, #24
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f7f6 f973 	bl	80002b0 <__aeabi_uidivmod>
 8009fca:	000b      	movs	r3, r1
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	4b0b      	ldr	r3, [pc, #44]	@ (8009ffc <UpdateSystemUptime+0xa8>)
 8009fd0:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2118      	movs	r1, #24
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	f7f6 f8e4 	bl	80001a4 <__udivsi3>
 8009fdc:	0003      	movs	r3, r0
 8009fde:	603b      	str	r3, [r7, #0]
  myUpTime.Day = time; // now it is days
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	4b05      	ldr	r3, [pc, #20]	@ (8009ffc <UpdateSystemUptime+0xa8>)
 8009fe6:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009fe8:	46c0      	nop			@ (mov r8, r8)
 8009fea:	46bd      	mov	sp, r7
 8009fec:	b002      	add	sp, #8
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20000e68 	.word	0x20000e68
 8009ff4:	20000e54 	.word	0x20000e54
 8009ff8:	20000e44 	.word	0x20000e44
 8009ffc:	20000e48 	.word	0x20000e48

0800a000 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	0008      	movs	r0, r1
 800a00a:	0011      	movs	r1, r2
 800a00c:	1cfb      	adds	r3, r7, #3
 800a00e:	1c02      	adds	r2, r0, #0
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	1cbb      	adds	r3, r7, #2
 800a014:	1c0a      	adds	r2, r1, #0
 800a016:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800a018:	230e      	movs	r3, #14
 800a01a:	18fb      	adds	r3, r7, r3
 800a01c:	2200      	movs	r2, #0
 800a01e:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a020:	230f      	movs	r3, #15
 800a022:	18fb      	adds	r3, r7, r3
 800a024:	1cfa      	adds	r2, r7, #3
 800a026:	7812      	ldrb	r2, [r2, #0]
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e015      	b.n	800a058 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800a02c:	200f      	movs	r0, #15
 800a02e:	183b      	adds	r3, r7, r0
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	18d2      	adds	r2, r2, r3
 800a036:	240e      	movs	r4, #14
 800a038:	193b      	adds	r3, r7, r4
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	7811      	ldrb	r1, [r2, #0]
 800a03e:	2208      	movs	r2, #8
 800a040:	18ba      	adds	r2, r7, r2
 800a042:	54d1      	strb	r1, [r2, r3]
    pos++;
 800a044:	193b      	adds	r3, r7, r4
 800a046:	781a      	ldrb	r2, [r3, #0]
 800a048:	193b      	adds	r3, r7, r4
 800a04a:	3201      	adds	r2, #1
 800a04c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a04e:	183b      	adds	r3, r7, r0
 800a050:	781a      	ldrb	r2, [r3, #0]
 800a052:	183b      	adds	r3, r7, r0
 800a054:	3201      	adds	r2, #1
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	200f      	movs	r0, #15
 800a05a:	183a      	adds	r2, r7, r0
 800a05c:	1cbb      	adds	r3, r7, #2
 800a05e:	7812      	ldrb	r2, [r2, #0]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d9e2      	bls.n	800a02c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800a066:	230e      	movs	r3, #14
 800a068:	18fb      	adds	r3, r7, r3
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2208      	movs	r2, #8
 800a06e:	18ba      	adds	r2, r7, r2
 800a070:	2100      	movs	r1, #0
 800a072:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800a074:	1cfb      	adds	r3, r7, #3
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b13      	cmp	r3, #19
 800a07a:	d849      	bhi.n	800a110 <aBuff2int+0x110>
    if (start == 17) { //month
 800a07c:	1cfb      	adds	r3, r7, #3
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b11      	cmp	r3, #17
 800a082:	d122      	bne.n	800a0ca <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a084:	183b      	adds	r3, r7, r0
 800a086:	2200      	movs	r2, #0
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	e018      	b.n	800a0be <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a08c:	240f      	movs	r4, #15
 800a08e:	193b      	adds	r3, r7, r4
 800a090:	781a      	ldrb	r2, [r3, #0]
 800a092:	4b25      	ldr	r3, [pc, #148]	@ (800a128 <aBuff2int+0x128>)
 800a094:	0092      	lsls	r2, r2, #2
 800a096:	58d2      	ldr	r2, [r2, r3]
 800a098:	2308      	movs	r3, #8
 800a09a:	18fb      	adds	r3, r7, r3
 800a09c:	0011      	movs	r1, r2
 800a09e:	0018      	movs	r0, r3
 800a0a0:	f7f6 f85a 	bl	8000158 <strcmp>
 800a0a4:	1e03      	subs	r3, r0, #0
 800a0a6:	d104      	bne.n	800a0b2 <aBuff2int+0xb2>
          return i+1;
 800a0a8:	193b      	adds	r3, r7, r4
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	e035      	b.n	800a11e <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a0b2:	210f      	movs	r1, #15
 800a0b4:	187b      	adds	r3, r7, r1
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	187b      	adds	r3, r7, r1
 800a0ba:	3201      	adds	r2, #1
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	230f      	movs	r3, #15
 800a0c0:	18fb      	adds	r3, r7, r3
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b0b      	cmp	r3, #11
 800a0c6:	d9e1      	bls.n	800a08c <aBuff2int+0x8c>
 800a0c8:	e022      	b.n	800a110 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a0ca:	230f      	movs	r3, #15
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	e018      	b.n	800a106 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a0d4:	240f      	movs	r4, #15
 800a0d6:	193b      	adds	r3, r7, r4
 800a0d8:	781a      	ldrb	r2, [r3, #0]
 800a0da:	4b14      	ldr	r3, [pc, #80]	@ (800a12c <aBuff2int+0x12c>)
 800a0dc:	0092      	lsls	r2, r2, #2
 800a0de:	58d2      	ldr	r2, [r2, r3]
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	18fb      	adds	r3, r7, r3
 800a0e4:	0011      	movs	r1, r2
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	f7f6 f836 	bl	8000158 <strcmp>
 800a0ec:	1e03      	subs	r3, r0, #0
 800a0ee:	d104      	bne.n	800a0fa <aBuff2int+0xfa>
          return i+1;
 800a0f0:	193b      	adds	r3, r7, r4
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	e011      	b.n	800a11e <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a0fa:	210f      	movs	r1, #15
 800a0fc:	187b      	adds	r3, r7, r1
 800a0fe:	781a      	ldrb	r2, [r3, #0]
 800a100:	187b      	adds	r3, r7, r1
 800a102:	3201      	adds	r2, #1
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	230f      	movs	r3, #15
 800a108:	18fb      	adds	r3, r7, r3
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2b06      	cmp	r3, #6
 800a10e:	d9e1      	bls.n	800a0d4 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a110:	2308      	movs	r3, #8
 800a112:	18fb      	adds	r3, r7, r3
 800a114:	0018      	movs	r0, r3
 800a116:	f01a fc5c 	bl	80249d2 <atoi>
 800a11a:	0003      	movs	r3, r0
 800a11c:	b2db      	uxtb	r3, r3
}
 800a11e:	0018      	movs	r0, r3
 800a120:	46bd      	mov	sp, r7
 800a122:	b005      	add	sp, #20
 800a124:	bd90      	pop	{r4, r7, pc}
 800a126:	46c0      	nop			@ (mov r8, r8)
 800a128:	2000005c 	.word	0x2000005c
 800a12c:	20000040 	.word	0x20000040

0800a130 <ParseTime>:

void ParseTime(char* buffer) {
 800a130:	b590      	push	{r4, r7, lr}
 800a132:	b087      	sub	sp, #28
 800a134:	af02      	add	r7, sp, #8
 800a136:	6078      	str	r0, [r7, #4]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a138:	4a7b      	ldr	r2, [pc, #492]	@ (800a328 <ParseTime+0x1f8>)
 800a13a:	4b7c      	ldr	r3, [pc, #496]	@ (800a32c <ParseTime+0x1fc>)
 800a13c:	0011      	movs	r1, r2
 800a13e:	0018      	movs	r0, r3
 800a140:	f000 f96c 	bl	800a41c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2219      	movs	r2, #25
 800a148:	2118      	movs	r1, #24
 800a14a:	0018      	movs	r0, r3
 800a14c:	f7ff ff58 	bl	800a000 <aBuff2int>
 800a150:	0003      	movs	r3, r0
 800a152:	001a      	movs	r2, r3
 800a154:	4b75      	ldr	r3, [pc, #468]	@ (800a32c <ParseTime+0x1fc>)
 800a156:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	221c      	movs	r2, #28
 800a15c:	211b      	movs	r1, #27
 800a15e:	0018      	movs	r0, r3
 800a160:	f7ff ff4e 	bl	800a000 <aBuff2int>
 800a164:	0003      	movs	r3, r0
 800a166:	001a      	movs	r2, r3
 800a168:	4b70      	ldr	r3, [pc, #448]	@ (800a32c <ParseTime+0x1fc>)
 800a16a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	221f      	movs	r2, #31
 800a170:	211e      	movs	r1, #30
 800a172:	0018      	movs	r0, r3
 800a174:	f7ff ff44 	bl	800a000 <aBuff2int>
 800a178:	0003      	movs	r3, r0
 800a17a:	001a      	movs	r2, r3
 800a17c:	4b6b      	ldr	r3, [pc, #428]	@ (800a32c <ParseTime+0x1fc>)
 800a17e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2224      	movs	r2, #36	@ 0x24
 800a184:	2123      	movs	r1, #35	@ 0x23
 800a186:	0018      	movs	r0, r3
 800a188:	f7ff ff3a 	bl	800a000 <aBuff2int>
 800a18c:	0003      	movs	r3, r0
 800a18e:	001a      	movs	r2, r3
 800a190:	4b65      	ldr	r3, [pc, #404]	@ (800a328 <ParseTime+0x1f8>)
 800a192:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2213      	movs	r2, #19
 800a198:	2111      	movs	r1, #17
 800a19a:	0018      	movs	r0, r3
 800a19c:	f7ff ff30 	bl	800a000 <aBuff2int>
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	001a      	movs	r2, r3
 800a1a4:	4b60      	ldr	r3, [pc, #384]	@ (800a328 <ParseTime+0x1f8>)
 800a1a6:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2216      	movs	r2, #22
 800a1ac:	2115      	movs	r1, #21
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f7ff ff26 	bl	800a000 <aBuff2int>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	001a      	movs	r2, r3
 800a1b8:	4b5b      	ldr	r3, [pc, #364]	@ (800a328 <ParseTime+0x1f8>)
 800a1ba:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	220f      	movs	r2, #15
 800a1c0:	210d      	movs	r1, #13
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f7ff ff1c 	bl	800a000 <aBuff2int>
 800a1c8:	0003      	movs	r3, r0
 800a1ca:	001a      	movs	r2, r3
 800a1cc:	4b56      	ldr	r3, [pc, #344]	@ (800a328 <ParseTime+0x1f8>)
 800a1ce:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a1d0:	4b56      	ldr	r3, [pc, #344]	@ (800a32c <ParseTime+0x1fc>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	001c      	movs	r4, r3
 800a1d6:	4b55      	ldr	r3, [pc, #340]	@ (800a32c <ParseTime+0x1fc>)
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	0018      	movs	r0, r3
 800a1dc:	4b53      	ldr	r3, [pc, #332]	@ (800a32c <ParseTime+0x1fc>)
 800a1de:	789b      	ldrb	r3, [r3, #2]
 800a1e0:	4a53      	ldr	r2, [pc, #332]	@ (800a330 <ParseTime+0x200>)
 800a1e2:	4954      	ldr	r1, [pc, #336]	@ (800a334 <ParseTime+0x204>)
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	9000      	str	r0, [sp, #0]
 800a1e8:	0023      	movs	r3, r4
 800a1ea:	2003      	movs	r0, #3
 800a1ec:	f009 fe1c 	bl	8013e28 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a1f0:	4b4d      	ldr	r3, [pc, #308]	@ (800a328 <ParseTime+0x1f8>)
 800a1f2:	789b      	ldrb	r3, [r3, #2]
 800a1f4:	001c      	movs	r4, r3
 800a1f6:	4b4c      	ldr	r3, [pc, #304]	@ (800a328 <ParseTime+0x1f8>)
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	4b4a      	ldr	r3, [pc, #296]	@ (800a328 <ParseTime+0x1f8>)
 800a1fe:	78db      	ldrb	r3, [r3, #3]
 800a200:	4a4d      	ldr	r2, [pc, #308]	@ (800a338 <ParseTime+0x208>)
 800a202:	494c      	ldr	r1, [pc, #304]	@ (800a334 <ParseTime+0x204>)
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	9000      	str	r0, [sp, #0]
 800a208:	0023      	movs	r3, r4
 800a20a:	2003      	movs	r0, #3
 800a20c:	f009 fe0c 	bl	8013e28 <CreateLine>
  RTC_SetTime(&currentTime);
 800a210:	4b46      	ldr	r3, [pc, #280]	@ (800a32c <ParseTime+0x1fc>)
 800a212:	0018      	movs	r0, r3
 800a214:	f000 f89e 	bl	800a354 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a218:	4b43      	ldr	r3, [pc, #268]	@ (800a328 <ParseTime+0x1f8>)
 800a21a:	0018      	movs	r0, r3
 800a21c:	f000 f8c0 	bl	800a3a0 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a220:	230f      	movs	r3, #15
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	2200      	movs	r2, #0
 800a226:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a228:	4b3f      	ldr	r3, [pc, #252]	@ (800a328 <ParseTime+0x1f8>)
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	60bb      	str	r3, [r7, #8]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b02      	cmp	r3, #2
 800a232:	dd04      	ble.n	800a23e <ParseTime+0x10e>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b0a      	cmp	r3, #10
 800a238:	dc01      	bgt.n	800a23e <ParseTime+0x10e>
 800a23a:	2201      	movs	r2, #1
 800a23c:	e000      	b.n	800a240 <ParseTime+0x110>
 800a23e:	2200      	movs	r2, #0
 800a240:	200f      	movs	r0, #15
 800a242:	183b      	adds	r3, r7, r0
 800a244:	701a      	strb	r2, [r3, #0]
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	2101      	movs	r1, #1
 800a24a:	400a      	ands	r2, r1
 800a24c:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a24e:	0002      	movs	r2, r0
 800a250:	18bb      	adds	r3, r7, r2
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01d      	beq.n	800a294 <ParseTime+0x164>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d10b      	bne.n	800a276 <ParseTime+0x146>
 800a25e:	4b32      	ldr	r3, [pc, #200]	@ (800a328 <ParseTime+0x1f8>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b07      	cmp	r3, #7
 800a264:	d107      	bne.n	800a276 <ParseTime+0x146>
 800a266:	4b30      	ldr	r3, [pc, #192]	@ (800a328 <ParseTime+0x1f8>)
 800a268:	789b      	ldrb	r3, [r3, #2]
 800a26a:	2b18      	cmp	r3, #24
 800a26c:	d803      	bhi.n	800a276 <ParseTime+0x146>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a26e:	18bb      	adds	r3, r7, r2
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	e00e      	b.n	800a294 <ParseTime+0x164>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b0a      	cmp	r3, #10
 800a27a:	d10b      	bne.n	800a294 <ParseTime+0x164>
 800a27c:	4b2a      	ldr	r3, [pc, #168]	@ (800a328 <ParseTime+0x1f8>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b07      	cmp	r3, #7
 800a282:	d107      	bne.n	800a294 <ParseTime+0x164>
 800a284:	4b28      	ldr	r3, [pc, #160]	@ (800a328 <ParseTime+0x1f8>)
 800a286:	789b      	ldrb	r3, [r3, #2]
 800a288:	2b18      	cmp	r3, #24
 800a28a:	d803      	bhi.n	800a294 <ParseTime+0x164>
    {
        dst = false;
 800a28c:	230f      	movs	r3, #15
 800a28e:	18fb      	adds	r3, r7, r3
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a294:	230f      	movs	r3, #15
 800a296:	18fb      	adds	r3, r7, r3
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d02a      	beq.n	800a2f4 <ParseTime+0x1c4>
    Info("Daylight Saving Time active");
 800a29e:	4a27      	ldr	r2, [pc, #156]	@ (800a33c <ParseTime+0x20c>)
 800a2a0:	4b27      	ldr	r3, [pc, #156]	@ (800a340 <ParseTime+0x210>)
 800a2a2:	0019      	movs	r1, r3
 800a2a4:	2002      	movs	r0, #2
 800a2a6:	f009 fdbf 	bl	8013e28 <CreateLine>
    HAL_Delay(1000);
 800a2aa:	23fa      	movs	r3, #250	@ 0xfa
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	f00a fb3c 	bl	801492c <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a2b4:	4b23      	ldr	r3, [pc, #140]	@ (800a344 <ParseTime+0x214>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f012 f9c9 	bl	801c650 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a2be:	23fa      	movs	r3, #250	@ 0xfa
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f00a fb32 	bl	801492c <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a2c8:	4a17      	ldr	r2, [pc, #92]	@ (800a328 <ParseTime+0x1f8>)
 800a2ca:	4b18      	ldr	r3, [pc, #96]	@ (800a32c <ParseTime+0x1fc>)
 800a2cc:	0011      	movs	r1, r2
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f000 f8a4 	bl	800a41c <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a2d4:	4b15      	ldr	r3, [pc, #84]	@ (800a32c <ParseTime+0x1fc>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	001c      	movs	r4, r3
 800a2da:	4b14      	ldr	r3, [pc, #80]	@ (800a32c <ParseTime+0x1fc>)
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	0018      	movs	r0, r3
 800a2e0:	4b12      	ldr	r3, [pc, #72]	@ (800a32c <ParseTime+0x1fc>)
 800a2e2:	789b      	ldrb	r3, [r3, #2]
 800a2e4:	4a18      	ldr	r2, [pc, #96]	@ (800a348 <ParseTime+0x218>)
 800a2e6:	4913      	ldr	r1, [pc, #76]	@ (800a334 <ParseTime+0x204>)
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	9000      	str	r0, [sp, #0]
 800a2ec:	0023      	movs	r3, r4
 800a2ee:	2003      	movs	r0, #3
 800a2f0:	f009 fd9a 	bl	8013e28 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <ParseTime+0x1f8>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d104      	bne.n	800a306 <ParseTime+0x1d6>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a2fc:	f004 fa2e 	bl	800e75c <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a300:	4b12      	ldr	r3, [pc, #72]	@ (800a34c <ParseTime+0x21c>)
 800a302:	2200      	movs	r2, #0
 800a304:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a306:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <ParseTime+0x220>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d108      	bne.n	800a320 <ParseTime+0x1f0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a30e:	4a07      	ldr	r2, [pc, #28]	@ (800a32c <ParseTime+0x1fc>)
 800a310:	4b05      	ldr	r3, [pc, #20]	@ (800a328 <ParseTime+0x1f8>)
 800a312:	0011      	movs	r1, r2
 800a314:	0018      	movs	r0, r3
 800a316:	f000 fa8f 	bl	800a838 <makeTime>
 800a31a:	0002      	movs	r2, r0
 800a31c:	4b0c      	ldr	r3, [pc, #48]	@ (800a350 <ParseTime+0x220>)
 800a31e:	601a      	str	r2, [r3, #0]
  }
}
 800a320:	46c0      	nop			@ (mov r8, r8)
 800a322:	46bd      	mov	sp, r7
 800a324:	b005      	add	sp, #20
 800a326:	bd90      	pop	{r4, r7, pc}
 800a328:	20000e68 	.word	0x20000e68
 800a32c:	20000e54 	.word	0x20000e54
 800a330:	0802be5c 	.word	0x0802be5c
 800a334:	0802be94 	.word	0x0802be94
 800a338:	0802be98 	.word	0x0802be98
 800a33c:	0802becc 	.word	0x0802becc
 800a340:	0802be58 	.word	0x0802be58
 800a344:	20000e50 	.word	0x20000e50
 800a348:	0802bee8 	.word	0x0802bee8
 800a34c:	20000e40 	.word	0x20000e40
 800a350:	20000e44 	.word	0x20000e44

0800a354 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a36e:	4b09      	ldr	r3, [pc, #36]	@ (800a394 <RTC_SetTime+0x40>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	0018      	movs	r0, r3
 800a378:	f011 ff56 	bl	801c228 <HAL_RTC_SetTime>
 800a37c:	1e03      	subs	r3, r0, #0
 800a37e:	d005      	beq.n	800a38c <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a380:	4a05      	ldr	r2, [pc, #20]	@ (800a398 <RTC_SetTime+0x44>)
 800a382:	4b06      	ldr	r3, [pc, #24]	@ (800a39c <RTC_SetTime+0x48>)
 800a384:	0019      	movs	r1, r3
 800a386:	2001      	movs	r0, #1
 800a388:	f009 fd4e 	bl	8013e28 <CreateLine>
    }
}
 800a38c:	46c0      	nop			@ (mov r8, r8)
 800a38e:	46bd      	mov	sp, r7
 800a390:	b002      	add	sp, #8
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000e50 	.word	0x20000e50
 800a398:	0802bf1c 	.word	0x0802bf1c
 800a39c:	0802bf38 	.word	0x0802bf38

0800a3a0 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a3a8:	4b16      	ldr	r3, [pc, #88]	@ (800a404 <RTC_SetDate+0x64>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f012 f841 	bl	801c438 <HAL_RTC_SetDate>
 800a3b6:	1e03      	subs	r3, r0, #0
 800a3b8:	d005      	beq.n	800a3c6 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a3ba:	4a13      	ldr	r2, [pc, #76]	@ (800a408 <RTC_SetDate+0x68>)
 800a3bc:	4b13      	ldr	r3, [pc, #76]	@ (800a40c <RTC_SetDate+0x6c>)
 800a3be:	0019      	movs	r1, r3
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	f009 fd31 	bl	8013e28 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a404 <RTC_SetDate+0x64>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f012 fb97 	bl	801cb00 <HAL_RTCEx_BKUPRead>
 800a3d2:	0003      	movs	r3, r0
 800a3d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a410 <RTC_SetDate+0x70>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d010      	beq.n	800a3fc <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a3da:	4a0e      	ldr	r2, [pc, #56]	@ (800a414 <RTC_SetDate+0x74>)
 800a3dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a418 <RTC_SetDate+0x78>)
 800a3de:	0019      	movs	r1, r3
 800a3e0:	2003      	movs	r0, #3
 800a3e2:	f009 fd21 	bl	8013e28 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a3e6:	f010 feb5 	bl	801b154 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a3ea:	4b06      	ldr	r3, [pc, #24]	@ (800a404 <RTC_SetDate+0x64>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a08      	ldr	r2, [pc, #32]	@ (800a410 <RTC_SetDate+0x70>)
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f012 fb6c 	bl	801cad0 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a3f8:	f010 feba 	bl	801b170 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a3fc:	46c0      	nop			@ (mov r8, r8)
 800a3fe:	46bd      	mov	sp, r7
 800a400:	b002      	add	sp, #8
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20000e50 	.word	0x20000e50
 800a408:	0802bf3c 	.word	0x0802bf3c
 800a40c:	0802bf38 	.word	0x0802bf38
 800a410:	0000bebe 	.word	0x0000bebe
 800a414:	0802bf58 	.word	0x0802bf58
 800a418:	0802be94 	.word	0x0802be94

0800a41c <RTC_GetTime>:

void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a41c:	b590      	push	{r4, r7, lr}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a426:	240f      	movs	r4, #15
 800a428:	193b      	adds	r3, r7, r4
 800a42a:	2201      	movs	r2, #1
 800a42c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a42e:	230e      	movs	r3, #14
 800a430:	18fb      	adds	r3, r7, r3
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
// Battery_Status status;
//  status = powerCheck();
//  if ( status == BATTERY_CRITICAL) {
  if (batteryCharge  < 3.77) {
 800a436:	4b31      	ldr	r3, [pc, #196]	@ (800a4fc <RTC_GetTime+0xe0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	1c18      	adds	r0, r3, #0
 800a43c:	f7f9 fa2a 	bl	8003894 <__aeabi_f2d>
 800a440:	4a2f      	ldr	r2, [pc, #188]	@ (800a500 <RTC_GetTime+0xe4>)
 800a442:	4b30      	ldr	r3, [pc, #192]	@ (800a504 <RTC_GetTime+0xe8>)
 800a444:	f7f6 f83a 	bl	80004bc <__aeabi_dcmplt>
 800a448:	1e03      	subs	r3, r0, #0
 800a44a:	d004      	beq.n	800a456 <RTC_GetTime+0x3a>
    //    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a44c:	193b      	adds	r3, r7, r4
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	193b      	adds	r3, r7, r4
 800a452:	3201      	adds	r2, #1
 800a454:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a456:	230d      	movs	r3, #13
 800a458:	18fb      	adds	r3, r7, r3
 800a45a:	2200      	movs	r2, #0
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	e03f      	b.n	800a4e0 <RTC_GetTime+0xc4>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a460:	4b29      	ldr	r3, [pc, #164]	@ (800a508 <RTC_GetTime+0xec>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6879      	ldr	r1, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	0018      	movs	r0, r3
 800a46a:	f011 ff87 	bl	801c37c <HAL_RTC_GetTime>
 800a46e:	1e03      	subs	r3, r0, #0
 800a470:	d005      	beq.n	800a47e <RTC_GetTime+0x62>
      Error("Error getting time from RTC");
 800a472:	4a26      	ldr	r2, [pc, #152]	@ (800a50c <RTC_GetTime+0xf0>)
 800a474:	4b26      	ldr	r3, [pc, #152]	@ (800a510 <RTC_GetTime+0xf4>)
 800a476:	0019      	movs	r1, r3
 800a478:	2001      	movs	r0, #1
 800a47a:	f009 fcd5 	bl	8013e28 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a47e:	4b22      	ldr	r3, [pc, #136]	@ (800a508 <RTC_GetTime+0xec>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	2200      	movs	r2, #0
 800a486:	0018      	movs	r0, r3
 800a488:	f012 f86a 	bl	801c560 <HAL_RTC_GetDate>
 800a48c:	1e03      	subs	r3, r0, #0
 800a48e:	d005      	beq.n	800a49c <RTC_GetTime+0x80>
      Error("Error getting date from RTC");
 800a490:	4a20      	ldr	r2, [pc, #128]	@ (800a514 <RTC_GetTime+0xf8>)
 800a492:	4b1f      	ldr	r3, [pc, #124]	@ (800a510 <RTC_GetTime+0xf4>)
 800a494:	0019      	movs	r1, r3
 800a496:	2001      	movs	r0, #1
 800a498:	f009 fcc6 	bl	8013e28 <CreateLine>
    }
//    if ( status == BATTERY_CRITICAL) {
    if (batteryCharge  < 3.77) {
 800a49c:	4b17      	ldr	r3, [pc, #92]	@ (800a4fc <RTC_GetTime+0xe0>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	1c18      	adds	r0, r3, #0
 800a4a2:	f7f9 f9f7 	bl	8003894 <__aeabi_f2d>
 800a4a6:	4a16      	ldr	r2, [pc, #88]	@ (800a500 <RTC_GetTime+0xe4>)
 800a4a8:	4b16      	ldr	r3, [pc, #88]	@ (800a504 <RTC_GetTime+0xe8>)
 800a4aa:	f7f6 f807 	bl	80004bc <__aeabi_dcmplt>
 800a4ae:	1e03      	subs	r3, r0, #0
 800a4b0:	d010      	beq.n	800a4d4 <RTC_GetTime+0xb8>
      if (prevValue != gTime->Hours) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	210e      	movs	r1, #14
 800a4b8:	187a      	adds	r2, r7, r1
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d018      	beq.n	800a4f2 <RTC_GetTime+0xd6>
        prevValue = gTime->Hours;
 800a4c0:	187b      	adds	r3, r7, r1
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	701a      	strb	r2, [r3, #0]
        t++;
 800a4c8:	210f      	movs	r1, #15
 800a4ca:	187b      	adds	r3, r7, r1
 800a4cc:	781a      	ldrb	r2, [r3, #0]
 800a4ce:	187b      	adds	r3, r7, r1
 800a4d0:	3201      	adds	r2, #1
 800a4d2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a4d4:	210d      	movs	r1, #13
 800a4d6:	187b      	adds	r3, r7, r1
 800a4d8:	781a      	ldrb	r2, [r3, #0]
 800a4da:	187b      	adds	r3, r7, r1
 800a4dc:	3201      	adds	r2, #1
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	230d      	movs	r3, #13
 800a4e2:	18fa      	adds	r2, r7, r3
 800a4e4:	230f      	movs	r3, #15
 800a4e6:	18fb      	adds	r3, r7, r3
 800a4e8:	7812      	ldrb	r2, [r2, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d3b7      	bcc.n	800a460 <RTC_GetTime+0x44>
 800a4f0:	e000      	b.n	800a4f4 <RTC_GetTime+0xd8>
      }
      else {
        return;
 800a4f2:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	b005      	add	sp, #20
 800a4f8:	bd90      	pop	{r4, r7, pc}
 800a4fa:	46c0      	nop			@ (mov r8, r8)
 800a4fc:	20002160 	.word	0x20002160
 800a500:	c28f5c29 	.word	0xc28f5c29
 800a504:	400e28f5 	.word	0x400e28f5
 800a508:	20000e50 	.word	0x20000e50
 800a50c:	0802bf70 	.word	0x0802bf70
 800a510:	0802bf38 	.word	0x0802bf38
 800a514:	0802bf8c 	.word	0x0802bf8c

0800a518 <getPosixTime>:

// Functie om de tijd uit te lezen
uint32_t getPosixTime(void) {
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a51c:	4a07      	ldr	r2, [pc, #28]	@ (800a53c <getPosixTime+0x24>)
 800a51e:	4b08      	ldr	r3, [pc, #32]	@ (800a540 <getPosixTime+0x28>)
 800a520:	0011      	movs	r1, r2
 800a522:	0018      	movs	r0, r3
 800a524:	f7ff ff7a 	bl	800a41c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a528:	4a05      	ldr	r2, [pc, #20]	@ (800a540 <getPosixTime+0x28>)
 800a52a:	4b04      	ldr	r3, [pc, #16]	@ (800a53c <getPosixTime+0x24>)
 800a52c:	0011      	movs	r1, r2
 800a52e:	0018      	movs	r0, r3
 800a530:	f000 f982 	bl	800a838 <makeTime>
 800a534:	0003      	movs	r3, r0
}
 800a536:	0018      	movs	r0, r3
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20000e68 	.word	0x20000e68
 800a540:	20000e54 	.word	0x20000e54

0800a544 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a546:	b087      	sub	sp, #28
 800a548:	af04      	add	r7, sp, #16
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a54e:	4a12      	ldr	r2, [pc, #72]	@ (800a598 <getUTCfromPosixTime+0x54>)
 800a550:	4912      	ldr	r1, [pc, #72]	@ (800a59c <getUTCfromPosixTime+0x58>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	0018      	movs	r0, r3
 800a556:	f000 fa39 	bl	800a9cc <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a55a:	4b10      	ldr	r3, [pc, #64]	@ (800a59c <getUTCfromPosixTime+0x58>)
 800a55c:	789b      	ldrb	r3, [r3, #2]
 800a55e:	001e      	movs	r6, r3
 800a560:	4b0e      	ldr	r3, [pc, #56]	@ (800a59c <getUTCfromPosixTime+0x58>)
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	469c      	mov	ip, r3
 800a566:	4b0d      	ldr	r3, [pc, #52]	@ (800a59c <getUTCfromPosixTime+0x58>)
 800a568:	78db      	ldrb	r3, [r3, #3]
 800a56a:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <getUTCfromPosixTime+0x54>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a570:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a572:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <getUTCfromPosixTime+0x54>)
 800a574:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a576:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a578:	4b07      	ldr	r3, [pc, #28]	@ (800a598 <getUTCfromPosixTime+0x54>)
 800a57a:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a57c:	4908      	ldr	r1, [pc, #32]	@ (800a5a0 <getUTCfromPosixTime+0x5c>)
 800a57e:	6838      	ldr	r0, [r7, #0]
 800a580:	9303      	str	r3, [sp, #12]
 800a582:	9502      	str	r5, [sp, #8]
 800a584:	9401      	str	r4, [sp, #4]
 800a586:	9200      	str	r2, [sp, #0]
 800a588:	4663      	mov	r3, ip
 800a58a:	0032      	movs	r2, r6
 800a58c:	f01b fe76 	bl	802627c <siprintf>
}
 800a590:	46c0      	nop			@ (mov r8, r8)
 800a592:	46bd      	mov	sp, r7
 800a594:	b003      	add	sp, #12
 800a596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a598:	20000e54 	.word	0x20000e54
 800a59c:	20000e68 	.word	0x20000e68
 800a5a0:	0802bfa8 	.word	0x0802bfa8

0800a5a4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a5ac:	4b10      	ldr	r3, [pc, #64]	@ (800a5f0 <RTC_SetWakeUpTimer+0x4c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f012 f9f1 	bl	801c998 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a5b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f0 <RTC_SetWakeUpTimer+0x4c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	22ff      	movs	r2, #255	@ 0xff
 800a5c0:	401a      	ands	r2, r3
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <RTC_SetWakeUpTimer+0x4c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	490a      	ldr	r1, [pc, #40]	@ (800a5f4 <RTC_SetWakeUpTimer+0x50>)
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f8 <RTC_SetWakeUpTimer+0x54>)
 800a5d0:	2280      	movs	r2, #128	@ 0x80
 800a5d2:	0352      	lsls	r2, r2, #13
 800a5d4:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a5d6:	4b06      	ldr	r3, [pc, #24]	@ (800a5f0 <RTC_SetWakeUpTimer+0x4c>)
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	2204      	movs	r2, #4
 800a5e0:	0019      	movs	r1, r3
 800a5e2:	f012 f901 	bl	801c7e8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a5e6:	46c0      	nop			@ (mov r8, r8)
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	b002      	add	sp, #8
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	46c0      	nop			@ (mov r8, r8)
 800a5f0:	20000e50 	.word	0x20000e50
 800a5f4:	fffffb7f 	.word	0xfffffb7f
 800a5f8:	40010400 	.word	0x40010400

0800a5fc <Enter_Stop_Mode_for_empty_battery>:
  HAL_PWR_EnterSTANDBYMode(); // Not such a good idea, the esp is powered when gpio is high impedance
}
*/

void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af02      	add	r7, sp, #8
 800a602:	0002      	movs	r2, r0
 800a604:	1dbb      	adds	r3, r7, #6
 800a606:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a608:	4b22      	ldr	r3, [pc, #136]	@ (800a694 <Enter_Stop_Mode_for_empty_battery+0x98>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a610:	f004 f878 	bl	800e704 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a614:	4b20      	ldr	r3, [pc, #128]	@ (800a698 <Enter_Stop_Mode_for_empty_battery+0x9c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	1c18      	adds	r0, r3, #0
 800a61a:	f7f9 f93b 	bl	8003894 <__aeabi_f2d>
 800a61e:	0002      	movs	r2, r0
 800a620:	000b      	movs	r3, r1
 800a622:	481e      	ldr	r0, [pc, #120]	@ (800a69c <Enter_Stop_Mode_for_empty_battery+0xa0>)
 800a624:	491e      	ldr	r1, [pc, #120]	@ (800a6a0 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a626:	9200      	str	r2, [sp, #0]
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	0002      	movs	r2, r0
 800a62c:	2002      	movs	r0, #2
 800a62e:	f009 fbfb 	bl	8013e28 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a632:	1dbb      	adds	r3, r7, #6
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a4 <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a638:	491b      	ldr	r1, [pc, #108]	@ (800a6a8 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a63a:	2003      	movs	r0, #3
 800a63c:	f009 fbf4 	bl	8013e28 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a640:	f7ff ff6a 	bl	800a518 <getPosixTime>
 800a644:	0002      	movs	r2, r0
 800a646:	1dbb      	adds	r3, r7, #6
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	18d3      	adds	r3, r2, r3
 800a64c:	4a17      	ldr	r2, [pc, #92]	@ (800a6ac <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a64e:	0011      	movs	r1, r2
 800a650:	0018      	movs	r0, r3
 800a652:	f7ff ff77 	bl	800a544 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a656:	4b15      	ldr	r3, [pc, #84]	@ (800a6ac <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a658:	4a15      	ldr	r2, [pc, #84]	@ (800a6b0 <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a65a:	4911      	ldr	r1, [pc, #68]	@ (800a6a0 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a65c:	2002      	movs	r0, #2
 800a65e:	f009 fbe3 	bl	8013e28 <CreateLine>
  HAL_Delay(100);
 800a662:	2064      	movs	r0, #100	@ 0x64
 800a664:	f00a f962 	bl	801492c <HAL_Delay>
  HAL_SuspendTick();
 800a668:	f00a f984 	bl	8014974 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a66c:	1dbb      	adds	r3, r7, #6
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	0018      	movs	r0, r3
 800a672:	f7ff ff97 	bl	800a5a4 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a676:	2101      	movs	r1, #1
 800a678:	2001      	movs	r0, #1
 800a67a:	f010 fd89 	bl	801b190 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a67e:	f002 fd13 	bl	800d0a8 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a682:	f00a f985 	bl	8014990 <HAL_ResumeTick>
  showTime();
 800a686:	f7ff fbad 	bl	8009de4 <showTime>
}
 800a68a:	46c0      	nop			@ (mov r8, r8)
 800a68c:	46bd      	mov	sp, r7
 800a68e:	b002      	add	sp, #8
 800a690:	bd80      	pop	{r7, pc}
 800a692:	46c0      	nop			@ (mov r8, r8)
 800a694:	200011c1 	.word	0x200011c1
 800a698:	20002160 	.word	0x20002160
 800a69c:	0802bffc 	.word	0x0802bffc
 800a6a0:	0802be58 	.word	0x0802be58
 800a6a4:	0802c014 	.word	0x0802c014
 800a6a8:	0802be94 	.word	0x0802be94
 800a6ac:	20000e6c 	.word	0x20000e6c
 800a6b0:	0802c038 	.word	0x0802c038

0800a6b4 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	0002      	movs	r2, r0
 800a6bc:	1dbb      	adds	r3, r7, #6
 800a6be:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a6c0:	4b4a      	ldr	r3, [pc, #296]	@ (800a7ec <Enter_Stop_Mode+0x138>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a6c8:	f004 f81c 	bl	800e704 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a6cc:	4b48      	ldr	r3, [pc, #288]	@ (800a7f0 <Enter_Stop_Mode+0x13c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	1c18      	adds	r0, r3, #0
 800a6d2:	f7f9 f8df 	bl	8003894 <__aeabi_f2d>
 800a6d6:	0002      	movs	r2, r0
 800a6d8:	000b      	movs	r3, r1
 800a6da:	4846      	ldr	r0, [pc, #280]	@ (800a7f4 <Enter_Stop_Mode+0x140>)
 800a6dc:	4946      	ldr	r1, [pc, #280]	@ (800a7f8 <Enter_Stop_Mode+0x144>)
 800a6de:	9200      	str	r2, [sp, #0]
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	0002      	movs	r2, r0
 800a6e4:	2002      	movs	r0, #2
 800a6e6:	f009 fb9f 	bl	8013e28 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a6ea:	1dbb      	adds	r3, r7, #6
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	4a43      	ldr	r2, [pc, #268]	@ (800a7fc <Enter_Stop_Mode+0x148>)
 800a6f0:	4943      	ldr	r1, [pc, #268]	@ (800a800 <Enter_Stop_Mode+0x14c>)
 800a6f2:	2003      	movs	r0, #3
 800a6f4:	f009 fb98 	bl	8013e28 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a6f8:	f7ff ff0e 	bl	800a518 <getPosixTime>
 800a6fc:	0002      	movs	r2, r0
 800a6fe:	1dbb      	adds	r3, r7, #6
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	18d3      	adds	r3, r2, r3
 800a704:	4a3f      	ldr	r2, [pc, #252]	@ (800a804 <Enter_Stop_Mode+0x150>)
 800a706:	0011      	movs	r1, r2
 800a708:	0018      	movs	r0, r3
 800a70a:	f7ff ff1b 	bl	800a544 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a70e:	4b3d      	ldr	r3, [pc, #244]	@ (800a804 <Enter_Stop_Mode+0x150>)
 800a710:	4a3d      	ldr	r2, [pc, #244]	@ (800a808 <Enter_Stop_Mode+0x154>)
 800a712:	4939      	ldr	r1, [pc, #228]	@ (800a7f8 <Enter_Stop_Mode+0x144>)
 800a714:	2002      	movs	r0, #2
 800a716:	f009 fb87 	bl	8013e28 <CreateLine>
  HAL_Delay(100);
 800a71a:	2064      	movs	r0, #100	@ 0x64
 800a71c:	f00a f906 	bl	801492c <HAL_Delay>
  HAL_SuspendTick();
 800a720:	f00a f928 	bl	8014974 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a724:	1dbb      	adds	r3, r7, #6
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	0018      	movs	r0, r3
 800a72a:	f7ff ff3b 	bl	800a5a4 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a72e:	2101      	movs	r1, #1
 800a730:	2001      	movs	r0, #1
 800a732:	f010 fd2d 	bl	801b190 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a736:	f002 fcb7 	bl	800d0a8 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a73a:	f00a f929 	bl	8014990 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a73e:	1dbb      	adds	r3, r7, #6
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	0018      	movs	r0, r3
 800a744:	f003 ff52 	bl	800e5ec <sen5x_enable>
 800a748:	1e03      	subs	r3, r0, #0
 800a74a:	d01e      	beq.n	800a78a <Enter_Stop_Mode+0xd6>
    showTime();
 800a74c:	f7ff fb4a 	bl	8009de4 <showTime>
    set_light_on_state();
 800a750:	f004 fca8 	bl	800f0a4 <set_light_on_state>
    if (!userToggle) {
 800a754:	4b2d      	ldr	r3, [pc, #180]	@ (800a80c <Enter_Stop_Mode+0x158>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	2201      	movs	r2, #1
 800a75a:	4053      	eors	r3, r2
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d013      	beq.n	800a78a <Enter_Stop_Mode+0xd6>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a762:	201c      	movs	r0, #28
 800a764:	f7ff ff1e 	bl	800a5a4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a768:	4a24      	ldr	r2, [pc, #144]	@ (800a7fc <Enter_Stop_Mode+0x148>)
 800a76a:	4925      	ldr	r1, [pc, #148]	@ (800a800 <Enter_Stop_Mode+0x14c>)
 800a76c:	231c      	movs	r3, #28
 800a76e:	2003      	movs	r0, #3
 800a770:	f009 fb5a 	bl	8013e28 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a774:	2101      	movs	r1, #1
 800a776:	2001      	movs	r0, #1
 800a778:	f010 fd0a 	bl	801b190 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a77c:	f002 fc94 	bl	800d0a8 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a780:	f00a f906 	bl	8014990 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a784:	2000      	movs	r0, #0
 800a786:	f003 ff0f 	bl	800e5a8 <setsen5xReadTimer>
    }
  }
  showTime();
 800a78a:	f7ff fb2b 	bl	8009de4 <showTime>
  EnabledConnectedDevices();
 800a78e:	f003 fa8b 	bl	800dca8 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a792:	f003 fb9d 	bl	800ded0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800a796:	f006 fafd 	bl	8010d94 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a79a:	f7f9 f9cf 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f003 ff14 	bl	800e5cc <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a7a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a810 <Enter_Stop_Mode+0x15c>)
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	f7fa f8b8 	bl	800491c <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a7ac:	201e      	movs	r0, #30
 800a7ae:	f006 fadf 	bl	8010d70 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a7b2:	205a      	movs	r0, #90	@ 0x5a
 800a7b4:	f009 fdce 	bl	8014354 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a7b8:	203c      	movs	r0, #60	@ 0x3c
 800a7ba:	f000 fb99 	bl	800aef0 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a7be:	205a      	movs	r0, #90	@ 0x5a
 800a7c0:	f000 ff7c 	bl	800b6bc <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	f7f9 f9c3 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f003 fb6e 	bl	800deac <setMICTimeStamp>
  ESPTransmitDone = false;
 800a7d0:	4b10      	ldr	r3, [pc, #64]	@ (800a814 <Enter_Stop_Mode+0x160>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a7d6:	f00a f89f 	bl	8014918 <HAL_GetTick>
 800a7da:	0003      	movs	r3, r0
 800a7dc:	4a0c      	ldr	r2, [pc, #48]	@ (800a810 <Enter_Stop_Mode+0x15c>)
 800a7de:	189a      	adds	r2, r3, r2
 800a7e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a818 <Enter_Stop_Mode+0x164>)
 800a7e2:	601a      	str	r2, [r3, #0]
}
 800a7e4:	46c0      	nop			@ (mov r8, r8)
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	b002      	add	sp, #8
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	200011c1 	.word	0x200011c1
 800a7f0:	20002160 	.word	0x20002160
 800a7f4:	0802bffc 	.word	0x0802bffc
 800a7f8:	0802be58 	.word	0x0802be58
 800a7fc:	0802c014 	.word	0x0802c014
 800a800:	0802be94 	.word	0x0802be94
 800a804:	20000e6c 	.word	0x20000e6c
 800a808:	0802c038 	.word	0x0802c038
 800a80c:	20002152 	.word	0x20002152
 800a810:	00001194 	.word	0x00001194
 800a814:	200005b3 	.word	0x200005b3
 800a818:	20001114 	.word	0x20001114

0800a81c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a824:	4b03      	ldr	r3, [pc, #12]	@ (800a834 <InitClock+0x18>)
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	601a      	str	r2, [r3, #0]
}
 800a82a:	46c0      	nop			@ (mov r8, r8)
 800a82c:	46bd      	mov	sp, r7
 800a82e:	b002      	add	sp, #8
 800a830:	bd80      	pop	{r7, pc}
 800a832:	46c0      	nop			@ (mov r8, r8)
 800a834:	20000e50 	.word	0x20000e50

0800a838 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	78db      	ldrb	r3, [r3, #3]
 800a846:	001a      	movs	r2, r3
 800a848:	0013      	movs	r3, r2
 800a84a:	025b      	lsls	r3, r3, #9
 800a84c:	189b      	adds	r3, r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	189b      	adds	r3, r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	189b      	adds	r3, r3, r2
 800a856:	011a      	lsls	r2, r3, #4
 800a858:	1ad2      	subs	r2, r2, r3
 800a85a:	01d3      	lsls	r3, r2, #7
 800a85c:	001a      	movs	r2, r3
 800a85e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e028      	b.n	800a8b8 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	4a53      	ldr	r2, [pc, #332]	@ (800a9b8 <makeTime+0x180>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	db21      	blt.n	800a8b2 <makeTime+0x7a>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4a52      	ldr	r2, [pc, #328]	@ (800a9bc <makeTime+0x184>)
 800a872:	4694      	mov	ip, r2
 800a874:	4463      	add	r3, ip
 800a876:	001a      	movs	r2, r3
 800a878:	2303      	movs	r3, #3
 800a87a:	4013      	ands	r3, r2
 800a87c:	d119      	bne.n	800a8b2 <makeTime+0x7a>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4a4e      	ldr	r2, [pc, #312]	@ (800a9bc <makeTime+0x184>)
 800a882:	4694      	mov	ip, r2
 800a884:	4463      	add	r3, ip
 800a886:	2164      	movs	r1, #100	@ 0x64
 800a888:	0018      	movs	r0, r3
 800a88a:	f7f5 fdfb 	bl	8000484 <__aeabi_idivmod>
 800a88e:	1e0b      	subs	r3, r1, #0
 800a890:	d10a      	bne.n	800a8a8 <makeTime+0x70>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	4a49      	ldr	r2, [pc, #292]	@ (800a9bc <makeTime+0x184>)
 800a896:	4694      	mov	ip, r2
 800a898:	4463      	add	r3, ip
 800a89a:	22c8      	movs	r2, #200	@ 0xc8
 800a89c:	0051      	lsls	r1, r2, #1
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f7f5 fdf0 	bl	8000484 <__aeabi_idivmod>
 800a8a4:	1e0b      	subs	r3, r1, #0
 800a8a6:	d104      	bne.n	800a8b2 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4a45      	ldr	r2, [pc, #276]	@ (800a9c0 <makeTime+0x188>)
 800a8ac:	4694      	mov	ip, r2
 800a8ae:	4463      	add	r3, ip
 800a8b0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	78db      	ldrb	r3, [r3, #3]
 800a8bc:	001a      	movs	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	dbd0      	blt.n	800a866 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	e03c      	b.n	800a944 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d125      	bne.n	800a91c <makeTime+0xe4>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	78db      	ldrb	r3, [r3, #3]
 800a8d4:	4a39      	ldr	r2, [pc, #228]	@ (800a9bc <makeTime+0x184>)
 800a8d6:	4694      	mov	ip, r2
 800a8d8:	4463      	add	r3, ip
 800a8da:	001a      	movs	r2, r3
 800a8dc:	2303      	movs	r3, #3
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d11c      	bne.n	800a91c <makeTime+0xe4>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	78db      	ldrb	r3, [r3, #3]
 800a8e6:	4a35      	ldr	r2, [pc, #212]	@ (800a9bc <makeTime+0x184>)
 800a8e8:	4694      	mov	ip, r2
 800a8ea:	4463      	add	r3, ip
 800a8ec:	2164      	movs	r1, #100	@ 0x64
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f7f5 fdc8 	bl	8000484 <__aeabi_idivmod>
 800a8f4:	1e0b      	subs	r3, r1, #0
 800a8f6:	d10b      	bne.n	800a910 <makeTime+0xd8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	78db      	ldrb	r3, [r3, #3]
 800a8fc:	4a2f      	ldr	r2, [pc, #188]	@ (800a9bc <makeTime+0x184>)
 800a8fe:	4694      	mov	ip, r2
 800a900:	4463      	add	r3, ip
 800a902:	22c8      	movs	r2, #200	@ 0xc8
 800a904:	0051      	lsls	r1, r2, #1
 800a906:	0018      	movs	r0, r3
 800a908:	f7f5 fdbc 	bl	8000484 <__aeabi_idivmod>
 800a90c:	1e0b      	subs	r3, r1, #0
 800a90e:	d105      	bne.n	800a91c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	4a2c      	ldr	r2, [pc, #176]	@ (800a9c4 <makeTime+0x18c>)
 800a914:	4694      	mov	ip, r2
 800a916:	4463      	add	r3, ip
 800a918:	60bb      	str	r3, [r7, #8]
 800a91a:	e010      	b.n	800a93e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3b01      	subs	r3, #1
 800a920:	4a29      	ldr	r2, [pc, #164]	@ (800a9c8 <makeTime+0x190>)
 800a922:	5cd3      	ldrb	r3, [r2, r3]
 800a924:	001a      	movs	r2, r3
 800a926:	0013      	movs	r3, r2
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	189b      	adds	r3, r3, r2
 800a92c:	011a      	lsls	r2, r3, #4
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	0113      	lsls	r3, r2, #4
 800a932:	1a9b      	subs	r3, r3, r2
 800a934:	01db      	lsls	r3, r3, #7
 800a936:	001a      	movs	r2, r3
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	189b      	adds	r3, r3, r2
 800a93c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3301      	adds	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	001a      	movs	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4293      	cmp	r3, r2
 800a94e:	dbbc      	blt.n	800a8ca <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	789b      	ldrb	r3, [r3, #2]
 800a954:	3b01      	subs	r3, #1
 800a956:	001a      	movs	r2, r3
 800a958:	0013      	movs	r3, r2
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	189b      	adds	r3, r3, r2
 800a95e:	011a      	lsls	r2, r3, #4
 800a960:	1ad2      	subs	r2, r2, r3
 800a962:	0113      	lsls	r3, r2, #4
 800a964:	1a9b      	subs	r3, r3, r2
 800a966:	01db      	lsls	r3, r3, #7
 800a968:	001a      	movs	r2, r3
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	189b      	adds	r3, r3, r2
 800a96e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	001a      	movs	r2, r3
 800a976:	0013      	movs	r3, r2
 800a978:	011b      	lsls	r3, r3, #4
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	011a      	lsls	r2, r3, #4
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	0113      	lsls	r3, r2, #4
 800a982:	001a      	movs	r2, r3
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	189b      	adds	r3, r3, r2
 800a988:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	785b      	ldrb	r3, [r3, #1]
 800a98e:	001a      	movs	r2, r3
 800a990:	0013      	movs	r3, r2
 800a992:	011b      	lsls	r3, r3, #4
 800a994:	1a9b      	subs	r3, r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	001a      	movs	r2, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	189b      	adds	r3, r3, r2
 800a99e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	789b      	ldrb	r3, [r3, #2]
 800a9a4:	001a      	movs	r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	189b      	adds	r3, r3, r2
 800a9aa:	60bb      	str	r3, [r7, #8]
  return seconds;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
}
 800a9ae:	0018      	movs	r0, r3
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	b004      	add	sp, #16
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	46c0      	nop			@ (mov r8, r8)
 800a9b8:	fffff84f 	.word	0xfffff84f
 800a9bc:	000007b2 	.word	0x000007b2
 800a9c0:	00015180 	.word	0x00015180
 800a9c4:	00263b80 	.word	0x00263b80
 800a9c8:	0802e2f0 	.word	0x0802e2f0

0800a9cc <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a9cc:	b590      	push	{r4, r7, lr}
 800a9ce:	b089      	sub	sp, #36	@ 0x24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	213c      	movs	r1, #60	@ 0x3c
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	f7f5 fc65 	bl	80002b0 <__aeabi_uidivmod>
 800a9e6:	000b      	movs	r3, r1
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	213c      	movs	r1, #60	@ 0x3c
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f7f5 fbd6 	bl	80001a4 <__udivsi3>
 800a9f8:	0003      	movs	r3, r0
 800a9fa:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	213c      	movs	r1, #60	@ 0x3c
 800aa00:	0018      	movs	r0, r3
 800aa02:	f7f5 fc55 	bl	80002b0 <__aeabi_uidivmod>
 800aa06:	000b      	movs	r3, r1
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	213c      	movs	r1, #60	@ 0x3c
 800aa12:	0018      	movs	r0, r3
 800aa14:	f7f5 fbc6 	bl	80001a4 <__udivsi3>
 800aa18:	0003      	movs	r3, r0
 800aa1a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2118      	movs	r1, #24
 800aa20:	0018      	movs	r0, r3
 800aa22:	f7f5 fc45 	bl	80002b0 <__aeabi_uidivmod>
 800aa26:	000b      	movs	r3, r1
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	2118      	movs	r1, #24
 800aa32:	0018      	movs	r0, r3
 800aa34:	f7f5 fbb6 	bl	80001a4 <__udivsi3>
 800aa38:	0003      	movs	r3, r0
 800aa3a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	2107      	movs	r1, #7
 800aa42:	0018      	movs	r0, r3
 800aa44:	f7f5 fc34 	bl	80002b0 <__aeabi_uidivmod>
 800aa48:	000b      	movs	r3, r1
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	701a      	strb	r2, [r3, #0]
  year = 0;
 800aa54:	231f      	movs	r3, #31
 800aa56:	18fb      	adds	r3, r7, r3
 800aa58:	2200      	movs	r2, #0
 800aa5a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa60:	e005      	b.n	800aa6e <breakPosixTime+0xa2>
    year++;
 800aa62:	211f      	movs	r1, #31
 800aa64:	187b      	adds	r3, r7, r1
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	187b      	adds	r3, r7, r1
 800aa6a:	3201      	adds	r2, #1
 800aa6c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa6e:	241f      	movs	r4, #31
 800aa70:	193b      	adds	r3, r7, r4
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	4a64      	ldr	r2, [pc, #400]	@ (800ac08 <breakPosixTime+0x23c>)
 800aa76:	4694      	mov	ip, r2
 800aa78:	4463      	add	r3, ip
 800aa7a:	001a      	movs	r2, r3
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	4013      	ands	r3, r2
 800aa80:	d119      	bne.n	800aab6 <breakPosixTime+0xea>
 800aa82:	193b      	adds	r3, r7, r4
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	4a60      	ldr	r2, [pc, #384]	@ (800ac08 <breakPosixTime+0x23c>)
 800aa88:	4694      	mov	ip, r2
 800aa8a:	4463      	add	r3, ip
 800aa8c:	2164      	movs	r1, #100	@ 0x64
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f7f5 fcf8 	bl	8000484 <__aeabi_idivmod>
 800aa94:	1e0b      	subs	r3, r1, #0
 800aa96:	d10b      	bne.n	800aab0 <breakPosixTime+0xe4>
 800aa98:	193b      	adds	r3, r7, r4
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	4a5a      	ldr	r2, [pc, #360]	@ (800ac08 <breakPosixTime+0x23c>)
 800aa9e:	4694      	mov	ip, r2
 800aaa0:	4463      	add	r3, ip
 800aaa2:	22c8      	movs	r2, #200	@ 0xc8
 800aaa4:	0051      	lsls	r1, r2, #1
 800aaa6:	0018      	movs	r0, r3
 800aaa8:	f7f5 fcec 	bl	8000484 <__aeabi_idivmod>
 800aaac:	1e0b      	subs	r3, r1, #0
 800aaae:	d102      	bne.n	800aab6 <breakPosixTime+0xea>
 800aab0:	23b7      	movs	r3, #183	@ 0xb7
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	e001      	b.n	800aaba <breakPosixTime+0xee>
 800aab6:	236e      	movs	r3, #110	@ 0x6e
 800aab8:	33ff      	adds	r3, #255	@ 0xff
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	18d3      	adds	r3, r2, r3
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d9cc      	bls.n	800aa62 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	241f      	movs	r4, #31
 800aacc:	193a      	adds	r2, r7, r4
 800aace:	7812      	ldrb	r2, [r2, #0]
 800aad0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800aad2:	193b      	adds	r3, r7, r4
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	4a4c      	ldr	r2, [pc, #304]	@ (800ac08 <breakPosixTime+0x23c>)
 800aad8:	4694      	mov	ip, r2
 800aada:	4463      	add	r3, ip
 800aadc:	001a      	movs	r2, r3
 800aade:	2303      	movs	r3, #3
 800aae0:	4013      	ands	r3, r2
 800aae2:	d119      	bne.n	800ab18 <breakPosixTime+0x14c>
 800aae4:	193b      	adds	r3, r7, r4
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	4a47      	ldr	r2, [pc, #284]	@ (800ac08 <breakPosixTime+0x23c>)
 800aaea:	4694      	mov	ip, r2
 800aaec:	4463      	add	r3, ip
 800aaee:	2164      	movs	r1, #100	@ 0x64
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	f7f5 fcc7 	bl	8000484 <__aeabi_idivmod>
 800aaf6:	1e0b      	subs	r3, r1, #0
 800aaf8:	d10b      	bne.n	800ab12 <breakPosixTime+0x146>
 800aafa:	193b      	adds	r3, r7, r4
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4a42      	ldr	r2, [pc, #264]	@ (800ac08 <breakPosixTime+0x23c>)
 800ab00:	4694      	mov	ip, r2
 800ab02:	4463      	add	r3, ip
 800ab04:	22c8      	movs	r2, #200	@ 0xc8
 800ab06:	0051      	lsls	r1, r2, #1
 800ab08:	0018      	movs	r0, r3
 800ab0a:	f7f5 fcbb 	bl	8000484 <__aeabi_idivmod>
 800ab0e:	1e0b      	subs	r3, r1, #0
 800ab10:	d102      	bne.n	800ab18 <breakPosixTime+0x14c>
 800ab12:	23b7      	movs	r3, #183	@ 0xb7
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	e001      	b.n	800ab1c <breakPosixTime+0x150>
 800ab18:	236e      	movs	r3, #110	@ 0x6e
 800ab1a:	33ff      	adds	r3, #255	@ 0xff
 800ab1c:	697a      	ldr	r2, [r7, #20]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	61bb      	str	r3, [r7, #24]

  days=0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	617b      	str	r3, [r7, #20]
  month=0;
 800ab2e:	211e      	movs	r1, #30
 800ab30:	187b      	adds	r3, r7, r1
 800ab32:	2200      	movs	r2, #0
 800ab34:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800ab36:	231d      	movs	r3, #29
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800ab3e:	187b      	adds	r3, r7, r1
 800ab40:	2200      	movs	r2, #0
 800ab42:	701a      	strb	r2, [r3, #0]
 800ab44:	e048      	b.n	800abd8 <breakPosixTime+0x20c>
    if (month==1) { // february
 800ab46:	231e      	movs	r3, #30
 800ab48:	18fb      	adds	r3, r7, r3
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d12a      	bne.n	800aba6 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800ab50:	241f      	movs	r4, #31
 800ab52:	193b      	adds	r3, r7, r4
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	4a2c      	ldr	r2, [pc, #176]	@ (800ac08 <breakPosixTime+0x23c>)
 800ab58:	4694      	mov	ip, r2
 800ab5a:	4463      	add	r3, ip
 800ab5c:	001a      	movs	r2, r3
 800ab5e:	2303      	movs	r3, #3
 800ab60:	4013      	ands	r3, r2
 800ab62:	d11b      	bne.n	800ab9c <breakPosixTime+0x1d0>
 800ab64:	193b      	adds	r3, r7, r4
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	4a27      	ldr	r2, [pc, #156]	@ (800ac08 <breakPosixTime+0x23c>)
 800ab6a:	4694      	mov	ip, r2
 800ab6c:	4463      	add	r3, ip
 800ab6e:	2164      	movs	r1, #100	@ 0x64
 800ab70:	0018      	movs	r0, r3
 800ab72:	f7f5 fc87 	bl	8000484 <__aeabi_idivmod>
 800ab76:	1e0b      	subs	r3, r1, #0
 800ab78:	d10b      	bne.n	800ab92 <breakPosixTime+0x1c6>
 800ab7a:	193b      	adds	r3, r7, r4
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	4a22      	ldr	r2, [pc, #136]	@ (800ac08 <breakPosixTime+0x23c>)
 800ab80:	4694      	mov	ip, r2
 800ab82:	4463      	add	r3, ip
 800ab84:	22c8      	movs	r2, #200	@ 0xc8
 800ab86:	0051      	lsls	r1, r2, #1
 800ab88:	0018      	movs	r0, r3
 800ab8a:	f7f5 fc7b 	bl	8000484 <__aeabi_idivmod>
 800ab8e:	1e0b      	subs	r3, r1, #0
 800ab90:	d104      	bne.n	800ab9c <breakPosixTime+0x1d0>
        monthLength=29;
 800ab92:	231d      	movs	r3, #29
 800ab94:	18fb      	adds	r3, r7, r3
 800ab96:	221d      	movs	r2, #29
 800ab98:	701a      	strb	r2, [r3, #0]
 800ab9a:	e00c      	b.n	800abb6 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800ab9c:	231d      	movs	r3, #29
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	221c      	movs	r2, #28
 800aba2:	701a      	strb	r2, [r3, #0]
 800aba4:	e007      	b.n	800abb6 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800aba6:	231e      	movs	r3, #30
 800aba8:	18fb      	adds	r3, r7, r3
 800abaa:	781a      	ldrb	r2, [r3, #0]
 800abac:	231d      	movs	r3, #29
 800abae:	18fb      	adds	r3, r7, r3
 800abb0:	4916      	ldr	r1, [pc, #88]	@ (800ac0c <breakPosixTime+0x240>)
 800abb2:	5c8a      	ldrb	r2, [r1, r2]
 800abb4:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800abb6:	211d      	movs	r1, #29
 800abb8:	187b      	adds	r3, r7, r1
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d310      	bcc.n	800abe4 <breakPosixTime+0x218>
      time -= monthLength;
 800abc2:	187b      	adds	r3, r7, r1
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800abcc:	211e      	movs	r1, #30
 800abce:	187b      	adds	r3, r7, r1
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	187b      	adds	r3, r7, r1
 800abd4:	3201      	adds	r2, #1
 800abd6:	701a      	strb	r2, [r3, #0]
 800abd8:	231e      	movs	r3, #30
 800abda:	18fb      	adds	r3, r7, r3
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b0b      	cmp	r3, #11
 800abe0:	d9b1      	bls.n	800ab46 <breakPosixTime+0x17a>
 800abe2:	e000      	b.n	800abe6 <breakPosixTime+0x21a>
    } else {
        break;
 800abe4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800abe6:	231e      	movs	r3, #30
 800abe8:	18fb      	adds	r3, r7, r3
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	3301      	adds	r3, #1
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	709a      	strb	r2, [r3, #2]
}
 800ac00:	46c0      	nop			@ (mov r8, r8)
 800ac02:	46bd      	mov	sp, r7
 800ac04:	b009      	add	sp, #36	@ 0x24
 800ac06:	bd90      	pop	{r4, r7, pc}
 800ac08:	000007b2 	.word	0x000007b2
 800ac0c:	0802e2f0 	.word	0x0802e2f0

0800ac10 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ac16:	003b      	movs	r3, r7
 800ac18:	0018      	movs	r0, r3
 800ac1a:	2308      	movs	r3, #8
 800ac1c:	001a      	movs	r2, r3
 800ac1e:	2100      	movs	r1, #0
 800ac20:	f01b fc74 	bl	802650c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ac24:	4b30      	ldr	r3, [pc, #192]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac26:	4a31      	ldr	r2, [pc, #196]	@ (800acec <MX_ADC_Init+0xdc>)
 800ac28:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ac2a:	4b2f      	ldr	r3, [pc, #188]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ac30:	4b2d      	ldr	r3, [pc, #180]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac32:	22c0      	movs	r2, #192	@ 0xc0
 800ac34:	0612      	lsls	r2, r2, #24
 800ac36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ac38:	4b2b      	ldr	r3, [pc, #172]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ac3e:	4b2a      	ldr	r3, [pc, #168]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ac44:	4b28      	ldr	r3, [pc, #160]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac46:	2201      	movs	r2, #1
 800ac48:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ac4a:	4b27      	ldr	r3, [pc, #156]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ac50:	4b25      	ldr	r3, [pc, #148]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac52:	2220      	movs	r2, #32
 800ac54:	2100      	movs	r1, #0
 800ac56:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800ac58:	4b23      	ldr	r3, [pc, #140]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac5a:	2221      	movs	r2, #33	@ 0x21
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ac60:	4b21      	ldr	r3, [pc, #132]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ac66:	4b20      	ldr	r3, [pc, #128]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac68:	22c2      	movs	r2, #194	@ 0xc2
 800ac6a:	32ff      	adds	r2, #255	@ 0xff
 800ac6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800ac6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac70:	222c      	movs	r2, #44	@ 0x2c
 800ac72:	2100      	movs	r1, #0
 800ac74:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ac76:	4b1c      	ldr	r3, [pc, #112]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac78:	2204      	movs	r2, #4
 800ac7a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800ac82:	4b19      	ldr	r3, [pc, #100]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800ac88:	4b17      	ldr	r3, [pc, #92]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800ac8e:	4b16      	ldr	r3, [pc, #88]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800ac94:	4b14      	ldr	r3, [pc, #80]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800ac96:	0018      	movs	r0, r3
 800ac98:	f009 fe88 	bl	80149ac <HAL_ADC_Init>
 800ac9c:	1e03      	subs	r3, r0, #0
 800ac9e:	d001      	beq.n	800aca4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800aca0:	f002 fb6e 	bl	800d380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800aca4:	003b      	movs	r3, r7
 800aca6:	4a12      	ldr	r2, [pc, #72]	@ (800acf0 <MX_ADC_Init+0xe0>)
 800aca8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800acaa:	003b      	movs	r3, r7
 800acac:	2280      	movs	r2, #128	@ 0x80
 800acae:	0152      	lsls	r2, r2, #5
 800acb0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800acb2:	003a      	movs	r2, r7
 800acb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800acb6:	0011      	movs	r1, r2
 800acb8:	0018      	movs	r0, r3
 800acba:	f00a f8e7 	bl	8014e8c <HAL_ADC_ConfigChannel>
 800acbe:	1e03      	subs	r3, r0, #0
 800acc0:	d001      	beq.n	800acc6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800acc2:	f002 fb5d 	bl	800d380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800acc6:	003b      	movs	r3, r7
 800acc8:	4a0a      	ldr	r2, [pc, #40]	@ (800acf4 <MX_ADC_Init+0xe4>)
 800acca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800accc:	003a      	movs	r2, r7
 800acce:	4b06      	ldr	r3, [pc, #24]	@ (800ace8 <MX_ADC_Init+0xd8>)
 800acd0:	0011      	movs	r1, r2
 800acd2:	0018      	movs	r0, r3
 800acd4:	f00a f8da 	bl	8014e8c <HAL_ADC_ConfigChannel>
 800acd8:	1e03      	subs	r3, r0, #0
 800acda:	d001      	beq.n	800ace0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800acdc:	f002 fb50 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800ace0:	46c0      	nop			@ (mov r8, r8)
 800ace2:	46bd      	mov	sp, r7
 800ace4:	b002      	add	sp, #8
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20000e84 	.word	0x20000e84
 800acec:	40012400 	.word	0x40012400
 800acf0:	38004000 	.word	0x38004000
 800acf4:	3c008000 	.word	0x3c008000

0800acf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800acf8:	b590      	push	{r4, r7, lr}
 800acfa:	b089      	sub	sp, #36	@ 0x24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad00:	240c      	movs	r4, #12
 800ad02:	193b      	adds	r3, r7, r4
 800ad04:	0018      	movs	r0, r3
 800ad06:	2314      	movs	r3, #20
 800ad08:	001a      	movs	r2, r3
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	f01b fbfe 	bl	802650c <memset>
  if(adcHandle->Instance==ADC1)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a14      	ldr	r2, [pc, #80]	@ (800ad68 <HAL_ADC_MspInit+0x70>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d121      	bne.n	800ad5e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ad1a:	4b14      	ldr	r3, [pc, #80]	@ (800ad6c <HAL_ADC_MspInit+0x74>)
 800ad1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad1e:	4b13      	ldr	r3, [pc, #76]	@ (800ad6c <HAL_ADC_MspInit+0x74>)
 800ad20:	2180      	movs	r1, #128	@ 0x80
 800ad22:	0089      	lsls	r1, r1, #2
 800ad24:	430a      	orrs	r2, r1
 800ad26:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad28:	4b10      	ldr	r3, [pc, #64]	@ (800ad6c <HAL_ADC_MspInit+0x74>)
 800ad2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad6c <HAL_ADC_MspInit+0x74>)
 800ad2e:	2104      	movs	r1, #4
 800ad30:	430a      	orrs	r2, r1
 800ad32:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ad34:	4b0d      	ldr	r3, [pc, #52]	@ (800ad6c <HAL_ADC_MspInit+0x74>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad38:	2204      	movs	r2, #4
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	60bb      	str	r3, [r7, #8]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ad40:	193b      	adds	r3, r7, r4
 800ad42:	2230      	movs	r2, #48	@ 0x30
 800ad44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad46:	193b      	adds	r3, r7, r4
 800ad48:	2203      	movs	r2, #3
 800ad4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad4c:	193b      	adds	r3, r7, r4
 800ad4e:	2200      	movs	r2, #0
 800ad50:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad52:	193b      	adds	r3, r7, r4
 800ad54:	4a06      	ldr	r2, [pc, #24]	@ (800ad70 <HAL_ADC_MspInit+0x78>)
 800ad56:	0019      	movs	r1, r3
 800ad58:	0010      	movs	r0, r2
 800ad5a:	f00a feb5 	bl	8015ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ad5e:	46c0      	nop			@ (mov r8, r8)
 800ad60:	46bd      	mov	sp, r7
 800ad62:	b009      	add	sp, #36	@ 0x24
 800ad64:	bd90      	pop	{r4, r7, pc}
 800ad66:	46c0      	nop			@ (mov r8, r8)
 800ad68:	40012400 	.word	0x40012400
 800ad6c:	40021000 	.word	0x40021000
 800ad70:	50000800 	.word	0x50000800

0800ad74 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad74:	b590      	push	{r4, r7, lr}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6039      	str	r1, [r7, #0]
 800ad7c:	0011      	movs	r1, r2
 800ad7e:	1dfb      	adds	r3, r7, #7
 800ad80:	1c02      	adds	r2, r0, #0
 800ad82:	701a      	strb	r2, [r3, #0]
 800ad84:	1dbb      	adds	r3, r7, #6
 800ad86:	1c0a      	adds	r2, r1, #0
 800ad88:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <ReadDirRegister+0x40>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800ad92:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <ReadDirRegister+0x40>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	1dba      	adds	r2, r7, #6
 800ad98:	7814      	ldrb	r4, [r2, #0]
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	1dfa      	adds	r2, r7, #7
 800ad9e:	7810      	ldrb	r0, [r2, #0]
 800ada0:	0022      	movs	r2, r4
 800ada2:	4798      	blx	r3
 800ada4:	0003      	movs	r3, r0
 800ada6:	e000      	b.n	800adaa <ReadDirRegister+0x36>
  }
  return false;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	0018      	movs	r0, r3
 800adac:	46bd      	mov	sp, r7
 800adae:	b003      	add	sp, #12
 800adb0:	bd90      	pop	{r4, r7, pc}
 800adb2:	46c0      	nop			@ (mov r8, r8)
 800adb4:	20000ef0 	.word	0x20000ef0

0800adb8 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800adb8:	b590      	push	{r4, r7, lr}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6039      	str	r1, [r7, #0]
 800adc0:	0011      	movs	r1, r2
 800adc2:	1dfb      	adds	r3, r7, #7
 800adc4:	1c02      	adds	r2, r0, #0
 800adc6:	701a      	strb	r2, [r3, #0]
 800adc8:	1dbb      	adds	r3, r7, #6
 800adca:	1c0a      	adds	r2, r1, #0
 800adcc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800adce:	4b0a      	ldr	r3, [pc, #40]	@ (800adf8 <ReadRegister+0x40>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00a      	beq.n	800adec <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800add6:	4b08      	ldr	r3, [pc, #32]	@ (800adf8 <ReadRegister+0x40>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	1dba      	adds	r2, r7, #6
 800addc:	7814      	ldrb	r4, [r2, #0]
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	1dfa      	adds	r2, r7, #7
 800ade2:	7810      	ldrb	r0, [r2, #0]
 800ade4:	0022      	movs	r2, r4
 800ade6:	4798      	blx	r3
 800ade8:	0003      	movs	r3, r0
 800adea:	e000      	b.n	800adee <ReadRegister+0x36>
  }
  return false;
 800adec:	2300      	movs	r3, #0
}
 800adee:	0018      	movs	r0, r3
 800adf0:	46bd      	mov	sp, r7
 800adf2:	b003      	add	sp, #12
 800adf4:	bd90      	pop	{r4, r7, pc}
 800adf6:	46c0      	nop			@ (mov r8, r8)
 800adf8:	20000ee8 	.word	0x20000ee8

0800adfc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800adfc:	b590      	push	{r4, r7, lr}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6039      	str	r1, [r7, #0]
 800ae04:	0011      	movs	r1, r2
 800ae06:	1dfb      	adds	r3, r7, #7
 800ae08:	1c02      	adds	r2, r0, #0
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	1dbb      	adds	r3, r7, #6
 800ae0e:	1c0a      	adds	r2, r1, #0
 800ae10:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ae12:	4b0a      	ldr	r3, [pc, #40]	@ (800ae3c <WriteRegister+0x40>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800ae1a:	4b08      	ldr	r3, [pc, #32]	@ (800ae3c <WriteRegister+0x40>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	1dba      	adds	r2, r7, #6
 800ae20:	7814      	ldrb	r4, [r2, #0]
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	1dfa      	adds	r2, r7, #7
 800ae26:	7810      	ldrb	r0, [r2, #0]
 800ae28:	0022      	movs	r2, r4
 800ae2a:	4798      	blx	r3
 800ae2c:	0003      	movs	r3, r0
 800ae2e:	e000      	b.n	800ae32 <WriteRegister+0x36>
  }
  return false;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	0018      	movs	r0, r3
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b003      	add	sp, #12
 800ae38:	bd90      	pop	{r4, r7, pc}
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	20000eec 	.word	0x20000eec

0800ae40 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	000a      	movs	r2, r1
 800ae4a:	1cfb      	adds	r3, r7, #3
 800ae4c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800ae4e:	230f      	movs	r3, #15
 800ae50:	18fb      	adds	r3, r7, r3
 800ae52:	22ff      	movs	r2, #255	@ 0xff
 800ae54:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ae56:	230e      	movs	r3, #14
 800ae58:	18fb      	adds	r3, r7, r3
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	e038      	b.n	800aed2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ae60:	230e      	movs	r3, #14
 800ae62:	18fb      	adds	r3, r7, r3
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	18d3      	adds	r3, r2, r3
 800ae6a:	7819      	ldrb	r1, [r3, #0]
 800ae6c:	220f      	movs	r2, #15
 800ae6e:	18bb      	adds	r3, r7, r2
 800ae70:	18ba      	adds	r2, r7, r2
 800ae72:	7812      	ldrb	r2, [r2, #0]
 800ae74:	404a      	eors	r2, r1
 800ae76:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ae78:	230d      	movs	r3, #13
 800ae7a:	18fb      	adds	r3, r7, r3
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
 800ae80:	e01c      	b.n	800aebc <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800ae82:	210f      	movs	r1, #15
 800ae84:	187b      	adds	r3, r7, r1
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da0a      	bge.n	800aea4 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800ae8e:	187b      	adds	r3, r7, r1
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	b25b      	sxtb	r3, r3
 800ae94:	18db      	adds	r3, r3, r3
 800ae96:	b25b      	sxtb	r3, r3
 800ae98:	2231      	movs	r2, #49	@ 0x31
 800ae9a:	4053      	eors	r3, r2
 800ae9c:	b25a      	sxtb	r2, r3
 800ae9e:	187b      	adds	r3, r7, r1
 800aea0:	701a      	strb	r2, [r3, #0]
 800aea2:	e005      	b.n	800aeb0 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800aea4:	230f      	movs	r3, #15
 800aea6:	18fa      	adds	r2, r7, r3
 800aea8:	18fb      	adds	r3, r7, r3
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	18db      	adds	r3, r3, r3
 800aeae:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800aeb0:	210d      	movs	r1, #13
 800aeb2:	187b      	adds	r3, r7, r1
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	187b      	adds	r3, r7, r1
 800aeb8:	3201      	adds	r2, #1
 800aeba:	701a      	strb	r2, [r3, #0]
 800aebc:	230d      	movs	r3, #13
 800aebe:	18fb      	adds	r3, r7, r3
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b07      	cmp	r3, #7
 800aec4:	d9dd      	bls.n	800ae82 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800aec6:	210e      	movs	r1, #14
 800aec8:	187b      	adds	r3, r7, r1
 800aeca:	781a      	ldrb	r2, [r3, #0]
 800aecc:	187b      	adds	r3, r7, r1
 800aece:	3201      	adds	r2, #1
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	230e      	movs	r3, #14
 800aed4:	18fa      	adds	r2, r7, r3
 800aed6:	1cfb      	adds	r3, r7, #3
 800aed8:	7812      	ldrb	r2, [r2, #0]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3bf      	bcc.n	800ae60 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800aee0:	230f      	movs	r3, #15
 800aee2:	18fb      	adds	r3, r7, r3
 800aee4:	781b      	ldrb	r3, [r3, #0]
}
 800aee6:	0018      	movs	r0, r3
 800aee8:	46bd      	mov	sp, r7
 800aeea:	b004      	add	sp, #16
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800aef8:	f009 fd0e 	bl	8014918 <HAL_GetTick>
 800aefc:	0002      	movs	r2, r0
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	18d2      	adds	r2, r2, r3
 800af02:	4b03      	ldr	r3, [pc, #12]	@ (800af10 <setAHT20TimeStamp+0x20>)
 800af04:	601a      	str	r2, [r3, #0]
}
 800af06:	46c0      	nop			@ (mov r8, r8)
 800af08:	46bd      	mov	sp, r7
 800af0a:	b002      	add	sp, #8
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	46c0      	nop			@ (mov r8, r8)
 800af10:	20000ee0 	.word	0x20000ee0

0800af14 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800af20:	4b06      	ldr	r3, [pc, #24]	@ (800af3c <AHT_Init+0x28>)
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800af26:	4b06      	ldr	r3, [pc, #24]	@ (800af40 <AHT_Init+0x2c>)
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800af2c:	4b05      	ldr	r3, [pc, #20]	@ (800af44 <AHT_Init+0x30>)
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	601a      	str	r2, [r3, #0]
}
 800af32:	46c0      	nop			@ (mov r8, r8)
 800af34:	46bd      	mov	sp, r7
 800af36:	b004      	add	sp, #16
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	46c0      	nop			@ (mov r8, r8)
 800af3c:	20000ef0 	.word	0x20000ef0
 800af40:	20000ee8 	.word	0x20000ee8
 800af44:	20000eec 	.word	0x20000eec

0800af48 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af02      	add	r7, sp, #8
 800af4e:	0002      	movs	r2, r0
 800af50:	1dfb      	adds	r3, r7, #7
 800af52:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800af54:	4b18      	ldr	r3, [pc, #96]	@ (800afb8 <AHT20_register_reset+0x70>)
 800af56:	1dfa      	adds	r2, r7, #7
 800af58:	7812      	ldrb	r2, [r2, #0]
 800af5a:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800af5c:	4b16      	ldr	r3, [pc, #88]	@ (800afb8 <AHT20_register_reset+0x70>)
 800af5e:	2203      	movs	r2, #3
 800af60:	0019      	movs	r1, r3
 800af62:	2038      	movs	r0, #56	@ 0x38
 800af64:	f7ff ff4a 	bl	800adfc <WriteRegister>
  HAL_Delay(15);
 800af68:	200f      	movs	r0, #15
 800af6a:	f009 fcdf 	bl	801492c <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800af6e:	4b13      	ldr	r3, [pc, #76]	@ (800afbc <AHT20_register_reset+0x74>)
 800af70:	2203      	movs	r2, #3
 800af72:	0019      	movs	r1, r3
 800af74:	2038      	movs	r0, #56	@ 0x38
 800af76:	f7ff ff1f 	bl	800adb8 <ReadRegister>
  HAL_Delay(15);
 800af7a:	200f      	movs	r0, #15
 800af7c:	f009 fcd6 	bl	801492c <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800af80:	4b0e      	ldr	r3, [pc, #56]	@ (800afbc <AHT20_register_reset+0x74>)
 800af82:	22b0      	movs	r2, #176	@ 0xb0
 800af84:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800af86:	4b0d      	ldr	r3, [pc, #52]	@ (800afbc <AHT20_register_reset+0x74>)
 800af88:	789b      	ldrb	r3, [r3, #2]
 800af8a:	0018      	movs	r0, r3
 800af8c:	4b0b      	ldr	r3, [pc, #44]	@ (800afbc <AHT20_register_reset+0x74>)
 800af8e:	78db      	ldrb	r3, [r3, #3]
 800af90:	4a0b      	ldr	r2, [pc, #44]	@ (800afc0 <AHT20_register_reset+0x78>)
 800af92:	490c      	ldr	r1, [pc, #48]	@ (800afc4 <AHT20_register_reset+0x7c>)
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	0003      	movs	r3, r0
 800af98:	2003      	movs	r0, #3
 800af9a:	f008 ff45 	bl	8013e28 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800af9e:	4b07      	ldr	r3, [pc, #28]	@ (800afbc <AHT20_register_reset+0x74>)
 800afa0:	2203      	movs	r2, #3
 800afa2:	0019      	movs	r1, r3
 800afa4:	2038      	movs	r0, #56	@ 0x38
 800afa6:	f7ff ff29 	bl	800adfc <WriteRegister>
  HAL_Delay(15);
 800afaa:	200f      	movs	r0, #15
 800afac:	f009 fcbe 	bl	801492c <HAL_Delay>
}
 800afb0:	46c0      	nop			@ (mov r8, r8)
 800afb2:	46bd      	mov	sp, r7
 800afb4:	b002      	add	sp, #8
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	2000009c 	.word	0x2000009c
 800afbc:	20000ef4 	.word	0x20000ef4
 800afc0:	0802c058 	.word	0x0802c058
 800afc4:	0802c0a8 	.word	0x0802c0a8

0800afc8 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800afcc:	201b      	movs	r0, #27
 800afce:	f7ff ffbb 	bl	800af48 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800afd2:	201c      	movs	r0, #28
 800afd4:	f7ff ffb8 	bl	800af48 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800afd8:	201e      	movs	r0, #30
 800afda:	f7ff ffb5 	bl	800af48 <AHT20_register_reset>
}
 800afde:	46c0      	nop			@ (mov r8, r8)
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800afe8:	4b0c      	ldr	r3, [pc, #48]	@ (800b01c <AHT20_read_status+0x38>)
 800afea:	2201      	movs	r2, #1
 800afec:	0019      	movs	r1, r3
 800afee:	2038      	movs	r0, #56	@ 0x38
 800aff0:	f7ff ff04 	bl	800adfc <WriteRegister>
  HAL_Delay(10);
 800aff4:	200a      	movs	r0, #10
 800aff6:	f009 fc99 	bl	801492c <HAL_Delay>
  airtemphumraw[0] = 0;
 800affa:	4b09      	ldr	r3, [pc, #36]	@ (800b020 <AHT20_read_status+0x3c>)
 800affc:	2200      	movs	r2, #0
 800affe:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800b000:	4b07      	ldr	r3, [pc, #28]	@ (800b020 <AHT20_read_status+0x3c>)
 800b002:	2201      	movs	r2, #1
 800b004:	0019      	movs	r1, r3
 800b006:	2038      	movs	r0, #56	@ 0x38
 800b008:	f7ff fed6 	bl	800adb8 <ReadRegister>
  HAL_Delay(10);
 800b00c:	200a      	movs	r0, #10
 800b00e:	f009 fc8d 	bl	801492c <HAL_Delay>
  return airtemphumraw[0];
 800b012:	4b03      	ldr	r3, [pc, #12]	@ (800b020 <AHT20_read_status+0x3c>)
 800b014:	781b      	ldrb	r3, [r3, #0]
}
 800b016:	0018      	movs	r0, r3
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20000098 	.word	0x20000098
 800b020:	20000ef4 	.word	0x20000ef4

0800b024 <AHT20_init>:

bool AHT20_init(void) {
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800b02a:	f009 fc75 	bl	8014918 <HAL_GetTick>
 800b02e:	0003      	movs	r3, r0
 800b030:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b77      	cmp	r3, #119	@ 0x77
 800b036:	d805      	bhi.n	800b044 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2278      	movs	r2, #120	@ 0x78
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	0018      	movs	r0, r3
 800b040:	f009 fc74 	bl	801492c <HAL_Delay>
  }
  AHT20_read_status();
 800b044:	f7ff ffce 	bl	800afe4 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800b048:	4b0e      	ldr	r3, [pc, #56]	@ (800b084 <AHT20_init+0x60>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	4a0e      	ldr	r2, [pc, #56]	@ (800b088 <AHT20_init+0x64>)
 800b04e:	490f      	ldr	r1, [pc, #60]	@ (800b08c <AHT20_init+0x68>)
 800b050:	2003      	movs	r0, #3
 800b052:	f008 fee9 	bl	8013e28 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800b056:	4b0b      	ldr	r3, [pc, #44]	@ (800b084 <AHT20_init+0x60>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	001a      	movs	r2, r3
 800b05c:	2318      	movs	r3, #24
 800b05e:	4013      	ands	r3, r2
 800b060:	2b18      	cmp	r3, #24
 800b062:	d00a      	beq.n	800b07a <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800b064:	4b0a      	ldr	r3, [pc, #40]	@ (800b090 <AHT20_init+0x6c>)
 800b066:	2203      	movs	r2, #3
 800b068:	0019      	movs	r1, r3
 800b06a:	2038      	movs	r0, #56	@ 0x38
 800b06c:	f7ff fec6 	bl	800adfc <WriteRegister>
    HAL_Delay(10);
 800b070:	200a      	movs	r0, #10
 800b072:	f009 fc5b 	bl	801492c <HAL_Delay>
    AHT20_Start_Init();
 800b076:	f7ff ffa7 	bl	800afc8 <AHT20_Start_Init>
  }
  return true;
 800b07a:	2301      	movs	r3, #1
}
 800b07c:	0018      	movs	r0, r3
 800b07e:	46bd      	mov	sp, r7
 800b080:	b002      	add	sp, #8
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20000ef4 	.word	0x20000ef4
 800b088:	0802c0ac 	.word	0x0802c0ac
 800b08c:	0802c0a8 	.word	0x0802c0a8
 800b090:	2000008c 	.word	0x2000008c

0800b094 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b094:	b590      	push	{r4, r7, lr}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b09a:	1dfc      	adds	r4, r7, #7
 800b09c:	4b10      	ldr	r3, [pc, #64]	@ (800b0e0 <AHT20_calibrate+0x4c>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	0019      	movs	r1, r3
 800b0a2:	2038      	movs	r0, #56	@ 0x38
 800b0a4:	f7ff feaa 	bl	800adfc <WriteRegister>
 800b0a8:	0003      	movs	r3, r0
 800b0aa:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b0ac:	1dfb      	adds	r3, r7, #7
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	4053      	eors	r3, r2
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d005      	beq.n	800b0c6 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b0e4 <AHT20_calibrate+0x50>)
 800b0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e8 <AHT20_calibrate+0x54>)
 800b0be:	0019      	movs	r1, r3
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	f008 feb1 	bl	8013e28 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b0c6:	f009 fc27 	bl	8014918 <HAL_GetTick>
 800b0ca:	0003      	movs	r3, r0
 800b0cc:	3332      	adds	r3, #50	@ 0x32
 800b0ce:	001a      	movs	r2, r3
 800b0d0:	4b06      	ldr	r3, [pc, #24]	@ (800b0ec <AHT20_calibrate+0x58>)
 800b0d2:	601a      	str	r2, [r3, #0]
  return response;
 800b0d4:	1dfb      	adds	r3, r7, #7
 800b0d6:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b0d8:	0018      	movs	r0, r3
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b003      	add	sp, #12
 800b0de:	bd90      	pop	{r4, r7, pc}
 800b0e0:	20000098 	.word	0x20000098
 800b0e4:	0802c0d4 	.word	0x0802c0d4
 800b0e8:	0802c10c 	.word	0x0802c10c
 800b0ec:	20000ee0 	.word	0x20000ee0

0800b0f0 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b0f4:	4a0a      	ldr	r2, [pc, #40]	@ (800b120 <AHT20_DeviceConnected+0x30>)
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b124 <AHT20_DeviceConnected+0x34>)
 800b0f8:	0019      	movs	r1, r3
 800b0fa:	2003      	movs	r0, #3
 800b0fc:	f008 fe94 	bl	8013e28 <CreateLine>
   AHT20_init();
 800b100:	f7ff ff90 	bl	800b024 <AHT20_init>
   HAL_Delay(10);
 800b104:	200a      	movs	r0, #10
 800b106:	f009 fc11 	bl	801492c <HAL_Delay>
   AHT20_calibrate();
 800b10a:	f7ff ffc3 	bl	800b094 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b10e:	f7ff ff69 	bl	800afe4 <AHT20_read_status>
 800b112:	0003      	movs	r3, r0
 800b114:	1e5a      	subs	r2, r3, #1
 800b116:	4193      	sbcs	r3, r2
 800b118:	b2db      	uxtb	r3, r3
 }
 800b11a:	0018      	movs	r0, r3
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	0802c110 	.word	0x0802c110
 800b124:	0802c0a8 	.word	0x0802c0a8

0800b128 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b12e:	1dfc      	adds	r4, r7, #7
 800b130:	4b10      	ldr	r3, [pc, #64]	@ (800b174 <AHT20_StartMeasurement+0x4c>)
 800b132:	2203      	movs	r2, #3
 800b134:	0019      	movs	r1, r3
 800b136:	2038      	movs	r0, #56	@ 0x38
 800b138:	f7ff fe60 	bl	800adfc <WriteRegister>
 800b13c:	0003      	movs	r3, r0
 800b13e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b140:	1dfb      	adds	r3, r7, #7
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2201      	movs	r2, #1
 800b146:	4053      	eors	r3, r2
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b14e:	4a0a      	ldr	r2, [pc, #40]	@ (800b178 <AHT20_StartMeasurement+0x50>)
 800b150:	4b0a      	ldr	r3, [pc, #40]	@ (800b17c <AHT20_StartMeasurement+0x54>)
 800b152:	0019      	movs	r1, r3
 800b154:	2001      	movs	r0, #1
 800b156:	f008 fe67 	bl	8013e28 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b15a:	f009 fbdd 	bl	8014918 <HAL_GetTick>
 800b15e:	0003      	movs	r3, r0
 800b160:	33fa      	adds	r3, #250	@ 0xfa
 800b162:	001a      	movs	r2, r3
 800b164:	4b06      	ldr	r3, [pc, #24]	@ (800b180 <AHT20_StartMeasurement+0x58>)
 800b166:	601a      	str	r2, [r3, #0]
  return response;
 800b168:	1dfb      	adds	r3, r7, #7
 800b16a:	781b      	ldrb	r3, [r3, #0]
}
 800b16c:	0018      	movs	r0, r3
 800b16e:	46bd      	mov	sp, r7
 800b170:	b003      	add	sp, #12
 800b172:	bd90      	pop	{r4, r7, pc}
 800b174:	20000094 	.word	0x20000094
 800b178:	0802c128 	.word	0x0802c128
 800b17c:	0802c10c 	.word	0x0802c10c
 800b180:	20000ee0 	.word	0x20000ee0

0800b184 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b184:	b590      	push	{r4, r7, lr}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b18a:	f009 fbc5 	bl	8014918 <HAL_GetTick>
 800b18e:	0003      	movs	r3, r0
 800b190:	22fa      	movs	r2, #250	@ 0xfa
 800b192:	0092      	lsls	r2, r2, #2
 800b194:	189a      	adds	r2, r3, r2
 800b196:	4b2c      	ldr	r3, [pc, #176]	@ (800b248 <AHT20_GetMeasurementValues+0xc4>)
 800b198:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b19a:	e01f      	b.n	800b1dc <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800b19c:	4a2b      	ldr	r2, [pc, #172]	@ (800b24c <AHT20_GetMeasurementValues+0xc8>)
 800b19e:	4b2c      	ldr	r3, [pc, #176]	@ (800b250 <AHT20_GetMeasurementValues+0xcc>)
 800b1a0:	0019      	movs	r1, r3
 800b1a2:	2002      	movs	r0, #2
 800b1a4:	f008 fe40 	bl	8013e28 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b1a8:	4b27      	ldr	r3, [pc, #156]	@ (800b248 <AHT20_GetMeasurementValues+0xc4>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f008 fde5 	bl	8013d7c <TimestampIsReached>
 800b1b2:	1e03      	subs	r3, r0, #0
 800b1b4:	d00f      	beq.n	800b1d6 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800b1b6:	4a27      	ldr	r2, [pc, #156]	@ (800b254 <AHT20_GetMeasurementValues+0xd0>)
 800b1b8:	4b27      	ldr	r3, [pc, #156]	@ (800b258 <AHT20_GetMeasurementValues+0xd4>)
 800b1ba:	0019      	movs	r1, r3
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f008 fe33 	bl	8013e28 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b1c2:	f009 fba9 	bl	8014918 <HAL_GetTick>
 800b1c6:	0003      	movs	r3, r0
 800b1c8:	22fa      	movs	r2, #250	@ 0xfa
 800b1ca:	00d2      	lsls	r2, r2, #3
 800b1cc:	189a      	adds	r2, r3, r2
 800b1ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b248 <AHT20_GetMeasurementValues+0xc4>)
 800b1d0:	601a      	str	r2, [r3, #0]
      return false;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e034      	b.n	800b240 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800b1d6:	200a      	movs	r0, #10
 800b1d8:	f009 fba8 	bl	801492c <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b1dc:	f7ff ff02 	bl	800afe4 <AHT20_read_status>
 800b1e0:	0003      	movs	r3, r0
 800b1e2:	001a      	movs	r2, r3
 800b1e4:	2380      	movs	r3, #128	@ 0x80
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ea:	d0d7      	beq.n	800b19c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b1ec:	200a      	movs	r0, #10
 800b1ee:	f009 fb9d 	bl	801492c <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b1f2:	1dfb      	adds	r3, r7, #7
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	701a      	strb	r2, [r3, #0]
 800b1f8:	e009      	b.n	800b20e <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800b1fa:	1dfb      	adds	r3, r7, #7
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	4a17      	ldr	r2, [pc, #92]	@ (800b25c <AHT20_GetMeasurementValues+0xd8>)
 800b200:	2100      	movs	r1, #0
 800b202:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b204:	1dfb      	adds	r3, r7, #7
 800b206:	781a      	ldrb	r2, [r3, #0]
 800b208:	1dfb      	adds	r3, r7, #7
 800b20a:	3201      	adds	r2, #1
 800b20c:	701a      	strb	r2, [r3, #0]
 800b20e:	1dfb      	adds	r3, r7, #7
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b06      	cmp	r3, #6
 800b214:	d9f1      	bls.n	800b1fa <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b216:	1dbc      	adds	r4, r7, #6
 800b218:	4b10      	ldr	r3, [pc, #64]	@ (800b25c <AHT20_GetMeasurementValues+0xd8>)
 800b21a:	2207      	movs	r2, #7
 800b21c:	0019      	movs	r1, r3
 800b21e:	2038      	movs	r0, #56	@ 0x38
 800b220:	f7ff fda8 	bl	800ad74 <ReadDirRegister>
 800b224:	0003      	movs	r3, r0
 800b226:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b228:	200a      	movs	r0, #10
 800b22a:	f009 fb7f 	bl	801492c <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b22e:	f009 fb73 	bl	8014918 <HAL_GetTick>
 800b232:	0003      	movs	r3, r0
 800b234:	3364      	adds	r3, #100	@ 0x64
 800b236:	001a      	movs	r2, r3
 800b238:	4b03      	ldr	r3, [pc, #12]	@ (800b248 <AHT20_GetMeasurementValues+0xc4>)
 800b23a:	601a      	str	r2, [r3, #0]
  return response;
 800b23c:	1dbb      	adds	r3, r7, #6
 800b23e:	781b      	ldrb	r3, [r3, #0]
}
 800b240:	0018      	movs	r0, r3
 800b242:	46bd      	mov	sp, r7
 800b244:	b003      	add	sp, #12
 800b246:	bd90      	pop	{r4, r7, pc}
 800b248:	20000ee0 	.word	0x20000ee0
 800b24c:	0802c154 	.word	0x0802c154
 800b250:	0802c17c 	.word	0x0802c17c
 800b254:	0802c180 	.word	0x0802c180
 800b258:	0802c10c 	.word	0x0802c10c
 800b25c:	20000ef4 	.word	0x20000ef4

0800b260 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b262:	46c6      	mov	lr, r8
 800b264:	b500      	push	{lr}
 800b266:	b08a      	sub	sp, #40	@ 0x28
 800b268:	af06      	add	r7, sp, #24
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b26e:	4b5a      	ldr	r3, [pc, #360]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b270:	799c      	ldrb	r4, [r3, #6]
 800b272:	4b59      	ldr	r3, [pc, #356]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b274:	2106      	movs	r1, #6
 800b276:	0018      	movs	r0, r3
 800b278:	f7ff fde2 	bl	800ae40 <CalculateCRC>
 800b27c:	0003      	movs	r3, r0
 800b27e:	429c      	cmp	r4, r3
 800b280:	d044      	beq.n	800b30c <AHT20_Calculate+0xac>
 800b282:	4b55      	ldr	r3, [pc, #340]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b284:	799b      	ldrb	r3, [r3, #6]
 800b286:	2bff      	cmp	r3, #255	@ 0xff
 800b288:	d040      	beq.n	800b30c <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b28a:	4b53      	ldr	r3, [pc, #332]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	4698      	mov	r8, r3
 800b290:	4b51      	ldr	r3, [pc, #324]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	0018      	movs	r0, r3
 800b296:	4b50      	ldr	r3, [pc, #320]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b298:	789b      	ldrb	r3, [r3, #2]
 800b29a:	001c      	movs	r4, r3
 800b29c:	4b4e      	ldr	r3, [pc, #312]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b29e:	78db      	ldrb	r3, [r3, #3]
 800b2a0:	001d      	movs	r5, r3
 800b2a2:	4b4d      	ldr	r3, [pc, #308]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b2a4:	791b      	ldrb	r3, [r3, #4]
 800b2a6:	001e      	movs	r6, r3
 800b2a8:	4b4b      	ldr	r3, [pc, #300]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b2aa:	795b      	ldrb	r3, [r3, #5]
 800b2ac:	469c      	mov	ip, r3
 800b2ae:	4b4a      	ldr	r3, [pc, #296]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b2b0:	799b      	ldrb	r3, [r3, #6]
 800b2b2:	4a4a      	ldr	r2, [pc, #296]	@ (800b3dc <AHT20_Calculate+0x17c>)
 800b2b4:	494a      	ldr	r1, [pc, #296]	@ (800b3e0 <AHT20_Calculate+0x180>)
 800b2b6:	9305      	str	r3, [sp, #20]
 800b2b8:	4663      	mov	r3, ip
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	9603      	str	r6, [sp, #12]
 800b2be:	9502      	str	r5, [sp, #8]
 800b2c0:	9401      	str	r4, [sp, #4]
 800b2c2:	9000      	str	r0, [sp, #0]
 800b2c4:	4643      	mov	r3, r8
 800b2c6:	2003      	movs	r0, #3
 800b2c8:	f008 fdae 	bl	8013e28 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b2cc:	4b42      	ldr	r3, [pc, #264]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b2ce:	799b      	ldrb	r3, [r3, #6]
 800b2d0:	001c      	movs	r4, r3
 800b2d2:	4b41      	ldr	r3, [pc, #260]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b2d4:	2106      	movs	r1, #6
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	f7ff fdb2 	bl	800ae40 <CalculateCRC>
 800b2dc:	0003      	movs	r3, r0
 800b2de:	4a41      	ldr	r2, [pc, #260]	@ (800b3e4 <AHT20_Calculate+0x184>)
 800b2e0:	4941      	ldr	r1, [pc, #260]	@ (800b3e8 <AHT20_Calculate+0x188>)
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	0023      	movs	r3, r4
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	f008 fd9e 	bl	8013e28 <CreateLine>
    *airtemp = 0.0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b2f8:	f009 fb0e 	bl	8014918 <HAL_GetTick>
 800b2fc:	0003      	movs	r3, r0
 800b2fe:	22fa      	movs	r2, #250	@ 0xfa
 800b300:	00d2      	lsls	r2, r2, #3
 800b302:	189a      	adds	r2, r3, r2
 800b304:	4b39      	ldr	r3, [pc, #228]	@ (800b3ec <AHT20_Calculate+0x18c>)
 800b306:	601a      	str	r2, [r3, #0]
    return false;
 800b308:	2300      	movs	r3, #0
 800b30a:	e05f      	b.n	800b3cc <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b30c:	4b38      	ldr	r3, [pc, #224]	@ (800b3f0 <AHT20_Calculate+0x190>)
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b312:	4b31      	ldr	r3, [pc, #196]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b314:	78db      	ldrb	r3, [r3, #3]
 800b316:	041a      	lsls	r2, r3, #16
 800b318:	23f0      	movs	r3, #240	@ 0xf0
 800b31a:	031b      	lsls	r3, r3, #12
 800b31c:	401a      	ands	r2, r3
 800b31e:	4b2e      	ldr	r3, [pc, #184]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b320:	791b      	ldrb	r3, [r3, #4]
 800b322:	021b      	lsls	r3, r3, #8
 800b324:	18d3      	adds	r3, r2, r3
 800b326:	4a2c      	ldr	r2, [pc, #176]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b328:	7952      	ldrb	r2, [r2, #5]
 800b32a:	189b      	adds	r3, r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f7f6 faca 	bl	80018c8 <__aeabi_ui2f>
 800b334:	1c03      	adds	r3, r0, #0
 800b336:	2193      	movs	r1, #147	@ 0x93
 800b338:	05c9      	lsls	r1, r1, #23
 800b33a:	1c18      	adds	r0, r3, #0
 800b33c:	f7f5 fcb2 	bl	8000ca4 <__aeabi_fdiv>
 800b340:	1c03      	adds	r3, r0, #0
 800b342:	492c      	ldr	r1, [pc, #176]	@ (800b3f4 <AHT20_Calculate+0x194>)
 800b344:	1c18      	adds	r0, r3, #0
 800b346:	f7f5 fe7b 	bl	8001040 <__aeabi_fmul>
 800b34a:	1c03      	adds	r3, r0, #0
 800b34c:	492a      	ldr	r1, [pc, #168]	@ (800b3f8 <AHT20_Calculate+0x198>)
 800b34e:	1c18      	adds	r0, r3, #0
 800b350:	f7f5 ffd0 	bl	80012f4 <__aeabi_fsub>
 800b354:	1c03      	adds	r3, r0, #0
 800b356:	1c1a      	adds	r2, r3, #0
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b35c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b35e:	785b      	ldrb	r3, [r3, #1]
 800b360:	031a      	lsls	r2, r3, #12
 800b362:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b364:	789b      	ldrb	r3, [r3, #2]
 800b366:	011b      	lsls	r3, r3, #4
 800b368:	18d3      	adds	r3, r2, r3
 800b36a:	4a1b      	ldr	r2, [pc, #108]	@ (800b3d8 <AHT20_Calculate+0x178>)
 800b36c:	78d2      	ldrb	r2, [r2, #3]
 800b36e:	0912      	lsrs	r2, r2, #4
 800b370:	b2d2      	uxtb	r2, r2
 800b372:	189b      	adds	r3, r3, r2
 800b374:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b376:	68b8      	ldr	r0, [r7, #8]
 800b378:	f7f6 faa6 	bl	80018c8 <__aeabi_ui2f>
 800b37c:	1c03      	adds	r3, r0, #0
 800b37e:	2193      	movs	r1, #147	@ 0x93
 800b380:	05c9      	lsls	r1, r1, #23
 800b382:	1c18      	adds	r0, r3, #0
 800b384:	f7f5 fc8e 	bl	8000ca4 <__aeabi_fdiv>
 800b388:	1c03      	adds	r3, r0, #0
 800b38a:	491c      	ldr	r1, [pc, #112]	@ (800b3fc <AHT20_Calculate+0x19c>)
 800b38c:	1c18      	adds	r0, r3, #0
 800b38e:	f7f5 fe57 	bl	8001040 <__aeabi_fmul>
 800b392:	1c03      	adds	r3, r0, #0
 800b394:	1c1a      	adds	r2, r3, #0
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	1c18      	adds	r0, r3, #0
 800b3a0:	f7f8 fa78 	bl	8003894 <__aeabi_f2d>
 800b3a4:	0004      	movs	r4, r0
 800b3a6:	000d      	movs	r5, r1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	1c18      	adds	r0, r3, #0
 800b3ae:	f7f8 fa71 	bl	8003894 <__aeabi_f2d>
 800b3b2:	0002      	movs	r2, r0
 800b3b4:	000b      	movs	r3, r1
 800b3b6:	4812      	ldr	r0, [pc, #72]	@ (800b400 <AHT20_Calculate+0x1a0>)
 800b3b8:	4912      	ldr	r1, [pc, #72]	@ (800b404 <AHT20_Calculate+0x1a4>)
 800b3ba:	9202      	str	r2, [sp, #8]
 800b3bc:	9303      	str	r3, [sp, #12]
 800b3be:	9400      	str	r4, [sp, #0]
 800b3c0:	9501      	str	r5, [sp, #4]
 800b3c2:	0002      	movs	r2, r0
 800b3c4:	2002      	movs	r0, #2
 800b3c6:	f008 fd2f 	bl	8013e28 <CreateLine>
  return true;
 800b3ca:	2301      	movs	r3, #1
}
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	b004      	add	sp, #16
 800b3d2:	bc80      	pop	{r7}
 800b3d4:	46b8      	mov	r8, r7
 800b3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d8:	20000ef4 	.word	0x20000ef4
 800b3dc:	0802c1a4 	.word	0x0802c1a4
 800b3e0:	0802c0a8 	.word	0x0802c0a8
 800b3e4:	0802c224 	.word	0x0802c224
 800b3e8:	0802c10c 	.word	0x0802c10c
 800b3ec:	20000ee0 	.word	0x20000ee0
 800b3f0:	20000efb 	.word	0x20000efb
 800b3f4:	43480000 	.word	0x43480000
 800b3f8:	42480000 	.word	0x42480000
 800b3fc:	42c80000 	.word	0x42c80000
 800b400:	0802c24c 	.word	0x0802c24c
 800b404:	0802c17c 	.word	0x0802c17c

0800b408 <AHT20_reset>:

bool AHT20_reset(void) {
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b40c:	f009 fa84 	bl	8014918 <HAL_GetTick>
 800b410:	0003      	movs	r3, r0
 800b412:	3332      	adds	r3, #50	@ 0x32
 800b414:	001a      	movs	r2, r3
 800b416:	4b07      	ldr	r3, [pc, #28]	@ (800b434 <AHT20_reset+0x2c>)
 800b418:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b41a:	4b07      	ldr	r3, [pc, #28]	@ (800b438 <AHT20_reset+0x30>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b420:	4b06      	ldr	r3, [pc, #24]	@ (800b43c <AHT20_reset+0x34>)
 800b422:	2201      	movs	r2, #1
 800b424:	0019      	movs	r1, r3
 800b426:	2038      	movs	r0, #56	@ 0x38
 800b428:	f7ff fce8 	bl	800adfc <WriteRegister>
 800b42c:	0003      	movs	r3, r0
}
 800b42e:	0018      	movs	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	20000ee0 	.word	0x20000ee0
 800b438:	20000ee4 	.word	0x20000ee4
 800b43c:	20000090 	.word	0x20000090

0800b440 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b446:	4b61      	ldr	r3, [pc, #388]	@ (800b5cc <AHT_Upkeep+0x18c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	0018      	movs	r0, r3
 800b44c:	f008 fc96 	bl	8013d7c <TimestampIsReached>
 800b450:	0003      	movs	r3, r0
 800b452:	001a      	movs	r2, r3
 800b454:	2301      	movs	r3, #1
 800b456:	4053      	eors	r3, r2
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <AHT_Upkeep+0x24>
    return AHTState;
 800b45e:	4b5c      	ldr	r3, [pc, #368]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	e0ae      	b.n	800b5c2 <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b464:	4b5a      	ldr	r3, [pc, #360]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b05      	cmp	r3, #5
 800b46a:	d900      	bls.n	800b46e <AHT_Upkeep+0x2e>
 800b46c:	e07d      	b.n	800b56a <AHT_Upkeep+0x12a>
 800b46e:	009a      	lsls	r2, r3, #2
 800b470:	4b58      	ldr	r3, [pc, #352]	@ (800b5d4 <AHT_Upkeep+0x194>)
 800b472:	18d3      	adds	r3, r2, r3
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b478:	4a57      	ldr	r2, [pc, #348]	@ (800b5d8 <AHT_Upkeep+0x198>)
 800b47a:	4b58      	ldr	r3, [pc, #352]	@ (800b5dc <AHT_Upkeep+0x19c>)
 800b47c:	0019      	movs	r1, r3
 800b47e:	2003      	movs	r0, #3
 800b480:	f008 fcd2 	bl	8013e28 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b484:	f009 fa48 	bl	8014918 <HAL_GetTick>
 800b488:	0003      	movs	r3, r0
 800b48a:	4a55      	ldr	r2, [pc, #340]	@ (800b5e0 <AHT_Upkeep+0x1a0>)
 800b48c:	189a      	adds	r2, r3, r2
 800b48e:	4b4f      	ldr	r3, [pc, #316]	@ (800b5cc <AHT_Upkeep+0x18c>)
 800b490:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b492:	4b54      	ldr	r3, [pc, #336]	@ (800b5e4 <AHT_Upkeep+0x1a4>)
 800b494:	781a      	ldrb	r2, [r3, #0]
 800b496:	4b54      	ldr	r3, [pc, #336]	@ (800b5e8 <AHT_Upkeep+0x1a8>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d100      	bne.n	800b4a0 <AHT_Upkeep+0x60>
 800b49e:	e087      	b.n	800b5b0 <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b4a0:	4b4b      	ldr	r3, [pc, #300]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b4a2:	2205      	movs	r2, #5
 800b4a4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b4a6:	e083      	b.n	800b5b0 <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b4a8:	f002 fca8 	bl	800ddfc <getSensorLock>
 800b4ac:	1e03      	subs	r3, r0, #0
 800b4ae:	d000      	beq.n	800b4b2 <AHT_Upkeep+0x72>
 800b4b0:	e080      	b.n	800b5b4 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b4b2:	2002      	movs	r0, #2
 800b4b4:	f002 fc8e 	bl	800ddd4 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b4b8:	f7ff fe36 	bl	800b128 <AHT20_StartMeasurement>
 800b4bc:	0003      	movs	r3, r0
 800b4be:	001a      	movs	r2, r3
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4053      	eors	r3, r2
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00c      	beq.n	800b4e4 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b4ca:	f7ff ff9d 	bl	800b408 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b4ce:	f009 fa23 	bl	8014918 <HAL_GetTick>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	33c8      	adds	r3, #200	@ 0xc8
 800b4d6:	001a      	movs	r2, r3
 800b4d8:	4b3c      	ldr	r3, [pc, #240]	@ (800b5cc <AHT_Upkeep+0x18c>)
 800b4da:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b4dc:	4b3c      	ldr	r3, [pc, #240]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b4de:	22ff      	movs	r2, #255	@ 0xff
 800b4e0:	701a      	strb	r2, [r3, #0]
 800b4e2:	e002      	b.n	800b4ea <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b4e4:	4b3a      	ldr	r3, [pc, #232]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b4ea:	200a      	movs	r0, #10
 800b4ec:	f009 fa1e 	bl	801492c <HAL_Delay>
    break;
 800b4f0:	e065      	b.n	800b5be <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b4f2:	f7ff fe47 	bl	800b184 <AHT20_GetMeasurementValues>
 800b4f6:	1e03      	subs	r3, r0, #0
 800b4f8:	d05e      	beq.n	800b5b8 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b4fa:	200a      	movs	r0, #10
 800b4fc:	f009 fa16 	bl	801492c <HAL_Delay>
      setSensorLock(FREE);
 800b500:	2000      	movs	r0, #0
 800b502:	f002 fc67 	bl	800ddd4 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b506:	4b32      	ldr	r3, [pc, #200]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b508:	2203      	movs	r2, #3
 800b50a:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b50c:	e054      	b.n	800b5b8 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b50e:	003a      	movs	r2, r7
 800b510:	1d3b      	adds	r3, r7, #4
 800b512:	0011      	movs	r1, r2
 800b514:	0018      	movs	r0, r3
 800b516:	f7ff fea3 	bl	800b260 <AHT20_Calculate>
 800b51a:	0003      	movs	r3, r0
 800b51c:	001a      	movs	r2, r3
 800b51e:	2301      	movs	r3, #1
 800b520:	4053      	eors	r3, r2
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d005      	beq.n	800b534 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b528:	4b29      	ldr	r3, [pc, #164]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b52a:	22ff      	movs	r2, #255	@ 0xff
 800b52c:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b52e:	4b28      	ldr	r3, [pc, #160]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	e046      	b.n	800b5c2 <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	1c11      	adds	r1, r2, #0
 800b53a:	1c18      	adds	r0, r3, #0
 800b53c:	f7f9 fb10 	bl	8004b60 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	1c11      	adds	r1, r2, #0
 800b546:	1c18      	adds	r0, r3, #0
 800b548:	f7f8 ff52 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b54c:	4b20      	ldr	r3, [pc, #128]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b54e:	2205      	movs	r2, #5
 800b550:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b552:	f009 f9e1 	bl	8014918 <HAL_GetTick>
 800b556:	0003      	movs	r3, r0
 800b558:	4a24      	ldr	r2, [pc, #144]	@ (800b5ec <AHT_Upkeep+0x1ac>)
 800b55a:	189a      	adds	r2, r3, r2
 800b55c:	4b1b      	ldr	r3, [pc, #108]	@ (800b5cc <AHT_Upkeep+0x18c>)
 800b55e:	601a      	str	r2, [r3, #0]
    break;
 800b560:	e02d      	b.n	800b5be <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b562:	4b1b      	ldr	r3, [pc, #108]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b564:	2201      	movs	r2, #1
 800b566:	701a      	strb	r2, [r3, #0]
  break;
 800b568:	e029      	b.n	800b5be <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b56a:	4b19      	ldr	r3, [pc, #100]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b570:	f002 fc44 	bl	800ddfc <getSensorLock>
 800b574:	0003      	movs	r3, r0
 800b576:	2b02      	cmp	r3, #2
 800b578:	d102      	bne.n	800b580 <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b57a:	2000      	movs	r0, #0
 800b57c:	f002 fc2a 	bl	800ddd4 <setSensorLock>
    }
    AHTerrors++;
 800b580:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f0 <AHT_Upkeep+0x1b0>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	b2da      	uxtb	r2, r3
 800b588:	4b19      	ldr	r3, [pc, #100]	@ (800b5f0 <AHT_Upkeep+0x1b0>)
 800b58a:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b58c:	4b18      	ldr	r3, [pc, #96]	@ (800b5f0 <AHT_Upkeep+0x1b0>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b19      	cmp	r3, #25
 800b592:	d913      	bls.n	800b5bc <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b594:	4a17      	ldr	r2, [pc, #92]	@ (800b5f4 <AHT_Upkeep+0x1b4>)
 800b596:	4b18      	ldr	r3, [pc, #96]	@ (800b5f8 <AHT_Upkeep+0x1b8>)
 800b598:	0019      	movs	r1, r3
 800b59a:	2001      	movs	r0, #1
 800b59c:	f008 fc44 	bl	8013e28 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e4 <AHT_Upkeep+0x1a4>)
 800b5a8:	781a      	ldrb	r2, [r3, #0]
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e8 <AHT_Upkeep+0x1a8>)
 800b5ac:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b5ae:	e005      	b.n	800b5bc <AHT_Upkeep+0x17c>
    break;
 800b5b0:	46c0      	nop			@ (mov r8, r8)
 800b5b2:	e004      	b.n	800b5be <AHT_Upkeep+0x17e>
      break;
 800b5b4:	46c0      	nop			@ (mov r8, r8)
 800b5b6:	e002      	b.n	800b5be <AHT_Upkeep+0x17e>
    break;
 800b5b8:	46c0      	nop			@ (mov r8, r8)
 800b5ba:	e000      	b.n	800b5be <AHT_Upkeep+0x17e>
    break;
 800b5bc:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b5be:	4b04      	ldr	r3, [pc, #16]	@ (800b5d0 <AHT_Upkeep+0x190>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
}
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	b002      	add	sp, #8
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	46c0      	nop			@ (mov r8, r8)
 800b5cc:	20000ee0 	.word	0x20000ee0
 800b5d0:	2000009f 	.word	0x2000009f
 800b5d4:	0802e2fc 	.word	0x0802e2fc
 800b5d8:	0802c280 	.word	0x0802c280
 800b5dc:	0802c0a8 	.word	0x0802c0a8
 800b5e0:	000dbba0 	.word	0x000dbba0
 800b5e4:	20000e43 	.word	0x20000e43
 800b5e8:	20000efc 	.word	0x20000efc
 800b5ec:	0000ea60 	.word	0x0000ea60
 800b5f0:	20000efb 	.word	0x20000efb
 800b5f4:	0802c2a8 	.word	0x0802c2a8
 800b5f8:	0802c10c 	.word	0x0802c10c

0800b5fc <WriteMemRegister>:
static bool bmperror = false;
static uint8_t mode = BMP280_FORCED_MODE;
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af02      	add	r7, sp, #8
 800b602:	0004      	movs	r4, r0
 800b604:	0008      	movs	r0, r1
 800b606:	60ba      	str	r2, [r7, #8]
 800b608:	0019      	movs	r1, r3
 800b60a:	260e      	movs	r6, #14
 800b60c:	19bb      	adds	r3, r7, r6
 800b60e:	1c22      	adds	r2, r4, #0
 800b610:	801a      	strh	r2, [r3, #0]
 800b612:	230c      	movs	r3, #12
 800b614:	18fb      	adds	r3, r7, r3
 800b616:	1c02      	adds	r2, r0, #0
 800b618:	801a      	strh	r2, [r3, #0]
 800b61a:	1dbb      	adds	r3, r7, #6
 800b61c:	1c0a      	adds	r2, r1, #0
 800b61e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b620:	4b0c      	ldr	r3, [pc, #48]	@ (800b654 <WriteMemRegister+0x58>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d010      	beq.n	800b64a <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b628:	4b0a      	ldr	r3, [pc, #40]	@ (800b654 <WriteMemRegister+0x58>)
 800b62a:	681c      	ldr	r4, [r3, #0]
 800b62c:	4b0a      	ldr	r3, [pc, #40]	@ (800b658 <WriteMemRegister+0x5c>)
 800b62e:	7818      	ldrb	r0, [r3, #0]
 800b630:	68bd      	ldr	r5, [r7, #8]
 800b632:	230c      	movs	r3, #12
 800b634:	18fb      	adds	r3, r7, r3
 800b636:	881a      	ldrh	r2, [r3, #0]
 800b638:	19bb      	adds	r3, r7, r6
 800b63a:	8819      	ldrh	r1, [r3, #0]
 800b63c:	1dbb      	adds	r3, r7, #6
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	002b      	movs	r3, r5
 800b644:	47a0      	blx	r4
 800b646:	0003      	movs	r3, r0
 800b648:	e000      	b.n	800b64c <WriteMemRegister+0x50>
  }
  return false;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	0018      	movs	r0, r3
 800b64e:	46bd      	mov	sp, r7
 800b650:	b005      	add	sp, #20
 800b652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b654:	20000f00 	.word	0x20000f00
 800b658:	200000a0 	.word	0x200000a0

0800b65c <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65e:	b087      	sub	sp, #28
 800b660:	af02      	add	r7, sp, #8
 800b662:	0004      	movs	r4, r0
 800b664:	0008      	movs	r0, r1
 800b666:	60ba      	str	r2, [r7, #8]
 800b668:	0019      	movs	r1, r3
 800b66a:	260e      	movs	r6, #14
 800b66c:	19bb      	adds	r3, r7, r6
 800b66e:	1c22      	adds	r2, r4, #0
 800b670:	801a      	strh	r2, [r3, #0]
 800b672:	230c      	movs	r3, #12
 800b674:	18fb      	adds	r3, r7, r3
 800b676:	1c02      	adds	r2, r0, #0
 800b678:	801a      	strh	r2, [r3, #0]
 800b67a:	1dbb      	adds	r3, r7, #6
 800b67c:	1c0a      	adds	r2, r1, #0
 800b67e:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b680:	4b0c      	ldr	r3, [pc, #48]	@ (800b6b4 <ReadMemRegister+0x58>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d010      	beq.n	800b6aa <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b688:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b4 <ReadMemRegister+0x58>)
 800b68a:	681c      	ldr	r4, [r3, #0]
 800b68c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b8 <ReadMemRegister+0x5c>)
 800b68e:	7818      	ldrb	r0, [r3, #0]
 800b690:	68bd      	ldr	r5, [r7, #8]
 800b692:	230c      	movs	r3, #12
 800b694:	18fb      	adds	r3, r7, r3
 800b696:	881a      	ldrh	r2, [r3, #0]
 800b698:	19bb      	adds	r3, r7, r6
 800b69a:	8819      	ldrh	r1, [r3, #0]
 800b69c:	1dbb      	adds	r3, r7, #6
 800b69e:	881b      	ldrh	r3, [r3, #0]
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	002b      	movs	r3, r5
 800b6a4:	47a0      	blx	r4
 800b6a6:	0003      	movs	r3, r0
 800b6a8:	e000      	b.n	800b6ac <ReadMemRegister+0x50>
  }
  return false;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	0018      	movs	r0, r3
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	b005      	add	sp, #20
 800b6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6b4:	20000f04 	.word	0x20000f04
 800b6b8:	200000a0 	.word	0x200000a0

0800b6bc <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b6c4:	f009 f928 	bl	8014918 <HAL_GetTick>
 800b6c8:	0002      	movs	r2, r0
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	18d2      	adds	r2, r2, r3
 800b6ce:	4b03      	ldr	r3, [pc, #12]	@ (800b6dc <setBMP280TimeStamp+0x20>)
 800b6d0:	601a      	str	r2, [r3, #0]
}
 800b6d2:	46c0      	nop			@ (mov r8, r8)
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	b002      	add	sp, #8
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	46c0      	nop			@ (mov r8, r8)
 800b6dc:	20000f24 	.word	0x20000f24

0800b6e0 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b6ea:	4b05      	ldr	r3, [pc, #20]	@ (800b700 <BMP_Init+0x20>)
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b6f0:	4b04      	ldr	r3, [pc, #16]	@ (800b704 <BMP_Init+0x24>)
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	601a      	str	r2, [r3, #0]
}
 800b6f6:	46c0      	nop			@ (mov r8, r8)
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	b002      	add	sp, #8
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	46c0      	nop			@ (mov r8, r8)
 800b700:	20000f04 	.word	0x20000f04
 800b704:	20000f00 	.word	0x20000f00

0800b708 <BMP280_reset>:

static void BMP280_reset() {
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b70e:	1dfb      	adds	r3, r7, #7
 800b710:	22b6      	movs	r2, #182	@ 0xb6
 800b712:	701a      	strb	r2, [r3, #0]
  bmperror = false;
 800b714:	4b0a      	ldr	r3, [pc, #40]	@ (800b740 <BMP280_reset+0x38>)
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b71a:	1dfa      	adds	r2, r7, #7
 800b71c:	2301      	movs	r3, #1
 800b71e:	2101      	movs	r1, #1
 800b720:	20e0      	movs	r0, #224	@ 0xe0
 800b722:	f7ff ff6b 	bl	800b5fc <WriteMemRegister>
  Info("BMP280 has been reset");
 800b726:	4a07      	ldr	r2, [pc, #28]	@ (800b744 <BMP280_reset+0x3c>)
 800b728:	4b07      	ldr	r3, [pc, #28]	@ (800b748 <BMP280_reset+0x40>)
 800b72a:	0019      	movs	r1, r3
 800b72c:	2002      	movs	r0, #2
 800b72e:	f008 fb7b 	bl	8013e28 <CreateLine>
  HAL_Delay(100);
 800b732:	2064      	movs	r0, #100	@ 0x64
 800b734:	f009 f8fa 	bl	801492c <HAL_Delay>
}
 800b738:	46c0      	nop			@ (mov r8, r8)
 800b73a:	46bd      	mov	sp, r7
 800b73c:	b002      	add	sp, #8
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	20000f29 	.word	0x20000f29
 800b744:	0802c2ec 	.word	0x0802c2ec
 800b748:	0802c304 	.word	0x0802c304

0800b74c <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b74c:	b590      	push	{r4, r7, lr}
 800b74e:	b085      	sub	sp, #20
 800b750:	af02      	add	r7, sp, #8
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, (uint8_t *)&dig, sizeof(dig));
 800b752:	4a30      	ldr	r2, [pc, #192]	@ (800b814 <BMP280_get_calibration+0xc8>)
 800b754:	2318      	movs	r3, #24
 800b756:	2101      	movs	r1, #1
 800b758:	2088      	movs	r0, #136	@ 0x88
 800b75a:	f7ff ff7f 	bl	800b65c <ReadMemRegister>
  Debug("BMP280 calibration data:");
 800b75e:	4a2e      	ldr	r2, [pc, #184]	@ (800b818 <BMP280_get_calibration+0xcc>)
 800b760:	4b2e      	ldr	r3, [pc, #184]	@ (800b81c <BMP280_get_calibration+0xd0>)
 800b762:	0019      	movs	r1, r3
 800b764:	2003      	movs	r0, #3
 800b766:	f008 fb5f 	bl	8013e28 <CreateLine>
  char stc = 'T';
 800b76a:	1dfb      	adds	r3, r7, #7
 800b76c:	2254      	movs	r2, #84	@ 0x54
 800b76e:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 1;
 800b770:	1dbb      	adds	r3, r7, #6
 800b772:	2201      	movs	r2, #1
 800b774:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b776:	1d7b      	adds	r3, r7, #5
 800b778:	2200      	movs	r2, #0
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	e041      	b.n	800b802 <BMP280_get_calibration+0xb6>
    if ((x == 0) || (x == 3)) {
 800b77e:	1d7b      	adds	r3, r7, #5
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <BMP280_get_calibration+0x42>
 800b786:	1d7b      	adds	r3, r7, #5
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d11d      	bne.n	800b7ca <BMP280_get_calibration+0x7e>
      if (x==3) {
 800b78e:	1d7b      	adds	r3, r7, #5
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b03      	cmp	r3, #3
 800b794:	d105      	bne.n	800b7a2 <BMP280_get_calibration+0x56>
        idx = 1;
 800b796:	1dbb      	adds	r3, r7, #6
 800b798:	2201      	movs	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
        stc = 'P';
 800b79c:	1dfb      	adds	r3, r7, #7
 800b79e:	2250      	movs	r2, #80	@ 0x50
 800b7a0:	701a      	strb	r2, [r3, #0]
      }
      Debug("dig.%c%d: %d", stc, idx, (uint16_t)dig.calarray[x]);
 800b7a2:	1dfb      	adds	r3, r7, #7
 800b7a4:	7818      	ldrb	r0, [r3, #0]
 800b7a6:	1dbb      	adds	r3, r7, #6
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	1d7a      	adds	r2, r7, #5
 800b7ac:	7811      	ldrb	r1, [r2, #0]
 800b7ae:	4a19      	ldr	r2, [pc, #100]	@ (800b814 <BMP280_get_calibration+0xc8>)
 800b7b0:	0049      	lsls	r1, r1, #1
 800b7b2:	5e8a      	ldrsh	r2, [r1, r2]
 800b7b4:	b292      	uxth	r2, r2
 800b7b6:	0014      	movs	r4, r2
 800b7b8:	4a19      	ldr	r2, [pc, #100]	@ (800b820 <BMP280_get_calibration+0xd4>)
 800b7ba:	4918      	ldr	r1, [pc, #96]	@ (800b81c <BMP280_get_calibration+0xd0>)
 800b7bc:	9401      	str	r4, [sp, #4]
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	0003      	movs	r3, r0
 800b7c2:	2003      	movs	r0, #3
 800b7c4:	f008 fb30 	bl	8013e28 <CreateLine>
 800b7c8:	e011      	b.n	800b7ee <BMP280_get_calibration+0xa2>
    }
    else {
    Debug("dig.%c%d: %d", stc, idx, dig.calarray[x]);
 800b7ca:	1dfb      	adds	r3, r7, #7
 800b7cc:	7818      	ldrb	r0, [r3, #0]
 800b7ce:	1dbb      	adds	r3, r7, #6
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	1d7a      	adds	r2, r7, #5
 800b7d4:	7811      	ldrb	r1, [r2, #0]
 800b7d6:	4a0f      	ldr	r2, [pc, #60]	@ (800b814 <BMP280_get_calibration+0xc8>)
 800b7d8:	0049      	lsls	r1, r1, #1
 800b7da:	5e8a      	ldrsh	r2, [r1, r2]
 800b7dc:	0014      	movs	r4, r2
 800b7de:	4a10      	ldr	r2, [pc, #64]	@ (800b820 <BMP280_get_calibration+0xd4>)
 800b7e0:	490e      	ldr	r1, [pc, #56]	@ (800b81c <BMP280_get_calibration+0xd0>)
 800b7e2:	9401      	str	r4, [sp, #4]
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	0003      	movs	r3, r0
 800b7e8:	2003      	movs	r0, #3
 800b7ea:	f008 fb1d 	bl	8013e28 <CreateLine>
    }
    idx++;
 800b7ee:	1dbb      	adds	r3, r7, #6
 800b7f0:	781a      	ldrb	r2, [r3, #0]
 800b7f2:	1dbb      	adds	r3, r7, #6
 800b7f4:	3201      	adds	r2, #1
 800b7f6:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b7f8:	1d7b      	adds	r3, r7, #5
 800b7fa:	781a      	ldrb	r2, [r3, #0]
 800b7fc:	1d7b      	adds	r3, r7, #5
 800b7fe:	3201      	adds	r2, #1
 800b800:	701a      	strb	r2, [r3, #0]
 800b802:	1d7b      	adds	r3, r7, #5
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b0b      	cmp	r3, #11
 800b808:	d9b9      	bls.n	800b77e <BMP280_get_calibration+0x32>
  }
}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	46c0      	nop			@ (mov r8, r8)
 800b80e:	46bd      	mov	sp, r7
 800b810:	b003      	add	sp, #12
 800b812:	bd90      	pop	{r4, r7, pc}
 800b814:	20000f08 	.word	0x20000f08
 800b818:	0802c308 	.word	0x0802c308
 800b81c:	0802c324 	.word	0x0802c324
 800b820:	0802c328 	.word	0x0802c328

0800b824 <BMP280_set_config>:

void BMP280_set_config() {
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_16 | BMP280_SPI_OFF);
 800b82a:	1dfb      	adds	r3, r7, #7
 800b82c:	2290      	movs	r2, #144	@ 0x90
 800b82e:	701a      	strb	r2, [r3, #0]
  if (!WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1)) {
 800b830:	1dfa      	adds	r2, r7, #7
 800b832:	2301      	movs	r3, #1
 800b834:	2101      	movs	r1, #1
 800b836:	20f5      	movs	r0, #245	@ 0xf5
 800b838:	f7ff fee0 	bl	800b5fc <WriteMemRegister>
 800b83c:	0003      	movs	r3, r0
 800b83e:	001a      	movs	r2, r3
 800b840:	2301      	movs	r3, #1
 800b842:	4053      	eors	r3, r2
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d005      	beq.n	800b856 <BMP280_set_config+0x32>
    Error("BMP280 writing to BMP280_REG_CONFIG");
 800b84a:	4a0b      	ldr	r2, [pc, #44]	@ (800b878 <BMP280_set_config+0x54>)
 800b84c:	4b0b      	ldr	r3, [pc, #44]	@ (800b87c <BMP280_set_config+0x58>)
 800b84e:	0019      	movs	r1, r3
 800b850:	2001      	movs	r0, #1
 800b852:	f008 fae9 	bl	8013e28 <CreateLine>
  }
  ReadMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b856:	1dfa      	adds	r2, r7, #7
 800b858:	2301      	movs	r3, #1
 800b85a:	2101      	movs	r1, #1
 800b85c:	20f5      	movs	r0, #245	@ 0xf5
 800b85e:	f7ff fefd 	bl	800b65c <ReadMemRegister>
  Debug("BMP280_REG_CONFIG: 0x%02X", data);
 800b862:	1dfb      	adds	r3, r7, #7
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	4a06      	ldr	r2, [pc, #24]	@ (800b880 <BMP280_set_config+0x5c>)
 800b868:	4906      	ldr	r1, [pc, #24]	@ (800b884 <BMP280_set_config+0x60>)
 800b86a:	2003      	movs	r0, #3
 800b86c:	f008 fadc 	bl	8013e28 <CreateLine>
}
 800b870:	46c0      	nop			@ (mov r8, r8)
 800b872:	46bd      	mov	sp, r7
 800b874:	b002      	add	sp, #8
 800b876:	bd80      	pop	{r7, pc}
 800b878:	0802c338 	.word	0x0802c338
 800b87c:	0802c35c 	.word	0x0802c35c
 800b880:	0802c360 	.word	0x0802c360
 800b884:	0802c324 	.word	0x0802c324

0800b888 <BMP280_DeviceConnected>:

 bool BMP280_DeviceConnected() {
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af02      	add	r7, sp, #8
   bool rslt = false;
 800b88e:	1dfb      	adds	r3, r7, #7
 800b890:	2200      	movs	r2, #0
 800b892:	701a      	strb	r2, [r3, #0]
    uint8_t bmpData;
    // Read the chip-id of bmp280 sensor
    bmp280I2Caddr = BMP280_ADDRESS;
 800b894:	4b28      	ldr	r3, [pc, #160]	@ (800b938 <BMP280_DeviceConnected+0xb0>)
 800b896:	2276      	movs	r2, #118	@ 0x76
 800b898:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b89a:	1dfc      	adds	r4, r7, #7
 800b89c:	1dba      	adds	r2, r7, #6
 800b89e:	2301      	movs	r3, #1
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	20d0      	movs	r0, #208	@ 0xd0
 800b8a4:	f7ff feda 	bl	800b65c <ReadMemRegister>
 800b8a8:	0003      	movs	r3, r0
 800b8aa:	7023      	strb	r3, [r4, #0]
    if (bmpData != BMP280_CHIP_ID) {
 800b8ac:	1dbb      	adds	r3, r7, #6
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b58      	cmp	r3, #88	@ 0x58
 800b8b2:	d00e      	beq.n	800b8d2 <BMP280_DeviceConnected+0x4a>
      bmp280I2Caddr++;
 800b8b4:	4b20      	ldr	r3, [pc, #128]	@ (800b938 <BMP280_DeviceConnected+0xb0>)
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b938 <BMP280_DeviceConnected+0xb0>)
 800b8be:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b8c0:	1dfc      	adds	r4, r7, #7
 800b8c2:	1dba      	adds	r2, r7, #6
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	20d0      	movs	r0, #208	@ 0xd0
 800b8ca:	f7ff fec7 	bl	800b65c <ReadMemRegister>
 800b8ce:	0003      	movs	r3, r0
 800b8d0:	7023      	strb	r3, [r4, #0]
    }
    if (rslt && (bmpData == BMP280_CHIP_ID)) {
 800b8d2:	1dfb      	adds	r3, r7, #7
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d01b      	beq.n	800b912 <BMP280_DeviceConnected+0x8a>
 800b8da:	1dbb      	adds	r3, r7, #6
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	2b58      	cmp	r3, #88	@ 0x58
 800b8e0:	d117      	bne.n	800b912 <BMP280_DeviceConnected+0x8a>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b8e2:	1dbb      	adds	r3, r7, #6
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	0018      	movs	r0, r3
 800b8e8:	4b13      	ldr	r3, [pc, #76]	@ (800b938 <BMP280_DeviceConnected+0xb0>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	4a13      	ldr	r2, [pc, #76]	@ (800b93c <BMP280_DeviceConnected+0xb4>)
 800b8ee:	4914      	ldr	r1, [pc, #80]	@ (800b940 <BMP280_DeviceConnected+0xb8>)
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	0003      	movs	r3, r0
 800b8f4:	2002      	movs	r0, #2
 800b8f6:	f008 fa97 	bl	8013e28 <CreateLine>
      BMP280_reset(); // get an initial state
 800b8fa:	f7ff ff05 	bl	800b708 <BMP280_reset>
      HAL_Delay(3);
 800b8fe:	2003      	movs	r0, #3
 800b900:	f009 f814 	bl	801492c <HAL_Delay>
      BMP280_get_calibration();
 800b904:	f7ff ff22 	bl	800b74c <BMP280_get_calibration>
      BMP280_set_config();
 800b908:	f7ff ff8c 	bl	800b824 <BMP280_set_config>
      BMP280_set_mode();
 800b90c:	f000 f900 	bl	800bb10 <BMP280_set_mode>
 800b910:	e008      	b.n	800b924 <BMP280_DeviceConnected+0x9c>
    }
    else {
      bmp280I2Caddr = 0;
 800b912:	4b09      	ldr	r3, [pc, #36]	@ (800b938 <BMP280_DeviceConnected+0xb0>)
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800b918:	4a0a      	ldr	r2, [pc, #40]	@ (800b944 <BMP280_DeviceConnected+0xbc>)
 800b91a:	4b0b      	ldr	r3, [pc, #44]	@ (800b948 <BMP280_DeviceConnected+0xc0>)
 800b91c:	0019      	movs	r1, r3
 800b91e:	2001      	movs	r0, #1
 800b920:	f008 fa82 	bl	8013e28 <CreateLine>
    }
    return bmp280I2Caddr;
 800b924:	4b04      	ldr	r3, [pc, #16]	@ (800b938 <BMP280_DeviceConnected+0xb0>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	1e5a      	subs	r2, r3, #1
 800b92a:	4193      	sbcs	r3, r2
 800b92c:	b2db      	uxtb	r3, r3
}
 800b92e:	0018      	movs	r0, r3
 800b930:	46bd      	mov	sp, r7
 800b932:	b003      	add	sp, #12
 800b934:	bd90      	pop	{r4, r7, pc}
 800b936:	46c0      	nop			@ (mov r8, r8)
 800b938:	200000a0 	.word	0x200000a0
 800b93c:	0802c37c 	.word	0x0802c37c
 800b940:	0802c304 	.word	0x0802c304
 800b944:	0802c3b4 	.word	0x0802c3b4
 800b948:	0802c35c 	.word	0x0802c35c

0800b94c <BMP280_get_measurement_values>:

static bool BMP280_get_measurement_values() {
 800b94c:	b5b0      	push	{r4, r5, r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af04      	add	r7, sp, #16
  int8_t rslt = 1;
 800b952:	1dfb      	adds	r3, r7, #7
 800b954:	2201      	movs	r2, #1
 800b956:	701a      	strb	r2, [r3, #0]
  uint8_t bmpData[6];
  HAL_Delay(9);
 800b958:	2009      	movs	r0, #9
 800b95a:	f008 ffe7 	bl	801492c <HAL_Delay>
  BMP280TimeStamp = HAL_GetTick() + 1500;
 800b95e:	f008 ffdb 	bl	8014918 <HAL_GetTick>
 800b962:	0003      	movs	r3, r0
 800b964:	4a4e      	ldr	r2, [pc, #312]	@ (800baa0 <BMP280_get_measurement_values+0x154>)
 800b966:	189a      	adds	r2, r3, r2
 800b968:	4b4e      	ldr	r3, [pc, #312]	@ (800baa4 <BMP280_get_measurement_values+0x158>)
 800b96a:	601a      	str	r2, [r3, #0]
  do {
    HAL_Delay(10);
 800b96c:	200a      	movs	r0, #10
 800b96e:	f008 ffdd 	bl	801492c <HAL_Delay>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData[0], 1);
 800b972:	003a      	movs	r2, r7
 800b974:	2301      	movs	r3, #1
 800b976:	2101      	movs	r1, #1
 800b978:	20f3      	movs	r0, #243	@ 0xf3
 800b97a:	f7ff fe6f 	bl	800b65c <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)) {
 800b97e:	4b49      	ldr	r3, [pc, #292]	@ (800baa4 <BMP280_get_measurement_values+0x158>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	0018      	movs	r0, r3
 800b984:	f008 f9fa 	bl	8013d7c <TimestampIsReached>
 800b988:	1e03      	subs	r3, r0, #0
 800b98a:	d007      	beq.n	800b99c <BMP280_get_measurement_values+0x50>
      Error("BMP280 timeout while waiting for ready.");
 800b98c:	4a46      	ldr	r2, [pc, #280]	@ (800baa8 <BMP280_get_measurement_values+0x15c>)
 800b98e:	4b47      	ldr	r3, [pc, #284]	@ (800baac <BMP280_get_measurement_values+0x160>)
 800b990:	0019      	movs	r1, r3
 800b992:	2001      	movs	r0, #1
 800b994:	f008 fa48 	bl	8013e28 <CreateLine>
      return false;
 800b998:	2300      	movs	r3, #0
 800b99a:	e07c      	b.n	800ba96 <BMP280_get_measurement_values+0x14a>
    }
    HAL_Delay(10);
 800b99c:	200a      	movs	r0, #10
 800b99e:	f008 ffc5 	bl	801492c <HAL_Delay>
  } while (((bmpData[0] & BMP280_NVM_RDY) == BMP280_NVM_RDY) || ((bmpData[0] & BMP280_MEAS_RDY) == BMP280_MEAS_RDY));
 800b9a2:	003b      	movs	r3, r7
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	001a      	movs	r2, r3
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	d1de      	bne.n	800b96c <BMP280_get_measurement_values+0x20>
 800b9ae:	003b      	movs	r3, r7
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	001a      	movs	r2, r3
 800b9b4:	2308      	movs	r3, #8
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	d1d8      	bne.n	800b96c <BMP280_get_measurement_values+0x20>
  rslt = ReadMemRegister(BMP280_REG_PRESS_MSB, 1, &bmpData[0], 6);
 800b9ba:	003a      	movs	r2, r7
 800b9bc:	2306      	movs	r3, #6
 800b9be:	2101      	movs	r1, #1
 800b9c0:	20f7      	movs	r0, #247	@ 0xf7
 800b9c2:	f7ff fe4b 	bl	800b65c <ReadMemRegister>
 800b9c6:	0003      	movs	r3, r0
 800b9c8:	001a      	movs	r2, r3
 800b9ca:	1dfb      	adds	r3, r7, #7
 800b9cc:	701a      	strb	r2, [r3, #0]
  raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b9ce:	003b      	movs	r3, r7
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	031a      	lsls	r2, r3, #12
 800b9d4:	003b      	movs	r3, r7
 800b9d6:	785b      	ldrb	r3, [r3, #1]
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	18d3      	adds	r3, r2, r3
 800b9dc:	003a      	movs	r2, r7
 800b9de:	7892      	ldrb	r2, [r2, #2]
 800b9e0:	0912      	lsrs	r2, r2, #4
 800b9e2:	b2d2      	uxtb	r2, r2
 800b9e4:	189b      	adds	r3, r3, r2
 800b9e6:	001a      	movs	r2, r3
 800b9e8:	4b31      	ldr	r3, [pc, #196]	@ (800bab0 <BMP280_get_measurement_values+0x164>)
 800b9ea:	601a      	str	r2, [r3, #0]
  if (bmpData[0] == 0x80) {
 800b9ec:	003b      	movs	r3, r7
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b80      	cmp	r3, #128	@ 0x80
 800b9f2:	d11b      	bne.n	800ba2c <BMP280_get_measurement_values+0xe0>
    Error("BMP280 Invalid read of barometric pressure.");
 800b9f4:	4a2f      	ldr	r2, [pc, #188]	@ (800bab4 <BMP280_get_measurement_values+0x168>)
 800b9f6:	4b2d      	ldr	r3, [pc, #180]	@ (800baac <BMP280_get_measurement_values+0x160>)
 800b9f8:	0019      	movs	r1, r3
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	f008 fa14 	bl	8013e28 <CreateLine>
    Debug("Data[0]: 0x%02X, Data[1]: 0x%02X, Data[2]: 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800ba00:	003b      	movs	r3, r7
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	001d      	movs	r5, r3
 800ba06:	003b      	movs	r3, r7
 800ba08:	785b      	ldrb	r3, [r3, #1]
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	003b      	movs	r3, r7
 800ba0e:	789b      	ldrb	r3, [r3, #2]
 800ba10:	001c      	movs	r4, r3
 800ba12:	4b27      	ldr	r3, [pc, #156]	@ (800bab0 <BMP280_get_measurement_values+0x164>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a28      	ldr	r2, [pc, #160]	@ (800bab8 <BMP280_get_measurement_values+0x16c>)
 800ba18:	4928      	ldr	r1, [pc, #160]	@ (800babc <BMP280_get_measurement_values+0x170>)
 800ba1a:	9302      	str	r3, [sp, #8]
 800ba1c:	9401      	str	r4, [sp, #4]
 800ba1e:	9000      	str	r0, [sp, #0]
 800ba20:	002b      	movs	r3, r5
 800ba22:	2003      	movs	r0, #3
 800ba24:	f008 fa00 	bl	8013e28 <CreateLine>
    SetAllBlueLED();
 800ba28:	f007 f918 	bl	8012c5c <SetAllBlueLED>
  }
  raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800ba2c:	003b      	movs	r3, r7
 800ba2e:	78db      	ldrb	r3, [r3, #3]
 800ba30:	031a      	lsls	r2, r3, #12
 800ba32:	003b      	movs	r3, r7
 800ba34:	791b      	ldrb	r3, [r3, #4]
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	18d3      	adds	r3, r2, r3
 800ba3a:	003a      	movs	r2, r7
 800ba3c:	7952      	ldrb	r2, [r2, #5]
 800ba3e:	0912      	lsrs	r2, r2, #4
 800ba40:	b2d2      	uxtb	r2, r2
 800ba42:	189b      	adds	r3, r3, r2
 800ba44:	001a      	movs	r2, r3
 800ba46:	4b1e      	ldr	r3, [pc, #120]	@ (800bac0 <BMP280_get_measurement_values+0x174>)
 800ba48:	601a      	str	r2, [r3, #0]
  if (bmpData[3] == 0x80) {
 800ba4a:	003b      	movs	r3, r7
 800ba4c:	78db      	ldrb	r3, [r3, #3]
 800ba4e:	2b80      	cmp	r3, #128	@ 0x80
 800ba50:	d11b      	bne.n	800ba8a <BMP280_get_measurement_values+0x13e>
    Error("BMP280 Invalid read of temperature.");
 800ba52:	4a1c      	ldr	r2, [pc, #112]	@ (800bac4 <BMP280_get_measurement_values+0x178>)
 800ba54:	4b15      	ldr	r3, [pc, #84]	@ (800baac <BMP280_get_measurement_values+0x160>)
 800ba56:	0019      	movs	r1, r3
 800ba58:	2001      	movs	r0, #1
 800ba5a:	f008 f9e5 	bl	8013e28 <CreateLine>
    Debug("Data[3]: 0x%02X, Data[4]: 0x%02X, Data[5]: 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800ba5e:	003b      	movs	r3, r7
 800ba60:	78db      	ldrb	r3, [r3, #3]
 800ba62:	001d      	movs	r5, r3
 800ba64:	003b      	movs	r3, r7
 800ba66:	791b      	ldrb	r3, [r3, #4]
 800ba68:	0018      	movs	r0, r3
 800ba6a:	003b      	movs	r3, r7
 800ba6c:	795b      	ldrb	r3, [r3, #5]
 800ba6e:	001c      	movs	r4, r3
 800ba70:	4b13      	ldr	r3, [pc, #76]	@ (800bac0 <BMP280_get_measurement_values+0x174>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a14      	ldr	r2, [pc, #80]	@ (800bac8 <BMP280_get_measurement_values+0x17c>)
 800ba76:	4911      	ldr	r1, [pc, #68]	@ (800babc <BMP280_get_measurement_values+0x170>)
 800ba78:	9302      	str	r3, [sp, #8]
 800ba7a:	9401      	str	r4, [sp, #4]
 800ba7c:	9000      	str	r0, [sp, #0]
 800ba7e:	002b      	movs	r3, r5
 800ba80:	2003      	movs	r0, #3
 800ba82:	f008 f9d1 	bl	8013e28 <CreateLine>
    SetAllBlueLED();
 800ba86:	f007 f8e9 	bl	8012c5c <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800ba8a:	1dfb      	adds	r3, r7, #7
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b25b      	sxtb	r3, r3
 800ba90:	1e5a      	subs	r2, r3, #1
 800ba92:	4193      	sbcs	r3, r2
 800ba94:	b2db      	uxtb	r3, r3
}
 800ba96:	0018      	movs	r0, r3
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	b002      	add	sp, #8
 800ba9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba9e:	46c0      	nop			@ (mov r8, r8)
 800baa0:	000005dc 	.word	0x000005dc
 800baa4:	20000f24 	.word	0x20000f24
 800baa8:	0802c3c8 	.word	0x0802c3c8
 800baac:	0802c35c 	.word	0x0802c35c
 800bab0:	20000f30 	.word	0x20000f30
 800bab4:	0802c3f0 	.word	0x0802c3f0
 800bab8:	0802c41c 	.word	0x0802c41c
 800babc:	0802c324 	.word	0x0802c324
 800bac0:	20000f2c 	.word	0x20000f2c
 800bac4:	0802c45c 	.word	0x0802c45c
 800bac8:	0802c480 	.word	0x0802c480

0800bacc <BMP280_get_mode>:

static uint8_t BMP280_get_mode() {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800bad2:	1dba      	adds	r2, r7, #6
 800bad4:	2301      	movs	r3, #1
 800bad6:	2101      	movs	r1, #1
 800bad8:	20f4      	movs	r0, #244	@ 0xf4
 800bada:	f7ff fdbf 	bl	800b65c <ReadMemRegister>
 800bade:	0003      	movs	r3, r0
 800bae0:	001a      	movs	r2, r3
 800bae2:	1dfb      	adds	r3, r7, #7
 800bae4:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800bae6:	1dbb      	adds	r3, r7, #6
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2203      	movs	r2, #3
 800baec:	4013      	ands	r3, r2
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	1dbb      	adds	r3, r7, #6
 800baf2:	701a      	strb	r2, [r3, #0]
  if (rslt == 0) {
 800baf4:	1dfb      	adds	r3, r7, #7
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	b25b      	sxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d102      	bne.n	800bb04 <BMP280_get_mode+0x38>
    bmpData = 255;
 800bafe:	1dbb      	adds	r3, r7, #6
 800bb00:	22ff      	movs	r2, #255	@ 0xff
 800bb02:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bb04:	1dbb      	adds	r3, r7, #6
 800bb06:	781b      	ldrb	r3, [r3, #0]
}
 800bb08:	0018      	movs	r0, r3
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	b002      	add	sp, #8
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <BMP280_set_mode>:

static bool BMP280_set_mode() {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_16 | mode);
 800bb16:	4b1a      	ldr	r3, [pc, #104]	@ (800bb80 <BMP280_set_mode+0x70>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2254      	movs	r2, #84	@ 0x54
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	1dfb      	adds	r3, r7, #7
 800bb22:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800bb24:	1dfa      	adds	r2, r7, #7
 800bb26:	2301      	movs	r3, #1
 800bb28:	2101      	movs	r1, #1
 800bb2a:	20f4      	movs	r0, #244	@ 0xf4
 800bb2c:	f7ff fd66 	bl	800b5fc <WriteMemRegister>
  HAL_Delay(10);
 800bb30:	200a      	movs	r0, #10
 800bb32:	f008 fefb 	bl	801492c <HAL_Delay>
  data = BMP280_get_mode();
 800bb36:	f7ff ffc9 	bl	800bacc <BMP280_get_mode>
 800bb3a:	0003      	movs	r3, r0
 800bb3c:	001a      	movs	r2, r3
 800bb3e:	1dfb      	adds	r3, r7, #7
 800bb40:	701a      	strb	r2, [r3, #0]
  data &= BMP280_NORMAL_MODE;
 800bb42:	1dfb      	adds	r3, r7, #7
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2203      	movs	r2, #3
 800bb48:	4013      	ands	r3, r2
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	1dfb      	adds	r3, r7, #7
 800bb4e:	701a      	strb	r2, [r3, #0]
  Debug("BMP280 Operation mode: %s", data==0?"sleep":data==3?"normal":"forced");
 800bb50:	1dfb      	adds	r3, r7, #7
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d007      	beq.n	800bb68 <BMP280_set_mode+0x58>
 800bb58:	1dfb      	adds	r3, r7, #7
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d101      	bne.n	800bb64 <BMP280_set_mode+0x54>
 800bb60:	4b08      	ldr	r3, [pc, #32]	@ (800bb84 <BMP280_set_mode+0x74>)
 800bb62:	e002      	b.n	800bb6a <BMP280_set_mode+0x5a>
 800bb64:	4b08      	ldr	r3, [pc, #32]	@ (800bb88 <BMP280_set_mode+0x78>)
 800bb66:	e000      	b.n	800bb6a <BMP280_set_mode+0x5a>
 800bb68:	4b08      	ldr	r3, [pc, #32]	@ (800bb8c <BMP280_set_mode+0x7c>)
 800bb6a:	4a09      	ldr	r2, [pc, #36]	@ (800bb90 <BMP280_set_mode+0x80>)
 800bb6c:	4909      	ldr	r1, [pc, #36]	@ (800bb94 <BMP280_set_mode+0x84>)
 800bb6e:	2003      	movs	r0, #3
 800bb70:	f008 f95a 	bl	8013e28 <CreateLine>
  return true;
 800bb74:	2301      	movs	r3, #1
}
 800bb76:	0018      	movs	r0, r3
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	b002      	add	sp, #8
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	46c0      	nop			@ (mov r8, r8)
 800bb80:	200000a2 	.word	0x200000a2
 800bb84:	0802c4c0 	.word	0x0802c4c0
 800bb88:	0802c4c8 	.word	0x0802c4c8
 800bb8c:	0802c4d0 	.word	0x0802c4d0
 800bb90:	0802c4d8 	.word	0x0802c4d8
 800bb94:	0802c324 	.word	0x0802c324

0800bb98 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade
// copied from datasheet
static float BMP280_calc_temperature() {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bb9e:	4b1e      	ldr	r3, [pc, #120]	@ (800bc18 <BMP280_calc_temperature+0x80>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	10da      	asrs	r2, r3, #3
 800bba8:	4b1c      	ldr	r3, [pc, #112]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbb2:	2102      	movs	r1, #2
 800bbb4:	5e52      	ldrsh	r2, [r2, r1]
 800bbb6:	4353      	muls	r3, r2
 800bbb8:	12db      	asrs	r3, r3, #11
 800bbba:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	111b      	asrs	r3, r3, #4
 800bbc0:	4a16      	ldr	r2, [pc, #88]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbc2:	8812      	ldrh	r2, [r2, #0]
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	1112      	asrs	r2, r2, #4
 800bbca:	4914      	ldr	r1, [pc, #80]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbcc:	8809      	ldrh	r1, [r1, #0]
 800bbce:	1a52      	subs	r2, r2, r1
 800bbd0:	4353      	muls	r3, r2
 800bbd2:	131b      	asrs	r3, r3, #12
 800bbd4:	4a11      	ldr	r2, [pc, #68]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	5e52      	ldrsh	r2, [r2, r1]
 800bbda:	4353      	muls	r3, r2
 800bbdc:	139b      	asrs	r3, r3, #14
 800bbde:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	18d2      	adds	r2, r2, r3
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800bc20 <BMP280_calc_temperature+0x88>)
 800bbe8:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bbea:	4b0d      	ldr	r3, [pc, #52]	@ (800bc20 <BMP280_calc_temperature+0x88>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	0013      	movs	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	189b      	adds	r3, r3, r2
 800bbf4:	3380      	adds	r3, #128	@ 0x80
 800bbf6:	121b      	asrs	r3, r3, #8
 800bbf8:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bbfa:	68b8      	ldr	r0, [r7, #8]
 800bbfc:	f7f5 fe14 	bl	8001828 <__aeabi_i2f>
 800bc00:	1c03      	adds	r3, r0, #0
 800bc02:	4908      	ldr	r1, [pc, #32]	@ (800bc24 <BMP280_calc_temperature+0x8c>)
 800bc04:	1c18      	adds	r0, r3, #0
 800bc06:	f7f5 f84d 	bl	8000ca4 <__aeabi_fdiv>
 800bc0a:	1c03      	adds	r3, r0, #0
 800bc0c:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bc0e:	687b      	ldr	r3, [r7, #4]
}
 800bc10:	1c18      	adds	r0, r3, #0
 800bc12:	46bd      	mov	sp, r7
 800bc14:	b006      	add	sp, #24
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20000f2c 	.word	0x20000f2c
 800bc1c:	20000f08 	.word	0x20000f08
 800bc20:	20000f20 	.word	0x20000f20
 800bc24:	42c80000 	.word	0x42c80000

0800bc28 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bc2e:	4b4e      	ldr	r3, [pc, #312]	@ (800bd68 <BMP280_calc_pressure+0x140>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bc34:	4b4d      	ldr	r3, [pc, #308]	@ (800bd6c <BMP280_calc_pressure+0x144>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	105b      	asrs	r3, r3, #1
 800bc3a:	4a4d      	ldr	r2, [pc, #308]	@ (800bd70 <BMP280_calc_pressure+0x148>)
 800bc3c:	4694      	mov	ip, r2
 800bc3e:	4463      	add	r3, ip
 800bc40:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	109b      	asrs	r3, r3, #2
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	1092      	asrs	r2, r2, #2
 800bc4a:	4353      	muls	r3, r2
 800bc4c:	12db      	asrs	r3, r3, #11
 800bc4e:	4a49      	ldr	r2, [pc, #292]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc50:	2110      	movs	r1, #16
 800bc52:	5e52      	ldrsh	r2, [r2, r1]
 800bc54:	4353      	muls	r3, r2
 800bc56:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bc58:	4b46      	ldr	r3, [pc, #280]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc5a:	220e      	movs	r2, #14
 800bc5c:	5e9b      	ldrsh	r3, [r3, r2]
 800bc5e:	001a      	movs	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4353      	muls	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	18d3      	adds	r3, r2, r3
 800bc6a:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	109a      	asrs	r2, r3, #2
 800bc70:	4b40      	ldr	r3, [pc, #256]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc72:	210c      	movs	r1, #12
 800bc74:	5e5b      	ldrsh	r3, [r3, r1]
 800bc76:	041b      	lsls	r3, r3, #16
 800bc78:	18d3      	adds	r3, r2, r3
 800bc7a:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bc7c:	4b3d      	ldr	r3, [pc, #244]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc7e:	220a      	movs	r2, #10
 800bc80:	5e9b      	ldrsh	r3, [r3, r2]
 800bc82:	0019      	movs	r1, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	109b      	asrs	r3, r3, #2
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	1092      	asrs	r2, r2, #2
 800bc8c:	4353      	muls	r3, r2
 800bc8e:	135b      	asrs	r3, r3, #13
 800bc90:	434b      	muls	r3, r1
 800bc92:	10da      	asrs	r2, r3, #3
 800bc94:	4b37      	ldr	r3, [pc, #220]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc96:	2108      	movs	r1, #8
 800bc98:	5e5b      	ldrsh	r3, [r3, r1]
 800bc9a:	0019      	movs	r1, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	434b      	muls	r3, r1
 800bca0:	105b      	asrs	r3, r3, #1
 800bca2:	18d3      	adds	r3, r2, r3
 800bca4:	149b      	asrs	r3, r3, #18
 800bca6:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2280      	movs	r2, #128	@ 0x80
 800bcac:	0212      	lsls	r2, r2, #8
 800bcae:	4694      	mov	ip, r2
 800bcb0:	4463      	add	r3, ip
 800bcb2:	4a30      	ldr	r2, [pc, #192]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bcb4:	88d2      	ldrh	r2, [r2, #6]
 800bcb6:	4353      	muls	r3, r2
 800bcb8:	13db      	asrs	r3, r3, #15
 800bcba:	60fb      	str	r3, [r7, #12]

  // Avoid exception caused by division with zero
  if (var1 == 0) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <BMP280_calc_pressure+0x9e>
    return 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e04b      	b.n	800bd5e <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2280      	movs	r2, #128	@ 0x80
 800bcca:	0352      	lsls	r2, r2, #13
 800bccc:	1ad2      	subs	r2, r2, r3
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	131b      	asrs	r3, r3, #12
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	001a      	movs	r2, r3
 800bcd6:	4b28      	ldr	r3, [pc, #160]	@ (800bd78 <BMP280_calc_pressure+0x150>)
 800bcd8:	4353      	muls	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]

    // Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1
  if (p < 0x80000000)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	db09      	blt.n	800bcf6 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	0011      	movs	r1, r2
 800bcea:	0018      	movs	r0, r3
 800bcec:	f7f4 fa5a 	bl	80001a4 <__udivsi3>
 800bcf0:	0003      	movs	r3, r0
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e007      	b.n	800bd06 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	0019      	movs	r1, r3
 800bcfa:	6978      	ldr	r0, [r7, #20]
 800bcfc:	f7f4 fa52 	bl	80001a4 <__udivsi3>
 800bd00:	0003      	movs	r3, r0
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800bd06:	4b1b      	ldr	r3, [pc, #108]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd08:	2216      	movs	r2, #22
 800bd0a:	5e9b      	ldrsh	r3, [r3, r2]
 800bd0c:	0019      	movs	r1, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	08db      	lsrs	r3, r3, #3
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	08d2      	lsrs	r2, r2, #3
 800bd16:	4353      	muls	r3, r2
 800bd18:	0b5b      	lsrs	r3, r3, #13
 800bd1a:	434b      	muls	r3, r1
 800bd1c:	131b      	asrs	r3, r3, #12
 800bd1e:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	089b      	lsrs	r3, r3, #2
 800bd24:	001a      	movs	r2, r3
 800bd26:	4b13      	ldr	r3, [pc, #76]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd28:	2114      	movs	r1, #20
 800bd2a:	5e5b      	ldrsh	r3, [r3, r1]
 800bd2c:	4353      	muls	r3, r2
 800bd2e:	135b      	asrs	r3, r3, #13
 800bd30:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	18d3      	adds	r3, r2, r3
 800bd38:	4a0e      	ldr	r2, [pc, #56]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd3a:	2112      	movs	r1, #18
 800bd3c:	5e52      	ldrsh	r2, [r2, r1]
 800bd3e:	189b      	adds	r3, r3, r2
 800bd40:	111a      	asrs	r2, r3, #4
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	18d3      	adds	r3, r2, r3
 800bd46:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800bd48:	6978      	ldr	r0, [r7, #20]
 800bd4a:	f7f5 fdbd 	bl	80018c8 <__aeabi_ui2f>
 800bd4e:	1c03      	adds	r3, r0, #0
 800bd50:	490a      	ldr	r1, [pc, #40]	@ (800bd7c <BMP280_calc_pressure+0x154>)
 800bd52:	1c18      	adds	r0, r3, #0
 800bd54:	f7f4 ffa6 	bl	8000ca4 <__aeabi_fdiv>
 800bd58:	1c03      	adds	r3, r0, #0
 800bd5a:	607b      	str	r3, [r7, #4]
  return airhPa;
 800bd5c:	687b      	ldr	r3, [r7, #4]
}
 800bd5e:	1c18      	adds	r0, r3, #0
 800bd60:	46bd      	mov	sp, r7
 800bd62:	b006      	add	sp, #24
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	46c0      	nop			@ (mov r8, r8)
 800bd68:	20000f30 	.word	0x20000f30
 800bd6c:	20000f20 	.word	0x20000f20
 800bd70:	ffff0600 	.word	0xffff0600
 800bd74:	20000f08 	.word	0x20000f08
 800bd78:	00000c35 	.word	0x00000c35
 800bd7c:	42c80000 	.word	0x42c80000

0800bd80 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800bd80:	b5b0      	push	{r4, r5, r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800bd86:	4b8d      	ldr	r3, [pc, #564]	@ (800bfbc <BMP_Upkeep+0x23c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	f007 fff6 	bl	8013d7c <TimestampIsReached>
 800bd90:	0003      	movs	r3, r0
 800bd92:	001a      	movs	r2, r3
 800bd94:	2301      	movs	r3, #1
 800bd96:	4053      	eors	r3, r2
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <BMP_Upkeep+0x24>
    return BMPState;
 800bd9e:	4b88      	ldr	r3, [pc, #544]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	e106      	b.n	800bfb2 <BMP_Upkeep+0x232>
  }
  switch(BMPState) {
 800bda4:	4b86      	ldr	r3, [pc, #536]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d008      	beq.n	800bdbe <BMP_Upkeep+0x3e>
 800bdac:	dd00      	ble.n	800bdb0 <BMP_Upkeep+0x30>
 800bdae:	e0f2      	b.n	800bf96 <BMP_Upkeep+0x216>
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d100      	bne.n	800bdb6 <BMP_Upkeep+0x36>
 800bdb4:	e092      	b.n	800bedc <BMP_Upkeep+0x15c>
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d100      	bne.n	800bdbc <BMP_Upkeep+0x3c>
 800bdba:	e0e8      	b.n	800bf8e <BMP_Upkeep+0x20e>
 800bdbc:	e0eb      	b.n	800bf96 <BMP_Upkeep+0x216>
  case BMP_MODE_SELECT:
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bdbe:	f002 f81d 	bl	800ddfc <getSensorLock>
 800bdc2:	1e03      	subs	r3, r0, #0
 800bdc4:	d005      	beq.n	800bdd2 <BMP_Upkeep+0x52>
 800bdc6:	f002 f819 	bl	800ddfc <getSensorLock>
 800bdca:	0003      	movs	r3, r0
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d000      	beq.n	800bdd2 <BMP_Upkeep+0x52>
 800bdd0:	e07c      	b.n	800becc <BMP_Upkeep+0x14c>
      if (getSensorLock() == FREE) {
 800bdd2:	f002 f813 	bl	800ddfc <getSensorLock>
 800bdd6:	1e03      	subs	r3, r0, #0
 800bdd8:	d102      	bne.n	800bde0 <BMP_Upkeep+0x60>
        setSensorLock(BMP280);
 800bdda:	2003      	movs	r0, #3
 800bddc:	f001 fffa 	bl	800ddd4 <setSensorLock>
      }
      bool changed = false;
 800bde0:	240f      	movs	r4, #15
 800bde2:	193b      	adds	r3, r7, r4
 800bde4:	2200      	movs	r2, #0
 800bde6:	701a      	strb	r2, [r3, #0]
      mode = BMP280_get_mode();
 800bde8:	f7ff fe70 	bl	800bacc <BMP280_get_mode>
 800bdec:	0003      	movs	r3, r0
 800bdee:	001a      	movs	r2, r3
 800bdf0:	4b74      	ldr	r3, [pc, #464]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bdf2:	701a      	strb	r2, [r3, #0]
      mode &= BMP280_NORMAL_MODE;
 800bdf4:	4b73      	ldr	r3, [pc, #460]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	2203      	movs	r2, #3
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	4b71      	ldr	r3, [pc, #452]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be00:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800be02:	f7fd fee7 	bl	8009bd4 <Check_USB_PowerOn>
 800be06:	1e03      	subs	r3, r0, #0
 800be08:	d010      	beq.n	800be2c <BMP_Upkeep+0xac>
        if (mode != BMP280_NORMAL_MODE) {
 800be0a:	4b6e      	ldr	r3, [pc, #440]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d02d      	beq.n	800be6e <BMP_Upkeep+0xee>
          mode =BMP280_NORMAL_MODE;
 800be12:	4b6c      	ldr	r3, [pc, #432]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be14:	2203      	movs	r2, #3
 800be16:	701a      	strb	r2, [r3, #0]
          changed = true;
 800be18:	193b      	adds	r3, r7, r4
 800be1a:	2201      	movs	r2, #1
 800be1c:	701a      	strb	r2, [r3, #0]
          Info("BMP280 modus changed to normal");
 800be1e:	4a6a      	ldr	r2, [pc, #424]	@ (800bfc8 <BMP_Upkeep+0x248>)
 800be20:	4b6a      	ldr	r3, [pc, #424]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be22:	0019      	movs	r1, r3
 800be24:	2002      	movs	r0, #2
 800be26:	f007 ffff 	bl	8013e28 <CreateLine>
 800be2a:	e020      	b.n	800be6e <BMP_Upkeep+0xee>
        }
      }
      else {
        if ((mode == BMP280_NORMAL_MODE) || (mode == BMP280_SLEEP_MODE) || (mode == 255)) {
 800be2c:	4b65      	ldr	r3, [pc, #404]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b03      	cmp	r3, #3
 800be32:	d007      	beq.n	800be44 <BMP_Upkeep+0xc4>
 800be34:	4b63      	ldr	r3, [pc, #396]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <BMP_Upkeep+0xc4>
 800be3c:	4b61      	ldr	r3, [pc, #388]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	2bff      	cmp	r3, #255	@ 0xff
 800be42:	d114      	bne.n	800be6e <BMP_Upkeep+0xee>
          changed = true;
 800be44:	230f      	movs	r3, #15
 800be46:	18fb      	adds	r3, r7, r3
 800be48:	2201      	movs	r2, #1
 800be4a:	701a      	strb	r2, [r3, #0]
          mode = BMP280_FORCED_MODE;
 800be4c:	4b5d      	ldr	r3, [pc, #372]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be4e:	2201      	movs	r2, #1
 800be50:	701a      	strb	r2, [r3, #0]
          if ((mode == BMP280_NORMAL_MODE)|| (mode == 255)) {
 800be52:	4b5c      	ldr	r3, [pc, #368]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b03      	cmp	r3, #3
 800be58:	d003      	beq.n	800be62 <BMP_Upkeep+0xe2>
 800be5a:	4b5a      	ldr	r3, [pc, #360]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2bff      	cmp	r3, #255	@ 0xff
 800be60:	d105      	bne.n	800be6e <BMP_Upkeep+0xee>
           Info("BMP280 modus changed to forced");
 800be62:	4a5b      	ldr	r2, [pc, #364]	@ (800bfd0 <BMP_Upkeep+0x250>)
 800be64:	4b59      	ldr	r3, [pc, #356]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be66:	0019      	movs	r1, r3
 800be68:	2002      	movs	r0, #2
 800be6a:	f007 ffdd 	bl	8013e28 <CreateLine>
          }
        }
      }
      if (changed || (mode == BMP280_FORCED_MODE)) {
 800be6e:	230f      	movs	r3, #15
 800be70:	18fb      	adds	r3, r7, r3
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d103      	bne.n	800be80 <BMP_Upkeep+0x100>
 800be78:	4b52      	ldr	r3, [pc, #328]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d105      	bne.n	800be8c <BMP_Upkeep+0x10c>
        BMP280_set_mode();
 800be80:	f7ff fe46 	bl	800bb10 <BMP280_set_mode>
        changed = false;
 800be84:	230f      	movs	r3, #15
 800be86:	18fb      	adds	r3, r7, r3
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
      }
      if (BMP280_get_measurement_values()) {
 800be8c:	f7ff fd5e 	bl	800b94c <BMP280_get_measurement_values>
 800be90:	1e03      	subs	r3, r0, #0
 800be92:	d003      	beq.n	800be9c <BMP_Upkeep+0x11c>
        BMPState = BMP_STATE_PROCESS_RESULTS;
 800be94:	4b4a      	ldr	r3, [pc, #296]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800be96:	2201      	movs	r2, #1
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	e012      	b.n	800bec2 <BMP_Upkeep+0x142>
      }
      else {
        Error("BMP280 Error during reading measurement results array");
 800be9c:	4a4d      	ldr	r2, [pc, #308]	@ (800bfd4 <BMP_Upkeep+0x254>)
 800be9e:	4b4e      	ldr	r3, [pc, #312]	@ (800bfd8 <BMP_Upkeep+0x258>)
 800bea0:	0019      	movs	r1, r3
 800bea2:	2001      	movs	r0, #1
 800bea4:	f007 ffc0 	bl	8013e28 <CreateLine>
        bmperror = true;
 800bea8:	4b4c      	ldr	r3, [pc, #304]	@ (800bfdc <BMP_Upkeep+0x25c>)
 800beaa:	2201      	movs	r2, #1
 800beac:	701a      	strb	r2, [r3, #0]
        BMP280TimeStamp = HAL_GetTick() + 5000;
 800beae:	f008 fd33 	bl	8014918 <HAL_GetTick>
 800beb2:	0003      	movs	r3, r0
 800beb4:	4a4a      	ldr	r2, [pc, #296]	@ (800bfe0 <BMP_Upkeep+0x260>)
 800beb6:	189a      	adds	r2, r3, r2
 800beb8:	4b40      	ldr	r3, [pc, #256]	@ (800bfbc <BMP_Upkeep+0x23c>)
 800beba:	601a      	str	r2, [r3, #0]
        BMPState = BMP_STATE_WAIT ;
 800bebc:	4b40      	ldr	r3, [pc, #256]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bebe:	2202      	movs	r2, #2
 800bec0:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 800bec2:	2000      	movs	r0, #0
 800bec4:	f001 ff86 	bl	800ddd4 <setSensorLock>
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bec8:	46c0      	nop			@ (mov r8, r8)
//      uint8_t locktype = getSensorLock();
//      Debug("Lock is not from BMP280, but from %s",
//        locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
    }
    break;
 800beca:	e070      	b.n	800bfae <BMP_Upkeep+0x22e>
      BMP280TimeStamp = HAL_GetTick() + 97;
 800becc:	f008 fd24 	bl	8014918 <HAL_GetTick>
 800bed0:	0003      	movs	r3, r0
 800bed2:	3361      	adds	r3, #97	@ 0x61
 800bed4:	001a      	movs	r2, r3
 800bed6:	4b39      	ldr	r3, [pc, #228]	@ (800bfbc <BMP_Upkeep+0x23c>)
 800bed8:	601a      	str	r2, [r3, #0]
    break;
 800beda:	e068      	b.n	800bfae <BMP_Upkeep+0x22e>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800bedc:	f7ff fe5c 	bl	800bb98 <BMP280_calc_temperature>
 800bee0:	1c03      	adds	r3, r0, #0
 800bee2:	60bb      	str	r3, [r7, #8]
    airhpa = BMP280_calc_pressure();
 800bee4:	f7ff fea0 	bl	800bc28 <BMP280_calc_pressure>
 800bee8:	1c03      	adds	r3, r0, #0
 800beea:	607b      	str	r3, [r7, #4]
    Info("BMP280 barometric value: %.2fhPa, airtemperature: %2.2fC", airhpa, airtemp);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7f7 fcd1 	bl	8003894 <__aeabi_f2d>
 800bef2:	0004      	movs	r4, r0
 800bef4:	000d      	movs	r5, r1
 800bef6:	68b8      	ldr	r0, [r7, #8]
 800bef8:	f7f7 fccc 	bl	8003894 <__aeabi_f2d>
 800befc:	0002      	movs	r2, r0
 800befe:	000b      	movs	r3, r1
 800bf00:	4838      	ldr	r0, [pc, #224]	@ (800bfe4 <BMP_Upkeep+0x264>)
 800bf02:	4932      	ldr	r1, [pc, #200]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800bf04:	9202      	str	r2, [sp, #8]
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	9400      	str	r4, [sp, #0]
 800bf0a:	9501      	str	r5, [sp, #4]
 800bf0c:	0002      	movs	r2, r0
 800bf0e:	2002      	movs	r0, #2
 800bf10:	f007 ff8a 	bl	8013e28 <CreateLine>

    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800bf14:	4934      	ldr	r1, [pc, #208]	@ (800bfe8 <BMP_Upkeep+0x268>)
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7f4 fb1e 	bl	8000558 <__aeabi_fcmpgt>
 800bf1c:	1e03      	subs	r3, r0, #0
 800bf1e:	d022      	beq.n	800bf66 <BMP_Upkeep+0x1e6>
 800bf20:	4932      	ldr	r1, [pc, #200]	@ (800bfec <BMP_Upkeep+0x26c>)
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7f4 fb04 	bl	8000530 <__aeabi_fcmplt>
 800bf28:	1e03      	subs	r3, r0, #0
 800bf2a:	d01c      	beq.n	800bf66 <BMP_Upkeep+0x1e6>
      setBMP280(airtemp, airhpa);
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	1c11      	adds	r1, r2, #0
 800bf32:	1c18      	adds	r0, r3, #0
 800bf34:	f7f8 fe26 	bl	8004b84 <setBMP280>
      if (Check_USB_PowerOn()) {
 800bf38:	f7fd fe4c 	bl	8009bd4 <Check_USB_PowerOn>
 800bf3c:	1e03      	subs	r3, r0, #0
 800bf3e:	d00a      	beq.n	800bf56 <BMP_Upkeep+0x1d6>
        BMP280TimeStamp = HAL_GetTick() + 28000;
 800bf40:	f008 fcea 	bl	8014918 <HAL_GetTick>
 800bf44:	0003      	movs	r3, r0
 800bf46:	4a2a      	ldr	r2, [pc, #168]	@ (800bff0 <BMP_Upkeep+0x270>)
 800bf48:	189a      	adds	r2, r3, r2
 800bf4a:	4b1c      	ldr	r3, [pc, #112]	@ (800bfbc <BMP_Upkeep+0x23c>)
 800bf4c:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800bf4e:	4b29      	ldr	r3, [pc, #164]	@ (800bff4 <BMP_Upkeep+0x274>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf54:	e017      	b.n	800bf86 <BMP_Upkeep+0x206>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 10000;
 800bf56:	f008 fcdf 	bl	8014918 <HAL_GetTick>
 800bf5a:	0003      	movs	r3, r0
 800bf5c:	4a26      	ldr	r2, [pc, #152]	@ (800bff8 <BMP_Upkeep+0x278>)
 800bf5e:	189a      	adds	r2, r3, r2
 800bf60:	4b16      	ldr	r3, [pc, #88]	@ (800bfbc <BMP_Upkeep+0x23c>)
 800bf62:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf64:	e00f      	b.n	800bf86 <BMP_Upkeep+0x206>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800bf66:	4a25      	ldr	r2, [pc, #148]	@ (800bffc <BMP_Upkeep+0x27c>)
 800bf68:	4b1b      	ldr	r3, [pc, #108]	@ (800bfd8 <BMP_Upkeep+0x258>)
 800bf6a:	0019      	movs	r1, r3
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	f007 ff5b 	bl	8013e28 <CreateLine>
      bmperror = true;
 800bf72:	4b1a      	ldr	r3, [pc, #104]	@ (800bfdc <BMP_Upkeep+0x25c>)
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800bf78:	f008 fcce 	bl	8014918 <HAL_GetTick>
 800bf7c:	0003      	movs	r3, r0
 800bf7e:	4a1e      	ldr	r2, [pc, #120]	@ (800bff8 <BMP_Upkeep+0x278>)
 800bf80:	189a      	adds	r2, r3, r2
 800bf82:	4b0e      	ldr	r3, [pc, #56]	@ (800bfbc <BMP_Upkeep+0x23c>)
 800bf84:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800bf86:	4b0e      	ldr	r3, [pc, #56]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf88:	2202      	movs	r2, #2
 800bf8a:	701a      	strb	r2, [r3, #0]
    break;
 800bf8c:	e00f      	b.n	800bfae <BMP_Upkeep+0x22e>

  case BMP_STATE_WAIT:
      BMPState = BMP_MODE_SELECT;
 800bf8e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf90:	2203      	movs	r2, #3
 800bf92:	701a      	strb	r2, [r3, #0]
    break;
 800bf94:	e00b      	b.n	800bfae <BMP_Upkeep+0x22e>


  default:
    // Handle unexpected state
    BMPState = BMP_MODE_SELECT;
 800bf96:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf98:	2203      	movs	r2, #3
 800bf9a:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800bf9c:	f001 ff2e 	bl	800ddfc <getSensorLock>
 800bfa0:	0003      	movs	r3, r0
 800bfa2:	2b03      	cmp	r3, #3
 800bfa4:	d102      	bne.n	800bfac <BMP_Upkeep+0x22c>
      setSensorLock(FREE);
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	f001 ff14 	bl	800ddd4 <setSensorLock>
    }
    break;
 800bfac:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800bfae:	4b04      	ldr	r3, [pc, #16]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bfb0:	781b      	ldrb	r3, [r3, #0]
}
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	b004      	add	sp, #16
 800bfb8:	bdb0      	pop	{r4, r5, r7, pc}
 800bfba:	46c0      	nop			@ (mov r8, r8)
 800bfbc:	20000f24 	.word	0x20000f24
 800bfc0:	200000a1 	.word	0x200000a1
 800bfc4:	200000a2 	.word	0x200000a2
 800bfc8:	0802c4f4 	.word	0x0802c4f4
 800bfcc:	0802c304 	.word	0x0802c304
 800bfd0:	0802c514 	.word	0x0802c514
 800bfd4:	0802c534 	.word	0x0802c534
 800bfd8:	0802c35c 	.word	0x0802c35c
 800bfdc:	20000f29 	.word	0x20000f29
 800bfe0:	00001388 	.word	0x00001388
 800bfe4:	0802c56c 	.word	0x0802c56c
 800bfe8:	44548000 	.word	0x44548000
 800bfec:	44898000 	.word	0x44898000
 800bff0:	00006d60 	.word	0x00006d60
 800bff4:	20000f28 	.word	0x20000f28
 800bff8:	00002710 	.word	0x00002710
 800bffc:	0802c5a8 	.word	0x0802c5a8

0800c000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c006:	4b10      	ldr	r3, [pc, #64]	@ (800c048 <MX_DMA_Init+0x48>)
 800c008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c00a:	4b0f      	ldr	r3, [pc, #60]	@ (800c048 <MX_DMA_Init+0x48>)
 800c00c:	2101      	movs	r1, #1
 800c00e:	430a      	orrs	r2, r1
 800c010:	631a      	str	r2, [r3, #48]	@ 0x30
 800c012:	4b0d      	ldr	r3, [pc, #52]	@ (800c048 <MX_DMA_Init+0x48>)
 800c014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c016:	2201      	movs	r2, #1
 800c018:	4013      	ands	r3, r2
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800c01e:	2200      	movs	r2, #0
 800c020:	2100      	movs	r1, #0
 800c022:	200a      	movs	r0, #10
 800c024:	f009 f8fe 	bl	8015224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800c028:	200a      	movs	r0, #10
 800c02a:	f009 f910 	bl	801524e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800c02e:	2200      	movs	r2, #0
 800c030:	2103      	movs	r1, #3
 800c032:	200b      	movs	r0, #11
 800c034:	f009 f8f6 	bl	8015224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c038:	200b      	movs	r0, #11
 800c03a:	f009 f908 	bl	801524e <HAL_NVIC_EnableIRQ>

}
 800c03e:	46c0      	nop			@ (mov r8, r8)
 800c040:	46bd      	mov	sp, r7
 800c042:	b002      	add	sp, #8
 800c044:	bd80      	pop	{r7, pc}
 800c046:	46c0      	nop			@ (mov r8, r8)
 800c048:	40021000 	.word	0x40021000

0800c04c <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c04c:	b590      	push	{r4, r7, lr}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	1dbb      	adds	r3, r7, #6
 800c058:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c05a:	4b17      	ldr	r3, [pc, #92]	@ (800c0b8 <WriteUint8ArrayEeprom+0x6c>)
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c060:	f009 fc72 	bl	8015948 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800c064:	2316      	movs	r3, #22
 800c066:	18fb      	adds	r3, r7, r3
 800c068:	2200      	movs	r2, #0
 800c06a:	801a      	strh	r2, [r3, #0]
 800c06c:	e015      	b.n	800c09a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c06e:	4b12      	ldr	r3, [pc, #72]	@ (800c0b8 <WriteUint8ArrayEeprom+0x6c>)
 800c070:	6819      	ldr	r1, [r3, #0]
 800c072:	2416      	movs	r4, #22
 800c074:	193b      	adds	r3, r7, r4
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	18d3      	adds	r3, r2, r3
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	001a      	movs	r2, r3
 800c080:	2000      	movs	r0, #0
 800c082:	f009 fcc9 	bl	8015a18 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c086:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <WriteUint8ArrayEeprom+0x6c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b8 <WriteUint8ArrayEeprom+0x6c>)
 800c08e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c090:	193b      	adds	r3, r7, r4
 800c092:	881a      	ldrh	r2, [r3, #0]
 800c094:	193b      	adds	r3, r7, r4
 800c096:	3201      	adds	r2, #1
 800c098:	801a      	strh	r2, [r3, #0]
 800c09a:	2316      	movs	r3, #22
 800c09c:	18fa      	adds	r2, r7, r3
 800c09e:	1dbb      	adds	r3, r7, #6
 800c0a0:	8812      	ldrh	r2, [r2, #0]
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d3e2      	bcc.n	800c06e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c0a8:	f009 fc7c 	bl	80159a4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c0ac:	4b02      	ldr	r3, [pc, #8]	@ (800c0b8 <WriteUint8ArrayEeprom+0x6c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
}
 800c0b0:	0018      	movs	r0, r3
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	b007      	add	sp, #28
 800c0b6:	bd90      	pop	{r4, r7, pc}
 800c0b8:	20000f34 	.word	0x20000f34

0800c0bc <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	0019      	movs	r1, r3
 800c0c8:	1dbb      	adds	r3, r7, #6
 800c0ca:	801a      	strh	r2, [r3, #0]
 800c0cc:	1d3b      	adds	r3, r7, #4
 800c0ce:	1c0a      	adds	r2, r1, #0
 800c0d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c0d2:	1dba      	adds	r2, r7, #6
 800c0d4:	1d3b      	adds	r3, r7, #4
 800c0d6:	8812      	ldrh	r2, [r2, #0]
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d806      	bhi.n	800c0ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c0de:	1dbb      	adds	r3, r7, #6
 800c0e0:	881a      	ldrh	r2, [r3, #0]
 800c0e2:	68b9      	ldr	r1, [r7, #8]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	0018      	movs	r0, r3
 800c0e8:	f7ff ffb0 	bl	800c04c <WriteUint8ArrayEeprom>
    }
}
 800c0ec:	46c0      	nop			@ (mov r8, r8)
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	b004      	add	sp, #16
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	1dbb      	adds	r3, r7, #6
 800c100:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c102:	2316      	movs	r3, #22
 800c104:	18fb      	adds	r3, r7, r3
 800c106:	2200      	movs	r2, #0
 800c108:	801a      	strh	r2, [r3, #0]
 800c10a:	e010      	b.n	800c12e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c10c:	2016      	movs	r0, #22
 800c10e:	183b      	adds	r3, r7, r0
 800c110:	881a      	ldrh	r2, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	18d3      	adds	r3, r2, r3
 800c116:	0019      	movs	r1, r3
 800c118:	183b      	adds	r3, r7, r0
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	18d3      	adds	r3, r2, r3
 800c120:	780a      	ldrb	r2, [r1, #0]
 800c122:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c124:	183b      	adds	r3, r7, r0
 800c126:	881a      	ldrh	r2, [r3, #0]
 800c128:	183b      	adds	r3, r7, r0
 800c12a:	3201      	adds	r2, #1
 800c12c:	801a      	strh	r2, [r3, #0]
 800c12e:	2316      	movs	r3, #22
 800c130:	18fa      	adds	r2, r7, r3
 800c132:	1dbb      	adds	r3, r7, #6
 800c134:	8812      	ldrh	r2, [r2, #0]
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d3e7      	bcc.n	800c10c <ReadUint8ArrayEEprom+0x18>
    }
}
 800c13c:	46c0      	nop			@ (mov r8, r8)
 800c13e:	46c0      	nop			@ (mov r8, r8)
 800c140:	46bd      	mov	sp, r7
 800c142:	b006      	add	sp, #24
 800c144:	bd80      	pop	{r7, pc}

0800c146 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c146:	b590      	push	{r4, r7, lr}
 800c148:	b085      	sub	sp, #20
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	000a      	movs	r2, r1
 800c150:	1cbb      	adds	r3, r7, #2
 800c152:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c154:	f009 fbf8 	bl	8015948 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c158:	230e      	movs	r3, #14
 800c15a:	18fb      	adds	r3, r7, r3
 800c15c:	2200      	movs	r2, #0
 800c15e:	801a      	strh	r2, [r3, #0]
 800c160:	e00c      	b.n	800c17c <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c162:	240e      	movs	r4, #14
 800c164:	193b      	adds	r3, r7, r4
 800c166:	881a      	ldrh	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	18d3      	adds	r3, r2, r3
 800c16c:	0018      	movs	r0, r3
 800c16e:	f009 fc27 	bl	80159c0 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c172:	193b      	adds	r3, r7, r4
 800c174:	193a      	adds	r2, r7, r4
 800c176:	8812      	ldrh	r2, [r2, #0]
 800c178:	3204      	adds	r2, #4
 800c17a:	801a      	strh	r2, [r3, #0]
 800c17c:	230e      	movs	r3, #14
 800c17e:	18fa      	adds	r2, r7, r3
 800c180:	1cbb      	adds	r3, r7, #2
 800c182:	8812      	ldrh	r2, [r2, #0]
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d3eb      	bcc.n	800c162 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c18a:	f009 fc0b 	bl	80159a4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c18e:	46c0      	nop			@ (mov r8, r8)
 800c190:	46bd      	mov	sp, r7
 800c192:	b005      	add	sp, #20
 800c194:	bd90      	pop	{r4, r7, pc}
	...

0800c198 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1a8:	d901      	bls.n	800c1ae <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c1aa:	237f      	movs	r3, #127	@ 0x7f
 800c1ac:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c1ae:	2017      	movs	r0, #23
 800c1b0:	183b      	adds	r3, r7, r0
 800c1b2:	490d      	ldr	r1, [pc, #52]	@ (800c1e8 <accessLUT10log10+0x50>)
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	188a      	adds	r2, r1, r2
 800c1b8:	7812      	ldrb	r2, [r2, #0]
 800c1ba:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c1bc:	0001      	movs	r1, r0
 800c1be:	187b      	adds	r3, r7, r1
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2206      	movs	r2, #6
 800c1c4:	4113      	asrs	r3, r2
 800c1c6:	001a      	movs	r2, r3
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c1cc:	187b      	adds	r3, r7, r1
 800c1ce:	781a      	ldrb	r2, [r3, #0]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2106      	movs	r1, #6
 800c1d6:	408b      	lsls	r3, r1
 800c1d8:	1ad2      	subs	r2, r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
}
 800c1de:	46c0      	nop			@ (mov r8, r8)
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	b006      	add	sp, #24
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
 800c1e8:	0802e314 	.word	0x0802e314

0800c1ec <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c1ec:	b5b0      	push	{r4, r5, r7, lr}
 800c1ee:	b090      	sub	sp, #64	@ 0x40
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6138      	str	r0, [r7, #16]
 800c1f4:	6179      	str	r1, [r7, #20]
 800c1f6:	60fa      	str	r2, [r7, #12]
 800c1f8:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c1fa:	2308      	movs	r3, #8
 800c1fc:	001a      	movs	r2, r3
 800c1fe:	3a20      	subs	r2, #32
 800c200:	2a00      	cmp	r2, #0
 800c202:	db03      	blt.n	800c20c <efficient10log10+0x20>
 800c204:	2101      	movs	r1, #1
 800c206:	4091      	lsls	r1, r2
 800c208:	000d      	movs	r5, r1
 800c20a:	e008      	b.n	800c21e <efficient10log10+0x32>
 800c20c:	2220      	movs	r2, #32
 800c20e:	1ad2      	subs	r2, r2, r3
 800c210:	2101      	movs	r1, #1
 800c212:	40d1      	lsrs	r1, r2
 800c214:	000a      	movs	r2, r1
 800c216:	2100      	movs	r1, #0
 800c218:	4099      	lsls	r1, r3
 800c21a:	000d      	movs	r5, r1
 800c21c:	4315      	orrs	r5, r2
 800c21e:	2201      	movs	r2, #1
 800c220:	409a      	lsls	r2, r3
 800c222:	0014      	movs	r4, r2
 800c224:	2201      	movs	r2, #1
 800c226:	4252      	negs	r2, r2
 800c228:	17d3      	asrs	r3, r2, #31
 800c22a:	1912      	adds	r2, r2, r4
 800c22c:	416b      	adcs	r3, r5
 800c22e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c230:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c232:	2336      	movs	r3, #54	@ 0x36
 800c234:	2208      	movs	r2, #8
 800c236:	189b      	adds	r3, r3, r2
 800c238:	19db      	adds	r3, r3, r7
 800c23a:	2200      	movs	r2, #0
 800c23c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c23e:	e017      	b.n	800c270 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	07db      	lsls	r3, r3, #31
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	0852      	lsrs	r2, r2, #1
 800c248:	603a      	str	r2, [r7, #0]
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	431a      	orrs	r2, r3
 800c24e:	603a      	str	r2, [r7, #0]
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	085b      	lsrs	r3, r3, #1
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	687c      	ldr	r4, [r7, #4]
 800c25a:	613b      	str	r3, [r7, #16]
 800c25c:	617c      	str	r4, [r7, #20]
        bShift++;
 800c25e:	2136      	movs	r1, #54	@ 0x36
 800c260:	2008      	movs	r0, #8
 800c262:	180b      	adds	r3, r1, r0
 800c264:	19db      	adds	r3, r3, r7
 800c266:	881a      	ldrh	r2, [r3, #0]
 800c268:	180b      	adds	r3, r1, r0
 800c26a:	19db      	adds	r3, r3, r7
 800c26c:	3201      	adds	r2, #1
 800c26e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c274:	429a      	cmp	r2, r3
 800c276:	d8e3      	bhi.n	800c240 <efficient10log10+0x54>
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d103      	bne.n	800c288 <efficient10log10+0x9c>
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	429a      	cmp	r2, r3
 800c286:	d8db      	bhi.n	800c240 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	2308      	movs	r3, #8
 800c28c:	3b01      	subs	r3, #1
 800c28e:	2101      	movs	r1, #1
 800c290:	4099      	lsls	r1, r3
 800c292:	000b      	movs	r3, r1
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c2a0:	231c      	movs	r3, #28
 800c2a2:	2408      	movs	r4, #8
 800c2a4:	191b      	adds	r3, r3, r4
 800c2a6:	19da      	adds	r2, r3, r7
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	191b      	adds	r3, r3, r4
 800c2ac:	19d9      	adds	r1, r3, r7
 800c2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b0:	0018      	movs	r0, r3
 800c2b2:	f7ff ff71 	bl	800c198 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c2b6:	2215      	movs	r2, #21
 800c2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ba:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c2bc:	2036      	movs	r0, #54	@ 0x36
 800c2be:	1902      	adds	r2, r0, r4
 800c2c0:	19d2      	adds	r2, r2, r7
 800c2c2:	8812      	ldrh	r2, [r2, #0]
 800c2c4:	2103      	movs	r1, #3
 800c2c6:	434a      	muls	r2, r1
 800c2c8:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c2ca:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c2cc:	0021      	movs	r1, r4
 800c2ce:	1843      	adds	r3, r0, r1
 800c2d0:	19db      	adds	r3, r3, r7
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	4353      	muls	r3, r2
 800c2d8:	2203      	movs	r2, #3
 800c2da:	4113      	asrs	r3, r2
 800c2dc:	001a      	movs	r2, r3
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c2e2:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c2e4:	2314      	movs	r3, #20
 800c2e6:	185b      	adds	r3, r3, r1
 800c2e8:	19da      	adds	r2, r3, r7
 800c2ea:	2318      	movs	r3, #24
 800c2ec:	185b      	adds	r3, r3, r1
 800c2ee:	19db      	adds	r3, r3, r7
 800c2f0:	0011      	movs	r1, r2
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	f000 f80a 	bl	800c30c <correctIntFracNumber>
    integerPart[0] = intPart;
 800c2f8:	6a3a      	ldr	r2, [r7, #32]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	601a      	str	r2, [r3, #0]
}
 800c304:	46c0      	nop			@ (mov r8, r8)
 800c306:	46bd      	mov	sp, r7
 800c308:	b010      	add	sp, #64	@ 0x40
 800c30a:	bdb0      	pop	{r4, r5, r7, pc}

0800c30c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c316:	e00a      	b.n	800c32e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3b0a      	subs	r3, #10
 800c328:	001a      	movs	r2, r3
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b09      	cmp	r3, #9
 800c334:	dcf0      	bgt.n	800c318 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c336:	e00a      	b.n	800c34e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	1e5a      	subs	r2, r3, #1
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	330a      	adds	r3, #10
 800c348:	001a      	movs	r2, r3
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3309      	adds	r3, #9
 800c354:	dbf0      	blt.n	800c338 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	da0f      	bge.n	800c37e <correctIntFracNumber+0x72>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	dd0b      	ble.n	800c37e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3b0a      	subs	r3, #10
 800c376:	001a      	movs	r2, r3
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c37c:	e012      	b.n	800c3a4 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	dd0e      	ble.n	800c3a4 <correctIntFracNumber+0x98>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	da0a      	bge.n	800c3a4 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	1e5a      	subs	r2, r3, #1
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	330a      	adds	r3, #10
 800c39e:	001a      	movs	r2, r3
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	601a      	str	r2, [r3, #0]
}
 800c3a4:	46c0      	nop			@ (mov r8, r8)
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	b002      	add	sp, #8
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c3ac:	b590      	push	{r4, r7, lr}
 800c3ae:	b08b      	sub	sp, #44	@ 0x2c
 800c3b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3b2:	2414      	movs	r4, #20
 800c3b4:	193b      	adds	r3, r7, r4
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	2314      	movs	r3, #20
 800c3ba:	001a      	movs	r2, r3
 800c3bc:	2100      	movs	r1, #0
 800c3be:	f01a f8a5 	bl	802650c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3c2:	4b8a      	ldr	r3, [pc, #552]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c6:	4b89      	ldr	r3, [pc, #548]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3c8:	2104      	movs	r1, #4
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3ce:	4b87      	ldr	r3, [pc, #540]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d2:	2204      	movs	r2, #4
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	613b      	str	r3, [r7, #16]
 800c3d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c3da:	4b84      	ldr	r3, [pc, #528]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3de:	4b83      	ldr	r3, [pc, #524]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3e0:	2180      	movs	r1, #128	@ 0x80
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3e6:	4b81      	ldr	r3, [pc, #516]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ea:	2280      	movs	r2, #128	@ 0x80
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3f2:	4b7e      	ldr	r3, [pc, #504]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f6:	4b7d      	ldr	r3, [pc, #500]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3fe:	4b7b      	ldr	r3, [pc, #492]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c402:	2201      	movs	r2, #1
 800c404:	4013      	ands	r3, r2
 800c406:	60bb      	str	r3, [r7, #8]
 800c408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c40a:	4b78      	ldr	r3, [pc, #480]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c40e:	4b77      	ldr	r3, [pc, #476]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c410:	2102      	movs	r1, #2
 800c412:	430a      	orrs	r2, r1
 800c414:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c416:	4b75      	ldr	r3, [pc, #468]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c41a:	2202      	movs	r2, #2
 800c41c:	4013      	ands	r3, r2
 800c41e:	607b      	str	r3, [r7, #4]
 800c420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c422:	4b72      	ldr	r3, [pc, #456]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c426:	4b71      	ldr	r3, [pc, #452]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c428:	2108      	movs	r1, #8
 800c42a:	430a      	orrs	r2, r1
 800c42c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c42e:	4b6f      	ldr	r3, [pc, #444]	@ (800c5ec <MX_GPIO_Init+0x240>)
 800c430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c432:	2208      	movs	r2, #8
 800c434:	4013      	ands	r3, r2
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c43a:	4b6d      	ldr	r3, [pc, #436]	@ (800c5f0 <MX_GPIO_Init+0x244>)
 800c43c:	2201      	movs	r2, #1
 800c43e:	2101      	movs	r1, #1
 800c440:	0018      	movs	r0, r3
 800c442:	f009 fcdc 	bl	8015dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c446:	4b6a      	ldr	r3, [pc, #424]	@ (800c5f0 <MX_GPIO_Init+0x244>)
 800c448:	2200      	movs	r2, #0
 800c44a:	2102      	movs	r1, #2
 800c44c:	0018      	movs	r0, r3
 800c44e:	f009 fcd6 	bl	8015dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c452:	4968      	ldr	r1, [pc, #416]	@ (800c5f4 <MX_GPIO_Init+0x248>)
 800c454:	4b68      	ldr	r3, [pc, #416]	@ (800c5f8 <MX_GPIO_Init+0x24c>)
 800c456:	2201      	movs	r2, #1
 800c458:	0018      	movs	r0, r3
 800c45a:	f009 fcd0 	bl	8015dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c45e:	2380      	movs	r3, #128	@ 0x80
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	4866      	ldr	r0, [pc, #408]	@ (800c5fc <MX_GPIO_Init+0x250>)
 800c464:	2201      	movs	r2, #1
 800c466:	0019      	movs	r1, r3
 800c468:	f009 fcc9 	bl	8015dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c46c:	2380      	movs	r3, #128	@ 0x80
 800c46e:	015b      	lsls	r3, r3, #5
 800c470:	4862      	ldr	r0, [pc, #392]	@ (800c5fc <MX_GPIO_Init+0x250>)
 800c472:	2200      	movs	r2, #0
 800c474:	0019      	movs	r1, r3
 800c476:	f009 fcc2 	bl	8015dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c47a:	193b      	adds	r3, r7, r4
 800c47c:	4a60      	ldr	r2, [pc, #384]	@ (800c600 <MX_GPIO_Init+0x254>)
 800c47e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c480:	193b      	adds	r3, r7, r4
 800c482:	2203      	movs	r2, #3
 800c484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c486:	193b      	adds	r3, r7, r4
 800c488:	2200      	movs	r2, #0
 800c48a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c48c:	193b      	adds	r3, r7, r4
 800c48e:	4a5b      	ldr	r2, [pc, #364]	@ (800c5fc <MX_GPIO_Init+0x250>)
 800c490:	0019      	movs	r1, r3
 800c492:	0010      	movs	r0, r2
 800c494:	f009 fb18 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c498:	193b      	adds	r3, r7, r4
 800c49a:	2203      	movs	r2, #3
 800c49c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c49e:	193b      	adds	r3, r7, r4
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a4:	193b      	adds	r3, r7, r4
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4aa:	193b      	adds	r3, r7, r4
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c4b0:	193b      	adds	r3, r7, r4
 800c4b2:	4a4f      	ldr	r2, [pc, #316]	@ (800c5f0 <MX_GPIO_Init+0x244>)
 800c4b4:	0019      	movs	r1, r3
 800c4b6:	0010      	movs	r0, r2
 800c4b8:	f009 fb06 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c4bc:	193b      	adds	r3, r7, r4
 800c4be:	2270      	movs	r2, #112	@ 0x70
 800c4c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4c2:	193b      	adds	r3, r7, r4
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4c8:	193b      	adds	r3, r7, r4
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4ce:	193a      	adds	r2, r7, r4
 800c4d0:	23a0      	movs	r3, #160	@ 0xa0
 800c4d2:	05db      	lsls	r3, r3, #23
 800c4d4:	0011      	movs	r1, r2
 800c4d6:	0018      	movs	r0, r3
 800c4d8:	f009 faf6 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c4dc:	193b      	adds	r3, r7, r4
 800c4de:	22c0      	movs	r2, #192	@ 0xc0
 800c4e0:	0052      	lsls	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4e4:	193b      	adds	r3, r7, r4
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ea:	193b      	adds	r3, r7, r4
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f0:	193a      	adds	r2, r7, r4
 800c4f2:	23a0      	movs	r3, #160	@ 0xa0
 800c4f4:	05db      	lsls	r3, r3, #23
 800c4f6:	0011      	movs	r1, r2
 800c4f8:	0018      	movs	r0, r3
 800c4fa:	f009 fae5 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c4fe:	193b      	adds	r3, r7, r4
 800c500:	4a3c      	ldr	r2, [pc, #240]	@ (800c5f4 <MX_GPIO_Init+0x248>)
 800c502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c504:	193b      	adds	r3, r7, r4
 800c506:	2201      	movs	r2, #1
 800c508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c50a:	193b      	adds	r3, r7, r4
 800c50c:	2200      	movs	r2, #0
 800c50e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c510:	193b      	adds	r3, r7, r4
 800c512:	2200      	movs	r2, #0
 800c514:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c516:	193b      	adds	r3, r7, r4
 800c518:	4a37      	ldr	r2, [pc, #220]	@ (800c5f8 <MX_GPIO_Init+0x24c>)
 800c51a:	0019      	movs	r1, r3
 800c51c:	0010      	movs	r0, r2
 800c51e:	f009 fad3 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c522:	193b      	adds	r3, r7, r4
 800c524:	4a37      	ldr	r2, [pc, #220]	@ (800c604 <MX_GPIO_Init+0x258>)
 800c526:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c528:	193b      	adds	r3, r7, r4
 800c52a:	2203      	movs	r2, #3
 800c52c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c52e:	193b      	adds	r3, r7, r4
 800c530:	2200      	movs	r2, #0
 800c532:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c534:	193b      	adds	r3, r7, r4
 800c536:	4a30      	ldr	r2, [pc, #192]	@ (800c5f8 <MX_GPIO_Init+0x24c>)
 800c538:	0019      	movs	r1, r3
 800c53a:	0010      	movs	r0, r2
 800c53c:	f009 fac4 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c540:	0021      	movs	r1, r4
 800c542:	187b      	adds	r3, r7, r1
 800c544:	2280      	movs	r2, #128	@ 0x80
 800c546:	0092      	lsls	r2, r2, #2
 800c548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c54a:	000c      	movs	r4, r1
 800c54c:	193b      	adds	r3, r7, r4
 800c54e:	2200      	movs	r2, #0
 800c550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c552:	193b      	adds	r3, r7, r4
 800c554:	2200      	movs	r2, #0
 800c556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c558:	193b      	adds	r3, r7, r4
 800c55a:	4a28      	ldr	r2, [pc, #160]	@ (800c5fc <MX_GPIO_Init+0x250>)
 800c55c:	0019      	movs	r1, r3
 800c55e:	0010      	movs	r0, r2
 800c560:	f009 fab2 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c564:	193b      	adds	r3, r7, r4
 800c566:	2280      	movs	r2, #128	@ 0x80
 800c568:	0212      	lsls	r2, r2, #8
 800c56a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c56c:	193b      	adds	r3, r7, r4
 800c56e:	2288      	movs	r2, #136	@ 0x88
 800c570:	0352      	lsls	r2, r2, #13
 800c572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c574:	193b      	adds	r3, r7, r4
 800c576:	2200      	movs	r2, #0
 800c578:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c57a:	193a      	adds	r2, r7, r4
 800c57c:	23a0      	movs	r3, #160	@ 0xa0
 800c57e:	05db      	lsls	r3, r3, #23
 800c580:	0011      	movs	r1, r2
 800c582:	0018      	movs	r0, r3
 800c584:	f009 faa0 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c588:	0021      	movs	r1, r4
 800c58a:	187b      	adds	r3, r7, r1
 800c58c:	22c0      	movs	r2, #192	@ 0xc0
 800c58e:	0152      	lsls	r2, r2, #5
 800c590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c592:	000c      	movs	r4, r1
 800c594:	193b      	adds	r3, r7, r4
 800c596:	2201      	movs	r2, #1
 800c598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c59a:	193b      	adds	r3, r7, r4
 800c59c:	2200      	movs	r2, #0
 800c59e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5a0:	193b      	adds	r3, r7, r4
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5a6:	193b      	adds	r3, r7, r4
 800c5a8:	4a14      	ldr	r2, [pc, #80]	@ (800c5fc <MX_GPIO_Init+0x250>)
 800c5aa:	0019      	movs	r1, r3
 800c5ac:	0010      	movs	r0, r2
 800c5ae:	f009 fa8b 	bl	8015ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c5b2:	0021      	movs	r1, r4
 800c5b4:	187b      	adds	r3, r7, r1
 800c5b6:	2204      	movs	r2, #4
 800c5b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5ba:	187b      	adds	r3, r7, r1
 800c5bc:	2200      	movs	r2, #0
 800c5be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5c0:	187b      	adds	r3, r7, r1
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c5c6:	187b      	adds	r3, r7, r1
 800c5c8:	4a0f      	ldr	r2, [pc, #60]	@ (800c608 <MX_GPIO_Init+0x25c>)
 800c5ca:	0019      	movs	r1, r3
 800c5cc:	0010      	movs	r0, r2
 800c5ce:	f009 fa7b 	bl	8015ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	2007      	movs	r0, #7
 800c5d8:	f008 fe24 	bl	8015224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c5dc:	2007      	movs	r0, #7
 800c5de:	f008 fe36 	bl	801524e <HAL_NVIC_EnableIRQ>

}
 800c5e2:	46c0      	nop			@ (mov r8, r8)
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	b00b      	add	sp, #44	@ 0x2c
 800c5e8:	bd90      	pop	{r4, r7, pc}
 800c5ea:	46c0      	nop			@ (mov r8, r8)
 800c5ec:	40021000 	.word	0x40021000
 800c5f0:	50001c00 	.word	0x50001c00
 800c5f4:	00000301 	.word	0x00000301
 800c5f8:	50000400 	.word	0x50000400
 800c5fc:	50000800 	.word	0x50000800
 800c600:	0000200c 	.word	0x0000200c
 800c604:	0000403e 	.word	0x0000403e
 800c608:	50000c00 	.word	0x50000c00

0800c60c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2100      	movs	r1, #0
 800c61a:	0018      	movs	r0, r3
 800c61c:	f010 fb6e 	bl	801ccfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2108      	movs	r1, #8
 800c624:	0018      	movs	r0, r3
 800c626:	f010 fb69 	bl	801ccfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	210c      	movs	r1, #12
 800c62e:	0018      	movs	r0, r3
 800c630:	f010 fb64 	bl	801ccfc <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c634:	2380      	movs	r3, #128	@ 0x80
 800c636:	05db      	lsls	r3, r3, #23
 800c638:	22fa      	movs	r2, #250	@ 0xfa
 800c63a:	0112      	lsls	r2, r2, #4
 800c63c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c63e:	2380      	movs	r3, #128	@ 0x80
 800c640:	05db      	lsls	r3, r3, #23
 800c642:	22fa      	movs	r2, #250	@ 0xfa
 800c644:	0112      	lsls	r2, r2, #4
 800c646:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c648:	2380      	movs	r3, #128	@ 0x80
 800c64a:	05db      	lsls	r3, r3, #23
 800c64c:	22fa      	movs	r2, #250	@ 0xfa
 800c64e:	0112      	lsls	r2, r2, #4
 800c650:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c652:	2380      	movs	r3, #128	@ 0x80
 800c654:	05db      	lsls	r3, r3, #23
 800c656:	22fa      	movs	r2, #250	@ 0xfa
 800c658:	0112      	lsls	r2, r2, #4
 800c65a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2100      	movs	r1, #0
 800c660:	0018      	movs	r0, r3
 800c662:	f010 fb4b 	bl	801ccfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2104      	movs	r1, #4
 800c66a:	0018      	movs	r0, r3
 800c66c:	f010 fb46 	bl	801ccfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2108      	movs	r1, #8
 800c674:	0018      	movs	r0, r3
 800c676:	f010 fb41 	bl	801ccfc <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c67a:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a4 <GPIO_InitPWMLEDs+0x98>)
 800c67c:	22fa      	movs	r2, #250	@ 0xfa
 800c67e:	0112      	lsls	r2, r2, #4
 800c680:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c682:	4b08      	ldr	r3, [pc, #32]	@ (800c6a4 <GPIO_InitPWMLEDs+0x98>)
 800c684:	22fa      	movs	r2, #250	@ 0xfa
 800c686:	0112      	lsls	r2, r2, #4
 800c688:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c68a:	4b06      	ldr	r3, [pc, #24]	@ (800c6a4 <GPIO_InitPWMLEDs+0x98>)
 800c68c:	22fa      	movs	r2, #250	@ 0xfa
 800c68e:	0112      	lsls	r2, r2, #4
 800c690:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c692:	4b04      	ldr	r3, [pc, #16]	@ (800c6a4 <GPIO_InitPWMLEDs+0x98>)
 800c694:	22fa      	movs	r2, #250	@ 0xfa
 800c696:	0112      	lsls	r2, r2, #4
 800c698:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c69a:	46c0      	nop			@ (mov r8, r8)
 800c69c:	46bd      	mov	sp, r7
 800c69e:	b002      	add	sp, #8
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	46c0      	nop			@ (mov r8, r8)
 800c6a4:	40000400 	.word	0x40000400

0800c6a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6ae:	4a1c      	ldr	r2, [pc, #112]	@ (800c720 <MX_I2C1_Init+0x78>)
 800c6b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c6b2:	4b1a      	ldr	r3, [pc, #104]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c724 <MX_I2C1_Init+0x7c>)
 800c6b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c6b8:	4b18      	ldr	r3, [pc, #96]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c6be:	4b17      	ldr	r3, [pc, #92]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c6c4:	4b15      	ldr	r3, [pc, #84]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c6ca:	4b14      	ldr	r3, [pc, #80]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c6d0:	4b12      	ldr	r3, [pc, #72]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c6d6:	4b11      	ldr	r3, [pc, #68]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f009 fbc3 	bl	8015e70 <HAL_I2C_Init>
 800c6ea:	1e03      	subs	r3, r0, #0
 800c6ec:	d001      	beq.n	800c6f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c6ee:	f000 fe47 	bl	800d380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f00c fb30 	bl	8018d5c <HAL_I2CEx_ConfigAnalogFilter>
 800c6fc:	1e03      	subs	r3, r0, #0
 800c6fe:	d001      	beq.n	800c704 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c700:	f000 fe3e 	bl	800d380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c704:	4b05      	ldr	r3, [pc, #20]	@ (800c71c <MX_I2C1_Init+0x74>)
 800c706:	2100      	movs	r1, #0
 800c708:	0018      	movs	r0, r3
 800c70a:	f00c fb73 	bl	8018df4 <HAL_I2CEx_ConfigDigitalFilter>
 800c70e:	1e03      	subs	r3, r0, #0
 800c710:	d001      	beq.n	800c716 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c712:	f000 fe35 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c716:	46c0      	nop			@ (mov r8, r8)
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	20000f38 	.word	0x20000f38
 800c720:	40005400 	.word	0x40005400
 800c724:	00503d58 	.word	0x00503d58

0800c728 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c72c:	4b1b      	ldr	r3, [pc, #108]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c72e:	4a1c      	ldr	r2, [pc, #112]	@ (800c7a0 <MX_I2C2_Init+0x78>)
 800c730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c732:	4b1a      	ldr	r3, [pc, #104]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c734:	4a1b      	ldr	r2, [pc, #108]	@ (800c7a4 <MX_I2C2_Init+0x7c>)
 800c736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c738:	4b18      	ldr	r3, [pc, #96]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c73e:	4b17      	ldr	r3, [pc, #92]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c740:	2201      	movs	r2, #1
 800c742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c744:	4b15      	ldr	r3, [pc, #84]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c746:	2200      	movs	r2, #0
 800c748:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c74a:	4b14      	ldr	r3, [pc, #80]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c74c:	2200      	movs	r2, #0
 800c74e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c750:	4b12      	ldr	r3, [pc, #72]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c752:	2200      	movs	r2, #0
 800c754:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c756:	4b11      	ldr	r3, [pc, #68]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c758:	2200      	movs	r2, #0
 800c75a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c75c:	4b0f      	ldr	r3, [pc, #60]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c75e:	2200      	movs	r2, #0
 800c760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c762:	4b0e      	ldr	r3, [pc, #56]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c764:	0018      	movs	r0, r3
 800c766:	f009 fb83 	bl	8015e70 <HAL_I2C_Init>
 800c76a:	1e03      	subs	r3, r0, #0
 800c76c:	d001      	beq.n	800c772 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c76e:	f000 fe07 	bl	800d380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c772:	4b0a      	ldr	r3, [pc, #40]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c774:	2100      	movs	r1, #0
 800c776:	0018      	movs	r0, r3
 800c778:	f00c faf0 	bl	8018d5c <HAL_I2CEx_ConfigAnalogFilter>
 800c77c:	1e03      	subs	r3, r0, #0
 800c77e:	d001      	beq.n	800c784 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c780:	f000 fdfe 	bl	800d380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c784:	4b05      	ldr	r3, [pc, #20]	@ (800c79c <MX_I2C2_Init+0x74>)
 800c786:	2100      	movs	r1, #0
 800c788:	0018      	movs	r0, r3
 800c78a:	f00c fb33 	bl	8018df4 <HAL_I2CEx_ConfigDigitalFilter>
 800c78e:	1e03      	subs	r3, r0, #0
 800c790:	d001      	beq.n	800c796 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c792:	f000 fdf5 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c796:	46c0      	nop			@ (mov r8, r8)
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	20000f8c 	.word	0x20000f8c
 800c7a0:	40005800 	.word	0x40005800
 800c7a4:	00503d58 	.word	0x00503d58

0800c7a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c7a8:	b590      	push	{r4, r7, lr}
 800c7aa:	b08b      	sub	sp, #44	@ 0x2c
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7b0:	2414      	movs	r4, #20
 800c7b2:	193b      	adds	r3, r7, r4
 800c7b4:	0018      	movs	r0, r3
 800c7b6:	2314      	movs	r3, #20
 800c7b8:	001a      	movs	r2, r3
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	f019 fea6 	bl	802650c <memset>
  if(i2cHandle->Instance==I2C1)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a5d      	ldr	r2, [pc, #372]	@ (800c93c <HAL_I2C_MspInit+0x194>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d000      	beq.n	800c7cc <HAL_I2C_MspInit+0x24>
 800c7ca:	e083      	b.n	800c8d4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c7ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d0:	4b5b      	ldr	r3, [pc, #364]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c7d2:	2102      	movs	r1, #2
 800c7d4:	430a      	orrs	r2, r1
 800c7d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c7d8:	4b59      	ldr	r3, [pc, #356]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7dc:	2202      	movs	r2, #2
 800c7de:	4013      	ands	r3, r2
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c7e4:	0021      	movs	r1, r4
 800c7e6:	187b      	adds	r3, r7, r1
 800c7e8:	22c0      	movs	r2, #192	@ 0xc0
 800c7ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c7ec:	187b      	adds	r3, r7, r1
 800c7ee:	2212      	movs	r2, #18
 800c7f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f2:	187b      	adds	r3, r7, r1
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7f8:	187b      	adds	r3, r7, r1
 800c7fa:	2203      	movs	r2, #3
 800c7fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c7fe:	187b      	adds	r3, r7, r1
 800c800:	2201      	movs	r2, #1
 800c802:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c804:	187b      	adds	r3, r7, r1
 800c806:	4a4f      	ldr	r2, [pc, #316]	@ (800c944 <HAL_I2C_MspInit+0x19c>)
 800c808:	0019      	movs	r1, r3
 800c80a:	0010      	movs	r0, r2
 800c80c:	f009 f95c 	bl	8015ac8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c810:	4b4b      	ldr	r3, [pc, #300]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c814:	4b4a      	ldr	r3, [pc, #296]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c816:	2180      	movs	r1, #128	@ 0x80
 800c818:	0389      	lsls	r1, r1, #14
 800c81a:	430a      	orrs	r2, r1
 800c81c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c81e:	4b4a      	ldr	r3, [pc, #296]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c820:	4a4a      	ldr	r2, [pc, #296]	@ (800c94c <HAL_I2C_MspInit+0x1a4>)
 800c822:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c824:	4b48      	ldr	r3, [pc, #288]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c826:	2206      	movs	r2, #6
 800c828:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c82a:	4b47      	ldr	r3, [pc, #284]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c830:	4b45      	ldr	r3, [pc, #276]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c832:	2200      	movs	r2, #0
 800c834:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c836:	4b44      	ldr	r3, [pc, #272]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c838:	2280      	movs	r2, #128	@ 0x80
 800c83a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c83c:	4b42      	ldr	r3, [pc, #264]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c83e:	2200      	movs	r2, #0
 800c840:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c842:	4b41      	ldr	r3, [pc, #260]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c844:	2200      	movs	r2, #0
 800c846:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c848:	4b3f      	ldr	r3, [pc, #252]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c84e:	4b3e      	ldr	r3, [pc, #248]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c850:	2200      	movs	r2, #0
 800c852:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c854:	4b3c      	ldr	r3, [pc, #240]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c856:	0018      	movs	r0, r3
 800c858:	f008 fd1a 	bl	8015290 <HAL_DMA_Init>
 800c85c:	1e03      	subs	r3, r0, #0
 800c85e:	d001      	beq.n	800c864 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c860:	f000 fd8e 	bl	800d380 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a38      	ldr	r2, [pc, #224]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c868:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c86a:	4b37      	ldr	r3, [pc, #220]	@ (800c948 <HAL_I2C_MspInit+0x1a0>)
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c870:	4b37      	ldr	r3, [pc, #220]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c872:	4a38      	ldr	r2, [pc, #224]	@ (800c954 <HAL_I2C_MspInit+0x1ac>)
 800c874:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c876:	4b36      	ldr	r3, [pc, #216]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c878:	2206      	movs	r2, #6
 800c87a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c87c:	4b34      	ldr	r3, [pc, #208]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c87e:	2210      	movs	r2, #16
 800c880:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c882:	4b33      	ldr	r3, [pc, #204]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c884:	2200      	movs	r2, #0
 800c886:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c888:	4b31      	ldr	r3, [pc, #196]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c88a:	2280      	movs	r2, #128	@ 0x80
 800c88c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c88e:	4b30      	ldr	r3, [pc, #192]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c890:	2200      	movs	r2, #0
 800c892:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c894:	4b2e      	ldr	r3, [pc, #184]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c896:	2200      	movs	r2, #0
 800c898:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c89a:	4b2d      	ldr	r3, [pc, #180]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c8a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c8a6:	4b2a      	ldr	r3, [pc, #168]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	f008 fcf1 	bl	8015290 <HAL_DMA_Init>
 800c8ae:	1e03      	subs	r3, r0, #0
 800c8b0:	d001      	beq.n	800c8b6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c8b2:	f000 fd65 	bl	800d380 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a25      	ldr	r2, [pc, #148]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c8ba:	639a      	str	r2, [r3, #56]	@ 0x38
 800c8bc:	4b24      	ldr	r3, [pc, #144]	@ (800c950 <HAL_I2C_MspInit+0x1a8>)
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	2017      	movs	r0, #23
 800c8c8:	f008 fcac 	bl	8015224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c8cc:	2017      	movs	r0, #23
 800c8ce:	f008 fcbe 	bl	801524e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c8d2:	e02e      	b.n	800c932 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a1f      	ldr	r2, [pc, #124]	@ (800c958 <HAL_I2C_MspInit+0x1b0>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d129      	bne.n	800c932 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c8de:	4b18      	ldr	r3, [pc, #96]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8e2:	4b17      	ldr	r3, [pc, #92]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c8e4:	2102      	movs	r1, #2
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8ea:	4b15      	ldr	r3, [pc, #84]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c8f6:	2114      	movs	r1, #20
 800c8f8:	187b      	adds	r3, r7, r1
 800c8fa:	22c0      	movs	r2, #192	@ 0xc0
 800c8fc:	0112      	lsls	r2, r2, #4
 800c8fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c900:	187b      	adds	r3, r7, r1
 800c902:	2212      	movs	r2, #18
 800c904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c906:	187b      	adds	r3, r7, r1
 800c908:	2200      	movs	r2, #0
 800c90a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c90c:	187b      	adds	r3, r7, r1
 800c90e:	2203      	movs	r2, #3
 800c910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c912:	187b      	adds	r3, r7, r1
 800c914:	2206      	movs	r2, #6
 800c916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c918:	187b      	adds	r3, r7, r1
 800c91a:	4a0a      	ldr	r2, [pc, #40]	@ (800c944 <HAL_I2C_MspInit+0x19c>)
 800c91c:	0019      	movs	r1, r3
 800c91e:	0010      	movs	r0, r2
 800c920:	f009 f8d2 	bl	8015ac8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c924:	4b06      	ldr	r3, [pc, #24]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c928:	4b05      	ldr	r3, [pc, #20]	@ (800c940 <HAL_I2C_MspInit+0x198>)
 800c92a:	2180      	movs	r1, #128	@ 0x80
 800c92c:	03c9      	lsls	r1, r1, #15
 800c92e:	430a      	orrs	r2, r1
 800c930:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c932:	46c0      	nop			@ (mov r8, r8)
 800c934:	46bd      	mov	sp, r7
 800c936:	b00b      	add	sp, #44	@ 0x2c
 800c938:	bd90      	pop	{r4, r7, pc}
 800c93a:	46c0      	nop			@ (mov r8, r8)
 800c93c:	40005400 	.word	0x40005400
 800c940:	40021000 	.word	0x40021000
 800c944:	50000400 	.word	0x50000400
 800c948:	20000fe0 	.word	0x20000fe0
 800c94c:	40020030 	.word	0x40020030
 800c950:	20001028 	.word	0x20001028
 800c954:	4002001c 	.word	0x4002001c
 800c958:	40005800 	.word	0x40005800

0800c95c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c960:	4b10      	ldr	r3, [pc, #64]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c962:	4a11      	ldr	r2, [pc, #68]	@ (800c9a8 <MX_I2S2_Init+0x4c>)
 800c964:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c966:	4b0f      	ldr	r3, [pc, #60]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c968:	22c0      	movs	r2, #192	@ 0xc0
 800c96a:	0092      	lsls	r2, r2, #2
 800c96c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c96e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c970:	2200      	movs	r2, #0
 800c972:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c974:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c976:	2203      	movs	r2, #3
 800c978:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c97a:	4b0a      	ldr	r3, [pc, #40]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c97c:	2200      	movs	r2, #0
 800c97e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c980:	4b08      	ldr	r3, [pc, #32]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c982:	22fa      	movs	r2, #250	@ 0xfa
 800c984:	0192      	lsls	r2, r2, #6
 800c986:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c988:	4b06      	ldr	r3, [pc, #24]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c98e:	4b05      	ldr	r3, [pc, #20]	@ (800c9a4 <MX_I2S2_Init+0x48>)
 800c990:	0018      	movs	r0, r3
 800c992:	f00c fa7b 	bl	8018e8c <HAL_I2S_Init>
 800c996:	1e03      	subs	r3, r0, #0
 800c998:	d001      	beq.n	800c99e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c99a:	f000 fcf1 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	20001070 	.word	0x20001070
 800c9a8:	40003800 	.word	0x40003800

0800c9ac <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c9ac:	b590      	push	{r4, r7, lr}
 800c9ae:	b089      	sub	sp, #36	@ 0x24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9b4:	240c      	movs	r4, #12
 800c9b6:	193b      	adds	r3, r7, r4
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	2314      	movs	r3, #20
 800c9bc:	001a      	movs	r2, r3
 800c9be:	2100      	movs	r1, #0
 800c9c0:	f019 fda4 	bl	802650c <memset>
  if(i2sHandle->Instance==SPI2)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a2d      	ldr	r2, [pc, #180]	@ (800ca80 <HAL_I2S_MspInit+0xd4>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d154      	bne.n	800ca78 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c9ce:	4b2d      	ldr	r3, [pc, #180]	@ (800ca84 <HAL_I2S_MspInit+0xd8>)
 800c9d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9d2:	4b2c      	ldr	r3, [pc, #176]	@ (800ca84 <HAL_I2S_MspInit+0xd8>)
 800c9d4:	2180      	movs	r1, #128	@ 0x80
 800c9d6:	01c9      	lsls	r1, r1, #7
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9dc:	4b29      	ldr	r3, [pc, #164]	@ (800ca84 <HAL_I2S_MspInit+0xd8>)
 800c9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e0:	4b28      	ldr	r3, [pc, #160]	@ (800ca84 <HAL_I2S_MspInit+0xd8>)
 800c9e2:	2102      	movs	r1, #2
 800c9e4:	430a      	orrs	r2, r1
 800c9e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9e8:	4b26      	ldr	r3, [pc, #152]	@ (800ca84 <HAL_I2S_MspInit+0xd8>)
 800c9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ec:	2202      	movs	r2, #2
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	60bb      	str	r3, [r7, #8]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c9f4:	193b      	adds	r3, r7, r4
 800c9f6:	22b0      	movs	r2, #176	@ 0xb0
 800c9f8:	0212      	lsls	r2, r2, #8
 800c9fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9fc:	0021      	movs	r1, r4
 800c9fe:	187b      	adds	r3, r7, r1
 800ca00:	2202      	movs	r2, #2
 800ca02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca04:	187b      	adds	r3, r7, r1
 800ca06:	2200      	movs	r2, #0
 800ca08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca0a:	187b      	adds	r3, r7, r1
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800ca10:	187b      	adds	r3, r7, r1
 800ca12:	2200      	movs	r2, #0
 800ca14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca16:	187b      	adds	r3, r7, r1
 800ca18:	4a1b      	ldr	r2, [pc, #108]	@ (800ca88 <HAL_I2S_MspInit+0xdc>)
 800ca1a:	0019      	movs	r1, r3
 800ca1c:	0010      	movs	r0, r2
 800ca1e:	f009 f853 	bl	8015ac8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800ca22:	4b1a      	ldr	r3, [pc, #104]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca24:	4a1a      	ldr	r2, [pc, #104]	@ (800ca90 <HAL_I2S_MspInit+0xe4>)
 800ca26:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800ca28:	4b18      	ldr	r3, [pc, #96]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca2e:	4b17      	ldr	r3, [pc, #92]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca34:	4b15      	ldr	r3, [pc, #84]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ca3a:	4b14      	ldr	r3, [pc, #80]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca3c:	2280      	movs	r2, #128	@ 0x80
 800ca3e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ca40:	4b12      	ldr	r3, [pc, #72]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca42:	2280      	movs	r2, #128	@ 0x80
 800ca44:	0052      	lsls	r2, r2, #1
 800ca46:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ca48:	4b10      	ldr	r3, [pc, #64]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca4a:	2280      	movs	r2, #128	@ 0x80
 800ca4c:	00d2      	lsls	r2, r2, #3
 800ca4e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800ca50:	4b0e      	ldr	r3, [pc, #56]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca52:	2220      	movs	r2, #32
 800ca54:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ca56:	4b0d      	ldr	r3, [pc, #52]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f008 fc16 	bl	8015290 <HAL_DMA_Init>
 800ca64:	1e03      	subs	r3, r0, #0
 800ca66:	d001      	beq.n	800ca6c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800ca68:	f000 fc8a 	bl	800d380 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a07      	ldr	r2, [pc, #28]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca70:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca72:	4b06      	ldr	r3, [pc, #24]	@ (800ca8c <HAL_I2S_MspInit+0xe0>)
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800ca78:	46c0      	nop			@ (mov r8, r8)
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	b009      	add	sp, #36	@ 0x24
 800ca7e:	bd90      	pop	{r4, r7, pc}
 800ca80:	40003800 	.word	0x40003800
 800ca84:	40021000 	.word	0x40021000
 800ca88:	50000400 	.word	0x50000400
 800ca8c:	200010ac 	.word	0x200010ac
 800ca90:	40020044 	.word	0x40020044

0800ca94 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0
  testDone = true;
 800ca98:	4b12      	ldr	r3, [pc, #72]	@ (800cae4 <SetTestDone+0x50>)
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(250);
 800ca9e:	20fa      	movs	r0, #250	@ 0xfa
 800caa0:	f007 ff44 	bl	801492c <HAL_Delay>
  SetDBLED(false, false, true);
 800caa4:	2201      	movs	r2, #1
 800caa6:	2100      	movs	r1, #0
 800caa8:	2000      	movs	r0, #0
 800caaa:	f005 fe8d 	bl	80127c8 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800caae:	4a0e      	ldr	r2, [pc, #56]	@ (800cae8 <SetTestDone+0x54>)
 800cab0:	23fa      	movs	r3, #250	@ 0xfa
 800cab2:	0119      	lsls	r1, r3, #4
 800cab4:	23fa      	movs	r3, #250	@ 0xfa
 800cab6:	011b      	lsls	r3, r3, #4
 800cab8:	0018      	movs	r0, r3
 800caba:	f005 fe51 	bl	8012760 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cabe:	4a0a      	ldr	r2, [pc, #40]	@ (800cae8 <SetTestDone+0x54>)
 800cac0:	23fa      	movs	r3, #250	@ 0xfa
 800cac2:	0119      	lsls	r1, r3, #4
 800cac4:	23fa      	movs	r3, #250	@ 0xfa
 800cac6:	011b      	lsls	r3, r3, #4
 800cac8:	0018      	movs	r0, r3
 800caca:	f005 fec7 	bl	801285c <SetVocLED>
  HAL_Delay(250);
 800cace:	20fa      	movs	r0, #250	@ 0xfa
 800cad0:	f007 ff2c 	bl	801492c <HAL_Delay>
  SetLEDsOff();
 800cad4:	f006 f802 	bl	8012adc <SetLEDsOff>
  InitDone();
 800cad8:	f005 fd96 	bl	8012608 <InitDone>
}
 800cadc:	46c0      	nop			@ (mov r8, r8)
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	46c0      	nop			@ (mov r8, r8)
 800cae4:	200010f4 	.word	0x200010f4
 800cae8:	00000bb8 	.word	0x00000bb8

0800caec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800caec:	b5b0      	push	{r4, r5, r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800caf2:	f007 feab 	bl	801484c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800caf6:	f000 fad7 	bl	800d0a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cafa:	f7ff fc57 	bl	800c3ac <MX_GPIO_Init>
  MX_DMA_Init();
 800cafe:	f7ff fa7f 	bl	800c000 <MX_DMA_Init>
  MX_I2C1_Init();
 800cb02:	f7ff fdd1 	bl	800c6a8 <MX_I2C1_Init>
  MX_I2S2_Init();
 800cb06:	f7ff ff29 	bl	800c95c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cb0a:	f006 ff9f 	bl	8013a4c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cb0e:	f7ff fe0b 	bl	800c728 <MX_I2C2_Init>
  MX_TIM2_Init();
 800cb12:	f006 fd93 	bl	801363c <MX_TIM2_Init>
  MX_TIM3_Init();
 800cb16:	f006 fe05 	bl	8013724 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cb1a:	f006 ffc7 	bl	8013aac <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cb1e:	f7fe f877 	bl	800ac10 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cb22:	f016 f9e7 	bl	8022ef4 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800cb26:	f001 fc97 	bl	800e458 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cb2a:	f006 ff59 	bl	80139e0 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cb2e:	f006 fe77 	bl	8013820 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cb32:	f7fd f84f 	bl	8009bd4 <Check_USB_PowerOn>
 800cb36:	1e03      	subs	r3, r0, #0
 800cb38:	d006      	beq.n	800cb48 <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cb3a:	46c0      	nop			@ (mov r8, r8)
 800cb3c:	f007 feec 	bl	8014918 <HAL_GetTick>
 800cb40:	0003      	movs	r3, r0
 800cb42:	4ac4      	ldr	r2, [pc, #784]	@ (800ce54 <main+0x368>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d9f9      	bls.n	800cb3c <main+0x50>
	 * : Put SSID in EEPROM
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800cb48:	4ac3      	ldr	r2, [pc, #780]	@ (800ce58 <main+0x36c>)
 800cb4a:	4bc4      	ldr	r3, [pc, #784]	@ (800ce5c <main+0x370>)
 800cb4c:	0011      	movs	r1, r2
 800cb4e:	0018      	movs	r0, r3
 800cb50:	f7ff fd5c 	bl	800c60c <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cb54:	4ac2      	ldr	r2, [pc, #776]	@ (800ce60 <main+0x374>)
 800cb56:	4bc3      	ldr	r3, [pc, #780]	@ (800ce64 <main+0x378>)
 800cb58:	0019      	movs	r1, r3
 800cb5a:	2002      	movs	r0, #2
 800cb5c:	f007 f964 	bl	8013e28 <CreateLine>
  BinaryReleaseInfo();
 800cb60:	f007 f9f6 	bl	8013f50 <BinaryReleaseInfo>
  usblog = *(bool*)(USBlogstatusConfigAddr);
 800cb64:	4bc0      	ldr	r3, [pc, #768]	@ (800ce68 <main+0x37c>)
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	4bc0      	ldr	r3, [pc, #768]	@ (800ce6c <main+0x380>)
 800cb6a:	701a      	strb	r2, [r3, #0]
  if(UserButton_Pressed()){
 800cb6c:	f7fd f8be 	bl	8009cec <UserButton_Pressed>
 800cb70:	1e03      	subs	r3, r0, #0
 800cb72:	d005      	beq.n	800cb80 <main+0x94>
    EnableESPProg();
 800cb74:	f016 fa9a 	bl	80230ac <EnableESPProg>
    ESP_Programming = true;
 800cb78:	4bbd      	ldr	r3, [pc, #756]	@ (800ce70 <main+0x384>)
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	e03b      	b.n	800cbf8 <main+0x10c>
  }
  else {
    charge = batteryChargeCheck();
 800cb80:	f005 fd4c 	bl	801261c <batteryChargeCheck>
 800cb84:	0003      	movs	r3, r0
 800cb86:	001a      	movs	r2, r3
 800cb88:	4bba      	ldr	r3, [pc, #744]	@ (800ce74 <main+0x388>)
 800cb8a:	701a      	strb	r2, [r3, #0]
//    batteryCharge = ReadBatteryVoltage();
    Error("Battery voltage is: %.02fV", batteryCharge);
 800cb8c:	4bba      	ldr	r3, [pc, #744]	@ (800ce78 <main+0x38c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	1c18      	adds	r0, r3, #0
 800cb92:	f7f6 fe7f 	bl	8003894 <__aeabi_f2d>
 800cb96:	0002      	movs	r2, r0
 800cb98:	000b      	movs	r3, r1
 800cb9a:	48b8      	ldr	r0, [pc, #736]	@ (800ce7c <main+0x390>)
 800cb9c:	49b8      	ldr	r1, [pc, #736]	@ (800ce80 <main+0x394>)
 800cb9e:	9200      	str	r2, [sp, #0]
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	0002      	movs	r2, r0
 800cba4:	2001      	movs	r0, #1
 800cba6:	f007 f93f 	bl	8013e28 <CreateLine>
    if(batteryCharge <= 3.68) {
 800cbaa:	4bb3      	ldr	r3, [pc, #716]	@ (800ce78 <main+0x38c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	1c18      	adds	r0, r3, #0
 800cbb0:	f7f6 fe70 	bl	8003894 <__aeabi_f2d>
 800cbb4:	4ab3      	ldr	r2, [pc, #716]	@ (800ce84 <main+0x398>)
 800cbb6:	4bb4      	ldr	r3, [pc, #720]	@ (800ce88 <main+0x39c>)
 800cbb8:	f7f3 fc8a 	bl	80004d0 <__aeabi_dcmple>
 800cbbc:	1e03      	subs	r3, r0, #0
 800cbbe:	d01b      	beq.n	800cbf8 <main+0x10c>
      SetAllREDLED();
 800cbc0:	f005 ffa8 	bl	8012b14 <SetAllREDLED>
      Error("Battery voltage is critical: %.02fV, going in deep sleep. Waking for LED indication %s seconds", batteryCharge, DEEP_SLEEP);
 800cbc4:	4bac      	ldr	r3, [pc, #688]	@ (800ce78 <main+0x38c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	1c18      	adds	r0, r3, #0
 800cbca:	f7f6 fe63 	bl	8003894 <__aeabi_f2d>
 800cbce:	0002      	movs	r2, r0
 800cbd0:	000b      	movs	r3, r1
 800cbd2:	4cae      	ldr	r4, [pc, #696]	@ (800ce8c <main+0x3a0>)
 800cbd4:	48aa      	ldr	r0, [pc, #680]	@ (800ce80 <main+0x394>)
 800cbd6:	21e1      	movs	r1, #225	@ 0xe1
 800cbd8:	0109      	lsls	r1, r1, #4
 800cbda:	9102      	str	r1, [sp, #8]
 800cbdc:	9200      	str	r2, [sp, #0]
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	0022      	movs	r2, r4
 800cbe2:	0001      	movs	r1, r0
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f007 f91f 	bl	8013e28 <CreateLine>
      WalkAllRedLED();
 800cbea:	f005 ffe1 	bl	8012bb0 <WalkAllRedLED>
#ifndef STLINK_V3PWR
      Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP);
 800cbee:	23e1      	movs	r3, #225	@ 0xe1
 800cbf0:	011b      	lsls	r3, r3, #4
 800cbf2:	0018      	movs	r0, r3
 800cbf4:	f7fd fd02 	bl	800a5fc <Enter_Stop_Mode_for_empty_battery>
#endif
      }

  }
  SetVerboseLevel(VERBOSE_ALL);
 800cbf8:	2003      	movs	r0, #3
 800cbfa:	f007 f98f 	bl	8013f1c <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cbfe:	49a4      	ldr	r1, [pc, #656]	@ (800ce90 <main+0x3a4>)
 800cc00:	4ba4      	ldr	r3, [pc, #656]	@ (800ce94 <main+0x3a8>)
 800cc02:	2201      	movs	r2, #1
 800cc04:	0018      	movs	r0, r3
 800cc06:	f010 fcd9 	bl	801d5bc <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800cc0a:	4ba3      	ldr	r3, [pc, #652]	@ (800ce98 <main+0x3ac>)
 800cc0c:	0018      	movs	r0, r3
 800cc0e:	f7fd fe05 	bl	800a81c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800cc12:	4aa2      	ldr	r2, [pc, #648]	@ (800ce9c <main+0x3b0>)
 800cc14:	49a2      	ldr	r1, [pc, #648]	@ (800cea0 <main+0x3b4>)
 800cc16:	48a3      	ldr	r0, [pc, #652]	@ (800cea4 <main+0x3b8>)
 800cc18:	230b      	movs	r3, #11
 800cc1a:	f004 fe6b 	bl	80118f4 <soundInit>
 800cc1e:	0003      	movs	r3, r0
 800cc20:	001a      	movs	r2, r3
 800cc22:	2301      	movs	r3, #1
 800cc24:	4053      	eors	r3, r2
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d005      	beq.n	800cc38 <main+0x14c>
    errorHandler(__func__, __LINE__, __FILE__);
 800cc2c:	4a9e      	ldr	r2, [pc, #632]	@ (800cea8 <main+0x3bc>)
 800cc2e:	4b9f      	ldr	r3, [pc, #636]	@ (800ceac <main+0x3c0>)
 800cc30:	21fc      	movs	r1, #252	@ 0xfc
 800cc32:	0018      	movs	r0, r3
 800cc34:	f007 f9e0 	bl	8013ff8 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800cc38:	4b9d      	ldr	r3, [pc, #628]	@ (800ceb0 <main+0x3c4>)
 800cc3a:	4a9e      	ldr	r2, [pc, #632]	@ (800ceb4 <main+0x3c8>)
 800cc3c:	4998      	ldr	r1, [pc, #608]	@ (800cea0 <main+0x3b4>)
 800cc3e:	489e      	ldr	r0, [pc, #632]	@ (800ceb8 <main+0x3cc>)
 800cc40:	f000 fc90 	bl	800d564 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cc44:	f007 fe68 	bl	8014918 <HAL_GetTick>
 800cc48:	0003      	movs	r3, r0
 800cc4a:	4a9c      	ldr	r2, [pc, #624]	@ (800cebc <main+0x3d0>)
 800cc4c:	189a      	adds	r2, r3, r2
 800cc4e:	4b9c      	ldr	r3, [pc, #624]	@ (800cec0 <main+0x3d4>)
 800cc50:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cc52:	f7fc ffbf 	bl	8009bd4 <Check_USB_PowerOn>
 800cc56:	0003      	movs	r3, r0
 800cc58:	1e5a      	subs	r2, r3, #1
 800cc5a:	4193      	sbcs	r3, r2
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4053      	eors	r3, r2
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	1c1a      	adds	r2, r3, #0
 800cc66:	2301      	movs	r3, #1
 800cc68:	4013      	ands	r3, r2
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	4b95      	ldr	r3, [pc, #596]	@ (800cec4 <main+0x3d8>)
 800cc6e:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cc70:	f7fc ffb0 	bl	8009bd4 <Check_USB_PowerOn>
 800cc74:	1e03      	subs	r3, r0, #0
 800cc76:	d003      	beq.n	800cc80 <main+0x194>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800cc78:	4b93      	ldr	r3, [pc, #588]	@ (800cec8 <main+0x3dc>)
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	f7fb fef0 	bl	8008a60 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cc80:	4b92      	ldr	r3, [pc, #584]	@ (800cecc <main+0x3e0>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	0018      	movs	r0, r3
 800cc86:	f007 f879 	bl	8013d7c <TimestampIsReached>
 800cc8a:	1e03      	subs	r3, r0, #0
 800cc8c:	d00e      	beq.n	800ccac <main+0x1c0>
      charge = Battery_Upkeep();
 800cc8e:	f006 fb59 	bl	8013344 <Battery_Upkeep>
 800cc92:	0003      	movs	r3, r0
 800cc94:	001a      	movs	r2, r3
 800cc96:	4b77      	ldr	r3, [pc, #476]	@ (800ce74 <main+0x388>)
 800cc98:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800cc9a:	f007 fe3d 	bl	8014918 <HAL_GetTick>
 800cc9e:	0003      	movs	r3, r0
 800cca0:	4a8b      	ldr	r2, [pc, #556]	@ (800ced0 <main+0x3e4>)
 800cca2:	189a      	adds	r2, r3, r2
 800cca4:	4b89      	ldr	r3, [pc, #548]	@ (800cecc <main+0x3e0>)
 800cca6:	601a      	str	r2, [r3, #0]
      showTime();
 800cca8:	f7fd f89c 	bl	8009de4 <showTime>
    }
    configCheck();
 800ccac:	f006 f9aa 	bl	8013004 <configCheck>
    if ((charge == BATTERY_LOW || charge == BATTERY_CRITICAL)  && !EspTurnedOn){
 800ccb0:	4b70      	ldr	r3, [pc, #448]	@ (800ce74 <main+0x388>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d003      	beq.n	800ccc0 <main+0x1d4>
 800ccb8:	4b6e      	ldr	r3, [pc, #440]	@ (800ce74 <main+0x388>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d137      	bne.n	800cd30 <main+0x244>
 800ccc0:	4b84      	ldr	r3, [pc, #528]	@ (800ced4 <main+0x3e8>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	4053      	eors	r3, r2
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d030      	beq.n	800cd30 <main+0x244>
      WalkAllRedLED();
 800ccce:	f005 ff6f 	bl	8012bb0 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800ccd2:	4b81      	ldr	r3, [pc, #516]	@ (800ced8 <main+0x3ec>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      pwrmailTodaySend();
 800ccd8:	f7f7 ff0a 	bl	8004af0 <pwrmailTodaySend>
      if (((charge == BATTERY_LOW)  || (charge == BATTERY_CRITICAL)) && (sendpwremail == CLEAR) && !Check_USB_PowerOn()) {
 800ccdc:	4b65      	ldr	r3, [pc, #404]	@ (800ce74 <main+0x388>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d003      	beq.n	800ccec <main+0x200>
 800cce4:	4b63      	ldr	r3, [pc, #396]	@ (800ce74 <main+0x388>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d121      	bne.n	800cd30 <main+0x244>
 800ccec:	4b7b      	ldr	r3, [pc, #492]	@ (800cedc <main+0x3f0>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d11d      	bne.n	800cd30 <main+0x244>
 800ccf4:	f7fc ff6e 	bl	8009bd4 <Check_USB_PowerOn>
 800ccf8:	0003      	movs	r3, r0
 800ccfa:	001a      	movs	r2, r3
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	4053      	eors	r3, r2
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d014      	beq.n	800cd30 <main+0x244>
        Debug("charge: %d, sendpwrmail: %d Check_USB_PowerOn(): %d", charge, sendpwremail, Check_USB_PowerOn());
 800cd06:	4b5b      	ldr	r3, [pc, #364]	@ (800ce74 <main+0x388>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	001d      	movs	r5, r3
 800cd0c:	4b73      	ldr	r3, [pc, #460]	@ (800cedc <main+0x3f0>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	001c      	movs	r4, r3
 800cd12:	f7fc ff5f 	bl	8009bd4 <Check_USB_PowerOn>
 800cd16:	0003      	movs	r3, r0
 800cd18:	4a71      	ldr	r2, [pc, #452]	@ (800cee0 <main+0x3f4>)
 800cd1a:	4972      	ldr	r1, [pc, #456]	@ (800cee4 <main+0x3f8>)
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	9400      	str	r4, [sp, #0]
 800cd20:	002b      	movs	r3, r5
 800cd22:	2003      	movs	r0, #3
 800cd24:	f007 f880 	bl	8013e28 <CreateLine>
        setModePowerMail();
 800cd28:	f7f7 fea2 	bl	8004a70 <setModePowerMail>
        ESP_Upkeep();
 800cd2c:	f7fa fcb2 	bl	8007694 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800cd30:	4b6d      	ldr	r3, [pc, #436]	@ (800cee8 <main+0x3fc>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800cd36:	4b4f      	ldr	r3, [pc, #316]	@ (800ce74 <main+0x388>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10c      	bne.n	800cd58 <main+0x26c>
 800cd3e:	4b6b      	ldr	r3, [pc, #428]	@ (800ceec <main+0x400>)
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b09      	cmp	r3, #9
 800cd44:	d108      	bne.n	800cd58 <main+0x26c>
       batteryEmpty = true;
 800cd46:	4b6a      	ldr	r3, [pc, #424]	@ (800cef0 <main+0x404>)
 800cd48:	2201      	movs	r2, #1
 800cd4a:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP); // light up the leds every hour
 800cd4c:	23e1      	movs	r3, #225	@ 0xe1
 800cd4e:	011b      	lsls	r3, r3, #4
 800cd50:	0018      	movs	r0, r3
 800cd52:	f7fd fc53 	bl	800a5fc <Enter_Stop_Mode_for_empty_battery>
 800cd56:	e002      	b.n	800cd5e <main+0x272>
    }
    else{
      batteryEmpty = false;
 800cd58:	4b65      	ldr	r3, [pc, #404]	@ (800cef0 <main+0x404>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800cd5e:	4b65      	ldr	r3, [pc, #404]	@ (800cef4 <main+0x408>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d100      	bne.n	800cd68 <main+0x27c>
 800cd66:	e10b      	b.n	800cf80 <main+0x494>
 800cd68:	4b41      	ldr	r3, [pc, #260]	@ (800ce70 <main+0x384>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	4053      	eors	r3, r2
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d100      	bne.n	800cd78 <main+0x28c>
 800cd76:	e103      	b.n	800cf80 <main+0x494>
 800cd78:	4b5d      	ldr	r3, [pc, #372]	@ (800cef0 <main+0x404>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	4053      	eors	r3, r2
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d100      	bne.n	800cd88 <main+0x29c>
 800cd86:	e0fb      	b.n	800cf80 <main+0x494>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800cd88:	4b4e      	ldr	r3, [pc, #312]	@ (800cec4 <main+0x3d8>)
 800cd8a:	781a      	ldrb	r2, [r3, #0]
 800cd8c:	4b5a      	ldr	r3, [pc, #360]	@ (800cef8 <main+0x40c>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d034      	beq.n	800cdfe <main+0x312>
        if (IsSGPPresent() && !usbPluggedIn) {
 800cd94:	f000 fb78 	bl	800d488 <IsSGPPresent>
 800cd98:	1e03      	subs	r3, r0, #0
 800cd9a:	d009      	beq.n	800cdb0 <main+0x2c4>
 800cd9c:	4b56      	ldr	r3, [pc, #344]	@ (800cef8 <main+0x40c>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2201      	movs	r2, #1
 800cda2:	4053      	eors	r3, r2
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <main+0x2c4>
          SetVOCSensorDIS_ENA(true);
 800cdaa:	2001      	movs	r0, #1
 800cdac:	f000 fb76 	bl	800d49c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800cdb0:	4b52      	ldr	r3, [pc, #328]	@ (800cefc <main+0x410>)
 800cdb2:	791b      	ldrb	r3, [r3, #4]
 800cdb4:	2b34      	cmp	r3, #52	@ 0x34
 800cdb6:	d003      	beq.n	800cdc0 <main+0x2d4>
 800cdb8:	4b50      	ldr	r3, [pc, #320]	@ (800cefc <main+0x410>)
 800cdba:	791b      	ldrb	r3, [r3, #4]
 800cdbc:	2b35      	cmp	r3, #53	@ 0x35
 800cdbe:	d106      	bne.n	800cdce <main+0x2e2>
 800cdc0:	4b4d      	ldr	r3, [pc, #308]	@ (800cef8 <main+0x40c>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <main+0x2e2>
          SetVOCSensorDIS_ENA(false);
 800cdc8:	2000      	movs	r0, #0
 800cdca:	f000 fb67 	bl	800d49c <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800cdce:	4b4a      	ldr	r3, [pc, #296]	@ (800cef8 <main+0x40c>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4053      	eors	r3, r2
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00c      	beq.n	800cdf6 <main+0x30a>
 800cddc:	f007 fd9c 	bl	8014918 <HAL_GetTick>
 800cde0:	0003      	movs	r3, r0
 800cde2:	4a36      	ldr	r2, [pc, #216]	@ (800cebc <main+0x3d0>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d906      	bls.n	800cdf6 <main+0x30a>
//          Debug("Device time out set in main due to powerstatus shift");
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800cde8:	f007 fd96 	bl	8014918 <HAL_GetTick>
 800cdec:	0003      	movs	r3, r0
 800cdee:	4a44      	ldr	r2, [pc, #272]	@ (800cf00 <main+0x414>)
 800cdf0:	189a      	adds	r2, r3, r2
 800cdf2:	4b33      	ldr	r3, [pc, #204]	@ (800cec0 <main+0x3d4>)
 800cdf4:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800cdf6:	4b40      	ldr	r3, [pc, #256]	@ (800cef8 <main+0x40c>)
 800cdf8:	781a      	ldrb	r2, [r3, #0]
 800cdfa:	4b32      	ldr	r3, [pc, #200]	@ (800cec4 <main+0x3d8>)
 800cdfc:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800cdfe:	f001 f807 	bl	800de10 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800ce02:	4b35      	ldr	r3, [pc, #212]	@ (800ced8 <main+0x3ec>)
 800ce04:	78db      	ldrb	r3, [r3, #3]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d005      	beq.n	800ce16 <main+0x32a>
        MICstate = Mic_Upkeep();
 800ce0a:	f001 fa11 	bl	800e230 <Mic_Upkeep>
 800ce0e:	0003      	movs	r3, r0
 800ce10:	001a      	movs	r2, r3
 800ce12:	4b3c      	ldr	r3, [pc, #240]	@ (800cf04 <main+0x418>)
 800ce14:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800ce16:	4b17      	ldr	r3, [pc, #92]	@ (800ce74 <main+0x388>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d803      	bhi.n	800ce26 <main+0x33a>
 800ce1e:	4b32      	ldr	r3, [pc, #200]	@ (800cee8 <main+0x3fc>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d070      	beq.n	800cf08 <main+0x41c>
 800ce26:	4b2c      	ldr	r3, [pc, #176]	@ (800ced8 <main+0x3ec>)
 800ce28:	789b      	ldrb	r3, [r3, #2]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d06c      	beq.n	800cf08 <main+0x41c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800ce2e:	f001 fba1 	bl	800e574 <sen5x_Get_sen5x_enable_state>
 800ce32:	0003      	movs	r3, r0
 800ce34:	001a      	movs	r2, r3
 800ce36:	2301      	movs	r3, #1
 800ce38:	4053      	eors	r3, r2
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d006      	beq.n	800ce4e <main+0x362>
 800ce40:	4b2d      	ldr	r3, [pc, #180]	@ (800cef8 <main+0x40c>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <main+0x362>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800ce48:	2000      	movs	r0, #0
 800ce4a:	f001 fbcf 	bl	800e5ec <sen5x_enable>
        }
        sen5x_statemachine();
 800ce4e:	f002 f967 	bl	800f120 <sen5x_statemachine>
 800ce52:	e07a      	b.n	800cf4a <main+0x45e>
 800ce54:	00000289 	.word	0x00000289
 800ce58:	200021b0 	.word	0x200021b0
 800ce5c:	20002170 	.word	0x20002170
 800ce60:	0802c5dc 	.word	0x0802c5dc
 800ce64:	0802c608 	.word	0x0802c608
 800ce68:	08080194 	.word	0x08080194
 800ce6c:	200010f7 	.word	0x200010f7
 800ce70:	200010f5 	.word	0x200010f5
 800ce74:	20001118 	.word	0x20001118
 800ce78:	20002160 	.word	0x20002160
 800ce7c:	0802c60c 	.word	0x0802c60c
 800ce80:	0802c628 	.word	0x0802c628
 800ce84:	d70a3d71 	.word	0xd70a3d71
 800ce88:	400d70a3 	.word	0x400d70a3
 800ce8c:	0802c62c 	.word	0x0802c62c
 800ce90:	20001100 	.word	0x20001100
 800ce94:	200022e8 	.word	0x200022e8
 800ce98:	2000119c 	.word	0x2000119c
 800ce9c:	200021f0 	.word	0x200021f0
 800cea0:	20001070 	.word	0x20001070
 800cea4:	200010ac 	.word	0x200010ac
 800cea8:	0802c68c 	.word	0x0802c68c
 800ceac:	0802e3ec 	.word	0x0802e3ec
 800ceb0:	200023a0 	.word	0x200023a0
 800ceb4:	20000e84 	.word	0x20000e84
 800ceb8:	20000f38 	.word	0x20000f38
 800cebc:	000061a8 	.word	0x000061a8
 800cec0:	20001114 	.word	0x20001114
 800cec4:	200010fa 	.word	0x200010fa
 800cec8:	0802c6a0 	.word	0x0802c6a0
 800cecc:	200000a4 	.word	0x200000a4
 800ced0:	0000c350 	.word	0x0000c350
 800ced4:	200005ac 	.word	0x200005ac
 800ced8:	2000111c 	.word	0x2000111c
 800cedc:	200010f9 	.word	0x200010f9
 800cee0:	0802c6d4 	.word	0x0802c6d4
 800cee4:	0802c708 	.word	0x0802c708
 800cee8:	200000a3 	.word	0x200000a3
 800ceec:	200010fc 	.word	0x200010fc
 800cef0:	200010f6 	.word	0x200010f6
 800cef4:	200010f4 	.word	0x200010f4
 800cef8:	20002151 	.word	0x20002151
 800cefc:	200011c4 	.word	0x200011c4
 800cf00:	00001194 	.word	0x00001194
 800cf04:	200010fb 	.word	0x200010fb
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800cf08:	4b52      	ldr	r3, [pc, #328]	@ (800d054 <main+0x568>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d81c      	bhi.n	800cf4a <main+0x45e>
 800cf10:	4b51      	ldr	r3, [pc, #324]	@ (800d058 <main+0x56c>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	2201      	movs	r2, #1
 800cf16:	4053      	eors	r3, r2
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d015      	beq.n	800cf4a <main+0x45e>
 800cf1e:	4b4f      	ldr	r3, [pc, #316]	@ (800d05c <main+0x570>)
 800cf20:	789b      	ldrb	r3, [r3, #2]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d011      	beq.n	800cf4a <main+0x45e>
        Info("Battery level insufficient for sen5x operation");
 800cf26:	4a4e      	ldr	r2, [pc, #312]	@ (800d060 <main+0x574>)
 800cf28:	4b4e      	ldr	r3, [pc, #312]	@ (800d064 <main+0x578>)
 800cf2a:	0019      	movs	r1, r3
 800cf2c:	2002      	movs	r0, #2
 800cf2e:	f006 ff7b 	bl	8013e28 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800cf32:	4b4a      	ldr	r3, [pc, #296]	@ (800d05c <main+0x570>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800cf38:	4b4b      	ldr	r3, [pc, #300]	@ (800d068 <main+0x57c>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800cf3e:	4b4b      	ldr	r3, [pc, #300]	@ (800d06c <main+0x580>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <main+0x45e>
          sen5x_Power_Off();
 800cf46:	f001 fbdd 	bl	800e704 <sen5x_Power_Off>
        }
      }
      if (SensorProbe.ESP_Present && !espfailshown) {
 800cf4a:	4b49      	ldr	r3, [pc, #292]	@ (800d070 <main+0x584>)
 800cf4c:	79db      	ldrb	r3, [r3, #7]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00d      	beq.n	800cf6e <main+0x482>
 800cf52:	4b48      	ldr	r3, [pc, #288]	@ (800d074 <main+0x588>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2201      	movs	r2, #1
 800cf58:	4053      	eors	r3, r2
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d006      	beq.n	800cf6e <main+0x482>
        ESPstate = ESP_Upkeep();
 800cf60:	f7fa fb98 	bl	8007694 <ESP_Upkeep>
 800cf64:	0003      	movs	r3, r0
 800cf66:	001a      	movs	r2, r3
 800cf68:	4b43      	ldr	r3, [pc, #268]	@ (800d078 <main+0x58c>)
 800cf6a:	701a      	strb	r2, [r3, #0]
 800cf6c:	e008      	b.n	800cf80 <main+0x494>
      }
      else {
        Error("ESP failed during init");
 800cf6e:	4a43      	ldr	r2, [pc, #268]	@ (800d07c <main+0x590>)
 800cf70:	4b43      	ldr	r3, [pc, #268]	@ (800d080 <main+0x594>)
 800cf72:	0019      	movs	r1, r3
 800cf74:	2001      	movs	r0, #1
 800cf76:	f006 ff57 	bl	8013e28 <CreateLine>
        espfailshown = true;
 800cf7a:	4b3e      	ldr	r3, [pc, #248]	@ (800d074 <main+0x588>)
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	701a      	strb	r2, [r3, #0]
      }
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800cf80:	4b40      	ldr	r3, [pc, #256]	@ (800d084 <main+0x598>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2201      	movs	r2, #1
 800cf86:	4053      	eors	r3, r2
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00f      	beq.n	800cfae <main+0x4c2>
 800cf8e:	4b3e      	ldr	r3, [pc, #248]	@ (800d088 <main+0x59c>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2201      	movs	r2, #1
 800cf94:	4053      	eors	r3, r2
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d008      	beq.n	800cfae <main+0x4c2>
 800cf9c:	4b3b      	ldr	r3, [pc, #236]	@ (800d08c <main+0x5a0>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	4053      	eors	r3, r2
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <main+0x4c2>
      Device_Test();  // for device with startup time
 800cfaa:	f000 fcb3 	bl	800d914 <Device_Test>
    }
    if (!usbPluggedIn) {
 800cfae:	4b38      	ldr	r3, [pc, #224]	@ (800d090 <main+0x5a4>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	4053      	eors	r3, r2
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d030      	beq.n	800d01e <main+0x532>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800cfbc:	4b35      	ldr	r3, [pc, #212]	@ (800d094 <main+0x5a8>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	4053      	eors	r3, r2
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d029      	beq.n	800d01e <main+0x532>
 800cfca:	f000 fd21 	bl	800da10 <AllDevicesReady>
 800cfce:	1e03      	subs	r3, r0, #0
 800cfd0:	d025      	beq.n	800d01e <main+0x532>
 800cfd2:	4b31      	ldr	r3, [pc, #196]	@ (800d098 <main+0x5ac>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d021      	beq.n	800d01e <main+0x532>
        EnabledConnectedDevices();
 800cfda:	f000 fe65 	bl	800dca8 <EnabledConnectedDevices>
        if (ReadSolarVoltage() > 4900) {  // if battery is fully charged and sun is shining wake-up about every 5 minutes
 800cfde:	f7fc fda5 	bl	8009b2c <ReadSolarVoltage>
 800cfe2:	0003      	movs	r3, r0
 800cfe4:	001a      	movs	r2, r3
 800cfe6:	4b2d      	ldr	r3, [pc, #180]	@ (800d09c <main+0x5b0>)
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d90c      	bls.n	800d006 <main+0x51a>
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM_SUN:WAIT_WITHOUT_PM_SUN);
 800cfec:	4b20      	ldr	r3, [pc, #128]	@ (800d070 <main+0x584>)
 800cfee:	795b      	ldrb	r3, [r3, #5]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <main+0x50e>
 800cff4:	2382      	movs	r3, #130	@ 0x82
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	e001      	b.n	800cffe <main+0x512>
 800cffa:	238c      	movs	r3, #140	@ 0x8c
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	0018      	movs	r0, r3
 800d000:	f7fd fb58 	bl	800a6b4 <Enter_Stop_Mode>
 800d004:	e00b      	b.n	800d01e <main+0x532>
        }
        else {
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800d006:	4b1a      	ldr	r3, [pc, #104]	@ (800d070 <main+0x584>)
 800d008:	795b      	ldrb	r3, [r3, #5]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d002      	beq.n	800d014 <main+0x528>
 800d00e:	23d7      	movs	r3, #215	@ 0xd7
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	e001      	b.n	800d018 <main+0x52c>
 800d014:	23dc      	movs	r3, #220	@ 0xdc
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	0018      	movs	r0, r3
 800d01a:	f7fd fb4b 	bl	800a6b4 <Enter_Stop_Mode>
        }
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d01e:	4b20      	ldr	r3, [pc, #128]	@ (800d0a0 <main+0x5b4>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <main+0x53e>
      check_cli_command();
 800d026:	f000 f8c9 	bl	800d1bc <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d02a:	f7fc fdd3 	bl	8009bd4 <Check_USB_PowerOn>
 800d02e:	1e03      	subs	r3, r0, #0
 800d030:	d100      	bne.n	800d034 <main+0x548>
 800d032:	e625      	b.n	800cc80 <main+0x194>
 800d034:	4b1b      	ldr	r3, [pc, #108]	@ (800d0a4 <main+0x5b8>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2201      	movs	r2, #1
 800d03a:	4053      	eors	r3, r2
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d100      	bne.n	800d044 <main+0x558>
 800d042:	e61d      	b.n	800cc80 <main+0x194>
      Process_USB_input(GetUsbRxPointer());
 800d044:	f016 f83c 	bl	80230c0 <GetUsbRxPointer>
 800d048:	0003      	movs	r3, r0
 800d04a:	0018      	movs	r0, r3
 800d04c:	f7fc fa78 	bl	8009540 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d050:	e616      	b.n	800cc80 <main+0x194>
 800d052:	46c0      	nop			@ (mov r8, r8)
 800d054:	20001118 	.word	0x20001118
 800d058:	200000a3 	.word	0x200000a3
 800d05c:	2000111c 	.word	0x2000111c
 800d060:	0802c70c 	.word	0x0802c70c
 800d064:	0802c608 	.word	0x0802c608
 800d068:	200011c2 	.word	0x200011c2
 800d06c:	200011c1 	.word	0x200011c1
 800d070:	20001124 	.word	0x20001124
 800d074:	200010f8 	.word	0x200010f8
 800d078:	200010fc 	.word	0x200010fc
 800d07c:	0802c73c 	.word	0x0802c73c
 800d080:	0802c628 	.word	0x0802c628
 800d084:	200010f4 	.word	0x200010f4
 800d088:	200010f5 	.word	0x200010f5
 800d08c:	200010f6 	.word	0x200010f6
 800d090:	20002151 	.word	0x20002151
 800d094:	20002152 	.word	0x20002152
 800d098:	200005b3 	.word	0x200005b3
 800d09c:	00001324 	.word	0x00001324
 800d0a0:	20001100 	.word	0x20001100
 800d0a4:	200005af 	.word	0x200005af

0800d0a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d0a8:	b590      	push	{r4, r7, lr}
 800d0aa:	b09d      	sub	sp, #116	@ 0x74
 800d0ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d0ae:	2438      	movs	r4, #56	@ 0x38
 800d0b0:	193b      	adds	r3, r7, r4
 800d0b2:	0018      	movs	r0, r3
 800d0b4:	2338      	movs	r3, #56	@ 0x38
 800d0b6:	001a      	movs	r2, r3
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	f019 fa27 	bl	802650c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d0be:	2324      	movs	r3, #36	@ 0x24
 800d0c0:	18fb      	adds	r3, r7, r3
 800d0c2:	0018      	movs	r0, r3
 800d0c4:	2314      	movs	r3, #20
 800d0c6:	001a      	movs	r2, r3
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	f019 fa1f 	bl	802650c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d0ce:	003b      	movs	r3, r7
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	2324      	movs	r3, #36	@ 0x24
 800d0d4:	001a      	movs	r2, r3
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	f019 fa18 	bl	802650c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0dc:	4b34      	ldr	r3, [pc, #208]	@ (800d1b0 <SystemClock_Config+0x108>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a34      	ldr	r2, [pc, #208]	@ (800d1b4 <SystemClock_Config+0x10c>)
 800d0e2:	401a      	ands	r2, r3
 800d0e4:	4b32      	ldr	r3, [pc, #200]	@ (800d1b0 <SystemClock_Config+0x108>)
 800d0e6:	2180      	movs	r1, #128	@ 0x80
 800d0e8:	0109      	lsls	r1, r1, #4
 800d0ea:	430a      	orrs	r2, r1
 800d0ec:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d0ee:	f00e f831 	bl	801b154 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d0f2:	4b31      	ldr	r3, [pc, #196]	@ (800d1b8 <SystemClock_Config+0x110>)
 800d0f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0f6:	4a2f      	ldr	r2, [pc, #188]	@ (800d1b4 <SystemClock_Config+0x10c>)
 800d0f8:	401a      	ands	r2, r3
 800d0fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d1b8 <SystemClock_Config+0x110>)
 800d0fc:	2180      	movs	r1, #128	@ 0x80
 800d0fe:	0149      	lsls	r1, r1, #5
 800d100:	430a      	orrs	r2, r1
 800d102:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d104:	193b      	adds	r3, r7, r4
 800d106:	2226      	movs	r2, #38	@ 0x26
 800d108:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d10a:	193b      	adds	r3, r7, r4
 800d10c:	2280      	movs	r2, #128	@ 0x80
 800d10e:	0052      	lsls	r2, r2, #1
 800d110:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d112:	0021      	movs	r1, r4
 800d114:	187b      	adds	r3, r7, r1
 800d116:	2201      	movs	r2, #1
 800d118:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d11a:	187b      	adds	r3, r7, r1
 800d11c:	2210      	movs	r2, #16
 800d11e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d120:	187b      	adds	r3, r7, r1
 800d122:	2201      	movs	r2, #1
 800d124:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d126:	187b      	adds	r3, r7, r1
 800d128:	2200      	movs	r2, #0
 800d12a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d12c:	187b      	adds	r3, r7, r1
 800d12e:	0018      	movs	r0, r3
 800d130:	f00e f88a 	bl	801b248 <HAL_RCC_OscConfig>
 800d134:	1e03      	subs	r3, r0, #0
 800d136:	d001      	beq.n	800d13c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d138:	f000 f922 	bl	800d380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d13c:	2124      	movs	r1, #36	@ 0x24
 800d13e:	187b      	adds	r3, r7, r1
 800d140:	220f      	movs	r2, #15
 800d142:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d144:	187b      	adds	r3, r7, r1
 800d146:	2201      	movs	r2, #1
 800d148:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d14a:	187b      	adds	r3, r7, r1
 800d14c:	2200      	movs	r2, #0
 800d14e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d150:	187b      	adds	r3, r7, r1
 800d152:	2200      	movs	r2, #0
 800d154:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d156:	187b      	adds	r3, r7, r1
 800d158:	2200      	movs	r2, #0
 800d15a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d15c:	187b      	adds	r3, r7, r1
 800d15e:	2100      	movs	r1, #0
 800d160:	0018      	movs	r0, r3
 800d162:	f00e fc45 	bl	801b9f0 <HAL_RCC_ClockConfig>
 800d166:	1e03      	subs	r3, r0, #0
 800d168:	d001      	beq.n	800d16e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d16a:	f000 f909 	bl	800d380 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d16e:	003b      	movs	r3, r7
 800d170:	226d      	movs	r2, #109	@ 0x6d
 800d172:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d174:	003b      	movs	r3, r7
 800d176:	2200      	movs	r2, #0
 800d178:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d17a:	003b      	movs	r3, r7
 800d17c:	2200      	movs	r2, #0
 800d17e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d180:	003b      	movs	r3, r7
 800d182:	2200      	movs	r2, #0
 800d184:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d186:	003b      	movs	r3, r7
 800d188:	2280      	movs	r2, #128	@ 0x80
 800d18a:	0252      	lsls	r2, r2, #9
 800d18c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d18e:	003b      	movs	r3, r7
 800d190:	2280      	movs	r2, #128	@ 0x80
 800d192:	04d2      	lsls	r2, r2, #19
 800d194:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d196:	003b      	movs	r3, r7
 800d198:	0018      	movs	r0, r3
 800d19a:	f00e fe4d 	bl	801be38 <HAL_RCCEx_PeriphCLKConfig>
 800d19e:	1e03      	subs	r3, r0, #0
 800d1a0:	d001      	beq.n	800d1a6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d1a2:	f000 f8ed 	bl	800d380 <Error_Handler>
  }
}
 800d1a6:	46c0      	nop			@ (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b01d      	add	sp, #116	@ 0x74
 800d1ac:	bd90      	pop	{r4, r7, pc}
 800d1ae:	46c0      	nop			@ (mov r8, r8)
 800d1b0:	40007000 	.word	0x40007000
 800d1b4:	ffffe7ff 	.word	0xffffe7ff
 800d1b8:	40021000 	.word	0x40021000

0800d1bc <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d1c0:	4b40      	ldr	r3, [pc, #256]	@ (800d2c4 <check_cli_command+0x108>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	3b61      	subs	r3, #97	@ 0x61
 800d1c6:	2b15      	cmp	r3, #21
 800d1c8:	d845      	bhi.n	800d256 <check_cli_command+0x9a>
 800d1ca:	009a      	lsls	r2, r3, #2
 800d1cc:	4b3e      	ldr	r3, [pc, #248]	@ (800d2c8 <check_cli_command+0x10c>)
 800d1ce:	18d3      	adds	r3, r2, r3
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d1d4:	4b3d      	ldr	r3, [pc, #244]	@ (800d2cc <check_cli_command+0x110>)
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	f019 f846 	bl	8026268 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d1dc:	2003      	movs	r0, #3
 800d1de:	f006 fe9d 	bl	8013f1c <SetVerboseLevel>
      break;
 800d1e2:	e069      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d1e4:	f7fb fc7c 	bl	8008ae0 <PC_show_Keys>
    break;
 800d1e8:	e066      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d1ea:	f7f7 fb8d 	bl	8004908 <forceNTPupdate>
    break;
 800d1ee:	e063      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d1f0:	4b37      	ldr	r3, [pc, #220]	@ (800d2d0 <check_cli_command+0x114>)
 800d1f2:	0018      	movs	r0, r3
 800d1f4:	f019 f838 	bl	8026268 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d1f8:	2002      	movs	r0, #2
 800d1fa:	f006 fe8f 	bl	8013f1c <SetVerboseLevel>
      break;
 800d1fe:	e05b      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d200:	4b34      	ldr	r3, [pc, #208]	@ (800d2d4 <check_cli_command+0x118>)
 800d202:	0018      	movs	r0, r3
 800d204:	f019 f830 	bl	8026268 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d208:	2001      	movs	r0, #1
 800d20a:	f006 fe87 	bl	8013f1c <SetVerboseLevel>
      break;
 800d20e:	e053      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d210:	4b31      	ldr	r3, [pc, #196]	@ (800d2d8 <check_cli_command+0x11c>)
 800d212:	0018      	movs	r0, r3
 800d214:	f019 f828 	bl	8026268 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d218:	2000      	movs	r0, #0
 800d21a:	f006 fe7f 	bl	8013f1c <SetVerboseLevel>
      break;
 800d21e:	e04b      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d220:	f007 fb7a 	bl	8014918 <HAL_GetTick>
 800d224:	0002      	movs	r2, r0
 800d226:	4b2d      	ldr	r3, [pc, #180]	@ (800d2dc <check_cli_command+0x120>)
 800d228:	601a      	str	r2, [r3, #0]
      break;
 800d22a:	e045      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d22c:	f7fc fdda 	bl	8009de4 <showTime>
      break;
 800d230:	e042      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d232:	4b2b      	ldr	r3, [pc, #172]	@ (800d2e0 <check_cli_command+0x124>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	1e5a      	subs	r2, r3, #1
 800d238:	4193      	sbcs	r3, r2
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2201      	movs	r2, #1
 800d23e:	4053      	eors	r3, r2
 800d240:	b2db      	uxtb	r3, r3
 800d242:	1c1a      	adds	r2, r3, #0
 800d244:	2301      	movs	r3, #1
 800d246:	4013      	ands	r3, r2
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	4b25      	ldr	r3, [pc, #148]	@ (800d2e0 <check_cli_command+0x124>)
 800d24c:	701a      	strb	r2, [r3, #0]
      break;
 800d24e:	e033      	b.n	800d2b8 <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d250:	f006 fe7e 	bl	8013f50 <BinaryReleaseInfo>
      break;
 800d254:	e030      	b.n	800d2b8 <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d256:	4b23      	ldr	r3, [pc, #140]	@ (800d2e4 <check_cli_command+0x128>)
 800d258:	0018      	movs	r0, r3
 800d25a:	f019 f805 	bl	8026268 <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d25e:	4b22      	ldr	r3, [pc, #136]	@ (800d2e8 <check_cli_command+0x12c>)
 800d260:	0018      	movs	r0, r3
 800d262:	f019 f801 	bl	8026268 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d266:	4b21      	ldr	r3, [pc, #132]	@ (800d2ec <check_cli_command+0x130>)
 800d268:	0018      	movs	r0, r3
 800d26a:	f018 fffd 	bl	8026268 <puts>
      printf("e - show EEPROM\r\n");
 800d26e:	4b20      	ldr	r3, [pc, #128]	@ (800d2f0 <check_cli_command+0x134>)
 800d270:	0018      	movs	r0, r3
 800d272:	f018 fff9 	bl	8026268 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d276:	4b1f      	ldr	r3, [pc, #124]	@ (800d2f4 <check_cli_command+0x138>)
 800d278:	0018      	movs	r0, r3
 800d27a:	f018 fff5 	bl	8026268 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d27e:	4b1e      	ldr	r3, [pc, #120]	@ (800d2f8 <check_cli_command+0x13c>)
 800d280:	0018      	movs	r0, r3
 800d282:	f018 fff1 	bl	8026268 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d286:	4b1d      	ldr	r3, [pc, #116]	@ (800d2fc <check_cli_command+0x140>)
 800d288:	0018      	movs	r0, r3
 800d28a:	f018 ffed 	bl	8026268 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d28e:	4b1c      	ldr	r3, [pc, #112]	@ (800d300 <check_cli_command+0x144>)
 800d290:	0018      	movs	r0, r3
 800d292:	f018 ffe9 	bl	8026268 <puts>
      printf("s - Start particle measurement\r\n");
 800d296:	4b1b      	ldr	r3, [pc, #108]	@ (800d304 <check_cli_command+0x148>)
 800d298:	0018      	movs	r0, r3
 800d29a:	f018 ffe5 	bl	8026268 <puts>
      printf("t - Show actual system time\r\n");
 800d29e:	4b1a      	ldr	r3, [pc, #104]	@ (800d308 <check_cli_command+0x14c>)
 800d2a0:	0018      	movs	r0, r3
 800d2a2:	f018 ffe1 	bl	8026268 <puts>
      printf("u - USB logging toggle\r\n");
 800d2a6:	4b19      	ldr	r3, [pc, #100]	@ (800d30c <check_cli_command+0x150>)
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	f018 ffdd 	bl	8026268 <puts>
      printf("v - Show system version\r\n");
 800d2ae:	4b18      	ldr	r3, [pc, #96]	@ (800d310 <check_cli_command+0x154>)
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f018 ffd9 	bl	8026268 <puts>
  break;
 800d2b6:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d2b8:	4b02      	ldr	r3, [pc, #8]	@ (800d2c4 <check_cli_command+0x108>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	701a      	strb	r2, [r3, #0]
}
 800d2be:	46c0      	nop			@ (mov r8, r8)
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	20001100 	.word	0x20001100
 800d2c8:	0802e394 	.word	0x0802e394
 800d2cc:	0802c754 	.word	0x0802c754
 800d2d0:	0802c770 	.word	0x0802c770
 800d2d4:	0802c78c 	.word	0x0802c78c
 800d2d8:	0802c7ac 	.word	0x0802c7ac
 800d2dc:	200011d0 	.word	0x200011d0
 800d2e0:	200010f7 	.word	0x200010f7
 800d2e4:	0802c7c8 	.word	0x0802c7c8
 800d2e8:	0802c7f8 	.word	0x0802c7f8
 800d2ec:	0802c814 	.word	0x0802c814
 800d2f0:	0802c834 	.word	0x0802c834
 800d2f4:	0802c848 	.word	0x0802c848
 800d2f8:	0802c86c 	.word	0x0802c86c
 800d2fc:	0802c88c 	.word	0x0802c88c
 800d300:	0802c8b0 	.word	0x0802c8b0
 800d304:	0802c8d0 	.word	0x0802c8d0
 800d308:	0802c8f0 	.word	0x0802c8f0
 800d30c:	0802c910 	.word	0x0802c910
 800d310:	0802c928 	.word	0x0802c928

0800d314 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d31c:	4907      	ldr	r1, [pc, #28]	@ (800d33c <HAL_UART_RxCpltCallback+0x28>)
 800d31e:	4b08      	ldr	r3, [pc, #32]	@ (800d340 <HAL_UART_RxCpltCallback+0x2c>)
 800d320:	2201      	movs	r2, #1
 800d322:	0018      	movs	r0, r3
 800d324:	f010 f94a 	bl	801d5bc <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d328:	4904      	ldr	r1, [pc, #16]	@ (800d33c <HAL_UART_RxCpltCallback+0x28>)
 800d32a:	4b05      	ldr	r3, [pc, #20]	@ (800d340 <HAL_UART_RxCpltCallback+0x2c>)
 800d32c:	2201      	movs	r2, #1
 800d32e:	0018      	movs	r0, r3
 800d330:	f010 f944 	bl	801d5bc <HAL_UART_Receive_IT>
}
 800d334:	46c0      	nop			@ (mov r8, r8)
 800d336:	46bd      	mov	sp, r7
 800d338:	b002      	add	sp, #8
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	20001100 	.word	0x20001100
 800d340:	200022e8 	.word	0x200022e8

0800d344 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	0002      	movs	r2, r0
 800d34c:	1dbb      	adds	r3, r7, #6
 800d34e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d350:	1dbb      	adds	r3, r7, #6
 800d352:	881a      	ldrh	r2, [r3, #0]
 800d354:	2380      	movs	r3, #128	@ 0x80
 800d356:	021b      	lsls	r3, r3, #8
 800d358:	429a      	cmp	r2, r3
 800d35a:	d10b      	bne.n	800d374 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d35c:	f006 f806 	bl	801336c <setuserToggle>
    if (GetPMSensorPresence()) {
 800d360:	f000 f860 	bl	800d424 <GetPMSensorPresence>
 800d364:	1e03      	subs	r3, r0, #0
 800d366:	d005      	beq.n	800d374 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d368:	4b04      	ldr	r3, [pc, #16]	@ (800d37c <HAL_GPIO_EXTI_Callback+0x38>)
 800d36a:	2201      	movs	r2, #1
 800d36c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d36e:	2000      	movs	r0, #0
 800d370:	f001 f90a 	bl	800e588 <sen5x_Set_sen5x_state>
    }
  }
}
 800d374:	46c0      	nop			@ (mov r8, r8)
 800d376:	46bd      	mov	sp, r7
 800d378:	b002      	add	sp, #8
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	2000111c 	.word	0x2000111c

0800d380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d384:	f005 fbc6 	bl	8012b14 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d388:	b672      	cpsid	i
}
 800d38a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d38c:	4a05      	ldr	r2, [pc, #20]	@ (800d3a4 <Error_Handler+0x24>)
 800d38e:	4b06      	ldr	r3, [pc, #24]	@ (800d3a8 <Error_Handler+0x28>)
 800d390:	0019      	movs	r1, r3
 800d392:	2001      	movs	r0, #1
 800d394:	f006 fd48 	bl	8013e28 <CreateLine>

    HAL_Delay(2500);
 800d398:	4b04      	ldr	r3, [pc, #16]	@ (800d3ac <Error_Handler+0x2c>)
 800d39a:	0018      	movs	r0, r3
 800d39c:	f007 fac6 	bl	801492c <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d3a0:	46c0      	nop			@ (mov r8, r8)
 800d3a2:	e7f3      	b.n	800d38c <Error_Handler+0xc>
 800d3a4:	0802c944 	.word	0x0802c944
 800d3a8:	0802c628 	.word	0x0802c628
 800d3ac:	000009c4 	.word	0x000009c4

0800d3b0 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d3b4:	4b19      	ldr	r3, [pc, #100]	@ (800d41c <testInit+0x6c>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d3ba:	4b18      	ldr	r3, [pc, #96]	@ (800d41c <testInit+0x6c>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d3c0:	4b16      	ldr	r3, [pc, #88]	@ (800d41c <testInit+0x6c>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d3c6:	4b15      	ldr	r3, [pc, #84]	@ (800d41c <testInit+0x6c>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d3cc:	4b13      	ldr	r3, [pc, #76]	@ (800d41c <testInit+0x6c>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d3d2:	4b12      	ldr	r3, [pc, #72]	@ (800d41c <testInit+0x6c>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d3d8:	4b10      	ldr	r3, [pc, #64]	@ (800d41c <testInit+0x6c>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d3de:	4b0f      	ldr	r3, [pc, #60]	@ (800d41c <testInit+0x6c>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d3e4:	4b0d      	ldr	r3, [pc, #52]	@ (800d41c <testInit+0x6c>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d420 <testInit+0x70>)
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d420 <testInit+0x70>)
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d420 <testInit+0x70>)
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d3fc:	4b08      	ldr	r3, [pc, #32]	@ (800d420 <testInit+0x70>)
 800d3fe:	2201      	movs	r2, #1
 800d400:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d402:	4b07      	ldr	r3, [pc, #28]	@ (800d420 <testInit+0x70>)
 800d404:	2201      	movs	r2, #1
 800d406:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d408:	4b05      	ldr	r3, [pc, #20]	@ (800d420 <testInit+0x70>)
 800d40a:	2201      	movs	r2, #1
 800d40c:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d40e:	4b04      	ldr	r3, [pc, #16]	@ (800d420 <testInit+0x70>)
 800d410:	2201      	movs	r2, #1
 800d412:	719a      	strb	r2, [r3, #6]
}
 800d414:	46c0      	nop			@ (mov r8, r8)
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	20001124 	.word	0x20001124
 800d420:	2000111c 	.word	0x2000111c

0800d424 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d424:	b580      	push	{r7, lr}
 800d426:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d428:	4b02      	ldr	r3, [pc, #8]	@ (800d434 <GetPMSensorPresence+0x10>)
 800d42a:	795b      	ldrb	r3, [r3, #5]
}
 800d42c:	0018      	movs	r0, r3
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	46c0      	nop			@ (mov r8, r8)
 800d434:	20001124 	.word	0x20001124

0800d438 <DisablePMSensor>:

void DisablePMSensor() {
 800d438:	b580      	push	{r7, lr}
 800d43a:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d43c:	4b02      	ldr	r3, [pc, #8]	@ (800d448 <DisablePMSensor+0x10>)
 800d43e:	2200      	movs	r2, #0
 800d440:	715a      	strb	r2, [r3, #5]
}
 800d442:	46c0      	nop			@ (mov r8, r8)
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20001124 	.word	0x20001124

0800d44c <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d450:	4b02      	ldr	r3, [pc, #8]	@ (800d45c <IsAHT20SensorPresent+0x10>)
 800d452:	789b      	ldrb	r3, [r3, #2]
}
 800d454:	0018      	movs	r0, r3
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	46c0      	nop			@ (mov r8, r8)
 800d45c:	20001124 	.word	0x20001124

0800d460 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d464:	4b02      	ldr	r3, [pc, #8]	@ (800d470 <IsBMP280SensorPresent+0x10>)
 800d466:	791b      	ldrb	r3, [r3, #4]
}
 800d468:	0018      	movs	r0, r3
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	46c0      	nop			@ (mov r8, r8)
 800d470:	20001124 	.word	0x20001124

0800d474 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d478:	4b02      	ldr	r3, [pc, #8]	@ (800d484 <IsENS160SensorPresent+0x10>)
 800d47a:	78db      	ldrb	r3, [r3, #3]
}
 800d47c:	0018      	movs	r0, r3
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	46c0      	nop			@ (mov r8, r8)
 800d484:	20001124 	.word	0x20001124

0800d488 <IsSGPPresent>:

bool IsSGPPresent() {
 800d488:	b580      	push	{r7, lr}
 800d48a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d48c:	4b02      	ldr	r3, [pc, #8]	@ (800d498 <IsSGPPresent+0x10>)
 800d48e:	785b      	ldrb	r3, [r3, #1]
}
 800d490:	0018      	movs	r0, r3
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	46c0      	nop			@ (mov r8, r8)
 800d498:	20001124 	.word	0x20001124

0800d49c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	0002      	movs	r2, r0
 800d4a4:	1dfb      	adds	r3, r7, #7
 800d4a6:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d8 <SetVOCSensorDIS_ENA+0x3c>)
 800d4aa:	1dfa      	adds	r2, r7, #7
 800d4ac:	7812      	ldrb	r2, [r2, #0]
 800d4ae:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4dc <SetVOCSensorDIS_ENA+0x40>)
 800d4b2:	1dfa      	adds	r2, r7, #7
 800d4b4:	7812      	ldrb	r2, [r2, #0]
 800d4b6:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d4b8:	1dfb      	adds	r3, r7, #7
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <SetVOCSensorDIS_ENA+0x28>
 800d4c0:	4b07      	ldr	r3, [pc, #28]	@ (800d4e0 <SetVOCSensorDIS_ENA+0x44>)
 800d4c2:	e000      	b.n	800d4c6 <SetVOCSensorDIS_ENA+0x2a>
 800d4c4:	4b07      	ldr	r3, [pc, #28]	@ (800d4e4 <SetVOCSensorDIS_ENA+0x48>)
 800d4c6:	4a08      	ldr	r2, [pc, #32]	@ (800d4e8 <SetVOCSensorDIS_ENA+0x4c>)
 800d4c8:	4908      	ldr	r1, [pc, #32]	@ (800d4ec <SetVOCSensorDIS_ENA+0x50>)
 800d4ca:	2003      	movs	r0, #3
 800d4cc:	f006 fcac 	bl	8013e28 <CreateLine>
}
 800d4d0:	46c0      	nop			@ (mov r8, r8)
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	b002      	add	sp, #8
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	20001124 	.word	0x20001124
 800d4dc:	2000111c 	.word	0x2000111c
 800d4e0:	0802c970 	.word	0x0802c970
 800d4e4:	0802c978 	.word	0x0802c978
 800d4e8:	0802c984 	.word	0x0802c984
 800d4ec:	0802c998 	.word	0x0802c998

0800d4f0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d4f4:	4b02      	ldr	r3, [pc, #8]	@ (800d500 <IsPMSensorEnabled+0x10>)
 800d4f6:	789b      	ldrb	r3, [r3, #2]
}
 800d4f8:	0018      	movs	r0, r3
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	46c0      	nop			@ (mov r8, r8)
 800d500:	2000111c 	.word	0x2000111c

0800d504 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	0002      	movs	r2, r0
 800d50c:	1dfb      	adds	r3, r7, #7
 800d50e:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d510:	4b05      	ldr	r3, [pc, #20]	@ (800d528 <SetVOCSensorStatus+0x24>)
 800d512:	7a1b      	ldrb	r3, [r3, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d003      	beq.n	800d520 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d518:	4b04      	ldr	r3, [pc, #16]	@ (800d52c <SetVOCSensorStatus+0x28>)
 800d51a:	1dfa      	adds	r2, r7, #7
 800d51c:	7812      	ldrb	r2, [r2, #0]
 800d51e:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d520:	46c0      	nop			@ (mov r8, r8)
 800d522:	46bd      	mov	sp, r7
 800d524:	b002      	add	sp, #8
 800d526:	bd80      	pop	{r7, pc}
 800d528:	20001124 	.word	0x20001124
 800d52c:	2000111c 	.word	0x2000111c

0800d530 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	0002      	movs	r2, r0
 800d538:	1dfb      	adds	r3, r7, #7
 800d53a:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d53c:	4b03      	ldr	r3, [pc, #12]	@ (800d54c <SetPMSensorStatus+0x1c>)
 800d53e:	1dfa      	adds	r2, r7, #7
 800d540:	7812      	ldrb	r2, [r2, #0]
 800d542:	709a      	strb	r2, [r3, #2]
}
 800d544:	46c0      	nop			@ (mov r8, r8)
 800d546:	46bd      	mov	sp, r7
 800d548:	b002      	add	sp, #8
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	2000111c 	.word	0x2000111c

0800d550 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d554:	4b02      	ldr	r3, [pc, #8]	@ (800d560 <SetESPMeasurementDone+0x10>)
 800d556:	2201      	movs	r2, #1
 800d558:	71da      	strb	r2, [r3, #7]
}
 800d55a:	46c0      	nop			@ (mov r8, r8)
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20001124 	.word	0x20001124

0800d564 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	603b      	str	r3, [r7, #0]
  testInit();
 800d572:	f7ff ff1d 	bl	800d3b0 <testInit>
  I2CSensors_Init(sensorI2C);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	0018      	movs	r0, r3
 800d57a:	f7fa fdf3 	bl	8008164 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d57e:	f006 ff57 	bl	8014430 <HIDS_DeviceConnected>
 800d582:	0003      	movs	r3, r0
 800d584:	001a      	movs	r2, r3
 800d586:	2301      	movs	r3, #1
 800d588:	4053      	eors	r3, r2
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00c      	beq.n	800d5aa <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d590:	4abf      	ldr	r2, [pc, #764]	@ (800d890 <Device_Init+0x32c>)
 800d592:	4bc0      	ldr	r3, [pc, #768]	@ (800d894 <Device_Init+0x330>)
 800d594:	0019      	movs	r1, r3
 800d596:	2001      	movs	r0, #1
 800d598:	f006 fc46 	bl	8013e28 <CreateLine>
     SensorProbe.HT_Present = false;
 800d59c:	4bbe      	ldr	r3, [pc, #760]	@ (800d898 <Device_Init+0x334>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d5a2:	4bbe      	ldr	r3, [pc, #760]	@ (800d89c <Device_Init+0x338>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	701a      	strb	r2, [r3, #0]
 800d5a8:	e008      	b.n	800d5bc <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d5aa:	4bbb      	ldr	r3, [pc, #748]	@ (800d898 <Device_Init+0x334>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d5b0:	4abb      	ldr	r2, [pc, #748]	@ (800d8a0 <Device_Init+0x33c>)
 800d5b2:	4bbc      	ldr	r3, [pc, #752]	@ (800d8a4 <Device_Init+0x340>)
 800d5b4:	0019      	movs	r1, r3
 800d5b6:	2003      	movs	r0, #3
 800d5b8:	f006 fc36 	bl	8013e28 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d5bc:	f7fe f964 	bl	800b888 <BMP280_DeviceConnected>
 800d5c0:	0003      	movs	r3, r0
 800d5c2:	001a      	movs	r2, r3
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	4053      	eors	r3, r2
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00c      	beq.n	800d5e8 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d5ce:	4ab6      	ldr	r2, [pc, #728]	@ (800d8a8 <Device_Init+0x344>)
 800d5d0:	4bb0      	ldr	r3, [pc, #704]	@ (800d894 <Device_Init+0x330>)
 800d5d2:	0019      	movs	r1, r3
 800d5d4:	2001      	movs	r0, #1
 800d5d6:	f006 fc27 	bl	8013e28 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d5da:	4baf      	ldr	r3, [pc, #700]	@ (800d898 <Device_Init+0x334>)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d5e0:	4bae      	ldr	r3, [pc, #696]	@ (800d89c <Device_Init+0x338>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	715a      	strb	r2, [r3, #5]
 800d5e6:	e008      	b.n	800d5fa <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d5e8:	4bab      	ldr	r3, [pc, #684]	@ (800d898 <Device_Init+0x334>)
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d5ee:	4aaf      	ldr	r2, [pc, #700]	@ (800d8ac <Device_Init+0x348>)
 800d5f0:	4bac      	ldr	r3, [pc, #688]	@ (800d8a4 <Device_Init+0x340>)
 800d5f2:	0019      	movs	r1, r3
 800d5f4:	2003      	movs	r0, #3
 800d5f6:	f006 fc17 	bl	8013e28 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d5fa:	f003 fdad 	bl	8011158 <SGP_DeviceConnected>
 800d5fe:	0003      	movs	r3, r0
 800d600:	001a      	movs	r2, r3
 800d602:	2301      	movs	r3, #1
 800d604:	4053      	eors	r3, r2
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00c      	beq.n	800d626 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d60c:	4ba2      	ldr	r3, [pc, #648]	@ (800d898 <Device_Init+0x334>)
 800d60e:	2200      	movs	r2, #0
 800d610:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d612:	4aa7      	ldr	r2, [pc, #668]	@ (800d8b0 <Device_Init+0x34c>)
 800d614:	4b9f      	ldr	r3, [pc, #636]	@ (800d894 <Device_Init+0x330>)
 800d616:	0019      	movs	r1, r3
 800d618:	2001      	movs	r0, #1
 800d61a:	f006 fc05 	bl	8013e28 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d61e:	4b9f      	ldr	r3, [pc, #636]	@ (800d89c <Device_Init+0x338>)
 800d620:	2200      	movs	r2, #0
 800d622:	705a      	strb	r2, [r3, #1]
 800d624:	e00b      	b.n	800d63e <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d626:	4b9c      	ldr	r3, [pc, #624]	@ (800d898 <Device_Init+0x334>)
 800d628:	2201      	movs	r2, #1
 800d62a:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d62c:	4b9a      	ldr	r3, [pc, #616]	@ (800d898 <Device_Init+0x334>)
 800d62e:	2201      	movs	r2, #1
 800d630:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d632:	4aa0      	ldr	r2, [pc, #640]	@ (800d8b4 <Device_Init+0x350>)
 800d634:	4b9b      	ldr	r3, [pc, #620]	@ (800d8a4 <Device_Init+0x340>)
 800d636:	0019      	movs	r1, r3
 800d638:	2003      	movs	r0, #3
 800d63a:	f006 fbf5 	bl	8013e28 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d63e:	f7f6 fc13 	bl	8003e68 <ENS_DeviceConnected>
 800d642:	0003      	movs	r3, r0
 800d644:	001a      	movs	r2, r3
 800d646:	2301      	movs	r3, #1
 800d648:	4053      	eors	r3, r2
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00c      	beq.n	800d66a <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d650:	4b91      	ldr	r3, [pc, #580]	@ (800d898 <Device_Init+0x334>)
 800d652:	2200      	movs	r2, #0
 800d654:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d656:	4a98      	ldr	r2, [pc, #608]	@ (800d8b8 <Device_Init+0x354>)
 800d658:	4b8e      	ldr	r3, [pc, #568]	@ (800d894 <Device_Init+0x330>)
 800d65a:	0019      	movs	r1, r3
 800d65c:	2001      	movs	r0, #1
 800d65e:	f006 fbe3 	bl	8013e28 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d662:	4b8e      	ldr	r3, [pc, #568]	@ (800d89c <Device_Init+0x338>)
 800d664:	2200      	movs	r2, #0
 800d666:	719a      	strb	r2, [r3, #6]
 800d668:	e008      	b.n	800d67c <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d66a:	4b8b      	ldr	r3, [pc, #556]	@ (800d898 <Device_Init+0x334>)
 800d66c:	2201      	movs	r2, #1
 800d66e:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d670:	4a92      	ldr	r2, [pc, #584]	@ (800d8bc <Device_Init+0x358>)
 800d672:	4b8c      	ldr	r3, [pc, #560]	@ (800d8a4 <Device_Init+0x340>)
 800d674:	0019      	movs	r1, r3
 800d676:	2003      	movs	r0, #3
 800d678:	f006 fbd6 	bl	8013e28 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d67c:	f7fd fd38 	bl	800b0f0 <AHT20_DeviceConnected>
 800d680:	0003      	movs	r3, r0
 800d682:	001a      	movs	r2, r3
 800d684:	2301      	movs	r3, #1
 800d686:	4053      	eors	r3, r2
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00c      	beq.n	800d6a8 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d68e:	4a8c      	ldr	r2, [pc, #560]	@ (800d8c0 <Device_Init+0x35c>)
 800d690:	4b80      	ldr	r3, [pc, #512]	@ (800d894 <Device_Init+0x330>)
 800d692:	0019      	movs	r1, r3
 800d694:	2001      	movs	r0, #1
 800d696:	f006 fbc7 	bl	8013e28 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d69a:	4b7f      	ldr	r3, [pc, #508]	@ (800d898 <Device_Init+0x334>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d6a0:	4b7e      	ldr	r3, [pc, #504]	@ (800d89c <Device_Init+0x338>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	711a      	strb	r2, [r3, #4]
 800d6a6:	e008      	b.n	800d6ba <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d6a8:	4b7b      	ldr	r3, [pc, #492]	@ (800d898 <Device_Init+0x334>)
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d6ae:	4a85      	ldr	r2, [pc, #532]	@ (800d8c4 <Device_Init+0x360>)
 800d6b0:	4b7c      	ldr	r3, [pc, #496]	@ (800d8a4 <Device_Init+0x340>)
 800d6b2:	0019      	movs	r1, r3
 800d6b4:	2003      	movs	r0, #3
 800d6b6:	f006 fbb7 	bl	8013e28 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d6ba:	4b77      	ldr	r3, [pc, #476]	@ (800d898 <Device_Init+0x334>)
 800d6bc:	785b      	ldrb	r3, [r3, #1]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d009      	beq.n	800d6d6 <Device_Init+0x172>
 800d6c2:	4b75      	ldr	r3, [pc, #468]	@ (800d898 <Device_Init+0x334>)
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d005      	beq.n	800d6d6 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	f005 f87a 	bl	80127c8 <SetDBLED>
 800d6d4:	e018      	b.n	800d708 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	2100      	movs	r1, #0
 800d6da:	2001      	movs	r0, #1
 800d6dc:	f005 f874 	bl	80127c8 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d6e0:	4b79      	ldr	r3, [pc, #484]	@ (800d8c8 <Device_Init+0x364>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	2101      	movs	r1, #1
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f008 fb89 	bl	8015dfe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d6ec:	2380      	movs	r3, #128	@ 0x80
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	4875      	ldr	r0, [pc, #468]	@ (800d8c8 <Device_Init+0x364>)
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	0019      	movs	r1, r3
 800d6f6:	f008 fb82 	bl	8015dfe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d6fa:	2380      	movs	r3, #128	@ 0x80
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	4872      	ldr	r0, [pc, #456]	@ (800d8c8 <Device_Init+0x364>)
 800d700:	2201      	movs	r2, #1
 800d702:	0019      	movs	r1, r3
 800d704:	f008 fb7b 	bl	8015dfe <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d708:	4b64      	ldr	r3, [pc, #400]	@ (800d89c <Device_Init+0x338>)
 800d70a:	78db      	ldrb	r3, [r3, #3]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d028      	beq.n	800d762 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d710:	4a6e      	ldr	r2, [pc, #440]	@ (800d8cc <Device_Init+0x368>)
 800d712:	4b6f      	ldr	r3, [pc, #444]	@ (800d8d0 <Device_Init+0x36c>)
 800d714:	0019      	movs	r1, r3
 800d716:	2002      	movs	r0, #2
 800d718:	f006 fb86 	bl	8013e28 <CreateLine>
    if (!enableMicrophone(true)) {
 800d71c:	2001      	movs	r0, #1
 800d71e:	f004 f951 	bl	80119c4 <enableMicrophone>
 800d722:	0003      	movs	r3, r0
 800d724:	001a      	movs	r2, r3
 800d726:	2301      	movs	r3, #1
 800d728:	4053      	eors	r3, r2
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00c      	beq.n	800d74a <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d730:	4a68      	ldr	r2, [pc, #416]	@ (800d8d4 <Device_Init+0x370>)
 800d732:	4b58      	ldr	r3, [pc, #352]	@ (800d894 <Device_Init+0x330>)
 800d734:	0019      	movs	r1, r3
 800d736:	2001      	movs	r0, #1
 800d738:	f006 fb76 	bl	8013e28 <CreateLine>
      SensorProbe.MIC_Present = false;
 800d73c:	4b56      	ldr	r3, [pc, #344]	@ (800d898 <Device_Init+0x334>)
 800d73e:	2200      	movs	r2, #0
 800d740:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d742:	4b56      	ldr	r3, [pc, #344]	@ (800d89c <Device_Init+0x338>)
 800d744:	2200      	movs	r2, #0
 800d746:	70da      	strb	r2, [r3, #3]
 800d748:	e00b      	b.n	800d762 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d74a:	4b53      	ldr	r3, [pc, #332]	@ (800d898 <Device_Init+0x334>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d750:	4b52      	ldr	r3, [pc, #328]	@ (800d89c <Device_Init+0x338>)
 800d752:	2201      	movs	r2, #1
 800d754:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d756:	4a60      	ldr	r2, [pc, #384]	@ (800d8d8 <Device_Init+0x374>)
 800d758:	4b52      	ldr	r3, [pc, #328]	@ (800d8a4 <Device_Init+0x340>)
 800d75a:	0019      	movs	r1, r3
 800d75c:	2003      	movs	r0, #3
 800d75e:	f006 fb63 	bl	8013e28 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d762:	f001 f805 	bl	800e770 <probe_sen5x>
 800d766:	1e03      	subs	r3, r0, #0
 800d768:	d122      	bne.n	800d7b0 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d76a:	4a5c      	ldr	r2, [pc, #368]	@ (800d8dc <Device_Init+0x378>)
 800d76c:	4b4d      	ldr	r3, [pc, #308]	@ (800d8a4 <Device_Init+0x340>)
 800d76e:	0019      	movs	r1, r3
 800d770:	2003      	movs	r0, #3
 800d772:	f006 fb59 	bl	8013e28 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d776:	4b48      	ldr	r3, [pc, #288]	@ (800d898 <Device_Init+0x334>)
 800d778:	2201      	movs	r2, #1
 800d77a:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d77c:	4b47      	ldr	r3, [pc, #284]	@ (800d89c <Device_Init+0x338>)
 800d77e:	2201      	movs	r2, #1
 800d780:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d782:	4b57      	ldr	r3, [pc, #348]	@ (800d8e0 <Device_Init+0x37c>)
 800d784:	791b      	ldrb	r3, [r3, #4]
 800d786:	2b34      	cmp	r3, #52	@ 0x34
 800d788:	d003      	beq.n	800d792 <Device_Init+0x22e>
 800d78a:	4b55      	ldr	r3, [pc, #340]	@ (800d8e0 <Device_Init+0x37c>)
 800d78c:	791b      	ldrb	r3, [r3, #4]
 800d78e:	2b35      	cmp	r3, #53	@ 0x35
 800d790:	d11c      	bne.n	800d7cc <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d792:	4a54      	ldr	r2, [pc, #336]	@ (800d8e4 <Device_Init+0x380>)
 800d794:	4b4e      	ldr	r3, [pc, #312]	@ (800d8d0 <Device_Init+0x36c>)
 800d796:	0019      	movs	r1, r3
 800d798:	2002      	movs	r0, #2
 800d79a:	f006 fb45 	bl	8013e28 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d79e:	4b3f      	ldr	r3, [pc, #252]	@ (800d89c <Device_Init+0x338>)
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d7a4:	4b3c      	ldr	r3, [pc, #240]	@ (800d898 <Device_Init+0x334>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d7aa:	f003 febb 	bl	8011524 <SGP_SoftReset>
 800d7ae:	e00d      	b.n	800d7cc <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d7b0:	f000 ffa8 	bl	800e704 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d7b4:	4a4c      	ldr	r2, [pc, #304]	@ (800d8e8 <Device_Init+0x384>)
 800d7b6:	4b3b      	ldr	r3, [pc, #236]	@ (800d8a4 <Device_Init+0x340>)
 800d7b8:	0019      	movs	r1, r3
 800d7ba:	2003      	movs	r0, #3
 800d7bc:	f006 fb34 	bl	8013e28 <CreateLine>
    SensorProbe.PM_Present = false;
 800d7c0:	4b35      	ldr	r3, [pc, #212]	@ (800d898 <Device_Init+0x334>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d7c6:	4b35      	ldr	r3, [pc, #212]	@ (800d89c <Device_Init+0x338>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d7cc:	4b32      	ldr	r3, [pc, #200]	@ (800d898 <Device_Init+0x334>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <Device_Init+0x274>
 800d7d4:	4b45      	ldr	r3, [pc, #276]	@ (800d8ec <Device_Init+0x388>)
 800d7d6:	e000      	b.n	800d7da <Device_Init+0x276>
 800d7d8:	4b45      	ldr	r3, [pc, #276]	@ (800d8f0 <Device_Init+0x38c>)
 800d7da:	4a46      	ldr	r2, [pc, #280]	@ (800d8f4 <Device_Init+0x390>)
 800d7dc:	493c      	ldr	r1, [pc, #240]	@ (800d8d0 <Device_Init+0x36c>)
 800d7de:	2002      	movs	r0, #2
 800d7e0:	f006 fb22 	bl	8013e28 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d7e4:	4b2c      	ldr	r3, [pc, #176]	@ (800d898 <Device_Init+0x334>)
 800d7e6:	785b      	ldrb	r3, [r3, #1]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d001      	beq.n	800d7f0 <Device_Init+0x28c>
 800d7ec:	4b3f      	ldr	r3, [pc, #252]	@ (800d8ec <Device_Init+0x388>)
 800d7ee:	e000      	b.n	800d7f2 <Device_Init+0x28e>
 800d7f0:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f0 <Device_Init+0x38c>)
 800d7f2:	4a41      	ldr	r2, [pc, #260]	@ (800d8f8 <Device_Init+0x394>)
 800d7f4:	4936      	ldr	r1, [pc, #216]	@ (800d8d0 <Device_Init+0x36c>)
 800d7f6:	2002      	movs	r0, #2
 800d7f8:	f006 fb16 	bl	8013e28 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d7fc:	4b26      	ldr	r3, [pc, #152]	@ (800d898 <Device_Init+0x334>)
 800d7fe:	789b      	ldrb	r3, [r3, #2]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <Device_Init+0x2a4>
 800d804:	4b39      	ldr	r3, [pc, #228]	@ (800d8ec <Device_Init+0x388>)
 800d806:	e000      	b.n	800d80a <Device_Init+0x2a6>
 800d808:	4b39      	ldr	r3, [pc, #228]	@ (800d8f0 <Device_Init+0x38c>)
 800d80a:	4a3c      	ldr	r2, [pc, #240]	@ (800d8fc <Device_Init+0x398>)
 800d80c:	4930      	ldr	r1, [pc, #192]	@ (800d8d0 <Device_Init+0x36c>)
 800d80e:	2002      	movs	r0, #2
 800d810:	f006 fb0a 	bl	8013e28 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d814:	4b20      	ldr	r3, [pc, #128]	@ (800d898 <Device_Init+0x334>)
 800d816:	791b      	ldrb	r3, [r3, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <Device_Init+0x2bc>
 800d81c:	4b33      	ldr	r3, [pc, #204]	@ (800d8ec <Device_Init+0x388>)
 800d81e:	e000      	b.n	800d822 <Device_Init+0x2be>
 800d820:	4b33      	ldr	r3, [pc, #204]	@ (800d8f0 <Device_Init+0x38c>)
 800d822:	4a37      	ldr	r2, [pc, #220]	@ (800d900 <Device_Init+0x39c>)
 800d824:	492a      	ldr	r1, [pc, #168]	@ (800d8d0 <Device_Init+0x36c>)
 800d826:	2002      	movs	r0, #2
 800d828:	f006 fafe 	bl	8013e28 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d82c:	4b1a      	ldr	r3, [pc, #104]	@ (800d898 <Device_Init+0x334>)
 800d82e:	78db      	ldrb	r3, [r3, #3]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <Device_Init+0x2d4>
 800d834:	4b2d      	ldr	r3, [pc, #180]	@ (800d8ec <Device_Init+0x388>)
 800d836:	e000      	b.n	800d83a <Device_Init+0x2d6>
 800d838:	4b2d      	ldr	r3, [pc, #180]	@ (800d8f0 <Device_Init+0x38c>)
 800d83a:	4a32      	ldr	r2, [pc, #200]	@ (800d904 <Device_Init+0x3a0>)
 800d83c:	4924      	ldr	r1, [pc, #144]	@ (800d8d0 <Device_Init+0x36c>)
 800d83e:	2002      	movs	r0, #2
 800d840:	f006 faf2 	bl	8013e28 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d844:	4b14      	ldr	r3, [pc, #80]	@ (800d898 <Device_Init+0x334>)
 800d846:	795b      	ldrb	r3, [r3, #5]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d001      	beq.n	800d850 <Device_Init+0x2ec>
 800d84c:	4b27      	ldr	r3, [pc, #156]	@ (800d8ec <Device_Init+0x388>)
 800d84e:	e000      	b.n	800d852 <Device_Init+0x2ee>
 800d850:	4b27      	ldr	r3, [pc, #156]	@ (800d8f0 <Device_Init+0x38c>)
 800d852:	4a2d      	ldr	r2, [pc, #180]	@ (800d908 <Device_Init+0x3a4>)
 800d854:	491e      	ldr	r1, [pc, #120]	@ (800d8d0 <Device_Init+0x36c>)
 800d856:	2002      	movs	r0, #2
 800d858:	f006 fae6 	bl	8013e28 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d85c:	4b0e      	ldr	r3, [pc, #56]	@ (800d898 <Device_Init+0x334>)
 800d85e:	799b      	ldrb	r3, [r3, #6]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <Device_Init+0x304>
 800d864:	4b21      	ldr	r3, [pc, #132]	@ (800d8ec <Device_Init+0x388>)
 800d866:	e000      	b.n	800d86a <Device_Init+0x306>
 800d868:	4b21      	ldr	r3, [pc, #132]	@ (800d8f0 <Device_Init+0x38c>)
 800d86a:	4a28      	ldr	r2, [pc, #160]	@ (800d90c <Device_Init+0x3a8>)
 800d86c:	4918      	ldr	r1, [pc, #96]	@ (800d8d0 <Device_Init+0x36c>)
 800d86e:	2002      	movs	r0, #2
 800d870:	f006 fada 	bl	8013e28 <CreateLine>
  ESP_Init(espUart);
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	0018      	movs	r0, r3
 800d878:	f7f7 fb24 	bl	8004ec4 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800d87c:	4a24      	ldr	r2, [pc, #144]	@ (800d910 <Device_Init+0x3ac>)
 800d87e:	4b09      	ldr	r3, [pc, #36]	@ (800d8a4 <Device_Init+0x340>)
 800d880:	0019      	movs	r1, r3
 800d882:	2003      	movs	r0, #3
 800d884:	f006 fad0 	bl	8013e28 <CreateLine>
}
 800d888:	46c0      	nop			@ (mov r8, r8)
 800d88a:	46bd      	mov	sp, r7
 800d88c:	b004      	add	sp, #16
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	0802c99c 	.word	0x0802c99c
 800d894:	0802c9cc 	.word	0x0802c9cc
 800d898:	20001124 	.word	0x20001124
 800d89c:	2000111c 	.word	0x2000111c
 800d8a0:	0802c9d0 	.word	0x0802c9d0
 800d8a4:	0802c998 	.word	0x0802c998
 800d8a8:	0802c9fc 	.word	0x0802c9fc
 800d8ac:	0802ca30 	.word	0x0802ca30
 800d8b0:	0802ca60 	.word	0x0802ca60
 800d8b4:	0802ca7c 	.word	0x0802ca7c
 800d8b8:	0802ca94 	.word	0x0802ca94
 800d8bc:	0802cab0 	.word	0x0802cab0
 800d8c0:	0802cac8 	.word	0x0802cac8
 800d8c4:	0802cafc 	.word	0x0802cafc
 800d8c8:	50000400 	.word	0x50000400
 800d8cc:	0802cb30 	.word	0x0802cb30
 800d8d0:	0802cb54 	.word	0x0802cb54
 800d8d4:	0802cb58 	.word	0x0802cb58
 800d8d8:	0802cb84 	.word	0x0802cb84
 800d8dc:	0802cbb0 	.word	0x0802cbb0
 800d8e0:	200011c4 	.word	0x200011c4
 800d8e4:	0802cbc8 	.word	0x0802cbc8
 800d8e8:	0802cc18 	.word	0x0802cc18
 800d8ec:	0802cc3c 	.word	0x0802cc3c
 800d8f0:	0802cc40 	.word	0x0802cc40
 800d8f4:	0802cc44 	.word	0x0802cc44
 800d8f8:	0802cc60 	.word	0x0802cc60
 800d8fc:	0802cc7c 	.word	0x0802cc7c
 800d900:	0802cc9c 	.word	0x0802cc9c
 800d904:	0802ccbc 	.word	0x0802ccbc
 800d908:	0802ccdc 	.word	0x0802ccdc
 800d90c:	0802ccf8 	.word	0x0802ccf8
 800d910:	0802cd14 	.word	0x0802cd14

0800d914 <Device_Test>:

void Device_Test(){
 800d914:	b580      	push	{r7, lr}
 800d916:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800d918:	4b34      	ldr	r3, [pc, #208]	@ (800d9ec <Device_Test+0xd8>)
 800d91a:	799b      	ldrb	r3, [r3, #6]
 800d91c:	2201      	movs	r2, #1
 800d91e:	4053      	eors	r3, r2
 800d920:	b2db      	uxtb	r3, r3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d027      	beq.n	800d976 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800d926:	f000 fc53 	bl	800e1d0 <MIC_TestMeasurementDone>
 800d92a:	1e03      	subs	r3, r0, #0
 800d92c:	d011      	beq.n	800d952 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800d92e:	4b2f      	ldr	r3, [pc, #188]	@ (800d9ec <Device_Test+0xd8>)
 800d930:	2201      	movs	r2, #1
 800d932:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d934:	4b2e      	ldr	r3, [pc, #184]	@ (800d9f0 <Device_Test+0xdc>)
 800d936:	2201      	movs	r2, #1
 800d938:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800d93a:	f004 fec9 	bl	80126d0 <Calculate_LED_ON>
 800d93e:	0003      	movs	r3, r0
 800d940:	0019      	movs	r1, r3
 800d942:	23fa      	movs	r3, #250	@ 0xfa
 800d944:	011a      	lsls	r2, r3, #4
 800d946:	23fa      	movs	r3, #250	@ 0xfa
 800d948:	011b      	lsls	r3, r3, #4
 800d94a:	0018      	movs	r0, r3
 800d94c:	f004 ff08 	bl	8012760 <SetStatusLED>
 800d950:	e011      	b.n	800d976 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d952:	f004 f813 	bl	801197c <micSettlingComplete>
 800d956:	1e03      	subs	r3, r0, #0
 800d958:	d00d      	beq.n	800d976 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d95a:	4b25      	ldr	r3, [pc, #148]	@ (800d9f0 <Device_Test+0xdc>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d960:	f004 feb6 	bl	80126d0 <Calculate_LED_ON>
 800d964:	0003      	movs	r3, r0
 800d966:	0018      	movs	r0, r3
 800d968:	23fa      	movs	r3, #250	@ 0xfa
 800d96a:	011a      	lsls	r2, r3, #4
 800d96c:	23fa      	movs	r3, #250	@ 0xfa
 800d96e:	011b      	lsls	r3, r3, #4
 800d970:	0019      	movs	r1, r3
 800d972:	f004 fef5 	bl	8012760 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d976:	4b1d      	ldr	r3, [pc, #116]	@ (800d9ec <Device_Test+0xd8>)
 800d978:	79db      	ldrb	r3, [r3, #7]
 800d97a:	2201      	movs	r2, #1
 800d97c:	4053      	eors	r3, r2
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d984:	f7f9 fd60 	bl	8007448 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d988:	4b18      	ldr	r3, [pc, #96]	@ (800d9ec <Device_Test+0xd8>)
 800d98a:	79db      	ldrb	r3, [r3, #7]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d003      	beq.n	800d998 <Device_Test+0x84>
 800d990:	4b16      	ldr	r3, [pc, #88]	@ (800d9ec <Device_Test+0xd8>)
 800d992:	799b      	ldrb	r3, [r3, #6]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <Device_Test+0x92>
 800d998:	4b16      	ldr	r3, [pc, #88]	@ (800d9f4 <Device_Test+0xe0>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	0018      	movs	r0, r3
 800d99e:	f006 f9ed 	bl	8013d7c <TimestampIsReached>
 800d9a2:	1e03      	subs	r3, r0, #0
 800d9a4:	d01f      	beq.n	800d9e6 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d9a6:	4b11      	ldr	r3, [pc, #68]	@ (800d9ec <Device_Test+0xd8>)
 800d9a8:	79db      	ldrb	r3, [r3, #7]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <Device_Test+0x9e>
 800d9ae:	4b12      	ldr	r3, [pc, #72]	@ (800d9f8 <Device_Test+0xe4>)
 800d9b0:	e000      	b.n	800d9b4 <Device_Test+0xa0>
 800d9b2:	4b12      	ldr	r3, [pc, #72]	@ (800d9fc <Device_Test+0xe8>)
 800d9b4:	4a12      	ldr	r2, [pc, #72]	@ (800da00 <Device_Test+0xec>)
 800d9b6:	4913      	ldr	r1, [pc, #76]	@ (800da04 <Device_Test+0xf0>)
 800d9b8:	2002      	movs	r0, #2
 800d9ba:	f006 fa35 	bl	8013e28 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d9be:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ec <Device_Test+0xd8>)
 800d9c0:	799b      	ldrb	r3, [r3, #6]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <Device_Test+0xb6>
 800d9c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d9f8 <Device_Test+0xe4>)
 800d9c8:	e000      	b.n	800d9cc <Device_Test+0xb8>
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d9fc <Device_Test+0xe8>)
 800d9cc:	4a0e      	ldr	r2, [pc, #56]	@ (800da08 <Device_Test+0xf4>)
 800d9ce:	490d      	ldr	r1, [pc, #52]	@ (800da04 <Device_Test+0xf0>)
 800d9d0:	2002      	movs	r0, #2
 800d9d2:	f006 fa29 	bl	8013e28 <CreateLine>
    Info("Test completed");
 800d9d6:	4a0d      	ldr	r2, [pc, #52]	@ (800da0c <Device_Test+0xf8>)
 800d9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800da04 <Device_Test+0xf0>)
 800d9da:	0019      	movs	r1, r3
 800d9dc:	2002      	movs	r0, #2
 800d9de:	f006 fa23 	bl	8013e28 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800d9e2:	f7ff f857 	bl	800ca94 <SetTestDone>
  }
}
 800d9e6:	46c0      	nop			@ (mov r8, r8)
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20001124 	.word	0x20001124
 800d9f0:	2000111c 	.word	0x2000111c
 800d9f4:	20001114 	.word	0x20001114
 800d9f8:	0802cd38 	.word	0x0802cd38
 800d9fc:	0802cd40 	.word	0x0802cd40
 800da00:	0802cd48 	.word	0x0802cd48
 800da04:	0802cb54 	.word	0x0802cb54
 800da08:	0802cd5c 	.word	0x0802cd5c
 800da0c:	0802cd70 	.word	0x0802cd70

0800da10 <AllDevicesReady>:

bool AllDevicesReady() {
 800da10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da12:	46de      	mov	lr, fp
 800da14:	4657      	mov	r7, sl
 800da16:	464e      	mov	r6, r9
 800da18:	4645      	mov	r5, r8
 800da1a:	b5e0      	push	{r5, r6, r7, lr}
 800da1c:	b08b      	sub	sp, #44	@ 0x2c
 800da1e:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  static uint8_t iminute = 0;
  if (TimestampIsReached(deviceTimeOut)) {
 800da20:	4b8a      	ldr	r3, [pc, #552]	@ (800dc4c <AllDevicesReady+0x23c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	0018      	movs	r0, r3
 800da26:	f006 f9a9 	bl	8013d7c <TimestampIsReached>
 800da2a:	1e03      	subs	r3, r0, #0
 800da2c:	d100      	bne.n	800da30 <AllDevicesReady+0x20>
 800da2e:	e103      	b.n	800dc38 <AllDevicesReady+0x228>
    if (!sensorsdisablereq) {
 800da30:	4b87      	ldr	r3, [pc, #540]	@ (800dc50 <AllDevicesReady+0x240>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2201      	movs	r2, #1
 800da36:	4053      	eors	r3, r2
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d008      	beq.n	800da50 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800da3e:	4a85      	ldr	r2, [pc, #532]	@ (800dc54 <AllDevicesReady+0x244>)
 800da40:	4b85      	ldr	r3, [pc, #532]	@ (800dc58 <AllDevicesReady+0x248>)
 800da42:	0019      	movs	r1, r3
 800da44:	2003      	movs	r0, #3
 800da46:	f006 f9ef 	bl	8013e28 <CreateLine>
      sensorsdisablereq = true;
 800da4a:	4b81      	ldr	r3, [pc, #516]	@ (800dc50 <AllDevicesReady+0x240>)
 800da4c:	2201      	movs	r2, #1
 800da4e:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800da50:	4b82      	ldr	r3, [pc, #520]	@ (800dc5c <AllDevicesReady+0x24c>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b06      	cmp	r3, #6
 800da56:	d102      	bne.n	800da5e <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800da58:	4b81      	ldr	r3, [pc, #516]	@ (800dc60 <AllDevicesReady+0x250>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800da5e:	4b81      	ldr	r3, [pc, #516]	@ (800dc64 <AllDevicesReady+0x254>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b05      	cmp	r3, #5
 800da64:	d006      	beq.n	800da74 <AllDevicesReady+0x64>
 800da66:	4b80      	ldr	r3, [pc, #512]	@ (800dc68 <AllDevicesReady+0x258>)
 800da68:	789b      	ldrb	r3, [r3, #2]
 800da6a:	2201      	movs	r2, #1
 800da6c:	4053      	eors	r3, r2
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800da74:	4b7a      	ldr	r3, [pc, #488]	@ (800dc60 <AllDevicesReady+0x250>)
 800da76:	2200      	movs	r2, #0
 800da78:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800da7a:	4b7c      	ldr	r3, [pc, #496]	@ (800dc6c <AllDevicesReady+0x25c>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d006      	beq.n	800da90 <AllDevicesReady+0x80>
 800da82:	4b79      	ldr	r3, [pc, #484]	@ (800dc68 <AllDevicesReady+0x258>)
 800da84:	791b      	ldrb	r3, [r3, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	4053      	eors	r3, r2
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800da90:	4b73      	ldr	r3, [pc, #460]	@ (800dc60 <AllDevicesReady+0x250>)
 800da92:	2200      	movs	r2, #0
 800da94:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800da96:	4b76      	ldr	r3, [pc, #472]	@ (800dc70 <AllDevicesReady+0x260>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b08      	cmp	r3, #8
 800da9c:	d006      	beq.n	800daac <AllDevicesReady+0x9c>
 800da9e:	4b72      	ldr	r3, [pc, #456]	@ (800dc68 <AllDevicesReady+0x258>)
 800daa0:	78db      	ldrb	r3, [r3, #3]
 800daa2:	2201      	movs	r2, #1
 800daa4:	4053      	eors	r3, r2
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800daac:	4b6c      	ldr	r3, [pc, #432]	@ (800dc60 <AllDevicesReady+0x250>)
 800daae:	2200      	movs	r2, #0
 800dab0:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800dab2:	4b70      	ldr	r3, [pc, #448]	@ (800dc74 <AllDevicesReady+0x264>)
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	2b07      	cmp	r3, #7
 800dab8:	d006      	beq.n	800dac8 <AllDevicesReady+0xb8>
 800daba:	4b6b      	ldr	r3, [pc, #428]	@ (800dc68 <AllDevicesReady+0x258>)
 800dabc:	7a1b      	ldrb	r3, [r3, #8]
 800dabe:	2201      	movs	r2, #1
 800dac0:	4053      	eors	r3, r2
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800dac8:	4b65      	ldr	r3, [pc, #404]	@ (800dc60 <AllDevicesReady+0x250>)
 800daca:	2200      	movs	r2, #0
 800dacc:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X) || (PMsamplesState == S5X_DISABLED)) {
 800dace:	4b6a      	ldr	r3, [pc, #424]	@ (800dc78 <AllDevicesReady+0x268>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d007      	beq.n	800dae6 <AllDevicesReady+0xd6>
 800dad6:	4b68      	ldr	r3, [pc, #416]	@ (800dc78 <AllDevicesReady+0x268>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d003      	beq.n	800dae6 <AllDevicesReady+0xd6>
 800dade:	4b66      	ldr	r3, [pc, #408]	@ (800dc78 <AllDevicesReady+0x268>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <AllDevicesReady+0xdc>
      Sensor.PM_measurementEnabled = false;
 800dae6:	4b5e      	ldr	r3, [pc, #376]	@ (800dc60 <AllDevicesReady+0x250>)
 800dae8:	2200      	movs	r2, #0
 800daea:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800daec:	4b63      	ldr	r3, [pc, #396]	@ (800dc7c <AllDevicesReady+0x26c>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d102      	bne.n	800dafa <AllDevicesReady+0xea>
      Sensor.MIC_measurementEnabled = false;
 800daf4:	4b5a      	ldr	r3, [pc, #360]	@ (800dc60 <AllDevicesReady+0x250>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800dafa:	4b61      	ldr	r3, [pc, #388]	@ (800dc80 <AllDevicesReady+0x270>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	2b09      	cmp	r3, #9
 800db00:	d004      	beq.n	800db0c <AllDevicesReady+0xfc>
 800db02:	4b5f      	ldr	r3, [pc, #380]	@ (800dc80 <AllDevicesReady+0x270>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b02      	cmp	r3, #2
 800db08:	d000      	beq.n	800db0c <AllDevicesReady+0xfc>
 800db0a:	e095      	b.n	800dc38 <AllDevicesReady+0x228>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db0c:	4b54      	ldr	r3, [pc, #336]	@ (800dc60 <AllDevicesReady+0x250>)
 800db0e:	781a      	ldrb	r2, [r3, #0]
 800db10:	4b53      	ldr	r3, [pc, #332]	@ (800dc60 <AllDevicesReady+0x250>)
 800db12:	785b      	ldrb	r3, [r3, #1]
 800db14:	4313      	orrs	r3, r2
 800db16:	b2da      	uxtb	r2, r3
 800db18:	4b51      	ldr	r3, [pc, #324]	@ (800dc60 <AllDevicesReady+0x250>)
 800db1a:	791b      	ldrb	r3, [r3, #4]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	4b4f      	ldr	r3, [pc, #316]	@ (800dc60 <AllDevicesReady+0x250>)
 800db22:	795b      	ldrb	r3, [r3, #5]
 800db24:	4313      	orrs	r3, r2
 800db26:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db28:	4b4d      	ldr	r3, [pc, #308]	@ (800dc60 <AllDevicesReady+0x250>)
 800db2a:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db2c:	4313      	orrs	r3, r2
 800db2e:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db30:	4b4b      	ldr	r3, [pc, #300]	@ (800dc60 <AllDevicesReady+0x250>)
 800db32:	789b      	ldrb	r3, [r3, #2]
 800db34:	4313      	orrs	r3, r2
 800db36:	b2da      	uxtb	r2, r3
 800db38:	4b49      	ldr	r3, [pc, #292]	@ (800dc60 <AllDevicesReady+0x250>)
 800db3a:	78db      	ldrb	r3, [r3, #3]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	1e5a      	subs	r2, r3, #1
 800db42:	4193      	sbcs	r3, r2
 800db44:	b2db      	uxtb	r3, r3
 800db46:	2201      	movs	r2, #1
 800db48:	4053      	eors	r3, r2
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db4e:	1dfb      	adds	r3, r7, #7
 800db50:	701a      	strb	r2, [r3, #0]
 800db52:	781a      	ldrb	r2, [r3, #0]
 800db54:	2101      	movs	r1, #1
 800db56:	400a      	ands	r2, r1
 800db58:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status) && (iminute != lastminute)) {
 800db5a:	1dfb      	adds	r3, r7, #7
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2201      	movs	r2, #1
 800db60:	4053      	eors	r3, r2
 800db62:	b2db      	uxtb	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d03e      	beq.n	800dbe6 <AllDevicesReady+0x1d6>
 800db68:	4b46      	ldr	r3, [pc, #280]	@ (800dc84 <AllDevicesReady+0x274>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	1dfa      	adds	r2, r7, #7
 800db6e:	7812      	ldrb	r2, [r2, #0]
 800db70:	429a      	cmp	r2, r3
 800db72:	d038      	beq.n	800dbe6 <AllDevicesReady+0x1d6>
 800db74:	4b44      	ldr	r3, [pc, #272]	@ (800dc88 <AllDevicesReady+0x278>)
 800db76:	781a      	ldrb	r2, [r3, #0]
 800db78:	4b44      	ldr	r3, [pc, #272]	@ (800dc8c <AllDevicesReady+0x27c>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d032      	beq.n	800dbe6 <AllDevicesReady+0x1d6>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800db80:	4b37      	ldr	r3, [pc, #220]	@ (800dc60 <AllDevicesReady+0x250>)
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	469b      	mov	fp, r3
 800db86:	4b36      	ldr	r3, [pc, #216]	@ (800dc60 <AllDevicesReady+0x250>)
 800db88:	791b      	ldrb	r3, [r3, #4]
 800db8a:	001c      	movs	r4, r3
 800db8c:	4b34      	ldr	r3, [pc, #208]	@ (800dc60 <AllDevicesReady+0x250>)
 800db8e:	795b      	ldrb	r3, [r3, #5]
 800db90:	001d      	movs	r5, r3
 800db92:	4b33      	ldr	r3, [pc, #204]	@ (800dc60 <AllDevicesReady+0x250>)
 800db94:	799b      	ldrb	r3, [r3, #6]
 800db96:	001e      	movs	r6, r3
 800db98:	4b31      	ldr	r3, [pc, #196]	@ (800dc60 <AllDevicesReady+0x250>)
 800db9a:	785b      	ldrb	r3, [r3, #1]
 800db9c:	4698      	mov	r8, r3
 800db9e:	4b30      	ldr	r3, [pc, #192]	@ (800dc60 <AllDevicesReady+0x250>)
 800dba0:	789b      	ldrb	r3, [r3, #2]
 800dba2:	4699      	mov	r9, r3
 800dba4:	4b2e      	ldr	r3, [pc, #184]	@ (800dc60 <AllDevicesReady+0x250>)
 800dba6:	78db      	ldrb	r3, [r3, #3]
 800dba8:	469a      	mov	sl, r3
 800dbaa:	f000 f927 	bl	800ddfc <getSensorLock>
 800dbae:	0003      	movs	r3, r0
 800dbb0:	4a37      	ldr	r2, [pc, #220]	@ (800dc90 <AllDevicesReady+0x280>)
 800dbb2:	4929      	ldr	r1, [pc, #164]	@ (800dc58 <AllDevicesReady+0x248>)
 800dbb4:	9306      	str	r3, [sp, #24]
 800dbb6:	4653      	mov	r3, sl
 800dbb8:	9305      	str	r3, [sp, #20]
 800dbba:	464b      	mov	r3, r9
 800dbbc:	9304      	str	r3, [sp, #16]
 800dbbe:	4643      	mov	r3, r8
 800dbc0:	9303      	str	r3, [sp, #12]
 800dbc2:	9602      	str	r6, [sp, #8]
 800dbc4:	9501      	str	r5, [sp, #4]
 800dbc6:	9400      	str	r4, [sp, #0]
 800dbc8:	465b      	mov	r3, fp
 800dbca:	2003      	movs	r0, #3
 800dbcc:	f006 f92c 	bl	8013e28 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800dbd0:	4b2c      	ldr	r3, [pc, #176]	@ (800dc84 <AllDevicesReady+0x274>)
 800dbd2:	1dfa      	adds	r2, r7, #7
 800dbd4:	7812      	ldrb	r2, [r2, #0]
 800dbd6:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800dbd8:	4b2e      	ldr	r3, [pc, #184]	@ (800dc94 <AllDevicesReady+0x284>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	701a      	strb	r2, [r3, #0]
        iminute = lastminute;
 800dbde:	4b2b      	ldr	r3, [pc, #172]	@ (800dc8c <AllDevicesReady+0x27c>)
 800dbe0:	781a      	ldrb	r2, [r3, #0]
 800dbe2:	4b29      	ldr	r3, [pc, #164]	@ (800dc88 <AllDevicesReady+0x278>)
 800dbe4:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800dbe6:	1dfb      	adds	r3, r7, #7
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d021      	beq.n	800dc32 <AllDevicesReady+0x222>
 800dbee:	4b29      	ldr	r3, [pc, #164]	@ (800dc94 <AllDevicesReady+0x284>)
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	4053      	eors	r3, r2
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d01a      	beq.n	800dc32 <AllDevicesReady+0x222>
        Debug("All sensors in wait");
 800dbfc:	4a26      	ldr	r2, [pc, #152]	@ (800dc98 <AllDevicesReady+0x288>)
 800dbfe:	4b16      	ldr	r3, [pc, #88]	@ (800dc58 <AllDevicesReady+0x248>)
 800dc00:	0019      	movs	r1, r3
 800dc02:	2003      	movs	r0, #3
 800dc04:	f006 f910 	bl	8013e28 <CreateLine>
        prevstatus = status;
 800dc08:	4b1e      	ldr	r3, [pc, #120]	@ (800dc84 <AllDevicesReady+0x274>)
 800dc0a:	1dfa      	adds	r2, r7, #7
 800dc0c:	7812      	ldrb	r2, [r2, #0]
 800dc0e:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dc10:	4b20      	ldr	r3, [pc, #128]	@ (800dc94 <AllDevicesReady+0x284>)
 800dc12:	2201      	movs	r2, #1
 800dc14:	701a      	strb	r2, [r3, #0]
        if (sendpwrmaildate == getDate()) {
 800dc16:	f7fc f893 	bl	8009d40 <getDate>
 800dc1a:	0003      	movs	r3, r0
 800dc1c:	001a      	movs	r2, r3
 800dc1e:	4b1f      	ldr	r3, [pc, #124]	@ (800dc9c <AllDevicesReady+0x28c>)
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d105      	bne.n	800dc32 <AllDevicesReady+0x222>
          Info("Battery empty mail already send today");
 800dc26:	4a1e      	ldr	r2, [pc, #120]	@ (800dca0 <AllDevicesReady+0x290>)
 800dc28:	4b1e      	ldr	r3, [pc, #120]	@ (800dca4 <AllDevicesReady+0x294>)
 800dc2a:	0019      	movs	r1, r3
 800dc2c:	2002      	movs	r0, #2
 800dc2e:	f006 f8fb 	bl	8013e28 <CreateLine>
        }

      }
      return status;
 800dc32:	1dfb      	adds	r3, r7, #7
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	e000      	b.n	800dc3a <AllDevicesReady+0x22a>
    }
  }
  return false;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	0018      	movs	r0, r3
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	b003      	add	sp, #12
 800dc40:	bcf0      	pop	{r4, r5, r6, r7}
 800dc42:	46bb      	mov	fp, r7
 800dc44:	46b2      	mov	sl, r6
 800dc46:	46a9      	mov	r9, r5
 800dc48:	46a0      	mov	r8, r4
 800dc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc4c:	20001114 	.word	0x20001114
 800dc50:	20001133 	.word	0x20001133
 800dc54:	0802cd80 	.word	0x0802cd80
 800dc58:	0802c998 	.word	0x0802c998
 800dc5c:	2000112f 	.word	0x2000112f
 800dc60:	2000111c 	.word	0x2000111c
 800dc64:	20001130 	.word	0x20001130
 800dc68:	20001124 	.word	0x20001124
 800dc6c:	20001131 	.word	0x20001131
 800dc70:	20001132 	.word	0x20001132
 800dc74:	2000112e 	.word	0x2000112e
 800dc78:	200000aa 	.word	0x200000aa
 800dc7c:	200010fb 	.word	0x200010fb
 800dc80:	200010fc 	.word	0x200010fc
 800dc84:	200000a8 	.word	0x200000a8
 800dc88:	20001134 	.word	0x20001134
 800dc8c:	20000e41 	.word	0x20000e41
 800dc90:	0802cda0 	.word	0x0802cda0
 800dc94:	20001135 	.word	0x20001135
 800dc98:	0802ce04 	.word	0x0802ce04
 800dc9c:	20001110 	.word	0x20001110
 800dca0:	0802ce18 	.word	0x0802ce18
 800dca4:	0802cb54 	.word	0x0802cb54

0800dca8 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800dcac:	4b2c      	ldr	r3, [pc, #176]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800dcb4:	4b2b      	ldr	r3, [pc, #172]	@ (800dd64 <EnabledConnectedDevices+0xbc>)
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800dcba:	4b29      	ldr	r3, [pc, #164]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dcbc:	789b      	ldrb	r3, [r3, #2]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d006      	beq.n	800dcd0 <EnabledConnectedDevices+0x28>
 800dcc2:	4b29      	ldr	r3, [pc, #164]	@ (800dd68 <EnabledConnectedDevices+0xc0>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800dcca:	4b26      	ldr	r3, [pc, #152]	@ (800dd64 <EnabledConnectedDevices+0xbc>)
 800dccc:	2201      	movs	r2, #1
 800dcce:	711a      	strb	r2, [r3, #4]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
 800dcd0:	4b23      	ldr	r3, [pc, #140]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dcd2:	789b      	ldrb	r3, [r3, #2]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d009      	beq.n	800dcec <EnabledConnectedDevices+0x44>
 800dcd8:	4b23      	ldr	r3, [pc, #140]	@ (800dd68 <EnabledConnectedDevices+0xc0>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d105      	bne.n	800dcec <EnabledConnectedDevices+0x44>
    Info("AHT2x sensor is disabled");
 800dce0:	4a22      	ldr	r2, [pc, #136]	@ (800dd6c <EnabledConnectedDevices+0xc4>)
 800dce2:	4b23      	ldr	r3, [pc, #140]	@ (800dd70 <EnabledConnectedDevices+0xc8>)
 800dce4:	0019      	movs	r1, r3
 800dce6:	2002      	movs	r0, #2
 800dce8:	f006 f89e 	bl	8013e28 <CreateLine>
  }
  if (SensorProbe.BMP280_Present) {
 800dcec:	4b1c      	ldr	r3, [pc, #112]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dcee:	791b      	ldrb	r3, [r3, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d002      	beq.n	800dcfa <EnabledConnectedDevices+0x52>
    Sensor.BMP_measurementEnabled = true;
 800dcf4:	4b1b      	ldr	r3, [pc, #108]	@ (800dd64 <EnabledConnectedDevices+0xbc>)
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800dcfa:	4b19      	ldr	r3, [pc, #100]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dcfc:	78db      	ldrb	r3, [r3, #3]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <EnabledConnectedDevices+0x60>
    Sensor.ENS_measurementEnabled = true;
 800dd02:	4b18      	ldr	r3, [pc, #96]	@ (800dd64 <EnabledConnectedDevices+0xbc>)
 800dd04:	2201      	movs	r2, #1
 800dd06:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800dd08:	4b15      	ldr	r3, [pc, #84]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dd0a:	785b      	ldrb	r3, [r3, #1]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d006      	beq.n	800dd1e <EnabledConnectedDevices+0x76>
 800dd10:	4b13      	ldr	r3, [pc, #76]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dd12:	7a1b      	ldrb	r3, [r3, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <EnabledConnectedDevices+0x76>
    Sensor.VOC_measurementEnabled = true;
 800dd18:	4b12      	ldr	r3, [pc, #72]	@ (800dd64 <EnabledConnectedDevices+0xbc>)
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800dd1e:	4b10      	ldr	r3, [pc, #64]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dd20:	795b      	ldrb	r3, [r3, #5]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d002      	beq.n	800dd2c <EnabledConnectedDevices+0x84>
    Sensor.PM_measurementEnabled = true;
 800dd26:	4b0f      	ldr	r3, [pc, #60]	@ (800dd64 <EnabledConnectedDevices+0xbc>)
 800dd28:	2201      	movs	r2, #1
 800dd2a:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800dd2c:	4b0c      	ldr	r3, [pc, #48]	@ (800dd60 <EnabledConnectedDevices+0xb8>)
 800dd2e:	799b      	ldrb	r3, [r3, #6]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <EnabledConnectedDevices+0x92>
    Sensor.MIC_measurementEnabled = true;
 800dd34:	4b0b      	ldr	r3, [pc, #44]	@ (800dd64 <EnabledConnectedDevices+0xbc>)
 800dd36:	2201      	movs	r2, #1
 800dd38:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800dd3a:	f006 fded 	bl	8014918 <HAL_GetTick>
 800dd3e:	0003      	movs	r3, r0
 800dd40:	4a0c      	ldr	r2, [pc, #48]	@ (800dd74 <EnabledConnectedDevices+0xcc>)
 800dd42:	189a      	adds	r2, r3, r2
 800dd44:	4b0c      	ldr	r3, [pc, #48]	@ (800dd78 <EnabledConnectedDevices+0xd0>)
 800dd46:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800dd48:	4b0c      	ldr	r3, [pc, #48]	@ (800dd7c <EnabledConnectedDevices+0xd4>)
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800dd4e:	4a0c      	ldr	r2, [pc, #48]	@ (800dd80 <EnabledConnectedDevices+0xd8>)
 800dd50:	4b0c      	ldr	r3, [pc, #48]	@ (800dd84 <EnabledConnectedDevices+0xdc>)
 800dd52:	0019      	movs	r1, r3
 800dd54:	2003      	movs	r0, #3
 800dd56:	f006 f867 	bl	8013e28 <CreateLine>
}
 800dd5a:	46c0      	nop			@ (mov r8, r8)
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	20001124 	.word	0x20001124
 800dd64:	2000111c 	.word	0x2000111c
 800dd68:	2000009f 	.word	0x2000009f
 800dd6c:	0802ce40 	.word	0x0802ce40
 800dd70:	0802cb54 	.word	0x0802cb54
 800dd74:	00124f80 	.word	0x00124f80
 800dd78:	20001114 	.word	0x20001114
 800dd7c:	20001133 	.word	0x20001133
 800dd80:	0802ce5c 	.word	0x0802ce5c
 800dd84:	0802c998 	.word	0x0802c998

0800dd88 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800dd8c:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc8 <DisableConnectedDevices+0x40>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800dd92:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc8 <DisableConnectedDevices+0x40>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800dd98:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc8 <DisableConnectedDevices+0x40>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800dd9e:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc8 <DisableConnectedDevices+0x40>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800dda4:	4b08      	ldr	r3, [pc, #32]	@ (800ddc8 <DisableConnectedDevices+0x40>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800ddaa:	4b07      	ldr	r3, [pc, #28]	@ (800ddc8 <DisableConnectedDevices+0x40>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800ddb0:	4b05      	ldr	r3, [pc, #20]	@ (800ddc8 <DisableConnectedDevices+0x40>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800ddb6:	4a05      	ldr	r2, [pc, #20]	@ (800ddcc <DisableConnectedDevices+0x44>)
 800ddb8:	4b05      	ldr	r3, [pc, #20]	@ (800ddd0 <DisableConnectedDevices+0x48>)
 800ddba:	0019      	movs	r1, r3
 800ddbc:	2003      	movs	r0, #3
 800ddbe:	f006 f833 	bl	8013e28 <CreateLine>
}
 800ddc2:	46c0      	nop			@ (mov r8, r8)
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	2000111c 	.word	0x2000111c
 800ddcc:	0802ce6c 	.word	0x0802ce6c
 800ddd0:	0802c998 	.word	0x0802c998

0800ddd4 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	0002      	movs	r2, r0
 800dddc:	1dfb      	adds	r3, r7, #7
 800ddde:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800dde0:	4b05      	ldr	r3, [pc, #20]	@ (800ddf8 <setSensorLock+0x24>)
 800dde2:	1dfa      	adds	r2, r7, #7
 800dde4:	7812      	ldrb	r2, [r2, #0]
 800dde6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800dde8:	200a      	movs	r0, #10
 800ddea:	f006 fd9f 	bl	801492c <HAL_Delay>
}
 800ddee:	46c0      	nop			@ (mov r8, r8)
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	b002      	add	sp, #8
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	46c0      	nop			@ (mov r8, r8)
 800ddf8:	2000112d 	.word	0x2000112d

0800ddfc <getSensorLock>:

uint8_t getSensorLock() {
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800de00:	4b02      	ldr	r3, [pc, #8]	@ (800de0c <getSensorLock+0x10>)
 800de02:	781b      	ldrb	r3, [r3, #0]
}
 800de04:	0018      	movs	r0, r3
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	46c0      	nop			@ (mov r8, r8)
 800de0c:	2000112d 	.word	0x2000112d

0800de10 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800de10:	b580      	push	{r7, lr}
 800de12:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800de14:	4b1a      	ldr	r3, [pc, #104]	@ (800de80 <UpkeepI2Csensors+0x70>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d005      	beq.n	800de28 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800de1c:	f006 fbfa 	bl	8014614 <HIDS_Upkeep>
 800de20:	0003      	movs	r3, r0
 800de22:	001a      	movs	r2, r3
 800de24:	4b17      	ldr	r3, [pc, #92]	@ (800de84 <UpkeepI2Csensors+0x74>)
 800de26:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800de28:	4b15      	ldr	r3, [pc, #84]	@ (800de80 <UpkeepI2Csensors+0x70>)
 800de2a:	785b      	ldrb	r3, [r3, #1]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d005      	beq.n	800de3c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800de30:	f003 fb9e 	bl	8011570 <SGP_Upkeep>
 800de34:	0003      	movs	r3, r0
 800de36:	001a      	movs	r2, r3
 800de38:	4b13      	ldr	r3, [pc, #76]	@ (800de88 <UpkeepI2Csensors+0x78>)
 800de3a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800de3c:	4b10      	ldr	r3, [pc, #64]	@ (800de80 <UpkeepI2Csensors+0x70>)
 800de3e:	791b      	ldrb	r3, [r3, #4]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d005      	beq.n	800de50 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800de44:	f7fd fafc 	bl	800b440 <AHT_Upkeep>
 800de48:	0003      	movs	r3, r0
 800de4a:	001a      	movs	r2, r3
 800de4c:	4b0f      	ldr	r3, [pc, #60]	@ (800de8c <UpkeepI2Csensors+0x7c>)
 800de4e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800de50:	4b0b      	ldr	r3, [pc, #44]	@ (800de80 <UpkeepI2Csensors+0x70>)
 800de52:	795b      	ldrb	r3, [r3, #5]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d005      	beq.n	800de64 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800de58:	f7fd ff92 	bl	800bd80 <BMP_Upkeep>
 800de5c:	0003      	movs	r3, r0
 800de5e:	001a      	movs	r2, r3
 800de60:	4b0b      	ldr	r3, [pc, #44]	@ (800de90 <UpkeepI2Csensors+0x80>)
 800de62:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800de64:	4b06      	ldr	r3, [pc, #24]	@ (800de80 <UpkeepI2Csensors+0x70>)
 800de66:	799b      	ldrb	r3, [r3, #6]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d005      	beq.n	800de78 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800de6c:	f7f6 faf4 	bl	8004458 <ENS_Upkeep>
 800de70:	0003      	movs	r3, r0
 800de72:	001a      	movs	r2, r3
 800de74:	4b07      	ldr	r3, [pc, #28]	@ (800de94 <UpkeepI2Csensors+0x84>)
 800de76:	701a      	strb	r2, [r3, #0]
  }
}
 800de78:	46c0      	nop			@ (mov r8, r8)
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	46c0      	nop			@ (mov r8, r8)
 800de80:	2000111c 	.word	0x2000111c
 800de84:	2000112f 	.word	0x2000112f
 800de88:	2000112e 	.word	0x2000112e
 800de8c:	20001130 	.word	0x20001130
 800de90:	20001131 	.word	0x20001131
 800de94:	20001132 	.word	0x20001132

0800de98 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800de98:	b580      	push	{r7, lr}
 800de9a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800de9c:	4b02      	ldr	r3, [pc, #8]	@ (800dea8 <ResetdBAmax+0x10>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	601a      	str	r2, [r3, #0]
}
 800dea2:	46c0      	nop			@ (mov r8, r8)
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	2000117c 	.word	0x2000117c

0800deac <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800deb4:	f006 fd30 	bl	8014918 <HAL_GetTick>
 800deb8:	0002      	movs	r2, r0
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	18d2      	adds	r2, r2, r3
 800debe:	4b03      	ldr	r3, [pc, #12]	@ (800decc <setMICTimeStamp+0x20>)
 800dec0:	601a      	str	r2, [r3, #0]
}
 800dec2:	46c0      	nop			@ (mov r8, r8)
 800dec4:	46bd      	mov	sp, r7
 800dec6:	b002      	add	sp, #8
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	46c0      	nop			@ (mov r8, r8)
 800decc:	20001184 	.word	0x20001184

0800ded0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  counter = 0;
 800ded4:	4b05      	ldr	r3, [pc, #20]	@ (800deec <ResetDBACalculator+0x1c>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800deda:	4b05      	ldr	r3, [pc, #20]	@ (800def0 <ResetDBACalculator+0x20>)
 800dedc:	2201      	movs	r2, #1
 800dede:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800dee0:	4b04      	ldr	r3, [pc, #16]	@ (800def4 <ResetDBACalculator+0x24>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	701a      	strb	r2, [r3, #0]
}
 800dee6:	46c0      	nop			@ (mov r8, r8)
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	20001180 	.word	0x20001180
 800def0:	200000a9 	.word	0x200000a9
 800def4:	20001181 	.word	0x20001181

0800def8 <MIC_Print>:

void MIC_Print(void) {
 800def8:	b5b0      	push	{r4, r5, r7, lr}
 800defa:	b08c      	sub	sp, #48	@ 0x30
 800defc:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800defe:	4ba1      	ldr	r3, [pc, #644]	@ (800e184 <MIC_Print+0x28c>)
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	4ba1      	ldr	r3, [pc, #644]	@ (800e188 <MIC_Print+0x290>)
 800df04:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800df06:	4ba1      	ldr	r3, [pc, #644]	@ (800e18c <MIC_Print+0x294>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	001a      	movs	r2, r3
 800df0c:	4b9e      	ldr	r3, [pc, #632]	@ (800e188 <MIC_Print+0x290>)
 800df0e:	6819      	ldr	r1, [r3, #0]
 800df10:	4b9f      	ldr	r3, [pc, #636]	@ (800e190 <MIC_Print+0x298>)
 800df12:	0092      	lsls	r2, r2, #2
 800df14:	50d1      	str	r1, [r2, r3]
  counter++;
 800df16:	4b9d      	ldr	r3, [pc, #628]	@ (800e18c <MIC_Print+0x294>)
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	3301      	adds	r3, #1
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	4b9b      	ldr	r3, [pc, #620]	@ (800e18c <MIC_Print+0x294>)
 800df20:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800df22:	4b9a      	ldr	r3, [pc, #616]	@ (800e18c <MIC_Print+0x294>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	2b09      	cmp	r3, #9
 800df28:	d80b      	bhi.n	800df42 <MIC_Print+0x4a>
 800df2a:	4b9a      	ldr	r3, [pc, #616]	@ (800e194 <MIC_Print+0x29c>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2201      	movs	r2, #1
 800df30:	4053      	eors	r3, r2
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d004      	beq.n	800df42 <MIC_Print+0x4a>
    denominator = counter;
 800df38:	4b94      	ldr	r3, [pc, #592]	@ (800e18c <MIC_Print+0x294>)
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	4b96      	ldr	r3, [pc, #600]	@ (800e198 <MIC_Print+0x2a0>)
 800df3e:	701a      	strb	r2, [r3, #0]
 800df40:	e005      	b.n	800df4e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800df42:	4b95      	ldr	r3, [pc, #596]	@ (800e198 <MIC_Print+0x2a0>)
 800df44:	220a      	movs	r2, #10
 800df46:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800df48:	4b92      	ldr	r3, [pc, #584]	@ (800e194 <MIC_Print+0x29c>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800df4e:	4b93      	ldr	r3, [pc, #588]	@ (800e19c <MIC_Print+0x2a4>)
 800df50:	2200      	movs	r2, #0
 800df52:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800df54:	230f      	movs	r3, #15
 800df56:	18fb      	adds	r3, r7, r3
 800df58:	2200      	movs	r2, #0
 800df5a:	701a      	strb	r2, [r3, #0]
 800df5c:	e042      	b.n	800dfe4 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800df5e:	240f      	movs	r4, #15
 800df60:	193b      	adds	r3, r7, r4
 800df62:	781a      	ldrb	r2, [r3, #0]
 800df64:	4b8a      	ldr	r3, [pc, #552]	@ (800e190 <MIC_Print+0x298>)
 800df66:	0092      	lsls	r2, r2, #2
 800df68:	58d2      	ldr	r2, [r2, r3]
 800df6a:	4b8c      	ldr	r3, [pc, #560]	@ (800e19c <MIC_Print+0x2a4>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	1c19      	adds	r1, r3, #0
 800df70:	1c10      	adds	r0, r2, #0
 800df72:	f7f2 fca5 	bl	80008c0 <__aeabi_fadd>
 800df76:	1c03      	adds	r3, r0, #0
 800df78:	1c1a      	adds	r2, r3, #0
 800df7a:	4b88      	ldr	r3, [pc, #544]	@ (800e19c <MIC_Print+0x2a4>)
 800df7c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800df7e:	193b      	adds	r3, r7, r4
 800df80:	781a      	ldrb	r2, [r3, #0]
 800df82:	4b83      	ldr	r3, [pc, #524]	@ (800e190 <MIC_Print+0x298>)
 800df84:	0092      	lsls	r2, r2, #2
 800df86:	58d2      	ldr	r2, [r2, r3]
 800df88:	4b85      	ldr	r3, [pc, #532]	@ (800e1a0 <MIC_Print+0x2a8>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	1c19      	adds	r1, r3, #0
 800df8e:	1c10      	adds	r0, r2, #0
 800df90:	f7f2 fae2 	bl	8000558 <__aeabi_fcmpgt>
 800df94:	1e03      	subs	r3, r0, #0
 800df96:	d006      	beq.n	800dfa6 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800df98:	193b      	adds	r3, r7, r4
 800df9a:	781a      	ldrb	r2, [r3, #0]
 800df9c:	4b7c      	ldr	r3, [pc, #496]	@ (800e190 <MIC_Print+0x298>)
 800df9e:	0092      	lsls	r2, r2, #2
 800dfa0:	58d2      	ldr	r2, [r2, r3]
 800dfa2:	4b7f      	ldr	r3, [pc, #508]	@ (800e1a0 <MIC_Print+0x2a8>)
 800dfa4:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800dfa6:	4b7d      	ldr	r3, [pc, #500]	@ (800e19c <MIC_Print+0x2a4>)
 800dfa8:	681c      	ldr	r4, [r3, #0]
 800dfaa:	4b7b      	ldr	r3, [pc, #492]	@ (800e198 <MIC_Print+0x2a0>)
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	0018      	movs	r0, r3
 800dfb0:	f7f3 fc8a 	bl	80018c8 <__aeabi_ui2f>
 800dfb4:	1c03      	adds	r3, r0, #0
 800dfb6:	1c19      	adds	r1, r3, #0
 800dfb8:	1c20      	adds	r0, r4, #0
 800dfba:	f7f2 fe73 	bl	8000ca4 <__aeabi_fdiv>
 800dfbe:	1c03      	adds	r3, r0, #0
 800dfc0:	1c1a      	adds	r2, r3, #0
 800dfc2:	4b78      	ldr	r3, [pc, #480]	@ (800e1a4 <MIC_Print+0x2ac>)
 800dfc4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800dfc6:	4b70      	ldr	r3, [pc, #448]	@ (800e188 <MIC_Print+0x290>)
 800dfc8:	6818      	ldr	r0, [r3, #0]
 800dfca:	4b75      	ldr	r3, [pc, #468]	@ (800e1a0 <MIC_Print+0x2a8>)
 800dfcc:	6819      	ldr	r1, [r3, #0]
 800dfce:	4b75      	ldr	r3, [pc, #468]	@ (800e1a4 <MIC_Print+0x2ac>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	1c1a      	adds	r2, r3, #0
 800dfd4:	f7f6 fe24 	bl	8004c20 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800dfd8:	210f      	movs	r1, #15
 800dfda:	187b      	adds	r3, r7, r1
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	187b      	adds	r3, r7, r1
 800dfe0:	3201      	adds	r2, #1
 800dfe2:	701a      	strb	r2, [r3, #0]
 800dfe4:	4b6c      	ldr	r3, [pc, #432]	@ (800e198 <MIC_Print+0x2a0>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	220f      	movs	r2, #15
 800dfea:	18ba      	adds	r2, r7, r2
 800dfec:	7812      	ldrb	r2, [r2, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d3b5      	bcc.n	800df5e <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800dff2:	4b65      	ldr	r3, [pc, #404]	@ (800e188 <MIC_Print+0x290>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	1c18      	adds	r0, r3, #0
 800dff8:	f7f5 fc4c 	bl	8003894 <__aeabi_f2d>
 800dffc:	0004      	movs	r4, r0
 800dffe:	000d      	movs	r5, r1
 800e000:	4b67      	ldr	r3, [pc, #412]	@ (800e1a0 <MIC_Print+0x2a8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	1c18      	adds	r0, r3, #0
 800e006:	f7f5 fc45 	bl	8003894 <__aeabi_f2d>
 800e00a:	6038      	str	r0, [r7, #0]
 800e00c:	6079      	str	r1, [r7, #4]
 800e00e:	4b65      	ldr	r3, [pc, #404]	@ (800e1a4 <MIC_Print+0x2ac>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	1c18      	adds	r0, r3, #0
 800e014:	f7f5 fc3e 	bl	8003894 <__aeabi_f2d>
 800e018:	0002      	movs	r2, r0
 800e01a:	000b      	movs	r3, r1
 800e01c:	4862      	ldr	r0, [pc, #392]	@ (800e1a8 <MIC_Print+0x2b0>)
 800e01e:	4963      	ldr	r1, [pc, #396]	@ (800e1ac <MIC_Print+0x2b4>)
 800e020:	9206      	str	r2, [sp, #24]
 800e022:	9307      	str	r3, [sp, #28]
 800e024:	683a      	ldr	r2, [r7, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	9204      	str	r2, [sp, #16]
 800e02a:	9305      	str	r3, [sp, #20]
 800e02c:	4b60      	ldr	r3, [pc, #384]	@ (800e1b0 <MIC_Print+0x2b8>)
 800e02e:	9302      	str	r3, [sp, #8]
 800e030:	9400      	str	r4, [sp, #0]
 800e032:	9501      	str	r5, [sp, #4]
 800e034:	0002      	movs	r2, r0
 800e036:	2002      	movs	r0, #2
 800e038:	f005 fef6 	bl	8013e28 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e03c:	4b53      	ldr	r3, [pc, #332]	@ (800e18c <MIC_Print+0x294>)
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	2b0a      	cmp	r3, #10
 800e042:	d902      	bls.n	800e04a <MIC_Print+0x152>
    counter = 0;
 800e044:	4b51      	ldr	r3, [pc, #324]	@ (800e18c <MIC_Print+0x294>)
 800e046:	2200      	movs	r2, #0
 800e048:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e04a:	4b4f      	ldr	r3, [pc, #316]	@ (800e188 <MIC_Print+0x290>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4959      	ldr	r1, [pc, #356]	@ (800e1b4 <MIC_Print+0x2bc>)
 800e050:	1c18      	adds	r0, r3, #0
 800e052:	f7f2 fa8b 	bl	800056c <__aeabi_fcmpge>
 800e056:	1e03      	subs	r3, r0, #0
 800e058:	d004      	beq.n	800e064 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e05a:	2201      	movs	r2, #1
 800e05c:	2101      	movs	r1, #1
 800e05e:	2001      	movs	r0, #1
 800e060:	f004 fbb2 	bl	80127c8 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e064:	4b48      	ldr	r3, [pc, #288]	@ (800e188 <MIC_Print+0x290>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4953      	ldr	r1, [pc, #332]	@ (800e1b8 <MIC_Print+0x2c0>)
 800e06a:	1c18      	adds	r0, r3, #0
 800e06c:	f7f2 fa7e 	bl	800056c <__aeabi_fcmpge>
 800e070:	1e03      	subs	r3, r0, #0
 800e072:	d00c      	beq.n	800e08e <MIC_Print+0x196>
 800e074:	4b44      	ldr	r3, [pc, #272]	@ (800e188 <MIC_Print+0x290>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	494e      	ldr	r1, [pc, #312]	@ (800e1b4 <MIC_Print+0x2bc>)
 800e07a:	1c18      	adds	r0, r3, #0
 800e07c:	f7f2 fa58 	bl	8000530 <__aeabi_fcmplt>
 800e080:	1e03      	subs	r3, r0, #0
 800e082:	d004      	beq.n	800e08e <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e084:	2200      	movs	r2, #0
 800e086:	2100      	movs	r1, #0
 800e088:	2001      	movs	r0, #1
 800e08a:	f004 fb9d 	bl	80127c8 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e08e:	4b3e      	ldr	r3, [pc, #248]	@ (800e188 <MIC_Print+0x290>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	494a      	ldr	r1, [pc, #296]	@ (800e1bc <MIC_Print+0x2c4>)
 800e094:	1c18      	adds	r0, r3, #0
 800e096:	f7f2 fa69 	bl	800056c <__aeabi_fcmpge>
 800e09a:	1e03      	subs	r3, r0, #0
 800e09c:	d00c      	beq.n	800e0b8 <MIC_Print+0x1c0>
 800e09e:	4b3a      	ldr	r3, [pc, #232]	@ (800e188 <MIC_Print+0x290>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4945      	ldr	r1, [pc, #276]	@ (800e1b8 <MIC_Print+0x2c0>)
 800e0a4:	1c18      	adds	r0, r3, #0
 800e0a6:	f7f2 fa43 	bl	8000530 <__aeabi_fcmplt>
 800e0aa:	1e03      	subs	r3, r0, #0
 800e0ac:	d004      	beq.n	800e0b8 <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	f004 fb88 	bl	80127c8 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e0b8:	4b33      	ldr	r3, [pc, #204]	@ (800e188 <MIC_Print+0x290>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4940      	ldr	r1, [pc, #256]	@ (800e1c0 <MIC_Print+0x2c8>)
 800e0be:	1c18      	adds	r0, r3, #0
 800e0c0:	f7f2 fa54 	bl	800056c <__aeabi_fcmpge>
 800e0c4:	1e03      	subs	r3, r0, #0
 800e0c6:	d00c      	beq.n	800e0e2 <MIC_Print+0x1ea>
 800e0c8:	4b2f      	ldr	r3, [pc, #188]	@ (800e188 <MIC_Print+0x290>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	493b      	ldr	r1, [pc, #236]	@ (800e1bc <MIC_Print+0x2c4>)
 800e0ce:	1c18      	adds	r0, r3, #0
 800e0d0:	f7f2 fa2e 	bl	8000530 <__aeabi_fcmplt>
 800e0d4:	1e03      	subs	r3, r0, #0
 800e0d6:	d004      	beq.n	800e0e2 <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e0d8:	2200      	movs	r2, #0
 800e0da:	2101      	movs	r1, #1
 800e0dc:	2000      	movs	r0, #0
 800e0de:	f004 fb73 	bl	80127c8 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e0e2:	4b29      	ldr	r3, [pc, #164]	@ (800e188 <MIC_Print+0x290>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4937      	ldr	r1, [pc, #220]	@ (800e1c4 <MIC_Print+0x2cc>)
 800e0e8:	1c18      	adds	r0, r3, #0
 800e0ea:	f7f2 fa3f 	bl	800056c <__aeabi_fcmpge>
 800e0ee:	1e03      	subs	r3, r0, #0
 800e0f0:	d00c      	beq.n	800e10c <MIC_Print+0x214>
 800e0f2:	4b25      	ldr	r3, [pc, #148]	@ (800e188 <MIC_Print+0x290>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4932      	ldr	r1, [pc, #200]	@ (800e1c0 <MIC_Print+0x2c8>)
 800e0f8:	1c18      	adds	r0, r3, #0
 800e0fa:	f7f2 fa19 	bl	8000530 <__aeabi_fcmplt>
 800e0fe:	1e03      	subs	r3, r0, #0
 800e100:	d004      	beq.n	800e10c <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e102:	2201      	movs	r2, #1
 800e104:	2101      	movs	r1, #1
 800e106:	2000      	movs	r0, #0
 800e108:	f004 fb5e 	bl	80127c8 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e10c:	4b1e      	ldr	r3, [pc, #120]	@ (800e188 <MIC_Print+0x290>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	492d      	ldr	r1, [pc, #180]	@ (800e1c8 <MIC_Print+0x2d0>)
 800e112:	1c18      	adds	r0, r3, #0
 800e114:	f7f2 fa2a 	bl	800056c <__aeabi_fcmpge>
 800e118:	1e03      	subs	r3, r0, #0
 800e11a:	d00c      	beq.n	800e136 <MIC_Print+0x23e>
 800e11c:	4b1a      	ldr	r3, [pc, #104]	@ (800e188 <MIC_Print+0x290>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4928      	ldr	r1, [pc, #160]	@ (800e1c4 <MIC_Print+0x2cc>)
 800e122:	1c18      	adds	r0, r3, #0
 800e124:	f7f2 fa04 	bl	8000530 <__aeabi_fcmplt>
 800e128:	1e03      	subs	r3, r0, #0
 800e12a:	d004      	beq.n	800e136 <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e12c:	2201      	movs	r2, #1
 800e12e:	2100      	movs	r1, #0
 800e130:	2000      	movs	r0, #0
 800e132:	f004 fb49 	bl	80127c8 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e136:	4b14      	ldr	r3, [pc, #80]	@ (800e188 <MIC_Print+0x290>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4924      	ldr	r1, [pc, #144]	@ (800e1cc <MIC_Print+0x2d4>)
 800e13c:	1c18      	adds	r0, r3, #0
 800e13e:	f7f2 fa15 	bl	800056c <__aeabi_fcmpge>
 800e142:	1e03      	subs	r3, r0, #0
 800e144:	d00c      	beq.n	800e160 <MIC_Print+0x268>
 800e146:	4b10      	ldr	r3, [pc, #64]	@ (800e188 <MIC_Print+0x290>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	491f      	ldr	r1, [pc, #124]	@ (800e1c8 <MIC_Print+0x2d0>)
 800e14c:	1c18      	adds	r0, r3, #0
 800e14e:	f7f2 f9ef 	bl	8000530 <__aeabi_fcmplt>
 800e152:	1e03      	subs	r3, r0, #0
 800e154:	d004      	beq.n	800e160 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e156:	2201      	movs	r2, #1
 800e158:	2100      	movs	r1, #0
 800e15a:	2001      	movs	r0, #1
 800e15c:	f004 fb34 	bl	80127c8 <SetDBLED>
  }
  if(dBA < 35){//off
 800e160:	4b09      	ldr	r3, [pc, #36]	@ (800e188 <MIC_Print+0x290>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4919      	ldr	r1, [pc, #100]	@ (800e1cc <MIC_Print+0x2d4>)
 800e166:	1c18      	adds	r0, r3, #0
 800e168:	f7f2 f9e2 	bl	8000530 <__aeabi_fcmplt>
 800e16c:	1e03      	subs	r3, r0, #0
 800e16e:	d100      	bne.n	800e172 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e170:	e004      	b.n	800e17c <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e172:	2200      	movs	r2, #0
 800e174:	2100      	movs	r1, #0
 800e176:	2000      	movs	r0, #0
 800e178:	f004 fb26 	bl	80127c8 <SetDBLED>
}
 800e17c:	46c0      	nop			@ (mov r8, r8)
 800e17e:	46bd      	mov	sp, r7
 800e180:	b004      	add	sp, #16
 800e182:	bdb0      	pop	{r4, r5, r7, pc}
 800e184:	20001178 	.word	0x20001178
 800e188:	20001144 	.word	0x20001144
 800e18c:	20001180 	.word	0x20001180
 800e190:	20001148 	.word	0x20001148
 800e194:	20001181 	.word	0x20001181
 800e198:	200000a9 	.word	0x200000a9
 800e19c:	20001174 	.word	0x20001174
 800e1a0:	2000117c 	.word	0x2000117c
 800e1a4:	20001170 	.word	0x20001170
 800e1a8:	0802ce80 	.word	0x0802ce80
 800e1ac:	0802cec4 	.word	0x0802cec4
 800e1b0:	20001138 	.word	0x20001138
 800e1b4:	42b40000 	.word	0x42b40000
 800e1b8:	42a00000 	.word	0x42a00000
 800e1bc:	428c0000 	.word	0x428c0000
 800e1c0:	42700000 	.word	0x42700000
 800e1c4:	42480000 	.word	0x42480000
 800e1c8:	42200000 	.word	0x42200000
 800e1cc:	420c0000 	.word	0x420c0000

0800e1d0 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e1d6:	4b11      	ldr	r3, [pc, #68]	@ (800e21c <MIC_TestMeasurementDone+0x4c>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	4a10      	ldr	r2, [pc, #64]	@ (800e220 <MIC_TestMeasurementDone+0x50>)
 800e1de:	4911      	ldr	r1, [pc, #68]	@ (800e224 <MIC_TestMeasurementDone+0x54>)
 800e1e0:	2002      	movs	r0, #2
 800e1e2:	f005 fe21 	bl	8013e28 <CreateLine>
  if(DataReady) {
 800e1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e21c <MIC_TestMeasurementDone+0x4c>)
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d010      	beq.n	800e212 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e1f0:	1dfb      	adds	r3, r7, #7
 800e1f2:	4a0d      	ldr	r2, [pc, #52]	@ (800e228 <MIC_TestMeasurementDone+0x58>)
 800e1f4:	7812      	ldrb	r2, [r2, #0]
 800e1f6:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e1f8:	4b0b      	ldr	r3, [pc, #44]	@ (800e228 <MIC_TestMeasurementDone+0x58>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	4a0b      	ldr	r2, [pc, #44]	@ (800e22c <MIC_TestMeasurementDone+0x5c>)
 800e200:	4908      	ldr	r1, [pc, #32]	@ (800e224 <MIC_TestMeasurementDone+0x54>)
 800e202:	2002      	movs	r0, #2
 800e204:	f005 fe10 	bl	8013e28 <CreateLine>
    ResetMICIndicator();
 800e208:	f004 fbcc 	bl	80129a4 <ResetMICIndicator>
    return Check;
 800e20c:	1dfb      	adds	r3, r7, #7
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	e000      	b.n	800e214 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e212:	2300      	movs	r3, #0
}
 800e214:	0018      	movs	r0, r3
 800e216:	46bd      	mov	sp, r7
 800e218:	b002      	add	sp, #8
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	200012b5 	.word	0x200012b5
 800e220:	0802cec8 	.word	0x0802cec8
 800e224:	0802cec4 	.word	0x0802cec4
 800e228:	200012b6 	.word	0x200012b6
 800e22c:	0802cef4 	.word	0x0802cef4

0800e230 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e236:	4b78      	ldr	r3, [pc, #480]	@ (800e418 <Mic_Upkeep+0x1e8>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b03      	cmp	r3, #3
 800e23c:	d100      	bne.n	800e240 <Mic_Upkeep+0x10>
 800e23e:	e0b8      	b.n	800e3b2 <Mic_Upkeep+0x182>
 800e240:	dd00      	ble.n	800e244 <Mic_Upkeep+0x14>
 800e242:	e0d3      	b.n	800e3ec <Mic_Upkeep+0x1bc>
 800e244:	2b02      	cmp	r3, #2
 800e246:	d037      	beq.n	800e2b8 <Mic_Upkeep+0x88>
 800e248:	dd00      	ble.n	800e24c <Mic_Upkeep+0x1c>
 800e24a:	e0cf      	b.n	800e3ec <Mic_Upkeep+0x1bc>
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <Mic_Upkeep+0x26>
 800e250:	2b01      	cmp	r3, #1
 800e252:	d014      	beq.n	800e27e <Mic_Upkeep+0x4e>
 800e254:	e0ca      	b.n	800e3ec <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e256:	2001      	movs	r0, #1
 800e258:	f003 fbb4 	bl	80119c4 <enableMicrophone>
 800e25c:	0003      	movs	r3, r0
 800e25e:	001a      	movs	r2, r3
 800e260:	2301      	movs	r3, #1
 800e262:	4053      	eors	r3, r2
 800e264:	b2db      	uxtb	r3, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	d005      	beq.n	800e276 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e26a:	4a6c      	ldr	r2, [pc, #432]	@ (800e41c <Mic_Upkeep+0x1ec>)
 800e26c:	4b6c      	ldr	r3, [pc, #432]	@ (800e420 <Mic_Upkeep+0x1f0>)
 800e26e:	217f      	movs	r1, #127	@ 0x7f
 800e270:	0018      	movs	r0, r3
 800e272:	f005 fec1 	bl	8013ff8 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e276:	4b68      	ldr	r3, [pc, #416]	@ (800e418 <Mic_Upkeep+0x1e8>)
 800e278:	2201      	movs	r2, #1
 800e27a:	701a      	strb	r2, [r3, #0]
    break;
 800e27c:	e0c5      	b.n	800e40a <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e27e:	f003 fb7d 	bl	801197c <micSettlingComplete>
 800e282:	1e03      	subs	r3, r0, #0
 800e284:	d105      	bne.n	800e292 <Mic_Upkeep+0x62>
 800e286:	4b67      	ldr	r3, [pc, #412]	@ (800e424 <Mic_Upkeep+0x1f4>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d100      	bne.n	800e292 <Mic_Upkeep+0x62>
 800e290:	e0b6      	b.n	800e400 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800e292:	f003 fc01 	bl	8011a98 <startSPLcalculation>
 800e296:	0003      	movs	r3, r0
 800e298:	001a      	movs	r2, r3
 800e29a:	2301      	movs	r3, #1
 800e29c:	4053      	eors	r3, r2
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d005      	beq.n	800e2b0 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e2a4:	4a5d      	ldr	r2, [pc, #372]	@ (800e41c <Mic_Upkeep+0x1ec>)
 800e2a6:	4b5e      	ldr	r3, [pc, #376]	@ (800e420 <Mic_Upkeep+0x1f0>)
 800e2a8:	2188      	movs	r1, #136	@ 0x88
 800e2aa:	0018      	movs	r0, r3
 800e2ac:	f005 fea4 	bl	8013ff8 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e2b0:	4b59      	ldr	r3, [pc, #356]	@ (800e418 <Mic_Upkeep+0x1e8>)
 800e2b2:	2202      	movs	r2, #2
 800e2b4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e2b6:	e0a3      	b.n	800e400 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e2b8:	4b5b      	ldr	r3, [pc, #364]	@ (800e428 <Mic_Upkeep+0x1f8>)
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	2101      	movs	r1, #1
 800e2be:	0018      	movs	r0, r3
 800e2c0:	f003 fa3e 	bl	8011740 <getSoundData>
 800e2c4:	1e03      	subs	r3, r0, #0
 800e2c6:	d100      	bne.n	800e2ca <Mic_Upkeep+0x9a>
 800e2c8:	e09c      	b.n	800e404 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800e2ca:	f003 fb37 	bl	801193c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e2ce:	4b56      	ldr	r3, [pc, #344]	@ (800e428 <Mic_Upkeep+0x1f8>)
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	001a      	movs	r2, r3
 800e2d4:	4b54      	ldr	r3, [pc, #336]	@ (800e428 <Mic_Upkeep+0x1f8>)
 800e2d6:	785b      	ldrb	r3, [r3, #1]
 800e2d8:	4954      	ldr	r1, [pc, #336]	@ (800e42c <Mic_Upkeep+0x1fc>)
 800e2da:	0038      	movs	r0, r7
 800e2dc:	f017 ffce 	bl	802627c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e2e0:	4b51      	ldr	r3, [pc, #324]	@ (800e428 <Mic_Upkeep+0x1f8>)
 800e2e2:	89db      	ldrh	r3, [r3, #14]
 800e2e4:	001a      	movs	r2, r3
 800e2e6:	4b50      	ldr	r3, [pc, #320]	@ (800e428 <Mic_Upkeep+0x1f8>)
 800e2e8:	7c1b      	ldrb	r3, [r3, #16]
 800e2ea:	4951      	ldr	r1, [pc, #324]	@ (800e430 <Mic_Upkeep+0x200>)
 800e2ec:	4851      	ldr	r0, [pc, #324]	@ (800e434 <Mic_Upkeep+0x204>)
 800e2ee:	f017 ffc5 	bl	802627c <siprintf>
      dBValue = atof(dBbuffer);
 800e2f2:	003b      	movs	r3, r7
 800e2f4:	0018      	movs	r0, r3
 800e2f6:	f016 fb67 	bl	80249c8 <atof>
 800e2fa:	0002      	movs	r2, r0
 800e2fc:	000b      	movs	r3, r1
 800e2fe:	0010      	movs	r0, r2
 800e300:	0019      	movs	r1, r3
 800e302:	f7f5 fb0f 	bl	8003924 <__aeabi_d2f>
 800e306:	1c02      	adds	r2, r0, #0
 800e308:	4b4b      	ldr	r3, [pc, #300]	@ (800e438 <Mic_Upkeep+0x208>)
 800e30a:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e30c:	4b4a      	ldr	r3, [pc, #296]	@ (800e438 <Mic_Upkeep+0x208>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	494a      	ldr	r1, [pc, #296]	@ (800e43c <Mic_Upkeep+0x20c>)
 800e312:	1c18      	adds	r0, r3, #0
 800e314:	f7f2 fe94 	bl	8001040 <__aeabi_fmul>
 800e318:	1c03      	adds	r3, r0, #0
 800e31a:	1c18      	adds	r0, r3, #0
 800e31c:	f7f5 faba 	bl	8003894 <__aeabi_f2d>
 800e320:	2200      	movs	r2, #0
 800e322:	4b47      	ldr	r3, [pc, #284]	@ (800e440 <Mic_Upkeep+0x210>)
 800e324:	f7f3 fb16 	bl	8001954 <__aeabi_dadd>
 800e328:	0002      	movs	r2, r0
 800e32a:	000b      	movs	r3, r1
 800e32c:	0010      	movs	r0, r2
 800e32e:	0019      	movs	r1, r3
 800e330:	f7f5 fa22 	bl	8003778 <__aeabi_d2iz>
 800e334:	0003      	movs	r3, r0
 800e336:	0018      	movs	r0, r3
 800e338:	f7f5 fa5a 	bl	80037f0 <__aeabi_i2d>
 800e33c:	2200      	movs	r2, #0
 800e33e:	4b41      	ldr	r3, [pc, #260]	@ (800e444 <Mic_Upkeep+0x214>)
 800e340:	f7f3 fece 	bl	80020e0 <__aeabi_ddiv>
 800e344:	0002      	movs	r2, r0
 800e346:	000b      	movs	r3, r1
 800e348:	0010      	movs	r0, r2
 800e34a:	0019      	movs	r1, r3
 800e34c:	f7f5 faea 	bl	8003924 <__aeabi_d2f>
 800e350:	1c02      	adds	r2, r0, #0
 800e352:	4b39      	ldr	r3, [pc, #228]	@ (800e438 <Mic_Upkeep+0x208>)
 800e354:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e356:	f7ff fdcf 	bl	800def8 <MIC_Print>
      if (!startSPLcalculation()) {
 800e35a:	f003 fb9d 	bl	8011a98 <startSPLcalculation>
 800e35e:	0003      	movs	r3, r0
 800e360:	001a      	movs	r2, r3
 800e362:	2301      	movs	r3, #1
 800e364:	4053      	eors	r3, r2
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d005      	beq.n	800e378 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e36c:	4a2b      	ldr	r2, [pc, #172]	@ (800e41c <Mic_Upkeep+0x1ec>)
 800e36e:	4b2c      	ldr	r3, [pc, #176]	@ (800e420 <Mic_Upkeep+0x1f0>)
 800e370:	2198      	movs	r1, #152	@ 0x98
 800e372:	0018      	movs	r0, r3
 800e374:	f005 fe40 	bl	8013ff8 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e378:	2000      	movs	r0, #0
 800e37a:	f003 fb23 	bl	80119c4 <enableMicrophone>
 800e37e:	0003      	movs	r3, r0
 800e380:	001a      	movs	r2, r3
 800e382:	2301      	movs	r3, #1
 800e384:	4053      	eors	r3, r2
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d005      	beq.n	800e398 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e38c:	4a23      	ldr	r2, [pc, #140]	@ (800e41c <Mic_Upkeep+0x1ec>)
 800e38e:	4b24      	ldr	r3, [pc, #144]	@ (800e420 <Mic_Upkeep+0x1f0>)
 800e390:	219b      	movs	r1, #155	@ 0x9b
 800e392:	0018      	movs	r0, r3
 800e394:	f005 fe30 	bl	8013ff8 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800e398:	f006 fabe 	bl	8014918 <HAL_GetTick>
 800e39c:	0003      	movs	r3, r0
 800e39e:	4a2a      	ldr	r2, [pc, #168]	@ (800e448 <Mic_Upkeep+0x218>)
 800e3a0:	189a      	adds	r2, r3, r2
 800e3a2:	4b2a      	ldr	r3, [pc, #168]	@ (800e44c <Mic_Upkeep+0x21c>)
 800e3a4:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e3a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e418 <Mic_Upkeep+0x1e8>)
 800e3a8:	2203      	movs	r2, #3
 800e3aa:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800e3ac:	f004 fafa 	bl	80129a4 <ResetMICIndicator>
    }
    break;
 800e3b0:	e028      	b.n	800e404 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e3b2:	4b26      	ldr	r3, [pc, #152]	@ (800e44c <Mic_Upkeep+0x21c>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	0018      	movs	r0, r3
 800e3b8:	f005 fce0 	bl	8013d7c <TimestampIsReached>
 800e3bc:	1e03      	subs	r3, r0, #0
 800e3be:	d023      	beq.n	800e408 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	f003 faff 	bl	80119c4 <enableMicrophone>
 800e3c6:	0003      	movs	r3, r0
 800e3c8:	001a      	movs	r2, r3
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	4053      	eors	r3, r2
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d005      	beq.n	800e3e0 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800e3d4:	4a11      	ldr	r2, [pc, #68]	@ (800e41c <Mic_Upkeep+0x1ec>)
 800e3d6:	4b12      	ldr	r3, [pc, #72]	@ (800e420 <Mic_Upkeep+0x1f0>)
 800e3d8:	21a6      	movs	r1, #166	@ 0xa6
 800e3da:	0018      	movs	r0, r3
 800e3dc:	f005 fe0c 	bl	8013ff8 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e3e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e418 <Mic_Upkeep+0x1e8>)
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800e3e6:	f004 fa9b 	bl	8012920 <SetMICIndicator>
    }
    break;
 800e3ea:	e00d      	b.n	800e408 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800e3ec:	4a18      	ldr	r2, [pc, #96]	@ (800e450 <Mic_Upkeep+0x220>)
 800e3ee:	4b19      	ldr	r3, [pc, #100]	@ (800e454 <Mic_Upkeep+0x224>)
 800e3f0:	0019      	movs	r1, r3
 800e3f2:	2003      	movs	r0, #3
 800e3f4:	f005 fd18 	bl	8013e28 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e3f8:	4b07      	ldr	r3, [pc, #28]	@ (800e418 <Mic_Upkeep+0x1e8>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	701a      	strb	r2, [r3, #0]
    break;
 800e3fe:	e004      	b.n	800e40a <Mic_Upkeep+0x1da>
    break;
 800e400:	46c0      	nop			@ (mov r8, r8)
 800e402:	e002      	b.n	800e40a <Mic_Upkeep+0x1da>
    break;
 800e404:	46c0      	nop			@ (mov r8, r8)
 800e406:	e000      	b.n	800e40a <Mic_Upkeep+0x1da>
    break;
 800e408:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e40a:	4b03      	ldr	r3, [pc, #12]	@ (800e418 <Mic_Upkeep+0x1e8>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
}
 800e40e:	0018      	movs	r0, r3
 800e410:	46bd      	mov	sp, r7
 800e412:	b002      	add	sp, #8
 800e414:	bd80      	pop	{r7, pc}
 800e416:	46c0      	nop			@ (mov r8, r8)
 800e418:	2000119a 	.word	0x2000119a
 800e41c:	0802cf0c 	.word	0x0802cf0c
 800e420:	0802e3f4 	.word	0x0802e3f4
 800e424:	200012b5 	.word	0x200012b5
 800e428:	20001188 	.word	0x20001188
 800e42c:	0802cf28 	.word	0x0802cf28
 800e430:	0802cf30 	.word	0x0802cf30
 800e434:	20001138 	.word	0x20001138
 800e438:	20001178 	.word	0x20001178
 800e43c:	42c80000 	.word	0x42c80000
 800e440:	3fe00000 	.word	0x3fe00000
 800e444:	40590000 	.word	0x40590000
 800e448:	000002f3 	.word	0x000002f3
 800e44c:	20001184 	.word	0x20001184
 800e450:	0802cf38 	.word	0x0802cf38
 800e454:	0802cf58 	.word	0x0802cf58

0800e458 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e45e:	1d3b      	adds	r3, r7, #4
 800e460:	0018      	movs	r0, r3
 800e462:	2314      	movs	r3, #20
 800e464:	001a      	movs	r2, r3
 800e466:	2100      	movs	r1, #0
 800e468:	f018 f850 	bl	802650c <memset>
  RTC_DateTypeDef sDate = {0};
 800e46c:	003b      	movs	r3, r7
 800e46e:	2200      	movs	r2, #0
 800e470:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e472:	4b2e      	ldr	r3, [pc, #184]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e474:	4a2e      	ldr	r2, [pc, #184]	@ (800e530 <MX_RTC_Init+0xd8>)
 800e476:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e478:	4b2c      	ldr	r3, [pc, #176]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e47e:	4b2b      	ldr	r3, [pc, #172]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e480:	227f      	movs	r2, #127	@ 0x7f
 800e482:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e484:	4b29      	ldr	r3, [pc, #164]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e486:	22ff      	movs	r2, #255	@ 0xff
 800e488:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e48a:	4b28      	ldr	r3, [pc, #160]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e490:	4b26      	ldr	r3, [pc, #152]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e492:	2200      	movs	r2, #0
 800e494:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e496:	4b25      	ldr	r3, [pc, #148]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e498:	2200      	movs	r2, #0
 800e49a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e49c:	4b23      	ldr	r3, [pc, #140]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e49e:	2200      	movs	r2, #0
 800e4a0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e4a2:	4b22      	ldr	r3, [pc, #136]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e4a4:	0018      	movs	r0, r3
 800e4a6:	f00d fe23 	bl	801c0f0 <HAL_RTC_Init>
 800e4aa:	1e03      	subs	r3, r0, #0
 800e4ac:	d001      	beq.n	800e4b2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e4ae:	f7fe ff67 	bl	800d380 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e4b2:	1d3b      	adds	r3, r7, #4
 800e4b4:	220d      	movs	r2, #13
 800e4b6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e4b8:	1d3b      	adds	r3, r7, #4
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e4be:	1d3b      	adds	r3, r7, #4
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e4c4:	1d3b      	adds	r3, r7, #4
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e4ca:	1d3b      	adds	r3, r7, #4
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e4d0:	1d39      	adds	r1, r7, #4
 800e4d2:	4b16      	ldr	r3, [pc, #88]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	0018      	movs	r0, r3
 800e4d8:	f00d fea6 	bl	801c228 <HAL_RTC_SetTime>
 800e4dc:	1e03      	subs	r3, r0, #0
 800e4de:	d001      	beq.n	800e4e4 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e4e0:	f7fe ff4e 	bl	800d380 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e4e4:	003b      	movs	r3, r7
 800e4e6:	2206      	movs	r2, #6
 800e4e8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e4ea:	003b      	movs	r3, r7
 800e4ec:	2211      	movs	r2, #17
 800e4ee:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e4f0:	003b      	movs	r3, r7
 800e4f2:	2217      	movs	r2, #23
 800e4f4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e4f6:	003b      	movs	r3, r7
 800e4f8:	2218      	movs	r2, #24
 800e4fa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e4fc:	0039      	movs	r1, r7
 800e4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e500:	2200      	movs	r2, #0
 800e502:	0018      	movs	r0, r3
 800e504:	f00d ff98 	bl	801c438 <HAL_RTC_SetDate>
 800e508:	1e03      	subs	r3, r0, #0
 800e50a:	d001      	beq.n	800e510 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e50c:	f7fe ff38 	bl	800d380 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e510:	4b06      	ldr	r3, [pc, #24]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e512:	2200      	movs	r2, #0
 800e514:	2100      	movs	r1, #0
 800e516:	0018      	movs	r0, r3
 800e518:	f00e f966 	bl	801c7e8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800e51c:	1e03      	subs	r3, r0, #0
 800e51e:	d001      	beq.n	800e524 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e520:	f7fe ff2e 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e524:	46c0      	nop			@ (mov r8, r8)
 800e526:	46bd      	mov	sp, r7
 800e528:	b006      	add	sp, #24
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	2000119c 	.word	0x2000119c
 800e530:	40002800 	.word	0x40002800

0800e534 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a0a      	ldr	r2, [pc, #40]	@ (800e56c <HAL_RTC_MspInit+0x38>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d10e      	bne.n	800e564 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e546:	4b0a      	ldr	r3, [pc, #40]	@ (800e570 <HAL_RTC_MspInit+0x3c>)
 800e548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e54a:	4b09      	ldr	r3, [pc, #36]	@ (800e570 <HAL_RTC_MspInit+0x3c>)
 800e54c:	2180      	movs	r1, #128	@ 0x80
 800e54e:	02c9      	lsls	r1, r1, #11
 800e550:	430a      	orrs	r2, r1
 800e552:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e554:	2200      	movs	r2, #0
 800e556:	2100      	movs	r1, #0
 800e558:	2002      	movs	r0, #2
 800e55a:	f006 fe63 	bl	8015224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e55e:	2002      	movs	r0, #2
 800e560:	f006 fe75 	bl	801524e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e564:	46c0      	nop			@ (mov r8, r8)
 800e566:	46bd      	mov	sp, r7
 800e568:	b002      	add	sp, #8
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	40002800 	.word	0x40002800
 800e570:	40021000 	.word	0x40021000

0800e574 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e574:	b580      	push	{r7, lr}
 800e576:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e578:	4b02      	ldr	r3, [pc, #8]	@ (800e584 <sen5x_Get_sen5x_enable_state+0x10>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
}
 800e57c:	0018      	movs	r0, r3
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	46c0      	nop			@ (mov r8, r8)
 800e584:	200011c3 	.word	0x200011c3

0800e588 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	0002      	movs	r2, r0
 800e590:	1dfb      	adds	r3, r7, #7
 800e592:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e594:	4b03      	ldr	r3, [pc, #12]	@ (800e5a4 <sen5x_Set_sen5x_state+0x1c>)
 800e596:	1dfa      	adds	r2, r7, #7
 800e598:	7812      	ldrb	r2, [r2, #0]
 800e59a:	701a      	strb	r2, [r3, #0]
}
 800e59c:	46c0      	nop			@ (mov r8, r8)
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	b002      	add	sp, #8
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	200011c3 	.word	0x200011c3

0800e5a8 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e5b0:	f006 f9b2 	bl	8014918 <HAL_GetTick>
 800e5b4:	0002      	movs	r2, r0
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	18d2      	adds	r2, r2, r3
 800e5ba:	4b03      	ldr	r3, [pc, #12]	@ (800e5c8 <setsen5xReadTimer+0x20>)
 800e5bc:	601a      	str	r2, [r3, #0]
}
 800e5be:	46c0      	nop			@ (mov r8, r8)
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	b002      	add	sp, #8
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	46c0      	nop			@ (mov r8, r8)
 800e5c8:	200011d0 	.word	0x200011d0

0800e5cc <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	0002      	movs	r2, r0
 800e5d4:	1dfb      	adds	r3, r7, #7
 800e5d6:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e5d8:	4b03      	ldr	r3, [pc, #12]	@ (800e5e8 <setsen5xSamplecounter+0x1c>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	701a      	strb	r2, [r3, #0]
}
 800e5de:	46c0      	nop			@ (mov r8, r8)
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	b002      	add	sp, #8
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	46c0      	nop			@ (mov r8, r8)
 800e5e8:	200011cc 	.word	0x200011cc

0800e5ec <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e5f4:	f7fe ff7c 	bl	800d4f0 <IsPMSensorEnabled>
 800e5f8:	1e03      	subs	r3, r0, #0
 800e5fa:	d035      	beq.n	800e668 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800e5fc:	f004 f80e 	bl	801261c <batteryChargeCheck>
 800e600:	0003      	movs	r3, r0
 800e602:	2b03      	cmp	r3, #3
 800e604:	d103      	bne.n	800e60e <sen5x_enable+0x22>
      sen5x_Enable = true;
 800e606:	4b20      	ldr	r3, [pc, #128]	@ (800e688 <sen5x_enable+0x9c>)
 800e608:	2201      	movs	r2, #1
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	e00d      	b.n	800e62a <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e60e:	4b1e      	ldr	r3, [pc, #120]	@ (800e688 <sen5x_enable+0x9c>)
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	1e5a      	subs	r2, r3, #1
 800e614:	4193      	sbcs	r3, r2
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2201      	movs	r2, #1
 800e61a:	4053      	eors	r3, r2
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	1c1a      	adds	r2, r3, #0
 800e620:	2301      	movs	r3, #1
 800e622:	4013      	ands	r3, r2
 800e624:	b2da      	uxtb	r2, r3
 800e626:	4b18      	ldr	r3, [pc, #96]	@ (800e688 <sen5x_enable+0x9c>)
 800e628:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e62a:	4b17      	ldr	r3, [pc, #92]	@ (800e688 <sen5x_enable+0x9c>)
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d003      	beq.n	800e63a <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800e632:	2000      	movs	r0, #0
 800e634:	f7ff ffb8 	bl	800e5a8 <setsen5xReadTimer>
 800e638:	e009      	b.n	800e64e <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e63a:	f006 f96d 	bl	8014918 <HAL_GetTick>
 800e63e:	0002      	movs	r2, r0
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2164      	movs	r1, #100	@ 0x64
 800e644:	434b      	muls	r3, r1
 800e646:	18d3      	adds	r3, r2, r3
 800e648:	0018      	movs	r0, r3
 800e64a:	f7ff ffad 	bl	800e5a8 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e64e:	4b0e      	ldr	r3, [pc, #56]	@ (800e688 <sen5x_enable+0x9c>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <sen5x_enable+0x6e>
 800e656:	4b0d      	ldr	r3, [pc, #52]	@ (800e68c <sen5x_enable+0xa0>)
 800e658:	e000      	b.n	800e65c <sen5x_enable+0x70>
 800e65a:	4b0d      	ldr	r3, [pc, #52]	@ (800e690 <sen5x_enable+0xa4>)
 800e65c:	4a0d      	ldr	r2, [pc, #52]	@ (800e694 <sen5x_enable+0xa8>)
 800e65e:	490e      	ldr	r1, [pc, #56]	@ (800e698 <sen5x_enable+0xac>)
 800e660:	2002      	movs	r0, #2
 800e662:	f005 fbe1 	bl	8013e28 <CreateLine>
 800e666:	e005      	b.n	800e674 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800e668:	4a0c      	ldr	r2, [pc, #48]	@ (800e69c <sen5x_enable+0xb0>)
 800e66a:	4b0b      	ldr	r3, [pc, #44]	@ (800e698 <sen5x_enable+0xac>)
 800e66c:	0019      	movs	r1, r3
 800e66e:	2002      	movs	r0, #2
 800e670:	f005 fbda 	bl	8013e28 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e674:	4b0a      	ldr	r3, [pc, #40]	@ (800e6a0 <sen5x_enable+0xb4>)
 800e676:	2201      	movs	r2, #1
 800e678:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e67a:	4b03      	ldr	r3, [pc, #12]	@ (800e688 <sen5x_enable+0x9c>)
 800e67c:	781b      	ldrb	r3, [r3, #0]
}
 800e67e:	0018      	movs	r0, r3
 800e680:	46bd      	mov	sp, r7
 800e682:	b002      	add	sp, #8
 800e684:	bd80      	pop	{r7, pc}
 800e686:	46c0      	nop			@ (mov r8, r8)
 800e688:	200011c3 	.word	0x200011c3
 800e68c:	0802cf5c 	.word	0x0802cf5c
 800e690:	0802cf64 	.word	0x0802cf64
 800e694:	0802cf70 	.word	0x0802cf70
 800e698:	0802cf8c 	.word	0x0802cf8c
 800e69c:	0802cf90 	.word	0x0802cf90
 800e6a0:	200000aa 	.word	0x200000aa

0800e6a4 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e6a8:	2380      	movs	r3, #128	@ 0x80
 800e6aa:	015b      	lsls	r3, r3, #5
 800e6ac:	480f      	ldr	r0, [pc, #60]	@ (800e6ec <sen5x_Power_On+0x48>)
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	0019      	movs	r1, r3
 800e6b2:	f007 fba4 	bl	8015dfe <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e6b6:	4a0e      	ldr	r2, [pc, #56]	@ (800e6f0 <sen5x_Power_On+0x4c>)
 800e6b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e6f4 <sen5x_Power_On+0x50>)
 800e6ba:	0019      	movs	r1, r3
 800e6bc:	2003      	movs	r0, #3
 800e6be:	f005 fbb3 	bl	8013e28 <CreateLine>
  HAL_Delay(150);
 800e6c2:	2096      	movs	r0, #150	@ 0x96
 800e6c4:	f006 f932 	bl	801492c <HAL_Delay>
  if (sen5x_device_reset()) {
 800e6c8:	f001 f9f6 	bl	800fab8 <sen5x_device_reset>
 800e6cc:	1e03      	subs	r3, r0, #0
 800e6ce:	d006      	beq.n	800e6de <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e6d0:	4a09      	ldr	r2, [pc, #36]	@ (800e6f8 <sen5x_Power_On+0x54>)
 800e6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6fc <sen5x_Power_On+0x58>)
 800e6d4:	0019      	movs	r1, r3
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	f005 fba6 	bl	8013e28 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e6dc:	e002      	b.n	800e6e4 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e6de:	4b08      	ldr	r3, [pc, #32]	@ (800e700 <sen5x_Power_On+0x5c>)
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	701a      	strb	r2, [r3, #0]
}
 800e6e4:	46c0      	nop			@ (mov r8, r8)
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	46c0      	nop			@ (mov r8, r8)
 800e6ec:	50000800 	.word	0x50000800
 800e6f0:	0802cfb0 	.word	0x0802cfb0
 800e6f4:	0802cfcc 	.word	0x0802cfcc
 800e6f8:	0802cfd0 	.word	0x0802cfd0
 800e6fc:	0802cff8 	.word	0x0802cff8
 800e700:	200011c1 	.word	0x200011c1

0800e704 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e704:	b580      	push	{r7, lr}
 800e706:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e708:	4b0e      	ldr	r3, [pc, #56]	@ (800e744 <sen5x_Power_Off+0x40>)
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d006      	beq.n	800e71e <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e710:	4a0d      	ldr	r2, [pc, #52]	@ (800e748 <sen5x_Power_Off+0x44>)
 800e712:	4b0e      	ldr	r3, [pc, #56]	@ (800e74c <sen5x_Power_Off+0x48>)
 800e714:	0019      	movs	r1, r3
 800e716:	2003      	movs	r0, #3
 800e718:	f005 fb86 	bl	8013e28 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e71c:	e00f      	b.n	800e73e <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e71e:	4a0c      	ldr	r2, [pc, #48]	@ (800e750 <sen5x_Power_Off+0x4c>)
 800e720:	4b0a      	ldr	r3, [pc, #40]	@ (800e74c <sen5x_Power_Off+0x48>)
 800e722:	0019      	movs	r1, r3
 800e724:	2003      	movs	r0, #3
 800e726:	f005 fb7f 	bl	8013e28 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e72a:	2380      	movs	r3, #128	@ 0x80
 800e72c:	015b      	lsls	r3, r3, #5
 800e72e:	4809      	ldr	r0, [pc, #36]	@ (800e754 <sen5x_Power_Off+0x50>)
 800e730:	2200      	movs	r2, #0
 800e732:	0019      	movs	r1, r3
 800e734:	f007 fb63 	bl	8015dfe <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e738:	4b07      	ldr	r3, [pc, #28]	@ (800e758 <sen5x_Power_Off+0x54>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	701a      	strb	r2, [r3, #0]
}
 800e73e:	46c0      	nop			@ (mov r8, r8)
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	200011c2 	.word	0x200011c2
 800e748:	0802cffc 	.word	0x0802cffc
 800e74c:	0802cfcc 	.word	0x0802cfcc
 800e750:	0802d02c 	.word	0x0802d02c
 800e754:	50000800 	.word	0x50000800
 800e758:	200011c1 	.word	0x200011c1

0800e75c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e75c:	b580      	push	{r7, lr}
 800e75e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e760:	4b02      	ldr	r3, [pc, #8]	@ (800e76c <reset_fanCleaningDone+0x10>)
 800e762:	2200      	movs	r2, #0
 800e764:	701a      	strb	r2, [r3, #0]
}
 800e766:	46c0      	nop			@ (mov r8, r8)
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	200011c0 	.word	0x200011c0

0800e770 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e772:	b093      	sub	sp, #76	@ 0x4c
 800e774:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e776:	2436      	movs	r4, #54	@ 0x36
 800e778:	193b      	adds	r3, r7, r4
 800e77a:	2200      	movs	r2, #0
 800e77c:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e77e:	2335      	movs	r3, #53	@ 0x35
 800e780:	18fb      	adds	r3, r7, r3
 800e782:	2220      	movs	r2, #32
 800e784:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e786:	2334      	movs	r3, #52	@ 0x34
 800e788:	18fb      	adds	r3, r7, r3
 800e78a:	2220      	movs	r2, #32
 800e78c:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e78e:	f7ff ff89 	bl	800e6a4 <sen5x_Power_On>
  error = sen5x_device_reset();
 800e792:	0025      	movs	r5, r4
 800e794:	193c      	adds	r4, r7, r4
 800e796:	f001 f98f 	bl	800fab8 <sen5x_device_reset>
 800e79a:	0003      	movs	r3, r0
 800e79c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e79e:	002c      	movs	r4, r5
 800e7a0:	193b      	adds	r3, r7, r4
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	5e9b      	ldrsh	r3, [r3, r2]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00b      	beq.n	800e7c2 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e7aa:	193b      	adds	r3, r7, r4
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	5e9b      	ldrsh	r3, [r3, r2]
 800e7b0:	4a77      	ldr	r2, [pc, #476]	@ (800e990 <probe_sen5x+0x220>)
 800e7b2:	4978      	ldr	r1, [pc, #480]	@ (800e994 <probe_sen5x+0x224>)
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	f005 fb37 	bl	8013e28 <CreateLine>
      return error;
 800e7ba:	193b      	adds	r3, r7, r4
 800e7bc:	2200      	movs	r2, #0
 800e7be:	5e9b      	ldrsh	r3, [r3, r2]
 800e7c0:	e0e2      	b.n	800e988 <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e7c2:	2536      	movs	r5, #54	@ 0x36
 800e7c4:	197c      	adds	r4, r7, r5
 800e7c6:	2335      	movs	r3, #53	@ 0x35
 800e7c8:	18fb      	adds	r3, r7, r3
 800e7ca:	781a      	ldrb	r2, [r3, #0]
 800e7cc:	230c      	movs	r3, #12
 800e7ce:	18fb      	adds	r3, r7, r3
 800e7d0:	0011      	movs	r1, r2
 800e7d2:	0018      	movs	r0, r3
 800e7d4:	f001 f85c 	bl	800f890 <sen5x_get_serial_number>
 800e7d8:	0003      	movs	r3, r0
 800e7da:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e7dc:	197b      	adds	r3, r7, r5
 800e7de:	2200      	movs	r2, #0
 800e7e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00b      	beq.n	800e7fe <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800e7e6:	197b      	adds	r3, r7, r5
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	5e9b      	ldrsh	r3, [r3, r2]
 800e7ec:	4a6a      	ldr	r2, [pc, #424]	@ (800e998 <probe_sen5x+0x228>)
 800e7ee:	4969      	ldr	r1, [pc, #420]	@ (800e994 <probe_sen5x+0x224>)
 800e7f0:	2001      	movs	r0, #1
 800e7f2:	f005 fb19 	bl	8013e28 <CreateLine>
      return error;
 800e7f6:	197b      	adds	r3, r7, r5
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	5e9b      	ldrsh	r3, [r3, r2]
 800e7fc:	e0c4      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800e7fe:	230c      	movs	r3, #12
 800e800:	18fb      	adds	r3, r7, r3
 800e802:	4a66      	ldr	r2, [pc, #408]	@ (800e99c <probe_sen5x+0x22c>)
 800e804:	4966      	ldr	r1, [pc, #408]	@ (800e9a0 <probe_sen5x+0x230>)
 800e806:	2002      	movs	r0, #2
 800e808:	f005 fb0e 	bl	8013e28 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e80c:	2536      	movs	r5, #54	@ 0x36
 800e80e:	197c      	adds	r4, r7, r5
 800e810:	2334      	movs	r3, #52	@ 0x34
 800e812:	18fb      	adds	r3, r7, r3
 800e814:	781a      	ldrb	r2, [r3, #0]
 800e816:	4b63      	ldr	r3, [pc, #396]	@ (800e9a4 <probe_sen5x+0x234>)
 800e818:	0011      	movs	r1, r2
 800e81a:	0018      	movs	r0, r3
 800e81c:	f000 ffe2 	bl	800f7e4 <sen5x_get_product_name>
 800e820:	0003      	movs	r3, r0
 800e822:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e824:	197b      	adds	r3, r7, r5
 800e826:	2200      	movs	r2, #0
 800e828:	5e9b      	ldrsh	r3, [r3, r2]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800e82e:	197b      	adds	r3, r7, r5
 800e830:	2200      	movs	r2, #0
 800e832:	5e9b      	ldrsh	r3, [r3, r2]
 800e834:	4a5c      	ldr	r2, [pc, #368]	@ (800e9a8 <probe_sen5x+0x238>)
 800e836:	4957      	ldr	r1, [pc, #348]	@ (800e994 <probe_sen5x+0x224>)
 800e838:	2001      	movs	r0, #1
 800e83a:	f005 faf5 	bl	8013e28 <CreateLine>
      return error;
 800e83e:	197b      	adds	r3, r7, r5
 800e840:	2200      	movs	r2, #0
 800e842:	5e9b      	ldrsh	r3, [r3, r2]
 800e844:	e0a0      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800e846:	4b57      	ldr	r3, [pc, #348]	@ (800e9a4 <probe_sen5x+0x234>)
 800e848:	4a58      	ldr	r2, [pc, #352]	@ (800e9ac <probe_sen5x+0x23c>)
 800e84a:	4955      	ldr	r1, [pc, #340]	@ (800e9a0 <probe_sen5x+0x230>)
 800e84c:	2002      	movs	r0, #2
 800e84e:	f005 faeb 	bl	8013e28 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e852:	2636      	movs	r6, #54	@ 0x36
 800e854:	19bc      	adds	r4, r7, r6
 800e856:	2308      	movs	r3, #8
 800e858:	18fd      	adds	r5, r7, r3
 800e85a:	2309      	movs	r3, #9
 800e85c:	18fa      	adds	r2, r7, r3
 800e85e:	230a      	movs	r3, #10
 800e860:	18f9      	adds	r1, r7, r3
 800e862:	230b      	movs	r3, #11
 800e864:	18f8      	adds	r0, r7, r3
 800e866:	1d7b      	adds	r3, r7, #5
 800e868:	9302      	str	r3, [sp, #8]
 800e86a:	1dbb      	adds	r3, r7, #6
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	1dfb      	adds	r3, r7, #7
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	002b      	movs	r3, r5
 800e874:	f001 f862 	bl	800f93c <sen5x_get_version>
 800e878:	0003      	movs	r3, r0
 800e87a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e87c:	19bb      	adds	r3, r7, r6
 800e87e:	2200      	movs	r2, #0
 800e880:	5e9b      	ldrsh	r3, [r3, r2]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00b      	beq.n	800e89e <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800e886:	19bb      	adds	r3, r7, r6
 800e888:	2200      	movs	r2, #0
 800e88a:	5e9b      	ldrsh	r3, [r3, r2]
 800e88c:	4a48      	ldr	r2, [pc, #288]	@ (800e9b0 <probe_sen5x+0x240>)
 800e88e:	4941      	ldr	r1, [pc, #260]	@ (800e994 <probe_sen5x+0x224>)
 800e890:	2001      	movs	r0, #1
 800e892:	f005 fac9 	bl	8013e28 <CreateLine>
      return error;
 800e896:	19bb      	adds	r3, r7, r6
 800e898:	2200      	movs	r2, #0
 800e89a:	5e9b      	ldrsh	r3, [r3, r2]
 800e89c:	e074      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800e89e:	230b      	movs	r3, #11
 800e8a0:	18fb      	adds	r3, r7, r3
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	001d      	movs	r5, r3
 800e8a6:	230a      	movs	r3, #10
 800e8a8:	18fb      	adds	r3, r7, r3
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	0018      	movs	r0, r3
 800e8ae:	2308      	movs	r3, #8
 800e8b0:	18fb      	adds	r3, r7, r3
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	001c      	movs	r4, r3
 800e8b6:	1dfb      	adds	r3, r7, #7
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	4a3e      	ldr	r2, [pc, #248]	@ (800e9b4 <probe_sen5x+0x244>)
 800e8bc:	4938      	ldr	r1, [pc, #224]	@ (800e9a0 <probe_sen5x+0x230>)
 800e8be:	9302      	str	r3, [sp, #8]
 800e8c0:	9401      	str	r4, [sp, #4]
 800e8c2:	9000      	str	r0, [sp, #0]
 800e8c4:	002b      	movs	r3, r5
 800e8c6:	2002      	movs	r0, #2
 800e8c8:	f005 faae 	bl	8013e28 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e8d0:	262e      	movs	r6, #46	@ 0x2e
 800e8d2:	19bb      	adds	r3, r7, r6
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e8d8:	232c      	movs	r3, #44	@ 0x2c
 800e8da:	18fb      	adds	r3, r7, r3
 800e8dc:	2200      	movs	r2, #0
 800e8de:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e8e0:	4935      	ldr	r1, [pc, #212]	@ (800e9b8 <probe_sen5x+0x248>)
 800e8e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8e4:	f7f2 fbac 	bl	8001040 <__aeabi_fmul>
 800e8e8:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e8ea:	1c18      	adds	r0, r3, #0
 800e8ec:	f7f2 ff7c 	bl	80017e8 <__aeabi_f2iz>
 800e8f0:	0003      	movs	r3, r0
 800e8f2:	b218      	sxth	r0, r3
 800e8f4:	2536      	movs	r5, #54	@ 0x36
 800e8f6:	197c      	adds	r4, r7, r5
 800e8f8:	232c      	movs	r3, #44	@ 0x2c
 800e8fa:	18fb      	adds	r3, r7, r3
 800e8fc:	881a      	ldrh	r2, [r3, #0]
 800e8fe:	19bb      	adds	r3, r7, r6
 800e900:	2100      	movs	r1, #0
 800e902:	5e5b      	ldrsh	r3, [r3, r1]
 800e904:	0019      	movs	r1, r3
 800e906:	f000 ff09 	bl	800f71c <sen5x_set_temperature_offset_parameters>
 800e90a:	0003      	movs	r3, r0
 800e90c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e90e:	197b      	adds	r3, r7, r5
 800e910:	2200      	movs	r2, #0
 800e912:	5e9b      	ldrsh	r3, [r3, r2]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00b      	beq.n	800e930 <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e918:	197b      	adds	r3, r7, r5
 800e91a:	2200      	movs	r2, #0
 800e91c:	5e9b      	ldrsh	r3, [r3, r2]
 800e91e:	4a27      	ldr	r2, [pc, #156]	@ (800e9bc <probe_sen5x+0x24c>)
 800e920:	491c      	ldr	r1, [pc, #112]	@ (800e994 <probe_sen5x+0x224>)
 800e922:	2001      	movs	r0, #1
 800e924:	f005 fa80 	bl	8013e28 <CreateLine>
      return error;
 800e928:	197b      	adds	r3, r7, r5
 800e92a:	2200      	movs	r2, #0
 800e92c:	5e9b      	ldrsh	r3, [r3, r2]
 800e92e:	e02b      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e932:	f7f4 ffaf 	bl	8003894 <__aeabi_f2d>
 800e936:	0002      	movs	r2, r0
 800e938:	000b      	movs	r3, r1
 800e93a:	4821      	ldr	r0, [pc, #132]	@ (800e9c0 <probe_sen5x+0x250>)
 800e93c:	4918      	ldr	r1, [pc, #96]	@ (800e9a0 <probe_sen5x+0x230>)
 800e93e:	9200      	str	r2, [sp, #0]
 800e940:	9301      	str	r3, [sp, #4]
 800e942:	0002      	movs	r2, r0
 800e944:	2002      	movs	r0, #2
 800e946:	f005 fa6f 	bl	8013e28 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800e94a:	f7fb f943 	bl	8009bd4 <Check_USB_PowerOn>
 800e94e:	0003      	movs	r3, r0
 800e950:	001a      	movs	r2, r3
 800e952:	2301      	movs	r3, #1
 800e954:	4053      	eors	r3, r2
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00a      	beq.n	800e972 <probe_sen5x+0x202>
    sen5x_Power_Off();
 800e95c:	f7ff fed2 	bl	800e704 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800e960:	f005 ffda 	bl	8014918 <HAL_GetTick>
 800e964:	0003      	movs	r3, r0
 800e966:	22fa      	movs	r2, #250	@ 0xfa
 800e968:	00d2      	lsls	r2, r2, #3
 800e96a:	189a      	adds	r2, r3, r2
 800e96c:	4b15      	ldr	r3, [pc, #84]	@ (800e9c4 <probe_sen5x+0x254>)
 800e96e:	601a      	str	r2, [r3, #0]
 800e970:	e006      	b.n	800e980 <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800e972:	f005 ffd1 	bl	8014918 <HAL_GetTick>
 800e976:	0003      	movs	r3, r0
 800e978:	4a13      	ldr	r2, [pc, #76]	@ (800e9c8 <probe_sen5x+0x258>)
 800e97a:	189a      	adds	r2, r3, r2
 800e97c:	4b11      	ldr	r3, [pc, #68]	@ (800e9c4 <probe_sen5x+0x254>)
 800e97e:	601a      	str	r2, [r3, #0]
  }
  return error;
 800e980:	2336      	movs	r3, #54	@ 0x36
 800e982:	18fb      	adds	r3, r7, r3
 800e984:	2200      	movs	r2, #0
 800e986:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e988:	0018      	movs	r0, r3
 800e98a:	46bd      	mov	sp, r7
 800e98c:	b00f      	add	sp, #60	@ 0x3c
 800e98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e990:	0802d048 	.word	0x0802d048
 800e994:	0802cff8 	.word	0x0802cff8
 800e998:	0802d074 	.word	0x0802d074
 800e99c:	0802d0a4 	.word	0x0802d0a4
 800e9a0:	0802cf8c 	.word	0x0802cf8c
 800e9a4:	200011c4 	.word	0x200011c4
 800e9a8:	0802d0b8 	.word	0x0802d0b8
 800e9ac:	0802d0e8 	.word	0x0802d0e8
 800e9b0:	0802d0fc 	.word	0x0802d0fc
 800e9b4:	0802d124 	.word	0x0802d124
 800e9b8:	43480000 	.word	0x43480000
 800e9bc:	0802d148 	.word	0x0802d148
 800e9c0:	0802d188 	.word	0x0802d188
 800e9c4:	200011d0 	.word	0x200011d0
 800e9c8:	00006d60 	.word	0x00006d60

0800e9cc <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800e9d2:	1dbb      	adds	r3, r7, #6
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800e9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800ea48 <sen5x_lightup_measurement+0x7c>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00b      	beq.n	800e9f8 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800e9e0:	4a1a      	ldr	r2, [pc, #104]	@ (800ea4c <sen5x_lightup_measurement+0x80>)
 800e9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea50 <sen5x_lightup_measurement+0x84>)
 800e9e4:	0019      	movs	r1, r3
 800e9e6:	2002      	movs	r0, #2
 800e9e8:	f005 fa1e 	bl	8013e28 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e9ec:	1dbc      	adds	r4, r7, #6
 800e9ee:	f000 fd21 	bl	800f434 <sen5x_start_measurement_without_pm>
 800e9f2:	0003      	movs	r3, r0
 800e9f4:	8023      	strh	r3, [r4, #0]
 800e9f6:	e00a      	b.n	800ea0e <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e9f8:	4a16      	ldr	r2, [pc, #88]	@ (800ea54 <sen5x_lightup_measurement+0x88>)
 800e9fa:	4b15      	ldr	r3, [pc, #84]	@ (800ea50 <sen5x_lightup_measurement+0x84>)
 800e9fc:	0019      	movs	r1, r3
 800e9fe:	2002      	movs	r0, #2
 800ea00:	f005 fa12 	bl	8013e28 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800ea04:	1dbc      	adds	r4, r7, #6
 800ea06:	f000 fce7 	bl	800f3d8 <sen5x_start_measurement>
 800ea0a:	0003      	movs	r3, r0
 800ea0c:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800ea0e:	1dbb      	adds	r3, r7, #6
 800ea10:	2200      	movs	r2, #0
 800ea12:	5e9b      	ldrsh	r3, [r3, r2]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d008      	beq.n	800ea2a <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800ea18:	1dbb      	adds	r3, r7, #6
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	5e9b      	ldrsh	r3, [r3, r2]
 800ea1e:	4a0e      	ldr	r2, [pc, #56]	@ (800ea58 <sen5x_lightup_measurement+0x8c>)
 800ea20:	490e      	ldr	r1, [pc, #56]	@ (800ea5c <sen5x_lightup_measurement+0x90>)
 800ea22:	2001      	movs	r0, #1
 800ea24:	f005 fa00 	bl	8013e28 <CreateLine>
 800ea28:	e007      	b.n	800ea3a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800ea2a:	f7fb f9db 	bl	8009de4 <showTime>
    Info("sen5x_start_measurement executed");
 800ea2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ea60 <sen5x_lightup_measurement+0x94>)
 800ea30:	4b07      	ldr	r3, [pc, #28]	@ (800ea50 <sen5x_lightup_measurement+0x84>)
 800ea32:	0019      	movs	r1, r3
 800ea34:	2002      	movs	r0, #2
 800ea36:	f005 f9f7 	bl	8013e28 <CreateLine>
  }
  return error;
 800ea3a:	1dbb      	adds	r3, r7, #6
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ea40:	0018      	movs	r0, r3
 800ea42:	46bd      	mov	sp, r7
 800ea44:	b003      	add	sp, #12
 800ea46:	bd90      	pop	{r4, r7, pc}
 800ea48:	200011c2 	.word	0x200011c2
 800ea4c:	0802d1c0 	.word	0x0802d1c0
 800ea50:	0802cf8c 	.word	0x0802cf8c
 800ea54:	0802d1ec 	.word	0x0802d1ec
 800ea58:	0802d20c 	.word	0x0802d20c
 800ea5c:	0802cff8 	.word	0x0802cff8
 800ea60:	0802d23c 	.word	0x0802d23c

0800ea64 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800ea64:	b590      	push	{r4, r7, lr}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800ea6a:	1dbb      	adds	r3, r7, #6
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800ea70:	4b21      	ldr	r3, [pc, #132]	@ (800eaf8 <sen5x_extinguish_measurement+0x94>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01e      	beq.n	800eab6 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800ea78:	4a20      	ldr	r2, [pc, #128]	@ (800eafc <sen5x_extinguish_measurement+0x98>)
 800ea7a:	4b21      	ldr	r3, [pc, #132]	@ (800eb00 <sen5x_extinguish_measurement+0x9c>)
 800ea7c:	0019      	movs	r1, r3
 800ea7e:	2002      	movs	r0, #2
 800ea80:	f005 f9d2 	bl	8013e28 <CreateLine>
    Info("PM measurement is disabled");
 800ea84:	4a1f      	ldr	r2, [pc, #124]	@ (800eb04 <sen5x_extinguish_measurement+0xa0>)
 800ea86:	4b1e      	ldr	r3, [pc, #120]	@ (800eb00 <sen5x_extinguish_measurement+0x9c>)
 800ea88:	0019      	movs	r1, r3
 800ea8a:	2002      	movs	r0, #2
 800ea8c:	f005 f9cc 	bl	8013e28 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ea90:	1dbc      	adds	r4, r7, #6
 800ea92:	f000 fccf 	bl	800f434 <sen5x_start_measurement_without_pm>
 800ea96:	0003      	movs	r3, r0
 800ea98:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea9a:	1dbb      	adds	r3, r7, #6
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	5e9b      	ldrsh	r3, [r3, r2]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d022      	beq.n	800eaea <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800eaa4:	1dbb      	adds	r3, r7, #6
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	5e9b      	ldrsh	r3, [r3, r2]
 800eaaa:	4a17      	ldr	r2, [pc, #92]	@ (800eb08 <sen5x_extinguish_measurement+0xa4>)
 800eaac:	4917      	ldr	r1, [pc, #92]	@ (800eb0c <sen5x_extinguish_measurement+0xa8>)
 800eaae:	2001      	movs	r0, #1
 800eab0:	f005 f9ba 	bl	8013e28 <CreateLine>
 800eab4:	e019      	b.n	800eaea <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800eab6:	1dbc      	adds	r4, r7, #6
 800eab8:	f000 fcea 	bl	800f490 <sen5x_stop_measurement>
 800eabc:	0003      	movs	r3, r0
 800eabe:	8023      	strh	r3, [r4, #0]
    showTime();
 800eac0:	f7fb f990 	bl	8009de4 <showTime>
    Info("sen5x_stop_measurement executed");
 800eac4:	4a12      	ldr	r2, [pc, #72]	@ (800eb10 <sen5x_extinguish_measurement+0xac>)
 800eac6:	4b0e      	ldr	r3, [pc, #56]	@ (800eb00 <sen5x_extinguish_measurement+0x9c>)
 800eac8:	0019      	movs	r1, r3
 800eaca:	2002      	movs	r0, #2
 800eacc:	f005 f9ac 	bl	8013e28 <CreateLine>
    if (error) {
 800ead0:	1dbb      	adds	r3, r7, #6
 800ead2:	2200      	movs	r2, #0
 800ead4:	5e9b      	ldrsh	r3, [r3, r2]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d007      	beq.n	800eaea <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800eada:	1dbb      	adds	r3, r7, #6
 800eadc:	2200      	movs	r2, #0
 800eade:	5e9b      	ldrsh	r3, [r3, r2]
 800eae0:	4a0c      	ldr	r2, [pc, #48]	@ (800eb14 <sen5x_extinguish_measurement+0xb0>)
 800eae2:	490a      	ldr	r1, [pc, #40]	@ (800eb0c <sen5x_extinguish_measurement+0xa8>)
 800eae4:	2001      	movs	r0, #1
 800eae6:	f005 f99f 	bl	8013e28 <CreateLine>
    }
  }
  return error;
 800eaea:	1dbb      	adds	r3, r7, #6
 800eaec:	2200      	movs	r2, #0
 800eaee:	5e9b      	ldrsh	r3, [r3, r2]
}
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	b003      	add	sp, #12
 800eaf6:	bd90      	pop	{r4, r7, pc}
 800eaf8:	200011c2 	.word	0x200011c2
 800eafc:	0802d260 	.word	0x0802d260
 800eb00:	0802cf8c 	.word	0x0802cf8c
 800eb04:	0802d298 	.word	0x0802d298
 800eb08:	0802d2b4 	.word	0x0802d2b4
 800eb0c:	0802cff8 	.word	0x0802cff8
 800eb10:	0802d2f4 	.word	0x0802d2f4
 800eb14:	0802d314 	.word	0x0802d314

0800eb18 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800eb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1a:	b08d      	sub	sp, #52	@ 0x34
 800eb1c:	af04      	add	r7, sp, #16
 800eb1e:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800eb20:	261e      	movs	r6, #30
 800eb22:	19bb      	adds	r3, r7, r6
 800eb24:	2200      	movs	r2, #0
 800eb26:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800eb28:	19bc      	adds	r4, r7, r6
 800eb2a:	2316      	movs	r3, #22
 800eb2c:	18fd      	adds	r5, r7, r3
 800eb2e:	2318      	movs	r3, #24
 800eb30:	18fa      	adds	r2, r7, r3
 800eb32:	231a      	movs	r3, #26
 800eb34:	18f9      	adds	r1, r7, r3
 800eb36:	231c      	movs	r3, #28
 800eb38:	18f8      	adds	r0, r7, r3
 800eb3a:	230e      	movs	r3, #14
 800eb3c:	18fb      	adds	r3, r7, r3
 800eb3e:	9303      	str	r3, [sp, #12]
 800eb40:	2310      	movs	r3, #16
 800eb42:	18fb      	adds	r3, r7, r3
 800eb44:	9302      	str	r3, [sp, #8]
 800eb46:	2312      	movs	r3, #18
 800eb48:	18fb      	adds	r3, r7, r3
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	2314      	movs	r3, #20
 800eb4e:	18fb      	adds	r3, r7, r3
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	002b      	movs	r3, r5
 800eb54:	f000 fd1e 	bl	800f594 <sen5x_read_measured_values>
 800eb58:	0003      	movs	r3, r0
 800eb5a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800eb5c:	19bb      	adds	r3, r7, r6
 800eb5e:	2200      	movs	r2, #0
 800eb60:	5e9b      	ldrsh	r3, [r3, r2]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <sen5x_read_measurement+0x56>
    return error;
 800eb66:	19bb      	adds	r3, r7, r6
 800eb68:	2200      	movs	r2, #0
 800eb6a:	5e9b      	ldrsh	r3, [r3, r2]
 800eb6c:	e02c      	b.n	800ebc8 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800eb6e:	231c      	movs	r3, #28
 800eb70:	18fb      	adds	r3, r7, r3
 800eb72:	881a      	ldrh	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800eb78:	231a      	movs	r3, #26
 800eb7a:	18fb      	adds	r3, r7, r3
 800eb7c:	881a      	ldrh	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800eb82:	2318      	movs	r3, #24
 800eb84:	18fb      	adds	r3, r7, r3
 800eb86:	881a      	ldrh	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800eb8c:	2316      	movs	r3, #22
 800eb8e:	18fb      	adds	r3, r7, r3
 800eb90:	881a      	ldrh	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800eb96:	2314      	movs	r3, #20
 800eb98:	18fb      	adds	r3, r7, r3
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	5e9a      	ldrsh	r2, [r3, r2]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800eba2:	2312      	movs	r3, #18
 800eba4:	18fb      	adds	r3, r7, r3
 800eba6:	2200      	movs	r2, #0
 800eba8:	5e9a      	ldrsh	r2, [r3, r2]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800ebae:	2310      	movs	r3, #16
 800ebb0:	18fb      	adds	r3, r7, r3
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	5e9a      	ldrsh	r2, [r3, r2]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800ebba:	230e      	movs	r3, #14
 800ebbc:	18fb      	adds	r3, r7, r3
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	5e9a      	ldrsh	r2, [r3, r2]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	81da      	strh	r2, [r3, #14]
  return 0;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	0018      	movs	r0, r3
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	b009      	add	sp, #36	@ 0x24
 800ebce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebd0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ebd6:	4b6e      	ldr	r3, [pc, #440]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	4a6e      	ldr	r2, [pc, #440]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d017      	beq.n	800ec10 <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800ebe0:	4b6b      	ldr	r3, [pc, #428]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	f7f2 fe1f 	bl	8001828 <__aeabi_i2f>
 800ebea:	1c03      	adds	r3, r0, #0
 800ebec:	496a      	ldr	r1, [pc, #424]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ebee:	1c18      	adds	r0, r3, #0
 800ebf0:	f7f2 f858 	bl	8000ca4 <__aeabi_fdiv>
 800ebf4:	1c03      	adds	r3, r0, #0
 800ebf6:	1c18      	adds	r0, r3, #0
 800ebf8:	f7f4 fe4c 	bl	8003894 <__aeabi_f2d>
 800ebfc:	0002      	movs	r2, r0
 800ebfe:	000b      	movs	r3, r1
 800ec00:	4866      	ldr	r0, [pc, #408]	@ (800ed9c <sen5x_printvalues+0x1cc>)
 800ec02:	4967      	ldr	r1, [pc, #412]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ec04:	9200      	str	r2, [sp, #0]
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	0002      	movs	r2, r0
 800ec0a:	2002      	movs	r0, #2
 800ec0c:	f005 f90c 	bl	8013e28 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ec10:	4b5f      	ldr	r3, [pc, #380]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec12:	885b      	ldrh	r3, [r3, #2]
 800ec14:	4a5f      	ldr	r2, [pc, #380]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d017      	beq.n	800ec4a <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ec1a:	4b5d      	ldr	r3, [pc, #372]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec1c:	885b      	ldrh	r3, [r3, #2]
 800ec1e:	0018      	movs	r0, r3
 800ec20:	f7f2 fe02 	bl	8001828 <__aeabi_i2f>
 800ec24:	1c03      	adds	r3, r0, #0
 800ec26:	495c      	ldr	r1, [pc, #368]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ec28:	1c18      	adds	r0, r3, #0
 800ec2a:	f7f2 f83b 	bl	8000ca4 <__aeabi_fdiv>
 800ec2e:	1c03      	adds	r3, r0, #0
 800ec30:	1c18      	adds	r0, r3, #0
 800ec32:	f7f4 fe2f 	bl	8003894 <__aeabi_f2d>
 800ec36:	0002      	movs	r2, r0
 800ec38:	000b      	movs	r3, r1
 800ec3a:	485a      	ldr	r0, [pc, #360]	@ (800eda4 <sen5x_printvalues+0x1d4>)
 800ec3c:	4958      	ldr	r1, [pc, #352]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ec3e:	9200      	str	r2, [sp, #0]
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	0002      	movs	r2, r0
 800ec44:	2002      	movs	r0, #2
 800ec46:	f005 f8ef 	bl	8013e28 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ec4a:	4b51      	ldr	r3, [pc, #324]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec4c:	889b      	ldrh	r3, [r3, #4]
 800ec4e:	4a51      	ldr	r2, [pc, #324]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d017      	beq.n	800ec84 <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ec54:	4b4e      	ldr	r3, [pc, #312]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec56:	889b      	ldrh	r3, [r3, #4]
 800ec58:	0018      	movs	r0, r3
 800ec5a:	f7f2 fde5 	bl	8001828 <__aeabi_i2f>
 800ec5e:	1c03      	adds	r3, r0, #0
 800ec60:	494d      	ldr	r1, [pc, #308]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ec62:	1c18      	adds	r0, r3, #0
 800ec64:	f7f2 f81e 	bl	8000ca4 <__aeabi_fdiv>
 800ec68:	1c03      	adds	r3, r0, #0
 800ec6a:	1c18      	adds	r0, r3, #0
 800ec6c:	f7f4 fe12 	bl	8003894 <__aeabi_f2d>
 800ec70:	0002      	movs	r2, r0
 800ec72:	000b      	movs	r3, r1
 800ec74:	484c      	ldr	r0, [pc, #304]	@ (800eda8 <sen5x_printvalues+0x1d8>)
 800ec76:	494a      	ldr	r1, [pc, #296]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ec78:	9200      	str	r2, [sp, #0]
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	0002      	movs	r2, r0
 800ec7e:	2002      	movs	r0, #2
 800ec80:	f005 f8d2 	bl	8013e28 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ec84:	4b42      	ldr	r3, [pc, #264]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec86:	88db      	ldrh	r3, [r3, #6]
 800ec88:	4a42      	ldr	r2, [pc, #264]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d017      	beq.n	800ecbe <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800ec8e:	4b40      	ldr	r3, [pc, #256]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec90:	88db      	ldrh	r3, [r3, #6]
 800ec92:	0018      	movs	r0, r3
 800ec94:	f7f2 fdc8 	bl	8001828 <__aeabi_i2f>
 800ec98:	1c03      	adds	r3, r0, #0
 800ec9a:	493f      	ldr	r1, [pc, #252]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ec9c:	1c18      	adds	r0, r3, #0
 800ec9e:	f7f2 f801 	bl	8000ca4 <__aeabi_fdiv>
 800eca2:	1c03      	adds	r3, r0, #0
 800eca4:	1c18      	adds	r0, r3, #0
 800eca6:	f7f4 fdf5 	bl	8003894 <__aeabi_f2d>
 800ecaa:	0002      	movs	r2, r0
 800ecac:	000b      	movs	r3, r1
 800ecae:	483f      	ldr	r0, [pc, #252]	@ (800edac <sen5x_printvalues+0x1dc>)
 800ecb0:	493b      	ldr	r1, [pc, #236]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ecb2:	9200      	str	r2, [sp, #0]
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	0002      	movs	r2, r0
 800ecb8:	2002      	movs	r0, #2
 800ecba:	f005 f8b5 	bl	8013e28 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800ecbe:	4b34      	ldr	r3, [pc, #208]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ecc0:	2208      	movs	r2, #8
 800ecc2:	5e9b      	ldrsh	r3, [r3, r2]
 800ecc4:	4a3a      	ldr	r2, [pc, #232]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d018      	beq.n	800ecfc <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800ecca:	4b31      	ldr	r3, [pc, #196]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800eccc:	2208      	movs	r2, #8
 800ecce:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd0:	0018      	movs	r0, r3
 800ecd2:	f7f2 fda9 	bl	8001828 <__aeabi_i2f>
 800ecd6:	1c03      	adds	r3, r0, #0
 800ecd8:	4936      	ldr	r1, [pc, #216]	@ (800edb4 <sen5x_printvalues+0x1e4>)
 800ecda:	1c18      	adds	r0, r3, #0
 800ecdc:	f7f1 ffe2 	bl	8000ca4 <__aeabi_fdiv>
 800ece0:	1c03      	adds	r3, r0, #0
 800ece2:	1c18      	adds	r0, r3, #0
 800ece4:	f7f4 fdd6 	bl	8003894 <__aeabi_f2d>
 800ece8:	0002      	movs	r2, r0
 800ecea:	000b      	movs	r3, r1
 800ecec:	4832      	ldr	r0, [pc, #200]	@ (800edb8 <sen5x_printvalues+0x1e8>)
 800ecee:	492c      	ldr	r1, [pc, #176]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ecf0:	9200      	str	r2, [sp, #0]
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	0002      	movs	r2, r0
 800ecf6:	2002      	movs	r0, #2
 800ecf8:	f005 f896 	bl	8013e28 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800ecfc:	4b24      	ldr	r3, [pc, #144]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ecfe:	220a      	movs	r2, #10
 800ed00:	5e9b      	ldrsh	r3, [r3, r2]
 800ed02:	4a2b      	ldr	r2, [pc, #172]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d018      	beq.n	800ed3a <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800ed08:	4b21      	ldr	r3, [pc, #132]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed0a:	220a      	movs	r2, #10
 800ed0c:	5e9b      	ldrsh	r3, [r3, r2]
 800ed0e:	0018      	movs	r0, r3
 800ed10:	f7f2 fd8a 	bl	8001828 <__aeabi_i2f>
 800ed14:	1c03      	adds	r3, r0, #0
 800ed16:	4929      	ldr	r1, [pc, #164]	@ (800edbc <sen5x_printvalues+0x1ec>)
 800ed18:	1c18      	adds	r0, r3, #0
 800ed1a:	f7f1 ffc3 	bl	8000ca4 <__aeabi_fdiv>
 800ed1e:	1c03      	adds	r3, r0, #0
 800ed20:	1c18      	adds	r0, r3, #0
 800ed22:	f7f4 fdb7 	bl	8003894 <__aeabi_f2d>
 800ed26:	0002      	movs	r2, r0
 800ed28:	000b      	movs	r3, r1
 800ed2a:	4825      	ldr	r0, [pc, #148]	@ (800edc0 <sen5x_printvalues+0x1f0>)
 800ed2c:	491c      	ldr	r1, [pc, #112]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ed2e:	9200      	str	r2, [sp, #0]
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	0002      	movs	r2, r0
 800ed34:	2002      	movs	r0, #2
 800ed36:	f005 f877 	bl	8013e28 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ed3a:	4b15      	ldr	r3, [pc, #84]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed3c:	220c      	movs	r2, #12
 800ed3e:	5e9b      	ldrsh	r3, [r3, r2]
 800ed40:	4a1b      	ldr	r2, [pc, #108]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d00d      	beq.n	800ed62 <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ed46:	4b12      	ldr	r3, [pc, #72]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed48:	220c      	movs	r2, #12
 800ed4a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed4c:	210a      	movs	r1, #10
 800ed4e:	0018      	movs	r0, r3
 800ed50:	f7f1 fab2 	bl	80002b8 <__divsi3>
 800ed54:	0003      	movs	r3, r0
 800ed56:	b21b      	sxth	r3, r3
 800ed58:	4a1a      	ldr	r2, [pc, #104]	@ (800edc4 <sen5x_printvalues+0x1f4>)
 800ed5a:	4911      	ldr	r1, [pc, #68]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ed5c:	2002      	movs	r0, #2
 800ed5e:	f005 f863 	bl	8013e28 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ed62:	4b0b      	ldr	r3, [pc, #44]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed64:	220e      	movs	r2, #14
 800ed66:	5e9b      	ldrsh	r3, [r3, r2]
 800ed68:	4a11      	ldr	r2, [pc, #68]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d00d      	beq.n	800ed8a <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ed6e:	4b08      	ldr	r3, [pc, #32]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed70:	220e      	movs	r2, #14
 800ed72:	5e9b      	ldrsh	r3, [r3, r2]
 800ed74:	210a      	movs	r1, #10
 800ed76:	0018      	movs	r0, r3
 800ed78:	f7f1 fa9e 	bl	80002b8 <__divsi3>
 800ed7c:	0003      	movs	r3, r0
 800ed7e:	b21b      	sxth	r3, r3
 800ed80:	4a11      	ldr	r2, [pc, #68]	@ (800edc8 <sen5x_printvalues+0x1f8>)
 800ed82:	4907      	ldr	r1, [pc, #28]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ed84:	2002      	movs	r0, #2
 800ed86:	f005 f84f 	bl	8013e28 <CreateLine>
  }
}
 800ed8a:	46c0      	nop			@ (mov r8, r8)
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	200011d4 	.word	0x200011d4
 800ed94:	0000ffff 	.word	0x0000ffff
 800ed98:	41200000 	.word	0x41200000
 800ed9c:	0802d344 	.word	0x0802d344
 800eda0:	0802cf8c 	.word	0x0802cf8c
 800eda4:	0802d36c 	.word	0x0802d36c
 800eda8:	0802d394 	.word	0x0802d394
 800edac:	0802d3bc 	.word	0x0802d3bc
 800edb0:	00007fff 	.word	0x00007fff
 800edb4:	42c80000 	.word	0x42c80000
 800edb8:	0802d3e4 	.word	0x0802d3e4
 800edbc:	43480000 	.word	0x43480000
 800edc0:	0802d408 	.word	0x0802d408
 800edc4:	0802d42c 	.word	0x0802d42c
 800edc8:	0802d440 	.word	0x0802d440

0800edcc <sen5xStore>:

void sen5xStore() {
 800edcc:	b5b0      	push	{r4, r5, r7, lr}
 800edce:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800edd0:	4b41      	ldr	r3, [pc, #260]	@ (800eed8 <sen5xStore+0x10c>)
 800edd2:	881b      	ldrh	r3, [r3, #0]
 800edd4:	4a41      	ldr	r2, [pc, #260]	@ (800eedc <sen5xStore+0x110>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d004      	beq.n	800ede4 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800edda:	4b3f      	ldr	r3, [pc, #252]	@ (800eed8 <sen5xStore+0x10c>)
 800eddc:	881b      	ldrh	r3, [r3, #0]
 800edde:	0018      	movs	r0, r3
 800ede0:	f7f5 ff34 	bl	8004c4c <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ede4:	4b3c      	ldr	r3, [pc, #240]	@ (800eed8 <sen5xStore+0x10c>)
 800ede6:	885b      	ldrh	r3, [r3, #2]
 800ede8:	4a3c      	ldr	r2, [pc, #240]	@ (800eedc <sen5xStore+0x110>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d004      	beq.n	800edf8 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800edee:	4b3a      	ldr	r3, [pc, #232]	@ (800eed8 <sen5xStore+0x10c>)
 800edf0:	885b      	ldrh	r3, [r3, #2]
 800edf2:	0018      	movs	r0, r3
 800edf4:	f7f5 ff56 	bl	8004ca4 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800edf8:	4b37      	ldr	r3, [pc, #220]	@ (800eed8 <sen5xStore+0x10c>)
 800edfa:	889b      	ldrh	r3, [r3, #4]
 800edfc:	4a37      	ldr	r2, [pc, #220]	@ (800eedc <sen5xStore+0x110>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d004      	beq.n	800ee0c <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800ee02:	4b35      	ldr	r3, [pc, #212]	@ (800eed8 <sen5xStore+0x10c>)
 800ee04:	889b      	ldrh	r3, [r3, #4]
 800ee06:	0018      	movs	r0, r3
 800ee08:	f7f5 ff78 	bl	8004cfc <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ee0c:	4b32      	ldr	r3, [pc, #200]	@ (800eed8 <sen5xStore+0x10c>)
 800ee0e:	88db      	ldrh	r3, [r3, #6]
 800ee10:	4a32      	ldr	r2, [pc, #200]	@ (800eedc <sen5xStore+0x110>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d004      	beq.n	800ee20 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800ee16:	4b30      	ldr	r3, [pc, #192]	@ (800eed8 <sen5xStore+0x10c>)
 800ee18:	88db      	ldrh	r3, [r3, #6]
 800ee1a:	0018      	movs	r0, r3
 800ee1c:	f7f5 ff9a 	bl	8004d54 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ee20:	4b2f      	ldr	r3, [pc, #188]	@ (800eee0 <sen5xStore+0x114>)
 800ee22:	791b      	ldrb	r3, [r3, #4]
 800ee24:	2b34      	cmp	r3, #52	@ 0x34
 800ee26:	d003      	beq.n	800ee30 <sen5xStore+0x64>
 800ee28:	4b2d      	ldr	r3, [pc, #180]	@ (800eee0 <sen5xStore+0x114>)
 800ee2a:	791b      	ldrb	r3, [r3, #4]
 800ee2c:	2b35      	cmp	r3, #53	@ 0x35
 800ee2e:	d14f      	bne.n	800eed0 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800ee30:	4b29      	ldr	r3, [pc, #164]	@ (800eed8 <sen5xStore+0x10c>)
 800ee32:	220a      	movs	r2, #10
 800ee34:	5e9b      	ldrsh	r3, [r3, r2]
 800ee36:	0018      	movs	r0, r3
 800ee38:	f7f2 fcf6 	bl	8001828 <__aeabi_i2f>
 800ee3c:	1c04      	adds	r4, r0, #0
 800ee3e:	4b26      	ldr	r3, [pc, #152]	@ (800eed8 <sen5xStore+0x10c>)
 800ee40:	2208      	movs	r2, #8
 800ee42:	5e9b      	ldrsh	r3, [r3, r2]
 800ee44:	0018      	movs	r0, r3
 800ee46:	f7f2 fcef 	bl	8001828 <__aeabi_i2f>
 800ee4a:	1c03      	adds	r3, r0, #0
 800ee4c:	1c19      	adds	r1, r3, #0
 800ee4e:	1c20      	adds	r0, r4, #0
 800ee50:	f7f5 ffca 	bl	8004de8 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800ee54:	4b23      	ldr	r3, [pc, #140]	@ (800eee4 <sen5xStore+0x118>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	4053      	eors	r3, r2
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d103      	bne.n	800ee6a <sen5xStore+0x9e>
 800ee62:	4b21      	ldr	r3, [pc, #132]	@ (800eee8 <sen5xStore+0x11c>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d032      	beq.n	800eed0 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800ee6a:	4b1b      	ldr	r3, [pc, #108]	@ (800eed8 <sen5xStore+0x10c>)
 800ee6c:	220c      	movs	r2, #12
 800ee6e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee70:	4a1e      	ldr	r2, [pc, #120]	@ (800eeec <sen5xStore+0x120>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d019      	beq.n	800eeaa <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ee76:	4b18      	ldr	r3, [pc, #96]	@ (800eed8 <sen5xStore+0x10c>)
 800ee78:	220c      	movs	r2, #12
 800ee7a:	5e9b      	ldrsh	r3, [r3, r2]
 800ee7c:	210a      	movs	r1, #10
 800ee7e:	0018      	movs	r0, r3
 800ee80:	f7f1 fa1a 	bl	80002b8 <__divsi3>
 800ee84:	0003      	movs	r3, r0
 800ee86:	b21b      	sxth	r3, r3
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	0018      	movs	r0, r3
 800ee8c:	f003 ff3e 	bl	8012d0c <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ee90:	4b11      	ldr	r3, [pc, #68]	@ (800eed8 <sen5xStore+0x10c>)
 800ee92:	220c      	movs	r2, #12
 800ee94:	5e9b      	ldrsh	r3, [r3, r2]
 800ee96:	210a      	movs	r1, #10
 800ee98:	0018      	movs	r0, r3
 800ee9a:	f7f1 fa0d 	bl	80002b8 <__divsi3>
 800ee9e:	0003      	movs	r3, r0
 800eea0:	b21b      	sxth	r3, r3
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	0018      	movs	r0, r3
 800eea6:	f7f5 fe49 	bl	8004b3c <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800eeaa:	4b0b      	ldr	r3, [pc, #44]	@ (800eed8 <sen5xStore+0x10c>)
 800eeac:	220e      	movs	r2, #14
 800eeae:	5e9b      	ldrsh	r3, [r3, r2]
 800eeb0:	4a0e      	ldr	r2, [pc, #56]	@ (800eeec <sen5xStore+0x120>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d00c      	beq.n	800eed0 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800eeb6:	4b08      	ldr	r3, [pc, #32]	@ (800eed8 <sen5xStore+0x10c>)
 800eeb8:	220e      	movs	r2, #14
 800eeba:	5e9b      	ldrsh	r3, [r3, r2]
 800eebc:	210a      	movs	r1, #10
 800eebe:	0018      	movs	r0, r3
 800eec0:	f7f1 f9fa 	bl	80002b8 <__divsi3>
 800eec4:	0003      	movs	r3, r0
 800eec6:	b21b      	sxth	r3, r3
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	0018      	movs	r0, r3
 800eecc:	f7f5 ff6e 	bl	8004dac <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800eed0:	46c0      	nop			@ (mov r8, r8)
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bdb0      	pop	{r4, r5, r7, pc}
 800eed6:	46c0      	nop			@ (mov r8, r8)
 800eed8:	200011d4 	.word	0x200011d4
 800eedc:	0000ffff 	.word	0x0000ffff
 800eee0:	200011c4 	.word	0x200011c4
 800eee4:	200011c2 	.word	0x200011c2
 800eee8:	20002151 	.word	0x20002151
 800eeec:	00007fff 	.word	0x00007fff

0800eef0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800eef0:	b590      	push	{r4, r7, lr}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6039      	str	r1, [r7, #0]
 800eef8:	0011      	movs	r1, r2
 800eefa:	1dfb      	adds	r3, r7, #7
 800eefc:	1c02      	adds	r2, r0, #0
 800eefe:	701a      	strb	r2, [r3, #0]
 800ef00:	1d3b      	adds	r3, r7, #4
 800ef02:	1c0a      	adds	r2, r1, #0
 800ef04:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800ef06:	1dfb      	adds	r3, r7, #7
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	18db      	adds	r3, r3, r3
 800ef0e:	b299      	uxth	r1, r3
 800ef10:	1d3b      	adds	r3, r7, #4
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	4805      	ldr	r0, [pc, #20]	@ (800ef2c <sensirion_i2c_hal_read+0x3c>)
 800ef18:	2464      	movs	r4, #100	@ 0x64
 800ef1a:	9400      	str	r4, [sp, #0]
 800ef1c:	f007 f946 	bl	80161ac <HAL_I2C_Master_Receive>
 800ef20:	0003      	movs	r3, r0
 800ef22:	b25b      	sxtb	r3, r3
}
 800ef24:	0018      	movs	r0, r3
 800ef26:	46bd      	mov	sp, r7
 800ef28:	b003      	add	sp, #12
 800ef2a:	bd90      	pop	{r4, r7, pc}
 800ef2c:	20000f8c 	.word	0x20000f8c

0800ef30 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af02      	add	r7, sp, #8
 800ef36:	6039      	str	r1, [r7, #0]
 800ef38:	0011      	movs	r1, r2
 800ef3a:	1dfb      	adds	r3, r7, #7
 800ef3c:	1c02      	adds	r2, r0, #0
 800ef3e:	701a      	strb	r2, [r3, #0]
 800ef40:	1d3b      	adds	r3, r7, #4
 800ef42:	1c0a      	adds	r2, r1, #0
 800ef44:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800ef46:	1dfb      	adds	r3, r7, #7
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	18db      	adds	r3, r3, r3
 800ef4e:	b299      	uxth	r1, r3
 800ef50:	1d3b      	adds	r3, r7, #4
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	4805      	ldr	r0, [pc, #20]	@ (800ef6c <sensirion_i2c_hal_write+0x3c>)
 800ef58:	2464      	movs	r4, #100	@ 0x64
 800ef5a:	9400      	str	r4, [sp, #0]
 800ef5c:	f007 f81e 	bl	8015f9c <HAL_I2C_Master_Transmit>
 800ef60:	0003      	movs	r3, r0
 800ef62:	b25b      	sxtb	r3, r3
}
 800ef64:	0018      	movs	r0, r3
 800ef66:	46bd      	mov	sp, r7
 800ef68:	b003      	add	sp, #12
 800ef6a:	bd90      	pop	{r4, r7, pc}
 800ef6c:	20000f8c 	.word	0x20000f8c

0800ef70 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	22fa      	movs	r2, #250	@ 0xfa
 800ef7c:	0091      	lsls	r1, r2, #2
 800ef7e:	0018      	movs	r0, r3
 800ef80:	f7f1 f910 	bl	80001a4 <__udivsi3>
 800ef84:	0003      	movs	r3, r0
 800ef86:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	22fa      	movs	r2, #250	@ 0xfa
 800ef8c:	0091      	lsls	r1, r2, #2
 800ef8e:	0018      	movs	r0, r3
 800ef90:	f7f1 f98e 	bl	80002b0 <__aeabi_uidivmod>
 800ef94:	1e0b      	subs	r3, r1, #0
 800ef96:	d002      	beq.n	800ef9e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	0018      	movs	r0, r3
 800efa2:	f005 fcc3 	bl	801492c <HAL_Delay>
}
 800efa6:	46c0      	nop			@ (mov r8, r8)
 800efa8:	46bd      	mov	sp, r7
 800efaa:	b004      	add	sp, #16
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800efb6:	1d3b      	adds	r3, r7, #4
 800efb8:	0018      	movs	r0, r3
 800efba:	f000 fd2b 	bl	800fa14 <sen5x_read_device_status>
 800efbe:	0003      	movs	r3, r0
 800efc0:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a2c      	ldr	r2, [pc, #176]	@ (800f078 <sen5x_check_for_errors+0xc8>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d107      	bne.n	800efda <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800efca:	4a2c      	ldr	r2, [pc, #176]	@ (800f07c <sen5x_check_for_errors+0xcc>)
 800efcc:	4b2c      	ldr	r3, [pc, #176]	@ (800f080 <sen5x_check_for_errors+0xd0>)
 800efce:	0019      	movs	r1, r3
 800efd0:	2001      	movs	r0, #1
 800efd2:	f004 ff29 	bl	8013e28 <CreateLine>
    return true;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e049      	b.n	800f06e <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d101      	bne.n	800efe4 <sen5x_check_for_errors+0x34>
    return false;
 800efe0:	2300      	movs	r3, #0
 800efe2:	e044      	b.n	800f06e <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	2380      	movs	r3, #128	@ 0x80
 800efe8:	039b      	lsls	r3, r3, #14
 800efea:	4013      	ands	r3, r2
 800efec:	d005      	beq.n	800effa <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800efee:	4a25      	ldr	r2, [pc, #148]	@ (800f084 <sen5x_check_for_errors+0xd4>)
 800eff0:	4b25      	ldr	r3, [pc, #148]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800eff2:	0019      	movs	r1, r3
 800eff4:	2003      	movs	r0, #3
 800eff6:	f004 ff17 	bl	8013e28 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	2380      	movs	r3, #128	@ 0x80
 800effe:	031b      	lsls	r3, r3, #12
 800f000:	4013      	ands	r3, r2
 800f002:	d005      	beq.n	800f010 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800f004:	4a21      	ldr	r2, [pc, #132]	@ (800f08c <sen5x_check_for_errors+0xdc>)
 800f006:	4b20      	ldr	r3, [pc, #128]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f008:	0019      	movs	r1, r3
 800f00a:	2003      	movs	r0, #3
 800f00c:	f004 ff0c 	bl	8013e28 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2280      	movs	r2, #128	@ 0x80
 800f014:	4013      	ands	r3, r2
 800f016:	d005      	beq.n	800f024 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800f018:	4a1d      	ldr	r2, [pc, #116]	@ (800f090 <sen5x_check_for_errors+0xe0>)
 800f01a:	4b1b      	ldr	r3, [pc, #108]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f01c:	0019      	movs	r1, r3
 800f01e:	2003      	movs	r0, #3
 800f020:	f004 ff02 	bl	8013e28 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2240      	movs	r2, #64	@ 0x40
 800f028:	4013      	ands	r3, r2
 800f02a:	d005      	beq.n	800f038 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f02c:	4a19      	ldr	r2, [pc, #100]	@ (800f094 <sen5x_check_for_errors+0xe4>)
 800f02e:	4b16      	ldr	r3, [pc, #88]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f030:	0019      	movs	r1, r3
 800f032:	2003      	movs	r0, #3
 800f034:	f004 fef8 	bl	8013e28 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2220      	movs	r2, #32
 800f03c:	4013      	ands	r3, r2
 800f03e:	d005      	beq.n	800f04c <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f040:	4a15      	ldr	r2, [pc, #84]	@ (800f098 <sen5x_check_for_errors+0xe8>)
 800f042:	4b11      	ldr	r3, [pc, #68]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f044:	0019      	movs	r1, r3
 800f046:	2003      	movs	r0, #3
 800f048:	f004 feee 	bl	8013e28 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2210      	movs	r2, #16
 800f050:	4013      	ands	r3, r2
 800f052:	d005      	beq.n	800f060 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f054:	4a11      	ldr	r2, [pc, #68]	@ (800f09c <sen5x_check_for_errors+0xec>)
 800f056:	4b0c      	ldr	r3, [pc, #48]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f058:	0019      	movs	r1, r3
 800f05a:	2003      	movs	r0, #3
 800f05c:	f004 fee4 	bl	8013e28 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a0f      	ldr	r2, [pc, #60]	@ (800f0a0 <sen5x_check_for_errors+0xf0>)
 800f064:	4908      	ldr	r1, [pc, #32]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f066:	2003      	movs	r0, #3
 800f068:	f004 fede 	bl	8013e28 <CreateLine>
  return true;
 800f06c:	2301      	movs	r3, #1
}
 800f06e:	0018      	movs	r0, r3
 800f070:	46bd      	mov	sp, r7
 800f072:	b002      	add	sp, #8
 800f074:	bd80      	pop	{r7, pc}
 800f076:	46c0      	nop			@ (mov r8, r8)
 800f078:	0000d206 	.word	0x0000d206
 800f07c:	0802d454 	.word	0x0802d454
 800f080:	0802cff8 	.word	0x0802cff8
 800f084:	0802d494 	.word	0x0802d494
 800f088:	0802cfcc 	.word	0x0802cfcc
 800f08c:	0802d4b4 	.word	0x0802d4b4
 800f090:	0802d4d0 	.word	0x0802d4d0
 800f094:	0802d4f4 	.word	0x0802d4f4
 800f098:	0802d514 	.word	0x0802d514
 800f09c:	0802d528 	.word	0x0802d528
 800f0a0:	0802d564 	.word	0x0802d564

0800f0a4 <set_light_on_state>:

void set_light_on_state(void) {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f0a8:	4b15      	ldr	r3, [pc, #84]	@ (800f100 <set_light_on_state+0x5c>)
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	4053      	eors	r3, r2
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d008      	beq.n	800f0c8 <set_light_on_state+0x24>
    sen5x_Power_On();
 800f0b6:	f7ff faf5 	bl	800e6a4 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f0ba:	4a12      	ldr	r2, [pc, #72]	@ (800f104 <set_light_on_state+0x60>)
 800f0bc:	4b12      	ldr	r3, [pc, #72]	@ (800f108 <set_light_on_state+0x64>)
 800f0be:	0019      	movs	r1, r3
 800f0c0:	2003      	movs	r0, #3
 800f0c2:	f004 feb1 	bl	8013e28 <CreateLine>
 800f0c6:	e00a      	b.n	800f0de <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f0c8:	f005 fc26 	bl	8014918 <HAL_GetTick>
 800f0cc:	0002      	movs	r2, r0
 800f0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800f10c <set_light_on_state+0x68>)
 800f0d0:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f0d2:	4a0f      	ldr	r2, [pc, #60]	@ (800f110 <set_light_on_state+0x6c>)
 800f0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f108 <set_light_on_state+0x64>)
 800f0d6:	0019      	movs	r1, r3
 800f0d8:	2003      	movs	r0, #3
 800f0da:	f004 fea5 	bl	8013e28 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f0de:	f7ff fc75 	bl	800e9cc <sen5x_lightup_measurement>
 800f0e2:	1e03      	subs	r3, r0, #0
 800f0e4:	d005      	beq.n	800f0f2 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f0e6:	4a0b      	ldr	r2, [pc, #44]	@ (800f114 <set_light_on_state+0x70>)
 800f0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f118 <set_light_on_state+0x74>)
 800f0ea:	0019      	movs	r1, r3
 800f0ec:	2001      	movs	r0, #1
 800f0ee:	f004 fe9b 	bl	8013e28 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f11c <set_light_on_state+0x78>)
 800f0f4:	2203      	movs	r2, #3
 800f0f6:	701a      	strb	r2, [r3, #0]
}
 800f0f8:	46c0      	nop			@ (mov r8, r8)
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	46c0      	nop			@ (mov r8, r8)
 800f100:	200011c1 	.word	0x200011c1
 800f104:	0802d594 	.word	0x0802d594
 800f108:	0802cfcc 	.word	0x0802cfcc
 800f10c:	200011d0 	.word	0x200011d0
 800f110:	0802d5b4 	.word	0x0802d5b4
 800f114:	0802d5cc 	.word	0x0802d5cc
 800f118:	0802cff8 	.word	0x0802cff8
 800f11c:	200000aa 	.word	0x200000aa

0800f120 <sen5x_statemachine>:

void sen5x_statemachine() {
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f126:	1dfb      	adds	r3, r7, #7
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f12c:	4b92      	ldr	r3, [pc, #584]	@ (800f378 <sen5x_statemachine+0x258>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	0018      	movs	r0, r3
 800f132:	f004 fe23 	bl	8013d7c <TimestampIsReached>
 800f136:	1e03      	subs	r3, r0, #0
 800f138:	d100      	bne.n	800f13c <sen5x_statemachine+0x1c>
 800f13a:	e118      	b.n	800f36e <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f13c:	4b8f      	ldr	r3, [pc, #572]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b05      	cmp	r3, #5
 800f142:	d900      	bls.n	800f146 <sen5x_statemachine+0x26>
 800f144:	e113      	b.n	800f36e <sen5x_statemachine+0x24e>
 800f146:	009a      	lsls	r2, r3, #2
 800f148:	4b8d      	ldr	r3, [pc, #564]	@ (800f380 <sen5x_statemachine+0x260>)
 800f14a:	18d3      	adds	r3, r2, r3
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f150:	4a8c      	ldr	r2, [pc, #560]	@ (800f384 <sen5x_statemachine+0x264>)
 800f152:	4b8d      	ldr	r3, [pc, #564]	@ (800f388 <sen5x_statemachine+0x268>)
 800f154:	0019      	movs	r1, r3
 800f156:	2001      	movs	r0, #1
 800f158:	f004 fe66 	bl	8013e28 <CreateLine>
      SetPMSensorStatus(false);
 800f15c:	2000      	movs	r0, #0
 800f15e:	f7fe f9e7 	bl	800d530 <SetPMSensorStatus>
      DisablePMSensor();
 800f162:	f7fe f969 	bl	800d438 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then ten minutes a message when continue operated.
 800f166:	f005 fbd7 	bl	8014918 <HAL_GetTick>
 800f16a:	0003      	movs	r3, r0
 800f16c:	4a87      	ldr	r2, [pc, #540]	@ (800f38c <sen5x_statemachine+0x26c>)
 800f16e:	189a      	adds	r2, r3, r2
 800f170:	4b81      	ldr	r3, [pc, #516]	@ (800f378 <sen5x_statemachine+0x258>)
 800f172:	601a      	str	r2, [r3, #0]
      break;
 800f174:	e0fb      	b.n	800f36e <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f176:	f005 fbcf 	bl	8014918 <HAL_GetTick>
 800f17a:	0003      	movs	r3, r0
 800f17c:	4a84      	ldr	r2, [pc, #528]	@ (800f390 <sen5x_statemachine+0x270>)
 800f17e:	189a      	adds	r2, r3, r2
 800f180:	4b7d      	ldr	r3, [pc, #500]	@ (800f378 <sen5x_statemachine+0x258>)
 800f182:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f184:	f7ff ff8e 	bl	800f0a4 <set_light_on_state>
      break;
 800f188:	e0f1      	b.n	800f36e <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f18a:	4b7c      	ldr	r3, [pc, #496]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f18c:	2202      	movs	r2, #2
 800f18e:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f190:	4b80      	ldr	r3, [pc, #512]	@ (800f394 <sen5x_statemachine+0x274>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2b05      	cmp	r3, #5
 800f196:	d905      	bls.n	800f1a4 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f198:	4b78      	ldr	r3, [pc, #480]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f19e:	f7ff fab1 	bl	800e704 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f1a2:	e0e1      	b.n	800f368 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f1a4:	f7ff ff04 	bl	800efb0 <sen5x_check_for_errors>
 800f1a8:	1e03      	subs	r3, r0, #0
 800f1aa:	d028      	beq.n	800f1fe <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f1ac:	f000 fc84 	bl	800fab8 <sen5x_device_reset>
 800f1b0:	1e03      	subs	r3, r0, #0
 800f1b2:	d018      	beq.n	800f1e6 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f1b4:	4a78      	ldr	r2, [pc, #480]	@ (800f398 <sen5x_statemachine+0x278>)
 800f1b6:	4b74      	ldr	r3, [pc, #464]	@ (800f388 <sen5x_statemachine+0x268>)
 800f1b8:	0019      	movs	r1, r3
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	f004 fe34 	bl	8013e28 <CreateLine>
            sen5xErrors++;
 800f1c0:	4b74      	ldr	r3, [pc, #464]	@ (800f394 <sen5x_statemachine+0x274>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	4b72      	ldr	r3, [pc, #456]	@ (800f394 <sen5x_statemachine+0x274>)
 800f1ca:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f1cc:	f7ff fa9a 	bl	800e704 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f1d0:	f005 fba2 	bl	8014918 <HAL_GetTick>
 800f1d4:	0003      	movs	r3, r0
 800f1d6:	4a6e      	ldr	r2, [pc, #440]	@ (800f390 <sen5x_statemachine+0x270>)
 800f1d8:	189a      	adds	r2, r3, r2
 800f1da:	4b67      	ldr	r3, [pc, #412]	@ (800f378 <sen5x_statemachine+0x258>)
 800f1dc:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f1de:	4b67      	ldr	r3, [pc, #412]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f1e0:	2205      	movs	r2, #5
 800f1e2:	701a      	strb	r2, [r3, #0]
 800f1e4:	e005      	b.n	800f1f2 <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f1e6:	4a6d      	ldr	r2, [pc, #436]	@ (800f39c <sen5x_statemachine+0x27c>)
 800f1e8:	4b6d      	ldr	r3, [pc, #436]	@ (800f3a0 <sen5x_statemachine+0x280>)
 800f1ea:	0019      	movs	r1, r3
 800f1ec:	2002      	movs	r0, #2
 800f1ee:	f004 fe1b 	bl	8013e28 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f1f2:	f005 fb91 	bl	8014918 <HAL_GetTick>
 800f1f6:	0002      	movs	r2, r0
 800f1f8:	4b5f      	ldr	r3, [pc, #380]	@ (800f378 <sen5x_statemachine+0x258>)
 800f1fa:	601a      	str	r2, [r3, #0]
      break;
 800f1fc:	e0b4      	b.n	800f368 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f1fe:	4b65      	ldr	r3, [pc, #404]	@ (800f394 <sen5x_statemachine+0x274>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d100      	bne.n	800f208 <sen5x_statemachine+0xe8>
 800f206:	e0af      	b.n	800f368 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f208:	4b62      	ldr	r3, [pc, #392]	@ (800f394 <sen5x_statemachine+0x274>)
 800f20a:	2200      	movs	r2, #0
 800f20c:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f20e:	4a65      	ldr	r2, [pc, #404]	@ (800f3a4 <sen5x_statemachine+0x284>)
 800f210:	4b65      	ldr	r3, [pc, #404]	@ (800f3a8 <sen5x_statemachine+0x288>)
 800f212:	0019      	movs	r1, r3
 800f214:	2003      	movs	r0, #3
 800f216:	f004 fe07 	bl	8013e28 <CreateLine>
      break;
 800f21a:	e0a5      	b.n	800f368 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f21c:	1dfb      	adds	r3, r7, #7
 800f21e:	0018      	movs	r0, r3
 800f220:	f000 f966 	bl	800f4f0 <sen5x_read_data_ready>
      if (data_ready) {
 800f224:	1dfb      	adds	r3, r7, #7
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d038      	beq.n	800f29e <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f22c:	f003 fc10 	bl	8012a50 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f230:	4b5e      	ldr	r3, [pc, #376]	@ (800f3ac <sen5x_statemachine+0x28c>)
 800f232:	0018      	movs	r0, r3
 800f234:	f7ff fc70 	bl	800eb18 <sen5x_read_measurement>
 800f238:	1e03      	subs	r3, r0, #0
 800f23a:	d017      	beq.n	800f26c <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f23c:	4a5c      	ldr	r2, [pc, #368]	@ (800f3b0 <sen5x_statemachine+0x290>)
 800f23e:	4b52      	ldr	r3, [pc, #328]	@ (800f388 <sen5x_statemachine+0x268>)
 800f240:	0019      	movs	r1, r3
 800f242:	2001      	movs	r0, #1
 800f244:	f004 fdf0 	bl	8013e28 <CreateLine>
          sen5xErrors++;
 800f248:	4b52      	ldr	r3, [pc, #328]	@ (800f394 <sen5x_statemachine+0x274>)
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	4b50      	ldr	r3, [pc, #320]	@ (800f394 <sen5x_statemachine+0x274>)
 800f252:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f254:	f7ff fa56 	bl	800e704 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f258:	f005 fb5e 	bl	8014918 <HAL_GetTick>
 800f25c:	0003      	movs	r3, r0
 800f25e:	4a4c      	ldr	r2, [pc, #304]	@ (800f390 <sen5x_statemachine+0x270>)
 800f260:	189a      	adds	r2, r3, r2
 800f262:	4b45      	ldr	r3, [pc, #276]	@ (800f378 <sen5x_statemachine+0x258>)
 800f264:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f266:	4b45      	ldr	r3, [pc, #276]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f268:	2205      	movs	r2, #5
 800f26a:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f26c:	4b51      	ldr	r3, [pc, #324]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	3301      	adds	r3, #1
 800f272:	b2da      	uxtb	r2, r3
 800f274:	4b4f      	ldr	r3, [pc, #316]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f276:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f278:	4b4e      	ldr	r3, [pc, #312]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	2b1f      	cmp	r3, #31
 800f27e:	d102      	bne.n	800f286 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f280:	4b4c      	ldr	r3, [pc, #304]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f286:	4b4b      	ldr	r3, [pc, #300]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d901      	bls.n	800f292 <sen5x_statemachine+0x172>
          sen5xStore();
 800f28e:	f7ff fd9d 	bl	800edcc <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f292:	4b48      	ldr	r3, [pc, #288]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b02      	cmp	r3, #2
 800f298:	d101      	bne.n	800f29e <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f29a:	f7ff fc99 	bl	800ebd0 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f29e:	4b46      	ldr	r3, [pc, #280]	@ (800f3b8 <sen5x_statemachine+0x298>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d103      	bne.n	800f2ae <sen5x_statemachine+0x18e>
 800f2a6:	4b43      	ldr	r3, [pc, #268]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d95e      	bls.n	800f36c <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f2ae:	4b33      	ldr	r3, [pc, #204]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f2b0:	2204      	movs	r2, #4
 800f2b2:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f2b4:	e05a      	b.n	800f36c <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f2b6:	4b41      	ldr	r3, [pc, #260]	@ (800f3bc <sen5x_statemachine+0x29c>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d11e      	bne.n	800f2fc <sen5x_statemachine+0x1dc>
 800f2be:	4b40      	ldr	r3, [pc, #256]	@ (800f3c0 <sen5x_statemachine+0x2a0>)
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d11a      	bne.n	800f2fc <sen5x_statemachine+0x1dc>
 800f2c6:	4b3f      	ldr	r3, [pc, #252]	@ (800f3c4 <sen5x_statemachine+0x2a4>)
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	4053      	eors	r3, r2
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d013      	beq.n	800f2fc <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f2d4:	f000 f9f2 	bl	800f6bc <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f2d8:	4a3b      	ldr	r2, [pc, #236]	@ (800f3c8 <sen5x_statemachine+0x2a8>)
 800f2da:	4b31      	ldr	r3, [pc, #196]	@ (800f3a0 <sen5x_statemachine+0x280>)
 800f2dc:	0019      	movs	r1, r3
 800f2de:	2002      	movs	r0, #2
 800f2e0:	f004 fda2 	bl	8013e28 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f2e4:	f005 fb18 	bl	8014918 <HAL_GetTick>
 800f2e8:	0003      	movs	r3, r0
 800f2ea:	4a38      	ldr	r2, [pc, #224]	@ (800f3cc <sen5x_statemachine+0x2ac>)
 800f2ec:	189a      	adds	r2, r3, r2
 800f2ee:	4b22      	ldr	r3, [pc, #136]	@ (800f378 <sen5x_statemachine+0x258>)
 800f2f0:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f2f2:	4b34      	ldr	r3, [pc, #208]	@ (800f3c4 <sen5x_statemachine+0x2a4>)
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f2f8:	f7ff fb68 	bl	800e9cc <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f2fc:	4b1f      	ldr	r3, [pc, #124]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f2fe:	2205      	movs	r2, #5
 800f300:	701a      	strb	r2, [r3, #0]
      break;
 800f302:	e034      	b.n	800f36e <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f304:	4b2c      	ldr	r3, [pc, #176]	@ (800f3b8 <sen5x_statemachine+0x298>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	2201      	movs	r2, #1
 800f30a:	4053      	eors	r3, r2
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d01c      	beq.n	800f34c <sen5x_statemachine+0x22c>
 800f312:	4b2f      	ldr	r3, [pc, #188]	@ (800f3d0 <sen5x_statemachine+0x2b0>)
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	2201      	movs	r2, #1
 800f318:	4053      	eors	r3, r2
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d015      	beq.n	800f34c <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f320:	f7ff fba0 	bl	800ea64 <sen5x_extinguish_measurement>
 800f324:	1e03      	subs	r3, r0, #0
 800f326:	d005      	beq.n	800f334 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f328:	4a2a      	ldr	r2, [pc, #168]	@ (800f3d4 <sen5x_statemachine+0x2b4>)
 800f32a:	4b17      	ldr	r3, [pc, #92]	@ (800f388 <sen5x_statemachine+0x268>)
 800f32c:	0019      	movs	r1, r3
 800f32e:	2001      	movs	r0, #1
 800f330:	f004 fd7a 	bl	8013e28 <CreateLine>
        }
        sen5xSamples = 0;
 800f334:	4b1f      	ldr	r3, [pc, #124]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f336:	2200      	movs	r2, #0
 800f338:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f33a:	f7ff f9e3 	bl	800e704 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f33e:	2000      	movs	r0, #0
 800f340:	f7fe f8f6 	bl	800d530 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f344:	4b0d      	ldr	r3, [pc, #52]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f346:	2201      	movs	r2, #1
 800f348:	701a      	strb	r2, [r3, #0]
 800f34a:	e002      	b.n	800f352 <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f34c:	4b0b      	ldr	r3, [pc, #44]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f34e:	2203      	movs	r2, #3
 800f350:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f352:	f003 fba3 	bl	8012a9c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f356:	f005 fadf 	bl	8014918 <HAL_GetTick>
 800f35a:	0003      	movs	r3, r0
 800f35c:	22fa      	movs	r2, #250	@ 0xfa
 800f35e:	0092      	lsls	r2, r2, #2
 800f360:	189a      	adds	r2, r3, r2
 800f362:	4b05      	ldr	r3, [pc, #20]	@ (800f378 <sen5x_statemachine+0x258>)
 800f364:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f366:	e002      	b.n	800f36e <sen5x_statemachine+0x24e>
      break;
 800f368:	46c0      	nop			@ (mov r8, r8)
 800f36a:	e000      	b.n	800f36e <sen5x_statemachine+0x24e>
      break;
 800f36c:	46c0      	nop			@ (mov r8, r8)
}
 800f36e:	46c0      	nop			@ (mov r8, r8)
 800f370:	46bd      	mov	sp, r7
 800f372:	b002      	add	sp, #8
 800f374:	bd80      	pop	{r7, pc}
 800f376:	46c0      	nop			@ (mov r8, r8)
 800f378:	200011d0 	.word	0x200011d0
 800f37c:	200000aa 	.word	0x200000aa
 800f380:	0802e400 	.word	0x0802e400
 800f384:	0802d5f8 	.word	0x0802d5f8
 800f388:	0802cff8 	.word	0x0802cff8
 800f38c:	0004cb2f 	.word	0x0004cb2f
 800f390:	00005910 	.word	0x00005910
 800f394:	200011cd 	.word	0x200011cd
 800f398:	0802d628 	.word	0x0802d628
 800f39c:	0802d640 	.word	0x0802d640
 800f3a0:	0802cf8c 	.word	0x0802cf8c
 800f3a4:	0802d658 	.word	0x0802d658
 800f3a8:	0802cfcc 	.word	0x0802cfcc
 800f3ac:	200011d4 	.word	0x200011d4
 800f3b0:	0802d66c 	.word	0x0802d66c
 800f3b4:	200011cc 	.word	0x200011cc
 800f3b8:	20002151 	.word	0x20002151
 800f3bc:	20000e43 	.word	0x20000e43
 800f3c0:	20000e42 	.word	0x20000e42
 800f3c4:	200011c0 	.word	0x200011c0
 800f3c8:	0802d69c 	.word	0x0802d69c
 800f3cc:	00002710 	.word	0x00002710
 800f3d0:	20002152 	.word	0x20002152
 800f3d4:	0802d6b4 	.word	0x0802d6b4

0800f3d8 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f3d8:	b590      	push	{r4, r7, lr}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f3de:	1dbb      	adds	r3, r7, #6
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f3e4:	1dbc      	adds	r4, r7, #6
 800f3e6:	1dbb      	adds	r3, r7, #6
 800f3e8:	8819      	ldrh	r1, [r3, #0]
 800f3ea:	003b      	movs	r3, r7
 800f3ec:	2221      	movs	r2, #33	@ 0x21
 800f3ee:	0018      	movs	r0, r3
 800f3f0:	f001 fb57 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f3f4:	0003      	movs	r3, r0
 800f3f6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f3f8:	1d3c      	adds	r4, r7, #4
 800f3fa:	1dbb      	adds	r3, r7, #6
 800f3fc:	881a      	ldrh	r2, [r3, #0]
 800f3fe:	003b      	movs	r3, r7
 800f400:	0019      	movs	r1, r3
 800f402:	2069      	movs	r0, #105	@ 0x69
 800f404:	f001 fbd1 	bl	8010baa <sensirion_i2c_write_data>
 800f408:	0003      	movs	r3, r0
 800f40a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f40c:	1d3b      	adds	r3, r7, #4
 800f40e:	2200      	movs	r2, #0
 800f410:	5e9b      	ldrsh	r3, [r3, r2]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d003      	beq.n	800f41e <sen5x_start_measurement+0x46>
        return error;
 800f416:	1d3b      	adds	r3, r7, #4
 800f418:	2200      	movs	r2, #0
 800f41a:	5e9b      	ldrsh	r3, [r3, r2]
 800f41c:	e004      	b.n	800f428 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f41e:	4b04      	ldr	r3, [pc, #16]	@ (800f430 <sen5x_start_measurement+0x58>)
 800f420:	0018      	movs	r0, r3
 800f422:	f7ff fda5 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f426:	2300      	movs	r3, #0
}
 800f428:	0018      	movs	r0, r3
 800f42a:	46bd      	mov	sp, r7
 800f42c:	b003      	add	sp, #12
 800f42e:	bd90      	pop	{r4, r7, pc}
 800f430:	0000c350 	.word	0x0000c350

0800f434 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f434:	b590      	push	{r4, r7, lr}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f43a:	1dbb      	adds	r3, r7, #6
 800f43c:	2200      	movs	r2, #0
 800f43e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f440:	1dbc      	adds	r4, r7, #6
 800f442:	1dbb      	adds	r3, r7, #6
 800f444:	8819      	ldrh	r1, [r3, #0]
 800f446:	003b      	movs	r3, r7
 800f448:	2237      	movs	r2, #55	@ 0x37
 800f44a:	0018      	movs	r0, r3
 800f44c:	f001 fb29 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f450:	0003      	movs	r3, r0
 800f452:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f454:	1d3c      	adds	r4, r7, #4
 800f456:	1dbb      	adds	r3, r7, #6
 800f458:	881a      	ldrh	r2, [r3, #0]
 800f45a:	003b      	movs	r3, r7
 800f45c:	0019      	movs	r1, r3
 800f45e:	2069      	movs	r0, #105	@ 0x69
 800f460:	f001 fba3 	bl	8010baa <sensirion_i2c_write_data>
 800f464:	0003      	movs	r3, r0
 800f466:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f468:	1d3b      	adds	r3, r7, #4
 800f46a:	2200      	movs	r2, #0
 800f46c:	5e9b      	ldrsh	r3, [r3, r2]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d003      	beq.n	800f47a <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f472:	1d3b      	adds	r3, r7, #4
 800f474:	2200      	movs	r2, #0
 800f476:	5e9b      	ldrsh	r3, [r3, r2]
 800f478:	e004      	b.n	800f484 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f47a:	4b04      	ldr	r3, [pc, #16]	@ (800f48c <sen5x_start_measurement_without_pm+0x58>)
 800f47c:	0018      	movs	r0, r3
 800f47e:	f7ff fd77 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f482:	2300      	movs	r3, #0
}
 800f484:	0018      	movs	r0, r3
 800f486:	46bd      	mov	sp, r7
 800f488:	b003      	add	sp, #12
 800f48a:	bd90      	pop	{r4, r7, pc}
 800f48c:	0000c350 	.word	0x0000c350

0800f490 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f490:	b590      	push	{r4, r7, lr}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f496:	1dbb      	adds	r3, r7, #6
 800f498:	2200      	movs	r2, #0
 800f49a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f49c:	1dbc      	adds	r4, r7, #6
 800f49e:	2382      	movs	r3, #130	@ 0x82
 800f4a0:	005a      	lsls	r2, r3, #1
 800f4a2:	1dbb      	adds	r3, r7, #6
 800f4a4:	8819      	ldrh	r1, [r3, #0]
 800f4a6:	003b      	movs	r3, r7
 800f4a8:	0018      	movs	r0, r3
 800f4aa:	f001 fafa 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f4ae:	0003      	movs	r3, r0
 800f4b0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4b2:	1d3c      	adds	r4, r7, #4
 800f4b4:	1dbb      	adds	r3, r7, #6
 800f4b6:	881a      	ldrh	r2, [r3, #0]
 800f4b8:	003b      	movs	r3, r7
 800f4ba:	0019      	movs	r1, r3
 800f4bc:	2069      	movs	r0, #105	@ 0x69
 800f4be:	f001 fb74 	bl	8010baa <sensirion_i2c_write_data>
 800f4c2:	0003      	movs	r3, r0
 800f4c4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4c6:	1d3b      	adds	r3, r7, #4
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	5e9b      	ldrsh	r3, [r3, r2]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <sen5x_stop_measurement+0x48>
        return error;
 800f4d0:	1d3b      	adds	r3, r7, #4
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	5e9b      	ldrsh	r3, [r3, r2]
 800f4d6:	e004      	b.n	800f4e2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f4d8:	4b04      	ldr	r3, [pc, #16]	@ (800f4ec <sen5x_stop_measurement+0x5c>)
 800f4da:	0018      	movs	r0, r3
 800f4dc:	f7ff fd48 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	b003      	add	sp, #12
 800f4e8:	bd90      	pop	{r4, r7, pc}
 800f4ea:	46c0      	nop			@ (mov r8, r8)
 800f4ec:	00030d40 	.word	0x00030d40

0800f4f0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f4f8:	250e      	movs	r5, #14
 800f4fa:	197b      	adds	r3, r7, r5
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f500:	197c      	adds	r4, r7, r5
 800f502:	4a22      	ldr	r2, [pc, #136]	@ (800f58c <sen5x_read_data_ready+0x9c>)
 800f504:	197b      	adds	r3, r7, r5
 800f506:	8819      	ldrh	r1, [r3, #0]
 800f508:	2308      	movs	r3, #8
 800f50a:	18fb      	adds	r3, r7, r3
 800f50c:	0018      	movs	r0, r3
 800f50e:	f001 fac8 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f512:	0003      	movs	r3, r0
 800f514:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f516:	260c      	movs	r6, #12
 800f518:	19bc      	adds	r4, r7, r6
 800f51a:	197b      	adds	r3, r7, r5
 800f51c:	881a      	ldrh	r2, [r3, #0]
 800f51e:	2308      	movs	r3, #8
 800f520:	18fb      	adds	r3, r7, r3
 800f522:	0019      	movs	r1, r3
 800f524:	2069      	movs	r0, #105	@ 0x69
 800f526:	f001 fb40 	bl	8010baa <sensirion_i2c_write_data>
 800f52a:	0003      	movs	r3, r0
 800f52c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f52e:	19bb      	adds	r3, r7, r6
 800f530:	2200      	movs	r2, #0
 800f532:	5e9b      	ldrsh	r3, [r3, r2]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <sen5x_read_data_ready+0x50>
        return error;
 800f538:	19bb      	adds	r3, r7, r6
 800f53a:	2200      	movs	r2, #0
 800f53c:	5e9b      	ldrsh	r3, [r3, r2]
 800f53e:	e020      	b.n	800f582 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f540:	4b13      	ldr	r3, [pc, #76]	@ (800f590 <sen5x_read_data_ready+0xa0>)
 800f542:	0018      	movs	r0, r3
 800f544:	f7ff fd14 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f548:	250c      	movs	r5, #12
 800f54a:	197c      	adds	r4, r7, r5
 800f54c:	2308      	movs	r3, #8
 800f54e:	18fb      	adds	r3, r7, r3
 800f550:	2202      	movs	r2, #2
 800f552:	0019      	movs	r1, r3
 800f554:	2069      	movs	r0, #105	@ 0x69
 800f556:	f001 fb40 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f55a:	0003      	movs	r3, r0
 800f55c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f55e:	197b      	adds	r3, r7, r5
 800f560:	2200      	movs	r2, #0
 800f562:	5e9b      	ldrsh	r3, [r3, r2]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <sen5x_read_data_ready+0x80>
        return error;
 800f568:	197b      	adds	r3, r7, r5
 800f56a:	2200      	movs	r2, #0
 800f56c:	5e9b      	ldrsh	r3, [r3, r2]
 800f56e:	e008      	b.n	800f582 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f570:	2308      	movs	r3, #8
 800f572:	18fb      	adds	r3, r7, r3
 800f574:	785b      	ldrb	r3, [r3, #1]
 800f576:	1e5a      	subs	r2, r3, #1
 800f578:	4193      	sbcs	r3, r2
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f580:	2300      	movs	r3, #0
}
 800f582:	0018      	movs	r0, r3
 800f584:	46bd      	mov	sp, r7
 800f586:	b005      	add	sp, #20
 800f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58a:	46c0      	nop			@ (mov r8, r8)
 800f58c:	00000202 	.word	0x00000202
 800f590:	00004e20 	.word	0x00004e20

0800f594 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f596:	b08d      	sub	sp, #52	@ 0x34
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f5a2:	252e      	movs	r5, #46	@ 0x2e
 800f5a4:	197b      	adds	r3, r7, r5
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f5aa:	197c      	adds	r4, r7, r5
 800f5ac:	23f1      	movs	r3, #241	@ 0xf1
 800f5ae:	009a      	lsls	r2, r3, #2
 800f5b0:	197b      	adds	r3, r7, r5
 800f5b2:	8819      	ldrh	r1, [r3, #0]
 800f5b4:	2314      	movs	r3, #20
 800f5b6:	18fb      	adds	r3, r7, r3
 800f5b8:	0018      	movs	r0, r3
 800f5ba:	f001 fa72 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f5be:	0003      	movs	r3, r0
 800f5c0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f5c2:	262c      	movs	r6, #44	@ 0x2c
 800f5c4:	19bc      	adds	r4, r7, r6
 800f5c6:	197b      	adds	r3, r7, r5
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	2314      	movs	r3, #20
 800f5cc:	18fb      	adds	r3, r7, r3
 800f5ce:	0019      	movs	r1, r3
 800f5d0:	2069      	movs	r0, #105	@ 0x69
 800f5d2:	f001 faea 	bl	8010baa <sensirion_i2c_write_data>
 800f5d6:	0003      	movs	r3, r0
 800f5d8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5da:	19bb      	adds	r3, r7, r6
 800f5dc:	2200      	movs	r2, #0
 800f5de:	5e9b      	ldrsh	r3, [r3, r2]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d003      	beq.n	800f5ec <sen5x_read_measured_values+0x58>
        return error;
 800f5e4:	19bb      	adds	r3, r7, r6
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	5e9b      	ldrsh	r3, [r3, r2]
 800f5ea:	e060      	b.n	800f6ae <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f5ec:	4b32      	ldr	r3, [pc, #200]	@ (800f6b8 <sen5x_read_measured_values+0x124>)
 800f5ee:	0018      	movs	r0, r3
 800f5f0:	f7ff fcbe 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f5f4:	252c      	movs	r5, #44	@ 0x2c
 800f5f6:	197c      	adds	r4, r7, r5
 800f5f8:	2314      	movs	r3, #20
 800f5fa:	18fb      	adds	r3, r7, r3
 800f5fc:	2210      	movs	r2, #16
 800f5fe:	0019      	movs	r1, r3
 800f600:	2069      	movs	r0, #105	@ 0x69
 800f602:	f001 faea 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f606:	0003      	movs	r3, r0
 800f608:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f60a:	197b      	adds	r3, r7, r5
 800f60c:	2200      	movs	r2, #0
 800f60e:	5e9b      	ldrsh	r3, [r3, r2]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d003      	beq.n	800f61c <sen5x_read_measured_values+0x88>
        return error;
 800f614:	197b      	adds	r3, r7, r5
 800f616:	2200      	movs	r2, #0
 800f618:	5e9b      	ldrsh	r3, [r3, r2]
 800f61a:	e048      	b.n	800f6ae <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f61c:	2414      	movs	r4, #20
 800f61e:	193b      	adds	r3, r7, r4
 800f620:	0018      	movs	r0, r3
 800f622:	f000 fa79 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f626:	0003      	movs	r3, r0
 800f628:	001a      	movs	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f62e:	193b      	adds	r3, r7, r4
 800f630:	3302      	adds	r3, #2
 800f632:	0018      	movs	r0, r3
 800f634:	f000 fa70 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f638:	0003      	movs	r3, r0
 800f63a:	001a      	movs	r2, r3
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f640:	193b      	adds	r3, r7, r4
 800f642:	3304      	adds	r3, #4
 800f644:	0018      	movs	r0, r3
 800f646:	f000 fa67 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f64a:	0003      	movs	r3, r0
 800f64c:	001a      	movs	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f652:	193b      	adds	r3, r7, r4
 800f654:	3306      	adds	r3, #6
 800f656:	0018      	movs	r0, r3
 800f658:	f000 fa5e 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f65c:	0003      	movs	r3, r0
 800f65e:	001a      	movs	r2, r3
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f664:	193b      	adds	r3, r7, r4
 800f666:	3308      	adds	r3, #8
 800f668:	0018      	movs	r0, r3
 800f66a:	f000 fa82 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f66e:	0003      	movs	r3, r0
 800f670:	001a      	movs	r2, r3
 800f672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f674:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f676:	193b      	adds	r3, r7, r4
 800f678:	330a      	adds	r3, #10
 800f67a:	0018      	movs	r0, r3
 800f67c:	f000 fa79 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f680:	0003      	movs	r3, r0
 800f682:	001a      	movs	r2, r3
 800f684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f686:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f688:	193b      	adds	r3, r7, r4
 800f68a:	330c      	adds	r3, #12
 800f68c:	0018      	movs	r0, r3
 800f68e:	f000 fa70 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f692:	0003      	movs	r3, r0
 800f694:	001a      	movs	r2, r3
 800f696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f698:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f69a:	193b      	adds	r3, r7, r4
 800f69c:	330e      	adds	r3, #14
 800f69e:	0018      	movs	r0, r3
 800f6a0:	f000 fa67 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f6a4:	0003      	movs	r3, r0
 800f6a6:	001a      	movs	r2, r3
 800f6a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6aa:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f6ac:	2300      	movs	r3, #0
}
 800f6ae:	0018      	movs	r0, r3
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	b00d      	add	sp, #52	@ 0x34
 800f6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b6:	46c0      	nop			@ (mov r8, r8)
 800f6b8:	00004e20 	.word	0x00004e20

0800f6bc <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f6bc:	b590      	push	{r4, r7, lr}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f6c2:	1dbb      	adds	r3, r7, #6
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f6c8:	1dbc      	adds	r4, r7, #6
 800f6ca:	4a12      	ldr	r2, [pc, #72]	@ (800f714 <sen5x_start_fan_cleaning+0x58>)
 800f6cc:	1dbb      	adds	r3, r7, #6
 800f6ce:	8819      	ldrh	r1, [r3, #0]
 800f6d0:	003b      	movs	r3, r7
 800f6d2:	0018      	movs	r0, r3
 800f6d4:	f001 f9e5 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f6d8:	0003      	movs	r3, r0
 800f6da:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f6dc:	1d3c      	adds	r4, r7, #4
 800f6de:	1dbb      	adds	r3, r7, #6
 800f6e0:	881a      	ldrh	r2, [r3, #0]
 800f6e2:	003b      	movs	r3, r7
 800f6e4:	0019      	movs	r1, r3
 800f6e6:	2069      	movs	r0, #105	@ 0x69
 800f6e8:	f001 fa5f 	bl	8010baa <sensirion_i2c_write_data>
 800f6ec:	0003      	movs	r3, r0
 800f6ee:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6f0:	1d3b      	adds	r3, r7, #4
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	5e9b      	ldrsh	r3, [r3, r2]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <sen5x_start_fan_cleaning+0x46>
        return error;
 800f6fa:	1d3b      	adds	r3, r7, #4
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	5e9b      	ldrsh	r3, [r3, r2]
 800f700:	e004      	b.n	800f70c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f702:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <sen5x_start_fan_cleaning+0x5c>)
 800f704:	0018      	movs	r0, r3
 800f706:	f7ff fc33 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	0018      	movs	r0, r3
 800f70e:	46bd      	mov	sp, r7
 800f710:	b003      	add	sp, #12
 800f712:	bd90      	pop	{r4, r7, pc}
 800f714:	00005607 	.word	0x00005607
 800f718:	00004e20 	.word	0x00004e20

0800f71c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71e:	b087      	sub	sp, #28
 800f720:	af00      	add	r7, sp, #0
 800f722:	0004      	movs	r4, r0
 800f724:	0008      	movs	r0, r1
 800f726:	0011      	movs	r1, r2
 800f728:	1dbb      	adds	r3, r7, #6
 800f72a:	1c22      	adds	r2, r4, #0
 800f72c:	801a      	strh	r2, [r3, #0]
 800f72e:	1d3b      	adds	r3, r7, #4
 800f730:	1c02      	adds	r2, r0, #0
 800f732:	801a      	strh	r2, [r3, #0]
 800f734:	1cbb      	adds	r3, r7, #2
 800f736:	1c0a      	adds	r2, r1, #0
 800f738:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f73a:	2516      	movs	r5, #22
 800f73c:	197b      	adds	r3, r7, r5
 800f73e:	2200      	movs	r2, #0
 800f740:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f742:	197c      	adds	r4, r7, r5
 800f744:	4a25      	ldr	r2, [pc, #148]	@ (800f7dc <sen5x_set_temperature_offset_parameters+0xc0>)
 800f746:	197b      	adds	r3, r7, r5
 800f748:	8819      	ldrh	r1, [r3, #0]
 800f74a:	2608      	movs	r6, #8
 800f74c:	19bb      	adds	r3, r7, r6
 800f74e:	0018      	movs	r0, r3
 800f750:	f001 f9a7 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f754:	0003      	movs	r3, r0
 800f756:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f758:	197c      	adds	r4, r7, r5
 800f75a:	1dbb      	adds	r3, r7, #6
 800f75c:	2200      	movs	r2, #0
 800f75e:	5e9a      	ldrsh	r2, [r3, r2]
 800f760:	197b      	adds	r3, r7, r5
 800f762:	8819      	ldrh	r1, [r3, #0]
 800f764:	19bb      	adds	r3, r7, r6
 800f766:	0018      	movs	r0, r3
 800f768:	f001 fa06 	bl	8010b78 <sensirion_i2c_add_int16_t_to_buffer>
 800f76c:	0003      	movs	r3, r0
 800f76e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f770:	197c      	adds	r4, r7, r5
 800f772:	1d3b      	adds	r3, r7, #4
 800f774:	2200      	movs	r2, #0
 800f776:	5e9a      	ldrsh	r2, [r3, r2]
 800f778:	197b      	adds	r3, r7, r5
 800f77a:	8819      	ldrh	r1, [r3, #0]
 800f77c:	19bb      	adds	r3, r7, r6
 800f77e:	0018      	movs	r0, r3
 800f780:	f001 f9fa 	bl	8010b78 <sensirion_i2c_add_int16_t_to_buffer>
 800f784:	0003      	movs	r3, r0
 800f786:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f788:	197c      	adds	r4, r7, r5
 800f78a:	1cbb      	adds	r3, r7, #2
 800f78c:	881a      	ldrh	r2, [r3, #0]
 800f78e:	197b      	adds	r3, r7, r5
 800f790:	8819      	ldrh	r1, [r3, #0]
 800f792:	19bb      	adds	r3, r7, r6
 800f794:	0018      	movs	r0, r3
 800f796:	f001 f9b0 	bl	8010afa <sensirion_i2c_add_uint16_t_to_buffer>
 800f79a:	0003      	movs	r3, r0
 800f79c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f79e:	2214      	movs	r2, #20
 800f7a0:	18bc      	adds	r4, r7, r2
 800f7a2:	197b      	adds	r3, r7, r5
 800f7a4:	881a      	ldrh	r2, [r3, #0]
 800f7a6:	19bb      	adds	r3, r7, r6
 800f7a8:	0019      	movs	r1, r3
 800f7aa:	2069      	movs	r0, #105	@ 0x69
 800f7ac:	f001 f9fd 	bl	8010baa <sensirion_i2c_write_data>
 800f7b0:	0003      	movs	r3, r0
 800f7b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7b4:	2214      	movs	r2, #20
 800f7b6:	18bb      	adds	r3, r7, r2
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	5e5b      	ldrsh	r3, [r3, r1]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d003      	beq.n	800f7c8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f7c0:	18bb      	adds	r3, r7, r2
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f7c6:	e004      	b.n	800f7d2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f7c8:	4b05      	ldr	r3, [pc, #20]	@ (800f7e0 <sen5x_set_temperature_offset_parameters+0xc4>)
 800f7ca:	0018      	movs	r0, r3
 800f7cc:	f7ff fbd0 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	b007      	add	sp, #28
 800f7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7da:	46c0      	nop			@ (mov r8, r8)
 800f7dc:	000060b2 	.word	0x000060b2
 800f7e0:	00004e20 	.word	0x00004e20

0800f7e4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7e6:	b091      	sub	sp, #68	@ 0x44
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	000a      	movs	r2, r1
 800f7ee:	1cfb      	adds	r3, r7, #3
 800f7f0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f7f2:	253e      	movs	r5, #62	@ 0x3e
 800f7f4:	197b      	adds	r3, r7, r5
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f7fa:	197c      	adds	r4, r7, r5
 800f7fc:	4a22      	ldr	r2, [pc, #136]	@ (800f888 <sen5x_get_product_name+0xa4>)
 800f7fe:	197b      	adds	r3, r7, r5
 800f800:	8819      	ldrh	r1, [r3, #0]
 800f802:	230c      	movs	r3, #12
 800f804:	18fb      	adds	r3, r7, r3
 800f806:	0018      	movs	r0, r3
 800f808:	f001 f94b 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f80c:	0003      	movs	r3, r0
 800f80e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f810:	263c      	movs	r6, #60	@ 0x3c
 800f812:	19bc      	adds	r4, r7, r6
 800f814:	197b      	adds	r3, r7, r5
 800f816:	881a      	ldrh	r2, [r3, #0]
 800f818:	230c      	movs	r3, #12
 800f81a:	18fb      	adds	r3, r7, r3
 800f81c:	0019      	movs	r1, r3
 800f81e:	2069      	movs	r0, #105	@ 0x69
 800f820:	f001 f9c3 	bl	8010baa <sensirion_i2c_write_data>
 800f824:	0003      	movs	r3, r0
 800f826:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f828:	19bb      	adds	r3, r7, r6
 800f82a:	2200      	movs	r2, #0
 800f82c:	5e9b      	ldrsh	r3, [r3, r2]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d003      	beq.n	800f83a <sen5x_get_product_name+0x56>
        return error;
 800f832:	19bb      	adds	r3, r7, r6
 800f834:	2200      	movs	r2, #0
 800f836:	5e9b      	ldrsh	r3, [r3, r2]
 800f838:	e021      	b.n	800f87e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f83a:	4b14      	ldr	r3, [pc, #80]	@ (800f88c <sen5x_get_product_name+0xa8>)
 800f83c:	0018      	movs	r0, r3
 800f83e:	f7ff fb97 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f842:	253c      	movs	r5, #60	@ 0x3c
 800f844:	197c      	adds	r4, r7, r5
 800f846:	230c      	movs	r3, #12
 800f848:	18fb      	adds	r3, r7, r3
 800f84a:	2220      	movs	r2, #32
 800f84c:	0019      	movs	r1, r3
 800f84e:	2069      	movs	r0, #105	@ 0x69
 800f850:	f001 f9c3 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f854:	0003      	movs	r3, r0
 800f856:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f858:	197b      	adds	r3, r7, r5
 800f85a:	2200      	movs	r2, #0
 800f85c:	5e9b      	ldrsh	r3, [r3, r2]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <sen5x_get_product_name+0x86>
        return error;
 800f862:	197b      	adds	r3, r7, r5
 800f864:	2200      	movs	r2, #0
 800f866:	5e9b      	ldrsh	r3, [r3, r2]
 800f868:	e009      	b.n	800f87e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f86a:	1cfb      	adds	r3, r7, #3
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	b29a      	uxth	r2, r3
 800f870:	6879      	ldr	r1, [r7, #4]
 800f872:	230c      	movs	r3, #12
 800f874:	18fb      	adds	r3, r7, r3
 800f876:	0018      	movs	r0, r3
 800f878:	f000 f989 	bl	800fb8e <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	0018      	movs	r0, r3
 800f880:	46bd      	mov	sp, r7
 800f882:	b011      	add	sp, #68	@ 0x44
 800f884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f886:	46c0      	nop			@ (mov r8, r8)
 800f888:	0000d014 	.word	0x0000d014
 800f88c:	0000c350 	.word	0x0000c350

0800f890 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f892:	b091      	sub	sp, #68	@ 0x44
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	000a      	movs	r2, r1
 800f89a:	1cfb      	adds	r3, r7, #3
 800f89c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f89e:	253e      	movs	r5, #62	@ 0x3e
 800f8a0:	197b      	adds	r3, r7, r5
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f8a6:	197c      	adds	r4, r7, r5
 800f8a8:	4a22      	ldr	r2, [pc, #136]	@ (800f934 <sen5x_get_serial_number+0xa4>)
 800f8aa:	197b      	adds	r3, r7, r5
 800f8ac:	8819      	ldrh	r1, [r3, #0]
 800f8ae:	230c      	movs	r3, #12
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	0018      	movs	r0, r3
 800f8b4:	f001 f8f5 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f8b8:	0003      	movs	r3, r0
 800f8ba:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f8bc:	263c      	movs	r6, #60	@ 0x3c
 800f8be:	19bc      	adds	r4, r7, r6
 800f8c0:	197b      	adds	r3, r7, r5
 800f8c2:	881a      	ldrh	r2, [r3, #0]
 800f8c4:	230c      	movs	r3, #12
 800f8c6:	18fb      	adds	r3, r7, r3
 800f8c8:	0019      	movs	r1, r3
 800f8ca:	2069      	movs	r0, #105	@ 0x69
 800f8cc:	f001 f96d 	bl	8010baa <sensirion_i2c_write_data>
 800f8d0:	0003      	movs	r3, r0
 800f8d2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8d4:	19bb      	adds	r3, r7, r6
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	5e9b      	ldrsh	r3, [r3, r2]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <sen5x_get_serial_number+0x56>
        return error;
 800f8de:	19bb      	adds	r3, r7, r6
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	5e9b      	ldrsh	r3, [r3, r2]
 800f8e4:	e021      	b.n	800f92a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f8e6:	4b14      	ldr	r3, [pc, #80]	@ (800f938 <sen5x_get_serial_number+0xa8>)
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	f7ff fb41 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f8ee:	253c      	movs	r5, #60	@ 0x3c
 800f8f0:	197c      	adds	r4, r7, r5
 800f8f2:	230c      	movs	r3, #12
 800f8f4:	18fb      	adds	r3, r7, r3
 800f8f6:	2220      	movs	r2, #32
 800f8f8:	0019      	movs	r1, r3
 800f8fa:	2069      	movs	r0, #105	@ 0x69
 800f8fc:	f001 f96d 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f900:	0003      	movs	r3, r0
 800f902:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f904:	197b      	adds	r3, r7, r5
 800f906:	2200      	movs	r2, #0
 800f908:	5e9b      	ldrsh	r3, [r3, r2]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <sen5x_get_serial_number+0x86>
        return error;
 800f90e:	197b      	adds	r3, r7, r5
 800f910:	2200      	movs	r2, #0
 800f912:	5e9b      	ldrsh	r3, [r3, r2]
 800f914:	e009      	b.n	800f92a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f916:	1cfb      	adds	r3, r7, #3
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	230c      	movs	r3, #12
 800f920:	18fb      	adds	r3, r7, r3
 800f922:	0018      	movs	r0, r3
 800f924:	f000 f933 	bl	800fb8e <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	0018      	movs	r0, r3
 800f92c:	46bd      	mov	sp, r7
 800f92e:	b011      	add	sp, #68	@ 0x44
 800f930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f932:	46c0      	nop			@ (mov r8, r8)
 800f934:	0000d033 	.word	0x0000d033
 800f938:	0000c350 	.word	0x0000c350

0800f93c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800f93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f93e:	b089      	sub	sp, #36	@ 0x24
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800f94a:	251e      	movs	r5, #30
 800f94c:	197b      	adds	r3, r7, r5
 800f94e:	2200      	movs	r2, #0
 800f950:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800f952:	197c      	adds	r4, r7, r5
 800f954:	23d1      	movs	r3, #209	@ 0xd1
 800f956:	021a      	lsls	r2, r3, #8
 800f958:	197b      	adds	r3, r7, r5
 800f95a:	8819      	ldrh	r1, [r3, #0]
 800f95c:	2310      	movs	r3, #16
 800f95e:	18fb      	adds	r3, r7, r3
 800f960:	0018      	movs	r0, r3
 800f962:	f001 f89e 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f966:	0003      	movs	r3, r0
 800f968:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f96a:	261c      	movs	r6, #28
 800f96c:	19bc      	adds	r4, r7, r6
 800f96e:	197b      	adds	r3, r7, r5
 800f970:	881a      	ldrh	r2, [r3, #0]
 800f972:	2310      	movs	r3, #16
 800f974:	18fb      	adds	r3, r7, r3
 800f976:	0019      	movs	r1, r3
 800f978:	2069      	movs	r0, #105	@ 0x69
 800f97a:	f001 f916 	bl	8010baa <sensirion_i2c_write_data>
 800f97e:	0003      	movs	r3, r0
 800f980:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f982:	19bb      	adds	r3, r7, r6
 800f984:	2200      	movs	r2, #0
 800f986:	5e9b      	ldrsh	r3, [r3, r2]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d003      	beq.n	800f994 <sen5x_get_version+0x58>
        return error;
 800f98c:	19bb      	adds	r3, r7, r6
 800f98e:	2200      	movs	r2, #0
 800f990:	5e9b      	ldrsh	r3, [r3, r2]
 800f992:	e038      	b.n	800fa06 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f994:	4b1e      	ldr	r3, [pc, #120]	@ (800fa10 <sen5x_get_version+0xd4>)
 800f996:	0018      	movs	r0, r3
 800f998:	f7ff faea 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800f99c:	251c      	movs	r5, #28
 800f99e:	197c      	adds	r4, r7, r5
 800f9a0:	2310      	movs	r3, #16
 800f9a2:	18fb      	adds	r3, r7, r3
 800f9a4:	2208      	movs	r2, #8
 800f9a6:	0019      	movs	r1, r3
 800f9a8:	2069      	movs	r0, #105	@ 0x69
 800f9aa:	f001 f916 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f9ae:	0003      	movs	r3, r0
 800f9b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9b2:	197b      	adds	r3, r7, r5
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	5e9b      	ldrsh	r3, [r3, r2]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <sen5x_get_version+0x88>
        return error;
 800f9bc:	197b      	adds	r3, r7, r5
 800f9be:	2200      	movs	r2, #0
 800f9c0:	5e9b      	ldrsh	r3, [r3, r2]
 800f9c2:	e020      	b.n	800fa06 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800f9c4:	2110      	movs	r1, #16
 800f9c6:	187b      	adds	r3, r7, r1
 800f9c8:	781a      	ldrb	r2, [r3, #0]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800f9ce:	187b      	adds	r3, r7, r1
 800f9d0:	785a      	ldrb	r2, [r3, #1]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800f9d6:	187b      	adds	r3, r7, r1
 800f9d8:	789b      	ldrb	r3, [r3, #2]
 800f9da:	1e5a      	subs	r2, r3, #1
 800f9dc:	4193      	sbcs	r3, r2
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800f9e4:	187b      	adds	r3, r7, r1
 800f9e6:	78da      	ldrb	r2, [r3, #3]
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800f9ec:	187b      	adds	r3, r7, r1
 800f9ee:	791a      	ldrb	r2, [r3, #4]
 800f9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800f9f4:	187b      	adds	r3, r7, r1
 800f9f6:	795a      	ldrb	r2, [r3, #5]
 800f9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9fa:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800f9fc:	187b      	adds	r3, r7, r1
 800f9fe:	799a      	ldrb	r2, [r3, #6]
 800fa00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa02:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	0018      	movs	r0, r3
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	b009      	add	sp, #36	@ 0x24
 800fa0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa0e:	46c0      	nop			@ (mov r8, r8)
 800fa10:	00004e20 	.word	0x00004e20

0800fa14 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa16:	b087      	sub	sp, #28
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800fa1c:	2516      	movs	r5, #22
 800fa1e:	197b      	adds	r3, r7, r5
 800fa20:	2200      	movs	r2, #0
 800fa22:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800fa24:	197c      	adds	r4, r7, r5
 800fa26:	4a21      	ldr	r2, [pc, #132]	@ (800faac <sen5x_read_device_status+0x98>)
 800fa28:	197b      	adds	r3, r7, r5
 800fa2a:	8819      	ldrh	r1, [r3, #0]
 800fa2c:	260c      	movs	r6, #12
 800fa2e:	19bb      	adds	r3, r7, r6
 800fa30:	0018      	movs	r0, r3
 800fa32:	f001 f836 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800fa36:	0003      	movs	r3, r0
 800fa38:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa3a:	2314      	movs	r3, #20
 800fa3c:	18fc      	adds	r4, r7, r3
 800fa3e:	197b      	adds	r3, r7, r5
 800fa40:	881a      	ldrh	r2, [r3, #0]
 800fa42:	19bb      	adds	r3, r7, r6
 800fa44:	0019      	movs	r1, r3
 800fa46:	2069      	movs	r0, #105	@ 0x69
 800fa48:	f001 f8af 	bl	8010baa <sensirion_i2c_write_data>
 800fa4c:	0003      	movs	r3, r0
 800fa4e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa50:	2314      	movs	r3, #20
 800fa52:	18fb      	adds	r3, r7, r3
 800fa54:	2200      	movs	r2, #0
 800fa56:	5e9b      	ldrsh	r3, [r3, r2]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fa5c:	4b14      	ldr	r3, [pc, #80]	@ (800fab0 <sen5x_read_device_status+0x9c>)
 800fa5e:	e020      	b.n	800faa2 <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fa60:	4b14      	ldr	r3, [pc, #80]	@ (800fab4 <sen5x_read_device_status+0xa0>)
 800fa62:	0018      	movs	r0, r3
 800fa64:	f7ff fa84 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fa68:	2514      	movs	r5, #20
 800fa6a:	197c      	adds	r4, r7, r5
 800fa6c:	230c      	movs	r3, #12
 800fa6e:	18fb      	adds	r3, r7, r3
 800fa70:	2204      	movs	r2, #4
 800fa72:	0019      	movs	r1, r3
 800fa74:	2069      	movs	r0, #105	@ 0x69
 800fa76:	f001 f8b0 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800fa7a:	0003      	movs	r3, r0
 800fa7c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa7e:	197b      	adds	r3, r7, r5
 800fa80:	2200      	movs	r2, #0
 800fa82:	5e9b      	ldrsh	r3, [r3, r2]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d003      	beq.n	800fa90 <sen5x_read_device_status+0x7c>
        return error;
 800fa88:	197b      	adds	r3, r7, r5
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	5e9b      	ldrsh	r3, [r3, r2]
 800fa8e:	e008      	b.n	800faa2 <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fa90:	230c      	movs	r3, #12
 800fa92:	18fb      	adds	r3, r7, r3
 800fa94:	0018      	movs	r0, r3
 800fa96:	f000 f853 	bl	800fb40 <sensirion_common_bytes_to_uint32_t>
 800fa9a:	0002      	movs	r2, r0
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	0018      	movs	r0, r3
 800faa4:	46bd      	mov	sp, r7
 800faa6:	b007      	add	sp, #28
 800faa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faaa:	46c0      	nop			@ (mov r8, r8)
 800faac:	0000d206 	.word	0x0000d206
 800fab0:	ffffd206 	.word	0xffffd206
 800fab4:	00004e20 	.word	0x00004e20

0800fab8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fab8:	b590      	push	{r4, r7, lr}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fabe:	1dbb      	adds	r3, r7, #6
 800fac0:	2200      	movs	r2, #0
 800fac2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fac4:	1dbc      	adds	r4, r7, #6
 800fac6:	4a12      	ldr	r2, [pc, #72]	@ (800fb10 <sen5x_device_reset+0x58>)
 800fac8:	1dbb      	adds	r3, r7, #6
 800faca:	8819      	ldrh	r1, [r3, #0]
 800facc:	003b      	movs	r3, r7
 800face:	0018      	movs	r0, r3
 800fad0:	f000 ffe7 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800fad4:	0003      	movs	r3, r0
 800fad6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fad8:	1d3c      	adds	r4, r7, #4
 800fada:	1dbb      	adds	r3, r7, #6
 800fadc:	881a      	ldrh	r2, [r3, #0]
 800fade:	003b      	movs	r3, r7
 800fae0:	0019      	movs	r1, r3
 800fae2:	2069      	movs	r0, #105	@ 0x69
 800fae4:	f001 f861 	bl	8010baa <sensirion_i2c_write_data>
 800fae8:	0003      	movs	r3, r0
 800faea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800faec:	1d3b      	adds	r3, r7, #4
 800faee:	2200      	movs	r2, #0
 800faf0:	5e9b      	ldrsh	r3, [r3, r2]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d003      	beq.n	800fafe <sen5x_device_reset+0x46>
        return error;
 800faf6:	1d3b      	adds	r3, r7, #4
 800faf8:	2200      	movs	r2, #0
 800fafa:	5e9b      	ldrsh	r3, [r3, r2]
 800fafc:	e004      	b.n	800fb08 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800fafe:	4b05      	ldr	r3, [pc, #20]	@ (800fb14 <sen5x_device_reset+0x5c>)
 800fb00:	0018      	movs	r0, r3
 800fb02:	f7ff fa35 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	0018      	movs	r0, r3
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	b003      	add	sp, #12
 800fb0e:	bd90      	pop	{r4, r7, pc}
 800fb10:	0000d304 	.word	0x0000d304
 800fb14:	00030d40 	.word	0x00030d40

0800fb18 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	b21b      	sxth	r3, r3
 800fb26:	021b      	lsls	r3, r3, #8
 800fb28:	b21a      	sxth	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	b21b      	sxth	r3, r3
 800fb32:	4313      	orrs	r3, r2
 800fb34:	b21b      	sxth	r3, r3
 800fb36:	b29b      	uxth	r3, r3
}
 800fb38:	0018      	movs	r0, r3
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	b002      	add	sp, #8
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	061a      	lsls	r2, r3, #24
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	3301      	adds	r3, #1
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	041b      	lsls	r3, r3, #16
 800fb56:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	3302      	adds	r3, #2
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb60:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	3203      	adds	r2, #3
 800fb66:	7812      	ldrb	r2, [r2, #0]
 800fb68:	4313      	orrs	r3, r2
}
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	b002      	add	sp, #8
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	0018      	movs	r0, r3
 800fb7e:	f7ff ffcb 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800fb82:	0003      	movs	r3, r0
 800fb84:	b21b      	sxth	r3, r3
}
 800fb86:	0018      	movs	r0, r3
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	b002      	add	sp, #8
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b086      	sub	sp, #24
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	60f8      	str	r0, [r7, #12]
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	1dbb      	adds	r3, r7, #6
 800fb9a:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fb9c:	2316      	movs	r3, #22
 800fb9e:	18fb      	adds	r3, r7, r3
 800fba0:	2200      	movs	r2, #0
 800fba2:	801a      	strh	r2, [r3, #0]
 800fba4:	e00f      	b.n	800fbc6 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fba6:	2016      	movs	r0, #22
 800fba8:	183b      	adds	r3, r7, r0
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	18d2      	adds	r2, r2, r3
 800fbb0:	183b      	adds	r3, r7, r0
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	68b9      	ldr	r1, [r7, #8]
 800fbb6:	18cb      	adds	r3, r1, r3
 800fbb8:	7812      	ldrb	r2, [r2, #0]
 800fbba:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fbbc:	183b      	adds	r3, r7, r0
 800fbbe:	881a      	ldrh	r2, [r3, #0]
 800fbc0:	183b      	adds	r3, r7, r0
 800fbc2:	3201      	adds	r2, #1
 800fbc4:	801a      	strh	r2, [r3, #0]
 800fbc6:	2316      	movs	r3, #22
 800fbc8:	18fa      	adds	r2, r7, r3
 800fbca:	1dbb      	adds	r3, r7, #6
 800fbcc:	8812      	ldrh	r2, [r2, #0]
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d3e8      	bcc.n	800fba6 <sensirion_common_copy_bytes+0x18>
    }
}
 800fbd4:	46c0      	nop			@ (mov r8, r8)
 800fbd6:	46c0      	nop			@ (mov r8, r8)
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	b006      	add	sp, #24
 800fbdc:	bd80      	pop	{r7, pc}
	...

0800fbe0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d113      	bne.n	800fc26 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	22fe      	movs	r2, #254	@ 0xfe
 800fc02:	0592      	lsls	r2, r2, #22
 800fc04:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	4a1a      	ldr	r2, [pc, #104]	@ (800fc74 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fc0a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	4a1a      	ldr	r2, [pc, #104]	@ (800fc78 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fc10:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4a19      	ldr	r2, [pc, #100]	@ (800fc7c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fc16:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4a19      	ldr	r2, [pc, #100]	@ (800fc80 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fc1c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	4a18      	ldr	r2, [pc, #96]	@ (800fc84 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fc22:	61da      	str	r2, [r3, #28]
 800fc24:	e011      	b.n	800fc4a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	4a17      	ldr	r2, [pc, #92]	@ (800fc88 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fc2a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4a17      	ldr	r2, [pc, #92]	@ (800fc8c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fc30:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4a16      	ldr	r2, [pc, #88]	@ (800fc90 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fc36:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	4a16      	ldr	r2, [pc, #88]	@ (800fc94 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fc3c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	4a15      	ldr	r2, [pc, #84]	@ (800fc98 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fc42:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4a15      	ldr	r2, [pc, #84]	@ (800fc9c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fc48:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	4a14      	ldr	r2, [pc, #80]	@ (800fca0 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fc4e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4a14      	ldr	r2, [pc, #80]	@ (800fca4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc54:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	4a12      	ldr	r2, [pc, #72]	@ (800fca4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc5a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4a12      	ldr	r2, [pc, #72]	@ (800fca8 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fc60:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	0018      	movs	r0, r3
 800fc66:	f000 f831 	bl	800fccc <GasIndexAlgorithm_reset>
}
 800fc6a:	46c0      	nop			@ (mov r8, r8)
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	b004      	add	sp, #16
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	46c0      	nop			@ (mov r8, r8)
 800fc74:	00002710 	.word	0x00002710
 800fc78:	44340000 	.word	0x44340000
 800fc7c:	46859800 	.word	0x46859800
 800fc80:	46a05000 	.word	0x46a05000
 800fc84:	41f00000 	.word	0x41f00000
 800fc88:	42c80000 	.word	0x42c80000
 800fc8c:	00004e20 	.word	0x00004e20
 800fc90:	43340000 	.word	0x43340000
 800fc94:	4528c000 	.word	0x4528c000
 800fc98:	45a32000 	.word	0x45a32000
 800fc9c:	43aa0000 	.word	0x43aa0000
 800fca0:	43660000 	.word	0x43660000
 800fca4:	41400000 	.word	0x41400000
 800fca8:	42480000 	.word	0x42480000

0800fcac <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800fcb6:	22fe      	movs	r2, #254	@ 0xfe
 800fcb8:	0592      	lsls	r2, r2, #22
 800fcba:	6839      	ldr	r1, [r7, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	0018      	movs	r0, r3
 800fcc0:	f7ff ff8e 	bl	800fbe0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fcc4:	46c0      	nop			@ (mov r8, r8)
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	b002      	add	sp, #8
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	0018      	movs	r0, r3
 800fcea:	f000 f805 	bl	800fcf8 <GasIndexAlgorithm__init_instances>
}
 800fcee:	46c0      	nop			@ (mov r8, r8)
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	b002      	add	sp, #8
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800fcf8:	b590      	push	{r4, r7, lr}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	0018      	movs	r0, r3
 800fd04:	f000 f8e8 	bl	800fed8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	0018      	movs	r0, r3
 800fd0c:	f000 f9a6 	bl	801005c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fd10:	1c04      	adds	r4, r0, #0
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	0018      	movs	r0, r3
 800fd16:	f000 f9ab 	bl	8010070 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fd1a:	1c02      	adds	r2, r0, #0
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	1c21      	adds	r1, r4, #0
 800fd20:	0018      	movs	r0, r3
 800fd22:	f000 fc3b 	bl	801059c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d107      	bne.n	800fd3e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd2e:	23fe      	movs	r3, #254	@ 0xfe
 800fd30:	059b      	lsls	r3, r3, #22
 800fd32:	4a0a      	ldr	r2, [pc, #40]	@ (800fd5c <GasIndexAlgorithm__init_instances+0x64>)
 800fd34:	490a      	ldr	r1, [pc, #40]	@ (800fd60 <GasIndexAlgorithm__init_instances+0x68>)
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 fc86 	bl	8010648 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800fd3c:	e005      	b.n	800fd4a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd3e:	4b09      	ldr	r3, [pc, #36]	@ (800fd64 <GasIndexAlgorithm__init_instances+0x6c>)
 800fd40:	4a09      	ldr	r2, [pc, #36]	@ (800fd68 <GasIndexAlgorithm__init_instances+0x70>)
 800fd42:	490a      	ldr	r1, [pc, #40]	@ (800fd6c <GasIndexAlgorithm__init_instances+0x74>)
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fc7f 	bl	8010648 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	0018      	movs	r0, r3
 800fd4e:	f000 fd35 	bl	80107bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800fd52:	46c0      	nop			@ (mov r8, r8)
 800fd54:	46bd      	mov	sp, r7
 800fd56:	b003      	add	sp, #12
 800fd58:	bd90      	pop	{r4, r7, pc}
 800fd5a:	46c0      	nop			@ (mov r8, r8)
 800fd5c:	bc257a78 	.word	0xbc257a78
 800fd60:	44198000 	.word	0x44198000
 800fd64:	42c80000 	.word	0x42c80000
 800fd68:	bbd4fdf4 	.word	0xbbd4fdf4
 800fd6c:	43550000 	.word	0x43550000

0800fd70 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fd70:	b590      	push	{r4, r7, lr}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd80:	4952      	ldr	r1, [pc, #328]	@ (800fecc <GasIndexAlgorithm_process+0x15c>)
 800fd82:	1c18      	adds	r0, r3, #0
 800fd84:	f7f0 fbde 	bl	8000544 <__aeabi_fcmple>
 800fd88:	1e03      	subs	r3, r0, #0
 800fd8a:	d00c      	beq.n	800fda6 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	1c19      	adds	r1, r3, #0
 800fd96:	1c10      	adds	r0, r2, #0
 800fd98:	f7f0 fd92 	bl	80008c0 <__aeabi_fadd>
 800fd9c:	1c03      	adds	r3, r0, #0
 800fd9e:	1c1a      	adds	r2, r3, #0
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	631a      	str	r2, [r3, #48]	@ 0x30
 800fda4:	e080      	b.n	800fea8 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	dd25      	ble.n	800fdf8 <GasIndexAlgorithm_process+0x88>
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	4a48      	ldr	r2, [pc, #288]	@ (800fed0 <GasIndexAlgorithm_process+0x160>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	dc21      	bgt.n	800fdf8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	68ba      	ldr	r2, [r7, #8]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	dc04      	bgt.n	800fdc8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	60bb      	str	r3, [r7, #8]
 800fdc6:	e00d      	b.n	800fde4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	4a41      	ldr	r2, [pc, #260]	@ (800fed4 <GasIndexAlgorithm_process+0x164>)
 800fdce:	4694      	mov	ip, r2
 800fdd0:	4463      	add	r3, ip
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	dd05      	ble.n	800fde4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	4a3d      	ldr	r2, [pc, #244]	@ (800fed4 <GasIndexAlgorithm_process+0x164>)
 800fdde:	4694      	mov	ip, r2
 800fde0:	4463      	add	r3, ip
 800fde2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	0018      	movs	r0, r3
 800fdee:	f7f1 fd1b 	bl	8001828 <__aeabi_i2f>
 800fdf2:	1c02      	adds	r2, r0, #0
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d005      	beq.n	800fe0c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	0018      	movs	r0, r3
 800fe04:	f000 f945 	bl	8010092 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800fe08:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800fe0a:	d014      	beq.n	800fe36 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	1c11      	adds	r1, r2, #0
 800fe14:	0018      	movs	r0, r3
 800fe16:	f000 fbd1 	bl	80105bc <GasIndexAlgorithm__mox_model__process>
 800fe1a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	1c11      	adds	r1, r2, #0
 800fe28:	0018      	movs	r0, r3
 800fe2a:	f000 fc25 	bl	8010678 <GasIndexAlgorithm__sigmoid_scaled__process>
 800fe2e:	1c02      	adds	r2, r0, #0
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe34:	e003      	b.n	800fe3e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	689a      	ldr	r2, [r3, #8]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	1c11      	adds	r1, r2, #0
 800fe46:	0018      	movs	r0, r3
 800fe48:	f000 fcec 	bl	8010824 <GasIndexAlgorithm__adaptive_lowpass__process>
 800fe4c:	1c02      	adds	r2, r0, #0
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe56:	21fc      	movs	r1, #252	@ 0xfc
 800fe58:	0589      	lsls	r1, r1, #22
 800fe5a:	1c18      	adds	r0, r3, #0
 800fe5c:	f7f0 fb68 	bl	8000530 <__aeabi_fcmplt>
 800fe60:	1e03      	subs	r3, r0, #0
 800fe62:	d003      	beq.n	800fe6c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	22fc      	movs	r2, #252	@ 0xfc
 800fe68:	0592      	lsls	r2, r2, #22
 800fe6a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe70:	2100      	movs	r1, #0
 800fe72:	1c18      	adds	r0, r3, #0
 800fe74:	f7f0 fb70 	bl	8000558 <__aeabi_fcmpgt>
 800fe78:	1e03      	subs	r3, r0, #0
 800fe7a:	d015      	beq.n	800fea8 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	1c11      	adds	r1, r2, #0
 800fe84:	0018      	movs	r0, r3
 800fe86:	f000 fa4f 	bl	8010328 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	0018      	movs	r0, r3
 800fe8e:	f000 f8e5 	bl	801005c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fe92:	1c04      	adds	r4, r0, #0
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	0018      	movs	r0, r3
 800fe98:	f000 f8ea 	bl	8010070 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fe9c:	1c02      	adds	r2, r0, #0
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	1c21      	adds	r1, r4, #0
 800fea2:	0018      	movs	r0, r3
 800fea4:	f000 fb7a 	bl	801059c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feac:	21fc      	movs	r1, #252	@ 0xfc
 800feae:	0589      	lsls	r1, r1, #22
 800feb0:	1c18      	adds	r0, r3, #0
 800feb2:	f7f0 fd05 	bl	80008c0 <__aeabi_fadd>
 800feb6:	1c03      	adds	r3, r0, #0
 800feb8:	1c18      	adds	r0, r3, #0
 800feba:	f7f1 fc95 	bl	80017e8 <__aeabi_f2iz>
 800febe:	0002      	movs	r2, r0
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	601a      	str	r2, [r3, #0]
    return;
 800fec4:	46c0      	nop			@ (mov r8, r8)
}
 800fec6:	46bd      	mov	sp, r7
 800fec8:	b005      	add	sp, #20
 800feca:	bd90      	pop	{r4, r7, pc}
 800fecc:	42340000 	.word	0x42340000
 800fed0:	0000fde7 	.word	0x0000fde7
 800fed4:	00007fff 	.word	0x00007fff

0800fed8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fed8:	b5b0      	push	{r4, r5, r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	223c      	movs	r2, #60	@ 0x3c
 800fee4:	2100      	movs	r1, #0
 800fee6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	4952      	ldr	r1, [pc, #328]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff02:	1c18      	adds	r0, r3, #0
 800ff04:	f7f0 fece 	bl	8000ca4 <__aeabi_fdiv>
 800ff08:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff0a:	2188      	movs	r1, #136	@ 0x88
 800ff0c:	05c9      	lsls	r1, r1, #23
 800ff0e:	1c18      	adds	r0, r3, #0
 800ff10:	f7f1 f896 	bl	8001040 <__aeabi_fmul>
 800ff14:	1c03      	adds	r3, r0, #0
 800ff16:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	494a      	ldr	r1, [pc, #296]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff22:	1c18      	adds	r0, r3, #0
 800ff24:	f7f0 febe 	bl	8000ca4 <__aeabi_fdiv>
 800ff28:	1c03      	adds	r3, r0, #0
 800ff2a:	1c19      	adds	r1, r3, #0
 800ff2c:	1c20      	adds	r0, r4, #0
 800ff2e:	f7f0 fcc7 	bl	80008c0 <__aeabi_fadd>
 800ff32:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff34:	1c19      	adds	r1, r3, #0
 800ff36:	1c28      	adds	r0, r5, #0
 800ff38:	f7f0 feb4 	bl	8000ca4 <__aeabi_fdiv>
 800ff3c:	1c03      	adds	r3, r0, #0
 800ff3e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	4940      	ldr	r1, [pc, #256]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff4a:	1c18      	adds	r0, r3, #0
 800ff4c:	f7f0 feaa 	bl	8000ca4 <__aeabi_fdiv>
 800ff50:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ff52:	2185      	movs	r1, #133	@ 0x85
 800ff54:	05c9      	lsls	r1, r1, #23
 800ff56:	1c18      	adds	r0, r3, #0
 800ff58:	f7f1 f872 	bl	8001040 <__aeabi_fmul>
 800ff5c:	1c03      	adds	r3, r0, #0
 800ff5e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	4938      	ldr	r1, [pc, #224]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff6a:	1c18      	adds	r0, r3, #0
 800ff6c:	f7f0 fe9a 	bl	8000ca4 <__aeabi_fdiv>
 800ff70:	1c03      	adds	r3, r0, #0
 800ff72:	1c19      	adds	r1, r3, #0
 800ff74:	1c20      	adds	r0, r4, #0
 800ff76:	f7f0 fca3 	bl	80008c0 <__aeabi_fadd>
 800ff7a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff7c:	1c19      	adds	r1, r3, #0
 800ff7e:	1c28      	adds	r0, r5, #0
 800ff80:	f7f0 fe90 	bl	8000ca4 <__aeabi_fdiv>
 800ff84:	1c03      	adds	r3, r0, #0
 800ff86:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d118      	bne.n	800ffc6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff98:	2188      	movs	r1, #136	@ 0x88
 800ff9a:	05c9      	lsls	r1, r1, #23
 800ff9c:	1c18      	adds	r0, r3, #0
 800ff9e:	f7f1 f84f 	bl	8001040 <__aeabi_fmul>
 800ffa2:	1c03      	adds	r3, r0, #0
 800ffa4:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800ffaa:	4929      	ldr	r1, [pc, #164]	@ (8010050 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800ffac:	1c18      	adds	r0, r3, #0
 800ffae:	f7f0 fc87 	bl	80008c0 <__aeabi_fadd>
 800ffb2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ffb4:	1c19      	adds	r1, r3, #0
 800ffb6:	1c20      	adds	r0, r4, #0
 800ffb8:	f7f0 fe74 	bl	8000ca4 <__aeabi_fdiv>
 800ffbc:	1c03      	adds	r3, r0, #0
 800ffbe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	655a      	str	r2, [r3, #84]	@ 0x54
 800ffc4:	e017      	b.n	800fff6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ffca:	2188      	movs	r1, #136	@ 0x88
 800ffcc:	05c9      	lsls	r1, r1, #23
 800ffce:	1c18      	adds	r0, r3, #0
 800ffd0:	f7f1 f836 	bl	8001040 <__aeabi_fmul>
 800ffd4:	1c03      	adds	r3, r0, #0
 800ffd6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ffdc:	491d      	ldr	r1, [pc, #116]	@ (8010054 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ffde:	1c18      	adds	r0, r3, #0
 800ffe0:	f7f0 fc6e 	bl	80008c0 <__aeabi_fadd>
 800ffe4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ffe6:	1c19      	adds	r1, r3, #0
 800ffe8:	1c20      	adds	r0, r4, #0
 800ffea:	f7f0 fe5b 	bl	8000ca4 <__aeabi_fdiv>
 800ffee:	1c03      	adds	r3, r0, #0
 800fff0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fffa:	2185      	movs	r1, #133	@ 0x85
 800fffc:	05c9      	lsls	r1, r1, #23
 800fffe:	1c18      	adds	r0, r3, #0
 8010000:	f7f1 f81e 	bl	8001040 <__aeabi_fmul>
 8010004:	1c03      	adds	r3, r0, #0
 8010006:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	4912      	ldr	r1, [pc, #72]	@ (8010058 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 801000e:	1c18      	adds	r0, r3, #0
 8010010:	f7f0 fc56 	bl	80008c0 <__aeabi_fadd>
 8010014:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8010016:	1c19      	adds	r1, r3, #0
 8010018:	1c20      	adds	r0, r4, #0
 801001a:	f7f0 fe43 	bl	8000ca4 <__aeabi_fdiv>
 801001e:	1c03      	adds	r3, r0, #0
 8010020:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8010044:	46c0      	nop			@ (mov r8, r8)
 8010046:	46bd      	mov	sp, r7
 8010048:	b002      	add	sp, #8
 801004a:	bdb0      	pop	{r4, r5, r7, pc}
 801004c:	45610000 	.word	0x45610000
 8010050:	44960000 	.word	0x44960000
 8010054:	41a00000 	.word	0x41a00000
 8010058:	451c4000 	.word	0x451c4000

0801005c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8010068:	1c18      	adds	r0, r3, #0
 801006a:	46bd      	mov	sp, r7
 801006c:	b002      	add	sp, #8
 801006e:	bd80      	pop	{r7, pc}

08010070 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8010080:	1c19      	adds	r1, r3, #0
 8010082:	1c10      	adds	r0, r2, #0
 8010084:	f7f0 fc1c 	bl	80008c0 <__aeabi_fadd>
 8010088:	1c03      	adds	r3, r0, #0
}
 801008a:	1c18      	adds	r0, r3, #0
 801008c:	46bd      	mov	sp, r7
 801008e:	b002      	add	sp, #8
 8010090:	bd80      	pop	{r7, pc}

08010092 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8010092:	b580      	push	{r7, lr}
 8010094:	b082      	sub	sp, #8
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	223c      	movs	r2, #60	@ 0x3c
 801009e:	5c9b      	ldrb	r3, [r3, r2]
}
 80100a0:	0018      	movs	r0, r3
 80100a2:	46bd      	mov	sp, r7
 80100a4:	b002      	add	sp, #8
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80100a8:	b5b0      	push	{r4, r5, r7, lr}
 80100aa:	b08c      	sub	sp, #48	@ 0x30
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80100b4:	1c19      	adds	r1, r3, #0
 80100b6:	4895      	ldr	r0, [pc, #596]	@ (801030c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80100b8:	f7f1 f91c 	bl	80012f4 <__aeabi_fsub>
 80100bc:	1c03      	adds	r3, r0, #0
 80100be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100c4:	1c19      	adds	r1, r3, #0
 80100c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100c8:	f7f0 fa46 	bl	8000558 <__aeabi_fcmpgt>
 80100cc:	1e03      	subs	r3, r0, #0
 80100ce:	d00b      	beq.n	80100e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100d8:	1c19      	adds	r1, r3, #0
 80100da:	1c10      	adds	r0, r2, #0
 80100dc:	f7f0 fbf0 	bl	80008c0 <__aeabi_fadd>
 80100e0:	1c03      	adds	r3, r0, #0
 80100e2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100ec:	1c19      	adds	r1, r3, #0
 80100ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100f0:	f7f0 fa32 	bl	8000558 <__aeabi_fcmpgt>
 80100f4:	1e03      	subs	r3, r0, #0
 80100f6:	d00b      	beq.n	8010110 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8010100:	1c19      	adds	r1, r3, #0
 8010102:	1c10      	adds	r0, r2, #0
 8010104:	f7f0 fbdc 	bl	80008c0 <__aeabi_fadd>
 8010108:	1c03      	adds	r3, r0, #0
 801010a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6959      	ldr	r1, [r3, #20]
 8010114:	4a7e      	ldr	r2, [pc, #504]	@ (8010310 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	0018      	movs	r0, r3
 801011a:	f000 f9f1 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	1c11      	adds	r1, r2, #0
 8010126:	0018      	movs	r0, r3
 8010128:	f000 f9fa 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801012c:	1c03      	adds	r3, r0, #0
 801012e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 801013c:	1c19      	adds	r1, r3, #0
 801013e:	1c10      	adds	r0, r2, #0
 8010140:	f7f1 f8d8 	bl	80012f4 <__aeabi_fsub>
 8010144:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010148:	1c18      	adds	r0, r3, #0
 801014a:	f7f0 ff79 	bl	8001040 <__aeabi_fmul>
 801014e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010150:	1c19      	adds	r1, r3, #0
 8010152:	1c20      	adds	r0, r4, #0
 8010154:	f7f0 fbb4 	bl	80008c0 <__aeabi_fadd>
 8010158:	1c03      	adds	r3, r0, #0
 801015a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010164:	1c19      	adds	r1, r3, #0
 8010166:	486b      	ldr	r0, [pc, #428]	@ (8010314 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010168:	f7f1 f8c4 	bl	80012f4 <__aeabi_fsub>
 801016c:	1c03      	adds	r3, r0, #0
 801016e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	1c11      	adds	r1, r2, #0
 8010178:	0018      	movs	r0, r3
 801017a:	f000 f9d1 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801017e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010180:	1c19      	adds	r1, r3, #0
 8010182:	1c28      	adds	r0, r5, #0
 8010184:	f7f0 ff5c 	bl	8001040 <__aeabi_fmul>
 8010188:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 801018a:	1c19      	adds	r1, r3, #0
 801018c:	1c20      	adds	r0, r4, #0
 801018e:	f7f0 fb97 	bl	80008c0 <__aeabi_fadd>
 8010192:	1c03      	adds	r3, r0, #0
 8010194:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010196:	4a60      	ldr	r2, [pc, #384]	@ (8010318 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010198:	6a39      	ldr	r1, [r7, #32]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	0018      	movs	r0, r3
 801019e:	f000 f9af 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	1c11      	adds	r1, r2, #0
 80101aa:	0018      	movs	r0, r3
 80101ac:	f000 f9b8 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101b0:	1c03      	adds	r3, r0, #0
 80101b2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80101b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80101b6:	69f8      	ldr	r0, [r7, #28]
 80101b8:	f7f0 ff42 	bl	8001040 <__aeabi_fmul>
 80101bc:	1c03      	adds	r3, r0, #0
 80101be:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6999      	ldr	r1, [r3, #24]
 80101c8:	4a51      	ldr	r2, [pc, #324]	@ (8010310 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	0018      	movs	r0, r3
 80101ce:	f000 f997 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	1c11      	adds	r1, r2, #0
 80101da:	0018      	movs	r0, r3
 80101dc:	f000 f9a0 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101e0:	1c03      	adds	r3, r0, #0
 80101e2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101f0:	1c19      	adds	r1, r3, #0
 80101f2:	1c10      	adds	r0, r2, #0
 80101f4:	f7f1 f87e 	bl	80012f4 <__aeabi_fsub>
 80101f8:	1c03      	adds	r3, r0, #0
 80101fa:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80101fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101fe:	69b8      	ldr	r0, [r7, #24]
 8010200:	f7f1 f878 	bl	80012f4 <__aeabi_fsub>
 8010204:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8010206:	1c19      	adds	r1, r3, #0
 8010208:	1c28      	adds	r0, r5, #0
 801020a:	f7f0 ff19 	bl	8001040 <__aeabi_fmul>
 801020e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8010210:	1c19      	adds	r1, r3, #0
 8010212:	1c20      	adds	r0, r4, #0
 8010214:	f7f0 fb54 	bl	80008c0 <__aeabi_fadd>
 8010218:	1c03      	adds	r3, r0, #0
 801021a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010224:	1c19      	adds	r1, r3, #0
 8010226:	483b      	ldr	r0, [pc, #236]	@ (8010314 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010228:	f7f1 f864 	bl	80012f4 <__aeabi_fsub>
 801022c:	1c03      	adds	r3, r0, #0
 801022e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	1c11      	adds	r1, r2, #0
 8010238:	0018      	movs	r0, r3
 801023a:	f000 f971 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801023e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010240:	1c19      	adds	r1, r3, #0
 8010242:	1c28      	adds	r0, r5, #0
 8010244:	f7f0 fefc 	bl	8001040 <__aeabi_fmul>
 8010248:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 801024a:	1c19      	adds	r1, r3, #0
 801024c:	1c20      	adds	r0, r4, #0
 801024e:	f7f0 fb37 	bl	80008c0 <__aeabi_fadd>
 8010252:	1c03      	adds	r3, r0, #0
 8010254:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010256:	4a30      	ldr	r2, [pc, #192]	@ (8010318 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010258:	6939      	ldr	r1, [r7, #16]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	0018      	movs	r0, r3
 801025e:	f000 f94f 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	1c11      	adds	r1, r2, #0
 801026a:	0018      	movs	r0, r3
 801026c:	f000 f958 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010270:	1c03      	adds	r3, r0, #0
 8010272:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8010274:	6979      	ldr	r1, [r7, #20]
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f7f0 fee2 	bl	8001040 <__aeabi_fmul>
 801027c:	1c03      	adds	r3, r0, #0
 801027e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	4923      	ldr	r1, [pc, #140]	@ (801031c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 801028e:	1c18      	adds	r0, r3, #0
 8010290:	f7f0 fd08 	bl	8000ca4 <__aeabi_fdiv>
 8010294:	1c03      	adds	r3, r0, #0
 8010296:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8010298:	69f9      	ldr	r1, [r7, #28]
 801029a:	20fe      	movs	r0, #254	@ 0xfe
 801029c:	0580      	lsls	r0, r0, #22
 801029e:	f7f1 f829 	bl	80012f4 <__aeabi_fsub>
 80102a2:	1c03      	adds	r3, r0, #0
 80102a4:	491e      	ldr	r1, [pc, #120]	@ (8010320 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80102a6:	1c18      	adds	r0, r3, #0
 80102a8:	f7f0 feca 	bl	8001040 <__aeabi_fmul>
 80102ac:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 80102ae:	491d      	ldr	r1, [pc, #116]	@ (8010324 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80102b0:	1c18      	adds	r0, r3, #0
 80102b2:	f7f1 f81f 	bl	80012f4 <__aeabi_fsub>
 80102b6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80102b8:	1c19      	adds	r1, r3, #0
 80102ba:	1c28      	adds	r0, r5, #0
 80102bc:	f7f0 fec0 	bl	8001040 <__aeabi_fmul>
 80102c0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80102c2:	1c19      	adds	r1, r3, #0
 80102c4:	1c20      	adds	r0, r4, #0
 80102c6:	f7f0 fafb 	bl	80008c0 <__aeabi_fadd>
 80102ca:	1c03      	adds	r3, r0, #0
 80102cc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102d6:	2100      	movs	r1, #0
 80102d8:	1c18      	adds	r0, r3, #0
 80102da:	f7f0 f929 	bl	8000530 <__aeabi_fcmplt>
 80102de:	1e03      	subs	r3, r0, #0
 80102e0:	d002      	beq.n	80102e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102f0:	1c19      	adds	r1, r3, #0
 80102f2:	1c10      	adds	r0, r2, #0
 80102f4:	f7f0 f930 	bl	8000558 <__aeabi_fcmpgt>
 80102f8:	1e03      	subs	r3, r0, #0
 80102fa:	d100      	bne.n	80102fe <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80102fc:	e002      	b.n	8010304 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010304:	46c0      	nop			@ (mov r8, r8)
 8010306:	46bd      	mov	sp, r7
 8010308:	b00c      	add	sp, #48	@ 0x30
 801030a:	bdb0      	pop	{r4, r5, r7, pc}
 801030c:	46fffe00 	.word	0x46fffe00
 8010310:	3c23d70a 	.word	0x3c23d70a
 8010314:	43ff0000 	.word	0x43ff0000
 8010318:	3db851ec 	.word	0x3db851ec
 801031c:	42700000 	.word	0x42700000
 8010320:	3fa66666 	.word	0x3fa66666
 8010324:	3e99999a 	.word	0x3e99999a

08010328 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8010328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801032a:	b087      	sub	sp, #28
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	223c      	movs	r2, #60	@ 0x3c
 8010336:	5c9b      	ldrb	r3, [r3, r2]
 8010338:	2201      	movs	r2, #1
 801033a:	4053      	eors	r3, r2
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00a      	beq.n	8010358 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	223c      	movs	r2, #60	@ 0x3c
 8010346:	2101      	movs	r1, #1
 8010348:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	683a      	ldr	r2, [r7, #0]
 801034e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2200      	movs	r2, #0
 8010354:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8010356:	e0c8      	b.n	80104ea <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801035c:	4965      	ldr	r1, [pc, #404]	@ (80104f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 801035e:	1c18      	adds	r0, r3, #0
 8010360:	f7f0 f904 	bl	800056c <__aeabi_fcmpge>
 8010364:	1e03      	subs	r3, r0, #0
 8010366:	d107      	bne.n	8010378 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 801036c:	4962      	ldr	r1, [pc, #392]	@ (80104f8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 801036e:	1c18      	adds	r0, r3, #0
 8010370:	f7f0 f8e8 	bl	8000544 <__aeabi_fcmple>
 8010374:	1e03      	subs	r3, r0, #0
 8010376:	d00e      	beq.n	8010396 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010380:	1c19      	adds	r1, r3, #0
 8010382:	1c10      	adds	r0, r2, #0
 8010384:	f7f0 fa9c 	bl	80008c0 <__aeabi_fadd>
 8010388:	1c03      	adds	r3, r0, #0
 801038a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801039a:	1c19      	adds	r1, r3, #0
 801039c:	6838      	ldr	r0, [r7, #0]
 801039e:	f7f0 ffa9 	bl	80012f4 <__aeabi_fsub>
 80103a2:	1c03      	adds	r3, r0, #0
 80103a4:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	0018      	movs	r0, r3
 80103aa:	f7ff fe7d 	bl	80100a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103b2:	1c19      	adds	r1, r3, #0
 80103b4:	6838      	ldr	r0, [r7, #0]
 80103b6:	f7f0 ff9d 	bl	80012f4 <__aeabi_fsub>
 80103ba:	1c03      	adds	r3, r0, #0
 80103bc:	2185      	movs	r1, #133	@ 0x85
 80103be:	05c9      	lsls	r1, r1, #23
 80103c0:	1c18      	adds	r0, r3, #0
 80103c2:	f7f0 fc6f 	bl	8000ca4 <__aeabi_fdiv>
 80103c6:	1c03      	adds	r3, r0, #0
 80103c8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80103ca:	2100      	movs	r1, #0
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f7f0 f8af 	bl	8000530 <__aeabi_fcmplt>
 80103d2:	1e03      	subs	r3, r0, #0
 80103d4:	d008      	beq.n	80103e8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103da:	68f9      	ldr	r1, [r7, #12]
 80103dc:	1c18      	adds	r0, r3, #0
 80103de:	f7f0 ff89 	bl	80012f4 <__aeabi_fsub>
 80103e2:	1c03      	adds	r3, r0, #0
 80103e4:	617b      	str	r3, [r7, #20]
 80103e6:	e007      	b.n	80103f8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103ec:	1c19      	adds	r1, r3, #0
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f7f0 fa66 	bl	80008c0 <__aeabi_fadd>
 80103f4:	1c03      	adds	r3, r0, #0
 80103f6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80103f8:	23fe      	movs	r3, #254	@ 0xfe
 80103fa:	059b      	lsls	r3, r3, #22
 80103fc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80103fe:	493f      	ldr	r1, [pc, #252]	@ (80104fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010400:	6978      	ldr	r0, [r7, #20]
 8010402:	f7f0 f8a9 	bl	8000558 <__aeabi_fcmpgt>
 8010406:	1e03      	subs	r3, r0, #0
 8010408:	d010      	beq.n	801042c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 801040a:	493c      	ldr	r1, [pc, #240]	@ (80104fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 801040c:	6978      	ldr	r0, [r7, #20]
 801040e:	f7f0 fc49 	bl	8000ca4 <__aeabi_fdiv>
 8010412:	1c03      	adds	r3, r0, #0
 8010414:	1c1c      	adds	r4, r3, #0
 8010416:	4939      	ldr	r1, [pc, #228]	@ (80104fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010418:	6978      	ldr	r0, [r7, #20]
 801041a:	f7f0 fc43 	bl	8000ca4 <__aeabi_fdiv>
 801041e:	1c03      	adds	r3, r0, #0
 8010420:	1c19      	adds	r1, r3, #0
 8010422:	1c20      	adds	r0, r4, #0
 8010424:	f7f0 fe0c 	bl	8001040 <__aeabi_fmul>
 8010428:	1c03      	adds	r3, r0, #0
 801042a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8010430:	1c19      	adds	r1, r3, #0
 8010432:	2085      	movs	r0, #133	@ 0x85
 8010434:	05c0      	lsls	r0, r0, #23
 8010436:	f7f0 ff5d 	bl	80012f4 <__aeabi_fsub>
 801043a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 801043c:	6939      	ldr	r1, [r7, #16]
 801043e:	1c18      	adds	r0, r3, #0
 8010440:	f7f0 fdfe 	bl	8001040 <__aeabi_fmul>
 8010444:	1c03      	adds	r3, r0, #0
 8010446:	1c18      	adds	r0, r3, #0
 8010448:	f018 febc 	bl	80291c4 <sqrtf>
 801044c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8010456:	2185      	movs	r1, #133	@ 0x85
 8010458:	05c9      	lsls	r1, r1, #23
 801045a:	6938      	ldr	r0, [r7, #16]
 801045c:	f7f0 fdf0 	bl	8001040 <__aeabi_fmul>
 8010460:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8010462:	1c19      	adds	r1, r3, #0
 8010464:	1c28      	adds	r0, r5, #0
 8010466:	f7f0 fc1d 	bl	8000ca4 <__aeabi_fdiv>
 801046a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 801046c:	1c19      	adds	r1, r3, #0
 801046e:	1c20      	adds	r0, r4, #0
 8010470:	f7f0 fde6 	bl	8001040 <__aeabi_fmul>
 8010474:	1c03      	adds	r3, r0, #0
 8010476:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801047c:	68f9      	ldr	r1, [r7, #12]
 801047e:	1c18      	adds	r0, r3, #0
 8010480:	f7f0 fdde 	bl	8001040 <__aeabi_fmul>
 8010484:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8010486:	6939      	ldr	r1, [r7, #16]
 8010488:	1c18      	adds	r0, r3, #0
 801048a:	f7f0 fc0b 	bl	8000ca4 <__aeabi_fdiv>
 801048e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8010490:	68f9      	ldr	r1, [r7, #12]
 8010492:	1c18      	adds	r0, r3, #0
 8010494:	f7f0 fdd4 	bl	8001040 <__aeabi_fmul>
 8010498:	1c03      	adds	r3, r0, #0
             sqrtf(
 801049a:	1c19      	adds	r1, r3, #0
 801049c:	1c20      	adds	r0, r4, #0
 801049e:	f7f0 fa0f 	bl	80008c0 <__aeabi_fadd>
 80104a2:	1c03      	adds	r3, r0, #0
 80104a4:	1c18      	adds	r0, r3, #0
 80104a6:	f018 fe8d 	bl	80291c4 <sqrtf>
 80104aa:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80104ac:	1c19      	adds	r1, r3, #0
 80104ae:	1c30      	adds	r0, r6, #0
 80104b0:	f7f0 fdc6 	bl	8001040 <__aeabi_fmul>
 80104b4:	1c03      	adds	r3, r0, #0
 80104b6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104c4:	68f9      	ldr	r1, [r7, #12]
 80104c6:	1c18      	adds	r0, r3, #0
 80104c8:	f7f0 fdba 	bl	8001040 <__aeabi_fmul>
 80104cc:	1c03      	adds	r3, r0, #0
 80104ce:	2182      	movs	r1, #130	@ 0x82
 80104d0:	05c9      	lsls	r1, r1, #23
 80104d2:	1c18      	adds	r0, r3, #0
 80104d4:	f7f0 fbe6 	bl	8000ca4 <__aeabi_fdiv>
 80104d8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80104da:	1c19      	adds	r1, r3, #0
 80104dc:	1c20      	adds	r0, r4, #0
 80104de:	f7f0 f9ef 	bl	80008c0 <__aeabi_fadd>
 80104e2:	1c03      	adds	r3, r0, #0
 80104e4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80104ea:	46c0      	nop			@ (mov r8, r8)
 80104ec:	46bd      	mov	sp, r7
 80104ee:	b007      	add	sp, #28
 80104f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f2:	46c0      	nop			@ (mov r8, r8)
 80104f4:	42c80000 	.word	0x42c80000
 80104f8:	c2c80000 	.word	0xc2c80000
 80104fc:	44b40000 	.word	0x44b40000

08010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	68ba      	ldr	r2, [r7, #8]
 8010516:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010518:	46c0      	nop			@ (mov r8, r8)
 801051a:	46bd      	mov	sp, r7
 801051c:	b004      	add	sp, #16
 801051e:	bd80      	pop	{r7, pc}

08010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8010520:	b590      	push	{r4, r7, lr}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010532:	1c19      	adds	r1, r3, #0
 8010534:	6838      	ldr	r0, [r7, #0]
 8010536:	f7f0 fedd 	bl	80012f4 <__aeabi_fsub>
 801053a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 801053c:	1c19      	adds	r1, r3, #0
 801053e:	1c20      	adds	r0, r4, #0
 8010540:	f7f0 fd7e 	bl	8001040 <__aeabi_fmul>
 8010544:	1c03      	adds	r3, r0, #0
 8010546:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8010548:	4912      	ldr	r1, [pc, #72]	@ (8010594 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f7ef fff0 	bl	8000530 <__aeabi_fcmplt>
 8010550:	1e03      	subs	r3, r0, #0
 8010552:	d002      	beq.n	801055a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8010554:	23fe      	movs	r3, #254	@ 0xfe
 8010556:	059b      	lsls	r3, r3, #22
 8010558:	e018      	b.n	801058c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 801055a:	490f      	ldr	r1, [pc, #60]	@ (8010598 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 801055c:	68f8      	ldr	r0, [r7, #12]
 801055e:	f7ef fffb 	bl	8000558 <__aeabi_fcmpgt>
 8010562:	1e03      	subs	r3, r0, #0
 8010564:	d001      	beq.n	801056a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8010566:	2300      	movs	r3, #0
 8010568:	e010      	b.n	801058c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	1c18      	adds	r0, r3, #0
 801056e:	f018 fe01 	bl	8029174 <expf>
 8010572:	1c03      	adds	r3, r0, #0
 8010574:	21fe      	movs	r1, #254	@ 0xfe
 8010576:	0589      	lsls	r1, r1, #22
 8010578:	1c18      	adds	r0, r3, #0
 801057a:	f7f0 f9a1 	bl	80008c0 <__aeabi_fadd>
 801057e:	1c03      	adds	r3, r0, #0
 8010580:	1c19      	adds	r1, r3, #0
 8010582:	20fe      	movs	r0, #254	@ 0xfe
 8010584:	0580      	lsls	r0, r0, #22
 8010586:	f7f0 fb8d 	bl	8000ca4 <__aeabi_fdiv>
 801058a:	1c03      	adds	r3, r0, #0
    }
}
 801058c:	1c18      	adds	r0, r3, #0
 801058e:	46bd      	mov	sp, r7
 8010590:	b005      	add	sp, #20
 8010592:	bd90      	pop	{r4, r7, pc}
 8010594:	c2480000 	.word	0xc2480000
 8010598:	42480000 	.word	0x42480000

0801059c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	68ba      	ldr	r2, [r7, #8]
 80105ac:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80105b4:	46c0      	nop			@ (mov r8, r8)
 80105b6:	46bd      	mov	sp, r7
 80105b8:	b004      	add	sp, #16
 80105ba:	bd80      	pop	{r7, pc}

080105bc <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80105bc:	b590      	push	{r4, r7, lr}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d114      	bne.n	80105f8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105d2:	1c19      	adds	r1, r3, #0
 80105d4:	6838      	ldr	r0, [r7, #0]
 80105d6:	f7f0 fe8d 	bl	80012f4 <__aeabi_fsub>
 80105da:	1c03      	adds	r3, r0, #0
 80105dc:	4918      	ldr	r1, [pc, #96]	@ (8010640 <GasIndexAlgorithm__mox_model__process+0x84>)
 80105de:	1c18      	adds	r0, r3, #0
 80105e0:	f7f0 fb60 	bl	8000ca4 <__aeabi_fdiv>
 80105e4:	1c03      	adds	r3, r0, #0
 80105e6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80105ec:	1c19      	adds	r1, r3, #0
 80105ee:	1c10      	adds	r0, r2, #0
 80105f0:	f7f0 fd26 	bl	8001040 <__aeabi_fmul>
 80105f4:	1c03      	adds	r3, r0, #0
 80105f6:	e01f      	b.n	8010638 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105fc:	1c19      	adds	r1, r3, #0
 80105fe:	6838      	ldr	r0, [r7, #0]
 8010600:	f7f0 fe78 	bl	80012f4 <__aeabi_fsub>
 8010604:	1c03      	adds	r3, r0, #0
 8010606:	1c1a      	adds	r2, r3, #0
 8010608:	2380      	movs	r3, #128	@ 0x80
 801060a:	061b      	lsls	r3, r3, #24
 801060c:	4053      	eors	r3, r2
 801060e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010614:	490b      	ldr	r1, [pc, #44]	@ (8010644 <GasIndexAlgorithm__mox_model__process+0x88>)
 8010616:	1c18      	adds	r0, r3, #0
 8010618:	f7f0 f952 	bl	80008c0 <__aeabi_fadd>
 801061c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 801061e:	1c19      	adds	r1, r3, #0
 8010620:	1c20      	adds	r0, r4, #0
 8010622:	f7f0 fb3f 	bl	8000ca4 <__aeabi_fdiv>
 8010626:	1c03      	adds	r3, r0, #0
 8010628:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 801062e:	1c19      	adds	r1, r3, #0
 8010630:	1c10      	adds	r0, r2, #0
 8010632:	f7f0 fd05 	bl	8001040 <__aeabi_fmul>
 8010636:	1c03      	adds	r3, r0, #0
    }
}
 8010638:	1c18      	adds	r0, r3, #0
 801063a:	46bd      	mov	sp, r7
 801063c:	b003      	add	sp, #12
 801063e:	bd90      	pop	{r4, r7, pc}
 8010640:	44fa0000 	.word	0x44fa0000
 8010644:	435c0000 	.word	0x435c0000

08010648 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]
 8010654:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2180      	movs	r1, #128	@ 0x80
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2184      	movs	r1, #132	@ 0x84
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2188      	movs	r1, #136	@ 0x88
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	505a      	str	r2, [r3, r1]
}
 801066e:	46c0      	nop			@ (mov r8, r8)
 8010670:	46bd      	mov	sp, r7
 8010672:	b004      	add	sp, #16
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010678:	b590      	push	{r4, r7, lr}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2280      	movs	r2, #128	@ 0x80
 8010686:	589c      	ldr	r4, [r3, r2]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2284      	movs	r2, #132	@ 0x84
 801068c:	589b      	ldr	r3, [r3, r2]
 801068e:	1c19      	adds	r1, r3, #0
 8010690:	6838      	ldr	r0, [r7, #0]
 8010692:	f7f0 fe2f 	bl	80012f4 <__aeabi_fsub>
 8010696:	1c03      	adds	r3, r0, #0
 8010698:	1c19      	adds	r1, r3, #0
 801069a:	1c20      	adds	r0, r4, #0
 801069c:	f7f0 fcd0 	bl	8001040 <__aeabi_fmul>
 80106a0:	1c03      	adds	r3, r0, #0
 80106a2:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80106a4:	4940      	ldr	r1, [pc, #256]	@ (80107a8 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80106a6:	68b8      	ldr	r0, [r7, #8]
 80106a8:	f7ef ff42 	bl	8000530 <__aeabi_fcmplt>
 80106ac:	1e03      	subs	r3, r0, #0
 80106ae:	d001      	beq.n	80106b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80106b0:	4b3e      	ldr	r3, [pc, #248]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80106b2:	e075      	b.n	80107a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80106b4:	493e      	ldr	r1, [pc, #248]	@ (80107b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80106b6:	68b8      	ldr	r0, [r7, #8]
 80106b8:	f7ef ff4e 	bl	8000558 <__aeabi_fcmpgt>
 80106bc:	1e03      	subs	r3, r0, #0
 80106be:	d001      	beq.n	80106c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80106c0:	2300      	movs	r3, #0
 80106c2:	e06d      	b.n	80107a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80106c4:	2100      	movs	r1, #0
 80106c6:	6838      	ldr	r0, [r7, #0]
 80106c8:	f7ef ff50 	bl	800056c <__aeabi_fcmpge>
 80106cc:	1e03      	subs	r3, r0, #0
 80106ce:	d047      	beq.n	8010760 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2288      	movs	r2, #136	@ 0x88
 80106d4:	589b      	ldr	r3, [r3, r2]
 80106d6:	21fe      	movs	r1, #254	@ 0xfe
 80106d8:	0589      	lsls	r1, r1, #22
 80106da:	1c18      	adds	r0, r3, #0
 80106dc:	f7ef ff22 	bl	8000524 <__aeabi_fcmpeq>
 80106e0:	1e03      	subs	r3, r0, #0
 80106e2:	d00e      	beq.n	8010702 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	1c19      	adds	r1, r3, #0
 80106ea:	20fe      	movs	r0, #254	@ 0xfe
 80106ec:	0580      	lsls	r0, r0, #22
 80106ee:	f7f0 fe01 	bl	80012f4 <__aeabi_fsub>
 80106f2:	1c03      	adds	r3, r0, #0
 80106f4:	492f      	ldr	r1, [pc, #188]	@ (80107b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80106f6:	1c18      	adds	r0, r3, #0
 80106f8:	f7f0 fca2 	bl	8001040 <__aeabi_fmul>
 80106fc:	1c03      	adds	r3, r0, #0
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	e012      	b.n	8010728 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	492c      	ldr	r1, [pc, #176]	@ (80107b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8010708:	1c18      	adds	r0, r3, #0
 801070a:	f7f0 fc99 	bl	8001040 <__aeabi_fmul>
 801070e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8010710:	1c19      	adds	r1, r3, #0
 8010712:	4826      	ldr	r0, [pc, #152]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010714:	f7f0 fdee 	bl	80012f4 <__aeabi_fsub>
 8010718:	1c03      	adds	r3, r0, #0
 801071a:	2181      	movs	r1, #129	@ 0x81
 801071c:	05c9      	lsls	r1, r1, #23
 801071e:	1c18      	adds	r0, r3, #0
 8010720:	f7f0 fac0 	bl	8000ca4 <__aeabi_fdiv>
 8010724:	1c03      	adds	r3, r0, #0
 8010726:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8010728:	4920      	ldr	r1, [pc, #128]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	f7f0 f8c8 	bl	80008c0 <__aeabi_fadd>
 8010730:	1c03      	adds	r3, r0, #0
 8010732:	1c1c      	adds	r4, r3, #0
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	1c18      	adds	r0, r3, #0
 8010738:	f018 fd1c 	bl	8029174 <expf>
 801073c:	1c03      	adds	r3, r0, #0
 801073e:	21fe      	movs	r1, #254	@ 0xfe
 8010740:	0589      	lsls	r1, r1, #22
 8010742:	1c18      	adds	r0, r3, #0
 8010744:	f7f0 f8bc 	bl	80008c0 <__aeabi_fadd>
 8010748:	1c03      	adds	r3, r0, #0
 801074a:	1c19      	adds	r1, r3, #0
 801074c:	1c20      	adds	r0, r4, #0
 801074e:	f7f0 faa9 	bl	8000ca4 <__aeabi_fdiv>
 8010752:	1c03      	adds	r3, r0, #0
 8010754:	68f9      	ldr	r1, [r7, #12]
 8010756:	1c18      	adds	r0, r3, #0
 8010758:	f7f0 fdcc 	bl	80012f4 <__aeabi_fsub>
 801075c:	1c03      	adds	r3, r0, #0
 801075e:	e01f      	b.n	80107a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2188      	movs	r1, #136	@ 0x88
 8010768:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 801076a:	1c19      	adds	r1, r3, #0
 801076c:	1c10      	adds	r0, r2, #0
 801076e:	f7f0 fa99 	bl	8000ca4 <__aeabi_fdiv>
 8010772:	1c03      	adds	r3, r0, #0
 8010774:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	1c18      	adds	r0, r3, #0
 801077a:	f018 fcfb 	bl	8029174 <expf>
 801077e:	1c03      	adds	r3, r0, #0
 8010780:	21fe      	movs	r1, #254	@ 0xfe
 8010782:	0589      	lsls	r1, r1, #22
 8010784:	1c18      	adds	r0, r3, #0
 8010786:	f7f0 f89b 	bl	80008c0 <__aeabi_fadd>
 801078a:	1c03      	adds	r3, r0, #0
 801078c:	1c19      	adds	r1, r3, #0
 801078e:	4807      	ldr	r0, [pc, #28]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010790:	f7f0 fa88 	bl	8000ca4 <__aeabi_fdiv>
 8010794:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010796:	1c19      	adds	r1, r3, #0
 8010798:	1c20      	adds	r0, r4, #0
 801079a:	f7f0 fc51 	bl	8001040 <__aeabi_fmul>
 801079e:	1c03      	adds	r3, r0, #0
        }
    }
}
 80107a0:	1c18      	adds	r0, r3, #0
 80107a2:	46bd      	mov	sp, r7
 80107a4:	b005      	add	sp, #20
 80107a6:	bd90      	pop	{r4, r7, pc}
 80107a8:	c2480000 	.word	0xc2480000
 80107ac:	43fa0000 	.word	0x43fa0000
 80107b0:	42480000 	.word	0x42480000
 80107b4:	3f8041ab 	.word	0x3f8041ab
 80107b8:	40a00000 	.word	0x40a00000

080107bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80107bc:	b590      	push	{r4, r7, lr}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	4913      	ldr	r1, [pc, #76]	@ (801081c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80107ce:	1c18      	adds	r0, r3, #0
 80107d0:	f7f0 f876 	bl	80008c0 <__aeabi_fadd>
 80107d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107d6:	1c19      	adds	r1, r3, #0
 80107d8:	1c20      	adds	r0, r4, #0
 80107da:	f7f0 fa63 	bl	8000ca4 <__aeabi_fdiv>
 80107de:	1c03      	adds	r3, r0, #0
 80107e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	228c      	movs	r2, #140	@ 0x8c
 80107e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	490b      	ldr	r1, [pc, #44]	@ (8010820 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80107f2:	1c18      	adds	r0, r3, #0
 80107f4:	f7f0 f864 	bl	80008c0 <__aeabi_fadd>
 80107f8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107fa:	1c19      	adds	r1, r3, #0
 80107fc:	1c20      	adds	r0, r4, #0
 80107fe:	f7f0 fa51 	bl	8000ca4 <__aeabi_fdiv>
 8010802:	1c03      	adds	r3, r0, #0
 8010804:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2290      	movs	r2, #144	@ 0x90
 801080a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2294      	movs	r2, #148	@ 0x94
 8010810:	2100      	movs	r1, #0
 8010812:	5499      	strb	r1, [r3, r2]
}
 8010814:	46c0      	nop			@ (mov r8, r8)
 8010816:	46bd      	mov	sp, r7
 8010818:	b003      	add	sp, #12
 801081a:	bd90      	pop	{r4, r7, pc}
 801081c:	41a00000 	.word	0x41a00000
 8010820:	43fa0000 	.word	0x43fa0000

08010824 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8010824:	b590      	push	{r4, r7, lr}
 8010826:	b087      	sub	sp, #28
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2294      	movs	r2, #148	@ 0x94
 8010832:	5c9b      	ldrb	r3, [r3, r2]
 8010834:	2201      	movs	r2, #1
 8010836:	4053      	eors	r3, r2
 8010838:	b2db      	uxtb	r3, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00f      	beq.n	801085e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2198      	movs	r1, #152	@ 0x98
 8010842:	683a      	ldr	r2, [r7, #0]
 8010844:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	219c      	movs	r1, #156	@ 0x9c
 801084a:	683a      	ldr	r2, [r7, #0]
 801084c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	21a0      	movs	r1, #160	@ 0xa0
 8010852:	683a      	ldr	r2, [r7, #0]
 8010854:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2294      	movs	r2, #148	@ 0x94
 801085a:	2101      	movs	r1, #1
 801085c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	228c      	movs	r2, #140	@ 0x8c
 8010862:	589b      	ldr	r3, [r3, r2]
 8010864:	1c19      	adds	r1, r3, #0
 8010866:	20fe      	movs	r0, #254	@ 0xfe
 8010868:	0580      	lsls	r0, r0, #22
 801086a:	f7f0 fd43 	bl	80012f4 <__aeabi_fsub>
 801086e:	1c03      	adds	r3, r0, #0
 8010870:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2298      	movs	r2, #152	@ 0x98
 8010876:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010878:	1c19      	adds	r1, r3, #0
 801087a:	f7f0 fbe1 	bl	8001040 <__aeabi_fmul>
 801087e:	1c03      	adds	r3, r0, #0
 8010880:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	228c      	movs	r2, #140	@ 0x8c
 8010886:	589b      	ldr	r3, [r3, r2]
 8010888:	6839      	ldr	r1, [r7, #0]
 801088a:	1c18      	adds	r0, r3, #0
 801088c:	f7f0 fbd8 	bl	8001040 <__aeabi_fmul>
 8010890:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8010892:	1c19      	adds	r1, r3, #0
 8010894:	1c20      	adds	r0, r4, #0
 8010896:	f7f0 f813 	bl	80008c0 <__aeabi_fadd>
 801089a:	1c03      	adds	r3, r0, #0
 801089c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2298      	movs	r2, #152	@ 0x98
 80108a2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2290      	movs	r2, #144	@ 0x90
 80108a8:	589b      	ldr	r3, [r3, r2]
 80108aa:	1c19      	adds	r1, r3, #0
 80108ac:	20fe      	movs	r0, #254	@ 0xfe
 80108ae:	0580      	lsls	r0, r0, #22
 80108b0:	f7f0 fd20 	bl	80012f4 <__aeabi_fsub>
 80108b4:	1c03      	adds	r3, r0, #0
 80108b6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	229c      	movs	r2, #156	@ 0x9c
 80108bc:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80108be:	1c19      	adds	r1, r3, #0
 80108c0:	f7f0 fbbe 	bl	8001040 <__aeabi_fmul>
 80108c4:	1c03      	adds	r3, r0, #0
 80108c6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2290      	movs	r2, #144	@ 0x90
 80108cc:	589b      	ldr	r3, [r3, r2]
 80108ce:	6839      	ldr	r1, [r7, #0]
 80108d0:	1c18      	adds	r0, r3, #0
 80108d2:	f7f0 fbb5 	bl	8001040 <__aeabi_fmul>
 80108d6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80108d8:	1c19      	adds	r1, r3, #0
 80108da:	1c20      	adds	r0, r4, #0
 80108dc:	f7ef fff0 	bl	80008c0 <__aeabi_fadd>
 80108e0:	1c03      	adds	r3, r0, #0
 80108e2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	229c      	movs	r2, #156	@ 0x9c
 80108e8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2298      	movs	r2, #152	@ 0x98
 80108ee:	589a      	ldr	r2, [r3, r2]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	219c      	movs	r1, #156	@ 0x9c
 80108f4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80108f6:	1c19      	adds	r1, r3, #0
 80108f8:	1c10      	adds	r0, r2, #0
 80108fa:	f7f0 fcfb 	bl	80012f4 <__aeabi_fsub>
 80108fe:	1c03      	adds	r3, r0, #0
 8010900:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8010902:	2100      	movs	r1, #0
 8010904:	6978      	ldr	r0, [r7, #20]
 8010906:	f7ef fe13 	bl	8000530 <__aeabi_fcmplt>
 801090a:	1e03      	subs	r3, r0, #0
 801090c:	d004      	beq.n	8010918 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	2280      	movs	r2, #128	@ 0x80
 8010912:	0612      	lsls	r2, r2, #24
 8010914:	4053      	eors	r3, r2
 8010916:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8010918:	4923      	ldr	r1, [pc, #140]	@ (80109a8 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 801091a:	6978      	ldr	r0, [r7, #20]
 801091c:	f7f0 fb90 	bl	8001040 <__aeabi_fmul>
 8010920:	1c03      	adds	r3, r0, #0
 8010922:	1c18      	adds	r0, r3, #0
 8010924:	f018 fc26 	bl	8029174 <expf>
 8010928:	1c03      	adds	r3, r0, #0
 801092a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 801092c:	491f      	ldr	r1, [pc, #124]	@ (80109ac <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 801092e:	6938      	ldr	r0, [r7, #16]
 8010930:	f7f0 fb86 	bl	8001040 <__aeabi_fmul>
 8010934:	1c03      	adds	r3, r0, #0
 8010936:	491e      	ldr	r1, [pc, #120]	@ (80109b0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010938:	1c18      	adds	r0, r3, #0
 801093a:	f7ef ffc1 	bl	80008c0 <__aeabi_fadd>
 801093e:	1c03      	adds	r3, r0, #0
 8010940:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	685c      	ldr	r4, [r3, #4]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	68f9      	ldr	r1, [r7, #12]
 801094c:	1c18      	adds	r0, r3, #0
 801094e:	f7ef ffb7 	bl	80008c0 <__aeabi_fadd>
 8010952:	1c03      	adds	r3, r0, #0
 8010954:	1c19      	adds	r1, r3, #0
 8010956:	1c20      	adds	r0, r4, #0
 8010958:	f7f0 f9a4 	bl	8000ca4 <__aeabi_fdiv>
 801095c:	1c03      	adds	r3, r0, #0
 801095e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010960:	68b9      	ldr	r1, [r7, #8]
 8010962:	20fe      	movs	r0, #254	@ 0xfe
 8010964:	0580      	lsls	r0, r0, #22
 8010966:	f7f0 fcc5 	bl	80012f4 <__aeabi_fsub>
 801096a:	1c03      	adds	r3, r0, #0
 801096c:	1c18      	adds	r0, r3, #0
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	22a0      	movs	r2, #160	@ 0xa0
 8010972:	589b      	ldr	r3, [r3, r2]
 8010974:	1c19      	adds	r1, r3, #0
 8010976:	f7f0 fb63 	bl	8001040 <__aeabi_fmul>
 801097a:	1c03      	adds	r3, r0, #0
 801097c:	1c1c      	adds	r4, r3, #0
 801097e:	6839      	ldr	r1, [r7, #0]
 8010980:	68b8      	ldr	r0, [r7, #8]
 8010982:	f7f0 fb5d 	bl	8001040 <__aeabi_fmul>
 8010986:	1c03      	adds	r3, r0, #0
 8010988:	1c19      	adds	r1, r3, #0
 801098a:	1c20      	adds	r0, r4, #0
 801098c:	f7ef ff98 	bl	80008c0 <__aeabi_fadd>
 8010990:	1c03      	adds	r3, r0, #0
 8010992:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	22a0      	movs	r2, #160	@ 0xa0
 8010998:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	22a0      	movs	r2, #160	@ 0xa0
 801099e:	589b      	ldr	r3, [r3, r2]
}
 80109a0:	1c18      	adds	r0, r3, #0
 80109a2:	46bd      	mov	sp, r7
 80109a4:	b007      	add	sp, #28
 80109a6:	bd90      	pop	{r4, r7, pc}
 80109a8:	be4ccccd 	.word	0xbe4ccccd
 80109ac:	43f00000 	.word	0x43f00000
 80109b0:	41a00000 	.word	0x41a00000

080109b4 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	000a      	movs	r2, r1
 80109be:	1cbb      	adds	r3, r7, #2
 80109c0:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80109c2:	230d      	movs	r3, #13
 80109c4:	18fb      	adds	r3, r7, r3
 80109c6:	22ff      	movs	r2, #255	@ 0xff
 80109c8:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80109ca:	230e      	movs	r3, #14
 80109cc:	18fb      	adds	r3, r7, r3
 80109ce:	2200      	movs	r2, #0
 80109d0:	801a      	strh	r2, [r3, #0]
 80109d2:	e038      	b.n	8010a46 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80109d4:	230e      	movs	r3, #14
 80109d6:	18fb      	adds	r3, r7, r3
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	18d3      	adds	r3, r2, r3
 80109de:	7819      	ldrb	r1, [r3, #0]
 80109e0:	220d      	movs	r2, #13
 80109e2:	18bb      	adds	r3, r7, r2
 80109e4:	18ba      	adds	r2, r7, r2
 80109e6:	7812      	ldrb	r2, [r2, #0]
 80109e8:	404a      	eors	r2, r1
 80109ea:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80109ec:	230c      	movs	r3, #12
 80109ee:	18fb      	adds	r3, r7, r3
 80109f0:	2208      	movs	r2, #8
 80109f2:	701a      	strb	r2, [r3, #0]
 80109f4:	e01c      	b.n	8010a30 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80109f6:	210d      	movs	r1, #13
 80109f8:	187b      	adds	r3, r7, r1
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	b25b      	sxtb	r3, r3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	da0a      	bge.n	8010a18 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010a02:	187b      	adds	r3, r7, r1
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	b25b      	sxtb	r3, r3
 8010a08:	18db      	adds	r3, r3, r3
 8010a0a:	b25b      	sxtb	r3, r3
 8010a0c:	2231      	movs	r2, #49	@ 0x31
 8010a0e:	4053      	eors	r3, r2
 8010a10:	b25a      	sxtb	r2, r3
 8010a12:	187b      	adds	r3, r7, r1
 8010a14:	701a      	strb	r2, [r3, #0]
 8010a16:	e005      	b.n	8010a24 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010a18:	230d      	movs	r3, #13
 8010a1a:	18fa      	adds	r2, r7, r3
 8010a1c:	18fb      	adds	r3, r7, r3
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	18db      	adds	r3, r3, r3
 8010a22:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010a24:	220c      	movs	r2, #12
 8010a26:	18bb      	adds	r3, r7, r2
 8010a28:	18ba      	adds	r2, r7, r2
 8010a2a:	7812      	ldrb	r2, [r2, #0]
 8010a2c:	3a01      	subs	r2, #1
 8010a2e:	701a      	strb	r2, [r3, #0]
 8010a30:	230c      	movs	r3, #12
 8010a32:	18fb      	adds	r3, r7, r3
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1dd      	bne.n	80109f6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010a3a:	220e      	movs	r2, #14
 8010a3c:	18bb      	adds	r3, r7, r2
 8010a3e:	18ba      	adds	r2, r7, r2
 8010a40:	8812      	ldrh	r2, [r2, #0]
 8010a42:	3201      	adds	r2, #1
 8010a44:	801a      	strh	r2, [r3, #0]
 8010a46:	230e      	movs	r3, #14
 8010a48:	18fa      	adds	r2, r7, r3
 8010a4a:	1cbb      	adds	r3, r7, #2
 8010a4c:	8812      	ldrh	r2, [r2, #0]
 8010a4e:	881b      	ldrh	r3, [r3, #0]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d3bf      	bcc.n	80109d4 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010a54:	230d      	movs	r3, #13
 8010a56:	18fb      	adds	r3, r7, r3
 8010a58:	781b      	ldrb	r3, [r3, #0]
}
 8010a5a:	0018      	movs	r0, r3
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	b004      	add	sp, #16
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b082      	sub	sp, #8
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	0008      	movs	r0, r1
 8010a6c:	0011      	movs	r1, r2
 8010a6e:	1cbb      	adds	r3, r7, #2
 8010a70:	1c02      	adds	r2, r0, #0
 8010a72:	801a      	strh	r2, [r3, #0]
 8010a74:	1c7b      	adds	r3, r7, #1
 8010a76:	1c0a      	adds	r2, r1, #0
 8010a78:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010a7a:	1cbb      	adds	r3, r7, #2
 8010a7c:	881a      	ldrh	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	0011      	movs	r1, r2
 8010a82:	0018      	movs	r0, r3
 8010a84:	f7ff ff96 	bl	80109b4 <sensirion_i2c_generate_crc>
 8010a88:	0003      	movs	r3, r0
 8010a8a:	001a      	movs	r2, r3
 8010a8c:	1c7b      	adds	r3, r7, #1
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d001      	beq.n	8010a98 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010a94:	2301      	movs	r3, #1
 8010a96:	e000      	b.n	8010a9a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	0018      	movs	r0, r3
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	b002      	add	sp, #8
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b082      	sub	sp, #8
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	0008      	movs	r0, r1
 8010aac:	0011      	movs	r1, r2
 8010aae:	1cbb      	adds	r3, r7, #2
 8010ab0:	1c02      	adds	r2, r0, #0
 8010ab2:	801a      	strh	r2, [r3, #0]
 8010ab4:	003b      	movs	r3, r7
 8010ab6:	1c0a      	adds	r2, r1, #0
 8010ab8:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010aba:	003b      	movs	r3, r7
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	0a1b      	lsrs	r3, r3, #8
 8010ac0:	b299      	uxth	r1, r3
 8010ac2:	1cbb      	adds	r3, r7, #2
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	1cba      	adds	r2, r7, #2
 8010ac8:	1c58      	adds	r0, r3, #1
 8010aca:	8010      	strh	r0, [r2, #0]
 8010acc:	001a      	movs	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	189b      	adds	r3, r3, r2
 8010ad2:	b2ca      	uxtb	r2, r1
 8010ad4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010ad6:	1cbb      	adds	r3, r7, #2
 8010ad8:	881b      	ldrh	r3, [r3, #0]
 8010ada:	1cba      	adds	r2, r7, #2
 8010adc:	1c59      	adds	r1, r3, #1
 8010ade:	8011      	strh	r1, [r2, #0]
 8010ae0:	001a      	movs	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	189b      	adds	r3, r3, r2
 8010ae6:	003a      	movs	r2, r7
 8010ae8:	8812      	ldrh	r2, [r2, #0]
 8010aea:	b2d2      	uxtb	r2, r2
 8010aec:	701a      	strb	r2, [r3, #0]
    return offset;
 8010aee:	1cbb      	adds	r3, r7, #2
 8010af0:	881b      	ldrh	r3, [r3, #0]
}
 8010af2:	0018      	movs	r0, r3
 8010af4:	46bd      	mov	sp, r7
 8010af6:	b002      	add	sp, #8
 8010af8:	bd80      	pop	{r7, pc}

08010afa <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010afa:	b590      	push	{r4, r7, lr}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	0008      	movs	r0, r1
 8010b04:	0011      	movs	r1, r2
 8010b06:	1cbb      	adds	r3, r7, #2
 8010b08:	1c02      	adds	r2, r0, #0
 8010b0a:	801a      	strh	r2, [r3, #0]
 8010b0c:	003b      	movs	r3, r7
 8010b0e:	1c0a      	adds	r2, r1, #0
 8010b10:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010b12:	003b      	movs	r3, r7
 8010b14:	881b      	ldrh	r3, [r3, #0]
 8010b16:	0a1b      	lsrs	r3, r3, #8
 8010b18:	b299      	uxth	r1, r3
 8010b1a:	1cbb      	adds	r3, r7, #2
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	1cba      	adds	r2, r7, #2
 8010b20:	1c58      	adds	r0, r3, #1
 8010b22:	8010      	strh	r0, [r2, #0]
 8010b24:	001a      	movs	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	189b      	adds	r3, r3, r2
 8010b2a:	b2ca      	uxtb	r2, r1
 8010b2c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010b2e:	1cbb      	adds	r3, r7, #2
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	1cba      	adds	r2, r7, #2
 8010b34:	1c59      	adds	r1, r3, #1
 8010b36:	8011      	strh	r1, [r2, #0]
 8010b38:	001a      	movs	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	189b      	adds	r3, r3, r2
 8010b3e:	003a      	movs	r2, r7
 8010b40:	8812      	ldrh	r2, [r2, #0]
 8010b42:	b2d2      	uxtb	r2, r2
 8010b44:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010b46:	1cbb      	adds	r3, r7, #2
 8010b48:	881b      	ldrh	r3, [r3, #0]
 8010b4a:	3b02      	subs	r3, #2
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010b50:	1cbb      	adds	r3, r7, #2
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	18d4      	adds	r4, r2, r3
 8010b58:	2102      	movs	r1, #2
 8010b5a:	f7ff ff2b 	bl	80109b4 <sensirion_i2c_generate_crc>
 8010b5e:	0003      	movs	r3, r0
 8010b60:	7023      	strb	r3, [r4, #0]
    offset++;
 8010b62:	1cbb      	adds	r3, r7, #2
 8010b64:	881a      	ldrh	r2, [r3, #0]
 8010b66:	1cbb      	adds	r3, r7, #2
 8010b68:	3201      	adds	r2, #1
 8010b6a:	801a      	strh	r2, [r3, #0]

    return offset;
 8010b6c:	1cbb      	adds	r3, r7, #2
 8010b6e:	881b      	ldrh	r3, [r3, #0]
}
 8010b70:	0018      	movs	r0, r3
 8010b72:	46bd      	mov	sp, r7
 8010b74:	b003      	add	sp, #12
 8010b76:	bd90      	pop	{r4, r7, pc}

08010b78 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	0008      	movs	r0, r1
 8010b82:	0011      	movs	r1, r2
 8010b84:	1cbb      	adds	r3, r7, #2
 8010b86:	1c02      	adds	r2, r0, #0
 8010b88:	801a      	strh	r2, [r3, #0]
 8010b8a:	003b      	movs	r3, r7
 8010b8c:	1c0a      	adds	r2, r1, #0
 8010b8e:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010b90:	003b      	movs	r3, r7
 8010b92:	881a      	ldrh	r2, [r3, #0]
 8010b94:	1cbb      	adds	r3, r7, #2
 8010b96:	8819      	ldrh	r1, [r3, #0]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	0018      	movs	r0, r3
 8010b9c:	f7ff ffad 	bl	8010afa <sensirion_i2c_add_uint16_t_to_buffer>
 8010ba0:	0003      	movs	r3, r0
}
 8010ba2:	0018      	movs	r0, r3
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	b002      	add	sp, #8
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6039      	str	r1, [r7, #0]
 8010bb2:	0011      	movs	r1, r2
 8010bb4:	1dfb      	adds	r3, r7, #7
 8010bb6:	1c02      	adds	r2, r0, #0
 8010bb8:	701a      	strb	r2, [r3, #0]
 8010bba:	1d3b      	adds	r3, r7, #4
 8010bbc:	1c0a      	adds	r2, r1, #0
 8010bbe:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010bc0:	1d3b      	adds	r3, r7, #4
 8010bc2:	881a      	ldrh	r2, [r3, #0]
 8010bc4:	6839      	ldr	r1, [r7, #0]
 8010bc6:	1dfb      	adds	r3, r7, #7
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	0018      	movs	r0, r3
 8010bcc:	f7fe f9b0 	bl	800ef30 <sensirion_i2c_hal_write>
 8010bd0:	0003      	movs	r3, r0
}
 8010bd2:	0018      	movs	r0, r3
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	b002      	add	sp, #8
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010bda:	b5b0      	push	{r4, r5, r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6039      	str	r1, [r7, #0]
 8010be2:	0011      	movs	r1, r2
 8010be4:	1dfb      	adds	r3, r7, #7
 8010be6:	1c02      	adds	r2, r0, #0
 8010be8:	701a      	strb	r2, [r3, #0]
 8010bea:	1d3b      	adds	r3, r7, #4
 8010bec:	1c0a      	adds	r2, r1, #0
 8010bee:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010bf0:	1d3b      	adds	r3, r7, #4
 8010bf2:	881b      	ldrh	r3, [r3, #0]
 8010bf4:	085b      	lsrs	r3, r3, #1
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	220a      	movs	r2, #10
 8010bfa:	18ba      	adds	r2, r7, r2
 8010bfc:	1c19      	adds	r1, r3, #0
 8010bfe:	1c0b      	adds	r3, r1, #0
 8010c00:	18db      	adds	r3, r3, r3
 8010c02:	185b      	adds	r3, r3, r1
 8010c04:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010c06:	1d3b      	adds	r3, r7, #4
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010c14:	2304      	movs	r3, #4
 8010c16:	e06b      	b.n	8010cf0 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010c18:	230a      	movs	r3, #10
 8010c1a:	18fb      	adds	r3, r7, r3
 8010c1c:	881a      	ldrh	r2, [r3, #0]
 8010c1e:	6839      	ldr	r1, [r7, #0]
 8010c20:	1dfb      	adds	r3, r7, #7
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	0018      	movs	r0, r3
 8010c26:	f7fe f963 	bl	800eef0 <sensirion_i2c_hal_read>
 8010c2a:	0003      	movs	r3, r0
 8010c2c:	001a      	movs	r2, r3
 8010c2e:	2108      	movs	r1, #8
 8010c30:	187b      	adds	r3, r7, r1
 8010c32:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010c34:	000a      	movs	r2, r1
 8010c36:	18bb      	adds	r3, r7, r2
 8010c38:	2100      	movs	r1, #0
 8010c3a:	5e5b      	ldrsh	r3, [r3, r1]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d003      	beq.n	8010c48 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010c40:	18bb      	adds	r3, r7, r2
 8010c42:	2200      	movs	r2, #0
 8010c44:	5e9b      	ldrsh	r3, [r3, r2]
 8010c46:	e053      	b.n	8010cf0 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010c48:	230e      	movs	r3, #14
 8010c4a:	18fb      	adds	r3, r7, r3
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	801a      	strh	r2, [r3, #0]
 8010c50:	230c      	movs	r3, #12
 8010c52:	18fb      	adds	r3, r7, r3
 8010c54:	2200      	movs	r2, #0
 8010c56:	801a      	strh	r2, [r3, #0]
 8010c58:	e041      	b.n	8010cde <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c5a:	210e      	movs	r1, #14
 8010c5c:	187b      	adds	r3, r7, r1
 8010c5e:	881b      	ldrh	r3, [r3, #0]
 8010c60:	683a      	ldr	r2, [r7, #0]
 8010c62:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010c64:	187b      	adds	r3, r7, r1
 8010c66:	881b      	ldrh	r3, [r3, #0]
 8010c68:	3302      	adds	r3, #2
 8010c6a:	683a      	ldr	r2, [r7, #0]
 8010c6c:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	001a      	movs	r2, r3
 8010c72:	2102      	movs	r1, #2
 8010c74:	f7ff fef5 	bl	8010a62 <sensirion_i2c_check_crc>
 8010c78:	0003      	movs	r3, r0
 8010c7a:	001a      	movs	r2, r3
 8010c7c:	2108      	movs	r1, #8
 8010c7e:	187b      	adds	r3, r7, r1
 8010c80:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010c82:	000a      	movs	r2, r1
 8010c84:	18bb      	adds	r3, r7, r2
 8010c86:	2100      	movs	r1, #0
 8010c88:	5e5b      	ldrsh	r3, [r3, r1]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d003      	beq.n	8010c96 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010c8e:	18bb      	adds	r3, r7, r2
 8010c90:	2200      	movs	r2, #0
 8010c92:	5e9b      	ldrsh	r3, [r3, r2]
 8010c94:	e02c      	b.n	8010cf0 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010c96:	240e      	movs	r4, #14
 8010c98:	193b      	adds	r3, r7, r4
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	683a      	ldr	r2, [r7, #0]
 8010c9e:	18d2      	adds	r2, r2, r3
 8010ca0:	250c      	movs	r5, #12
 8010ca2:	197b      	adds	r3, r7, r5
 8010ca4:	881b      	ldrh	r3, [r3, #0]
 8010ca6:	1979      	adds	r1, r7, r5
 8010ca8:	1c58      	adds	r0, r3, #1
 8010caa:	8008      	strh	r0, [r1, #0]
 8010cac:	0019      	movs	r1, r3
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	185b      	adds	r3, r3, r1
 8010cb2:	7812      	ldrb	r2, [r2, #0]
 8010cb4:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010cb6:	193b      	adds	r3, r7, r4
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	683a      	ldr	r2, [r7, #0]
 8010cbe:	18d2      	adds	r2, r2, r3
 8010cc0:	197b      	adds	r3, r7, r5
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	1979      	adds	r1, r7, r5
 8010cc6:	1c58      	adds	r0, r3, #1
 8010cc8:	8008      	strh	r0, [r1, #0]
 8010cca:	0019      	movs	r1, r3
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	185b      	adds	r3, r3, r1
 8010cd0:	7812      	ldrb	r2, [r2, #0]
 8010cd2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010cd4:	193b      	adds	r3, r7, r4
 8010cd6:	193a      	adds	r2, r7, r4
 8010cd8:	8812      	ldrh	r2, [r2, #0]
 8010cda:	3203      	adds	r2, #3
 8010cdc:	801a      	strh	r2, [r3, #0]
 8010cde:	230e      	movs	r3, #14
 8010ce0:	18fa      	adds	r2, r7, r3
 8010ce2:	230a      	movs	r3, #10
 8010ce4:	18fb      	adds	r3, r7, r3
 8010ce6:	8812      	ldrh	r2, [r2, #0]
 8010ce8:	881b      	ldrh	r3, [r3, #0]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d3b5      	bcc.n	8010c5a <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010cee:	2300      	movs	r3, #0
}
 8010cf0:	0018      	movs	r0, r3
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	b004      	add	sp, #16
 8010cf6:	bdb0      	pop	{r4, r5, r7, pc}

08010cf8 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010cf8:	b590      	push	{r4, r7, lr}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6039      	str	r1, [r7, #0]
 8010d00:	0011      	movs	r1, r2
 8010d02:	1dfb      	adds	r3, r7, #7
 8010d04:	1c02      	adds	r2, r0, #0
 8010d06:	701a      	strb	r2, [r3, #0]
 8010d08:	1dbb      	adds	r3, r7, #6
 8010d0a:	1c0a      	adds	r2, r1, #0
 8010d0c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010d0e:	4b08      	ldr	r3, [pc, #32]	@ (8010d30 <ReadRegister+0x38>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d008      	beq.n	8010d28 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010d16:	4b06      	ldr	r3, [pc, #24]	@ (8010d30 <ReadRegister+0x38>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	1dba      	adds	r2, r7, #6
 8010d1c:	7814      	ldrb	r4, [r2, #0]
 8010d1e:	6839      	ldr	r1, [r7, #0]
 8010d20:	1dfa      	adds	r2, r7, #7
 8010d22:	7810      	ldrb	r0, [r2, #0]
 8010d24:	0022      	movs	r2, r4
 8010d26:	4798      	blx	r3
  }
}
 8010d28:	46c0      	nop			@ (mov r8, r8)
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	b003      	add	sp, #12
 8010d2e:	bd90      	pop	{r4, r7, pc}
 8010d30:	200011e8 	.word	0x200011e8

08010d34 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6039      	str	r1, [r7, #0]
 8010d3c:	0011      	movs	r1, r2
 8010d3e:	1dfb      	adds	r3, r7, #7
 8010d40:	1c02      	adds	r2, r0, #0
 8010d42:	701a      	strb	r2, [r3, #0]
 8010d44:	1dbb      	adds	r3, r7, #6
 8010d46:	1c0a      	adds	r2, r1, #0
 8010d48:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010d4a:	4b08      	ldr	r3, [pc, #32]	@ (8010d6c <WriteRegister+0x38>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d008      	beq.n	8010d64 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010d52:	4b06      	ldr	r3, [pc, #24]	@ (8010d6c <WriteRegister+0x38>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	1dba      	adds	r2, r7, #6
 8010d58:	7814      	ldrb	r4, [r2, #0]
 8010d5a:	6839      	ldr	r1, [r7, #0]
 8010d5c:	1dfa      	adds	r2, r7, #7
 8010d5e:	7810      	ldrb	r0, [r2, #0]
 8010d60:	0022      	movs	r2, r4
 8010d62:	4798      	blx	r3
  }
}
 8010d64:	46c0      	nop			@ (mov r8, r8)
 8010d66:	46bd      	mov	sp, r7
 8010d68:	b003      	add	sp, #12
 8010d6a:	bd90      	pop	{r4, r7, pc}
 8010d6c:	200011ec 	.word	0x200011ec

08010d70 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010d78:	f003 fdce 	bl	8014918 <HAL_GetTick>
 8010d7c:	0002      	movs	r2, r0
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	18d2      	adds	r2, r2, r3
 8010d82:	4b03      	ldr	r3, [pc, #12]	@ (8010d90 <setSGP40TimeStamp+0x20>)
 8010d84:	601a      	str	r2, [r3, #0]
}
 8010d86:	46c0      	nop			@ (mov r8, r8)
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	b002      	add	sp, #8
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	46c0      	nop			@ (mov r8, r8)
 8010d90:	200011fc 	.word	0x200011fc

08010d94 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010d94:	b580      	push	{r7, lr}
 8010d96:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010d98:	4b02      	ldr	r3, [pc, #8]	@ (8010da4 <ResetSGP40samplecounter+0x10>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	701a      	strb	r2, [r3, #0]
}
 8010d9e:	46c0      	nop			@ (mov r8, r8)
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	200011fa 	.word	0x200011fa

08010da8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010db2:	4b07      	ldr	r3, [pc, #28]	@ (8010dd0 <SGP_Init+0x28>)
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010db8:	4b06      	ldr	r3, [pc, #24]	@ (8010dd4 <SGP_Init+0x2c>)
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010dbe:	4b06      	ldr	r3, [pc, #24]	@ (8010dd8 <SGP_Init+0x30>)
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	f7fe ff72 	bl	800fcac <GasIndexAlgorithm_init>
}
 8010dc8:	46c0      	nop			@ (mov r8, r8)
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	b002      	add	sp, #8
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	200011e8 	.word	0x200011e8
 8010dd4:	200011ec 	.word	0x200011ec
 8010dd8:	20001204 	.word	0x20001204

08010ddc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010de0:	4b07      	ldr	r3, [pc, #28]	@ (8010e00 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d004      	beq.n	8010df2 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010de8:	4b06      	ldr	r3, [pc, #24]	@ (8010e04 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010dea:	22fe      	movs	r2, #254	@ 0xfe
 8010dec:	0592      	lsls	r2, r2, #22
 8010dee:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010df0:	e002      	b.n	8010df8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010df2:	4b04      	ldr	r3, [pc, #16]	@ (8010e04 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010df4:	4a04      	ldr	r2, [pc, #16]	@ (8010e08 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010df6:	605a      	str	r2, [r3, #4]
}
 8010df8:	46c0      	nop			@ (mov r8, r8)
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	46c0      	nop			@ (mov r8, r8)
 8010e00:	20002151 	.word	0x20002151
 8010e04:	20001204 	.word	0x20001204
 8010e08:	44610000 	.word	0x44610000

08010e0c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010e10:	4b13      	ldr	r3, [pc, #76]	@ (8010e60 <SGP_StartMeasurement+0x54>)
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00d      	beq.n	8010e34 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010e18:	4b12      	ldr	r3, [pc, #72]	@ (8010e64 <SGP_StartMeasurement+0x58>)
 8010e1a:	2208      	movs	r2, #8
 8010e1c:	0019      	movs	r1, r3
 8010e1e:	2059      	movs	r0, #89	@ 0x59
 8010e20:	f7ff ff88 	bl	8010d34 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010e24:	f003 fd78 	bl	8014918 <HAL_GetTick>
 8010e28:	0003      	movs	r3, r0
 8010e2a:	331e      	adds	r3, #30
 8010e2c:	001a      	movs	r2, r3
 8010e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e68 <SGP_StartMeasurement+0x5c>)
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	e00c      	b.n	8010e4e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010e34:	4b0d      	ldr	r3, [pc, #52]	@ (8010e6c <SGP_StartMeasurement+0x60>)
 8010e36:	2208      	movs	r2, #8
 8010e38:	0019      	movs	r1, r3
 8010e3a:	2059      	movs	r0, #89	@ 0x59
 8010e3c:	f7ff ff7a 	bl	8010d34 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010e40:	f003 fd6a 	bl	8014918 <HAL_GetTick>
 8010e44:	0003      	movs	r3, r0
 8010e46:	33aa      	adds	r3, #170	@ 0xaa
 8010e48:	001a      	movs	r2, r3
 8010e4a:	4b09      	ldr	r3, [pc, #36]	@ (8010e70 <SGP_StartMeasurement+0x64>)
 8010e4c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010e4e:	4b09      	ldr	r3, [pc, #36]	@ (8010e74 <SGP_StartMeasurement+0x68>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010e54:	4b08      	ldr	r3, [pc, #32]	@ (8010e78 <SGP_StartMeasurement+0x6c>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	701a      	strb	r2, [r3, #0]
}
 8010e5a:	46c0      	nop			@ (mov r8, r8)
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	200012ac 	.word	0x200012ac
 8010e64:	200000bc 	.word	0x200000bc
 8010e68:	200000d0 	.word	0x200000d0
 8010e6c:	200000b4 	.word	0x200000b4
 8010e70:	200000c8 	.word	0x200000c8
 8010e74:	20001200 	.word	0x20001200
 8010e78:	20001201 	.word	0x20001201

08010e7c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010e80:	4b04      	ldr	r3, [pc, #16]	@ (8010e94 <SGP_HeatedUp+0x18>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	0018      	movs	r0, r3
 8010e86:	f002 ff79 	bl	8013d7c <TimestampIsReached>
 8010e8a:	0003      	movs	r3, r0
}
 8010e8c:	0018      	movs	r0, r3
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	46c0      	nop			@ (mov r8, r8)
 8010e94:	200000c8 	.word	0x200000c8

08010e98 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010e9c:	4b04      	ldr	r3, [pc, #16]	@ (8010eb0 <SGP_MeasurementReady+0x18>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	0018      	movs	r0, r3
 8010ea2:	f002 ff6b 	bl	8013d7c <TimestampIsReached>
 8010ea6:	0003      	movs	r3, r0
}
 8010ea8:	0018      	movs	r0, r3
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	46c0      	nop			@ (mov r8, r8)
 8010eb0:	200000d0 	.word	0x200000d0

08010eb4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010eb8:	4b04      	ldr	r3, [pc, #16]	@ (8010ecc <SGP_MeasurementDone+0x18>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	0018      	movs	r0, r3
 8010ebe:	f002 ff5d 	bl	8013d7c <TimestampIsReached>
 8010ec2:	0003      	movs	r3, r0
}
 8010ec4:	0018      	movs	r0, r3
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	46c0      	nop			@ (mov r8, r8)
 8010ecc:	200000cc 	.word	0x200000cc

08010ed0 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010ed4:	4b04      	ldr	r3, [pc, #16]	@ (8010ee8 <SGP_TurnHeaterOff+0x18>)
 8010ed6:	2202      	movs	r2, #2
 8010ed8:	0019      	movs	r1, r3
 8010eda:	2059      	movs	r0, #89	@ 0x59
 8010edc:	f7ff ff2a 	bl	8010d34 <WriteRegister>
}
 8010ee0:	46c0      	nop			@ (mov r8, r8)
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	46c0      	nop			@ (mov r8, r8)
 8010ee8:	200000ac 	.word	0x200000ac

08010eec <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010eec:	b590      	push	{r4, r7, lr}
 8010eee:	b087      	sub	sp, #28
 8010ef0:	af02      	add	r7, sp, #8
 8010ef2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010ef4:	f7ff ffc2 	bl	8010e7c <SGP_HeatedUp>
 8010ef8:	1e03      	subs	r3, r0, #0
 8010efa:	d032      	beq.n	8010f62 <SGP_GetMeasurementValues+0x76>
 8010efc:	4b80      	ldr	r3, [pc, #512]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	2201      	movs	r2, #1
 8010f02:	4053      	eors	r3, r2
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d02b      	beq.n	8010f62 <SGP_GetMeasurementValues+0x76>
 8010f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	4053      	eors	r3, r2
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d024      	beq.n	8010f62 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010f18:	4b79      	ldr	r3, [pc, #484]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8011108 <SGP_GetMeasurementValues+0x21c>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00d      	beq.n	8010f42 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f26:	4b79      	ldr	r3, [pc, #484]	@ (801110c <SGP_GetMeasurementValues+0x220>)
 8010f28:	2208      	movs	r2, #8
 8010f2a:	0019      	movs	r1, r3
 8010f2c:	2059      	movs	r0, #89	@ 0x59
 8010f2e:	f7ff ff01 	bl	8010d34 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f32:	f003 fcf1 	bl	8014918 <HAL_GetTick>
 8010f36:	0003      	movs	r3, r0
 8010f38:	331e      	adds	r3, #30
 8010f3a:	001a      	movs	r2, r3
 8010f3c:	4b74      	ldr	r3, [pc, #464]	@ (8011110 <SGP_GetMeasurementValues+0x224>)
 8010f3e:	601a      	str	r2, [r3, #0]
 8010f40:	e00c      	b.n	8010f5c <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f42:	4b74      	ldr	r3, [pc, #464]	@ (8011114 <SGP_GetMeasurementValues+0x228>)
 8010f44:	2208      	movs	r2, #8
 8010f46:	0019      	movs	r1, r3
 8010f48:	2059      	movs	r0, #89	@ 0x59
 8010f4a:	f7ff fef3 	bl	8010d34 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f4e:	f003 fce3 	bl	8014918 <HAL_GetTick>
 8010f52:	0003      	movs	r3, r0
 8010f54:	331e      	adds	r3, #30
 8010f56:	001a      	movs	r2, r3
 8010f58:	4b6d      	ldr	r3, [pc, #436]	@ (8011110 <SGP_GetMeasurementValues+0x224>)
 8010f5a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010f5c:	4b69      	ldr	r3, [pc, #420]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 8010f5e:	2201      	movs	r2, #1
 8010f60:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8010f62:	4b67      	ldr	r3, [pc, #412]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d100      	bne.n	8010f6c <SGP_GetMeasurementValues+0x80>
 8010f6a:	e0ac      	b.n	80110c6 <SGP_GetMeasurementValues+0x1da>
 8010f6c:	f7ff ff94 	bl	8010e98 <SGP_MeasurementReady>
 8010f70:	1e03      	subs	r3, r0, #0
 8010f72:	d100      	bne.n	8010f76 <SGP_GetMeasurementValues+0x8a>
 8010f74:	e0a7      	b.n	80110c6 <SGP_GetMeasurementValues+0x1da>
 8010f76:	4b68      	ldr	r3, [pc, #416]	@ (8011118 <SGP_GetMeasurementValues+0x22c>)
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	4053      	eors	r3, r2
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d100      	bne.n	8010f86 <SGP_GetMeasurementValues+0x9a>
 8010f84:	e09f      	b.n	80110c6 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010f86:	4b64      	ldr	r3, [pc, #400]	@ (8011118 <SGP_GetMeasurementValues+0x22c>)
 8010f88:	2201      	movs	r2, #1
 8010f8a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010f8c:	4b63      	ldr	r3, [pc, #396]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8010f8e:	2203      	movs	r2, #3
 8010f90:	0019      	movs	r1, r3
 8010f92:	2059      	movs	r0, #89	@ 0x59
 8010f94:	f7ff feb0 	bl	8010cf8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010f98:	4b60      	ldr	r3, [pc, #384]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8010f9a:	2203      	movs	r2, #3
 8010f9c:	2103      	movs	r1, #3
 8010f9e:	0018      	movs	r0, r3
 8010fa0:	f000 f91a 	bl	80111d8 <CheckCRC>
 8010fa4:	0003      	movs	r3, r0
 8010fa6:	001a      	movs	r2, r3
 8010fa8:	2301      	movs	r3, #1
 8010faa:	4053      	eors	r3, r2
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d02a      	beq.n	8011008 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8011120 <SGP_GetMeasurementValues+0x234>)
 8010fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8011124 <SGP_GetMeasurementValues+0x238>)
 8010fb6:	0019      	movs	r1, r3
 8010fb8:	2001      	movs	r0, #1
 8010fba:	f002 ff35 	bl	8013e28 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8010fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8011128 <SGP_GetMeasurementValues+0x23c>)
 8010fc0:	4b5a      	ldr	r3, [pc, #360]	@ (801112c <SGP_GetMeasurementValues+0x240>)
 8010fc2:	0019      	movs	r1, r3
 8010fc4:	2002      	movs	r0, #2
 8010fc6:	f002 ff2f 	bl	8013e28 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010fca:	230f      	movs	r3, #15
 8010fcc:	18fb      	adds	r3, r7, r3
 8010fce:	2200      	movs	r2, #0
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	e012      	b.n	8010ffa <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010fd4:	240f      	movs	r4, #15
 8010fd6:	193b      	adds	r3, r7, r4
 8010fd8:	7818      	ldrb	r0, [r3, #0]
 8010fda:	193b      	adds	r3, r7, r4
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	4a4f      	ldr	r2, [pc, #316]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8010fe0:	5cd3      	ldrb	r3, [r2, r3]
 8010fe2:	4a53      	ldr	r2, [pc, #332]	@ (8011130 <SGP_GetMeasurementValues+0x244>)
 8010fe4:	4953      	ldr	r1, [pc, #332]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	0003      	movs	r3, r0
 8010fea:	2003      	movs	r0, #3
 8010fec:	f002 ff1c 	bl	8013e28 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010ff0:	193b      	adds	r3, r7, r4
 8010ff2:	781a      	ldrb	r2, [r3, #0]
 8010ff4:	193b      	adds	r3, r7, r4
 8010ff6:	3201      	adds	r2, #1
 8010ff8:	701a      	strb	r2, [r3, #0]
 8010ffa:	230f      	movs	r3, #15
 8010ffc:	18fb      	adds	r3, r7, r3
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	2b02      	cmp	r3, #2
 8011002:	d9e7      	bls.n	8010fd4 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8011004:	2300      	movs	r3, #0
 8011006:	e076      	b.n	80110f6 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 8011008:	f003 fc86 	bl	8014918 <HAL_GetTick>
 801100c:	0003      	movs	r3, r0
 801100e:	22fa      	movs	r2, #250	@ 0xfa
 8011010:	0092      	lsls	r2, r2, #2
 8011012:	189a      	adds	r2, r3, r2
 8011014:	4b48      	ldr	r3, [pc, #288]	@ (8011138 <SGP_GetMeasurementValues+0x24c>)
 8011016:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8011018:	f7ff ff5a 	bl	8010ed0 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 801101c:	4b47      	ldr	r3, [pc, #284]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	3301      	adds	r3, #1
 8011022:	b2da      	uxtb	r2, r3
 8011024:	4b45      	ldr	r3, [pc, #276]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 8011026:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8011028:	4b44      	ldr	r3, [pc, #272]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 801102a:	781a      	ldrb	r2, [r3, #0]
 801102c:	4b44      	ldr	r3, [pc, #272]	@ (8011140 <SGP_GetMeasurementValues+0x254>)
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	429a      	cmp	r2, r3
 8011032:	d348      	bcc.n	80110c6 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8011034:	4b39      	ldr	r3, [pc, #228]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8011036:	785b      	ldrb	r3, [r3, #1]
 8011038:	b21b      	sxth	r3, r3
 801103a:	021b      	lsls	r3, r3, #8
 801103c:	b21a      	sxth	r2, r3
 801103e:	4b37      	ldr	r3, [pc, #220]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	b21b      	sxth	r3, r3
 8011044:	4313      	orrs	r3, r2
 8011046:	b21a      	sxth	r2, r3
 8011048:	240c      	movs	r4, #12
 801104a:	193b      	adds	r3, r7, r4
 801104c:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 801104e:	2300      	movs	r3, #0
 8011050:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8011052:	193b      	adds	r3, r7, r4
 8011054:	8819      	ldrh	r1, [r3, #0]
 8011056:	2308      	movs	r3, #8
 8011058:	18fa      	adds	r2, r7, r3
 801105a:	4b3a      	ldr	r3, [pc, #232]	@ (8011144 <SGP_GetMeasurementValues+0x258>)
 801105c:	0018      	movs	r0, r3
 801105e:	f7fe fe87 	bl	800fd70 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8011068:	4b37      	ldr	r3, [pc, #220]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	3301      	adds	r3, #1
 801106e:	b2da      	uxtb	r2, r3
 8011070:	4b35      	ldr	r3, [pc, #212]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 8011072:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8011074:	4b34      	ldr	r3, [pc, #208]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d10d      	bne.n	8011098 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 801107c:	193b      	adds	r3, r7, r4
 801107e:	881b      	ldrh	r3, [r3, #0]
 8011080:	4a32      	ldr	r2, [pc, #200]	@ (801114c <SGP_GetMeasurementValues+0x260>)
 8011082:	492c      	ldr	r1, [pc, #176]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 8011084:	2003      	movs	r0, #3
 8011086:	f002 fecf 	bl	8013e28 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	4a30      	ldr	r2, [pc, #192]	@ (8011150 <SGP_GetMeasurementValues+0x264>)
 801108e:	4929      	ldr	r1, [pc, #164]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 8011090:	2003      	movs	r0, #3
 8011092:	f002 fec9 	bl	8013e28 <CreateLine>
 8011096:	e006      	b.n	80110a6 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8011098:	4b2b      	ldr	r3, [pc, #172]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	2b0b      	cmp	r3, #11
 801109e:	d102      	bne.n	80110a6 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 80110a0:	4b29      	ldr	r3, [pc, #164]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 80110a2:	2200      	movs	r2, #0
 80110a4:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	0018      	movs	r0, r3
 80110ac:	f001 fe2e 	bl	8012d0c <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 80110b0:	4b22      	ldr	r3, [pc, #136]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 80110b6:	4b14      	ldr	r3, [pc, #80]	@ (8011108 <SGP_GetMeasurementValues+0x21c>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80110bc:	4b11      	ldr	r3, [pc, #68]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 80110be:	2200      	movs	r2, #0
 80110c0:	701a      	strb	r2, [r3, #0]
      return true;
 80110c2:	2301      	movs	r3, #1
 80110c4:	e017      	b.n	80110f6 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80110c6:	f7ff fef5 	bl	8010eb4 <SGP_MeasurementDone>
 80110ca:	1e03      	subs	r3, r0, #0
 80110cc:	d012      	beq.n	80110f4 <SGP_GetMeasurementValues+0x208>
 80110ce:	4b0c      	ldr	r3, [pc, #48]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00e      	beq.n	80110f4 <SGP_GetMeasurementValues+0x208>
 80110d6:	4b10      	ldr	r3, [pc, #64]	@ (8011118 <SGP_GetMeasurementValues+0x22c>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00a      	beq.n	80110f4 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80110de:	4a1d      	ldr	r2, [pc, #116]	@ (8011154 <SGP_GetMeasurementValues+0x268>)
 80110e0:	4b14      	ldr	r3, [pc, #80]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 80110e2:	0019      	movs	r1, r3
 80110e4:	2003      	movs	r0, #3
 80110e6:	f002 fe9f 	bl	8013e28 <CreateLine>
    SGP_StartMeasurement();
 80110ea:	f7ff fe8f 	bl	8010e0c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80110ee:	4b05      	ldr	r3, [pc, #20]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 80110f0:	2200      	movs	r2, #0
 80110f2:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	0018      	movs	r0, r3
 80110f8:	46bd      	mov	sp, r7
 80110fa:	b005      	add	sp, #20
 80110fc:	bd90      	pop	{r4, r7, pc}
 80110fe:	46c0      	nop			@ (mov r8, r8)
 8011100:	20001200 	.word	0x20001200
 8011104:	200012ad 	.word	0x200012ad
 8011108:	200012ac 	.word	0x200012ac
 801110c:	200000bc 	.word	0x200000bc
 8011110:	200000d0 	.word	0x200000d0
 8011114:	200000b4 	.word	0x200000b4
 8011118:	20001201 	.word	0x20001201
 801111c:	200011f0 	.word	0x200011f0
 8011120:	0802d6e4 	.word	0x0802d6e4
 8011124:	0802d70c 	.word	0x0802d70c
 8011128:	0802d710 	.word	0x0802d710
 801112c:	0802d730 	.word	0x0802d730
 8011130:	0802d734 	.word	0x0802d734
 8011134:	0802d754 	.word	0x0802d754
 8011138:	200000cc 	.word	0x200000cc
 801113c:	200011f9 	.word	0x200011f9
 8011140:	200000c6 	.word	0x200000c6
 8011144:	20001204 	.word	0x20001204
 8011148:	200011fa 	.word	0x200011fa
 801114c:	0802d758 	.word	0x0802d758
 8011150:	0802d774 	.word	0x0802d774
 8011154:	0802d790 	.word	0x0802d790

08011158 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801115e:	4b1a      	ldr	r3, [pc, #104]	@ (80111c8 <SGP_DeviceConnected+0x70>)
 8011160:	2202      	movs	r2, #2
 8011162:	0019      	movs	r1, r3
 8011164:	2059      	movs	r0, #89	@ 0x59
 8011166:	f7ff fde5 	bl	8010d34 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 801116a:	2001      	movs	r0, #1
 801116c:	f003 fbde 	bl	801492c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8011170:	4b16      	ldr	r3, [pc, #88]	@ (80111cc <SGP_DeviceConnected+0x74>)
 8011172:	2209      	movs	r2, #9
 8011174:	0019      	movs	r1, r3
 8011176:	2059      	movs	r0, #89	@ 0x59
 8011178:	f7ff fdbe 	bl	8010cf8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801117c:	1dfb      	adds	r3, r7, #7
 801117e:	2200      	movs	r2, #0
 8011180:	701a      	strb	r2, [r3, #0]
 8011182:	e011      	b.n	80111a8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8011184:	1dfb      	adds	r3, r7, #7
 8011186:	7818      	ldrb	r0, [r3, #0]
 8011188:	1dfb      	adds	r3, r7, #7
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	4a0f      	ldr	r2, [pc, #60]	@ (80111cc <SGP_DeviceConnected+0x74>)
 801118e:	5cd3      	ldrb	r3, [r2, r3]
 8011190:	4a0f      	ldr	r2, [pc, #60]	@ (80111d0 <SGP_DeviceConnected+0x78>)
 8011192:	4910      	ldr	r1, [pc, #64]	@ (80111d4 <SGP_DeviceConnected+0x7c>)
 8011194:	9300      	str	r3, [sp, #0]
 8011196:	0003      	movs	r3, r0
 8011198:	2002      	movs	r0, #2
 801119a:	f002 fe45 	bl	8013e28 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801119e:	1dfb      	adds	r3, r7, #7
 80111a0:	781a      	ldrb	r2, [r3, #0]
 80111a2:	1dfb      	adds	r3, r7, #7
 80111a4:	3201      	adds	r2, #1
 80111a6:	701a      	strb	r2, [r3, #0]
 80111a8:	1dfb      	adds	r3, r7, #7
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	2b08      	cmp	r3, #8
 80111ae:	d9e9      	bls.n	8011184 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80111b0:	4b06      	ldr	r3, [pc, #24]	@ (80111cc <SGP_DeviceConnected+0x74>)
 80111b2:	2203      	movs	r2, #3
 80111b4:	2109      	movs	r1, #9
 80111b6:	0018      	movs	r0, r3
 80111b8:	f000 f80e 	bl	80111d8 <CheckCRC>
 80111bc:	0003      	movs	r3, r0
}
 80111be:	0018      	movs	r0, r3
 80111c0:	46bd      	mov	sp, r7
 80111c2:	b002      	add	sp, #8
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	46c0      	nop			@ (mov r8, r8)
 80111c8:	200000b0 	.word	0x200000b0
 80111cc:	200011f0 	.word	0x200011f0
 80111d0:	0802d7b0 	.word	0x0802d7b0
 80111d4:	0802d730 	.word	0x0802d730

080111d8 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80111d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111da:	b08f      	sub	sp, #60	@ 0x3c
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6278      	str	r0, [r7, #36]	@ 0x24
 80111e0:	0008      	movs	r0, r1
 80111e2:	0011      	movs	r1, r2
 80111e4:	2323      	movs	r3, #35	@ 0x23
 80111e6:	18fb      	adds	r3, r7, r3
 80111e8:	1c02      	adds	r2, r0, #0
 80111ea:	701a      	strb	r2, [r3, #0]
 80111ec:	2322      	movs	r3, #34	@ 0x22
 80111ee:	18fb      	adds	r3, r7, r3
 80111f0:	1c0a      	adds	r2, r1, #0
 80111f2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80111f4:	2317      	movs	r3, #23
 80111f6:	2220      	movs	r2, #32
 80111f8:	189b      	adds	r3, r3, r2
 80111fa:	19db      	adds	r3, r3, r7
 80111fc:	2200      	movs	r2, #0
 80111fe:	701a      	strb	r2, [r3, #0]
 8011200:	e09f      	b.n	8011342 <CheckCRC+0x16a>
 8011202:	466b      	mov	r3, sp
 8011204:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8011206:	2322      	movs	r3, #34	@ 0x22
 8011208:	18fb      	adds	r3, r7, r3
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	001a      	movs	r2, r3
 801120e:	3a01      	subs	r2, #1
 8011210:	633a      	str	r2, [r7, #48]	@ 0x30
 8011212:	60bb      	str	r3, [r7, #8]
 8011214:	2200      	movs	r2, #0
 8011216:	60fa      	str	r2, [r7, #12]
 8011218:	68b8      	ldr	r0, [r7, #8]
 801121a:	68f9      	ldr	r1, [r7, #12]
 801121c:	0002      	movs	r2, r0
 801121e:	0f52      	lsrs	r2, r2, #29
 8011220:	000c      	movs	r4, r1
 8011222:	00e4      	lsls	r4, r4, #3
 8011224:	61fc      	str	r4, [r7, #28]
 8011226:	69fc      	ldr	r4, [r7, #28]
 8011228:	4314      	orrs	r4, r2
 801122a:	61fc      	str	r4, [r7, #28]
 801122c:	0002      	movs	r2, r0
 801122e:	00d2      	lsls	r2, r2, #3
 8011230:	61ba      	str	r2, [r7, #24]
 8011232:	603b      	str	r3, [r7, #0]
 8011234:	2200      	movs	r2, #0
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	6838      	ldr	r0, [r7, #0]
 801123a:	6879      	ldr	r1, [r7, #4]
 801123c:	0002      	movs	r2, r0
 801123e:	0f52      	lsrs	r2, r2, #29
 8011240:	000c      	movs	r4, r1
 8011242:	00e4      	lsls	r4, r4, #3
 8011244:	617c      	str	r4, [r7, #20]
 8011246:	697c      	ldr	r4, [r7, #20]
 8011248:	4314      	orrs	r4, r2
 801124a:	617c      	str	r4, [r7, #20]
 801124c:	0002      	movs	r2, r0
 801124e:	00d2      	lsls	r2, r2, #3
 8011250:	613a      	str	r2, [r7, #16]
 8011252:	3307      	adds	r3, #7
 8011254:	08db      	lsrs	r3, r3, #3
 8011256:	00db      	lsls	r3, r3, #3
 8011258:	466a      	mov	r2, sp
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	469d      	mov	sp, r3
 801125e:	466b      	mov	r3, sp
 8011260:	3300      	adds	r3, #0
 8011262:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8011264:	2316      	movs	r3, #22
 8011266:	2220      	movs	r2, #32
 8011268:	189b      	adds	r3, r3, r2
 801126a:	19db      	adds	r3, r3, r7
 801126c:	2200      	movs	r2, #0
 801126e:	701a      	strb	r2, [r3, #0]
 8011270:	e01e      	b.n	80112b0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8011272:	2317      	movs	r3, #23
 8011274:	2220      	movs	r2, #32
 8011276:	189b      	adds	r3, r3, r2
 8011278:	19db      	adds	r3, r3, r7
 801127a:	781a      	ldrb	r2, [r3, #0]
 801127c:	2116      	movs	r1, #22
 801127e:	2320      	movs	r3, #32
 8011280:	18cb      	adds	r3, r1, r3
 8011282:	19db      	adds	r3, r3, r7
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	18d3      	adds	r3, r2, r3
 8011288:	001a      	movs	r2, r3
 801128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801128c:	189a      	adds	r2, r3, r2
 801128e:	0008      	movs	r0, r1
 8011290:	2320      	movs	r3, #32
 8011292:	18cb      	adds	r3, r1, r3
 8011294:	19db      	adds	r3, r3, r7
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	7811      	ldrb	r1, [r2, #0]
 801129a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801129c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 801129e:	2320      	movs	r3, #32
 80112a0:	18c3      	adds	r3, r0, r3
 80112a2:	19db      	adds	r3, r3, r7
 80112a4:	781a      	ldrb	r2, [r3, #0]
 80112a6:	2320      	movs	r3, #32
 80112a8:	18c3      	adds	r3, r0, r3
 80112aa:	19db      	adds	r3, r3, r7
 80112ac:	3201      	adds	r2, #1
 80112ae:	701a      	strb	r2, [r3, #0]
 80112b0:	2316      	movs	r3, #22
 80112b2:	2220      	movs	r2, #32
 80112b4:	189b      	adds	r3, r3, r2
 80112b6:	19da      	adds	r2, r3, r7
 80112b8:	2322      	movs	r3, #34	@ 0x22
 80112ba:	18fb      	adds	r3, r7, r3
 80112bc:	7812      	ldrb	r2, [r2, #0]
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d3d6      	bcc.n	8011272 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80112c4:	2417      	movs	r4, #23
 80112c6:	2320      	movs	r3, #32
 80112c8:	18e3      	adds	r3, r4, r3
 80112ca:	19db      	adds	r3, r3, r7
 80112cc:	781a      	ldrb	r2, [r3, #0]
 80112ce:	2322      	movs	r3, #34	@ 0x22
 80112d0:	18fb      	adds	r3, r7, r3
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	18d3      	adds	r3, r2, r3
 80112d6:	3b01      	subs	r3, #1
 80112d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112da:	18d2      	adds	r2, r2, r3
 80112dc:	250b      	movs	r5, #11
 80112de:	2320      	movs	r3, #32
 80112e0:	18eb      	adds	r3, r5, r3
 80112e2:	19db      	adds	r3, r3, r7
 80112e4:	7812      	ldrb	r2, [r2, #0]
 80112e6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80112e8:	2322      	movs	r3, #34	@ 0x22
 80112ea:	18fb      	adds	r3, r7, r3
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	3b01      	subs	r3, #1
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f4:	0011      	movs	r1, r2
 80112f6:	0018      	movs	r0, r3
 80112f8:	f000 f838 	bl	801136c <CalculateCRC>
 80112fc:	0003      	movs	r3, r0
 80112fe:	001a      	movs	r2, r3
 8011300:	2320      	movs	r3, #32
 8011302:	18eb      	adds	r3, r5, r3
 8011304:	19db      	adds	r3, r3, r7
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	4293      	cmp	r3, r2
 801130a:	d00c      	beq.n	8011326 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 801130c:	2320      	movs	r3, #32
 801130e:	18e3      	adds	r3, r4, r3
 8011310:	19db      	adds	r3, r3, r7
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	3301      	adds	r3, #1
 8011316:	4a13      	ldr	r2, [pc, #76]	@ (8011364 <CheckCRC+0x18c>)
 8011318:	4913      	ldr	r1, [pc, #76]	@ (8011368 <CheckCRC+0x190>)
 801131a:	2001      	movs	r0, #1
 801131c:	f002 fd84 	bl	8013e28 <CreateLine>
      return false;
 8011320:	2300      	movs	r3, #0
 8011322:	46b5      	mov	sp, r6
 8011324:	e019      	b.n	801135a <CheckCRC+0x182>
 8011326:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8011328:	2217      	movs	r2, #23
 801132a:	2320      	movs	r3, #32
 801132c:	18d3      	adds	r3, r2, r3
 801132e:	19db      	adds	r3, r3, r7
 8011330:	2120      	movs	r1, #32
 8011332:	1852      	adds	r2, r2, r1
 8011334:	19d1      	adds	r1, r2, r7
 8011336:	2222      	movs	r2, #34	@ 0x22
 8011338:	18ba      	adds	r2, r7, r2
 801133a:	7809      	ldrb	r1, [r1, #0]
 801133c:	7812      	ldrb	r2, [r2, #0]
 801133e:	188a      	adds	r2, r1, r2
 8011340:	701a      	strb	r2, [r3, #0]
 8011342:	2317      	movs	r3, #23
 8011344:	2220      	movs	r2, #32
 8011346:	189b      	adds	r3, r3, r2
 8011348:	19da      	adds	r2, r3, r7
 801134a:	2323      	movs	r3, #35	@ 0x23
 801134c:	18fb      	adds	r3, r7, r3
 801134e:	7812      	ldrb	r2, [r2, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	d200      	bcs.n	8011358 <CheckCRC+0x180>
 8011356:	e754      	b.n	8011202 <CheckCRC+0x2a>
    }
  }
  return true;
 8011358:	2301      	movs	r3, #1
}
 801135a:	0018      	movs	r0, r3
 801135c:	46bd      	mov	sp, r7
 801135e:	b00f      	add	sp, #60	@ 0x3c
 8011360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011362:	46c0      	nop			@ (mov r8, r8)
 8011364:	0802d7d0 	.word	0x0802d7d0
 8011368:	0802d70c 	.word	0x0802d70c

0801136c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	000a      	movs	r2, r1
 8011376:	1cfb      	adds	r3, r7, #3
 8011378:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 801137a:	230f      	movs	r3, #15
 801137c:	18fb      	adds	r3, r7, r3
 801137e:	22ff      	movs	r2, #255	@ 0xff
 8011380:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8011382:	230e      	movs	r3, #14
 8011384:	18fb      	adds	r3, r7, r3
 8011386:	2200      	movs	r2, #0
 8011388:	701a      	strb	r2, [r3, #0]
 801138a:	e038      	b.n	80113fe <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 801138c:	230e      	movs	r3, #14
 801138e:	18fb      	adds	r3, r7, r3
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	18d3      	adds	r3, r2, r3
 8011396:	7819      	ldrb	r1, [r3, #0]
 8011398:	220f      	movs	r2, #15
 801139a:	18bb      	adds	r3, r7, r2
 801139c:	18ba      	adds	r2, r7, r2
 801139e:	7812      	ldrb	r2, [r2, #0]
 80113a0:	404a      	eors	r2, r1
 80113a2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80113a4:	230d      	movs	r3, #13
 80113a6:	18fb      	adds	r3, r7, r3
 80113a8:	2200      	movs	r2, #0
 80113aa:	701a      	strb	r2, [r3, #0]
 80113ac:	e01c      	b.n	80113e8 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80113ae:	210f      	movs	r1, #15
 80113b0:	187b      	adds	r3, r7, r1
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	b25b      	sxtb	r3, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	da0a      	bge.n	80113d0 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80113ba:	187b      	adds	r3, r7, r1
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	b25b      	sxtb	r3, r3
 80113c0:	18db      	adds	r3, r3, r3
 80113c2:	b25b      	sxtb	r3, r3
 80113c4:	2231      	movs	r2, #49	@ 0x31
 80113c6:	4053      	eors	r3, r2
 80113c8:	b25a      	sxtb	r2, r3
 80113ca:	187b      	adds	r3, r7, r1
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	e005      	b.n	80113dc <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80113d0:	230f      	movs	r3, #15
 80113d2:	18fa      	adds	r2, r7, r3
 80113d4:	18fb      	adds	r3, r7, r3
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	18db      	adds	r3, r3, r3
 80113da:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80113dc:	210d      	movs	r1, #13
 80113de:	187b      	adds	r3, r7, r1
 80113e0:	781a      	ldrb	r2, [r3, #0]
 80113e2:	187b      	adds	r3, r7, r1
 80113e4:	3201      	adds	r2, #1
 80113e6:	701a      	strb	r2, [r3, #0]
 80113e8:	230d      	movs	r3, #13
 80113ea:	18fb      	adds	r3, r7, r3
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b07      	cmp	r3, #7
 80113f0:	d9dd      	bls.n	80113ae <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80113f2:	210e      	movs	r1, #14
 80113f4:	187b      	adds	r3, r7, r1
 80113f6:	781a      	ldrb	r2, [r3, #0]
 80113f8:	187b      	adds	r3, r7, r1
 80113fa:	3201      	adds	r2, #1
 80113fc:	701a      	strb	r2, [r3, #0]
 80113fe:	230e      	movs	r3, #14
 8011400:	18fa      	adds	r2, r7, r3
 8011402:	1cfb      	adds	r3, r7, #3
 8011404:	7812      	ldrb	r2, [r2, #0]
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	429a      	cmp	r2, r3
 801140a:	d3bf      	bcc.n	801138c <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 801140c:	230f      	movs	r3, #15
 801140e:	18fb      	adds	r3, r7, r3
 8011410:	781b      	ldrb	r3, [r3, #0]
}
 8011412:	0018      	movs	r0, r3
 8011414:	46bd      	mov	sp, r7
 8011416:	b004      	add	sp, #16
 8011418:	bd80      	pop	{r7, pc}
	...

0801141c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4936      	ldr	r1, [pc, #216]	@ (8011504 <SGP_SetHT+0xe8>)
 801142c:	1c18      	adds	r0, r3, #0
 801142e:	f7ef fa47 	bl	80008c0 <__aeabi_fadd>
 8011432:	1c03      	adds	r3, r0, #0
 8011434:	4934      	ldr	r1, [pc, #208]	@ (8011508 <SGP_SetHT+0xec>)
 8011436:	1c18      	adds	r0, r3, #0
 8011438:	f7ef fc34 	bl	8000ca4 <__aeabi_fdiv>
 801143c:	1c03      	adds	r3, r0, #0
 801143e:	4933      	ldr	r1, [pc, #204]	@ (801150c <SGP_SetHT+0xf0>)
 8011440:	1c18      	adds	r0, r3, #0
 8011442:	f7ef fdfd 	bl	8001040 <__aeabi_fmul>
 8011446:	1c03      	adds	r3, r0, #0
 8011448:	1c18      	adds	r0, r3, #0
 801144a:	f7ef f8e7 	bl	800061c <__aeabi_f2uiz>
 801144e:	0003      	movs	r3, r0
 8011450:	b29a      	uxth	r2, r3
 8011452:	4b2f      	ldr	r3, [pc, #188]	@ (8011510 <SGP_SetHT+0xf4>)
 8011454:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	492e      	ldr	r1, [pc, #184]	@ (8011514 <SGP_SetHT+0xf8>)
 801145c:	1c18      	adds	r0, r3, #0
 801145e:	f7ef fc21 	bl	8000ca4 <__aeabi_fdiv>
 8011462:	1c03      	adds	r3, r0, #0
 8011464:	4929      	ldr	r1, [pc, #164]	@ (801150c <SGP_SetHT+0xf0>)
 8011466:	1c18      	adds	r0, r3, #0
 8011468:	f7ef fdea 	bl	8001040 <__aeabi_fmul>
 801146c:	1c03      	adds	r3, r0, #0
 801146e:	1c18      	adds	r0, r3, #0
 8011470:	f7ef f8d4 	bl	800061c <__aeabi_f2uiz>
 8011474:	0003      	movs	r3, r0
 8011476:	b29a      	uxth	r2, r3
 8011478:	4b27      	ldr	r3, [pc, #156]	@ (8011518 <SGP_SetHT+0xfc>)
 801147a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 801147c:	4b26      	ldr	r3, [pc, #152]	@ (8011518 <SGP_SetHT+0xfc>)
 801147e:	881b      	ldrh	r3, [r3, #0]
 8011480:	0a1b      	lsrs	r3, r3, #8
 8011482:	b29b      	uxth	r3, r3
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b25      	ldr	r3, [pc, #148]	@ (801151c <SGP_SetHT+0x100>)
 8011488:	709a      	strb	r2, [r3, #2]
 801148a:	4b24      	ldr	r3, [pc, #144]	@ (801151c <SGP_SetHT+0x100>)
 801148c:	789a      	ldrb	r2, [r3, #2]
 801148e:	210c      	movs	r1, #12
 8011490:	187b      	adds	r3, r7, r1
 8011492:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8011494:	4b20      	ldr	r3, [pc, #128]	@ (8011518 <SGP_SetHT+0xfc>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	b2da      	uxtb	r2, r3
 801149a:	4b20      	ldr	r3, [pc, #128]	@ (801151c <SGP_SetHT+0x100>)
 801149c:	70da      	strb	r2, [r3, #3]
 801149e:	4b1f      	ldr	r3, [pc, #124]	@ (801151c <SGP_SetHT+0x100>)
 80114a0:	78da      	ldrb	r2, [r3, #3]
 80114a2:	187b      	adds	r3, r7, r1
 80114a4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80114a6:	187b      	adds	r3, r7, r1
 80114a8:	2102      	movs	r1, #2
 80114aa:	0018      	movs	r0, r3
 80114ac:	f7ff ff5e 	bl	801136c <CalculateCRC>
 80114b0:	0003      	movs	r3, r0
 80114b2:	001a      	movs	r2, r3
 80114b4:	4b19      	ldr	r3, [pc, #100]	@ (801151c <SGP_SetHT+0x100>)
 80114b6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80114b8:	4b15      	ldr	r3, [pc, #84]	@ (8011510 <SGP_SetHT+0xf4>)
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	0a1b      	lsrs	r3, r3, #8
 80114be:	b29b      	uxth	r3, r3
 80114c0:	b2da      	uxtb	r2, r3
 80114c2:	4b16      	ldr	r3, [pc, #88]	@ (801151c <SGP_SetHT+0x100>)
 80114c4:	715a      	strb	r2, [r3, #5]
 80114c6:	4b15      	ldr	r3, [pc, #84]	@ (801151c <SGP_SetHT+0x100>)
 80114c8:	795a      	ldrb	r2, [r3, #5]
 80114ca:	2108      	movs	r1, #8
 80114cc:	187b      	adds	r3, r7, r1
 80114ce:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80114d0:	4b0f      	ldr	r3, [pc, #60]	@ (8011510 <SGP_SetHT+0xf4>)
 80114d2:	881b      	ldrh	r3, [r3, #0]
 80114d4:	b2da      	uxtb	r2, r3
 80114d6:	4b11      	ldr	r3, [pc, #68]	@ (801151c <SGP_SetHT+0x100>)
 80114d8:	719a      	strb	r2, [r3, #6]
 80114da:	4b10      	ldr	r3, [pc, #64]	@ (801151c <SGP_SetHT+0x100>)
 80114dc:	799a      	ldrb	r2, [r3, #6]
 80114de:	187b      	adds	r3, r7, r1
 80114e0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80114e2:	187b      	adds	r3, r7, r1
 80114e4:	2102      	movs	r1, #2
 80114e6:	0018      	movs	r0, r3
 80114e8:	f7ff ff40 	bl	801136c <CalculateCRC>
 80114ec:	0003      	movs	r3, r0
 80114ee:	001a      	movs	r2, r3
 80114f0:	4b0a      	ldr	r3, [pc, #40]	@ (801151c <SGP_SetHT+0x100>)
 80114f2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80114f4:	4b0a      	ldr	r3, [pc, #40]	@ (8011520 <SGP_SetHT+0x104>)
 80114f6:	2201      	movs	r2, #1
 80114f8:	701a      	strb	r2, [r3, #0]
}
 80114fa:	46c0      	nop			@ (mov r8, r8)
 80114fc:	46bd      	mov	sp, r7
 80114fe:	b004      	add	sp, #16
 8011500:	bd80      	pop	{r7, pc}
 8011502:	46c0      	nop			@ (mov r8, r8)
 8011504:	42340000 	.word	0x42340000
 8011508:	432f0000 	.word	0x432f0000
 801150c:	477fff00 	.word	0x477fff00
 8011510:	200012aa 	.word	0x200012aa
 8011514:	42c80000 	.word	0x42c80000
 8011518:	200012a8 	.word	0x200012a8
 801151c:	200000bc 	.word	0x200000bc
 8011520:	200012ac 	.word	0x200012ac

08011524 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8011528:	4a09      	ldr	r2, [pc, #36]	@ (8011550 <SGP_SoftReset+0x2c>)
 801152a:	4b0a      	ldr	r3, [pc, #40]	@ (8011554 <SGP_SoftReset+0x30>)
 801152c:	0019      	movs	r1, r3
 801152e:	2003      	movs	r0, #3
 8011530:	f002 fc7a 	bl	8013e28 <CreateLine>
  SGP_TurnHeaterOff();
 8011534:	f7ff fccc 	bl	8010ed0 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8011538:	200a      	movs	r0, #10
 801153a:	f003 f9f7 	bl	801492c <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801153e:	4b06      	ldr	r3, [pc, #24]	@ (8011558 <SGP_SoftReset+0x34>)
 8011540:	2202      	movs	r2, #2
 8011542:	0019      	movs	r1, r3
 8011544:	2059      	movs	r0, #89	@ 0x59
 8011546:	f7ff fbf5 	bl	8010d34 <WriteRegister>
}
 801154a:	46c0      	nop			@ (mov r8, r8)
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	0802d878 	.word	0x0802d878
 8011554:	0802d754 	.word	0x0802d754
 8011558:	200000c4 	.word	0x200000c4

0801155c <ResetVOCresult>:

void ResetVOCresult(void) {
 801155c:	b580      	push	{r7, lr}
 801155e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8011560:	4b02      	ldr	r3, [pc, #8]	@ (801156c <ResetVOCresult+0x10>)
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]
}
 8011566:	46c0      	nop			@ (mov r8, r8)
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	200012b0 	.word	0x200012b0

08011570 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8011570:	b580      	push	{r7, lr}
 8011572:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011574:	4b4b      	ldr	r3, [pc, #300]	@ (80116a4 <SGP_Upkeep+0x134>)
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b07      	cmp	r3, #7
 801157a:	d900      	bls.n	801157e <SGP_Upkeep+0xe>
 801157c:	e07a      	b.n	8011674 <SGP_Upkeep+0x104>
 801157e:	009a      	lsls	r2, r3, #2
 8011580:	4b49      	ldr	r3, [pc, #292]	@ (80116a8 <SGP_Upkeep+0x138>)
 8011582:	18d3      	adds	r3, r2, r3
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8011588:	4a48      	ldr	r2, [pc, #288]	@ (80116ac <SGP_Upkeep+0x13c>)
 801158a:	4b49      	ldr	r3, [pc, #292]	@ (80116b0 <SGP_Upkeep+0x140>)
 801158c:	0019      	movs	r1, r3
 801158e:	2003      	movs	r0, #3
 8011590:	f002 fc4a 	bl	8013e28 <CreateLine>
    break;
 8011594:	e081      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8011596:	f7ff ffe1 	bl	801155c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 801159a:	4b42      	ldr	r3, [pc, #264]	@ (80116a4 <SGP_Upkeep+0x134>)
 801159c:	2201      	movs	r2, #1
 801159e:	701a      	strb	r2, [r3, #0]
    break;
 80115a0:	e07b      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 80115a2:	f7fc fc2b 	bl	800ddfc <getSensorLock>
 80115a6:	1e03      	subs	r3, r0, #0
 80115a8:	d000      	beq.n	80115ac <SGP_Upkeep+0x3c>
 80115aa:	e06f      	b.n	801168c <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 80115ac:	2005      	movs	r0, #5
 80115ae:	f7fc fc11 	bl	800ddd4 <setSensorLock>
    SetMeasurementIndicator();
 80115b2:	f001 f987 	bl	80128c4 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 80115b6:	f7ff fc29 	bl	8010e0c <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 80115ba:	200a      	movs	r0, #10
 80115bc:	f003 f9b6 	bl	801492c <HAL_Delay>
    setSensorLock(FREE);
 80115c0:	2000      	movs	r0, #0
 80115c2:	f7fc fc07 	bl	800ddd4 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80115c6:	4b37      	ldr	r3, [pc, #220]	@ (80116a4 <SGP_Upkeep+0x134>)
 80115c8:	2202      	movs	r2, #2
 80115ca:	701a      	strb	r2, [r3, #0]
    break;
 80115cc:	e065      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80115ce:	f7fc fc15 	bl	800ddfc <getSensorLock>
 80115d2:	1e03      	subs	r3, r0, #0
 80115d4:	d15c      	bne.n	8011690 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 80115d6:	2005      	movs	r0, #5
 80115d8:	f7fc fbfc 	bl	800ddd4 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80115dc:	4b35      	ldr	r3, [pc, #212]	@ (80116b4 <SGP_Upkeep+0x144>)
 80115de:	0018      	movs	r0, r3
 80115e0:	f7ff fc84 	bl	8010eec <SGP_GetMeasurementValues>
 80115e4:	1e03      	subs	r3, r0, #0
 80115e6:	d002      	beq.n	80115ee <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80115e8:	4b2e      	ldr	r3, [pc, #184]	@ (80116a4 <SGP_Upkeep+0x134>)
 80115ea:	2203      	movs	r2, #3
 80115ec:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80115ee:	200a      	movs	r0, #10
 80115f0:	f003 f99c 	bl	801492c <HAL_Delay>
    setSensorLock(FREE);
 80115f4:	2000      	movs	r0, #0
 80115f6:	f7fc fbed 	bl	800ddd4 <setSensorLock>
    break;
 80115fa:	e04e      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80115fc:	4b2d      	ldr	r3, [pc, #180]	@ (80116b4 <SGP_Upkeep+0x144>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	b29b      	uxth	r3, r3
 8011602:	0018      	movs	r0, r3
 8011604:	f7f3 fa9a 	bl	8004b3c <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 8011608:	4b26      	ldr	r3, [pc, #152]	@ (80116a4 <SGP_Upkeep+0x134>)
 801160a:	2206      	movs	r2, #6
 801160c:	701a      	strb	r2, [r3, #0]
    break;
 801160e:	e044      	b.n	801169a <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8011610:	4b24      	ldr	r3, [pc, #144]	@ (80116a4 <SGP_Upkeep+0x134>)
 8011612:	2207      	movs	r2, #7
 8011614:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8011616:	4b28      	ldr	r3, [pc, #160]	@ (80116b8 <SGP_Upkeep+0x148>)
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	2b03      	cmp	r3, #3
 801161c:	d912      	bls.n	8011644 <SGP_Upkeep+0xd4>
 801161e:	4b27      	ldr	r3, [pc, #156]	@ (80116bc <SGP_Upkeep+0x14c>)
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	2201      	movs	r2, #1
 8011624:	4053      	eors	r3, r2
 8011626:	b2db      	uxtb	r3, r3
 8011628:	2b00      	cmp	r3, #0
 801162a:	d00b      	beq.n	8011644 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 801162c:	4b24      	ldr	r3, [pc, #144]	@ (80116c0 <SGP_Upkeep+0x150>)
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d004      	beq.n	801163e <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8011634:	f7ff ff76 	bl	8011524 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8011638:	2000      	movs	r0, #0
 801163a:	f7fb ff63 	bl	800d504 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 801163e:	4b20      	ldr	r3, [pc, #128]	@ (80116c0 <SGP_Upkeep+0x150>)
 8011640:	2201      	movs	r2, #1
 8011642:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8011644:	f003 f968 	bl	8014918 <HAL_GetTick>
 8011648:	0003      	movs	r3, r0
 801164a:	22c8      	movs	r2, #200	@ 0xc8
 801164c:	0092      	lsls	r2, r2, #2
 801164e:	189a      	adds	r2, r3, r2
 8011650:	4b1c      	ldr	r3, [pc, #112]	@ (80116c4 <SGP_Upkeep+0x154>)
 8011652:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8011654:	f001 f94e 	bl	80128f4 <ResetMeasurementIndicator>
  break;
 8011658:	e01f      	b.n	801169a <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 801165a:	4b1a      	ldr	r3, [pc, #104]	@ (80116c4 <SGP_Upkeep+0x154>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	0018      	movs	r0, r3
 8011660:	f002 fb8c 	bl	8013d7c <TimestampIsReached>
 8011664:	1e03      	subs	r3, r0, #0
 8011666:	d015      	beq.n	8011694 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011668:	f7ff fbb8 	bl	8010ddc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 801166c:	4b0d      	ldr	r3, [pc, #52]	@ (80116a4 <SGP_Upkeep+0x134>)
 801166e:	2200      	movs	r2, #0
 8011670:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011672:	e00f      	b.n	8011694 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011674:	4b0b      	ldr	r3, [pc, #44]	@ (80116a4 <SGP_Upkeep+0x134>)
 8011676:	2200      	movs	r2, #0
 8011678:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 801167a:	f7fc fbbf 	bl	800ddfc <getSensorLock>
 801167e:	0003      	movs	r3, r0
 8011680:	2b05      	cmp	r3, #5
 8011682:	d109      	bne.n	8011698 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8011684:	2000      	movs	r0, #0
 8011686:	f7fc fba5 	bl	800ddd4 <setSensorLock>
    }
    break;
 801168a:	e005      	b.n	8011698 <SGP_Upkeep+0x128>
      break;
 801168c:	46c0      	nop			@ (mov r8, r8)
 801168e:	e004      	b.n	801169a <SGP_Upkeep+0x12a>
      break;
 8011690:	46c0      	nop			@ (mov r8, r8)
 8011692:	e002      	b.n	801169a <SGP_Upkeep+0x12a>
    break;
 8011694:	46c0      	nop			@ (mov r8, r8)
 8011696:	e000      	b.n	801169a <SGP_Upkeep+0x12a>
    break;
 8011698:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 801169a:	4b02      	ldr	r3, [pc, #8]	@ (80116a4 <SGP_Upkeep+0x134>)
 801169c:	781b      	ldrb	r3, [r3, #0]
}
 801169e:	0018      	movs	r0, r3
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	200012b4 	.word	0x200012b4
 80116a8:	0802e418 	.word	0x0802e418
 80116ac:	0802d890 	.word	0x0802d890
 80116b0:	0802d754 	.word	0x0802d754
 80116b4:	200012b0 	.word	0x200012b0
 80116b8:	200011fa 	.word	0x200011fa
 80116bc:	20002151 	.word	0x20002151
 80116c0:	200011e4 	.word	0x200011e4
 80116c4:	200011fc 	.word	0x200011fc

080116c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	0002      	movs	r2, r0
 80116d0:	1dfb      	adds	r3, r7, #7
 80116d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80116d4:	1dfb      	adds	r3, r7, #7
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80116da:	d809      	bhi.n	80116f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116dc:	1dfb      	adds	r3, r7, #7
 80116de:	781b      	ldrb	r3, [r3, #0]
 80116e0:	001a      	movs	r2, r3
 80116e2:	231f      	movs	r3, #31
 80116e4:	401a      	ands	r2, r3
 80116e6:	4b04      	ldr	r3, [pc, #16]	@ (80116f8 <__NVIC_EnableIRQ+0x30>)
 80116e8:	2101      	movs	r1, #1
 80116ea:	4091      	lsls	r1, r2
 80116ec:	000a      	movs	r2, r1
 80116ee:	601a      	str	r2, [r3, #0]
  }
}
 80116f0:	46c0      	nop			@ (mov r8, r8)
 80116f2:	46bd      	mov	sp, r7
 80116f4:	b002      	add	sp, #8
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	e000e100 	.word	0xe000e100

080116fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	0002      	movs	r2, r0
 8011704:	1dfb      	adds	r3, r7, #7
 8011706:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011708:	1dfb      	adds	r3, r7, #7
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2b7f      	cmp	r3, #127	@ 0x7f
 801170e:	d810      	bhi.n	8011732 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011710:	1dfb      	adds	r3, r7, #7
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	001a      	movs	r2, r3
 8011716:	231f      	movs	r3, #31
 8011718:	4013      	ands	r3, r2
 801171a:	4908      	ldr	r1, [pc, #32]	@ (801173c <__NVIC_DisableIRQ+0x40>)
 801171c:	2201      	movs	r2, #1
 801171e:	409a      	lsls	r2, r3
 8011720:	0013      	movs	r3, r2
 8011722:	2280      	movs	r2, #128	@ 0x80
 8011724:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011726:	f3bf 8f4f 	dsb	sy
}
 801172a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801172c:	f3bf 8f6f 	isb	sy
}
 8011730:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8011732:	46c0      	nop			@ (mov r8, r8)
 8011734:	46bd      	mov	sp, r7
 8011736:	b002      	add	sp, #8
 8011738:	bd80      	pop	{r7, pc}
 801173a:	46c0      	nop			@ (mov r8, r8)
 801173c:	e000e100 	.word	0xe000e100

08011740 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8011740:	b5b0      	push	{r4, r5, r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af02      	add	r7, sp, #8
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	0008      	movs	r0, r1
 801174a:	0011      	movs	r1, r2
 801174c:	1cfb      	adds	r3, r7, #3
 801174e:	1c02      	adds	r2, r0, #0
 8011750:	701a      	strb	r2, [r3, #0]
 8011752:	1cbb      	adds	r3, r7, #2
 8011754:	1c0a      	adds	r2, r1, #0
 8011756:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8011758:	4b5b      	ldr	r3, [pc, #364]	@ (80118c8 <getSoundData+0x188>)
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2201      	movs	r2, #1
 8011760:	4053      	eors	r3, r2
 8011762:	b2db      	uxtb	r3, r3
 8011764:	2b00      	cmp	r3, #0
 8011766:	d107      	bne.n	8011778 <getSoundData+0x38>
 8011768:	4b58      	ldr	r3, [pc, #352]	@ (80118cc <getSoundData+0x18c>)
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	b2db      	uxtb	r3, r3
 801176e:	2201      	movs	r2, #1
 8011770:	4053      	eors	r3, r2
 8011772:	b2db      	uxtb	r3, r3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <getSoundData+0x3c>
    {
        return false;
 8011778:	2300      	movs	r3, #0
 801177a:	e0a0      	b.n	80118be <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 801177c:	4b54      	ldr	r3, [pc, #336]	@ (80118d0 <getSoundData+0x190>)
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	b2db      	uxtb	r3, r3
 8011782:	2b00      	cmp	r3, #0
 8011784:	d005      	beq.n	8011792 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011786:	4b53      	ldr	r3, [pc, #332]	@ (80118d4 <getSoundData+0x194>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	b25b      	sxtb	r3, r3
 801178c:	0018      	movs	r0, r3
 801178e:	f7ff ffb5 	bl	80116fc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011792:	f3bf 8f4f 	dsb	sy
}
 8011796:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011798:	f3bf 8f6f 	isb	sy
}
 801179c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 801179e:	1cfb      	adds	r3, r7, #3
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d04c      	beq.n	8011840 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 80117a6:	4b4c      	ldr	r3, [pc, #304]	@ (80118d8 <getSoundData+0x198>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d11b      	bne.n	80117e6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2200      	movs	r2, #0
 80117b8:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117ba:	2300      	movs	r3, #0
 80117bc:	617b      	str	r3, [r7, #20]
 80117be:	e00e      	b.n	80117de <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	18d3      	adds	r3, r2, r3
 80117c6:	3302      	adds	r3, #2
 80117c8:	2200      	movs	r2, #0
 80117ca:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	18d3      	adds	r3, r2, r3
 80117d2:	3308      	adds	r3, #8
 80117d4:	2200      	movs	r2, #0
 80117d6:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	3301      	adds	r3, #1
 80117dc:	617b      	str	r3, [r7, #20]
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b05      	cmp	r3, #5
 80117e2:	d9ed      	bls.n	80117c0 <getSoundData+0x80>
 80117e4:	e02c      	b.n	8011840 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	1c59      	adds	r1, r3, #1
 80117ec:	4b3b      	ldr	r3, [pc, #236]	@ (80118dc <getSoundData+0x19c>)
 80117ee:	681a      	ldr	r2, [r3, #0]
 80117f0:	4b3b      	ldr	r3, [pc, #236]	@ (80118e0 <getSoundData+0x1a0>)
 80117f2:	681c      	ldr	r4, [r3, #0]
 80117f4:	4b38      	ldr	r3, [pc, #224]	@ (80118d8 <getSoundData+0x198>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	9300      	str	r3, [sp, #0]
 80117fa:	0023      	movs	r3, r4
 80117fc:	f000 fde8 	bl	80123d0 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011800:	2300      	movs	r3, #0
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	e019      	b.n	801183a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	18d3      	adds	r3, r2, r3
 801180c:	1c98      	adds	r0, r3, #2
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	3308      	adds	r3, #8
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8011816:	4b33      	ldr	r3, [pc, #204]	@ (80118e4 <getSoundData+0x1a4>)
 8011818:	693a      	ldr	r2, [r7, #16]
 801181a:	0092      	lsls	r2, r2, #2
 801181c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 801181e:	4b32      	ldr	r3, [pc, #200]	@ (80118e8 <getSoundData+0x1a8>)
 8011820:	693a      	ldr	r2, [r7, #16]
 8011822:	0092      	lsls	r2, r2, #2
 8011824:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011826:	4b2c      	ldr	r3, [pc, #176]	@ (80118d8 <getSoundData+0x198>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	9300      	str	r3, [sp, #0]
 801182c:	0013      	movs	r3, r2
 801182e:	0022      	movs	r2, r4
 8011830:	f000 fdce 	bl	80123d0 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	3301      	adds	r3, #1
 8011838:	613b      	str	r3, [r7, #16]
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	2b05      	cmp	r3, #5
 801183e:	d9e2      	bls.n	8011806 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8011840:	1cbb      	adds	r3, r7, #2
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d028      	beq.n	801189a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8011848:	240e      	movs	r4, #14
 801184a:	193b      	adds	r3, r7, r4
 801184c:	2200      	movs	r2, #0
 801184e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8011850:	250d      	movs	r5, #13
 8011852:	197b      	adds	r3, r7, r5
 8011854:	2200      	movs	r2, #0
 8011856:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011858:	4b24      	ldr	r3, [pc, #144]	@ (80118ec <getSoundData+0x1ac>)
 801185a:	6818      	ldr	r0, [r3, #0]
 801185c:	4924      	ldr	r1, [pc, #144]	@ (80118f0 <getSoundData+0x1b0>)
 801185e:	197b      	adds	r3, r7, r5
 8011860:	193a      	adds	r2, r7, r4
 8011862:	f000 fe59 	bl	8012518 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8011866:	193b      	adds	r3, r7, r4
 8011868:	881a      	ldrh	r2, [r3, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	21ff      	movs	r1, #255	@ 0xff
 801186e:	4011      	ands	r1, r2
 8011870:	000c      	movs	r4, r1
 8011872:	7b99      	ldrb	r1, [r3, #14]
 8011874:	2000      	movs	r0, #0
 8011876:	4001      	ands	r1, r0
 8011878:	1c08      	adds	r0, r1, #0
 801187a:	1c21      	adds	r1, r4, #0
 801187c:	4301      	orrs	r1, r0
 801187e:	7399      	strb	r1, [r3, #14]
 8011880:	0a12      	lsrs	r2, r2, #8
 8011882:	b290      	uxth	r0, r2
 8011884:	7bda      	ldrb	r2, [r3, #15]
 8011886:	2100      	movs	r1, #0
 8011888:	400a      	ands	r2, r1
 801188a:	1c11      	adds	r1, r2, #0
 801188c:	1c02      	adds	r2, r0, #0
 801188e:	430a      	orrs	r2, r1
 8011890:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8011892:	197b      	adds	r3, r7, r5
 8011894:	781a      	ldrb	r2, [r3, #0]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 801189a:	f000 f86f 	bl	801197c <micSettlingComplete>
 801189e:	0003      	movs	r3, r0
 80118a0:	001a      	movs	r2, r3
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 80118a6:	4b0a      	ldr	r3, [pc, #40]	@ (80118d0 <getSoundData+0x190>)
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d005      	beq.n	80118bc <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80118b0:	4b08      	ldr	r3, [pc, #32]	@ (80118d4 <getSoundData+0x194>)
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	b25b      	sxtb	r3, r3
 80118b6:	0018      	movs	r0, r3
 80118b8:	f7ff ff06 	bl	80116c8 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 80118bc:	2301      	movs	r3, #1
}
 80118be:	0018      	movs	r0, r3
 80118c0:	46bd      	mov	sp, r7
 80118c2:	b006      	add	sp, #24
 80118c4:	bdb0      	pop	{r4, r5, r7, pc}
 80118c6:	46c0      	nop			@ (mov r8, r8)
 80118c8:	200012b6 	.word	0x200012b6
 80118cc:	200012b9 	.word	0x200012b9
 80118d0:	200012b8 	.word	0x200012b8
 80118d4:	20001d08 	.word	0x20001d08
 80118d8:	20001d44 	.word	0x20001d44
 80118dc:	20001d0c 	.word	0x20001d0c
 80118e0:	20001d10 	.word	0x20001d10
 80118e4:	20001d14 	.word	0x20001d14
 80118e8:	20001d2c 	.word	0x20001d2c
 80118ec:	200012c0 	.word	0x200012c0
 80118f0:	3b5c7333 	.word	0x3b5c7333

080118f4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	001a      	movs	r2, r3
 8011902:	1cfb      	adds	r3, r7, #3
 8011904:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8011906:	4b09      	ldr	r3, [pc, #36]	@ (801192c <soundInit+0x38>)
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 801190c:	4b08      	ldr	r3, [pc, #32]	@ (8011930 <soundInit+0x3c>)
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8011912:	4b08      	ldr	r3, [pc, #32]	@ (8011934 <soundInit+0x40>)
 8011914:	68fa      	ldr	r2, [r7, #12]
 8011916:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8011918:	4b07      	ldr	r3, [pc, #28]	@ (8011938 <soundInit+0x44>)
 801191a:	2200      	movs	r2, #0
 801191c:	569a      	ldrsb	r2, [r3, r2]
 801191e:	4b06      	ldr	r3, [pc, #24]	@ (8011938 <soundInit+0x44>)
 8011920:	701a      	strb	r2, [r3, #0]

    return true;
 8011922:	2301      	movs	r3, #1
}
 8011924:	0018      	movs	r0, r3
 8011926:	46bd      	mov	sp, r7
 8011928:	b004      	add	sp, #16
 801192a:	bd80      	pop	{r7, pc}
 801192c:	20001d00 	.word	0x20001d00
 8011930:	20001cfc 	.word	0x20001cfc
 8011934:	20001d04 	.word	0x20001d04
 8011938:	20001d08 	.word	0x20001d08

0801193c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011940:	4b02      	ldr	r3, [pc, #8]	@ (801194c <clearMaximumAmplitude+0x10>)
 8011942:	2200      	movs	r2, #0
 8011944:	601a      	str	r2, [r3, #0]
}
 8011946:	46c0      	nop			@ (mov r8, r8)
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	200012c0 	.word	0x200012c0

08011950 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011954:	4b08      	ldr	r3, [pc, #32]	@ (8011978 <startMicSettlingPeriod+0x28>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2200      	movs	r2, #0
 801195c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 801195e:	4b06      	ldr	r3, [pc, #24]	@ (8011978 <startMicSettlingPeriod+0x28>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	0018      	movs	r0, r3
 8011964:	f00b f922 	bl	801cbac <HAL_TIM_Base_Start>
 8011968:	1e03      	subs	r3, r0, #0
 801196a:	d001      	beq.n	8011970 <startMicSettlingPeriod+0x20>
    {
        return false;
 801196c:	2300      	movs	r3, #0
 801196e:	e000      	b.n	8011972 <startMicSettlingPeriod+0x22>
    }
    return true;
 8011970:	2301      	movs	r3, #1
}
 8011972:	0018      	movs	r0, r3
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}
 8011978:	20001cfc 	.word	0x20001cfc

0801197c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011982:	4b0e      	ldr	r3, [pc, #56]	@ (80119bc <micSettlingComplete+0x40>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	691b      	ldr	r3, [r3, #16]
 801198a:	2201      	movs	r2, #1
 801198c:	401a      	ands	r2, r3
 801198e:	1dfb      	adds	r3, r7, #7
 8011990:	3a01      	subs	r2, #1
 8011992:	4251      	negs	r1, r2
 8011994:	414a      	adcs	r2, r1
 8011996:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011998:	1dfb      	adds	r3, r7, #7
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d007      	beq.n	80119b0 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 80119a0:	4b06      	ldr	r3, [pc, #24]	@ (80119bc <micSettlingComplete+0x40>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	0018      	movs	r0, r3
 80119a6:	f00b f94b 	bl	801cc40 <HAL_TIM_Base_Stop>
      DataReady = true;
 80119aa:	4b05      	ldr	r3, [pc, #20]	@ (80119c0 <micSettlingComplete+0x44>)
 80119ac:	2201      	movs	r2, #1
 80119ae:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 80119b0:	1dfb      	adds	r3, r7, #7
 80119b2:	781b      	ldrb	r3, [r3, #0]
}
 80119b4:	0018      	movs	r0, r3
 80119b6:	46bd      	mov	sp, r7
 80119b8:	b002      	add	sp, #8
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	20001cfc 	.word	0x20001cfc
 80119c0:	200012b5 	.word	0x200012b5

080119c4 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	0002      	movs	r2, r0
 80119cc:	1dfb      	adds	r3, r7, #7
 80119ce:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 80119d0:	4b29      	ldr	r3, [pc, #164]	@ (8011a78 <enableMicrophone+0xb4>)
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	1dfa      	adds	r2, r7, #7
 80119d8:	7812      	ldrb	r2, [r2, #0]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d101      	bne.n	80119e2 <enableMicrophone+0x1e>
    {
        return true;
 80119de:	2301      	movs	r3, #1
 80119e0:	e045      	b.n	8011a6e <enableMicrophone+0xaa>
    }
    if (bEnable)
 80119e2:	1dfb      	adds	r3, r7, #7
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d025      	beq.n	8011a36 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 80119ea:	f7ff ffb1 	bl	8011950 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 80119ee:	4b23      	ldr	r3, [pc, #140]	@ (8011a7c <enableMicrophone+0xb8>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2280      	movs	r2, #128	@ 0x80
 80119f4:	0092      	lsls	r2, r2, #2
 80119f6:	4922      	ldr	r1, [pc, #136]	@ (8011a80 <enableMicrophone+0xbc>)
 80119f8:	0018      	movs	r0, r3
 80119fa:	f007 fb39 	bl	8019070 <HAL_I2S_Receive_DMA>
 80119fe:	1e03      	subs	r3, r0, #0
 8011a00:	d001      	beq.n	8011a06 <enableMicrophone+0x42>
        {
            return false;
 8011a02:	2300      	movs	r3, #0
 8011a04:	e033      	b.n	8011a6e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8011a06:	f7ff ff99 	bl	801193c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8011a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8011a84 <enableMicrophone+0xc0>)
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011a10:	4b1d      	ldr	r3, [pc, #116]	@ (8011a88 <enableMicrophone+0xc4>)
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	b25b      	sxtb	r3, r3
 8011a16:	0018      	movs	r0, r3
 8011a18:	f7ff fe56 	bl	80116c8 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8011a8c <enableMicrophone+0xc8>)
 8011a1e:	2201      	movs	r2, #1
 8011a20:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8011a22:	4b15      	ldr	r3, [pc, #84]	@ (8011a78 <enableMicrophone+0xb4>)
 8011a24:	2201      	movs	r2, #1
 8011a26:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011a28:	4b19      	ldr	r3, [pc, #100]	@ (8011a90 <enableMicrophone+0xcc>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011a2e:	4b19      	ldr	r3, [pc, #100]	@ (8011a94 <enableMicrophone+0xd0>)
 8011a30:	2200      	movs	r2, #0
 8011a32:	701a      	strb	r2, [r3, #0]
 8011a34:	e01a      	b.n	8011a6c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011a36:	4b14      	ldr	r3, [pc, #80]	@ (8011a88 <enableMicrophone+0xc4>)
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	b25b      	sxtb	r3, r3
 8011a3c:	0018      	movs	r0, r3
 8011a3e:	f7ff fe5d 	bl	80116fc <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011a42:	4b12      	ldr	r3, [pc, #72]	@ (8011a8c <enableMicrophone+0xc8>)
 8011a44:	2200      	movs	r2, #0
 8011a46:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011a48:	4b11      	ldr	r3, [pc, #68]	@ (8011a90 <enableMicrophone+0xcc>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011a4e:	4b11      	ldr	r3, [pc, #68]	@ (8011a94 <enableMicrophone+0xd0>)
 8011a50:	2200      	movs	r2, #0
 8011a52:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011a54:	4b09      	ldr	r3, [pc, #36]	@ (8011a7c <enableMicrophone+0xb8>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	0018      	movs	r0, r3
 8011a5a:	f007 fbcb 	bl	80191f4 <HAL_I2S_DMAStop>
 8011a5e:	1e03      	subs	r3, r0, #0
 8011a60:	d001      	beq.n	8011a66 <enableMicrophone+0xa2>
        {
            return false;
 8011a62:	2300      	movs	r3, #0
 8011a64:	e003      	b.n	8011a6e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011a66:	4b04      	ldr	r3, [pc, #16]	@ (8011a78 <enableMicrophone+0xb4>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011a6c:	2301      	movs	r3, #1
}
 8011a6e:	0018      	movs	r0, r3
 8011a70:	46bd      	mov	sp, r7
 8011a72:	b002      	add	sp, #8
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	46c0      	nop			@ (mov r8, r8)
 8011a78:	200012b6 	.word	0x200012b6
 8011a7c:	20001d00 	.word	0x20001d00
 8011a80:	200012fc 	.word	0x200012fc
 8011a84:	200012bc 	.word	0x200012bc
 8011a88:	20001d08 	.word	0x20001d08
 8011a8c:	200012b8 	.word	0x200012b8
 8011a90:	200012b7 	.word	0x200012b7
 8011a94:	200012b9 	.word	0x200012b9

08011a98 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8011ad0 <startSPLcalculation+0x38>)
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	2201      	movs	r2, #1
 8011aa4:	4053      	eors	r3, r2
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d001      	beq.n	8011ab0 <startSPLcalculation+0x18>
    {
        return false;
 8011aac:	2300      	movs	r3, #0
 8011aae:	e00c      	b.n	8011aca <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011ab0:	4b08      	ldr	r3, [pc, #32]	@ (8011ad4 <startSPLcalculation+0x3c>)
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d001      	beq.n	8011abe <startSPLcalculation+0x26>
    {
        return true;
 8011aba:	2301      	movs	r3, #1
 8011abc:	e005      	b.n	8011aca <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011abe:	f000 fb63 	bl	8012188 <resetSPLstate>
    SPLcalcEnabled = true;
 8011ac2:	4b04      	ldr	r3, [pc, #16]	@ (8011ad4 <startSPLcalculation+0x3c>)
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	701a      	strb	r2, [r3, #0]
    return true;
 8011ac8:	2301      	movs	r3, #1
}
 8011aca:	0018      	movs	r0, r3
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	200012b6 	.word	0x200012b6
 8011ad4:	200012b7 	.word	0x200012b7

08011ad8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011ae0:	4b05      	ldr	r3, [pc, #20]	@ (8011af8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d102      	bne.n	8011af0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011aea:	2000      	movs	r0, #0
 8011aec:	f000 f81a 	bl	8011b24 <processHalfDMAbuffer>
  }
}
 8011af0:	46c0      	nop			@ (mov r8, r8)
 8011af2:	46bd      	mov	sp, r7
 8011af4:	b002      	add	sp, #8
 8011af6:	bd80      	pop	{r7, pc}
 8011af8:	20001d00 	.word	0x20001d00

08011afc <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011b04:	4b06      	ldr	r3, [pc, #24]	@ (8011b20 <HAL_I2S_RxCpltCallback+0x24>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d104      	bne.n	8011b18 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011b0e:	2380      	movs	r3, #128	@ 0x80
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	0018      	movs	r0, r3
 8011b14:	f000 f806 	bl	8011b24 <processHalfDMAbuffer>
  }
}
 8011b18:	46c0      	nop			@ (mov r8, r8)
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	b002      	add	sp, #8
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	20001d00 	.word	0x20001d00

08011b24 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	005a      	lsls	r2, r3, #1
 8011b30:	4b15      	ldr	r3, [pc, #84]	@ (8011b88 <processHalfDMAbuffer+0x64>)
 8011b32:	18d3      	adds	r3, r2, r3
 8011b34:	4a15      	ldr	r2, [pc, #84]	@ (8011b8c <processHalfDMAbuffer+0x68>)
 8011b36:	2180      	movs	r1, #128	@ 0x80
 8011b38:	0089      	lsls	r1, r1, #2
 8011b3a:	0018      	movs	r0, r3
 8011b3c:	f000 fd35 	bl	80125aa <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011b40:	4b13      	ldr	r3, [pc, #76]	@ (8011b90 <processHalfDMAbuffer+0x6c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	425a      	negs	r2, r3
 8011b46:	4153      	adcs	r3, r2
 8011b48:	b2da      	uxtb	r2, r3
 8011b4a:	4b11      	ldr	r3, [pc, #68]	@ (8011b90 <processHalfDMAbuffer+0x6c>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2109      	movs	r1, #9
 8011b50:	4299      	cmp	r1, r3
 8011b52:	419b      	sbcs	r3, r3
 8011b54:	425b      	negs	r3, r3
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	480c      	ldr	r0, [pc, #48]	@ (8011b8c <processHalfDMAbuffer+0x68>)
 8011b5a:	2180      	movs	r1, #128	@ 0x80
 8011b5c:	f000 fb46 	bl	80121ec <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011b60:	4b0b      	ldr	r3, [pc, #44]	@ (8011b90 <processHalfDMAbuffer+0x6c>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b09      	cmp	r3, #9
 8011b66:	d804      	bhi.n	8011b72 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011b68:	4b09      	ldr	r3, [pc, #36]	@ (8011b90 <processHalfDMAbuffer+0x6c>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	1c5a      	adds	r2, r3, #1
 8011b6e:	4b08      	ldr	r3, [pc, #32]	@ (8011b90 <processHalfDMAbuffer+0x6c>)
 8011b70:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011b72:	4b08      	ldr	r3, [pc, #32]	@ (8011b94 <processHalfDMAbuffer+0x70>)
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d001      	beq.n	8011b80 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011b7c:	f000 f826 	bl	8011bcc <calculateSPLQ31>
    }
}
 8011b80:	46c0      	nop			@ (mov r8, r8)
 8011b82:	46bd      	mov	sp, r7
 8011b84:	b002      	add	sp, #8
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	200012fc 	.word	0x200012fc
 8011b8c:	20001afc 	.word	0x20001afc
 8011b90:	200012bc 	.word	0x200012bc
 8011b94:	200012b7 	.word	0x200012b7

08011b98 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011ba0:	4b07      	ldr	r3, [pc, #28]	@ (8011bc0 <HAL_I2S_ErrorCallback+0x28>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d106      	bne.n	8011bb8 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011baa:	4a06      	ldr	r2, [pc, #24]	@ (8011bc4 <HAL_I2S_ErrorCallback+0x2c>)
 8011bac:	239e      	movs	r3, #158	@ 0x9e
 8011bae:	0059      	lsls	r1, r3, #1
 8011bb0:	4b05      	ldr	r3, [pc, #20]	@ (8011bc8 <HAL_I2S_ErrorCallback+0x30>)
 8011bb2:	0018      	movs	r0, r3
 8011bb4:	f002 fa20 	bl	8013ff8 <errorHandler>
  }
}
 8011bb8:	46c0      	nop			@ (mov r8, r8)
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	b002      	add	sp, #8
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	20001d00 	.word	0x20001d00
 8011bc4:	0802d8b8 	.word	0x0802d8b8
 8011bc8:	0802e508 	.word	0x0802e508

08011bcc <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bce:	b0b3      	sub	sp, #204	@ 0xcc
 8011bd0:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011bd2:	4ae2      	ldr	r2, [pc, #904]	@ (8011f5c <calculateSPLQ31+0x390>)
 8011bd4:	2338      	movs	r3, #56	@ 0x38
 8011bd6:	2030      	movs	r0, #48	@ 0x30
 8011bd8:	181b      	adds	r3, r3, r0
 8011bda:	19d9      	adds	r1, r3, r7
 8011bdc:	2334      	movs	r3, #52	@ 0x34
 8011bde:	181b      	adds	r3, r3, r0
 8011be0:	19d8      	adds	r0, r3, r7
 8011be2:	2380      	movs	r3, #128	@ 0x80
 8011be4:	f000 fc36 	bl	8012454 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	da00      	bge.n	8011bf0 <calculateSPLQ31+0x24>
 8011bee:	3301      	adds	r3, #1
 8011bf0:	105b      	asrs	r3, r3, #1
 8011bf2:	001a      	movs	r2, r3
 8011bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	da00      	bge.n	8011bfc <calculateSPLQ31+0x30>
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	105b      	asrs	r3, r3, #1
 8011bfe:	18d3      	adds	r3, r2, r3
 8011c00:	2188      	movs	r1, #136	@ 0x88
 8011c02:	187a      	adds	r2, r7, r1
 8011c04:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011c06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011c08:	187b      	adds	r3, r7, r1
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	1ad3      	subs	r3, r2, r3
 8011c0e:	3304      	adds	r3, #4
 8011c10:	2284      	movs	r2, #132	@ 0x84
 8011c12:	18b9      	adds	r1, r7, r2
 8011c14:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011c16:	18bb      	adds	r3, r7, r2
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4ad1      	ldr	r2, [pc, #836]	@ (8011f60 <calculateSPLQ31+0x394>)
 8011c1c:	0019      	movs	r1, r3
 8011c1e:	0010      	movs	r0, r2
 8011c20:	f000 fc58 	bl	80124d4 <getPo2factor>
 8011c24:	0003      	movs	r3, r0
 8011c26:	2280      	movs	r2, #128	@ 0x80
 8011c28:	18ba      	adds	r2, r7, r2
 8011c2a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	2284      	movs	r2, #132	@ 0x84
 8011c30:	2130      	movs	r1, #48	@ 0x30
 8011c32:	1852      	adds	r2, r2, r1
 8011c34:	19d2      	adds	r2, r2, r7
 8011c36:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c38:	2300      	movs	r3, #0
 8011c3a:	2280      	movs	r2, #128	@ 0x80
 8011c3c:	1852      	adds	r2, r2, r1
 8011c3e:	19d2      	adds	r2, r2, r7
 8011c40:	6013      	str	r3, [r2, #0]
 8011c42:	e032      	b.n	8011caa <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011c44:	4ac5      	ldr	r2, [pc, #788]	@ (8011f5c <calculateSPLQ31+0x390>)
 8011c46:	2680      	movs	r6, #128	@ 0x80
 8011c48:	2330      	movs	r3, #48	@ 0x30
 8011c4a:	18f1      	adds	r1, r6, r3
 8011c4c:	19cb      	adds	r3, r1, r7
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	589a      	ldr	r2, [r3, r2]
 8011c54:	2188      	movs	r1, #136	@ 0x88
 8011c56:	1879      	adds	r1, r7, r1
 8011c58:	680b      	ldr	r3, [r1, #0]
 8011c5a:	1ad2      	subs	r2, r2, r3
 8011c5c:	2180      	movs	r1, #128	@ 0x80
 8011c5e:	1879      	adds	r1, r7, r1
 8011c60:	680b      	ldr	r3, [r1, #0]
 8011c62:	409a      	lsls	r2, r3
 8011c64:	0011      	movs	r1, r2
 8011c66:	4abf      	ldr	r2, [pc, #764]	@ (8011f64 <calculateSPLQ31+0x398>)
 8011c68:	2084      	movs	r0, #132	@ 0x84
 8011c6a:	2330      	movs	r3, #48	@ 0x30
 8011c6c:	18c3      	adds	r3, r0, r3
 8011c6e:	19db      	adds	r3, r3, r7
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011c76:	2230      	movs	r2, #48	@ 0x30
 8011c78:	1883      	adds	r3, r0, r2
 8011c7a:	19db      	adds	r3, r3, r7
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	49b8      	ldr	r1, [pc, #736]	@ (8011f64 <calculateSPLQ31+0x398>)
 8011c82:	009a      	lsls	r2, r3, #2
 8011c84:	2300      	movs	r3, #0
 8011c86:	5053      	str	r3, [r2, r1]
        count += 2;
 8011c88:	2230      	movs	r2, #48	@ 0x30
 8011c8a:	1883      	adds	r3, r0, r2
 8011c8c:	19db      	adds	r3, r3, r7
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	3302      	adds	r3, #2
 8011c92:	0011      	movs	r1, r2
 8011c94:	1882      	adds	r2, r0, r2
 8011c96:	19d2      	adds	r2, r2, r7
 8011c98:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c9a:	000a      	movs	r2, r1
 8011c9c:	18b3      	adds	r3, r6, r2
 8011c9e:	19db      	adds	r3, r3, r7
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	18b2      	adds	r2, r6, r2
 8011ca6:	19d2      	adds	r2, r2, r7
 8011ca8:	6013      	str	r3, [r2, #0]
 8011caa:	2380      	movs	r3, #128	@ 0x80
 8011cac:	2630      	movs	r6, #48	@ 0x30
 8011cae:	199b      	adds	r3, r3, r6
 8011cb0:	19db      	adds	r3, r3, r7
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8011cb6:	d9c5      	bls.n	8011c44 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011cb8:	4bab      	ldr	r3, [pc, #684]	@ (8011f68 <calculateSPLQ31+0x39c>)
 8011cba:	6818      	ldr	r0, [r3, #0]
 8011cbc:	49a9      	ldr	r1, [pc, #676]	@ (8011f64 <calculateSPLQ31+0x398>)
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f012 f847 	bl	8023d54 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011cc6:	4aa9      	ldr	r2, [pc, #676]	@ (8011f6c <calculateSPLQ31+0x3a0>)
 8011cc8:	2338      	movs	r3, #56	@ 0x38
 8011cca:	199b      	adds	r3, r3, r6
 8011ccc:	19d9      	adds	r1, r3, r7
 8011cce:	2334      	movs	r3, #52	@ 0x34
 8011cd0:	199b      	adds	r3, r3, r6
 8011cd2:	19d8      	adds	r0, r3, r7
 8011cd4:	237e      	movs	r3, #126	@ 0x7e
 8011cd6:	f000 fbbd 	bl	8012454 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011cda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011cdc:	2380      	movs	r3, #128	@ 0x80
 8011cde:	061b      	lsls	r3, r3, #24
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d101      	bne.n	8011ce8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8011f60 <calculateSPLQ31+0x394>)
 8011ce6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011ce8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011cea:	2380      	movs	r3, #128	@ 0x80
 8011cec:	061b      	lsls	r3, r3, #24
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d101      	bne.n	8011cf6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011cf2:	4b9b      	ldr	r3, [pc, #620]	@ (8011f60 <calculateSPLQ31+0x394>)
 8011cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011cf8:	17da      	asrs	r2, r3, #31
 8011cfa:	189b      	adds	r3, r3, r2
 8011cfc:	4053      	eors	r3, r2
 8011cfe:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011d00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d02:	17da      	asrs	r2, r3, #31
 8011d04:	189b      	adds	r3, r3, r2
 8011d06:	4053      	eors	r3, r2
 8011d08:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011d0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	dd01      	ble.n	8011d16 <calculateSPLQ31+0x14a>
    {
        max = min;
 8011d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d14:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d18:	3304      	adds	r3, #4
 8011d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011d1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011d1e:	4a90      	ldr	r2, [pc, #576]	@ (8011f60 <calculateSPLQ31+0x394>)
 8011d20:	0019      	movs	r1, r3
 8011d22:	0010      	movs	r0, r2
 8011d24:	f000 fbd6 	bl	80124d4 <getPo2factor>
 8011d28:	0003      	movs	r3, r0
 8011d2a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d2c:	2302      	movs	r3, #2
 8011d2e:	22ac      	movs	r2, #172	@ 0xac
 8011d30:	18ba      	adds	r2, r7, r2
 8011d32:	6013      	str	r3, [r2, #0]
 8011d34:	e012      	b.n	8011d5c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011d36:	4a8b      	ldr	r2, [pc, #556]	@ (8011f64 <calculateSPLQ31+0x398>)
 8011d38:	20ac      	movs	r0, #172	@ 0xac
 8011d3a:	183b      	adds	r3, r7, r0
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	589a      	ldr	r2, [r3, r2]
 8011d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d44:	409a      	lsls	r2, r3
 8011d46:	0011      	movs	r1, r2
 8011d48:	4a86      	ldr	r2, [pc, #536]	@ (8011f64 <calculateSPLQ31+0x398>)
 8011d4a:	183b      	adds	r3, r7, r0
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d52:	183b      	adds	r3, r7, r0
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	3301      	adds	r3, #1
 8011d58:	183a      	adds	r2, r7, r0
 8011d5a:	6013      	str	r3, [r2, #0]
 8011d5c:	23ac      	movs	r3, #172	@ 0xac
 8011d5e:	18fb      	adds	r3, r7, r3
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d64:	d9e7      	bls.n	8011d36 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011d66:	4b7d      	ldr	r3, [pc, #500]	@ (8011f5c <calculateSPLQ31+0x390>)
 8011d68:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011d6a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011d6c:	4b7d      	ldr	r3, [pc, #500]	@ (8011f64 <calculateSPLQ31+0x398>)
 8011d6e:	2240      	movs	r2, #64	@ 0x40
 8011d70:	0018      	movs	r0, r3
 8011d72:	f012 fd99 	bl	80248a8 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011d76:	2330      	movs	r3, #48	@ 0x30
 8011d78:	18fb      	adds	r3, r7, r3
 8011d7a:	0018      	movs	r0, r3
 8011d7c:	2330      	movs	r3, #48	@ 0x30
 8011d7e:	001a      	movs	r2, r3
 8011d80:	2100      	movs	r1, #0
 8011d82:	f014 fbc3 	bl	802650c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011d86:	2200      	movs	r2, #0
 8011d88:	2300      	movs	r3, #0
 8011d8a:	21a0      	movs	r1, #160	@ 0xa0
 8011d8c:	1879      	adds	r1, r7, r1
 8011d8e:	600a      	str	r2, [r1, #0]
 8011d90:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011d92:	2301      	movs	r3, #1
 8011d94:	229c      	movs	r2, #156	@ 0x9c
 8011d96:	18ba      	adds	r2, r7, r2
 8011d98:	6013      	str	r3, [r2, #0]
 8011d9a:	e05b      	b.n	8011e54 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011d9c:	269c      	movs	r6, #156	@ 0x9c
 8011d9e:	19bb      	adds	r3, r7, r6
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	009a      	lsls	r2, r3, #2
 8011da4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011da6:	189b      	adds	r3, r3, r2
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	613b      	str	r3, [r7, #16]
 8011dac:	17db      	asrs	r3, r3, #31
 8011dae:	617b      	str	r3, [r7, #20]
 8011db0:	4b6f      	ldr	r3, [pc, #444]	@ (8011f70 <calculateSPLQ31+0x3a4>)
 8011db2:	681a      	ldr	r2, [r3, #0]
 8011db4:	19bb      	adds	r3, r7, r6
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	18d3      	adds	r3, r2, r3
 8011dbc:	881b      	ldrh	r3, [r3, #0]
 8011dbe:	60bb      	str	r3, [r7, #8]
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	60fb      	str	r3, [r7, #12]
 8011dc4:	68ba      	ldr	r2, [r7, #8]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	6938      	ldr	r0, [r7, #16]
 8011dca:	6979      	ldr	r1, [r7, #20]
 8011dcc:	f7ee fbf8 	bl	80005c0 <__aeabi_lmul>
 8011dd0:	0002      	movs	r2, r0
 8011dd2:	000b      	movs	r3, r1
 8011dd4:	0010      	movs	r0, r2
 8011dd6:	0019      	movs	r1, r3
 8011dd8:	23a0      	movs	r3, #160	@ 0xa0
 8011dda:	18fa      	adds	r2, r7, r3
 8011ddc:	6853      	ldr	r3, [r2, #4]
 8011dde:	6812      	ldr	r2, [r2, #0]
 8011de0:	1812      	adds	r2, r2, r0
 8011de2:	414b      	adcs	r3, r1
 8011de4:	21a0      	movs	r1, #160	@ 0xa0
 8011de6:	1879      	adds	r1, r7, r1
 8011de8:	600a      	str	r2, [r1, #0]
 8011dea:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011dec:	4b61      	ldr	r3, [pc, #388]	@ (8011f74 <calculateSPLQ31+0x3a8>)
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	19bb      	adds	r3, r7, r6
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	18d3      	adds	r3, r2, r3
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	2b06      	cmp	r3, #6
 8011dfa:	d025      	beq.n	8011e48 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8011f74 <calculateSPLQ31+0x3a8>)
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	19bb      	adds	r3, r7, r6
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	18d3      	adds	r3, r2, r3
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	2230      	movs	r2, #48	@ 0x30
 8011e0a:	18ba      	adds	r2, r7, r2
 8011e0c:	00db      	lsls	r3, r3, #3
 8011e0e:	18d3      	adds	r3, r2, r3
 8011e10:	6818      	ldr	r0, [r3, #0]
 8011e12:	6859      	ldr	r1, [r3, #4]
 8011e14:	19bb      	adds	r3, r7, r6
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	009a      	lsls	r2, r3, #2
 8011e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011e1c:	189b      	adds	r3, r3, r2
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	603b      	str	r3, [r7, #0]
 8011e22:	17db      	asrs	r3, r3, #31
 8011e24:	607b      	str	r3, [r7, #4]
 8011e26:	4b53      	ldr	r3, [pc, #332]	@ (8011f74 <calculateSPLQ31+0x3a8>)
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	19be      	adds	r6, r7, r6
 8011e2c:	6833      	ldr	r3, [r6, #0]
 8011e2e:	18d3      	adds	r3, r2, r3
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	001e      	movs	r6, r3
 8011e34:	683a      	ldr	r2, [r7, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	1880      	adds	r0, r0, r2
 8011e3a:	4159      	adcs	r1, r3
 8011e3c:	2330      	movs	r3, #48	@ 0x30
 8011e3e:	18fa      	adds	r2, r7, r3
 8011e40:	00f3      	lsls	r3, r6, #3
 8011e42:	18d3      	adds	r3, r2, r3
 8011e44:	6018      	str	r0, [r3, #0]
 8011e46:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011e48:	229c      	movs	r2, #156	@ 0x9c
 8011e4a:	18bb      	adds	r3, r7, r2
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	18ba      	adds	r2, r7, r2
 8011e52:	6013      	str	r3, [r2, #0]
 8011e54:	239c      	movs	r3, #156	@ 0x9c
 8011e56:	18fb      	adds	r3, r7, r3
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8011e5c:	d99e      	bls.n	8011d9c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011e5e:	2380      	movs	r3, #128	@ 0x80
 8011e60:	18fb      	adds	r3, r7, r3
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	001a      	movs	r2, r3
 8011e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e6a:	005b      	lsls	r3, r3, #1
 8011e6c:	18d3      	adds	r3, r2, r3
 8011e6e:	3b22      	subs	r3, #34	@ 0x22
 8011e70:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e74:	17da      	asrs	r2, r3, #31
 8011e76:	189b      	adds	r3, r3, r2
 8011e78:	4053      	eors	r3, r2
 8011e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	da62      	bge.n	8011f48 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e84:	3b20      	subs	r3, #32
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	db05      	blt.n	8011e96 <calculateSPLQ31+0x2ca>
 8011e8a:	22a0      	movs	r2, #160	@ 0xa0
 8011e8c:	18ba      	adds	r2, r7, r2
 8011e8e:	6812      	ldr	r2, [r2, #0]
 8011e90:	409a      	lsls	r2, r3
 8011e92:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e94:	e010      	b.n	8011eb8 <calculateSPLQ31+0x2ec>
 8011e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e98:	2220      	movs	r2, #32
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	22a0      	movs	r2, #160	@ 0xa0
 8011e9e:	18ba      	adds	r2, r7, r2
 8011ea0:	6812      	ldr	r2, [r2, #0]
 8011ea2:	40da      	lsrs	r2, r3
 8011ea4:	0013      	movs	r3, r2
 8011ea6:	22a4      	movs	r2, #164	@ 0xa4
 8011ea8:	18ba      	adds	r2, r7, r2
 8011eaa:	6811      	ldr	r1, [r2, #0]
 8011eac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011eae:	4091      	lsls	r1, r2
 8011eb0:	6279      	str	r1, [r7, #36]	@ 0x24
 8011eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eb4:	431a      	orrs	r2, r3
 8011eb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8011eb8:	21a0      	movs	r1, #160	@ 0xa0
 8011eba:	187b      	adds	r3, r7, r1
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ec0:	409a      	lsls	r2, r3
 8011ec2:	623a      	str	r2, [r7, #32]
 8011ec4:	6a3b      	ldr	r3, [r7, #32]
 8011ec6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011ec8:	187a      	adds	r2, r7, r1
 8011eca:	6013      	str	r3, [r2, #0]
 8011ecc:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011ece:	2300      	movs	r3, #0
 8011ed0:	2298      	movs	r2, #152	@ 0x98
 8011ed2:	18ba      	adds	r2, r7, r2
 8011ed4:	6013      	str	r3, [r2, #0]
 8011ed6:	e031      	b.n	8011f3c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011ed8:	2330      	movs	r3, #48	@ 0x30
 8011eda:	18fa      	adds	r2, r7, r3
 8011edc:	2398      	movs	r3, #152	@ 0x98
 8011ede:	18fb      	adds	r3, r7, r3
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	00db      	lsls	r3, r3, #3
 8011ee4:	18d3      	adds	r3, r2, r3
 8011ee6:	681a      	ldr	r2, [r3, #0]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011eec:	3920      	subs	r1, #32
 8011eee:	2900      	cmp	r1, #0
 8011ef0:	db03      	blt.n	8011efa <calculateSPLQ31+0x32e>
 8011ef2:	0010      	movs	r0, r2
 8011ef4:	4088      	lsls	r0, r1
 8011ef6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011ef8:	e00c      	b.n	8011f14 <calculateSPLQ31+0x348>
 8011efa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011efc:	2020      	movs	r0, #32
 8011efe:	1a41      	subs	r1, r0, r1
 8011f00:	0010      	movs	r0, r2
 8011f02:	40c8      	lsrs	r0, r1
 8011f04:	0001      	movs	r1, r0
 8011f06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011f08:	001c      	movs	r4, r3
 8011f0a:	4084      	lsls	r4, r0
 8011f0c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011f0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f10:	4308      	orrs	r0, r1
 8011f12:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011f14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011f16:	0013      	movs	r3, r2
 8011f18:	408b      	lsls	r3, r1
 8011f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f1c:	2330      	movs	r3, #48	@ 0x30
 8011f1e:	18fa      	adds	r2, r7, r3
 8011f20:	2098      	movs	r0, #152	@ 0x98
 8011f22:	183b      	adds	r3, r7, r0
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	00db      	lsls	r3, r3, #3
 8011f28:	18d3      	adds	r3, r2, r3
 8011f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f2e:	6019      	str	r1, [r3, #0]
 8011f30:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011f32:	183b      	adds	r3, r7, r0
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	3301      	adds	r3, #1
 8011f38:	183a      	adds	r2, r7, r0
 8011f3a:	6013      	str	r3, [r2, #0]
 8011f3c:	2398      	movs	r3, #152	@ 0x98
 8011f3e:	18fb      	adds	r3, r7, r3
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2b05      	cmp	r3, #5
 8011f44:	d9c8      	bls.n	8011ed8 <calculateSPLQ31+0x30c>
 8011f46:	e06b      	b.n	8012020 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f4a:	3b20      	subs	r3, #32
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	db13      	blt.n	8011f78 <calculateSPLQ31+0x3ac>
 8011f50:	22a4      	movs	r2, #164	@ 0xa4
 8011f52:	18ba      	adds	r2, r7, r2
 8011f54:	6812      	ldr	r2, [r2, #0]
 8011f56:	40da      	lsrs	r2, r3
 8011f58:	61ba      	str	r2, [r7, #24]
 8011f5a:	e01e      	b.n	8011f9a <calculateSPLQ31+0x3ce>
 8011f5c:	20001afc 	.word	0x20001afc
 8011f60:	7fffffff 	.word	0x7fffffff
 8011f64:	20001d48 	.word	0x20001d48
 8011f68:	200000d4 	.word	0x200000d4
 8011f6c:	20001d50 	.word	0x20001d50
 8011f70:	200000d8 	.word	0x200000d8
 8011f74:	200000e4 	.word	0x200000e4
 8011f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f7a:	2220      	movs	r2, #32
 8011f7c:	1ad3      	subs	r3, r2, r3
 8011f7e:	22a4      	movs	r2, #164	@ 0xa4
 8011f80:	18ba      	adds	r2, r7, r2
 8011f82:	6812      	ldr	r2, [r2, #0]
 8011f84:	409a      	lsls	r2, r3
 8011f86:	0013      	movs	r3, r2
 8011f88:	22a0      	movs	r2, #160	@ 0xa0
 8011f8a:	18ba      	adds	r2, r7, r2
 8011f8c:	6811      	ldr	r1, [r2, #0]
 8011f8e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f90:	40d1      	lsrs	r1, r2
 8011f92:	61b9      	str	r1, [r7, #24]
 8011f94:	69ba      	ldr	r2, [r7, #24]
 8011f96:	431a      	orrs	r2, r3
 8011f98:	61ba      	str	r2, [r7, #24]
 8011f9a:	23a4      	movs	r3, #164	@ 0xa4
 8011f9c:	18fb      	adds	r3, r7, r3
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011fa2:	40da      	lsrs	r2, r3
 8011fa4:	61fa      	str	r2, [r7, #28]
 8011fa6:	69ba      	ldr	r2, [r7, #24]
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	21a0      	movs	r1, #160	@ 0xa0
 8011fac:	1879      	adds	r1, r7, r1
 8011fae:	600a      	str	r2, [r1, #0]
 8011fb0:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	2294      	movs	r2, #148	@ 0x94
 8011fb6:	18ba      	adds	r2, r7, r2
 8011fb8:	6013      	str	r3, [r2, #0]
 8011fba:	e02c      	b.n	8012016 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011fbc:	2330      	movs	r3, #48	@ 0x30
 8011fbe:	18fa      	adds	r2, r7, r3
 8011fc0:	2394      	movs	r3, #148	@ 0x94
 8011fc2:	18fb      	adds	r3, r7, r3
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	00db      	lsls	r3, r3, #3
 8011fc8:	18d3      	adds	r3, r2, r3
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fd0:	3920      	subs	r1, #32
 8011fd2:	2900      	cmp	r1, #0
 8011fd4:	db03      	blt.n	8011fde <calculateSPLQ31+0x412>
 8011fd6:	0018      	movs	r0, r3
 8011fd8:	40c8      	lsrs	r0, r1
 8011fda:	0004      	movs	r4, r0
 8011fdc:	e00a      	b.n	8011ff4 <calculateSPLQ31+0x428>
 8011fde:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fe0:	2020      	movs	r0, #32
 8011fe2:	1a41      	subs	r1, r0, r1
 8011fe4:	0018      	movs	r0, r3
 8011fe6:	4088      	lsls	r0, r1
 8011fe8:	0001      	movs	r1, r0
 8011fea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011fec:	0016      	movs	r6, r2
 8011fee:	40c6      	lsrs	r6, r0
 8011ff0:	0034      	movs	r4, r6
 8011ff2:	430c      	orrs	r4, r1
 8011ff4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ff6:	40cb      	lsrs	r3, r1
 8011ff8:	001d      	movs	r5, r3
 8011ffa:	2330      	movs	r3, #48	@ 0x30
 8011ffc:	18fa      	adds	r2, r7, r3
 8011ffe:	2194      	movs	r1, #148	@ 0x94
 8012000:	187b      	adds	r3, r7, r1
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	00db      	lsls	r3, r3, #3
 8012006:	18d3      	adds	r3, r2, r3
 8012008:	601c      	str	r4, [r3, #0]
 801200a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801200c:	187b      	adds	r3, r7, r1
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	3301      	adds	r3, #1
 8012012:	187a      	adds	r2, r7, r1
 8012014:	6013      	str	r3, [r2, #0]
 8012016:	2394      	movs	r3, #148	@ 0x94
 8012018:	18fb      	adds	r3, r7, r3
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b05      	cmp	r3, #5
 801201e:	d9cd      	bls.n	8011fbc <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8012020:	230f      	movs	r3, #15
 8012022:	425d      	negs	r5, r3
 8012024:	2305      	movs	r3, #5
 8012026:	425e      	negs	r6, r3
 8012028:	4b4a      	ldr	r3, [pc, #296]	@ (8012154 <calculateSPLQ31+0x588>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	4b4a      	ldr	r3, [pc, #296]	@ (8012158 <calculateSPLQ31+0x58c>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	21a0      	movs	r1, #160	@ 0xa0
 8012036:	1879      	adds	r1, r7, r1
 8012038:	6808      	ldr	r0, [r1, #0]
 801203a:	6849      	ldr	r1, [r1, #4]
 801203c:	4c47      	ldr	r4, [pc, #284]	@ (801215c <calculateSPLQ31+0x590>)
 801203e:	9403      	str	r4, [sp, #12]
 8012040:	4c47      	ldr	r4, [pc, #284]	@ (8012160 <calculateSPLQ31+0x594>)
 8012042:	9402      	str	r4, [sp, #8]
 8012044:	9301      	str	r3, [sp, #4]
 8012046:	9200      	str	r2, [sp, #0]
 8012048:	0033      	movs	r3, r6
 801204a:	002a      	movs	r2, r5
 801204c:	f000 fa86 	bl	801255c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012050:	2300      	movs	r3, #0
 8012052:	2290      	movs	r2, #144	@ 0x90
 8012054:	18ba      	adds	r2, r7, r2
 8012056:	6013      	str	r3, [r2, #0]
 8012058:	e026      	b.n	80120a8 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801205a:	2330      	movs	r3, #48	@ 0x30
 801205c:	18fa      	adds	r2, r7, r3
 801205e:	2490      	movs	r4, #144	@ 0x90
 8012060:	193b      	adds	r3, r7, r4
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	18d3      	adds	r3, r2, r3
 8012068:	6818      	ldr	r0, [r3, #0]
 801206a:	6859      	ldr	r1, [r3, #4]
 801206c:	230f      	movs	r3, #15
 801206e:	425d      	negs	r5, r3
 8012070:	2305      	movs	r3, #5
 8012072:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8012074:	193b      	adds	r3, r7, r4
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	009a      	lsls	r2, r3, #2
 801207a:	4b3a      	ldr	r3, [pc, #232]	@ (8012164 <calculateSPLQ31+0x598>)
 801207c:	18d3      	adds	r3, r2, r3
 801207e:	193a      	adds	r2, r7, r4
 8012080:	6812      	ldr	r2, [r2, #0]
 8012082:	0094      	lsls	r4, r2, #2
 8012084:	4a38      	ldr	r2, [pc, #224]	@ (8012168 <calculateSPLQ31+0x59c>)
 8012086:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8012088:	9203      	str	r2, [sp, #12]
 801208a:	9302      	str	r3, [sp, #8]
 801208c:	2300      	movs	r3, #0
 801208e:	9301      	str	r3, [sp, #4]
 8012090:	2300      	movs	r3, #0
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	0033      	movs	r3, r6
 8012096:	002a      	movs	r2, r5
 8012098:	f000 fa60 	bl	801255c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801209c:	2490      	movs	r4, #144	@ 0x90
 801209e:	193b      	adds	r3, r7, r4
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	3301      	adds	r3, #1
 80120a4:	193a      	adds	r2, r7, r4
 80120a6:	6013      	str	r3, [r2, #0]
 80120a8:	2390      	movs	r3, #144	@ 0x90
 80120aa:	18fb      	adds	r3, r7, r3
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	2b05      	cmp	r3, #5
 80120b0:	d9d3      	bls.n	801205a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 80120b2:	4b2b      	ldr	r3, [pc, #172]	@ (8012160 <calculateSPLQ31+0x594>)
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	4b2d      	ldr	r3, [pc, #180]	@ (801216c <calculateSPLQ31+0x5a0>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	18d2      	adds	r2, r2, r3
 80120bc:	4b2b      	ldr	r3, [pc, #172]	@ (801216c <calculateSPLQ31+0x5a0>)
 80120be:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 80120c0:	4b26      	ldr	r3, [pc, #152]	@ (801215c <calculateSPLQ31+0x590>)
 80120c2:	681a      	ldr	r2, [r3, #0]
 80120c4:	4b2a      	ldr	r3, [pc, #168]	@ (8012170 <calculateSPLQ31+0x5a4>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	18d2      	adds	r2, r2, r3
 80120ca:	4b29      	ldr	r3, [pc, #164]	@ (8012170 <calculateSPLQ31+0x5a4>)
 80120cc:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120ce:	2300      	movs	r3, #0
 80120d0:	228c      	movs	r2, #140	@ 0x8c
 80120d2:	18ba      	adds	r2, r7, r2
 80120d4:	6013      	str	r3, [r2, #0]
 80120d6:	e025      	b.n	8012124 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80120d8:	4b22      	ldr	r3, [pc, #136]	@ (8012164 <calculateSPLQ31+0x598>)
 80120da:	208c      	movs	r0, #140	@ 0x8c
 80120dc:	183a      	adds	r2, r7, r0
 80120de:	6812      	ldr	r2, [r2, #0]
 80120e0:	0092      	lsls	r2, r2, #2
 80120e2:	58d2      	ldr	r2, [r2, r3]
 80120e4:	4b23      	ldr	r3, [pc, #140]	@ (8012174 <calculateSPLQ31+0x5a8>)
 80120e6:	1839      	adds	r1, r7, r0
 80120e8:	6809      	ldr	r1, [r1, #0]
 80120ea:	0089      	lsls	r1, r1, #2
 80120ec:	58cb      	ldr	r3, [r1, r3]
 80120ee:	18d1      	adds	r1, r2, r3
 80120f0:	4b20      	ldr	r3, [pc, #128]	@ (8012174 <calculateSPLQ31+0x5a8>)
 80120f2:	183a      	adds	r2, r7, r0
 80120f4:	6812      	ldr	r2, [r2, #0]
 80120f6:	0092      	lsls	r2, r2, #2
 80120f8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80120fa:	4b1b      	ldr	r3, [pc, #108]	@ (8012168 <calculateSPLQ31+0x59c>)
 80120fc:	183a      	adds	r2, r7, r0
 80120fe:	6812      	ldr	r2, [r2, #0]
 8012100:	0092      	lsls	r2, r2, #2
 8012102:	58d2      	ldr	r2, [r2, r3]
 8012104:	4b1c      	ldr	r3, [pc, #112]	@ (8012178 <calculateSPLQ31+0x5ac>)
 8012106:	1839      	adds	r1, r7, r0
 8012108:	6809      	ldr	r1, [r1, #0]
 801210a:	0089      	lsls	r1, r1, #2
 801210c:	58cb      	ldr	r3, [r1, r3]
 801210e:	18d1      	adds	r1, r2, r3
 8012110:	4b19      	ldr	r3, [pc, #100]	@ (8012178 <calculateSPLQ31+0x5ac>)
 8012112:	183a      	adds	r2, r7, r0
 8012114:	6812      	ldr	r2, [r2, #0]
 8012116:	0092      	lsls	r2, r2, #2
 8012118:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801211a:	183b      	adds	r3, r7, r0
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	3301      	adds	r3, #1
 8012120:	183a      	adds	r2, r7, r0
 8012122:	6013      	str	r3, [r2, #0]
 8012124:	238c      	movs	r3, #140	@ 0x8c
 8012126:	18fb      	adds	r3, r7, r3
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	2b05      	cmp	r3, #5
 801212c:	d9d4      	bls.n	80120d8 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 801212e:	4b13      	ldr	r3, [pc, #76]	@ (801217c <calculateSPLQ31+0x5b0>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	1c5a      	adds	r2, r3, #1
 8012134:	4b11      	ldr	r3, [pc, #68]	@ (801217c <calculateSPLQ31+0x5b0>)
 8012136:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8012138:	4b10      	ldr	r3, [pc, #64]	@ (801217c <calculateSPLQ31+0x5b0>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b0f      	cmp	r3, #15
 801213e:	d905      	bls.n	801214c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8012140:	4b0f      	ldr	r3, [pc, #60]	@ (8012180 <calculateSPLQ31+0x5b4>)
 8012142:	2201      	movs	r2, #1
 8012144:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8012146:	4b0f      	ldr	r3, [pc, #60]	@ (8012184 <calculateSPLQ31+0x5b8>)
 8012148:	2200      	movs	r2, #0
 801214a:	701a      	strb	r2, [r3, #0]
    }
}
 801214c:	46c0      	nop			@ (mov r8, r8)
 801214e:	46bd      	mov	sp, r7
 8012150:	b02f      	add	sp, #188	@ 0xbc
 8012152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012154:	200000dc 	.word	0x200000dc
 8012158:	200000e0 	.word	0x200000e0
 801215c:	200012c8 	.word	0x200012c8
 8012160:	200012c4 	.word	0x200012c4
 8012164:	200012cc 	.word	0x200012cc
 8012168:	200012e4 	.word	0x200012e4
 801216c:	20001d0c 	.word	0x20001d0c
 8012170:	20001d10 	.word	0x20001d10
 8012174:	20001d14 	.word	0x20001d14
 8012178:	20001d2c 	.word	0x20001d2c
 801217c:	20001d44 	.word	0x20001d44
 8012180:	200012b9 	.word	0x200012b9
 8012184:	200012b7 	.word	0x200012b7

08012188 <resetSPLstate>:

static void resetSPLstate(void)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b082      	sub	sp, #8
 801218c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 801218e:	4b11      	ldr	r3, [pc, #68]	@ (80121d4 <resetSPLstate+0x4c>)
 8012190:	2200      	movs	r2, #0
 8012192:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8012194:	4b10      	ldr	r3, [pc, #64]	@ (80121d8 <resetSPLstate+0x50>)
 8012196:	2200      	movs	r2, #0
 8012198:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801219a:	4b10      	ldr	r3, [pc, #64]	@ (80121dc <resetSPLstate+0x54>)
 801219c:	2200      	movs	r2, #0
 801219e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80121a0:	2300      	movs	r3, #0
 80121a2:	607b      	str	r3, [r7, #4]
 80121a4:	e00c      	b.n	80121c0 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 80121a6:	4b0e      	ldr	r3, [pc, #56]	@ (80121e0 <resetSPLstate+0x58>)
 80121a8:	687a      	ldr	r2, [r7, #4]
 80121aa:	0092      	lsls	r2, r2, #2
 80121ac:	2100      	movs	r1, #0
 80121ae:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80121b0:	4b0c      	ldr	r3, [pc, #48]	@ (80121e4 <resetSPLstate+0x5c>)
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	0092      	lsls	r2, r2, #2
 80121b6:	2100      	movs	r1, #0
 80121b8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	3301      	adds	r3, #1
 80121be:	607b      	str	r3, [r7, #4]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2b05      	cmp	r3, #5
 80121c4:	d9ef      	bls.n	80121a6 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80121c6:	4b08      	ldr	r3, [pc, #32]	@ (80121e8 <resetSPLstate+0x60>)
 80121c8:	2200      	movs	r2, #0
 80121ca:	701a      	strb	r2, [r3, #0]
}
 80121cc:	46c0      	nop			@ (mov r8, r8)
 80121ce:	46bd      	mov	sp, r7
 80121d0:	b002      	add	sp, #8
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	20001d0c 	.word	0x20001d0c
 80121d8:	20001d10 	.word	0x20001d10
 80121dc:	20001d44 	.word	0x20001d44
 80121e0:	20001d14 	.word	0x20001d14
 80121e4:	20001d2c 	.word	0x20001d2c
 80121e8:	200012b9 	.word	0x200012b9

080121ec <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80121ec:	b5b0      	push	{r4, r5, r7, lr}
 80121ee:	b090      	sub	sp, #64	@ 0x40
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	60f8      	str	r0, [r7, #12]
 80121f4:	60b9      	str	r1, [r7, #8]
 80121f6:	0019      	movs	r1, r3
 80121f8:	1dfb      	adds	r3, r7, #7
 80121fa:	701a      	strb	r2, [r3, #0]
 80121fc:	1dbb      	adds	r3, r7, #6
 80121fe:	1c0a      	adds	r2, r1, #0
 8012200:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8012202:	1dfb      	adds	r3, r7, #7
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d005      	beq.n	8012216 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 801220a:	4b3b      	ldr	r3, [pc, #236]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x10c>)
 801220c:	2200      	movs	r2, #0
 801220e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8012210:	4b3a      	ldr	r3, [pc, #232]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x110>)
 8012212:	2200      	movs	r2, #0
 8012214:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 801221a:	2300      	movs	r3, #0
 801221c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 801221e:	2305      	movs	r3, #5
 8012220:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8012222:	2300      	movs	r3, #0
 8012224:	637b      	str	r3, [r7, #52]	@ 0x34
 8012226:	e040      	b.n	80122aa <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8012228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	18d3      	adds	r3, r2, r3
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012234:	409a      	lsls	r2, r3
 8012236:	0013      	movs	r3, r2
 8012238:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 801223a:	4b30      	ldr	r3, [pc, #192]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x110>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	425a      	negs	r2, r3
 8012240:	4b2e      	ldr	r3, [pc, #184]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x110>)
 8012242:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8012244:	2418      	movs	r4, #24
 8012246:	193a      	adds	r2, r7, r4
 8012248:	492c      	ldr	r1, [pc, #176]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x110>)
 801224a:	231c      	movs	r3, #28
 801224c:	18f8      	adds	r0, r7, r3
 801224e:	2301      	movs	r3, #1
 8012250:	f012 fb82 	bl	8024958 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8012254:	2514      	movs	r5, #20
 8012256:	197a      	adds	r2, r7, r5
 8012258:	1939      	adds	r1, r7, r4
 801225a:	4829      	ldr	r0, [pc, #164]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x114>)
 801225c:	2301      	movs	r3, #1
 801225e:	f012 fb49 	bl	80248f4 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8012262:	2410      	movs	r4, #16
 8012264:	193a      	adds	r2, r7, r4
 8012266:	4924      	ldr	r1, [pc, #144]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012268:	4826      	ldr	r0, [pc, #152]	@ (8012304 <getFilteredMaxAmplitudeQ31+0x118>)
 801226a:	2301      	movs	r3, #1
 801226c:	f012 fb42 	bl	80248f4 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012270:	4a21      	ldr	r2, [pc, #132]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012272:	1939      	adds	r1, r7, r4
 8012274:	1978      	adds	r0, r7, r5
 8012276:	2301      	movs	r3, #1
 8012278:	f012 fb6e 	bl	8024958 <arm_add_q31>

        lastData = fx;
 801227c:	69fa      	ldr	r2, [r7, #28]
 801227e:	4b1f      	ldr	r3, [pc, #124]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x110>)
 8012280:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8012282:	4b1d      	ldr	r3, [pc, #116]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012288:	429a      	cmp	r2, r3
 801228a:	da03      	bge.n	8012294 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 801228c:	4b1a      	ldr	r3, [pc, #104]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x10c>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012292:	e007      	b.n	80122a4 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8012294:	4b18      	ldr	r3, [pc, #96]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801229a:	429a      	cmp	r2, r3
 801229c:	dd02      	ble.n	80122a4 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 801229e:	4b16      	ldr	r3, [pc, #88]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x10c>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 80122a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122a6:	3301      	adds	r3, #1
 80122a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80122aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d3ba      	bcc.n	8012228 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80122b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b4:	17da      	asrs	r2, r3, #31
 80122b6:	189b      	adds	r3, r3, r2
 80122b8:	4053      	eors	r3, r2
 80122ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80122bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122be:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 80122c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d200      	bcs.n	80122ca <getFilteredMaxAmplitudeQ31+0xde>
 80122c8:	0013      	movs	r3, r2
 80122ca:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80122cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d0:	40da      	lsrs	r2, r3
 80122d2:	0013      	movs	r3, r2
 80122d4:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80122d6:	1dbb      	adds	r3, r7, #6
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d007      	beq.n	80122ee <getFilteredMaxAmplitudeQ31+0x102>
 80122de:	4b0a      	ldr	r3, [pc, #40]	@ (8012308 <getFilteredMaxAmplitudeQ31+0x11c>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	6a3a      	ldr	r2, [r7, #32]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d902      	bls.n	80122ee <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80122e8:	4b07      	ldr	r3, [pc, #28]	@ (8012308 <getFilteredMaxAmplitudeQ31+0x11c>)
 80122ea:	6a3a      	ldr	r2, [r7, #32]
 80122ec:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80122ee:	6a3b      	ldr	r3, [r7, #32]
}
 80122f0:	0018      	movs	r0, r3
 80122f2:	46bd      	mov	sp, r7
 80122f4:	b010      	add	sp, #64	@ 0x40
 80122f6:	bdb0      	pop	{r4, r5, r7, pc}
 80122f8:	20002148 	.word	0x20002148
 80122fc:	2000214c 	.word	0x2000214c
 8012300:	0802e500 	.word	0x0802e500
 8012304:	0802e504 	.word	0x0802e504
 8012308:	200012c0 	.word	0x200012c0

0801230c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b086      	sub	sp, #24
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8012318:	4913      	ldr	r1, [pc, #76]	@ (8012368 <floatToIntAndFrac2dp+0x5c>)
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	f7ee fe90 	bl	8001040 <__aeabi_fmul>
 8012320:	1c03      	adds	r3, r0, #0
 8012322:	1c18      	adds	r0, r3, #0
 8012324:	f016 fff0 	bl	8029308 <roundf>
 8012328:	1c03      	adds	r3, r0, #0
 801232a:	1c18      	adds	r0, r3, #0
 801232c:	f7ee f976 	bl	800061c <__aeabi_f2uiz>
 8012330:	0003      	movs	r3, r0
 8012332:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	2164      	movs	r1, #100	@ 0x64
 8012338:	0018      	movs	r0, r3
 801233a:	f7ed ff33 	bl	80001a4 <__udivsi3>
 801233e:	0003      	movs	r3, r0
 8012340:	001a      	movs	r2, r3
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8012346:	697b      	ldr	r3, [r7, #20]
 8012348:	b2da      	uxtb	r2, r3
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	b2db      	uxtb	r3, r3
 8012350:	2164      	movs	r1, #100	@ 0x64
 8012352:	434b      	muls	r3, r1
 8012354:	b2db      	uxtb	r3, r3
 8012356:	1ad3      	subs	r3, r2, r3
 8012358:	b2da      	uxtb	r2, r3
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	701a      	strb	r2, [r3, #0]
}
 801235e:	46c0      	nop			@ (mov r8, r8)
 8012360:	46bd      	mov	sp, r7
 8012362:	b006      	add	sp, #24
 8012364:	bd80      	pop	{r7, pc}
 8012366:	46c0      	nop			@ (mov r8, r8)
 8012368:	42c80000 	.word	0x42c80000

0801236c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8012378:	4914      	ldr	r1, [pc, #80]	@ (80123cc <floatToIntAndFrac1dp+0x60>)
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	f7ee fe60 	bl	8001040 <__aeabi_fmul>
 8012380:	1c03      	adds	r3, r0, #0
 8012382:	1c18      	adds	r0, r3, #0
 8012384:	f016 ffc0 	bl	8029308 <roundf>
 8012388:	1c03      	adds	r3, r0, #0
 801238a:	1c18      	adds	r0, r3, #0
 801238c:	f7ee f946 	bl	800061c <__aeabi_f2uiz>
 8012390:	0003      	movs	r3, r0
 8012392:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	210a      	movs	r1, #10
 8012398:	0018      	movs	r0, r3
 801239a:	f7ed ff03 	bl	80001a4 <__udivsi3>
 801239e:	0003      	movs	r3, r0
 80123a0:	001a      	movs	r2, r3
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	1c19      	adds	r1, r3, #0
 80123b2:	0089      	lsls	r1, r1, #2
 80123b4:	18cb      	adds	r3, r1, r3
 80123b6:	18db      	adds	r3, r3, r3
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	701a      	strb	r2, [r3, #0]
}
 80123c2:	46c0      	nop			@ (mov r8, r8)
 80123c4:	46bd      	mov	sp, r7
 80123c6:	b006      	add	sp, #24
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	46c0      	nop			@ (mov r8, r8)
 80123cc:	41200000 	.word	0x41200000

080123d0 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80123d0:	b590      	push	{r4, r7, lr}
 80123d2:	b087      	sub	sp, #28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7ef fa22 	bl	8001828 <__aeabi_i2f>
 80123e4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80123e6:	6838      	ldr	r0, [r7, #0]
 80123e8:	f7ef fa1e 	bl	8001828 <__aeabi_i2f>
 80123ec:	1c03      	adds	r3, r0, #0
 80123ee:	4918      	ldr	r1, [pc, #96]	@ (8012450 <sumToIntAverage+0x80>)
 80123f0:	1c18      	adds	r0, r3, #0
 80123f2:	f7ee fc57 	bl	8000ca4 <__aeabi_fdiv>
 80123f6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80123f8:	1c19      	adds	r1, r3, #0
 80123fa:	1c20      	adds	r0, r4, #0
 80123fc:	f7ee fa60 	bl	80008c0 <__aeabi_fadd>
 8012400:	1c03      	adds	r3, r0, #0
 8012402:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8012404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012406:	f7ef fa5f 	bl	80018c8 <__aeabi_ui2f>
 801240a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 801240c:	1c19      	adds	r1, r3, #0
 801240e:	1c20      	adds	r0, r4, #0
 8012410:	f7ee fc48 	bl	8000ca4 <__aeabi_fdiv>
 8012414:	1c03      	adds	r3, r0, #0
 8012416:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8012418:	2300      	movs	r3, #0
 801241a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	2310      	movs	r3, #16
 8012420:	18f9      	adds	r1, r7, r3
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	1c18      	adds	r0, r3, #0
 8012426:	f7ff ffa1 	bl	801236c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	2bff      	cmp	r3, #255	@ 0xff
 801242e:	d906      	bls.n	801243e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	22ff      	movs	r2, #255	@ 0xff
 8012434:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	2209      	movs	r2, #9
 801243a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 801243c:	e003      	b.n	8012446 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	b2da      	uxtb	r2, r3
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	701a      	strb	r2, [r3, #0]
}
 8012446:	46c0      	nop			@ (mov r8, r8)
 8012448:	46bd      	mov	sp, r7
 801244a:	b007      	add	sp, #28
 801244c:	bd90      	pop	{r4, r7, pc}
 801244e:	46c0      	nop			@ (mov r8, r8)
 8012450:	41200000 	.word	0x41200000

08012454 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	2280      	movs	r2, #128	@ 0x80
 8012466:	0612      	lsls	r2, r2, #24
 8012468:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	4a18      	ldr	r2, [pc, #96]	@ (80124d0 <findMinMax+0x7c>)
 801246e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012470:	2300      	movs	r3, #0
 8012472:	617b      	str	r3, [r7, #20]
 8012474:	e022      	b.n	80124bc <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	18d3      	adds	r3, r2, r3
 801247e:	681a      	ldr	r2, [r3, #0]
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	429a      	cmp	r2, r3
 8012486:	da06      	bge.n	8012496 <findMinMax+0x42>
        {
            min[0] = array[i];
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	18d3      	adds	r3, r2, r3
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	18d3      	adds	r3, r2, r3
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	dd06      	ble.n	80124b6 <findMinMax+0x62>
        {
            max[0] = array[i];
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	18d3      	adds	r3, r2, r3
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	3301      	adds	r3, #1
 80124ba:	617b      	str	r3, [r7, #20]
 80124bc:	697a      	ldr	r2, [r7, #20]
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d3d8      	bcc.n	8012476 <findMinMax+0x22>
        }
    }
}
 80124c4:	46c0      	nop			@ (mov r8, r8)
 80124c6:	46c0      	nop			@ (mov r8, r8)
 80124c8:	46bd      	mov	sp, r7
 80124ca:	b006      	add	sp, #24
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	46c0      	nop			@ (mov r8, r8)
 80124d0:	7fffffff 	.word	0x7fffffff

080124d4 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 80124de:	2300      	movs	r3, #0
 80124e0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d302      	bcc.n	80124f0 <getPo2factor+0x1c>
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d107      	bne.n	8012500 <getPo2factor+0x2c>
    {
        return 0;
 80124f0:	2300      	movs	r3, #0
 80124f2:	e00d      	b.n	8012510 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	085b      	lsrs	r3, r3, #1
 80124f8:	607b      	str	r3, [r7, #4]
        bitShift++;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	3301      	adds	r3, #1
 80124fe:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8012500:	687a      	ldr	r2, [r7, #4]
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	429a      	cmp	r2, r3
 8012506:	d2f5      	bcs.n	80124f4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	3b01      	subs	r3, #1
 801250c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 801250e:	68fb      	ldr	r3, [r7, #12]
}
 8012510:	0018      	movs	r0, r3
 8012512:	46bd      	mov	sp, r7
 8012514:	b004      	add	sp, #16
 8012516:	bd80      	pop	{r7, pc}

08012518 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
 8012524:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8012526:	68f8      	ldr	r0, [r7, #12]
 8012528:	f7ef f9ce 	bl	80018c8 <__aeabi_ui2f>
 801252c:	1c03      	adds	r3, r0, #0
 801252e:	1c19      	adds	r1, r3, #0
 8012530:	68b8      	ldr	r0, [r7, #8]
 8012532:	f7ee fd85 	bl	8001040 <__aeabi_fmul>
 8012536:	1c03      	adds	r3, r0, #0
 8012538:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 801253a:	2300      	movs	r3, #0
 801253c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 801253e:	683a      	ldr	r2, [r7, #0]
 8012540:	2310      	movs	r3, #16
 8012542:	18f9      	adds	r1, r7, r3
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	1c18      	adds	r0, r3, #0
 8012548:	f7ff fee0 	bl	801230c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	b29a      	uxth	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	801a      	strh	r2, [r3, #0]
}
 8012554:	46c0      	nop			@ (mov r8, r8)
 8012556:	46bd      	mov	sp, r7
 8012558:	b006      	add	sp, #24
 801255a:	bd80      	pop	{r7, pc}

0801255c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	60b8      	str	r0, [r7, #8]
 8012564:	60f9      	str	r1, [r7, #12]
 8012566:	607a      	str	r2, [r7, #4]
 8012568:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801256c:	6a3a      	ldr	r2, [r7, #32]
 801256e:	68b8      	ldr	r0, [r7, #8]
 8012570:	68f9      	ldr	r1, [r7, #12]
 8012572:	f7f9 fe3b 	bl	800c1ec <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8012576:	6a3b      	ldr	r3, [r7, #32]
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	18d2      	adds	r2, r2, r3
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	18d2      	adds	r2, r2, r3
 8012582:	6a3b      	ldr	r3, [r7, #32]
 8012584:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8012586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012588:	681a      	ldr	r2, [r3, #0]
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	18d2      	adds	r2, r2, r3
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	18d2      	adds	r2, r2, r3
 8012592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012594:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8012596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012598:	6a3b      	ldr	r3, [r7, #32]
 801259a:	0011      	movs	r1, r2
 801259c:	0018      	movs	r0, r3
 801259e:	f7f9 feb5 	bl	800c30c <correctIntFracNumber>
}
 80125a2:	46c0      	nop			@ (mov r8, r8)
 80125a4:	46bd      	mov	sp, r7
 80125a6:	b004      	add	sp, #16
 80125a8:	bd80      	pop	{r7, pc}

080125aa <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b086      	sub	sp, #24
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	60f8      	str	r0, [r7, #12]
 80125b2:	60b9      	str	r1, [r7, #8]
 80125b4:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80125b6:	2300      	movs	r3, #0
 80125b8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80125ba:	2300      	movs	r3, #0
 80125bc:	613b      	str	r3, [r7, #16]
 80125be:	e019      	b.n	80125f4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	005b      	lsls	r3, r3, #1
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	18d3      	adds	r3, r2, r3
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125cc:	693a      	ldr	r2, [r7, #16]
 80125ce:	3201      	adds	r2, #1
 80125d0:	0052      	lsls	r2, r2, #1
 80125d2:	68f9      	ldr	r1, [r7, #12]
 80125d4:	188a      	adds	r2, r1, r2
 80125d6:	8812      	ldrh	r2, [r2, #0]
 80125d8:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125da:	0019      	movs	r1, r3
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	687a      	ldr	r2, [r7, #4]
 80125e2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125e4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125e6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	3301      	adds	r3, #1
 80125ec:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	3304      	adds	r3, #4
 80125f2:	613b      	str	r3, [r7, #16]
 80125f4:	693a      	ldr	r2, [r7, #16]
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d3e1      	bcc.n	80125c0 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80125fc:	46c0      	nop			@ (mov r8, r8)
 80125fe:	46c0      	nop			@ (mov r8, r8)
 8012600:	46bd      	mov	sp, r7
 8012602:	b006      	add	sp, #24
 8012604:	bd80      	pop	{r7, pc}
	...

08012608 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
float batteryCharge = 0.0;

void InitDone(){
 8012608:	b580      	push	{r7, lr}
 801260a:	af00      	add	r7, sp, #0
  init = false;
 801260c:	4b02      	ldr	r3, [pc, #8]	@ (8012618 <InitDone+0x10>)
 801260e:	2200      	movs	r2, #0
 8012610:	701a      	strb	r2, [r3, #0]
}
 8012612:	46c0      	nop			@ (mov r8, r8)
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	200000e8 	.word	0x200000e8

0801261c <batteryChargeCheck>:
  "De Omgevingsmonitor" will refuse to upload data to openSenseMap.org if the voltage under load drops below 3.77V with SEN5x attached.
  Without a SEN5x attached the Omgevingsmonitor stops sending to OpenSenseMap at 3.75V

 */

Battery_Status batteryChargeCheck(){
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8012622:	f7f7 fa21 	bl	8009a68 <ReadBatteryVoltage>
 8012626:	1c02      	adds	r2, r0, #0
 8012628:	4b25      	ldr	r3, [pc, #148]	@ (80126c0 <batteryChargeCheck+0xa4>)
 801262a:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.75){
 801262c:	4b24      	ldr	r3, [pc, #144]	@ (80126c0 <batteryChargeCheck+0xa4>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4924      	ldr	r1, [pc, #144]	@ (80126c4 <batteryChargeCheck+0xa8>)
 8012632:	1c18      	adds	r0, r3, #0
 8012634:	f7ed ff7c 	bl	8000530 <__aeabi_fcmplt>
 8012638:	1e03      	subs	r3, r0, #0
 801263a:	d002      	beq.n	8012642 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 801263c:	1dfb      	adds	r3, r7, #7
 801263e:	2200      	movs	r2, #0
 8012640:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.75 && batteryCharge < 3.85){
 8012642:	4b1f      	ldr	r3, [pc, #124]	@ (80126c0 <batteryChargeCheck+0xa4>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	491f      	ldr	r1, [pc, #124]	@ (80126c4 <batteryChargeCheck+0xa8>)
 8012648:	1c18      	adds	r0, r3, #0
 801264a:	f7ed ff8f 	bl	800056c <__aeabi_fcmpge>
 801264e:	1e03      	subs	r3, r0, #0
 8012650:	d00d      	beq.n	801266e <batteryChargeCheck+0x52>
 8012652:	4b1b      	ldr	r3, [pc, #108]	@ (80126c0 <batteryChargeCheck+0xa4>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	1c18      	adds	r0, r3, #0
 8012658:	f7f1 f91c 	bl	8003894 <__aeabi_f2d>
 801265c:	4a1a      	ldr	r2, [pc, #104]	@ (80126c8 <batteryChargeCheck+0xac>)
 801265e:	4b1b      	ldr	r3, [pc, #108]	@ (80126cc <batteryChargeCheck+0xb0>)
 8012660:	f7ed ff2c 	bl	80004bc <__aeabi_dcmplt>
 8012664:	1e03      	subs	r3, r0, #0
 8012666:	d002      	beq.n	801266e <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8012668:	1dfb      	adds	r3, r7, #7
 801266a:	2201      	movs	r2, #1
 801266c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.85 && batteryCharge < 4.00){
 801266e:	4b14      	ldr	r3, [pc, #80]	@ (80126c0 <batteryChargeCheck+0xa4>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	1c18      	adds	r0, r3, #0
 8012674:	f7f1 f90e 	bl	8003894 <__aeabi_f2d>
 8012678:	4a13      	ldr	r2, [pc, #76]	@ (80126c8 <batteryChargeCheck+0xac>)
 801267a:	4b14      	ldr	r3, [pc, #80]	@ (80126cc <batteryChargeCheck+0xb0>)
 801267c:	f7ed ff3c 	bl	80004f8 <__aeabi_dcmpge>
 8012680:	1e03      	subs	r3, r0, #0
 8012682:	d00b      	beq.n	801269c <batteryChargeCheck+0x80>
 8012684:	4b0e      	ldr	r3, [pc, #56]	@ (80126c0 <batteryChargeCheck+0xa4>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	2181      	movs	r1, #129	@ 0x81
 801268a:	05c9      	lsls	r1, r1, #23
 801268c:	1c18      	adds	r0, r3, #0
 801268e:	f7ed ff4f 	bl	8000530 <__aeabi_fcmplt>
 8012692:	1e03      	subs	r3, r0, #0
 8012694:	d002      	beq.n	801269c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 8012696:	1dfb      	adds	r3, r7, #7
 8012698:	2202      	movs	r2, #2
 801269a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 801269c:	4b08      	ldr	r3, [pc, #32]	@ (80126c0 <batteryChargeCheck+0xa4>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2181      	movs	r1, #129	@ 0x81
 80126a2:	05c9      	lsls	r1, r1, #23
 80126a4:	1c18      	adds	r0, r3, #0
 80126a6:	f7ed ff61 	bl	800056c <__aeabi_fcmpge>
 80126aa:	1e03      	subs	r3, r0, #0
 80126ac:	d002      	beq.n	80126b4 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 80126ae:	1dfb      	adds	r3, r7, #7
 80126b0:	2203      	movs	r2, #3
 80126b2:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 80126b4:	1dfb      	adds	r3, r7, #7
 80126b6:	781b      	ldrb	r3, [r3, #0]
}
 80126b8:	0018      	movs	r0, r3
 80126ba:	46bd      	mov	sp, r7
 80126bc:	b002      	add	sp, #8
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	20002160 	.word	0x20002160
 80126c4:	40700000 	.word	0x40700000
 80126c8:	cccccccd 	.word	0xcccccccd
 80126cc:	400ecccc 	.word	0x400ecccc

080126d0 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80126d0:	b5b0      	push	{r4, r5, r7, lr}
 80126d2:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80126d4:	f7f7 fa2a 	bl	8009b2c <ReadSolarVoltage>
 80126d8:	0003      	movs	r3, r0
 80126da:	001a      	movs	r2, r3
 80126dc:	4b1a      	ldr	r3, [pc, #104]	@ (8012748 <Calculate_LED_ON+0x78>)
 80126de:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 80126e0:	4b19      	ldr	r3, [pc, #100]	@ (8012748 <Calculate_LED_ON+0x78>)
 80126e2:	881b      	ldrh	r3, [r3, #0]
 80126e4:	4a19      	ldr	r2, [pc, #100]	@ (801274c <Calculate_LED_ON+0x7c>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d802      	bhi.n	80126f0 <Calculate_LED_ON+0x20>
    solmV = 2900;
 80126ea:	4b17      	ldr	r3, [pc, #92]	@ (8012748 <Calculate_LED_ON+0x78>)
 80126ec:	4a18      	ldr	r2, [pc, #96]	@ (8012750 <Calculate_LED_ON+0x80>)
 80126ee:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 80126f0:	4b15      	ldr	r3, [pc, #84]	@ (8012748 <Calculate_LED_ON+0x78>)
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	4a17      	ldr	r2, [pc, #92]	@ (8012754 <Calculate_LED_ON+0x84>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d902      	bls.n	8012700 <Calculate_LED_ON+0x30>
    solmV = 4700;
 80126fa:	4b13      	ldr	r3, [pc, #76]	@ (8012748 <Calculate_LED_ON+0x78>)
 80126fc:	4a15      	ldr	r2, [pc, #84]	@ (8012754 <Calculate_LED_ON+0x84>)
 80126fe:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8012700:	4b11      	ldr	r3, [pc, #68]	@ (8012748 <Calculate_LED_ON+0x78>)
 8012702:	881b      	ldrh	r3, [r3, #0]
 8012704:	0018      	movs	r0, r3
 8012706:	f7f1 f873 	bl	80037f0 <__aeabi_i2d>
 801270a:	0004      	movs	r4, r0
 801270c:	000d      	movs	r5, r1
 801270e:	4b0e      	ldr	r3, [pc, #56]	@ (8012748 <Calculate_LED_ON+0x78>)
 8012710:	881b      	ldrh	r3, [r3, #0]
 8012712:	001a      	movs	r2, r3
 8012714:	4b10      	ldr	r3, [pc, #64]	@ (8012758 <Calculate_LED_ON+0x88>)
 8012716:	1a9b      	subs	r3, r3, r2
 8012718:	0018      	movs	r0, r3
 801271a:	f7f1 f869 	bl	80037f0 <__aeabi_i2d>
 801271e:	2200      	movs	r2, #0
 8012720:	4b0e      	ldr	r3, [pc, #56]	@ (801275c <Calculate_LED_ON+0x8c>)
 8012722:	f7f0 f917 	bl	8002954 <__aeabi_dmul>
 8012726:	0002      	movs	r2, r0
 8012728:	000b      	movs	r3, r1
 801272a:	0020      	movs	r0, r4
 801272c:	0029      	movs	r1, r5
 801272e:	f7ef f911 	bl	8001954 <__aeabi_dadd>
 8012732:	0002      	movs	r2, r0
 8012734:	000b      	movs	r3, r1
 8012736:	0010      	movs	r0, r2
 8012738:	0019      	movs	r1, r3
 801273a:	f7ed ff87 	bl	800064c <__aeabi_d2uiz>
 801273e:	0003      	movs	r3, r0
 8012740:	b29b      	uxth	r3, r3
}
 8012742:	0018      	movs	r0, r3
 8012744:	46bd      	mov	sp, r7
 8012746:	bdb0      	pop	{r4, r5, r7, pc}
 8012748:	20002164 	.word	0x20002164
 801274c:	00000b53 	.word	0x00000b53
 8012750:	00000b54 	.word	0x00000b54
 8012754:	0000125c 	.word	0x0000125c
 8012758:	00000dee 	.word	0x00000dee
 801275c:	3ff80000 	.word	0x3ff80000

08012760 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012760:	b590      	push	{r4, r7, lr}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	0004      	movs	r4, r0
 8012768:	0008      	movs	r0, r1
 801276a:	0011      	movs	r1, r2
 801276c:	1dbb      	adds	r3, r7, #6
 801276e:	1c22      	adds	r2, r4, #0
 8012770:	801a      	strh	r2, [r3, #0]
 8012772:	1d3b      	adds	r3, r7, #4
 8012774:	1c02      	adds	r2, r0, #0
 8012776:	801a      	strh	r2, [r3, #0]
 8012778:	1cbb      	adds	r3, r7, #2
 801277a:	1c0a      	adds	r2, r1, #0
 801277c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 801277e:	4b0f      	ldr	r3, [pc, #60]	@ (80127bc <SetStatusLED+0x5c>)
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d107      	bne.n	8012796 <SetStatusLED+0x36>
 8012786:	4b0e      	ldr	r3, [pc, #56]	@ (80127c0 <SetStatusLED+0x60>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d103      	bne.n	8012796 <SetStatusLED+0x36>
 801278e:	4b0d      	ldr	r3, [pc, #52]	@ (80127c4 <SetStatusLED+0x64>)
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00e      	beq.n	80127b4 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8012796:	2380      	movs	r3, #128	@ 0x80
 8012798:	05db      	lsls	r3, r3, #23
 801279a:	1dba      	adds	r2, r7, #6
 801279c:	8812      	ldrh	r2, [r2, #0]
 801279e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80127a0:	2380      	movs	r3, #128	@ 0x80
 80127a2:	05db      	lsls	r3, r3, #23
 80127a4:	1d3a      	adds	r2, r7, #4
 80127a6:	8812      	ldrh	r2, [r2, #0]
 80127a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80127aa:	2380      	movs	r3, #128	@ 0x80
 80127ac:	05db      	lsls	r3, r3, #23
 80127ae:	1cba      	adds	r2, r7, #2
 80127b0:	8812      	ldrh	r2, [r2, #0]
 80127b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80127b4:	46c0      	nop			@ (mov r8, r8)
 80127b6:	46bd      	mov	sp, r7
 80127b8:	b003      	add	sp, #12
 80127ba:	bd90      	pop	{r4, r7, pc}
 80127bc:	20002151 	.word	0x20002151
 80127c0:	200000e8 	.word	0x200000e8
 80127c4:	20002152 	.word	0x20002152

080127c8 <SetDBLED>:

// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80127c8:	b590      	push	{r4, r7, lr}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	0004      	movs	r4, r0
 80127d0:	0008      	movs	r0, r1
 80127d2:	0011      	movs	r1, r2
 80127d4:	1dfb      	adds	r3, r7, #7
 80127d6:	1c22      	adds	r2, r4, #0
 80127d8:	701a      	strb	r2, [r3, #0]
 80127da:	1dbb      	adds	r3, r7, #6
 80127dc:	1c02      	adds	r2, r0, #0
 80127de:	701a      	strb	r2, [r3, #0]
 80127e0:	1d7b      	adds	r3, r7, #5
 80127e2:	1c0a      	adds	r2, r1, #0
 80127e4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 80127e6:	4b19      	ldr	r3, [pc, #100]	@ (801284c <SetDBLED+0x84>)
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d107      	bne.n	80127fe <SetDBLED+0x36>
 80127ee:	4b18      	ldr	r3, [pc, #96]	@ (8012850 <SetDBLED+0x88>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d103      	bne.n	80127fe <SetDBLED+0x36>
 80127f6:	4b17      	ldr	r3, [pc, #92]	@ (8012854 <SetDBLED+0x8c>)
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d022      	beq.n	8012844 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80127fe:	1dfb      	adds	r3, r7, #7
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	2201      	movs	r2, #1
 8012804:	4053      	eors	r3, r2
 8012806:	b2db      	uxtb	r3, r3
 8012808:	001a      	movs	r2, r3
 801280a:	4b13      	ldr	r3, [pc, #76]	@ (8012858 <SetDBLED+0x90>)
 801280c:	2101      	movs	r1, #1
 801280e:	0018      	movs	r0, r3
 8012810:	f003 faf5 	bl	8015dfe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8012814:	1dbb      	adds	r3, r7, #6
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2201      	movs	r2, #1
 801281a:	4053      	eors	r3, r2
 801281c:	b2db      	uxtb	r3, r3
 801281e:	001a      	movs	r2, r3
 8012820:	2380      	movs	r3, #128	@ 0x80
 8012822:	005b      	lsls	r3, r3, #1
 8012824:	480c      	ldr	r0, [pc, #48]	@ (8012858 <SetDBLED+0x90>)
 8012826:	0019      	movs	r1, r3
 8012828:	f003 fae9 	bl	8015dfe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 801282c:	1d7b      	adds	r3, r7, #5
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2201      	movs	r2, #1
 8012832:	4053      	eors	r3, r2
 8012834:	b2db      	uxtb	r3, r3
 8012836:	001a      	movs	r2, r3
 8012838:	2380      	movs	r3, #128	@ 0x80
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	4806      	ldr	r0, [pc, #24]	@ (8012858 <SetDBLED+0x90>)
 801283e:	0019      	movs	r1, r3
 8012840:	f003 fadd 	bl	8015dfe <HAL_GPIO_WritePin>
  }
}
 8012844:	46c0      	nop			@ (mov r8, r8)
 8012846:	46bd      	mov	sp, r7
 8012848:	b003      	add	sp, #12
 801284a:	bd90      	pop	{r4, r7, pc}
 801284c:	20002151 	.word	0x20002151
 8012850:	200000e8 	.word	0x200000e8
 8012854:	20002152 	.word	0x20002152
 8012858:	50000400 	.word	0x50000400

0801285c <SetVocLED>:

// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 801285c:	b590      	push	{r4, r7, lr}
 801285e:	b083      	sub	sp, #12
 8012860:	af00      	add	r7, sp, #0
 8012862:	0004      	movs	r4, r0
 8012864:	0008      	movs	r0, r1
 8012866:	0011      	movs	r1, r2
 8012868:	1dbb      	adds	r3, r7, #6
 801286a:	1c22      	adds	r2, r4, #0
 801286c:	801a      	strh	r2, [r3, #0]
 801286e:	1d3b      	adds	r3, r7, #4
 8012870:	1c02      	adds	r2, r0, #0
 8012872:	801a      	strh	r2, [r3, #0]
 8012874:	1cbb      	adds	r3, r7, #2
 8012876:	1c0a      	adds	r2, r1, #0
 8012878:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 801287a:	4b0e      	ldr	r3, [pc, #56]	@ (80128b4 <SetVocLED+0x58>)
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d107      	bne.n	8012892 <SetVocLED+0x36>
 8012882:	4b0d      	ldr	r3, [pc, #52]	@ (80128b8 <SetVocLED+0x5c>)
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d103      	bne.n	8012892 <SetVocLED+0x36>
 801288a:	4b0c      	ldr	r3, [pc, #48]	@ (80128bc <SetVocLED+0x60>)
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d00b      	beq.n	80128aa <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8012892:	4b0b      	ldr	r3, [pc, #44]	@ (80128c0 <SetVocLED+0x64>)
 8012894:	1dba      	adds	r2, r7, #6
 8012896:	8812      	ldrh	r2, [r2, #0]
 8012898:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 801289a:	4b09      	ldr	r3, [pc, #36]	@ (80128c0 <SetVocLED+0x64>)
 801289c:	1d3a      	adds	r2, r7, #4
 801289e:	8812      	ldrh	r2, [r2, #0]
 80128a0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 80128a2:	4b07      	ldr	r3, [pc, #28]	@ (80128c0 <SetVocLED+0x64>)
 80128a4:	1cba      	adds	r2, r7, #2
 80128a6:	8812      	ldrh	r2, [r2, #0]
 80128a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128aa:	46c0      	nop			@ (mov r8, r8)
 80128ac:	46bd      	mov	sp, r7
 80128ae:	b003      	add	sp, #12
 80128b0:	bd90      	pop	{r4, r7, pc}
 80128b2:	46c0      	nop			@ (mov r8, r8)
 80128b4:	20002151 	.word	0x20002151
 80128b8:	200000e8 	.word	0x200000e8
 80128bc:	20002152 	.word	0x20002152
 80128c0:	40000400 	.word	0x40000400

080128c4 <SetMeasurementIndicator>:

void SetMeasurementIndicator(){
 80128c4:	b580      	push	{r7, lr}
 80128c6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80128c8:	4b08      	ldr	r3, [pc, #32]	@ (80128ec <SetMeasurementIndicator+0x28>)
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d103      	bne.n	80128d8 <SetMeasurementIndicator+0x14>
 80128d0:	4b07      	ldr	r3, [pc, #28]	@ (80128f0 <SetMeasurementIndicator+0x2c>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d006      	beq.n	80128e6 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 80128d8:	f7ff fefa 	bl	80126d0 <Calculate_LED_ON>
 80128dc:	0003      	movs	r3, r0
 80128de:	001a      	movs	r2, r3
 80128e0:	2380      	movs	r3, #128	@ 0x80
 80128e2:	05db      	lsls	r3, r3, #23
 80128e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128e6:	46c0      	nop			@ (mov r8, r8)
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	20002151 	.word	0x20002151
 80128f0:	20002152 	.word	0x20002152

080128f4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80128f8:	4b07      	ldr	r3, [pc, #28]	@ (8012918 <ResetMeasurementIndicator+0x24>)
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d103      	bne.n	8012908 <ResetMeasurementIndicator+0x14>
 8012900:	4b06      	ldr	r3, [pc, #24]	@ (801291c <ResetMeasurementIndicator+0x28>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d004      	beq.n	8012912 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8012908:	2380      	movs	r3, #128	@ 0x80
 801290a:	05db      	lsls	r3, r3, #23
 801290c:	22fa      	movs	r2, #250	@ 0xfa
 801290e:	0112      	lsls	r2, r2, #4
 8012910:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012912:	46c0      	nop			@ (mov r8, r8)
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	20002151 	.word	0x20002151
 801291c:	20002152 	.word	0x20002152

08012920 <SetMICIndicator>:
void SetMICIndicator(){
 8012920:	b580      	push	{r7, lr}
 8012922:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012924:	4b19      	ldr	r3, [pc, #100]	@ (801298c <SetMICIndicator+0x6c>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d103      	bne.n	8012934 <SetMICIndicator+0x14>
 801292c:	4b18      	ldr	r3, [pc, #96]	@ (8012990 <SetMICIndicator+0x70>)
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d007      	beq.n	8012944 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012934:	f7ff fecc 	bl	80126d0 <Calculate_LED_ON>
 8012938:	0003      	movs	r3, r0
 801293a:	001a      	movs	r2, r3
 801293c:	2380      	movs	r3, #128	@ 0x80
 801293e:	05db      	lsls	r3, r3, #23
 8012940:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8012942:	e01f      	b.n	8012984 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8012944:	4b13      	ldr	r3, [pc, #76]	@ (8012994 <SetMICIndicator+0x74>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	1c18      	adds	r0, r3, #0
 801294a:	f7f0 ffa3 	bl	8003894 <__aeabi_f2d>
 801294e:	4a12      	ldr	r2, [pc, #72]	@ (8012998 <SetMICIndicator+0x78>)
 8012950:	4b12      	ldr	r3, [pc, #72]	@ (801299c <SetMICIndicator+0x7c>)
 8012952:	f7ed fdc7 	bl	80004e4 <__aeabi_dcmpgt>
 8012956:	1e03      	subs	r3, r0, #0
 8012958:	d00a      	beq.n	8012970 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 801295a:	f7ff feb9 	bl	80126d0 <Calculate_LED_ON>
 801295e:	0003      	movs	r3, r0
 8012960:	001a      	movs	r2, r3
 8012962:	2380      	movs	r3, #128	@ 0x80
 8012964:	05db      	lsls	r3, r3, #23
 8012966:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8012968:	4b0d      	ldr	r3, [pc, #52]	@ (80129a0 <SetMICIndicator+0x80>)
 801296a:	2202      	movs	r2, #2
 801296c:	701a      	strb	r2, [r3, #0]
}
 801296e:	e009      	b.n	8012984 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8012970:	f7ff feae 	bl	80126d0 <Calculate_LED_ON>
 8012974:	0003      	movs	r3, r0
 8012976:	001a      	movs	r2, r3
 8012978:	2380      	movs	r3, #128	@ 0x80
 801297a:	05db      	lsls	r3, r3, #23
 801297c:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 801297e:	4b08      	ldr	r3, [pc, #32]	@ (80129a0 <SetMICIndicator+0x80>)
 8012980:	2201      	movs	r2, #1
 8012982:	701a      	strb	r2, [r3, #0]
}
 8012984:	46c0      	nop			@ (mov r8, r8)
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
 801298a:	46c0      	nop			@ (mov r8, r8)
 801298c:	20002151 	.word	0x20002151
 8012990:	20002152 	.word	0x20002152
 8012994:	20002160 	.word	0x20002160
 8012998:	9999999a 	.word	0x9999999a
 801299c:	400d9999 	.word	0x400d9999
 80129a0:	20002154 	.word	0x20002154

080129a4 <ResetMICIndicator>:
void ResetMICIndicator(){
 80129a4:	b580      	push	{r7, lr}
 80129a6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80129a8:	4b0f      	ldr	r3, [pc, #60]	@ (80129e8 <ResetMICIndicator+0x44>)
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d103      	bne.n	80129b8 <ResetMICIndicator+0x14>
 80129b0:	4b0e      	ldr	r3, [pc, #56]	@ (80129ec <ResetMICIndicator+0x48>)
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d005      	beq.n	80129c4 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 80129b8:	2380      	movs	r3, #128	@ 0x80
 80129ba:	05db      	lsls	r3, r3, #23
 80129bc:	22fa      	movs	r2, #250	@ 0xfa
 80129be:	0112      	lsls	r2, r2, #4
 80129c0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 80129c2:	e00e      	b.n	80129e2 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 80129c4:	4b0a      	ldr	r3, [pc, #40]	@ (80129f0 <ResetMICIndicator+0x4c>)
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d105      	bne.n	80129d8 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 80129cc:	2380      	movs	r3, #128	@ 0x80
 80129ce:	05db      	lsls	r3, r3, #23
 80129d0:	22fa      	movs	r2, #250	@ 0xfa
 80129d2:	0112      	lsls	r2, r2, #4
 80129d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80129d6:	e004      	b.n	80129e2 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 80129d8:	2380      	movs	r3, #128	@ 0x80
 80129da:	05db      	lsls	r3, r3, #23
 80129dc:	22fa      	movs	r2, #250	@ 0xfa
 80129de:	0112      	lsls	r2, r2, #4
 80129e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80129e2:	46c0      	nop			@ (mov r8, r8)
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	20002151 	.word	0x20002151
 80129ec:	20002152 	.word	0x20002152
 80129f0:	20002154 	.word	0x20002154

080129f4 <SetESPIndicator>:
void SetESPIndicator(){
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80129f8:	4b08      	ldr	r3, [pc, #32]	@ (8012a1c <SetESPIndicator+0x28>)
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d103      	bne.n	8012a08 <SetESPIndicator+0x14>
 8012a00:	4b07      	ldr	r3, [pc, #28]	@ (8012a20 <SetESPIndicator+0x2c>)
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d006      	beq.n	8012a16 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012a08:	f7ff fe62 	bl	80126d0 <Calculate_LED_ON>
 8012a0c:	0003      	movs	r3, r0
 8012a0e:	001a      	movs	r2, r3
 8012a10:	2380      	movs	r3, #128	@ 0x80
 8012a12:	05db      	lsls	r3, r3, #23
 8012a14:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012a16:	46c0      	nop			@ (mov r8, r8)
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	20002151 	.word	0x20002151
 8012a20:	20002152 	.word	0x20002152

08012a24 <ResetESPIndicator>:
void ResetESPIndicator(){
 8012a24:	b580      	push	{r7, lr}
 8012a26:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012a28:	4b07      	ldr	r3, [pc, #28]	@ (8012a48 <ResetESPIndicator+0x24>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d103      	bne.n	8012a38 <ResetESPIndicator+0x14>
 8012a30:	4b06      	ldr	r3, [pc, #24]	@ (8012a4c <ResetESPIndicator+0x28>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d004      	beq.n	8012a42 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8012a38:	2380      	movs	r3, #128	@ 0x80
 8012a3a:	05db      	lsls	r3, r3, #23
 8012a3c:	22fa      	movs	r2, #250	@ 0xfa
 8012a3e:	0112      	lsls	r2, r2, #4
 8012a40:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012a42:	46c0      	nop			@ (mov r8, r8)
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	20002151 	.word	0x20002151
 8012a4c:	20002152 	.word	0x20002152

08012a50 <SetPMIndicator>:

void SetPMIndicator() {
 8012a50:	b580      	push	{r7, lr}
 8012a52:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012a54:	4b0f      	ldr	r3, [pc, #60]	@ (8012a94 <SetPMIndicator+0x44>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d103      	bne.n	8012a64 <SetPMIndicator+0x14>
 8012a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8012a98 <SetPMIndicator+0x48>)
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d014      	beq.n	8012a8e <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012a64:	f7ff fe34 	bl	80126d0 <Calculate_LED_ON>
 8012a68:	0003      	movs	r3, r0
 8012a6a:	001a      	movs	r2, r3
 8012a6c:	2380      	movs	r3, #128	@ 0x80
 8012a6e:	05db      	lsls	r3, r3, #23
 8012a70:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012a72:	f7ff fe2d 	bl	80126d0 <Calculate_LED_ON>
 8012a76:	0003      	movs	r3, r0
 8012a78:	001a      	movs	r2, r3
 8012a7a:	2380      	movs	r3, #128	@ 0x80
 8012a7c:	05db      	lsls	r3, r3, #23
 8012a7e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012a80:	f7ff fe26 	bl	80126d0 <Calculate_LED_ON>
 8012a84:	0003      	movs	r3, r0
 8012a86:	001a      	movs	r2, r3
 8012a88:	2380      	movs	r3, #128	@ 0x80
 8012a8a:	05db      	lsls	r3, r3, #23
 8012a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012a8e:	46c0      	nop			@ (mov r8, r8)
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	20002151 	.word	0x20002151
 8012a98:	20002152 	.word	0x20002152

08012a9c <ResetPMIndicator>:

void ResetPMIndicator() {
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8012ad4 <ResetPMIndicator+0x38>)
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d103      	bne.n	8012ab0 <ResetPMIndicator+0x14>
 8012aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8012ad8 <ResetPMIndicator+0x3c>)
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00e      	beq.n	8012ace <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8012ab0:	2380      	movs	r3, #128	@ 0x80
 8012ab2:	05db      	lsls	r3, r3, #23
 8012ab4:	22fa      	movs	r2, #250	@ 0xfa
 8012ab6:	0112      	lsls	r2, r2, #4
 8012ab8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012aba:	2380      	movs	r3, #128	@ 0x80
 8012abc:	05db      	lsls	r3, r3, #23
 8012abe:	22fa      	movs	r2, #250	@ 0xfa
 8012ac0:	0112      	lsls	r2, r2, #4
 8012ac2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012ac4:	2380      	movs	r3, #128	@ 0x80
 8012ac6:	05db      	lsls	r3, r3, #23
 8012ac8:	22fa      	movs	r2, #250	@ 0xfa
 8012aca:	0112      	lsls	r2, r2, #4
 8012acc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012ace:	46c0      	nop			@ (mov r8, r8)
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	20002151 	.word	0x20002151
 8012ad8:	20002152 	.word	0x20002152

08012adc <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff() {
 8012adc:	b580      	push	{r7, lr}
 8012ade:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012ae0:	23fa      	movs	r3, #250	@ 0xfa
 8012ae2:	011a      	lsls	r2, r3, #4
 8012ae4:	23fa      	movs	r3, #250	@ 0xfa
 8012ae6:	0119      	lsls	r1, r3, #4
 8012ae8:	23fa      	movs	r3, #250	@ 0xfa
 8012aea:	011b      	lsls	r3, r3, #4
 8012aec:	0018      	movs	r0, r3
 8012aee:	f7ff fe37 	bl	8012760 <SetStatusLED>
  SetDBLED(false,false,false);
 8012af2:	2200      	movs	r2, #0
 8012af4:	2100      	movs	r1, #0
 8012af6:	2000      	movs	r0, #0
 8012af8:	f7ff fe66 	bl	80127c8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012afc:	23fa      	movs	r3, #250	@ 0xfa
 8012afe:	011a      	lsls	r2, r3, #4
 8012b00:	23fa      	movs	r3, #250	@ 0xfa
 8012b02:	0119      	lsls	r1, r3, #4
 8012b04:	23fa      	movs	r3, #250	@ 0xfa
 8012b06:	011b      	lsls	r3, r3, #4
 8012b08:	0018      	movs	r0, r3
 8012b0a:	f7ff fea7 	bl	801285c <SetVocLED>
return;
 8012b0e:	46c0      	nop			@ (mov r8, r8)
}
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <SetAllREDLED>:

void SetAllREDLED() {
 8012b14:	b580      	push	{r7, lr}
 8012b16:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012b18:	f7ff ffe0 	bl	8012adc <SetLEDsOff>
  TIM2 -> CCR1 = LED_ON;
 8012b1c:	2380      	movs	r3, #128	@ 0x80
 8012b1e:	05db      	lsls	r3, r3, #23
 8012b20:	4a20      	ldr	r2, [pc, #128]	@ (8012ba4 <SetAllREDLED+0x90>)
 8012b22:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012b24:	2380      	movs	r3, #128	@ 0x80
 8012b26:	05db      	lsls	r3, r3, #23
 8012b28:	22fa      	movs	r2, #250	@ 0xfa
 8012b2a:	0112      	lsls	r2, r2, #4
 8012b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012b2e:	2380      	movs	r3, #128	@ 0x80
 8012b30:	05db      	lsls	r3, r3, #23
 8012b32:	22fa      	movs	r2, #250	@ 0xfa
 8012b34:	0112      	lsls	r2, r2, #4
 8012b36:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012b38:	4b1b      	ldr	r3, [pc, #108]	@ (8012ba8 <SetAllREDLED+0x94>)
 8012b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8012ba4 <SetAllREDLED+0x90>)
 8012b3c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8012ba8 <SetAllREDLED+0x94>)
 8012b40:	22fa      	movs	r2, #250	@ 0xfa
 8012b42:	0112      	lsls	r2, r2, #4
 8012b44:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012b46:	4b18      	ldr	r3, [pc, #96]	@ (8012ba8 <SetAllREDLED+0x94>)
 8012b48:	22fa      	movs	r2, #250	@ 0xfa
 8012b4a:	0112      	lsls	r2, r2, #4
 8012b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012b4e:	4b17      	ldr	r3, [pc, #92]	@ (8012bac <SetAllREDLED+0x98>)
 8012b50:	2200      	movs	r2, #0
 8012b52:	2101      	movs	r1, #1
 8012b54:	0018      	movs	r0, r3
 8012b56:	f003 f952 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012b5a:	2380      	movs	r3, #128	@ 0x80
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	4813      	ldr	r0, [pc, #76]	@ (8012bac <SetAllREDLED+0x98>)
 8012b60:	2201      	movs	r2, #1
 8012b62:	0019      	movs	r1, r3
 8012b64:	f003 f94b 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012b68:	2380      	movs	r3, #128	@ 0x80
 8012b6a:	009b      	lsls	r3, r3, #2
 8012b6c:	480f      	ldr	r0, [pc, #60]	@ (8012bac <SetAllREDLED+0x98>)
 8012b6e:	2201      	movs	r2, #1
 8012b70:	0019      	movs	r1, r3
 8012b72:	f003 f944 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012b76:	23fa      	movs	r3, #250	@ 0xfa
 8012b78:	005b      	lsls	r3, r3, #1
 8012b7a:	0018      	movs	r0, r3
 8012b7c:	f001 fed6 	bl	801492c <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012b80:	2380      	movs	r3, #128	@ 0x80
 8012b82:	05db      	lsls	r3, r3, #23
 8012b84:	22fa      	movs	r2, #250	@ 0xfa
 8012b86:	0112      	lsls	r2, r2, #4
 8012b88:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR1 = LED_OFF;
 8012b8a:	4b07      	ldr	r3, [pc, #28]	@ (8012ba8 <SetAllREDLED+0x94>)
 8012b8c:	22fa      	movs	r2, #250	@ 0xfa
 8012b8e:	0112      	lsls	r2, r2, #4
 8012b90:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012b92:	4b06      	ldr	r3, [pc, #24]	@ (8012bac <SetAllREDLED+0x98>)
 8012b94:	2201      	movs	r2, #1
 8012b96:	2101      	movs	r1, #1
 8012b98:	0018      	movs	r0, r3
 8012b9a:	f003 f930 	bl	8015dfe <HAL_GPIO_WritePin>
}
 8012b9e:	46c0      	nop			@ (mov r8, r8)
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	00000bb8 	.word	0x00000bb8
 8012ba8:	40000400 	.word	0x40000400
 8012bac:	50000400 	.word	0x50000400

08012bb0 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012bb4:	f7ff ff92 	bl	8012adc <SetLEDsOff>
  HAL_Delay(100);
 8012bb8:	2064      	movs	r0, #100	@ 0x64
 8012bba:	f001 feb7 	bl	801492c <HAL_Delay>

  TIM3 -> CCR1 = LED_ON;
 8012bbe:	4b24      	ldr	r3, [pc, #144]	@ (8012c50 <WalkAllRedLED+0xa0>)
 8012bc0:	4a24      	ldr	r2, [pc, #144]	@ (8012c54 <WalkAllRedLED+0xa4>)
 8012bc2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012bc4:	4b22      	ldr	r3, [pc, #136]	@ (8012c50 <WalkAllRedLED+0xa0>)
 8012bc6:	22fa      	movs	r2, #250	@ 0xfa
 8012bc8:	0112      	lsls	r2, r2, #4
 8012bca:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012bcc:	4b20      	ldr	r3, [pc, #128]	@ (8012c50 <WalkAllRedLED+0xa0>)
 8012bce:	22fa      	movs	r2, #250	@ 0xfa
 8012bd0:	0112      	lsls	r2, r2, #4
 8012bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 8012bd4:	2064      	movs	r0, #100	@ 0x64
 8012bd6:	f001 fea9 	bl	801492c <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012bda:	4b1d      	ldr	r3, [pc, #116]	@ (8012c50 <WalkAllRedLED+0xa0>)
 8012bdc:	22fa      	movs	r2, #250	@ 0xfa
 8012bde:	0112      	lsls	r2, r2, #4
 8012be0:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012be2:	4b1d      	ldr	r3, [pc, #116]	@ (8012c58 <WalkAllRedLED+0xa8>)
 8012be4:	2200      	movs	r2, #0
 8012be6:	2101      	movs	r1, #1
 8012be8:	0018      	movs	r0, r3
 8012bea:	f003 f908 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012bee:	2380      	movs	r3, #128	@ 0x80
 8012bf0:	005b      	lsls	r3, r3, #1
 8012bf2:	4819      	ldr	r0, [pc, #100]	@ (8012c58 <WalkAllRedLED+0xa8>)
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	0019      	movs	r1, r3
 8012bf8:	f003 f901 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012bfc:	2380      	movs	r3, #128	@ 0x80
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4815      	ldr	r0, [pc, #84]	@ (8012c58 <WalkAllRedLED+0xa8>)
 8012c02:	2201      	movs	r2, #1
 8012c04:	0019      	movs	r1, r3
 8012c06:	f003 f8fa 	bl	8015dfe <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8012c0a:	2064      	movs	r0, #100	@ 0x64
 8012c0c:	f001 fe8e 	bl	801492c <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012c10:	4b11      	ldr	r3, [pc, #68]	@ (8012c58 <WalkAllRedLED+0xa8>)
 8012c12:	2201      	movs	r2, #1
 8012c14:	2101      	movs	r1, #1
 8012c16:	0018      	movs	r0, r3
 8012c18:	f003 f8f1 	bl	8015dfe <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = LED_ON;
 8012c1c:	2380      	movs	r3, #128	@ 0x80
 8012c1e:	05db      	lsls	r3, r3, #23
 8012c20:	4a0c      	ldr	r2, [pc, #48]	@ (8012c54 <WalkAllRedLED+0xa4>)
 8012c22:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012c24:	2380      	movs	r3, #128	@ 0x80
 8012c26:	05db      	lsls	r3, r3, #23
 8012c28:	22fa      	movs	r2, #250	@ 0xfa
 8012c2a:	0112      	lsls	r2, r2, #4
 8012c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012c2e:	2380      	movs	r3, #128	@ 0x80
 8012c30:	05db      	lsls	r3, r3, #23
 8012c32:	22fa      	movs	r2, #250	@ 0xfa
 8012c34:	0112      	lsls	r2, r2, #4
 8012c36:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8012c38:	2064      	movs	r0, #100	@ 0x64
 8012c3a:	f001 fe77 	bl	801492c <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012c3e:	2380      	movs	r3, #128	@ 0x80
 8012c40:	05db      	lsls	r3, r3, #23
 8012c42:	22fa      	movs	r2, #250	@ 0xfa
 8012c44:	0112      	lsls	r2, r2, #4
 8012c46:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012c48:	46c0      	nop			@ (mov r8, r8)
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	46c0      	nop			@ (mov r8, r8)
 8012c50:	40000400 	.word	0x40000400
 8012c54:	00000bb8 	.word	0x00000bb8
 8012c58:	50000400 	.word	0x50000400

08012c5c <SetAllBlueLED>:

void SetAllBlueLED() {
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012c62:	1dfb      	adds	r3, r7, #7
 8012c64:	2200      	movs	r2, #0
 8012c66:	701a      	strb	r2, [r3, #0]
 8012c68:	e040      	b.n	8012cec <SetAllBlueLED+0x90>
    TIM2 -> CCR1 = LED_OFF;
 8012c6a:	2380      	movs	r3, #128	@ 0x80
 8012c6c:	05db      	lsls	r3, r3, #23
 8012c6e:	22fa      	movs	r2, #250	@ 0xfa
 8012c70:	0112      	lsls	r2, r2, #4
 8012c72:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012c74:	2380      	movs	r3, #128	@ 0x80
 8012c76:	05db      	lsls	r3, r3, #23
 8012c78:	22fa      	movs	r2, #250	@ 0xfa
 8012c7a:	0112      	lsls	r2, r2, #4
 8012c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012c7e:	2380      	movs	r3, #128	@ 0x80
 8012c80:	05db      	lsls	r3, r3, #23
 8012c82:	4a1f      	ldr	r2, [pc, #124]	@ (8012d00 <SetAllBlueLED+0xa4>)
 8012c84:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012c86:	4b1f      	ldr	r3, [pc, #124]	@ (8012d04 <SetAllBlueLED+0xa8>)
 8012c88:	22fa      	movs	r2, #250	@ 0xfa
 8012c8a:	0112      	lsls	r2, r2, #4
 8012c8c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8012d04 <SetAllBlueLED+0xa8>)
 8012c90:	22fa      	movs	r2, #250	@ 0xfa
 8012c92:	0112      	lsls	r2, r2, #4
 8012c94:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012c96:	4b1b      	ldr	r3, [pc, #108]	@ (8012d04 <SetAllBlueLED+0xa8>)
 8012c98:	4a19      	ldr	r2, [pc, #100]	@ (8012d00 <SetAllBlueLED+0xa4>)
 8012c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8012d08 <SetAllBlueLED+0xac>)
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	0018      	movs	r0, r3
 8012ca4:	f003 f8ab 	bl	8015dfe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012ca8:	2380      	movs	r3, #128	@ 0x80
 8012caa:	005b      	lsls	r3, r3, #1
 8012cac:	4816      	ldr	r0, [pc, #88]	@ (8012d08 <SetAllBlueLED+0xac>)
 8012cae:	2201      	movs	r2, #1
 8012cb0:	0019      	movs	r1, r3
 8012cb2:	f003 f8a4 	bl	8015dfe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012cb6:	2380      	movs	r3, #128	@ 0x80
 8012cb8:	009b      	lsls	r3, r3, #2
 8012cba:	4813      	ldr	r0, [pc, #76]	@ (8012d08 <SetAllBlueLED+0xac>)
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	0019      	movs	r1, r3
 8012cc0:	f003 f89d 	bl	8015dfe <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8012cc4:	20fa      	movs	r0, #250	@ 0xfa
 8012cc6:	f001 fe31 	bl	801492c <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012cca:	2380      	movs	r3, #128	@ 0x80
 8012ccc:	05db      	lsls	r3, r3, #23
 8012cce:	22fa      	movs	r2, #250	@ 0xfa
 8012cd0:	0112      	lsls	r2, r2, #4
 8012cd2:	641a      	str	r2, [r3, #64]	@ 0x40
//    TIM3 -> CCR3 = LED_OFF;  // do not switch off blue VOC led
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012cd4:	2380      	movs	r3, #128	@ 0x80
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	480b      	ldr	r0, [pc, #44]	@ (8012d08 <SetAllBlueLED+0xac>)
 8012cda:	2201      	movs	r2, #1
 8012cdc:	0019      	movs	r1, r3
 8012cde:	f003 f88e 	bl	8015dfe <HAL_GPIO_WritePin>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012ce2:	1dfb      	adds	r3, r7, #7
 8012ce4:	781a      	ldrb	r2, [r3, #0]
 8012ce6:	1dfb      	adds	r3, r7, #7
 8012ce8:	3201      	adds	r2, #1
 8012cea:	701a      	strb	r2, [r3, #0]
 8012cec:	1dfb      	adds	r3, r7, #7
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	2b02      	cmp	r3, #2
 8012cf2:	d9ba      	bls.n	8012c6a <SetAllBlueLED+0xe>
  }
}
 8012cf4:	46c0      	nop			@ (mov r8, r8)
 8012cf6:	46c0      	nop			@ (mov r8, r8)
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	b002      	add	sp, #8
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	46c0      	nop			@ (mov r8, r8)
 8012d00:	00000bb8 	.word	0x00000bb8
 8012d04:	40000400 	.word	0x40000400
 8012d08:	50000400 	.word	0x50000400

08012d0c <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012d0c:	b5b0      	push	{r4, r5, r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	0002      	movs	r2, r0
 8012d14:	1dbb      	adds	r3, r7, #6
 8012d16:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012d18:	1dbb      	adds	r3, r7, #6
 8012d1a:	881b      	ldrh	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d05a      	beq.n	8012dd6 <SetVOCindicator+0xca>
 8012d20:	1dbb      	adds	r3, r7, #6
 8012d22:	881b      	ldrh	r3, [r3, #0]
 8012d24:	2b64      	cmp	r3, #100	@ 0x64
 8012d26:	d856      	bhi.n	8012dd6 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012d28:	1dbb      	adds	r3, r7, #6
 8012d2a:	881b      	ldrh	r3, [r3, #0]
 8012d2c:	0018      	movs	r0, r3
 8012d2e:	f7f0 fd5f 	bl	80037f0 <__aeabi_i2d>
 8012d32:	2200      	movs	r2, #0
 8012d34:	4b5f      	ldr	r3, [pc, #380]	@ (8012eb4 <SetVOCindicator+0x1a8>)
 8012d36:	f7ef f9d3 	bl	80020e0 <__aeabi_ddiv>
 8012d3a:	0002      	movs	r2, r0
 8012d3c:	000b      	movs	r3, r1
 8012d3e:	2000      	movs	r0, #0
 8012d40:	495d      	ldr	r1, [pc, #372]	@ (8012eb8 <SetVOCindicator+0x1ac>)
 8012d42:	f7f0 f8ed 	bl	8002f20 <__aeabi_dsub>
 8012d46:	0002      	movs	r2, r0
 8012d48:	000b      	movs	r3, r1
 8012d4a:	0014      	movs	r4, r2
 8012d4c:	001d      	movs	r5, r3
 8012d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8012ebc <SetVOCindicator+0x1b0>)
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	0018      	movs	r0, r3
 8012d54:	f7f0 fd4c 	bl	80037f0 <__aeabi_i2d>
 8012d58:	0002      	movs	r2, r0
 8012d5a:	000b      	movs	r3, r1
 8012d5c:	0020      	movs	r0, r4
 8012d5e:	0029      	movs	r1, r5
 8012d60:	f7ef fdf8 	bl	8002954 <__aeabi_dmul>
 8012d64:	0002      	movs	r2, r0
 8012d66:	000b      	movs	r3, r1
 8012d68:	0010      	movs	r0, r2
 8012d6a:	0019      	movs	r1, r3
 8012d6c:	f7ed fc6e 	bl	800064c <__aeabi_d2uiz>
 8012d70:	0003      	movs	r3, r0
 8012d72:	b29a      	uxth	r2, r3
 8012d74:	4b52      	ldr	r3, [pc, #328]	@ (8012ec0 <SetVOCindicator+0x1b4>)
 8012d76:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012d78:	1dbb      	adds	r3, r7, #6
 8012d7a:	881b      	ldrh	r3, [r3, #0]
 8012d7c:	0018      	movs	r0, r3
 8012d7e:	f7f0 fd37 	bl	80037f0 <__aeabi_i2d>
 8012d82:	2200      	movs	r2, #0
 8012d84:	4b4b      	ldr	r3, [pc, #300]	@ (8012eb4 <SetVOCindicator+0x1a8>)
 8012d86:	f7ef f9ab 	bl	80020e0 <__aeabi_ddiv>
 8012d8a:	0002      	movs	r2, r0
 8012d8c:	000b      	movs	r3, r1
 8012d8e:	0014      	movs	r4, r2
 8012d90:	001d      	movs	r5, r3
 8012d92:	4b4a      	ldr	r3, [pc, #296]	@ (8012ebc <SetVOCindicator+0x1b0>)
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	0018      	movs	r0, r3
 8012d98:	f7f0 fd2a 	bl	80037f0 <__aeabi_i2d>
 8012d9c:	0002      	movs	r2, r0
 8012d9e:	000b      	movs	r3, r1
 8012da0:	0020      	movs	r0, r4
 8012da2:	0029      	movs	r1, r5
 8012da4:	f7ef fdd6 	bl	8002954 <__aeabi_dmul>
 8012da8:	0002      	movs	r2, r0
 8012daa:	000b      	movs	r3, r1
 8012dac:	0010      	movs	r0, r2
 8012dae:	0019      	movs	r1, r3
 8012db0:	f7ed fc4c 	bl	800064c <__aeabi_d2uiz>
 8012db4:	0003      	movs	r3, r0
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	4b42      	ldr	r3, [pc, #264]	@ (8012ec4 <SetVOCindicator+0x1b8>)
 8012dba:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8012ebc <SetVOCindicator+0x1b0>)
 8012dbe:	881a      	ldrh	r2, [r3, #0]
 8012dc0:	4b41      	ldr	r3, [pc, #260]	@ (8012ec8 <SetVOCindicator+0x1bc>)
 8012dc2:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012dc4:	4b40      	ldr	r3, [pc, #256]	@ (8012ec8 <SetVOCindicator+0x1bc>)
 8012dc6:	8818      	ldrh	r0, [r3, #0]
 8012dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8012ec0 <SetVOCindicator+0x1b4>)
 8012dca:	8819      	ldrh	r1, [r3, #0]
 8012dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8012ec4 <SetVOCindicator+0x1b8>)
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	001a      	movs	r2, r3
 8012dd2:	f7ff fd43 	bl	801285c <SetVocLED>
  }
  if(VOCi > 100){
 8012dd6:	1dbb      	adds	r3, r7, #6
 8012dd8:	881b      	ldrh	r3, [r3, #0]
 8012dda:	2b64      	cmp	r3, #100	@ 0x64
 8012ddc:	d966      	bls.n	8012eac <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012dde:	1dbb      	adds	r3, r7, #6
 8012de0:	881b      	ldrh	r3, [r3, #0]
 8012de2:	0018      	movs	r0, r3
 8012de4:	f7f0 fd04 	bl	80037f0 <__aeabi_i2d>
 8012de8:	2200      	movs	r2, #0
 8012dea:	4b32      	ldr	r3, [pc, #200]	@ (8012eb4 <SetVOCindicator+0x1a8>)
 8012dec:	f7f0 f898 	bl	8002f20 <__aeabi_dsub>
 8012df0:	0002      	movs	r2, r0
 8012df2:	000b      	movs	r3, r1
 8012df4:	0010      	movs	r0, r2
 8012df6:	0019      	movs	r1, r3
 8012df8:	2200      	movs	r2, #0
 8012dfa:	4b34      	ldr	r3, [pc, #208]	@ (8012ecc <SetVOCindicator+0x1c0>)
 8012dfc:	f7ef f970 	bl	80020e0 <__aeabi_ddiv>
 8012e00:	0002      	movs	r2, r0
 8012e02:	000b      	movs	r3, r1
 8012e04:	0014      	movs	r4, r2
 8012e06:	001d      	movs	r5, r3
 8012e08:	4b2c      	ldr	r3, [pc, #176]	@ (8012ebc <SetVOCindicator+0x1b0>)
 8012e0a:	881b      	ldrh	r3, [r3, #0]
 8012e0c:	0018      	movs	r0, r3
 8012e0e:	f7f0 fcef 	bl	80037f0 <__aeabi_i2d>
 8012e12:	0002      	movs	r2, r0
 8012e14:	000b      	movs	r3, r1
 8012e16:	0020      	movs	r0, r4
 8012e18:	0029      	movs	r1, r5
 8012e1a:	f7ef fd9b 	bl	8002954 <__aeabi_dmul>
 8012e1e:	0002      	movs	r2, r0
 8012e20:	000b      	movs	r3, r1
 8012e22:	0010      	movs	r0, r2
 8012e24:	0019      	movs	r1, r3
 8012e26:	f7ed fc11 	bl	800064c <__aeabi_d2uiz>
 8012e2a:	0003      	movs	r3, r0
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	4b24      	ldr	r3, [pc, #144]	@ (8012ec0 <SetVOCindicator+0x1b4>)
 8012e30:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012e32:	1dbb      	adds	r3, r7, #6
 8012e34:	881b      	ldrh	r3, [r3, #0]
 8012e36:	0018      	movs	r0, r3
 8012e38:	f7f0 fcda 	bl	80037f0 <__aeabi_i2d>
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8012eb4 <SetVOCindicator+0x1a8>)
 8012e40:	f7f0 f86e 	bl	8002f20 <__aeabi_dsub>
 8012e44:	0002      	movs	r2, r0
 8012e46:	000b      	movs	r3, r1
 8012e48:	0010      	movs	r0, r2
 8012e4a:	0019      	movs	r1, r3
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8012ecc <SetVOCindicator+0x1c0>)
 8012e50:	f7ef f946 	bl	80020e0 <__aeabi_ddiv>
 8012e54:	0002      	movs	r2, r0
 8012e56:	000b      	movs	r3, r1
 8012e58:	2000      	movs	r0, #0
 8012e5a:	4917      	ldr	r1, [pc, #92]	@ (8012eb8 <SetVOCindicator+0x1ac>)
 8012e5c:	f7f0 f860 	bl	8002f20 <__aeabi_dsub>
 8012e60:	0002      	movs	r2, r0
 8012e62:	000b      	movs	r3, r1
 8012e64:	0014      	movs	r4, r2
 8012e66:	001d      	movs	r5, r3
 8012e68:	4b14      	ldr	r3, [pc, #80]	@ (8012ebc <SetVOCindicator+0x1b0>)
 8012e6a:	881b      	ldrh	r3, [r3, #0]
 8012e6c:	0018      	movs	r0, r3
 8012e6e:	f7f0 fcbf 	bl	80037f0 <__aeabi_i2d>
 8012e72:	0002      	movs	r2, r0
 8012e74:	000b      	movs	r3, r1
 8012e76:	0020      	movs	r0, r4
 8012e78:	0029      	movs	r1, r5
 8012e7a:	f7ef fd6b 	bl	8002954 <__aeabi_dmul>
 8012e7e:	0002      	movs	r2, r0
 8012e80:	000b      	movs	r3, r1
 8012e82:	0010      	movs	r0, r2
 8012e84:	0019      	movs	r1, r3
 8012e86:	f7ed fbe1 	bl	800064c <__aeabi_d2uiz>
 8012e8a:	0003      	movs	r3, r0
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8012ec8 <SetVOCindicator+0x1bc>)
 8012e90:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012e92:	4b0a      	ldr	r3, [pc, #40]	@ (8012ebc <SetVOCindicator+0x1b0>)
 8012e94:	881a      	ldrh	r2, [r3, #0]
 8012e96:	4b0b      	ldr	r3, [pc, #44]	@ (8012ec4 <SetVOCindicator+0x1b8>)
 8012e98:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8012ec8 <SetVOCindicator+0x1bc>)
 8012e9c:	8818      	ldrh	r0, [r3, #0]
 8012e9e:	4b08      	ldr	r3, [pc, #32]	@ (8012ec0 <SetVOCindicator+0x1b4>)
 8012ea0:	8819      	ldrh	r1, [r3, #0]
 8012ea2:	4b08      	ldr	r3, [pc, #32]	@ (8012ec4 <SetVOCindicator+0x1b8>)
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	001a      	movs	r2, r3
 8012ea8:	f7ff fcd8 	bl	801285c <SetVocLED>
  }

}
 8012eac:	46c0      	nop			@ (mov r8, r8)
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	b002      	add	sp, #8
 8012eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8012eb4:	40590000 	.word	0x40590000
 8012eb8:	3ff00000 	.word	0x3ff00000
 8012ebc:	200000ea 	.word	0x200000ea
 8012ec0:	20002166 	.word	0x20002166
 8012ec4:	20002168 	.word	0x20002168
 8012ec8:	2000216a 	.word	0x2000216a
 8012ecc:	40790000 	.word	0x40790000

08012ed0 <powerCheck>:

Battery_Status powerCheck(){
 8012ed0:	b590      	push	{r4, r7, lr}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8012ed6:	f7f6 fe7d 	bl	8009bd4 <Check_USB_PowerOn>
 8012eda:	0003      	movs	r3, r0
 8012edc:	001a      	movs	r2, r3
 8012ede:	2301      	movs	r3, #1
 8012ee0:	4053      	eors	r3, r2
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d005      	beq.n	8012ef4 <powerCheck+0x24>
    status = batteryChargeCheck();
 8012ee8:	1dfc      	adds	r4, r7, #7
 8012eea:	f7ff fb97 	bl	801261c <batteryChargeCheck>
 8012eee:	0003      	movs	r3, r0
 8012ef0:	7023      	strb	r3, [r4, #0]
 8012ef2:	e002      	b.n	8012efa <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8012ef4:	1dfb      	adds	r3, r7, #7
 8012ef6:	2204      	movs	r2, #4
 8012ef8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012efa:	1dfb      	adds	r3, r7, #7
 8012efc:	781b      	ldrb	r3, [r3, #0]
}
 8012efe:	0018      	movs	r0, r3
 8012f00:	46bd      	mov	sp, r7
 8012f02:	b003      	add	sp, #12
 8012f04:	bd90      	pop	{r4, r7, pc}
	...

08012f08 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8012f08:	b5b0      	push	{r4, r5, r7, lr}
 8012f0a:	b086      	sub	sp, #24
 8012f0c:	af04      	add	r7, sp, #16
 8012f0e:	0002      	movs	r2, r0
 8012f10:	1dfb      	adds	r3, r7, #7
 8012f12:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8012f14:	1dfb      	adds	r3, r7, #7
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	2b04      	cmp	r3, #4
 8012f1a:	d114      	bne.n	8012f46 <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8012f1c:	f7f6 fda4 	bl	8009a68 <ReadBatteryVoltage>
 8012f20:	1c03      	adds	r3, r0, #0
 8012f22:	1c18      	adds	r0, r3, #0
 8012f24:	f7f0 fcb6 	bl	8003894 <__aeabi_f2d>
 8012f28:	0004      	movs	r4, r0
 8012f2a:	000d      	movs	r5, r1
 8012f2c:	f7f6 fdfe 	bl	8009b2c <ReadSolarVoltage>
 8012f30:	0003      	movs	r3, r0
 8012f32:	0019      	movs	r1, r3
 8012f34:	4a2a      	ldr	r2, [pc, #168]	@ (8012fe0 <powerDisplay+0xd8>)
 8012f36:	4b2b      	ldr	r3, [pc, #172]	@ (8012fe4 <powerDisplay+0xdc>)
 8012f38:	9102      	str	r1, [sp, #8]
 8012f3a:	9400      	str	r4, [sp, #0]
 8012f3c:	9501      	str	r5, [sp, #4]
 8012f3e:	0019      	movs	r1, r3
 8012f40:	2003      	movs	r0, #3
 8012f42:	f000 ff71 	bl	8013e28 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8012f46:	1dfb      	adds	r3, r7, #7
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	2b03      	cmp	r3, #3
 8012f4c:	d105      	bne.n	8012f5a <powerDisplay+0x52>
    Debug("Battery fully charged");
 8012f4e:	4a26      	ldr	r2, [pc, #152]	@ (8012fe8 <powerDisplay+0xe0>)
 8012f50:	4b24      	ldr	r3, [pc, #144]	@ (8012fe4 <powerDisplay+0xdc>)
 8012f52:	0019      	movs	r1, r3
 8012f54:	2003      	movs	r0, #3
 8012f56:	f000 ff67 	bl	8013e28 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8012f5a:	1dfb      	adds	r3, r7, #7
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	2b02      	cmp	r3, #2
 8012f60:	d105      	bne.n	8012f6e <powerDisplay+0x66>
    Debug("Battery status good");
 8012f62:	4a22      	ldr	r2, [pc, #136]	@ (8012fec <powerDisplay+0xe4>)
 8012f64:	4b1f      	ldr	r3, [pc, #124]	@ (8012fe4 <powerDisplay+0xdc>)
 8012f66:	0019      	movs	r1, r3
 8012f68:	2003      	movs	r0, #3
 8012f6a:	f000 ff5d 	bl	8013e28 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8012f6e:	1dfb      	adds	r3, r7, #7
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d105      	bne.n	8012f82 <powerDisplay+0x7a>
    Debug("Battery status low");
 8012f76:	4a1e      	ldr	r2, [pc, #120]	@ (8012ff0 <powerDisplay+0xe8>)
 8012f78:	4b1a      	ldr	r3, [pc, #104]	@ (8012fe4 <powerDisplay+0xdc>)
 8012f7a:	0019      	movs	r1, r3
 8012f7c:	2003      	movs	r0, #3
 8012f7e:	f000 ff53 	bl	8013e28 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8012f82:	1dfb      	adds	r3, r7, #7
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d105      	bne.n	8012f96 <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 8012f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8012ff4 <powerDisplay+0xec>)
 8012f8c:	4b15      	ldr	r3, [pc, #84]	@ (8012fe4 <powerDisplay+0xdc>)
 8012f8e:	0019      	movs	r1, r3
 8012f90:	2003      	movs	r0, #3
 8012f92:	f000 ff49 	bl	8013e28 <CreateLine>
  }
  switch (Read_Charge_Status()) {
 8012f96:	f7f6 fe3b 	bl	8009c10 <Read_Charge_Status>
 8012f9a:	0003      	movs	r3, r0
 8012f9c:	2b02      	cmp	r3, #2
 8012f9e:	d013      	beq.n	8012fc8 <powerDisplay+0xc0>
 8012fa0:	dc19      	bgt.n	8012fd6 <powerDisplay+0xce>
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d002      	beq.n	8012fac <powerDisplay+0xa4>
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d007      	beq.n	8012fba <powerDisplay+0xb2>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8012faa:	e014      	b.n	8012fd6 <powerDisplay+0xce>
    Debug("Battery charging off");
 8012fac:	4a12      	ldr	r2, [pc, #72]	@ (8012ff8 <powerDisplay+0xf0>)
 8012fae:	4b0d      	ldr	r3, [pc, #52]	@ (8012fe4 <powerDisplay+0xdc>)
 8012fb0:	0019      	movs	r1, r3
 8012fb2:	2003      	movs	r0, #3
 8012fb4:	f000 ff38 	bl	8013e28 <CreateLine>
    break;
 8012fb8:	e00d      	b.n	8012fd6 <powerDisplay+0xce>
    Debug("Battery is charging");
 8012fba:	4a10      	ldr	r2, [pc, #64]	@ (8012ffc <powerDisplay+0xf4>)
 8012fbc:	4b09      	ldr	r3, [pc, #36]	@ (8012fe4 <powerDisplay+0xdc>)
 8012fbe:	0019      	movs	r1, r3
 8012fc0:	2003      	movs	r0, #3
 8012fc2:	f000 ff31 	bl	8013e28 <CreateLine>
    break;
 8012fc6:	e006      	b.n	8012fd6 <powerDisplay+0xce>
    Debug("Battery full, charging off");
 8012fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8013000 <powerDisplay+0xf8>)
 8012fca:	4b06      	ldr	r3, [pc, #24]	@ (8012fe4 <powerDisplay+0xdc>)
 8012fcc:	0019      	movs	r1, r3
 8012fce:	2003      	movs	r0, #3
 8012fd0:	f000 ff2a 	bl	8013e28 <CreateLine>
    break;
 8012fd4:	46c0      	nop			@ (mov r8, r8)
}
 8012fd6:	46c0      	nop			@ (mov r8, r8)
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	b002      	add	sp, #8
 8012fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8012fde:	46c0      	nop			@ (mov r8, r8)
 8012fe0:	0802d8d8 	.word	0x0802d8d8
 8012fe4:	0802d918 	.word	0x0802d918
 8012fe8:	0802d91c 	.word	0x0802d91c
 8012fec:	0802d934 	.word	0x0802d934
 8012ff0:	0802d948 	.word	0x0802d948
 8012ff4:	0802d95c 	.word	0x0802d95c
 8012ff8:	0802d980 	.word	0x0802d980
 8012ffc:	0802d998 	.word	0x0802d998
 8013000:	0802d9ac 	.word	0x0802d9ac

08013004 <configCheck>:

void configCheck(){
 8013004:	b590      	push	{r4, r7, lr}
 8013006:	b083      	sub	sp, #12
 8013008:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 801300a:	f7f6 fe5d 	bl	8009cc8 <BootButton_Pressed>
 801300e:	1e03      	subs	r3, r0, #0
 8013010:	d007      	beq.n	8013022 <configCheck+0x1e>
 8013012:	f7f6 fe6b 	bl	8009cec <UserButton_Pressed>
 8013016:	1e03      	subs	r3, r0, #0
 8013018:	d003      	beq.n	8013022 <configCheck+0x1e>
    configSet = true;
 801301a:	4bb5      	ldr	r3, [pc, #724]	@ (80132f0 <configCheck+0x2ec>)
 801301c:	2201      	movs	r2, #1
 801301e:	701a      	strb	r2, [r3, #0]
 8013020:	e00a      	b.n	8013038 <configCheck+0x34>
  }
  else{
    configSet = false;
 8013022:	4bb3      	ldr	r3, [pc, #716]	@ (80132f0 <configCheck+0x2ec>)
 8013024:	2200      	movs	r2, #0
 8013026:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8013028:	f001 fc76 	bl	8014918 <HAL_GetTick>
 801302c:	0003      	movs	r3, r0
 801302e:	22fa      	movs	r2, #250	@ 0xfa
 8013030:	00d2      	lsls	r2, r2, #3
 8013032:	189a      	adds	r2, r3, r2
 8013034:	4baf      	ldr	r3, [pc, #700]	@ (80132f4 <configCheck+0x2f0>)
 8013036:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8013038:	4bad      	ldr	r3, [pc, #692]	@ (80132f0 <configCheck+0x2ec>)
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d00d      	beq.n	801305c <configCheck+0x58>
 8013040:	4bac      	ldr	r3, [pc, #688]	@ (80132f4 <configCheck+0x2f0>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	0018      	movs	r0, r3
 8013046:	f000 fe99 	bl	8013d7c <TimestampIsReached>
 801304a:	1e03      	subs	r3, r0, #0
 801304c:	d006      	beq.n	801305c <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 801304e:	f7f1 ff0f 	bl	8004e70 <SetConfigMode>
    SetDBLED(true, true, true);
 8013052:	2201      	movs	r2, #1
 8013054:	2101      	movs	r1, #1
 8013056:	2001      	movs	r0, #1
 8013058:	f7ff fbb6 	bl	80127c8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 801305c:	f7f6 fe34 	bl	8009cc8 <BootButton_Pressed>
 8013060:	0003      	movs	r3, r0
 8013062:	001a      	movs	r2, r3
 8013064:	2301      	movs	r3, #1
 8013066:	4053      	eors	r3, r2
 8013068:	b2db      	uxtb	r3, r3
 801306a:	2b00      	cmp	r3, #0
 801306c:	d05a      	beq.n	8013124 <configCheck+0x120>
 801306e:	f7f6 fe3d 	bl	8009cec <UserButton_Pressed>
 8013072:	1e03      	subs	r3, r0, #0
 8013074:	d056      	beq.n	8013124 <configCheck+0x120>
 8013076:	4ba0      	ldr	r3, [pc, #640]	@ (80132f8 <configCheck+0x2f4>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	2201      	movs	r2, #1
 801307c:	4053      	eors	r3, r2
 801307e:	b2db      	uxtb	r3, r3
 8013080:	2b00      	cmp	r3, #0
 8013082:	d04f      	beq.n	8013124 <configCheck+0x120>
 8013084:	f7f1 ff14 	bl	8004eb0 <GetReconfigMode>
 8013088:	0003      	movs	r3, r0
 801308a:	001a      	movs	r2, r3
 801308c:	2301      	movs	r3, #1
 801308e:	4053      	eors	r3, r2
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b00      	cmp	r3, #0
 8013094:	d046      	beq.n	8013124 <configCheck+0x120>
    SetLEDsOff();
 8013096:	f7ff fd21 	bl	8012adc <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 801309a:	4a98      	ldr	r2, [pc, #608]	@ (80132fc <configCheck+0x2f8>)
 801309c:	4997      	ldr	r1, [pc, #604]	@ (80132fc <configCheck+0x2f8>)
 801309e:	4b97      	ldr	r3, [pc, #604]	@ (80132fc <configCheck+0x2f8>)
 80130a0:	0018      	movs	r0, r3
 80130a2:	f7ff fbdb 	bl	801285c <SetVocLED>
    HAL_Delay(1500);
 80130a6:	4b96      	ldr	r3, [pc, #600]	@ (8013300 <configCheck+0x2fc>)
 80130a8:	0018      	movs	r0, r3
 80130aa:	f001 fc3f 	bl	801492c <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 80130ae:	23fa      	movs	r3, #250	@ 0xfa
 80130b0:	011a      	lsls	r2, r3, #4
 80130b2:	23fa      	movs	r3, #250	@ 0xfa
 80130b4:	0119      	lsls	r1, r3, #4
 80130b6:	23fa      	movs	r3, #250	@ 0xfa
 80130b8:	011b      	lsls	r3, r3, #4
 80130ba:	0018      	movs	r0, r3
 80130bc:	f7ff fbce 	bl	801285c <SetVocLED>
    userToggle = !userToggle;
 80130c0:	4b90      	ldr	r3, [pc, #576]	@ (8013304 <configCheck+0x300>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	1e5a      	subs	r2, r3, #1
 80130c6:	4193      	sbcs	r3, r2
 80130c8:	b2db      	uxtb	r3, r3
 80130ca:	2201      	movs	r2, #1
 80130cc:	4053      	eors	r3, r2
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	1c1a      	adds	r2, r3, #0
 80130d2:	2301      	movs	r3, #1
 80130d4:	4013      	ands	r3, r2
 80130d6:	b2da      	uxtb	r2, r3
 80130d8:	4b8a      	ldr	r3, [pc, #552]	@ (8013304 <configCheck+0x300>)
 80130da:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 80130dc:	4b89      	ldr	r3, [pc, #548]	@ (8013304 <configCheck+0x300>)
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d002      	beq.n	80130ea <configCheck+0xe6>
      EnabledConnectedDevices();
 80130e4:	f7fa fde0 	bl	800dca8 <EnabledConnectedDevices>
 80130e8:	e004      	b.n	80130f4 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 80130ea:	f001 fc15 	bl	8014918 <HAL_GetTick>
 80130ee:	0002      	movs	r2, r0
 80130f0:	4b85      	ldr	r3, [pc, #532]	@ (8013308 <configCheck+0x304>)
 80130f2:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 80130f4:	4b83      	ldr	r3, [pc, #524]	@ (8013304 <configCheck+0x300>)
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d001      	beq.n	8013100 <configCheck+0xfc>
 80130fc:	4b83      	ldr	r3, [pc, #524]	@ (801330c <configCheck+0x308>)
 80130fe:	e000      	b.n	8013102 <configCheck+0xfe>
 8013100:	4b83      	ldr	r3, [pc, #524]	@ (8013310 <configCheck+0x30c>)
 8013102:	4a84      	ldr	r2, [pc, #528]	@ (8013314 <configCheck+0x310>)
 8013104:	4984      	ldr	r1, [pc, #528]	@ (8013318 <configCheck+0x314>)
 8013106:	2003      	movs	r0, #3
 8013108:	f000 fe8e 	bl	8013e28 <CreateLine>
    userbuttonHeld = true;
 801310c:	4b7a      	ldr	r3, [pc, #488]	@ (80132f8 <configCheck+0x2f4>)
 801310e:	2201      	movs	r2, #1
 8013110:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8013112:	f001 fc01 	bl	8014918 <HAL_GetTick>
 8013116:	0003      	movs	r3, r0
 8013118:	22fa      	movs	r2, #250	@ 0xfa
 801311a:	00d2      	lsls	r2, r2, #3
 801311c:	189a      	adds	r2, r3, r2
 801311e:	4b7f      	ldr	r3, [pc, #508]	@ (801331c <configCheck+0x318>)
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	e002      	b.n	801312a <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8013124:	4b74      	ldr	r3, [pc, #464]	@ (80132f8 <configCheck+0x2f4>)
 8013126:	2200      	movs	r2, #0
 8013128:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 801312a:	f7f6 fdcd 	bl	8009cc8 <BootButton_Pressed>
 801312e:	0003      	movs	r3, r0
 8013130:	001a      	movs	r2, r3
 8013132:	2301      	movs	r3, #1
 8013134:	4053      	eors	r3, r2
 8013136:	b2db      	uxtb	r3, r3
 8013138:	2b00      	cmp	r3, #0
 801313a:	d100      	bne.n	801313e <configCheck+0x13a>
 801313c:	e0a4      	b.n	8013288 <configCheck+0x284>
 801313e:	4b6e      	ldr	r3, [pc, #440]	@ (80132f8 <configCheck+0x2f4>)
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d100      	bne.n	8013148 <configCheck+0x144>
 8013146:	e09f      	b.n	8013288 <configCheck+0x284>
 8013148:	4b74      	ldr	r3, [pc, #464]	@ (801331c <configCheck+0x318>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	0018      	movs	r0, r3
 801314e:	f000 fe15 	bl	8013d7c <TimestampIsReached>
 8013152:	1e03      	subs	r3, r0, #0
 8013154:	d100      	bne.n	8013158 <configCheck+0x154>
 8013156:	e097      	b.n	8013288 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013158:	f7fa f964 	bl	800d424 <GetPMSensorPresence>
 801315c:	1e03      	subs	r3, r0, #0
 801315e:	d100      	bne.n	8013162 <configCheck+0x15e>
 8013160:	e082      	b.n	8013268 <configCheck+0x264>
 8013162:	4b6f      	ldr	r3, [pc, #444]	@ (8013320 <configCheck+0x31c>)
 8013164:	791b      	ldrb	r3, [r3, #4]
 8013166:	2b34      	cmp	r3, #52	@ 0x34
 8013168:	d004      	beq.n	8013174 <configCheck+0x170>
 801316a:	4b6d      	ldr	r3, [pc, #436]	@ (8013320 <configCheck+0x31c>)
 801316c:	791b      	ldrb	r3, [r3, #4]
 801316e:	2b35      	cmp	r3, #53	@ 0x35
 8013170:	d000      	beq.n	8013174 <configCheck+0x170>
 8013172:	e079      	b.n	8013268 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8013174:	4b6b      	ldr	r3, [pc, #428]	@ (8013324 <configCheck+0x320>)
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	1e5a      	subs	r2, r3, #1
 801317a:	4193      	sbcs	r3, r2
 801317c:	b2db      	uxtb	r3, r3
 801317e:	2201      	movs	r2, #1
 8013180:	4053      	eors	r3, r2
 8013182:	b2db      	uxtb	r3, r3
 8013184:	1c1a      	adds	r2, r3, #0
 8013186:	2301      	movs	r3, #1
 8013188:	4013      	ands	r3, r2
 801318a:	b2da      	uxtb	r2, r3
 801318c:	4b65      	ldr	r3, [pc, #404]	@ (8013324 <configCheck+0x320>)
 801318e:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8013190:	4b64      	ldr	r3, [pc, #400]	@ (8013324 <configCheck+0x320>)
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d005      	beq.n	80131a4 <configCheck+0x1a0>
 8013198:	1dbc      	adds	r4, r7, #6
 801319a:	f7ff fa99 	bl	80126d0 <Calculate_LED_ON>
 801319e:	0003      	movs	r3, r0
 80131a0:	8023      	strh	r3, [r4, #0]
 80131a2:	e003      	b.n	80131ac <configCheck+0x1a8>
        else color = 4000;
 80131a4:	1dbb      	adds	r3, r7, #6
 80131a6:	22fa      	movs	r2, #250	@ 0xfa
 80131a8:	0112      	lsls	r2, r2, #4
 80131aa:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %sabled", VOCNOx?"en":"dis");
 80131ac:	4b5d      	ldr	r3, [pc, #372]	@ (8013324 <configCheck+0x320>)
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d001      	beq.n	80131b8 <configCheck+0x1b4>
 80131b4:	4b55      	ldr	r3, [pc, #340]	@ (801330c <configCheck+0x308>)
 80131b6:	e000      	b.n	80131ba <configCheck+0x1b6>
 80131b8:	4b55      	ldr	r3, [pc, #340]	@ (8013310 <configCheck+0x30c>)
 80131ba:	4a5b      	ldr	r2, [pc, #364]	@ (8013328 <configCheck+0x324>)
 80131bc:	495b      	ldr	r1, [pc, #364]	@ (801332c <configCheck+0x328>)
 80131be:	2002      	movs	r0, #2
 80131c0:	f000 fe32 	bl	8013e28 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 80131c4:	1d7b      	adds	r3, r7, #5
 80131c6:	2200      	movs	r2, #0
 80131c8:	701a      	strb	r2, [r3, #0]
 80131ca:	e028      	b.n	801321e <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 80131cc:	f7ff fa80 	bl	80126d0 <Calculate_LED_ON>
 80131d0:	0003      	movs	r3, r0
 80131d2:	001a      	movs	r2, r3
 80131d4:	4b56      	ldr	r3, [pc, #344]	@ (8013330 <configCheck+0x32c>)
 80131d6:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 80131d8:	4b55      	ldr	r3, [pc, #340]	@ (8013330 <configCheck+0x32c>)
 80131da:	1dba      	adds	r2, r7, #6
 80131dc:	8812      	ldrh	r2, [r2, #0]
 80131de:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 80131e0:	4b53      	ldr	r3, [pc, #332]	@ (8013330 <configCheck+0x32c>)
 80131e2:	1dba      	adds	r2, r7, #6
 80131e4:	8812      	ldrh	r2, [r2, #0]
 80131e6:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 80131e8:	23c8      	movs	r3, #200	@ 0xc8
 80131ea:	005b      	lsls	r3, r3, #1
 80131ec:	0018      	movs	r0, r3
 80131ee:	f001 fb9d 	bl	801492c <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 80131f2:	4b4f      	ldr	r3, [pc, #316]	@ (8013330 <configCheck+0x32c>)
 80131f4:	22fa      	movs	r2, #250	@ 0xfa
 80131f6:	0112      	lsls	r2, r2, #4
 80131f8:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 80131fa:	4b4d      	ldr	r3, [pc, #308]	@ (8013330 <configCheck+0x32c>)
 80131fc:	22fa      	movs	r2, #250	@ 0xfa
 80131fe:	0112      	lsls	r2, r2, #4
 8013200:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8013202:	4b4b      	ldr	r3, [pc, #300]	@ (8013330 <configCheck+0x32c>)
 8013204:	22fa      	movs	r2, #250	@ 0xfa
 8013206:	0112      	lsls	r2, r2, #4
 8013208:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801320a:	23c8      	movs	r3, #200	@ 0xc8
 801320c:	005b      	lsls	r3, r3, #1
 801320e:	0018      	movs	r0, r3
 8013210:	f001 fb8c 	bl	801492c <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8013214:	1d7b      	adds	r3, r7, #5
 8013216:	781a      	ldrb	r2, [r3, #0]
 8013218:	1d7b      	adds	r3, r7, #5
 801321a:	3201      	adds	r2, #1
 801321c:	701a      	strb	r2, [r3, #0]
 801321e:	1d7b      	adds	r3, r7, #5
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	2b01      	cmp	r3, #1
 8013224:	d9d2      	bls.n	80131cc <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8013226:	4b37      	ldr	r3, [pc, #220]	@ (8013304 <configCheck+0x300>)
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	1e5a      	subs	r2, r3, #1
 801322c:	4193      	sbcs	r3, r2
 801322e:	b2db      	uxtb	r3, r3
 8013230:	2201      	movs	r2, #1
 8013232:	4053      	eors	r3, r2
 8013234:	b2db      	uxtb	r3, r3
 8013236:	1c1a      	adds	r2, r3, #0
 8013238:	2301      	movs	r3, #1
 801323a:	4013      	ands	r3, r2
 801323c:	b2da      	uxtb	r2, r3
 801323e:	4b31      	ldr	r3, [pc, #196]	@ (8013304 <configCheck+0x300>)
 8013240:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %sabled", userToggle?"en":"dis");
 8013242:	4b30      	ldr	r3, [pc, #192]	@ (8013304 <configCheck+0x300>)
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <configCheck+0x24a>
 801324a:	4b30      	ldr	r3, [pc, #192]	@ (801330c <configCheck+0x308>)
 801324c:	e000      	b.n	8013250 <configCheck+0x24c>
 801324e:	4b30      	ldr	r3, [pc, #192]	@ (8013310 <configCheck+0x30c>)
 8013250:	4a38      	ldr	r2, [pc, #224]	@ (8013334 <configCheck+0x330>)
 8013252:	4936      	ldr	r1, [pc, #216]	@ (801332c <configCheck+0x328>)
 8013254:	2002      	movs	r0, #2
 8013256:	f000 fde7 	bl	8013e28 <CreateLine>
      if (usbPluggedIn) {
 801325a:	4b37      	ldr	r3, [pc, #220]	@ (8013338 <configCheck+0x334>)
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d009      	beq.n	8013276 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8013262:	f7fb ff1f 	bl	800f0a4 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013266:	e006      	b.n	8013276 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8013268:	4a34      	ldr	r2, [pc, #208]	@ (801333c <configCheck+0x338>)
 801326a:	4b30      	ldr	r3, [pc, #192]	@ (801332c <configCheck+0x328>)
 801326c:	0019      	movs	r1, r3
 801326e:	2002      	movs	r0, #2
 8013270:	f000 fdda 	bl	8013e28 <CreateLine>
 8013274:	e000      	b.n	8013278 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013276:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8013278:	46c0      	nop			@ (mov r8, r8)
 801327a:	f7f6 fd37 	bl	8009cec <UserButton_Pressed>
 801327e:	1e03      	subs	r3, r0, #0
 8013280:	d1fb      	bne.n	801327a <configCheck+0x276>
    }
    userbuttonHeld = false;
 8013282:	4b1d      	ldr	r3, [pc, #116]	@ (80132f8 <configCheck+0x2f4>)
 8013284:	2200      	movs	r2, #0
 8013286:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8013288:	f7f6 fd1e 	bl	8009cc8 <BootButton_Pressed>
 801328c:	0003      	movs	r3, r0
 801328e:	001a      	movs	r2, r3
 8013290:	2301      	movs	r3, #1
 8013292:	4053      	eors	r3, r2
 8013294:	b2db      	uxtb	r3, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	d00b      	beq.n	80132b2 <configCheck+0x2ae>
 801329a:	f7f6 fd27 	bl	8009cec <UserButton_Pressed>
 801329e:	0003      	movs	r3, r0
 80132a0:	001a      	movs	r2, r3
 80132a2:	2301      	movs	r3, #1
 80132a4:	4053      	eors	r3, r2
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d002      	beq.n	80132b2 <configCheck+0x2ae>
    userbuttonHeld = false;
 80132ac:	4b12      	ldr	r3, [pc, #72]	@ (80132f8 <configCheck+0x2f4>)
 80132ae:	2200      	movs	r2, #0
 80132b0:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80132b2:	f7f6 fc8f 	bl	8009bd4 <Check_USB_PowerOn>
 80132b6:	1e03      	subs	r3, r0, #0
 80132b8:	d003      	beq.n	80132c2 <configCheck+0x2be>
    usbPluggedIn = true;
 80132ba:	4b1f      	ldr	r3, [pc, #124]	@ (8013338 <configCheck+0x334>)
 80132bc:	2201      	movs	r2, #1
 80132be:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 80132c0:	e012      	b.n	80132e8 <configCheck+0x2e4>
    if(!userToggle && !init){
 80132c2:	4b10      	ldr	r3, [pc, #64]	@ (8013304 <configCheck+0x300>)
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	2201      	movs	r2, #1
 80132c8:	4053      	eors	r3, r2
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d008      	beq.n	80132e2 <configCheck+0x2de>
 80132d0:	4b1b      	ldr	r3, [pc, #108]	@ (8013340 <configCheck+0x33c>)
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	2201      	movs	r2, #1
 80132d6:	4053      	eors	r3, r2
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d001      	beq.n	80132e2 <configCheck+0x2de>
      SetLEDsOff();
 80132de:	f7ff fbfd 	bl	8012adc <SetLEDsOff>
    usbPluggedIn = false;
 80132e2:	4b15      	ldr	r3, [pc, #84]	@ (8013338 <configCheck+0x334>)
 80132e4:	2200      	movs	r2, #0
 80132e6:	701a      	strb	r2, [r3, #0]
}
 80132e8:	46c0      	nop			@ (mov r8, r8)
 80132ea:	46bd      	mov	sp, r7
 80132ec:	b003      	add	sp, #12
 80132ee:	bd90      	pop	{r4, r7, pc}
 80132f0:	20002150 	.word	0x20002150
 80132f4:	20002158 	.word	0x20002158
 80132f8:	20002153 	.word	0x20002153
 80132fc:	00000bb8 	.word	0x00000bb8
 8013300:	000005dc 	.word	0x000005dc
 8013304:	20002152 	.word	0x20002152
 8013308:	20001114 	.word	0x20001114
 801330c:	0802d9c8 	.word	0x0802d9c8
 8013310:	0802d9cc 	.word	0x0802d9cc
 8013314:	0802d9d0 	.word	0x0802d9d0
 8013318:	0802d918 	.word	0x0802d918
 801331c:	2000215c 	.word	0x2000215c
 8013320:	200011c4 	.word	0x200011c4
 8013324:	200011c2 	.word	0x200011c2
 8013328:	0802d9f0 	.word	0x0802d9f0
 801332c:	0802da18 	.word	0x0802da18
 8013330:	40000400 	.word	0x40000400
 8013334:	0802da1c 	.word	0x0802da1c
 8013338:	20002151 	.word	0x20002151
 801333c:	0802da3c 	.word	0x0802da3c
 8013340:	200000e8 	.word	0x200000e8

08013344 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8013344:	b590      	push	{r4, r7, lr}
 8013346:	b083      	sub	sp, #12
 8013348:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 801334a:	1dfc      	adds	r4, r7, #7
 801334c:	f7ff fdc0 	bl	8012ed0 <powerCheck>
 8013350:	0003      	movs	r3, r0
 8013352:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8013354:	1dfb      	adds	r3, r7, #7
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	0018      	movs	r0, r3
 801335a:	f7ff fdd5 	bl	8012f08 <powerDisplay>
  return status;
 801335e:	1dfb      	adds	r3, r7, #7
 8013360:	781b      	ldrb	r3, [r3, #0]
}
 8013362:	0018      	movs	r0, r3
 8013364:	46bd      	mov	sp, r7
 8013366:	b003      	add	sp, #12
 8013368:	bd90      	pop	{r4, r7, pc}
	...

0801336c <setuserToggle>:

void setuserToggle(void) {
 801336c:	b580      	push	{r7, lr}
 801336e:	af00      	add	r7, sp, #0
  if (!Check_USB_PowerOn()) { //operate only in battery operation mode
 8013370:	f7f6 fc30 	bl	8009bd4 <Check_USB_PowerOn>
 8013374:	0003      	movs	r3, r0
 8013376:	001a      	movs	r2, r3
 8013378:	2301      	movs	r3, #1
 801337a:	4053      	eors	r3, r2
 801337c:	b2db      	uxtb	r3, r3
 801337e:	2b00      	cmp	r3, #0
 8013380:	d004      	beq.n	801338c <setuserToggle+0x20>
    userToggle = true;
 8013382:	4b04      	ldr	r3, [pc, #16]	@ (8013394 <setuserToggle+0x28>)
 8013384:	2201      	movs	r2, #1
 8013386:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8013388:	f7fa fc8e 	bl	800dca8 <EnabledConnectedDevices>
  }
}
 801338c:	46c0      	nop			@ (mov r8, r8)
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	46c0      	nop			@ (mov r8, r8)
 8013394:	20002152 	.word	0x20002152

08013398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801339c:	4b07      	ldr	r3, [pc, #28]	@ (80133bc <HAL_MspInit+0x24>)
 801339e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133a0:	4b06      	ldr	r3, [pc, #24]	@ (80133bc <HAL_MspInit+0x24>)
 80133a2:	2101      	movs	r1, #1
 80133a4:	430a      	orrs	r2, r1
 80133a6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80133a8:	4b04      	ldr	r3, [pc, #16]	@ (80133bc <HAL_MspInit+0x24>)
 80133aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133ac:	4b03      	ldr	r3, [pc, #12]	@ (80133bc <HAL_MspInit+0x24>)
 80133ae:	2180      	movs	r1, #128	@ 0x80
 80133b0:	0549      	lsls	r1, r1, #21
 80133b2:	430a      	orrs	r2, r1
 80133b4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80133b6:	46c0      	nop			@ (mov r8, r8)
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	40021000 	.word	0x40021000

080133c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80133c4:	46c0      	nop			@ (mov r8, r8)
 80133c6:	e7fd      	b.n	80133c4 <NMI_Handler+0x4>

080133c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80133cc:	46c0      	nop			@ (mov r8, r8)
 80133ce:	e7fd      	b.n	80133cc <HardFault_Handler+0x4>

080133d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80133d4:	46c0      	nop			@ (mov r8, r8)
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80133da:	b580      	push	{r7, lr}
 80133dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80133de:	46c0      	nop			@ (mov r8, r8)
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}

080133e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80133e8:	f001 fa84 	bl	80148f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80133ec:	46c0      	nop			@ (mov r8, r8)
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
	...

080133f4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80133f8:	4b03      	ldr	r3, [pc, #12]	@ (8013408 <RTC_IRQHandler+0x14>)
 80133fa:	0018      	movs	r0, r3
 80133fc:	f009 fb30 	bl	801ca60 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8013400:	46c0      	nop			@ (mov r8, r8)
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	46c0      	nop			@ (mov r8, r8)
 8013408:	2000119c 	.word	0x2000119c

0801340c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8013410:	2380      	movs	r3, #128	@ 0x80
 8013412:	021b      	lsls	r3, r3, #8
 8013414:	0018      	movs	r0, r3
 8013416:	f002 fd0f 	bl	8015e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 801341a:	46c0      	nop			@ (mov r8, r8)
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8013424:	4b05      	ldr	r3, [pc, #20]	@ (801343c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8013426:	0018      	movs	r0, r3
 8013428:	f002 f897 	bl	801555a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 801342c:	4b04      	ldr	r3, [pc, #16]	@ (8013440 <DMA1_Channel2_3_IRQHandler+0x20>)
 801342e:	0018      	movs	r0, r3
 8013430:	f002 f893 	bl	801555a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8013434:	46c0      	nop			@ (mov r8, r8)
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	46c0      	nop			@ (mov r8, r8)
 801343c:	20001028 	.word	0x20001028
 8013440:	20000fe0 	.word	0x20000fe0

08013444 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8013448:	4b07      	ldr	r3, [pc, #28]	@ (8013468 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 801344a:	0018      	movs	r0, r3
 801344c:	f002 f885 	bl	801555a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8013450:	4b06      	ldr	r3, [pc, #24]	@ (801346c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8013452:	0018      	movs	r0, r3
 8013454:	f002 f881 	bl	801555a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8013458:	4b05      	ldr	r3, [pc, #20]	@ (8013470 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 801345a:	0018      	movs	r0, r3
 801345c:	f002 f87d 	bl	801555a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8013460:	46c0      	nop			@ (mov r8, r8)
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	46c0      	nop			@ (mov r8, r8)
 8013468:	200010ac 	.word	0x200010ac
 801346c:	20002458 	.word	0x20002458
 8013470:	200024a0 	.word	0x200024a0

08013474 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8013478:	4b03      	ldr	r3, [pc, #12]	@ (8013488 <USART4_5_IRQHandler+0x14>)
 801347a:	0018      	movs	r0, r3
 801347c:	f00a f9ea 	bl	801d854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8013480:	46c0      	nop			@ (mov r8, r8)
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
 8013486:	46c0      	nop			@ (mov r8, r8)
 8013488:	200023a0 	.word	0x200023a0

0801348c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8013490:	4b09      	ldr	r3, [pc, #36]	@ (80134b8 <I2C1_IRQHandler+0x2c>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	699a      	ldr	r2, [r3, #24]
 8013496:	23e0      	movs	r3, #224	@ 0xe0
 8013498:	00db      	lsls	r3, r3, #3
 801349a:	4013      	ands	r3, r2
 801349c:	d004      	beq.n	80134a8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 801349e:	4b06      	ldr	r3, [pc, #24]	@ (80134b8 <I2C1_IRQHandler+0x2c>)
 80134a0:	0018      	movs	r0, r3
 80134a2:	f003 fc13 	bl	8016ccc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80134a6:	e003      	b.n	80134b0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80134a8:	4b03      	ldr	r3, [pc, #12]	@ (80134b8 <I2C1_IRQHandler+0x2c>)
 80134aa:	0018      	movs	r0, r3
 80134ac:	f003 fbf4 	bl	8016c98 <HAL_I2C_EV_IRQHandler>
}
 80134b0:	46c0      	nop			@ (mov r8, r8)
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	46c0      	nop			@ (mov r8, r8)
 80134b8:	20000f38 	.word	0x20000f38

080134bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80134c0:	4b03      	ldr	r3, [pc, #12]	@ (80134d0 <USART1_IRQHandler+0x14>)
 80134c2:	0018      	movs	r0, r3
 80134c4:	f00a f9c6 	bl	801d854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80134c8:	46c0      	nop			@ (mov r8, r8)
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	46c0      	nop			@ (mov r8, r8)
 80134d0:	200022e8 	.word	0x200022e8

080134d4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80134d8:	4b03      	ldr	r3, [pc, #12]	@ (80134e8 <USB_IRQHandler+0x14>)
 80134da:	0018      	movs	r0, r3
 80134dc:	f006 f90e 	bl	80196fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80134e0:	46c0      	nop			@ (mov r8, r8)
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	46c0      	nop			@ (mov r8, r8)
 80134e8:	200032bc 	.word	0x200032bc

080134ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	af00      	add	r7, sp, #0
  return 1;
 80134f0:	2301      	movs	r3, #1
}
 80134f2:	0018      	movs	r0, r3
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <_kill>:

int _kill(int pid, int sig)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8013502:	f013 f8a7 	bl	8026654 <__errno>
 8013506:	0003      	movs	r3, r0
 8013508:	2216      	movs	r2, #22
 801350a:	601a      	str	r2, [r3, #0]
  return -1;
 801350c:	2301      	movs	r3, #1
 801350e:	425b      	negs	r3, r3
}
 8013510:	0018      	movs	r0, r3
 8013512:	46bd      	mov	sp, r7
 8013514:	b002      	add	sp, #8
 8013516:	bd80      	pop	{r7, pc}

08013518 <_exit>:

void _exit (int status)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013520:	2301      	movs	r3, #1
 8013522:	425a      	negs	r2, r3
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	0011      	movs	r1, r2
 8013528:	0018      	movs	r0, r3
 801352a:	f7ff ffe5 	bl	80134f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 801352e:	46c0      	nop			@ (mov r8, r8)
 8013530:	e7fd      	b.n	801352e <_exit+0x16>

08013532 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b086      	sub	sp, #24
 8013536:	af00      	add	r7, sp, #0
 8013538:	60f8      	str	r0, [r7, #12]
 801353a:	60b9      	str	r1, [r7, #8]
 801353c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801353e:	2300      	movs	r3, #0
 8013540:	617b      	str	r3, [r7, #20]
 8013542:	e00a      	b.n	801355a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013544:	e000      	b.n	8013548 <_read+0x16>
 8013546:	bf00      	nop
 8013548:	0001      	movs	r1, r0
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	1c5a      	adds	r2, r3, #1
 801354e:	60ba      	str	r2, [r7, #8]
 8013550:	b2ca      	uxtb	r2, r1
 8013552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	3301      	adds	r3, #1
 8013558:	617b      	str	r3, [r7, #20]
 801355a:	697a      	ldr	r2, [r7, #20]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	429a      	cmp	r2, r3
 8013560:	dbf0      	blt.n	8013544 <_read+0x12>
  }

  return len;
 8013562:	687b      	ldr	r3, [r7, #4]
}
 8013564:	0018      	movs	r0, r3
 8013566:	46bd      	mov	sp, r7
 8013568:	b006      	add	sp, #24
 801356a:	bd80      	pop	{r7, pc}

0801356c <_close>:
  }
  return len;
}

int _close(int file)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013574:	2301      	movs	r3, #1
 8013576:	425b      	negs	r3, r3
}
 8013578:	0018      	movs	r0, r3
 801357a:	46bd      	mov	sp, r7
 801357c:	b002      	add	sp, #8
 801357e:	bd80      	pop	{r7, pc}

08013580 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	2280      	movs	r2, #128	@ 0x80
 801358e:	0192      	lsls	r2, r2, #6
 8013590:	605a      	str	r2, [r3, #4]
  return 0;
 8013592:	2300      	movs	r3, #0
}
 8013594:	0018      	movs	r0, r3
 8013596:	46bd      	mov	sp, r7
 8013598:	b002      	add	sp, #8
 801359a:	bd80      	pop	{r7, pc}

0801359c <_isatty>:

int _isatty(int file)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80135a4:	2301      	movs	r3, #1
}
 80135a6:	0018      	movs	r0, r3
 80135a8:	46bd      	mov	sp, r7
 80135aa:	b002      	add	sp, #8
 80135ac:	bd80      	pop	{r7, pc}

080135ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b084      	sub	sp, #16
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	60f8      	str	r0, [r7, #12]
 80135b6:	60b9      	str	r1, [r7, #8]
 80135b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80135ba:	2300      	movs	r3, #0
}
 80135bc:	0018      	movs	r0, r3
 80135be:	46bd      	mov	sp, r7
 80135c0:	b004      	add	sp, #16
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80135cc:	4a14      	ldr	r2, [pc, #80]	@ (8013620 <_sbrk+0x5c>)
 80135ce:	4b15      	ldr	r3, [pc, #84]	@ (8013624 <_sbrk+0x60>)
 80135d0:	1ad3      	subs	r3, r2, r3
 80135d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80135d8:	4b13      	ldr	r3, [pc, #76]	@ (8013628 <_sbrk+0x64>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d102      	bne.n	80135e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80135e0:	4b11      	ldr	r3, [pc, #68]	@ (8013628 <_sbrk+0x64>)
 80135e2:	4a12      	ldr	r2, [pc, #72]	@ (801362c <_sbrk+0x68>)
 80135e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80135e6:	4b10      	ldr	r3, [pc, #64]	@ (8013628 <_sbrk+0x64>)
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	18d3      	adds	r3, r2, r3
 80135ee:	693a      	ldr	r2, [r7, #16]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d207      	bcs.n	8013604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80135f4:	f013 f82e 	bl	8026654 <__errno>
 80135f8:	0003      	movs	r3, r0
 80135fa:	220c      	movs	r2, #12
 80135fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80135fe:	2301      	movs	r3, #1
 8013600:	425b      	negs	r3, r3
 8013602:	e009      	b.n	8013618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013604:	4b08      	ldr	r3, [pc, #32]	@ (8013628 <_sbrk+0x64>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801360a:	4b07      	ldr	r3, [pc, #28]	@ (8013628 <_sbrk+0x64>)
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	18d2      	adds	r2, r2, r3
 8013612:	4b05      	ldr	r3, [pc, #20]	@ (8013628 <_sbrk+0x64>)
 8013614:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8013616:	68fb      	ldr	r3, [r7, #12]
}
 8013618:	0018      	movs	r0, r3
 801361a:	46bd      	mov	sp, r7
 801361c:	b006      	add	sp, #24
 801361e:	bd80      	pop	{r7, pc}
 8013620:	20005000 	.word	0x20005000
 8013624:	00000400 	.word	0x00000400
 8013628:	2000216c 	.word	0x2000216c
 801362c:	20003920 	.word	0x20003920

08013630 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013634:	46c0      	nop			@ (mov r8, r8)
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}
	...

0801363c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013642:	2310      	movs	r3, #16
 8013644:	18fb      	adds	r3, r7, r3
 8013646:	0018      	movs	r0, r3
 8013648:	2308      	movs	r3, #8
 801364a:	001a      	movs	r2, r3
 801364c:	2100      	movs	r1, #0
 801364e:	f012 ff5d 	bl	802650c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013652:	003b      	movs	r3, r7
 8013654:	0018      	movs	r0, r3
 8013656:	2310      	movs	r3, #16
 8013658:	001a      	movs	r2, r3
 801365a:	2100      	movs	r1, #0
 801365c:	f012 ff56 	bl	802650c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013660:	4b2e      	ldr	r3, [pc, #184]	@ (801371c <MX_TIM2_Init+0xe0>)
 8013662:	2280      	movs	r2, #128	@ 0x80
 8013664:	05d2      	lsls	r2, r2, #23
 8013666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8013668:	4b2c      	ldr	r3, [pc, #176]	@ (801371c <MX_TIM2_Init+0xe0>)
 801366a:	2200      	movs	r2, #0
 801366c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801366e:	4b2b      	ldr	r3, [pc, #172]	@ (801371c <MX_TIM2_Init+0xe0>)
 8013670:	2200      	movs	r2, #0
 8013672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8013674:	4b29      	ldr	r3, [pc, #164]	@ (801371c <MX_TIM2_Init+0xe0>)
 8013676:	4a2a      	ldr	r2, [pc, #168]	@ (8013720 <MX_TIM2_Init+0xe4>)
 8013678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801367a:	4b28      	ldr	r3, [pc, #160]	@ (801371c <MX_TIM2_Init+0xe0>)
 801367c:	2200      	movs	r2, #0
 801367e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013680:	4b26      	ldr	r3, [pc, #152]	@ (801371c <MX_TIM2_Init+0xe0>)
 8013682:	2200      	movs	r2, #0
 8013684:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8013686:	4b25      	ldr	r3, [pc, #148]	@ (801371c <MX_TIM2_Init+0xe0>)
 8013688:	0018      	movs	r0, r3
 801368a:	f009 faf7 	bl	801cc7c <HAL_TIM_PWM_Init>
 801368e:	1e03      	subs	r3, r0, #0
 8013690:	d001      	beq.n	8013696 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8013692:	f7f9 fe75 	bl	800d380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013696:	2110      	movs	r1, #16
 8013698:	187b      	adds	r3, r7, r1
 801369a:	2200      	movs	r2, #0
 801369c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801369e:	187b      	adds	r3, r7, r1
 80136a0:	2200      	movs	r2, #0
 80136a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80136a4:	187a      	adds	r2, r7, r1
 80136a6:	4b1d      	ldr	r3, [pc, #116]	@ (801371c <MX_TIM2_Init+0xe0>)
 80136a8:	0011      	movs	r1, r2
 80136aa:	0018      	movs	r0, r3
 80136ac:	f009 fe04 	bl	801d2b8 <HAL_TIMEx_MasterConfigSynchronization>
 80136b0:	1e03      	subs	r3, r0, #0
 80136b2:	d001      	beq.n	80136b8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80136b4:	f7f9 fe64 	bl	800d380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80136b8:	003b      	movs	r3, r7
 80136ba:	2260      	movs	r2, #96	@ 0x60
 80136bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80136be:	003b      	movs	r3, r7
 80136c0:	2200      	movs	r2, #0
 80136c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80136c4:	003b      	movs	r3, r7
 80136c6:	2200      	movs	r2, #0
 80136c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80136ca:	003b      	movs	r3, r7
 80136cc:	2200      	movs	r2, #0
 80136ce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80136d0:	0039      	movs	r1, r7
 80136d2:	4b12      	ldr	r3, [pc, #72]	@ (801371c <MX_TIM2_Init+0xe0>)
 80136d4:	2200      	movs	r2, #0
 80136d6:	0018      	movs	r0, r3
 80136d8:	f009 fba2 	bl	801ce20 <HAL_TIM_PWM_ConfigChannel>
 80136dc:	1e03      	subs	r3, r0, #0
 80136de:	d001      	beq.n	80136e4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80136e0:	f7f9 fe4e 	bl	800d380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80136e4:	0039      	movs	r1, r7
 80136e6:	4b0d      	ldr	r3, [pc, #52]	@ (801371c <MX_TIM2_Init+0xe0>)
 80136e8:	2208      	movs	r2, #8
 80136ea:	0018      	movs	r0, r3
 80136ec:	f009 fb98 	bl	801ce20 <HAL_TIM_PWM_ConfigChannel>
 80136f0:	1e03      	subs	r3, r0, #0
 80136f2:	d001      	beq.n	80136f8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80136f4:	f7f9 fe44 	bl	800d380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80136f8:	0039      	movs	r1, r7
 80136fa:	4b08      	ldr	r3, [pc, #32]	@ (801371c <MX_TIM2_Init+0xe0>)
 80136fc:	220c      	movs	r2, #12
 80136fe:	0018      	movs	r0, r3
 8013700:	f009 fb8e 	bl	801ce20 <HAL_TIM_PWM_ConfigChannel>
 8013704:	1e03      	subs	r3, r0, #0
 8013706:	d001      	beq.n	801370c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8013708:	f7f9 fe3a 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 801370c:	4b03      	ldr	r3, [pc, #12]	@ (801371c <MX_TIM2_Init+0xe0>)
 801370e:	0018      	movs	r0, r3
 8013710:	f000 f8fe 	bl	8013910 <HAL_TIM_MspPostInit>

}
 8013714:	46c0      	nop			@ (mov r8, r8)
 8013716:	46bd      	mov	sp, r7
 8013718:	b006      	add	sp, #24
 801371a:	bd80      	pop	{r7, pc}
 801371c:	20002170 	.word	0x20002170
 8013720:	0000ffff 	.word	0x0000ffff

08013724 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b086      	sub	sp, #24
 8013728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801372a:	2310      	movs	r3, #16
 801372c:	18fb      	adds	r3, r7, r3
 801372e:	0018      	movs	r0, r3
 8013730:	2308      	movs	r3, #8
 8013732:	001a      	movs	r2, r3
 8013734:	2100      	movs	r1, #0
 8013736:	f012 fee9 	bl	802650c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801373a:	003b      	movs	r3, r7
 801373c:	0018      	movs	r0, r3
 801373e:	2310      	movs	r3, #16
 8013740:	001a      	movs	r2, r3
 8013742:	2100      	movs	r1, #0
 8013744:	f012 fee2 	bl	802650c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013748:	4b32      	ldr	r3, [pc, #200]	@ (8013814 <MX_TIM3_Init+0xf0>)
 801374a:	4a33      	ldr	r2, [pc, #204]	@ (8013818 <MX_TIM3_Init+0xf4>)
 801374c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801374e:	4b31      	ldr	r3, [pc, #196]	@ (8013814 <MX_TIM3_Init+0xf0>)
 8013750:	2200      	movs	r2, #0
 8013752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013754:	4b2f      	ldr	r3, [pc, #188]	@ (8013814 <MX_TIM3_Init+0xf0>)
 8013756:	2200      	movs	r2, #0
 8013758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801375a:	4b2e      	ldr	r3, [pc, #184]	@ (8013814 <MX_TIM3_Init+0xf0>)
 801375c:	4a2f      	ldr	r2, [pc, #188]	@ (801381c <MX_TIM3_Init+0xf8>)
 801375e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013760:	4b2c      	ldr	r3, [pc, #176]	@ (8013814 <MX_TIM3_Init+0xf0>)
 8013762:	2200      	movs	r2, #0
 8013764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013766:	4b2b      	ldr	r3, [pc, #172]	@ (8013814 <MX_TIM3_Init+0xf0>)
 8013768:	2200      	movs	r2, #0
 801376a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801376c:	4b29      	ldr	r3, [pc, #164]	@ (8013814 <MX_TIM3_Init+0xf0>)
 801376e:	0018      	movs	r0, r3
 8013770:	f009 fa84 	bl	801cc7c <HAL_TIM_PWM_Init>
 8013774:	1e03      	subs	r3, r0, #0
 8013776:	d001      	beq.n	801377c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8013778:	f7f9 fe02 	bl	800d380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801377c:	2110      	movs	r1, #16
 801377e:	187b      	adds	r3, r7, r1
 8013780:	2200      	movs	r2, #0
 8013782:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013784:	187b      	adds	r3, r7, r1
 8013786:	2200      	movs	r2, #0
 8013788:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801378a:	187a      	adds	r2, r7, r1
 801378c:	4b21      	ldr	r3, [pc, #132]	@ (8013814 <MX_TIM3_Init+0xf0>)
 801378e:	0011      	movs	r1, r2
 8013790:	0018      	movs	r0, r3
 8013792:	f009 fd91 	bl	801d2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8013796:	1e03      	subs	r3, r0, #0
 8013798:	d001      	beq.n	801379e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 801379a:	f7f9 fdf1 	bl	800d380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801379e:	003b      	movs	r3, r7
 80137a0:	2260      	movs	r2, #96	@ 0x60
 80137a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80137a4:	003b      	movs	r3, r7
 80137a6:	2200      	movs	r2, #0
 80137a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80137aa:	003b      	movs	r3, r7
 80137ac:	2200      	movs	r2, #0
 80137ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80137b0:	003b      	movs	r3, r7
 80137b2:	2200      	movs	r2, #0
 80137b4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80137b6:	0039      	movs	r1, r7
 80137b8:	4b16      	ldr	r3, [pc, #88]	@ (8013814 <MX_TIM3_Init+0xf0>)
 80137ba:	2200      	movs	r2, #0
 80137bc:	0018      	movs	r0, r3
 80137be:	f009 fb2f 	bl	801ce20 <HAL_TIM_PWM_ConfigChannel>
 80137c2:	1e03      	subs	r3, r0, #0
 80137c4:	d001      	beq.n	80137ca <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80137c6:	f7f9 fddb 	bl	800d380 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80137ca:	4b12      	ldr	r3, [pc, #72]	@ (8013814 <MX_TIM3_Init+0xf0>)
 80137cc:	2104      	movs	r1, #4
 80137ce:	0018      	movs	r0, r3
 80137d0:	f009 fdd0 	bl	801d374 <HAL_TIMEx_RemapConfig>
 80137d4:	1e03      	subs	r3, r0, #0
 80137d6:	d001      	beq.n	80137dc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80137d8:	f7f9 fdd2 	bl	800d380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80137dc:	0039      	movs	r1, r7
 80137de:	4b0d      	ldr	r3, [pc, #52]	@ (8013814 <MX_TIM3_Init+0xf0>)
 80137e0:	2204      	movs	r2, #4
 80137e2:	0018      	movs	r0, r3
 80137e4:	f009 fb1c 	bl	801ce20 <HAL_TIM_PWM_ConfigChannel>
 80137e8:	1e03      	subs	r3, r0, #0
 80137ea:	d001      	beq.n	80137f0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80137ec:	f7f9 fdc8 	bl	800d380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80137f0:	0039      	movs	r1, r7
 80137f2:	4b08      	ldr	r3, [pc, #32]	@ (8013814 <MX_TIM3_Init+0xf0>)
 80137f4:	2208      	movs	r2, #8
 80137f6:	0018      	movs	r0, r3
 80137f8:	f009 fb12 	bl	801ce20 <HAL_TIM_PWM_ConfigChannel>
 80137fc:	1e03      	subs	r3, r0, #0
 80137fe:	d001      	beq.n	8013804 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8013800:	f7f9 fdbe 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013804:	4b03      	ldr	r3, [pc, #12]	@ (8013814 <MX_TIM3_Init+0xf0>)
 8013806:	0018      	movs	r0, r3
 8013808:	f000 f882 	bl	8013910 <HAL_TIM_MspPostInit>

}
 801380c:	46c0      	nop			@ (mov r8, r8)
 801380e:	46bd      	mov	sp, r7
 8013810:	b006      	add	sp, #24
 8013812:	bd80      	pop	{r7, pc}
 8013814:	200021b0 	.word	0x200021b0
 8013818:	40000400 	.word	0x40000400
 801381c:	0000ffff 	.word	0x0000ffff

08013820 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013826:	003b      	movs	r3, r7
 8013828:	0018      	movs	r0, r3
 801382a:	2308      	movs	r3, #8
 801382c:	001a      	movs	r2, r3
 801382e:	2100      	movs	r1, #0
 8013830:	f012 fe6c 	bl	802650c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8013834:	4b15      	ldr	r3, [pc, #84]	@ (801388c <MX_TIM6_Init+0x6c>)
 8013836:	4a16      	ldr	r2, [pc, #88]	@ (8013890 <MX_TIM6_Init+0x70>)
 8013838:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 801383a:	4b14      	ldr	r3, [pc, #80]	@ (801388c <MX_TIM6_Init+0x6c>)
 801383c:	220a      	movs	r2, #10
 801383e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013840:	4b12      	ldr	r3, [pc, #72]	@ (801388c <MX_TIM6_Init+0x6c>)
 8013842:	2200      	movs	r2, #0
 8013844:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8013846:	4b11      	ldr	r3, [pc, #68]	@ (801388c <MX_TIM6_Init+0x6c>)
 8013848:	4a12      	ldr	r2, [pc, #72]	@ (8013894 <MX_TIM6_Init+0x74>)
 801384a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801384c:	4b0f      	ldr	r3, [pc, #60]	@ (801388c <MX_TIM6_Init+0x6c>)
 801384e:	2200      	movs	r2, #0
 8013850:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8013852:	4b0e      	ldr	r3, [pc, #56]	@ (801388c <MX_TIM6_Init+0x6c>)
 8013854:	0018      	movs	r0, r3
 8013856:	f009 f969 	bl	801cb2c <HAL_TIM_Base_Init>
 801385a:	1e03      	subs	r3, r0, #0
 801385c:	d001      	beq.n	8013862 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 801385e:	f7f9 fd8f 	bl	800d380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013862:	003b      	movs	r3, r7
 8013864:	2200      	movs	r2, #0
 8013866:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013868:	003b      	movs	r3, r7
 801386a:	2200      	movs	r2, #0
 801386c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801386e:	003a      	movs	r2, r7
 8013870:	4b06      	ldr	r3, [pc, #24]	@ (801388c <MX_TIM6_Init+0x6c>)
 8013872:	0011      	movs	r1, r2
 8013874:	0018      	movs	r0, r3
 8013876:	f009 fd1f 	bl	801d2b8 <HAL_TIMEx_MasterConfigSynchronization>
 801387a:	1e03      	subs	r3, r0, #0
 801387c:	d001      	beq.n	8013882 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 801387e:	f7f9 fd7f 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8013882:	46c0      	nop			@ (mov r8, r8)
 8013884:	46bd      	mov	sp, r7
 8013886:	b002      	add	sp, #8
 8013888:	bd80      	pop	{r7, pc}
 801388a:	46c0      	nop			@ (mov r8, r8)
 801388c:	200021f0 	.word	0x200021f0
 8013890:	40001000 	.word	0x40001000
 8013894:	0000ffff 	.word	0x0000ffff

08013898 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	2380      	movs	r3, #128	@ 0x80
 80138a6:	05db      	lsls	r3, r3, #23
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d106      	bne.n	80138ba <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80138ac:	4b0a      	ldr	r3, [pc, #40]	@ (80138d8 <HAL_TIM_PWM_MspInit+0x40>)
 80138ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138b0:	4b09      	ldr	r3, [pc, #36]	@ (80138d8 <HAL_TIM_PWM_MspInit+0x40>)
 80138b2:	2101      	movs	r1, #1
 80138b4:	430a      	orrs	r2, r1
 80138b6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80138b8:	e00a      	b.n	80138d0 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	4a07      	ldr	r2, [pc, #28]	@ (80138dc <HAL_TIM_PWM_MspInit+0x44>)
 80138c0:	4293      	cmp	r3, r2
 80138c2:	d105      	bne.n	80138d0 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80138c4:	4b04      	ldr	r3, [pc, #16]	@ (80138d8 <HAL_TIM_PWM_MspInit+0x40>)
 80138c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138c8:	4b03      	ldr	r3, [pc, #12]	@ (80138d8 <HAL_TIM_PWM_MspInit+0x40>)
 80138ca:	2102      	movs	r1, #2
 80138cc:	430a      	orrs	r2, r1
 80138ce:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80138d0:	46c0      	nop			@ (mov r8, r8)
 80138d2:	46bd      	mov	sp, r7
 80138d4:	b002      	add	sp, #8
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	40021000 	.word	0x40021000
 80138dc:	40000400 	.word	0x40000400

080138e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	4a06      	ldr	r2, [pc, #24]	@ (8013908 <HAL_TIM_Base_MspInit+0x28>)
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d105      	bne.n	80138fe <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80138f2:	4b06      	ldr	r3, [pc, #24]	@ (801390c <HAL_TIM_Base_MspInit+0x2c>)
 80138f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138f6:	4b05      	ldr	r3, [pc, #20]	@ (801390c <HAL_TIM_Base_MspInit+0x2c>)
 80138f8:	2110      	movs	r1, #16
 80138fa:	430a      	orrs	r2, r1
 80138fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80138fe:	46c0      	nop			@ (mov r8, r8)
 8013900:	46bd      	mov	sp, r7
 8013902:	b002      	add	sp, #8
 8013904:	bd80      	pop	{r7, pc}
 8013906:	46c0      	nop			@ (mov r8, r8)
 8013908:	40001000 	.word	0x40001000
 801390c:	40021000 	.word	0x40021000

08013910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013910:	b590      	push	{r4, r7, lr}
 8013912:	b08b      	sub	sp, #44	@ 0x2c
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013918:	2414      	movs	r4, #20
 801391a:	193b      	adds	r3, r7, r4
 801391c:	0018      	movs	r0, r3
 801391e:	2314      	movs	r3, #20
 8013920:	001a      	movs	r2, r3
 8013922:	2100      	movs	r1, #0
 8013924:	f012 fdf2 	bl	802650c <memset>
  if(timHandle->Instance==TIM2)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681a      	ldr	r2, [r3, #0]
 801392c:	2380      	movs	r3, #128	@ 0x80
 801392e:	05db      	lsls	r3, r3, #23
 8013930:	429a      	cmp	r2, r3
 8013932:	d123      	bne.n	801397c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013934:	4b27      	ldr	r3, [pc, #156]	@ (80139d4 <HAL_TIM_MspPostInit+0xc4>)
 8013936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013938:	4b26      	ldr	r3, [pc, #152]	@ (80139d4 <HAL_TIM_MspPostInit+0xc4>)
 801393a:	2101      	movs	r1, #1
 801393c:	430a      	orrs	r2, r1
 801393e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013940:	4b24      	ldr	r3, [pc, #144]	@ (80139d4 <HAL_TIM_MspPostInit+0xc4>)
 8013942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013944:	2201      	movs	r2, #1
 8013946:	4013      	ands	r3, r2
 8013948:	613b      	str	r3, [r7, #16]
 801394a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 801394c:	0021      	movs	r1, r4
 801394e:	187b      	adds	r3, r7, r1
 8013950:	220d      	movs	r2, #13
 8013952:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013954:	187b      	adds	r3, r7, r1
 8013956:	2202      	movs	r2, #2
 8013958:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801395a:	187b      	adds	r3, r7, r1
 801395c:	2200      	movs	r2, #0
 801395e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013960:	187b      	adds	r3, r7, r1
 8013962:	2200      	movs	r2, #0
 8013964:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8013966:	187b      	adds	r3, r7, r1
 8013968:	2202      	movs	r2, #2
 801396a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801396c:	187a      	adds	r2, r7, r1
 801396e:	23a0      	movs	r3, #160	@ 0xa0
 8013970:	05db      	lsls	r3, r3, #23
 8013972:	0011      	movs	r1, r2
 8013974:	0018      	movs	r0, r3
 8013976:	f002 f8a7 	bl	8015ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801397a:	e027      	b.n	80139cc <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4a15      	ldr	r2, [pc, #84]	@ (80139d8 <HAL_TIM_MspPostInit+0xc8>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d122      	bne.n	80139cc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013986:	4b13      	ldr	r3, [pc, #76]	@ (80139d4 <HAL_TIM_MspPostInit+0xc4>)
 8013988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801398a:	4b12      	ldr	r3, [pc, #72]	@ (80139d4 <HAL_TIM_MspPostInit+0xc4>)
 801398c:	2104      	movs	r1, #4
 801398e:	430a      	orrs	r2, r1
 8013990:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013992:	4b10      	ldr	r3, [pc, #64]	@ (80139d4 <HAL_TIM_MspPostInit+0xc4>)
 8013994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013996:	2204      	movs	r2, #4
 8013998:	4013      	ands	r3, r2
 801399a:	60fb      	str	r3, [r7, #12]
 801399c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 801399e:	2114      	movs	r1, #20
 80139a0:	187b      	adds	r3, r7, r1
 80139a2:	22e0      	movs	r2, #224	@ 0xe0
 80139a4:	0052      	lsls	r2, r2, #1
 80139a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139a8:	187b      	adds	r3, r7, r1
 80139aa:	2202      	movs	r2, #2
 80139ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139ae:	187b      	adds	r3, r7, r1
 80139b0:	2200      	movs	r2, #0
 80139b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80139b4:	187b      	adds	r3, r7, r1
 80139b6:	2200      	movs	r2, #0
 80139b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80139ba:	187b      	adds	r3, r7, r1
 80139bc:	2202      	movs	r2, #2
 80139be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80139c0:	187b      	adds	r3, r7, r1
 80139c2:	4a06      	ldr	r2, [pc, #24]	@ (80139dc <HAL_TIM_MspPostInit+0xcc>)
 80139c4:	0019      	movs	r1, r3
 80139c6:	0010      	movs	r0, r2
 80139c8:	f002 f87e 	bl	8015ac8 <HAL_GPIO_Init>
}
 80139cc:	46c0      	nop			@ (mov r8, r8)
 80139ce:	46bd      	mov	sp, r7
 80139d0:	b00b      	add	sp, #44	@ 0x2c
 80139d2:	bd90      	pop	{r4, r7, pc}
 80139d4:	40021000 	.word	0x40021000
 80139d8:	40000400 	.word	0x40000400
 80139dc:	50000800 	.word	0x50000800

080139e0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80139e4:	4b17      	ldr	r3, [pc, #92]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 80139e6:	4a18      	ldr	r2, [pc, #96]	@ (8013a48 <MX_LPUART1_UART_Init+0x68>)
 80139e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80139ea:	4b16      	ldr	r3, [pc, #88]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 80139ec:	22e1      	movs	r2, #225	@ 0xe1
 80139ee:	0252      	lsls	r2, r2, #9
 80139f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80139f2:	4b14      	ldr	r3, [pc, #80]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 80139f4:	2200      	movs	r2, #0
 80139f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80139f8:	4b12      	ldr	r3, [pc, #72]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 80139fa:	2200      	movs	r2, #0
 80139fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80139fe:	4b11      	ldr	r3, [pc, #68]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a00:	2200      	movs	r2, #0
 8013a02:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8013a04:	4b0f      	ldr	r3, [pc, #60]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a06:	220c      	movs	r2, #12
 8013a08:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a10:	4b0c      	ldr	r3, [pc, #48]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8013a16:	4b0b      	ldr	r3, [pc, #44]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a18:	2218      	movs	r2, #24
 8013a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013a1c:	4b09      	ldr	r3, [pc, #36]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a1e:	2280      	movs	r2, #128	@ 0x80
 8013a20:	0212      	lsls	r2, r2, #8
 8013a22:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8013a24:	4b07      	ldr	r3, [pc, #28]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a26:	2280      	movs	r2, #128	@ 0x80
 8013a28:	0152      	lsls	r2, r2, #5
 8013a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013a2c:	4b05      	ldr	r3, [pc, #20]	@ (8013a44 <MX_LPUART1_UART_Init+0x64>)
 8013a2e:	0018      	movs	r0, r3
 8013a30:	f009 fcbe 	bl	801d3b0 <HAL_UART_Init>
 8013a34:	1e03      	subs	r3, r0, #0
 8013a36:	d001      	beq.n	8013a3c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013a38:	f7f9 fca2 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013a3c:	46c0      	nop			@ (mov r8, r8)
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	46c0      	nop			@ (mov r8, r8)
 8013a44:	20002230 	.word	0x20002230
 8013a48:	40004800 	.word	0x40004800

08013a4c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013a50:	4b14      	ldr	r3, [pc, #80]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a52:	4a15      	ldr	r2, [pc, #84]	@ (8013aa8 <MX_USART1_UART_Init+0x5c>)
 8013a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013a56:	4b13      	ldr	r3, [pc, #76]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a58:	22e1      	movs	r2, #225	@ 0xe1
 8013a5a:	0252      	lsls	r2, r2, #9
 8013a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a5e:	4b11      	ldr	r3, [pc, #68]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a60:	2200      	movs	r2, #0
 8013a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013a64:	4b0f      	ldr	r3, [pc, #60]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a66:	2200      	movs	r2, #0
 8013a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013a70:	4b0c      	ldr	r3, [pc, #48]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a72:	220c      	movs	r2, #12
 8013a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a76:	4b0b      	ldr	r3, [pc, #44]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a78:	2200      	movs	r2, #0
 8013a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a7c:	4b09      	ldr	r3, [pc, #36]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a7e:	2200      	movs	r2, #0
 8013a80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a82:	4b08      	ldr	r3, [pc, #32]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a84:	2200      	movs	r2, #0
 8013a86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013a88:	4b06      	ldr	r3, [pc, #24]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013a8e:	4b05      	ldr	r3, [pc, #20]	@ (8013aa4 <MX_USART1_UART_Init+0x58>)
 8013a90:	0018      	movs	r0, r3
 8013a92:	f009 fc8d 	bl	801d3b0 <HAL_UART_Init>
 8013a96:	1e03      	subs	r3, r0, #0
 8013a98:	d001      	beq.n	8013a9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013a9a:	f7f9 fc71 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013a9e:	46c0      	nop			@ (mov r8, r8)
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	200022e8 	.word	0x200022e8
 8013aa8:	40013800 	.word	0x40013800

08013aac <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013ab0:	4b14      	ldr	r3, [pc, #80]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ab2:	4a15      	ldr	r2, [pc, #84]	@ (8013b08 <MX_USART4_UART_Init+0x5c>)
 8013ab4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013ab6:	4b13      	ldr	r3, [pc, #76]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ab8:	22e1      	movs	r2, #225	@ 0xe1
 8013aba:	0252      	lsls	r2, r2, #9
 8013abc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013abe:	4b11      	ldr	r3, [pc, #68]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013aca:	4b0e      	ldr	r3, [pc, #56]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013acc:	2200      	movs	r2, #0
 8013ace:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ad2:	220c      	movs	r2, #12
 8013ad4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ad8:	2200      	movs	r2, #0
 8013ada:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013adc:	4b09      	ldr	r3, [pc, #36]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ade:	2200      	movs	r2, #0
 8013ae0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013ae2:	4b08      	ldr	r3, [pc, #32]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013ae8:	4b06      	ldr	r3, [pc, #24]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013aea:	2200      	movs	r2, #0
 8013aec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013aee:	4b05      	ldr	r3, [pc, #20]	@ (8013b04 <MX_USART4_UART_Init+0x58>)
 8013af0:	0018      	movs	r0, r3
 8013af2:	f009 fc5d 	bl	801d3b0 <HAL_UART_Init>
 8013af6:	1e03      	subs	r3, r0, #0
 8013af8:	d001      	beq.n	8013afe <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8013afa:	f7f9 fc41 	bl	800d380 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013afe:	46c0      	nop			@ (mov r8, r8)
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	200023a0 	.word	0x200023a0
 8013b08:	40004c00 	.word	0x40004c00

08013b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013b0c:	b590      	push	{r4, r7, lr}
 8013b0e:	b08d      	sub	sp, #52	@ 0x34
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b14:	241c      	movs	r4, #28
 8013b16:	193b      	adds	r3, r7, r4
 8013b18:	0018      	movs	r0, r3
 8013b1a:	2314      	movs	r3, #20
 8013b1c:	001a      	movs	r2, r3
 8013b1e:	2100      	movs	r1, #0
 8013b20:	f012 fcf4 	bl	802650c <memset>
  if(uartHandle->Instance==LPUART1)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	4a8b      	ldr	r2, [pc, #556]	@ (8013d58 <HAL_UART_MspInit+0x24c>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d129      	bne.n	8013b82 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b32:	4b8a      	ldr	r3, [pc, #552]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b34:	2180      	movs	r1, #128	@ 0x80
 8013b36:	02c9      	lsls	r1, r1, #11
 8013b38:	430a      	orrs	r2, r1
 8013b3a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013b3c:	4b87      	ldr	r3, [pc, #540]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b40:	4b86      	ldr	r3, [pc, #536]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b42:	2104      	movs	r1, #4
 8013b44:	430a      	orrs	r2, r1
 8013b46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b48:	4b84      	ldr	r3, [pc, #528]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b4c:	2204      	movs	r2, #4
 8013b4e:	4013      	ands	r3, r2
 8013b50:	61bb      	str	r3, [r7, #24]
 8013b52:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013b54:	0021      	movs	r1, r4
 8013b56:	187b      	adds	r3, r7, r1
 8013b58:	2203      	movs	r2, #3
 8013b5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b5c:	187b      	adds	r3, r7, r1
 8013b5e:	2202      	movs	r2, #2
 8013b60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b62:	187b      	adds	r3, r7, r1
 8013b64:	2200      	movs	r2, #0
 8013b66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b68:	187b      	adds	r3, r7, r1
 8013b6a:	2203      	movs	r2, #3
 8013b6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013b6e:	187b      	adds	r3, r7, r1
 8013b70:	2206      	movs	r2, #6
 8013b72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013b74:	187b      	adds	r3, r7, r1
 8013b76:	4a7a      	ldr	r2, [pc, #488]	@ (8013d60 <HAL_UART_MspInit+0x254>)
 8013b78:	0019      	movs	r1, r3
 8013b7a:	0010      	movs	r0, r2
 8013b7c:	f001 ffa4 	bl	8015ac8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013b80:	e0e5      	b.n	8013d4e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	4a77      	ldr	r2, [pc, #476]	@ (8013d64 <HAL_UART_MspInit+0x258>)
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	d133      	bne.n	8013bf4 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013b8c:	4b73      	ldr	r3, [pc, #460]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b90:	4b72      	ldr	r3, [pc, #456]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b92:	2180      	movs	r1, #128	@ 0x80
 8013b94:	01c9      	lsls	r1, r1, #7
 8013b96:	430a      	orrs	r2, r1
 8013b98:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b9a:	4b70      	ldr	r3, [pc, #448]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013ba0:	2101      	movs	r1, #1
 8013ba2:	430a      	orrs	r2, r1
 8013ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013baa:	2201      	movs	r2, #1
 8013bac:	4013      	ands	r3, r2
 8013bae:	617b      	str	r3, [r7, #20]
 8013bb0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013bb2:	211c      	movs	r1, #28
 8013bb4:	187b      	adds	r3, r7, r1
 8013bb6:	22c0      	movs	r2, #192	@ 0xc0
 8013bb8:	00d2      	lsls	r2, r2, #3
 8013bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bbc:	187b      	adds	r3, r7, r1
 8013bbe:	2202      	movs	r2, #2
 8013bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bc2:	187b      	adds	r3, r7, r1
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bc8:	187b      	adds	r3, r7, r1
 8013bca:	2203      	movs	r2, #3
 8013bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013bce:	187b      	adds	r3, r7, r1
 8013bd0:	2204      	movs	r2, #4
 8013bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013bd4:	187a      	adds	r2, r7, r1
 8013bd6:	23a0      	movs	r3, #160	@ 0xa0
 8013bd8:	05db      	lsls	r3, r3, #23
 8013bda:	0011      	movs	r1, r2
 8013bdc:	0018      	movs	r0, r3
 8013bde:	f001 ff73 	bl	8015ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013be2:	2200      	movs	r2, #0
 8013be4:	2100      	movs	r1, #0
 8013be6:	201b      	movs	r0, #27
 8013be8:	f001 fb1c 	bl	8015224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013bec:	201b      	movs	r0, #27
 8013bee:	f001 fb2e 	bl	801524e <HAL_NVIC_EnableIRQ>
}
 8013bf2:	e0ac      	b.n	8013d4e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	4a5b      	ldr	r2, [pc, #364]	@ (8013d68 <HAL_UART_MspInit+0x25c>)
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	d000      	beq.n	8013c00 <HAL_UART_MspInit+0xf4>
 8013bfe:	e0a6      	b.n	8013d4e <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013c00:	4b56      	ldr	r3, [pc, #344]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c04:	4b55      	ldr	r3, [pc, #340]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c06:	2180      	movs	r1, #128	@ 0x80
 8013c08:	0309      	lsls	r1, r1, #12
 8013c0a:	430a      	orrs	r2, r1
 8013c0c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c0e:	4b53      	ldr	r3, [pc, #332]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c12:	4b52      	ldr	r3, [pc, #328]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c14:	2101      	movs	r1, #1
 8013c16:	430a      	orrs	r2, r1
 8013c18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c1a:	4b50      	ldr	r3, [pc, #320]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c1e:	2201      	movs	r2, #1
 8013c20:	4013      	ands	r3, r2
 8013c22:	613b      	str	r3, [r7, #16]
 8013c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013c26:	4b4d      	ldr	r3, [pc, #308]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c2c:	2104      	movs	r1, #4
 8013c2e:	430a      	orrs	r2, r1
 8013c30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c32:	4b4a      	ldr	r3, [pc, #296]	@ (8013d5c <HAL_UART_MspInit+0x250>)
 8013c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c36:	2204      	movs	r2, #4
 8013c38:	4013      	ands	r3, r2
 8013c3a:	60fb      	str	r3, [r7, #12]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013c3e:	241c      	movs	r4, #28
 8013c40:	193b      	adds	r3, r7, r4
 8013c42:	2202      	movs	r2, #2
 8013c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c46:	193b      	adds	r3, r7, r4
 8013c48:	2202      	movs	r2, #2
 8013c4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c4c:	193b      	adds	r3, r7, r4
 8013c4e:	2200      	movs	r2, #0
 8013c50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c52:	193b      	adds	r3, r7, r4
 8013c54:	2203      	movs	r2, #3
 8013c56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013c58:	193b      	adds	r3, r7, r4
 8013c5a:	2206      	movs	r2, #6
 8013c5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c5e:	193a      	adds	r2, r7, r4
 8013c60:	23a0      	movs	r3, #160	@ 0xa0
 8013c62:	05db      	lsls	r3, r3, #23
 8013c64:	0011      	movs	r1, r2
 8013c66:	0018      	movs	r0, r3
 8013c68:	f001 ff2e 	bl	8015ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013c6c:	0021      	movs	r1, r4
 8013c6e:	187b      	adds	r3, r7, r1
 8013c70:	2280      	movs	r2, #128	@ 0x80
 8013c72:	00d2      	lsls	r2, r2, #3
 8013c74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c76:	187b      	adds	r3, r7, r1
 8013c78:	2202      	movs	r2, #2
 8013c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c7c:	187b      	adds	r3, r7, r1
 8013c7e:	2200      	movs	r2, #0
 8013c80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c82:	187b      	adds	r3, r7, r1
 8013c84:	2203      	movs	r2, #3
 8013c86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013c88:	187b      	adds	r3, r7, r1
 8013c8a:	2206      	movs	r2, #6
 8013c8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c8e:	187b      	adds	r3, r7, r1
 8013c90:	4a33      	ldr	r2, [pc, #204]	@ (8013d60 <HAL_UART_MspInit+0x254>)
 8013c92:	0019      	movs	r1, r3
 8013c94:	0010      	movs	r0, r2
 8013c96:	f001 ff17 	bl	8015ac8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013c9a:	4b34      	ldr	r3, [pc, #208]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013c9c:	4a34      	ldr	r2, [pc, #208]	@ (8013d70 <HAL_UART_MspInit+0x264>)
 8013c9e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013ca0:	4b32      	ldr	r3, [pc, #200]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013ca2:	220c      	movs	r2, #12
 8013ca4:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013ca6:	4b31      	ldr	r3, [pc, #196]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013ca8:	2200      	movs	r2, #0
 8013caa:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013cac:	4b2f      	ldr	r3, [pc, #188]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013cb4:	2280      	movs	r2, #128	@ 0x80
 8013cb6:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013cc4:	4b29      	ldr	r3, [pc, #164]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013cc6:	2220      	movs	r2, #32
 8013cc8:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013cca:	4b28      	ldr	r3, [pc, #160]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013ccc:	2200      	movs	r2, #0
 8013cce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013cd0:	4b26      	ldr	r3, [pc, #152]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013cd2:	0018      	movs	r0, r3
 8013cd4:	f001 fadc 	bl	8015290 <HAL_DMA_Init>
 8013cd8:	1e03      	subs	r3, r0, #0
 8013cda:	d001      	beq.n	8013ce0 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013cdc:	f7f9 fb50 	bl	800d380 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4a22      	ldr	r2, [pc, #136]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013ce4:	675a      	str	r2, [r3, #116]	@ 0x74
 8013ce6:	4b21      	ldr	r3, [pc, #132]	@ (8013d6c <HAL_UART_MspInit+0x260>)
 8013ce8:	687a      	ldr	r2, [r7, #4]
 8013cea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013cec:	4b21      	ldr	r3, [pc, #132]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013cee:	4a22      	ldr	r2, [pc, #136]	@ (8013d78 <HAL_UART_MspInit+0x26c>)
 8013cf0:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013cf2:	4b20      	ldr	r3, [pc, #128]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013cf4:	220c      	movs	r2, #12
 8013cf6:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013cfa:	2210      	movs	r2, #16
 8013cfc:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d00:	2200      	movs	r2, #0
 8013d02:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013d04:	4b1b      	ldr	r3, [pc, #108]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d06:	2280      	movs	r2, #128	@ 0x80
 8013d08:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013d10:	4b18      	ldr	r3, [pc, #96]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d12:	2200      	movs	r2, #0
 8013d14:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013d16:	4b17      	ldr	r3, [pc, #92]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d18:	2200      	movs	r2, #0
 8013d1a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013d1c:	4b15      	ldr	r3, [pc, #84]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d1e:	2200      	movs	r2, #0
 8013d20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013d22:	4b14      	ldr	r3, [pc, #80]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d24:	0018      	movs	r0, r3
 8013d26:	f001 fab3 	bl	8015290 <HAL_DMA_Init>
 8013d2a:	1e03      	subs	r3, r0, #0
 8013d2c:	d001      	beq.n	8013d32 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013d2e:	f7f9 fb27 	bl	800d380 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	4a0f      	ldr	r2, [pc, #60]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d36:	671a      	str	r2, [r3, #112]	@ 0x70
 8013d38:	4b0e      	ldr	r3, [pc, #56]	@ (8013d74 <HAL_UART_MspInit+0x268>)
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013d3e:	2200      	movs	r2, #0
 8013d40:	2100      	movs	r1, #0
 8013d42:	200e      	movs	r0, #14
 8013d44:	f001 fa6e 	bl	8015224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013d48:	200e      	movs	r0, #14
 8013d4a:	f001 fa80 	bl	801524e <HAL_NVIC_EnableIRQ>
}
 8013d4e:	46c0      	nop			@ (mov r8, r8)
 8013d50:	46bd      	mov	sp, r7
 8013d52:	b00d      	add	sp, #52	@ 0x34
 8013d54:	bd90      	pop	{r4, r7, pc}
 8013d56:	46c0      	nop			@ (mov r8, r8)
 8013d58:	40004800 	.word	0x40004800
 8013d5c:	40021000 	.word	0x40021000
 8013d60:	50000800 	.word	0x50000800
 8013d64:	40013800 	.word	0x40013800
 8013d68:	40004c00 	.word	0x40004c00
 8013d6c:	20002458 	.word	0x20002458
 8013d70:	4002006c 	.word	0x4002006c
 8013d74:	200024a0 	.word	0x200024a0
 8013d78:	40020080 	.word	0x40020080

08013d7c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b086      	sub	sp, #24
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013d84:	f000 fdc8 	bl	8014918 <HAL_GetTick>
 8013d88:	0003      	movs	r3, r0
 8013d8a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8013e00 <TimestampIsReached+0x84>)
 8013d8e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013d90:	697a      	ldr	r2, [r7, #20]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d307      	bcc.n	8013da8 <TimestampIsReached+0x2c>
 8013d98:	697a      	ldr	r2, [r7, #20]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	1ad3      	subs	r3, r2, r3
 8013d9e:	693a      	ldr	r2, [r7, #16]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d901      	bls.n	8013da8 <TimestampIsReached+0x2c>
 8013da4:	2201      	movs	r2, #1
 8013da6:	e000      	b.n	8013daa <TimestampIsReached+0x2e>
 8013da8:	2200      	movs	r2, #0
 8013daa:	230f      	movs	r3, #15
 8013dac:	18fb      	adds	r3, r7, r3
 8013dae:	701a      	strb	r2, [r3, #0]
 8013db0:	781a      	ldrb	r2, [r3, #0]
 8013db2:	2101      	movs	r1, #1
 8013db4:	400a      	ands	r2, r1
 8013db6:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013db8:	697a      	ldr	r2, [r7, #20]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d207      	bcs.n	8013dd0 <TimestampIsReached+0x54>
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	1ad3      	subs	r3, r2, r3
 8013dc6:	693a      	ldr	r2, [r7, #16]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d201      	bcs.n	8013dd0 <TimestampIsReached+0x54>
 8013dcc:	2201      	movs	r2, #1
 8013dce:	e000      	b.n	8013dd2 <TimestampIsReached+0x56>
 8013dd0:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013dd2:	200e      	movs	r0, #14
 8013dd4:	183b      	adds	r3, r7, r0
 8013dd6:	701a      	strb	r2, [r3, #0]
 8013dd8:	781a      	ldrb	r2, [r3, #0]
 8013dda:	2101      	movs	r1, #1
 8013ddc:	400a      	ands	r2, r1
 8013dde:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013de0:	230f      	movs	r3, #15
 8013de2:	18fb      	adds	r3, r7, r3
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d103      	bne.n	8013df2 <TimestampIsReached+0x76>
 8013dea:	183b      	adds	r3, r7, r0
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d001      	beq.n	8013df6 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e000      	b.n	8013df8 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013df6:	2300      	movs	r3, #0
}
 8013df8:	0018      	movs	r0, r3
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	b006      	add	sp, #24
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	7fffffff 	.word	0x7fffffff

08013e04 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013e0c:	f000 fd84 	bl	8014918 <HAL_GetTick>
 8013e10:	0002      	movs	r2, r0
 8013e12:	4904      	ldr	r1, [pc, #16]	@ (8013e24 <AddTimestamp+0x20>)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	0018      	movs	r0, r3
 8013e18:	f012 fa30 	bl	802627c <siprintf>
}
 8013e1c:	46c0      	nop			@ (mov r8, r8)
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	b002      	add	sp, #8
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	0802da70 	.word	0x0802da70

08013e28 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013e28:	b40c      	push	{r2, r3}
 8013e2a:	b5b0      	push	{r4, r5, r7, lr}
 8013e2c:	b0b4      	sub	sp, #208	@ 0xd0
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	0002      	movs	r2, r0
 8013e32:	6039      	str	r1, [r7, #0]
 8013e34:	1dfb      	adds	r3, r7, #7
 8013e36:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013e38:	4b2a      	ldr	r3, [pc, #168]	@ (8013ee4 <CreateLine+0xbc>)
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	1dfa      	adds	r2, r7, #7
 8013e3e:	7812      	ldrb	r2, [r2, #0]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d848      	bhi.n	8013ed6 <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013e44:	683a      	ldr	r2, [r7, #0]
 8013e46:	4928      	ldr	r1, [pc, #160]	@ (8013ee8 <CreateLine+0xc0>)
 8013e48:	240c      	movs	r4, #12
 8013e4a:	193b      	adds	r3, r7, r4
 8013e4c:	0018      	movs	r0, r3
 8013e4e:	f012 fa15 	bl	802627c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013e52:	4b24      	ldr	r3, [pc, #144]	@ (8013ee4 <CreateLine+0xbc>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d909      	bls.n	8013e6e <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013e5a:	193b      	adds	r3, r7, r4
 8013e5c:	0018      	movs	r0, r3
 8013e5e:	f7ec f985 	bl	800016c <strlen>
 8013e62:	0002      	movs	r2, r0
 8013e64:	193b      	adds	r3, r7, r4
 8013e66:	189b      	adds	r3, r3, r2
 8013e68:	0018      	movs	r0, r3
 8013e6a:	f7ff ffcb 	bl	8013e04 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013e6e:	240c      	movs	r4, #12
 8013e70:	193b      	adds	r3, r7, r4
 8013e72:	0018      	movs	r0, r3
 8013e74:	f7ec f97a 	bl	800016c <strlen>
 8013e78:	0003      	movs	r3, r0
 8013e7a:	21cc      	movs	r1, #204	@ 0xcc
 8013e7c:	187a      	adds	r2, r7, r1
 8013e7e:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013e80:	23dc      	movs	r3, #220	@ 0xdc
 8013e82:	2508      	movs	r5, #8
 8013e84:	195b      	adds	r3, r3, r5
 8013e86:	19db      	adds	r3, r3, r7
 8013e88:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8013e8a:	193a      	adds	r2, r7, r4
 8013e8c:	187b      	adds	r3, r7, r1
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	18d0      	adds	r0, r2, r3
 8013e92:	187b      	adds	r3, r7, r1
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	22be      	movs	r2, #190	@ 0xbe
 8013e98:	1ad3      	subs	r3, r2, r3
 8013e9a:	0019      	movs	r1, r3
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	22d8      	movs	r2, #216	@ 0xd8
 8013ea0:	1952      	adds	r2, r2, r5
 8013ea2:	19d2      	adds	r2, r2, r7
 8013ea4:	6812      	ldr	r2, [r2, #0]
 8013ea6:	f012 fa85 	bl	80263b4 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8013eaa:	4b10      	ldr	r3, [pc, #64]	@ (8013eec <CreateLine+0xc4>)
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d009      	beq.n	8013ec6 <CreateLine+0x9e>
 8013eb2:	f7f5 fe8f 	bl	8009bd4 <Check_USB_PowerOn>
 8013eb6:	1e03      	subs	r3, r0, #0
 8013eb8:	d005      	beq.n	8013ec6 <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8013eba:	193a      	adds	r2, r7, r4
 8013ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8013ef0 <CreateLine+0xc8>)
 8013ebe:	0011      	movs	r1, r2
 8013ec0:	0018      	movs	r0, r3
 8013ec2:	f7f4 fdcd 	bl	8008a60 <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8013ec6:	230c      	movs	r3, #12
 8013ec8:	18fa      	adds	r2, r7, r3
 8013eca:	4b09      	ldr	r3, [pc, #36]	@ (8013ef0 <CreateLine+0xc8>)
 8013ecc:	0011      	movs	r1, r2
 8013ece:	0018      	movs	r0, r3
 8013ed0:	f012 f964 	bl	802619c <iprintf>
 8013ed4:	e000      	b.n	8013ed8 <CreateLine+0xb0>
    return;
 8013ed6:	46c0      	nop			@ (mov r8, r8)
}
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	b034      	add	sp, #208	@ 0xd0
 8013edc:	bcb0      	pop	{r4, r5, r7}
 8013ede:	bc08      	pop	{r3}
 8013ee0:	b002      	add	sp, #8
 8013ee2:	4718      	bx	r3
 8013ee4:	200000f0 	.word	0x200000f0
 8013ee8:	0802da7c 	.word	0x0802da7c
 8013eec:	200010f7 	.word	0x200010f7
 8013ef0:	0802da80 	.word	0x0802da80

08013ef4 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b084      	sub	sp, #16
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	68b9      	ldr	r1, [r7, #8]
 8013f06:	4804      	ldr	r0, [pc, #16]	@ (8013f18 <_write+0x24>)
 8013f08:	2364      	movs	r3, #100	@ 0x64
 8013f0a:	f009 fab7 	bl	801d47c <HAL_UART_Transmit>
  return count;
 8013f0e:	687b      	ldr	r3, [r7, #4]
}
 8013f10:	0018      	movs	r0, r3
 8013f12:	46bd      	mov	sp, r7
 8013f14:	b004      	add	sp, #16
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	200022e8 	.word	0x200022e8

08013f1c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	0002      	movs	r2, r0
 8013f24:	1dfb      	adds	r3, r7, #7
 8013f26:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013f28:	4b03      	ldr	r3, [pc, #12]	@ (8013f38 <SetVerboseLevel+0x1c>)
 8013f2a:	1dfa      	adds	r2, r7, #7
 8013f2c:	7812      	ldrb	r2, [r2, #0]
 8013f2e:	701a      	strb	r2, [r3, #0]
}
 8013f30:	46c0      	nop			@ (mov r8, r8)
 8013f32:	46bd      	mov	sp, r7
 8013f34:	b002      	add	sp, #8
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	200000f0 	.word	0x200000f0

08013f3c <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013f40:	4b02      	ldr	r3, [pc, #8]	@ (8013f4c <GetVerboseLevel+0x10>)
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	0018      	movs	r0, r3
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	46c0      	nop			@ (mov r8, r8)
 8013f4c:	200000f0 	.word	0x200000f0

08013f50 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b08c      	sub	sp, #48	@ 0x30
 8013f54:	af00      	add	r7, sp, #0
  char msgout[42];
#ifdef DEBUG
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8013f56:	4a1e      	ldr	r2, [pc, #120]	@ (8013fd0 <BinaryReleaseInfo+0x80>)
 8013f58:	491e      	ldr	r1, [pc, #120]	@ (8013fd4 <BinaryReleaseInfo+0x84>)
 8013f5a:	1d3b      	adds	r3, r7, #4
 8013f5c:	0018      	movs	r0, r3
 8013f5e:	f012 f98d 	bl	802627c <siprintf>
#else
  sprintf(msgout,"Software version: %s, Release build", SRC_VERSION);
#endif
  if (!usblog) {
 8013f62:	4b1d      	ldr	r3, [pc, #116]	@ (8013fd8 <BinaryReleaseInfo+0x88>)
 8013f64:	781b      	ldrb	r3, [r3, #0]
 8013f66:	2201      	movs	r2, #1
 8013f68:	4053      	eors	r3, r2
 8013f6a:	b2db      	uxtb	r3, r3
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d005      	beq.n	8013f7c <BinaryReleaseInfo+0x2c>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013f70:	1d3a      	adds	r2, r7, #4
 8013f72:	4b1a      	ldr	r3, [pc, #104]	@ (8013fdc <BinaryReleaseInfo+0x8c>)
 8013f74:	0011      	movs	r1, r2
 8013f76:	0018      	movs	r0, r3
 8013f78:	f7f4 fd72 	bl	8008a60 <printf_USB>
  }
  Info(msgout);
 8013f7c:	1d3a      	adds	r2, r7, #4
 8013f7e:	4b18      	ldr	r3, [pc, #96]	@ (8013fe0 <BinaryReleaseInfo+0x90>)
 8013f80:	0019      	movs	r1, r3
 8013f82:	2002      	movs	r0, #2
 8013f84:	f7ff ff50 	bl	8013e28 <CreateLine>
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8013f88:	4b16      	ldr	r3, [pc, #88]	@ (8013fe4 <BinaryReleaseInfo+0x94>)
 8013f8a:	4a17      	ldr	r2, [pc, #92]	@ (8013fe8 <BinaryReleaseInfo+0x98>)
 8013f8c:	4917      	ldr	r1, [pc, #92]	@ (8013fec <BinaryReleaseInfo+0x9c>)
 8013f8e:	1d38      	adds	r0, r7, #4
 8013f90:	f012 f974 	bl	802627c <siprintf>
  if (!usblog) {
 8013f94:	4b10      	ldr	r3, [pc, #64]	@ (8013fd8 <BinaryReleaseInfo+0x88>)
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	2201      	movs	r2, #1
 8013f9a:	4053      	eors	r3, r2
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d005      	beq.n	8013fae <BinaryReleaseInfo+0x5e>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013fa2:	1d3a      	adds	r2, r7, #4
 8013fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8013fdc <BinaryReleaseInfo+0x8c>)
 8013fa6:	0011      	movs	r1, r2
 8013fa8:	0018      	movs	r0, r3
 8013faa:	f7f4 fd59 	bl	8008a60 <printf_USB>
  }
  Info(msgout);
 8013fae:	1d3a      	adds	r2, r7, #4
 8013fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8013fe0 <BinaryReleaseInfo+0x90>)
 8013fb2:	0019      	movs	r1, r3
 8013fb4:	2002      	movs	r0, #2
 8013fb6:	f7ff ff37 	bl	8013e28 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013fba:	4b0d      	ldr	r3, [pc, #52]	@ (8013ff0 <BinaryReleaseInfo+0xa0>)
 8013fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8013ff4 <BinaryReleaseInfo+0xa4>)
 8013fbe:	4908      	ldr	r1, [pc, #32]	@ (8013fe0 <BinaryReleaseInfo+0x90>)
 8013fc0:	2002      	movs	r0, #2
 8013fc2:	f7ff ff31 	bl	8013e28 <CreateLine>
}
 8013fc6:	46c0      	nop			@ (mov r8, r8)
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	b00c      	add	sp, #48	@ 0x30
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	46c0      	nop			@ (mov r8, r8)
 8013fd0:	0802da88 	.word	0x0802da88
 8013fd4:	0802da90 	.word	0x0802da90
 8013fd8:	200010f7 	.word	0x200010f7
 8013fdc:	0802da80 	.word	0x0802da80
 8013fe0:	0802dab4 	.word	0x0802dab4
 8013fe4:	0802dab8 	.word	0x0802dab8
 8013fe8:	0802dac4 	.word	0x0802dac4
 8013fec:	0802dad0 	.word	0x0802dad0
 8013ff0:	0802dae4 	.word	0x0802dae4
 8013ff4:	0802daf0 	.word	0x0802daf0

08013ff8 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b086      	sub	sp, #24
 8013ffc:	af02      	add	r7, sp, #8
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8014004:	68f8      	ldr	r0, [r7, #12]
 8014006:	4a07      	ldr	r2, [pc, #28]	@ (8014024 <errorHandler+0x2c>)
 8014008:	4907      	ldr	r1, [pc, #28]	@ (8014028 <errorHandler+0x30>)
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	9301      	str	r3, [sp, #4]
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	9300      	str	r3, [sp, #0]
 8014012:	0003      	movs	r3, r0
 8014014:	2001      	movs	r0, #1
 8014016:	f7ff ff07 	bl	8013e28 <CreateLine>
//    while (true)
//    {
//    }
}
 801401a:	46c0      	nop			@ (mov r8, r8)
 801401c:	46bd      	mov	sp, r7
 801401e:	b004      	add	sp, #16
 8014020:	bd80      	pop	{r7, pc}
 8014022:	46c0      	nop			@ (mov r8, r8)
 8014024:	0802daf8 	.word	0x0802daf8
 8014028:	0802db20 	.word	0x0802db20

0801402c <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 801402c:	b590      	push	{r4, r7, lr}
 801402e:	b083      	sub	sp, #12
 8014030:	af00      	add	r7, sp, #0
 8014032:	6039      	str	r1, [r7, #0]
 8014034:	0011      	movs	r1, r2
 8014036:	1dfb      	adds	r3, r7, #7
 8014038:	1c02      	adds	r2, r0, #0
 801403a:	701a      	strb	r2, [r3, #0]
 801403c:	1dbb      	adds	r3, r7, #6
 801403e:	1c0a      	adds	r2, r1, #0
 8014040:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8014042:	4b0a      	ldr	r3, [pc, #40]	@ (801406c <ReadRegister+0x40>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d00a      	beq.n	8014060 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 801404a:	4b08      	ldr	r3, [pc, #32]	@ (801406c <ReadRegister+0x40>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	1dba      	adds	r2, r7, #6
 8014050:	7814      	ldrb	r4, [r2, #0]
 8014052:	6839      	ldr	r1, [r7, #0]
 8014054:	1dfa      	adds	r2, r7, #7
 8014056:	7810      	ldrb	r0, [r2, #0]
 8014058:	0022      	movs	r2, r4
 801405a:	4798      	blx	r3
 801405c:	0003      	movs	r3, r0
 801405e:	e000      	b.n	8014062 <ReadRegister+0x36>
	}
	return false;
 8014060:	2300      	movs	r3, #0
}
 8014062:	0018      	movs	r0, r3
 8014064:	46bd      	mov	sp, r7
 8014066:	b003      	add	sp, #12
 8014068:	bd90      	pop	{r4, r7, pc}
 801406a:	46c0      	nop			@ (mov r8, r8)
 801406c:	200024f0 	.word	0x200024f0

08014070 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8014070:	b590      	push	{r4, r7, lr}
 8014072:	b083      	sub	sp, #12
 8014074:	af00      	add	r7, sp, #0
 8014076:	6039      	str	r1, [r7, #0]
 8014078:	0011      	movs	r1, r2
 801407a:	1dfb      	adds	r3, r7, #7
 801407c:	1c02      	adds	r2, r0, #0
 801407e:	701a      	strb	r2, [r3, #0]
 8014080:	1dbb      	adds	r3, r7, #6
 8014082:	1c0a      	adds	r2, r1, #0
 8014084:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8014086:	4b0a      	ldr	r3, [pc, #40]	@ (80140b0 <WriteRegister+0x40>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00a      	beq.n	80140a4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 801408e:	4b08      	ldr	r3, [pc, #32]	@ (80140b0 <WriteRegister+0x40>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	1dba      	adds	r2, r7, #6
 8014094:	7814      	ldrb	r4, [r2, #0]
 8014096:	6839      	ldr	r1, [r7, #0]
 8014098:	1dfa      	adds	r2, r7, #7
 801409a:	7810      	ldrb	r0, [r2, #0]
 801409c:	0022      	movs	r2, r4
 801409e:	4798      	blx	r3
 80140a0:	0003      	movs	r3, r0
 80140a2:	e000      	b.n	80140a6 <WriteRegister+0x36>
  }
  return false;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	0018      	movs	r0, r3
 80140a8:	46bd      	mov	sp, r7
 80140aa:	b003      	add	sp, #12
 80140ac:	bd90      	pop	{r4, r7, pc}
 80140ae:	46c0      	nop			@ (mov r8, r8)
 80140b0:	200024f4 	.word	0x200024f4

080140b4 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	000a      	movs	r2, r1
 80140be:	1cfb      	adds	r3, r7, #3
 80140c0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80140c2:	230f      	movs	r3, #15
 80140c4:	18fb      	adds	r3, r7, r3
 80140c6:	22ff      	movs	r2, #255	@ 0xff
 80140c8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80140ca:	230e      	movs	r3, #14
 80140cc:	18fb      	adds	r3, r7, r3
 80140ce:	2200      	movs	r2, #0
 80140d0:	701a      	strb	r2, [r3, #0]
 80140d2:	e038      	b.n	8014146 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80140d4:	230e      	movs	r3, #14
 80140d6:	18fb      	adds	r3, r7, r3
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	18d3      	adds	r3, r2, r3
 80140de:	7819      	ldrb	r1, [r3, #0]
 80140e0:	220f      	movs	r2, #15
 80140e2:	18bb      	adds	r3, r7, r2
 80140e4:	18ba      	adds	r2, r7, r2
 80140e6:	7812      	ldrb	r2, [r2, #0]
 80140e8:	404a      	eors	r2, r1
 80140ea:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80140ec:	230d      	movs	r3, #13
 80140ee:	18fb      	adds	r3, r7, r3
 80140f0:	2200      	movs	r2, #0
 80140f2:	701a      	strb	r2, [r3, #0]
 80140f4:	e01c      	b.n	8014130 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80140f6:	210f      	movs	r1, #15
 80140f8:	187b      	adds	r3, r7, r1
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	b25b      	sxtb	r3, r3
 80140fe:	2b00      	cmp	r3, #0
 8014100:	da0a      	bge.n	8014118 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8014102:	187b      	adds	r3, r7, r1
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	b25b      	sxtb	r3, r3
 8014108:	18db      	adds	r3, r3, r3
 801410a:	b25b      	sxtb	r3, r3
 801410c:	2231      	movs	r2, #49	@ 0x31
 801410e:	4053      	eors	r3, r2
 8014110:	b25a      	sxtb	r2, r3
 8014112:	187b      	adds	r3, r7, r1
 8014114:	701a      	strb	r2, [r3, #0]
 8014116:	e005      	b.n	8014124 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8014118:	230f      	movs	r3, #15
 801411a:	18fa      	adds	r2, r7, r3
 801411c:	18fb      	adds	r3, r7, r3
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	18db      	adds	r3, r3, r3
 8014122:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8014124:	210d      	movs	r1, #13
 8014126:	187b      	adds	r3, r7, r1
 8014128:	781a      	ldrb	r2, [r3, #0]
 801412a:	187b      	adds	r3, r7, r1
 801412c:	3201      	adds	r2, #1
 801412e:	701a      	strb	r2, [r3, #0]
 8014130:	230d      	movs	r3, #13
 8014132:	18fb      	adds	r3, r7, r3
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	2b07      	cmp	r3, #7
 8014138:	d9dd      	bls.n	80140f6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 801413a:	210e      	movs	r1, #14
 801413c:	187b      	adds	r3, r7, r1
 801413e:	781a      	ldrb	r2, [r3, #0]
 8014140:	187b      	adds	r3, r7, r1
 8014142:	3201      	adds	r2, #1
 8014144:	701a      	strb	r2, [r3, #0]
 8014146:	230e      	movs	r3, #14
 8014148:	18fa      	adds	r2, r7, r3
 801414a:	1cfb      	adds	r3, r7, #3
 801414c:	7812      	ldrb	r2, [r2, #0]
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	429a      	cmp	r2, r3
 8014152:	d3bf      	bcc.n	80140d4 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8014154:	230f      	movs	r3, #15
 8014156:	18fb      	adds	r3, r7, r3
 8014158:	781b      	ldrb	r3, [r3, #0]
}
 801415a:	0018      	movs	r0, r3
 801415c:	46bd      	mov	sp, r7
 801415e:	b004      	add	sp, #16
 8014160:	bd80      	pop	{r7, pc}
	...

08014164 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8014164:	b5b0      	push	{r4, r5, r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	1c18      	adds	r0, r3, #0
 8014174:	f7ef fb8e 	bl	8003894 <__aeabi_f2d>
 8014178:	4a2e      	ldr	r2, [pc, #184]	@ (8014234 <HIDS_DewPointCalculation+0xd0>)
 801417a:	4b2f      	ldr	r3, [pc, #188]	@ (8014238 <HIDS_DewPointCalculation+0xd4>)
 801417c:	f7ee fbea 	bl	8002954 <__aeabi_dmul>
 8014180:	0002      	movs	r2, r0
 8014182:	000b      	movs	r3, r1
 8014184:	0014      	movs	r4, r2
 8014186:	001d      	movs	r5, r3
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	1c18      	adds	r0, r3, #0
 801418e:	f7ef fb81 	bl	8003894 <__aeabi_f2d>
 8014192:	4a2a      	ldr	r2, [pc, #168]	@ (801423c <HIDS_DewPointCalculation+0xd8>)
 8014194:	4b2a      	ldr	r3, [pc, #168]	@ (8014240 <HIDS_DewPointCalculation+0xdc>)
 8014196:	f7ed fbdd 	bl	8001954 <__aeabi_dadd>
 801419a:	0002      	movs	r2, r0
 801419c:	000b      	movs	r3, r1
 801419e:	0020      	movs	r0, r4
 80141a0:	0029      	movs	r1, r5
 80141a2:	f7ed ff9d 	bl	80020e0 <__aeabi_ddiv>
 80141a6:	0002      	movs	r2, r0
 80141a8:	000b      	movs	r3, r1
 80141aa:	0014      	movs	r4, r2
 80141ac:	001d      	movs	r5, r3
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	1c18      	adds	r0, r3, #0
 80141b4:	f7ef fb6e 	bl	8003894 <__aeabi_f2d>
 80141b8:	2200      	movs	r2, #0
 80141ba:	4b22      	ldr	r3, [pc, #136]	@ (8014244 <HIDS_DewPointCalculation+0xe0>)
 80141bc:	f7ed ff90 	bl	80020e0 <__aeabi_ddiv>
 80141c0:	0002      	movs	r2, r0
 80141c2:	000b      	movs	r3, r1
 80141c4:	0010      	movs	r0, r2
 80141c6:	0019      	movs	r1, r3
 80141c8:	f014 ff30 	bl	802902c <log>
 80141cc:	0002      	movs	r2, r0
 80141ce:	000b      	movs	r3, r1
 80141d0:	0020      	movs	r0, r4
 80141d2:	0029      	movs	r1, r5
 80141d4:	f7ed fbbe 	bl	8001954 <__aeabi_dadd>
 80141d8:	0002      	movs	r2, r0
 80141da:	000b      	movs	r3, r1
 80141dc:	0010      	movs	r0, r2
 80141de:	0019      	movs	r1, r3
 80141e0:	f7ef fba0 	bl	8003924 <__aeabi_d2f>
 80141e4:	1c03      	adds	r3, r0, #0
 80141e6:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 80141e8:	68f8      	ldr	r0, [r7, #12]
 80141ea:	f7ef fb53 	bl	8003894 <__aeabi_f2d>
 80141ee:	4a13      	ldr	r2, [pc, #76]	@ (801423c <HIDS_DewPointCalculation+0xd8>)
 80141f0:	4b13      	ldr	r3, [pc, #76]	@ (8014240 <HIDS_DewPointCalculation+0xdc>)
 80141f2:	f7ee fbaf 	bl	8002954 <__aeabi_dmul>
 80141f6:	0002      	movs	r2, r0
 80141f8:	000b      	movs	r3, r1
 80141fa:	0014      	movs	r4, r2
 80141fc:	001d      	movs	r5, r3
 80141fe:	68f8      	ldr	r0, [r7, #12]
 8014200:	f7ef fb48 	bl	8003894 <__aeabi_f2d>
 8014204:	0002      	movs	r2, r0
 8014206:	000b      	movs	r3, r1
 8014208:	480a      	ldr	r0, [pc, #40]	@ (8014234 <HIDS_DewPointCalculation+0xd0>)
 801420a:	490b      	ldr	r1, [pc, #44]	@ (8014238 <HIDS_DewPointCalculation+0xd4>)
 801420c:	f7ee fe88 	bl	8002f20 <__aeabi_dsub>
 8014210:	0002      	movs	r2, r0
 8014212:	000b      	movs	r3, r1
 8014214:	0020      	movs	r0, r4
 8014216:	0029      	movs	r1, r5
 8014218:	f7ed ff62 	bl	80020e0 <__aeabi_ddiv>
 801421c:	0002      	movs	r2, r0
 801421e:	000b      	movs	r3, r1
 8014220:	0010      	movs	r0, r2
 8014222:	0019      	movs	r1, r3
 8014224:	f7ef fb7e 	bl	8003924 <__aeabi_d2f>
 8014228:	1c03      	adds	r3, r0, #0
}
 801422a:	1c18      	adds	r0, r3, #0
 801422c:	46bd      	mov	sp, r7
 801422e:	b004      	add	sp, #16
 8014230:	bdb0      	pop	{r4, r5, r7, pc}
 8014232:	46c0      	nop			@ (mov r8, r8)
 8014234:	b851eb85 	.word	0xb851eb85
 8014238:	4031451e 	.word	0x4031451e
 801423c:	66666666 	.word	0x66666666
 8014240:	406db666 	.word	0x406db666
 8014244:	40590000 	.word	0x40590000

08014248 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 801424e:	4b0d      	ldr	r3, [pc, #52]	@ (8014284 <HIDS_EnableHeater+0x3c>)
 8014250:	781a      	ldrb	r2, [r3, #0]
 8014252:	1dfb      	adds	r3, r7, #7
 8014254:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8014256:	1dfb      	adds	r3, r7, #7
 8014258:	2201      	movs	r2, #1
 801425a:	0019      	movs	r1, r3
 801425c:	2044      	movs	r0, #68	@ 0x44
 801425e:	f7ff ff07 	bl	8014070 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8014262:	1dfb      	adds	r3, r7, #7
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	4a08      	ldr	r2, [pc, #32]	@ (8014288 <HIDS_EnableHeater+0x40>)
 8014268:	4908      	ldr	r1, [pc, #32]	@ (801428c <HIDS_EnableHeater+0x44>)
 801426a:	2002      	movs	r0, #2
 801426c:	f7ff fddc 	bl	8013e28 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8014270:	f7f6 f952 	bl	800a518 <getPosixTime>
 8014274:	0002      	movs	r2, r0
 8014276:	4b06      	ldr	r3, [pc, #24]	@ (8014290 <HIDS_EnableHeater+0x48>)
 8014278:	601a      	str	r2, [r3, #0]
}
 801427a:	46c0      	nop			@ (mov r8, r8)
 801427c:	46bd      	mov	sp, r7
 801427e:	b002      	add	sp, #8
 8014280:	bd80      	pop	{r7, pc}
 8014282:	46c0      	nop			@ (mov r8, r8)
 8014284:	200000f1 	.word	0x200000f1
 8014288:	0802db24 	.word	0x0802db24
 801428c:	0802db44 	.word	0x0802db44
 8014290:	20002508 	.word	0x20002508

08014294 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801429e:	4b0a      	ldr	r3, [pc, #40]	@ (80142c8 <HIDS_Init+0x34>)
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80142a4:	4b09      	ldr	r3, [pc, #36]	@ (80142cc <HIDS_Init+0x38>)
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80142aa:	4b09      	ldr	r3, [pc, #36]	@ (80142d0 <HIDS_Init+0x3c>)
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	0018      	movs	r0, r3
 80142b0:	f000 f840 	bl	8014334 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80142b4:	4b07      	ldr	r3, [pc, #28]	@ (80142d4 <HIDS_Init+0x40>)
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	0018      	movs	r0, r3
 80142ba:	f000 f82b 	bl	8014314 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80142be:	46c0      	nop			@ (mov r8, r8)
 80142c0:	46bd      	mov	sp, r7
 80142c2:	b002      	add	sp, #8
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	46c0      	nop			@ (mov r8, r8)
 80142c8:	200024f0 	.word	0x200024f0
 80142cc:	200024f4 	.word	0x200024f4
 80142d0:	200000f2 	.word	0x200000f2
 80142d4:	200000f1 	.word	0x200000f1

080142d8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80142d8:	b580      	push	{r7, lr}
 80142da:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 80142dc:	f000 fb1c 	bl	8014918 <HAL_GetTick>
 80142e0:	0002      	movs	r2, r0
 80142e2:	4b08      	ldr	r3, [pc, #32]	@ (8014304 <HIDS_StartMeasurement+0x2c>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	18d2      	adds	r2, r2, r3
 80142e8:	4b07      	ldr	r3, [pc, #28]	@ (8014308 <HIDS_StartMeasurement+0x30>)
 80142ea:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80142ec:	4b07      	ldr	r3, [pc, #28]	@ (801430c <HIDS_StartMeasurement+0x34>)
 80142ee:	2201      	movs	r2, #1
 80142f0:	0019      	movs	r1, r3
 80142f2:	2044      	movs	r0, #68	@ 0x44
 80142f4:	f7ff febc 	bl	8014070 <WriteRegister>
  MeasurementDone = false;
 80142f8:	4b05      	ldr	r3, [pc, #20]	@ (8014310 <HIDS_StartMeasurement+0x38>)
 80142fa:	2200      	movs	r2, #0
 80142fc:	701a      	strb	r2, [r3, #0]
}
 80142fe:	46c0      	nop			@ (mov r8, r8)
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	200000f8 	.word	0x200000f8
 8014308:	200000f4 	.word	0x200000f4
 801430c:	200000f2 	.word	0x200000f2
 8014310:	2000250c 	.word	0x2000250c

08014314 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	0002      	movs	r2, r0
 801431c:	1dfb      	adds	r3, r7, #7
 801431e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8014320:	4b03      	ldr	r3, [pc, #12]	@ (8014330 <HIDS_SetHeaterMode+0x1c>)
 8014322:	1dfa      	adds	r2, r7, #7
 8014324:	7812      	ldrb	r2, [r2, #0]
 8014326:	701a      	strb	r2, [r3, #0]
}
 8014328:	46c0      	nop			@ (mov r8, r8)
 801432a:	46bd      	mov	sp, r7
 801432c:	b002      	add	sp, #8
 801432e:	bd80      	pop	{r7, pc}
 8014330:	200000f1 	.word	0x200000f1

08014334 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	0002      	movs	r2, r0
 801433c:	1dfb      	adds	r3, r7, #7
 801433e:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8014340:	4b03      	ldr	r3, [pc, #12]	@ (8014350 <HIDS_SetMeasurementMode+0x1c>)
 8014342:	1dfa      	adds	r2, r7, #7
 8014344:	7812      	ldrb	r2, [r2, #0]
 8014346:	701a      	strb	r2, [r3, #0]
}
 8014348:	46c0      	nop			@ (mov r8, r8)
 801434a:	46bd      	mov	sp, r7
 801434c:	b002      	add	sp, #8
 801434e:	bd80      	pop	{r7, pc}
 8014350:	200000f2 	.word	0x200000f2

08014354 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 801435c:	f000 fadc 	bl	8014918 <HAL_GetTick>
 8014360:	0002      	movs	r2, r0
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	18d2      	adds	r2, r2, r3
 8014366:	4b03      	ldr	r3, [pc, #12]	@ (8014374 <setHIDSTimeStamp+0x20>)
 8014368:	601a      	str	r2, [r3, #0]
}
 801436a:	46c0      	nop			@ (mov r8, r8)
 801436c:	46bd      	mov	sp, r7
 801436e:	b002      	add	sp, #8
 8014370:	bd80      	pop	{r7, pc}
 8014372:	46c0      	nop			@ (mov r8, r8)
 8014374:	20002510 	.word	0x20002510

08014378 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8014378:	b590      	push	{r4, r7, lr}
 801437a:	b085      	sub	sp, #20
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	781a      	ldrb	r2, [r3, #0]
 8014384:	210c      	movs	r1, #12
 8014386:	187b      	adds	r3, r7, r1
 8014388:	701a      	strb	r2, [r3, #0]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	785a      	ldrb	r2, [r3, #1]
 801438e:	187b      	adds	r3, r7, r1
 8014390:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8014392:	240f      	movs	r4, #15
 8014394:	193b      	adds	r3, r7, r4
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	7892      	ldrb	r2, [r2, #2]
 801439a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 801439c:	187b      	adds	r3, r7, r1
 801439e:	2102      	movs	r1, #2
 80143a0:	0018      	movs	r0, r3
 80143a2:	f7ff fe87 	bl	80140b4 <CalculateCRC>
 80143a6:	0003      	movs	r3, r0
 80143a8:	001a      	movs	r2, r3
 80143aa:	193b      	adds	r3, r7, r4
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	4293      	cmp	r3, r2
 80143b0:	d007      	beq.n	80143c2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80143b2:	4a1a      	ldr	r2, [pc, #104]	@ (801441c <CheckCRC+0xa4>)
 80143b4:	4b1a      	ldr	r3, [pc, #104]	@ (8014420 <CheckCRC+0xa8>)
 80143b6:	0019      	movs	r1, r3
 80143b8:	2001      	movs	r0, #1
 80143ba:	f7ff fd35 	bl	8013e28 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 80143be:	2300      	movs	r3, #0
 80143c0:	e027      	b.n	8014412 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	78da      	ldrb	r2, [r3, #3]
 80143c6:	2108      	movs	r1, #8
 80143c8:	187b      	adds	r3, r7, r1
 80143ca:	701a      	strb	r2, [r3, #0]
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	791a      	ldrb	r2, [r3, #4]
 80143d0:	187b      	adds	r3, r7, r1
 80143d2:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80143d4:	240e      	movs	r4, #14
 80143d6:	193b      	adds	r3, r7, r4
 80143d8:	687a      	ldr	r2, [r7, #4]
 80143da:	7952      	ldrb	r2, [r2, #5]
 80143dc:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80143de:	187b      	adds	r3, r7, r1
 80143e0:	2102      	movs	r1, #2
 80143e2:	0018      	movs	r0, r3
 80143e4:	f7ff fe66 	bl	80140b4 <CalculateCRC>
 80143e8:	0003      	movs	r3, r0
 80143ea:	001a      	movs	r2, r3
 80143ec:	193b      	adds	r3, r7, r4
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	4293      	cmp	r3, r2
 80143f2:	d00d      	beq.n	8014410 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 80143f4:	4a0b      	ldr	r2, [pc, #44]	@ (8014424 <CheckCRC+0xac>)
 80143f6:	4b0a      	ldr	r3, [pc, #40]	@ (8014420 <CheckCRC+0xa8>)
 80143f8:	0019      	movs	r1, r3
 80143fa:	2001      	movs	r0, #1
 80143fc:	f7ff fd14 	bl	8013e28 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8014400:	4a09      	ldr	r2, [pc, #36]	@ (8014428 <CheckCRC+0xb0>)
 8014402:	4b0a      	ldr	r3, [pc, #40]	@ (801442c <CheckCRC+0xb4>)
 8014404:	2185      	movs	r1, #133	@ 0x85
 8014406:	0018      	movs	r0, r3
 8014408:	f7ff fdf6 	bl	8013ff8 <errorHandler>
		return false;
 801440c:	2300      	movs	r3, #0
 801440e:	e000      	b.n	8014412 <CheckCRC+0x9a>
	}
	return true;
 8014410:	2301      	movs	r3, #1
}
 8014412:	0018      	movs	r0, r3
 8014414:	46bd      	mov	sp, r7
 8014416:	b005      	add	sp, #20
 8014418:	bd90      	pop	{r4, r7, pc}
 801441a:	46c0      	nop			@ (mov r8, r8)
 801441c:	0802db48 	.word	0x0802db48
 8014420:	0802db70 	.word	0x0802db70
 8014424:	0802db74 	.word	0x0802db74
 8014428:	0802dba0 	.word	0x0802dba0
 801442c:	0802e560 	.word	0x0802e560

08014430 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8014436:	1dbb      	adds	r3, r7, #6
 8014438:	2289      	movs	r2, #137	@ 0x89
 801443a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 801443c:	1dbb      	adds	r3, r7, #6
 801443e:	2201      	movs	r2, #1
 8014440:	0019      	movs	r1, r3
 8014442:	2044      	movs	r0, #68	@ 0x44
 8014444:	f7ff fe14 	bl	8014070 <WriteRegister>
	HAL_Delay(30);
 8014448:	201e      	movs	r0, #30
 801444a:	f000 fa6f 	bl	801492c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 801444e:	4b14      	ldr	r3, [pc, #80]	@ (80144a0 <HIDS_DeviceConnected+0x70>)
 8014450:	2206      	movs	r2, #6
 8014452:	0019      	movs	r1, r3
 8014454:	2044      	movs	r0, #68	@ 0x44
 8014456:	f7ff fde9 	bl	801402c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801445a:	1dfb      	adds	r3, r7, #7
 801445c:	2200      	movs	r2, #0
 801445e:	701a      	strb	r2, [r3, #0]
 8014460:	e011      	b.n	8014486 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8014462:	1dfb      	adds	r3, r7, #7
 8014464:	7818      	ldrb	r0, [r3, #0]
 8014466:	1dfb      	adds	r3, r7, #7
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	4a0d      	ldr	r2, [pc, #52]	@ (80144a0 <HIDS_DeviceConnected+0x70>)
 801446c:	5cd3      	ldrb	r3, [r2, r3]
 801446e:	4a0d      	ldr	r2, [pc, #52]	@ (80144a4 <HIDS_DeviceConnected+0x74>)
 8014470:	490d      	ldr	r1, [pc, #52]	@ (80144a8 <HIDS_DeviceConnected+0x78>)
 8014472:	9300      	str	r3, [sp, #0]
 8014474:	0003      	movs	r3, r0
 8014476:	2002      	movs	r0, #2
 8014478:	f7ff fcd6 	bl	8013e28 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801447c:	1dfb      	adds	r3, r7, #7
 801447e:	781a      	ldrb	r2, [r3, #0]
 8014480:	1dfb      	adds	r3, r7, #7
 8014482:	3201      	adds	r2, #1
 8014484:	701a      	strb	r2, [r3, #0]
 8014486:	1dfb      	adds	r3, r7, #7
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	2b05      	cmp	r3, #5
 801448c:	d9e9      	bls.n	8014462 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801448e:	4b04      	ldr	r3, [pc, #16]	@ (80144a0 <HIDS_DeviceConnected+0x70>)
 8014490:	0018      	movs	r0, r3
 8014492:	f7ff ff71 	bl	8014378 <CheckCRC>
 8014496:	0003      	movs	r3, r0
}
 8014498:	0018      	movs	r0, r3
 801449a:	46bd      	mov	sp, r7
 801449c:	b002      	add	sp, #8
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	200024f8 	.word	0x200024f8
 80144a4:	0802dbb8 	.word	0x0802dbb8
 80144a8:	0802db44 	.word	0x0802db44

080144ac <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80144ac:	b580      	push	{r7, lr}
 80144ae:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80144b0:	4b04      	ldr	r3, [pc, #16]	@ (80144c4 <HIDS_MeasurementReady+0x18>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	0018      	movs	r0, r3
 80144b6:	f7ff fc61 	bl	8013d7c <TimestampIsReached>
 80144ba:	0003      	movs	r3, r0
}
 80144bc:	0018      	movs	r0, r3
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	46c0      	nop			@ (mov r8, r8)
 80144c4:	200000f4 	.word	0x200000f4

080144c8 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 80144d2:	4b41      	ldr	r3, [pc, #260]	@ (80145d8 <HIDS_GetMeasurementValues+0x110>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d001      	beq.n	80144de <HIDS_GetMeasurementValues+0x16>
 80144da:	2301      	movs	r3, #1
 80144dc:	e077      	b.n	80145ce <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 80144de:	f7ff ffe5 	bl	80144ac <HIDS_MeasurementReady>
 80144e2:	0003      	movs	r3, r0
 80144e4:	001a      	movs	r2, r3
 80144e6:	2301      	movs	r3, #1
 80144e8:	4053      	eors	r3, r2
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d001      	beq.n	80144f4 <HIDS_GetMeasurementValues+0x2c>
 80144f0:	2300      	movs	r3, #0
 80144f2:	e06c      	b.n	80145ce <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 80144f4:	4b39      	ldr	r3, [pc, #228]	@ (80145dc <HIDS_GetMeasurementValues+0x114>)
 80144f6:	2206      	movs	r2, #6
 80144f8:	0019      	movs	r1, r3
 80144fa:	2044      	movs	r0, #68	@ 0x44
 80144fc:	f7ff fd96 	bl	801402c <ReadRegister>
 8014500:	0003      	movs	r3, r0
 8014502:	001a      	movs	r2, r3
 8014504:	2301      	movs	r3, #1
 8014506:	4053      	eors	r3, r2
 8014508:	b2db      	uxtb	r3, r3
 801450a:	2b00      	cmp	r3, #0
 801450c:	d005      	beq.n	801451a <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 801450e:	4a34      	ldr	r2, [pc, #208]	@ (80145e0 <HIDS_GetMeasurementValues+0x118>)
 8014510:	4b34      	ldr	r3, [pc, #208]	@ (80145e4 <HIDS_GetMeasurementValues+0x11c>)
 8014512:	0019      	movs	r1, r3
 8014514:	2001      	movs	r0, #1
 8014516:	f7ff fc87 	bl	8013e28 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 801451a:	4b30      	ldr	r3, [pc, #192]	@ (80145dc <HIDS_GetMeasurementValues+0x114>)
 801451c:	0018      	movs	r0, r3
 801451e:	f7ff ff2b 	bl	8014378 <CheckCRC>
 8014522:	0003      	movs	r3, r0
 8014524:	001a      	movs	r2, r3
 8014526:	2301      	movs	r3, #1
 8014528:	4053      	eors	r3, r2
 801452a:	b2db      	uxtb	r3, r3
 801452c:	2b00      	cmp	r3, #0
 801452e:	d001      	beq.n	8014534 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8014530:	2300      	movs	r3, #0
 8014532:	e04c      	b.n	80145ce <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8014534:	4b29      	ldr	r3, [pc, #164]	@ (80145dc <HIDS_GetMeasurementValues+0x114>)
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	021b      	lsls	r3, r3, #8
 801453a:	4a28      	ldr	r2, [pc, #160]	@ (80145dc <HIDS_GetMeasurementValues+0x114>)
 801453c:	7852      	ldrb	r2, [r2, #1]
 801453e:	4313      	orrs	r3, r2
 8014540:	22af      	movs	r2, #175	@ 0xaf
 8014542:	4353      	muls	r3, r2
 8014544:	0018      	movs	r0, r3
 8014546:	f7ef f953 	bl	80037f0 <__aeabi_i2d>
 801454a:	2200      	movs	r2, #0
 801454c:	4b26      	ldr	r3, [pc, #152]	@ (80145e8 <HIDS_GetMeasurementValues+0x120>)
 801454e:	f7ed fdc7 	bl	80020e0 <__aeabi_ddiv>
 8014552:	0002      	movs	r2, r0
 8014554:	000b      	movs	r3, r1
 8014556:	0010      	movs	r0, r2
 8014558:	0019      	movs	r1, r3
 801455a:	f7ef f9e3 	bl	8003924 <__aeabi_d2f>
 801455e:	1c03      	adds	r3, r0, #0
 8014560:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8014562:	4922      	ldr	r1, [pc, #136]	@ (80145ec <HIDS_GetMeasurementValues+0x124>)
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f7ec fec5 	bl	80012f4 <__aeabi_fsub>
 801456a:	1c03      	adds	r3, r0, #0
 801456c:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 801456e:	4b1b      	ldr	r3, [pc, #108]	@ (80145dc <HIDS_GetMeasurementValues+0x114>)
 8014570:	78db      	ldrb	r3, [r3, #3]
 8014572:	021b      	lsls	r3, r3, #8
 8014574:	4a19      	ldr	r2, [pc, #100]	@ (80145dc <HIDS_GetMeasurementValues+0x114>)
 8014576:	7912      	ldrb	r2, [r2, #4]
 8014578:	431a      	orrs	r2, r3
 801457a:	0013      	movs	r3, r2
 801457c:	015b      	lsls	r3, r3, #5
 801457e:	1a9b      	subs	r3, r3, r2
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	189b      	adds	r3, r3, r2
 8014584:	0018      	movs	r0, r3
 8014586:	f7ef f933 	bl	80037f0 <__aeabi_i2d>
 801458a:	2200      	movs	r2, #0
 801458c:	4b16      	ldr	r3, [pc, #88]	@ (80145e8 <HIDS_GetMeasurementValues+0x120>)
 801458e:	f7ed fda7 	bl	80020e0 <__aeabi_ddiv>
 8014592:	0002      	movs	r2, r0
 8014594:	000b      	movs	r3, r1
 8014596:	0010      	movs	r0, r2
 8014598:	0019      	movs	r1, r3
 801459a:	f7ef f9c3 	bl	8003924 <__aeabi_d2f>
 801459e:	1c03      	adds	r3, r0, #0
 80145a0:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 80145a2:	4913      	ldr	r1, [pc, #76]	@ (80145f0 <HIDS_GetMeasurementValues+0x128>)
 80145a4:	68b8      	ldr	r0, [r7, #8]
 80145a6:	f7ec fea5 	bl	80012f4 <__aeabi_fsub>
 80145aa:	1c03      	adds	r3, r0, #0
 80145ac:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	68fa      	ldr	r2, [r7, #12]
 80145b2:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	68ba      	ldr	r2, [r7, #8]
 80145b8:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	0011      	movs	r1, r2
 80145c0:	0018      	movs	r0, r3
 80145c2:	f7fc ff2b 	bl	801141c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 80145c6:	4b04      	ldr	r3, [pc, #16]	@ (80145d8 <HIDS_GetMeasurementValues+0x110>)
 80145c8:	2201      	movs	r2, #1
 80145ca:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 80145cc:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 80145ce:	0018      	movs	r0, r3
 80145d0:	46bd      	mov	sp, r7
 80145d2:	b004      	add	sp, #16
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	46c0      	nop			@ (mov r8, r8)
 80145d8:	2000250c 	.word	0x2000250c
 80145dc:	20002500 	.word	0x20002500
 80145e0:	0802dbd8 	.word	0x0802dbd8
 80145e4:	0802db70 	.word	0x0802db70
 80145e8:	40efffe0 	.word	0x40efffe0
 80145ec:	42340000 	.word	0x42340000
 80145f0:	40c00000 	.word	0x40c00000

080145f4 <ResetHIDSresults>:

void ResetHIDSresults() {
 80145f4:	b580      	push	{r7, lr}
 80145f6:	af00      	add	r7, sp, #0
  humid = 0.0;
 80145f8:	4b04      	ldr	r3, [pc, #16]	@ (801460c <ResetHIDSresults+0x18>)
 80145fa:	2200      	movs	r2, #0
 80145fc:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 80145fe:	4b04      	ldr	r3, [pc, #16]	@ (8014610 <ResetHIDSresults+0x1c>)
 8014600:	2200      	movs	r2, #0
 8014602:	601a      	str	r2, [r3, #0]
}
 8014604:	46c0      	nop			@ (mov r8, r8)
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
 801460a:	46c0      	nop			@ (mov r8, r8)
 801460c:	200024e8 	.word	0x200024e8
 8014610:	200024ec 	.word	0x200024ec

08014614 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8014614:	b5b0      	push	{r4, r5, r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 801461a:	4b69      	ldr	r3, [pc, #420]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	2b06      	cmp	r3, #6
 8014620:	d900      	bls.n	8014624 <HIDS_Upkeep+0x10>
 8014622:	e0bd      	b.n	80147a0 <HIDS_Upkeep+0x18c>
 8014624:	009a      	lsls	r2, r3, #2
 8014626:	4b67      	ldr	r3, [pc, #412]	@ (80147c4 <HIDS_Upkeep+0x1b0>)
 8014628:	18d3      	adds	r3, r2, r3
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 801462e:	4a66      	ldr	r2, [pc, #408]	@ (80147c8 <HIDS_Upkeep+0x1b4>)
 8014630:	4b66      	ldr	r3, [pc, #408]	@ (80147cc <HIDS_Upkeep+0x1b8>)
 8014632:	0019      	movs	r1, r3
 8014634:	2003      	movs	r0, #3
 8014636:	f7ff fbf7 	bl	8013e28 <CreateLine>
      break;
 801463a:	e0bc      	b.n	80147b6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 801463c:	f7ff ffda 	bl	80145f4 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8014640:	4b5f      	ldr	r3, [pc, #380]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 8014642:	2201      	movs	r2, #1
 8014644:	701a      	strb	r2, [r3, #0]
      break;
 8014646:	e0b6      	b.n	80147b6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8014648:	f7f9 fbd8 	bl	800ddfc <getSensorLock>
 801464c:	1e03      	subs	r3, r0, #0
 801464e:	d000      	beq.n	8014652 <HIDS_Upkeep+0x3e>
 8014650:	e0aa      	b.n	80147a8 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 8014652:	2001      	movs	r0, #1
 8014654:	f7f9 fbbe 	bl	800ddd4 <setSensorLock>
      SetMeasurementIndicator();
 8014658:	f7fe f934 	bl	80128c4 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 801465c:	f7ff fe3c 	bl	80142d8 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8014660:	200a      	movs	r0, #10
 8014662:	f000 f963 	bl	801492c <HAL_Delay>
      setSensorLock(FREE);
 8014666:	2000      	movs	r0, #0
 8014668:	f7f9 fbb4 	bl	800ddd4 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 801466c:	4b54      	ldr	r3, [pc, #336]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 801466e:	2202      	movs	r2, #2
 8014670:	701a      	strb	r2, [r3, #0]
      break;
 8014672:	e0a0      	b.n	80147b6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8014674:	f7f9 fbc2 	bl	800ddfc <getSensorLock>
 8014678:	1e03      	subs	r3, r0, #0
 801467a:	d000      	beq.n	801467e <HIDS_Upkeep+0x6a>
 801467c:	e096      	b.n	80147ac <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 801467e:	2001      	movs	r0, #1
 8014680:	f7f9 fba8 	bl	800ddd4 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8014684:	4a52      	ldr	r2, [pc, #328]	@ (80147d0 <HIDS_Upkeep+0x1bc>)
 8014686:	4b53      	ldr	r3, [pc, #332]	@ (80147d4 <HIDS_Upkeep+0x1c0>)
 8014688:	0011      	movs	r1, r2
 801468a:	0018      	movs	r0, r3
 801468c:	f7ff ff1c 	bl	80144c8 <HIDS_GetMeasurementValues>
 8014690:	1e03      	subs	r3, r0, #0
 8014692:	d002      	beq.n	801469a <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8014694:	4b4a      	ldr	r3, [pc, #296]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 8014696:	2203      	movs	r2, #3
 8014698:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 801469a:	200a      	movs	r0, #10
 801469c:	f000 f946 	bl	801492c <HAL_Delay>
      setSensorLock(FREE);
 80146a0:	2000      	movs	r0, #0
 80146a2:	f7f9 fb97 	bl	800ddd4 <setSensorLock>
      break;
 80146a6:	e086      	b.n	80147b6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 80146a8:	4b4a      	ldr	r3, [pc, #296]	@ (80147d4 <HIDS_Upkeep+0x1c0>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	1c18      	adds	r0, r3, #0
 80146ae:	f7ef f8f1 	bl	8003894 <__aeabi_f2d>
 80146b2:	0004      	movs	r4, r0
 80146b4:	000d      	movs	r5, r1
 80146b6:	4b46      	ldr	r3, [pc, #280]	@ (80147d0 <HIDS_Upkeep+0x1bc>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	1c18      	adds	r0, r3, #0
 80146bc:	f7ef f8ea 	bl	8003894 <__aeabi_f2d>
 80146c0:	0002      	movs	r2, r0
 80146c2:	000b      	movs	r3, r1
 80146c4:	4844      	ldr	r0, [pc, #272]	@ (80147d8 <HIDS_Upkeep+0x1c4>)
 80146c6:	4945      	ldr	r1, [pc, #276]	@ (80147dc <HIDS_Upkeep+0x1c8>)
 80146c8:	9202      	str	r2, [sp, #8]
 80146ca:	9303      	str	r3, [sp, #12]
 80146cc:	9400      	str	r4, [sp, #0]
 80146ce:	9501      	str	r5, [sp, #4]
 80146d0:	0002      	movs	r2, r0
 80146d2:	2002      	movs	r0, #2
 80146d4:	f7ff fba8 	bl	8013e28 <CreateLine>
      setHIDS(temp, humid);
 80146d8:	4b3d      	ldr	r3, [pc, #244]	@ (80147d0 <HIDS_Upkeep+0x1bc>)
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	4b3d      	ldr	r3, [pc, #244]	@ (80147d4 <HIDS_Upkeep+0x1c0>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	1c19      	adds	r1, r3, #0
 80146e2:	1c10      	adds	r0, r2, #0
 80146e4:	f7f0 fa18 	bl	8004b18 <setHIDS>
      ResetMeasurementIndicator();
 80146e8:	f7fe f904 	bl	80128f4 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 80146ec:	4b38      	ldr	r3, [pc, #224]	@ (80147d0 <HIDS_Upkeep+0x1bc>)
 80146ee:	681c      	ldr	r4, [r3, #0]
 80146f0:	4a37      	ldr	r2, [pc, #220]	@ (80147d0 <HIDS_Upkeep+0x1bc>)
 80146f2:	4b38      	ldr	r3, [pc, #224]	@ (80147d4 <HIDS_Upkeep+0x1c0>)
 80146f4:	0011      	movs	r1, r2
 80146f6:	0018      	movs	r0, r3
 80146f8:	f7ff fd34 	bl	8014164 <HIDS_DewPointCalculation>
 80146fc:	1c03      	adds	r3, r0, #0
 80146fe:	1c19      	adds	r1, r3, #0
 8014700:	1c20      	adds	r0, r4, #0
 8014702:	f7ec fdf7 	bl	80012f4 <__aeabi_fsub>
 8014706:	1c03      	adds	r3, r0, #0
 8014708:	21fe      	movs	r1, #254	@ 0xfe
 801470a:	0589      	lsls	r1, r1, #22
 801470c:	1c18      	adds	r0, r3, #0
 801470e:	f7eb ff0f 	bl	8000530 <__aeabi_fcmplt>
 8014712:	1e03      	subs	r3, r0, #0
 8014714:	d023      	beq.n	801475e <HIDS_Upkeep+0x14a>
 8014716:	f7f5 feff 	bl	800a518 <getPosixTime>
 801471a:	0002      	movs	r2, r0
 801471c:	4b30      	ldr	r3, [pc, #192]	@ (80147e0 <HIDS_Upkeep+0x1cc>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	1ad2      	subs	r2, r2, r3
 8014722:	23e1      	movs	r3, #225	@ 0xe1
 8014724:	009b      	lsls	r3, r3, #2
 8014726:	429a      	cmp	r2, r3
 8014728:	d919      	bls.n	801475e <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 801472a:	4a2e      	ldr	r2, [pc, #184]	@ (80147e4 <HIDS_Upkeep+0x1d0>)
 801472c:	4b2b      	ldr	r3, [pc, #172]	@ (80147dc <HIDS_Upkeep+0x1c8>)
 801472e:	0019      	movs	r1, r3
 8014730:	2002      	movs	r0, #2
 8014732:	f7ff fb79 	bl	8013e28 <CreateLine>
        if (getSensorLock() != FREE) {
 8014736:	f7f9 fb61 	bl	800ddfc <getSensorLock>
 801473a:	1e03      	subs	r3, r0, #0
 801473c:	d138      	bne.n	80147b0 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 801473e:	f7ff fd83 	bl	8014248 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8014742:	200a      	movs	r0, #10
 8014744:	f000 f8f2 	bl	801492c <HAL_Delay>
        setSensorLock(FREE);
 8014748:	2000      	movs	r0, #0
 801474a:	f7f9 fb43 	bl	800ddd4 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 801474e:	f000 f8e3 	bl	8014918 <HAL_GetTick>
 8014752:	0003      	movs	r3, r0
 8014754:	4a24      	ldr	r2, [pc, #144]	@ (80147e8 <HIDS_Upkeep+0x1d4>)
 8014756:	189a      	adds	r2, r3, r2
 8014758:	4b24      	ldr	r3, [pc, #144]	@ (80147ec <HIDS_Upkeep+0x1d8>)
 801475a:	601a      	str	r2, [r3, #0]
 801475c:	e011      	b.n	8014782 <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 801475e:	f000 f8db 	bl	8014918 <HAL_GetTick>
 8014762:	0004      	movs	r4, r0
 8014764:	f7f5 fa36 	bl	8009bd4 <Check_USB_PowerOn>
 8014768:	1e03      	subs	r3, r0, #0
 801476a:	d103      	bne.n	8014774 <HIDS_Upkeep+0x160>
 801476c:	4b20      	ldr	r3, [pc, #128]	@ (80147f0 <HIDS_Upkeep+0x1dc>)
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d001      	beq.n	8014778 <HIDS_Upkeep+0x164>
 8014774:	4b1f      	ldr	r3, [pc, #124]	@ (80147f4 <HIDS_Upkeep+0x1e0>)
 8014776:	e001      	b.n	801477c <HIDS_Upkeep+0x168>
 8014778:	23fa      	movs	r3, #250	@ 0xfa
 801477a:	009b      	lsls	r3, r3, #2
 801477c:	191a      	adds	r2, r3, r4
 801477e:	4b1b      	ldr	r3, [pc, #108]	@ (80147ec <HIDS_Upkeep+0x1d8>)
 8014780:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8014782:	4b0f      	ldr	r3, [pc, #60]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 8014784:	2206      	movs	r2, #6
 8014786:	701a      	strb	r2, [r3, #0]
      break;
 8014788:	e015      	b.n	80147b6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 801478a:	4b18      	ldr	r3, [pc, #96]	@ (80147ec <HIDS_Upkeep+0x1d8>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	0018      	movs	r0, r3
 8014790:	f7ff faf4 	bl	8013d7c <TimestampIsReached>
 8014794:	1e03      	subs	r3, r0, #0
 8014796:	d00d      	beq.n	80147b4 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8014798:	4b09      	ldr	r3, [pc, #36]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 801479a:	2200      	movs	r2, #0
 801479c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801479e:	e009      	b.n	80147b4 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80147a0:	4b07      	ldr	r3, [pc, #28]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 80147a2:	2200      	movs	r2, #0
 80147a4:	701a      	strb	r2, [r3, #0]
      break;
 80147a6:	e006      	b.n	80147b6 <HIDS_Upkeep+0x1a2>
        break;
 80147a8:	46c0      	nop			@ (mov r8, r8)
 80147aa:	e004      	b.n	80147b6 <HIDS_Upkeep+0x1a2>
        break;
 80147ac:	46c0      	nop			@ (mov r8, r8)
 80147ae:	e002      	b.n	80147b6 <HIDS_Upkeep+0x1a2>
          break;
 80147b0:	46c0      	nop			@ (mov r8, r8)
 80147b2:	e000      	b.n	80147b6 <HIDS_Upkeep+0x1a2>
      break;
 80147b4:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 80147b6:	4b02      	ldr	r3, [pc, #8]	@ (80147c0 <HIDS_Upkeep+0x1ac>)
 80147b8:	781b      	ldrb	r3, [r3, #0]
}
 80147ba:	0018      	movs	r0, r3
 80147bc:	46bd      	mov	sp, r7
 80147be:	bdb0      	pop	{r4, r5, r7, pc}
 80147c0:	20002514 	.word	0x20002514
 80147c4:	0802e544 	.word	0x0802e544
 80147c8:	0802dc0c 	.word	0x0802dc0c
 80147cc:	0802dc40 	.word	0x0802dc40
 80147d0:	200024ec 	.word	0x200024ec
 80147d4:	200024e8 	.word	0x200024e8
 80147d8:	0802dc44 	.word	0x0802dc44
 80147dc:	0802db44 	.word	0x0802db44
 80147e0:	20002508 	.word	0x20002508
 80147e4:	0802dc78 	.word	0x0802dc78
 80147e8:	00002ee0 	.word	0x00002ee0
 80147ec:	20002510 	.word	0x20002510
 80147f0:	20002152 	.word	0x20002152
 80147f4:	00002710 	.word	0x00002710

080147f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80147f8:	480d      	ldr	r0, [pc, #52]	@ (8014830 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80147fa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80147fc:	f7fe ff18 	bl	8013630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014800:	480c      	ldr	r0, [pc, #48]	@ (8014834 <LoopForever+0x6>)
  ldr r1, =_edata
 8014802:	490d      	ldr	r1, [pc, #52]	@ (8014838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014804:	4a0d      	ldr	r2, [pc, #52]	@ (801483c <LoopForever+0xe>)
  movs r3, #0
 8014806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014808:	e002      	b.n	8014810 <LoopCopyDataInit>

0801480a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801480a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801480c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801480e:	3304      	adds	r3, #4

08014810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014814:	d3f9      	bcc.n	801480a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014816:	4a0a      	ldr	r2, [pc, #40]	@ (8014840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8014818:	4c0a      	ldr	r4, [pc, #40]	@ (8014844 <LoopForever+0x16>)
  movs r3, #0
 801481a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801481c:	e001      	b.n	8014822 <LoopFillZerobss>

0801481e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801481e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014820:	3204      	adds	r2, #4

08014822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014824:	d3fb      	bcc.n	801481e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014826:	f011 ff1b 	bl	8026660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801482a:	f7f8 f95f 	bl	800caec <main>

0801482e <LoopForever>:

LoopForever:
    b LoopForever
 801482e:	e7fe      	b.n	801482e <LoopForever>
   ldr   r0, =_estack
 8014830:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8014834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014838:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 801483c:	0802ef28 	.word	0x0802ef28
  ldr r2, =_sbss
 8014840:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8014844:	2000391c 	.word	0x2000391c

08014848 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014848:	e7fe      	b.n	8014848 <ADC1_COMP_IRQHandler>
	...

0801484c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8014852:	1dfb      	adds	r3, r7, #7
 8014854:	2200      	movs	r2, #0
 8014856:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8014858:	4b0b      	ldr	r3, [pc, #44]	@ (8014888 <HAL_Init+0x3c>)
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	4b0a      	ldr	r3, [pc, #40]	@ (8014888 <HAL_Init+0x3c>)
 801485e:	2140      	movs	r1, #64	@ 0x40
 8014860:	430a      	orrs	r2, r1
 8014862:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014864:	2003      	movs	r0, #3
 8014866:	f000 f811 	bl	801488c <HAL_InitTick>
 801486a:	1e03      	subs	r3, r0, #0
 801486c:	d003      	beq.n	8014876 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 801486e:	1dfb      	adds	r3, r7, #7
 8014870:	2201      	movs	r2, #1
 8014872:	701a      	strb	r2, [r3, #0]
 8014874:	e001      	b.n	801487a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8014876:	f7fe fd8f 	bl	8013398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801487a:	1dfb      	adds	r3, r7, #7
 801487c:	781b      	ldrb	r3, [r3, #0]
}
 801487e:	0018      	movs	r0, r3
 8014880:	46bd      	mov	sp, r7
 8014882:	b002      	add	sp, #8
 8014884:	bd80      	pop	{r7, pc}
 8014886:	46c0      	nop			@ (mov r8, r8)
 8014888:	40022000 	.word	0x40022000

0801488c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801488c:	b590      	push	{r4, r7, lr}
 801488e:	b083      	sub	sp, #12
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8014894:	4b14      	ldr	r3, [pc, #80]	@ (80148e8 <HAL_InitTick+0x5c>)
 8014896:	681c      	ldr	r4, [r3, #0]
 8014898:	4b14      	ldr	r3, [pc, #80]	@ (80148ec <HAL_InitTick+0x60>)
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	0019      	movs	r1, r3
 801489e:	23fa      	movs	r3, #250	@ 0xfa
 80148a0:	0098      	lsls	r0, r3, #2
 80148a2:	f7eb fc7f 	bl	80001a4 <__udivsi3>
 80148a6:	0003      	movs	r3, r0
 80148a8:	0019      	movs	r1, r3
 80148aa:	0020      	movs	r0, r4
 80148ac:	f7eb fc7a 	bl	80001a4 <__udivsi3>
 80148b0:	0003      	movs	r3, r0
 80148b2:	0018      	movs	r0, r3
 80148b4:	f000 fcdf 	bl	8015276 <HAL_SYSTICK_Config>
 80148b8:	1e03      	subs	r3, r0, #0
 80148ba:	d001      	beq.n	80148c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80148bc:	2301      	movs	r3, #1
 80148be:	e00f      	b.n	80148e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2b03      	cmp	r3, #3
 80148c4:	d80b      	bhi.n	80148de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	2301      	movs	r3, #1
 80148ca:	425b      	negs	r3, r3
 80148cc:	2200      	movs	r2, #0
 80148ce:	0018      	movs	r0, r3
 80148d0:	f000 fca8 	bl	8015224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80148d4:	4b06      	ldr	r3, [pc, #24]	@ (80148f0 <HAL_InitTick+0x64>)
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80148da:	2300      	movs	r3, #0
 80148dc:	e000      	b.n	80148e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80148de:	2301      	movs	r3, #1
}
 80148e0:	0018      	movs	r0, r3
 80148e2:	46bd      	mov	sp, r7
 80148e4:	b003      	add	sp, #12
 80148e6:	bd90      	pop	{r4, r7, pc}
 80148e8:	200000ec 	.word	0x200000ec
 80148ec:	20000100 	.word	0x20000100
 80148f0:	200000fc 	.word	0x200000fc

080148f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80148f8:	4b05      	ldr	r3, [pc, #20]	@ (8014910 <HAL_IncTick+0x1c>)
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	001a      	movs	r2, r3
 80148fe:	4b05      	ldr	r3, [pc, #20]	@ (8014914 <HAL_IncTick+0x20>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	18d2      	adds	r2, r2, r3
 8014904:	4b03      	ldr	r3, [pc, #12]	@ (8014914 <HAL_IncTick+0x20>)
 8014906:	601a      	str	r2, [r3, #0]
}
 8014908:	46c0      	nop			@ (mov r8, r8)
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	46c0      	nop			@ (mov r8, r8)
 8014910:	20000100 	.word	0x20000100
 8014914:	20002518 	.word	0x20002518

08014918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	af00      	add	r7, sp, #0
  return uwTick;
 801491c:	4b02      	ldr	r3, [pc, #8]	@ (8014928 <HAL_GetTick+0x10>)
 801491e:	681b      	ldr	r3, [r3, #0]
}
 8014920:	0018      	movs	r0, r3
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	46c0      	nop			@ (mov r8, r8)
 8014928:	20002518 	.word	0x20002518

0801492c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014934:	f7ff fff0 	bl	8014918 <HAL_GetTick>
 8014938:	0003      	movs	r3, r0
 801493a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	3301      	adds	r3, #1
 8014944:	d005      	beq.n	8014952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014946:	4b0a      	ldr	r3, [pc, #40]	@ (8014970 <HAL_Delay+0x44>)
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	001a      	movs	r2, r3
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	189b      	adds	r3, r3, r2
 8014950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014952:	46c0      	nop			@ (mov r8, r8)
 8014954:	f7ff ffe0 	bl	8014918 <HAL_GetTick>
 8014958:	0002      	movs	r2, r0
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	1ad3      	subs	r3, r2, r3
 801495e:	68fa      	ldr	r2, [r7, #12]
 8014960:	429a      	cmp	r2, r3
 8014962:	d8f7      	bhi.n	8014954 <HAL_Delay+0x28>
  {
  }
}
 8014964:	46c0      	nop			@ (mov r8, r8)
 8014966:	46c0      	nop			@ (mov r8, r8)
 8014968:	46bd      	mov	sp, r7
 801496a:	b004      	add	sp, #16
 801496c:	bd80      	pop	{r7, pc}
 801496e:	46c0      	nop			@ (mov r8, r8)
 8014970:	20000100 	.word	0x20000100

08014974 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8014978:	4b04      	ldr	r3, [pc, #16]	@ (801498c <HAL_SuspendTick+0x18>)
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	4b03      	ldr	r3, [pc, #12]	@ (801498c <HAL_SuspendTick+0x18>)
 801497e:	2102      	movs	r1, #2
 8014980:	438a      	bics	r2, r1
 8014982:	601a      	str	r2, [r3, #0]
}
 8014984:	46c0      	nop			@ (mov r8, r8)
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}
 801498a:	46c0      	nop			@ (mov r8, r8)
 801498c:	e000e010 	.word	0xe000e010

08014990 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8014994:	4b04      	ldr	r3, [pc, #16]	@ (80149a8 <HAL_ResumeTick+0x18>)
 8014996:	681a      	ldr	r2, [r3, #0]
 8014998:	4b03      	ldr	r3, [pc, #12]	@ (80149a8 <HAL_ResumeTick+0x18>)
 801499a:	2102      	movs	r1, #2
 801499c:	430a      	orrs	r2, r1
 801499e:	601a      	str	r2, [r3, #0]
}
 80149a0:	46c0      	nop			@ (mov r8, r8)
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	46c0      	nop			@ (mov r8, r8)
 80149a8:	e000e010 	.word	0xe000e010

080149ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d101      	bne.n	80149be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80149ba:	2301      	movs	r3, #1
 80149bc:	e159      	b.n	8014c72 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d10a      	bne.n	80149dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2200      	movs	r2, #0
 80149ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2250      	movs	r2, #80	@ 0x50
 80149d0:	2100      	movs	r1, #0
 80149d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	0018      	movs	r0, r3
 80149d8:	f7f6 f98e 	bl	800acf8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149e0:	2210      	movs	r2, #16
 80149e2:	4013      	ands	r3, r2
 80149e4:	2b10      	cmp	r3, #16
 80149e6:	d005      	beq.n	80149f4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	689b      	ldr	r3, [r3, #8]
 80149ee:	2204      	movs	r2, #4
 80149f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80149f2:	d00b      	beq.n	8014a0c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149f8:	2210      	movs	r2, #16
 80149fa:	431a      	orrs	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2250      	movs	r2, #80	@ 0x50
 8014a04:	2100      	movs	r1, #0
 8014a06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	e132      	b.n	8014c72 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a10:	4a9a      	ldr	r2, [pc, #616]	@ (8014c7c <HAL_ADC_Init+0x2d0>)
 8014a12:	4013      	ands	r3, r2
 8014a14:	2202      	movs	r2, #2
 8014a16:	431a      	orrs	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	689b      	ldr	r3, [r3, #8]
 8014a22:	2203      	movs	r2, #3
 8014a24:	4013      	ands	r3, r2
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d108      	bne.n	8014a3c <HAL_ADC_Init+0x90>
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2201      	movs	r2, #1
 8014a32:	4013      	ands	r3, r2
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d101      	bne.n	8014a3c <HAL_ADC_Init+0x90>
 8014a38:	2301      	movs	r3, #1
 8014a3a:	e000      	b.n	8014a3e <HAL_ADC_Init+0x92>
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d149      	bne.n	8014ad6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	685a      	ldr	r2, [r3, #4]
 8014a46:	23c0      	movs	r3, #192	@ 0xc0
 8014a48:	061b      	lsls	r3, r3, #24
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d00b      	beq.n	8014a66 <HAL_ADC_Init+0xba>
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	685a      	ldr	r2, [r3, #4]
 8014a52:	2380      	movs	r3, #128	@ 0x80
 8014a54:	05db      	lsls	r3, r3, #23
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d005      	beq.n	8014a66 <HAL_ADC_Init+0xba>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	685a      	ldr	r2, [r3, #4]
 8014a5e:	2380      	movs	r3, #128	@ 0x80
 8014a60:	061b      	lsls	r3, r3, #24
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d111      	bne.n	8014a8a <HAL_ADC_Init+0xde>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	691a      	ldr	r2, [r3, #16]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	0092      	lsls	r2, r2, #2
 8014a72:	0892      	lsrs	r2, r2, #2
 8014a74:	611a      	str	r2, [r3, #16]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	6919      	ldr	r1, [r3, #16]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	685a      	ldr	r2, [r3, #4]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	430a      	orrs	r2, r1
 8014a86:	611a      	str	r2, [r3, #16]
 8014a88:	e014      	b.n	8014ab4 <HAL_ADC_Init+0x108>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	691a      	ldr	r2, [r3, #16]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	0092      	lsls	r2, r2, #2
 8014a96:	0892      	lsrs	r2, r2, #2
 8014a98:	611a      	str	r2, [r3, #16]
 8014a9a:	4b79      	ldr	r3, [pc, #484]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	4b78      	ldr	r3, [pc, #480]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014aa0:	4978      	ldr	r1, [pc, #480]	@ (8014c84 <HAL_ADC_Init+0x2d8>)
 8014aa2:	400a      	ands	r2, r1
 8014aa4:	601a      	str	r2, [r3, #0]
 8014aa6:	4b76      	ldr	r3, [pc, #472]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014aa8:	6819      	ldr	r1, [r3, #0]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	685a      	ldr	r2, [r3, #4]
 8014aae:	4b74      	ldr	r3, [pc, #464]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014ab0:	430a      	orrs	r2, r1
 8014ab2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	68da      	ldr	r2, [r3, #12]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2118      	movs	r1, #24
 8014ac0:	438a      	bics	r2, r1
 8014ac2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	68d9      	ldr	r1, [r3, #12]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	689a      	ldr	r2, [r3, #8]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	430a      	orrs	r2, r1
 8014ad4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014ad8:	681a      	ldr	r2, [r3, #0]
 8014ada:	4b69      	ldr	r3, [pc, #420]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014adc:	496a      	ldr	r1, [pc, #424]	@ (8014c88 <HAL_ADC_Init+0x2dc>)
 8014ade:	400a      	ands	r2, r1
 8014ae0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014ae2:	4b67      	ldr	r3, [pc, #412]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014ae4:	6819      	ldr	r1, [r3, #0]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014aea:	065a      	lsls	r2, r3, #25
 8014aec:	4b64      	ldr	r3, [pc, #400]	@ (8014c80 <HAL_ADC_Init+0x2d4>)
 8014aee:	430a      	orrs	r2, r1
 8014af0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	689a      	ldr	r2, [r3, #8]
 8014af8:	2380      	movs	r3, #128	@ 0x80
 8014afa:	055b      	lsls	r3, r3, #21
 8014afc:	4013      	ands	r3, r2
 8014afe:	d108      	bne.n	8014b12 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	689a      	ldr	r2, [r3, #8]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	2180      	movs	r1, #128	@ 0x80
 8014b0c:	0549      	lsls	r1, r1, #21
 8014b0e:	430a      	orrs	r2, r1
 8014b10:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	68da      	ldr	r2, [r3, #12]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	495b      	ldr	r1, [pc, #364]	@ (8014c8c <HAL_ADC_Init+0x2e0>)
 8014b1e:	400a      	ands	r2, r1
 8014b20:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	68d9      	ldr	r1, [r3, #12]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	691b      	ldr	r3, [r3, #16]
 8014b30:	2b02      	cmp	r3, #2
 8014b32:	d101      	bne.n	8014b38 <HAL_ADC_Init+0x18c>
 8014b34:	2304      	movs	r3, #4
 8014b36:	e000      	b.n	8014b3a <HAL_ADC_Init+0x18e>
 8014b38:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b3a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2020      	movs	r0, #32
 8014b40:	5c1b      	ldrb	r3, [r3, r0]
 8014b42:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014b44:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	202c      	movs	r0, #44	@ 0x2c
 8014b4a:	5c1b      	ldrb	r3, [r3, r0]
 8014b4c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014b4e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014b54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	699b      	ldr	r3, [r3, #24]
 8014b5a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014b5c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	69db      	ldr	r3, [r3, #28]
 8014b62:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014b64:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	430a      	orrs	r2, r1
 8014b6c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b72:	23c2      	movs	r3, #194	@ 0xc2
 8014b74:	33ff      	adds	r3, #255	@ 0xff
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d00b      	beq.n	8014b92 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	68d9      	ldr	r1, [r3, #12]
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b88:	431a      	orrs	r2, r3
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	430a      	orrs	r2, r1
 8014b90:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	2221      	movs	r2, #33	@ 0x21
 8014b96:	5c9b      	ldrb	r3, [r3, r2]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d11a      	bne.n	8014bd2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2220      	movs	r2, #32
 8014ba0:	5c9b      	ldrb	r3, [r3, r2]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d109      	bne.n	8014bba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	68da      	ldr	r2, [r3, #12]
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	2180      	movs	r1, #128	@ 0x80
 8014bb2:	0249      	lsls	r1, r1, #9
 8014bb4:	430a      	orrs	r2, r1
 8014bb6:	60da      	str	r2, [r3, #12]
 8014bb8:	e00b      	b.n	8014bd2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bbe:	2220      	movs	r2, #32
 8014bc0:	431a      	orrs	r2, r3
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bca:	2201      	movs	r2, #1
 8014bcc:	431a      	orrs	r2, r3
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d11f      	bne.n	8014c1a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	691a      	ldr	r2, [r3, #16]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	492a      	ldr	r1, [pc, #168]	@ (8014c90 <HAL_ADC_Init+0x2e4>)
 8014be6:	400a      	ands	r2, r1
 8014be8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	6919      	ldr	r1, [r3, #16]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014bf8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014bfe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	430a      	orrs	r2, r1
 8014c06:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	691a      	ldr	r2, [r3, #16]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2101      	movs	r1, #1
 8014c14:	430a      	orrs	r2, r1
 8014c16:	611a      	str	r2, [r3, #16]
 8014c18:	e00e      	b.n	8014c38 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	691b      	ldr	r3, [r3, #16]
 8014c20:	2201      	movs	r2, #1
 8014c22:	4013      	ands	r3, r2
 8014c24:	2b01      	cmp	r3, #1
 8014c26:	d107      	bne.n	8014c38 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	691a      	ldr	r2, [r3, #16]
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	2101      	movs	r1, #1
 8014c34:	438a      	bics	r2, r1
 8014c36:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	695a      	ldr	r2, [r3, #20]
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	2107      	movs	r1, #7
 8014c44:	438a      	bics	r2, r1
 8014c46:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	6959      	ldr	r1, [r3, #20]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	430a      	orrs	r2, r1
 8014c58:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c64:	2203      	movs	r2, #3
 8014c66:	4393      	bics	r3, r2
 8014c68:	2201      	movs	r2, #1
 8014c6a:	431a      	orrs	r2, r3
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	0018      	movs	r0, r3
 8014c74:	46bd      	mov	sp, r7
 8014c76:	b002      	add	sp, #8
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	46c0      	nop			@ (mov r8, r8)
 8014c7c:	fffffefd 	.word	0xfffffefd
 8014c80:	40012708 	.word	0x40012708
 8014c84:	ffc3ffff 	.word	0xffc3ffff
 8014c88:	fdffffff 	.word	0xfdffffff
 8014c8c:	fffe0219 	.word	0xfffe0219
 8014c90:	fffffc03 	.word	0xfffffc03

08014c94 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014c94:	b590      	push	{r4, r7, lr}
 8014c96:	b085      	sub	sp, #20
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014c9c:	230f      	movs	r3, #15
 8014c9e:	18fb      	adds	r3, r7, r3
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	689b      	ldr	r3, [r3, #8]
 8014caa:	2204      	movs	r2, #4
 8014cac:	4013      	ands	r3, r2
 8014cae:	d138      	bne.n	8014d22 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2250      	movs	r2, #80	@ 0x50
 8014cb4:	5c9b      	ldrb	r3, [r3, r2]
 8014cb6:	2b01      	cmp	r3, #1
 8014cb8:	d101      	bne.n	8014cbe <HAL_ADC_Start+0x2a>
 8014cba:	2302      	movs	r3, #2
 8014cbc:	e038      	b.n	8014d30 <HAL_ADC_Start+0x9c>
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2250      	movs	r2, #80	@ 0x50
 8014cc2:	2101      	movs	r1, #1
 8014cc4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	69db      	ldr	r3, [r3, #28]
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d007      	beq.n	8014cde <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014cce:	230f      	movs	r3, #15
 8014cd0:	18fc      	adds	r4, r7, r3
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	0018      	movs	r0, r3
 8014cd6:	f000 f95f 	bl	8014f98 <ADC_Enable>
 8014cda:	0003      	movs	r3, r0
 8014cdc:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014cde:	230f      	movs	r3, #15
 8014ce0:	18fb      	adds	r3, r7, r3
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d120      	bne.n	8014d2a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014cec:	4a12      	ldr	r2, [pc, #72]	@ (8014d38 <HAL_ADC_Start+0xa4>)
 8014cee:	4013      	ands	r3, r2
 8014cf0:	2280      	movs	r2, #128	@ 0x80
 8014cf2:	0052      	lsls	r2, r2, #1
 8014cf4:	431a      	orrs	r2, r3
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2250      	movs	r2, #80	@ 0x50
 8014d04:	2100      	movs	r1, #0
 8014d06:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	221c      	movs	r2, #28
 8014d0e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	689a      	ldr	r2, [r3, #8]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	2104      	movs	r1, #4
 8014d1c:	430a      	orrs	r2, r1
 8014d1e:	609a      	str	r2, [r3, #8]
 8014d20:	e003      	b.n	8014d2a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014d22:	230f      	movs	r3, #15
 8014d24:	18fb      	adds	r3, r7, r3
 8014d26:	2202      	movs	r2, #2
 8014d28:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014d2a:	230f      	movs	r3, #15
 8014d2c:	18fb      	adds	r3, r7, r3
 8014d2e:	781b      	ldrb	r3, [r3, #0]
}
 8014d30:	0018      	movs	r0, r3
 8014d32:	46bd      	mov	sp, r7
 8014d34:	b005      	add	sp, #20
 8014d36:	bd90      	pop	{r4, r7, pc}
 8014d38:	fffff0fe 	.word	0xfffff0fe

08014d3c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014d46:	2300      	movs	r3, #0
 8014d48:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	695b      	ldr	r3, [r3, #20]
 8014d52:	2b08      	cmp	r3, #8
 8014d54:	d102      	bne.n	8014d5c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014d56:	2308      	movs	r3, #8
 8014d58:	60fb      	str	r3, [r7, #12]
 8014d5a:	e014      	b.n	8014d86 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	2201      	movs	r2, #1
 8014d64:	4013      	ands	r3, r2
 8014d66:	2b01      	cmp	r3, #1
 8014d68:	d10b      	bne.n	8014d82 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d6e:	2220      	movs	r2, #32
 8014d70:	431a      	orrs	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2250      	movs	r2, #80	@ 0x50
 8014d7a:	2100      	movs	r1, #0
 8014d7c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014d7e:	2301      	movs	r3, #1
 8014d80:	e072      	b.n	8014e68 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014d82:	230c      	movs	r3, #12
 8014d84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014d86:	f7ff fdc7 	bl	8014918 <HAL_GetTick>
 8014d8a:	0003      	movs	r3, r0
 8014d8c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d8e:	e01f      	b.n	8014dd0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	3301      	adds	r3, #1
 8014d94:	d01c      	beq.n	8014dd0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d007      	beq.n	8014dac <HAL_ADC_PollForConversion+0x70>
 8014d9c:	f7ff fdbc 	bl	8014918 <HAL_GetTick>
 8014da0:	0002      	movs	r2, r0
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	1ad3      	subs	r3, r2, r3
 8014da6:	683a      	ldr	r2, [r7, #0]
 8014da8:	429a      	cmp	r2, r3
 8014daa:	d211      	bcs.n	8014dd0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	4013      	ands	r3, r2
 8014db6:	d10b      	bne.n	8014dd0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dbc:	2204      	movs	r2, #4
 8014dbe:	431a      	orrs	r2, r3
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2250      	movs	r2, #80	@ 0x50
 8014dc8:	2100      	movs	r1, #0
 8014dca:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014dcc:	2303      	movs	r3, #3
 8014dce:	e04b      	b.n	8014e68 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	68fa      	ldr	r2, [r7, #12]
 8014dd8:	4013      	ands	r3, r2
 8014dda:	d0d9      	beq.n	8014d90 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014de0:	2280      	movs	r2, #128	@ 0x80
 8014de2:	0092      	lsls	r2, r2, #2
 8014de4:	431a      	orrs	r2, r3
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	68da      	ldr	r2, [r3, #12]
 8014df0:	23c0      	movs	r3, #192	@ 0xc0
 8014df2:	011b      	lsls	r3, r3, #4
 8014df4:	4013      	ands	r3, r2
 8014df6:	d12e      	bne.n	8014e56 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2220      	movs	r2, #32
 8014dfc:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d129      	bne.n	8014e56 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	2208      	movs	r2, #8
 8014e0a:	4013      	ands	r3, r2
 8014e0c:	2b08      	cmp	r3, #8
 8014e0e:	d122      	bne.n	8014e56 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	689b      	ldr	r3, [r3, #8]
 8014e16:	2204      	movs	r2, #4
 8014e18:	4013      	ands	r3, r2
 8014e1a:	d110      	bne.n	8014e3e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	685a      	ldr	r2, [r3, #4]
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	210c      	movs	r1, #12
 8014e28:	438a      	bics	r2, r1
 8014e2a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e30:	4a0f      	ldr	r2, [pc, #60]	@ (8014e70 <HAL_ADC_PollForConversion+0x134>)
 8014e32:	4013      	ands	r3, r2
 8014e34:	2201      	movs	r2, #1
 8014e36:	431a      	orrs	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8014e3c:	e00b      	b.n	8014e56 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e42:	2220      	movs	r2, #32
 8014e44:	431a      	orrs	r2, r3
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e4e:	2201      	movs	r2, #1
 8014e50:	431a      	orrs	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	699b      	ldr	r3, [r3, #24]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d103      	bne.n	8014e66 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	220c      	movs	r2, #12
 8014e64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e66:	2300      	movs	r3, #0
}
 8014e68:	0018      	movs	r0, r3
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	b004      	add	sp, #16
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	fffffefe 	.word	0xfffffefe

08014e74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014e82:	0018      	movs	r0, r3
 8014e84:	46bd      	mov	sp, r7
 8014e86:	b002      	add	sp, #8
 8014e88:	bd80      	pop	{r7, pc}
	...

08014e8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2250      	movs	r2, #80	@ 0x50
 8014e9a:	5c9b      	ldrb	r3, [r3, r2]
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d101      	bne.n	8014ea4 <HAL_ADC_ConfigChannel+0x18>
 8014ea0:	2302      	movs	r3, #2
 8014ea2:	e06c      	b.n	8014f7e <HAL_ADC_ConfigChannel+0xf2>
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2250      	movs	r2, #80	@ 0x50
 8014ea8:	2101      	movs	r1, #1
 8014eaa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	689b      	ldr	r3, [r3, #8]
 8014eb2:	2204      	movs	r2, #4
 8014eb4:	4013      	ands	r3, r2
 8014eb6:	d00b      	beq.n	8014ed0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ebc:	2220      	movs	r2, #32
 8014ebe:	431a      	orrs	r2, r3
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2250      	movs	r2, #80	@ 0x50
 8014ec8:	2100      	movs	r1, #0
 8014eca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014ecc:	2301      	movs	r3, #1
 8014ece:	e056      	b.n	8014f7e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8014f88 <HAL_ADC_ConfigChannel+0xfc>)
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	d028      	beq.n	8014f2c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	035b      	lsls	r3, r3, #13
 8014ee6:	0b5a      	lsrs	r2, r3, #13
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	430a      	orrs	r2, r1
 8014eee:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	2380      	movs	r3, #128	@ 0x80
 8014ef6:	02db      	lsls	r3, r3, #11
 8014ef8:	4013      	ands	r3, r2
 8014efa:	d009      	beq.n	8014f10 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014efc:	4b23      	ldr	r3, [pc, #140]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014efe:	681a      	ldr	r2, [r3, #0]
 8014f00:	4b22      	ldr	r3, [pc, #136]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014f02:	2180      	movs	r1, #128	@ 0x80
 8014f04:	0409      	lsls	r1, r1, #16
 8014f06:	430a      	orrs	r2, r1
 8014f08:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014f0a:	200a      	movs	r0, #10
 8014f0c:	f000 f8ac 	bl	8015068 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	2380      	movs	r3, #128	@ 0x80
 8014f16:	029b      	lsls	r3, r3, #10
 8014f18:	4013      	ands	r3, r2
 8014f1a:	d02b      	beq.n	8014f74 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	4b1a      	ldr	r3, [pc, #104]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014f22:	2180      	movs	r1, #128	@ 0x80
 8014f24:	03c9      	lsls	r1, r1, #15
 8014f26:	430a      	orrs	r2, r1
 8014f28:	601a      	str	r2, [r3, #0]
 8014f2a:	e023      	b.n	8014f74 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	035b      	lsls	r3, r3, #13
 8014f38:	0b5b      	lsrs	r3, r3, #13
 8014f3a:	43d9      	mvns	r1, r3
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	400a      	ands	r2, r1
 8014f42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	2380      	movs	r3, #128	@ 0x80
 8014f4a:	02db      	lsls	r3, r3, #11
 8014f4c:	4013      	ands	r3, r2
 8014f4e:	d005      	beq.n	8014f5c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014f50:	4b0e      	ldr	r3, [pc, #56]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	4b0d      	ldr	r3, [pc, #52]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014f56:	490e      	ldr	r1, [pc, #56]	@ (8014f90 <HAL_ADC_ConfigChannel+0x104>)
 8014f58:	400a      	ands	r2, r1
 8014f5a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	2380      	movs	r3, #128	@ 0x80
 8014f62:	029b      	lsls	r3, r3, #10
 8014f64:	4013      	ands	r3, r2
 8014f66:	d005      	beq.n	8014f74 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014f68:	4b08      	ldr	r3, [pc, #32]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014f6a:	681a      	ldr	r2, [r3, #0]
 8014f6c:	4b07      	ldr	r3, [pc, #28]	@ (8014f8c <HAL_ADC_ConfigChannel+0x100>)
 8014f6e:	4909      	ldr	r1, [pc, #36]	@ (8014f94 <HAL_ADC_ConfigChannel+0x108>)
 8014f70:	400a      	ands	r2, r1
 8014f72:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2250      	movs	r2, #80	@ 0x50
 8014f78:	2100      	movs	r1, #0
 8014f7a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014f7c:	2300      	movs	r3, #0
}
 8014f7e:	0018      	movs	r0, r3
 8014f80:	46bd      	mov	sp, r7
 8014f82:	b002      	add	sp, #8
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	46c0      	nop			@ (mov r8, r8)
 8014f88:	00001001 	.word	0x00001001
 8014f8c:	40012708 	.word	0x40012708
 8014f90:	ff7fffff 	.word	0xff7fffff
 8014f94:	ffbfffff 	.word	0xffbfffff

08014f98 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b084      	sub	sp, #16
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	2203      	movs	r2, #3
 8014fac:	4013      	ands	r3, r2
 8014fae:	2b01      	cmp	r3, #1
 8014fb0:	d108      	bne.n	8014fc4 <ADC_Enable+0x2c>
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2201      	movs	r2, #1
 8014fba:	4013      	ands	r3, r2
 8014fbc:	2b01      	cmp	r3, #1
 8014fbe:	d101      	bne.n	8014fc4 <ADC_Enable+0x2c>
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	e000      	b.n	8014fc6 <ADC_Enable+0x2e>
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d146      	bne.n	8015058 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	689b      	ldr	r3, [r3, #8]
 8014fd0:	4a24      	ldr	r2, [pc, #144]	@ (8015064 <ADC_Enable+0xcc>)
 8014fd2:	4013      	ands	r3, r2
 8014fd4:	d00d      	beq.n	8014ff2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fda:	2210      	movs	r2, #16
 8014fdc:	431a      	orrs	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	431a      	orrs	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e033      	b.n	801505a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	689a      	ldr	r2, [r3, #8]
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2101      	movs	r1, #1
 8014ffe:	430a      	orrs	r2, r1
 8015000:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8015002:	2001      	movs	r0, #1
 8015004:	f000 f830 	bl	8015068 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8015008:	f7ff fc86 	bl	8014918 <HAL_GetTick>
 801500c:	0003      	movs	r3, r0
 801500e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015010:	e01b      	b.n	801504a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8015012:	f7ff fc81 	bl	8014918 <HAL_GetTick>
 8015016:	0002      	movs	r2, r0
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	1ad3      	subs	r3, r2, r3
 801501c:	2b0a      	cmp	r3, #10
 801501e:	d914      	bls.n	801504a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	2201      	movs	r2, #1
 8015028:	4013      	ands	r3, r2
 801502a:	2b01      	cmp	r3, #1
 801502c:	d00d      	beq.n	801504a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015032:	2210      	movs	r2, #16
 8015034:	431a      	orrs	r2, r3
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801503e:	2201      	movs	r2, #1
 8015040:	431a      	orrs	r2, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8015046:	2301      	movs	r3, #1
 8015048:	e007      	b.n	801505a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2201      	movs	r2, #1
 8015052:	4013      	ands	r3, r2
 8015054:	2b01      	cmp	r3, #1
 8015056:	d1dc      	bne.n	8015012 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	0018      	movs	r0, r3
 801505c:	46bd      	mov	sp, r7
 801505e:	b004      	add	sp, #16
 8015060:	bd80      	pop	{r7, pc}
 8015062:	46c0      	nop			@ (mov r8, r8)
 8015064:	80000017 	.word	0x80000017

08015068 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8015070:	4b0b      	ldr	r3, [pc, #44]	@ (80150a0 <ADC_DelayMicroSecond+0x38>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	490b      	ldr	r1, [pc, #44]	@ (80150a4 <ADC_DelayMicroSecond+0x3c>)
 8015076:	0018      	movs	r0, r3
 8015078:	f7eb f894 	bl	80001a4 <__udivsi3>
 801507c:	0003      	movs	r3, r0
 801507e:	001a      	movs	r2, r3
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	4353      	muls	r3, r2
 8015084:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8015086:	e002      	b.n	801508e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	3b01      	subs	r3, #1
 801508c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d1f9      	bne.n	8015088 <ADC_DelayMicroSecond+0x20>
  }
}
 8015094:	46c0      	nop			@ (mov r8, r8)
 8015096:	46c0      	nop			@ (mov r8, r8)
 8015098:	46bd      	mov	sp, r7
 801509a:	b004      	add	sp, #16
 801509c:	bd80      	pop	{r7, pc}
 801509e:	46c0      	nop			@ (mov r8, r8)
 80150a0:	200000ec 	.word	0x200000ec
 80150a4:	000f4240 	.word	0x000f4240

080150a8 <__NVIC_EnableIRQ>:
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	0002      	movs	r2, r0
 80150b0:	1dfb      	adds	r3, r7, #7
 80150b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80150b4:	1dfb      	adds	r3, r7, #7
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80150ba:	d809      	bhi.n	80150d0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80150bc:	1dfb      	adds	r3, r7, #7
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	001a      	movs	r2, r3
 80150c2:	231f      	movs	r3, #31
 80150c4:	401a      	ands	r2, r3
 80150c6:	4b04      	ldr	r3, [pc, #16]	@ (80150d8 <__NVIC_EnableIRQ+0x30>)
 80150c8:	2101      	movs	r1, #1
 80150ca:	4091      	lsls	r1, r2
 80150cc:	000a      	movs	r2, r1
 80150ce:	601a      	str	r2, [r3, #0]
}
 80150d0:	46c0      	nop			@ (mov r8, r8)
 80150d2:	46bd      	mov	sp, r7
 80150d4:	b002      	add	sp, #8
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	e000e100 	.word	0xe000e100

080150dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80150dc:	b590      	push	{r4, r7, lr}
 80150de:	b083      	sub	sp, #12
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	0002      	movs	r2, r0
 80150e4:	6039      	str	r1, [r7, #0]
 80150e6:	1dfb      	adds	r3, r7, #7
 80150e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80150ea:	1dfb      	adds	r3, r7, #7
 80150ec:	781b      	ldrb	r3, [r3, #0]
 80150ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80150f0:	d828      	bhi.n	8015144 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80150f2:	4a2f      	ldr	r2, [pc, #188]	@ (80151b0 <__NVIC_SetPriority+0xd4>)
 80150f4:	1dfb      	adds	r3, r7, #7
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	b25b      	sxtb	r3, r3
 80150fa:	089b      	lsrs	r3, r3, #2
 80150fc:	33c0      	adds	r3, #192	@ 0xc0
 80150fe:	009b      	lsls	r3, r3, #2
 8015100:	589b      	ldr	r3, [r3, r2]
 8015102:	1dfa      	adds	r2, r7, #7
 8015104:	7812      	ldrb	r2, [r2, #0]
 8015106:	0011      	movs	r1, r2
 8015108:	2203      	movs	r2, #3
 801510a:	400a      	ands	r2, r1
 801510c:	00d2      	lsls	r2, r2, #3
 801510e:	21ff      	movs	r1, #255	@ 0xff
 8015110:	4091      	lsls	r1, r2
 8015112:	000a      	movs	r2, r1
 8015114:	43d2      	mvns	r2, r2
 8015116:	401a      	ands	r2, r3
 8015118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	019b      	lsls	r3, r3, #6
 801511e:	22ff      	movs	r2, #255	@ 0xff
 8015120:	401a      	ands	r2, r3
 8015122:	1dfb      	adds	r3, r7, #7
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	0018      	movs	r0, r3
 8015128:	2303      	movs	r3, #3
 801512a:	4003      	ands	r3, r0
 801512c:	00db      	lsls	r3, r3, #3
 801512e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015130:	481f      	ldr	r0, [pc, #124]	@ (80151b0 <__NVIC_SetPriority+0xd4>)
 8015132:	1dfb      	adds	r3, r7, #7
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	b25b      	sxtb	r3, r3
 8015138:	089b      	lsrs	r3, r3, #2
 801513a:	430a      	orrs	r2, r1
 801513c:	33c0      	adds	r3, #192	@ 0xc0
 801513e:	009b      	lsls	r3, r3, #2
 8015140:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8015142:	e031      	b.n	80151a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015144:	4a1b      	ldr	r2, [pc, #108]	@ (80151b4 <__NVIC_SetPriority+0xd8>)
 8015146:	1dfb      	adds	r3, r7, #7
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	0019      	movs	r1, r3
 801514c:	230f      	movs	r3, #15
 801514e:	400b      	ands	r3, r1
 8015150:	3b08      	subs	r3, #8
 8015152:	089b      	lsrs	r3, r3, #2
 8015154:	3306      	adds	r3, #6
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	18d3      	adds	r3, r2, r3
 801515a:	3304      	adds	r3, #4
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	1dfa      	adds	r2, r7, #7
 8015160:	7812      	ldrb	r2, [r2, #0]
 8015162:	0011      	movs	r1, r2
 8015164:	2203      	movs	r2, #3
 8015166:	400a      	ands	r2, r1
 8015168:	00d2      	lsls	r2, r2, #3
 801516a:	21ff      	movs	r1, #255	@ 0xff
 801516c:	4091      	lsls	r1, r2
 801516e:	000a      	movs	r2, r1
 8015170:	43d2      	mvns	r2, r2
 8015172:	401a      	ands	r2, r3
 8015174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	019b      	lsls	r3, r3, #6
 801517a:	22ff      	movs	r2, #255	@ 0xff
 801517c:	401a      	ands	r2, r3
 801517e:	1dfb      	adds	r3, r7, #7
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	0018      	movs	r0, r3
 8015184:	2303      	movs	r3, #3
 8015186:	4003      	ands	r3, r0
 8015188:	00db      	lsls	r3, r3, #3
 801518a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801518c:	4809      	ldr	r0, [pc, #36]	@ (80151b4 <__NVIC_SetPriority+0xd8>)
 801518e:	1dfb      	adds	r3, r7, #7
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	001c      	movs	r4, r3
 8015194:	230f      	movs	r3, #15
 8015196:	4023      	ands	r3, r4
 8015198:	3b08      	subs	r3, #8
 801519a:	089b      	lsrs	r3, r3, #2
 801519c:	430a      	orrs	r2, r1
 801519e:	3306      	adds	r3, #6
 80151a0:	009b      	lsls	r3, r3, #2
 80151a2:	18c3      	adds	r3, r0, r3
 80151a4:	3304      	adds	r3, #4
 80151a6:	601a      	str	r2, [r3, #0]
}
 80151a8:	46c0      	nop			@ (mov r8, r8)
 80151aa:	46bd      	mov	sp, r7
 80151ac:	b003      	add	sp, #12
 80151ae:	bd90      	pop	{r4, r7, pc}
 80151b0:	e000e100 	.word	0xe000e100
 80151b4:	e000ed00 	.word	0xe000ed00

080151b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80151bc:	f3bf 8f4f 	dsb	sy
}
 80151c0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80151c2:	4b04      	ldr	r3, [pc, #16]	@ (80151d4 <__NVIC_SystemReset+0x1c>)
 80151c4:	4a04      	ldr	r2, [pc, #16]	@ (80151d8 <__NVIC_SystemReset+0x20>)
 80151c6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80151c8:	f3bf 8f4f 	dsb	sy
}
 80151cc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80151ce:	46c0      	nop			@ (mov r8, r8)
 80151d0:	e7fd      	b.n	80151ce <__NVIC_SystemReset+0x16>
 80151d2:	46c0      	nop			@ (mov r8, r8)
 80151d4:	e000ed00 	.word	0xe000ed00
 80151d8:	05fa0004 	.word	0x05fa0004

080151dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	1e5a      	subs	r2, r3, #1
 80151e8:	2380      	movs	r3, #128	@ 0x80
 80151ea:	045b      	lsls	r3, r3, #17
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d301      	bcc.n	80151f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80151f0:	2301      	movs	r3, #1
 80151f2:	e010      	b.n	8015216 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80151f4:	4b0a      	ldr	r3, [pc, #40]	@ (8015220 <SysTick_Config+0x44>)
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	3a01      	subs	r2, #1
 80151fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80151fc:	2301      	movs	r3, #1
 80151fe:	425b      	negs	r3, r3
 8015200:	2103      	movs	r1, #3
 8015202:	0018      	movs	r0, r3
 8015204:	f7ff ff6a 	bl	80150dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015208:	4b05      	ldr	r3, [pc, #20]	@ (8015220 <SysTick_Config+0x44>)
 801520a:	2200      	movs	r2, #0
 801520c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801520e:	4b04      	ldr	r3, [pc, #16]	@ (8015220 <SysTick_Config+0x44>)
 8015210:	2207      	movs	r2, #7
 8015212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015214:	2300      	movs	r3, #0
}
 8015216:	0018      	movs	r0, r3
 8015218:	46bd      	mov	sp, r7
 801521a:	b002      	add	sp, #8
 801521c:	bd80      	pop	{r7, pc}
 801521e:	46c0      	nop			@ (mov r8, r8)
 8015220:	e000e010 	.word	0xe000e010

08015224 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015224:	b580      	push	{r7, lr}
 8015226:	b084      	sub	sp, #16
 8015228:	af00      	add	r7, sp, #0
 801522a:	60b9      	str	r1, [r7, #8]
 801522c:	607a      	str	r2, [r7, #4]
 801522e:	210f      	movs	r1, #15
 8015230:	187b      	adds	r3, r7, r1
 8015232:	1c02      	adds	r2, r0, #0
 8015234:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8015236:	68ba      	ldr	r2, [r7, #8]
 8015238:	187b      	adds	r3, r7, r1
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	b25b      	sxtb	r3, r3
 801523e:	0011      	movs	r1, r2
 8015240:	0018      	movs	r0, r3
 8015242:	f7ff ff4b 	bl	80150dc <__NVIC_SetPriority>
}
 8015246:	46c0      	nop			@ (mov r8, r8)
 8015248:	46bd      	mov	sp, r7
 801524a:	b004      	add	sp, #16
 801524c:	bd80      	pop	{r7, pc}

0801524e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801524e:	b580      	push	{r7, lr}
 8015250:	b082      	sub	sp, #8
 8015252:	af00      	add	r7, sp, #0
 8015254:	0002      	movs	r2, r0
 8015256:	1dfb      	adds	r3, r7, #7
 8015258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801525a:	1dfb      	adds	r3, r7, #7
 801525c:	781b      	ldrb	r3, [r3, #0]
 801525e:	b25b      	sxtb	r3, r3
 8015260:	0018      	movs	r0, r3
 8015262:	f7ff ff21 	bl	80150a8 <__NVIC_EnableIRQ>
}
 8015266:	46c0      	nop			@ (mov r8, r8)
 8015268:	46bd      	mov	sp, r7
 801526a:	b002      	add	sp, #8
 801526c:	bd80      	pop	{r7, pc}

0801526e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8015272:	f7ff ffa1 	bl	80151b8 <__NVIC_SystemReset>

08015276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8015276:	b580      	push	{r7, lr}
 8015278:	b082      	sub	sp, #8
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	0018      	movs	r0, r3
 8015282:	f7ff ffab 	bl	80151dc <SysTick_Config>
 8015286:	0003      	movs	r3, r0
}
 8015288:	0018      	movs	r0, r3
 801528a:	46bd      	mov	sp, r7
 801528c:	b002      	add	sp, #8
 801528e:	bd80      	pop	{r7, pc}

08015290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d101      	bne.n	80152a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801529e:	2301      	movs	r3, #1
 80152a0:	e061      	b.n	8015366 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	4a32      	ldr	r2, [pc, #200]	@ (8015370 <HAL_DMA_Init+0xe0>)
 80152a8:	4694      	mov	ip, r2
 80152aa:	4463      	add	r3, ip
 80152ac:	2114      	movs	r1, #20
 80152ae:	0018      	movs	r0, r3
 80152b0:	f7ea ff78 	bl	80001a4 <__udivsi3>
 80152b4:	0003      	movs	r3, r0
 80152b6:	009a      	lsls	r2, r3, #2
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	4a2d      	ldr	r2, [pc, #180]	@ (8015374 <HAL_DMA_Init+0xe4>)
 80152c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2225      	movs	r2, #37	@ 0x25
 80152c6:	2102      	movs	r1, #2
 80152c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	4a28      	ldr	r2, [pc, #160]	@ (8015378 <HAL_DMA_Init+0xe8>)
 80152d6:	4013      	ands	r3, r2
 80152d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80152e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	691b      	ldr	r3, [r3, #16]
 80152e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80152ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	699b      	ldr	r3, [r3, #24]
 80152f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80152fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6a1b      	ldr	r3, [r3, #32]
 8015300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015302:	68fa      	ldr	r2, [r7, #12]
 8015304:	4313      	orrs	r3, r2
 8015306:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	68fa      	ldr	r2, [r7, #12]
 801530e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	689a      	ldr	r2, [r3, #8]
 8015314:	2380      	movs	r3, #128	@ 0x80
 8015316:	01db      	lsls	r3, r3, #7
 8015318:	429a      	cmp	r2, r3
 801531a:	d018      	beq.n	801534e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 801531c:	4b17      	ldr	r3, [pc, #92]	@ (801537c <HAL_DMA_Init+0xec>)
 801531e:	681a      	ldr	r2, [r3, #0]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015324:	211c      	movs	r1, #28
 8015326:	400b      	ands	r3, r1
 8015328:	210f      	movs	r1, #15
 801532a:	4099      	lsls	r1, r3
 801532c:	000b      	movs	r3, r1
 801532e:	43d9      	mvns	r1, r3
 8015330:	4b12      	ldr	r3, [pc, #72]	@ (801537c <HAL_DMA_Init+0xec>)
 8015332:	400a      	ands	r2, r1
 8015334:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8015336:	4b11      	ldr	r3, [pc, #68]	@ (801537c <HAL_DMA_Init+0xec>)
 8015338:	6819      	ldr	r1, [r3, #0]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	685a      	ldr	r2, [r3, #4]
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015342:	201c      	movs	r0, #28
 8015344:	4003      	ands	r3, r0
 8015346:	409a      	lsls	r2, r3
 8015348:	4b0c      	ldr	r3, [pc, #48]	@ (801537c <HAL_DMA_Init+0xec>)
 801534a:	430a      	orrs	r2, r1
 801534c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2200      	movs	r2, #0
 8015352:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2225      	movs	r2, #37	@ 0x25
 8015358:	2101      	movs	r1, #1
 801535a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2224      	movs	r2, #36	@ 0x24
 8015360:	2100      	movs	r1, #0
 8015362:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	0018      	movs	r0, r3
 8015368:	46bd      	mov	sp, r7
 801536a:	b004      	add	sp, #16
 801536c:	bd80      	pop	{r7, pc}
 801536e:	46c0      	nop			@ (mov r8, r8)
 8015370:	bffdfff8 	.word	0xbffdfff8
 8015374:	40020000 	.word	0x40020000
 8015378:	ffff800f 	.word	0xffff800f
 801537c:	400200a8 	.word	0x400200a8

08015380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b086      	sub	sp, #24
 8015384:	af00      	add	r7, sp, #0
 8015386:	60f8      	str	r0, [r7, #12]
 8015388:	60b9      	str	r1, [r7, #8]
 801538a:	607a      	str	r2, [r7, #4]
 801538c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801538e:	2317      	movs	r3, #23
 8015390:	18fb      	adds	r3, r7, r3
 8015392:	2200      	movs	r2, #0
 8015394:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	2224      	movs	r2, #36	@ 0x24
 801539a:	5c9b      	ldrb	r3, [r3, r2]
 801539c:	2b01      	cmp	r3, #1
 801539e:	d101      	bne.n	80153a4 <HAL_DMA_Start_IT+0x24>
 80153a0:	2302      	movs	r3, #2
 80153a2:	e04f      	b.n	8015444 <HAL_DMA_Start_IT+0xc4>
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2224      	movs	r2, #36	@ 0x24
 80153a8:	2101      	movs	r1, #1
 80153aa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2225      	movs	r2, #37	@ 0x25
 80153b0:	5c9b      	ldrb	r3, [r3, r2]
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d13a      	bne.n	801542e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	2225      	movs	r2, #37	@ 0x25
 80153bc:	2102      	movs	r1, #2
 80153be:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2200      	movs	r2, #0
 80153c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	2101      	movs	r1, #1
 80153d2:	438a      	bics	r2, r1
 80153d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	68b9      	ldr	r1, [r7, #8]
 80153dc:	68f8      	ldr	r0, [r7, #12]
 80153de:	f000 f976 	bl	80156ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d008      	beq.n	80153fc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	681a      	ldr	r2, [r3, #0]
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	210e      	movs	r1, #14
 80153f6:	430a      	orrs	r2, r1
 80153f8:	601a      	str	r2, [r3, #0]
 80153fa:	e00f      	b.n	801541c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	2104      	movs	r1, #4
 8015408:	438a      	bics	r2, r1
 801540a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	681a      	ldr	r2, [r3, #0]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	210a      	movs	r1, #10
 8015418:	430a      	orrs	r2, r1
 801541a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	681a      	ldr	r2, [r3, #0]
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	2101      	movs	r1, #1
 8015428:	430a      	orrs	r2, r1
 801542a:	601a      	str	r2, [r3, #0]
 801542c:	e007      	b.n	801543e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2224      	movs	r2, #36	@ 0x24
 8015432:	2100      	movs	r1, #0
 8015434:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8015436:	2317      	movs	r3, #23
 8015438:	18fb      	adds	r3, r7, r3
 801543a:	2202      	movs	r2, #2
 801543c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 801543e:	2317      	movs	r3, #23
 8015440:	18fb      	adds	r3, r7, r3
 8015442:	781b      	ldrb	r3, [r3, #0]
}
 8015444:	0018      	movs	r0, r3
 8015446:	46bd      	mov	sp, r7
 8015448:	b006      	add	sp, #24
 801544a:	bd80      	pop	{r7, pc}

0801544c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b084      	sub	sp, #16
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015454:	230f      	movs	r3, #15
 8015456:	18fb      	adds	r3, r7, r3
 8015458:	2200      	movs	r2, #0
 801545a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2225      	movs	r2, #37	@ 0x25
 8015460:	5c9b      	ldrb	r3, [r3, r2]
 8015462:	b2db      	uxtb	r3, r3
 8015464:	2b02      	cmp	r3, #2
 8015466:	d008      	beq.n	801547a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2204      	movs	r2, #4
 801546c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2224      	movs	r2, #36	@ 0x24
 8015472:	2100      	movs	r1, #0
 8015474:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8015476:	2301      	movs	r3, #1
 8015478:	e024      	b.n	80154c4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	210e      	movs	r1, #14
 8015486:	438a      	bics	r2, r1
 8015488:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2101      	movs	r1, #1
 8015496:	438a      	bics	r2, r1
 8015498:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801549e:	221c      	movs	r2, #28
 80154a0:	401a      	ands	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154a6:	2101      	movs	r1, #1
 80154a8:	4091      	lsls	r1, r2
 80154aa:	000a      	movs	r2, r1
 80154ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2225      	movs	r2, #37	@ 0x25
 80154b2:	2101      	movs	r1, #1
 80154b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2224      	movs	r2, #36	@ 0x24
 80154ba:	2100      	movs	r1, #0
 80154bc:	5499      	strb	r1, [r3, r2]

    return status;
 80154be:	230f      	movs	r3, #15
 80154c0:	18fb      	adds	r3, r7, r3
 80154c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80154c4:	0018      	movs	r0, r3
 80154c6:	46bd      	mov	sp, r7
 80154c8:	b004      	add	sp, #16
 80154ca:	bd80      	pop	{r7, pc}

080154cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b084      	sub	sp, #16
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80154d4:	210f      	movs	r1, #15
 80154d6:	187b      	adds	r3, r7, r1
 80154d8:	2200      	movs	r2, #0
 80154da:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2225      	movs	r2, #37	@ 0x25
 80154e0:	5c9b      	ldrb	r3, [r3, r2]
 80154e2:	b2db      	uxtb	r3, r3
 80154e4:	2b02      	cmp	r3, #2
 80154e6:	d006      	beq.n	80154f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2204      	movs	r2, #4
 80154ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80154ee:	187b      	adds	r3, r7, r1
 80154f0:	2201      	movs	r2, #1
 80154f2:	701a      	strb	r2, [r3, #0]
 80154f4:	e02a      	b.n	801554c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	210e      	movs	r1, #14
 8015502:	438a      	bics	r2, r1
 8015504:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	2101      	movs	r1, #1
 8015512:	438a      	bics	r2, r1
 8015514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801551a:	221c      	movs	r2, #28
 801551c:	401a      	ands	r2, r3
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015522:	2101      	movs	r1, #1
 8015524:	4091      	lsls	r1, r2
 8015526:	000a      	movs	r2, r1
 8015528:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2225      	movs	r2, #37	@ 0x25
 801552e:	2101      	movs	r1, #1
 8015530:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2224      	movs	r2, #36	@ 0x24
 8015536:	2100      	movs	r1, #0
 8015538:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801553e:	2b00      	cmp	r3, #0
 8015540:	d004      	beq.n	801554c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015546:	687a      	ldr	r2, [r7, #4]
 8015548:	0010      	movs	r0, r2
 801554a:	4798      	blx	r3
    }
  }
  return status;
 801554c:	230f      	movs	r3, #15
 801554e:	18fb      	adds	r3, r7, r3
 8015550:	781b      	ldrb	r3, [r3, #0]
}
 8015552:	0018      	movs	r0, r3
 8015554:	46bd      	mov	sp, r7
 8015556:	b004      	add	sp, #16
 8015558:	bd80      	pop	{r7, pc}

0801555a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801555a:	b580      	push	{r7, lr}
 801555c:	b084      	sub	sp, #16
 801555e:	af00      	add	r7, sp, #0
 8015560:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015576:	221c      	movs	r2, #28
 8015578:	4013      	ands	r3, r2
 801557a:	2204      	movs	r2, #4
 801557c:	409a      	lsls	r2, r3
 801557e:	0013      	movs	r3, r2
 8015580:	68fa      	ldr	r2, [r7, #12]
 8015582:	4013      	ands	r3, r2
 8015584:	d026      	beq.n	80155d4 <HAL_DMA_IRQHandler+0x7a>
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	2204      	movs	r2, #4
 801558a:	4013      	ands	r3, r2
 801558c:	d022      	beq.n	80155d4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	2220      	movs	r2, #32
 8015596:	4013      	ands	r3, r2
 8015598:	d107      	bne.n	80155aa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	681a      	ldr	r2, [r3, #0]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2104      	movs	r1, #4
 80155a6:	438a      	bics	r2, r1
 80155a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155ae:	221c      	movs	r2, #28
 80155b0:	401a      	ands	r2, r3
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155b6:	2104      	movs	r1, #4
 80155b8:	4091      	lsls	r1, r2
 80155ba:	000a      	movs	r2, r1
 80155bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d100      	bne.n	80155c8 <HAL_DMA_IRQHandler+0x6e>
 80155c6:	e071      	b.n	80156ac <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155cc:	687a      	ldr	r2, [r7, #4]
 80155ce:	0010      	movs	r0, r2
 80155d0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80155d2:	e06b      	b.n	80156ac <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155d8:	221c      	movs	r2, #28
 80155da:	4013      	ands	r3, r2
 80155dc:	2202      	movs	r2, #2
 80155de:	409a      	lsls	r2, r3
 80155e0:	0013      	movs	r3, r2
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	4013      	ands	r3, r2
 80155e6:	d02d      	beq.n	8015644 <HAL_DMA_IRQHandler+0xea>
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	2202      	movs	r2, #2
 80155ec:	4013      	ands	r3, r2
 80155ee:	d029      	beq.n	8015644 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	2220      	movs	r2, #32
 80155f8:	4013      	ands	r3, r2
 80155fa:	d10b      	bne.n	8015614 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	681a      	ldr	r2, [r3, #0]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	210a      	movs	r1, #10
 8015608:	438a      	bics	r2, r1
 801560a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	2225      	movs	r2, #37	@ 0x25
 8015610:	2101      	movs	r1, #1
 8015612:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015618:	221c      	movs	r2, #28
 801561a:	401a      	ands	r2, r3
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015620:	2102      	movs	r1, #2
 8015622:	4091      	lsls	r1, r2
 8015624:	000a      	movs	r2, r1
 8015626:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2224      	movs	r2, #36	@ 0x24
 801562c:	2100      	movs	r1, #0
 801562e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015634:	2b00      	cmp	r3, #0
 8015636:	d039      	beq.n	80156ac <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	0010      	movs	r0, r2
 8015640:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8015642:	e033      	b.n	80156ac <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015648:	221c      	movs	r2, #28
 801564a:	4013      	ands	r3, r2
 801564c:	2208      	movs	r2, #8
 801564e:	409a      	lsls	r2, r3
 8015650:	0013      	movs	r3, r2
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	4013      	ands	r3, r2
 8015656:	d02a      	beq.n	80156ae <HAL_DMA_IRQHandler+0x154>
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	2208      	movs	r2, #8
 801565c:	4013      	ands	r3, r2
 801565e:	d026      	beq.n	80156ae <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	210e      	movs	r1, #14
 801566c:	438a      	bics	r2, r1
 801566e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015674:	221c      	movs	r2, #28
 8015676:	401a      	ands	r2, r3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801567c:	2101      	movs	r1, #1
 801567e:	4091      	lsls	r1, r2
 8015680:	000a      	movs	r2, r1
 8015682:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2201      	movs	r2, #1
 8015688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2225      	movs	r2, #37	@ 0x25
 801568e:	2101      	movs	r1, #1
 8015690:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2224      	movs	r2, #36	@ 0x24
 8015696:	2100      	movs	r1, #0
 8015698:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d005      	beq.n	80156ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	0010      	movs	r0, r2
 80156aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80156ac:	46c0      	nop			@ (mov r8, r8)
 80156ae:	46c0      	nop			@ (mov r8, r8)
}
 80156b0:	46bd      	mov	sp, r7
 80156b2:	b004      	add	sp, #16
 80156b4:	bd80      	pop	{r7, pc}

080156b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80156b6:	b580      	push	{r7, lr}
 80156b8:	b082      	sub	sp, #8
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2225      	movs	r2, #37	@ 0x25
 80156c2:	5c9b      	ldrb	r3, [r3, r2]
 80156c4:	b2db      	uxtb	r3, r3
}
 80156c6:	0018      	movs	r0, r3
 80156c8:	46bd      	mov	sp, r7
 80156ca:	b002      	add	sp, #8
 80156cc:	bd80      	pop	{r7, pc}

080156ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80156ce:	b580      	push	{r7, lr}
 80156d0:	b084      	sub	sp, #16
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	60f8      	str	r0, [r7, #12]
 80156d6:	60b9      	str	r1, [r7, #8]
 80156d8:	607a      	str	r2, [r7, #4]
 80156da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156e0:	221c      	movs	r2, #28
 80156e2:	401a      	ands	r2, r3
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156e8:	2101      	movs	r1, #1
 80156ea:	4091      	lsls	r1, r2
 80156ec:	000a      	movs	r2, r1
 80156ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	683a      	ldr	r2, [r7, #0]
 80156f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	689b      	ldr	r3, [r3, #8]
 80156fc:	2b10      	cmp	r3, #16
 80156fe:	d108      	bne.n	8015712 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	68ba      	ldr	r2, [r7, #8]
 801570e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8015710:	e007      	b.n	8015722 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	68ba      	ldr	r2, [r7, #8]
 8015718:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	60da      	str	r2, [r3, #12]
}
 8015722:	46c0      	nop			@ (mov r8, r8)
 8015724:	46bd      	mov	sp, r7
 8015726:	b004      	add	sp, #16
 8015728:	bd80      	pop	{r7, pc}
	...

0801572c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b084      	sub	sp, #16
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8015734:	f7ff f8f0 	bl	8014918 <HAL_GetTick>
 8015738:	0003      	movs	r3, r0
 801573a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801573c:	e00f      	b.n	801575e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3301      	adds	r3, #1
 8015742:	d00c      	beq.n	801575e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d007      	beq.n	801575a <FLASH_WaitForLastOperation+0x2e>
 801574a:	f7ff f8e5 	bl	8014918 <HAL_GetTick>
 801574e:	0002      	movs	r2, r0
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	687a      	ldr	r2, [r7, #4]
 8015756:	429a      	cmp	r2, r3
 8015758:	d201      	bcs.n	801575e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 801575a:	2303      	movs	r3, #3
 801575c:	e052      	b.n	8015804 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801575e:	4b2b      	ldr	r3, [pc, #172]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 8015760:	699b      	ldr	r3, [r3, #24]
 8015762:	2201      	movs	r2, #1
 8015764:	4013      	ands	r3, r2
 8015766:	2b01      	cmp	r3, #1
 8015768:	d0e9      	beq.n	801573e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801576a:	4b28      	ldr	r3, [pc, #160]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 801576c:	699b      	ldr	r3, [r3, #24]
 801576e:	2202      	movs	r2, #2
 8015770:	4013      	ands	r3, r2
 8015772:	2b02      	cmp	r3, #2
 8015774:	d102      	bne.n	801577c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8015776:	4b25      	ldr	r3, [pc, #148]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 8015778:	2202      	movs	r2, #2
 801577a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 801577c:	4b23      	ldr	r3, [pc, #140]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 801577e:	699a      	ldr	r2, [r3, #24]
 8015780:	2380      	movs	r3, #128	@ 0x80
 8015782:	005b      	lsls	r3, r3, #1
 8015784:	401a      	ands	r2, r3
 8015786:	2380      	movs	r3, #128	@ 0x80
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	429a      	cmp	r2, r3
 801578c:	d035      	beq.n	80157fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801578e:	4b1f      	ldr	r3, [pc, #124]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 8015790:	699a      	ldr	r2, [r3, #24]
 8015792:	2380      	movs	r3, #128	@ 0x80
 8015794:	009b      	lsls	r3, r3, #2
 8015796:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015798:	2380      	movs	r3, #128	@ 0x80
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	429a      	cmp	r2, r3
 801579e:	d02c      	beq.n	80157fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80157a0:	4b1a      	ldr	r3, [pc, #104]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 80157a2:	699a      	ldr	r2, [r3, #24]
 80157a4:	2380      	movs	r3, #128	@ 0x80
 80157a6:	00db      	lsls	r3, r3, #3
 80157a8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80157aa:	2380      	movs	r3, #128	@ 0x80
 80157ac:	00db      	lsls	r3, r3, #3
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d023      	beq.n	80157fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80157b2:	4b16      	ldr	r3, [pc, #88]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 80157b4:	699a      	ldr	r2, [r3, #24]
 80157b6:	2380      	movs	r3, #128	@ 0x80
 80157b8:	011b      	lsls	r3, r3, #4
 80157ba:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80157bc:	2380      	movs	r3, #128	@ 0x80
 80157be:	011b      	lsls	r3, r3, #4
 80157c0:	429a      	cmp	r2, r3
 80157c2:	d01a      	beq.n	80157fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80157c4:	4b11      	ldr	r3, [pc, #68]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 80157c6:	699a      	ldr	r2, [r3, #24]
 80157c8:	2380      	movs	r3, #128	@ 0x80
 80157ca:	019b      	lsls	r3, r3, #6
 80157cc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80157ce:	2380      	movs	r3, #128	@ 0x80
 80157d0:	019b      	lsls	r3, r3, #6
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d011      	beq.n	80157fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80157d6:	4b0d      	ldr	r3, [pc, #52]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 80157d8:	699a      	ldr	r2, [r3, #24]
 80157da:	2380      	movs	r3, #128	@ 0x80
 80157dc:	029b      	lsls	r3, r3, #10
 80157de:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80157e0:	2380      	movs	r3, #128	@ 0x80
 80157e2:	029b      	lsls	r3, r3, #10
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d008      	beq.n	80157fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80157e8:	4b08      	ldr	r3, [pc, #32]	@ (801580c <FLASH_WaitForLastOperation+0xe0>)
 80157ea:	699a      	ldr	r2, [r3, #24]
 80157ec:	2380      	movs	r3, #128	@ 0x80
 80157ee:	025b      	lsls	r3, r3, #9
 80157f0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80157f2:	2380      	movs	r3, #128	@ 0x80
 80157f4:	025b      	lsls	r3, r3, #9
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d103      	bne.n	8015802 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80157fa:	f000 f809 	bl	8015810 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80157fe:	2301      	movs	r3, #1
 8015800:	e000      	b.n	8015804 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8015802:	2300      	movs	r3, #0
}
 8015804:	0018      	movs	r0, r3
 8015806:	46bd      	mov	sp, r7
 8015808:	b004      	add	sp, #16
 801580a:	bd80      	pop	{r7, pc}
 801580c:	40022000 	.word	0x40022000

08015810 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8015816:	2300      	movs	r3, #0
 8015818:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801581a:	4b49      	ldr	r3, [pc, #292]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 801581c:	699a      	ldr	r2, [r3, #24]
 801581e:	2380      	movs	r3, #128	@ 0x80
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	401a      	ands	r2, r3
 8015824:	2380      	movs	r3, #128	@ 0x80
 8015826:	005b      	lsls	r3, r3, #1
 8015828:	429a      	cmp	r2, r3
 801582a:	d10a      	bne.n	8015842 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801582c:	4b45      	ldr	r3, [pc, #276]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 801582e:	695b      	ldr	r3, [r3, #20]
 8015830:	2202      	movs	r2, #2
 8015832:	431a      	orrs	r2, r3
 8015834:	4b43      	ldr	r3, [pc, #268]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 8015836:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2280      	movs	r2, #128	@ 0x80
 801583c:	0052      	lsls	r2, r2, #1
 801583e:	4313      	orrs	r3, r2
 8015840:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8015842:	4b3f      	ldr	r3, [pc, #252]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 8015844:	699a      	ldr	r2, [r3, #24]
 8015846:	2380      	movs	r3, #128	@ 0x80
 8015848:	009b      	lsls	r3, r3, #2
 801584a:	401a      	ands	r2, r3
 801584c:	2380      	movs	r3, #128	@ 0x80
 801584e:	009b      	lsls	r3, r3, #2
 8015850:	429a      	cmp	r2, r3
 8015852:	d10a      	bne.n	801586a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8015854:	4b3b      	ldr	r3, [pc, #236]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 8015856:	695b      	ldr	r3, [r3, #20]
 8015858:	2201      	movs	r2, #1
 801585a:	431a      	orrs	r2, r3
 801585c:	4b39      	ldr	r3, [pc, #228]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 801585e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2280      	movs	r2, #128	@ 0x80
 8015864:	0092      	lsls	r2, r2, #2
 8015866:	4313      	orrs	r3, r2
 8015868:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 801586a:	4b35      	ldr	r3, [pc, #212]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 801586c:	699a      	ldr	r2, [r3, #24]
 801586e:	2380      	movs	r3, #128	@ 0x80
 8015870:	00db      	lsls	r3, r3, #3
 8015872:	401a      	ands	r2, r3
 8015874:	2380      	movs	r3, #128	@ 0x80
 8015876:	00db      	lsls	r3, r3, #3
 8015878:	429a      	cmp	r2, r3
 801587a:	d10a      	bne.n	8015892 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 801587c:	4b31      	ldr	r3, [pc, #196]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 801587e:	695b      	ldr	r3, [r3, #20]
 8015880:	2208      	movs	r2, #8
 8015882:	431a      	orrs	r2, r3
 8015884:	4b2f      	ldr	r3, [pc, #188]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 8015886:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2280      	movs	r2, #128	@ 0x80
 801588c:	00d2      	lsls	r2, r2, #3
 801588e:	4313      	orrs	r3, r2
 8015890:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8015892:	4b2b      	ldr	r3, [pc, #172]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 8015894:	699a      	ldr	r2, [r3, #24]
 8015896:	2380      	movs	r3, #128	@ 0x80
 8015898:	011b      	lsls	r3, r3, #4
 801589a:	401a      	ands	r2, r3
 801589c:	2380      	movs	r3, #128	@ 0x80
 801589e:	011b      	lsls	r3, r3, #4
 80158a0:	429a      	cmp	r2, r3
 80158a2:	d10a      	bne.n	80158ba <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80158a4:	4b27      	ldr	r3, [pc, #156]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 80158a6:	695b      	ldr	r3, [r3, #20]
 80158a8:	2204      	movs	r2, #4
 80158aa:	431a      	orrs	r2, r3
 80158ac:	4b25      	ldr	r3, [pc, #148]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 80158ae:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2280      	movs	r2, #128	@ 0x80
 80158b4:	0112      	lsls	r2, r2, #4
 80158b6:	4313      	orrs	r3, r2
 80158b8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80158ba:	4b21      	ldr	r3, [pc, #132]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 80158bc:	699a      	ldr	r2, [r3, #24]
 80158be:	2380      	movs	r3, #128	@ 0x80
 80158c0:	019b      	lsls	r3, r3, #6
 80158c2:	401a      	ands	r2, r3
 80158c4:	2380      	movs	r3, #128	@ 0x80
 80158c6:	019b      	lsls	r3, r3, #6
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d10a      	bne.n	80158e2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80158cc:	4b1d      	ldr	r3, [pc, #116]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 80158ce:	695b      	ldr	r3, [r3, #20]
 80158d0:	2210      	movs	r2, #16
 80158d2:	431a      	orrs	r2, r3
 80158d4:	4b1b      	ldr	r3, [pc, #108]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 80158d6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2280      	movs	r2, #128	@ 0x80
 80158dc:	0192      	lsls	r2, r2, #6
 80158de:	4313      	orrs	r3, r2
 80158e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80158e2:	4b17      	ldr	r3, [pc, #92]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 80158e4:	699a      	ldr	r2, [r3, #24]
 80158e6:	2380      	movs	r3, #128	@ 0x80
 80158e8:	029b      	lsls	r3, r3, #10
 80158ea:	401a      	ands	r2, r3
 80158ec:	2380      	movs	r3, #128	@ 0x80
 80158ee:	029b      	lsls	r3, r3, #10
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d109      	bne.n	8015908 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80158f4:	4b13      	ldr	r3, [pc, #76]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 80158f6:	695b      	ldr	r3, [r3, #20]
 80158f8:	2220      	movs	r2, #32
 80158fa:	431a      	orrs	r2, r3
 80158fc:	4b11      	ldr	r3, [pc, #68]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 80158fe:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2220      	movs	r2, #32
 8015904:	4313      	orrs	r3, r2
 8015906:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8015908:	4b0d      	ldr	r3, [pc, #52]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 801590a:	699a      	ldr	r2, [r3, #24]
 801590c:	2380      	movs	r3, #128	@ 0x80
 801590e:	025b      	lsls	r3, r3, #9
 8015910:	401a      	ands	r2, r3
 8015912:	2380      	movs	r3, #128	@ 0x80
 8015914:	025b      	lsls	r3, r3, #9
 8015916:	429a      	cmp	r2, r3
 8015918:	d10a      	bne.n	8015930 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801591a:	4b0a      	ldr	r3, [pc, #40]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 801591c:	695b      	ldr	r3, [r3, #20]
 801591e:	2240      	movs	r2, #64	@ 0x40
 8015920:	431a      	orrs	r2, r3
 8015922:	4b08      	ldr	r3, [pc, #32]	@ (8015944 <FLASH_SetErrorCode+0x134>)
 8015924:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2280      	movs	r2, #128	@ 0x80
 801592a:	0252      	lsls	r2, r2, #9
 801592c:	4313      	orrs	r3, r2
 801592e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8015930:	4b03      	ldr	r3, [pc, #12]	@ (8015940 <FLASH_SetErrorCode+0x130>)
 8015932:	687a      	ldr	r2, [r7, #4]
 8015934:	619a      	str	r2, [r3, #24]
}  
 8015936:	46c0      	nop			@ (mov r8, r8)
 8015938:	46bd      	mov	sp, r7
 801593a:	b002      	add	sp, #8
 801593c:	bd80      	pop	{r7, pc}
 801593e:	46c0      	nop			@ (mov r8, r8)
 8015940:	40022000 	.word	0x40022000
 8015944:	2000251c 	.word	0x2000251c

08015948 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801594e:	4b12      	ldr	r3, [pc, #72]	@ (8015998 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	2201      	movs	r2, #1
 8015954:	4013      	ands	r3, r2
 8015956:	d019      	beq.n	801598c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015958:	f3ef 8310 	mrs	r3, PRIMASK
 801595c:	607b      	str	r3, [r7, #4]
  return(result);
 801595e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8015960:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015962:	b672      	cpsid	i
}
 8015964:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8015966:	4b0c      	ldr	r3, [pc, #48]	@ (8015998 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015968:	4a0c      	ldr	r2, [pc, #48]	@ (801599c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 801596a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 801596c:	4b0a      	ldr	r3, [pc, #40]	@ (8015998 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801596e:	4a0c      	ldr	r2, [pc, #48]	@ (80159a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8015970:	60da      	str	r2, [r3, #12]
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	f383 8810 	msr	PRIMASK, r3
}
 801597c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801597e:	4b06      	ldr	r3, [pc, #24]	@ (8015998 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	2201      	movs	r2, #1
 8015984:	4013      	ands	r3, r2
 8015986:	d001      	beq.n	801598c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8015988:	2301      	movs	r3, #1
 801598a:	e000      	b.n	801598e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 801598c:	2300      	movs	r3, #0
}
 801598e:	0018      	movs	r0, r3
 8015990:	46bd      	mov	sp, r7
 8015992:	b004      	add	sp, #16
 8015994:	bd80      	pop	{r7, pc}
 8015996:	46c0      	nop			@ (mov r8, r8)
 8015998:	40022000 	.word	0x40022000
 801599c:	89abcdef 	.word	0x89abcdef
 80159a0:	02030405 	.word	0x02030405

080159a4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80159a8:	4b04      	ldr	r3, [pc, #16]	@ (80159bc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80159aa:	685a      	ldr	r2, [r3, #4]
 80159ac:	4b03      	ldr	r3, [pc, #12]	@ (80159bc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80159ae:	2101      	movs	r1, #1
 80159b0:	430a      	orrs	r2, r1
 80159b2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80159b4:	2300      	movs	r3, #0
}
 80159b6:	0018      	movs	r0, r3
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	40022000 	.word	0x40022000

080159c0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80159c0:	b5b0      	push	{r4, r5, r7, lr}
 80159c2:	b084      	sub	sp, #16
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80159c8:	250f      	movs	r5, #15
 80159ca:	197b      	adds	r3, r7, r5
 80159cc:	2200      	movs	r2, #0
 80159ce:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80159d0:	197c      	adds	r4, r7, r5
 80159d2:	4b0f      	ldr	r3, [pc, #60]	@ (8015a10 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80159d4:	0018      	movs	r0, r3
 80159d6:	f7ff fea9 	bl	801572c <FLASH_WaitForLastOperation>
 80159da:	0003      	movs	r3, r0
 80159dc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80159de:	0029      	movs	r1, r5
 80159e0:	187b      	adds	r3, r7, r1
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10c      	bne.n	8015a02 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80159e8:	4b0a      	ldr	r3, [pc, #40]	@ (8015a14 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80159ea:	2200      	movs	r2, #0
 80159ec:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2200      	movs	r2, #0
 80159f2:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80159f4:	187c      	adds	r4, r7, r1
 80159f6:	4b06      	ldr	r3, [pc, #24]	@ (8015a10 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80159f8:	0018      	movs	r0, r3
 80159fa:	f7ff fe97 	bl	801572c <FLASH_WaitForLastOperation>
 80159fe:	0003      	movs	r3, r0
 8015a00:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015a02:	230f      	movs	r3, #15
 8015a04:	18fb      	adds	r3, r7, r3
 8015a06:	781b      	ldrb	r3, [r3, #0]
}  
 8015a08:	0018      	movs	r0, r3
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	b004      	add	sp, #16
 8015a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8015a10:	0000c350 	.word	0x0000c350
 8015a14:	2000251c 	.word	0x2000251c

08015a18 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015a18:	b5b0      	push	{r4, r5, r7, lr}
 8015a1a:	b086      	sub	sp, #24
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015a24:	2317      	movs	r3, #23
 8015a26:	18fb      	adds	r3, r7, r3
 8015a28:	2201      	movs	r2, #1
 8015a2a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015a2c:	4b24      	ldr	r3, [pc, #144]	@ (8015ac0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a2e:	7c1b      	ldrb	r3, [r3, #16]
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	d101      	bne.n	8015a38 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8015a34:	2302      	movs	r3, #2
 8015a36:	e03e      	b.n	8015ab6 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8015a38:	4b21      	ldr	r3, [pc, #132]	@ (8015ac0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a3e:	2517      	movs	r5, #23
 8015a40:	197c      	adds	r4, r7, r5
 8015a42:	4b20      	ldr	r3, [pc, #128]	@ (8015ac4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015a44:	0018      	movs	r0, r3
 8015a46:	f7ff fe71 	bl	801572c <FLASH_WaitForLastOperation>
 8015a4a:	0003      	movs	r3, r0
 8015a4c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015a4e:	197b      	adds	r3, r7, r5
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d129      	bne.n	8015aaa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015a56:	4b1a      	ldr	r3, [pc, #104]	@ (8015ac0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a58:	2200      	movs	r2, #0
 8015a5a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	2b02      	cmp	r3, #2
 8015a60:	d103      	bne.n	8015a6a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	687a      	ldr	r2, [r7, #4]
 8015a66:	601a      	str	r2, [r3, #0]
 8015a68:	e013      	b.n	8015a92 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	d104      	bne.n	8015a7a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	b292      	uxth	r2, r2
 8015a76:	801a      	strh	r2, [r3, #0]
 8015a78:	e00b      	b.n	8015a92 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d104      	bne.n	8015a8a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	687a      	ldr	r2, [r7, #4]
 8015a84:	b2d2      	uxtb	r2, r2
 8015a86:	701a      	strb	r2, [r3, #0]
 8015a88:	e003      	b.n	8015a92 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015a8a:	2317      	movs	r3, #23
 8015a8c:	18fb      	adds	r3, r7, r3
 8015a8e:	2201      	movs	r2, #1
 8015a90:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015a92:	2217      	movs	r2, #23
 8015a94:	18bb      	adds	r3, r7, r2
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d106      	bne.n	8015aaa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a9c:	18bc      	adds	r4, r7, r2
 8015a9e:	4b09      	ldr	r3, [pc, #36]	@ (8015ac4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015aa0:	0018      	movs	r0, r3
 8015aa2:	f7ff fe43 	bl	801572c <FLASH_WaitForLastOperation>
 8015aa6:	0003      	movs	r3, r0
 8015aa8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015aaa:	4b05      	ldr	r3, [pc, #20]	@ (8015ac0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015aac:	2200      	movs	r2, #0
 8015aae:	741a      	strb	r2, [r3, #16]

  return status;
 8015ab0:	2317      	movs	r3, #23
 8015ab2:	18fb      	adds	r3, r7, r3
 8015ab4:	781b      	ldrb	r3, [r3, #0]
}
 8015ab6:	0018      	movs	r0, r3
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	b006      	add	sp, #24
 8015abc:	bdb0      	pop	{r4, r5, r7, pc}
 8015abe:	46c0      	nop			@ (mov r8, r8)
 8015ac0:	2000251c 	.word	0x2000251c
 8015ac4:	0000c350 	.word	0x0000c350

08015ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b086      	sub	sp, #24
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015ada:	2300      	movs	r3, #0
 8015adc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015ade:	e155      	b.n	8015d8c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	2101      	movs	r1, #1
 8015ae6:	697a      	ldr	r2, [r7, #20]
 8015ae8:	4091      	lsls	r1, r2
 8015aea:	000a      	movs	r2, r1
 8015aec:	4013      	ands	r3, r2
 8015aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d100      	bne.n	8015af8 <HAL_GPIO_Init+0x30>
 8015af6:	e146      	b.n	8015d86 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	2203      	movs	r2, #3
 8015afe:	4013      	ands	r3, r2
 8015b00:	2b01      	cmp	r3, #1
 8015b02:	d005      	beq.n	8015b10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	2203      	movs	r2, #3
 8015b0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015b0c:	2b02      	cmp	r3, #2
 8015b0e:	d130      	bne.n	8015b72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	689b      	ldr	r3, [r3, #8]
 8015b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	005b      	lsls	r3, r3, #1
 8015b1a:	2203      	movs	r2, #3
 8015b1c:	409a      	lsls	r2, r3
 8015b1e:	0013      	movs	r3, r2
 8015b20:	43da      	mvns	r2, r3
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	4013      	ands	r3, r2
 8015b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	68da      	ldr	r2, [r3, #12]
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	005b      	lsls	r3, r3, #1
 8015b30:	409a      	lsls	r2, r3
 8015b32:	0013      	movs	r3, r2
 8015b34:	693a      	ldr	r2, [r7, #16]
 8015b36:	4313      	orrs	r3, r2
 8015b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	693a      	ldr	r2, [r7, #16]
 8015b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015b46:	2201      	movs	r2, #1
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	409a      	lsls	r2, r3
 8015b4c:	0013      	movs	r3, r2
 8015b4e:	43da      	mvns	r2, r3
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	4013      	ands	r3, r2
 8015b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	091b      	lsrs	r3, r3, #4
 8015b5c:	2201      	movs	r2, #1
 8015b5e:	401a      	ands	r2, r3
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	409a      	lsls	r2, r3
 8015b64:	0013      	movs	r3, r2
 8015b66:	693a      	ldr	r2, [r7, #16]
 8015b68:	4313      	orrs	r3, r2
 8015b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	693a      	ldr	r2, [r7, #16]
 8015b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	685b      	ldr	r3, [r3, #4]
 8015b76:	2203      	movs	r2, #3
 8015b78:	4013      	ands	r3, r2
 8015b7a:	2b03      	cmp	r3, #3
 8015b7c:	d017      	beq.n	8015bae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	68db      	ldr	r3, [r3, #12]
 8015b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	005b      	lsls	r3, r3, #1
 8015b88:	2203      	movs	r2, #3
 8015b8a:	409a      	lsls	r2, r3
 8015b8c:	0013      	movs	r3, r2
 8015b8e:	43da      	mvns	r2, r3
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	4013      	ands	r3, r2
 8015b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	689a      	ldr	r2, [r3, #8]
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	005b      	lsls	r3, r3, #1
 8015b9e:	409a      	lsls	r2, r3
 8015ba0:	0013      	movs	r3, r2
 8015ba2:	693a      	ldr	r2, [r7, #16]
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	693a      	ldr	r2, [r7, #16]
 8015bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	685b      	ldr	r3, [r3, #4]
 8015bb2:	2203      	movs	r2, #3
 8015bb4:	4013      	ands	r3, r2
 8015bb6:	2b02      	cmp	r3, #2
 8015bb8:	d123      	bne.n	8015c02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	08da      	lsrs	r2, r3, #3
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	3208      	adds	r2, #8
 8015bc2:	0092      	lsls	r2, r2, #2
 8015bc4:	58d3      	ldr	r3, [r2, r3]
 8015bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015bc8:	697b      	ldr	r3, [r7, #20]
 8015bca:	2207      	movs	r2, #7
 8015bcc:	4013      	ands	r3, r2
 8015bce:	009b      	lsls	r3, r3, #2
 8015bd0:	220f      	movs	r2, #15
 8015bd2:	409a      	lsls	r2, r3
 8015bd4:	0013      	movs	r3, r2
 8015bd6:	43da      	mvns	r2, r3
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	4013      	ands	r3, r2
 8015bdc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	691a      	ldr	r2, [r3, #16]
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	2107      	movs	r1, #7
 8015be6:	400b      	ands	r3, r1
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	409a      	lsls	r2, r3
 8015bec:	0013      	movs	r3, r2
 8015bee:	693a      	ldr	r2, [r7, #16]
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	08da      	lsrs	r2, r3, #3
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	3208      	adds	r2, #8
 8015bfc:	0092      	lsls	r2, r2, #2
 8015bfe:	6939      	ldr	r1, [r7, #16]
 8015c00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	005b      	lsls	r3, r3, #1
 8015c0c:	2203      	movs	r2, #3
 8015c0e:	409a      	lsls	r2, r3
 8015c10:	0013      	movs	r3, r2
 8015c12:	43da      	mvns	r2, r3
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	4013      	ands	r3, r2
 8015c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	2203      	movs	r2, #3
 8015c20:	401a      	ands	r2, r3
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	005b      	lsls	r3, r3, #1
 8015c26:	409a      	lsls	r2, r3
 8015c28:	0013      	movs	r3, r2
 8015c2a:	693a      	ldr	r2, [r7, #16]
 8015c2c:	4313      	orrs	r3, r2
 8015c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	693a      	ldr	r2, [r7, #16]
 8015c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	685a      	ldr	r2, [r3, #4]
 8015c3a:	23c0      	movs	r3, #192	@ 0xc0
 8015c3c:	029b      	lsls	r3, r3, #10
 8015c3e:	4013      	ands	r3, r2
 8015c40:	d100      	bne.n	8015c44 <HAL_GPIO_Init+0x17c>
 8015c42:	e0a0      	b.n	8015d86 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015c44:	4b57      	ldr	r3, [pc, #348]	@ (8015da4 <HAL_GPIO_Init+0x2dc>)
 8015c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015c48:	4b56      	ldr	r3, [pc, #344]	@ (8015da4 <HAL_GPIO_Init+0x2dc>)
 8015c4a:	2101      	movs	r1, #1
 8015c4c:	430a      	orrs	r2, r1
 8015c4e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015c50:	4a55      	ldr	r2, [pc, #340]	@ (8015da8 <HAL_GPIO_Init+0x2e0>)
 8015c52:	697b      	ldr	r3, [r7, #20]
 8015c54:	089b      	lsrs	r3, r3, #2
 8015c56:	3302      	adds	r3, #2
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	589b      	ldr	r3, [r3, r2]
 8015c5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	2203      	movs	r2, #3
 8015c62:	4013      	ands	r3, r2
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	220f      	movs	r2, #15
 8015c68:	409a      	lsls	r2, r3
 8015c6a:	0013      	movs	r3, r2
 8015c6c:	43da      	mvns	r2, r3
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	4013      	ands	r3, r2
 8015c72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	23a0      	movs	r3, #160	@ 0xa0
 8015c78:	05db      	lsls	r3, r3, #23
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d01f      	beq.n	8015cbe <HAL_GPIO_Init+0x1f6>
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	4a4a      	ldr	r2, [pc, #296]	@ (8015dac <HAL_GPIO_Init+0x2e4>)
 8015c82:	4293      	cmp	r3, r2
 8015c84:	d019      	beq.n	8015cba <HAL_GPIO_Init+0x1f2>
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	4a49      	ldr	r2, [pc, #292]	@ (8015db0 <HAL_GPIO_Init+0x2e8>)
 8015c8a:	4293      	cmp	r3, r2
 8015c8c:	d013      	beq.n	8015cb6 <HAL_GPIO_Init+0x1ee>
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	4a48      	ldr	r2, [pc, #288]	@ (8015db4 <HAL_GPIO_Init+0x2ec>)
 8015c92:	4293      	cmp	r3, r2
 8015c94:	d00d      	beq.n	8015cb2 <HAL_GPIO_Init+0x1ea>
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	4a47      	ldr	r2, [pc, #284]	@ (8015db8 <HAL_GPIO_Init+0x2f0>)
 8015c9a:	4293      	cmp	r3, r2
 8015c9c:	d007      	beq.n	8015cae <HAL_GPIO_Init+0x1e6>
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	4a46      	ldr	r2, [pc, #280]	@ (8015dbc <HAL_GPIO_Init+0x2f4>)
 8015ca2:	4293      	cmp	r3, r2
 8015ca4:	d101      	bne.n	8015caa <HAL_GPIO_Init+0x1e2>
 8015ca6:	2305      	movs	r3, #5
 8015ca8:	e00a      	b.n	8015cc0 <HAL_GPIO_Init+0x1f8>
 8015caa:	2306      	movs	r3, #6
 8015cac:	e008      	b.n	8015cc0 <HAL_GPIO_Init+0x1f8>
 8015cae:	2304      	movs	r3, #4
 8015cb0:	e006      	b.n	8015cc0 <HAL_GPIO_Init+0x1f8>
 8015cb2:	2303      	movs	r3, #3
 8015cb4:	e004      	b.n	8015cc0 <HAL_GPIO_Init+0x1f8>
 8015cb6:	2302      	movs	r3, #2
 8015cb8:	e002      	b.n	8015cc0 <HAL_GPIO_Init+0x1f8>
 8015cba:	2301      	movs	r3, #1
 8015cbc:	e000      	b.n	8015cc0 <HAL_GPIO_Init+0x1f8>
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	697a      	ldr	r2, [r7, #20]
 8015cc2:	2103      	movs	r1, #3
 8015cc4:	400a      	ands	r2, r1
 8015cc6:	0092      	lsls	r2, r2, #2
 8015cc8:	4093      	lsls	r3, r2
 8015cca:	693a      	ldr	r2, [r7, #16]
 8015ccc:	4313      	orrs	r3, r2
 8015cce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015cd0:	4935      	ldr	r1, [pc, #212]	@ (8015da8 <HAL_GPIO_Init+0x2e0>)
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	089b      	lsrs	r3, r3, #2
 8015cd6:	3302      	adds	r3, #2
 8015cd8:	009b      	lsls	r3, r3, #2
 8015cda:	693a      	ldr	r2, [r7, #16]
 8015cdc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015cde:	4b38      	ldr	r3, [pc, #224]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015ce0:	689b      	ldr	r3, [r3, #8]
 8015ce2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	43da      	mvns	r2, r3
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	4013      	ands	r3, r2
 8015cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	685a      	ldr	r2, [r3, #4]
 8015cf2:	2380      	movs	r3, #128	@ 0x80
 8015cf4:	035b      	lsls	r3, r3, #13
 8015cf6:	4013      	ands	r3, r2
 8015cf8:	d003      	beq.n	8015d02 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015cfa:	693a      	ldr	r2, [r7, #16]
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	4313      	orrs	r3, r2
 8015d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015d02:	4b2f      	ldr	r3, [pc, #188]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015d04:	693a      	ldr	r2, [r7, #16]
 8015d06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015d08:	4b2d      	ldr	r3, [pc, #180]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015d0a:	68db      	ldr	r3, [r3, #12]
 8015d0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	43da      	mvns	r2, r3
 8015d12:	693b      	ldr	r3, [r7, #16]
 8015d14:	4013      	ands	r3, r2
 8015d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	685a      	ldr	r2, [r3, #4]
 8015d1c:	2380      	movs	r3, #128	@ 0x80
 8015d1e:	039b      	lsls	r3, r3, #14
 8015d20:	4013      	ands	r3, r2
 8015d22:	d003      	beq.n	8015d2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015d24:	693a      	ldr	r2, [r7, #16]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	4313      	orrs	r3, r2
 8015d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015d2c:	4b24      	ldr	r3, [pc, #144]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015d2e:	693a      	ldr	r2, [r7, #16]
 8015d30:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015d32:	4b23      	ldr	r3, [pc, #140]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	43da      	mvns	r2, r3
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	4013      	ands	r3, r2
 8015d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	685a      	ldr	r2, [r3, #4]
 8015d46:	2380      	movs	r3, #128	@ 0x80
 8015d48:	029b      	lsls	r3, r3, #10
 8015d4a:	4013      	ands	r3, r2
 8015d4c:	d003      	beq.n	8015d56 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015d4e:	693a      	ldr	r2, [r7, #16]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	4313      	orrs	r3, r2
 8015d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015d56:	4b1a      	ldr	r3, [pc, #104]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015d58:	693a      	ldr	r2, [r7, #16]
 8015d5a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015d5c:	4b18      	ldr	r3, [pc, #96]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	43da      	mvns	r2, r3
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	4013      	ands	r3, r2
 8015d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	685a      	ldr	r2, [r3, #4]
 8015d70:	2380      	movs	r3, #128	@ 0x80
 8015d72:	025b      	lsls	r3, r3, #9
 8015d74:	4013      	ands	r3, r2
 8015d76:	d003      	beq.n	8015d80 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015d78:	693a      	ldr	r2, [r7, #16]
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	4313      	orrs	r3, r2
 8015d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015d80:	4b0f      	ldr	r3, [pc, #60]	@ (8015dc0 <HAL_GPIO_Init+0x2f8>)
 8015d82:	693a      	ldr	r2, [r7, #16]
 8015d84:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015d86:	697b      	ldr	r3, [r7, #20]
 8015d88:	3301      	adds	r3, #1
 8015d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	681a      	ldr	r2, [r3, #0]
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	40da      	lsrs	r2, r3
 8015d94:	1e13      	subs	r3, r2, #0
 8015d96:	d000      	beq.n	8015d9a <HAL_GPIO_Init+0x2d2>
 8015d98:	e6a2      	b.n	8015ae0 <HAL_GPIO_Init+0x18>
  }
}
 8015d9a:	46c0      	nop			@ (mov r8, r8)
 8015d9c:	46c0      	nop			@ (mov r8, r8)
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	b006      	add	sp, #24
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	40021000 	.word	0x40021000
 8015da8:	40010000 	.word	0x40010000
 8015dac:	50000400 	.word	0x50000400
 8015db0:	50000800 	.word	0x50000800
 8015db4:	50000c00 	.word	0x50000c00
 8015db8:	50001000 	.word	0x50001000
 8015dbc:	50001c00 	.word	0x50001c00
 8015dc0:	40010400 	.word	0x40010400

08015dc4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b084      	sub	sp, #16
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
 8015dcc:	000a      	movs	r2, r1
 8015dce:	1cbb      	adds	r3, r7, #2
 8015dd0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	691b      	ldr	r3, [r3, #16]
 8015dd6:	1cba      	adds	r2, r7, #2
 8015dd8:	8812      	ldrh	r2, [r2, #0]
 8015dda:	4013      	ands	r3, r2
 8015ddc:	d004      	beq.n	8015de8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015dde:	230f      	movs	r3, #15
 8015de0:	18fb      	adds	r3, r7, r3
 8015de2:	2201      	movs	r2, #1
 8015de4:	701a      	strb	r2, [r3, #0]
 8015de6:	e003      	b.n	8015df0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015de8:	230f      	movs	r3, #15
 8015dea:	18fb      	adds	r3, r7, r3
 8015dec:	2200      	movs	r2, #0
 8015dee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015df0:	230f      	movs	r3, #15
 8015df2:	18fb      	adds	r3, r7, r3
 8015df4:	781b      	ldrb	r3, [r3, #0]
}
 8015df6:	0018      	movs	r0, r3
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	b004      	add	sp, #16
 8015dfc:	bd80      	pop	{r7, pc}

08015dfe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015dfe:	b580      	push	{r7, lr}
 8015e00:	b082      	sub	sp, #8
 8015e02:	af00      	add	r7, sp, #0
 8015e04:	6078      	str	r0, [r7, #4]
 8015e06:	0008      	movs	r0, r1
 8015e08:	0011      	movs	r1, r2
 8015e0a:	1cbb      	adds	r3, r7, #2
 8015e0c:	1c02      	adds	r2, r0, #0
 8015e0e:	801a      	strh	r2, [r3, #0]
 8015e10:	1c7b      	adds	r3, r7, #1
 8015e12:	1c0a      	adds	r2, r1, #0
 8015e14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015e16:	1c7b      	adds	r3, r7, #1
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d004      	beq.n	8015e28 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015e1e:	1cbb      	adds	r3, r7, #2
 8015e20:	881a      	ldrh	r2, [r3, #0]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015e26:	e003      	b.n	8015e30 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015e28:	1cbb      	adds	r3, r7, #2
 8015e2a:	881a      	ldrh	r2, [r3, #0]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015e30:	46c0      	nop			@ (mov r8, r8)
 8015e32:	46bd      	mov	sp, r7
 8015e34:	b002      	add	sp, #8
 8015e36:	bd80      	pop	{r7, pc}

08015e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b082      	sub	sp, #8
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	0002      	movs	r2, r0
 8015e40:	1dbb      	adds	r3, r7, #6
 8015e42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015e44:	4b09      	ldr	r3, [pc, #36]	@ (8015e6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015e46:	695b      	ldr	r3, [r3, #20]
 8015e48:	1dba      	adds	r2, r7, #6
 8015e4a:	8812      	ldrh	r2, [r2, #0]
 8015e4c:	4013      	ands	r3, r2
 8015e4e:	d008      	beq.n	8015e62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015e50:	4b06      	ldr	r3, [pc, #24]	@ (8015e6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015e52:	1dba      	adds	r2, r7, #6
 8015e54:	8812      	ldrh	r2, [r2, #0]
 8015e56:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015e58:	1dbb      	adds	r3, r7, #6
 8015e5a:	881b      	ldrh	r3, [r3, #0]
 8015e5c:	0018      	movs	r0, r3
 8015e5e:	f7f7 fa71 	bl	800d344 <HAL_GPIO_EXTI_Callback>
  }
}
 8015e62:	46c0      	nop			@ (mov r8, r8)
 8015e64:	46bd      	mov	sp, r7
 8015e66:	b002      	add	sp, #8
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	46c0      	nop			@ (mov r8, r8)
 8015e6c:	40010400 	.word	0x40010400

08015e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b082      	sub	sp, #8
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d101      	bne.n	8015e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015e7e:	2301      	movs	r3, #1
 8015e80:	e082      	b.n	8015f88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2241      	movs	r2, #65	@ 0x41
 8015e86:	5c9b      	ldrb	r3, [r3, r2]
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d107      	bne.n	8015e9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2240      	movs	r2, #64	@ 0x40
 8015e92:	2100      	movs	r1, #0
 8015e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	0018      	movs	r0, r3
 8015e9a:	f7f6 fc85 	bl	800c7a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2241      	movs	r2, #65	@ 0x41
 8015ea2:	2124      	movs	r1, #36	@ 0x24
 8015ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	681a      	ldr	r2, [r3, #0]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	2101      	movs	r1, #1
 8015eb2:	438a      	bics	r2, r1
 8015eb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	685a      	ldr	r2, [r3, #4]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	4934      	ldr	r1, [pc, #208]	@ (8015f90 <HAL_I2C_Init+0x120>)
 8015ec0:	400a      	ands	r2, r1
 8015ec2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	689a      	ldr	r2, [r3, #8]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4931      	ldr	r1, [pc, #196]	@ (8015f94 <HAL_I2C_Init+0x124>)
 8015ed0:	400a      	ands	r2, r1
 8015ed2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	2b01      	cmp	r3, #1
 8015eda:	d108      	bne.n	8015eee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	689a      	ldr	r2, [r3, #8]
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2180      	movs	r1, #128	@ 0x80
 8015ee6:	0209      	lsls	r1, r1, #8
 8015ee8:	430a      	orrs	r2, r1
 8015eea:	609a      	str	r2, [r3, #8]
 8015eec:	e007      	b.n	8015efe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	689a      	ldr	r2, [r3, #8]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	2184      	movs	r1, #132	@ 0x84
 8015ef8:	0209      	lsls	r1, r1, #8
 8015efa:	430a      	orrs	r2, r1
 8015efc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	68db      	ldr	r3, [r3, #12]
 8015f02:	2b02      	cmp	r3, #2
 8015f04:	d104      	bne.n	8015f10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2280      	movs	r2, #128	@ 0x80
 8015f0c:	0112      	lsls	r2, r2, #4
 8015f0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	685a      	ldr	r2, [r3, #4]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	491f      	ldr	r1, [pc, #124]	@ (8015f98 <HAL_I2C_Init+0x128>)
 8015f1c:	430a      	orrs	r2, r1
 8015f1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	68da      	ldr	r2, [r3, #12]
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	491a      	ldr	r1, [pc, #104]	@ (8015f94 <HAL_I2C_Init+0x124>)
 8015f2c:	400a      	ands	r2, r1
 8015f2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	691a      	ldr	r2, [r3, #16]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	695b      	ldr	r3, [r3, #20]
 8015f38:	431a      	orrs	r2, r3
 8015f3a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	699b      	ldr	r3, [r3, #24]
 8015f40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	430a      	orrs	r2, r1
 8015f48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	69d9      	ldr	r1, [r3, #28]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6a1a      	ldr	r2, [r3, #32]
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	430a      	orrs	r2, r1
 8015f58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	681a      	ldr	r2, [r3, #0]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	2101      	movs	r1, #1
 8015f66:	430a      	orrs	r2, r1
 8015f68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2241      	movs	r2, #65	@ 0x41
 8015f74:	2120      	movs	r1, #32
 8015f76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2242      	movs	r2, #66	@ 0x42
 8015f82:	2100      	movs	r1, #0
 8015f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015f86:	2300      	movs	r3, #0
}
 8015f88:	0018      	movs	r0, r3
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	b002      	add	sp, #8
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	f0ffffff 	.word	0xf0ffffff
 8015f94:	ffff7fff 	.word	0xffff7fff
 8015f98:	02008000 	.word	0x02008000

08015f9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015f9c:	b590      	push	{r4, r7, lr}
 8015f9e:	b089      	sub	sp, #36	@ 0x24
 8015fa0:	af02      	add	r7, sp, #8
 8015fa2:	60f8      	str	r0, [r7, #12]
 8015fa4:	0008      	movs	r0, r1
 8015fa6:	607a      	str	r2, [r7, #4]
 8015fa8:	0019      	movs	r1, r3
 8015faa:	230a      	movs	r3, #10
 8015fac:	18fb      	adds	r3, r7, r3
 8015fae:	1c02      	adds	r2, r0, #0
 8015fb0:	801a      	strh	r2, [r3, #0]
 8015fb2:	2308      	movs	r3, #8
 8015fb4:	18fb      	adds	r3, r7, r3
 8015fb6:	1c0a      	adds	r2, r1, #0
 8015fb8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2241      	movs	r2, #65	@ 0x41
 8015fbe:	5c9b      	ldrb	r3, [r3, r2]
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	2b20      	cmp	r3, #32
 8015fc4:	d000      	beq.n	8015fc8 <HAL_I2C_Master_Transmit+0x2c>
 8015fc6:	e0e7      	b.n	8016198 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2240      	movs	r2, #64	@ 0x40
 8015fcc:	5c9b      	ldrb	r3, [r3, r2]
 8015fce:	2b01      	cmp	r3, #1
 8015fd0:	d101      	bne.n	8015fd6 <HAL_I2C_Master_Transmit+0x3a>
 8015fd2:	2302      	movs	r3, #2
 8015fd4:	e0e1      	b.n	801619a <HAL_I2C_Master_Transmit+0x1fe>
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2240      	movs	r2, #64	@ 0x40
 8015fda:	2101      	movs	r1, #1
 8015fdc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015fde:	f7fe fc9b 	bl	8014918 <HAL_GetTick>
 8015fe2:	0003      	movs	r3, r0
 8015fe4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015fe6:	2380      	movs	r3, #128	@ 0x80
 8015fe8:	0219      	lsls	r1, r3, #8
 8015fea:	68f8      	ldr	r0, [r7, #12]
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	2319      	movs	r3, #25
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	f002 fb34 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8015ff8:	1e03      	subs	r3, r0, #0
 8015ffa:	d001      	beq.n	8016000 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	e0cc      	b.n	801619a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2241      	movs	r2, #65	@ 0x41
 8016004:	2121      	movs	r1, #33	@ 0x21
 8016006:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2242      	movs	r2, #66	@ 0x42
 801600c:	2110      	movs	r1, #16
 801600e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	2200      	movs	r2, #0
 8016014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	687a      	ldr	r2, [r7, #4]
 801601a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2208      	movs	r2, #8
 8016020:	18ba      	adds	r2, r7, r2
 8016022:	8812      	ldrh	r2, [r2, #0]
 8016024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	2200      	movs	r2, #0
 801602a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016030:	b29b      	uxth	r3, r3
 8016032:	2bff      	cmp	r3, #255	@ 0xff
 8016034:	d911      	bls.n	801605a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	22ff      	movs	r2, #255	@ 0xff
 801603a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016040:	b2da      	uxtb	r2, r3
 8016042:	2380      	movs	r3, #128	@ 0x80
 8016044:	045c      	lsls	r4, r3, #17
 8016046:	230a      	movs	r3, #10
 8016048:	18fb      	adds	r3, r7, r3
 801604a:	8819      	ldrh	r1, [r3, #0]
 801604c:	68f8      	ldr	r0, [r7, #12]
 801604e:	4b55      	ldr	r3, [pc, #340]	@ (80161a4 <HAL_I2C_Master_Transmit+0x208>)
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	0023      	movs	r3, r4
 8016054:	f002 fd56 	bl	8018b04 <I2C_TransferConfig>
 8016058:	e075      	b.n	8016146 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801605e:	b29a      	uxth	r2, r3
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016068:	b2da      	uxtb	r2, r3
 801606a:	2380      	movs	r3, #128	@ 0x80
 801606c:	049c      	lsls	r4, r3, #18
 801606e:	230a      	movs	r3, #10
 8016070:	18fb      	adds	r3, r7, r3
 8016072:	8819      	ldrh	r1, [r3, #0]
 8016074:	68f8      	ldr	r0, [r7, #12]
 8016076:	4b4b      	ldr	r3, [pc, #300]	@ (80161a4 <HAL_I2C_Master_Transmit+0x208>)
 8016078:	9300      	str	r3, [sp, #0]
 801607a:	0023      	movs	r3, r4
 801607c:	f002 fd42 	bl	8018b04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016080:	e061      	b.n	8016146 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016082:	697a      	ldr	r2, [r7, #20]
 8016084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	0018      	movs	r0, r3
 801608a:	f002 fb37 	bl	80186fc <I2C_WaitOnTXISFlagUntilTimeout>
 801608e:	1e03      	subs	r3, r0, #0
 8016090:	d001      	beq.n	8016096 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8016092:	2301      	movs	r3, #1
 8016094:	e081      	b.n	801619a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801609a:	781a      	ldrb	r2, [r3, #0]
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160a6:	1c5a      	adds	r2, r3, #1
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160b0:	b29b      	uxth	r3, r3
 80160b2:	3b01      	subs	r3, #1
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160be:	3b01      	subs	r3, #1
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d03a      	beq.n	8016146 <HAL_I2C_Master_Transmit+0x1aa>
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d136      	bne.n	8016146 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80160d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80160da:	68f8      	ldr	r0, [r7, #12]
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	0013      	movs	r3, r2
 80160e2:	2200      	movs	r2, #0
 80160e4:	2180      	movs	r1, #128	@ 0x80
 80160e6:	f002 fabb 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 80160ea:	1e03      	subs	r3, r0, #0
 80160ec:	d001      	beq.n	80160f2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80160ee:	2301      	movs	r3, #1
 80160f0:	e053      	b.n	801619a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160f6:	b29b      	uxth	r3, r3
 80160f8:	2bff      	cmp	r3, #255	@ 0xff
 80160fa:	d911      	bls.n	8016120 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	22ff      	movs	r2, #255	@ 0xff
 8016100:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016106:	b2da      	uxtb	r2, r3
 8016108:	2380      	movs	r3, #128	@ 0x80
 801610a:	045c      	lsls	r4, r3, #17
 801610c:	230a      	movs	r3, #10
 801610e:	18fb      	adds	r3, r7, r3
 8016110:	8819      	ldrh	r1, [r3, #0]
 8016112:	68f8      	ldr	r0, [r7, #12]
 8016114:	2300      	movs	r3, #0
 8016116:	9300      	str	r3, [sp, #0]
 8016118:	0023      	movs	r3, r4
 801611a:	f002 fcf3 	bl	8018b04 <I2C_TransferConfig>
 801611e:	e012      	b.n	8016146 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016124:	b29a      	uxth	r2, r3
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801612e:	b2da      	uxtb	r2, r3
 8016130:	2380      	movs	r3, #128	@ 0x80
 8016132:	049c      	lsls	r4, r3, #18
 8016134:	230a      	movs	r3, #10
 8016136:	18fb      	adds	r3, r7, r3
 8016138:	8819      	ldrh	r1, [r3, #0]
 801613a:	68f8      	ldr	r0, [r7, #12]
 801613c:	2300      	movs	r3, #0
 801613e:	9300      	str	r3, [sp, #0]
 8016140:	0023      	movs	r3, r4
 8016142:	f002 fcdf 	bl	8018b04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801614a:	b29b      	uxth	r3, r3
 801614c:	2b00      	cmp	r3, #0
 801614e:	d198      	bne.n	8016082 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016150:	697a      	ldr	r2, [r7, #20]
 8016152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	0018      	movs	r0, r3
 8016158:	f002 fb16 	bl	8018788 <I2C_WaitOnSTOPFlagUntilTimeout>
 801615c:	1e03      	subs	r3, r0, #0
 801615e:	d001      	beq.n	8016164 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8016160:	2301      	movs	r3, #1
 8016162:	e01a      	b.n	801619a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	2220      	movs	r2, #32
 801616a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	685a      	ldr	r2, [r3, #4]
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	490c      	ldr	r1, [pc, #48]	@ (80161a8 <HAL_I2C_Master_Transmit+0x20c>)
 8016178:	400a      	ands	r2, r1
 801617a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2241      	movs	r2, #65	@ 0x41
 8016180:	2120      	movs	r1, #32
 8016182:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	2242      	movs	r2, #66	@ 0x42
 8016188:	2100      	movs	r1, #0
 801618a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2240      	movs	r2, #64	@ 0x40
 8016190:	2100      	movs	r1, #0
 8016192:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016194:	2300      	movs	r3, #0
 8016196:	e000      	b.n	801619a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8016198:	2302      	movs	r3, #2
  }
}
 801619a:	0018      	movs	r0, r3
 801619c:	46bd      	mov	sp, r7
 801619e:	b007      	add	sp, #28
 80161a0:	bd90      	pop	{r4, r7, pc}
 80161a2:	46c0      	nop			@ (mov r8, r8)
 80161a4:	80002000 	.word	0x80002000
 80161a8:	fe00e800 	.word	0xfe00e800

080161ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80161ac:	b590      	push	{r4, r7, lr}
 80161ae:	b089      	sub	sp, #36	@ 0x24
 80161b0:	af02      	add	r7, sp, #8
 80161b2:	60f8      	str	r0, [r7, #12]
 80161b4:	0008      	movs	r0, r1
 80161b6:	607a      	str	r2, [r7, #4]
 80161b8:	0019      	movs	r1, r3
 80161ba:	230a      	movs	r3, #10
 80161bc:	18fb      	adds	r3, r7, r3
 80161be:	1c02      	adds	r2, r0, #0
 80161c0:	801a      	strh	r2, [r3, #0]
 80161c2:	2308      	movs	r3, #8
 80161c4:	18fb      	adds	r3, r7, r3
 80161c6:	1c0a      	adds	r2, r1, #0
 80161c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2241      	movs	r2, #65	@ 0x41
 80161ce:	5c9b      	ldrb	r3, [r3, r2]
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	2b20      	cmp	r3, #32
 80161d4:	d000      	beq.n	80161d8 <HAL_I2C_Master_Receive+0x2c>
 80161d6:	e0e8      	b.n	80163aa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2240      	movs	r2, #64	@ 0x40
 80161dc:	5c9b      	ldrb	r3, [r3, r2]
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d101      	bne.n	80161e6 <HAL_I2C_Master_Receive+0x3a>
 80161e2:	2302      	movs	r3, #2
 80161e4:	e0e2      	b.n	80163ac <HAL_I2C_Master_Receive+0x200>
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2240      	movs	r2, #64	@ 0x40
 80161ea:	2101      	movs	r1, #1
 80161ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80161ee:	f7fe fb93 	bl	8014918 <HAL_GetTick>
 80161f2:	0003      	movs	r3, r0
 80161f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80161f6:	2380      	movs	r3, #128	@ 0x80
 80161f8:	0219      	lsls	r1, r3, #8
 80161fa:	68f8      	ldr	r0, [r7, #12]
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	9300      	str	r3, [sp, #0]
 8016200:	2319      	movs	r3, #25
 8016202:	2201      	movs	r2, #1
 8016204:	f002 fa2c 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8016208:	1e03      	subs	r3, r0, #0
 801620a:	d001      	beq.n	8016210 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 801620c:	2301      	movs	r3, #1
 801620e:	e0cd      	b.n	80163ac <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2241      	movs	r2, #65	@ 0x41
 8016214:	2122      	movs	r1, #34	@ 0x22
 8016216:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	2242      	movs	r2, #66	@ 0x42
 801621c:	2110      	movs	r1, #16
 801621e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2200      	movs	r2, #0
 8016224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	687a      	ldr	r2, [r7, #4]
 801622a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2208      	movs	r2, #8
 8016230:	18ba      	adds	r2, r7, r2
 8016232:	8812      	ldrh	r2, [r2, #0]
 8016234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2200      	movs	r2, #0
 801623a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016240:	b29b      	uxth	r3, r3
 8016242:	2bff      	cmp	r3, #255	@ 0xff
 8016244:	d911      	bls.n	801626a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	22ff      	movs	r2, #255	@ 0xff
 801624a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016250:	b2da      	uxtb	r2, r3
 8016252:	2380      	movs	r3, #128	@ 0x80
 8016254:	045c      	lsls	r4, r3, #17
 8016256:	230a      	movs	r3, #10
 8016258:	18fb      	adds	r3, r7, r3
 801625a:	8819      	ldrh	r1, [r3, #0]
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	4b55      	ldr	r3, [pc, #340]	@ (80163b4 <HAL_I2C_Master_Receive+0x208>)
 8016260:	9300      	str	r3, [sp, #0]
 8016262:	0023      	movs	r3, r4
 8016264:	f002 fc4e 	bl	8018b04 <I2C_TransferConfig>
 8016268:	e076      	b.n	8016358 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801626e:	b29a      	uxth	r2, r3
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016278:	b2da      	uxtb	r2, r3
 801627a:	2380      	movs	r3, #128	@ 0x80
 801627c:	049c      	lsls	r4, r3, #18
 801627e:	230a      	movs	r3, #10
 8016280:	18fb      	adds	r3, r7, r3
 8016282:	8819      	ldrh	r1, [r3, #0]
 8016284:	68f8      	ldr	r0, [r7, #12]
 8016286:	4b4b      	ldr	r3, [pc, #300]	@ (80163b4 <HAL_I2C_Master_Receive+0x208>)
 8016288:	9300      	str	r3, [sp, #0]
 801628a:	0023      	movs	r3, r4
 801628c:	f002 fc3a 	bl	8018b04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016290:	e062      	b.n	8016358 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016292:	697a      	ldr	r2, [r7, #20]
 8016294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	0018      	movs	r0, r3
 801629a:	f002 fab9 	bl	8018810 <I2C_WaitOnRXNEFlagUntilTimeout>
 801629e:	1e03      	subs	r3, r0, #0
 80162a0:	d001      	beq.n	80162a6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80162a2:	2301      	movs	r3, #1
 80162a4:	e082      	b.n	80163ac <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162b0:	b2d2      	uxtb	r2, r2
 80162b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162b8:	1c5a      	adds	r2, r3, #1
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162c2:	3b01      	subs	r3, #1
 80162c4:	b29a      	uxth	r2, r3
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	3b01      	subs	r3, #1
 80162d2:	b29a      	uxth	r2, r3
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162dc:	b29b      	uxth	r3, r3
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d03a      	beq.n	8016358 <HAL_I2C_Master_Receive+0x1ac>
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d136      	bne.n	8016358 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80162ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80162ec:	68f8      	ldr	r0, [r7, #12]
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	9300      	str	r3, [sp, #0]
 80162f2:	0013      	movs	r3, r2
 80162f4:	2200      	movs	r2, #0
 80162f6:	2180      	movs	r1, #128	@ 0x80
 80162f8:	f002 f9b2 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 80162fc:	1e03      	subs	r3, r0, #0
 80162fe:	d001      	beq.n	8016304 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8016300:	2301      	movs	r3, #1
 8016302:	e053      	b.n	80163ac <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016308:	b29b      	uxth	r3, r3
 801630a:	2bff      	cmp	r3, #255	@ 0xff
 801630c:	d911      	bls.n	8016332 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	22ff      	movs	r2, #255	@ 0xff
 8016312:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016318:	b2da      	uxtb	r2, r3
 801631a:	2380      	movs	r3, #128	@ 0x80
 801631c:	045c      	lsls	r4, r3, #17
 801631e:	230a      	movs	r3, #10
 8016320:	18fb      	adds	r3, r7, r3
 8016322:	8819      	ldrh	r1, [r3, #0]
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	2300      	movs	r3, #0
 8016328:	9300      	str	r3, [sp, #0]
 801632a:	0023      	movs	r3, r4
 801632c:	f002 fbea 	bl	8018b04 <I2C_TransferConfig>
 8016330:	e012      	b.n	8016358 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016336:	b29a      	uxth	r2, r3
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016340:	b2da      	uxtb	r2, r3
 8016342:	2380      	movs	r3, #128	@ 0x80
 8016344:	049c      	lsls	r4, r3, #18
 8016346:	230a      	movs	r3, #10
 8016348:	18fb      	adds	r3, r7, r3
 801634a:	8819      	ldrh	r1, [r3, #0]
 801634c:	68f8      	ldr	r0, [r7, #12]
 801634e:	2300      	movs	r3, #0
 8016350:	9300      	str	r3, [sp, #0]
 8016352:	0023      	movs	r3, r4
 8016354:	f002 fbd6 	bl	8018b04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801635c:	b29b      	uxth	r3, r3
 801635e:	2b00      	cmp	r3, #0
 8016360:	d197      	bne.n	8016292 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016362:	697a      	ldr	r2, [r7, #20]
 8016364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	0018      	movs	r0, r3
 801636a:	f002 fa0d 	bl	8018788 <I2C_WaitOnSTOPFlagUntilTimeout>
 801636e:	1e03      	subs	r3, r0, #0
 8016370:	d001      	beq.n	8016376 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8016372:	2301      	movs	r3, #1
 8016374:	e01a      	b.n	80163ac <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	2220      	movs	r2, #32
 801637c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	685a      	ldr	r2, [r3, #4]
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	490b      	ldr	r1, [pc, #44]	@ (80163b8 <HAL_I2C_Master_Receive+0x20c>)
 801638a:	400a      	ands	r2, r1
 801638c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	2241      	movs	r2, #65	@ 0x41
 8016392:	2120      	movs	r1, #32
 8016394:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	2242      	movs	r2, #66	@ 0x42
 801639a:	2100      	movs	r1, #0
 801639c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	2240      	movs	r2, #64	@ 0x40
 80163a2:	2100      	movs	r1, #0
 80163a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80163a6:	2300      	movs	r3, #0
 80163a8:	e000      	b.n	80163ac <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80163aa:	2302      	movs	r3, #2
  }
}
 80163ac:	0018      	movs	r0, r3
 80163ae:	46bd      	mov	sp, r7
 80163b0:	b007      	add	sp, #28
 80163b2:	bd90      	pop	{r4, r7, pc}
 80163b4:	80002400 	.word	0x80002400
 80163b8:	fe00e800 	.word	0xfe00e800

080163bc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80163bc:	b5b0      	push	{r4, r5, r7, lr}
 80163be:	b088      	sub	sp, #32
 80163c0:	af02      	add	r7, sp, #8
 80163c2:	60f8      	str	r0, [r7, #12]
 80163c4:	0008      	movs	r0, r1
 80163c6:	607a      	str	r2, [r7, #4]
 80163c8:	0019      	movs	r1, r3
 80163ca:	230a      	movs	r3, #10
 80163cc:	18fb      	adds	r3, r7, r3
 80163ce:	1c02      	adds	r2, r0, #0
 80163d0:	801a      	strh	r2, [r3, #0]
 80163d2:	2308      	movs	r3, #8
 80163d4:	18fb      	adds	r3, r7, r3
 80163d6:	1c0a      	adds	r2, r1, #0
 80163d8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2241      	movs	r2, #65	@ 0x41
 80163de:	5c9b      	ldrb	r3, [r3, r2]
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	2b20      	cmp	r3, #32
 80163e4:	d000      	beq.n	80163e8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80163e6:	e0dd      	b.n	80165a4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	699a      	ldr	r2, [r3, #24]
 80163ee:	2380      	movs	r3, #128	@ 0x80
 80163f0:	021b      	lsls	r3, r3, #8
 80163f2:	401a      	ands	r2, r3
 80163f4:	2380      	movs	r3, #128	@ 0x80
 80163f6:	021b      	lsls	r3, r3, #8
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d101      	bne.n	8016400 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80163fc:	2302      	movs	r3, #2
 80163fe:	e0d2      	b.n	80165a6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2240      	movs	r2, #64	@ 0x40
 8016404:	5c9b      	ldrb	r3, [r3, r2]
 8016406:	2b01      	cmp	r3, #1
 8016408:	d101      	bne.n	801640e <HAL_I2C_Master_Transmit_DMA+0x52>
 801640a:	2302      	movs	r3, #2
 801640c:	e0cb      	b.n	80165a6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2240      	movs	r2, #64	@ 0x40
 8016412:	2101      	movs	r1, #1
 8016414:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2241      	movs	r2, #65	@ 0x41
 801641a:	2121      	movs	r1, #33	@ 0x21
 801641c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2242      	movs	r2, #66	@ 0x42
 8016422:	2110      	movs	r1, #16
 8016424:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2200      	movs	r2, #0
 801642a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	687a      	ldr	r2, [r7, #4]
 8016430:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2208      	movs	r2, #8
 8016436:	18ba      	adds	r2, r7, r2
 8016438:	8812      	ldrh	r2, [r2, #0]
 801643a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	4a5c      	ldr	r2, [pc, #368]	@ (80165b0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8016440:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	4a5b      	ldr	r2, [pc, #364]	@ (80165b4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8016446:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801644c:	b29b      	uxth	r3, r3
 801644e:	2bff      	cmp	r3, #255	@ 0xff
 8016450:	d906      	bls.n	8016460 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	22ff      	movs	r2, #255	@ 0xff
 8016456:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8016458:	2380      	movs	r3, #128	@ 0x80
 801645a:	045b      	lsls	r3, r3, #17
 801645c:	617b      	str	r3, [r7, #20]
 801645e:	e007      	b.n	8016470 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016464:	b29a      	uxth	r2, r3
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801646a:	2380      	movs	r3, #128	@ 0x80
 801646c:	049b      	lsls	r3, r3, #18
 801646e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016474:	2b00      	cmp	r3, #0
 8016476:	d100      	bne.n	801647a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8016478:	e078      	b.n	801656c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801647e:	2b00      	cmp	r3, #0
 8016480:	d023      	beq.n	80164ca <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016486:	4a4c      	ldr	r2, [pc, #304]	@ (80165b8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8016488:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801648e:	4a4b      	ldr	r2, [pc, #300]	@ (80165bc <HAL_I2C_Master_Transmit_DMA+0x200>)
 8016490:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016496:	2200      	movs	r2, #0
 8016498:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801649e:	2200      	movs	r2, #0
 80164a0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80164a6:	6879      	ldr	r1, [r7, #4]
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	3328      	adds	r3, #40	@ 0x28
 80164ae:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80164b4:	2513      	movs	r5, #19
 80164b6:	197c      	adds	r4, r7, r5
 80164b8:	f7fe ff62 	bl	8015380 <HAL_DMA_Start_IT>
 80164bc:	0003      	movs	r3, r0
 80164be:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80164c0:	197b      	adds	r3, r7, r5
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d13d      	bne.n	8016544 <HAL_I2C_Master_Transmit_DMA+0x188>
 80164c8:	e013      	b.n	80164f2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	2241      	movs	r2, #65	@ 0x41
 80164ce:	2120      	movs	r1, #32
 80164d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	2242      	movs	r2, #66	@ 0x42
 80164d6:	2100      	movs	r1, #0
 80164d8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164de:	2280      	movs	r2, #128	@ 0x80
 80164e0:	431a      	orrs	r2, r3
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	2240      	movs	r2, #64	@ 0x40
 80164ea:	2100      	movs	r1, #0
 80164ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80164ee:	2301      	movs	r3, #1
 80164f0:	e059      	b.n	80165a6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164f6:	b2da      	uxtb	r2, r3
 80164f8:	697c      	ldr	r4, [r7, #20]
 80164fa:	230a      	movs	r3, #10
 80164fc:	18fb      	adds	r3, r7, r3
 80164fe:	8819      	ldrh	r1, [r3, #0]
 8016500:	68f8      	ldr	r0, [r7, #12]
 8016502:	4b2f      	ldr	r3, [pc, #188]	@ (80165c0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016504:	9300      	str	r3, [sp, #0]
 8016506:	0023      	movs	r3, r4
 8016508:	f002 fafc 	bl	8018b04 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016510:	b29a      	uxth	r2, r3
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016516:	1ad3      	subs	r3, r2, r3
 8016518:	b29a      	uxth	r2, r3
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2240      	movs	r2, #64	@ 0x40
 8016522:	2100      	movs	r1, #0
 8016524:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	2110      	movs	r1, #16
 801652a:	0018      	movs	r0, r3
 801652c:	f002 fb24 	bl	8018b78 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	681a      	ldr	r2, [r3, #0]
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	2180      	movs	r1, #128	@ 0x80
 801653c:	01c9      	lsls	r1, r1, #7
 801653e:	430a      	orrs	r2, r1
 8016540:	601a      	str	r2, [r3, #0]
 8016542:	e02d      	b.n	80165a0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2241      	movs	r2, #65	@ 0x41
 8016548:	2120      	movs	r1, #32
 801654a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	2242      	movs	r2, #66	@ 0x42
 8016550:	2100      	movs	r1, #0
 8016552:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016558:	2210      	movs	r2, #16
 801655a:	431a      	orrs	r2, r3
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	2240      	movs	r2, #64	@ 0x40
 8016564:	2100      	movs	r1, #0
 8016566:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016568:	2301      	movs	r3, #1
 801656a:	e01c      	b.n	80165a6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	4a15      	ldr	r2, [pc, #84]	@ (80165c4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8016570:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016576:	b2da      	uxtb	r2, r3
 8016578:	2380      	movs	r3, #128	@ 0x80
 801657a:	049c      	lsls	r4, r3, #18
 801657c:	230a      	movs	r3, #10
 801657e:	18fb      	adds	r3, r7, r3
 8016580:	8819      	ldrh	r1, [r3, #0]
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	4b0e      	ldr	r3, [pc, #56]	@ (80165c0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016586:	9300      	str	r3, [sp, #0]
 8016588:	0023      	movs	r3, r4
 801658a:	f002 fabb 	bl	8018b04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2240      	movs	r2, #64	@ 0x40
 8016592:	2100      	movs	r1, #0
 8016594:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2101      	movs	r1, #1
 801659a:	0018      	movs	r0, r3
 801659c:	f002 faec 	bl	8018b78 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80165a0:	2300      	movs	r3, #0
 80165a2:	e000      	b.n	80165a6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80165a4:	2302      	movs	r3, #2
  }
}
 80165a6:	0018      	movs	r0, r3
 80165a8:	46bd      	mov	sp, r7
 80165aa:	b006      	add	sp, #24
 80165ac:	bdb0      	pop	{r4, r5, r7, pc}
 80165ae:	46c0      	nop			@ (mov r8, r8)
 80165b0:	ffff0000 	.word	0xffff0000
 80165b4:	080172ed 	.word	0x080172ed
 80165b8:	080184b1 	.word	0x080184b1
 80165bc:	080185f1 	.word	0x080185f1
 80165c0:	80002000 	.word	0x80002000
 80165c4:	08016e41 	.word	0x08016e41

080165c8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80165c8:	b5b0      	push	{r4, r5, r7, lr}
 80165ca:	b088      	sub	sp, #32
 80165cc:	af02      	add	r7, sp, #8
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	0008      	movs	r0, r1
 80165d2:	607a      	str	r2, [r7, #4]
 80165d4:	0019      	movs	r1, r3
 80165d6:	230a      	movs	r3, #10
 80165d8:	18fb      	adds	r3, r7, r3
 80165da:	1c02      	adds	r2, r0, #0
 80165dc:	801a      	strh	r2, [r3, #0]
 80165de:	2308      	movs	r3, #8
 80165e0:	18fb      	adds	r3, r7, r3
 80165e2:	1c0a      	adds	r2, r1, #0
 80165e4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2241      	movs	r2, #65	@ 0x41
 80165ea:	5c9b      	ldrb	r3, [r3, r2]
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	2b20      	cmp	r3, #32
 80165f0:	d000      	beq.n	80165f4 <HAL_I2C_Master_Receive_DMA+0x2c>
 80165f2:	e0dd      	b.n	80167b0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	699a      	ldr	r2, [r3, #24]
 80165fa:	2380      	movs	r3, #128	@ 0x80
 80165fc:	021b      	lsls	r3, r3, #8
 80165fe:	401a      	ands	r2, r3
 8016600:	2380      	movs	r3, #128	@ 0x80
 8016602:	021b      	lsls	r3, r3, #8
 8016604:	429a      	cmp	r2, r3
 8016606:	d101      	bne.n	801660c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8016608:	2302      	movs	r3, #2
 801660a:	e0d2      	b.n	80167b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	2240      	movs	r2, #64	@ 0x40
 8016610:	5c9b      	ldrb	r3, [r3, r2]
 8016612:	2b01      	cmp	r3, #1
 8016614:	d101      	bne.n	801661a <HAL_I2C_Master_Receive_DMA+0x52>
 8016616:	2302      	movs	r3, #2
 8016618:	e0cb      	b.n	80167b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2240      	movs	r2, #64	@ 0x40
 801661e:	2101      	movs	r1, #1
 8016620:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2241      	movs	r2, #65	@ 0x41
 8016626:	2122      	movs	r1, #34	@ 0x22
 8016628:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	2242      	movs	r2, #66	@ 0x42
 801662e:	2110      	movs	r1, #16
 8016630:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	2200      	movs	r2, #0
 8016636:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	2208      	movs	r2, #8
 8016642:	18ba      	adds	r2, r7, r2
 8016644:	8812      	ldrh	r2, [r2, #0]
 8016646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	4a5c      	ldr	r2, [pc, #368]	@ (80167bc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 801664c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	4a5b      	ldr	r2, [pc, #364]	@ (80167c0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8016652:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016658:	b29b      	uxth	r3, r3
 801665a:	2bff      	cmp	r3, #255	@ 0xff
 801665c:	d906      	bls.n	801666c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	22ff      	movs	r2, #255	@ 0xff
 8016662:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8016664:	2380      	movs	r3, #128	@ 0x80
 8016666:	045b      	lsls	r3, r3, #17
 8016668:	617b      	str	r3, [r7, #20]
 801666a:	e007      	b.n	801667c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016670:	b29a      	uxth	r2, r3
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8016676:	2380      	movs	r3, #128	@ 0x80
 8016678:	049b      	lsls	r3, r3, #18
 801667a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016680:	2b00      	cmp	r3, #0
 8016682:	d100      	bne.n	8016686 <HAL_I2C_Master_Receive_DMA+0xbe>
 8016684:	e078      	b.n	8016778 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801668a:	2b00      	cmp	r3, #0
 801668c:	d023      	beq.n	80166d6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016692:	4a4c      	ldr	r2, [pc, #304]	@ (80167c4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8016694:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801669a:	4a4b      	ldr	r2, [pc, #300]	@ (80167c8 <HAL_I2C_Master_Receive_DMA+0x200>)
 801669c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166a2:	2200      	movs	r2, #0
 80166a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166aa:	2200      	movs	r2, #0
 80166ac:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	3324      	adds	r3, #36	@ 0x24
 80166b8:	0019      	movs	r1, r3
 80166ba:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80166c0:	2513      	movs	r5, #19
 80166c2:	197c      	adds	r4, r7, r5
 80166c4:	f7fe fe5c 	bl	8015380 <HAL_DMA_Start_IT>
 80166c8:	0003      	movs	r3, r0
 80166ca:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80166cc:	197b      	adds	r3, r7, r5
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d13d      	bne.n	8016750 <HAL_I2C_Master_Receive_DMA+0x188>
 80166d4:	e013      	b.n	80166fe <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	2241      	movs	r2, #65	@ 0x41
 80166da:	2120      	movs	r1, #32
 80166dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	2242      	movs	r2, #66	@ 0x42
 80166e2:	2100      	movs	r1, #0
 80166e4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166ea:	2280      	movs	r2, #128	@ 0x80
 80166ec:	431a      	orrs	r2, r3
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	2240      	movs	r2, #64	@ 0x40
 80166f6:	2100      	movs	r1, #0
 80166f8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80166fa:	2301      	movs	r3, #1
 80166fc:	e059      	b.n	80167b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016702:	b2da      	uxtb	r2, r3
 8016704:	697c      	ldr	r4, [r7, #20]
 8016706:	230a      	movs	r3, #10
 8016708:	18fb      	adds	r3, r7, r3
 801670a:	8819      	ldrh	r1, [r3, #0]
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	4b2f      	ldr	r3, [pc, #188]	@ (80167cc <HAL_I2C_Master_Receive_DMA+0x204>)
 8016710:	9300      	str	r3, [sp, #0]
 8016712:	0023      	movs	r3, r4
 8016714:	f002 f9f6 	bl	8018b04 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801671c:	b29a      	uxth	r2, r3
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016722:	1ad3      	subs	r3, r2, r3
 8016724:	b29a      	uxth	r2, r3
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	2240      	movs	r2, #64	@ 0x40
 801672e:	2100      	movs	r1, #0
 8016730:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	2110      	movs	r1, #16
 8016736:	0018      	movs	r0, r3
 8016738:	f002 fa1e 	bl	8018b78 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	2180      	movs	r1, #128	@ 0x80
 8016748:	0209      	lsls	r1, r1, #8
 801674a:	430a      	orrs	r2, r1
 801674c:	601a      	str	r2, [r3, #0]
 801674e:	e02d      	b.n	80167ac <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	2241      	movs	r2, #65	@ 0x41
 8016754:	2120      	movs	r1, #32
 8016756:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	2242      	movs	r2, #66	@ 0x42
 801675c:	2100      	movs	r1, #0
 801675e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016764:	2210      	movs	r2, #16
 8016766:	431a      	orrs	r2, r3
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2240      	movs	r2, #64	@ 0x40
 8016770:	2100      	movs	r1, #0
 8016772:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016774:	2301      	movs	r3, #1
 8016776:	e01c      	b.n	80167b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	4a15      	ldr	r2, [pc, #84]	@ (80167d0 <HAL_I2C_Master_Receive_DMA+0x208>)
 801677c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016782:	b2da      	uxtb	r2, r3
 8016784:	2380      	movs	r3, #128	@ 0x80
 8016786:	049c      	lsls	r4, r3, #18
 8016788:	230a      	movs	r3, #10
 801678a:	18fb      	adds	r3, r7, r3
 801678c:	8819      	ldrh	r1, [r3, #0]
 801678e:	68f8      	ldr	r0, [r7, #12]
 8016790:	4b0e      	ldr	r3, [pc, #56]	@ (80167cc <HAL_I2C_Master_Receive_DMA+0x204>)
 8016792:	9300      	str	r3, [sp, #0]
 8016794:	0023      	movs	r3, r4
 8016796:	f002 f9b5 	bl	8018b04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	2240      	movs	r2, #64	@ 0x40
 801679e:	2100      	movs	r1, #0
 80167a0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	2101      	movs	r1, #1
 80167a6:	0018      	movs	r0, r3
 80167a8:	f002 f9e6 	bl	8018b78 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80167ac:	2300      	movs	r3, #0
 80167ae:	e000      	b.n	80167b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80167b0:	2302      	movs	r3, #2
  }
}
 80167b2:	0018      	movs	r0, r3
 80167b4:	46bd      	mov	sp, r7
 80167b6:	b006      	add	sp, #24
 80167b8:	bdb0      	pop	{r4, r5, r7, pc}
 80167ba:	46c0      	nop			@ (mov r8, r8)
 80167bc:	ffff0000 	.word	0xffff0000
 80167c0:	080172ed 	.word	0x080172ed
 80167c4:	08018551 	.word	0x08018551
 80167c8:	080185f1 	.word	0x080185f1
 80167cc:	80002400 	.word	0x80002400
 80167d0:	08016e41 	.word	0x08016e41

080167d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80167d4:	b590      	push	{r4, r7, lr}
 80167d6:	b089      	sub	sp, #36	@ 0x24
 80167d8:	af02      	add	r7, sp, #8
 80167da:	60f8      	str	r0, [r7, #12]
 80167dc:	000c      	movs	r4, r1
 80167de:	0010      	movs	r0, r2
 80167e0:	0019      	movs	r1, r3
 80167e2:	230a      	movs	r3, #10
 80167e4:	18fb      	adds	r3, r7, r3
 80167e6:	1c22      	adds	r2, r4, #0
 80167e8:	801a      	strh	r2, [r3, #0]
 80167ea:	2308      	movs	r3, #8
 80167ec:	18fb      	adds	r3, r7, r3
 80167ee:	1c02      	adds	r2, r0, #0
 80167f0:	801a      	strh	r2, [r3, #0]
 80167f2:	1dbb      	adds	r3, r7, #6
 80167f4:	1c0a      	adds	r2, r1, #0
 80167f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2241      	movs	r2, #65	@ 0x41
 80167fc:	5c9b      	ldrb	r3, [r3, r2]
 80167fe:	b2db      	uxtb	r3, r3
 8016800:	2b20      	cmp	r3, #32
 8016802:	d000      	beq.n	8016806 <HAL_I2C_Mem_Write+0x32>
 8016804:	e10c      	b.n	8016a20 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8016806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016808:	2b00      	cmp	r3, #0
 801680a:	d004      	beq.n	8016816 <HAL_I2C_Mem_Write+0x42>
 801680c:	232c      	movs	r3, #44	@ 0x2c
 801680e:	18fb      	adds	r3, r7, r3
 8016810:	881b      	ldrh	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d105      	bne.n	8016822 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2280      	movs	r2, #128	@ 0x80
 801681a:	0092      	lsls	r2, r2, #2
 801681c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801681e:	2301      	movs	r3, #1
 8016820:	e0ff      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	2240      	movs	r2, #64	@ 0x40
 8016826:	5c9b      	ldrb	r3, [r3, r2]
 8016828:	2b01      	cmp	r3, #1
 801682a:	d101      	bne.n	8016830 <HAL_I2C_Mem_Write+0x5c>
 801682c:	2302      	movs	r3, #2
 801682e:	e0f8      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	2240      	movs	r2, #64	@ 0x40
 8016834:	2101      	movs	r1, #1
 8016836:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016838:	f7fe f86e 	bl	8014918 <HAL_GetTick>
 801683c:	0003      	movs	r3, r0
 801683e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016840:	2380      	movs	r3, #128	@ 0x80
 8016842:	0219      	lsls	r1, r3, #8
 8016844:	68f8      	ldr	r0, [r7, #12]
 8016846:	697b      	ldr	r3, [r7, #20]
 8016848:	9300      	str	r3, [sp, #0]
 801684a:	2319      	movs	r3, #25
 801684c:	2201      	movs	r2, #1
 801684e:	f001 ff07 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8016852:	1e03      	subs	r3, r0, #0
 8016854:	d001      	beq.n	801685a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8016856:	2301      	movs	r3, #1
 8016858:	e0e3      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	2241      	movs	r2, #65	@ 0x41
 801685e:	2121      	movs	r1, #33	@ 0x21
 8016860:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	2242      	movs	r2, #66	@ 0x42
 8016866:	2140      	movs	r1, #64	@ 0x40
 8016868:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	2200      	movs	r2, #0
 801686e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016874:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	222c      	movs	r2, #44	@ 0x2c
 801687a:	18ba      	adds	r2, r7, r2
 801687c:	8812      	ldrh	r2, [r2, #0]
 801687e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	2200      	movs	r2, #0
 8016884:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016886:	1dbb      	adds	r3, r7, #6
 8016888:	881c      	ldrh	r4, [r3, #0]
 801688a:	2308      	movs	r3, #8
 801688c:	18fb      	adds	r3, r7, r3
 801688e:	881a      	ldrh	r2, [r3, #0]
 8016890:	230a      	movs	r3, #10
 8016892:	18fb      	adds	r3, r7, r3
 8016894:	8819      	ldrh	r1, [r3, #0]
 8016896:	68f8      	ldr	r0, [r7, #12]
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	9301      	str	r3, [sp, #4]
 801689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801689e:	9300      	str	r3, [sp, #0]
 80168a0:	0023      	movs	r3, r4
 80168a2:	f001 f855 	bl	8017950 <I2C_RequestMemoryWrite>
 80168a6:	1e03      	subs	r3, r0, #0
 80168a8:	d005      	beq.n	80168b6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2240      	movs	r2, #64	@ 0x40
 80168ae:	2100      	movs	r1, #0
 80168b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80168b2:	2301      	movs	r3, #1
 80168b4:	e0b5      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	2bff      	cmp	r3, #255	@ 0xff
 80168be:	d911      	bls.n	80168e4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	22ff      	movs	r2, #255	@ 0xff
 80168c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168ca:	b2da      	uxtb	r2, r3
 80168cc:	2380      	movs	r3, #128	@ 0x80
 80168ce:	045c      	lsls	r4, r3, #17
 80168d0:	230a      	movs	r3, #10
 80168d2:	18fb      	adds	r3, r7, r3
 80168d4:	8819      	ldrh	r1, [r3, #0]
 80168d6:	68f8      	ldr	r0, [r7, #12]
 80168d8:	2300      	movs	r3, #0
 80168da:	9300      	str	r3, [sp, #0]
 80168dc:	0023      	movs	r3, r4
 80168de:	f002 f911 	bl	8018b04 <I2C_TransferConfig>
 80168e2:	e012      	b.n	801690a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168e8:	b29a      	uxth	r2, r3
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168f2:	b2da      	uxtb	r2, r3
 80168f4:	2380      	movs	r3, #128	@ 0x80
 80168f6:	049c      	lsls	r4, r3, #18
 80168f8:	230a      	movs	r3, #10
 80168fa:	18fb      	adds	r3, r7, r3
 80168fc:	8819      	ldrh	r1, [r3, #0]
 80168fe:	68f8      	ldr	r0, [r7, #12]
 8016900:	2300      	movs	r3, #0
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	0023      	movs	r3, r4
 8016906:	f002 f8fd 	bl	8018b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801690a:	697a      	ldr	r2, [r7, #20]
 801690c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	0018      	movs	r0, r3
 8016912:	f001 fef3 	bl	80186fc <I2C_WaitOnTXISFlagUntilTimeout>
 8016916:	1e03      	subs	r3, r0, #0
 8016918:	d001      	beq.n	801691e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 801691a:	2301      	movs	r3, #1
 801691c:	e081      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016922:	781a      	ldrb	r2, [r3, #0]
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801692e:	1c5a      	adds	r2, r3, #1
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016938:	b29b      	uxth	r3, r3
 801693a:	3b01      	subs	r3, #1
 801693c:	b29a      	uxth	r2, r3
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016946:	3b01      	subs	r3, #1
 8016948:	b29a      	uxth	r2, r3
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016952:	b29b      	uxth	r3, r3
 8016954:	2b00      	cmp	r3, #0
 8016956:	d03a      	beq.n	80169ce <HAL_I2C_Mem_Write+0x1fa>
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801695c:	2b00      	cmp	r3, #0
 801695e:	d136      	bne.n	80169ce <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016962:	68f8      	ldr	r0, [r7, #12]
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	0013      	movs	r3, r2
 801696a:	2200      	movs	r2, #0
 801696c:	2180      	movs	r1, #128	@ 0x80
 801696e:	f001 fe77 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8016972:	1e03      	subs	r3, r0, #0
 8016974:	d001      	beq.n	801697a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8016976:	2301      	movs	r3, #1
 8016978:	e053      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801697e:	b29b      	uxth	r3, r3
 8016980:	2bff      	cmp	r3, #255	@ 0xff
 8016982:	d911      	bls.n	80169a8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	22ff      	movs	r2, #255	@ 0xff
 8016988:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801698e:	b2da      	uxtb	r2, r3
 8016990:	2380      	movs	r3, #128	@ 0x80
 8016992:	045c      	lsls	r4, r3, #17
 8016994:	230a      	movs	r3, #10
 8016996:	18fb      	adds	r3, r7, r3
 8016998:	8819      	ldrh	r1, [r3, #0]
 801699a:	68f8      	ldr	r0, [r7, #12]
 801699c:	2300      	movs	r3, #0
 801699e:	9300      	str	r3, [sp, #0]
 80169a0:	0023      	movs	r3, r4
 80169a2:	f002 f8af 	bl	8018b04 <I2C_TransferConfig>
 80169a6:	e012      	b.n	80169ce <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169ac:	b29a      	uxth	r2, r3
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169b6:	b2da      	uxtb	r2, r3
 80169b8:	2380      	movs	r3, #128	@ 0x80
 80169ba:	049c      	lsls	r4, r3, #18
 80169bc:	230a      	movs	r3, #10
 80169be:	18fb      	adds	r3, r7, r3
 80169c0:	8819      	ldrh	r1, [r3, #0]
 80169c2:	68f8      	ldr	r0, [r7, #12]
 80169c4:	2300      	movs	r3, #0
 80169c6:	9300      	str	r3, [sp, #0]
 80169c8:	0023      	movs	r3, r4
 80169ca:	f002 f89b 	bl	8018b04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d198      	bne.n	801690a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80169d8:	697a      	ldr	r2, [r7, #20]
 80169da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	0018      	movs	r0, r3
 80169e0:	f001 fed2 	bl	8018788 <I2C_WaitOnSTOPFlagUntilTimeout>
 80169e4:	1e03      	subs	r3, r0, #0
 80169e6:	d001      	beq.n	80169ec <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80169e8:	2301      	movs	r3, #1
 80169ea:	e01a      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	2220      	movs	r2, #32
 80169f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	685a      	ldr	r2, [r3, #4]
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	490b      	ldr	r1, [pc, #44]	@ (8016a2c <HAL_I2C_Mem_Write+0x258>)
 8016a00:	400a      	ands	r2, r1
 8016a02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	2241      	movs	r2, #65	@ 0x41
 8016a08:	2120      	movs	r1, #32
 8016a0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	2242      	movs	r2, #66	@ 0x42
 8016a10:	2100      	movs	r1, #0
 8016a12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	2240      	movs	r2, #64	@ 0x40
 8016a18:	2100      	movs	r1, #0
 8016a1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	e000      	b.n	8016a22 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8016a20:	2302      	movs	r3, #2
  }
}
 8016a22:	0018      	movs	r0, r3
 8016a24:	46bd      	mov	sp, r7
 8016a26:	b007      	add	sp, #28
 8016a28:	bd90      	pop	{r4, r7, pc}
 8016a2a:	46c0      	nop			@ (mov r8, r8)
 8016a2c:	fe00e800 	.word	0xfe00e800

08016a30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a30:	b590      	push	{r4, r7, lr}
 8016a32:	b089      	sub	sp, #36	@ 0x24
 8016a34:	af02      	add	r7, sp, #8
 8016a36:	60f8      	str	r0, [r7, #12]
 8016a38:	000c      	movs	r4, r1
 8016a3a:	0010      	movs	r0, r2
 8016a3c:	0019      	movs	r1, r3
 8016a3e:	230a      	movs	r3, #10
 8016a40:	18fb      	adds	r3, r7, r3
 8016a42:	1c22      	adds	r2, r4, #0
 8016a44:	801a      	strh	r2, [r3, #0]
 8016a46:	2308      	movs	r3, #8
 8016a48:	18fb      	adds	r3, r7, r3
 8016a4a:	1c02      	adds	r2, r0, #0
 8016a4c:	801a      	strh	r2, [r3, #0]
 8016a4e:	1dbb      	adds	r3, r7, #6
 8016a50:	1c0a      	adds	r2, r1, #0
 8016a52:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	2241      	movs	r2, #65	@ 0x41
 8016a58:	5c9b      	ldrb	r3, [r3, r2]
 8016a5a:	b2db      	uxtb	r3, r3
 8016a5c:	2b20      	cmp	r3, #32
 8016a5e:	d000      	beq.n	8016a62 <HAL_I2C_Mem_Read+0x32>
 8016a60:	e110      	b.n	8016c84 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d004      	beq.n	8016a72 <HAL_I2C_Mem_Read+0x42>
 8016a68:	232c      	movs	r3, #44	@ 0x2c
 8016a6a:	18fb      	adds	r3, r7, r3
 8016a6c:	881b      	ldrh	r3, [r3, #0]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d105      	bne.n	8016a7e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	2280      	movs	r2, #128	@ 0x80
 8016a76:	0092      	lsls	r2, r2, #2
 8016a78:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	e103      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2240      	movs	r2, #64	@ 0x40
 8016a82:	5c9b      	ldrb	r3, [r3, r2]
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	d101      	bne.n	8016a8c <HAL_I2C_Mem_Read+0x5c>
 8016a88:	2302      	movs	r3, #2
 8016a8a:	e0fc      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2240      	movs	r2, #64	@ 0x40
 8016a90:	2101      	movs	r1, #1
 8016a92:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016a94:	f7fd ff40 	bl	8014918 <HAL_GetTick>
 8016a98:	0003      	movs	r3, r0
 8016a9a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016a9c:	2380      	movs	r3, #128	@ 0x80
 8016a9e:	0219      	lsls	r1, r3, #8
 8016aa0:	68f8      	ldr	r0, [r7, #12]
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	9300      	str	r3, [sp, #0]
 8016aa6:	2319      	movs	r3, #25
 8016aa8:	2201      	movs	r2, #1
 8016aaa:	f001 fdd9 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8016aae:	1e03      	subs	r3, r0, #0
 8016ab0:	d001      	beq.n	8016ab6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	e0e7      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	2241      	movs	r2, #65	@ 0x41
 8016aba:	2122      	movs	r1, #34	@ 0x22
 8016abc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	2242      	movs	r2, #66	@ 0x42
 8016ac2:	2140      	movs	r1, #64	@ 0x40
 8016ac4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	222c      	movs	r2, #44	@ 0x2c
 8016ad6:	18ba      	adds	r2, r7, r2
 8016ad8:	8812      	ldrh	r2, [r2, #0]
 8016ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016ae2:	1dbb      	adds	r3, r7, #6
 8016ae4:	881c      	ldrh	r4, [r3, #0]
 8016ae6:	2308      	movs	r3, #8
 8016ae8:	18fb      	adds	r3, r7, r3
 8016aea:	881a      	ldrh	r2, [r3, #0]
 8016aec:	230a      	movs	r3, #10
 8016aee:	18fb      	adds	r3, r7, r3
 8016af0:	8819      	ldrh	r1, [r3, #0]
 8016af2:	68f8      	ldr	r0, [r7, #12]
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	9301      	str	r3, [sp, #4]
 8016af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016afa:	9300      	str	r3, [sp, #0]
 8016afc:	0023      	movs	r3, r4
 8016afe:	f000 ff8b 	bl	8017a18 <I2C_RequestMemoryRead>
 8016b02:	1e03      	subs	r3, r0, #0
 8016b04:	d005      	beq.n	8016b12 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2240      	movs	r2, #64	@ 0x40
 8016b0a:	2100      	movs	r1, #0
 8016b0c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016b0e:	2301      	movs	r3, #1
 8016b10:	e0b9      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b16:	b29b      	uxth	r3, r3
 8016b18:	2bff      	cmp	r3, #255	@ 0xff
 8016b1a:	d911      	bls.n	8016b40 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	22ff      	movs	r2, #255	@ 0xff
 8016b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b26:	b2da      	uxtb	r2, r3
 8016b28:	2380      	movs	r3, #128	@ 0x80
 8016b2a:	045c      	lsls	r4, r3, #17
 8016b2c:	230a      	movs	r3, #10
 8016b2e:	18fb      	adds	r3, r7, r3
 8016b30:	8819      	ldrh	r1, [r3, #0]
 8016b32:	68f8      	ldr	r0, [r7, #12]
 8016b34:	4b56      	ldr	r3, [pc, #344]	@ (8016c90 <HAL_I2C_Mem_Read+0x260>)
 8016b36:	9300      	str	r3, [sp, #0]
 8016b38:	0023      	movs	r3, r4
 8016b3a:	f001 ffe3 	bl	8018b04 <I2C_TransferConfig>
 8016b3e:	e012      	b.n	8016b66 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b44:	b29a      	uxth	r2, r3
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b4e:	b2da      	uxtb	r2, r3
 8016b50:	2380      	movs	r3, #128	@ 0x80
 8016b52:	049c      	lsls	r4, r3, #18
 8016b54:	230a      	movs	r3, #10
 8016b56:	18fb      	adds	r3, r7, r3
 8016b58:	8819      	ldrh	r1, [r3, #0]
 8016b5a:	68f8      	ldr	r0, [r7, #12]
 8016b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8016c90 <HAL_I2C_Mem_Read+0x260>)
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	0023      	movs	r3, r4
 8016b62:	f001 ffcf 	bl	8018b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b68:	68f8      	ldr	r0, [r7, #12]
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	9300      	str	r3, [sp, #0]
 8016b6e:	0013      	movs	r3, r2
 8016b70:	2200      	movs	r2, #0
 8016b72:	2104      	movs	r1, #4
 8016b74:	f001 fd74 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8016b78:	1e03      	subs	r3, r0, #0
 8016b7a:	d001      	beq.n	8016b80 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	e082      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b8a:	b2d2      	uxtb	r2, r2
 8016b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b92:	1c5a      	adds	r2, r3, #1
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b9c:	3b01      	subs	r3, #1
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ba8:	b29b      	uxth	r3, r3
 8016baa:	3b01      	subs	r3, #1
 8016bac:	b29a      	uxth	r2, r3
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bb6:	b29b      	uxth	r3, r3
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d03a      	beq.n	8016c32 <HAL_I2C_Mem_Read+0x202>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d136      	bne.n	8016c32 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016bc6:	68f8      	ldr	r0, [r7, #12]
 8016bc8:	697b      	ldr	r3, [r7, #20]
 8016bca:	9300      	str	r3, [sp, #0]
 8016bcc:	0013      	movs	r3, r2
 8016bce:	2200      	movs	r2, #0
 8016bd0:	2180      	movs	r1, #128	@ 0x80
 8016bd2:	f001 fd45 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8016bd6:	1e03      	subs	r3, r0, #0
 8016bd8:	d001      	beq.n	8016bde <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016bda:	2301      	movs	r3, #1
 8016bdc:	e053      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	2bff      	cmp	r3, #255	@ 0xff
 8016be6:	d911      	bls.n	8016c0c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	22ff      	movs	r2, #255	@ 0xff
 8016bec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bf2:	b2da      	uxtb	r2, r3
 8016bf4:	2380      	movs	r3, #128	@ 0x80
 8016bf6:	045c      	lsls	r4, r3, #17
 8016bf8:	230a      	movs	r3, #10
 8016bfa:	18fb      	adds	r3, r7, r3
 8016bfc:	8819      	ldrh	r1, [r3, #0]
 8016bfe:	68f8      	ldr	r0, [r7, #12]
 8016c00:	2300      	movs	r3, #0
 8016c02:	9300      	str	r3, [sp, #0]
 8016c04:	0023      	movs	r3, r4
 8016c06:	f001 ff7d 	bl	8018b04 <I2C_TransferConfig>
 8016c0a:	e012      	b.n	8016c32 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c1a:	b2da      	uxtb	r2, r3
 8016c1c:	2380      	movs	r3, #128	@ 0x80
 8016c1e:	049c      	lsls	r4, r3, #18
 8016c20:	230a      	movs	r3, #10
 8016c22:	18fb      	adds	r3, r7, r3
 8016c24:	8819      	ldrh	r1, [r3, #0]
 8016c26:	68f8      	ldr	r0, [r7, #12]
 8016c28:	2300      	movs	r3, #0
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	0023      	movs	r3, r4
 8016c2e:	f001 ff69 	bl	8018b04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d194      	bne.n	8016b66 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016c3c:	697a      	ldr	r2, [r7, #20]
 8016c3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	0018      	movs	r0, r3
 8016c44:	f001 fda0 	bl	8018788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016c48:	1e03      	subs	r3, r0, #0
 8016c4a:	d001      	beq.n	8016c50 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	e01a      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	2220      	movs	r2, #32
 8016c56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	685a      	ldr	r2, [r3, #4]
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	490c      	ldr	r1, [pc, #48]	@ (8016c94 <HAL_I2C_Mem_Read+0x264>)
 8016c64:	400a      	ands	r2, r1
 8016c66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	2241      	movs	r2, #65	@ 0x41
 8016c6c:	2120      	movs	r1, #32
 8016c6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	2242      	movs	r2, #66	@ 0x42
 8016c74:	2100      	movs	r1, #0
 8016c76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	2240      	movs	r2, #64	@ 0x40
 8016c7c:	2100      	movs	r1, #0
 8016c7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016c80:	2300      	movs	r3, #0
 8016c82:	e000      	b.n	8016c86 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016c84:	2302      	movs	r3, #2
  }
}
 8016c86:	0018      	movs	r0, r3
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	b007      	add	sp, #28
 8016c8c:	bd90      	pop	{r4, r7, pc}
 8016c8e:	46c0      	nop			@ (mov r8, r8)
 8016c90:	80002400 	.word	0x80002400
 8016c94:	fe00e800 	.word	0xfe00e800

08016c98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b084      	sub	sp, #16
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	699b      	ldr	r3, [r3, #24]
 8016ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d005      	beq.n	8016cc4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cbc:	68ba      	ldr	r2, [r7, #8]
 8016cbe:	68f9      	ldr	r1, [r7, #12]
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	4798      	blx	r3
  }
}
 8016cc4:	46c0      	nop			@ (mov r8, r8)
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	b004      	add	sp, #16
 8016cca:	bd80      	pop	{r7, pc}

08016ccc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b086      	sub	sp, #24
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	699b      	ldr	r3, [r3, #24]
 8016cda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	0a1b      	lsrs	r3, r3, #8
 8016ce8:	001a      	movs	r2, r3
 8016cea:	2301      	movs	r3, #1
 8016cec:	4013      	ands	r3, r2
 8016cee:	d010      	beq.n	8016d12 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	09db      	lsrs	r3, r3, #7
 8016cf4:	001a      	movs	r2, r3
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016cfa:	d00a      	beq.n	8016d12 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d00:	2201      	movs	r2, #1
 8016d02:	431a      	orrs	r2, r3
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	2280      	movs	r2, #128	@ 0x80
 8016d0e:	0052      	lsls	r2, r2, #1
 8016d10:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	0a9b      	lsrs	r3, r3, #10
 8016d16:	001a      	movs	r2, r3
 8016d18:	2301      	movs	r3, #1
 8016d1a:	4013      	ands	r3, r2
 8016d1c:	d010      	beq.n	8016d40 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	09db      	lsrs	r3, r3, #7
 8016d22:	001a      	movs	r2, r3
 8016d24:	2301      	movs	r3, #1
 8016d26:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d28:	d00a      	beq.n	8016d40 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d2e:	2208      	movs	r2, #8
 8016d30:	431a      	orrs	r2, r3
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	2280      	movs	r2, #128	@ 0x80
 8016d3c:	00d2      	lsls	r2, r2, #3
 8016d3e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	0a5b      	lsrs	r3, r3, #9
 8016d44:	001a      	movs	r2, r3
 8016d46:	2301      	movs	r3, #1
 8016d48:	4013      	ands	r3, r2
 8016d4a:	d010      	beq.n	8016d6e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	09db      	lsrs	r3, r3, #7
 8016d50:	001a      	movs	r2, r3
 8016d52:	2301      	movs	r3, #1
 8016d54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016d56:	d00a      	beq.n	8016d6e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d5c:	2202      	movs	r2, #2
 8016d5e:	431a      	orrs	r2, r3
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	2280      	movs	r2, #128	@ 0x80
 8016d6a:	0092      	lsls	r2, r2, #2
 8016d6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	220b      	movs	r2, #11
 8016d78:	4013      	ands	r3, r2
 8016d7a:	d005      	beq.n	8016d88 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016d7c:	68fa      	ldr	r2, [r7, #12]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	0011      	movs	r1, r2
 8016d82:	0018      	movs	r0, r3
 8016d84:	f001 fa46 	bl	8018214 <I2C_ITError>
  }
}
 8016d88:	46c0      	nop			@ (mov r8, r8)
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	b006      	add	sp, #24
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b082      	sub	sp, #8
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016d98:	46c0      	nop			@ (mov r8, r8)
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	b002      	add	sp, #8
 8016d9e:	bd80      	pop	{r7, pc}

08016da0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016da8:	46c0      	nop			@ (mov r8, r8)
 8016daa:	46bd      	mov	sp, r7
 8016dac:	b002      	add	sp, #8
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016db8:	46c0      	nop			@ (mov r8, r8)
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	b002      	add	sp, #8
 8016dbe:	bd80      	pop	{r7, pc}

08016dc0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b082      	sub	sp, #8
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016dc8:	46c0      	nop			@ (mov r8, r8)
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	b002      	add	sp, #8
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
 8016dd8:	0008      	movs	r0, r1
 8016dda:	0011      	movs	r1, r2
 8016ddc:	1cfb      	adds	r3, r7, #3
 8016dde:	1c02      	adds	r2, r0, #0
 8016de0:	701a      	strb	r2, [r3, #0]
 8016de2:	003b      	movs	r3, r7
 8016de4:	1c0a      	adds	r2, r1, #0
 8016de6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016de8:	46c0      	nop			@ (mov r8, r8)
 8016dea:	46bd      	mov	sp, r7
 8016dec:	b002      	add	sp, #8
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016df8:	46c0      	nop			@ (mov r8, r8)
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	b002      	add	sp, #8
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016e08:	46c0      	nop			@ (mov r8, r8)
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	b002      	add	sp, #8
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016e18:	46c0      	nop			@ (mov r8, r8)
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	b002      	add	sp, #8
 8016e1e:	bd80      	pop	{r7, pc}

08016e20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b082      	sub	sp, #8
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016e28:	46c0      	nop			@ (mov r8, r8)
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	b002      	add	sp, #8
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b082      	sub	sp, #8
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016e38:	46c0      	nop			@ (mov r8, r8)
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	b002      	add	sp, #8
 8016e3e:	bd80      	pop	{r7, pc}

08016e40 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016e40:	b590      	push	{r4, r7, lr}
 8016e42:	b089      	sub	sp, #36	@ 0x24
 8016e44:	af02      	add	r7, sp, #8
 8016e46:	60f8      	str	r0, [r7, #12]
 8016e48:	60b9      	str	r1, [r7, #8]
 8016e4a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	2240      	movs	r2, #64	@ 0x40
 8016e54:	5c9b      	ldrb	r3, [r3, r2]
 8016e56:	2b01      	cmp	r3, #1
 8016e58:	d101      	bne.n	8016e5e <I2C_Master_ISR_IT+0x1e>
 8016e5a:	2302      	movs	r3, #2
 8016e5c:	e12b      	b.n	80170b6 <I2C_Master_ISR_IT+0x276>
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	2240      	movs	r2, #64	@ 0x40
 8016e62:	2101      	movs	r1, #1
 8016e64:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e66:	697b      	ldr	r3, [r7, #20]
 8016e68:	091b      	lsrs	r3, r3, #4
 8016e6a:	001a      	movs	r2, r3
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	4013      	ands	r3, r2
 8016e70:	d014      	beq.n	8016e9c <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	091b      	lsrs	r3, r3, #4
 8016e76:	001a      	movs	r2, r3
 8016e78:	2301      	movs	r3, #1
 8016e7a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e7c:	d00e      	beq.n	8016e9c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2210      	movs	r2, #16
 8016e84:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e8a:	2204      	movs	r2, #4
 8016e8c:	431a      	orrs	r2, r3
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	0018      	movs	r0, r3
 8016e96:	f001 fae8 	bl	801846a <I2C_Flush_TXDR>
 8016e9a:	e0f5      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	089b      	lsrs	r3, r3, #2
 8016ea0:	001a      	movs	r2, r3
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	4013      	ands	r3, r2
 8016ea6:	d023      	beq.n	8016ef0 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	089b      	lsrs	r3, r3, #2
 8016eac:	001a      	movs	r2, r3
 8016eae:	2301      	movs	r3, #1
 8016eb0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016eb2:	d01d      	beq.n	8016ef0 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016eb4:	697b      	ldr	r3, [r7, #20]
 8016eb6:	2204      	movs	r2, #4
 8016eb8:	4393      	bics	r3, r2
 8016eba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ec6:	b2d2      	uxtb	r2, r2
 8016ec8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ece:	1c5a      	adds	r2, r3, #1
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ed8:	3b01      	subs	r3, #1
 8016eda:	b29a      	uxth	r2, r3
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	3b01      	subs	r3, #1
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016eee:	e0cb      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	085b      	lsrs	r3, r3, #1
 8016ef4:	001a      	movs	r2, r3
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	4013      	ands	r3, r2
 8016efa:	d01e      	beq.n	8016f3a <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	085b      	lsrs	r3, r3, #1
 8016f00:	001a      	movs	r2, r3
 8016f02:	2301      	movs	r3, #1
 8016f04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016f06:	d018      	beq.n	8016f3a <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f0c:	781a      	ldrb	r2, [r3, #0]
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f18:	1c5a      	adds	r2, r3, #1
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f22:	3b01      	subs	r3, #1
 8016f24:	b29a      	uxth	r2, r3
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	3b01      	subs	r3, #1
 8016f32:	b29a      	uxth	r2, r3
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f38:	e0a6      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	09db      	lsrs	r3, r3, #7
 8016f3e:	001a      	movs	r2, r3
 8016f40:	2301      	movs	r3, #1
 8016f42:	4013      	ands	r3, r2
 8016f44:	d100      	bne.n	8016f48 <I2C_Master_ISR_IT+0x108>
 8016f46:	e06b      	b.n	8017020 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	099b      	lsrs	r3, r3, #6
 8016f4c:	001a      	movs	r2, r3
 8016f4e:	2301      	movs	r3, #1
 8016f50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016f52:	d065      	beq.n	8017020 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d04a      	beq.n	8016ff4 <I2C_Master_ISR_IT+0x1b4>
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d146      	bne.n	8016ff4 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	b29a      	uxth	r2, r3
 8016f6e:	2112      	movs	r1, #18
 8016f70:	187b      	adds	r3, r7, r1
 8016f72:	0592      	lsls	r2, r2, #22
 8016f74:	0d92      	lsrs	r2, r2, #22
 8016f76:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	2bff      	cmp	r3, #255	@ 0xff
 8016f80:	d910      	bls.n	8016fa4 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	22ff      	movs	r2, #255	@ 0xff
 8016f86:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f8c:	b2da      	uxtb	r2, r3
 8016f8e:	2380      	movs	r3, #128	@ 0x80
 8016f90:	045c      	lsls	r4, r3, #17
 8016f92:	187b      	adds	r3, r7, r1
 8016f94:	8819      	ldrh	r1, [r3, #0]
 8016f96:	68f8      	ldr	r0, [r7, #12]
 8016f98:	2300      	movs	r3, #0
 8016f9a:	9300      	str	r3, [sp, #0]
 8016f9c:	0023      	movs	r3, r4
 8016f9e:	f001 fdb1 	bl	8018b04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fa2:	e03c      	b.n	801701e <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fa8:	b29a      	uxth	r2, r3
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fb2:	4a43      	ldr	r2, [pc, #268]	@ (80170c0 <I2C_Master_ISR_IT+0x280>)
 8016fb4:	4293      	cmp	r3, r2
 8016fb6:	d00e      	beq.n	8016fd6 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fbc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016fc2:	2312      	movs	r3, #18
 8016fc4:	18fb      	adds	r3, r7, r3
 8016fc6:	8819      	ldrh	r1, [r3, #0]
 8016fc8:	68f8      	ldr	r0, [r7, #12]
 8016fca:	2300      	movs	r3, #0
 8016fcc:	9300      	str	r3, [sp, #0]
 8016fce:	0023      	movs	r3, r4
 8016fd0:	f001 fd98 	bl	8018b04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fd4:	e023      	b.n	801701e <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fda:	b2da      	uxtb	r2, r3
 8016fdc:	2380      	movs	r3, #128	@ 0x80
 8016fde:	049c      	lsls	r4, r3, #18
 8016fe0:	2312      	movs	r3, #18
 8016fe2:	18fb      	adds	r3, r7, r3
 8016fe4:	8819      	ldrh	r1, [r3, #0]
 8016fe6:	68f8      	ldr	r0, [r7, #12]
 8016fe8:	2300      	movs	r3, #0
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	0023      	movs	r3, r4
 8016fee:	f001 fd89 	bl	8018b04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016ff2:	e014      	b.n	801701e <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	685a      	ldr	r2, [r3, #4]
 8016ffa:	2380      	movs	r3, #128	@ 0x80
 8016ffc:	049b      	lsls	r3, r3, #18
 8016ffe:	401a      	ands	r2, r3
 8017000:	2380      	movs	r3, #128	@ 0x80
 8017002:	049b      	lsls	r3, r3, #18
 8017004:	429a      	cmp	r2, r3
 8017006:	d004      	beq.n	8017012 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	0018      	movs	r0, r3
 801700c:	f000 fe0a 	bl	8017c24 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017010:	e03a      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	2140      	movs	r1, #64	@ 0x40
 8017016:	0018      	movs	r0, r3
 8017018:	f001 f8fc 	bl	8018214 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801701c:	e034      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
 801701e:	e033      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	099b      	lsrs	r3, r3, #6
 8017024:	001a      	movs	r2, r3
 8017026:	2301      	movs	r3, #1
 8017028:	4013      	ands	r3, r2
 801702a:	d02d      	beq.n	8017088 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	099b      	lsrs	r3, r3, #6
 8017030:	001a      	movs	r2, r3
 8017032:	2301      	movs	r3, #1
 8017034:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8017036:	d027      	beq.n	8017088 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801703c:	b29b      	uxth	r3, r3
 801703e:	2b00      	cmp	r3, #0
 8017040:	d11d      	bne.n	801707e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	685a      	ldr	r2, [r3, #4]
 8017048:	2380      	movs	r3, #128	@ 0x80
 801704a:	049b      	lsls	r3, r3, #18
 801704c:	401a      	ands	r2, r3
 801704e:	2380      	movs	r3, #128	@ 0x80
 8017050:	049b      	lsls	r3, r3, #18
 8017052:	429a      	cmp	r2, r3
 8017054:	d018      	beq.n	8017088 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801705a:	4a19      	ldr	r2, [pc, #100]	@ (80170c0 <I2C_Master_ISR_IT+0x280>)
 801705c:	4293      	cmp	r3, r2
 801705e:	d109      	bne.n	8017074 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	685a      	ldr	r2, [r3, #4]
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2180      	movs	r1, #128	@ 0x80
 801706c:	01c9      	lsls	r1, r1, #7
 801706e:	430a      	orrs	r2, r1
 8017070:	605a      	str	r2, [r3, #4]
 8017072:	e009      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	0018      	movs	r0, r3
 8017078:	f000 fdd4 	bl	8017c24 <I2C_ITMasterSeqCplt>
 801707c:	e004      	b.n	8017088 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2140      	movs	r1, #64	@ 0x40
 8017082:	0018      	movs	r0, r3
 8017084:	f001 f8c6 	bl	8018214 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017088:	697b      	ldr	r3, [r7, #20]
 801708a:	095b      	lsrs	r3, r3, #5
 801708c:	001a      	movs	r2, r3
 801708e:	2301      	movs	r3, #1
 8017090:	4013      	ands	r3, r2
 8017092:	d00b      	beq.n	80170ac <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	095b      	lsrs	r3, r3, #5
 8017098:	001a      	movs	r2, r3
 801709a:	2301      	movs	r3, #1
 801709c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801709e:	d005      	beq.n	80170ac <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80170a0:	697a      	ldr	r2, [r7, #20]
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	0011      	movs	r1, r2
 80170a6:	0018      	movs	r0, r3
 80170a8:	f000 fe64 	bl	8017d74 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	2240      	movs	r2, #64	@ 0x40
 80170b0:	2100      	movs	r1, #0
 80170b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80170b4:	2300      	movs	r3, #0
}
 80170b6:	0018      	movs	r0, r3
 80170b8:	46bd      	mov	sp, r7
 80170ba:	b007      	add	sp, #28
 80170bc:	bd90      	pop	{r4, r7, pc}
 80170be:	46c0      	nop			@ (mov r8, r8)
 80170c0:	ffff0000 	.word	0xffff0000

080170c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b086      	sub	sp, #24
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	60f8      	str	r0, [r7, #12]
 80170cc:	60b9      	str	r1, [r7, #8]
 80170ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	2240      	movs	r2, #64	@ 0x40
 80170de:	5c9b      	ldrb	r3, [r3, r2]
 80170e0:	2b01      	cmp	r3, #1
 80170e2:	d101      	bne.n	80170e8 <I2C_Slave_ISR_IT+0x24>
 80170e4:	2302      	movs	r3, #2
 80170e6:	e0fa      	b.n	80172de <I2C_Slave_ISR_IT+0x21a>
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	2240      	movs	r2, #64	@ 0x40
 80170ec:	2101      	movs	r1, #1
 80170ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	095b      	lsrs	r3, r3, #5
 80170f4:	001a      	movs	r2, r3
 80170f6:	2301      	movs	r3, #1
 80170f8:	4013      	ands	r3, r2
 80170fa:	d00b      	beq.n	8017114 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	095b      	lsrs	r3, r3, #5
 8017100:	001a      	movs	r2, r3
 8017102:	2301      	movs	r3, #1
 8017104:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017106:	d005      	beq.n	8017114 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8017108:	693a      	ldr	r2, [r7, #16]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	0011      	movs	r1, r2
 801710e:	0018      	movs	r0, r3
 8017110:	f000 ff02 	bl	8017f18 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	091b      	lsrs	r3, r3, #4
 8017118:	001a      	movs	r2, r3
 801711a:	2301      	movs	r3, #1
 801711c:	4013      	ands	r3, r2
 801711e:	d054      	beq.n	80171ca <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	091b      	lsrs	r3, r3, #4
 8017124:	001a      	movs	r2, r3
 8017126:	2301      	movs	r3, #1
 8017128:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801712a:	d04e      	beq.n	80171ca <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017130:	b29b      	uxth	r3, r3
 8017132:	2b00      	cmp	r3, #0
 8017134:	d12d      	bne.n	8017192 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2241      	movs	r2, #65	@ 0x41
 801713a:	5c9b      	ldrb	r3, [r3, r2]
 801713c:	b2db      	uxtb	r3, r3
 801713e:	2b28      	cmp	r3, #40	@ 0x28
 8017140:	d10b      	bne.n	801715a <I2C_Slave_ISR_IT+0x96>
 8017142:	697a      	ldr	r2, [r7, #20]
 8017144:	2380      	movs	r3, #128	@ 0x80
 8017146:	049b      	lsls	r3, r3, #18
 8017148:	429a      	cmp	r2, r3
 801714a:	d106      	bne.n	801715a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801714c:	693a      	ldr	r2, [r7, #16]
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	0011      	movs	r1, r2
 8017152:	0018      	movs	r0, r3
 8017154:	f001 f804 	bl	8018160 <I2C_ITListenCplt>
 8017158:	e036      	b.n	80171c8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	2241      	movs	r2, #65	@ 0x41
 801715e:	5c9b      	ldrb	r3, [r3, r2]
 8017160:	b2db      	uxtb	r3, r3
 8017162:	2b29      	cmp	r3, #41	@ 0x29
 8017164:	d110      	bne.n	8017188 <I2C_Slave_ISR_IT+0xc4>
 8017166:	697b      	ldr	r3, [r7, #20]
 8017168:	4a5f      	ldr	r2, [pc, #380]	@ (80172e8 <I2C_Slave_ISR_IT+0x224>)
 801716a:	4293      	cmp	r3, r2
 801716c:	d00c      	beq.n	8017188 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	2210      	movs	r2, #16
 8017174:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	0018      	movs	r0, r3
 801717a:	f001 f976 	bl	801846a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	0018      	movs	r0, r3
 8017182:	f000 fd91 	bl	8017ca8 <I2C_ITSlaveSeqCplt>
 8017186:	e01f      	b.n	80171c8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	2210      	movs	r2, #16
 801718e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8017190:	e09d      	b.n	80172ce <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	2210      	movs	r2, #16
 8017198:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801719e:	2204      	movs	r2, #4
 80171a0:	431a      	orrs	r2, r3
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d005      	beq.n	80171b8 <I2C_Slave_ISR_IT+0xf4>
 80171ac:	697a      	ldr	r2, [r7, #20]
 80171ae:	2380      	movs	r3, #128	@ 0x80
 80171b0:	045b      	lsls	r3, r3, #17
 80171b2:	429a      	cmp	r2, r3
 80171b4:	d000      	beq.n	80171b8 <I2C_Slave_ISR_IT+0xf4>
 80171b6:	e08a      	b.n	80172ce <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	0011      	movs	r1, r2
 80171c0:	0018      	movs	r0, r3
 80171c2:	f001 f827 	bl	8018214 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80171c6:	e082      	b.n	80172ce <I2C_Slave_ISR_IT+0x20a>
 80171c8:	e081      	b.n	80172ce <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	089b      	lsrs	r3, r3, #2
 80171ce:	001a      	movs	r2, r3
 80171d0:	2301      	movs	r3, #1
 80171d2:	4013      	ands	r3, r2
 80171d4:	d031      	beq.n	801723a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	089b      	lsrs	r3, r3, #2
 80171da:	001a      	movs	r2, r3
 80171dc:	2301      	movs	r3, #1
 80171de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80171e0:	d02b      	beq.n	801723a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171e6:	b29b      	uxth	r3, r3
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d018      	beq.n	801721e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171f6:	b2d2      	uxtb	r2, r2
 80171f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171fe:	1c5a      	adds	r2, r3, #1
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017208:	3b01      	subs	r3, #1
 801720a:	b29a      	uxth	r2, r3
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017214:	b29b      	uxth	r3, r3
 8017216:	3b01      	subs	r3, #1
 8017218:	b29a      	uxth	r2, r3
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017222:	b29b      	uxth	r3, r3
 8017224:	2b00      	cmp	r3, #0
 8017226:	d154      	bne.n	80172d2 <I2C_Slave_ISR_IT+0x20e>
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	4a2f      	ldr	r2, [pc, #188]	@ (80172e8 <I2C_Slave_ISR_IT+0x224>)
 801722c:	4293      	cmp	r3, r2
 801722e:	d050      	beq.n	80172d2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	0018      	movs	r0, r3
 8017234:	f000 fd38 	bl	8017ca8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8017238:	e04b      	b.n	80172d2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	08db      	lsrs	r3, r3, #3
 801723e:	001a      	movs	r2, r3
 8017240:	2301      	movs	r3, #1
 8017242:	4013      	ands	r3, r2
 8017244:	d00c      	beq.n	8017260 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	08db      	lsrs	r3, r3, #3
 801724a:	001a      	movs	r2, r3
 801724c:	2301      	movs	r3, #1
 801724e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017250:	d006      	beq.n	8017260 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8017252:	693a      	ldr	r2, [r7, #16]
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	0011      	movs	r1, r2
 8017258:	0018      	movs	r0, r3
 801725a:	f000 fc3f 	bl	8017adc <I2C_ITAddrCplt>
 801725e:	e039      	b.n	80172d4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	085b      	lsrs	r3, r3, #1
 8017264:	001a      	movs	r2, r3
 8017266:	2301      	movs	r3, #1
 8017268:	4013      	ands	r3, r2
 801726a:	d033      	beq.n	80172d4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	085b      	lsrs	r3, r3, #1
 8017270:	001a      	movs	r2, r3
 8017272:	2301      	movs	r3, #1
 8017274:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017276:	d02d      	beq.n	80172d4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801727c:	b29b      	uxth	r3, r3
 801727e:	2b00      	cmp	r3, #0
 8017280:	d018      	beq.n	80172b4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017286:	781a      	ldrb	r2, [r3, #0]
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017292:	1c5a      	adds	r2, r3, #1
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801729c:	b29b      	uxth	r3, r3
 801729e:	3b01      	subs	r3, #1
 80172a0:	b29a      	uxth	r2, r3
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172aa:	3b01      	subs	r3, #1
 80172ac:	b29a      	uxth	r2, r3
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80172b2:	e00f      	b.n	80172d4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80172b4:	697a      	ldr	r2, [r7, #20]
 80172b6:	2380      	movs	r3, #128	@ 0x80
 80172b8:	045b      	lsls	r3, r3, #17
 80172ba:	429a      	cmp	r2, r3
 80172bc:	d002      	beq.n	80172c4 <I2C_Slave_ISR_IT+0x200>
 80172be:	697b      	ldr	r3, [r7, #20]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d107      	bne.n	80172d4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	0018      	movs	r0, r3
 80172c8:	f000 fcee 	bl	8017ca8 <I2C_ITSlaveSeqCplt>
 80172cc:	e002      	b.n	80172d4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80172ce:	46c0      	nop			@ (mov r8, r8)
 80172d0:	e000      	b.n	80172d4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80172d2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	2240      	movs	r2, #64	@ 0x40
 80172d8:	2100      	movs	r1, #0
 80172da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80172dc:	2300      	movs	r3, #0
}
 80172de:	0018      	movs	r0, r3
 80172e0:	46bd      	mov	sp, r7
 80172e2:	b006      	add	sp, #24
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	46c0      	nop			@ (mov r8, r8)
 80172e8:	ffff0000 	.word	0xffff0000

080172ec <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80172ec:	b590      	push	{r4, r7, lr}
 80172ee:	b089      	sub	sp, #36	@ 0x24
 80172f0:	af02      	add	r7, sp, #8
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	60b9      	str	r1, [r7, #8]
 80172f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2240      	movs	r2, #64	@ 0x40
 80172fc:	5c9b      	ldrb	r3, [r3, r2]
 80172fe:	2b01      	cmp	r3, #1
 8017300:	d101      	bne.n	8017306 <I2C_Master_ISR_DMA+0x1a>
 8017302:	2302      	movs	r3, #2
 8017304:	e0f7      	b.n	80174f6 <I2C_Master_ISR_DMA+0x20a>
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	2240      	movs	r2, #64	@ 0x40
 801730a:	2101      	movs	r1, #1
 801730c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801730e:	68bb      	ldr	r3, [r7, #8]
 8017310:	091b      	lsrs	r3, r3, #4
 8017312:	001a      	movs	r2, r3
 8017314:	2301      	movs	r3, #1
 8017316:	4013      	ands	r3, r2
 8017318:	d019      	beq.n	801734e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	091b      	lsrs	r3, r3, #4
 801731e:	001a      	movs	r2, r3
 8017320:	2301      	movs	r3, #1
 8017322:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017324:	d013      	beq.n	801734e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	2210      	movs	r2, #16
 801732c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017332:	2204      	movs	r2, #4
 8017334:	431a      	orrs	r2, r3
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	2120      	movs	r1, #32
 801733e:	0018      	movs	r0, r3
 8017340:	f001 fc1a 	bl	8018b78 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	0018      	movs	r0, r3
 8017348:	f001 f88f 	bl	801846a <I2C_Flush_TXDR>
 801734c:	e0ce      	b.n	80174ec <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	09db      	lsrs	r3, r3, #7
 8017352:	001a      	movs	r2, r3
 8017354:	2301      	movs	r3, #1
 8017356:	4013      	ands	r3, r2
 8017358:	d100      	bne.n	801735c <I2C_Master_ISR_DMA+0x70>
 801735a:	e07e      	b.n	801745a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	099b      	lsrs	r3, r3, #6
 8017360:	001a      	movs	r2, r3
 8017362:	2301      	movs	r3, #1
 8017364:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017366:	d100      	bne.n	801736a <I2C_Master_ISR_DMA+0x7e>
 8017368:	e077      	b.n	801745a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	681a      	ldr	r2, [r3, #0]
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	2140      	movs	r1, #64	@ 0x40
 8017376:	438a      	bics	r2, r1
 8017378:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801737e:	b29b      	uxth	r3, r3
 8017380:	2b00      	cmp	r3, #0
 8017382:	d055      	beq.n	8017430 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	b29a      	uxth	r2, r3
 801738c:	2312      	movs	r3, #18
 801738e:	18fb      	adds	r3, r7, r3
 8017390:	0592      	lsls	r2, r2, #22
 8017392:	0d92      	lsrs	r2, r2, #22
 8017394:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801739a:	b29b      	uxth	r3, r3
 801739c:	2bff      	cmp	r3, #255	@ 0xff
 801739e:	d906      	bls.n	80173ae <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	22ff      	movs	r2, #255	@ 0xff
 80173a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80173a6:	2380      	movs	r3, #128	@ 0x80
 80173a8:	045b      	lsls	r3, r3, #17
 80173aa:	617b      	str	r3, [r7, #20]
 80173ac:	e010      	b.n	80173d0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173b2:	b29a      	uxth	r2, r3
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173bc:	4a50      	ldr	r2, [pc, #320]	@ (8017500 <I2C_Master_ISR_DMA+0x214>)
 80173be:	4293      	cmp	r3, r2
 80173c0:	d003      	beq.n	80173ca <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173c6:	617b      	str	r3, [r7, #20]
 80173c8:	e002      	b.n	80173d0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80173ca:	2380      	movs	r3, #128	@ 0x80
 80173cc:	049b      	lsls	r3, r3, #18
 80173ce:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80173d4:	b2da      	uxtb	r2, r3
 80173d6:	697c      	ldr	r4, [r7, #20]
 80173d8:	2312      	movs	r3, #18
 80173da:	18fb      	adds	r3, r7, r3
 80173dc:	8819      	ldrh	r1, [r3, #0]
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	2300      	movs	r3, #0
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	0023      	movs	r3, r4
 80173e6:	f001 fb8d 	bl	8018b04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173ee:	b29a      	uxth	r2, r3
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80173f4:	1ad3      	subs	r3, r2, r3
 80173f6:	b29a      	uxth	r2, r3
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	2241      	movs	r2, #65	@ 0x41
 8017400:	5c9b      	ldrb	r3, [r3, r2]
 8017402:	b2db      	uxtb	r3, r3
 8017404:	2b22      	cmp	r3, #34	@ 0x22
 8017406:	d109      	bne.n	801741c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	2180      	movs	r1, #128	@ 0x80
 8017414:	0209      	lsls	r1, r1, #8
 8017416:	430a      	orrs	r2, r1
 8017418:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801741a:	e067      	b.n	80174ec <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2180      	movs	r1, #128	@ 0x80
 8017428:	01c9      	lsls	r1, r1, #7
 801742a:	430a      	orrs	r2, r1
 801742c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801742e:	e05d      	b.n	80174ec <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	685a      	ldr	r2, [r3, #4]
 8017436:	2380      	movs	r3, #128	@ 0x80
 8017438:	049b      	lsls	r3, r3, #18
 801743a:	401a      	ands	r2, r3
 801743c:	2380      	movs	r3, #128	@ 0x80
 801743e:	049b      	lsls	r3, r3, #18
 8017440:	429a      	cmp	r2, r3
 8017442:	d004      	beq.n	801744e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	0018      	movs	r0, r3
 8017448:	f000 fbec 	bl	8017c24 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 801744c:	e04e      	b.n	80174ec <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2140      	movs	r1, #64	@ 0x40
 8017452:	0018      	movs	r0, r3
 8017454:	f000 fede 	bl	8018214 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017458:	e048      	b.n	80174ec <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	099b      	lsrs	r3, r3, #6
 801745e:	001a      	movs	r2, r3
 8017460:	2301      	movs	r3, #1
 8017462:	4013      	ands	r3, r2
 8017464:	d02e      	beq.n	80174c4 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	099b      	lsrs	r3, r3, #6
 801746a:	001a      	movs	r2, r3
 801746c:	2301      	movs	r3, #1
 801746e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017470:	d028      	beq.n	80174c4 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017476:	b29b      	uxth	r3, r3
 8017478:	2b00      	cmp	r3, #0
 801747a:	d11d      	bne.n	80174b8 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	685a      	ldr	r2, [r3, #4]
 8017482:	2380      	movs	r3, #128	@ 0x80
 8017484:	049b      	lsls	r3, r3, #18
 8017486:	401a      	ands	r2, r3
 8017488:	2380      	movs	r3, #128	@ 0x80
 801748a:	049b      	lsls	r3, r3, #18
 801748c:	429a      	cmp	r2, r3
 801748e:	d02c      	beq.n	80174ea <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017494:	4a1a      	ldr	r2, [pc, #104]	@ (8017500 <I2C_Master_ISR_DMA+0x214>)
 8017496:	4293      	cmp	r3, r2
 8017498:	d109      	bne.n	80174ae <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	685a      	ldr	r2, [r3, #4]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	2180      	movs	r1, #128	@ 0x80
 80174a6:	01c9      	lsls	r1, r1, #7
 80174a8:	430a      	orrs	r2, r1
 80174aa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80174ac:	e01d      	b.n	80174ea <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	0018      	movs	r0, r3
 80174b2:	f000 fbb7 	bl	8017c24 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80174b6:	e018      	b.n	80174ea <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2140      	movs	r1, #64	@ 0x40
 80174bc:	0018      	movs	r0, r3
 80174be:	f000 fea9 	bl	8018214 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80174c2:	e012      	b.n	80174ea <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80174c4:	68bb      	ldr	r3, [r7, #8]
 80174c6:	095b      	lsrs	r3, r3, #5
 80174c8:	001a      	movs	r2, r3
 80174ca:	2301      	movs	r3, #1
 80174cc:	4013      	ands	r3, r2
 80174ce:	d00d      	beq.n	80174ec <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	095b      	lsrs	r3, r3, #5
 80174d4:	001a      	movs	r2, r3
 80174d6:	2301      	movs	r3, #1
 80174d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80174da:	d007      	beq.n	80174ec <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80174dc:	68ba      	ldr	r2, [r7, #8]
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	0011      	movs	r1, r2
 80174e2:	0018      	movs	r0, r3
 80174e4:	f000 fc46 	bl	8017d74 <I2C_ITMasterCplt>
 80174e8:	e000      	b.n	80174ec <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80174ea:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	2240      	movs	r2, #64	@ 0x40
 80174f0:	2100      	movs	r1, #0
 80174f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80174f4:	2300      	movs	r3, #0
}
 80174f6:	0018      	movs	r0, r3
 80174f8:	46bd      	mov	sp, r7
 80174fa:	b007      	add	sp, #28
 80174fc:	bd90      	pop	{r4, r7, pc}
 80174fe:	46c0      	nop			@ (mov r8, r8)
 8017500:	ffff0000 	.word	0xffff0000

08017504 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8017504:	b590      	push	{r4, r7, lr}
 8017506:	b089      	sub	sp, #36	@ 0x24
 8017508:	af02      	add	r7, sp, #8
 801750a:	60f8      	str	r0, [r7, #12]
 801750c:	60b9      	str	r1, [r7, #8]
 801750e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8017510:	4b92      	ldr	r3, [pc, #584]	@ (801775c <I2C_Mem_ISR_DMA+0x258>)
 8017512:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	2240      	movs	r2, #64	@ 0x40
 8017518:	5c9b      	ldrb	r3, [r3, r2]
 801751a:	2b01      	cmp	r3, #1
 801751c:	d101      	bne.n	8017522 <I2C_Mem_ISR_DMA+0x1e>
 801751e:	2302      	movs	r3, #2
 8017520:	e118      	b.n	8017754 <I2C_Mem_ISR_DMA+0x250>
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	2240      	movs	r2, #64	@ 0x40
 8017526:	2101      	movs	r1, #1
 8017528:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	091b      	lsrs	r3, r3, #4
 801752e:	001a      	movs	r2, r3
 8017530:	2301      	movs	r3, #1
 8017532:	4013      	ands	r3, r2
 8017534:	d019      	beq.n	801756a <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	091b      	lsrs	r3, r3, #4
 801753a:	001a      	movs	r2, r3
 801753c:	2301      	movs	r3, #1
 801753e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017540:	d013      	beq.n	801756a <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	2210      	movs	r2, #16
 8017548:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801754e:	2204      	movs	r2, #4
 8017550:	431a      	orrs	r2, r3
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	2120      	movs	r1, #32
 801755a:	0018      	movs	r0, r3
 801755c:	f001 fb0c 	bl	8018b78 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	0018      	movs	r0, r3
 8017564:	f000 ff81 	bl	801846a <I2C_Flush_TXDR>
 8017568:	e0ef      	b.n	801774a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	085b      	lsrs	r3, r3, #1
 801756e:	001a      	movs	r2, r3
 8017570:	2301      	movs	r3, #1
 8017572:	4013      	ands	r3, r2
 8017574:	d00f      	beq.n	8017596 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	085b      	lsrs	r3, r3, #1
 801757a:	001a      	movs	r2, r3
 801757c:	2301      	movs	r3, #1
 801757e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017580:	d009      	beq.n	8017596 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	68fa      	ldr	r2, [r7, #12]
 8017588:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801758a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	2201      	movs	r2, #1
 8017590:	4252      	negs	r2, r2
 8017592:	651a      	str	r2, [r3, #80]	@ 0x50
 8017594:	e0d9      	b.n	801774a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017596:	68bb      	ldr	r3, [r7, #8]
 8017598:	09db      	lsrs	r3, r3, #7
 801759a:	001a      	movs	r2, r3
 801759c:	2301      	movs	r3, #1
 801759e:	4013      	ands	r3, r2
 80175a0:	d060      	beq.n	8017664 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	099b      	lsrs	r3, r3, #6
 80175a6:	001a      	movs	r2, r3
 80175a8:	2301      	movs	r3, #1
 80175aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80175ac:	d05a      	beq.n	8017664 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	2110      	movs	r1, #16
 80175b2:	0018      	movs	r0, r3
 80175b4:	f001 fae0 	bl	8018b78 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175bc:	b29b      	uxth	r3, r3
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d04a      	beq.n	8017658 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175c6:	b29b      	uxth	r3, r3
 80175c8:	2bff      	cmp	r3, #255	@ 0xff
 80175ca:	d910      	bls.n	80175ee <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	22ff      	movs	r2, #255	@ 0xff
 80175d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175d6:	b299      	uxth	r1, r3
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175dc:	b2da      	uxtb	r2, r3
 80175de:	2380      	movs	r3, #128	@ 0x80
 80175e0:	045b      	lsls	r3, r3, #17
 80175e2:	68f8      	ldr	r0, [r7, #12]
 80175e4:	2400      	movs	r4, #0
 80175e6:	9400      	str	r4, [sp, #0]
 80175e8:	f001 fa8c 	bl	8018b04 <I2C_TransferConfig>
 80175ec:	e011      	b.n	8017612 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175f2:	b29a      	uxth	r2, r3
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175fc:	b299      	uxth	r1, r3
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017602:	b2da      	uxtb	r2, r3
 8017604:	2380      	movs	r3, #128	@ 0x80
 8017606:	049b      	lsls	r3, r3, #18
 8017608:	68f8      	ldr	r0, [r7, #12]
 801760a:	2400      	movs	r4, #0
 801760c:	9400      	str	r4, [sp, #0]
 801760e:	f001 fa79 	bl	8018b04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017616:	b29a      	uxth	r2, r3
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801761c:	1ad3      	subs	r3, r2, r3
 801761e:	b29a      	uxth	r2, r3
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	2241      	movs	r2, #65	@ 0x41
 8017628:	5c9b      	ldrb	r3, [r3, r2]
 801762a:	b2db      	uxtb	r3, r3
 801762c:	2b22      	cmp	r3, #34	@ 0x22
 801762e:	d109      	bne.n	8017644 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	2180      	movs	r1, #128	@ 0x80
 801763c:	0209      	lsls	r1, r1, #8
 801763e:	430a      	orrs	r2, r1
 8017640:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017642:	e082      	b.n	801774a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	2180      	movs	r1, #128	@ 0x80
 8017650:	01c9      	lsls	r1, r1, #7
 8017652:	430a      	orrs	r2, r1
 8017654:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017656:	e078      	b.n	801774a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	2140      	movs	r1, #64	@ 0x40
 801765c:	0018      	movs	r0, r3
 801765e:	f000 fdd9 	bl	8018214 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017662:	e072      	b.n	801774a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017664:	68bb      	ldr	r3, [r7, #8]
 8017666:	099b      	lsrs	r3, r3, #6
 8017668:	001a      	movs	r2, r3
 801766a:	2301      	movs	r3, #1
 801766c:	4013      	ands	r3, r2
 801766e:	d05a      	beq.n	8017726 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	099b      	lsrs	r3, r3, #6
 8017674:	001a      	movs	r2, r3
 8017676:	2301      	movs	r3, #1
 8017678:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801767a:	d054      	beq.n	8017726 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	2241      	movs	r2, #65	@ 0x41
 8017680:	5c9b      	ldrb	r3, [r3, r2]
 8017682:	b2db      	uxtb	r3, r3
 8017684:	2b22      	cmp	r3, #34	@ 0x22
 8017686:	d101      	bne.n	801768c <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8017688:	4b35      	ldr	r3, [pc, #212]	@ (8017760 <I2C_Mem_ISR_DMA+0x25c>)
 801768a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017690:	b29b      	uxth	r3, r3
 8017692:	2bff      	cmp	r3, #255	@ 0xff
 8017694:	d911      	bls.n	80176ba <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	22ff      	movs	r2, #255	@ 0xff
 801769a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176a0:	b299      	uxth	r1, r3
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176a6:	b2da      	uxtb	r2, r3
 80176a8:	2380      	movs	r3, #128	@ 0x80
 80176aa:	045c      	lsls	r4, r3, #17
 80176ac:	68f8      	ldr	r0, [r7, #12]
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	9300      	str	r3, [sp, #0]
 80176b2:	0023      	movs	r3, r4
 80176b4:	f001 fa26 	bl	8018b04 <I2C_TransferConfig>
 80176b8:	e012      	b.n	80176e0 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176be:	b29a      	uxth	r2, r3
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176c8:	b299      	uxth	r1, r3
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176ce:	b2da      	uxtb	r2, r3
 80176d0:	2380      	movs	r3, #128	@ 0x80
 80176d2:	049c      	lsls	r4, r3, #18
 80176d4:	68f8      	ldr	r0, [r7, #12]
 80176d6:	697b      	ldr	r3, [r7, #20]
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	0023      	movs	r3, r4
 80176dc:	f001 fa12 	bl	8018b04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176e4:	b29a      	uxth	r2, r3
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176ea:	1ad3      	subs	r3, r2, r3
 80176ec:	b29a      	uxth	r2, r3
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	2241      	movs	r2, #65	@ 0x41
 80176f6:	5c9b      	ldrb	r3, [r3, r2]
 80176f8:	b2db      	uxtb	r3, r3
 80176fa:	2b22      	cmp	r3, #34	@ 0x22
 80176fc:	d109      	bne.n	8017712 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	681a      	ldr	r2, [r3, #0]
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	2180      	movs	r1, #128	@ 0x80
 801770a:	0209      	lsls	r1, r1, #8
 801770c:	430a      	orrs	r2, r1
 801770e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017710:	e01b      	b.n	801774a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	681a      	ldr	r2, [r3, #0]
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2180      	movs	r1, #128	@ 0x80
 801771e:	01c9      	lsls	r1, r1, #7
 8017720:	430a      	orrs	r2, r1
 8017722:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017724:	e011      	b.n	801774a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	095b      	lsrs	r3, r3, #5
 801772a:	001a      	movs	r2, r3
 801772c:	2301      	movs	r3, #1
 801772e:	4013      	ands	r3, r2
 8017730:	d00b      	beq.n	801774a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	095b      	lsrs	r3, r3, #5
 8017736:	001a      	movs	r2, r3
 8017738:	2301      	movs	r3, #1
 801773a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801773c:	d005      	beq.n	801774a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801773e:	68ba      	ldr	r2, [r7, #8]
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	0011      	movs	r1, r2
 8017744:	0018      	movs	r0, r3
 8017746:	f000 fb15 	bl	8017d74 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	2240      	movs	r2, #64	@ 0x40
 801774e:	2100      	movs	r1, #0
 8017750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017752:	2300      	movs	r3, #0
}
 8017754:	0018      	movs	r0, r3
 8017756:	46bd      	mov	sp, r7
 8017758:	b007      	add	sp, #28
 801775a:	bd90      	pop	{r4, r7, pc}
 801775c:	80002000 	.word	0x80002000
 8017760:	80002400 	.word	0x80002400

08017764 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b088      	sub	sp, #32
 8017768:	af00      	add	r7, sp, #0
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017774:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8017776:	2300      	movs	r3, #0
 8017778:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	2240      	movs	r2, #64	@ 0x40
 801777e:	5c9b      	ldrb	r3, [r3, r2]
 8017780:	2b01      	cmp	r3, #1
 8017782:	d101      	bne.n	8017788 <I2C_Slave_ISR_DMA+0x24>
 8017784:	2302      	movs	r3, #2
 8017786:	e0dd      	b.n	8017944 <I2C_Slave_ISR_DMA+0x1e0>
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	2240      	movs	r2, #64	@ 0x40
 801778c:	2101      	movs	r1, #1
 801778e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017790:	68bb      	ldr	r3, [r7, #8]
 8017792:	095b      	lsrs	r3, r3, #5
 8017794:	001a      	movs	r2, r3
 8017796:	2301      	movs	r3, #1
 8017798:	4013      	ands	r3, r2
 801779a:	d00b      	beq.n	80177b4 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	095b      	lsrs	r3, r3, #5
 80177a0:	001a      	movs	r2, r3
 80177a2:	2301      	movs	r3, #1
 80177a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80177a6:	d005      	beq.n	80177b4 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80177a8:	68ba      	ldr	r2, [r7, #8]
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	0011      	movs	r1, r2
 80177ae:	0018      	movs	r0, r3
 80177b0:	f000 fbb2 	bl	8017f18 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	091b      	lsrs	r3, r3, #4
 80177b8:	001a      	movs	r2, r3
 80177ba:	2301      	movs	r3, #1
 80177bc:	4013      	ands	r3, r2
 80177be:	d100      	bne.n	80177c2 <I2C_Slave_ISR_DMA+0x5e>
 80177c0:	e0a9      	b.n	8017916 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	091b      	lsrs	r3, r3, #4
 80177c6:	001a      	movs	r2, r3
 80177c8:	2301      	movs	r3, #1
 80177ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80177cc:	d100      	bne.n	80177d0 <I2C_Slave_ISR_DMA+0x6c>
 80177ce:	e0a2      	b.n	8017916 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	0b9b      	lsrs	r3, r3, #14
 80177d4:	001a      	movs	r2, r3
 80177d6:	2301      	movs	r3, #1
 80177d8:	4013      	ands	r3, r2
 80177da:	d106      	bne.n	80177ea <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	0bdb      	lsrs	r3, r3, #15
 80177e0:	001a      	movs	r2, r3
 80177e2:	2301      	movs	r3, #1
 80177e4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80177e6:	d100      	bne.n	80177ea <I2C_Slave_ISR_DMA+0x86>
 80177e8:	e08e      	b.n	8017908 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d00d      	beq.n	801780e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	0bdb      	lsrs	r3, r3, #15
 80177f6:	001a      	movs	r2, r3
 80177f8:	2301      	movs	r3, #1
 80177fa:	4013      	ands	r3, r2
 80177fc:	d007      	beq.n	801780e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	685b      	ldr	r3, [r3, #4]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d101      	bne.n	801780e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 801780a:	2301      	movs	r3, #1
 801780c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017812:	2b00      	cmp	r3, #0
 8017814:	d00d      	beq.n	8017832 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	0b9b      	lsrs	r3, r3, #14
 801781a:	001a      	movs	r2, r3
 801781c:	2301      	movs	r3, #1
 801781e:	4013      	ands	r3, r2
 8017820:	d007      	beq.n	8017832 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	685b      	ldr	r3, [r3, #4]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d101      	bne.n	8017832 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 801782e:	2301      	movs	r3, #1
 8017830:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8017832:	69fb      	ldr	r3, [r7, #28]
 8017834:	2b01      	cmp	r3, #1
 8017836:	d12d      	bne.n	8017894 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	2241      	movs	r2, #65	@ 0x41
 801783c:	5c9b      	ldrb	r3, [r3, r2]
 801783e:	b2db      	uxtb	r3, r3
 8017840:	2b28      	cmp	r3, #40	@ 0x28
 8017842:	d10b      	bne.n	801785c <I2C_Slave_ISR_DMA+0xf8>
 8017844:	69ba      	ldr	r2, [r7, #24]
 8017846:	2380      	movs	r3, #128	@ 0x80
 8017848:	049b      	lsls	r3, r3, #18
 801784a:	429a      	cmp	r2, r3
 801784c:	d106      	bne.n	801785c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801784e:	68ba      	ldr	r2, [r7, #8]
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	0011      	movs	r1, r2
 8017854:	0018      	movs	r0, r3
 8017856:	f000 fc83 	bl	8018160 <I2C_ITListenCplt>
 801785a:	e054      	b.n	8017906 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	2241      	movs	r2, #65	@ 0x41
 8017860:	5c9b      	ldrb	r3, [r3, r2]
 8017862:	b2db      	uxtb	r3, r3
 8017864:	2b29      	cmp	r3, #41	@ 0x29
 8017866:	d110      	bne.n	801788a <I2C_Slave_ISR_DMA+0x126>
 8017868:	69bb      	ldr	r3, [r7, #24]
 801786a:	4a38      	ldr	r2, [pc, #224]	@ (801794c <I2C_Slave_ISR_DMA+0x1e8>)
 801786c:	4293      	cmp	r3, r2
 801786e:	d00c      	beq.n	801788a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	2210      	movs	r2, #16
 8017876:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	0018      	movs	r0, r3
 801787c:	f000 fdf5 	bl	801846a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	0018      	movs	r0, r3
 8017884:	f000 fa10 	bl	8017ca8 <I2C_ITSlaveSeqCplt>
 8017888:	e03d      	b.n	8017906 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	2210      	movs	r2, #16
 8017890:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8017892:	e03e      	b.n	8017912 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	2210      	movs	r2, #16
 801789a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178a0:	2204      	movs	r2, #4
 80178a2:	431a      	orrs	r2, r3
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80178a8:	2317      	movs	r3, #23
 80178aa:	18fb      	adds	r3, r7, r3
 80178ac:	68fa      	ldr	r2, [r7, #12]
 80178ae:	2141      	movs	r1, #65	@ 0x41
 80178b0:	5c52      	ldrb	r2, [r2, r1]
 80178b2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d004      	beq.n	80178c4 <I2C_Slave_ISR_DMA+0x160>
 80178ba:	69ba      	ldr	r2, [r7, #24]
 80178bc:	2380      	movs	r3, #128	@ 0x80
 80178be:	045b      	lsls	r3, r3, #17
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d126      	bne.n	8017912 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80178c4:	2217      	movs	r2, #23
 80178c6:	18bb      	adds	r3, r7, r2
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	2b21      	cmp	r3, #33	@ 0x21
 80178cc:	d003      	beq.n	80178d6 <I2C_Slave_ISR_DMA+0x172>
 80178ce:	18bb      	adds	r3, r7, r2
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	2b29      	cmp	r3, #41	@ 0x29
 80178d4:	d103      	bne.n	80178de <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	2221      	movs	r2, #33	@ 0x21
 80178da:	631a      	str	r2, [r3, #48]	@ 0x30
 80178dc:	e00b      	b.n	80178f6 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80178de:	2217      	movs	r2, #23
 80178e0:	18bb      	adds	r3, r7, r2
 80178e2:	781b      	ldrb	r3, [r3, #0]
 80178e4:	2b22      	cmp	r3, #34	@ 0x22
 80178e6:	d003      	beq.n	80178f0 <I2C_Slave_ISR_DMA+0x18c>
 80178e8:	18bb      	adds	r3, r7, r2
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80178ee:	d102      	bne.n	80178f6 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	2222      	movs	r2, #34	@ 0x22
 80178f4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	0011      	movs	r1, r2
 80178fe:	0018      	movs	r0, r3
 8017900:	f000 fc88 	bl	8018214 <I2C_ITError>
      if (treatdmanack == 1U)
 8017904:	e005      	b.n	8017912 <I2C_Slave_ISR_DMA+0x1ae>
 8017906:	e004      	b.n	8017912 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	2210      	movs	r2, #16
 801790e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017910:	e013      	b.n	801793a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8017912:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017914:	e011      	b.n	801793a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	08db      	lsrs	r3, r3, #3
 801791a:	001a      	movs	r2, r3
 801791c:	2301      	movs	r3, #1
 801791e:	4013      	ands	r3, r2
 8017920:	d00b      	beq.n	801793a <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	08db      	lsrs	r3, r3, #3
 8017926:	001a      	movs	r2, r3
 8017928:	2301      	movs	r3, #1
 801792a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801792c:	d005      	beq.n	801793a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801792e:	68ba      	ldr	r2, [r7, #8]
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	0011      	movs	r1, r2
 8017934:	0018      	movs	r0, r3
 8017936:	f000 f8d1 	bl	8017adc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	2240      	movs	r2, #64	@ 0x40
 801793e:	2100      	movs	r1, #0
 8017940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017942:	2300      	movs	r3, #0
}
 8017944:	0018      	movs	r0, r3
 8017946:	46bd      	mov	sp, r7
 8017948:	b008      	add	sp, #32
 801794a:	bd80      	pop	{r7, pc}
 801794c:	ffff0000 	.word	0xffff0000

08017950 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8017950:	b5b0      	push	{r4, r5, r7, lr}
 8017952:	b086      	sub	sp, #24
 8017954:	af02      	add	r7, sp, #8
 8017956:	60f8      	str	r0, [r7, #12]
 8017958:	000c      	movs	r4, r1
 801795a:	0010      	movs	r0, r2
 801795c:	0019      	movs	r1, r3
 801795e:	250a      	movs	r5, #10
 8017960:	197b      	adds	r3, r7, r5
 8017962:	1c22      	adds	r2, r4, #0
 8017964:	801a      	strh	r2, [r3, #0]
 8017966:	2308      	movs	r3, #8
 8017968:	18fb      	adds	r3, r7, r3
 801796a:	1c02      	adds	r2, r0, #0
 801796c:	801a      	strh	r2, [r3, #0]
 801796e:	1dbb      	adds	r3, r7, #6
 8017970:	1c0a      	adds	r2, r1, #0
 8017972:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8017974:	1dbb      	adds	r3, r7, #6
 8017976:	881b      	ldrh	r3, [r3, #0]
 8017978:	b2da      	uxtb	r2, r3
 801797a:	2380      	movs	r3, #128	@ 0x80
 801797c:	045c      	lsls	r4, r3, #17
 801797e:	197b      	adds	r3, r7, r5
 8017980:	8819      	ldrh	r1, [r3, #0]
 8017982:	68f8      	ldr	r0, [r7, #12]
 8017984:	4b23      	ldr	r3, [pc, #140]	@ (8017a14 <I2C_RequestMemoryWrite+0xc4>)
 8017986:	9300      	str	r3, [sp, #0]
 8017988:	0023      	movs	r3, r4
 801798a:	f001 f8bb 	bl	8018b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801798e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017990:	6a39      	ldr	r1, [r7, #32]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	0018      	movs	r0, r3
 8017996:	f000 feb1 	bl	80186fc <I2C_WaitOnTXISFlagUntilTimeout>
 801799a:	1e03      	subs	r3, r0, #0
 801799c:	d001      	beq.n	80179a2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 801799e:	2301      	movs	r3, #1
 80179a0:	e033      	b.n	8017a0a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80179a2:	1dbb      	adds	r3, r7, #6
 80179a4:	881b      	ldrh	r3, [r3, #0]
 80179a6:	2b01      	cmp	r3, #1
 80179a8:	d107      	bne.n	80179ba <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80179aa:	2308      	movs	r3, #8
 80179ac:	18fb      	adds	r3, r7, r3
 80179ae:	881b      	ldrh	r3, [r3, #0]
 80179b0:	b2da      	uxtb	r2, r3
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80179b8:	e019      	b.n	80179ee <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80179ba:	2308      	movs	r3, #8
 80179bc:	18fb      	adds	r3, r7, r3
 80179be:	881b      	ldrh	r3, [r3, #0]
 80179c0:	0a1b      	lsrs	r3, r3, #8
 80179c2:	b29b      	uxth	r3, r3
 80179c4:	b2da      	uxtb	r2, r3
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179ce:	6a39      	ldr	r1, [r7, #32]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	0018      	movs	r0, r3
 80179d4:	f000 fe92 	bl	80186fc <I2C_WaitOnTXISFlagUntilTimeout>
 80179d8:	1e03      	subs	r3, r0, #0
 80179da:	d001      	beq.n	80179e0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80179dc:	2301      	movs	r3, #1
 80179de:	e014      	b.n	8017a0a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80179e0:	2308      	movs	r3, #8
 80179e2:	18fb      	adds	r3, r7, r3
 80179e4:	881b      	ldrh	r3, [r3, #0]
 80179e6:	b2da      	uxtb	r2, r3
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80179ee:	6a3a      	ldr	r2, [r7, #32]
 80179f0:	68f8      	ldr	r0, [r7, #12]
 80179f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179f4:	9300      	str	r3, [sp, #0]
 80179f6:	0013      	movs	r3, r2
 80179f8:	2200      	movs	r2, #0
 80179fa:	2180      	movs	r1, #128	@ 0x80
 80179fc:	f000 fe30 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8017a00:	1e03      	subs	r3, r0, #0
 8017a02:	d001      	beq.n	8017a08 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8017a04:	2301      	movs	r3, #1
 8017a06:	e000      	b.n	8017a0a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8017a08:	2300      	movs	r3, #0
}
 8017a0a:	0018      	movs	r0, r3
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	b004      	add	sp, #16
 8017a10:	bdb0      	pop	{r4, r5, r7, pc}
 8017a12:	46c0      	nop			@ (mov r8, r8)
 8017a14:	80002000 	.word	0x80002000

08017a18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017a18:	b5b0      	push	{r4, r5, r7, lr}
 8017a1a:	b086      	sub	sp, #24
 8017a1c:	af02      	add	r7, sp, #8
 8017a1e:	60f8      	str	r0, [r7, #12]
 8017a20:	000c      	movs	r4, r1
 8017a22:	0010      	movs	r0, r2
 8017a24:	0019      	movs	r1, r3
 8017a26:	250a      	movs	r5, #10
 8017a28:	197b      	adds	r3, r7, r5
 8017a2a:	1c22      	adds	r2, r4, #0
 8017a2c:	801a      	strh	r2, [r3, #0]
 8017a2e:	2308      	movs	r3, #8
 8017a30:	18fb      	adds	r3, r7, r3
 8017a32:	1c02      	adds	r2, r0, #0
 8017a34:	801a      	strh	r2, [r3, #0]
 8017a36:	1dbb      	adds	r3, r7, #6
 8017a38:	1c0a      	adds	r2, r1, #0
 8017a3a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017a3c:	1dbb      	adds	r3, r7, #6
 8017a3e:	881b      	ldrh	r3, [r3, #0]
 8017a40:	b2da      	uxtb	r2, r3
 8017a42:	197b      	adds	r3, r7, r5
 8017a44:	8819      	ldrh	r1, [r3, #0]
 8017a46:	68f8      	ldr	r0, [r7, #12]
 8017a48:	4b23      	ldr	r3, [pc, #140]	@ (8017ad8 <I2C_RequestMemoryRead+0xc0>)
 8017a4a:	9300      	str	r3, [sp, #0]
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	f001 f859 	bl	8018b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a54:	6a39      	ldr	r1, [r7, #32]
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	0018      	movs	r0, r3
 8017a5a:	f000 fe4f 	bl	80186fc <I2C_WaitOnTXISFlagUntilTimeout>
 8017a5e:	1e03      	subs	r3, r0, #0
 8017a60:	d001      	beq.n	8017a66 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8017a62:	2301      	movs	r3, #1
 8017a64:	e033      	b.n	8017ace <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017a66:	1dbb      	adds	r3, r7, #6
 8017a68:	881b      	ldrh	r3, [r3, #0]
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	d107      	bne.n	8017a7e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a6e:	2308      	movs	r3, #8
 8017a70:	18fb      	adds	r3, r7, r3
 8017a72:	881b      	ldrh	r3, [r3, #0]
 8017a74:	b2da      	uxtb	r2, r3
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8017a7c:	e019      	b.n	8017ab2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017a7e:	2308      	movs	r3, #8
 8017a80:	18fb      	adds	r3, r7, r3
 8017a82:	881b      	ldrh	r3, [r3, #0]
 8017a84:	0a1b      	lsrs	r3, r3, #8
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	b2da      	uxtb	r2, r3
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a92:	6a39      	ldr	r1, [r7, #32]
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	0018      	movs	r0, r3
 8017a98:	f000 fe30 	bl	80186fc <I2C_WaitOnTXISFlagUntilTimeout>
 8017a9c:	1e03      	subs	r3, r0, #0
 8017a9e:	d001      	beq.n	8017aa4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	e014      	b.n	8017ace <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017aa4:	2308      	movs	r3, #8
 8017aa6:	18fb      	adds	r3, r7, r3
 8017aa8:	881b      	ldrh	r3, [r3, #0]
 8017aaa:	b2da      	uxtb	r2, r3
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017ab2:	6a3a      	ldr	r2, [r7, #32]
 8017ab4:	68f8      	ldr	r0, [r7, #12]
 8017ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ab8:	9300      	str	r3, [sp, #0]
 8017aba:	0013      	movs	r3, r2
 8017abc:	2200      	movs	r2, #0
 8017abe:	2140      	movs	r1, #64	@ 0x40
 8017ac0:	f000 fdce 	bl	8018660 <I2C_WaitOnFlagUntilTimeout>
 8017ac4:	1e03      	subs	r3, r0, #0
 8017ac6:	d001      	beq.n	8017acc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017ac8:	2301      	movs	r3, #1
 8017aca:	e000      	b.n	8017ace <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017acc:	2300      	movs	r3, #0
}
 8017ace:	0018      	movs	r0, r3
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	b004      	add	sp, #16
 8017ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8017ad6:	46c0      	nop			@ (mov r8, r8)
 8017ad8:	80002000 	.word	0x80002000

08017adc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017adc:	b5b0      	push	{r4, r5, r7, lr}
 8017ade:	b084      	sub	sp, #16
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
 8017ae4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2241      	movs	r2, #65	@ 0x41
 8017aea:	5c9b      	ldrb	r3, [r3, r2]
 8017aec:	b2db      	uxtb	r3, r3
 8017aee:	001a      	movs	r2, r3
 8017af0:	2328      	movs	r3, #40	@ 0x28
 8017af2:	4013      	ands	r3, r2
 8017af4:	2b28      	cmp	r3, #40	@ 0x28
 8017af6:	d000      	beq.n	8017afa <I2C_ITAddrCplt+0x1e>
 8017af8:	e088      	b.n	8017c0c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	699b      	ldr	r3, [r3, #24]
 8017b00:	0c1b      	lsrs	r3, r3, #16
 8017b02:	b2da      	uxtb	r2, r3
 8017b04:	250f      	movs	r5, #15
 8017b06:	197b      	adds	r3, r7, r5
 8017b08:	2101      	movs	r1, #1
 8017b0a:	400a      	ands	r2, r1
 8017b0c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	699b      	ldr	r3, [r3, #24]
 8017b14:	0c1b      	lsrs	r3, r3, #16
 8017b16:	b29a      	uxth	r2, r3
 8017b18:	200c      	movs	r0, #12
 8017b1a:	183b      	adds	r3, r7, r0
 8017b1c:	21fe      	movs	r1, #254	@ 0xfe
 8017b1e:	400a      	ands	r2, r1
 8017b20:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	689b      	ldr	r3, [r3, #8]
 8017b28:	b29a      	uxth	r2, r3
 8017b2a:	240a      	movs	r4, #10
 8017b2c:	193b      	adds	r3, r7, r4
 8017b2e:	0592      	lsls	r2, r2, #22
 8017b30:	0d92      	lsrs	r2, r2, #22
 8017b32:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	b29a      	uxth	r2, r3
 8017b3c:	2308      	movs	r3, #8
 8017b3e:	18fb      	adds	r3, r7, r3
 8017b40:	21fe      	movs	r1, #254	@ 0xfe
 8017b42:	400a      	ands	r2, r1
 8017b44:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	68db      	ldr	r3, [r3, #12]
 8017b4a:	2b02      	cmp	r3, #2
 8017b4c:	d148      	bne.n	8017be0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017b4e:	0021      	movs	r1, r4
 8017b50:	187b      	adds	r3, r7, r1
 8017b52:	881b      	ldrh	r3, [r3, #0]
 8017b54:	09db      	lsrs	r3, r3, #7
 8017b56:	b29a      	uxth	r2, r3
 8017b58:	183b      	adds	r3, r7, r0
 8017b5a:	881b      	ldrh	r3, [r3, #0]
 8017b5c:	4053      	eors	r3, r2
 8017b5e:	b29b      	uxth	r3, r3
 8017b60:	001a      	movs	r2, r3
 8017b62:	2306      	movs	r3, #6
 8017b64:	4013      	ands	r3, r2
 8017b66:	d120      	bne.n	8017baa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017b68:	183b      	adds	r3, r7, r0
 8017b6a:	187a      	adds	r2, r7, r1
 8017b6c:	8812      	ldrh	r2, [r2, #0]
 8017b6e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b74:	1c5a      	adds	r2, r3, #1
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b7e:	2b02      	cmp	r3, #2
 8017b80:	d14c      	bne.n	8017c1c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2200      	movs	r2, #0
 8017b86:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	2208      	movs	r2, #8
 8017b8e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	2240      	movs	r2, #64	@ 0x40
 8017b94:	2100      	movs	r1, #0
 8017b96:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b98:	183b      	adds	r3, r7, r0
 8017b9a:	881a      	ldrh	r2, [r3, #0]
 8017b9c:	197b      	adds	r3, r7, r5
 8017b9e:	7819      	ldrb	r1, [r3, #0]
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	0018      	movs	r0, r3
 8017ba4:	f7ff f914 	bl	8016dd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017ba8:	e038      	b.n	8017c1c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017baa:	240c      	movs	r4, #12
 8017bac:	193b      	adds	r3, r7, r4
 8017bae:	2208      	movs	r2, #8
 8017bb0:	18ba      	adds	r2, r7, r2
 8017bb2:	8812      	ldrh	r2, [r2, #0]
 8017bb4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017bb6:	2380      	movs	r3, #128	@ 0x80
 8017bb8:	021a      	lsls	r2, r3, #8
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	0011      	movs	r1, r2
 8017bbe:	0018      	movs	r0, r3
 8017bc0:	f001 f868 	bl	8018c94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2240      	movs	r2, #64	@ 0x40
 8017bc8:	2100      	movs	r1, #0
 8017bca:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017bcc:	193b      	adds	r3, r7, r4
 8017bce:	881a      	ldrh	r2, [r3, #0]
 8017bd0:	230f      	movs	r3, #15
 8017bd2:	18fb      	adds	r3, r7, r3
 8017bd4:	7819      	ldrb	r1, [r3, #0]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	0018      	movs	r0, r3
 8017bda:	f7ff f8f9 	bl	8016dd0 <HAL_I2C_AddrCallback>
}
 8017bde:	e01d      	b.n	8017c1c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017be0:	2380      	movs	r3, #128	@ 0x80
 8017be2:	021a      	lsls	r2, r3, #8
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	0011      	movs	r1, r2
 8017be8:	0018      	movs	r0, r3
 8017bea:	f001 f853 	bl	8018c94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2240      	movs	r2, #64	@ 0x40
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017bf6:	230c      	movs	r3, #12
 8017bf8:	18fb      	adds	r3, r7, r3
 8017bfa:	881a      	ldrh	r2, [r3, #0]
 8017bfc:	230f      	movs	r3, #15
 8017bfe:	18fb      	adds	r3, r7, r3
 8017c00:	7819      	ldrb	r1, [r3, #0]
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	0018      	movs	r0, r3
 8017c06:	f7ff f8e3 	bl	8016dd0 <HAL_I2C_AddrCallback>
}
 8017c0a:	e007      	b.n	8017c1c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2208      	movs	r2, #8
 8017c12:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	2240      	movs	r2, #64	@ 0x40
 8017c18:	2100      	movs	r1, #0
 8017c1a:	5499      	strb	r1, [r3, r2]
}
 8017c1c:	46c0      	nop			@ (mov r8, r8)
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	b004      	add	sp, #16
 8017c22:	bdb0      	pop	{r4, r5, r7, pc}

08017c24 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2242      	movs	r2, #66	@ 0x42
 8017c30:	2100      	movs	r1, #0
 8017c32:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2241      	movs	r2, #65	@ 0x41
 8017c38:	5c9b      	ldrb	r3, [r3, r2]
 8017c3a:	b2db      	uxtb	r3, r3
 8017c3c:	2b21      	cmp	r3, #33	@ 0x21
 8017c3e:	d117      	bne.n	8017c70 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2241      	movs	r2, #65	@ 0x41
 8017c44:	2120      	movs	r1, #32
 8017c46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2211      	movs	r2, #17
 8017c4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2200      	movs	r2, #0
 8017c52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	2101      	movs	r1, #1
 8017c58:	0018      	movs	r0, r3
 8017c5a:	f001 f81b 	bl	8018c94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2240      	movs	r2, #64	@ 0x40
 8017c62:	2100      	movs	r1, #0
 8017c64:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	0018      	movs	r0, r3
 8017c6a:	f7ff f891 	bl	8016d90 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017c6e:	e016      	b.n	8017c9e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2241      	movs	r2, #65	@ 0x41
 8017c74:	2120      	movs	r1, #32
 8017c76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2212      	movs	r2, #18
 8017c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2200      	movs	r2, #0
 8017c82:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2102      	movs	r1, #2
 8017c88:	0018      	movs	r0, r3
 8017c8a:	f001 f803 	bl	8018c94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2240      	movs	r2, #64	@ 0x40
 8017c92:	2100      	movs	r1, #0
 8017c94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	0018      	movs	r0, r3
 8017c9a:	f7ff f881 	bl	8016da0 <HAL_I2C_MasterRxCpltCallback>
}
 8017c9e:	46c0      	nop			@ (mov r8, r8)
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	b002      	add	sp, #8
 8017ca4:	bd80      	pop	{r7, pc}
	...

08017ca8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b084      	sub	sp, #16
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	2242      	movs	r2, #66	@ 0x42
 8017cbc:	2100      	movs	r1, #0
 8017cbe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	0b9b      	lsrs	r3, r3, #14
 8017cc4:	001a      	movs	r2, r3
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	4013      	ands	r3, r2
 8017cca:	d008      	beq.n	8017cde <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	681a      	ldr	r2, [r3, #0]
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	4925      	ldr	r1, [pc, #148]	@ (8017d6c <I2C_ITSlaveSeqCplt+0xc4>)
 8017cd8:	400a      	ands	r2, r1
 8017cda:	601a      	str	r2, [r3, #0]
 8017cdc:	e00d      	b.n	8017cfa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	0bdb      	lsrs	r3, r3, #15
 8017ce2:	001a      	movs	r2, r3
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	4013      	ands	r3, r2
 8017ce8:	d007      	beq.n	8017cfa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	681a      	ldr	r2, [r3, #0]
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	491e      	ldr	r1, [pc, #120]	@ (8017d70 <I2C_ITSlaveSeqCplt+0xc8>)
 8017cf6:	400a      	ands	r2, r1
 8017cf8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	2241      	movs	r2, #65	@ 0x41
 8017cfe:	5c9b      	ldrb	r3, [r3, r2]
 8017d00:	b2db      	uxtb	r3, r3
 8017d02:	2b29      	cmp	r3, #41	@ 0x29
 8017d04:	d114      	bne.n	8017d30 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2241      	movs	r2, #65	@ 0x41
 8017d0a:	2128      	movs	r1, #40	@ 0x28
 8017d0c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2221      	movs	r2, #33	@ 0x21
 8017d12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	2101      	movs	r1, #1
 8017d18:	0018      	movs	r0, r3
 8017d1a:	f000 ffbb 	bl	8018c94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	2240      	movs	r2, #64	@ 0x40
 8017d22:	2100      	movs	r1, #0
 8017d24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	0018      	movs	r0, r3
 8017d2a:	f7ff f841 	bl	8016db0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017d2e:	e019      	b.n	8017d64 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2241      	movs	r2, #65	@ 0x41
 8017d34:	5c9b      	ldrb	r3, [r3, r2]
 8017d36:	b2db      	uxtb	r3, r3
 8017d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d3a:	d113      	bne.n	8017d64 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	2241      	movs	r2, #65	@ 0x41
 8017d40:	2128      	movs	r1, #40	@ 0x28
 8017d42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	2222      	movs	r2, #34	@ 0x22
 8017d48:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2102      	movs	r1, #2
 8017d4e:	0018      	movs	r0, r3
 8017d50:	f000 ffa0 	bl	8018c94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2240      	movs	r2, #64	@ 0x40
 8017d58:	2100      	movs	r1, #0
 8017d5a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	0018      	movs	r0, r3
 8017d60:	f7ff f82e 	bl	8016dc0 <HAL_I2C_SlaveRxCpltCallback>
}
 8017d64:	46c0      	nop			@ (mov r8, r8)
 8017d66:	46bd      	mov	sp, r7
 8017d68:	b004      	add	sp, #16
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	ffffbfff 	.word	0xffffbfff
 8017d70:	ffff7fff 	.word	0xffff7fff

08017d74 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b086      	sub	sp, #24
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
 8017d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	2220      	movs	r2, #32
 8017d88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	2241      	movs	r2, #65	@ 0x41
 8017d8e:	5c9b      	ldrb	r3, [r3, r2]
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	2b21      	cmp	r3, #33	@ 0x21
 8017d94:	d108      	bne.n	8017da8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	2101      	movs	r1, #1
 8017d9a:	0018      	movs	r0, r3
 8017d9c:	f000 ff7a 	bl	8018c94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	2211      	movs	r2, #17
 8017da4:	631a      	str	r2, [r3, #48]	@ 0x30
 8017da6:	e00d      	b.n	8017dc4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2241      	movs	r2, #65	@ 0x41
 8017dac:	5c9b      	ldrb	r3, [r3, r2]
 8017dae:	b2db      	uxtb	r3, r3
 8017db0:	2b22      	cmp	r3, #34	@ 0x22
 8017db2:	d107      	bne.n	8017dc4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2102      	movs	r1, #2
 8017db8:	0018      	movs	r0, r3
 8017dba:	f000 ff6b 	bl	8018c94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	2212      	movs	r2, #18
 8017dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	685a      	ldr	r2, [r3, #4]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	4950      	ldr	r1, [pc, #320]	@ (8017f10 <I2C_ITMasterCplt+0x19c>)
 8017dd0:	400a      	ands	r2, r1
 8017dd2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8017f14 <I2C_ITMasterCplt+0x1a0>)
 8017dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	091b      	lsrs	r3, r3, #4
 8017de4:	001a      	movs	r2, r3
 8017de6:	2301      	movs	r3, #1
 8017de8:	4013      	ands	r3, r2
 8017dea:	d009      	beq.n	8017e00 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	2210      	movs	r2, #16
 8017df2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017df8:	2204      	movs	r2, #4
 8017dfa:	431a      	orrs	r2, r3
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2241      	movs	r2, #65	@ 0x41
 8017e04:	5c9b      	ldrb	r3, [r3, r2]
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	2b60      	cmp	r3, #96	@ 0x60
 8017e0a:	d10b      	bne.n	8017e24 <I2C_ITMasterCplt+0xb0>
 8017e0c:	697b      	ldr	r3, [r7, #20]
 8017e0e:	089b      	lsrs	r3, r3, #2
 8017e10:	001a      	movs	r2, r3
 8017e12:	2301      	movs	r3, #1
 8017e14:	4013      	ands	r3, r2
 8017e16:	d005      	beq.n	8017e24 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017e22:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	0018      	movs	r0, r3
 8017e28:	f000 fb1f 	bl	801846a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e30:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	2241      	movs	r2, #65	@ 0x41
 8017e36:	5c9b      	ldrb	r3, [r3, r2]
 8017e38:	b2db      	uxtb	r3, r3
 8017e3a:	2b60      	cmp	r3, #96	@ 0x60
 8017e3c:	d002      	beq.n	8017e44 <I2C_ITMasterCplt+0xd0>
 8017e3e:	693b      	ldr	r3, [r7, #16]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d007      	beq.n	8017e54 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	0011      	movs	r1, r2
 8017e4c:	0018      	movs	r0, r3
 8017e4e:	f000 f9e1 	bl	8018214 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017e52:	e058      	b.n	8017f06 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	2241      	movs	r2, #65	@ 0x41
 8017e58:	5c9b      	ldrb	r3, [r3, r2]
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	2b21      	cmp	r3, #33	@ 0x21
 8017e5e:	d126      	bne.n	8017eae <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2241      	movs	r2, #65	@ 0x41
 8017e64:	2120      	movs	r1, #32
 8017e66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	2242      	movs	r2, #66	@ 0x42
 8017e72:	5c9b      	ldrb	r3, [r3, r2]
 8017e74:	b2db      	uxtb	r3, r3
 8017e76:	2b40      	cmp	r3, #64	@ 0x40
 8017e78:	d10c      	bne.n	8017e94 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2242      	movs	r2, #66	@ 0x42
 8017e7e:	2100      	movs	r1, #0
 8017e80:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2240      	movs	r2, #64	@ 0x40
 8017e86:	2100      	movs	r1, #0
 8017e88:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	0018      	movs	r0, r3
 8017e8e:	f7fe ffb7 	bl	8016e00 <HAL_I2C_MemTxCpltCallback>
}
 8017e92:	e038      	b.n	8017f06 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	2242      	movs	r2, #66	@ 0x42
 8017e98:	2100      	movs	r1, #0
 8017e9a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2240      	movs	r2, #64	@ 0x40
 8017ea0:	2100      	movs	r1, #0
 8017ea2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	0018      	movs	r0, r3
 8017ea8:	f7fe ff72 	bl	8016d90 <HAL_I2C_MasterTxCpltCallback>
}
 8017eac:	e02b      	b.n	8017f06 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2241      	movs	r2, #65	@ 0x41
 8017eb2:	5c9b      	ldrb	r3, [r3, r2]
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	2b22      	cmp	r3, #34	@ 0x22
 8017eb8:	d125      	bne.n	8017f06 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2241      	movs	r2, #65	@ 0x41
 8017ebe:	2120      	movs	r1, #32
 8017ec0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	2242      	movs	r2, #66	@ 0x42
 8017ecc:	5c9b      	ldrb	r3, [r3, r2]
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	2b40      	cmp	r3, #64	@ 0x40
 8017ed2:	d10c      	bne.n	8017eee <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	2242      	movs	r2, #66	@ 0x42
 8017ed8:	2100      	movs	r1, #0
 8017eda:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2240      	movs	r2, #64	@ 0x40
 8017ee0:	2100      	movs	r1, #0
 8017ee2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	0018      	movs	r0, r3
 8017ee8:	f7fe ff92 	bl	8016e10 <HAL_I2C_MemRxCpltCallback>
}
 8017eec:	e00b      	b.n	8017f06 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2242      	movs	r2, #66	@ 0x42
 8017ef2:	2100      	movs	r1, #0
 8017ef4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	2240      	movs	r2, #64	@ 0x40
 8017efa:	2100      	movs	r1, #0
 8017efc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	0018      	movs	r0, r3
 8017f02:	f7fe ff4d 	bl	8016da0 <HAL_I2C_MasterRxCpltCallback>
}
 8017f06:	46c0      	nop			@ (mov r8, r8)
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	b006      	add	sp, #24
 8017f0c:	bd80      	pop	{r7, pc}
 8017f0e:	46c0      	nop			@ (mov r8, r8)
 8017f10:	fe00e800 	.word	0xfe00e800
 8017f14:	ffff0000 	.word	0xffff0000

08017f18 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b086      	sub	sp, #24
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
 8017f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017f2e:	200f      	movs	r0, #15
 8017f30:	183b      	adds	r3, r7, r0
 8017f32:	687a      	ldr	r2, [r7, #4]
 8017f34:	2141      	movs	r1, #65	@ 0x41
 8017f36:	5c52      	ldrb	r2, [r2, r1]
 8017f38:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2220      	movs	r2, #32
 8017f40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017f42:	183b      	adds	r3, r7, r0
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	2b21      	cmp	r3, #33	@ 0x21
 8017f48:	d003      	beq.n	8017f52 <I2C_ITSlaveCplt+0x3a>
 8017f4a:	183b      	adds	r3, r7, r0
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	2b29      	cmp	r3, #41	@ 0x29
 8017f50:	d109      	bne.n	8017f66 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017f52:	4a7d      	ldr	r2, [pc, #500]	@ (8018148 <I2C_ITSlaveCplt+0x230>)
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	0011      	movs	r1, r2
 8017f58:	0018      	movs	r0, r3
 8017f5a:	f000 fe9b 	bl	8018c94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	2221      	movs	r2, #33	@ 0x21
 8017f62:	631a      	str	r2, [r3, #48]	@ 0x30
 8017f64:	e011      	b.n	8017f8a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017f66:	220f      	movs	r2, #15
 8017f68:	18bb      	adds	r3, r7, r2
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	2b22      	cmp	r3, #34	@ 0x22
 8017f6e:	d003      	beq.n	8017f78 <I2C_ITSlaveCplt+0x60>
 8017f70:	18bb      	adds	r3, r7, r2
 8017f72:	781b      	ldrb	r3, [r3, #0]
 8017f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f76:	d108      	bne.n	8017f8a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017f78:	4a74      	ldr	r2, [pc, #464]	@ (801814c <I2C_ITSlaveCplt+0x234>)
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	0011      	movs	r1, r2
 8017f7e:	0018      	movs	r0, r3
 8017f80:	f000 fe88 	bl	8018c94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2222      	movs	r2, #34	@ 0x22
 8017f88:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	685a      	ldr	r2, [r3, #4]
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	2180      	movs	r1, #128	@ 0x80
 8017f96:	0209      	lsls	r1, r1, #8
 8017f98:	430a      	orrs	r2, r1
 8017f9a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	685a      	ldr	r2, [r3, #4]
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	496a      	ldr	r1, [pc, #424]	@ (8018150 <I2C_ITSlaveCplt+0x238>)
 8017fa8:	400a      	ands	r2, r1
 8017faa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	0018      	movs	r0, r3
 8017fb0:	f000 fa5b 	bl	801846a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017fb4:	693b      	ldr	r3, [r7, #16]
 8017fb6:	0b9b      	lsrs	r3, r3, #14
 8017fb8:	001a      	movs	r2, r3
 8017fba:	2301      	movs	r3, #1
 8017fbc:	4013      	ands	r3, r2
 8017fbe:	d013      	beq.n	8017fe8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	681a      	ldr	r2, [r3, #0]
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	4962      	ldr	r1, [pc, #392]	@ (8018154 <I2C_ITSlaveCplt+0x23c>)
 8017fcc:	400a      	ands	r2, r1
 8017fce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d020      	beq.n	801801a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	685b      	ldr	r3, [r3, #4]
 8017fe0:	b29a      	uxth	r2, r3
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017fe6:	e018      	b.n	801801a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	0bdb      	lsrs	r3, r3, #15
 8017fec:	001a      	movs	r2, r3
 8017fee:	2301      	movs	r3, #1
 8017ff0:	4013      	ands	r3, r2
 8017ff2:	d012      	beq.n	801801a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	4956      	ldr	r1, [pc, #344]	@ (8018158 <I2C_ITSlaveCplt+0x240>)
 8018000:	400a      	ands	r2, r1
 8018002:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018008:	2b00      	cmp	r3, #0
 801800a:	d006      	beq.n	801801a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	685b      	ldr	r3, [r3, #4]
 8018014:	b29a      	uxth	r2, r3
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801801a:	697b      	ldr	r3, [r7, #20]
 801801c:	089b      	lsrs	r3, r3, #2
 801801e:	001a      	movs	r2, r3
 8018020:	2301      	movs	r3, #1
 8018022:	4013      	ands	r3, r2
 8018024:	d020      	beq.n	8018068 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	2204      	movs	r2, #4
 801802a:	4393      	bics	r3, r2
 801802c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018038:	b2d2      	uxtb	r2, r2
 801803a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018040:	1c5a      	adds	r2, r3, #1
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801804a:	2b00      	cmp	r3, #0
 801804c:	d00c      	beq.n	8018068 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018052:	3b01      	subs	r3, #1
 8018054:	b29a      	uxth	r2, r3
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801805e:	b29b      	uxth	r3, r3
 8018060:	3b01      	subs	r3, #1
 8018062:	b29a      	uxth	r2, r3
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801806c:	b29b      	uxth	r3, r3
 801806e:	2b00      	cmp	r3, #0
 8018070:	d005      	beq.n	801807e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018076:	2204      	movs	r2, #4
 8018078:	431a      	orrs	r2, r3
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	2242      	movs	r2, #66	@ 0x42
 8018082:	2100      	movs	r1, #0
 8018084:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	2200      	movs	r2, #0
 801808a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018090:	2b00      	cmp	r3, #0
 8018092:	d013      	beq.n	80180bc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	0011      	movs	r1, r2
 801809c:	0018      	movs	r0, r3
 801809e:	f000 f8b9 	bl	8018214 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2241      	movs	r2, #65	@ 0x41
 80180a6:	5c9b      	ldrb	r3, [r3, r2]
 80180a8:	b2db      	uxtb	r3, r3
 80180aa:	2b28      	cmp	r3, #40	@ 0x28
 80180ac:	d147      	bne.n	801813e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80180ae:	697a      	ldr	r2, [r7, #20]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	0011      	movs	r1, r2
 80180b4:	0018      	movs	r0, r3
 80180b6:	f000 f853 	bl	8018160 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80180ba:	e040      	b.n	801813e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180c0:	4a26      	ldr	r2, [pc, #152]	@ (801815c <I2C_ITSlaveCplt+0x244>)
 80180c2:	4293      	cmp	r3, r2
 80180c4:	d016      	beq.n	80180f4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	0018      	movs	r0, r3
 80180ca:	f7ff fded 	bl	8017ca8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	4a22      	ldr	r2, [pc, #136]	@ (801815c <I2C_ITSlaveCplt+0x244>)
 80180d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2241      	movs	r2, #65	@ 0x41
 80180d8:	2120      	movs	r1, #32
 80180da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2200      	movs	r2, #0
 80180e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2240      	movs	r2, #64	@ 0x40
 80180e6:	2100      	movs	r1, #0
 80180e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	0018      	movs	r0, r3
 80180ee:	f7fe fe7f 	bl	8016df0 <HAL_I2C_ListenCpltCallback>
}
 80180f2:	e024      	b.n	801813e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2241      	movs	r2, #65	@ 0x41
 80180f8:	5c9b      	ldrb	r3, [r3, r2]
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	2b22      	cmp	r3, #34	@ 0x22
 80180fe:	d10f      	bne.n	8018120 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2241      	movs	r2, #65	@ 0x41
 8018104:	2120      	movs	r1, #32
 8018106:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	2200      	movs	r2, #0
 801810c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	2240      	movs	r2, #64	@ 0x40
 8018112:	2100      	movs	r1, #0
 8018114:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	0018      	movs	r0, r3
 801811a:	f7fe fe51 	bl	8016dc0 <HAL_I2C_SlaveRxCpltCallback>
}
 801811e:	e00e      	b.n	801813e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2241      	movs	r2, #65	@ 0x41
 8018124:	2120      	movs	r1, #32
 8018126:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	2200      	movs	r2, #0
 801812c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2240      	movs	r2, #64	@ 0x40
 8018132:	2100      	movs	r1, #0
 8018134:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	0018      	movs	r0, r3
 801813a:	f7fe fe39 	bl	8016db0 <HAL_I2C_SlaveTxCpltCallback>
}
 801813e:	46c0      	nop			@ (mov r8, r8)
 8018140:	46bd      	mov	sp, r7
 8018142:	b006      	add	sp, #24
 8018144:	bd80      	pop	{r7, pc}
 8018146:	46c0      	nop			@ (mov r8, r8)
 8018148:	00008001 	.word	0x00008001
 801814c:	00008002 	.word	0x00008002
 8018150:	fe00e800 	.word	0xfe00e800
 8018154:	ffffbfff 	.word	0xffffbfff
 8018158:	ffff7fff 	.word	0xffff7fff
 801815c:	ffff0000 	.word	0xffff0000

08018160 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
 8018168:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	4a27      	ldr	r2, [pc, #156]	@ (801820c <I2C_ITListenCplt+0xac>)
 801816e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	2200      	movs	r2, #0
 8018174:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	2241      	movs	r2, #65	@ 0x41
 801817a:	2120      	movs	r1, #32
 801817c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2242      	movs	r2, #66	@ 0x42
 8018182:	2100      	movs	r1, #0
 8018184:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2200      	movs	r2, #0
 801818a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	089b      	lsrs	r3, r3, #2
 8018190:	001a      	movs	r2, r3
 8018192:	2301      	movs	r3, #1
 8018194:	4013      	ands	r3, r2
 8018196:	d022      	beq.n	80181de <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181a2:	b2d2      	uxtb	r2, r2
 80181a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181aa:	1c5a      	adds	r2, r3, #1
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d012      	beq.n	80181de <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181bc:	3b01      	subs	r3, #1
 80181be:	b29a      	uxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80181c8:	b29b      	uxth	r3, r3
 80181ca:	3b01      	subs	r3, #1
 80181cc:	b29a      	uxth	r2, r3
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80181d6:	2204      	movs	r2, #4
 80181d8:	431a      	orrs	r2, r3
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80181de:	4a0c      	ldr	r2, [pc, #48]	@ (8018210 <I2C_ITListenCplt+0xb0>)
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	0011      	movs	r1, r2
 80181e4:	0018      	movs	r0, r3
 80181e6:	f000 fd55 	bl	8018c94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	2210      	movs	r2, #16
 80181f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	2240      	movs	r2, #64	@ 0x40
 80181f6:	2100      	movs	r1, #0
 80181f8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	0018      	movs	r0, r3
 80181fe:	f7fe fdf7 	bl	8016df0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8018202:	46c0      	nop			@ (mov r8, r8)
 8018204:	46bd      	mov	sp, r7
 8018206:	b002      	add	sp, #8
 8018208:	bd80      	pop	{r7, pc}
 801820a:	46c0      	nop			@ (mov r8, r8)
 801820c:	ffff0000 	.word	0xffff0000
 8018210:	00008003 	.word	0x00008003

08018214 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b084      	sub	sp, #16
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801821e:	200f      	movs	r0, #15
 8018220:	183b      	adds	r3, r7, r0
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	2141      	movs	r1, #65	@ 0x41
 8018226:	5c52      	ldrb	r2, [r2, r1]
 8018228:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	2242      	movs	r2, #66	@ 0x42
 801822e:	2100      	movs	r1, #0
 8018230:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	4a72      	ldr	r2, [pc, #456]	@ (8018400 <I2C_ITError+0x1ec>)
 8018236:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2200      	movs	r2, #0
 801823c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	431a      	orrs	r2, r3
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801824a:	183b      	adds	r3, r7, r0
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	2b28      	cmp	r3, #40	@ 0x28
 8018250:	d007      	beq.n	8018262 <I2C_ITError+0x4e>
 8018252:	183b      	adds	r3, r7, r0
 8018254:	781b      	ldrb	r3, [r3, #0]
 8018256:	2b29      	cmp	r3, #41	@ 0x29
 8018258:	d003      	beq.n	8018262 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801825a:	183b      	adds	r3, r7, r0
 801825c:	781b      	ldrb	r3, [r3, #0]
 801825e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018260:	d10c      	bne.n	801827c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2103      	movs	r1, #3
 8018266:	0018      	movs	r0, r3
 8018268:	f000 fd14 	bl	8018c94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2241      	movs	r2, #65	@ 0x41
 8018270:	2128      	movs	r1, #40	@ 0x28
 8018272:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	4a63      	ldr	r2, [pc, #396]	@ (8018404 <I2C_ITError+0x1f0>)
 8018278:	635a      	str	r2, [r3, #52]	@ 0x34
 801827a:	e032      	b.n	80182e2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801827c:	4a62      	ldr	r2, [pc, #392]	@ (8018408 <I2C_ITError+0x1f4>)
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	0011      	movs	r1, r2
 8018282:	0018      	movs	r0, r3
 8018284:	f000 fd06 	bl	8018c94 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	0018      	movs	r0, r3
 801828c:	f000 f8ed 	bl	801846a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	2241      	movs	r2, #65	@ 0x41
 8018294:	5c9b      	ldrb	r3, [r3, r2]
 8018296:	b2db      	uxtb	r3, r3
 8018298:	2b60      	cmp	r3, #96	@ 0x60
 801829a:	d01f      	beq.n	80182dc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2241      	movs	r2, #65	@ 0x41
 80182a0:	2120      	movs	r1, #32
 80182a2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	699b      	ldr	r3, [r3, #24]
 80182aa:	2220      	movs	r2, #32
 80182ac:	4013      	ands	r3, r2
 80182ae:	2b20      	cmp	r3, #32
 80182b0:	d114      	bne.n	80182dc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	699b      	ldr	r3, [r3, #24]
 80182b8:	2210      	movs	r2, #16
 80182ba:	4013      	ands	r3, r2
 80182bc:	2b10      	cmp	r3, #16
 80182be:	d109      	bne.n	80182d4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	2210      	movs	r2, #16
 80182c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80182cc:	2204      	movs	r2, #4
 80182ce:	431a      	orrs	r2, r3
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2220      	movs	r2, #32
 80182da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2200      	movs	r2, #0
 80182e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d03b      	beq.n	8018368 <I2C_ITError+0x154>
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	2b11      	cmp	r3, #17
 80182f4:	d002      	beq.n	80182fc <I2C_ITError+0xe8>
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	2b21      	cmp	r3, #33	@ 0x21
 80182fa:	d135      	bne.n	8018368 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	681a      	ldr	r2, [r3, #0]
 8018302:	2380      	movs	r3, #128	@ 0x80
 8018304:	01db      	lsls	r3, r3, #7
 8018306:	401a      	ands	r2, r3
 8018308:	2380      	movs	r3, #128	@ 0x80
 801830a:	01db      	lsls	r3, r3, #7
 801830c:	429a      	cmp	r2, r3
 801830e:	d107      	bne.n	8018320 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	681a      	ldr	r2, [r3, #0]
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	493c      	ldr	r1, [pc, #240]	@ (801840c <I2C_ITError+0x1f8>)
 801831c:	400a      	ands	r2, r1
 801831e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018324:	0018      	movs	r0, r3
 8018326:	f7fd f9c6 	bl	80156b6 <HAL_DMA_GetState>
 801832a:	0003      	movs	r3, r0
 801832c:	2b01      	cmp	r3, #1
 801832e:	d016      	beq.n	801835e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018334:	4a36      	ldr	r2, [pc, #216]	@ (8018410 <I2C_ITError+0x1fc>)
 8018336:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	2240      	movs	r2, #64	@ 0x40
 801833c:	2100      	movs	r1, #0
 801833e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018344:	0018      	movs	r0, r3
 8018346:	f7fd f8c1 	bl	80154cc <HAL_DMA_Abort_IT>
 801834a:	1e03      	subs	r3, r0, #0
 801834c:	d051      	beq.n	80183f2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018358:	0018      	movs	r0, r3
 801835a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801835c:	e049      	b.n	80183f2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	0018      	movs	r0, r3
 8018362:	f000 f859 	bl	8018418 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018366:	e044      	b.n	80183f2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801836c:	2b00      	cmp	r3, #0
 801836e:	d03b      	beq.n	80183e8 <I2C_ITError+0x1d4>
 8018370:	68bb      	ldr	r3, [r7, #8]
 8018372:	2b12      	cmp	r3, #18
 8018374:	d002      	beq.n	801837c <I2C_ITError+0x168>
 8018376:	68bb      	ldr	r3, [r7, #8]
 8018378:	2b22      	cmp	r3, #34	@ 0x22
 801837a:	d135      	bne.n	80183e8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	681a      	ldr	r2, [r3, #0]
 8018382:	2380      	movs	r3, #128	@ 0x80
 8018384:	021b      	lsls	r3, r3, #8
 8018386:	401a      	ands	r2, r3
 8018388:	2380      	movs	r3, #128	@ 0x80
 801838a:	021b      	lsls	r3, r3, #8
 801838c:	429a      	cmp	r2, r3
 801838e:	d107      	bne.n	80183a0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	681a      	ldr	r2, [r3, #0]
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	491e      	ldr	r1, [pc, #120]	@ (8018414 <I2C_ITError+0x200>)
 801839c:	400a      	ands	r2, r1
 801839e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183a4:	0018      	movs	r0, r3
 80183a6:	f7fd f986 	bl	80156b6 <HAL_DMA_GetState>
 80183aa:	0003      	movs	r3, r0
 80183ac:	2b01      	cmp	r3, #1
 80183ae:	d016      	beq.n	80183de <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183b4:	4a16      	ldr	r2, [pc, #88]	@ (8018410 <I2C_ITError+0x1fc>)
 80183b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2240      	movs	r2, #64	@ 0x40
 80183bc:	2100      	movs	r1, #0
 80183be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183c4:	0018      	movs	r0, r3
 80183c6:	f7fd f881 	bl	80154cc <HAL_DMA_Abort_IT>
 80183ca:	1e03      	subs	r3, r0, #0
 80183cc:	d013      	beq.n	80183f6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183d8:	0018      	movs	r0, r3
 80183da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80183dc:	e00b      	b.n	80183f6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	0018      	movs	r0, r3
 80183e2:	f000 f819 	bl	8018418 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80183e6:	e006      	b.n	80183f6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	0018      	movs	r0, r3
 80183ec:	f000 f814 	bl	8018418 <I2C_TreatErrorCallback>
  }
}
 80183f0:	e002      	b.n	80183f8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80183f2:	46c0      	nop			@ (mov r8, r8)
 80183f4:	e000      	b.n	80183f8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80183f6:	46c0      	nop			@ (mov r8, r8)
}
 80183f8:	46c0      	nop			@ (mov r8, r8)
 80183fa:	46bd      	mov	sp, r7
 80183fc:	b004      	add	sp, #16
 80183fe:	bd80      	pop	{r7, pc}
 8018400:	ffff0000 	.word	0xffff0000
 8018404:	080170c5 	.word	0x080170c5
 8018408:	00008003 	.word	0x00008003
 801840c:	ffffbfff 	.word	0xffffbfff
 8018410:	08018623 	.word	0x08018623
 8018414:	ffff7fff 	.word	0xffff7fff

08018418 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2241      	movs	r2, #65	@ 0x41
 8018424:	5c9b      	ldrb	r3, [r3, r2]
 8018426:	b2db      	uxtb	r3, r3
 8018428:	2b60      	cmp	r3, #96	@ 0x60
 801842a:	d10f      	bne.n	801844c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	2241      	movs	r2, #65	@ 0x41
 8018430:	2120      	movs	r1, #32
 8018432:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	2200      	movs	r2, #0
 8018438:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	2240      	movs	r2, #64	@ 0x40
 801843e:	2100      	movs	r1, #0
 8018440:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	0018      	movs	r0, r3
 8018446:	f7fe fcf3 	bl	8016e30 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801844a:	e00a      	b.n	8018462 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2200      	movs	r2, #0
 8018450:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	2240      	movs	r2, #64	@ 0x40
 8018456:	2100      	movs	r1, #0
 8018458:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	0018      	movs	r0, r3
 801845e:	f7fe fcdf 	bl	8016e20 <HAL_I2C_ErrorCallback>
}
 8018462:	46c0      	nop			@ (mov r8, r8)
 8018464:	46bd      	mov	sp, r7
 8018466:	b002      	add	sp, #8
 8018468:	bd80      	pop	{r7, pc}

0801846a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801846a:	b580      	push	{r7, lr}
 801846c:	b082      	sub	sp, #8
 801846e:	af00      	add	r7, sp, #0
 8018470:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	699b      	ldr	r3, [r3, #24]
 8018478:	2202      	movs	r2, #2
 801847a:	4013      	ands	r3, r2
 801847c:	2b02      	cmp	r3, #2
 801847e:	d103      	bne.n	8018488 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	2200      	movs	r2, #0
 8018486:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	699b      	ldr	r3, [r3, #24]
 801848e:	2201      	movs	r2, #1
 8018490:	4013      	ands	r3, r2
 8018492:	2b01      	cmp	r3, #1
 8018494:	d007      	beq.n	80184a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	699a      	ldr	r2, [r3, #24]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	2101      	movs	r1, #1
 80184a2:	430a      	orrs	r2, r1
 80184a4:	619a      	str	r2, [r3, #24]
  }
}
 80184a6:	46c0      	nop			@ (mov r8, r8)
 80184a8:	46bd      	mov	sp, r7
 80184aa:	b002      	add	sp, #8
 80184ac:	bd80      	pop	{r7, pc}
	...

080184b0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b084      	sub	sp, #16
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184bc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	681a      	ldr	r2, [r3, #0]
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	4920      	ldr	r1, [pc, #128]	@ (801854c <I2C_DMAMasterTransmitCplt+0x9c>)
 80184ca:	400a      	ands	r2, r1
 80184cc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184d2:	b29b      	uxth	r3, r3
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d105      	bne.n	80184e4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	2120      	movs	r1, #32
 80184dc:	0018      	movs	r0, r3
 80184de:	f000 fb4b 	bl	8018b78 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80184e2:	e02e      	b.n	8018542 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184e8:	68fa      	ldr	r2, [r7, #12]
 80184ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80184ec:	189a      	adds	r2, r3, r2
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	2bff      	cmp	r3, #255	@ 0xff
 80184fa:	d903      	bls.n	8018504 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	22ff      	movs	r2, #255	@ 0xff
 8018500:	851a      	strh	r2, [r3, #40]	@ 0x28
 8018502:	e004      	b.n	801850e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018508:	b29a      	uxth	r2, r3
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018516:	0019      	movs	r1, r3
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	3328      	adds	r3, #40	@ 0x28
 801851e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018524:	f7fc ff2c 	bl	8015380 <HAL_DMA_Start_IT>
 8018528:	1e03      	subs	r3, r0, #0
 801852a:	d005      	beq.n	8018538 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	2110      	movs	r1, #16
 8018530:	0018      	movs	r0, r3
 8018532:	f7ff fe6f 	bl	8018214 <I2C_ITError>
}
 8018536:	e004      	b.n	8018542 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	2140      	movs	r1, #64	@ 0x40
 801853c:	0018      	movs	r0, r3
 801853e:	f000 fb1b 	bl	8018b78 <I2C_Enable_IRQ>
}
 8018542:	46c0      	nop			@ (mov r8, r8)
 8018544:	46bd      	mov	sp, r7
 8018546:	b004      	add	sp, #16
 8018548:	bd80      	pop	{r7, pc}
 801854a:	46c0      	nop			@ (mov r8, r8)
 801854c:	ffffbfff 	.word	0xffffbfff

08018550 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b084      	sub	sp, #16
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801855c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	681a      	ldr	r2, [r3, #0]
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	4920      	ldr	r1, [pc, #128]	@ (80185ec <I2C_DMAMasterReceiveCplt+0x9c>)
 801856a:	400a      	ands	r2, r1
 801856c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018572:	b29b      	uxth	r3, r3
 8018574:	2b00      	cmp	r3, #0
 8018576:	d105      	bne.n	8018584 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	2120      	movs	r1, #32
 801857c:	0018      	movs	r0, r3
 801857e:	f000 fafb 	bl	8018b78 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8018582:	e02e      	b.n	80185e2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018588:	68fa      	ldr	r2, [r7, #12]
 801858a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801858c:	189a      	adds	r2, r3, r2
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018596:	b29b      	uxth	r3, r3
 8018598:	2bff      	cmp	r3, #255	@ 0xff
 801859a:	d903      	bls.n	80185a4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	22ff      	movs	r2, #255	@ 0xff
 80185a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80185a2:	e004      	b.n	80185ae <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80185a8:	b29a      	uxth	r2, r3
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	3324      	adds	r3, #36	@ 0x24
 80185b8:	0019      	movs	r1, r3
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185be:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80185c4:	f7fc fedc 	bl	8015380 <HAL_DMA_Start_IT>
 80185c8:	1e03      	subs	r3, r0, #0
 80185ca:	d005      	beq.n	80185d8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	2110      	movs	r1, #16
 80185d0:	0018      	movs	r0, r3
 80185d2:	f7ff fe1f 	bl	8018214 <I2C_ITError>
}
 80185d6:	e004      	b.n	80185e2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	2140      	movs	r1, #64	@ 0x40
 80185dc:	0018      	movs	r0, r3
 80185de:	f000 facb 	bl	8018b78 <I2C_Enable_IRQ>
}
 80185e2:	46c0      	nop			@ (mov r8, r8)
 80185e4:	46bd      	mov	sp, r7
 80185e6:	b004      	add	sp, #16
 80185e8:	bd80      	pop	{r7, pc}
 80185ea:	46c0      	nop			@ (mov r8, r8)
 80185ec:	ffff7fff 	.word	0xffff7fff

080185f0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185fc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	685a      	ldr	r2, [r3, #4]
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	2180      	movs	r1, #128	@ 0x80
 801860a:	0209      	lsls	r1, r1, #8
 801860c:	430a      	orrs	r2, r1
 801860e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	2110      	movs	r1, #16
 8018614:	0018      	movs	r0, r3
 8018616:	f7ff fdfd 	bl	8018214 <I2C_ITError>
}
 801861a:	46c0      	nop			@ (mov r8, r8)
 801861c:	46bd      	mov	sp, r7
 801861e:	b004      	add	sp, #16
 8018620:	bd80      	pop	{r7, pc}

08018622 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018622:	b580      	push	{r7, lr}
 8018624:	b084      	sub	sp, #16
 8018626:	af00      	add	r7, sp, #0
 8018628:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801862e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018634:	2b00      	cmp	r3, #0
 8018636:	d003      	beq.n	8018640 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801863c:	2200      	movs	r2, #0
 801863e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018644:	2b00      	cmp	r3, #0
 8018646:	d003      	beq.n	8018650 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801864c:	2200      	movs	r2, #0
 801864e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	0018      	movs	r0, r3
 8018654:	f7ff fee0 	bl	8018418 <I2C_TreatErrorCallback>
}
 8018658:	46c0      	nop			@ (mov r8, r8)
 801865a:	46bd      	mov	sp, r7
 801865c:	b004      	add	sp, #16
 801865e:	bd80      	pop	{r7, pc}

08018660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b084      	sub	sp, #16
 8018664:	af00      	add	r7, sp, #0
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	603b      	str	r3, [r7, #0]
 801866c:	1dfb      	adds	r3, r7, #7
 801866e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018670:	e030      	b.n	80186d4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018672:	683b      	ldr	r3, [r7, #0]
 8018674:	3301      	adds	r3, #1
 8018676:	d02d      	beq.n	80186d4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018678:	f7fc f94e 	bl	8014918 <HAL_GetTick>
 801867c:	0002      	movs	r2, r0
 801867e:	69bb      	ldr	r3, [r7, #24]
 8018680:	1ad3      	subs	r3, r2, r3
 8018682:	683a      	ldr	r2, [r7, #0]
 8018684:	429a      	cmp	r2, r3
 8018686:	d302      	bcc.n	801868e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8018688:	683b      	ldr	r3, [r7, #0]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d122      	bne.n	80186d4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	699b      	ldr	r3, [r3, #24]
 8018694:	68ba      	ldr	r2, [r7, #8]
 8018696:	4013      	ands	r3, r2
 8018698:	68ba      	ldr	r2, [r7, #8]
 801869a:	1ad3      	subs	r3, r2, r3
 801869c:	425a      	negs	r2, r3
 801869e:	4153      	adcs	r3, r2
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	001a      	movs	r2, r3
 80186a4:	1dfb      	adds	r3, r7, #7
 80186a6:	781b      	ldrb	r3, [r3, #0]
 80186a8:	429a      	cmp	r2, r3
 80186aa:	d113      	bne.n	80186d4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80186b0:	2220      	movs	r2, #32
 80186b2:	431a      	orrs	r2, r3
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	2241      	movs	r2, #65	@ 0x41
 80186bc:	2120      	movs	r1, #32
 80186be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	2242      	movs	r2, #66	@ 0x42
 80186c4:	2100      	movs	r1, #0
 80186c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	2240      	movs	r2, #64	@ 0x40
 80186cc:	2100      	movs	r1, #0
 80186ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80186d0:	2301      	movs	r3, #1
 80186d2:	e00f      	b.n	80186f4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	699b      	ldr	r3, [r3, #24]
 80186da:	68ba      	ldr	r2, [r7, #8]
 80186dc:	4013      	ands	r3, r2
 80186de:	68ba      	ldr	r2, [r7, #8]
 80186e0:	1ad3      	subs	r3, r2, r3
 80186e2:	425a      	negs	r2, r3
 80186e4:	4153      	adcs	r3, r2
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	001a      	movs	r2, r3
 80186ea:	1dfb      	adds	r3, r7, #7
 80186ec:	781b      	ldrb	r3, [r3, #0]
 80186ee:	429a      	cmp	r2, r3
 80186f0:	d0bf      	beq.n	8018672 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80186f2:	2300      	movs	r3, #0
}
 80186f4:	0018      	movs	r0, r3
 80186f6:	46bd      	mov	sp, r7
 80186f8:	b004      	add	sp, #16
 80186fa:	bd80      	pop	{r7, pc}

080186fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018708:	e032      	b.n	8018770 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801870a:	687a      	ldr	r2, [r7, #4]
 801870c:	68b9      	ldr	r1, [r7, #8]
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	0018      	movs	r0, r3
 8018712:	f000 f8ff 	bl	8018914 <I2C_IsErrorOccurred>
 8018716:	1e03      	subs	r3, r0, #0
 8018718:	d001      	beq.n	801871e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801871a:	2301      	movs	r3, #1
 801871c:	e030      	b.n	8018780 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801871e:	68bb      	ldr	r3, [r7, #8]
 8018720:	3301      	adds	r3, #1
 8018722:	d025      	beq.n	8018770 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018724:	f7fc f8f8 	bl	8014918 <HAL_GetTick>
 8018728:	0002      	movs	r2, r0
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	1ad3      	subs	r3, r2, r3
 801872e:	68ba      	ldr	r2, [r7, #8]
 8018730:	429a      	cmp	r2, r3
 8018732:	d302      	bcc.n	801873a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d11a      	bne.n	8018770 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	699b      	ldr	r3, [r3, #24]
 8018740:	2202      	movs	r2, #2
 8018742:	4013      	ands	r3, r2
 8018744:	2b02      	cmp	r3, #2
 8018746:	d013      	beq.n	8018770 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801874c:	2220      	movs	r2, #32
 801874e:	431a      	orrs	r2, r3
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	2241      	movs	r2, #65	@ 0x41
 8018758:	2120      	movs	r1, #32
 801875a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	2242      	movs	r2, #66	@ 0x42
 8018760:	2100      	movs	r1, #0
 8018762:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	2240      	movs	r2, #64	@ 0x40
 8018768:	2100      	movs	r1, #0
 801876a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801876c:	2301      	movs	r3, #1
 801876e:	e007      	b.n	8018780 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	699b      	ldr	r3, [r3, #24]
 8018776:	2202      	movs	r2, #2
 8018778:	4013      	ands	r3, r2
 801877a:	2b02      	cmp	r3, #2
 801877c:	d1c5      	bne.n	801870a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801877e:	2300      	movs	r3, #0
}
 8018780:	0018      	movs	r0, r3
 8018782:	46bd      	mov	sp, r7
 8018784:	b004      	add	sp, #16
 8018786:	bd80      	pop	{r7, pc}

08018788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b084      	sub	sp, #16
 801878c:	af00      	add	r7, sp, #0
 801878e:	60f8      	str	r0, [r7, #12]
 8018790:	60b9      	str	r1, [r7, #8]
 8018792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018794:	e02f      	b.n	80187f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018796:	687a      	ldr	r2, [r7, #4]
 8018798:	68b9      	ldr	r1, [r7, #8]
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	0018      	movs	r0, r3
 801879e:	f000 f8b9 	bl	8018914 <I2C_IsErrorOccurred>
 80187a2:	1e03      	subs	r3, r0, #0
 80187a4:	d001      	beq.n	80187aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80187a6:	2301      	movs	r3, #1
 80187a8:	e02d      	b.n	8018806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80187aa:	f7fc f8b5 	bl	8014918 <HAL_GetTick>
 80187ae:	0002      	movs	r2, r0
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	1ad3      	subs	r3, r2, r3
 80187b4:	68ba      	ldr	r2, [r7, #8]
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d302      	bcc.n	80187c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d11a      	bne.n	80187f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	699b      	ldr	r3, [r3, #24]
 80187c6:	2220      	movs	r2, #32
 80187c8:	4013      	ands	r3, r2
 80187ca:	2b20      	cmp	r3, #32
 80187cc:	d013      	beq.n	80187f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187d2:	2220      	movs	r2, #32
 80187d4:	431a      	orrs	r2, r3
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	2241      	movs	r2, #65	@ 0x41
 80187de:	2120      	movs	r1, #32
 80187e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	2242      	movs	r2, #66	@ 0x42
 80187e6:	2100      	movs	r1, #0
 80187e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	2240      	movs	r2, #64	@ 0x40
 80187ee:	2100      	movs	r1, #0
 80187f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80187f2:	2301      	movs	r3, #1
 80187f4:	e007      	b.n	8018806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	699b      	ldr	r3, [r3, #24]
 80187fc:	2220      	movs	r2, #32
 80187fe:	4013      	ands	r3, r2
 8018800:	2b20      	cmp	r3, #32
 8018802:	d1c8      	bne.n	8018796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018804:	2300      	movs	r3, #0
}
 8018806:	0018      	movs	r0, r3
 8018808:	46bd      	mov	sp, r7
 801880a:	b004      	add	sp, #16
 801880c:	bd80      	pop	{r7, pc}
	...

08018810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	60f8      	str	r0, [r7, #12]
 8018818:	60b9      	str	r1, [r7, #8]
 801881a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801881c:	e06b      	b.n	80188f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801881e:	687a      	ldr	r2, [r7, #4]
 8018820:	68b9      	ldr	r1, [r7, #8]
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	0018      	movs	r0, r3
 8018826:	f000 f875 	bl	8018914 <I2C_IsErrorOccurred>
 801882a:	1e03      	subs	r3, r0, #0
 801882c:	d001      	beq.n	8018832 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801882e:	2301      	movs	r3, #1
 8018830:	e069      	b.n	8018906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	699b      	ldr	r3, [r3, #24]
 8018838:	2220      	movs	r2, #32
 801883a:	4013      	ands	r3, r2
 801883c:	2b20      	cmp	r3, #32
 801883e:	d138      	bne.n	80188b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	699b      	ldr	r3, [r3, #24]
 8018846:	2204      	movs	r2, #4
 8018848:	4013      	ands	r3, r2
 801884a:	2b04      	cmp	r3, #4
 801884c:	d105      	bne.n	801885a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018852:	2b00      	cmp	r3, #0
 8018854:	d001      	beq.n	801885a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8018856:	2300      	movs	r3, #0
 8018858:	e055      	b.n	8018906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	699b      	ldr	r3, [r3, #24]
 8018860:	2210      	movs	r2, #16
 8018862:	4013      	ands	r3, r2
 8018864:	2b10      	cmp	r3, #16
 8018866:	d107      	bne.n	8018878 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	2210      	movs	r2, #16
 801886e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	2204      	movs	r2, #4
 8018874:	645a      	str	r2, [r3, #68]	@ 0x44
 8018876:	e002      	b.n	801887e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	2200      	movs	r2, #0
 801887c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	2220      	movs	r2, #32
 8018884:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	685a      	ldr	r2, [r3, #4]
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	491f      	ldr	r1, [pc, #124]	@ (8018910 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8018892:	400a      	ands	r2, r1
 8018894:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	2241      	movs	r2, #65	@ 0x41
 801889a:	2120      	movs	r1, #32
 801889c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	2242      	movs	r2, #66	@ 0x42
 80188a2:	2100      	movs	r1, #0
 80188a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	2240      	movs	r2, #64	@ 0x40
 80188aa:	2100      	movs	r1, #0
 80188ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80188ae:	2301      	movs	r3, #1
 80188b0:	e029      	b.n	8018906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80188b2:	f7fc f831 	bl	8014918 <HAL_GetTick>
 80188b6:	0002      	movs	r2, r0
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	1ad3      	subs	r3, r2, r3
 80188bc:	68ba      	ldr	r2, [r7, #8]
 80188be:	429a      	cmp	r2, r3
 80188c0:	d302      	bcc.n	80188c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80188c2:	68bb      	ldr	r3, [r7, #8]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d116      	bne.n	80188f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	699b      	ldr	r3, [r3, #24]
 80188ce:	2204      	movs	r2, #4
 80188d0:	4013      	ands	r3, r2
 80188d2:	2b04      	cmp	r3, #4
 80188d4:	d00f      	beq.n	80188f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188da:	2220      	movs	r2, #32
 80188dc:	431a      	orrs	r2, r3
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	2241      	movs	r2, #65	@ 0x41
 80188e6:	2120      	movs	r1, #32
 80188e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	2240      	movs	r2, #64	@ 0x40
 80188ee:	2100      	movs	r1, #0
 80188f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80188f2:	2301      	movs	r3, #1
 80188f4:	e007      	b.n	8018906 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	699b      	ldr	r3, [r3, #24]
 80188fc:	2204      	movs	r2, #4
 80188fe:	4013      	ands	r3, r2
 8018900:	2b04      	cmp	r3, #4
 8018902:	d18c      	bne.n	801881e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018904:	2300      	movs	r3, #0
}
 8018906:	0018      	movs	r0, r3
 8018908:	46bd      	mov	sp, r7
 801890a:	b004      	add	sp, #16
 801890c:	bd80      	pop	{r7, pc}
 801890e:	46c0      	nop			@ (mov r8, r8)
 8018910:	fe00e800 	.word	0xfe00e800

08018914 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b08a      	sub	sp, #40	@ 0x28
 8018918:	af00      	add	r7, sp, #0
 801891a:	60f8      	str	r0, [r7, #12]
 801891c:	60b9      	str	r1, [r7, #8]
 801891e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018920:	2327      	movs	r3, #39	@ 0x27
 8018922:	18fb      	adds	r3, r7, r3
 8018924:	2200      	movs	r2, #0
 8018926:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	699b      	ldr	r3, [r3, #24]
 801892e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018930:	2300      	movs	r3, #0
 8018932:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018938:	69bb      	ldr	r3, [r7, #24]
 801893a:	2210      	movs	r2, #16
 801893c:	4013      	ands	r3, r2
 801893e:	d100      	bne.n	8018942 <I2C_IsErrorOccurred+0x2e>
 8018940:	e079      	b.n	8018a36 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	2210      	movs	r2, #16
 8018948:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801894a:	e057      	b.n	80189fc <I2C_IsErrorOccurred+0xe8>
 801894c:	2227      	movs	r2, #39	@ 0x27
 801894e:	18bb      	adds	r3, r7, r2
 8018950:	18ba      	adds	r2, r7, r2
 8018952:	7812      	ldrb	r2, [r2, #0]
 8018954:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	3301      	adds	r3, #1
 801895a:	d04f      	beq.n	80189fc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801895c:	f7fb ffdc 	bl	8014918 <HAL_GetTick>
 8018960:	0002      	movs	r2, r0
 8018962:	69fb      	ldr	r3, [r7, #28]
 8018964:	1ad3      	subs	r3, r2, r3
 8018966:	68ba      	ldr	r2, [r7, #8]
 8018968:	429a      	cmp	r2, r3
 801896a:	d302      	bcc.n	8018972 <I2C_IsErrorOccurred+0x5e>
 801896c:	68bb      	ldr	r3, [r7, #8]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d144      	bne.n	80189fc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	685a      	ldr	r2, [r3, #4]
 8018978:	2380      	movs	r3, #128	@ 0x80
 801897a:	01db      	lsls	r3, r3, #7
 801897c:	4013      	ands	r3, r2
 801897e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018980:	2013      	movs	r0, #19
 8018982:	183b      	adds	r3, r7, r0
 8018984:	68fa      	ldr	r2, [r7, #12]
 8018986:	2142      	movs	r1, #66	@ 0x42
 8018988:	5c52      	ldrb	r2, [r2, r1]
 801898a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	699a      	ldr	r2, [r3, #24]
 8018992:	2380      	movs	r3, #128	@ 0x80
 8018994:	021b      	lsls	r3, r3, #8
 8018996:	401a      	ands	r2, r3
 8018998:	2380      	movs	r3, #128	@ 0x80
 801899a:	021b      	lsls	r3, r3, #8
 801899c:	429a      	cmp	r2, r3
 801899e:	d126      	bne.n	80189ee <I2C_IsErrorOccurred+0xda>
 80189a0:	697a      	ldr	r2, [r7, #20]
 80189a2:	2380      	movs	r3, #128	@ 0x80
 80189a4:	01db      	lsls	r3, r3, #7
 80189a6:	429a      	cmp	r2, r3
 80189a8:	d021      	beq.n	80189ee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80189aa:	183b      	adds	r3, r7, r0
 80189ac:	781b      	ldrb	r3, [r3, #0]
 80189ae:	2b20      	cmp	r3, #32
 80189b0:	d01d      	beq.n	80189ee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	685a      	ldr	r2, [r3, #4]
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	2180      	movs	r1, #128	@ 0x80
 80189be:	01c9      	lsls	r1, r1, #7
 80189c0:	430a      	orrs	r2, r1
 80189c2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80189c4:	f7fb ffa8 	bl	8014918 <HAL_GetTick>
 80189c8:	0003      	movs	r3, r0
 80189ca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80189cc:	e00f      	b.n	80189ee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80189ce:	f7fb ffa3 	bl	8014918 <HAL_GetTick>
 80189d2:	0002      	movs	r2, r0
 80189d4:	69fb      	ldr	r3, [r7, #28]
 80189d6:	1ad3      	subs	r3, r2, r3
 80189d8:	2b19      	cmp	r3, #25
 80189da:	d908      	bls.n	80189ee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80189dc:	6a3b      	ldr	r3, [r7, #32]
 80189de:	2220      	movs	r2, #32
 80189e0:	4313      	orrs	r3, r2
 80189e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80189e4:	2327      	movs	r3, #39	@ 0x27
 80189e6:	18fb      	adds	r3, r7, r3
 80189e8:	2201      	movs	r2, #1
 80189ea:	701a      	strb	r2, [r3, #0]

              break;
 80189ec:	e006      	b.n	80189fc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	699b      	ldr	r3, [r3, #24]
 80189f4:	2220      	movs	r2, #32
 80189f6:	4013      	ands	r3, r2
 80189f8:	2b20      	cmp	r3, #32
 80189fa:	d1e8      	bne.n	80189ce <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	699b      	ldr	r3, [r3, #24]
 8018a02:	2220      	movs	r2, #32
 8018a04:	4013      	ands	r3, r2
 8018a06:	2b20      	cmp	r3, #32
 8018a08:	d004      	beq.n	8018a14 <I2C_IsErrorOccurred+0x100>
 8018a0a:	2327      	movs	r3, #39	@ 0x27
 8018a0c:	18fb      	adds	r3, r7, r3
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d09b      	beq.n	801894c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018a14:	2327      	movs	r3, #39	@ 0x27
 8018a16:	18fb      	adds	r3, r7, r3
 8018a18:	781b      	ldrb	r3, [r3, #0]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d103      	bne.n	8018a26 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	2220      	movs	r2, #32
 8018a24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018a26:	6a3b      	ldr	r3, [r7, #32]
 8018a28:	2204      	movs	r2, #4
 8018a2a:	4313      	orrs	r3, r2
 8018a2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018a2e:	2327      	movs	r3, #39	@ 0x27
 8018a30:	18fb      	adds	r3, r7, r3
 8018a32:	2201      	movs	r2, #1
 8018a34:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	699b      	ldr	r3, [r3, #24]
 8018a3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018a3e:	69ba      	ldr	r2, [r7, #24]
 8018a40:	2380      	movs	r3, #128	@ 0x80
 8018a42:	005b      	lsls	r3, r3, #1
 8018a44:	4013      	ands	r3, r2
 8018a46:	d00c      	beq.n	8018a62 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018a48:	6a3b      	ldr	r3, [r7, #32]
 8018a4a:	2201      	movs	r2, #1
 8018a4c:	4313      	orrs	r3, r2
 8018a4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	2280      	movs	r2, #128	@ 0x80
 8018a56:	0052      	lsls	r2, r2, #1
 8018a58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a5a:	2327      	movs	r3, #39	@ 0x27
 8018a5c:	18fb      	adds	r3, r7, r3
 8018a5e:	2201      	movs	r2, #1
 8018a60:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018a62:	69ba      	ldr	r2, [r7, #24]
 8018a64:	2380      	movs	r3, #128	@ 0x80
 8018a66:	00db      	lsls	r3, r3, #3
 8018a68:	4013      	ands	r3, r2
 8018a6a:	d00c      	beq.n	8018a86 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018a6c:	6a3b      	ldr	r3, [r7, #32]
 8018a6e:	2208      	movs	r2, #8
 8018a70:	4313      	orrs	r3, r2
 8018a72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	2280      	movs	r2, #128	@ 0x80
 8018a7a:	00d2      	lsls	r2, r2, #3
 8018a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a7e:	2327      	movs	r3, #39	@ 0x27
 8018a80:	18fb      	adds	r3, r7, r3
 8018a82:	2201      	movs	r2, #1
 8018a84:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018a86:	69ba      	ldr	r2, [r7, #24]
 8018a88:	2380      	movs	r3, #128	@ 0x80
 8018a8a:	009b      	lsls	r3, r3, #2
 8018a8c:	4013      	ands	r3, r2
 8018a8e:	d00c      	beq.n	8018aaa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018a90:	6a3b      	ldr	r3, [r7, #32]
 8018a92:	2202      	movs	r2, #2
 8018a94:	4313      	orrs	r3, r2
 8018a96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	2280      	movs	r2, #128	@ 0x80
 8018a9e:	0092      	lsls	r2, r2, #2
 8018aa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018aa2:	2327      	movs	r3, #39	@ 0x27
 8018aa4:	18fb      	adds	r3, r7, r3
 8018aa6:	2201      	movs	r2, #1
 8018aa8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018aaa:	2327      	movs	r3, #39	@ 0x27
 8018aac:	18fb      	adds	r3, r7, r3
 8018aae:	781b      	ldrb	r3, [r3, #0]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d01d      	beq.n	8018af0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	0018      	movs	r0, r3
 8018ab8:	f7ff fcd7 	bl	801846a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	685a      	ldr	r2, [r3, #4]
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	490e      	ldr	r1, [pc, #56]	@ (8018b00 <I2C_IsErrorOccurred+0x1ec>)
 8018ac8:	400a      	ands	r2, r1
 8018aca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018ad0:	6a3b      	ldr	r3, [r7, #32]
 8018ad2:	431a      	orrs	r2, r3
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	2241      	movs	r2, #65	@ 0x41
 8018adc:	2120      	movs	r1, #32
 8018ade:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	2242      	movs	r2, #66	@ 0x42
 8018ae4:	2100      	movs	r1, #0
 8018ae6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	2240      	movs	r2, #64	@ 0x40
 8018aec:	2100      	movs	r1, #0
 8018aee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018af0:	2327      	movs	r3, #39	@ 0x27
 8018af2:	18fb      	adds	r3, r7, r3
 8018af4:	781b      	ldrb	r3, [r3, #0]
}
 8018af6:	0018      	movs	r0, r3
 8018af8:	46bd      	mov	sp, r7
 8018afa:	b00a      	add	sp, #40	@ 0x28
 8018afc:	bd80      	pop	{r7, pc}
 8018afe:	46c0      	nop			@ (mov r8, r8)
 8018b00:	fe00e800 	.word	0xfe00e800

08018b04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018b04:	b590      	push	{r4, r7, lr}
 8018b06:	b087      	sub	sp, #28
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	60f8      	str	r0, [r7, #12]
 8018b0c:	0008      	movs	r0, r1
 8018b0e:	0011      	movs	r1, r2
 8018b10:	607b      	str	r3, [r7, #4]
 8018b12:	240a      	movs	r4, #10
 8018b14:	193b      	adds	r3, r7, r4
 8018b16:	1c02      	adds	r2, r0, #0
 8018b18:	801a      	strh	r2, [r3, #0]
 8018b1a:	2009      	movs	r0, #9
 8018b1c:	183b      	adds	r3, r7, r0
 8018b1e:	1c0a      	adds	r2, r1, #0
 8018b20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b22:	193b      	adds	r3, r7, r4
 8018b24:	881b      	ldrh	r3, [r3, #0]
 8018b26:	059b      	lsls	r3, r3, #22
 8018b28:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018b2a:	183b      	adds	r3, r7, r0
 8018b2c:	781b      	ldrb	r3, [r3, #0]
 8018b2e:	0419      	lsls	r1, r3, #16
 8018b30:	23ff      	movs	r3, #255	@ 0xff
 8018b32:	041b      	lsls	r3, r3, #16
 8018b34:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b36:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b3e:	4313      	orrs	r3, r2
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	085b      	lsrs	r3, r3, #1
 8018b44:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	685b      	ldr	r3, [r3, #4]
 8018b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018b4e:	0d51      	lsrs	r1, r2, #21
 8018b50:	2280      	movs	r2, #128	@ 0x80
 8018b52:	00d2      	lsls	r2, r2, #3
 8018b54:	400a      	ands	r2, r1
 8018b56:	4907      	ldr	r1, [pc, #28]	@ (8018b74 <I2C_TransferConfig+0x70>)
 8018b58:	430a      	orrs	r2, r1
 8018b5a:	43d2      	mvns	r2, r2
 8018b5c:	401a      	ands	r2, r3
 8018b5e:	0011      	movs	r1, r2
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	697a      	ldr	r2, [r7, #20]
 8018b66:	430a      	orrs	r2, r1
 8018b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018b6a:	46c0      	nop			@ (mov r8, r8)
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	b007      	add	sp, #28
 8018b70:	bd90      	pop	{r4, r7, pc}
 8018b72:	46c0      	nop			@ (mov r8, r8)
 8018b74:	03ff63ff 	.word	0x03ff63ff

08018b78 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
 8018b80:	000a      	movs	r2, r1
 8018b82:	1cbb      	adds	r3, r7, #2
 8018b84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018b86:	2300      	movs	r3, #0
 8018b88:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8018c88 <I2C_Enable_IRQ+0x110>)
 8018b90:	429a      	cmp	r2, r3
 8018b92:	d035      	beq.n	8018c00 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018b98:	4b3c      	ldr	r3, [pc, #240]	@ (8018c8c <I2C_Enable_IRQ+0x114>)
 8018b9a:	429a      	cmp	r2, r3
 8018b9c:	d030      	beq.n	8018c00 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8018c90 <I2C_Enable_IRQ+0x118>)
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d02b      	beq.n	8018c00 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018ba8:	1cbb      	adds	r3, r7, #2
 8018baa:	2200      	movs	r2, #0
 8018bac:	5e9b      	ldrsh	r3, [r3, r2]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	da03      	bge.n	8018bba <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	22b8      	movs	r2, #184	@ 0xb8
 8018bb6:	4313      	orrs	r3, r2
 8018bb8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018bba:	1cbb      	adds	r3, r7, #2
 8018bbc:	881b      	ldrh	r3, [r3, #0]
 8018bbe:	2201      	movs	r2, #1
 8018bc0:	4013      	ands	r3, r2
 8018bc2:	d003      	beq.n	8018bcc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	22f2      	movs	r2, #242	@ 0xf2
 8018bc8:	4313      	orrs	r3, r2
 8018bca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018bcc:	1cbb      	adds	r3, r7, #2
 8018bce:	881b      	ldrh	r3, [r3, #0]
 8018bd0:	2202      	movs	r2, #2
 8018bd2:	4013      	ands	r3, r2
 8018bd4:	d003      	beq.n	8018bde <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	22f4      	movs	r2, #244	@ 0xf4
 8018bda:	4313      	orrs	r3, r2
 8018bdc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018bde:	1cbb      	adds	r3, r7, #2
 8018be0:	881b      	ldrh	r3, [r3, #0]
 8018be2:	2b10      	cmp	r3, #16
 8018be4:	d103      	bne.n	8018bee <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	2290      	movs	r2, #144	@ 0x90
 8018bea:	4313      	orrs	r3, r2
 8018bec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018bee:	1cbb      	adds	r3, r7, #2
 8018bf0:	881b      	ldrh	r3, [r3, #0]
 8018bf2:	2b20      	cmp	r3, #32
 8018bf4:	d13c      	bne.n	8018c70 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	2220      	movs	r2, #32
 8018bfa:	4313      	orrs	r3, r2
 8018bfc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018bfe:	e037      	b.n	8018c70 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c00:	1cbb      	adds	r3, r7, #2
 8018c02:	2200      	movs	r2, #0
 8018c04:	5e9b      	ldrsh	r3, [r3, r2]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	da03      	bge.n	8018c12 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	22b8      	movs	r2, #184	@ 0xb8
 8018c0e:	4313      	orrs	r3, r2
 8018c10:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c12:	1cbb      	adds	r3, r7, #2
 8018c14:	881b      	ldrh	r3, [r3, #0]
 8018c16:	2201      	movs	r2, #1
 8018c18:	4013      	ands	r3, r2
 8018c1a:	d003      	beq.n	8018c24 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	22f2      	movs	r2, #242	@ 0xf2
 8018c20:	4313      	orrs	r3, r2
 8018c22:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c24:	1cbb      	adds	r3, r7, #2
 8018c26:	881b      	ldrh	r3, [r3, #0]
 8018c28:	2202      	movs	r2, #2
 8018c2a:	4013      	ands	r3, r2
 8018c2c:	d003      	beq.n	8018c36 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	22f4      	movs	r2, #244	@ 0xf4
 8018c32:	4313      	orrs	r3, r2
 8018c34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018c36:	1cbb      	adds	r3, r7, #2
 8018c38:	881b      	ldrh	r3, [r3, #0]
 8018c3a:	2b10      	cmp	r3, #16
 8018c3c:	d103      	bne.n	8018c46 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	2290      	movs	r2, #144	@ 0x90
 8018c42:	4313      	orrs	r3, r2
 8018c44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c46:	1cbb      	adds	r3, r7, #2
 8018c48:	881b      	ldrh	r3, [r3, #0]
 8018c4a:	2b20      	cmp	r3, #32
 8018c4c:	d103      	bne.n	8018c56 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	2260      	movs	r2, #96	@ 0x60
 8018c52:	4313      	orrs	r3, r2
 8018c54:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8018c90 <I2C_Enable_IRQ+0x118>)
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d007      	beq.n	8018c70 <I2C_Enable_IRQ+0xf8>
 8018c60:	1cbb      	adds	r3, r7, #2
 8018c62:	881b      	ldrh	r3, [r3, #0]
 8018c64:	2b40      	cmp	r3, #64	@ 0x40
 8018c66:	d103      	bne.n	8018c70 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	2240      	movs	r2, #64	@ 0x40
 8018c6c:	4313      	orrs	r3, r2
 8018c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	6819      	ldr	r1, [r3, #0]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	68fa      	ldr	r2, [r7, #12]
 8018c7c:	430a      	orrs	r2, r1
 8018c7e:	601a      	str	r2, [r3, #0]
}
 8018c80:	46c0      	nop			@ (mov r8, r8)
 8018c82:	46bd      	mov	sp, r7
 8018c84:	b004      	add	sp, #16
 8018c86:	bd80      	pop	{r7, pc}
 8018c88:	080172ed 	.word	0x080172ed
 8018c8c:	08017765 	.word	0x08017765
 8018c90:	08017505 	.word	0x08017505

08018c94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b084      	sub	sp, #16
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
 8018c9c:	000a      	movs	r2, r1
 8018c9e:	1cbb      	adds	r3, r7, #2
 8018ca0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018ca6:	1cbb      	adds	r3, r7, #2
 8018ca8:	881b      	ldrh	r3, [r3, #0]
 8018caa:	2201      	movs	r2, #1
 8018cac:	4013      	ands	r3, r2
 8018cae:	d010      	beq.n	8018cd2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	2242      	movs	r2, #66	@ 0x42
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2241      	movs	r2, #65	@ 0x41
 8018cbc:	5c9b      	ldrb	r3, [r3, r2]
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	001a      	movs	r2, r3
 8018cc2:	2328      	movs	r3, #40	@ 0x28
 8018cc4:	4013      	ands	r3, r2
 8018cc6:	2b28      	cmp	r3, #40	@ 0x28
 8018cc8:	d003      	beq.n	8018cd2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	22b0      	movs	r2, #176	@ 0xb0
 8018cce:	4313      	orrs	r3, r2
 8018cd0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018cd2:	1cbb      	adds	r3, r7, #2
 8018cd4:	881b      	ldrh	r3, [r3, #0]
 8018cd6:	2202      	movs	r2, #2
 8018cd8:	4013      	ands	r3, r2
 8018cda:	d010      	beq.n	8018cfe <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	2244      	movs	r2, #68	@ 0x44
 8018ce0:	4313      	orrs	r3, r2
 8018ce2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2241      	movs	r2, #65	@ 0x41
 8018ce8:	5c9b      	ldrb	r3, [r3, r2]
 8018cea:	b2db      	uxtb	r3, r3
 8018cec:	001a      	movs	r2, r3
 8018cee:	2328      	movs	r3, #40	@ 0x28
 8018cf0:	4013      	ands	r3, r2
 8018cf2:	2b28      	cmp	r3, #40	@ 0x28
 8018cf4:	d003      	beq.n	8018cfe <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	22b0      	movs	r2, #176	@ 0xb0
 8018cfa:	4313      	orrs	r3, r2
 8018cfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018cfe:	1cbb      	adds	r3, r7, #2
 8018d00:	2200      	movs	r2, #0
 8018d02:	5e9b      	ldrsh	r3, [r3, r2]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	da03      	bge.n	8018d10 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	22b8      	movs	r2, #184	@ 0xb8
 8018d0c:	4313      	orrs	r3, r2
 8018d0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018d10:	1cbb      	adds	r3, r7, #2
 8018d12:	881b      	ldrh	r3, [r3, #0]
 8018d14:	2b10      	cmp	r3, #16
 8018d16:	d103      	bne.n	8018d20 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	2290      	movs	r2, #144	@ 0x90
 8018d1c:	4313      	orrs	r3, r2
 8018d1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018d20:	1cbb      	adds	r3, r7, #2
 8018d22:	881b      	ldrh	r3, [r3, #0]
 8018d24:	2b20      	cmp	r3, #32
 8018d26:	d103      	bne.n	8018d30 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	2220      	movs	r2, #32
 8018d2c:	4313      	orrs	r3, r2
 8018d2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018d30:	1cbb      	adds	r3, r7, #2
 8018d32:	881b      	ldrh	r3, [r3, #0]
 8018d34:	2b40      	cmp	r3, #64	@ 0x40
 8018d36:	d103      	bne.n	8018d40 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	2240      	movs	r2, #64	@ 0x40
 8018d3c:	4313      	orrs	r3, r2
 8018d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	681a      	ldr	r2, [r3, #0]
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	43d9      	mvns	r1, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	400a      	ands	r2, r1
 8018d50:	601a      	str	r2, [r3, #0]
}
 8018d52:	46c0      	nop			@ (mov r8, r8)
 8018d54:	46bd      	mov	sp, r7
 8018d56:	b004      	add	sp, #16
 8018d58:	bd80      	pop	{r7, pc}
	...

08018d5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2241      	movs	r2, #65	@ 0x41
 8018d6a:	5c9b      	ldrb	r3, [r3, r2]
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	2b20      	cmp	r3, #32
 8018d70:	d138      	bne.n	8018de4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	2240      	movs	r2, #64	@ 0x40
 8018d76:	5c9b      	ldrb	r3, [r3, r2]
 8018d78:	2b01      	cmp	r3, #1
 8018d7a:	d101      	bne.n	8018d80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018d7c:	2302      	movs	r3, #2
 8018d7e:	e032      	b.n	8018de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2240      	movs	r2, #64	@ 0x40
 8018d84:	2101      	movs	r1, #1
 8018d86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2241      	movs	r2, #65	@ 0x41
 8018d8c:	2124      	movs	r1, #36	@ 0x24
 8018d8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	681a      	ldr	r2, [r3, #0]
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	2101      	movs	r1, #1
 8018d9c:	438a      	bics	r2, r1
 8018d9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	681a      	ldr	r2, [r3, #0]
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	4911      	ldr	r1, [pc, #68]	@ (8018df0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018dac:	400a      	ands	r2, r1
 8018dae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	6819      	ldr	r1, [r3, #0]
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	683a      	ldr	r2, [r7, #0]
 8018dbc:	430a      	orrs	r2, r1
 8018dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	681a      	ldr	r2, [r3, #0]
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	2101      	movs	r1, #1
 8018dcc:	430a      	orrs	r2, r1
 8018dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	2241      	movs	r2, #65	@ 0x41
 8018dd4:	2120      	movs	r1, #32
 8018dd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2240      	movs	r2, #64	@ 0x40
 8018ddc:	2100      	movs	r1, #0
 8018dde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018de0:	2300      	movs	r3, #0
 8018de2:	e000      	b.n	8018de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018de4:	2302      	movs	r3, #2
  }
}
 8018de6:	0018      	movs	r0, r3
 8018de8:	46bd      	mov	sp, r7
 8018dea:	b002      	add	sp, #8
 8018dec:	bd80      	pop	{r7, pc}
 8018dee:	46c0      	nop			@ (mov r8, r8)
 8018df0:	ffffefff 	.word	0xffffefff

08018df4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b084      	sub	sp, #16
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
 8018dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	2241      	movs	r2, #65	@ 0x41
 8018e02:	5c9b      	ldrb	r3, [r3, r2]
 8018e04:	b2db      	uxtb	r3, r3
 8018e06:	2b20      	cmp	r3, #32
 8018e08:	d139      	bne.n	8018e7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	2240      	movs	r2, #64	@ 0x40
 8018e0e:	5c9b      	ldrb	r3, [r3, r2]
 8018e10:	2b01      	cmp	r3, #1
 8018e12:	d101      	bne.n	8018e18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018e14:	2302      	movs	r3, #2
 8018e16:	e033      	b.n	8018e80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2240      	movs	r2, #64	@ 0x40
 8018e1c:	2101      	movs	r1, #1
 8018e1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2241      	movs	r2, #65	@ 0x41
 8018e24:	2124      	movs	r1, #36	@ 0x24
 8018e26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	681a      	ldr	r2, [r3, #0]
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	2101      	movs	r1, #1
 8018e34:	438a      	bics	r2, r1
 8018e36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	4a11      	ldr	r2, [pc, #68]	@ (8018e88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018e44:	4013      	ands	r3, r2
 8018e46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018e48:	683b      	ldr	r3, [r7, #0]
 8018e4a:	021b      	lsls	r3, r3, #8
 8018e4c:	68fa      	ldr	r2, [r7, #12]
 8018e4e:	4313      	orrs	r3, r2
 8018e50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	68fa      	ldr	r2, [r7, #12]
 8018e58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	681a      	ldr	r2, [r3, #0]
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	2101      	movs	r1, #1
 8018e66:	430a      	orrs	r2, r1
 8018e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	2241      	movs	r2, #65	@ 0x41
 8018e6e:	2120      	movs	r1, #32
 8018e70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	2240      	movs	r2, #64	@ 0x40
 8018e76:	2100      	movs	r1, #0
 8018e78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	e000      	b.n	8018e80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018e7e:	2302      	movs	r3, #2
  }
}
 8018e80:	0018      	movs	r0, r3
 8018e82:	46bd      	mov	sp, r7
 8018e84:	b004      	add	sp, #16
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	fffff0ff 	.word	0xfffff0ff

08018e8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b088      	sub	sp, #32
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d101      	bne.n	8018e9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018e9a:	2301      	movs	r3, #1
 8018e9c:	e0e1      	b.n	8019062 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	2235      	movs	r2, #53	@ 0x35
 8018ea2:	5c9b      	ldrb	r3, [r3, r2]
 8018ea4:	b2db      	uxtb	r3, r3
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d107      	bne.n	8018eba <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2234      	movs	r2, #52	@ 0x34
 8018eae:	2100      	movs	r1, #0
 8018eb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	0018      	movs	r0, r3
 8018eb6:	f7f3 fd79 	bl	800c9ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2235      	movs	r2, #53	@ 0x35
 8018ebe:	2102      	movs	r1, #2
 8018ec0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	69da      	ldr	r2, [r3, #28]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	4967      	ldr	r1, [pc, #412]	@ (801906c <HAL_I2S_Init+0x1e0>)
 8018ece:	400a      	ands	r2, r1
 8018ed0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	2202      	movs	r2, #2
 8018ed8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	695b      	ldr	r3, [r3, #20]
 8018ede:	2b02      	cmp	r3, #2
 8018ee0:	d073      	beq.n	8018fca <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	68db      	ldr	r3, [r3, #12]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d102      	bne.n	8018ef0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018eea:	2310      	movs	r3, #16
 8018eec:	617b      	str	r3, [r7, #20]
 8018eee:	e001      	b.n	8018ef4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018ef0:	2320      	movs	r3, #32
 8018ef2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	689b      	ldr	r3, [r3, #8]
 8018ef8:	2b20      	cmp	r3, #32
 8018efa:	d802      	bhi.n	8018f02 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018efc:	697b      	ldr	r3, [r7, #20]
 8018efe:	005b      	lsls	r3, r3, #1
 8018f00:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018f02:	f002 febd 	bl	801bc80 <HAL_RCC_GetSysClockFreq>
 8018f06:	0003      	movs	r3, r0
 8018f08:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	691a      	ldr	r2, [r3, #16]
 8018f0e:	2380      	movs	r3, #128	@ 0x80
 8018f10:	009b      	lsls	r3, r3, #2
 8018f12:	429a      	cmp	r2, r3
 8018f14:	d131      	bne.n	8018f7a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	68db      	ldr	r3, [r3, #12]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d016      	beq.n	8018f4c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	009b      	lsls	r3, r3, #2
 8018f22:	0019      	movs	r1, r3
 8018f24:	68f8      	ldr	r0, [r7, #12]
 8018f26:	f7e7 f93d 	bl	80001a4 <__udivsi3>
 8018f2a:	0003      	movs	r3, r0
 8018f2c:	001a      	movs	r2, r3
 8018f2e:	0013      	movs	r3, r2
 8018f30:	009b      	lsls	r3, r3, #2
 8018f32:	189b      	adds	r3, r3, r2
 8018f34:	005b      	lsls	r3, r3, #1
 8018f36:	001a      	movs	r2, r3
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	695b      	ldr	r3, [r3, #20]
 8018f3c:	0019      	movs	r1, r3
 8018f3e:	0010      	movs	r0, r2
 8018f40:	f7e7 f930 	bl	80001a4 <__udivsi3>
 8018f44:	0003      	movs	r3, r0
 8018f46:	3305      	adds	r3, #5
 8018f48:	613b      	str	r3, [r7, #16]
 8018f4a:	e02a      	b.n	8018fa2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f4c:	697b      	ldr	r3, [r7, #20]
 8018f4e:	00db      	lsls	r3, r3, #3
 8018f50:	0019      	movs	r1, r3
 8018f52:	68f8      	ldr	r0, [r7, #12]
 8018f54:	f7e7 f926 	bl	80001a4 <__udivsi3>
 8018f58:	0003      	movs	r3, r0
 8018f5a:	001a      	movs	r2, r3
 8018f5c:	0013      	movs	r3, r2
 8018f5e:	009b      	lsls	r3, r3, #2
 8018f60:	189b      	adds	r3, r3, r2
 8018f62:	005b      	lsls	r3, r3, #1
 8018f64:	001a      	movs	r2, r3
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	695b      	ldr	r3, [r3, #20]
 8018f6a:	0019      	movs	r1, r3
 8018f6c:	0010      	movs	r0, r2
 8018f6e:	f7e7 f919 	bl	80001a4 <__udivsi3>
 8018f72:	0003      	movs	r3, r0
 8018f74:	3305      	adds	r3, #5
 8018f76:	613b      	str	r3, [r7, #16]
 8018f78:	e013      	b.n	8018fa2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f7a:	6979      	ldr	r1, [r7, #20]
 8018f7c:	68f8      	ldr	r0, [r7, #12]
 8018f7e:	f7e7 f911 	bl	80001a4 <__udivsi3>
 8018f82:	0003      	movs	r3, r0
 8018f84:	001a      	movs	r2, r3
 8018f86:	0013      	movs	r3, r2
 8018f88:	009b      	lsls	r3, r3, #2
 8018f8a:	189b      	adds	r3, r3, r2
 8018f8c:	005b      	lsls	r3, r3, #1
 8018f8e:	001a      	movs	r2, r3
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	695b      	ldr	r3, [r3, #20]
 8018f94:	0019      	movs	r1, r3
 8018f96:	0010      	movs	r0, r2
 8018f98:	f7e7 f904 	bl	80001a4 <__udivsi3>
 8018f9c:	0003      	movs	r3, r0
 8018f9e:	3305      	adds	r3, #5
 8018fa0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8018fa2:	693b      	ldr	r3, [r7, #16]
 8018fa4:	210a      	movs	r1, #10
 8018fa6:	0018      	movs	r0, r3
 8018fa8:	f7e7 f8fc 	bl	80001a4 <__udivsi3>
 8018fac:	0003      	movs	r3, r0
 8018fae:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	2201      	movs	r2, #1
 8018fb4:	4013      	ands	r3, r2
 8018fb6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018fb8:	693a      	ldr	r2, [r7, #16]
 8018fba:	69bb      	ldr	r3, [r7, #24]
 8018fbc:	1ad3      	subs	r3, r2, r3
 8018fbe:	085b      	lsrs	r3, r3, #1
 8018fc0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8018fc2:	69bb      	ldr	r3, [r7, #24]
 8018fc4:	021b      	lsls	r3, r3, #8
 8018fc6:	61bb      	str	r3, [r7, #24]
 8018fc8:	e003      	b.n	8018fd2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018fca:	2302      	movs	r3, #2
 8018fcc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8018fd2:	69fb      	ldr	r3, [r7, #28]
 8018fd4:	2b01      	cmp	r3, #1
 8018fd6:	d902      	bls.n	8018fde <HAL_I2S_Init+0x152>
 8018fd8:	69fb      	ldr	r3, [r7, #28]
 8018fda:	2bff      	cmp	r3, #255	@ 0xff
 8018fdc:	d907      	bls.n	8018fee <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018fe2:	2210      	movs	r2, #16
 8018fe4:	431a      	orrs	r2, r3
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018fea:	2301      	movs	r3, #1
 8018fec:	e039      	b.n	8019062 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	691a      	ldr	r2, [r3, #16]
 8018ff2:	69bb      	ldr	r3, [r7, #24]
 8018ff4:	431a      	orrs	r2, r3
 8018ff6:	0011      	movs	r1, r2
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	69fa      	ldr	r2, [r7, #28]
 8018ffe:	430a      	orrs	r2, r1
 8019000:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	69db      	ldr	r3, [r3, #28]
 8019008:	4a18      	ldr	r2, [pc, #96]	@ (801906c <HAL_I2S_Init+0x1e0>)
 801900a:	401a      	ands	r2, r3
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	6859      	ldr	r1, [r3, #4]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	689b      	ldr	r3, [r3, #8]
 8019014:	4319      	orrs	r1, r3
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	68db      	ldr	r3, [r3, #12]
 801901a:	4319      	orrs	r1, r3
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	699b      	ldr	r3, [r3, #24]
 8019020:	430b      	orrs	r3, r1
 8019022:	431a      	orrs	r2, r3
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	2180      	movs	r1, #128	@ 0x80
 801902a:	0109      	lsls	r1, r1, #4
 801902c:	430a      	orrs	r2, r1
 801902e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	689b      	ldr	r3, [r3, #8]
 8019034:	2b30      	cmp	r3, #48	@ 0x30
 8019036:	d003      	beq.n	8019040 <HAL_I2S_Init+0x1b4>
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	689b      	ldr	r3, [r3, #8]
 801903c:	2bb0      	cmp	r3, #176	@ 0xb0
 801903e:	d108      	bne.n	8019052 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	69da      	ldr	r2, [r3, #28]
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	2180      	movs	r1, #128	@ 0x80
 801904c:	0149      	lsls	r1, r1, #5
 801904e:	430a      	orrs	r2, r1
 8019050:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	2200      	movs	r2, #0
 8019056:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	2235      	movs	r2, #53	@ 0x35
 801905c:	2101      	movs	r1, #1
 801905e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019060:	2300      	movs	r3, #0
}
 8019062:	0018      	movs	r0, r3
 8019064:	46bd      	mov	sp, r7
 8019066:	b008      	add	sp, #32
 8019068:	bd80      	pop	{r7, pc}
 801906a:	46c0      	nop			@ (mov r8, r8)
 801906c:	fffff040 	.word	0xfffff040

08019070 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b086      	sub	sp, #24
 8019074:	af00      	add	r7, sp, #0
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	1dbb      	adds	r3, r7, #6
 801907c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d003      	beq.n	801908c <HAL_I2S_Receive_DMA+0x1c>
 8019084:	1dbb      	adds	r3, r7, #6
 8019086:	881b      	ldrh	r3, [r3, #0]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d101      	bne.n	8019090 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 801908c:	2301      	movs	r3, #1
 801908e:	e0a6      	b.n	80191de <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	2234      	movs	r2, #52	@ 0x34
 8019094:	5c9b      	ldrb	r3, [r3, r2]
 8019096:	b2db      	uxtb	r3, r3
 8019098:	2b01      	cmp	r3, #1
 801909a:	d101      	bne.n	80190a0 <HAL_I2S_Receive_DMA+0x30>
 801909c:	2302      	movs	r3, #2
 801909e:	e09e      	b.n	80191de <HAL_I2S_Receive_DMA+0x16e>
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	2234      	movs	r2, #52	@ 0x34
 80190a4:	2101      	movs	r1, #1
 80190a6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	2235      	movs	r2, #53	@ 0x35
 80190ac:	5c9b      	ldrb	r3, [r3, r2]
 80190ae:	b2db      	uxtb	r3, r3
 80190b0:	2b01      	cmp	r3, #1
 80190b2:	d005      	beq.n	80190c0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	2234      	movs	r2, #52	@ 0x34
 80190b8:	2100      	movs	r1, #0
 80190ba:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80190bc:	2302      	movs	r3, #2
 80190be:	e08e      	b.n	80191de <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	2235      	movs	r2, #53	@ 0x35
 80190c4:	2104      	movs	r1, #4
 80190c6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	2200      	movs	r2, #0
 80190cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	68ba      	ldr	r2, [r7, #8]
 80190d2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	69db      	ldr	r3, [r3, #28]
 80190da:	2207      	movs	r2, #7
 80190dc:	4013      	ands	r3, r2
 80190de:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	2b03      	cmp	r3, #3
 80190e4:	d002      	beq.n	80190ec <HAL_I2S_Receive_DMA+0x7c>
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	2b05      	cmp	r3, #5
 80190ea:	d10c      	bne.n	8019106 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80190ec:	1dbb      	adds	r3, r7, #6
 80190ee:	881b      	ldrh	r3, [r3, #0]
 80190f0:	18db      	adds	r3, r3, r3
 80190f2:	b29a      	uxth	r2, r3
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80190f8:	1dbb      	adds	r3, r7, #6
 80190fa:	881b      	ldrh	r3, [r3, #0]
 80190fc:	18db      	adds	r3, r3, r3
 80190fe:	b29a      	uxth	r2, r3
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8019104:	e007      	b.n	8019116 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	1dba      	adds	r2, r7, #6
 801910a:	8812      	ldrh	r2, [r2, #0]
 801910c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	1dba      	adds	r2, r7, #6
 8019112:	8812      	ldrh	r2, [r2, #0]
 8019114:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801911a:	4a33      	ldr	r2, [pc, #204]	@ (80191e8 <HAL_I2S_Receive_DMA+0x178>)
 801911c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019122:	4a32      	ldr	r2, [pc, #200]	@ (80191ec <HAL_I2S_Receive_DMA+0x17c>)
 8019124:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801912a:	4a31      	ldr	r2, [pc, #196]	@ (80191f0 <HAL_I2S_Receive_DMA+0x180>)
 801912c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	69da      	ldr	r2, [r3, #28]
 8019134:	23c0      	movs	r3, #192	@ 0xc0
 8019136:	009b      	lsls	r3, r3, #2
 8019138:	401a      	ands	r2, r3
 801913a:	23c0      	movs	r3, #192	@ 0xc0
 801913c:	009b      	lsls	r3, r3, #2
 801913e:	429a      	cmp	r2, r3
 8019140:	d10a      	bne.n	8019158 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8019142:	2300      	movs	r3, #0
 8019144:	613b      	str	r3, [r7, #16]
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	68db      	ldr	r3, [r3, #12]
 801914c:	613b      	str	r3, [r7, #16]
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	689b      	ldr	r3, [r3, #8]
 8019154:	613b      	str	r3, [r7, #16]
 8019156:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	330c      	adds	r3, #12
 8019162:	0019      	movs	r1, r3
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019168:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801916e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019170:	f7fc f906 	bl	8015380 <HAL_DMA_Start_IT>
 8019174:	1e03      	subs	r3, r0, #0
 8019176:	d00f      	beq.n	8019198 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801917c:	2208      	movs	r2, #8
 801917e:	431a      	orrs	r2, r3
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	2235      	movs	r2, #53	@ 0x35
 8019188:	2101      	movs	r1, #1
 801918a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	2234      	movs	r2, #52	@ 0x34
 8019190:	2100      	movs	r1, #0
 8019192:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8019194:	2301      	movs	r3, #1
 8019196:	e022      	b.n	80191de <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	69da      	ldr	r2, [r3, #28]
 801919e:	2380      	movs	r3, #128	@ 0x80
 80191a0:	00db      	lsls	r3, r3, #3
 80191a2:	4013      	ands	r3, r2
 80191a4:	d108      	bne.n	80191b8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	69da      	ldr	r2, [r3, #28]
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2180      	movs	r1, #128	@ 0x80
 80191b2:	00c9      	lsls	r1, r1, #3
 80191b4:	430a      	orrs	r2, r1
 80191b6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	2201      	movs	r2, #1
 80191c0:	4013      	ands	r3, r2
 80191c2:	d107      	bne.n	80191d4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	685a      	ldr	r2, [r3, #4]
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	2101      	movs	r1, #1
 80191d0:	430a      	orrs	r2, r1
 80191d2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	2234      	movs	r2, #52	@ 0x34
 80191d8:	2100      	movs	r1, #0
 80191da:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80191dc:	2300      	movs	r3, #0
}
 80191de:	0018      	movs	r0, r3
 80191e0:	46bd      	mov	sp, r7
 80191e2:	b006      	add	sp, #24
 80191e4:	bd80      	pop	{r7, pc}
 80191e6:	46c0      	nop			@ (mov r8, r8)
 80191e8:	080193d1 	.word	0x080193d1
 80191ec:	0801938d 	.word	0x0801938d
 80191f0:	080193ef 	.word	0x080193ef

080191f4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b086      	sub	sp, #24
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80191fc:	2317      	movs	r3, #23
 80191fe:	18fb      	adds	r3, r7, r3
 8019200:	2200      	movs	r2, #0
 8019202:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	685a      	ldr	r2, [r3, #4]
 8019208:	2380      	movs	r3, #128	@ 0x80
 801920a:	009b      	lsls	r3, r3, #2
 801920c:	429a      	cmp	r2, r3
 801920e:	d003      	beq.n	8019218 <HAL_I2S_DMAStop+0x24>
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	685b      	ldr	r3, [r3, #4]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d158      	bne.n	80192ca <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801921c:	2b00      	cmp	r3, #0
 801921e:	d010      	beq.n	8019242 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019224:	0018      	movs	r0, r3
 8019226:	f7fc f911 	bl	801544c <HAL_DMA_Abort>
 801922a:	1e03      	subs	r3, r0, #0
 801922c:	d009      	beq.n	8019242 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019232:	2208      	movs	r2, #8
 8019234:	431a      	orrs	r2, r3
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801923a:	2317      	movs	r3, #23
 801923c:	18fb      	adds	r3, r7, r3
 801923e:	2201      	movs	r2, #1
 8019240:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	2364      	movs	r3, #100	@ 0x64
 8019246:	2201      	movs	r2, #1
 8019248:	2102      	movs	r1, #2
 801924a:	f000 f8f7 	bl	801943c <I2S_WaitFlagStateUntilTimeout>
 801924e:	1e03      	subs	r3, r0, #0
 8019250:	d00d      	beq.n	801926e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019256:	2201      	movs	r2, #1
 8019258:	431a      	orrs	r2, r3
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2235      	movs	r2, #53	@ 0x35
 8019262:	2101      	movs	r1, #1
 8019264:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8019266:	2317      	movs	r3, #23
 8019268:	18fb      	adds	r3, r7, r3
 801926a:	2201      	movs	r2, #1
 801926c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801926e:	6878      	ldr	r0, [r7, #4]
 8019270:	2364      	movs	r3, #100	@ 0x64
 8019272:	2200      	movs	r2, #0
 8019274:	2180      	movs	r1, #128	@ 0x80
 8019276:	f000 f8e1 	bl	801943c <I2S_WaitFlagStateUntilTimeout>
 801927a:	1e03      	subs	r3, r0, #0
 801927c:	d00d      	beq.n	801929a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019282:	2201      	movs	r2, #1
 8019284:	431a      	orrs	r2, r3
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	2235      	movs	r2, #53	@ 0x35
 801928e:	2101      	movs	r1, #1
 8019290:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8019292:	2317      	movs	r3, #23
 8019294:	18fb      	adds	r3, r7, r3
 8019296:	2201      	movs	r2, #1
 8019298:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	69da      	ldr	r2, [r3, #28]
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	4938      	ldr	r1, [pc, #224]	@ (8019388 <HAL_I2S_DMAStop+0x194>)
 80192a6:	400a      	ands	r2, r1
 80192a8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80192aa:	2300      	movs	r3, #0
 80192ac:	613b      	str	r3, [r7, #16]
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	689b      	ldr	r3, [r3, #8]
 80192b4:	613b      	str	r3, [r7, #16]
 80192b6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	685a      	ldr	r2, [r3, #4]
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	2102      	movs	r1, #2
 80192c4:	438a      	bics	r2, r1
 80192c6:	605a      	str	r2, [r3, #4]
 80192c8:	e053      	b.n	8019372 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	685a      	ldr	r2, [r3, #4]
 80192ce:	23c0      	movs	r3, #192	@ 0xc0
 80192d0:	009b      	lsls	r3, r3, #2
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d005      	beq.n	80192e2 <HAL_I2S_DMAStop+0xee>
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	685a      	ldr	r2, [r3, #4]
 80192da:	2380      	movs	r3, #128	@ 0x80
 80192dc:	005b      	lsls	r3, r3, #1
 80192de:	429a      	cmp	r2, r3
 80192e0:	d147      	bne.n	8019372 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d010      	beq.n	801930c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192ee:	0018      	movs	r0, r3
 80192f0:	f7fc f8ac 	bl	801544c <HAL_DMA_Abort>
 80192f4:	1e03      	subs	r3, r0, #0
 80192f6:	d009      	beq.n	801930c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192fc:	2208      	movs	r2, #8
 80192fe:	431a      	orrs	r2, r3
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019304:	2317      	movs	r3, #23
 8019306:	18fb      	adds	r3, r7, r3
 8019308:	2201      	movs	r2, #1
 801930a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	69da      	ldr	r2, [r3, #28]
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	491c      	ldr	r1, [pc, #112]	@ (8019388 <HAL_I2S_DMAStop+0x194>)
 8019318:	400a      	ands	r2, r1
 801931a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801931c:	2300      	movs	r3, #0
 801931e:	60fb      	str	r3, [r7, #12]
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	68db      	ldr	r3, [r3, #12]
 8019326:	60fb      	str	r3, [r7, #12]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	689b      	ldr	r3, [r3, #8]
 801932e:	60fb      	str	r3, [r7, #12]
 8019330:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	685a      	ldr	r2, [r3, #4]
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	2101      	movs	r1, #1
 801933e:	438a      	bics	r2, r1
 8019340:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	685a      	ldr	r2, [r3, #4]
 8019346:	2380      	movs	r3, #128	@ 0x80
 8019348:	005b      	lsls	r3, r3, #1
 801934a:	429a      	cmp	r2, r3
 801934c:	d10e      	bne.n	801936c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019352:	2240      	movs	r2, #64	@ 0x40
 8019354:	431a      	orrs	r2, r3
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	2235      	movs	r2, #53	@ 0x35
 801935e:	2101      	movs	r1, #1
 8019360:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8019362:	2317      	movs	r3, #23
 8019364:	18fb      	adds	r3, r7, r3
 8019366:	2201      	movs	r2, #1
 8019368:	701a      	strb	r2, [r3, #0]
 801936a:	e002      	b.n	8019372 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	2235      	movs	r2, #53	@ 0x35
 8019376:	2101      	movs	r1, #1
 8019378:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801937a:	2317      	movs	r3, #23
 801937c:	18fb      	adds	r3, r7, r3
 801937e:	781b      	ldrb	r3, [r3, #0]
}
 8019380:	0018      	movs	r0, r3
 8019382:	46bd      	mov	sp, r7
 8019384:	b006      	add	sp, #24
 8019386:	bd80      	pop	{r7, pc}
 8019388:	fffffbff 	.word	0xfffffbff

0801938c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b084      	sub	sp, #16
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019398:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	69db      	ldr	r3, [r3, #28]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d10e      	bne.n	80193c0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	685a      	ldr	r2, [r3, #4]
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	2101      	movs	r1, #1
 80193ae:	438a      	bics	r2, r1
 80193b0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	2200      	movs	r2, #0
 80193b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	2235      	movs	r2, #53	@ 0x35
 80193bc:	2101      	movs	r1, #1
 80193be:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	0018      	movs	r0, r3
 80193c4:	f7f8 fb9a 	bl	8011afc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80193c8:	46c0      	nop			@ (mov r8, r8)
 80193ca:	46bd      	mov	sp, r7
 80193cc:	b004      	add	sp, #16
 80193ce:	bd80      	pop	{r7, pc}

080193d0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193dc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	0018      	movs	r0, r3
 80193e2:	f7f8 fb79 	bl	8011ad8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80193e6:	46c0      	nop			@ (mov r8, r8)
 80193e8:	46bd      	mov	sp, r7
 80193ea:	b004      	add	sp, #16
 80193ec:	bd80      	pop	{r7, pc}

080193ee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80193ee:	b580      	push	{r7, lr}
 80193f0:	b084      	sub	sp, #16
 80193f2:	af00      	add	r7, sp, #0
 80193f4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193fa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	685a      	ldr	r2, [r3, #4]
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	2103      	movs	r1, #3
 8019408:	438a      	bics	r2, r1
 801940a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	2200      	movs	r2, #0
 8019410:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	2200      	movs	r2, #0
 8019416:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	2235      	movs	r2, #53	@ 0x35
 801941c:	2101      	movs	r1, #1
 801941e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019424:	2208      	movs	r2, #8
 8019426:	431a      	orrs	r2, r3
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	0018      	movs	r0, r3
 8019430:	f7f8 fbb2 	bl	8011b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019434:	46c0      	nop			@ (mov r8, r8)
 8019436:	46bd      	mov	sp, r7
 8019438:	b004      	add	sp, #16
 801943a:	bd80      	pop	{r7, pc}

0801943c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b086      	sub	sp, #24
 8019440:	af00      	add	r7, sp, #0
 8019442:	60f8      	str	r0, [r7, #12]
 8019444:	60b9      	str	r1, [r7, #8]
 8019446:	603b      	str	r3, [r7, #0]
 8019448:	1dfb      	adds	r3, r7, #7
 801944a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801944c:	f7fb fa64 	bl	8014918 <HAL_GetTick>
 8019450:	0003      	movs	r3, r0
 8019452:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8019454:	e017      	b.n	8019486 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019456:	683b      	ldr	r3, [r7, #0]
 8019458:	3301      	adds	r3, #1
 801945a:	d014      	beq.n	8019486 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801945c:	f7fb fa5c 	bl	8014918 <HAL_GetTick>
 8019460:	0002      	movs	r2, r0
 8019462:	697b      	ldr	r3, [r7, #20]
 8019464:	1ad3      	subs	r3, r2, r3
 8019466:	683a      	ldr	r2, [r7, #0]
 8019468:	429a      	cmp	r2, r3
 801946a:	d902      	bls.n	8019472 <I2S_WaitFlagStateUntilTimeout+0x36>
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d109      	bne.n	8019486 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	2235      	movs	r2, #53	@ 0x35
 8019476:	2101      	movs	r1, #1
 8019478:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	2234      	movs	r2, #52	@ 0x34
 801947e:	2100      	movs	r1, #0
 8019480:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019482:	2303      	movs	r3, #3
 8019484:	e00f      	b.n	80194a6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	689b      	ldr	r3, [r3, #8]
 801948c:	68ba      	ldr	r2, [r7, #8]
 801948e:	4013      	ands	r3, r2
 8019490:	68ba      	ldr	r2, [r7, #8]
 8019492:	1ad3      	subs	r3, r2, r3
 8019494:	425a      	negs	r2, r3
 8019496:	4153      	adcs	r3, r2
 8019498:	b2db      	uxtb	r3, r3
 801949a:	001a      	movs	r2, r3
 801949c:	1dfb      	adds	r3, r7, #7
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	429a      	cmp	r2, r3
 80194a2:	d1d8      	bne.n	8019456 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80194a4:	2300      	movs	r3, #0
}
 80194a6:	0018      	movs	r0, r3
 80194a8:	46bd      	mov	sp, r7
 80194aa:	b006      	add	sp, #24
 80194ac:	bd80      	pop	{r7, pc}
	...

080194b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80194b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194b2:	b08b      	sub	sp, #44	@ 0x2c
 80194b4:	af06      	add	r7, sp, #24
 80194b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d101      	bne.n	80194c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80194be:	2301      	movs	r3, #1
 80194c0:	e0f0      	b.n	80196a4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	4a79      	ldr	r2, [pc, #484]	@ (80196ac <HAL_PCD_Init+0x1fc>)
 80194c6:	5c9b      	ldrb	r3, [r3, r2]
 80194c8:	b2db      	uxtb	r3, r3
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d108      	bne.n	80194e0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80194ce:	687a      	ldr	r2, [r7, #4]
 80194d0:	23aa      	movs	r3, #170	@ 0xaa
 80194d2:	009b      	lsls	r3, r3, #2
 80194d4:	2100      	movs	r1, #0
 80194d6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	0018      	movs	r0, r3
 80194dc:	f009 ff60 	bl	80233a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	4a72      	ldr	r2, [pc, #456]	@ (80196ac <HAL_PCD_Init+0x1fc>)
 80194e4:	2103      	movs	r1, #3
 80194e6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	0018      	movs	r0, r3
 80194ee:	f005 ff05 	bl	801f2fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80194f2:	230f      	movs	r3, #15
 80194f4:	18fb      	adds	r3, r7, r3
 80194f6:	2200      	movs	r2, #0
 80194f8:	701a      	strb	r2, [r3, #0]
 80194fa:	e049      	b.n	8019590 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80194fc:	200f      	movs	r0, #15
 80194fe:	183b      	adds	r3, r7, r0
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	6879      	ldr	r1, [r7, #4]
 8019504:	1c5a      	adds	r2, r3, #1
 8019506:	0013      	movs	r3, r2
 8019508:	009b      	lsls	r3, r3, #2
 801950a:	189b      	adds	r3, r3, r2
 801950c:	00db      	lsls	r3, r3, #3
 801950e:	18cb      	adds	r3, r1, r3
 8019510:	3301      	adds	r3, #1
 8019512:	2201      	movs	r2, #1
 8019514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019516:	183b      	adds	r3, r7, r0
 8019518:	781b      	ldrb	r3, [r3, #0]
 801951a:	6879      	ldr	r1, [r7, #4]
 801951c:	1c5a      	adds	r2, r3, #1
 801951e:	0013      	movs	r3, r2
 8019520:	009b      	lsls	r3, r3, #2
 8019522:	189b      	adds	r3, r3, r2
 8019524:	00db      	lsls	r3, r3, #3
 8019526:	183a      	adds	r2, r7, r0
 8019528:	7812      	ldrb	r2, [r2, #0]
 801952a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801952c:	183b      	adds	r3, r7, r0
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	6879      	ldr	r1, [r7, #4]
 8019532:	1c5a      	adds	r2, r3, #1
 8019534:	0013      	movs	r3, r2
 8019536:	009b      	lsls	r3, r3, #2
 8019538:	189b      	adds	r3, r3, r2
 801953a:	00db      	lsls	r3, r3, #3
 801953c:	18cb      	adds	r3, r1, r3
 801953e:	3303      	adds	r3, #3
 8019540:	2200      	movs	r2, #0
 8019542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019544:	183b      	adds	r3, r7, r0
 8019546:	781a      	ldrb	r2, [r3, #0]
 8019548:	6879      	ldr	r1, [r7, #4]
 801954a:	0013      	movs	r3, r2
 801954c:	009b      	lsls	r3, r3, #2
 801954e:	189b      	adds	r3, r3, r2
 8019550:	00db      	lsls	r3, r3, #3
 8019552:	18cb      	adds	r3, r1, r3
 8019554:	3338      	adds	r3, #56	@ 0x38
 8019556:	2200      	movs	r2, #0
 8019558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801955a:	183b      	adds	r3, r7, r0
 801955c:	781a      	ldrb	r2, [r3, #0]
 801955e:	6879      	ldr	r1, [r7, #4]
 8019560:	0013      	movs	r3, r2
 8019562:	009b      	lsls	r3, r3, #2
 8019564:	189b      	adds	r3, r3, r2
 8019566:	00db      	lsls	r3, r3, #3
 8019568:	18cb      	adds	r3, r1, r3
 801956a:	333c      	adds	r3, #60	@ 0x3c
 801956c:	2200      	movs	r2, #0
 801956e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019570:	183b      	adds	r3, r7, r0
 8019572:	781a      	ldrb	r2, [r3, #0]
 8019574:	6879      	ldr	r1, [r7, #4]
 8019576:	0013      	movs	r3, r2
 8019578:	009b      	lsls	r3, r3, #2
 801957a:	189b      	adds	r3, r3, r2
 801957c:	00db      	lsls	r3, r3, #3
 801957e:	18cb      	adds	r3, r1, r3
 8019580:	3340      	adds	r3, #64	@ 0x40
 8019582:	2200      	movs	r2, #0
 8019584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019586:	183b      	adds	r3, r7, r0
 8019588:	781a      	ldrb	r2, [r3, #0]
 801958a:	183b      	adds	r3, r7, r0
 801958c:	3201      	adds	r2, #1
 801958e:	701a      	strb	r2, [r3, #0]
 8019590:	210f      	movs	r1, #15
 8019592:	187b      	adds	r3, r7, r1
 8019594:	781a      	ldrb	r2, [r3, #0]
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	685b      	ldr	r3, [r3, #4]
 801959a:	429a      	cmp	r2, r3
 801959c:	d3ae      	bcc.n	80194fc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801959e:	187b      	adds	r3, r7, r1
 80195a0:	2200      	movs	r2, #0
 80195a2:	701a      	strb	r2, [r3, #0]
 80195a4:	e056      	b.n	8019654 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80195a6:	240f      	movs	r4, #15
 80195a8:	193b      	adds	r3, r7, r4
 80195aa:	781a      	ldrb	r2, [r3, #0]
 80195ac:	6878      	ldr	r0, [r7, #4]
 80195ae:	236a      	movs	r3, #106	@ 0x6a
 80195b0:	33ff      	adds	r3, #255	@ 0xff
 80195b2:	0019      	movs	r1, r3
 80195b4:	0013      	movs	r3, r2
 80195b6:	009b      	lsls	r3, r3, #2
 80195b8:	189b      	adds	r3, r3, r2
 80195ba:	00db      	lsls	r3, r3, #3
 80195bc:	18c3      	adds	r3, r0, r3
 80195be:	185b      	adds	r3, r3, r1
 80195c0:	2200      	movs	r2, #0
 80195c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80195c4:	193b      	adds	r3, r7, r4
 80195c6:	781a      	ldrb	r2, [r3, #0]
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	23b4      	movs	r3, #180	@ 0xb4
 80195cc:	0059      	lsls	r1, r3, #1
 80195ce:	0013      	movs	r3, r2
 80195d0:	009b      	lsls	r3, r3, #2
 80195d2:	189b      	adds	r3, r3, r2
 80195d4:	00db      	lsls	r3, r3, #3
 80195d6:	18c3      	adds	r3, r0, r3
 80195d8:	185b      	adds	r3, r3, r1
 80195da:	193a      	adds	r2, r7, r4
 80195dc:	7812      	ldrb	r2, [r2, #0]
 80195de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80195e0:	193b      	adds	r3, r7, r4
 80195e2:	781a      	ldrb	r2, [r3, #0]
 80195e4:	6878      	ldr	r0, [r7, #4]
 80195e6:	236c      	movs	r3, #108	@ 0x6c
 80195e8:	33ff      	adds	r3, #255	@ 0xff
 80195ea:	0019      	movs	r1, r3
 80195ec:	0013      	movs	r3, r2
 80195ee:	009b      	lsls	r3, r3, #2
 80195f0:	189b      	adds	r3, r3, r2
 80195f2:	00db      	lsls	r3, r3, #3
 80195f4:	18c3      	adds	r3, r0, r3
 80195f6:	185b      	adds	r3, r3, r1
 80195f8:	2200      	movs	r2, #0
 80195fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80195fc:	193b      	adds	r3, r7, r4
 80195fe:	781a      	ldrb	r2, [r3, #0]
 8019600:	6878      	ldr	r0, [r7, #4]
 8019602:	23bc      	movs	r3, #188	@ 0xbc
 8019604:	0059      	lsls	r1, r3, #1
 8019606:	0013      	movs	r3, r2
 8019608:	009b      	lsls	r3, r3, #2
 801960a:	189b      	adds	r3, r3, r2
 801960c:	00db      	lsls	r3, r3, #3
 801960e:	18c3      	adds	r3, r0, r3
 8019610:	185b      	adds	r3, r3, r1
 8019612:	2200      	movs	r2, #0
 8019614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019616:	193b      	adds	r3, r7, r4
 8019618:	781a      	ldrb	r2, [r3, #0]
 801961a:	6878      	ldr	r0, [r7, #4]
 801961c:	23be      	movs	r3, #190	@ 0xbe
 801961e:	0059      	lsls	r1, r3, #1
 8019620:	0013      	movs	r3, r2
 8019622:	009b      	lsls	r3, r3, #2
 8019624:	189b      	adds	r3, r3, r2
 8019626:	00db      	lsls	r3, r3, #3
 8019628:	18c3      	adds	r3, r0, r3
 801962a:	185b      	adds	r3, r3, r1
 801962c:	2200      	movs	r2, #0
 801962e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019630:	193b      	adds	r3, r7, r4
 8019632:	781a      	ldrb	r2, [r3, #0]
 8019634:	6878      	ldr	r0, [r7, #4]
 8019636:	23c0      	movs	r3, #192	@ 0xc0
 8019638:	0059      	lsls	r1, r3, #1
 801963a:	0013      	movs	r3, r2
 801963c:	009b      	lsls	r3, r3, #2
 801963e:	189b      	adds	r3, r3, r2
 8019640:	00db      	lsls	r3, r3, #3
 8019642:	18c3      	adds	r3, r0, r3
 8019644:	185b      	adds	r3, r3, r1
 8019646:	2200      	movs	r2, #0
 8019648:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801964a:	193b      	adds	r3, r7, r4
 801964c:	781a      	ldrb	r2, [r3, #0]
 801964e:	193b      	adds	r3, r7, r4
 8019650:	3201      	adds	r2, #1
 8019652:	701a      	strb	r2, [r3, #0]
 8019654:	230f      	movs	r3, #15
 8019656:	18fb      	adds	r3, r7, r3
 8019658:	781a      	ldrb	r2, [r3, #0]
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	685b      	ldr	r3, [r3, #4]
 801965e:	429a      	cmp	r2, r3
 8019660:	d3a1      	bcc.n	80195a6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	6818      	ldr	r0, [r3, #0]
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	466a      	mov	r2, sp
 801966a:	0011      	movs	r1, r2
 801966c:	001a      	movs	r2, r3
 801966e:	3210      	adds	r2, #16
 8019670:	ca70      	ldmia	r2!, {r4, r5, r6}
 8019672:	c170      	stmia	r1!, {r4, r5, r6}
 8019674:	ca30      	ldmia	r2!, {r4, r5}
 8019676:	c130      	stmia	r1!, {r4, r5}
 8019678:	6859      	ldr	r1, [r3, #4]
 801967a:	689a      	ldr	r2, [r3, #8]
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	f005 fe57 	bl	801f330 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2224      	movs	r2, #36	@ 0x24
 8019686:	2100      	movs	r1, #0
 8019688:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	4a07      	ldr	r2, [pc, #28]	@ (80196ac <HAL_PCD_Init+0x1fc>)
 801968e:	2101      	movs	r1, #1
 8019690:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	69db      	ldr	r3, [r3, #28]
 8019696:	2b01      	cmp	r3, #1
 8019698:	d103      	bne.n	80196a2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	0018      	movs	r0, r3
 801969e:	f001 fd23 	bl	801b0e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80196a2:	2300      	movs	r3, #0
}
 80196a4:	0018      	movs	r0, r3
 80196a6:	46bd      	mov	sp, r7
 80196a8:	b005      	add	sp, #20
 80196aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196ac:	000002a9 	.word	0x000002a9

080196b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b082      	sub	sp, #8
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80196b8:	687a      	ldr	r2, [r7, #4]
 80196ba:	23aa      	movs	r3, #170	@ 0xaa
 80196bc:	009b      	lsls	r3, r3, #2
 80196be:	5cd3      	ldrb	r3, [r2, r3]
 80196c0:	2b01      	cmp	r3, #1
 80196c2:	d101      	bne.n	80196c8 <HAL_PCD_Start+0x18>
 80196c4:	2302      	movs	r3, #2
 80196c6:	e014      	b.n	80196f2 <HAL_PCD_Start+0x42>
 80196c8:	687a      	ldr	r2, [r7, #4]
 80196ca:	23aa      	movs	r3, #170	@ 0xaa
 80196cc:	009b      	lsls	r3, r3, #2
 80196ce:	2101      	movs	r1, #1
 80196d0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	0018      	movs	r0, r3
 80196d8:	f005 fdfa 	bl	801f2d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	0018      	movs	r0, r3
 80196e2:	f007 fdfd 	bl	80212e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80196e6:	687a      	ldr	r2, [r7, #4]
 80196e8:	23aa      	movs	r3, #170	@ 0xaa
 80196ea:	009b      	lsls	r3, r3, #2
 80196ec:	2100      	movs	r1, #0
 80196ee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80196f0:	2300      	movs	r3, #0
}
 80196f2:	0018      	movs	r0, r3
 80196f4:	46bd      	mov	sp, r7
 80196f6:	b002      	add	sp, #8
 80196f8:	bd80      	pop	{r7, pc}
	...

080196fc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b084      	sub	sp, #16
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	0018      	movs	r0, r3
 801970a:	f007 fdff 	bl	802130c <USB_ReadInterrupts>
 801970e:	0003      	movs	r3, r0
 8019710:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8019712:	68fa      	ldr	r2, [r7, #12]
 8019714:	2380      	movs	r3, #128	@ 0x80
 8019716:	021b      	lsls	r3, r3, #8
 8019718:	4013      	ands	r3, r2
 801971a:	d004      	beq.n	8019726 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	0018      	movs	r0, r3
 8019720:	f000 fb62 	bl	8019de8 <PCD_EP_ISR_Handler>

    return;
 8019724:	e11d      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8019726:	68fa      	ldr	r2, [r7, #12]
 8019728:	2380      	movs	r3, #128	@ 0x80
 801972a:	00db      	lsls	r3, r3, #3
 801972c:	4013      	ands	r3, r2
 801972e:	d015      	beq.n	801975c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	2244      	movs	r2, #68	@ 0x44
 8019736:	5a9b      	ldrh	r3, [r3, r2]
 8019738:	b29a      	uxth	r2, r3
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	498a      	ldr	r1, [pc, #552]	@ (8019968 <HAL_PCD_IRQHandler+0x26c>)
 8019740:	400a      	ands	r2, r1
 8019742:	b291      	uxth	r1, r2
 8019744:	2244      	movs	r2, #68	@ 0x44
 8019746:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	0018      	movs	r0, r3
 801974c:	f009 feab 	bl	80234a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	2100      	movs	r1, #0
 8019754:	0018      	movs	r0, r3
 8019756:	f000 f915 	bl	8019984 <HAL_PCD_SetAddress>

    return;
 801975a:	e102      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801975c:	68fa      	ldr	r2, [r7, #12]
 801975e:	2380      	movs	r3, #128	@ 0x80
 8019760:	01db      	lsls	r3, r3, #7
 8019762:	4013      	ands	r3, r2
 8019764:	d00c      	beq.n	8019780 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	2244      	movs	r2, #68	@ 0x44
 801976c:	5a9b      	ldrh	r3, [r3, r2]
 801976e:	b29a      	uxth	r2, r3
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	497d      	ldr	r1, [pc, #500]	@ (801996c <HAL_PCD_IRQHandler+0x270>)
 8019776:	400a      	ands	r2, r1
 8019778:	b291      	uxth	r1, r2
 801977a:	2244      	movs	r2, #68	@ 0x44
 801977c:	5299      	strh	r1, [r3, r2]

    return;
 801977e:	e0f0      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8019780:	68fa      	ldr	r2, [r7, #12]
 8019782:	2380      	movs	r3, #128	@ 0x80
 8019784:	019b      	lsls	r3, r3, #6
 8019786:	4013      	ands	r3, r2
 8019788:	d00c      	beq.n	80197a4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	2244      	movs	r2, #68	@ 0x44
 8019790:	5a9b      	ldrh	r3, [r3, r2]
 8019792:	b29a      	uxth	r2, r3
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	4975      	ldr	r1, [pc, #468]	@ (8019970 <HAL_PCD_IRQHandler+0x274>)
 801979a:	400a      	ands	r2, r1
 801979c:	b291      	uxth	r1, r2
 801979e:	2244      	movs	r2, #68	@ 0x44
 80197a0:	5299      	strh	r1, [r3, r2]

    return;
 80197a2:	e0de      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80197a4:	68fa      	ldr	r2, [r7, #12]
 80197a6:	2380      	movs	r3, #128	@ 0x80
 80197a8:	015b      	lsls	r3, r3, #5
 80197aa:	4013      	ands	r3, r2
 80197ac:	d038      	beq.n	8019820 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	2240      	movs	r2, #64	@ 0x40
 80197b4:	5a9b      	ldrh	r3, [r3, r2]
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	2104      	movs	r1, #4
 80197be:	438a      	bics	r2, r1
 80197c0:	b291      	uxth	r1, r2
 80197c2:	2240      	movs	r2, #64	@ 0x40
 80197c4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	2240      	movs	r2, #64	@ 0x40
 80197cc:	5a9b      	ldrh	r3, [r3, r2]
 80197ce:	b29a      	uxth	r2, r3
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	2108      	movs	r1, #8
 80197d6:	438a      	bics	r2, r1
 80197d8:	b291      	uxth	r1, r2
 80197da:	2240      	movs	r2, #64	@ 0x40
 80197dc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80197de:	687a      	ldr	r2, [r7, #4]
 80197e0:	23b8      	movs	r3, #184	@ 0xb8
 80197e2:	009b      	lsls	r3, r3, #2
 80197e4:	5cd3      	ldrb	r3, [r2, r3]
 80197e6:	2b01      	cmp	r3, #1
 80197e8:	d109      	bne.n	80197fe <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80197ea:	687a      	ldr	r2, [r7, #4]
 80197ec:	23b8      	movs	r3, #184	@ 0xb8
 80197ee:	009b      	lsls	r3, r3, #2
 80197f0:	2100      	movs	r1, #0
 80197f2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	2100      	movs	r1, #0
 80197f8:	0018      	movs	r0, r3
 80197fa:	f001 fc9f 	bl	801b13c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	0018      	movs	r0, r3
 8019802:	f009 fe91 	bl	8023528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	2244      	movs	r2, #68	@ 0x44
 801980c:	5a9b      	ldrh	r3, [r3, r2]
 801980e:	b29a      	uxth	r2, r3
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	4957      	ldr	r1, [pc, #348]	@ (8019974 <HAL_PCD_IRQHandler+0x278>)
 8019816:	400a      	ands	r2, r1
 8019818:	b291      	uxth	r1, r2
 801981a:	2244      	movs	r2, #68	@ 0x44
 801981c:	5299      	strh	r1, [r3, r2]

    return;
 801981e:	e0a0      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8019820:	68fa      	ldr	r2, [r7, #12]
 8019822:	2380      	movs	r3, #128	@ 0x80
 8019824:	011b      	lsls	r3, r3, #4
 8019826:	4013      	ands	r3, r2
 8019828:	d028      	beq.n	801987c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	2240      	movs	r2, #64	@ 0x40
 8019830:	5a9b      	ldrh	r3, [r3, r2]
 8019832:	b29a      	uxth	r2, r3
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	2108      	movs	r1, #8
 801983a:	430a      	orrs	r2, r1
 801983c:	b291      	uxth	r1, r2
 801983e:	2240      	movs	r2, #64	@ 0x40
 8019840:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	2244      	movs	r2, #68	@ 0x44
 8019848:	5a9b      	ldrh	r3, [r3, r2]
 801984a:	b29a      	uxth	r2, r3
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	4949      	ldr	r1, [pc, #292]	@ (8019978 <HAL_PCD_IRQHandler+0x27c>)
 8019852:	400a      	ands	r2, r1
 8019854:	b291      	uxth	r1, r2
 8019856:	2244      	movs	r2, #68	@ 0x44
 8019858:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2240      	movs	r2, #64	@ 0x40
 8019860:	5a9b      	ldrh	r3, [r3, r2]
 8019862:	b29a      	uxth	r2, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	2104      	movs	r1, #4
 801986a:	430a      	orrs	r2, r1
 801986c:	b291      	uxth	r1, r2
 801986e:	2240      	movs	r2, #64	@ 0x40
 8019870:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	0018      	movs	r0, r3
 8019876:	f009 fe3b 	bl	80234f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801987a:	e072      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	2280      	movs	r2, #128	@ 0x80
 8019880:	4013      	ands	r3, r2
 8019882:	d046      	beq.n	8019912 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	2244      	movs	r2, #68	@ 0x44
 801988a:	5a9b      	ldrh	r3, [r3, r2]
 801988c:	b29a      	uxth	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	2180      	movs	r1, #128	@ 0x80
 8019894:	438a      	bics	r2, r1
 8019896:	b291      	uxth	r1, r2
 8019898:	2244      	movs	r2, #68	@ 0x44
 801989a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 801989c:	687a      	ldr	r2, [r7, #4]
 801989e:	23b8      	movs	r3, #184	@ 0xb8
 80198a0:	009b      	lsls	r3, r3, #2
 80198a2:	5cd3      	ldrb	r3, [r2, r3]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d12f      	bne.n	8019908 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	2240      	movs	r2, #64	@ 0x40
 80198ae:	5a9b      	ldrh	r3, [r3, r2]
 80198b0:	b29a      	uxth	r2, r3
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	2104      	movs	r1, #4
 80198b8:	430a      	orrs	r2, r1
 80198ba:	b291      	uxth	r1, r2
 80198bc:	2240      	movs	r2, #64	@ 0x40
 80198be:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	2240      	movs	r2, #64	@ 0x40
 80198c6:	5a9b      	ldrh	r3, [r3, r2]
 80198c8:	b29a      	uxth	r2, r3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	2108      	movs	r1, #8
 80198d0:	430a      	orrs	r2, r1
 80198d2:	b291      	uxth	r1, r2
 80198d4:	2240      	movs	r2, #64	@ 0x40
 80198d6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80198d8:	687a      	ldr	r2, [r7, #4]
 80198da:	23b8      	movs	r3, #184	@ 0xb8
 80198dc:	009b      	lsls	r3, r3, #2
 80198de:	2101      	movs	r1, #1
 80198e0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	2254      	movs	r2, #84	@ 0x54
 80198e8:	5a9b      	ldrh	r3, [r3, r2]
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	089b      	lsrs	r3, r3, #2
 80198ee:	223c      	movs	r2, #60	@ 0x3c
 80198f0:	4013      	ands	r3, r2
 80198f2:	0019      	movs	r1, r3
 80198f4:	687a      	ldr	r2, [r7, #4]
 80198f6:	23b9      	movs	r3, #185	@ 0xb9
 80198f8:	009b      	lsls	r3, r3, #2
 80198fa:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2101      	movs	r1, #1
 8019900:	0018      	movs	r0, r3
 8019902:	f001 fc1b 	bl	801b13c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8019906:	e02c      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	0018      	movs	r0, r3
 801990c:	f009 fdf0 	bl	80234f0 <HAL_PCD_SuspendCallback>
    return;
 8019910:	e027      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8019912:	68fa      	ldr	r2, [r7, #12]
 8019914:	2380      	movs	r3, #128	@ 0x80
 8019916:	009b      	lsls	r3, r3, #2
 8019918:	4013      	ands	r3, r2
 801991a:	d010      	beq.n	801993e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	2244      	movs	r2, #68	@ 0x44
 8019922:	5a9b      	ldrh	r3, [r3, r2]
 8019924:	b29a      	uxth	r2, r3
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	4914      	ldr	r1, [pc, #80]	@ (801997c <HAL_PCD_IRQHandler+0x280>)
 801992c:	400a      	ands	r2, r1
 801992e:	b291      	uxth	r1, r2
 8019930:	2244      	movs	r2, #68	@ 0x44
 8019932:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	0018      	movs	r0, r3
 8019938:	f009 fda6 	bl	8023488 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801993c:	e011      	b.n	8019962 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801993e:	68fa      	ldr	r2, [r7, #12]
 8019940:	2380      	movs	r3, #128	@ 0x80
 8019942:	005b      	lsls	r3, r3, #1
 8019944:	4013      	ands	r3, r2
 8019946:	d00c      	beq.n	8019962 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2244      	movs	r2, #68	@ 0x44
 801994e:	5a9b      	ldrh	r3, [r3, r2]
 8019950:	b29a      	uxth	r2, r3
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	490a      	ldr	r1, [pc, #40]	@ (8019980 <HAL_PCD_IRQHandler+0x284>)
 8019958:	400a      	ands	r2, r1
 801995a:	b291      	uxth	r1, r2
 801995c:	2244      	movs	r2, #68	@ 0x44
 801995e:	5299      	strh	r1, [r3, r2]

    return;
 8019960:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019962:	46bd      	mov	sp, r7
 8019964:	b004      	add	sp, #16
 8019966:	bd80      	pop	{r7, pc}
 8019968:	fffffbff 	.word	0xfffffbff
 801996c:	ffffbfff 	.word	0xffffbfff
 8019970:	ffffdfff 	.word	0xffffdfff
 8019974:	ffffefff 	.word	0xffffefff
 8019978:	fffff7ff 	.word	0xfffff7ff
 801997c:	fffffdff 	.word	0xfffffdff
 8019980:	fffffeff 	.word	0xfffffeff

08019984 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b082      	sub	sp, #8
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	000a      	movs	r2, r1
 801998e:	1cfb      	adds	r3, r7, #3
 8019990:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8019992:	687a      	ldr	r2, [r7, #4]
 8019994:	23aa      	movs	r3, #170	@ 0xaa
 8019996:	009b      	lsls	r3, r3, #2
 8019998:	5cd3      	ldrb	r3, [r2, r3]
 801999a:	2b01      	cmp	r3, #1
 801999c:	d101      	bne.n	80199a2 <HAL_PCD_SetAddress+0x1e>
 801999e:	2302      	movs	r3, #2
 80199a0:	e017      	b.n	80199d2 <HAL_PCD_SetAddress+0x4e>
 80199a2:	687a      	ldr	r2, [r7, #4]
 80199a4:	23aa      	movs	r3, #170	@ 0xaa
 80199a6:	009b      	lsls	r3, r3, #2
 80199a8:	2101      	movs	r1, #1
 80199aa:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	1cfa      	adds	r2, r7, #3
 80199b0:	2124      	movs	r1, #36	@ 0x24
 80199b2:	7812      	ldrb	r2, [r2, #0]
 80199b4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681a      	ldr	r2, [r3, #0]
 80199ba:	1cfb      	adds	r3, r7, #3
 80199bc:	781b      	ldrb	r3, [r3, #0]
 80199be:	0019      	movs	r1, r3
 80199c0:	0010      	movs	r0, r2
 80199c2:	f007 fc79 	bl	80212b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80199c6:	687a      	ldr	r2, [r7, #4]
 80199c8:	23aa      	movs	r3, #170	@ 0xaa
 80199ca:	009b      	lsls	r3, r3, #2
 80199cc:	2100      	movs	r1, #0
 80199ce:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80199d0:	2300      	movs	r3, #0
}
 80199d2:	0018      	movs	r0, r3
 80199d4:	46bd      	mov	sp, r7
 80199d6:	b002      	add	sp, #8
 80199d8:	bd80      	pop	{r7, pc}

080199da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80199da:	b590      	push	{r4, r7, lr}
 80199dc:	b085      	sub	sp, #20
 80199de:	af00      	add	r7, sp, #0
 80199e0:	6078      	str	r0, [r7, #4]
 80199e2:	000c      	movs	r4, r1
 80199e4:	0010      	movs	r0, r2
 80199e6:	0019      	movs	r1, r3
 80199e8:	1cfb      	adds	r3, r7, #3
 80199ea:	1c22      	adds	r2, r4, #0
 80199ec:	701a      	strb	r2, [r3, #0]
 80199ee:	003b      	movs	r3, r7
 80199f0:	1c02      	adds	r2, r0, #0
 80199f2:	801a      	strh	r2, [r3, #0]
 80199f4:	1cbb      	adds	r3, r7, #2
 80199f6:	1c0a      	adds	r2, r1, #0
 80199f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80199fa:	230b      	movs	r3, #11
 80199fc:	18fb      	adds	r3, r7, r3
 80199fe:	2200      	movs	r2, #0
 8019a00:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019a02:	1cfb      	adds	r3, r7, #3
 8019a04:	781b      	ldrb	r3, [r3, #0]
 8019a06:	b25b      	sxtb	r3, r3
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	da0f      	bge.n	8019a2c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019a0c:	1cfb      	adds	r3, r7, #3
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	2207      	movs	r2, #7
 8019a12:	4013      	ands	r3, r2
 8019a14:	1c5a      	adds	r2, r3, #1
 8019a16:	0013      	movs	r3, r2
 8019a18:	009b      	lsls	r3, r3, #2
 8019a1a:	189b      	adds	r3, r3, r2
 8019a1c:	00db      	lsls	r3, r3, #3
 8019a1e:	687a      	ldr	r2, [r7, #4]
 8019a20:	18d3      	adds	r3, r2, r3
 8019a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	2201      	movs	r2, #1
 8019a28:	705a      	strb	r2, [r3, #1]
 8019a2a:	e00f      	b.n	8019a4c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019a2c:	1cfb      	adds	r3, r7, #3
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	2207      	movs	r2, #7
 8019a32:	401a      	ands	r2, r3
 8019a34:	0013      	movs	r3, r2
 8019a36:	009b      	lsls	r3, r3, #2
 8019a38:	189b      	adds	r3, r3, r2
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	3369      	adds	r3, #105	@ 0x69
 8019a3e:	33ff      	adds	r3, #255	@ 0xff
 8019a40:	687a      	ldr	r2, [r7, #4]
 8019a42:	18d3      	adds	r3, r2, r3
 8019a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8019a4c:	1cfb      	adds	r3, r7, #3
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	2207      	movs	r2, #7
 8019a52:	4013      	ands	r3, r2
 8019a54:	b2da      	uxtb	r2, r3
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8019a5a:	003b      	movs	r3, r7
 8019a5c:	881a      	ldrh	r2, [r3, #0]
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	1cba      	adds	r2, r7, #2
 8019a66:	7812      	ldrb	r2, [r2, #0]
 8019a68:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8019a6a:	1cbb      	adds	r3, r7, #2
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	2b02      	cmp	r3, #2
 8019a70:	d102      	bne.n	8019a78 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	2200      	movs	r2, #0
 8019a76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019a78:	687a      	ldr	r2, [r7, #4]
 8019a7a:	23aa      	movs	r3, #170	@ 0xaa
 8019a7c:	009b      	lsls	r3, r3, #2
 8019a7e:	5cd3      	ldrb	r3, [r2, r3]
 8019a80:	2b01      	cmp	r3, #1
 8019a82:	d101      	bne.n	8019a88 <HAL_PCD_EP_Open+0xae>
 8019a84:	2302      	movs	r3, #2
 8019a86:	e013      	b.n	8019ab0 <HAL_PCD_EP_Open+0xd6>
 8019a88:	687a      	ldr	r2, [r7, #4]
 8019a8a:	23aa      	movs	r3, #170	@ 0xaa
 8019a8c:	009b      	lsls	r3, r3, #2
 8019a8e:	2101      	movs	r1, #1
 8019a90:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	68fa      	ldr	r2, [r7, #12]
 8019a98:	0011      	movs	r1, r2
 8019a9a:	0018      	movs	r0, r3
 8019a9c:	f005 fc70 	bl	801f380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019aa0:	687a      	ldr	r2, [r7, #4]
 8019aa2:	23aa      	movs	r3, #170	@ 0xaa
 8019aa4:	009b      	lsls	r3, r3, #2
 8019aa6:	2100      	movs	r1, #0
 8019aa8:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019aaa:	230b      	movs	r3, #11
 8019aac:	18fb      	adds	r3, r7, r3
 8019aae:	781b      	ldrb	r3, [r3, #0]
}
 8019ab0:	0018      	movs	r0, r3
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	b005      	add	sp, #20
 8019ab6:	bd90      	pop	{r4, r7, pc}

08019ab8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019ab8:	b580      	push	{r7, lr}
 8019aba:	b084      	sub	sp, #16
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
 8019ac0:	000a      	movs	r2, r1
 8019ac2:	1cfb      	adds	r3, r7, #3
 8019ac4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019ac6:	1cfb      	adds	r3, r7, #3
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	b25b      	sxtb	r3, r3
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	da0f      	bge.n	8019af0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019ad0:	1cfb      	adds	r3, r7, #3
 8019ad2:	781b      	ldrb	r3, [r3, #0]
 8019ad4:	2207      	movs	r2, #7
 8019ad6:	4013      	ands	r3, r2
 8019ad8:	1c5a      	adds	r2, r3, #1
 8019ada:	0013      	movs	r3, r2
 8019adc:	009b      	lsls	r3, r3, #2
 8019ade:	189b      	adds	r3, r3, r2
 8019ae0:	00db      	lsls	r3, r3, #3
 8019ae2:	687a      	ldr	r2, [r7, #4]
 8019ae4:	18d3      	adds	r3, r2, r3
 8019ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	2201      	movs	r2, #1
 8019aec:	705a      	strb	r2, [r3, #1]
 8019aee:	e00f      	b.n	8019b10 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019af0:	1cfb      	adds	r3, r7, #3
 8019af2:	781b      	ldrb	r3, [r3, #0]
 8019af4:	2207      	movs	r2, #7
 8019af6:	401a      	ands	r2, r3
 8019af8:	0013      	movs	r3, r2
 8019afa:	009b      	lsls	r3, r3, #2
 8019afc:	189b      	adds	r3, r3, r2
 8019afe:	00db      	lsls	r3, r3, #3
 8019b00:	3369      	adds	r3, #105	@ 0x69
 8019b02:	33ff      	adds	r3, #255	@ 0xff
 8019b04:	687a      	ldr	r2, [r7, #4]
 8019b06:	18d3      	adds	r3, r2, r3
 8019b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019b10:	1cfb      	adds	r3, r7, #3
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	2207      	movs	r2, #7
 8019b16:	4013      	ands	r3, r2
 8019b18:	b2da      	uxtb	r2, r3
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019b1e:	687a      	ldr	r2, [r7, #4]
 8019b20:	23aa      	movs	r3, #170	@ 0xaa
 8019b22:	009b      	lsls	r3, r3, #2
 8019b24:	5cd3      	ldrb	r3, [r2, r3]
 8019b26:	2b01      	cmp	r3, #1
 8019b28:	d101      	bne.n	8019b2e <HAL_PCD_EP_Close+0x76>
 8019b2a:	2302      	movs	r3, #2
 8019b2c:	e011      	b.n	8019b52 <HAL_PCD_EP_Close+0x9a>
 8019b2e:	687a      	ldr	r2, [r7, #4]
 8019b30:	23aa      	movs	r3, #170	@ 0xaa
 8019b32:	009b      	lsls	r3, r3, #2
 8019b34:	2101      	movs	r1, #1
 8019b36:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	68fa      	ldr	r2, [r7, #12]
 8019b3e:	0011      	movs	r1, r2
 8019b40:	0018      	movs	r0, r3
 8019b42:	f005 ffbf 	bl	801fac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019b46:	687a      	ldr	r2, [r7, #4]
 8019b48:	23aa      	movs	r3, #170	@ 0xaa
 8019b4a:	009b      	lsls	r3, r3, #2
 8019b4c:	2100      	movs	r1, #0
 8019b4e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019b50:	2300      	movs	r3, #0
}
 8019b52:	0018      	movs	r0, r3
 8019b54:	46bd      	mov	sp, r7
 8019b56:	b004      	add	sp, #16
 8019b58:	bd80      	pop	{r7, pc}

08019b5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019b5a:	b580      	push	{r7, lr}
 8019b5c:	b086      	sub	sp, #24
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	60f8      	str	r0, [r7, #12]
 8019b62:	607a      	str	r2, [r7, #4]
 8019b64:	603b      	str	r3, [r7, #0]
 8019b66:	200b      	movs	r0, #11
 8019b68:	183b      	adds	r3, r7, r0
 8019b6a:	1c0a      	adds	r2, r1, #0
 8019b6c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019b6e:	0001      	movs	r1, r0
 8019b70:	187b      	adds	r3, r7, r1
 8019b72:	781b      	ldrb	r3, [r3, #0]
 8019b74:	2207      	movs	r2, #7
 8019b76:	401a      	ands	r2, r3
 8019b78:	0013      	movs	r3, r2
 8019b7a:	009b      	lsls	r3, r3, #2
 8019b7c:	189b      	adds	r3, r3, r2
 8019b7e:	00db      	lsls	r3, r3, #3
 8019b80:	3369      	adds	r3, #105	@ 0x69
 8019b82:	33ff      	adds	r3, #255	@ 0xff
 8019b84:	68fa      	ldr	r2, [r7, #12]
 8019b86:	18d3      	adds	r3, r2, r3
 8019b88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019b8a:	697b      	ldr	r3, [r7, #20]
 8019b8c:	687a      	ldr	r2, [r7, #4]
 8019b8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	683a      	ldr	r2, [r7, #0]
 8019b94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019b9c:	697b      	ldr	r3, [r7, #20]
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019ba2:	187b      	adds	r3, r7, r1
 8019ba4:	781b      	ldrb	r3, [r3, #0]
 8019ba6:	2207      	movs	r2, #7
 8019ba8:	4013      	ands	r3, r2
 8019baa:	b2da      	uxtb	r2, r3
 8019bac:	697b      	ldr	r3, [r7, #20]
 8019bae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	697a      	ldr	r2, [r7, #20]
 8019bb6:	0011      	movs	r1, r2
 8019bb8:	0018      	movs	r0, r3
 8019bba:	f006 f943 	bl	801fe44 <USB_EPStartXfer>

  return HAL_OK;
 8019bbe:	2300      	movs	r3, #0
}
 8019bc0:	0018      	movs	r0, r3
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	b006      	add	sp, #24
 8019bc6:	bd80      	pop	{r7, pc}

08019bc8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b082      	sub	sp, #8
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
 8019bd0:	000a      	movs	r2, r1
 8019bd2:	1cfb      	adds	r3, r7, #3
 8019bd4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019bd6:	1cfb      	adds	r3, r7, #3
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	2207      	movs	r2, #7
 8019bdc:	401a      	ands	r2, r3
 8019bde:	6878      	ldr	r0, [r7, #4]
 8019be0:	23c2      	movs	r3, #194	@ 0xc2
 8019be2:	0059      	lsls	r1, r3, #1
 8019be4:	0013      	movs	r3, r2
 8019be6:	009b      	lsls	r3, r3, #2
 8019be8:	189b      	adds	r3, r3, r2
 8019bea:	00db      	lsls	r3, r3, #3
 8019bec:	18c3      	adds	r3, r0, r3
 8019bee:	185b      	adds	r3, r3, r1
 8019bf0:	681b      	ldr	r3, [r3, #0]
}
 8019bf2:	0018      	movs	r0, r3
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	b002      	add	sp, #8
 8019bf8:	bd80      	pop	{r7, pc}

08019bfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019bfa:	b580      	push	{r7, lr}
 8019bfc:	b086      	sub	sp, #24
 8019bfe:	af00      	add	r7, sp, #0
 8019c00:	60f8      	str	r0, [r7, #12]
 8019c02:	607a      	str	r2, [r7, #4]
 8019c04:	603b      	str	r3, [r7, #0]
 8019c06:	200b      	movs	r0, #11
 8019c08:	183b      	adds	r3, r7, r0
 8019c0a:	1c0a      	adds	r2, r1, #0
 8019c0c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c0e:	183b      	adds	r3, r7, r0
 8019c10:	781b      	ldrb	r3, [r3, #0]
 8019c12:	2207      	movs	r2, #7
 8019c14:	4013      	ands	r3, r2
 8019c16:	1c5a      	adds	r2, r3, #1
 8019c18:	0013      	movs	r3, r2
 8019c1a:	009b      	lsls	r3, r3, #2
 8019c1c:	189b      	adds	r3, r3, r2
 8019c1e:	00db      	lsls	r3, r3, #3
 8019c20:	68fa      	ldr	r2, [r7, #12]
 8019c22:	18d3      	adds	r3, r2, r3
 8019c24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	687a      	ldr	r2, [r7, #4]
 8019c2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019c2c:	697b      	ldr	r3, [r7, #20]
 8019c2e:	683a      	ldr	r2, [r7, #0]
 8019c30:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019c32:	697b      	ldr	r3, [r7, #20]
 8019c34:	2224      	movs	r2, #36	@ 0x24
 8019c36:	2101      	movs	r1, #1
 8019c38:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	683a      	ldr	r2, [r7, #0]
 8019c3e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019c40:	697b      	ldr	r3, [r7, #20]
 8019c42:	2200      	movs	r2, #0
 8019c44:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	2201      	movs	r2, #1
 8019c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c4c:	183b      	adds	r3, r7, r0
 8019c4e:	781b      	ldrb	r3, [r3, #0]
 8019c50:	2207      	movs	r2, #7
 8019c52:	4013      	ands	r3, r2
 8019c54:	b2da      	uxtb	r2, r3
 8019c56:	697b      	ldr	r3, [r7, #20]
 8019c58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	697a      	ldr	r2, [r7, #20]
 8019c60:	0011      	movs	r1, r2
 8019c62:	0018      	movs	r0, r3
 8019c64:	f006 f8ee 	bl	801fe44 <USB_EPStartXfer>

  return HAL_OK;
 8019c68:	2300      	movs	r3, #0
}
 8019c6a:	0018      	movs	r0, r3
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	b006      	add	sp, #24
 8019c70:	bd80      	pop	{r7, pc}

08019c72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c72:	b580      	push	{r7, lr}
 8019c74:	b084      	sub	sp, #16
 8019c76:	af00      	add	r7, sp, #0
 8019c78:	6078      	str	r0, [r7, #4]
 8019c7a:	000a      	movs	r2, r1
 8019c7c:	1cfb      	adds	r3, r7, #3
 8019c7e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019c80:	1cfb      	adds	r3, r7, #3
 8019c82:	781b      	ldrb	r3, [r3, #0]
 8019c84:	2207      	movs	r2, #7
 8019c86:	401a      	ands	r2, r3
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	685b      	ldr	r3, [r3, #4]
 8019c8c:	429a      	cmp	r2, r3
 8019c8e:	d901      	bls.n	8019c94 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019c90:	2301      	movs	r3, #1
 8019c92:	e046      	b.n	8019d22 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019c94:	1cfb      	adds	r3, r7, #3
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	b25b      	sxtb	r3, r3
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	da0f      	bge.n	8019cbe <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c9e:	1cfb      	adds	r3, r7, #3
 8019ca0:	781b      	ldrb	r3, [r3, #0]
 8019ca2:	2207      	movs	r2, #7
 8019ca4:	4013      	ands	r3, r2
 8019ca6:	1c5a      	adds	r2, r3, #1
 8019ca8:	0013      	movs	r3, r2
 8019caa:	009b      	lsls	r3, r3, #2
 8019cac:	189b      	adds	r3, r3, r2
 8019cae:	00db      	lsls	r3, r3, #3
 8019cb0:	687a      	ldr	r2, [r7, #4]
 8019cb2:	18d3      	adds	r3, r2, r3
 8019cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	2201      	movs	r2, #1
 8019cba:	705a      	strb	r2, [r3, #1]
 8019cbc:	e00d      	b.n	8019cda <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019cbe:	1cfb      	adds	r3, r7, #3
 8019cc0:	781a      	ldrb	r2, [r3, #0]
 8019cc2:	0013      	movs	r3, r2
 8019cc4:	009b      	lsls	r3, r3, #2
 8019cc6:	189b      	adds	r3, r3, r2
 8019cc8:	00db      	lsls	r3, r3, #3
 8019cca:	3369      	adds	r3, #105	@ 0x69
 8019ccc:	33ff      	adds	r3, #255	@ 0xff
 8019cce:	687a      	ldr	r2, [r7, #4]
 8019cd0:	18d3      	adds	r3, r2, r3
 8019cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	2201      	movs	r2, #1
 8019cde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019ce0:	1cfb      	adds	r3, r7, #3
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	2207      	movs	r2, #7
 8019ce6:	4013      	ands	r3, r2
 8019ce8:	b2da      	uxtb	r2, r3
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019cee:	687a      	ldr	r2, [r7, #4]
 8019cf0:	23aa      	movs	r3, #170	@ 0xaa
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	5cd3      	ldrb	r3, [r2, r3]
 8019cf6:	2b01      	cmp	r3, #1
 8019cf8:	d101      	bne.n	8019cfe <HAL_PCD_EP_SetStall+0x8c>
 8019cfa:	2302      	movs	r3, #2
 8019cfc:	e011      	b.n	8019d22 <HAL_PCD_EP_SetStall+0xb0>
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	23aa      	movs	r3, #170	@ 0xaa
 8019d02:	009b      	lsls	r3, r3, #2
 8019d04:	2101      	movs	r1, #1
 8019d06:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	68fa      	ldr	r2, [r7, #12]
 8019d0e:	0011      	movs	r1, r2
 8019d10:	0018      	movs	r0, r3
 8019d12:	f007 f9cf 	bl	80210b4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019d16:	687a      	ldr	r2, [r7, #4]
 8019d18:	23aa      	movs	r3, #170	@ 0xaa
 8019d1a:	009b      	lsls	r3, r3, #2
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019d20:	2300      	movs	r3, #0
}
 8019d22:	0018      	movs	r0, r3
 8019d24:	46bd      	mov	sp, r7
 8019d26:	b004      	add	sp, #16
 8019d28:	bd80      	pop	{r7, pc}

08019d2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019d2a:	b580      	push	{r7, lr}
 8019d2c:	b084      	sub	sp, #16
 8019d2e:	af00      	add	r7, sp, #0
 8019d30:	6078      	str	r0, [r7, #4]
 8019d32:	000a      	movs	r2, r1
 8019d34:	1cfb      	adds	r3, r7, #3
 8019d36:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019d38:	1cfb      	adds	r3, r7, #3
 8019d3a:	781b      	ldrb	r3, [r3, #0]
 8019d3c:	220f      	movs	r2, #15
 8019d3e:	401a      	ands	r2, r3
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	685b      	ldr	r3, [r3, #4]
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d901      	bls.n	8019d4c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019d48:	2301      	movs	r3, #1
 8019d4a:	e048      	b.n	8019dde <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019d4c:	1cfb      	adds	r3, r7, #3
 8019d4e:	781b      	ldrb	r3, [r3, #0]
 8019d50:	b25b      	sxtb	r3, r3
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	da0f      	bge.n	8019d76 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019d56:	1cfb      	adds	r3, r7, #3
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	2207      	movs	r2, #7
 8019d5c:	4013      	ands	r3, r2
 8019d5e:	1c5a      	adds	r2, r3, #1
 8019d60:	0013      	movs	r3, r2
 8019d62:	009b      	lsls	r3, r3, #2
 8019d64:	189b      	adds	r3, r3, r2
 8019d66:	00db      	lsls	r3, r3, #3
 8019d68:	687a      	ldr	r2, [r7, #4]
 8019d6a:	18d3      	adds	r3, r2, r3
 8019d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	2201      	movs	r2, #1
 8019d72:	705a      	strb	r2, [r3, #1]
 8019d74:	e00f      	b.n	8019d96 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019d76:	1cfb      	adds	r3, r7, #3
 8019d78:	781b      	ldrb	r3, [r3, #0]
 8019d7a:	2207      	movs	r2, #7
 8019d7c:	401a      	ands	r2, r3
 8019d7e:	0013      	movs	r3, r2
 8019d80:	009b      	lsls	r3, r3, #2
 8019d82:	189b      	adds	r3, r3, r2
 8019d84:	00db      	lsls	r3, r3, #3
 8019d86:	3369      	adds	r3, #105	@ 0x69
 8019d88:	33ff      	adds	r3, #255	@ 0xff
 8019d8a:	687a      	ldr	r2, [r7, #4]
 8019d8c:	18d3      	adds	r3, r2, r3
 8019d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	2200      	movs	r2, #0
 8019d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	2200      	movs	r2, #0
 8019d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019d9c:	1cfb      	adds	r3, r7, #3
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	2207      	movs	r2, #7
 8019da2:	4013      	ands	r3, r2
 8019da4:	b2da      	uxtb	r2, r3
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019daa:	687a      	ldr	r2, [r7, #4]
 8019dac:	23aa      	movs	r3, #170	@ 0xaa
 8019dae:	009b      	lsls	r3, r3, #2
 8019db0:	5cd3      	ldrb	r3, [r2, r3]
 8019db2:	2b01      	cmp	r3, #1
 8019db4:	d101      	bne.n	8019dba <HAL_PCD_EP_ClrStall+0x90>
 8019db6:	2302      	movs	r3, #2
 8019db8:	e011      	b.n	8019dde <HAL_PCD_EP_ClrStall+0xb4>
 8019dba:	687a      	ldr	r2, [r7, #4]
 8019dbc:	23aa      	movs	r3, #170	@ 0xaa
 8019dbe:	009b      	lsls	r3, r3, #2
 8019dc0:	2101      	movs	r1, #1
 8019dc2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	68fa      	ldr	r2, [r7, #12]
 8019dca:	0011      	movs	r1, r2
 8019dcc:	0018      	movs	r0, r3
 8019dce:	f007 f9c1 	bl	8021154 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019dd2:	687a      	ldr	r2, [r7, #4]
 8019dd4:	23aa      	movs	r3, #170	@ 0xaa
 8019dd6:	009b      	lsls	r3, r3, #2
 8019dd8:	2100      	movs	r1, #0
 8019dda:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019ddc:	2300      	movs	r3, #0
}
 8019dde:	0018      	movs	r0, r3
 8019de0:	46bd      	mov	sp, r7
 8019de2:	b004      	add	sp, #16
 8019de4:	bd80      	pop	{r7, pc}
	...

08019de8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019de8:	b5b0      	push	{r4, r5, r7, lr}
 8019dea:	b096      	sub	sp, #88	@ 0x58
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019df0:	f000 fbec 	bl	801a5cc <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	681a      	ldr	r2, [r3, #0]
 8019df8:	204e      	movs	r0, #78	@ 0x4e
 8019dfa:	183b      	adds	r3, r7, r0
 8019dfc:	2144      	movs	r1, #68	@ 0x44
 8019dfe:	5a52      	ldrh	r2, [r2, r1]
 8019e00:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019e02:	183b      	adds	r3, r7, r0
 8019e04:	881b      	ldrh	r3, [r3, #0]
 8019e06:	b2da      	uxtb	r2, r3
 8019e08:	244d      	movs	r4, #77	@ 0x4d
 8019e0a:	193b      	adds	r3, r7, r4
 8019e0c:	210f      	movs	r1, #15
 8019e0e:	400a      	ands	r2, r1
 8019e10:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019e12:	193b      	adds	r3, r7, r4
 8019e14:	781b      	ldrb	r3, [r3, #0]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d000      	beq.n	8019e1c <PCD_EP_ISR_Handler+0x34>
 8019e1a:	e18f      	b.n	801a13c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019e1c:	183b      	adds	r3, r7, r0
 8019e1e:	881b      	ldrh	r3, [r3, #0]
 8019e20:	2210      	movs	r2, #16
 8019e22:	4013      	ands	r3, r2
 8019e24:	d155      	bne.n	8019ed2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	881b      	ldrh	r3, [r3, #0]
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	200e      	movs	r0, #14
 8019e30:	183b      	adds	r3, r7, r0
 8019e32:	49bb      	ldr	r1, [pc, #748]	@ (801a120 <PCD_EP_ISR_Handler+0x338>)
 8019e34:	400a      	ands	r2, r1
 8019e36:	801a      	strh	r2, [r3, #0]
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	183a      	adds	r2, r7, r0
 8019e3e:	8812      	ldrh	r2, [r2, #0]
 8019e40:	49b8      	ldr	r1, [pc, #736]	@ (801a124 <PCD_EP_ISR_Handler+0x33c>)
 8019e42:	430a      	orrs	r2, r1
 8019e44:	b292      	uxth	r2, r2
 8019e46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	3328      	adds	r3, #40	@ 0x28
 8019e4c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	2250      	movs	r2, #80	@ 0x50
 8019e54:	5a9b      	ldrh	r3, [r3, r2]
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	001a      	movs	r2, r3
 8019e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e5c:	781b      	ldrb	r3, [r3, #0]
 8019e5e:	00db      	lsls	r3, r3, #3
 8019e60:	18d2      	adds	r2, r2, r3
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	18d3      	adds	r3, r2, r3
 8019e68:	4aaf      	ldr	r2, [pc, #700]	@ (801a128 <PCD_EP_ISR_Handler+0x340>)
 8019e6a:	4694      	mov	ip, r2
 8019e6c:	4463      	add	r3, ip
 8019e6e:	881b      	ldrh	r3, [r3, #0]
 8019e70:	059b      	lsls	r3, r3, #22
 8019e72:	0d9a      	lsrs	r2, r3, #22
 8019e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e7a:	695a      	ldr	r2, [r3, #20]
 8019e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e7e:	69db      	ldr	r3, [r3, #28]
 8019e80:	18d2      	adds	r2, r2, r3
 8019e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2100      	movs	r1, #0
 8019e8a:	0018      	movs	r0, r3
 8019e8c:	f009 fade 	bl	802344c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	2224      	movs	r2, #36	@ 0x24
 8019e94:	5c9b      	ldrb	r3, [r3, r2]
 8019e96:	b2db      	uxtb	r3, r3
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d101      	bne.n	8019ea0 <PCD_EP_ISR_Handler+0xb8>
 8019e9c:	f000 fb96 	bl	801a5cc <PCD_EP_ISR_Handler+0x7e4>
 8019ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ea2:	699b      	ldr	r3, [r3, #24]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d001      	beq.n	8019eac <PCD_EP_ISR_Handler+0xc4>
 8019ea8:	f000 fb90 	bl	801a5cc <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	2224      	movs	r2, #36	@ 0x24
 8019eb0:	5c9b      	ldrb	r3, [r3, r2]
 8019eb2:	b2db      	uxtb	r3, r3
 8019eb4:	2280      	movs	r2, #128	@ 0x80
 8019eb6:	4252      	negs	r2, r2
 8019eb8:	4313      	orrs	r3, r2
 8019eba:	b2da      	uxtb	r2, r3
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	0011      	movs	r1, r2
 8019ec2:	224c      	movs	r2, #76	@ 0x4c
 8019ec4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2224      	movs	r2, #36	@ 0x24
 8019eca:	2100      	movs	r1, #0
 8019ecc:	5499      	strb	r1, [r3, r2]
 8019ece:	f000 fb7d 	bl	801a5cc <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	3369      	adds	r3, #105	@ 0x69
 8019ed6:	33ff      	adds	r3, #255	@ 0xff
 8019ed8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	681a      	ldr	r2, [r3, #0]
 8019ede:	214a      	movs	r1, #74	@ 0x4a
 8019ee0:	187b      	adds	r3, r7, r1
 8019ee2:	8812      	ldrh	r2, [r2, #0]
 8019ee4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019ee6:	187b      	adds	r3, r7, r1
 8019ee8:	881a      	ldrh	r2, [r3, #0]
 8019eea:	2380      	movs	r3, #128	@ 0x80
 8019eec:	011b      	lsls	r3, r3, #4
 8019eee:	4013      	ands	r3, r2
 8019ef0:	d037      	beq.n	8019f62 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	2250      	movs	r2, #80	@ 0x50
 8019ef8:	5a9b      	ldrh	r3, [r3, r2]
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	001a      	movs	r2, r3
 8019efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f00:	781b      	ldrb	r3, [r3, #0]
 8019f02:	00db      	lsls	r3, r3, #3
 8019f04:	18d2      	adds	r2, r2, r3
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	18d3      	adds	r3, r2, r3
 8019f0c:	4a87      	ldr	r2, [pc, #540]	@ (801a12c <PCD_EP_ISR_Handler+0x344>)
 8019f0e:	4694      	mov	ip, r2
 8019f10:	4463      	add	r3, ip
 8019f12:	881b      	ldrh	r3, [r3, #0]
 8019f14:	059b      	lsls	r3, r3, #22
 8019f16:	0d9a      	lsrs	r2, r3, #22
 8019f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6818      	ldr	r0, [r3, #0]
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	22ac      	movs	r2, #172	@ 0xac
 8019f24:	0092      	lsls	r2, r2, #2
 8019f26:	1899      	adds	r1, r3, r2
 8019f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019f30:	b29b      	uxth	r3, r3
 8019f32:	f007 fa43 	bl	80213bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	881b      	ldrh	r3, [r3, #0]
 8019f3c:	b29a      	uxth	r2, r3
 8019f3e:	2010      	movs	r0, #16
 8019f40:	183b      	adds	r3, r7, r0
 8019f42:	497b      	ldr	r1, [pc, #492]	@ (801a130 <PCD_EP_ISR_Handler+0x348>)
 8019f44:	400a      	ands	r2, r1
 8019f46:	801a      	strh	r2, [r3, #0]
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	183a      	adds	r2, r7, r0
 8019f4e:	8812      	ldrh	r2, [r2, #0]
 8019f50:	2180      	movs	r1, #128	@ 0x80
 8019f52:	430a      	orrs	r2, r1
 8019f54:	b292      	uxth	r2, r2
 8019f56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	0018      	movs	r0, r3
 8019f5c:	f009 fa40 	bl	80233e0 <HAL_PCD_SetupStageCallback>
 8019f60:	e334      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019f62:	234a      	movs	r3, #74	@ 0x4a
 8019f64:	18fb      	adds	r3, r7, r3
 8019f66:	2200      	movs	r2, #0
 8019f68:	5e9b      	ldrsh	r3, [r3, r2]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	db00      	blt.n	8019f70 <PCD_EP_ISR_Handler+0x188>
 8019f6e:	e32d      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	881b      	ldrh	r3, [r3, #0]
 8019f76:	b29a      	uxth	r2, r3
 8019f78:	201e      	movs	r0, #30
 8019f7a:	183b      	adds	r3, r7, r0
 8019f7c:	496c      	ldr	r1, [pc, #432]	@ (801a130 <PCD_EP_ISR_Handler+0x348>)
 8019f7e:	400a      	ands	r2, r1
 8019f80:	801a      	strh	r2, [r3, #0]
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	183a      	adds	r2, r7, r0
 8019f88:	8812      	ldrh	r2, [r2, #0]
 8019f8a:	2180      	movs	r1, #128	@ 0x80
 8019f8c:	430a      	orrs	r2, r1
 8019f8e:	b292      	uxth	r2, r2
 8019f90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	2250      	movs	r2, #80	@ 0x50
 8019f98:	5a9b      	ldrh	r3, [r3, r2]
 8019f9a:	b29b      	uxth	r3, r3
 8019f9c:	001a      	movs	r2, r3
 8019f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fa0:	781b      	ldrb	r3, [r3, #0]
 8019fa2:	00db      	lsls	r3, r3, #3
 8019fa4:	18d2      	adds	r2, r2, r3
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	18d3      	adds	r3, r2, r3
 8019fac:	4a5f      	ldr	r2, [pc, #380]	@ (801a12c <PCD_EP_ISR_Handler+0x344>)
 8019fae:	4694      	mov	ip, r2
 8019fb0:	4463      	add	r3, ip
 8019fb2:	881b      	ldrh	r3, [r3, #0]
 8019fb4:	059b      	lsls	r3, r3, #22
 8019fb6:	0d9a      	lsrs	r2, r3, #22
 8019fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fbe:	69db      	ldr	r3, [r3, #28]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d01a      	beq.n	8019ffa <PCD_EP_ISR_Handler+0x212>
 8019fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fc6:	695b      	ldr	r3, [r3, #20]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d016      	beq.n	8019ffa <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	6818      	ldr	r0, [r3, #0]
 8019fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fd2:	6959      	ldr	r1, [r3, #20]
 8019fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fd6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fda:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019fdc:	b29b      	uxth	r3, r3
 8019fde:	f007 f9ed 	bl	80213bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8019fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fe4:	695a      	ldr	r2, [r3, #20]
 8019fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fe8:	69db      	ldr	r3, [r3, #28]
 8019fea:	18d2      	adds	r2, r2, r3
 8019fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	2100      	movs	r1, #0
 8019ff4:	0018      	movs	r0, r3
 8019ff6:	f009 fa08 	bl	802340a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681a      	ldr	r2, [r3, #0]
 8019ffe:	214a      	movs	r1, #74	@ 0x4a
 801a000:	187b      	adds	r3, r7, r1
 801a002:	8812      	ldrh	r2, [r2, #0]
 801a004:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801a006:	187b      	adds	r3, r7, r1
 801a008:	881a      	ldrh	r2, [r3, #0]
 801a00a:	2380      	movs	r3, #128	@ 0x80
 801a00c:	011b      	lsls	r3, r3, #4
 801a00e:	4013      	ands	r3, r2
 801a010:	d000      	beq.n	801a014 <PCD_EP_ISR_Handler+0x22c>
 801a012:	e2db      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
 801a014:	187b      	adds	r3, r7, r1
 801a016:	881a      	ldrh	r2, [r3, #0]
 801a018:	23c0      	movs	r3, #192	@ 0xc0
 801a01a:	019b      	lsls	r3, r3, #6
 801a01c:	401a      	ands	r2, r3
 801a01e:	23c0      	movs	r3, #192	@ 0xc0
 801a020:	019b      	lsls	r3, r3, #6
 801a022:	429a      	cmp	r2, r3
 801a024:	d100      	bne.n	801a028 <PCD_EP_ISR_Handler+0x240>
 801a026:	e2d1      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	61bb      	str	r3, [r7, #24]
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	2250      	movs	r2, #80	@ 0x50
 801a034:	5a9b      	ldrh	r3, [r3, r2]
 801a036:	b29b      	uxth	r3, r3
 801a038:	001a      	movs	r2, r3
 801a03a:	69bb      	ldr	r3, [r7, #24]
 801a03c:	189b      	adds	r3, r3, r2
 801a03e:	61bb      	str	r3, [r7, #24]
 801a040:	69bb      	ldr	r3, [r7, #24]
 801a042:	4a3a      	ldr	r2, [pc, #232]	@ (801a12c <PCD_EP_ISR_Handler+0x344>)
 801a044:	4694      	mov	ip, r2
 801a046:	4463      	add	r3, ip
 801a048:	617b      	str	r3, [r7, #20]
 801a04a:	697b      	ldr	r3, [r7, #20]
 801a04c:	881b      	ldrh	r3, [r3, #0]
 801a04e:	b29b      	uxth	r3, r3
 801a050:	059b      	lsls	r3, r3, #22
 801a052:	0d9b      	lsrs	r3, r3, #22
 801a054:	b29a      	uxth	r2, r3
 801a056:	697b      	ldr	r3, [r7, #20]
 801a058:	801a      	strh	r2, [r3, #0]
 801a05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a05c:	691b      	ldr	r3, [r3, #16]
 801a05e:	2b3e      	cmp	r3, #62	@ 0x3e
 801a060:	d91a      	bls.n	801a098 <PCD_EP_ISR_Handler+0x2b0>
 801a062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a064:	691b      	ldr	r3, [r3, #16]
 801a066:	095b      	lsrs	r3, r3, #5
 801a068:	647b      	str	r3, [r7, #68]	@ 0x44
 801a06a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a06c:	691b      	ldr	r3, [r3, #16]
 801a06e:	221f      	movs	r2, #31
 801a070:	4013      	ands	r3, r2
 801a072:	d102      	bne.n	801a07a <PCD_EP_ISR_Handler+0x292>
 801a074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a076:	3b01      	subs	r3, #1
 801a078:	647b      	str	r3, [r7, #68]	@ 0x44
 801a07a:	697b      	ldr	r3, [r7, #20]
 801a07c:	881b      	ldrh	r3, [r3, #0]
 801a07e:	b29a      	uxth	r2, r3
 801a080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a082:	b29b      	uxth	r3, r3
 801a084:	029b      	lsls	r3, r3, #10
 801a086:	b29b      	uxth	r3, r3
 801a088:	4313      	orrs	r3, r2
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	4a25      	ldr	r2, [pc, #148]	@ (801a124 <PCD_EP_ISR_Handler+0x33c>)
 801a08e:	4313      	orrs	r3, r2
 801a090:	b29a      	uxth	r2, r3
 801a092:	697b      	ldr	r3, [r7, #20]
 801a094:	801a      	strh	r2, [r3, #0]
 801a096:	e023      	b.n	801a0e0 <PCD_EP_ISR_Handler+0x2f8>
 801a098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a09a:	691b      	ldr	r3, [r3, #16]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d108      	bne.n	801a0b2 <PCD_EP_ISR_Handler+0x2ca>
 801a0a0:	697b      	ldr	r3, [r7, #20]
 801a0a2:	881b      	ldrh	r3, [r3, #0]
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	4a1f      	ldr	r2, [pc, #124]	@ (801a124 <PCD_EP_ISR_Handler+0x33c>)
 801a0a8:	4313      	orrs	r3, r2
 801a0aa:	b29a      	uxth	r2, r3
 801a0ac:	697b      	ldr	r3, [r7, #20]
 801a0ae:	801a      	strh	r2, [r3, #0]
 801a0b0:	e016      	b.n	801a0e0 <PCD_EP_ISR_Handler+0x2f8>
 801a0b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0b4:	691b      	ldr	r3, [r3, #16]
 801a0b6:	085b      	lsrs	r3, r3, #1
 801a0b8:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0bc:	691b      	ldr	r3, [r3, #16]
 801a0be:	2201      	movs	r2, #1
 801a0c0:	4013      	ands	r3, r2
 801a0c2:	d002      	beq.n	801a0ca <PCD_EP_ISR_Handler+0x2e2>
 801a0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0c6:	3301      	adds	r3, #1
 801a0c8:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0ca:	697b      	ldr	r3, [r7, #20]
 801a0cc:	881b      	ldrh	r3, [r3, #0]
 801a0ce:	b29a      	uxth	r2, r3
 801a0d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	029b      	lsls	r3, r3, #10
 801a0d6:	b29b      	uxth	r3, r3
 801a0d8:	4313      	orrs	r3, r2
 801a0da:	b29a      	uxth	r2, r3
 801a0dc:	697b      	ldr	r3, [r7, #20]
 801a0de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	881b      	ldrh	r3, [r3, #0]
 801a0e6:	b29a      	uxth	r2, r3
 801a0e8:	2012      	movs	r0, #18
 801a0ea:	183b      	adds	r3, r7, r0
 801a0ec:	4911      	ldr	r1, [pc, #68]	@ (801a134 <PCD_EP_ISR_Handler+0x34c>)
 801a0ee:	400a      	ands	r2, r1
 801a0f0:	801a      	strh	r2, [r3, #0]
 801a0f2:	183b      	adds	r3, r7, r0
 801a0f4:	183a      	adds	r2, r7, r0
 801a0f6:	8812      	ldrh	r2, [r2, #0]
 801a0f8:	2180      	movs	r1, #128	@ 0x80
 801a0fa:	0149      	lsls	r1, r1, #5
 801a0fc:	404a      	eors	r2, r1
 801a0fe:	801a      	strh	r2, [r3, #0]
 801a100:	183b      	adds	r3, r7, r0
 801a102:	183a      	adds	r2, r7, r0
 801a104:	8812      	ldrh	r2, [r2, #0]
 801a106:	2180      	movs	r1, #128	@ 0x80
 801a108:	0189      	lsls	r1, r1, #6
 801a10a:	404a      	eors	r2, r1
 801a10c:	801a      	strh	r2, [r3, #0]
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	183a      	adds	r2, r7, r0
 801a114:	8812      	ldrh	r2, [r2, #0]
 801a116:	4908      	ldr	r1, [pc, #32]	@ (801a138 <PCD_EP_ISR_Handler+0x350>)
 801a118:	430a      	orrs	r2, r1
 801a11a:	b292      	uxth	r2, r2
 801a11c:	801a      	strh	r2, [r3, #0]
 801a11e:	e255      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
 801a120:	ffff8f0f 	.word	0xffff8f0f
 801a124:	ffff8000 	.word	0xffff8000
 801a128:	00000402 	.word	0x00000402
 801a12c:	00000406 	.word	0x00000406
 801a130:	00000f8f 	.word	0x00000f8f
 801a134:	ffffbf8f 	.word	0xffffbf8f
 801a138:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	001a      	movs	r2, r3
 801a142:	204d      	movs	r0, #77	@ 0x4d
 801a144:	183b      	adds	r3, r7, r0
 801a146:	781b      	ldrb	r3, [r3, #0]
 801a148:	009b      	lsls	r3, r3, #2
 801a14a:	18d2      	adds	r2, r2, r3
 801a14c:	214a      	movs	r1, #74	@ 0x4a
 801a14e:	187b      	adds	r3, r7, r1
 801a150:	8812      	ldrh	r2, [r2, #0]
 801a152:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a154:	187b      	adds	r3, r7, r1
 801a156:	2200      	movs	r2, #0
 801a158:	5e9b      	ldrsh	r3, [r3, r2]
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	db00      	blt.n	801a160 <PCD_EP_ISR_Handler+0x378>
 801a15e:	e0fa      	b.n	801a356 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	001a      	movs	r2, r3
 801a166:	183b      	adds	r3, r7, r0
 801a168:	781b      	ldrb	r3, [r3, #0]
 801a16a:	009b      	lsls	r3, r3, #2
 801a16c:	18d3      	adds	r3, r2, r3
 801a16e:	881b      	ldrh	r3, [r3, #0]
 801a170:	b29a      	uxth	r2, r3
 801a172:	2448      	movs	r4, #72	@ 0x48
 801a174:	193b      	adds	r3, r7, r4
 801a176:	49d1      	ldr	r1, [pc, #836]	@ (801a4bc <PCD_EP_ISR_Handler+0x6d4>)
 801a178:	400a      	ands	r2, r1
 801a17a:	801a      	strh	r2, [r3, #0]
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	001a      	movs	r2, r3
 801a182:	183b      	adds	r3, r7, r0
 801a184:	781b      	ldrb	r3, [r3, #0]
 801a186:	009b      	lsls	r3, r3, #2
 801a188:	18d3      	adds	r3, r2, r3
 801a18a:	193a      	adds	r2, r7, r4
 801a18c:	8812      	ldrh	r2, [r2, #0]
 801a18e:	2180      	movs	r1, #128	@ 0x80
 801a190:	430a      	orrs	r2, r1
 801a192:	b292      	uxth	r2, r2
 801a194:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a196:	183b      	adds	r3, r7, r0
 801a198:	781a      	ldrb	r2, [r3, #0]
 801a19a:	0013      	movs	r3, r2
 801a19c:	009b      	lsls	r3, r3, #2
 801a19e:	189b      	adds	r3, r3, r2
 801a1a0:	00db      	lsls	r3, r3, #3
 801a1a2:	3369      	adds	r3, #105	@ 0x69
 801a1a4:	33ff      	adds	r3, #255	@ 0xff
 801a1a6:	687a      	ldr	r2, [r7, #4]
 801a1a8:	18d3      	adds	r3, r2, r3
 801a1aa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a1ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1ae:	7b1b      	ldrb	r3, [r3, #12]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d125      	bne.n	801a200 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	2250      	movs	r2, #80	@ 0x50
 801a1ba:	5a9b      	ldrh	r3, [r3, r2]
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	001a      	movs	r2, r3
 801a1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1c2:	781b      	ldrb	r3, [r3, #0]
 801a1c4:	00db      	lsls	r3, r3, #3
 801a1c6:	18d2      	adds	r2, r2, r3
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	18d3      	adds	r3, r2, r3
 801a1ce:	4abc      	ldr	r2, [pc, #752]	@ (801a4c0 <PCD_EP_ISR_Handler+0x6d8>)
 801a1d0:	4694      	mov	ip, r2
 801a1d2:	4463      	add	r3, ip
 801a1d4:	881a      	ldrh	r2, [r3, #0]
 801a1d6:	2450      	movs	r4, #80	@ 0x50
 801a1d8:	193b      	adds	r3, r7, r4
 801a1da:	0592      	lsls	r2, r2, #22
 801a1dc:	0d92      	lsrs	r2, r2, #22
 801a1de:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a1e0:	193b      	adds	r3, r7, r4
 801a1e2:	881b      	ldrh	r3, [r3, #0]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d100      	bne.n	801a1ea <PCD_EP_ISR_Handler+0x402>
 801a1e8:	e08d      	b.n	801a306 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	6818      	ldr	r0, [r3, #0]
 801a1ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1f0:	6959      	ldr	r1, [r3, #20]
 801a1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1f4:	88da      	ldrh	r2, [r3, #6]
 801a1f6:	193b      	adds	r3, r7, r4
 801a1f8:	881b      	ldrh	r3, [r3, #0]
 801a1fa:	f007 f8df 	bl	80213bc <USB_ReadPMA>
 801a1fe:	e082      	b.n	801a306 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a202:	78db      	ldrb	r3, [r3, #3]
 801a204:	2b02      	cmp	r3, #2
 801a206:	d10c      	bne.n	801a222 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a208:	2350      	movs	r3, #80	@ 0x50
 801a20a:	18fc      	adds	r4, r7, r3
 801a20c:	234a      	movs	r3, #74	@ 0x4a
 801a20e:	18fb      	adds	r3, r7, r3
 801a210:	881a      	ldrh	r2, [r3, #0]
 801a212:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	0018      	movs	r0, r3
 801a218:	f000 f9ec 	bl	801a5f4 <HAL_PCD_EP_DB_Receive>
 801a21c:	0003      	movs	r3, r0
 801a21e:	8023      	strh	r3, [r4, #0]
 801a220:	e071      	b.n	801a306 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	001a      	movs	r2, r3
 801a228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a22a:	781b      	ldrb	r3, [r3, #0]
 801a22c:	009b      	lsls	r3, r3, #2
 801a22e:	18d3      	adds	r3, r2, r3
 801a230:	881b      	ldrh	r3, [r3, #0]
 801a232:	b29a      	uxth	r2, r3
 801a234:	2052      	movs	r0, #82	@ 0x52
 801a236:	183b      	adds	r3, r7, r0
 801a238:	49a2      	ldr	r1, [pc, #648]	@ (801a4c4 <PCD_EP_ISR_Handler+0x6dc>)
 801a23a:	400a      	ands	r2, r1
 801a23c:	801a      	strh	r2, [r3, #0]
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	001a      	movs	r2, r3
 801a244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a246:	781b      	ldrb	r3, [r3, #0]
 801a248:	009b      	lsls	r3, r3, #2
 801a24a:	18d3      	adds	r3, r2, r3
 801a24c:	183a      	adds	r2, r7, r0
 801a24e:	8812      	ldrh	r2, [r2, #0]
 801a250:	499d      	ldr	r1, [pc, #628]	@ (801a4c8 <PCD_EP_ISR_Handler+0x6e0>)
 801a252:	430a      	orrs	r2, r1
 801a254:	b292      	uxth	r2, r2
 801a256:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	001a      	movs	r2, r3
 801a25e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a260:	781b      	ldrb	r3, [r3, #0]
 801a262:	009b      	lsls	r3, r3, #2
 801a264:	18d3      	adds	r3, r2, r3
 801a266:	881b      	ldrh	r3, [r3, #0]
 801a268:	b29b      	uxth	r3, r3
 801a26a:	001a      	movs	r2, r3
 801a26c:	2380      	movs	r3, #128	@ 0x80
 801a26e:	01db      	lsls	r3, r3, #7
 801a270:	4013      	ands	r3, r2
 801a272:	d024      	beq.n	801a2be <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	2250      	movs	r2, #80	@ 0x50
 801a27a:	5a9b      	ldrh	r3, [r3, r2]
 801a27c:	b29b      	uxth	r3, r3
 801a27e:	001a      	movs	r2, r3
 801a280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a282:	781b      	ldrb	r3, [r3, #0]
 801a284:	00db      	lsls	r3, r3, #3
 801a286:	18d2      	adds	r2, r2, r3
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	18d3      	adds	r3, r2, r3
 801a28e:	4a8f      	ldr	r2, [pc, #572]	@ (801a4cc <PCD_EP_ISR_Handler+0x6e4>)
 801a290:	4694      	mov	ip, r2
 801a292:	4463      	add	r3, ip
 801a294:	881a      	ldrh	r2, [r3, #0]
 801a296:	2450      	movs	r4, #80	@ 0x50
 801a298:	193b      	adds	r3, r7, r4
 801a29a:	0592      	lsls	r2, r2, #22
 801a29c:	0d92      	lsrs	r2, r2, #22
 801a29e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a2a0:	193b      	adds	r3, r7, r4
 801a2a2:	881b      	ldrh	r3, [r3, #0]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d02e      	beq.n	801a306 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	6818      	ldr	r0, [r3, #0]
 801a2ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2ae:	6959      	ldr	r1, [r3, #20]
 801a2b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2b2:	891a      	ldrh	r2, [r3, #8]
 801a2b4:	193b      	adds	r3, r7, r4
 801a2b6:	881b      	ldrh	r3, [r3, #0]
 801a2b8:	f007 f880 	bl	80213bc <USB_ReadPMA>
 801a2bc:	e023      	b.n	801a306 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	2250      	movs	r2, #80	@ 0x50
 801a2c4:	5a9b      	ldrh	r3, [r3, r2]
 801a2c6:	b29b      	uxth	r3, r3
 801a2c8:	001a      	movs	r2, r3
 801a2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2cc:	781b      	ldrb	r3, [r3, #0]
 801a2ce:	00db      	lsls	r3, r3, #3
 801a2d0:	18d2      	adds	r2, r2, r3
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	18d3      	adds	r3, r2, r3
 801a2d8:	4a79      	ldr	r2, [pc, #484]	@ (801a4c0 <PCD_EP_ISR_Handler+0x6d8>)
 801a2da:	4694      	mov	ip, r2
 801a2dc:	4463      	add	r3, ip
 801a2de:	881a      	ldrh	r2, [r3, #0]
 801a2e0:	2450      	movs	r4, #80	@ 0x50
 801a2e2:	193b      	adds	r3, r7, r4
 801a2e4:	0592      	lsls	r2, r2, #22
 801a2e6:	0d92      	lsrs	r2, r2, #22
 801a2e8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a2ea:	193b      	adds	r3, r7, r4
 801a2ec:	881b      	ldrh	r3, [r3, #0]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d009      	beq.n	801a306 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	6818      	ldr	r0, [r3, #0]
 801a2f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2f8:	6959      	ldr	r1, [r3, #20]
 801a2fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2fc:	895a      	ldrh	r2, [r3, #10]
 801a2fe:	193b      	adds	r3, r7, r4
 801a300:	881b      	ldrh	r3, [r3, #0]
 801a302:	f007 f85b 	bl	80213bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a308:	69da      	ldr	r2, [r3, #28]
 801a30a:	2150      	movs	r1, #80	@ 0x50
 801a30c:	187b      	adds	r3, r7, r1
 801a30e:	881b      	ldrh	r3, [r3, #0]
 801a310:	18d2      	adds	r2, r2, r3
 801a312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a314:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a318:	695a      	ldr	r2, [r3, #20]
 801a31a:	187b      	adds	r3, r7, r1
 801a31c:	881b      	ldrh	r3, [r3, #0]
 801a31e:	18d2      	adds	r2, r2, r3
 801a320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a322:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a326:	699b      	ldr	r3, [r3, #24]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d005      	beq.n	801a338 <PCD_EP_ISR_Handler+0x550>
 801a32c:	187b      	adds	r3, r7, r1
 801a32e:	881a      	ldrh	r2, [r3, #0]
 801a330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a332:	691b      	ldr	r3, [r3, #16]
 801a334:	429a      	cmp	r2, r3
 801a336:	d207      	bcs.n	801a348 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a33a:	781a      	ldrb	r2, [r3, #0]
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	0011      	movs	r1, r2
 801a340:	0018      	movs	r0, r3
 801a342:	f009 f862 	bl	802340a <HAL_PCD_DataOutStageCallback>
 801a346:	e006      	b.n	801a356 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a34e:	0011      	movs	r1, r2
 801a350:	0018      	movs	r0, r3
 801a352:	f005 fd77 	bl	801fe44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a356:	244a      	movs	r4, #74	@ 0x4a
 801a358:	193b      	adds	r3, r7, r4
 801a35a:	881b      	ldrh	r3, [r3, #0]
 801a35c:	2280      	movs	r2, #128	@ 0x80
 801a35e:	4013      	ands	r3, r2
 801a360:	d100      	bne.n	801a364 <PCD_EP_ISR_Handler+0x57c>
 801a362:	e133      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a364:	204d      	movs	r0, #77	@ 0x4d
 801a366:	183b      	adds	r3, r7, r0
 801a368:	781b      	ldrb	r3, [r3, #0]
 801a36a:	1c5a      	adds	r2, r3, #1
 801a36c:	0013      	movs	r3, r2
 801a36e:	009b      	lsls	r3, r3, #2
 801a370:	189b      	adds	r3, r3, r2
 801a372:	00db      	lsls	r3, r3, #3
 801a374:	687a      	ldr	r2, [r7, #4]
 801a376:	18d3      	adds	r3, r2, r3
 801a378:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	001a      	movs	r2, r3
 801a380:	183b      	adds	r3, r7, r0
 801a382:	781b      	ldrb	r3, [r3, #0]
 801a384:	009b      	lsls	r3, r3, #2
 801a386:	18d3      	adds	r3, r2, r3
 801a388:	881b      	ldrh	r3, [r3, #0]
 801a38a:	b29a      	uxth	r2, r3
 801a38c:	2542      	movs	r5, #66	@ 0x42
 801a38e:	197b      	adds	r3, r7, r5
 801a390:	494f      	ldr	r1, [pc, #316]	@ (801a4d0 <PCD_EP_ISR_Handler+0x6e8>)
 801a392:	400a      	ands	r2, r1
 801a394:	801a      	strh	r2, [r3, #0]
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	001a      	movs	r2, r3
 801a39c:	183b      	adds	r3, r7, r0
 801a39e:	781b      	ldrb	r3, [r3, #0]
 801a3a0:	009b      	lsls	r3, r3, #2
 801a3a2:	18d3      	adds	r3, r2, r3
 801a3a4:	197a      	adds	r2, r7, r5
 801a3a6:	8812      	ldrh	r2, [r2, #0]
 801a3a8:	494a      	ldr	r1, [pc, #296]	@ (801a4d4 <PCD_EP_ISR_Handler+0x6ec>)
 801a3aa:	430a      	orrs	r2, r1
 801a3ac:	b292      	uxth	r2, r2
 801a3ae:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a3b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3b2:	78db      	ldrb	r3, [r3, #3]
 801a3b4:	2b01      	cmp	r3, #1
 801a3b6:	d000      	beq.n	801a3ba <PCD_EP_ISR_Handler+0x5d2>
 801a3b8:	e0af      	b.n	801a51a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a3ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3bc:	2200      	movs	r2, #0
 801a3be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a3c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3c2:	7b1b      	ldrb	r3, [r3, #12]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d100      	bne.n	801a3ca <PCD_EP_ISR_Handler+0x5e2>
 801a3c8:	e09f      	b.n	801a50a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a3ca:	193b      	adds	r3, r7, r4
 801a3cc:	881b      	ldrh	r3, [r3, #0]
 801a3ce:	2240      	movs	r2, #64	@ 0x40
 801a3d0:	4013      	ands	r3, r2
 801a3d2:	d046      	beq.n	801a462 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a3d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3d6:	785b      	ldrb	r3, [r3, #1]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d125      	bne.n	801a428 <PCD_EP_ISR_Handler+0x640>
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	2250      	movs	r2, #80	@ 0x50
 801a3e8:	5a9b      	ldrh	r3, [r3, r2]
 801a3ea:	b29b      	uxth	r3, r3
 801a3ec:	001a      	movs	r2, r3
 801a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3f0:	189b      	adds	r3, r3, r2
 801a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 801a3f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3f6:	781b      	ldrb	r3, [r3, #0]
 801a3f8:	00da      	lsls	r2, r3, #3
 801a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3fc:	18d3      	adds	r3, r2, r3
 801a3fe:	4a33      	ldr	r2, [pc, #204]	@ (801a4cc <PCD_EP_ISR_Handler+0x6e4>)
 801a400:	4694      	mov	ip, r2
 801a402:	4463      	add	r3, ip
 801a404:	623b      	str	r3, [r7, #32]
 801a406:	6a3b      	ldr	r3, [r7, #32]
 801a408:	881b      	ldrh	r3, [r3, #0]
 801a40a:	b29b      	uxth	r3, r3
 801a40c:	059b      	lsls	r3, r3, #22
 801a40e:	0d9b      	lsrs	r3, r3, #22
 801a410:	b29a      	uxth	r2, r3
 801a412:	6a3b      	ldr	r3, [r7, #32]
 801a414:	801a      	strh	r2, [r3, #0]
 801a416:	6a3b      	ldr	r3, [r7, #32]
 801a418:	881b      	ldrh	r3, [r3, #0]
 801a41a:	b29b      	uxth	r3, r3
 801a41c:	4a2d      	ldr	r2, [pc, #180]	@ (801a4d4 <PCD_EP_ISR_Handler+0x6ec>)
 801a41e:	4313      	orrs	r3, r2
 801a420:	b29a      	uxth	r2, r3
 801a422:	6a3b      	ldr	r3, [r7, #32]
 801a424:	801a      	strh	r2, [r3, #0]
 801a426:	e070      	b.n	801a50a <PCD_EP_ISR_Handler+0x722>
 801a428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a42a:	785b      	ldrb	r3, [r3, #1]
 801a42c:	2b01      	cmp	r3, #1
 801a42e:	d16c      	bne.n	801a50a <PCD_EP_ISR_Handler+0x722>
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2250      	movs	r2, #80	@ 0x50
 801a43c:	5a9b      	ldrh	r3, [r3, r2]
 801a43e:	b29b      	uxth	r3, r3
 801a440:	001a      	movs	r2, r3
 801a442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a444:	189b      	adds	r3, r3, r2
 801a446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	00da      	lsls	r2, r3, #3
 801a44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a450:	18d3      	adds	r3, r2, r3
 801a452:	4a1e      	ldr	r2, [pc, #120]	@ (801a4cc <PCD_EP_ISR_Handler+0x6e4>)
 801a454:	4694      	mov	ip, r2
 801a456:	4463      	add	r3, ip
 801a458:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a45c:	2200      	movs	r2, #0
 801a45e:	801a      	strh	r2, [r3, #0]
 801a460:	e053      	b.n	801a50a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a46a:	785b      	ldrb	r3, [r3, #1]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d133      	bne.n	801a4d8 <PCD_EP_ISR_Handler+0x6f0>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	637b      	str	r3, [r7, #52]	@ 0x34
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	2250      	movs	r2, #80	@ 0x50
 801a47c:	5a9b      	ldrh	r3, [r3, r2]
 801a47e:	b29b      	uxth	r3, r3
 801a480:	001a      	movs	r2, r3
 801a482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a484:	189b      	adds	r3, r3, r2
 801a486:	637b      	str	r3, [r7, #52]	@ 0x34
 801a488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a48a:	781b      	ldrb	r3, [r3, #0]
 801a48c:	00da      	lsls	r2, r3, #3
 801a48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a490:	18d3      	adds	r3, r2, r3
 801a492:	4a0b      	ldr	r2, [pc, #44]	@ (801a4c0 <PCD_EP_ISR_Handler+0x6d8>)
 801a494:	4694      	mov	ip, r2
 801a496:	4463      	add	r3, ip
 801a498:	633b      	str	r3, [r7, #48]	@ 0x30
 801a49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a49c:	881b      	ldrh	r3, [r3, #0]
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	059b      	lsls	r3, r3, #22
 801a4a2:	0d9b      	lsrs	r3, r3, #22
 801a4a4:	b29a      	uxth	r2, r3
 801a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4a8:	801a      	strh	r2, [r3, #0]
 801a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4ac:	881b      	ldrh	r3, [r3, #0]
 801a4ae:	b29b      	uxth	r3, r3
 801a4b0:	4a08      	ldr	r2, [pc, #32]	@ (801a4d4 <PCD_EP_ISR_Handler+0x6ec>)
 801a4b2:	4313      	orrs	r3, r2
 801a4b4:	b29a      	uxth	r2, r3
 801a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4b8:	801a      	strh	r2, [r3, #0]
 801a4ba:	e026      	b.n	801a50a <PCD_EP_ISR_Handler+0x722>
 801a4bc:	00000f8f 	.word	0x00000f8f
 801a4c0:	00000406 	.word	0x00000406
 801a4c4:	ffff8f8f 	.word	0xffff8f8f
 801a4c8:	ffff80c0 	.word	0xffff80c0
 801a4cc:	00000402 	.word	0x00000402
 801a4d0:	ffff8f0f 	.word	0xffff8f0f
 801a4d4:	ffff8000 	.word	0xffff8000
 801a4d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4da:	785b      	ldrb	r3, [r3, #1]
 801a4dc:	2b01      	cmp	r3, #1
 801a4de:	d114      	bne.n	801a50a <PCD_EP_ISR_Handler+0x722>
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	2250      	movs	r2, #80	@ 0x50
 801a4e6:	5a9b      	ldrh	r3, [r3, r2]
 801a4e8:	b29b      	uxth	r3, r3
 801a4ea:	001a      	movs	r2, r3
 801a4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a4ee:	189b      	adds	r3, r3, r2
 801a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a4f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4f4:	781b      	ldrb	r3, [r3, #0]
 801a4f6:	00da      	lsls	r2, r3, #3
 801a4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a4fa:	18d3      	adds	r3, r2, r3
 801a4fc:	4a3b      	ldr	r2, [pc, #236]	@ (801a5ec <PCD_EP_ISR_Handler+0x804>)
 801a4fe:	4694      	mov	ip, r2
 801a500:	4463      	add	r3, ip
 801a502:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a506:	2200      	movs	r2, #0
 801a508:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a50c:	781a      	ldrb	r2, [r3, #0]
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	0011      	movs	r1, r2
 801a512:	0018      	movs	r0, r3
 801a514:	f008 ff9a 	bl	802344c <HAL_PCD_DataInStageCallback>
 801a518:	e058      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a51a:	234a      	movs	r3, #74	@ 0x4a
 801a51c:	18fb      	adds	r3, r7, r3
 801a51e:	881a      	ldrh	r2, [r3, #0]
 801a520:	2380      	movs	r3, #128	@ 0x80
 801a522:	005b      	lsls	r3, r3, #1
 801a524:	4013      	ands	r3, r2
 801a526:	d149      	bne.n	801a5bc <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	2250      	movs	r2, #80	@ 0x50
 801a52e:	5a9b      	ldrh	r3, [r3, r2]
 801a530:	b29b      	uxth	r3, r3
 801a532:	001a      	movs	r2, r3
 801a534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	00db      	lsls	r3, r3, #3
 801a53a:	18d2      	adds	r2, r2, r3
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	18d3      	adds	r3, r2, r3
 801a542:	4a2b      	ldr	r2, [pc, #172]	@ (801a5f0 <PCD_EP_ISR_Handler+0x808>)
 801a544:	4694      	mov	ip, r2
 801a546:	4463      	add	r3, ip
 801a548:	881a      	ldrh	r2, [r3, #0]
 801a54a:	2140      	movs	r1, #64	@ 0x40
 801a54c:	187b      	adds	r3, r7, r1
 801a54e:	0592      	lsls	r2, r2, #22
 801a550:	0d92      	lsrs	r2, r2, #22
 801a552:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a556:	699a      	ldr	r2, [r3, #24]
 801a558:	187b      	adds	r3, r7, r1
 801a55a:	881b      	ldrh	r3, [r3, #0]
 801a55c:	429a      	cmp	r2, r3
 801a55e:	d907      	bls.n	801a570 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a562:	699a      	ldr	r2, [r3, #24]
 801a564:	187b      	adds	r3, r7, r1
 801a566:	881b      	ldrh	r3, [r3, #0]
 801a568:	1ad2      	subs	r2, r2, r3
 801a56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a56c:	619a      	str	r2, [r3, #24]
 801a56e:	e002      	b.n	801a576 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a572:	2200      	movs	r2, #0
 801a574:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a578:	699b      	ldr	r3, [r3, #24]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d107      	bne.n	801a58e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a57e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a580:	781a      	ldrb	r2, [r3, #0]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	0011      	movs	r1, r2
 801a586:	0018      	movs	r0, r3
 801a588:	f008 ff60 	bl	802344c <HAL_PCD_DataInStageCallback>
 801a58c:	e01e      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a58e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a590:	695a      	ldr	r2, [r3, #20]
 801a592:	2140      	movs	r1, #64	@ 0x40
 801a594:	187b      	adds	r3, r7, r1
 801a596:	881b      	ldrh	r3, [r3, #0]
 801a598:	18d2      	adds	r2, r2, r3
 801a59a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a59c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a59e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5a0:	69da      	ldr	r2, [r3, #28]
 801a5a2:	187b      	adds	r3, r7, r1
 801a5a4:	881b      	ldrh	r3, [r3, #0]
 801a5a6:	18d2      	adds	r2, r2, r3
 801a5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5aa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a5b2:	0011      	movs	r1, r2
 801a5b4:	0018      	movs	r0, r3
 801a5b6:	f005 fc45 	bl	801fe44 <USB_EPStartXfer>
 801a5ba:	e007      	b.n	801a5cc <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a5bc:	234a      	movs	r3, #74	@ 0x4a
 801a5be:	18fb      	adds	r3, r7, r3
 801a5c0:	881a      	ldrh	r2, [r3, #0]
 801a5c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	0018      	movs	r0, r3
 801a5c8:	f000 f930 	bl	801a82c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	2244      	movs	r2, #68	@ 0x44
 801a5d2:	5a9b      	ldrh	r3, [r3, r2]
 801a5d4:	b29b      	uxth	r3, r3
 801a5d6:	b21b      	sxth	r3, r3
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	da01      	bge.n	801a5e0 <PCD_EP_ISR_Handler+0x7f8>
 801a5dc:	f7ff fc0a 	bl	8019df4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a5e0:	2300      	movs	r3, #0
}
 801a5e2:	0018      	movs	r0, r3
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	b016      	add	sp, #88	@ 0x58
 801a5e8:	bdb0      	pop	{r4, r5, r7, pc}
 801a5ea:	46c0      	nop			@ (mov r8, r8)
 801a5ec:	00000406 	.word	0x00000406
 801a5f0:	00000402 	.word	0x00000402

0801a5f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a5f4:	b590      	push	{r4, r7, lr}
 801a5f6:	b089      	sub	sp, #36	@ 0x24
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	60f8      	str	r0, [r7, #12]
 801a5fc:	60b9      	str	r1, [r7, #8]
 801a5fe:	1dbb      	adds	r3, r7, #6
 801a600:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a602:	1dbb      	adds	r3, r7, #6
 801a604:	881a      	ldrh	r2, [r3, #0]
 801a606:	2380      	movs	r3, #128	@ 0x80
 801a608:	01db      	lsls	r3, r3, #7
 801a60a:	4013      	ands	r3, r2
 801a60c:	d100      	bne.n	801a610 <HAL_PCD_EP_DB_Receive+0x1c>
 801a60e:	e07d      	b.n	801a70c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	2250      	movs	r2, #80	@ 0x50
 801a616:	5a9b      	ldrh	r3, [r3, r2]
 801a618:	b29b      	uxth	r3, r3
 801a61a:	001a      	movs	r2, r3
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	781b      	ldrb	r3, [r3, #0]
 801a620:	00db      	lsls	r3, r3, #3
 801a622:	18d2      	adds	r2, r2, r3
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	18d3      	adds	r3, r2, r3
 801a62a:	4a7a      	ldr	r2, [pc, #488]	@ (801a814 <HAL_PCD_EP_DB_Receive+0x220>)
 801a62c:	4694      	mov	ip, r2
 801a62e:	4463      	add	r3, ip
 801a630:	881a      	ldrh	r2, [r3, #0]
 801a632:	211a      	movs	r1, #26
 801a634:	187b      	adds	r3, r7, r1
 801a636:	0592      	lsls	r2, r2, #22
 801a638:	0d92      	lsrs	r2, r2, #22
 801a63a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a63c:	68bb      	ldr	r3, [r7, #8]
 801a63e:	699a      	ldr	r2, [r3, #24]
 801a640:	187b      	adds	r3, r7, r1
 801a642:	881b      	ldrh	r3, [r3, #0]
 801a644:	429a      	cmp	r2, r3
 801a646:	d307      	bcc.n	801a658 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a648:	68bb      	ldr	r3, [r7, #8]
 801a64a:	699a      	ldr	r2, [r3, #24]
 801a64c:	187b      	adds	r3, r7, r1
 801a64e:	881b      	ldrh	r3, [r3, #0]
 801a650:	1ad2      	subs	r2, r2, r3
 801a652:	68bb      	ldr	r3, [r7, #8]
 801a654:	619a      	str	r2, [r3, #24]
 801a656:	e002      	b.n	801a65e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a658:	68bb      	ldr	r3, [r7, #8]
 801a65a:	2200      	movs	r2, #0
 801a65c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a65e:	68bb      	ldr	r3, [r7, #8]
 801a660:	699b      	ldr	r3, [r3, #24]
 801a662:	2b00      	cmp	r3, #0
 801a664:	d121      	bne.n	801a6aa <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	001a      	movs	r2, r3
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	781b      	ldrb	r3, [r3, #0]
 801a670:	009b      	lsls	r3, r3, #2
 801a672:	18d3      	adds	r3, r2, r3
 801a674:	881b      	ldrh	r3, [r3, #0]
 801a676:	b29a      	uxth	r2, r3
 801a678:	2018      	movs	r0, #24
 801a67a:	183b      	adds	r3, r7, r0
 801a67c:	4966      	ldr	r1, [pc, #408]	@ (801a818 <HAL_PCD_EP_DB_Receive+0x224>)
 801a67e:	400a      	ands	r2, r1
 801a680:	801a      	strh	r2, [r3, #0]
 801a682:	183b      	adds	r3, r7, r0
 801a684:	183a      	adds	r2, r7, r0
 801a686:	8812      	ldrh	r2, [r2, #0]
 801a688:	2180      	movs	r1, #128	@ 0x80
 801a68a:	0189      	lsls	r1, r1, #6
 801a68c:	404a      	eors	r2, r1
 801a68e:	801a      	strh	r2, [r3, #0]
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	001a      	movs	r2, r3
 801a696:	68bb      	ldr	r3, [r7, #8]
 801a698:	781b      	ldrb	r3, [r3, #0]
 801a69a:	009b      	lsls	r3, r3, #2
 801a69c:	18d3      	adds	r3, r2, r3
 801a69e:	183a      	adds	r2, r7, r0
 801a6a0:	8812      	ldrh	r2, [r2, #0]
 801a6a2:	495e      	ldr	r1, [pc, #376]	@ (801a81c <HAL_PCD_EP_DB_Receive+0x228>)
 801a6a4:	430a      	orrs	r2, r1
 801a6a6:	b292      	uxth	r2, r2
 801a6a8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a6aa:	1dbb      	adds	r3, r7, #6
 801a6ac:	881b      	ldrh	r3, [r3, #0]
 801a6ae:	2240      	movs	r2, #64	@ 0x40
 801a6b0:	4013      	ands	r3, r2
 801a6b2:	d01a      	beq.n	801a6ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	001a      	movs	r2, r3
 801a6ba:	68bb      	ldr	r3, [r7, #8]
 801a6bc:	781b      	ldrb	r3, [r3, #0]
 801a6be:	009b      	lsls	r3, r3, #2
 801a6c0:	18d3      	adds	r3, r2, r3
 801a6c2:	881b      	ldrh	r3, [r3, #0]
 801a6c4:	b29a      	uxth	r2, r3
 801a6c6:	2016      	movs	r0, #22
 801a6c8:	183b      	adds	r3, r7, r0
 801a6ca:	4955      	ldr	r1, [pc, #340]	@ (801a820 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a6cc:	400a      	ands	r2, r1
 801a6ce:	801a      	strh	r2, [r3, #0]
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	001a      	movs	r2, r3
 801a6d6:	68bb      	ldr	r3, [r7, #8]
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	009b      	lsls	r3, r3, #2
 801a6dc:	18d3      	adds	r3, r2, r3
 801a6de:	183a      	adds	r2, r7, r0
 801a6e0:	8812      	ldrh	r2, [r2, #0]
 801a6e2:	4950      	ldr	r1, [pc, #320]	@ (801a824 <HAL_PCD_EP_DB_Receive+0x230>)
 801a6e4:	430a      	orrs	r2, r1
 801a6e6:	b292      	uxth	r2, r2
 801a6e8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a6ea:	241a      	movs	r4, #26
 801a6ec:	193b      	adds	r3, r7, r4
 801a6ee:	881b      	ldrh	r3, [r3, #0]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d100      	bne.n	801a6f6 <HAL_PCD_EP_DB_Receive+0x102>
 801a6f4:	e086      	b.n	801a804 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	6818      	ldr	r0, [r3, #0]
 801a6fa:	68bb      	ldr	r3, [r7, #8]
 801a6fc:	6959      	ldr	r1, [r3, #20]
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	891a      	ldrh	r2, [r3, #8]
 801a702:	193b      	adds	r3, r7, r4
 801a704:	881b      	ldrh	r3, [r3, #0]
 801a706:	f006 fe59 	bl	80213bc <USB_ReadPMA>
 801a70a:	e07b      	b.n	801a804 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	2250      	movs	r2, #80	@ 0x50
 801a712:	5a9b      	ldrh	r3, [r3, r2]
 801a714:	b29b      	uxth	r3, r3
 801a716:	001a      	movs	r2, r3
 801a718:	68bb      	ldr	r3, [r7, #8]
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	00db      	lsls	r3, r3, #3
 801a71e:	18d2      	adds	r2, r2, r3
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	18d3      	adds	r3, r2, r3
 801a726:	4a40      	ldr	r2, [pc, #256]	@ (801a828 <HAL_PCD_EP_DB_Receive+0x234>)
 801a728:	4694      	mov	ip, r2
 801a72a:	4463      	add	r3, ip
 801a72c:	881a      	ldrh	r2, [r3, #0]
 801a72e:	211a      	movs	r1, #26
 801a730:	187b      	adds	r3, r7, r1
 801a732:	0592      	lsls	r2, r2, #22
 801a734:	0d92      	lsrs	r2, r2, #22
 801a736:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a738:	68bb      	ldr	r3, [r7, #8]
 801a73a:	699a      	ldr	r2, [r3, #24]
 801a73c:	187b      	adds	r3, r7, r1
 801a73e:	881b      	ldrh	r3, [r3, #0]
 801a740:	429a      	cmp	r2, r3
 801a742:	d307      	bcc.n	801a754 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a744:	68bb      	ldr	r3, [r7, #8]
 801a746:	699a      	ldr	r2, [r3, #24]
 801a748:	187b      	adds	r3, r7, r1
 801a74a:	881b      	ldrh	r3, [r3, #0]
 801a74c:	1ad2      	subs	r2, r2, r3
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	619a      	str	r2, [r3, #24]
 801a752:	e002      	b.n	801a75a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a754:	68bb      	ldr	r3, [r7, #8]
 801a756:	2200      	movs	r2, #0
 801a758:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a75a:	68bb      	ldr	r3, [r7, #8]
 801a75c:	699b      	ldr	r3, [r3, #24]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d121      	bne.n	801a7a6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	001a      	movs	r2, r3
 801a768:	68bb      	ldr	r3, [r7, #8]
 801a76a:	781b      	ldrb	r3, [r3, #0]
 801a76c:	009b      	lsls	r3, r3, #2
 801a76e:	18d3      	adds	r3, r2, r3
 801a770:	881b      	ldrh	r3, [r3, #0]
 801a772:	b29a      	uxth	r2, r3
 801a774:	201e      	movs	r0, #30
 801a776:	183b      	adds	r3, r7, r0
 801a778:	4927      	ldr	r1, [pc, #156]	@ (801a818 <HAL_PCD_EP_DB_Receive+0x224>)
 801a77a:	400a      	ands	r2, r1
 801a77c:	801a      	strh	r2, [r3, #0]
 801a77e:	183b      	adds	r3, r7, r0
 801a780:	183a      	adds	r2, r7, r0
 801a782:	8812      	ldrh	r2, [r2, #0]
 801a784:	2180      	movs	r1, #128	@ 0x80
 801a786:	0189      	lsls	r1, r1, #6
 801a788:	404a      	eors	r2, r1
 801a78a:	801a      	strh	r2, [r3, #0]
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	001a      	movs	r2, r3
 801a792:	68bb      	ldr	r3, [r7, #8]
 801a794:	781b      	ldrb	r3, [r3, #0]
 801a796:	009b      	lsls	r3, r3, #2
 801a798:	18d3      	adds	r3, r2, r3
 801a79a:	183a      	adds	r2, r7, r0
 801a79c:	8812      	ldrh	r2, [r2, #0]
 801a79e:	491f      	ldr	r1, [pc, #124]	@ (801a81c <HAL_PCD_EP_DB_Receive+0x228>)
 801a7a0:	430a      	orrs	r2, r1
 801a7a2:	b292      	uxth	r2, r2
 801a7a4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a7a6:	1dbb      	adds	r3, r7, #6
 801a7a8:	881b      	ldrh	r3, [r3, #0]
 801a7aa:	2240      	movs	r2, #64	@ 0x40
 801a7ac:	4013      	ands	r3, r2
 801a7ae:	d11a      	bne.n	801a7e6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	001a      	movs	r2, r3
 801a7b6:	68bb      	ldr	r3, [r7, #8]
 801a7b8:	781b      	ldrb	r3, [r3, #0]
 801a7ba:	009b      	lsls	r3, r3, #2
 801a7bc:	18d3      	adds	r3, r2, r3
 801a7be:	881b      	ldrh	r3, [r3, #0]
 801a7c0:	b29a      	uxth	r2, r3
 801a7c2:	201c      	movs	r0, #28
 801a7c4:	183b      	adds	r3, r7, r0
 801a7c6:	4916      	ldr	r1, [pc, #88]	@ (801a820 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a7c8:	400a      	ands	r2, r1
 801a7ca:	801a      	strh	r2, [r3, #0]
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	001a      	movs	r2, r3
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	781b      	ldrb	r3, [r3, #0]
 801a7d6:	009b      	lsls	r3, r3, #2
 801a7d8:	18d3      	adds	r3, r2, r3
 801a7da:	183a      	adds	r2, r7, r0
 801a7dc:	8812      	ldrh	r2, [r2, #0]
 801a7de:	4911      	ldr	r1, [pc, #68]	@ (801a824 <HAL_PCD_EP_DB_Receive+0x230>)
 801a7e0:	430a      	orrs	r2, r1
 801a7e2:	b292      	uxth	r2, r2
 801a7e4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a7e6:	241a      	movs	r4, #26
 801a7e8:	193b      	adds	r3, r7, r4
 801a7ea:	881b      	ldrh	r3, [r3, #0]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d009      	beq.n	801a804 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	6818      	ldr	r0, [r3, #0]
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	6959      	ldr	r1, [r3, #20]
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	895a      	ldrh	r2, [r3, #10]
 801a7fc:	193b      	adds	r3, r7, r4
 801a7fe:	881b      	ldrh	r3, [r3, #0]
 801a800:	f006 fddc 	bl	80213bc <USB_ReadPMA>
    }
  }

  return count;
 801a804:	231a      	movs	r3, #26
 801a806:	18fb      	adds	r3, r7, r3
 801a808:	881b      	ldrh	r3, [r3, #0]
}
 801a80a:	0018      	movs	r0, r3
 801a80c:	46bd      	mov	sp, r7
 801a80e:	b009      	add	sp, #36	@ 0x24
 801a810:	bd90      	pop	{r4, r7, pc}
 801a812:	46c0      	nop			@ (mov r8, r8)
 801a814:	00000402 	.word	0x00000402
 801a818:	ffffbf8f 	.word	0xffffbf8f
 801a81c:	ffff8080 	.word	0xffff8080
 801a820:	ffff8f8f 	.word	0xffff8f8f
 801a824:	ffff80c0 	.word	0xffff80c0
 801a828:	00000406 	.word	0x00000406

0801a82c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b0a4      	sub	sp, #144	@ 0x90
 801a830:	af00      	add	r7, sp, #0
 801a832:	60f8      	str	r0, [r7, #12]
 801a834:	60b9      	str	r1, [r7, #8]
 801a836:	1dbb      	adds	r3, r7, #6
 801a838:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a83a:	1dbb      	adds	r3, r7, #6
 801a83c:	881b      	ldrh	r3, [r3, #0]
 801a83e:	2240      	movs	r2, #64	@ 0x40
 801a840:	4013      	ands	r3, r2
 801a842:	d100      	bne.n	801a846 <HAL_PCD_EP_DB_Transmit+0x1a>
 801a844:	e1e4      	b.n	801ac10 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	2250      	movs	r2, #80	@ 0x50
 801a84c:	5a9b      	ldrh	r3, [r3, r2]
 801a84e:	b29b      	uxth	r3, r3
 801a850:	001a      	movs	r2, r3
 801a852:	68bb      	ldr	r3, [r7, #8]
 801a854:	781b      	ldrb	r3, [r3, #0]
 801a856:	00db      	lsls	r3, r3, #3
 801a858:	18d2      	adds	r2, r2, r3
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	18d3      	adds	r3, r2, r3
 801a860:	4ad0      	ldr	r2, [pc, #832]	@ (801aba4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a862:	4694      	mov	ip, r2
 801a864:	4463      	add	r3, ip
 801a866:	881a      	ldrh	r2, [r3, #0]
 801a868:	2186      	movs	r1, #134	@ 0x86
 801a86a:	187b      	adds	r3, r7, r1
 801a86c:	0592      	lsls	r2, r2, #22
 801a86e:	0d92      	lsrs	r2, r2, #22
 801a870:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	699a      	ldr	r2, [r3, #24]
 801a876:	187b      	adds	r3, r7, r1
 801a878:	881b      	ldrh	r3, [r3, #0]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d907      	bls.n	801a88e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a87e:	68bb      	ldr	r3, [r7, #8]
 801a880:	699a      	ldr	r2, [r3, #24]
 801a882:	187b      	adds	r3, r7, r1
 801a884:	881b      	ldrh	r3, [r3, #0]
 801a886:	1ad2      	subs	r2, r2, r3
 801a888:	68bb      	ldr	r3, [r7, #8]
 801a88a:	619a      	str	r2, [r3, #24]
 801a88c:	e002      	b.n	801a894 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a88e:	68bb      	ldr	r3, [r7, #8]
 801a890:	2200      	movs	r2, #0
 801a892:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	699b      	ldr	r3, [r3, #24]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d000      	beq.n	801a89e <HAL_PCD_EP_DB_Transmit+0x72>
 801a89c:	e0b5      	b.n	801aa0a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a89e:	68bb      	ldr	r3, [r7, #8]
 801a8a0:	785b      	ldrb	r3, [r3, #1]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d125      	bne.n	801a8f2 <HAL_PCD_EP_DB_Transmit+0xc6>
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	2250      	movs	r2, #80	@ 0x50
 801a8b2:	5a9b      	ldrh	r3, [r3, r2]
 801a8b4:	b29b      	uxth	r3, r3
 801a8b6:	001a      	movs	r2, r3
 801a8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8ba:	189b      	adds	r3, r3, r2
 801a8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8be:	68bb      	ldr	r3, [r7, #8]
 801a8c0:	781b      	ldrb	r3, [r3, #0]
 801a8c2:	00da      	lsls	r2, r3, #3
 801a8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8c6:	18d3      	adds	r3, r2, r3
 801a8c8:	4ab6      	ldr	r2, [pc, #728]	@ (801aba4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a8ca:	4694      	mov	ip, r2
 801a8cc:	4463      	add	r3, ip
 801a8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8d2:	881b      	ldrh	r3, [r3, #0]
 801a8d4:	b29b      	uxth	r3, r3
 801a8d6:	059b      	lsls	r3, r3, #22
 801a8d8:	0d9b      	lsrs	r3, r3, #22
 801a8da:	b29a      	uxth	r2, r3
 801a8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8de:	801a      	strh	r2, [r3, #0]
 801a8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8e2:	881b      	ldrh	r3, [r3, #0]
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	4ab0      	ldr	r2, [pc, #704]	@ (801aba8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a8e8:	4313      	orrs	r3, r2
 801a8ea:	b29a      	uxth	r2, r3
 801a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8ee:	801a      	strh	r2, [r3, #0]
 801a8f0:	e01b      	b.n	801a92a <HAL_PCD_EP_DB_Transmit+0xfe>
 801a8f2:	68bb      	ldr	r3, [r7, #8]
 801a8f4:	785b      	ldrb	r3, [r3, #1]
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d117      	bne.n	801a92a <HAL_PCD_EP_DB_Transmit+0xfe>
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	2250      	movs	r2, #80	@ 0x50
 801a906:	5a9b      	ldrh	r3, [r3, r2]
 801a908:	b29b      	uxth	r3, r3
 801a90a:	001a      	movs	r2, r3
 801a90c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a90e:	189b      	adds	r3, r3, r2
 801a910:	637b      	str	r3, [r7, #52]	@ 0x34
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	781b      	ldrb	r3, [r3, #0]
 801a916:	00da      	lsls	r2, r3, #3
 801a918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a91a:	18d3      	adds	r3, r2, r3
 801a91c:	4aa1      	ldr	r2, [pc, #644]	@ (801aba4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a91e:	4694      	mov	ip, r2
 801a920:	4463      	add	r3, ip
 801a922:	633b      	str	r3, [r7, #48]	@ 0x30
 801a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a926:	2200      	movs	r2, #0
 801a928:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a930:	68bb      	ldr	r3, [r7, #8]
 801a932:	785b      	ldrb	r3, [r3, #1]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d125      	bne.n	801a984 <HAL_PCD_EP_DB_Transmit+0x158>
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	61fb      	str	r3, [r7, #28]
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	2250      	movs	r2, #80	@ 0x50
 801a944:	5a9b      	ldrh	r3, [r3, r2]
 801a946:	b29b      	uxth	r3, r3
 801a948:	001a      	movs	r2, r3
 801a94a:	69fb      	ldr	r3, [r7, #28]
 801a94c:	189b      	adds	r3, r3, r2
 801a94e:	61fb      	str	r3, [r7, #28]
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	00da      	lsls	r2, r3, #3
 801a956:	69fb      	ldr	r3, [r7, #28]
 801a958:	18d3      	adds	r3, r2, r3
 801a95a:	4a94      	ldr	r2, [pc, #592]	@ (801abac <HAL_PCD_EP_DB_Transmit+0x380>)
 801a95c:	4694      	mov	ip, r2
 801a95e:	4463      	add	r3, ip
 801a960:	61bb      	str	r3, [r7, #24]
 801a962:	69bb      	ldr	r3, [r7, #24]
 801a964:	881b      	ldrh	r3, [r3, #0]
 801a966:	b29b      	uxth	r3, r3
 801a968:	059b      	lsls	r3, r3, #22
 801a96a:	0d9b      	lsrs	r3, r3, #22
 801a96c:	b29a      	uxth	r2, r3
 801a96e:	69bb      	ldr	r3, [r7, #24]
 801a970:	801a      	strh	r2, [r3, #0]
 801a972:	69bb      	ldr	r3, [r7, #24]
 801a974:	881b      	ldrh	r3, [r3, #0]
 801a976:	b29b      	uxth	r3, r3
 801a978:	4a8b      	ldr	r2, [pc, #556]	@ (801aba8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a97a:	4313      	orrs	r3, r2
 801a97c:	b29a      	uxth	r2, r3
 801a97e:	69bb      	ldr	r3, [r7, #24]
 801a980:	801a      	strh	r2, [r3, #0]
 801a982:	e018      	b.n	801a9b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a984:	68bb      	ldr	r3, [r7, #8]
 801a986:	785b      	ldrb	r3, [r3, #1]
 801a988:	2b01      	cmp	r3, #1
 801a98a:	d114      	bne.n	801a9b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	2250      	movs	r2, #80	@ 0x50
 801a992:	5a9b      	ldrh	r3, [r3, r2]
 801a994:	b29b      	uxth	r3, r3
 801a996:	001a      	movs	r2, r3
 801a998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a99a:	189b      	adds	r3, r3, r2
 801a99c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	781b      	ldrb	r3, [r3, #0]
 801a9a2:	00da      	lsls	r2, r3, #3
 801a9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9a6:	18d3      	adds	r3, r2, r3
 801a9a8:	4a80      	ldr	r2, [pc, #512]	@ (801abac <HAL_PCD_EP_DB_Transmit+0x380>)
 801a9aa:	4694      	mov	ip, r2
 801a9ac:	4463      	add	r3, ip
 801a9ae:	623b      	str	r3, [r7, #32]
 801a9b0:	6a3b      	ldr	r3, [r7, #32]
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	781a      	ldrb	r2, [r3, #0]
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	0011      	movs	r1, r2
 801a9be:	0018      	movs	r0, r3
 801a9c0:	f008 fd44 	bl	802344c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a9c4:	1dbb      	adds	r3, r7, #6
 801a9c6:	881a      	ldrh	r2, [r3, #0]
 801a9c8:	2380      	movs	r3, #128	@ 0x80
 801a9ca:	01db      	lsls	r3, r3, #7
 801a9cc:	4013      	ands	r3, r2
 801a9ce:	d100      	bne.n	801a9d2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 801a9d0:	e309      	b.n	801afe6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	001a      	movs	r2, r3
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	009b      	lsls	r3, r3, #2
 801a9de:	18d3      	adds	r3, r2, r3
 801a9e0:	881b      	ldrh	r3, [r3, #0]
 801a9e2:	b29a      	uxth	r2, r3
 801a9e4:	2016      	movs	r0, #22
 801a9e6:	183b      	adds	r3, r7, r0
 801a9e8:	4971      	ldr	r1, [pc, #452]	@ (801abb0 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a9ea:	400a      	ands	r2, r1
 801a9ec:	801a      	strh	r2, [r3, #0]
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	001a      	movs	r2, r3
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	781b      	ldrb	r3, [r3, #0]
 801a9f8:	009b      	lsls	r3, r3, #2
 801a9fa:	18d3      	adds	r3, r2, r3
 801a9fc:	183a      	adds	r2, r7, r0
 801a9fe:	8812      	ldrh	r2, [r2, #0]
 801aa00:	496c      	ldr	r1, [pc, #432]	@ (801abb4 <HAL_PCD_EP_DB_Transmit+0x388>)
 801aa02:	430a      	orrs	r2, r1
 801aa04:	b292      	uxth	r2, r2
 801aa06:	801a      	strh	r2, [r3, #0]
 801aa08:	e2ed      	b.n	801afe6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801aa0a:	1dbb      	adds	r3, r7, #6
 801aa0c:	881a      	ldrh	r2, [r3, #0]
 801aa0e:	2380      	movs	r3, #128	@ 0x80
 801aa10:	01db      	lsls	r3, r3, #7
 801aa12:	4013      	ands	r3, r2
 801aa14:	d01a      	beq.n	801aa4c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	001a      	movs	r2, r3
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	781b      	ldrb	r3, [r3, #0]
 801aa20:	009b      	lsls	r3, r3, #2
 801aa22:	18d3      	adds	r3, r2, r3
 801aa24:	881b      	ldrh	r3, [r3, #0]
 801aa26:	b29a      	uxth	r2, r3
 801aa28:	208a      	movs	r0, #138	@ 0x8a
 801aa2a:	183b      	adds	r3, r7, r0
 801aa2c:	4960      	ldr	r1, [pc, #384]	@ (801abb0 <HAL_PCD_EP_DB_Transmit+0x384>)
 801aa2e:	400a      	ands	r2, r1
 801aa30:	801a      	strh	r2, [r3, #0]
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	001a      	movs	r2, r3
 801aa38:	68bb      	ldr	r3, [r7, #8]
 801aa3a:	781b      	ldrb	r3, [r3, #0]
 801aa3c:	009b      	lsls	r3, r3, #2
 801aa3e:	18d3      	adds	r3, r2, r3
 801aa40:	183a      	adds	r2, r7, r0
 801aa42:	8812      	ldrh	r2, [r2, #0]
 801aa44:	495b      	ldr	r1, [pc, #364]	@ (801abb4 <HAL_PCD_EP_DB_Transmit+0x388>)
 801aa46:	430a      	orrs	r2, r1
 801aa48:	b292      	uxth	r2, r2
 801aa4a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	2224      	movs	r2, #36	@ 0x24
 801aa50:	5c9b      	ldrb	r3, [r3, r2]
 801aa52:	2b01      	cmp	r3, #1
 801aa54:	d000      	beq.n	801aa58 <HAL_PCD_EP_DB_Transmit+0x22c>
 801aa56:	e2c6      	b.n	801afe6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801aa58:	68bb      	ldr	r3, [r7, #8]
 801aa5a:	695a      	ldr	r2, [r3, #20]
 801aa5c:	2186      	movs	r1, #134	@ 0x86
 801aa5e:	187b      	adds	r3, r7, r1
 801aa60:	881b      	ldrh	r3, [r3, #0]
 801aa62:	18d2      	adds	r2, r2, r3
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	69da      	ldr	r2, [r3, #28]
 801aa6c:	187b      	adds	r3, r7, r1
 801aa6e:	881b      	ldrh	r3, [r3, #0]
 801aa70:	18d2      	adds	r2, r2, r3
 801aa72:	68bb      	ldr	r3, [r7, #8]
 801aa74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	6a1a      	ldr	r2, [r3, #32]
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	691b      	ldr	r3, [r3, #16]
 801aa7e:	429a      	cmp	r2, r3
 801aa80:	d30c      	bcc.n	801aa9c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	691b      	ldr	r3, [r3, #16]
 801aa86:	218c      	movs	r1, #140	@ 0x8c
 801aa88:	187a      	adds	r2, r7, r1
 801aa8a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	6a1a      	ldr	r2, [r3, #32]
 801aa90:	187b      	adds	r3, r7, r1
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	1ad2      	subs	r2, r2, r3
 801aa96:	68bb      	ldr	r3, [r7, #8]
 801aa98:	621a      	str	r2, [r3, #32]
 801aa9a:	e01a      	b.n	801aad2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	6a1b      	ldr	r3, [r3, #32]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d10a      	bne.n	801aaba <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801aaa4:	2386      	movs	r3, #134	@ 0x86
 801aaa6:	18fb      	adds	r3, r7, r3
 801aaa8:	881b      	ldrh	r3, [r3, #0]
 801aaaa:	228c      	movs	r2, #140	@ 0x8c
 801aaac:	18ba      	adds	r2, r7, r2
 801aaae:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	2224      	movs	r2, #36	@ 0x24
 801aab4:	2100      	movs	r1, #0
 801aab6:	5499      	strb	r1, [r3, r2]
 801aab8:	e00b      	b.n	801aad2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	2224      	movs	r2, #36	@ 0x24
 801aabe:	2100      	movs	r1, #0
 801aac0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801aac2:	68bb      	ldr	r3, [r7, #8]
 801aac4:	6a1b      	ldr	r3, [r3, #32]
 801aac6:	228c      	movs	r2, #140	@ 0x8c
 801aac8:	18ba      	adds	r2, r7, r2
 801aaca:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	2200      	movs	r2, #0
 801aad0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aad2:	68bb      	ldr	r3, [r7, #8]
 801aad4:	785b      	ldrb	r3, [r3, #1]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d000      	beq.n	801aadc <HAL_PCD_EP_DB_Transmit+0x2b0>
 801aada:	e06d      	b.n	801abb8 <HAL_PCD_EP_DB_Transmit+0x38c>
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	2250      	movs	r2, #80	@ 0x50
 801aae8:	5a9b      	ldrh	r3, [r3, r2]
 801aaea:	b29b      	uxth	r3, r3
 801aaec:	001a      	movs	r2, r3
 801aaee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aaf0:	189b      	adds	r3, r3, r2
 801aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	781b      	ldrb	r3, [r3, #0]
 801aaf8:	00da      	lsls	r2, r3, #3
 801aafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aafc:	18d3      	adds	r3, r2, r3
 801aafe:	4a29      	ldr	r2, [pc, #164]	@ (801aba4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801ab00:	4694      	mov	ip, r2
 801ab02:	4463      	add	r3, ip
 801ab04:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ab06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab08:	881b      	ldrh	r3, [r3, #0]
 801ab0a:	b29b      	uxth	r3, r3
 801ab0c:	059b      	lsls	r3, r3, #22
 801ab0e:	0d9b      	lsrs	r3, r3, #22
 801ab10:	b29a      	uxth	r2, r3
 801ab12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab14:	801a      	strh	r2, [r3, #0]
 801ab16:	228c      	movs	r2, #140	@ 0x8c
 801ab18:	18bb      	adds	r3, r7, r2
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	2b3e      	cmp	r3, #62	@ 0x3e
 801ab1e:	d91a      	bls.n	801ab56 <HAL_PCD_EP_DB_Transmit+0x32a>
 801ab20:	18bb      	adds	r3, r7, r2
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	095b      	lsrs	r3, r3, #5
 801ab26:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab28:	18bb      	adds	r3, r7, r2
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	221f      	movs	r2, #31
 801ab2e:	4013      	ands	r3, r2
 801ab30:	d102      	bne.n	801ab38 <HAL_PCD_EP_DB_Transmit+0x30c>
 801ab32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab34:	3b01      	subs	r3, #1
 801ab36:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab3a:	881b      	ldrh	r3, [r3, #0]
 801ab3c:	b29a      	uxth	r2, r3
 801ab3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab40:	b29b      	uxth	r3, r3
 801ab42:	029b      	lsls	r3, r3, #10
 801ab44:	b29b      	uxth	r3, r3
 801ab46:	4313      	orrs	r3, r2
 801ab48:	b29b      	uxth	r3, r3
 801ab4a:	4a17      	ldr	r2, [pc, #92]	@ (801aba8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ab4c:	4313      	orrs	r3, r2
 801ab4e:	b29a      	uxth	r2, r3
 801ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab52:	801a      	strh	r2, [r3, #0]
 801ab54:	e04f      	b.n	801abf6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab56:	238c      	movs	r3, #140	@ 0x8c
 801ab58:	18fb      	adds	r3, r7, r3
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d108      	bne.n	801ab72 <HAL_PCD_EP_DB_Transmit+0x346>
 801ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab62:	881b      	ldrh	r3, [r3, #0]
 801ab64:	b29b      	uxth	r3, r3
 801ab66:	4a10      	ldr	r2, [pc, #64]	@ (801aba8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ab68:	4313      	orrs	r3, r2
 801ab6a:	b29a      	uxth	r2, r3
 801ab6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab6e:	801a      	strh	r2, [r3, #0]
 801ab70:	e041      	b.n	801abf6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab72:	228c      	movs	r2, #140	@ 0x8c
 801ab74:	18bb      	adds	r3, r7, r2
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	085b      	lsrs	r3, r3, #1
 801ab7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab7c:	18bb      	adds	r3, r7, r2
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	2201      	movs	r2, #1
 801ab82:	4013      	ands	r3, r2
 801ab84:	d002      	beq.n	801ab8c <HAL_PCD_EP_DB_Transmit+0x360>
 801ab86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab88:	3301      	adds	r3, #1
 801ab8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab8e:	881b      	ldrh	r3, [r3, #0]
 801ab90:	b29a      	uxth	r2, r3
 801ab92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab94:	b29b      	uxth	r3, r3
 801ab96:	029b      	lsls	r3, r3, #10
 801ab98:	b29b      	uxth	r3, r3
 801ab9a:	4313      	orrs	r3, r2
 801ab9c:	b29a      	uxth	r2, r3
 801ab9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aba0:	801a      	strh	r2, [r3, #0]
 801aba2:	e028      	b.n	801abf6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801aba4:	00000402 	.word	0x00000402
 801aba8:	ffff8000 	.word	0xffff8000
 801abac:	00000406 	.word	0x00000406
 801abb0:	ffff8f8f 	.word	0xffff8f8f
 801abb4:	ffffc080 	.word	0xffffc080
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	785b      	ldrb	r3, [r3, #1]
 801abbc:	2b01      	cmp	r3, #1
 801abbe:	d11a      	bne.n	801abf6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	647b      	str	r3, [r7, #68]	@ 0x44
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	2250      	movs	r2, #80	@ 0x50
 801abcc:	5a9b      	ldrh	r3, [r3, r2]
 801abce:	b29b      	uxth	r3, r3
 801abd0:	001a      	movs	r2, r3
 801abd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801abd4:	189b      	adds	r3, r3, r2
 801abd6:	647b      	str	r3, [r7, #68]	@ 0x44
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	781b      	ldrb	r3, [r3, #0]
 801abdc:	00da      	lsls	r2, r3, #3
 801abde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801abe0:	18d3      	adds	r3, r2, r3
 801abe2:	4adb      	ldr	r2, [pc, #876]	@ (801af50 <HAL_PCD_EP_DB_Transmit+0x724>)
 801abe4:	4694      	mov	ip, r2
 801abe6:	4463      	add	r3, ip
 801abe8:	643b      	str	r3, [r7, #64]	@ 0x40
 801abea:	238c      	movs	r3, #140	@ 0x8c
 801abec:	18fb      	adds	r3, r7, r3
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	b29a      	uxth	r2, r3
 801abf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abf4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801abf6:	68fb      	ldr	r3, [r7, #12]
 801abf8:	6818      	ldr	r0, [r3, #0]
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	6959      	ldr	r1, [r3, #20]
 801abfe:	68bb      	ldr	r3, [r7, #8]
 801ac00:	891a      	ldrh	r2, [r3, #8]
 801ac02:	238c      	movs	r3, #140	@ 0x8c
 801ac04:	18fb      	adds	r3, r7, r3
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	b29b      	uxth	r3, r3
 801ac0a:	f006 fb8d 	bl	8021328 <USB_WritePMA>
 801ac0e:	e1ea      	b.n	801afe6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	2250      	movs	r2, #80	@ 0x50
 801ac16:	5a9b      	ldrh	r3, [r3, r2]
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	001a      	movs	r2, r3
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	781b      	ldrb	r3, [r3, #0]
 801ac20:	00db      	lsls	r3, r3, #3
 801ac22:	18d2      	adds	r2, r2, r3
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	18d3      	adds	r3, r2, r3
 801ac2a:	4aca      	ldr	r2, [pc, #808]	@ (801af54 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ac2c:	4694      	mov	ip, r2
 801ac2e:	4463      	add	r3, ip
 801ac30:	881a      	ldrh	r2, [r3, #0]
 801ac32:	2186      	movs	r1, #134	@ 0x86
 801ac34:	187b      	adds	r3, r7, r1
 801ac36:	0592      	lsls	r2, r2, #22
 801ac38:	0d92      	lsrs	r2, r2, #22
 801ac3a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	699a      	ldr	r2, [r3, #24]
 801ac40:	187b      	adds	r3, r7, r1
 801ac42:	881b      	ldrh	r3, [r3, #0]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	d307      	bcc.n	801ac58 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801ac48:	68bb      	ldr	r3, [r7, #8]
 801ac4a:	699a      	ldr	r2, [r3, #24]
 801ac4c:	187b      	adds	r3, r7, r1
 801ac4e:	881b      	ldrh	r3, [r3, #0]
 801ac50:	1ad2      	subs	r2, r2, r3
 801ac52:	68bb      	ldr	r3, [r7, #8]
 801ac54:	619a      	str	r2, [r3, #24]
 801ac56:	e002      	b.n	801ac5e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801ac58:	68bb      	ldr	r3, [r7, #8]
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801ac5e:	68bb      	ldr	r3, [r7, #8]
 801ac60:	699b      	ldr	r3, [r3, #24]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d000      	beq.n	801ac68 <HAL_PCD_EP_DB_Transmit+0x43c>
 801ac66:	e0bb      	b.n	801ade0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ac68:	68bb      	ldr	r3, [r7, #8]
 801ac6a:	785b      	ldrb	r3, [r3, #1]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d125      	bne.n	801acbc <HAL_PCD_EP_DB_Transmit+0x490>
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	2250      	movs	r2, #80	@ 0x50
 801ac7c:	5a9b      	ldrh	r3, [r3, r2]
 801ac7e:	b29b      	uxth	r3, r3
 801ac80:	001a      	movs	r2, r3
 801ac82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac84:	189b      	adds	r3, r3, r2
 801ac86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	781b      	ldrb	r3, [r3, #0]
 801ac8c:	00da      	lsls	r2, r3, #3
 801ac8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac90:	18d3      	adds	r3, r2, r3
 801ac92:	4aaf      	ldr	r2, [pc, #700]	@ (801af50 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac94:	4694      	mov	ip, r2
 801ac96:	4463      	add	r3, ip
 801ac98:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ac9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac9c:	881b      	ldrh	r3, [r3, #0]
 801ac9e:	b29b      	uxth	r3, r3
 801aca0:	059b      	lsls	r3, r3, #22
 801aca2:	0d9b      	lsrs	r3, r3, #22
 801aca4:	b29a      	uxth	r2, r3
 801aca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aca8:	801a      	strh	r2, [r3, #0]
 801acaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801acac:	881b      	ldrh	r3, [r3, #0]
 801acae:	b29b      	uxth	r3, r3
 801acb0:	4aa9      	ldr	r2, [pc, #676]	@ (801af58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801acb2:	4313      	orrs	r3, r2
 801acb4:	b29a      	uxth	r2, r3
 801acb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801acb8:	801a      	strh	r2, [r3, #0]
 801acba:	e01b      	b.n	801acf4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	785b      	ldrb	r3, [r3, #1]
 801acc0:	2b01      	cmp	r3, #1
 801acc2:	d117      	bne.n	801acf4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	667b      	str	r3, [r7, #100]	@ 0x64
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	2250      	movs	r2, #80	@ 0x50
 801acd0:	5a9b      	ldrh	r3, [r3, r2]
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	001a      	movs	r2, r3
 801acd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801acd8:	189b      	adds	r3, r3, r2
 801acda:	667b      	str	r3, [r7, #100]	@ 0x64
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	781b      	ldrb	r3, [r3, #0]
 801ace0:	00da      	lsls	r2, r3, #3
 801ace2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ace4:	18d3      	adds	r3, r2, r3
 801ace6:	4a9a      	ldr	r2, [pc, #616]	@ (801af50 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ace8:	4694      	mov	ip, r2
 801acea:	4463      	add	r3, ip
 801acec:	663b      	str	r3, [r7, #96]	@ 0x60
 801acee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801acf0:	2200      	movs	r2, #0
 801acf2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	677b      	str	r3, [r7, #116]	@ 0x74
 801acfa:	68bb      	ldr	r3, [r7, #8]
 801acfc:	785b      	ldrb	r3, [r3, #1]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d12b      	bne.n	801ad5a <HAL_PCD_EP_DB_Transmit+0x52e>
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	2250      	movs	r2, #80	@ 0x50
 801ad0e:	5a9b      	ldrh	r3, [r3, r2]
 801ad10:	b29b      	uxth	r3, r3
 801ad12:	001a      	movs	r2, r3
 801ad14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad16:	189b      	adds	r3, r3, r2
 801ad18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad1a:	68bb      	ldr	r3, [r7, #8]
 801ad1c:	781b      	ldrb	r3, [r3, #0]
 801ad1e:	00da      	lsls	r2, r3, #3
 801ad20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad22:	18d3      	adds	r3, r2, r3
 801ad24:	4a8b      	ldr	r2, [pc, #556]	@ (801af54 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad26:	4694      	mov	ip, r2
 801ad28:	4463      	add	r3, ip
 801ad2a:	2180      	movs	r1, #128	@ 0x80
 801ad2c:	187a      	adds	r2, r7, r1
 801ad2e:	6013      	str	r3, [r2, #0]
 801ad30:	187b      	adds	r3, r7, r1
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	881b      	ldrh	r3, [r3, #0]
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	059b      	lsls	r3, r3, #22
 801ad3a:	0d9b      	lsrs	r3, r3, #22
 801ad3c:	b29a      	uxth	r2, r3
 801ad3e:	187b      	adds	r3, r7, r1
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	801a      	strh	r2, [r3, #0]
 801ad44:	187b      	adds	r3, r7, r1
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	881b      	ldrh	r3, [r3, #0]
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	4a82      	ldr	r2, [pc, #520]	@ (801af58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ad4e:	4313      	orrs	r3, r2
 801ad50:	b29a      	uxth	r2, r3
 801ad52:	187b      	adds	r3, r7, r1
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	801a      	strh	r2, [r3, #0]
 801ad58:	e018      	b.n	801ad8c <HAL_PCD_EP_DB_Transmit+0x560>
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	785b      	ldrb	r3, [r3, #1]
 801ad5e:	2b01      	cmp	r3, #1
 801ad60:	d114      	bne.n	801ad8c <HAL_PCD_EP_DB_Transmit+0x560>
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	2250      	movs	r2, #80	@ 0x50
 801ad68:	5a9b      	ldrh	r3, [r3, r2]
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	001a      	movs	r2, r3
 801ad6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad70:	189b      	adds	r3, r3, r2
 801ad72:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad74:	68bb      	ldr	r3, [r7, #8]
 801ad76:	781b      	ldrb	r3, [r3, #0]
 801ad78:	00da      	lsls	r2, r3, #3
 801ad7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad7c:	18d3      	adds	r3, r2, r3
 801ad7e:	4a75      	ldr	r2, [pc, #468]	@ (801af54 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad80:	4694      	mov	ip, r2
 801ad82:	4463      	add	r3, ip
 801ad84:	673b      	str	r3, [r7, #112]	@ 0x70
 801ad86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ad88:	2200      	movs	r2, #0
 801ad8a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801ad8c:	68bb      	ldr	r3, [r7, #8]
 801ad8e:	781a      	ldrb	r2, [r3, #0]
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	0011      	movs	r1, r2
 801ad94:	0018      	movs	r0, r3
 801ad96:	f008 fb59 	bl	802344c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ad9a:	1dbb      	adds	r3, r7, #6
 801ad9c:	881a      	ldrh	r2, [r3, #0]
 801ad9e:	2380      	movs	r3, #128	@ 0x80
 801ada0:	01db      	lsls	r3, r3, #7
 801ada2:	4013      	ands	r3, r2
 801ada4:	d000      	beq.n	801ada8 <HAL_PCD_EP_DB_Transmit+0x57c>
 801ada6:	e11e      	b.n	801afe6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	001a      	movs	r2, r3
 801adae:	68bb      	ldr	r3, [r7, #8]
 801adb0:	781b      	ldrb	r3, [r3, #0]
 801adb2:	009b      	lsls	r3, r3, #2
 801adb4:	18d3      	adds	r3, r2, r3
 801adb6:	881b      	ldrh	r3, [r3, #0]
 801adb8:	b29a      	uxth	r2, r3
 801adba:	2088      	movs	r0, #136	@ 0x88
 801adbc:	183b      	adds	r3, r7, r0
 801adbe:	4967      	ldr	r1, [pc, #412]	@ (801af5c <HAL_PCD_EP_DB_Transmit+0x730>)
 801adc0:	400a      	ands	r2, r1
 801adc2:	801a      	strh	r2, [r3, #0]
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	001a      	movs	r2, r3
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	781b      	ldrb	r3, [r3, #0]
 801adce:	009b      	lsls	r3, r3, #2
 801add0:	18d3      	adds	r3, r2, r3
 801add2:	183a      	adds	r2, r7, r0
 801add4:	8812      	ldrh	r2, [r2, #0]
 801add6:	4962      	ldr	r1, [pc, #392]	@ (801af60 <HAL_PCD_EP_DB_Transmit+0x734>)
 801add8:	430a      	orrs	r2, r1
 801adda:	b292      	uxth	r2, r2
 801addc:	801a      	strh	r2, [r3, #0]
 801adde:	e102      	b.n	801afe6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ade0:	1dbb      	adds	r3, r7, #6
 801ade2:	881a      	ldrh	r2, [r3, #0]
 801ade4:	2380      	movs	r3, #128	@ 0x80
 801ade6:	01db      	lsls	r3, r3, #7
 801ade8:	4013      	ands	r3, r2
 801adea:	d11a      	bne.n	801ae22 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	001a      	movs	r2, r3
 801adf2:	68bb      	ldr	r3, [r7, #8]
 801adf4:	781b      	ldrb	r3, [r3, #0]
 801adf6:	009b      	lsls	r3, r3, #2
 801adf8:	18d3      	adds	r3, r2, r3
 801adfa:	881b      	ldrh	r3, [r3, #0]
 801adfc:	b29a      	uxth	r2, r3
 801adfe:	204e      	movs	r0, #78	@ 0x4e
 801ae00:	183b      	adds	r3, r7, r0
 801ae02:	4956      	ldr	r1, [pc, #344]	@ (801af5c <HAL_PCD_EP_DB_Transmit+0x730>)
 801ae04:	400a      	ands	r2, r1
 801ae06:	801a      	strh	r2, [r3, #0]
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	001a      	movs	r2, r3
 801ae0e:	68bb      	ldr	r3, [r7, #8]
 801ae10:	781b      	ldrb	r3, [r3, #0]
 801ae12:	009b      	lsls	r3, r3, #2
 801ae14:	18d3      	adds	r3, r2, r3
 801ae16:	183a      	adds	r2, r7, r0
 801ae18:	8812      	ldrh	r2, [r2, #0]
 801ae1a:	4951      	ldr	r1, [pc, #324]	@ (801af60 <HAL_PCD_EP_DB_Transmit+0x734>)
 801ae1c:	430a      	orrs	r2, r1
 801ae1e:	b292      	uxth	r2, r2
 801ae20:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801ae22:	68bb      	ldr	r3, [r7, #8]
 801ae24:	2224      	movs	r2, #36	@ 0x24
 801ae26:	5c9b      	ldrb	r3, [r3, r2]
 801ae28:	2b01      	cmp	r3, #1
 801ae2a:	d000      	beq.n	801ae2e <HAL_PCD_EP_DB_Transmit+0x602>
 801ae2c:	e0db      	b.n	801afe6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801ae2e:	68bb      	ldr	r3, [r7, #8]
 801ae30:	695a      	ldr	r2, [r3, #20]
 801ae32:	2186      	movs	r1, #134	@ 0x86
 801ae34:	187b      	adds	r3, r7, r1
 801ae36:	881b      	ldrh	r3, [r3, #0]
 801ae38:	18d2      	adds	r2, r2, r3
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	69da      	ldr	r2, [r3, #28]
 801ae42:	187b      	adds	r3, r7, r1
 801ae44:	881b      	ldrh	r3, [r3, #0]
 801ae46:	18d2      	adds	r2, r2, r3
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801ae4c:	68bb      	ldr	r3, [r7, #8]
 801ae4e:	6a1a      	ldr	r2, [r3, #32]
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	691b      	ldr	r3, [r3, #16]
 801ae54:	429a      	cmp	r2, r3
 801ae56:	d30c      	bcc.n	801ae72 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801ae58:	68bb      	ldr	r3, [r7, #8]
 801ae5a:	691b      	ldr	r3, [r3, #16]
 801ae5c:	218c      	movs	r1, #140	@ 0x8c
 801ae5e:	187a      	adds	r2, r7, r1
 801ae60:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801ae62:	68bb      	ldr	r3, [r7, #8]
 801ae64:	6a1a      	ldr	r2, [r3, #32]
 801ae66:	187b      	adds	r3, r7, r1
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	1ad2      	subs	r2, r2, r3
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	621a      	str	r2, [r3, #32]
 801ae70:	e01a      	b.n	801aea8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	6a1b      	ldr	r3, [r3, #32]
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d10a      	bne.n	801ae90 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801ae7a:	2386      	movs	r3, #134	@ 0x86
 801ae7c:	18fb      	adds	r3, r7, r3
 801ae7e:	881b      	ldrh	r3, [r3, #0]
 801ae80:	228c      	movs	r2, #140	@ 0x8c
 801ae82:	18ba      	adds	r2, r7, r2
 801ae84:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ae86:	68bb      	ldr	r3, [r7, #8]
 801ae88:	2224      	movs	r2, #36	@ 0x24
 801ae8a:	2100      	movs	r1, #0
 801ae8c:	5499      	strb	r1, [r3, r2]
 801ae8e:	e00b      	b.n	801aea8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801ae90:	68bb      	ldr	r3, [r7, #8]
 801ae92:	6a1b      	ldr	r3, [r3, #32]
 801ae94:	228c      	movs	r2, #140	@ 0x8c
 801ae96:	18ba      	adds	r2, r7, r2
 801ae98:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	2200      	movs	r2, #0
 801ae9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801aea0:	68bb      	ldr	r3, [r7, #8]
 801aea2:	2224      	movs	r2, #36	@ 0x24
 801aea4:	2100      	movs	r1, #0
 801aea6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	657b      	str	r3, [r7, #84]	@ 0x54
 801aeae:	68bb      	ldr	r3, [r7, #8]
 801aeb0:	785b      	ldrb	r3, [r3, #1]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d000      	beq.n	801aeb8 <HAL_PCD_EP_DB_Transmit+0x68c>
 801aeb6:	e06e      	b.n	801af96 <HAL_PCD_EP_DB_Transmit+0x76a>
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	2250      	movs	r2, #80	@ 0x50
 801aec4:	5a9b      	ldrh	r3, [r3, r2]
 801aec6:	b29b      	uxth	r3, r3
 801aec8:	001a      	movs	r2, r3
 801aeca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aecc:	189b      	adds	r3, r3, r2
 801aece:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aed0:	68bb      	ldr	r3, [r7, #8]
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	00da      	lsls	r2, r3, #3
 801aed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aed8:	18d3      	adds	r3, r2, r3
 801aeda:	4a1e      	ldr	r2, [pc, #120]	@ (801af54 <HAL_PCD_EP_DB_Transmit+0x728>)
 801aedc:	4694      	mov	ip, r2
 801aede:	4463      	add	r3, ip
 801aee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aee4:	881b      	ldrh	r3, [r3, #0]
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	059b      	lsls	r3, r3, #22
 801aeea:	0d9b      	lsrs	r3, r3, #22
 801aeec:	b29a      	uxth	r2, r3
 801aeee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aef0:	801a      	strh	r2, [r3, #0]
 801aef2:	228c      	movs	r2, #140	@ 0x8c
 801aef4:	18bb      	adds	r3, r7, r2
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2b3e      	cmp	r3, #62	@ 0x3e
 801aefa:	d91a      	bls.n	801af32 <HAL_PCD_EP_DB_Transmit+0x706>
 801aefc:	18bb      	adds	r3, r7, r2
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	095b      	lsrs	r3, r3, #5
 801af02:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af04:	18bb      	adds	r3, r7, r2
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	221f      	movs	r2, #31
 801af0a:	4013      	ands	r3, r2
 801af0c:	d102      	bne.n	801af14 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801af0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af10:	3b01      	subs	r3, #1
 801af12:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af16:	881b      	ldrh	r3, [r3, #0]
 801af18:	b29a      	uxth	r2, r3
 801af1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af1c:	b29b      	uxth	r3, r3
 801af1e:	029b      	lsls	r3, r3, #10
 801af20:	b29b      	uxth	r3, r3
 801af22:	4313      	orrs	r3, r2
 801af24:	b29b      	uxth	r3, r3
 801af26:	4a0c      	ldr	r2, [pc, #48]	@ (801af58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801af28:	4313      	orrs	r3, r2
 801af2a:	b29a      	uxth	r2, r3
 801af2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af2e:	801a      	strh	r2, [r3, #0]
 801af30:	e04d      	b.n	801afce <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af32:	238c      	movs	r3, #140	@ 0x8c
 801af34:	18fb      	adds	r3, r7, r3
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d113      	bne.n	801af64 <HAL_PCD_EP_DB_Transmit+0x738>
 801af3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af3e:	881b      	ldrh	r3, [r3, #0]
 801af40:	b29b      	uxth	r3, r3
 801af42:	4a05      	ldr	r2, [pc, #20]	@ (801af58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801af44:	4313      	orrs	r3, r2
 801af46:	b29a      	uxth	r2, r3
 801af48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af4a:	801a      	strh	r2, [r3, #0]
 801af4c:	e03f      	b.n	801afce <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af4e:	46c0      	nop			@ (mov r8, r8)
 801af50:	00000402 	.word	0x00000402
 801af54:	00000406 	.word	0x00000406
 801af58:	ffff8000 	.word	0xffff8000
 801af5c:	ffff8f8f 	.word	0xffff8f8f
 801af60:	ffffc080 	.word	0xffffc080
 801af64:	228c      	movs	r2, #140	@ 0x8c
 801af66:	18bb      	adds	r3, r7, r2
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	085b      	lsrs	r3, r3, #1
 801af6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af6e:	18bb      	adds	r3, r7, r2
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	2201      	movs	r2, #1
 801af74:	4013      	ands	r3, r2
 801af76:	d002      	beq.n	801af7e <HAL_PCD_EP_DB_Transmit+0x752>
 801af78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af7a:	3301      	adds	r3, #1
 801af7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af80:	881b      	ldrh	r3, [r3, #0]
 801af82:	b29a      	uxth	r2, r3
 801af84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af86:	b29b      	uxth	r3, r3
 801af88:	029b      	lsls	r3, r3, #10
 801af8a:	b29b      	uxth	r3, r3
 801af8c:	4313      	orrs	r3, r2
 801af8e:	b29a      	uxth	r2, r3
 801af90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af92:	801a      	strh	r2, [r3, #0]
 801af94:	e01b      	b.n	801afce <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af96:	68bb      	ldr	r3, [r7, #8]
 801af98:	785b      	ldrb	r3, [r3, #1]
 801af9a:	2b01      	cmp	r3, #1
 801af9c:	d117      	bne.n	801afce <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	2250      	movs	r2, #80	@ 0x50
 801afa4:	5a9b      	ldrh	r3, [r3, r2]
 801afa6:	b29b      	uxth	r3, r3
 801afa8:	001a      	movs	r2, r3
 801afaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801afac:	189b      	adds	r3, r3, r2
 801afae:	657b      	str	r3, [r7, #84]	@ 0x54
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	781b      	ldrb	r3, [r3, #0]
 801afb4:	00da      	lsls	r2, r3, #3
 801afb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801afb8:	18d3      	adds	r3, r2, r3
 801afba:	4a21      	ldr	r2, [pc, #132]	@ (801b040 <HAL_PCD_EP_DB_Transmit+0x814>)
 801afbc:	4694      	mov	ip, r2
 801afbe:	4463      	add	r3, ip
 801afc0:	653b      	str	r3, [r7, #80]	@ 0x50
 801afc2:	238c      	movs	r3, #140	@ 0x8c
 801afc4:	18fb      	adds	r3, r7, r3
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	b29a      	uxth	r2, r3
 801afca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801afcc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	6818      	ldr	r0, [r3, #0]
 801afd2:	68bb      	ldr	r3, [r7, #8]
 801afd4:	6959      	ldr	r1, [r3, #20]
 801afd6:	68bb      	ldr	r3, [r7, #8]
 801afd8:	895a      	ldrh	r2, [r3, #10]
 801afda:	238c      	movs	r3, #140	@ 0x8c
 801afdc:	18fb      	adds	r3, r7, r3
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	b29b      	uxth	r3, r3
 801afe2:	f006 f9a1 	bl	8021328 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	001a      	movs	r2, r3
 801afec:	68bb      	ldr	r3, [r7, #8]
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	009b      	lsls	r3, r3, #2
 801aff2:	18d3      	adds	r3, r2, r3
 801aff4:	881b      	ldrh	r3, [r3, #0]
 801aff6:	b29a      	uxth	r2, r3
 801aff8:	2014      	movs	r0, #20
 801affa:	183b      	adds	r3, r7, r0
 801affc:	4911      	ldr	r1, [pc, #68]	@ (801b044 <HAL_PCD_EP_DB_Transmit+0x818>)
 801affe:	400a      	ands	r2, r1
 801b000:	801a      	strh	r2, [r3, #0]
 801b002:	183b      	adds	r3, r7, r0
 801b004:	183a      	adds	r2, r7, r0
 801b006:	8812      	ldrh	r2, [r2, #0]
 801b008:	2110      	movs	r1, #16
 801b00a:	404a      	eors	r2, r1
 801b00c:	801a      	strh	r2, [r3, #0]
 801b00e:	183b      	adds	r3, r7, r0
 801b010:	183a      	adds	r2, r7, r0
 801b012:	8812      	ldrh	r2, [r2, #0]
 801b014:	2120      	movs	r1, #32
 801b016:	404a      	eors	r2, r1
 801b018:	801a      	strh	r2, [r3, #0]
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	001a      	movs	r2, r3
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	781b      	ldrb	r3, [r3, #0]
 801b024:	009b      	lsls	r3, r3, #2
 801b026:	18d3      	adds	r3, r2, r3
 801b028:	183a      	adds	r2, r7, r0
 801b02a:	8812      	ldrh	r2, [r2, #0]
 801b02c:	4906      	ldr	r1, [pc, #24]	@ (801b048 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801b02e:	430a      	orrs	r2, r1
 801b030:	b292      	uxth	r2, r2
 801b032:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801b034:	2300      	movs	r3, #0
}
 801b036:	0018      	movs	r0, r3
 801b038:	46bd      	mov	sp, r7
 801b03a:	b024      	add	sp, #144	@ 0x90
 801b03c:	bd80      	pop	{r7, pc}
 801b03e:	46c0      	nop			@ (mov r8, r8)
 801b040:	00000406 	.word	0x00000406
 801b044:	ffff8fbf 	.word	0xffff8fbf
 801b048:	ffff8080 	.word	0xffff8080

0801b04c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801b04c:	b590      	push	{r4, r7, lr}
 801b04e:	b087      	sub	sp, #28
 801b050:	af00      	add	r7, sp, #0
 801b052:	60f8      	str	r0, [r7, #12]
 801b054:	0008      	movs	r0, r1
 801b056:	0011      	movs	r1, r2
 801b058:	607b      	str	r3, [r7, #4]
 801b05a:	240a      	movs	r4, #10
 801b05c:	193b      	adds	r3, r7, r4
 801b05e:	1c02      	adds	r2, r0, #0
 801b060:	801a      	strh	r2, [r3, #0]
 801b062:	2308      	movs	r3, #8
 801b064:	18fb      	adds	r3, r7, r3
 801b066:	1c0a      	adds	r2, r1, #0
 801b068:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801b06a:	0021      	movs	r1, r4
 801b06c:	187b      	adds	r3, r7, r1
 801b06e:	881b      	ldrh	r3, [r3, #0]
 801b070:	2280      	movs	r2, #128	@ 0x80
 801b072:	4013      	ands	r3, r2
 801b074:	b29b      	uxth	r3, r3
 801b076:	2b00      	cmp	r3, #0
 801b078:	d00c      	beq.n	801b094 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b07a:	187b      	adds	r3, r7, r1
 801b07c:	881b      	ldrh	r3, [r3, #0]
 801b07e:	2207      	movs	r2, #7
 801b080:	4013      	ands	r3, r2
 801b082:	1c5a      	adds	r2, r3, #1
 801b084:	0013      	movs	r3, r2
 801b086:	009b      	lsls	r3, r3, #2
 801b088:	189b      	adds	r3, r3, r2
 801b08a:	00db      	lsls	r3, r3, #3
 801b08c:	68fa      	ldr	r2, [r7, #12]
 801b08e:	18d3      	adds	r3, r2, r3
 801b090:	617b      	str	r3, [r7, #20]
 801b092:	e00b      	b.n	801b0ac <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b094:	230a      	movs	r3, #10
 801b096:	18fb      	adds	r3, r7, r3
 801b098:	881a      	ldrh	r2, [r3, #0]
 801b09a:	0013      	movs	r3, r2
 801b09c:	009b      	lsls	r3, r3, #2
 801b09e:	189b      	adds	r3, r3, r2
 801b0a0:	00db      	lsls	r3, r3, #3
 801b0a2:	3369      	adds	r3, #105	@ 0x69
 801b0a4:	33ff      	adds	r3, #255	@ 0xff
 801b0a6:	68fa      	ldr	r2, [r7, #12]
 801b0a8:	18d3      	adds	r3, r2, r3
 801b0aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b0ac:	2308      	movs	r3, #8
 801b0ae:	18fb      	adds	r3, r7, r3
 801b0b0:	881b      	ldrh	r3, [r3, #0]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d107      	bne.n	801b0c6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b0b6:	697b      	ldr	r3, [r7, #20]
 801b0b8:	2200      	movs	r2, #0
 801b0ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	b29a      	uxth	r2, r3
 801b0c0:	697b      	ldr	r3, [r7, #20]
 801b0c2:	80da      	strh	r2, [r3, #6]
 801b0c4:	e00b      	b.n	801b0de <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b0c6:	697b      	ldr	r3, [r7, #20]
 801b0c8:	2201      	movs	r2, #1
 801b0ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	b29a      	uxth	r2, r3
 801b0d0:	697b      	ldr	r3, [r7, #20]
 801b0d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	0c1b      	lsrs	r3, r3, #16
 801b0d8:	b29a      	uxth	r2, r3
 801b0da:	697b      	ldr	r3, [r7, #20]
 801b0dc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b0de:	2300      	movs	r3, #0
}
 801b0e0:	0018      	movs	r0, r3
 801b0e2:	46bd      	mov	sp, r7
 801b0e4:	b007      	add	sp, #28
 801b0e6:	bd90      	pop	{r4, r7, pc}

0801b0e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b0e8:	b580      	push	{r7, lr}
 801b0ea:	b084      	sub	sp, #16
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b0f6:	687a      	ldr	r2, [r7, #4]
 801b0f8:	23ba      	movs	r3, #186	@ 0xba
 801b0fa:	009b      	lsls	r3, r3, #2
 801b0fc:	2101      	movs	r1, #1
 801b0fe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b100:	687a      	ldr	r2, [r7, #4]
 801b102:	23b8      	movs	r3, #184	@ 0xb8
 801b104:	009b      	lsls	r3, r3, #2
 801b106:	2100      	movs	r1, #0
 801b108:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	2254      	movs	r2, #84	@ 0x54
 801b10e:	5a9b      	ldrh	r3, [r3, r2]
 801b110:	b29b      	uxth	r3, r3
 801b112:	2201      	movs	r2, #1
 801b114:	4313      	orrs	r3, r2
 801b116:	b299      	uxth	r1, r3
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	2254      	movs	r2, #84	@ 0x54
 801b11c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	2254      	movs	r2, #84	@ 0x54
 801b122:	5a9b      	ldrh	r3, [r3, r2]
 801b124:	b29b      	uxth	r3, r3
 801b126:	2202      	movs	r2, #2
 801b128:	4313      	orrs	r3, r2
 801b12a:	b299      	uxth	r1, r3
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	2254      	movs	r2, #84	@ 0x54
 801b130:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b132:	2300      	movs	r3, #0
}
 801b134:	0018      	movs	r0, r3
 801b136:	46bd      	mov	sp, r7
 801b138:	b004      	add	sp, #16
 801b13a:	bd80      	pop	{r7, pc}

0801b13c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b082      	sub	sp, #8
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
 801b144:	000a      	movs	r2, r1
 801b146:	1cfb      	adds	r3, r7, #3
 801b148:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b14a:	46c0      	nop			@ (mov r8, r8)
 801b14c:	46bd      	mov	sp, r7
 801b14e:	b002      	add	sp, #8
 801b150:	bd80      	pop	{r7, pc}
	...

0801b154 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b154:	b580      	push	{r7, lr}
 801b156:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b158:	4b04      	ldr	r3, [pc, #16]	@ (801b16c <HAL_PWR_EnableBkUpAccess+0x18>)
 801b15a:	681a      	ldr	r2, [r3, #0]
 801b15c:	4b03      	ldr	r3, [pc, #12]	@ (801b16c <HAL_PWR_EnableBkUpAccess+0x18>)
 801b15e:	2180      	movs	r1, #128	@ 0x80
 801b160:	0049      	lsls	r1, r1, #1
 801b162:	430a      	orrs	r2, r1
 801b164:	601a      	str	r2, [r3, #0]
}
 801b166:	46c0      	nop			@ (mov r8, r8)
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}
 801b16c:	40007000 	.word	0x40007000

0801b170 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b174:	4b04      	ldr	r3, [pc, #16]	@ (801b188 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b176:	681a      	ldr	r2, [r3, #0]
 801b178:	4b03      	ldr	r3, [pc, #12]	@ (801b188 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b17a:	4904      	ldr	r1, [pc, #16]	@ (801b18c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b17c:	400a      	ands	r2, r1
 801b17e:	601a      	str	r2, [r3, #0]
}
 801b180:	46c0      	nop			@ (mov r8, r8)
 801b182:	46bd      	mov	sp, r7
 801b184:	bd80      	pop	{r7, pc}
 801b186:	46c0      	nop			@ (mov r8, r8)
 801b188:	40007000 	.word	0x40007000
 801b18c:	fffffeff 	.word	0xfffffeff

0801b190 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b086      	sub	sp, #24
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
 801b198:	000a      	movs	r2, r1
 801b19a:	1cfb      	adds	r3, r7, #3
 801b19c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b19e:	2300      	movs	r3, #0
 801b1a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b1a2:	4b25      	ldr	r3, [pc, #148]	@ (801b238 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1a4:	681a      	ldr	r2, [r3, #0]
 801b1a6:	2380      	movs	r3, #128	@ 0x80
 801b1a8:	009b      	lsls	r3, r3, #2
 801b1aa:	4013      	ands	r3, r2
 801b1ac:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b1ae:	4b23      	ldr	r3, [pc, #140]	@ (801b23c <HAL_PWR_EnterSTOPMode+0xac>)
 801b1b0:	6a1b      	ldr	r3, [r3, #32]
 801b1b2:	2201      	movs	r2, #1
 801b1b4:	4013      	ands	r3, r2
 801b1b6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b1b8:	693b      	ldr	r3, [r7, #16]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d008      	beq.n	801b1d0 <HAL_PWR_EnterSTOPMode+0x40>
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d005      	beq.n	801b1d0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b1c4:	4b1c      	ldr	r3, [pc, #112]	@ (801b238 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1c6:	681a      	ldr	r2, [r3, #0]
 801b1c8:	4b1b      	ldr	r3, [pc, #108]	@ (801b238 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1ca:	491d      	ldr	r1, [pc, #116]	@ (801b240 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b1cc:	400a      	ands	r2, r1
 801b1ce:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b1d0:	4b19      	ldr	r3, [pc, #100]	@ (801b238 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b1d6:	697b      	ldr	r3, [r7, #20]
 801b1d8:	2203      	movs	r2, #3
 801b1da:	4393      	bics	r3, r2
 801b1dc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b1de:	697a      	ldr	r2, [r7, #20]
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	4313      	orrs	r3, r2
 801b1e4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b1e6:	4b14      	ldr	r3, [pc, #80]	@ (801b238 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1e8:	697a      	ldr	r2, [r7, #20]
 801b1ea:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b1ec:	4b15      	ldr	r3, [pc, #84]	@ (801b244 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b1ee:	691a      	ldr	r2, [r3, #16]
 801b1f0:	4b14      	ldr	r3, [pc, #80]	@ (801b244 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b1f2:	2104      	movs	r1, #4
 801b1f4:	430a      	orrs	r2, r1
 801b1f6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b1f8:	1cfb      	adds	r3, r7, #3
 801b1fa:	781b      	ldrb	r3, [r3, #0]
 801b1fc:	2b01      	cmp	r3, #1
 801b1fe:	d101      	bne.n	801b204 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b200:	bf30      	wfi
 801b202:	e002      	b.n	801b20a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b204:	bf40      	sev
    __WFE();
 801b206:	bf20      	wfe
    __WFE();
 801b208:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b20a:	4b0e      	ldr	r3, [pc, #56]	@ (801b244 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b20c:	691a      	ldr	r2, [r3, #16]
 801b20e:	4b0d      	ldr	r3, [pc, #52]	@ (801b244 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b210:	2104      	movs	r1, #4
 801b212:	438a      	bics	r2, r1
 801b214:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b216:	693b      	ldr	r3, [r7, #16]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d009      	beq.n	801b230 <HAL_PWR_EnterSTOPMode+0xa0>
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d006      	beq.n	801b230 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b222:	4b05      	ldr	r3, [pc, #20]	@ (801b238 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b224:	681a      	ldr	r2, [r3, #0]
 801b226:	4b04      	ldr	r3, [pc, #16]	@ (801b238 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b228:	2180      	movs	r1, #128	@ 0x80
 801b22a:	0089      	lsls	r1, r1, #2
 801b22c:	430a      	orrs	r2, r1
 801b22e:	601a      	str	r2, [r3, #0]
  }
}
 801b230:	46c0      	nop			@ (mov r8, r8)
 801b232:	46bd      	mov	sp, r7
 801b234:	b006      	add	sp, #24
 801b236:	bd80      	pop	{r7, pc}
 801b238:	40007000 	.word	0x40007000
 801b23c:	40010000 	.word	0x40010000
 801b240:	fffffdff 	.word	0xfffffdff
 801b244:	e000ed00 	.word	0xe000ed00

0801b248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b248:	b5b0      	push	{r4, r5, r7, lr}
 801b24a:	b08a      	sub	sp, #40	@ 0x28
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d102      	bne.n	801b25c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b256:	2301      	movs	r3, #1
 801b258:	f000 fbbf 	bl	801b9da <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b25c:	4bc9      	ldr	r3, [pc, #804]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b25e:	68db      	ldr	r3, [r3, #12]
 801b260:	220c      	movs	r2, #12
 801b262:	4013      	ands	r3, r2
 801b264:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b266:	4bc7      	ldr	r3, [pc, #796]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b268:	68da      	ldr	r2, [r3, #12]
 801b26a:	2380      	movs	r3, #128	@ 0x80
 801b26c:	025b      	lsls	r3, r3, #9
 801b26e:	4013      	ands	r3, r2
 801b270:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	2201      	movs	r2, #1
 801b278:	4013      	ands	r3, r2
 801b27a:	d100      	bne.n	801b27e <HAL_RCC_OscConfig+0x36>
 801b27c:	e07e      	b.n	801b37c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b27e:	69fb      	ldr	r3, [r7, #28]
 801b280:	2b08      	cmp	r3, #8
 801b282:	d007      	beq.n	801b294 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b284:	69fb      	ldr	r3, [r7, #28]
 801b286:	2b0c      	cmp	r3, #12
 801b288:	d112      	bne.n	801b2b0 <HAL_RCC_OscConfig+0x68>
 801b28a:	69ba      	ldr	r2, [r7, #24]
 801b28c:	2380      	movs	r3, #128	@ 0x80
 801b28e:	025b      	lsls	r3, r3, #9
 801b290:	429a      	cmp	r2, r3
 801b292:	d10d      	bne.n	801b2b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b294:	4bbb      	ldr	r3, [pc, #748]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	2380      	movs	r3, #128	@ 0x80
 801b29a:	029b      	lsls	r3, r3, #10
 801b29c:	4013      	ands	r3, r2
 801b29e:	d100      	bne.n	801b2a2 <HAL_RCC_OscConfig+0x5a>
 801b2a0:	e06b      	b.n	801b37a <HAL_RCC_OscConfig+0x132>
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	685b      	ldr	r3, [r3, #4]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d167      	bne.n	801b37a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b2aa:	2301      	movs	r3, #1
 801b2ac:	f000 fb95 	bl	801b9da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	685a      	ldr	r2, [r3, #4]
 801b2b4:	2380      	movs	r3, #128	@ 0x80
 801b2b6:	025b      	lsls	r3, r3, #9
 801b2b8:	429a      	cmp	r2, r3
 801b2ba:	d107      	bne.n	801b2cc <HAL_RCC_OscConfig+0x84>
 801b2bc:	4bb1      	ldr	r3, [pc, #708]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2be:	681a      	ldr	r2, [r3, #0]
 801b2c0:	4bb0      	ldr	r3, [pc, #704]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2c2:	2180      	movs	r1, #128	@ 0x80
 801b2c4:	0249      	lsls	r1, r1, #9
 801b2c6:	430a      	orrs	r2, r1
 801b2c8:	601a      	str	r2, [r3, #0]
 801b2ca:	e027      	b.n	801b31c <HAL_RCC_OscConfig+0xd4>
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	685a      	ldr	r2, [r3, #4]
 801b2d0:	23a0      	movs	r3, #160	@ 0xa0
 801b2d2:	02db      	lsls	r3, r3, #11
 801b2d4:	429a      	cmp	r2, r3
 801b2d6:	d10e      	bne.n	801b2f6 <HAL_RCC_OscConfig+0xae>
 801b2d8:	4baa      	ldr	r3, [pc, #680]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2da:	681a      	ldr	r2, [r3, #0]
 801b2dc:	4ba9      	ldr	r3, [pc, #676]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2de:	2180      	movs	r1, #128	@ 0x80
 801b2e0:	02c9      	lsls	r1, r1, #11
 801b2e2:	430a      	orrs	r2, r1
 801b2e4:	601a      	str	r2, [r3, #0]
 801b2e6:	4ba7      	ldr	r3, [pc, #668]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2e8:	681a      	ldr	r2, [r3, #0]
 801b2ea:	4ba6      	ldr	r3, [pc, #664]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2ec:	2180      	movs	r1, #128	@ 0x80
 801b2ee:	0249      	lsls	r1, r1, #9
 801b2f0:	430a      	orrs	r2, r1
 801b2f2:	601a      	str	r2, [r3, #0]
 801b2f4:	e012      	b.n	801b31c <HAL_RCC_OscConfig+0xd4>
 801b2f6:	4ba3      	ldr	r3, [pc, #652]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2f8:	681a      	ldr	r2, [r3, #0]
 801b2fa:	4ba2      	ldr	r3, [pc, #648]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b2fc:	49a2      	ldr	r1, [pc, #648]	@ (801b588 <HAL_RCC_OscConfig+0x340>)
 801b2fe:	400a      	ands	r2, r1
 801b300:	601a      	str	r2, [r3, #0]
 801b302:	4ba0      	ldr	r3, [pc, #640]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b304:	681a      	ldr	r2, [r3, #0]
 801b306:	2380      	movs	r3, #128	@ 0x80
 801b308:	025b      	lsls	r3, r3, #9
 801b30a:	4013      	ands	r3, r2
 801b30c:	60fb      	str	r3, [r7, #12]
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	4b9c      	ldr	r3, [pc, #624]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b312:	681a      	ldr	r2, [r3, #0]
 801b314:	4b9b      	ldr	r3, [pc, #620]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b316:	499d      	ldr	r1, [pc, #628]	@ (801b58c <HAL_RCC_OscConfig+0x344>)
 801b318:	400a      	ands	r2, r1
 801b31a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	685b      	ldr	r3, [r3, #4]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d015      	beq.n	801b350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b324:	f7f9 faf8 	bl	8014918 <HAL_GetTick>
 801b328:	0003      	movs	r3, r0
 801b32a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b32c:	e009      	b.n	801b342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b32e:	f7f9 faf3 	bl	8014918 <HAL_GetTick>
 801b332:	0002      	movs	r2, r0
 801b334:	697b      	ldr	r3, [r7, #20]
 801b336:	1ad3      	subs	r3, r2, r3
 801b338:	2b64      	cmp	r3, #100	@ 0x64
 801b33a:	d902      	bls.n	801b342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b33c:	2303      	movs	r3, #3
 801b33e:	f000 fb4c 	bl	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b342:	4b90      	ldr	r3, [pc, #576]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b344:	681a      	ldr	r2, [r3, #0]
 801b346:	2380      	movs	r3, #128	@ 0x80
 801b348:	029b      	lsls	r3, r3, #10
 801b34a:	4013      	ands	r3, r2
 801b34c:	d0ef      	beq.n	801b32e <HAL_RCC_OscConfig+0xe6>
 801b34e:	e015      	b.n	801b37c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b350:	f7f9 fae2 	bl	8014918 <HAL_GetTick>
 801b354:	0003      	movs	r3, r0
 801b356:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b358:	e008      	b.n	801b36c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b35a:	f7f9 fadd 	bl	8014918 <HAL_GetTick>
 801b35e:	0002      	movs	r2, r0
 801b360:	697b      	ldr	r3, [r7, #20]
 801b362:	1ad3      	subs	r3, r2, r3
 801b364:	2b64      	cmp	r3, #100	@ 0x64
 801b366:	d901      	bls.n	801b36c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b368:	2303      	movs	r3, #3
 801b36a:	e336      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b36c:	4b85      	ldr	r3, [pc, #532]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b36e:	681a      	ldr	r2, [r3, #0]
 801b370:	2380      	movs	r3, #128	@ 0x80
 801b372:	029b      	lsls	r3, r3, #10
 801b374:	4013      	ands	r3, r2
 801b376:	d1f0      	bne.n	801b35a <HAL_RCC_OscConfig+0x112>
 801b378:	e000      	b.n	801b37c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b37a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	2202      	movs	r2, #2
 801b382:	4013      	ands	r3, r2
 801b384:	d100      	bne.n	801b388 <HAL_RCC_OscConfig+0x140>
 801b386:	e099      	b.n	801b4bc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	68db      	ldr	r3, [r3, #12]
 801b38c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b390:	2220      	movs	r2, #32
 801b392:	4013      	ands	r3, r2
 801b394:	d009      	beq.n	801b3aa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b396:	4b7b      	ldr	r3, [pc, #492]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b398:	681a      	ldr	r2, [r3, #0]
 801b39a:	4b7a      	ldr	r3, [pc, #488]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b39c:	2120      	movs	r1, #32
 801b39e:	430a      	orrs	r2, r1
 801b3a0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3a4:	2220      	movs	r2, #32
 801b3a6:	4393      	bics	r3, r2
 801b3a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b3aa:	69fb      	ldr	r3, [r7, #28]
 801b3ac:	2b04      	cmp	r3, #4
 801b3ae:	d005      	beq.n	801b3bc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b3b0:	69fb      	ldr	r3, [r7, #28]
 801b3b2:	2b0c      	cmp	r3, #12
 801b3b4:	d13e      	bne.n	801b434 <HAL_RCC_OscConfig+0x1ec>
 801b3b6:	69bb      	ldr	r3, [r7, #24]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d13b      	bne.n	801b434 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b3bc:	4b71      	ldr	r3, [pc, #452]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	2204      	movs	r2, #4
 801b3c2:	4013      	ands	r3, r2
 801b3c4:	d004      	beq.n	801b3d0 <HAL_RCC_OscConfig+0x188>
 801b3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d101      	bne.n	801b3d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	e304      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b3d0:	4b6c      	ldr	r3, [pc, #432]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b3d2:	685b      	ldr	r3, [r3, #4]
 801b3d4:	4a6e      	ldr	r2, [pc, #440]	@ (801b590 <HAL_RCC_OscConfig+0x348>)
 801b3d6:	4013      	ands	r3, r2
 801b3d8:	0019      	movs	r1, r3
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	691b      	ldr	r3, [r3, #16]
 801b3de:	021a      	lsls	r2, r3, #8
 801b3e0:	4b68      	ldr	r3, [pc, #416]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b3e2:	430a      	orrs	r2, r1
 801b3e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b3e6:	4b67      	ldr	r3, [pc, #412]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	2209      	movs	r2, #9
 801b3ec:	4393      	bics	r3, r2
 801b3ee:	0019      	movs	r1, r3
 801b3f0:	4b64      	ldr	r3, [pc, #400]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b3f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b3f4:	430a      	orrs	r2, r1
 801b3f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b3f8:	f000 fc42 	bl	801bc80 <HAL_RCC_GetSysClockFreq>
 801b3fc:	0001      	movs	r1, r0
 801b3fe:	4b61      	ldr	r3, [pc, #388]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b400:	68db      	ldr	r3, [r3, #12]
 801b402:	091b      	lsrs	r3, r3, #4
 801b404:	220f      	movs	r2, #15
 801b406:	4013      	ands	r3, r2
 801b408:	4a62      	ldr	r2, [pc, #392]	@ (801b594 <HAL_RCC_OscConfig+0x34c>)
 801b40a:	5cd3      	ldrb	r3, [r2, r3]
 801b40c:	000a      	movs	r2, r1
 801b40e:	40da      	lsrs	r2, r3
 801b410:	4b61      	ldr	r3, [pc, #388]	@ (801b598 <HAL_RCC_OscConfig+0x350>)
 801b412:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b414:	4b61      	ldr	r3, [pc, #388]	@ (801b59c <HAL_RCC_OscConfig+0x354>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	2513      	movs	r5, #19
 801b41a:	197c      	adds	r4, r7, r5
 801b41c:	0018      	movs	r0, r3
 801b41e:	f7f9 fa35 	bl	801488c <HAL_InitTick>
 801b422:	0003      	movs	r3, r0
 801b424:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b426:	197b      	adds	r3, r7, r5
 801b428:	781b      	ldrb	r3, [r3, #0]
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d046      	beq.n	801b4bc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b42e:	197b      	adds	r3, r7, r5
 801b430:	781b      	ldrb	r3, [r3, #0]
 801b432:	e2d2      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b436:	2b00      	cmp	r3, #0
 801b438:	d027      	beq.n	801b48a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b43a:	4b52      	ldr	r3, [pc, #328]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	2209      	movs	r2, #9
 801b440:	4393      	bics	r3, r2
 801b442:	0019      	movs	r1, r3
 801b444:	4b4f      	ldr	r3, [pc, #316]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b448:	430a      	orrs	r2, r1
 801b44a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b44c:	f7f9 fa64 	bl	8014918 <HAL_GetTick>
 801b450:	0003      	movs	r3, r0
 801b452:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b454:	e008      	b.n	801b468 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b456:	f7f9 fa5f 	bl	8014918 <HAL_GetTick>
 801b45a:	0002      	movs	r2, r0
 801b45c:	697b      	ldr	r3, [r7, #20]
 801b45e:	1ad3      	subs	r3, r2, r3
 801b460:	2b02      	cmp	r3, #2
 801b462:	d901      	bls.n	801b468 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b464:	2303      	movs	r3, #3
 801b466:	e2b8      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b468:	4b46      	ldr	r3, [pc, #280]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	2204      	movs	r2, #4
 801b46e:	4013      	ands	r3, r2
 801b470:	d0f1      	beq.n	801b456 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b472:	4b44      	ldr	r3, [pc, #272]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b474:	685b      	ldr	r3, [r3, #4]
 801b476:	4a46      	ldr	r2, [pc, #280]	@ (801b590 <HAL_RCC_OscConfig+0x348>)
 801b478:	4013      	ands	r3, r2
 801b47a:	0019      	movs	r1, r3
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	691b      	ldr	r3, [r3, #16]
 801b480:	021a      	lsls	r2, r3, #8
 801b482:	4b40      	ldr	r3, [pc, #256]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b484:	430a      	orrs	r2, r1
 801b486:	605a      	str	r2, [r3, #4]
 801b488:	e018      	b.n	801b4bc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b48a:	4b3e      	ldr	r3, [pc, #248]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b48c:	681a      	ldr	r2, [r3, #0]
 801b48e:	4b3d      	ldr	r3, [pc, #244]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b490:	2101      	movs	r1, #1
 801b492:	438a      	bics	r2, r1
 801b494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b496:	f7f9 fa3f 	bl	8014918 <HAL_GetTick>
 801b49a:	0003      	movs	r3, r0
 801b49c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b49e:	e008      	b.n	801b4b2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b4a0:	f7f9 fa3a 	bl	8014918 <HAL_GetTick>
 801b4a4:	0002      	movs	r2, r0
 801b4a6:	697b      	ldr	r3, [r7, #20]
 801b4a8:	1ad3      	subs	r3, r2, r3
 801b4aa:	2b02      	cmp	r3, #2
 801b4ac:	d901      	bls.n	801b4b2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b4ae:	2303      	movs	r3, #3
 801b4b0:	e293      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b4b2:	4b34      	ldr	r3, [pc, #208]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	2204      	movs	r2, #4
 801b4b8:	4013      	ands	r3, r2
 801b4ba:	d1f1      	bne.n	801b4a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	2210      	movs	r2, #16
 801b4c2:	4013      	ands	r3, r2
 801b4c4:	d100      	bne.n	801b4c8 <HAL_RCC_OscConfig+0x280>
 801b4c6:	e0a2      	b.n	801b60e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b4c8:	69fb      	ldr	r3, [r7, #28]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d140      	bne.n	801b550 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b4ce:	4b2d      	ldr	r3, [pc, #180]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b4d0:	681a      	ldr	r2, [r3, #0]
 801b4d2:	2380      	movs	r3, #128	@ 0x80
 801b4d4:	009b      	lsls	r3, r3, #2
 801b4d6:	4013      	ands	r3, r2
 801b4d8:	d005      	beq.n	801b4e6 <HAL_RCC_OscConfig+0x29e>
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	69db      	ldr	r3, [r3, #28]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d101      	bne.n	801b4e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b4e2:	2301      	movs	r3, #1
 801b4e4:	e279      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b4e6:	4b27      	ldr	r3, [pc, #156]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b4e8:	685b      	ldr	r3, [r3, #4]
 801b4ea:	4a2d      	ldr	r2, [pc, #180]	@ (801b5a0 <HAL_RCC_OscConfig+0x358>)
 801b4ec:	4013      	ands	r3, r2
 801b4ee:	0019      	movs	r1, r3
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b4f4:	4b23      	ldr	r3, [pc, #140]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b4f6:	430a      	orrs	r2, r1
 801b4f8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b4fa:	4b22      	ldr	r3, [pc, #136]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	021b      	lsls	r3, r3, #8
 801b500:	0a19      	lsrs	r1, r3, #8
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6a1b      	ldr	r3, [r3, #32]
 801b506:	061a      	lsls	r2, r3, #24
 801b508:	4b1e      	ldr	r3, [pc, #120]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b50a:	430a      	orrs	r2, r1
 801b50c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b512:	0b5b      	lsrs	r3, r3, #13
 801b514:	3301      	adds	r3, #1
 801b516:	2280      	movs	r2, #128	@ 0x80
 801b518:	0212      	lsls	r2, r2, #8
 801b51a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b51c:	4b19      	ldr	r3, [pc, #100]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b51e:	68db      	ldr	r3, [r3, #12]
 801b520:	091b      	lsrs	r3, r3, #4
 801b522:	210f      	movs	r1, #15
 801b524:	400b      	ands	r3, r1
 801b526:	491b      	ldr	r1, [pc, #108]	@ (801b594 <HAL_RCC_OscConfig+0x34c>)
 801b528:	5ccb      	ldrb	r3, [r1, r3]
 801b52a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b52c:	4b1a      	ldr	r3, [pc, #104]	@ (801b598 <HAL_RCC_OscConfig+0x350>)
 801b52e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b530:	4b1a      	ldr	r3, [pc, #104]	@ (801b59c <HAL_RCC_OscConfig+0x354>)
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	2513      	movs	r5, #19
 801b536:	197c      	adds	r4, r7, r5
 801b538:	0018      	movs	r0, r3
 801b53a:	f7f9 f9a7 	bl	801488c <HAL_InitTick>
 801b53e:	0003      	movs	r3, r0
 801b540:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b542:	197b      	adds	r3, r7, r5
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	2b00      	cmp	r3, #0
 801b548:	d061      	beq.n	801b60e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b54a:	197b      	adds	r3, r7, r5
 801b54c:	781b      	ldrb	r3, [r3, #0]
 801b54e:	e244      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	69db      	ldr	r3, [r3, #28]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d040      	beq.n	801b5da <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b558:	4b0a      	ldr	r3, [pc, #40]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b55a:	681a      	ldr	r2, [r3, #0]
 801b55c:	4b09      	ldr	r3, [pc, #36]	@ (801b584 <HAL_RCC_OscConfig+0x33c>)
 801b55e:	2180      	movs	r1, #128	@ 0x80
 801b560:	0049      	lsls	r1, r1, #1
 801b562:	430a      	orrs	r2, r1
 801b564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b566:	f7f9 f9d7 	bl	8014918 <HAL_GetTick>
 801b56a:	0003      	movs	r3, r0
 801b56c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b56e:	e019      	b.n	801b5a4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b570:	f7f9 f9d2 	bl	8014918 <HAL_GetTick>
 801b574:	0002      	movs	r2, r0
 801b576:	697b      	ldr	r3, [r7, #20]
 801b578:	1ad3      	subs	r3, r2, r3
 801b57a:	2b02      	cmp	r3, #2
 801b57c:	d912      	bls.n	801b5a4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b57e:	2303      	movs	r3, #3
 801b580:	e22b      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
 801b582:	46c0      	nop			@ (mov r8, r8)
 801b584:	40021000 	.word	0x40021000
 801b588:	fffeffff 	.word	0xfffeffff
 801b58c:	fffbffff 	.word	0xfffbffff
 801b590:	ffffe0ff 	.word	0xffffe0ff
 801b594:	0802e520 	.word	0x0802e520
 801b598:	200000ec 	.word	0x200000ec
 801b59c:	200000fc 	.word	0x200000fc
 801b5a0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b5a4:	4bca      	ldr	r3, [pc, #808]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b5a6:	681a      	ldr	r2, [r3, #0]
 801b5a8:	2380      	movs	r3, #128	@ 0x80
 801b5aa:	009b      	lsls	r3, r3, #2
 801b5ac:	4013      	ands	r3, r2
 801b5ae:	d0df      	beq.n	801b570 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b5b0:	4bc7      	ldr	r3, [pc, #796]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b5b2:	685b      	ldr	r3, [r3, #4]
 801b5b4:	4ac7      	ldr	r2, [pc, #796]	@ (801b8d4 <HAL_RCC_OscConfig+0x68c>)
 801b5b6:	4013      	ands	r3, r2
 801b5b8:	0019      	movs	r1, r3
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b5be:	4bc4      	ldr	r3, [pc, #784]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b5c0:	430a      	orrs	r2, r1
 801b5c2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b5c4:	4bc2      	ldr	r3, [pc, #776]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b5c6:	685b      	ldr	r3, [r3, #4]
 801b5c8:	021b      	lsls	r3, r3, #8
 801b5ca:	0a19      	lsrs	r1, r3, #8
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	6a1b      	ldr	r3, [r3, #32]
 801b5d0:	061a      	lsls	r2, r3, #24
 801b5d2:	4bbf      	ldr	r3, [pc, #764]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b5d4:	430a      	orrs	r2, r1
 801b5d6:	605a      	str	r2, [r3, #4]
 801b5d8:	e019      	b.n	801b60e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b5da:	4bbd      	ldr	r3, [pc, #756]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b5dc:	681a      	ldr	r2, [r3, #0]
 801b5de:	4bbc      	ldr	r3, [pc, #752]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b5e0:	49bd      	ldr	r1, [pc, #756]	@ (801b8d8 <HAL_RCC_OscConfig+0x690>)
 801b5e2:	400a      	ands	r2, r1
 801b5e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b5e6:	f7f9 f997 	bl	8014918 <HAL_GetTick>
 801b5ea:	0003      	movs	r3, r0
 801b5ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b5ee:	e008      	b.n	801b602 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b5f0:	f7f9 f992 	bl	8014918 <HAL_GetTick>
 801b5f4:	0002      	movs	r2, r0
 801b5f6:	697b      	ldr	r3, [r7, #20]
 801b5f8:	1ad3      	subs	r3, r2, r3
 801b5fa:	2b02      	cmp	r3, #2
 801b5fc:	d901      	bls.n	801b602 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b5fe:	2303      	movs	r3, #3
 801b600:	e1eb      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b602:	4bb3      	ldr	r3, [pc, #716]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b604:	681a      	ldr	r2, [r3, #0]
 801b606:	2380      	movs	r3, #128	@ 0x80
 801b608:	009b      	lsls	r3, r3, #2
 801b60a:	4013      	ands	r3, r2
 801b60c:	d1f0      	bne.n	801b5f0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	2208      	movs	r2, #8
 801b614:	4013      	ands	r3, r2
 801b616:	d036      	beq.n	801b686 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	695b      	ldr	r3, [r3, #20]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d019      	beq.n	801b654 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b620:	4bab      	ldr	r3, [pc, #684]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b624:	4baa      	ldr	r3, [pc, #680]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b626:	2101      	movs	r1, #1
 801b628:	430a      	orrs	r2, r1
 801b62a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b62c:	f7f9 f974 	bl	8014918 <HAL_GetTick>
 801b630:	0003      	movs	r3, r0
 801b632:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b634:	e008      	b.n	801b648 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b636:	f7f9 f96f 	bl	8014918 <HAL_GetTick>
 801b63a:	0002      	movs	r2, r0
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	1ad3      	subs	r3, r2, r3
 801b640:	2b02      	cmp	r3, #2
 801b642:	d901      	bls.n	801b648 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b644:	2303      	movs	r3, #3
 801b646:	e1c8      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b648:	4ba1      	ldr	r3, [pc, #644]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b64a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b64c:	2202      	movs	r2, #2
 801b64e:	4013      	ands	r3, r2
 801b650:	d0f1      	beq.n	801b636 <HAL_RCC_OscConfig+0x3ee>
 801b652:	e018      	b.n	801b686 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b654:	4b9e      	ldr	r3, [pc, #632]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b658:	4b9d      	ldr	r3, [pc, #628]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b65a:	2101      	movs	r1, #1
 801b65c:	438a      	bics	r2, r1
 801b65e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b660:	f7f9 f95a 	bl	8014918 <HAL_GetTick>
 801b664:	0003      	movs	r3, r0
 801b666:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b668:	e008      	b.n	801b67c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b66a:	f7f9 f955 	bl	8014918 <HAL_GetTick>
 801b66e:	0002      	movs	r2, r0
 801b670:	697b      	ldr	r3, [r7, #20]
 801b672:	1ad3      	subs	r3, r2, r3
 801b674:	2b02      	cmp	r3, #2
 801b676:	d901      	bls.n	801b67c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b678:	2303      	movs	r3, #3
 801b67a:	e1ae      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b67c:	4b94      	ldr	r3, [pc, #592]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b680:	2202      	movs	r2, #2
 801b682:	4013      	ands	r3, r2
 801b684:	d1f1      	bne.n	801b66a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	2204      	movs	r2, #4
 801b68c:	4013      	ands	r3, r2
 801b68e:	d100      	bne.n	801b692 <HAL_RCC_OscConfig+0x44a>
 801b690:	e0ae      	b.n	801b7f0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b692:	2023      	movs	r0, #35	@ 0x23
 801b694:	183b      	adds	r3, r7, r0
 801b696:	2200      	movs	r2, #0
 801b698:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b69a:	4b8d      	ldr	r3, [pc, #564]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b69e:	2380      	movs	r3, #128	@ 0x80
 801b6a0:	055b      	lsls	r3, r3, #21
 801b6a2:	4013      	ands	r3, r2
 801b6a4:	d109      	bne.n	801b6ba <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b6a6:	4b8a      	ldr	r3, [pc, #552]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b6a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b6aa:	4b89      	ldr	r3, [pc, #548]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b6ac:	2180      	movs	r1, #128	@ 0x80
 801b6ae:	0549      	lsls	r1, r1, #21
 801b6b0:	430a      	orrs	r2, r1
 801b6b2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b6b4:	183b      	adds	r3, r7, r0
 801b6b6:	2201      	movs	r2, #1
 801b6b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b6ba:	4b88      	ldr	r3, [pc, #544]	@ (801b8dc <HAL_RCC_OscConfig+0x694>)
 801b6bc:	681a      	ldr	r2, [r3, #0]
 801b6be:	2380      	movs	r3, #128	@ 0x80
 801b6c0:	005b      	lsls	r3, r3, #1
 801b6c2:	4013      	ands	r3, r2
 801b6c4:	d11a      	bne.n	801b6fc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b6c6:	4b85      	ldr	r3, [pc, #532]	@ (801b8dc <HAL_RCC_OscConfig+0x694>)
 801b6c8:	681a      	ldr	r2, [r3, #0]
 801b6ca:	4b84      	ldr	r3, [pc, #528]	@ (801b8dc <HAL_RCC_OscConfig+0x694>)
 801b6cc:	2180      	movs	r1, #128	@ 0x80
 801b6ce:	0049      	lsls	r1, r1, #1
 801b6d0:	430a      	orrs	r2, r1
 801b6d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b6d4:	f7f9 f920 	bl	8014918 <HAL_GetTick>
 801b6d8:	0003      	movs	r3, r0
 801b6da:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b6dc:	e008      	b.n	801b6f0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b6de:	f7f9 f91b 	bl	8014918 <HAL_GetTick>
 801b6e2:	0002      	movs	r2, r0
 801b6e4:	697b      	ldr	r3, [r7, #20]
 801b6e6:	1ad3      	subs	r3, r2, r3
 801b6e8:	2b64      	cmp	r3, #100	@ 0x64
 801b6ea:	d901      	bls.n	801b6f0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b6ec:	2303      	movs	r3, #3
 801b6ee:	e174      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b6f0:	4b7a      	ldr	r3, [pc, #488]	@ (801b8dc <HAL_RCC_OscConfig+0x694>)
 801b6f2:	681a      	ldr	r2, [r3, #0]
 801b6f4:	2380      	movs	r3, #128	@ 0x80
 801b6f6:	005b      	lsls	r3, r3, #1
 801b6f8:	4013      	ands	r3, r2
 801b6fa:	d0f0      	beq.n	801b6de <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	689a      	ldr	r2, [r3, #8]
 801b700:	2380      	movs	r3, #128	@ 0x80
 801b702:	005b      	lsls	r3, r3, #1
 801b704:	429a      	cmp	r2, r3
 801b706:	d107      	bne.n	801b718 <HAL_RCC_OscConfig+0x4d0>
 801b708:	4b71      	ldr	r3, [pc, #452]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b70a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b70c:	4b70      	ldr	r3, [pc, #448]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b70e:	2180      	movs	r1, #128	@ 0x80
 801b710:	0049      	lsls	r1, r1, #1
 801b712:	430a      	orrs	r2, r1
 801b714:	651a      	str	r2, [r3, #80]	@ 0x50
 801b716:	e031      	b.n	801b77c <HAL_RCC_OscConfig+0x534>
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	689b      	ldr	r3, [r3, #8]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d10c      	bne.n	801b73a <HAL_RCC_OscConfig+0x4f2>
 801b720:	4b6b      	ldr	r3, [pc, #428]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b722:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b724:	4b6a      	ldr	r3, [pc, #424]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b726:	496c      	ldr	r1, [pc, #432]	@ (801b8d8 <HAL_RCC_OscConfig+0x690>)
 801b728:	400a      	ands	r2, r1
 801b72a:	651a      	str	r2, [r3, #80]	@ 0x50
 801b72c:	4b68      	ldr	r3, [pc, #416]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b72e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b730:	4b67      	ldr	r3, [pc, #412]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b732:	496b      	ldr	r1, [pc, #428]	@ (801b8e0 <HAL_RCC_OscConfig+0x698>)
 801b734:	400a      	ands	r2, r1
 801b736:	651a      	str	r2, [r3, #80]	@ 0x50
 801b738:	e020      	b.n	801b77c <HAL_RCC_OscConfig+0x534>
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	689a      	ldr	r2, [r3, #8]
 801b73e:	23a0      	movs	r3, #160	@ 0xa0
 801b740:	00db      	lsls	r3, r3, #3
 801b742:	429a      	cmp	r2, r3
 801b744:	d10e      	bne.n	801b764 <HAL_RCC_OscConfig+0x51c>
 801b746:	4b62      	ldr	r3, [pc, #392]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b74a:	4b61      	ldr	r3, [pc, #388]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b74c:	2180      	movs	r1, #128	@ 0x80
 801b74e:	00c9      	lsls	r1, r1, #3
 801b750:	430a      	orrs	r2, r1
 801b752:	651a      	str	r2, [r3, #80]	@ 0x50
 801b754:	4b5e      	ldr	r3, [pc, #376]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b758:	4b5d      	ldr	r3, [pc, #372]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b75a:	2180      	movs	r1, #128	@ 0x80
 801b75c:	0049      	lsls	r1, r1, #1
 801b75e:	430a      	orrs	r2, r1
 801b760:	651a      	str	r2, [r3, #80]	@ 0x50
 801b762:	e00b      	b.n	801b77c <HAL_RCC_OscConfig+0x534>
 801b764:	4b5a      	ldr	r3, [pc, #360]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b766:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b768:	4b59      	ldr	r3, [pc, #356]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b76a:	495b      	ldr	r1, [pc, #364]	@ (801b8d8 <HAL_RCC_OscConfig+0x690>)
 801b76c:	400a      	ands	r2, r1
 801b76e:	651a      	str	r2, [r3, #80]	@ 0x50
 801b770:	4b57      	ldr	r3, [pc, #348]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b774:	4b56      	ldr	r3, [pc, #344]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b776:	495a      	ldr	r1, [pc, #360]	@ (801b8e0 <HAL_RCC_OscConfig+0x698>)
 801b778:	400a      	ands	r2, r1
 801b77a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	689b      	ldr	r3, [r3, #8]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d015      	beq.n	801b7b0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b784:	f7f9 f8c8 	bl	8014918 <HAL_GetTick>
 801b788:	0003      	movs	r3, r0
 801b78a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b78c:	e009      	b.n	801b7a2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b78e:	f7f9 f8c3 	bl	8014918 <HAL_GetTick>
 801b792:	0002      	movs	r2, r0
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	1ad3      	subs	r3, r2, r3
 801b798:	4a52      	ldr	r2, [pc, #328]	@ (801b8e4 <HAL_RCC_OscConfig+0x69c>)
 801b79a:	4293      	cmp	r3, r2
 801b79c:	d901      	bls.n	801b7a2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b79e:	2303      	movs	r3, #3
 801b7a0:	e11b      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b7a2:	4b4b      	ldr	r3, [pc, #300]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b7a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7a6:	2380      	movs	r3, #128	@ 0x80
 801b7a8:	009b      	lsls	r3, r3, #2
 801b7aa:	4013      	ands	r3, r2
 801b7ac:	d0ef      	beq.n	801b78e <HAL_RCC_OscConfig+0x546>
 801b7ae:	e014      	b.n	801b7da <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b7b0:	f7f9 f8b2 	bl	8014918 <HAL_GetTick>
 801b7b4:	0003      	movs	r3, r0
 801b7b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b7b8:	e009      	b.n	801b7ce <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b7ba:	f7f9 f8ad 	bl	8014918 <HAL_GetTick>
 801b7be:	0002      	movs	r2, r0
 801b7c0:	697b      	ldr	r3, [r7, #20]
 801b7c2:	1ad3      	subs	r3, r2, r3
 801b7c4:	4a47      	ldr	r2, [pc, #284]	@ (801b8e4 <HAL_RCC_OscConfig+0x69c>)
 801b7c6:	4293      	cmp	r3, r2
 801b7c8:	d901      	bls.n	801b7ce <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b7ca:	2303      	movs	r3, #3
 801b7cc:	e105      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b7ce:	4b40      	ldr	r3, [pc, #256]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b7d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7d2:	2380      	movs	r3, #128	@ 0x80
 801b7d4:	009b      	lsls	r3, r3, #2
 801b7d6:	4013      	ands	r3, r2
 801b7d8:	d1ef      	bne.n	801b7ba <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b7da:	2323      	movs	r3, #35	@ 0x23
 801b7dc:	18fb      	adds	r3, r7, r3
 801b7de:	781b      	ldrb	r3, [r3, #0]
 801b7e0:	2b01      	cmp	r3, #1
 801b7e2:	d105      	bne.n	801b7f0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b7e4:	4b3a      	ldr	r3, [pc, #232]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b7e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b7e8:	4b39      	ldr	r3, [pc, #228]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b7ea:	493f      	ldr	r1, [pc, #252]	@ (801b8e8 <HAL_RCC_OscConfig+0x6a0>)
 801b7ec:	400a      	ands	r2, r1
 801b7ee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	2220      	movs	r2, #32
 801b7f6:	4013      	ands	r3, r2
 801b7f8:	d049      	beq.n	801b88e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	699b      	ldr	r3, [r3, #24]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d026      	beq.n	801b850 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b802:	4b33      	ldr	r3, [pc, #204]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b804:	689a      	ldr	r2, [r3, #8]
 801b806:	4b32      	ldr	r3, [pc, #200]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b808:	2101      	movs	r1, #1
 801b80a:	430a      	orrs	r2, r1
 801b80c:	609a      	str	r2, [r3, #8]
 801b80e:	4b30      	ldr	r3, [pc, #192]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b812:	4b2f      	ldr	r3, [pc, #188]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b814:	2101      	movs	r1, #1
 801b816:	430a      	orrs	r2, r1
 801b818:	635a      	str	r2, [r3, #52]	@ 0x34
 801b81a:	4b34      	ldr	r3, [pc, #208]	@ (801b8ec <HAL_RCC_OscConfig+0x6a4>)
 801b81c:	6a1a      	ldr	r2, [r3, #32]
 801b81e:	4b33      	ldr	r3, [pc, #204]	@ (801b8ec <HAL_RCC_OscConfig+0x6a4>)
 801b820:	2180      	movs	r1, #128	@ 0x80
 801b822:	0189      	lsls	r1, r1, #6
 801b824:	430a      	orrs	r2, r1
 801b826:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b828:	f7f9 f876 	bl	8014918 <HAL_GetTick>
 801b82c:	0003      	movs	r3, r0
 801b82e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b830:	e008      	b.n	801b844 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b832:	f7f9 f871 	bl	8014918 <HAL_GetTick>
 801b836:	0002      	movs	r2, r0
 801b838:	697b      	ldr	r3, [r7, #20]
 801b83a:	1ad3      	subs	r3, r2, r3
 801b83c:	2b02      	cmp	r3, #2
 801b83e:	d901      	bls.n	801b844 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b840:	2303      	movs	r3, #3
 801b842:	e0ca      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b844:	4b22      	ldr	r3, [pc, #136]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b846:	689b      	ldr	r3, [r3, #8]
 801b848:	2202      	movs	r2, #2
 801b84a:	4013      	ands	r3, r2
 801b84c:	d0f1      	beq.n	801b832 <HAL_RCC_OscConfig+0x5ea>
 801b84e:	e01e      	b.n	801b88e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b850:	4b1f      	ldr	r3, [pc, #124]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b852:	689a      	ldr	r2, [r3, #8]
 801b854:	4b1e      	ldr	r3, [pc, #120]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b856:	2101      	movs	r1, #1
 801b858:	438a      	bics	r2, r1
 801b85a:	609a      	str	r2, [r3, #8]
 801b85c:	4b23      	ldr	r3, [pc, #140]	@ (801b8ec <HAL_RCC_OscConfig+0x6a4>)
 801b85e:	6a1a      	ldr	r2, [r3, #32]
 801b860:	4b22      	ldr	r3, [pc, #136]	@ (801b8ec <HAL_RCC_OscConfig+0x6a4>)
 801b862:	4923      	ldr	r1, [pc, #140]	@ (801b8f0 <HAL_RCC_OscConfig+0x6a8>)
 801b864:	400a      	ands	r2, r1
 801b866:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b868:	f7f9 f856 	bl	8014918 <HAL_GetTick>
 801b86c:	0003      	movs	r3, r0
 801b86e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b870:	e008      	b.n	801b884 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b872:	f7f9 f851 	bl	8014918 <HAL_GetTick>
 801b876:	0002      	movs	r2, r0
 801b878:	697b      	ldr	r3, [r7, #20]
 801b87a:	1ad3      	subs	r3, r2, r3
 801b87c:	2b02      	cmp	r3, #2
 801b87e:	d901      	bls.n	801b884 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b880:	2303      	movs	r3, #3
 801b882:	e0aa      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b884:	4b12      	ldr	r3, [pc, #72]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b886:	689b      	ldr	r3, [r3, #8]
 801b888:	2202      	movs	r2, #2
 801b88a:	4013      	ands	r3, r2
 801b88c:	d1f1      	bne.n	801b872 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b892:	2b00      	cmp	r3, #0
 801b894:	d100      	bne.n	801b898 <HAL_RCC_OscConfig+0x650>
 801b896:	e09f      	b.n	801b9d8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b898:	69fb      	ldr	r3, [r7, #28]
 801b89a:	2b0c      	cmp	r3, #12
 801b89c:	d100      	bne.n	801b8a0 <HAL_RCC_OscConfig+0x658>
 801b89e:	e078      	b.n	801b992 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8a4:	2b02      	cmp	r3, #2
 801b8a6:	d159      	bne.n	801b95c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b8a8:	4b09      	ldr	r3, [pc, #36]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b8aa:	681a      	ldr	r2, [r3, #0]
 801b8ac:	4b08      	ldr	r3, [pc, #32]	@ (801b8d0 <HAL_RCC_OscConfig+0x688>)
 801b8ae:	4911      	ldr	r1, [pc, #68]	@ (801b8f4 <HAL_RCC_OscConfig+0x6ac>)
 801b8b0:	400a      	ands	r2, r1
 801b8b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8b4:	f7f9 f830 	bl	8014918 <HAL_GetTick>
 801b8b8:	0003      	movs	r3, r0
 801b8ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b8bc:	e01c      	b.n	801b8f8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b8be:	f7f9 f82b 	bl	8014918 <HAL_GetTick>
 801b8c2:	0002      	movs	r2, r0
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	1ad3      	subs	r3, r2, r3
 801b8c8:	2b02      	cmp	r3, #2
 801b8ca:	d915      	bls.n	801b8f8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b8cc:	2303      	movs	r3, #3
 801b8ce:	e084      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
 801b8d0:	40021000 	.word	0x40021000
 801b8d4:	ffff1fff 	.word	0xffff1fff
 801b8d8:	fffffeff 	.word	0xfffffeff
 801b8dc:	40007000 	.word	0x40007000
 801b8e0:	fffffbff 	.word	0xfffffbff
 801b8e4:	00001388 	.word	0x00001388
 801b8e8:	efffffff 	.word	0xefffffff
 801b8ec:	40010000 	.word	0x40010000
 801b8f0:	ffffdfff 	.word	0xffffdfff
 801b8f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b8f8:	4b3a      	ldr	r3, [pc, #232]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b8fa:	681a      	ldr	r2, [r3, #0]
 801b8fc:	2380      	movs	r3, #128	@ 0x80
 801b8fe:	049b      	lsls	r3, r3, #18
 801b900:	4013      	ands	r3, r2
 801b902:	d1dc      	bne.n	801b8be <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b904:	4b37      	ldr	r3, [pc, #220]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b906:	68db      	ldr	r3, [r3, #12]
 801b908:	4a37      	ldr	r2, [pc, #220]	@ (801b9e8 <HAL_RCC_OscConfig+0x7a0>)
 801b90a:	4013      	ands	r3, r2
 801b90c:	0019      	movs	r1, r3
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b916:	431a      	orrs	r2, r3
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b91c:	431a      	orrs	r2, r3
 801b91e:	4b31      	ldr	r3, [pc, #196]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b920:	430a      	orrs	r2, r1
 801b922:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b924:	4b2f      	ldr	r3, [pc, #188]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b926:	681a      	ldr	r2, [r3, #0]
 801b928:	4b2e      	ldr	r3, [pc, #184]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b92a:	2180      	movs	r1, #128	@ 0x80
 801b92c:	0449      	lsls	r1, r1, #17
 801b92e:	430a      	orrs	r2, r1
 801b930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b932:	f7f8 fff1 	bl	8014918 <HAL_GetTick>
 801b936:	0003      	movs	r3, r0
 801b938:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b93a:	e008      	b.n	801b94e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b93c:	f7f8 ffec 	bl	8014918 <HAL_GetTick>
 801b940:	0002      	movs	r2, r0
 801b942:	697b      	ldr	r3, [r7, #20]
 801b944:	1ad3      	subs	r3, r2, r3
 801b946:	2b02      	cmp	r3, #2
 801b948:	d901      	bls.n	801b94e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b94a:	2303      	movs	r3, #3
 801b94c:	e045      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b94e:	4b25      	ldr	r3, [pc, #148]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b950:	681a      	ldr	r2, [r3, #0]
 801b952:	2380      	movs	r3, #128	@ 0x80
 801b954:	049b      	lsls	r3, r3, #18
 801b956:	4013      	ands	r3, r2
 801b958:	d0f0      	beq.n	801b93c <HAL_RCC_OscConfig+0x6f4>
 801b95a:	e03d      	b.n	801b9d8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b95c:	4b21      	ldr	r3, [pc, #132]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b95e:	681a      	ldr	r2, [r3, #0]
 801b960:	4b20      	ldr	r3, [pc, #128]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b962:	4922      	ldr	r1, [pc, #136]	@ (801b9ec <HAL_RCC_OscConfig+0x7a4>)
 801b964:	400a      	ands	r2, r1
 801b966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b968:	f7f8 ffd6 	bl	8014918 <HAL_GetTick>
 801b96c:	0003      	movs	r3, r0
 801b96e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b970:	e008      	b.n	801b984 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b972:	f7f8 ffd1 	bl	8014918 <HAL_GetTick>
 801b976:	0002      	movs	r2, r0
 801b978:	697b      	ldr	r3, [r7, #20]
 801b97a:	1ad3      	subs	r3, r2, r3
 801b97c:	2b02      	cmp	r3, #2
 801b97e:	d901      	bls.n	801b984 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801b980:	2303      	movs	r3, #3
 801b982:	e02a      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b984:	4b17      	ldr	r3, [pc, #92]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b986:	681a      	ldr	r2, [r3, #0]
 801b988:	2380      	movs	r3, #128	@ 0x80
 801b98a:	049b      	lsls	r3, r3, #18
 801b98c:	4013      	ands	r3, r2
 801b98e:	d1f0      	bne.n	801b972 <HAL_RCC_OscConfig+0x72a>
 801b990:	e022      	b.n	801b9d8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b996:	2b01      	cmp	r3, #1
 801b998:	d101      	bne.n	801b99e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801b99a:	2301      	movs	r3, #1
 801b99c:	e01d      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801b99e:	4b11      	ldr	r3, [pc, #68]	@ (801b9e4 <HAL_RCC_OscConfig+0x79c>)
 801b9a0:	68db      	ldr	r3, [r3, #12]
 801b9a2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b9a4:	69ba      	ldr	r2, [r7, #24]
 801b9a6:	2380      	movs	r3, #128	@ 0x80
 801b9a8:	025b      	lsls	r3, r3, #9
 801b9aa:	401a      	ands	r2, r3
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	d10f      	bne.n	801b9d4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b9b4:	69ba      	ldr	r2, [r7, #24]
 801b9b6:	23f0      	movs	r3, #240	@ 0xf0
 801b9b8:	039b      	lsls	r3, r3, #14
 801b9ba:	401a      	ands	r2, r3
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b9c0:	429a      	cmp	r2, r3
 801b9c2:	d107      	bne.n	801b9d4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801b9c4:	69ba      	ldr	r2, [r7, #24]
 801b9c6:	23c0      	movs	r3, #192	@ 0xc0
 801b9c8:	041b      	lsls	r3, r3, #16
 801b9ca:	401a      	ands	r2, r3
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d001      	beq.n	801b9d8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801b9d4:	2301      	movs	r3, #1
 801b9d6:	e000      	b.n	801b9da <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801b9d8:	2300      	movs	r3, #0
}
 801b9da:	0018      	movs	r0, r3
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	b00a      	add	sp, #40	@ 0x28
 801b9e0:	bdb0      	pop	{r4, r5, r7, pc}
 801b9e2:	46c0      	nop			@ (mov r8, r8)
 801b9e4:	40021000 	.word	0x40021000
 801b9e8:	ff02ffff 	.word	0xff02ffff
 801b9ec:	feffffff 	.word	0xfeffffff

0801b9f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b9f0:	b5b0      	push	{r4, r5, r7, lr}
 801b9f2:	b084      	sub	sp, #16
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	6078      	str	r0, [r7, #4]
 801b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d101      	bne.n	801ba04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ba00:	2301      	movs	r3, #1
 801ba02:	e128      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ba04:	4b96      	ldr	r3, [pc, #600]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	2201      	movs	r2, #1
 801ba0a:	4013      	ands	r3, r2
 801ba0c:	683a      	ldr	r2, [r7, #0]
 801ba0e:	429a      	cmp	r2, r3
 801ba10:	d91e      	bls.n	801ba50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ba12:	4b93      	ldr	r3, [pc, #588]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	2201      	movs	r2, #1
 801ba18:	4393      	bics	r3, r2
 801ba1a:	0019      	movs	r1, r3
 801ba1c:	4b90      	ldr	r3, [pc, #576]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801ba1e:	683a      	ldr	r2, [r7, #0]
 801ba20:	430a      	orrs	r2, r1
 801ba22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ba24:	f7f8 ff78 	bl	8014918 <HAL_GetTick>
 801ba28:	0003      	movs	r3, r0
 801ba2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ba2c:	e009      	b.n	801ba42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ba2e:	f7f8 ff73 	bl	8014918 <HAL_GetTick>
 801ba32:	0002      	movs	r2, r0
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	1ad3      	subs	r3, r2, r3
 801ba38:	4a8a      	ldr	r2, [pc, #552]	@ (801bc64 <HAL_RCC_ClockConfig+0x274>)
 801ba3a:	4293      	cmp	r3, r2
 801ba3c:	d901      	bls.n	801ba42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801ba3e:	2303      	movs	r3, #3
 801ba40:	e109      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ba42:	4b87      	ldr	r3, [pc, #540]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	2201      	movs	r2, #1
 801ba48:	4013      	ands	r3, r2
 801ba4a:	683a      	ldr	r2, [r7, #0]
 801ba4c:	429a      	cmp	r2, r3
 801ba4e:	d1ee      	bne.n	801ba2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	2202      	movs	r2, #2
 801ba56:	4013      	ands	r3, r2
 801ba58:	d009      	beq.n	801ba6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ba5a:	4b83      	ldr	r3, [pc, #524]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801ba5c:	68db      	ldr	r3, [r3, #12]
 801ba5e:	22f0      	movs	r2, #240	@ 0xf0
 801ba60:	4393      	bics	r3, r2
 801ba62:	0019      	movs	r1, r3
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	689a      	ldr	r2, [r3, #8]
 801ba68:	4b7f      	ldr	r3, [pc, #508]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801ba6a:	430a      	orrs	r2, r1
 801ba6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	2201      	movs	r2, #1
 801ba74:	4013      	ands	r3, r2
 801ba76:	d100      	bne.n	801ba7a <HAL_RCC_ClockConfig+0x8a>
 801ba78:	e089      	b.n	801bb8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	685b      	ldr	r3, [r3, #4]
 801ba7e:	2b02      	cmp	r3, #2
 801ba80:	d107      	bne.n	801ba92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ba82:	4b79      	ldr	r3, [pc, #484]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801ba84:	681a      	ldr	r2, [r3, #0]
 801ba86:	2380      	movs	r3, #128	@ 0x80
 801ba88:	029b      	lsls	r3, r3, #10
 801ba8a:	4013      	ands	r3, r2
 801ba8c:	d120      	bne.n	801bad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba8e:	2301      	movs	r3, #1
 801ba90:	e0e1      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	685b      	ldr	r3, [r3, #4]
 801ba96:	2b03      	cmp	r3, #3
 801ba98:	d107      	bne.n	801baaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ba9a:	4b73      	ldr	r3, [pc, #460]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801ba9c:	681a      	ldr	r2, [r3, #0]
 801ba9e:	2380      	movs	r3, #128	@ 0x80
 801baa0:	049b      	lsls	r3, r3, #18
 801baa2:	4013      	ands	r3, r2
 801baa4:	d114      	bne.n	801bad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801baa6:	2301      	movs	r3, #1
 801baa8:	e0d5      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	685b      	ldr	r3, [r3, #4]
 801baae:	2b01      	cmp	r3, #1
 801bab0:	d106      	bne.n	801bac0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bab2:	4b6d      	ldr	r3, [pc, #436]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	2204      	movs	r2, #4
 801bab8:	4013      	ands	r3, r2
 801baba:	d109      	bne.n	801bad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801babc:	2301      	movs	r3, #1
 801babe:	e0ca      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801bac0:	4b69      	ldr	r3, [pc, #420]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bac2:	681a      	ldr	r2, [r3, #0]
 801bac4:	2380      	movs	r3, #128	@ 0x80
 801bac6:	009b      	lsls	r3, r3, #2
 801bac8:	4013      	ands	r3, r2
 801baca:	d101      	bne.n	801bad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bacc:	2301      	movs	r3, #1
 801bace:	e0c2      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bad0:	4b65      	ldr	r3, [pc, #404]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bad2:	68db      	ldr	r3, [r3, #12]
 801bad4:	2203      	movs	r2, #3
 801bad6:	4393      	bics	r3, r2
 801bad8:	0019      	movs	r1, r3
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	685a      	ldr	r2, [r3, #4]
 801bade:	4b62      	ldr	r3, [pc, #392]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bae0:	430a      	orrs	r2, r1
 801bae2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801bae4:	f7f8 ff18 	bl	8014918 <HAL_GetTick>
 801bae8:	0003      	movs	r3, r0
 801baea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	685b      	ldr	r3, [r3, #4]
 801baf0:	2b02      	cmp	r3, #2
 801baf2:	d111      	bne.n	801bb18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801baf4:	e009      	b.n	801bb0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801baf6:	f7f8 ff0f 	bl	8014918 <HAL_GetTick>
 801bafa:	0002      	movs	r2, r0
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	1ad3      	subs	r3, r2, r3
 801bb00:	4a58      	ldr	r2, [pc, #352]	@ (801bc64 <HAL_RCC_ClockConfig+0x274>)
 801bb02:	4293      	cmp	r3, r2
 801bb04:	d901      	bls.n	801bb0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801bb06:	2303      	movs	r3, #3
 801bb08:	e0a5      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bb0a:	4b57      	ldr	r3, [pc, #348]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bb0c:	68db      	ldr	r3, [r3, #12]
 801bb0e:	220c      	movs	r2, #12
 801bb10:	4013      	ands	r3, r2
 801bb12:	2b08      	cmp	r3, #8
 801bb14:	d1ef      	bne.n	801baf6 <HAL_RCC_ClockConfig+0x106>
 801bb16:	e03a      	b.n	801bb8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	2b03      	cmp	r3, #3
 801bb1e:	d111      	bne.n	801bb44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb20:	e009      	b.n	801bb36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb22:	f7f8 fef9 	bl	8014918 <HAL_GetTick>
 801bb26:	0002      	movs	r2, r0
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	1ad3      	subs	r3, r2, r3
 801bb2c:	4a4d      	ldr	r2, [pc, #308]	@ (801bc64 <HAL_RCC_ClockConfig+0x274>)
 801bb2e:	4293      	cmp	r3, r2
 801bb30:	d901      	bls.n	801bb36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801bb32:	2303      	movs	r3, #3
 801bb34:	e08f      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb36:	4b4c      	ldr	r3, [pc, #304]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bb38:	68db      	ldr	r3, [r3, #12]
 801bb3a:	220c      	movs	r2, #12
 801bb3c:	4013      	ands	r3, r2
 801bb3e:	2b0c      	cmp	r3, #12
 801bb40:	d1ef      	bne.n	801bb22 <HAL_RCC_ClockConfig+0x132>
 801bb42:	e024      	b.n	801bb8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	685b      	ldr	r3, [r3, #4]
 801bb48:	2b01      	cmp	r3, #1
 801bb4a:	d11b      	bne.n	801bb84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bb4c:	e009      	b.n	801bb62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb4e:	f7f8 fee3 	bl	8014918 <HAL_GetTick>
 801bb52:	0002      	movs	r2, r0
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	1ad3      	subs	r3, r2, r3
 801bb58:	4a42      	ldr	r2, [pc, #264]	@ (801bc64 <HAL_RCC_ClockConfig+0x274>)
 801bb5a:	4293      	cmp	r3, r2
 801bb5c:	d901      	bls.n	801bb62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801bb5e:	2303      	movs	r3, #3
 801bb60:	e079      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bb62:	4b41      	ldr	r3, [pc, #260]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bb64:	68db      	ldr	r3, [r3, #12]
 801bb66:	220c      	movs	r2, #12
 801bb68:	4013      	ands	r3, r2
 801bb6a:	2b04      	cmp	r3, #4
 801bb6c:	d1ef      	bne.n	801bb4e <HAL_RCC_ClockConfig+0x15e>
 801bb6e:	e00e      	b.n	801bb8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb70:	f7f8 fed2 	bl	8014918 <HAL_GetTick>
 801bb74:	0002      	movs	r2, r0
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	1ad3      	subs	r3, r2, r3
 801bb7a:	4a3a      	ldr	r2, [pc, #232]	@ (801bc64 <HAL_RCC_ClockConfig+0x274>)
 801bb7c:	4293      	cmp	r3, r2
 801bb7e:	d901      	bls.n	801bb84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801bb80:	2303      	movs	r3, #3
 801bb82:	e068      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bb84:	4b38      	ldr	r3, [pc, #224]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bb86:	68db      	ldr	r3, [r3, #12]
 801bb88:	220c      	movs	r2, #12
 801bb8a:	4013      	ands	r3, r2
 801bb8c:	d1f0      	bne.n	801bb70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bb8e:	4b34      	ldr	r3, [pc, #208]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	2201      	movs	r2, #1
 801bb94:	4013      	ands	r3, r2
 801bb96:	683a      	ldr	r2, [r7, #0]
 801bb98:	429a      	cmp	r2, r3
 801bb9a:	d21e      	bcs.n	801bbda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bb9c:	4b30      	ldr	r3, [pc, #192]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	2201      	movs	r2, #1
 801bba2:	4393      	bics	r3, r2
 801bba4:	0019      	movs	r1, r3
 801bba6:	4b2e      	ldr	r3, [pc, #184]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801bba8:	683a      	ldr	r2, [r7, #0]
 801bbaa:	430a      	orrs	r2, r1
 801bbac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bbae:	f7f8 feb3 	bl	8014918 <HAL_GetTick>
 801bbb2:	0003      	movs	r3, r0
 801bbb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bbb6:	e009      	b.n	801bbcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bbb8:	f7f8 feae 	bl	8014918 <HAL_GetTick>
 801bbbc:	0002      	movs	r2, r0
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	1ad3      	subs	r3, r2, r3
 801bbc2:	4a28      	ldr	r2, [pc, #160]	@ (801bc64 <HAL_RCC_ClockConfig+0x274>)
 801bbc4:	4293      	cmp	r3, r2
 801bbc6:	d901      	bls.n	801bbcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bbc8:	2303      	movs	r3, #3
 801bbca:	e044      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bbcc:	4b24      	ldr	r3, [pc, #144]	@ (801bc60 <HAL_RCC_ClockConfig+0x270>)
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	2201      	movs	r2, #1
 801bbd2:	4013      	ands	r3, r2
 801bbd4:	683a      	ldr	r2, [r7, #0]
 801bbd6:	429a      	cmp	r2, r3
 801bbd8:	d1ee      	bne.n	801bbb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	2204      	movs	r2, #4
 801bbe0:	4013      	ands	r3, r2
 801bbe2:	d009      	beq.n	801bbf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bbe4:	4b20      	ldr	r3, [pc, #128]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bbe6:	68db      	ldr	r3, [r3, #12]
 801bbe8:	4a20      	ldr	r2, [pc, #128]	@ (801bc6c <HAL_RCC_ClockConfig+0x27c>)
 801bbea:	4013      	ands	r3, r2
 801bbec:	0019      	movs	r1, r3
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	68da      	ldr	r2, [r3, #12]
 801bbf2:	4b1d      	ldr	r3, [pc, #116]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bbf4:	430a      	orrs	r2, r1
 801bbf6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	2208      	movs	r2, #8
 801bbfe:	4013      	ands	r3, r2
 801bc00:	d00a      	beq.n	801bc18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bc02:	4b19      	ldr	r3, [pc, #100]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bc04:	68db      	ldr	r3, [r3, #12]
 801bc06:	4a1a      	ldr	r2, [pc, #104]	@ (801bc70 <HAL_RCC_ClockConfig+0x280>)
 801bc08:	4013      	ands	r3, r2
 801bc0a:	0019      	movs	r1, r3
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	691b      	ldr	r3, [r3, #16]
 801bc10:	00da      	lsls	r2, r3, #3
 801bc12:	4b15      	ldr	r3, [pc, #84]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bc14:	430a      	orrs	r2, r1
 801bc16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bc18:	f000 f832 	bl	801bc80 <HAL_RCC_GetSysClockFreq>
 801bc1c:	0001      	movs	r1, r0
 801bc1e:	4b12      	ldr	r3, [pc, #72]	@ (801bc68 <HAL_RCC_ClockConfig+0x278>)
 801bc20:	68db      	ldr	r3, [r3, #12]
 801bc22:	091b      	lsrs	r3, r3, #4
 801bc24:	220f      	movs	r2, #15
 801bc26:	4013      	ands	r3, r2
 801bc28:	4a12      	ldr	r2, [pc, #72]	@ (801bc74 <HAL_RCC_ClockConfig+0x284>)
 801bc2a:	5cd3      	ldrb	r3, [r2, r3]
 801bc2c:	000a      	movs	r2, r1
 801bc2e:	40da      	lsrs	r2, r3
 801bc30:	4b11      	ldr	r3, [pc, #68]	@ (801bc78 <HAL_RCC_ClockConfig+0x288>)
 801bc32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bc34:	4b11      	ldr	r3, [pc, #68]	@ (801bc7c <HAL_RCC_ClockConfig+0x28c>)
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	250b      	movs	r5, #11
 801bc3a:	197c      	adds	r4, r7, r5
 801bc3c:	0018      	movs	r0, r3
 801bc3e:	f7f8 fe25 	bl	801488c <HAL_InitTick>
 801bc42:	0003      	movs	r3, r0
 801bc44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bc46:	197b      	adds	r3, r7, r5
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d002      	beq.n	801bc54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bc4e:	197b      	adds	r3, r7, r5
 801bc50:	781b      	ldrb	r3, [r3, #0]
 801bc52:	e000      	b.n	801bc56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bc54:	2300      	movs	r3, #0
}
 801bc56:	0018      	movs	r0, r3
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	b004      	add	sp, #16
 801bc5c:	bdb0      	pop	{r4, r5, r7, pc}
 801bc5e:	46c0      	nop			@ (mov r8, r8)
 801bc60:	40022000 	.word	0x40022000
 801bc64:	00001388 	.word	0x00001388
 801bc68:	40021000 	.word	0x40021000
 801bc6c:	fffff8ff 	.word	0xfffff8ff
 801bc70:	ffffc7ff 	.word	0xffffc7ff
 801bc74:	0802e520 	.word	0x0802e520
 801bc78:	200000ec 	.word	0x200000ec
 801bc7c:	200000fc 	.word	0x200000fc

0801bc80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bc80:	b5b0      	push	{r4, r5, r7, lr}
 801bc82:	b08e      	sub	sp, #56	@ 0x38
 801bc84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bc86:	4b4c      	ldr	r3, [pc, #304]	@ (801bdb8 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc88:	68db      	ldr	r3, [r3, #12]
 801bc8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bc8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bc8e:	230c      	movs	r3, #12
 801bc90:	4013      	ands	r3, r2
 801bc92:	2b0c      	cmp	r3, #12
 801bc94:	d014      	beq.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x40>
 801bc96:	d900      	bls.n	801bc9a <HAL_RCC_GetSysClockFreq+0x1a>
 801bc98:	e07b      	b.n	801bd92 <HAL_RCC_GetSysClockFreq+0x112>
 801bc9a:	2b04      	cmp	r3, #4
 801bc9c:	d002      	beq.n	801bca4 <HAL_RCC_GetSysClockFreq+0x24>
 801bc9e:	2b08      	cmp	r3, #8
 801bca0:	d00b      	beq.n	801bcba <HAL_RCC_GetSysClockFreq+0x3a>
 801bca2:	e076      	b.n	801bd92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bca4:	4b44      	ldr	r3, [pc, #272]	@ (801bdb8 <HAL_RCC_GetSysClockFreq+0x138>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	2210      	movs	r2, #16
 801bcaa:	4013      	ands	r3, r2
 801bcac:	d002      	beq.n	801bcb4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bcae:	4b43      	ldr	r3, [pc, #268]	@ (801bdbc <HAL_RCC_GetSysClockFreq+0x13c>)
 801bcb0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bcb2:	e07c      	b.n	801bdae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bcb4:	4b42      	ldr	r3, [pc, #264]	@ (801bdc0 <HAL_RCC_GetSysClockFreq+0x140>)
 801bcb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bcb8:	e079      	b.n	801bdae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bcba:	4b42      	ldr	r3, [pc, #264]	@ (801bdc4 <HAL_RCC_GetSysClockFreq+0x144>)
 801bcbc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bcbe:	e076      	b.n	801bdae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcc2:	0c9a      	lsrs	r2, r3, #18
 801bcc4:	230f      	movs	r3, #15
 801bcc6:	401a      	ands	r2, r3
 801bcc8:	4b3f      	ldr	r3, [pc, #252]	@ (801bdc8 <HAL_RCC_GetSysClockFreq+0x148>)
 801bcca:	5c9b      	ldrb	r3, [r3, r2]
 801bccc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcd0:	0d9a      	lsrs	r2, r3, #22
 801bcd2:	2303      	movs	r3, #3
 801bcd4:	4013      	ands	r3, r2
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bcda:	4b37      	ldr	r3, [pc, #220]	@ (801bdb8 <HAL_RCC_GetSysClockFreq+0x138>)
 801bcdc:	68da      	ldr	r2, [r3, #12]
 801bcde:	2380      	movs	r3, #128	@ 0x80
 801bce0:	025b      	lsls	r3, r3, #9
 801bce2:	4013      	ands	r3, r2
 801bce4:	d01a      	beq.n	801bd1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bce8:	61bb      	str	r3, [r7, #24]
 801bcea:	2300      	movs	r3, #0
 801bcec:	61fb      	str	r3, [r7, #28]
 801bcee:	4a35      	ldr	r2, [pc, #212]	@ (801bdc4 <HAL_RCC_GetSysClockFreq+0x144>)
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	69b8      	ldr	r0, [r7, #24]
 801bcf4:	69f9      	ldr	r1, [r7, #28]
 801bcf6:	f7e4 fc63 	bl	80005c0 <__aeabi_lmul>
 801bcfa:	0002      	movs	r2, r0
 801bcfc:	000b      	movs	r3, r1
 801bcfe:	0010      	movs	r0, r2
 801bd00:	0019      	movs	r1, r3
 801bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd04:	613b      	str	r3, [r7, #16]
 801bd06:	2300      	movs	r3, #0
 801bd08:	617b      	str	r3, [r7, #20]
 801bd0a:	693a      	ldr	r2, [r7, #16]
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	f7e4 fc37 	bl	8000580 <__aeabi_uldivmod>
 801bd12:	0002      	movs	r2, r0
 801bd14:	000b      	movs	r3, r1
 801bd16:	0013      	movs	r3, r2
 801bd18:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd1a:	e037      	b.n	801bd8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bd1c:	4b26      	ldr	r3, [pc, #152]	@ (801bdb8 <HAL_RCC_GetSysClockFreq+0x138>)
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	2210      	movs	r2, #16
 801bd22:	4013      	ands	r3, r2
 801bd24:	d01a      	beq.n	801bd5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801bd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd28:	60bb      	str	r3, [r7, #8]
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	60fb      	str	r3, [r7, #12]
 801bd2e:	4a23      	ldr	r2, [pc, #140]	@ (801bdbc <HAL_RCC_GetSysClockFreq+0x13c>)
 801bd30:	2300      	movs	r3, #0
 801bd32:	68b8      	ldr	r0, [r7, #8]
 801bd34:	68f9      	ldr	r1, [r7, #12]
 801bd36:	f7e4 fc43 	bl	80005c0 <__aeabi_lmul>
 801bd3a:	0002      	movs	r2, r0
 801bd3c:	000b      	movs	r3, r1
 801bd3e:	0010      	movs	r0, r2
 801bd40:	0019      	movs	r1, r3
 801bd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd44:	603b      	str	r3, [r7, #0]
 801bd46:	2300      	movs	r3, #0
 801bd48:	607b      	str	r3, [r7, #4]
 801bd4a:	683a      	ldr	r2, [r7, #0]
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	f7e4 fc17 	bl	8000580 <__aeabi_uldivmod>
 801bd52:	0002      	movs	r2, r0
 801bd54:	000b      	movs	r3, r1
 801bd56:	0013      	movs	r3, r2
 801bd58:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd5a:	e017      	b.n	801bd8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd5e:	0018      	movs	r0, r3
 801bd60:	2300      	movs	r3, #0
 801bd62:	0019      	movs	r1, r3
 801bd64:	4a16      	ldr	r2, [pc, #88]	@ (801bdc0 <HAL_RCC_GetSysClockFreq+0x140>)
 801bd66:	2300      	movs	r3, #0
 801bd68:	f7e4 fc2a 	bl	80005c0 <__aeabi_lmul>
 801bd6c:	0002      	movs	r2, r0
 801bd6e:	000b      	movs	r3, r1
 801bd70:	0010      	movs	r0, r2
 801bd72:	0019      	movs	r1, r3
 801bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd76:	001c      	movs	r4, r3
 801bd78:	2300      	movs	r3, #0
 801bd7a:	001d      	movs	r5, r3
 801bd7c:	0022      	movs	r2, r4
 801bd7e:	002b      	movs	r3, r5
 801bd80:	f7e4 fbfe 	bl	8000580 <__aeabi_uldivmod>
 801bd84:	0002      	movs	r2, r0
 801bd86:	000b      	movs	r3, r1
 801bd88:	0013      	movs	r3, r2
 801bd8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801bd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd90:	e00d      	b.n	801bdae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801bd92:	4b09      	ldr	r3, [pc, #36]	@ (801bdb8 <HAL_RCC_GetSysClockFreq+0x138>)
 801bd94:	685b      	ldr	r3, [r3, #4]
 801bd96:	0b5b      	lsrs	r3, r3, #13
 801bd98:	2207      	movs	r2, #7
 801bd9a:	4013      	ands	r3, r2
 801bd9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801bd9e:	6a3b      	ldr	r3, [r7, #32]
 801bda0:	3301      	adds	r3, #1
 801bda2:	2280      	movs	r2, #128	@ 0x80
 801bda4:	0212      	lsls	r2, r2, #8
 801bda6:	409a      	lsls	r2, r3
 801bda8:	0013      	movs	r3, r2
 801bdaa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bdac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801bdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801bdb0:	0018      	movs	r0, r3
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	b00e      	add	sp, #56	@ 0x38
 801bdb6:	bdb0      	pop	{r4, r5, r7, pc}
 801bdb8:	40021000 	.word	0x40021000
 801bdbc:	003d0900 	.word	0x003d0900
 801bdc0:	00f42400 	.word	0x00f42400
 801bdc4:	007a1200 	.word	0x007a1200
 801bdc8:	0802e538 	.word	0x0802e538

0801bdcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bdd0:	4b02      	ldr	r3, [pc, #8]	@ (801bddc <HAL_RCC_GetHCLKFreq+0x10>)
 801bdd2:	681b      	ldr	r3, [r3, #0]
}
 801bdd4:	0018      	movs	r0, r3
 801bdd6:	46bd      	mov	sp, r7
 801bdd8:	bd80      	pop	{r7, pc}
 801bdda:	46c0      	nop			@ (mov r8, r8)
 801bddc:	200000ec 	.word	0x200000ec

0801bde0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801bde4:	f7ff fff2 	bl	801bdcc <HAL_RCC_GetHCLKFreq>
 801bde8:	0001      	movs	r1, r0
 801bdea:	4b06      	ldr	r3, [pc, #24]	@ (801be04 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bdec:	68db      	ldr	r3, [r3, #12]
 801bdee:	0a1b      	lsrs	r3, r3, #8
 801bdf0:	2207      	movs	r2, #7
 801bdf2:	4013      	ands	r3, r2
 801bdf4:	4a04      	ldr	r2, [pc, #16]	@ (801be08 <HAL_RCC_GetPCLK1Freq+0x28>)
 801bdf6:	5cd3      	ldrb	r3, [r2, r3]
 801bdf8:	40d9      	lsrs	r1, r3
 801bdfa:	000b      	movs	r3, r1
}
 801bdfc:	0018      	movs	r0, r3
 801bdfe:	46bd      	mov	sp, r7
 801be00:	bd80      	pop	{r7, pc}
 801be02:	46c0      	nop			@ (mov r8, r8)
 801be04:	40021000 	.word	0x40021000
 801be08:	0802e530 	.word	0x0802e530

0801be0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801be10:	f7ff ffdc 	bl	801bdcc <HAL_RCC_GetHCLKFreq>
 801be14:	0001      	movs	r1, r0
 801be16:	4b06      	ldr	r3, [pc, #24]	@ (801be30 <HAL_RCC_GetPCLK2Freq+0x24>)
 801be18:	68db      	ldr	r3, [r3, #12]
 801be1a:	0adb      	lsrs	r3, r3, #11
 801be1c:	2207      	movs	r2, #7
 801be1e:	4013      	ands	r3, r2
 801be20:	4a04      	ldr	r2, [pc, #16]	@ (801be34 <HAL_RCC_GetPCLK2Freq+0x28>)
 801be22:	5cd3      	ldrb	r3, [r2, r3]
 801be24:	40d9      	lsrs	r1, r3
 801be26:	000b      	movs	r3, r1
}
 801be28:	0018      	movs	r0, r3
 801be2a:	46bd      	mov	sp, r7
 801be2c:	bd80      	pop	{r7, pc}
 801be2e:	46c0      	nop			@ (mov r8, r8)
 801be30:	40021000 	.word	0x40021000
 801be34:	0802e530 	.word	0x0802e530

0801be38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801be38:	b580      	push	{r7, lr}
 801be3a:	b086      	sub	sp, #24
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801be40:	2017      	movs	r0, #23
 801be42:	183b      	adds	r3, r7, r0
 801be44:	2200      	movs	r2, #0
 801be46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	2220      	movs	r2, #32
 801be4e:	4013      	ands	r3, r2
 801be50:	d100      	bne.n	801be54 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801be52:	e0c7      	b.n	801bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801be54:	4b9b      	ldr	r3, [pc, #620]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801be58:	2380      	movs	r3, #128	@ 0x80
 801be5a:	055b      	lsls	r3, r3, #21
 801be5c:	4013      	ands	r3, r2
 801be5e:	d109      	bne.n	801be74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801be60:	4b98      	ldr	r3, [pc, #608]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801be64:	4b97      	ldr	r3, [pc, #604]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be66:	2180      	movs	r1, #128	@ 0x80
 801be68:	0549      	lsls	r1, r1, #21
 801be6a:	430a      	orrs	r2, r1
 801be6c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801be6e:	183b      	adds	r3, r7, r0
 801be70:	2201      	movs	r2, #1
 801be72:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be74:	4b94      	ldr	r3, [pc, #592]	@ (801c0c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be76:	681a      	ldr	r2, [r3, #0]
 801be78:	2380      	movs	r3, #128	@ 0x80
 801be7a:	005b      	lsls	r3, r3, #1
 801be7c:	4013      	ands	r3, r2
 801be7e:	d11a      	bne.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801be80:	4b91      	ldr	r3, [pc, #580]	@ (801c0c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be82:	681a      	ldr	r2, [r3, #0]
 801be84:	4b90      	ldr	r3, [pc, #576]	@ (801c0c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be86:	2180      	movs	r1, #128	@ 0x80
 801be88:	0049      	lsls	r1, r1, #1
 801be8a:	430a      	orrs	r2, r1
 801be8c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801be8e:	f7f8 fd43 	bl	8014918 <HAL_GetTick>
 801be92:	0003      	movs	r3, r0
 801be94:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be96:	e008      	b.n	801beaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801be98:	f7f8 fd3e 	bl	8014918 <HAL_GetTick>
 801be9c:	0002      	movs	r2, r0
 801be9e:	693b      	ldr	r3, [r7, #16]
 801bea0:	1ad3      	subs	r3, r2, r3
 801bea2:	2b64      	cmp	r3, #100	@ 0x64
 801bea4:	d901      	bls.n	801beaa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801bea6:	2303      	movs	r3, #3
 801bea8:	e107      	b.n	801c0ba <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801beaa:	4b87      	ldr	r3, [pc, #540]	@ (801c0c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801beac:	681a      	ldr	r2, [r3, #0]
 801beae:	2380      	movs	r3, #128	@ 0x80
 801beb0:	005b      	lsls	r3, r3, #1
 801beb2:	4013      	ands	r3, r2
 801beb4:	d0f0      	beq.n	801be98 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801beb6:	4b83      	ldr	r3, [pc, #524]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beb8:	681a      	ldr	r2, [r3, #0]
 801beba:	23c0      	movs	r3, #192	@ 0xc0
 801bebc:	039b      	lsls	r3, r3, #14
 801bebe:	4013      	ands	r3, r2
 801bec0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	685a      	ldr	r2, [r3, #4]
 801bec6:	23c0      	movs	r3, #192	@ 0xc0
 801bec8:	039b      	lsls	r3, r3, #14
 801beca:	4013      	ands	r3, r2
 801becc:	68fa      	ldr	r2, [r7, #12]
 801bece:	429a      	cmp	r2, r3
 801bed0:	d013      	beq.n	801befa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	685a      	ldr	r2, [r3, #4]
 801bed6:	23c0      	movs	r3, #192	@ 0xc0
 801bed8:	029b      	lsls	r3, r3, #10
 801beda:	401a      	ands	r2, r3
 801bedc:	23c0      	movs	r3, #192	@ 0xc0
 801bede:	029b      	lsls	r3, r3, #10
 801bee0:	429a      	cmp	r2, r3
 801bee2:	d10a      	bne.n	801befa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801bee4:	4b77      	ldr	r3, [pc, #476]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bee6:	681a      	ldr	r2, [r3, #0]
 801bee8:	2380      	movs	r3, #128	@ 0x80
 801beea:	029b      	lsls	r3, r3, #10
 801beec:	401a      	ands	r2, r3
 801beee:	2380      	movs	r3, #128	@ 0x80
 801bef0:	029b      	lsls	r3, r3, #10
 801bef2:	429a      	cmp	r2, r3
 801bef4:	d101      	bne.n	801befa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801bef6:	2301      	movs	r3, #1
 801bef8:	e0df      	b.n	801c0ba <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801befa:	4b72      	ldr	r3, [pc, #456]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801befc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801befe:	23c0      	movs	r3, #192	@ 0xc0
 801bf00:	029b      	lsls	r3, r3, #10
 801bf02:	4013      	ands	r3, r2
 801bf04:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d03b      	beq.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	685a      	ldr	r2, [r3, #4]
 801bf10:	23c0      	movs	r3, #192	@ 0xc0
 801bf12:	029b      	lsls	r3, r3, #10
 801bf14:	4013      	ands	r3, r2
 801bf16:	68fa      	ldr	r2, [r7, #12]
 801bf18:	429a      	cmp	r2, r3
 801bf1a:	d033      	beq.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	2220      	movs	r2, #32
 801bf22:	4013      	ands	r3, r2
 801bf24:	d02e      	beq.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801bf26:	4b67      	ldr	r3, [pc, #412]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf2a:	4a68      	ldr	r2, [pc, #416]	@ (801c0cc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bf2c:	4013      	ands	r3, r2
 801bf2e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801bf30:	4b64      	ldr	r3, [pc, #400]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf34:	4b63      	ldr	r3, [pc, #396]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf36:	2180      	movs	r1, #128	@ 0x80
 801bf38:	0309      	lsls	r1, r1, #12
 801bf3a:	430a      	orrs	r2, r1
 801bf3c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801bf3e:	4b61      	ldr	r3, [pc, #388]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf42:	4b60      	ldr	r3, [pc, #384]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf44:	4962      	ldr	r1, [pc, #392]	@ (801c0d0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801bf46:	400a      	ands	r2, r1
 801bf48:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801bf4a:	4b5e      	ldr	r3, [pc, #376]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf4c:	68fa      	ldr	r2, [r7, #12]
 801bf4e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801bf50:	68fa      	ldr	r2, [r7, #12]
 801bf52:	2380      	movs	r3, #128	@ 0x80
 801bf54:	005b      	lsls	r3, r3, #1
 801bf56:	4013      	ands	r3, r2
 801bf58:	d014      	beq.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bf5a:	f7f8 fcdd 	bl	8014918 <HAL_GetTick>
 801bf5e:	0003      	movs	r3, r0
 801bf60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bf62:	e009      	b.n	801bf78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bf64:	f7f8 fcd8 	bl	8014918 <HAL_GetTick>
 801bf68:	0002      	movs	r2, r0
 801bf6a:	693b      	ldr	r3, [r7, #16]
 801bf6c:	1ad3      	subs	r3, r2, r3
 801bf6e:	4a59      	ldr	r2, [pc, #356]	@ (801c0d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801bf70:	4293      	cmp	r3, r2
 801bf72:	d901      	bls.n	801bf78 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801bf74:	2303      	movs	r3, #3
 801bf76:	e0a0      	b.n	801c0ba <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bf78:	4b52      	ldr	r3, [pc, #328]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf7c:	2380      	movs	r3, #128	@ 0x80
 801bf7e:	009b      	lsls	r3, r3, #2
 801bf80:	4013      	ands	r3, r2
 801bf82:	d0ef      	beq.n	801bf64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	2220      	movs	r2, #32
 801bf8a:	4013      	ands	r3, r2
 801bf8c:	d01f      	beq.n	801bfce <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	685a      	ldr	r2, [r3, #4]
 801bf92:	23c0      	movs	r3, #192	@ 0xc0
 801bf94:	029b      	lsls	r3, r3, #10
 801bf96:	401a      	ands	r2, r3
 801bf98:	23c0      	movs	r3, #192	@ 0xc0
 801bf9a:	029b      	lsls	r3, r3, #10
 801bf9c:	429a      	cmp	r2, r3
 801bf9e:	d10c      	bne.n	801bfba <HAL_RCCEx_PeriphCLKConfig+0x182>
 801bfa0:	4b48      	ldr	r3, [pc, #288]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	4a4c      	ldr	r2, [pc, #304]	@ (801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801bfa6:	4013      	ands	r3, r2
 801bfa8:	0019      	movs	r1, r3
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	685a      	ldr	r2, [r3, #4]
 801bfae:	23c0      	movs	r3, #192	@ 0xc0
 801bfb0:	039b      	lsls	r3, r3, #14
 801bfb2:	401a      	ands	r2, r3
 801bfb4:	4b43      	ldr	r3, [pc, #268]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfb6:	430a      	orrs	r2, r1
 801bfb8:	601a      	str	r2, [r3, #0]
 801bfba:	4b42      	ldr	r3, [pc, #264]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	685a      	ldr	r2, [r3, #4]
 801bfc2:	23c0      	movs	r3, #192	@ 0xc0
 801bfc4:	029b      	lsls	r3, r3, #10
 801bfc6:	401a      	ands	r2, r3
 801bfc8:	4b3e      	ldr	r3, [pc, #248]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfca:	430a      	orrs	r2, r1
 801bfcc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801bfce:	2317      	movs	r3, #23
 801bfd0:	18fb      	adds	r3, r7, r3
 801bfd2:	781b      	ldrb	r3, [r3, #0]
 801bfd4:	2b01      	cmp	r3, #1
 801bfd6:	d105      	bne.n	801bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bfd8:	4b3a      	ldr	r3, [pc, #232]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bfdc:	4b39      	ldr	r3, [pc, #228]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfde:	493f      	ldr	r1, [pc, #252]	@ (801c0dc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801bfe0:	400a      	ands	r2, r1
 801bfe2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	2201      	movs	r2, #1
 801bfea:	4013      	ands	r3, r2
 801bfec:	d009      	beq.n	801c002 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bfee:	4b35      	ldr	r3, [pc, #212]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bff2:	2203      	movs	r2, #3
 801bff4:	4393      	bics	r3, r2
 801bff6:	0019      	movs	r1, r3
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	689a      	ldr	r2, [r3, #8]
 801bffc:	4b31      	ldr	r3, [pc, #196]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bffe:	430a      	orrs	r2, r1
 801c000:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	2202      	movs	r2, #2
 801c008:	4013      	ands	r3, r2
 801c00a:	d009      	beq.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c00c:	4b2d      	ldr	r3, [pc, #180]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c00e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c010:	220c      	movs	r2, #12
 801c012:	4393      	bics	r3, r2
 801c014:	0019      	movs	r1, r3
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	68da      	ldr	r2, [r3, #12]
 801c01a:	4b2a      	ldr	r3, [pc, #168]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c01c:	430a      	orrs	r2, r1
 801c01e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	2204      	movs	r2, #4
 801c026:	4013      	ands	r3, r2
 801c028:	d009      	beq.n	801c03e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c02a:	4b26      	ldr	r3, [pc, #152]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c02c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c02e:	4a2c      	ldr	r2, [pc, #176]	@ (801c0e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801c030:	4013      	ands	r3, r2
 801c032:	0019      	movs	r1, r3
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	691a      	ldr	r2, [r3, #16]
 801c038:	4b22      	ldr	r3, [pc, #136]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c03a:	430a      	orrs	r2, r1
 801c03c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	2208      	movs	r2, #8
 801c044:	4013      	ands	r3, r2
 801c046:	d009      	beq.n	801c05c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c048:	4b1e      	ldr	r3, [pc, #120]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c04a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c04c:	4a25      	ldr	r2, [pc, #148]	@ (801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c04e:	4013      	ands	r3, r2
 801c050:	0019      	movs	r1, r3
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	695a      	ldr	r2, [r3, #20]
 801c056:	4b1b      	ldr	r3, [pc, #108]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c058:	430a      	orrs	r2, r1
 801c05a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	681a      	ldr	r2, [r3, #0]
 801c060:	2380      	movs	r3, #128	@ 0x80
 801c062:	005b      	lsls	r3, r3, #1
 801c064:	4013      	ands	r3, r2
 801c066:	d009      	beq.n	801c07c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c068:	4b16      	ldr	r3, [pc, #88]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c06a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c06c:	4a17      	ldr	r2, [pc, #92]	@ (801c0cc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c06e:	4013      	ands	r3, r2
 801c070:	0019      	movs	r1, r3
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	699a      	ldr	r2, [r3, #24]
 801c076:	4b13      	ldr	r3, [pc, #76]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c078:	430a      	orrs	r2, r1
 801c07a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	2240      	movs	r2, #64	@ 0x40
 801c082:	4013      	ands	r3, r2
 801c084:	d009      	beq.n	801c09a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c086:	4b0f      	ldr	r3, [pc, #60]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c08a:	4a17      	ldr	r2, [pc, #92]	@ (801c0e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c08c:	4013      	ands	r3, r2
 801c08e:	0019      	movs	r1, r3
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	6a1a      	ldr	r2, [r3, #32]
 801c094:	4b0b      	ldr	r3, [pc, #44]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c096:	430a      	orrs	r2, r1
 801c098:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	2280      	movs	r2, #128	@ 0x80
 801c0a0:	4013      	ands	r3, r2
 801c0a2:	d009      	beq.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c0a4:	4b07      	ldr	r3, [pc, #28]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0a8:	4a10      	ldr	r2, [pc, #64]	@ (801c0ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c0aa:	4013      	ands	r3, r2
 801c0ac:	0019      	movs	r1, r3
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	69da      	ldr	r2, [r3, #28]
 801c0b2:	4b04      	ldr	r3, [pc, #16]	@ (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0b4:	430a      	orrs	r2, r1
 801c0b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c0b8:	2300      	movs	r3, #0
}
 801c0ba:	0018      	movs	r0, r3
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	b006      	add	sp, #24
 801c0c0:	bd80      	pop	{r7, pc}
 801c0c2:	46c0      	nop			@ (mov r8, r8)
 801c0c4:	40021000 	.word	0x40021000
 801c0c8:	40007000 	.word	0x40007000
 801c0cc:	fffcffff 	.word	0xfffcffff
 801c0d0:	fff7ffff 	.word	0xfff7ffff
 801c0d4:	00001388 	.word	0x00001388
 801c0d8:	ffcfffff 	.word	0xffcfffff
 801c0dc:	efffffff 	.word	0xefffffff
 801c0e0:	fffff3ff 	.word	0xfffff3ff
 801c0e4:	ffffcfff 	.word	0xffffcfff
 801c0e8:	fbffffff 	.word	0xfbffffff
 801c0ec:	fff3ffff 	.word	0xfff3ffff

0801c0f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c0f0:	b5b0      	push	{r4, r5, r7, lr}
 801c0f2:	b084      	sub	sp, #16
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c0f8:	230f      	movs	r3, #15
 801c0fa:	18fb      	adds	r3, r7, r3
 801c0fc:	2201      	movs	r2, #1
 801c0fe:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	2b00      	cmp	r3, #0
 801c104:	d101      	bne.n	801c10a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c106:	2301      	movs	r3, #1
 801c108:	e088      	b.n	801c21c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	2221      	movs	r2, #33	@ 0x21
 801c10e:	5c9b      	ldrb	r3, [r3, r2]
 801c110:	b2db      	uxtb	r3, r3
 801c112:	2b00      	cmp	r3, #0
 801c114:	d107      	bne.n	801c126 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	2220      	movs	r2, #32
 801c11a:	2100      	movs	r1, #0
 801c11c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	0018      	movs	r0, r3
 801c122:	f7f2 fa07 	bl	800e534 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	2221      	movs	r2, #33	@ 0x21
 801c12a:	2102      	movs	r1, #2
 801c12c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	68db      	ldr	r3, [r3, #12]
 801c134:	2210      	movs	r2, #16
 801c136:	4013      	ands	r3, r2
 801c138:	2b10      	cmp	r3, #16
 801c13a:	d05f      	beq.n	801c1fc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	22ca      	movs	r2, #202	@ 0xca
 801c142:	625a      	str	r2, [r3, #36]	@ 0x24
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	2253      	movs	r2, #83	@ 0x53
 801c14a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c14c:	250f      	movs	r5, #15
 801c14e:	197c      	adds	r4, r7, r5
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	0018      	movs	r0, r3
 801c154:	f000 fa99 	bl	801c68a <RTC_EnterInitMode>
 801c158:	0003      	movs	r3, r0
 801c15a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c15c:	0028      	movs	r0, r5
 801c15e:	183b      	adds	r3, r7, r0
 801c160:	781b      	ldrb	r3, [r3, #0]
 801c162:	2b00      	cmp	r3, #0
 801c164:	d12c      	bne.n	801c1c0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	689a      	ldr	r2, [r3, #8]
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	492c      	ldr	r1, [pc, #176]	@ (801c224 <HAL_RTC_Init+0x134>)
 801c172:	400a      	ands	r2, r1
 801c174:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	6899      	ldr	r1, [r3, #8]
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	685a      	ldr	r2, [r3, #4]
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	691b      	ldr	r3, [r3, #16]
 801c184:	431a      	orrs	r2, r3
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	699b      	ldr	r3, [r3, #24]
 801c18a:	431a      	orrs	r2, r3
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	430a      	orrs	r2, r1
 801c192:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	687a      	ldr	r2, [r7, #4]
 801c19a:	68d2      	ldr	r2, [r2, #12]
 801c19c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	6919      	ldr	r1, [r3, #16]
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	689b      	ldr	r3, [r3, #8]
 801c1a8:	041a      	lsls	r2, r3, #16
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	430a      	orrs	r2, r1
 801c1b0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c1b2:	183c      	adds	r4, r7, r0
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	0018      	movs	r0, r3
 801c1b8:	f000 faab 	bl	801c712 <RTC_ExitInitMode>
 801c1bc:	0003      	movs	r3, r0
 801c1be:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c1c0:	230f      	movs	r3, #15
 801c1c2:	18fb      	adds	r3, r7, r3
 801c1c4:	781b      	ldrb	r3, [r3, #0]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d113      	bne.n	801c1f2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	2103      	movs	r1, #3
 801c1d6:	438a      	bics	r2, r1
 801c1d8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	69da      	ldr	r2, [r3, #28]
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	695b      	ldr	r3, [r3, #20]
 801c1e8:	431a      	orrs	r2, r3
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	430a      	orrs	r2, r1
 801c1f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	22ff      	movs	r2, #255	@ 0xff
 801c1f8:	625a      	str	r2, [r3, #36]	@ 0x24
 801c1fa:	e003      	b.n	801c204 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c1fc:	230f      	movs	r3, #15
 801c1fe:	18fb      	adds	r3, r7, r3
 801c200:	2200      	movs	r2, #0
 801c202:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c204:	230f      	movs	r3, #15
 801c206:	18fb      	adds	r3, r7, r3
 801c208:	781b      	ldrb	r3, [r3, #0]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d103      	bne.n	801c216 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	2221      	movs	r2, #33	@ 0x21
 801c212:	2101      	movs	r1, #1
 801c214:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c216:	230f      	movs	r3, #15
 801c218:	18fb      	adds	r3, r7, r3
 801c21a:	781b      	ldrb	r3, [r3, #0]
}
 801c21c:	0018      	movs	r0, r3
 801c21e:	46bd      	mov	sp, r7
 801c220:	b004      	add	sp, #16
 801c222:	bdb0      	pop	{r4, r5, r7, pc}
 801c224:	ff8fffbf 	.word	0xff8fffbf

0801c228 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c228:	b5b0      	push	{r4, r5, r7, lr}
 801c22a:	b086      	sub	sp, #24
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	60f8      	str	r0, [r7, #12]
 801c230:	60b9      	str	r1, [r7, #8]
 801c232:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c234:	2300      	movs	r3, #0
 801c236:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	2220      	movs	r2, #32
 801c23c:	5c9b      	ldrb	r3, [r3, r2]
 801c23e:	2b01      	cmp	r3, #1
 801c240:	d101      	bne.n	801c246 <HAL_RTC_SetTime+0x1e>
 801c242:	2302      	movs	r3, #2
 801c244:	e092      	b.n	801c36c <HAL_RTC_SetTime+0x144>
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	2220      	movs	r2, #32
 801c24a:	2101      	movs	r1, #1
 801c24c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	2221      	movs	r2, #33	@ 0x21
 801c252:	2102      	movs	r1, #2
 801c254:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d125      	bne.n	801c2a8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	689b      	ldr	r3, [r3, #8]
 801c262:	2240      	movs	r2, #64	@ 0x40
 801c264:	4013      	ands	r3, r2
 801c266:	d102      	bne.n	801c26e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c268:	68bb      	ldr	r3, [r7, #8]
 801c26a:	2200      	movs	r2, #0
 801c26c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	781b      	ldrb	r3, [r3, #0]
 801c272:	0018      	movs	r0, r3
 801c274:	f000 fa77 	bl	801c766 <RTC_ByteToBcd2>
 801c278:	0003      	movs	r3, r0
 801c27a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c27c:	68bb      	ldr	r3, [r7, #8]
 801c27e:	785b      	ldrb	r3, [r3, #1]
 801c280:	0018      	movs	r0, r3
 801c282:	f000 fa70 	bl	801c766 <RTC_ByteToBcd2>
 801c286:	0003      	movs	r3, r0
 801c288:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c28a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c28c:	68bb      	ldr	r3, [r7, #8]
 801c28e:	789b      	ldrb	r3, [r3, #2]
 801c290:	0018      	movs	r0, r3
 801c292:	f000 fa68 	bl	801c766 <RTC_ByteToBcd2>
 801c296:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c298:	0022      	movs	r2, r4
 801c29a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c29c:	68bb      	ldr	r3, [r7, #8]
 801c29e:	78db      	ldrb	r3, [r3, #3]
 801c2a0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c2a2:	4313      	orrs	r3, r2
 801c2a4:	617b      	str	r3, [r7, #20]
 801c2a6:	e017      	b.n	801c2d8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	689b      	ldr	r3, [r3, #8]
 801c2ae:	2240      	movs	r2, #64	@ 0x40
 801c2b0:	4013      	ands	r3, r2
 801c2b2:	d102      	bne.n	801c2ba <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c2b4:	68bb      	ldr	r3, [r7, #8]
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c2ba:	68bb      	ldr	r3, [r7, #8]
 801c2bc:	781b      	ldrb	r3, [r3, #0]
 801c2be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c2c0:	68bb      	ldr	r3, [r7, #8]
 801c2c2:	785b      	ldrb	r3, [r3, #1]
 801c2c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c2c6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c2c8:	68ba      	ldr	r2, [r7, #8]
 801c2ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c2cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	78db      	ldrb	r3, [r3, #3]
 801c2d2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c2d4:	4313      	orrs	r3, r2
 801c2d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	681b      	ldr	r3, [r3, #0]
 801c2dc:	22ca      	movs	r2, #202	@ 0xca
 801c2de:	625a      	str	r2, [r3, #36]	@ 0x24
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	2253      	movs	r2, #83	@ 0x53
 801c2e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c2e8:	2513      	movs	r5, #19
 801c2ea:	197c      	adds	r4, r7, r5
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	0018      	movs	r0, r3
 801c2f0:	f000 f9cb 	bl	801c68a <RTC_EnterInitMode>
 801c2f4:	0003      	movs	r3, r0
 801c2f6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c2f8:	0028      	movs	r0, r5
 801c2fa:	183b      	adds	r3, r7, r0
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d120      	bne.n	801c344 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	697a      	ldr	r2, [r7, #20]
 801c308:	491a      	ldr	r1, [pc, #104]	@ (801c374 <HAL_RTC_SetTime+0x14c>)
 801c30a:	400a      	ands	r2, r1
 801c30c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	689a      	ldr	r2, [r3, #8]
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	4917      	ldr	r1, [pc, #92]	@ (801c378 <HAL_RTC_SetTime+0x150>)
 801c31a:	400a      	ands	r2, r1
 801c31c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	6899      	ldr	r1, [r3, #8]
 801c324:	68bb      	ldr	r3, [r7, #8]
 801c326:	68da      	ldr	r2, [r3, #12]
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	691b      	ldr	r3, [r3, #16]
 801c32c:	431a      	orrs	r2, r3
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	430a      	orrs	r2, r1
 801c334:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c336:	183c      	adds	r4, r7, r0
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	0018      	movs	r0, r3
 801c33c:	f000 f9e9 	bl	801c712 <RTC_ExitInitMode>
 801c340:	0003      	movs	r3, r0
 801c342:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c344:	2313      	movs	r3, #19
 801c346:	18fb      	adds	r3, r7, r3
 801c348:	781b      	ldrb	r3, [r3, #0]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d103      	bne.n	801c356 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	2221      	movs	r2, #33	@ 0x21
 801c352:	2101      	movs	r1, #1
 801c354:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	22ff      	movs	r2, #255	@ 0xff
 801c35c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	2220      	movs	r2, #32
 801c362:	2100      	movs	r1, #0
 801c364:	5499      	strb	r1, [r3, r2]

  return status;
 801c366:	2313      	movs	r3, #19
 801c368:	18fb      	adds	r3, r7, r3
 801c36a:	781b      	ldrb	r3, [r3, #0]
}
 801c36c:	0018      	movs	r0, r3
 801c36e:	46bd      	mov	sp, r7
 801c370:	b006      	add	sp, #24
 801c372:	bdb0      	pop	{r4, r5, r7, pc}
 801c374:	007f7f7f 	.word	0x007f7f7f
 801c378:	fffbffff 	.word	0xfffbffff

0801c37c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b086      	sub	sp, #24
 801c380:	af00      	add	r7, sp, #0
 801c382:	60f8      	str	r0, [r7, #12]
 801c384:	60b9      	str	r1, [r7, #8]
 801c386:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c388:	2300      	movs	r3, #0
 801c38a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c392:	68bb      	ldr	r3, [r7, #8]
 801c394:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	691b      	ldr	r3, [r3, #16]
 801c39c:	045b      	lsls	r3, r3, #17
 801c39e:	0c5a      	lsrs	r2, r3, #17
 801c3a0:	68bb      	ldr	r3, [r7, #8]
 801c3a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	4a22      	ldr	r2, [pc, #136]	@ (801c434 <HAL_RTC_GetTime+0xb8>)
 801c3ac:	4013      	ands	r3, r2
 801c3ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c3b0:	697b      	ldr	r3, [r7, #20]
 801c3b2:	0c1b      	lsrs	r3, r3, #16
 801c3b4:	b2db      	uxtb	r3, r3
 801c3b6:	223f      	movs	r2, #63	@ 0x3f
 801c3b8:	4013      	ands	r3, r2
 801c3ba:	b2da      	uxtb	r2, r3
 801c3bc:	68bb      	ldr	r3, [r7, #8]
 801c3be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c3c0:	697b      	ldr	r3, [r7, #20]
 801c3c2:	0a1b      	lsrs	r3, r3, #8
 801c3c4:	b2db      	uxtb	r3, r3
 801c3c6:	227f      	movs	r2, #127	@ 0x7f
 801c3c8:	4013      	ands	r3, r2
 801c3ca:	b2da      	uxtb	r2, r3
 801c3cc:	68bb      	ldr	r3, [r7, #8]
 801c3ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c3d0:	697b      	ldr	r3, [r7, #20]
 801c3d2:	b2db      	uxtb	r3, r3
 801c3d4:	227f      	movs	r2, #127	@ 0x7f
 801c3d6:	4013      	ands	r3, r2
 801c3d8:	b2da      	uxtb	r2, r3
 801c3da:	68bb      	ldr	r3, [r7, #8]
 801c3dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c3de:	697b      	ldr	r3, [r7, #20]
 801c3e0:	0d9b      	lsrs	r3, r3, #22
 801c3e2:	b2db      	uxtb	r3, r3
 801c3e4:	2201      	movs	r2, #1
 801c3e6:	4013      	ands	r3, r2
 801c3e8:	b2da      	uxtb	r2, r3
 801c3ea:	68bb      	ldr	r3, [r7, #8]
 801c3ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d11a      	bne.n	801c42a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c3f4:	68bb      	ldr	r3, [r7, #8]
 801c3f6:	781b      	ldrb	r3, [r3, #0]
 801c3f8:	0018      	movs	r0, r3
 801c3fa:	f000 f9d5 	bl	801c7a8 <RTC_Bcd2ToByte>
 801c3fe:	0003      	movs	r3, r0
 801c400:	001a      	movs	r2, r3
 801c402:	68bb      	ldr	r3, [r7, #8]
 801c404:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c406:	68bb      	ldr	r3, [r7, #8]
 801c408:	785b      	ldrb	r3, [r3, #1]
 801c40a:	0018      	movs	r0, r3
 801c40c:	f000 f9cc 	bl	801c7a8 <RTC_Bcd2ToByte>
 801c410:	0003      	movs	r3, r0
 801c412:	001a      	movs	r2, r3
 801c414:	68bb      	ldr	r3, [r7, #8]
 801c416:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c418:	68bb      	ldr	r3, [r7, #8]
 801c41a:	789b      	ldrb	r3, [r3, #2]
 801c41c:	0018      	movs	r0, r3
 801c41e:	f000 f9c3 	bl	801c7a8 <RTC_Bcd2ToByte>
 801c422:	0003      	movs	r3, r0
 801c424:	001a      	movs	r2, r3
 801c426:	68bb      	ldr	r3, [r7, #8]
 801c428:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c42a:	2300      	movs	r3, #0
}
 801c42c:	0018      	movs	r0, r3
 801c42e:	46bd      	mov	sp, r7
 801c430:	b006      	add	sp, #24
 801c432:	bd80      	pop	{r7, pc}
 801c434:	007f7f7f 	.word	0x007f7f7f

0801c438 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c438:	b5b0      	push	{r4, r5, r7, lr}
 801c43a:	b086      	sub	sp, #24
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	60f8      	str	r0, [r7, #12]
 801c440:	60b9      	str	r1, [r7, #8]
 801c442:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c444:	2300      	movs	r3, #0
 801c446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	2220      	movs	r2, #32
 801c44c:	5c9b      	ldrb	r3, [r3, r2]
 801c44e:	2b01      	cmp	r3, #1
 801c450:	d101      	bne.n	801c456 <HAL_RTC_SetDate+0x1e>
 801c452:	2302      	movs	r3, #2
 801c454:	e07e      	b.n	801c554 <HAL_RTC_SetDate+0x11c>
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	2220      	movs	r2, #32
 801c45a:	2101      	movs	r1, #1
 801c45c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	2221      	movs	r2, #33	@ 0x21
 801c462:	2102      	movs	r1, #2
 801c464:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d10e      	bne.n	801c48a <HAL_RTC_SetDate+0x52>
 801c46c:	68bb      	ldr	r3, [r7, #8]
 801c46e:	785b      	ldrb	r3, [r3, #1]
 801c470:	001a      	movs	r2, r3
 801c472:	2310      	movs	r3, #16
 801c474:	4013      	ands	r3, r2
 801c476:	d008      	beq.n	801c48a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c478:	68bb      	ldr	r3, [r7, #8]
 801c47a:	785b      	ldrb	r3, [r3, #1]
 801c47c:	2210      	movs	r2, #16
 801c47e:	4393      	bics	r3, r2
 801c480:	b2db      	uxtb	r3, r3
 801c482:	330a      	adds	r3, #10
 801c484:	b2da      	uxtb	r2, r3
 801c486:	68bb      	ldr	r3, [r7, #8]
 801c488:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d11c      	bne.n	801c4ca <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c490:	68bb      	ldr	r3, [r7, #8]
 801c492:	78db      	ldrb	r3, [r3, #3]
 801c494:	0018      	movs	r0, r3
 801c496:	f000 f966 	bl	801c766 <RTC_ByteToBcd2>
 801c49a:	0003      	movs	r3, r0
 801c49c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c49e:	68bb      	ldr	r3, [r7, #8]
 801c4a0:	785b      	ldrb	r3, [r3, #1]
 801c4a2:	0018      	movs	r0, r3
 801c4a4:	f000 f95f 	bl	801c766 <RTC_ByteToBcd2>
 801c4a8:	0003      	movs	r3, r0
 801c4aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c4ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c4ae:	68bb      	ldr	r3, [r7, #8]
 801c4b0:	789b      	ldrb	r3, [r3, #2]
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	f000 f957 	bl	801c766 <RTC_ByteToBcd2>
 801c4b8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c4ba:	0022      	movs	r2, r4
 801c4bc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c4be:	68bb      	ldr	r3, [r7, #8]
 801c4c0:	781b      	ldrb	r3, [r3, #0]
 801c4c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c4c4:	4313      	orrs	r3, r2
 801c4c6:	617b      	str	r3, [r7, #20]
 801c4c8:	e00e      	b.n	801c4e8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c4ca:	68bb      	ldr	r3, [r7, #8]
 801c4cc:	78db      	ldrb	r3, [r3, #3]
 801c4ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c4d0:	68bb      	ldr	r3, [r7, #8]
 801c4d2:	785b      	ldrb	r3, [r3, #1]
 801c4d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c4d6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c4d8:	68ba      	ldr	r2, [r7, #8]
 801c4da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c4dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c4de:	68bb      	ldr	r3, [r7, #8]
 801c4e0:	781b      	ldrb	r3, [r3, #0]
 801c4e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c4e4:	4313      	orrs	r3, r2
 801c4e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	22ca      	movs	r2, #202	@ 0xca
 801c4ee:	625a      	str	r2, [r3, #36]	@ 0x24
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	2253      	movs	r2, #83	@ 0x53
 801c4f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c4f8:	2513      	movs	r5, #19
 801c4fa:	197c      	adds	r4, r7, r5
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	0018      	movs	r0, r3
 801c500:	f000 f8c3 	bl	801c68a <RTC_EnterInitMode>
 801c504:	0003      	movs	r3, r0
 801c506:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c508:	0028      	movs	r0, r5
 801c50a:	183b      	adds	r3, r7, r0
 801c50c:	781b      	ldrb	r3, [r3, #0]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d10c      	bne.n	801c52c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	697a      	ldr	r2, [r7, #20]
 801c518:	4910      	ldr	r1, [pc, #64]	@ (801c55c <HAL_RTC_SetDate+0x124>)
 801c51a:	400a      	ands	r2, r1
 801c51c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c51e:	183c      	adds	r4, r7, r0
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	0018      	movs	r0, r3
 801c524:	f000 f8f5 	bl	801c712 <RTC_ExitInitMode>
 801c528:	0003      	movs	r3, r0
 801c52a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c52c:	2313      	movs	r3, #19
 801c52e:	18fb      	adds	r3, r7, r3
 801c530:	781b      	ldrb	r3, [r3, #0]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d103      	bne.n	801c53e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	2221      	movs	r2, #33	@ 0x21
 801c53a:	2101      	movs	r1, #1
 801c53c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	22ff      	movs	r2, #255	@ 0xff
 801c544:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	2220      	movs	r2, #32
 801c54a:	2100      	movs	r1, #0
 801c54c:	5499      	strb	r1, [r3, r2]

  return status;
 801c54e:	2313      	movs	r3, #19
 801c550:	18fb      	adds	r3, r7, r3
 801c552:	781b      	ldrb	r3, [r3, #0]
}
 801c554:	0018      	movs	r0, r3
 801c556:	46bd      	mov	sp, r7
 801c558:	b006      	add	sp, #24
 801c55a:	bdb0      	pop	{r4, r5, r7, pc}
 801c55c:	00ffff3f 	.word	0x00ffff3f

0801c560 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c560:	b580      	push	{r7, lr}
 801c562:	b086      	sub	sp, #24
 801c564:	af00      	add	r7, sp, #0
 801c566:	60f8      	str	r0, [r7, #12]
 801c568:	60b9      	str	r1, [r7, #8]
 801c56a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c56c:	2300      	movs	r3, #0
 801c56e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	685b      	ldr	r3, [r3, #4]
 801c576:	4a21      	ldr	r2, [pc, #132]	@ (801c5fc <HAL_RTC_GetDate+0x9c>)
 801c578:	4013      	ands	r3, r2
 801c57a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c57c:	697b      	ldr	r3, [r7, #20]
 801c57e:	0c1b      	lsrs	r3, r3, #16
 801c580:	b2da      	uxtb	r2, r3
 801c582:	68bb      	ldr	r3, [r7, #8]
 801c584:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c586:	697b      	ldr	r3, [r7, #20]
 801c588:	0a1b      	lsrs	r3, r3, #8
 801c58a:	b2db      	uxtb	r3, r3
 801c58c:	221f      	movs	r2, #31
 801c58e:	4013      	ands	r3, r2
 801c590:	b2da      	uxtb	r2, r3
 801c592:	68bb      	ldr	r3, [r7, #8]
 801c594:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c596:	697b      	ldr	r3, [r7, #20]
 801c598:	b2db      	uxtb	r3, r3
 801c59a:	223f      	movs	r2, #63	@ 0x3f
 801c59c:	4013      	ands	r3, r2
 801c59e:	b2da      	uxtb	r2, r3
 801c5a0:	68bb      	ldr	r3, [r7, #8]
 801c5a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c5a4:	697b      	ldr	r3, [r7, #20]
 801c5a6:	0b5b      	lsrs	r3, r3, #13
 801c5a8:	b2db      	uxtb	r3, r3
 801c5aa:	2207      	movs	r2, #7
 801c5ac:	4013      	ands	r3, r2
 801c5ae:	b2da      	uxtb	r2, r3
 801c5b0:	68bb      	ldr	r3, [r7, #8]
 801c5b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d11a      	bne.n	801c5f0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c5ba:	68bb      	ldr	r3, [r7, #8]
 801c5bc:	78db      	ldrb	r3, [r3, #3]
 801c5be:	0018      	movs	r0, r3
 801c5c0:	f000 f8f2 	bl	801c7a8 <RTC_Bcd2ToByte>
 801c5c4:	0003      	movs	r3, r0
 801c5c6:	001a      	movs	r2, r3
 801c5c8:	68bb      	ldr	r3, [r7, #8]
 801c5ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c5cc:	68bb      	ldr	r3, [r7, #8]
 801c5ce:	785b      	ldrb	r3, [r3, #1]
 801c5d0:	0018      	movs	r0, r3
 801c5d2:	f000 f8e9 	bl	801c7a8 <RTC_Bcd2ToByte>
 801c5d6:	0003      	movs	r3, r0
 801c5d8:	001a      	movs	r2, r3
 801c5da:	68bb      	ldr	r3, [r7, #8]
 801c5dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c5de:	68bb      	ldr	r3, [r7, #8]
 801c5e0:	789b      	ldrb	r3, [r3, #2]
 801c5e2:	0018      	movs	r0, r3
 801c5e4:	f000 f8e0 	bl	801c7a8 <RTC_Bcd2ToByte>
 801c5e8:	0003      	movs	r3, r0
 801c5ea:	001a      	movs	r2, r3
 801c5ec:	68bb      	ldr	r3, [r7, #8]
 801c5ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c5f0:	2300      	movs	r3, #0
}
 801c5f2:	0018      	movs	r0, r3
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	b006      	add	sp, #24
 801c5f8:	bd80      	pop	{r7, pc}
 801c5fa:	46c0      	nop			@ (mov r8, r8)
 801c5fc:	00ffff3f 	.word	0x00ffff3f

0801c600 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b084      	sub	sp, #16
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c608:	2300      	movs	r3, #0
 801c60a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	4a0e      	ldr	r2, [pc, #56]	@ (801c64c <HAL_RTC_WaitForSynchro+0x4c>)
 801c612:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c614:	f7f8 f980 	bl	8014918 <HAL_GetTick>
 801c618:	0003      	movs	r3, r0
 801c61a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c61c:	e00a      	b.n	801c634 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c61e:	f7f8 f97b 	bl	8014918 <HAL_GetTick>
 801c622:	0002      	movs	r2, r0
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	1ad2      	subs	r2, r2, r3
 801c628:	23fa      	movs	r3, #250	@ 0xfa
 801c62a:	009b      	lsls	r3, r3, #2
 801c62c:	429a      	cmp	r2, r3
 801c62e:	d901      	bls.n	801c634 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c630:	2303      	movs	r3, #3
 801c632:	e006      	b.n	801c642 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	68db      	ldr	r3, [r3, #12]
 801c63a:	2220      	movs	r2, #32
 801c63c:	4013      	ands	r3, r2
 801c63e:	d0ee      	beq.n	801c61e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c640:	2300      	movs	r3, #0
}
 801c642:	0018      	movs	r0, r3
 801c644:	46bd      	mov	sp, r7
 801c646:	b004      	add	sp, #16
 801c648:	bd80      	pop	{r7, pc}
 801c64a:	46c0      	nop			@ (mov r8, r8)
 801c64c:	0001ff5f 	.word	0x0001ff5f

0801c650 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b082      	sub	sp, #8
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	22ca      	movs	r2, #202	@ 0xca
 801c65e:	625a      	str	r2, [r3, #36]	@ 0x24
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	2253      	movs	r2, #83	@ 0x53
 801c666:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	689a      	ldr	r2, [r3, #8]
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	2180      	movs	r1, #128	@ 0x80
 801c674:	0249      	lsls	r1, r1, #9
 801c676:	430a      	orrs	r2, r1
 801c678:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	22ff      	movs	r2, #255	@ 0xff
 801c680:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c682:	46c0      	nop			@ (mov r8, r8)
 801c684:	46bd      	mov	sp, r7
 801c686:	b002      	add	sp, #8
 801c688:	bd80      	pop	{r7, pc}

0801c68a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c68a:	b580      	push	{r7, lr}
 801c68c:	b084      	sub	sp, #16
 801c68e:	af00      	add	r7, sp, #0
 801c690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c692:	2300      	movs	r3, #0
 801c694:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c696:	230f      	movs	r3, #15
 801c698:	18fb      	adds	r3, r7, r3
 801c69a:	2200      	movs	r2, #0
 801c69c:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	68db      	ldr	r3, [r3, #12]
 801c6a4:	2240      	movs	r2, #64	@ 0x40
 801c6a6:	4013      	ands	r3, r2
 801c6a8:	d12c      	bne.n	801c704 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	68da      	ldr	r2, [r3, #12]
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	2180      	movs	r1, #128	@ 0x80
 801c6b6:	430a      	orrs	r2, r1
 801c6b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c6ba:	f7f8 f92d 	bl	8014918 <HAL_GetTick>
 801c6be:	0003      	movs	r3, r0
 801c6c0:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c6c2:	e014      	b.n	801c6ee <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c6c4:	f7f8 f928 	bl	8014918 <HAL_GetTick>
 801c6c8:	0002      	movs	r2, r0
 801c6ca:	68bb      	ldr	r3, [r7, #8]
 801c6cc:	1ad2      	subs	r2, r2, r3
 801c6ce:	200f      	movs	r0, #15
 801c6d0:	183b      	adds	r3, r7, r0
 801c6d2:	1839      	adds	r1, r7, r0
 801c6d4:	7809      	ldrb	r1, [r1, #0]
 801c6d6:	7019      	strb	r1, [r3, #0]
 801c6d8:	23fa      	movs	r3, #250	@ 0xfa
 801c6da:	009b      	lsls	r3, r3, #2
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d906      	bls.n	801c6ee <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	2221      	movs	r2, #33	@ 0x21
 801c6e4:	2104      	movs	r1, #4
 801c6e6:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c6e8:	183b      	adds	r3, r7, r0
 801c6ea:	2201      	movs	r2, #1
 801c6ec:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	68db      	ldr	r3, [r3, #12]
 801c6f4:	2240      	movs	r2, #64	@ 0x40
 801c6f6:	4013      	ands	r3, r2
 801c6f8:	d104      	bne.n	801c704 <RTC_EnterInitMode+0x7a>
 801c6fa:	230f      	movs	r3, #15
 801c6fc:	18fb      	adds	r3, r7, r3
 801c6fe:	781b      	ldrb	r3, [r3, #0]
 801c700:	2b01      	cmp	r3, #1
 801c702:	d1df      	bne.n	801c6c4 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c704:	230f      	movs	r3, #15
 801c706:	18fb      	adds	r3, r7, r3
 801c708:	781b      	ldrb	r3, [r3, #0]
}
 801c70a:	0018      	movs	r0, r3
 801c70c:	46bd      	mov	sp, r7
 801c70e:	b004      	add	sp, #16
 801c710:	bd80      	pop	{r7, pc}

0801c712 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c712:	b590      	push	{r4, r7, lr}
 801c714:	b085      	sub	sp, #20
 801c716:	af00      	add	r7, sp, #0
 801c718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c71a:	240f      	movs	r4, #15
 801c71c:	193b      	adds	r3, r7, r4
 801c71e:	2200      	movs	r2, #0
 801c720:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	68da      	ldr	r2, [r3, #12]
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	2180      	movs	r1, #128	@ 0x80
 801c72e:	438a      	bics	r2, r1
 801c730:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	689b      	ldr	r3, [r3, #8]
 801c738:	2220      	movs	r2, #32
 801c73a:	4013      	ands	r3, r2
 801c73c:	d10c      	bne.n	801c758 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	0018      	movs	r0, r3
 801c742:	f7ff ff5d 	bl	801c600 <HAL_RTC_WaitForSynchro>
 801c746:	1e03      	subs	r3, r0, #0
 801c748:	d006      	beq.n	801c758 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	2221      	movs	r2, #33	@ 0x21
 801c74e:	2104      	movs	r1, #4
 801c750:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c752:	193b      	adds	r3, r7, r4
 801c754:	2201      	movs	r2, #1
 801c756:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c758:	230f      	movs	r3, #15
 801c75a:	18fb      	adds	r3, r7, r3
 801c75c:	781b      	ldrb	r3, [r3, #0]
}
 801c75e:	0018      	movs	r0, r3
 801c760:	46bd      	mov	sp, r7
 801c762:	b005      	add	sp, #20
 801c764:	bd90      	pop	{r4, r7, pc}

0801c766 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c766:	b580      	push	{r7, lr}
 801c768:	b084      	sub	sp, #16
 801c76a:	af00      	add	r7, sp, #0
 801c76c:	0002      	movs	r2, r0
 801c76e:	1dfb      	adds	r3, r7, #7
 801c770:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c772:	2300      	movs	r3, #0
 801c774:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c776:	e007      	b.n	801c788 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	3301      	adds	r3, #1
 801c77c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c77e:	1dfb      	adds	r3, r7, #7
 801c780:	1dfa      	adds	r2, r7, #7
 801c782:	7812      	ldrb	r2, [r2, #0]
 801c784:	3a0a      	subs	r2, #10
 801c786:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c788:	1dfb      	adds	r3, r7, #7
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	2b09      	cmp	r3, #9
 801c78e:	d8f3      	bhi.n	801c778 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	b2db      	uxtb	r3, r3
 801c794:	011b      	lsls	r3, r3, #4
 801c796:	b2da      	uxtb	r2, r3
 801c798:	1dfb      	adds	r3, r7, #7
 801c79a:	781b      	ldrb	r3, [r3, #0]
 801c79c:	4313      	orrs	r3, r2
 801c79e:	b2db      	uxtb	r3, r3
}
 801c7a0:	0018      	movs	r0, r3
 801c7a2:	46bd      	mov	sp, r7
 801c7a4:	b004      	add	sp, #16
 801c7a6:	bd80      	pop	{r7, pc}

0801c7a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c7a8:	b580      	push	{r7, lr}
 801c7aa:	b084      	sub	sp, #16
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	0002      	movs	r2, r0
 801c7b0:	1dfb      	adds	r3, r7, #7
 801c7b2:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c7b4:	2300      	movs	r3, #0
 801c7b6:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c7b8:	1dfb      	adds	r3, r7, #7
 801c7ba:	781b      	ldrb	r3, [r3, #0]
 801c7bc:	091b      	lsrs	r3, r3, #4
 801c7be:	b2db      	uxtb	r3, r3
 801c7c0:	001a      	movs	r2, r3
 801c7c2:	0013      	movs	r3, r2
 801c7c4:	009b      	lsls	r3, r3, #2
 801c7c6:	189b      	adds	r3, r3, r2
 801c7c8:	005b      	lsls	r3, r3, #1
 801c7ca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	b2da      	uxtb	r2, r3
 801c7d0:	1dfb      	adds	r3, r7, #7
 801c7d2:	781b      	ldrb	r3, [r3, #0]
 801c7d4:	210f      	movs	r1, #15
 801c7d6:	400b      	ands	r3, r1
 801c7d8:	b2db      	uxtb	r3, r3
 801c7da:	18d3      	adds	r3, r2, r3
 801c7dc:	b2db      	uxtb	r3, r3
}
 801c7de:	0018      	movs	r0, r3
 801c7e0:	46bd      	mov	sp, r7
 801c7e2:	b004      	add	sp, #16
 801c7e4:	bd80      	pop	{r7, pc}
	...

0801c7e8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c7e8:	b580      	push	{r7, lr}
 801c7ea:	b086      	sub	sp, #24
 801c7ec:	af00      	add	r7, sp, #0
 801c7ee:	60f8      	str	r0, [r7, #12]
 801c7f0:	60b9      	str	r1, [r7, #8]
 801c7f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c7f4:	4b64      	ldr	r3, [pc, #400]	@ (801c988 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	22fa      	movs	r2, #250	@ 0xfa
 801c7fa:	01d1      	lsls	r1, r2, #7
 801c7fc:	0018      	movs	r0, r3
 801c7fe:	f7e3 fcd1 	bl	80001a4 <__udivsi3>
 801c802:	0003      	movs	r3, r0
 801c804:	001a      	movs	r2, r3
 801c806:	0013      	movs	r3, r2
 801c808:	015b      	lsls	r3, r3, #5
 801c80a:	1a9b      	subs	r3, r3, r2
 801c80c:	009b      	lsls	r3, r3, #2
 801c80e:	189b      	adds	r3, r3, r2
 801c810:	00db      	lsls	r3, r3, #3
 801c812:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	2220      	movs	r2, #32
 801c818:	5c9b      	ldrb	r3, [r3, r2]
 801c81a:	2b01      	cmp	r3, #1
 801c81c:	d101      	bne.n	801c822 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c81e:	2302      	movs	r3, #2
 801c820:	e0ad      	b.n	801c97e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	2220      	movs	r2, #32
 801c826:	2101      	movs	r1, #1
 801c828:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	2221      	movs	r2, #33	@ 0x21
 801c82e:	2102      	movs	r1, #2
 801c830:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	22ca      	movs	r2, #202	@ 0xca
 801c838:	625a      	str	r2, [r3, #36]	@ 0x24
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	681b      	ldr	r3, [r3, #0]
 801c83e:	2253      	movs	r2, #83	@ 0x53
 801c840:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	689a      	ldr	r2, [r3, #8]
 801c848:	2380      	movs	r3, #128	@ 0x80
 801c84a:	00db      	lsls	r3, r3, #3
 801c84c:	4013      	ands	r3, r2
 801c84e:	d019      	beq.n	801c884 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c850:	697b      	ldr	r3, [r7, #20]
 801c852:	3b01      	subs	r3, #1
 801c854:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c856:	697b      	ldr	r3, [r7, #20]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d10d      	bne.n	801c878 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	22ff      	movs	r2, #255	@ 0xff
 801c862:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	2221      	movs	r2, #33	@ 0x21
 801c868:	2103      	movs	r1, #3
 801c86a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	2220      	movs	r2, #32
 801c870:	2100      	movs	r1, #0
 801c872:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c874:	2303      	movs	r3, #3
 801c876:	e082      	b.n	801c97e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	68db      	ldr	r3, [r3, #12]
 801c87e:	2204      	movs	r2, #4
 801c880:	4013      	ands	r3, r2
 801c882:	d1e5      	bne.n	801c850 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	689a      	ldr	r2, [r3, #8]
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	493f      	ldr	r1, [pc, #252]	@ (801c98c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c890:	400a      	ands	r2, r1
 801c892:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	68db      	ldr	r3, [r3, #12]
 801c89a:	22ff      	movs	r2, #255	@ 0xff
 801c89c:	401a      	ands	r2, r3
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	493b      	ldr	r1, [pc, #236]	@ (801c990 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c8a4:	430a      	orrs	r2, r1
 801c8a6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c8a8:	4b37      	ldr	r3, [pc, #220]	@ (801c988 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	22fa      	movs	r2, #250	@ 0xfa
 801c8ae:	01d1      	lsls	r1, r2, #7
 801c8b0:	0018      	movs	r0, r3
 801c8b2:	f7e3 fc77 	bl	80001a4 <__udivsi3>
 801c8b6:	0003      	movs	r3, r0
 801c8b8:	001a      	movs	r2, r3
 801c8ba:	0013      	movs	r3, r2
 801c8bc:	015b      	lsls	r3, r3, #5
 801c8be:	1a9b      	subs	r3, r3, r2
 801c8c0:	009b      	lsls	r3, r3, #2
 801c8c2:	189b      	adds	r3, r3, r2
 801c8c4:	00db      	lsls	r3, r3, #3
 801c8c6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c8c8:	697b      	ldr	r3, [r7, #20]
 801c8ca:	3b01      	subs	r3, #1
 801c8cc:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c8ce:	697b      	ldr	r3, [r7, #20]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d10d      	bne.n	801c8f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	22ff      	movs	r2, #255	@ 0xff
 801c8da:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	2221      	movs	r2, #33	@ 0x21
 801c8e0:	2103      	movs	r1, #3
 801c8e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	2220      	movs	r2, #32
 801c8e8:	2100      	movs	r1, #0
 801c8ea:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c8ec:	2303      	movs	r3, #3
 801c8ee:	e046      	b.n	801c97e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	68db      	ldr	r3, [r3, #12]
 801c8f6:	2204      	movs	r2, #4
 801c8f8:	4013      	ands	r3, r2
 801c8fa:	d0e5      	beq.n	801c8c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	689a      	ldr	r2, [r3, #8]
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	2107      	movs	r1, #7
 801c908:	438a      	bics	r2, r1
 801c90a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	6899      	ldr	r1, [r3, #8]
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	687a      	ldr	r2, [r7, #4]
 801c918:	430a      	orrs	r2, r1
 801c91a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	68ba      	ldr	r2, [r7, #8]
 801c922:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c924:	4b1b      	ldr	r3, [pc, #108]	@ (801c994 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c926:	681a      	ldr	r2, [r3, #0]
 801c928:	4b1a      	ldr	r3, [pc, #104]	@ (801c994 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c92a:	2180      	movs	r1, #128	@ 0x80
 801c92c:	0349      	lsls	r1, r1, #13
 801c92e:	430a      	orrs	r2, r1
 801c930:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c932:	4b18      	ldr	r3, [pc, #96]	@ (801c994 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c934:	689a      	ldr	r2, [r3, #8]
 801c936:	4b17      	ldr	r3, [pc, #92]	@ (801c994 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c938:	2180      	movs	r1, #128	@ 0x80
 801c93a:	0349      	lsls	r1, r1, #13
 801c93c:	430a      	orrs	r2, r1
 801c93e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	689a      	ldr	r2, [r3, #8]
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	2180      	movs	r1, #128	@ 0x80
 801c94c:	01c9      	lsls	r1, r1, #7
 801c94e:	430a      	orrs	r2, r1
 801c950:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	689a      	ldr	r2, [r3, #8]
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	2180      	movs	r1, #128	@ 0x80
 801c95e:	00c9      	lsls	r1, r1, #3
 801c960:	430a      	orrs	r2, r1
 801c962:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	22ff      	movs	r2, #255	@ 0xff
 801c96a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	2221      	movs	r2, #33	@ 0x21
 801c970:	2101      	movs	r1, #1
 801c972:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	2220      	movs	r2, #32
 801c978:	2100      	movs	r1, #0
 801c97a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c97c:	2300      	movs	r3, #0
}
 801c97e:	0018      	movs	r0, r3
 801c980:	46bd      	mov	sp, r7
 801c982:	b006      	add	sp, #24
 801c984:	bd80      	pop	{r7, pc}
 801c986:	46c0      	nop			@ (mov r8, r8)
 801c988:	200000ec 	.word	0x200000ec
 801c98c:	fffffbff 	.word	0xfffffbff
 801c990:	fffffb7f 	.word	0xfffffb7f
 801c994:	40010400 	.word	0x40010400

0801c998 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801c998:	b580      	push	{r7, lr}
 801c99a:	b084      	sub	sp, #16
 801c99c:	af00      	add	r7, sp, #0
 801c99e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	2220      	movs	r2, #32
 801c9a8:	5c9b      	ldrb	r3, [r3, r2]
 801c9aa:	2b01      	cmp	r3, #1
 801c9ac:	d101      	bne.n	801c9b2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801c9ae:	2302      	movs	r3, #2
 801c9b0:	e04e      	b.n	801ca50 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	2220      	movs	r2, #32
 801c9b6:	2101      	movs	r1, #1
 801c9b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	2221      	movs	r2, #33	@ 0x21
 801c9be:	2102      	movs	r1, #2
 801c9c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	22ca      	movs	r2, #202	@ 0xca
 801c9c8:	625a      	str	r2, [r3, #36]	@ 0x24
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	2253      	movs	r2, #83	@ 0x53
 801c9d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	689a      	ldr	r2, [r3, #8]
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	491e      	ldr	r1, [pc, #120]	@ (801ca58 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801c9de:	400a      	ands	r2, r1
 801c9e0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	689a      	ldr	r2, [r3, #8]
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	491b      	ldr	r1, [pc, #108]	@ (801ca5c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801c9ee:	400a      	ands	r2, r1
 801c9f0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c9f2:	f7f7 ff91 	bl	8014918 <HAL_GetTick>
 801c9f6:	0003      	movs	r3, r0
 801c9f8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c9fa:	e016      	b.n	801ca2a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c9fc:	f7f7 ff8c 	bl	8014918 <HAL_GetTick>
 801ca00:	0002      	movs	r2, r0
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	1ad2      	subs	r2, r2, r3
 801ca06:	23fa      	movs	r3, #250	@ 0xfa
 801ca08:	009b      	lsls	r3, r3, #2
 801ca0a:	429a      	cmp	r2, r3
 801ca0c:	d90d      	bls.n	801ca2a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	22ff      	movs	r2, #255	@ 0xff
 801ca14:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	2221      	movs	r2, #33	@ 0x21
 801ca1a:	2103      	movs	r1, #3
 801ca1c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	2220      	movs	r2, #32
 801ca22:	2100      	movs	r1, #0
 801ca24:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801ca26:	2303      	movs	r3, #3
 801ca28:	e012      	b.n	801ca50 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	68db      	ldr	r3, [r3, #12]
 801ca30:	2204      	movs	r2, #4
 801ca32:	4013      	ands	r3, r2
 801ca34:	d0e2      	beq.n	801c9fc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	22ff      	movs	r2, #255	@ 0xff
 801ca3c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	2221      	movs	r2, #33	@ 0x21
 801ca42:	2101      	movs	r1, #1
 801ca44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	2220      	movs	r2, #32
 801ca4a:	2100      	movs	r1, #0
 801ca4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ca4e:	2300      	movs	r3, #0
}
 801ca50:	0018      	movs	r0, r3
 801ca52:	46bd      	mov	sp, r7
 801ca54:	b004      	add	sp, #16
 801ca56:	bd80      	pop	{r7, pc}
 801ca58:	fffffbff 	.word	0xfffffbff
 801ca5c:	ffffbfff 	.word	0xffffbfff

0801ca60 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b082      	sub	sp, #8
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801ca68:	4b13      	ldr	r3, [pc, #76]	@ (801cab8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801ca6a:	2280      	movs	r2, #128	@ 0x80
 801ca6c:	0352      	lsls	r2, r2, #13
 801ca6e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	689a      	ldr	r2, [r3, #8]
 801ca76:	2380      	movs	r3, #128	@ 0x80
 801ca78:	01db      	lsls	r3, r3, #7
 801ca7a:	4013      	ands	r3, r2
 801ca7c:	d014      	beq.n	801caa8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	68da      	ldr	r2, [r3, #12]
 801ca84:	2380      	movs	r3, #128	@ 0x80
 801ca86:	00db      	lsls	r3, r3, #3
 801ca88:	4013      	ands	r3, r2
 801ca8a:	d00d      	beq.n	801caa8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	68db      	ldr	r3, [r3, #12]
 801ca92:	22ff      	movs	r2, #255	@ 0xff
 801ca94:	401a      	ands	r2, r3
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	4908      	ldr	r1, [pc, #32]	@ (801cabc <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801ca9c:	430a      	orrs	r2, r1
 801ca9e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	0018      	movs	r0, r3
 801caa4:	f000 f80c 	bl	801cac0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	2221      	movs	r2, #33	@ 0x21
 801caac:	2101      	movs	r1, #1
 801caae:	5499      	strb	r1, [r3, r2]
}
 801cab0:	46c0      	nop			@ (mov r8, r8)
 801cab2:	46bd      	mov	sp, r7
 801cab4:	b002      	add	sp, #8
 801cab6:	bd80      	pop	{r7, pc}
 801cab8:	40010400 	.word	0x40010400
 801cabc:	fffffb7f 	.word	0xfffffb7f

0801cac0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801cac0:	b580      	push	{r7, lr}
 801cac2:	b082      	sub	sp, #8
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801cac8:	46c0      	nop			@ (mov r8, r8)
 801caca:	46bd      	mov	sp, r7
 801cacc:	b002      	add	sp, #8
 801cace:	bd80      	pop	{r7, pc}

0801cad0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801cad0:	b580      	push	{r7, lr}
 801cad2:	b086      	sub	sp, #24
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	60f8      	str	r0, [r7, #12]
 801cad8:	60b9      	str	r1, [r7, #8]
 801cada:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801cadc:	2300      	movs	r3, #0
 801cade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	3350      	adds	r3, #80	@ 0x50
 801cae6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801cae8:	68bb      	ldr	r3, [r7, #8]
 801caea:	009b      	lsls	r3, r3, #2
 801caec:	697a      	ldr	r2, [r7, #20]
 801caee:	18d3      	adds	r3, r2, r3
 801caf0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801caf2:	697b      	ldr	r3, [r7, #20]
 801caf4:	687a      	ldr	r2, [r7, #4]
 801caf6:	601a      	str	r2, [r3, #0]
}
 801caf8:	46c0      	nop			@ (mov r8, r8)
 801cafa:	46bd      	mov	sp, r7
 801cafc:	b006      	add	sp, #24
 801cafe:	bd80      	pop	{r7, pc}

0801cb00 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801cb00:	b580      	push	{r7, lr}
 801cb02:	b084      	sub	sp, #16
 801cb04:	af00      	add	r7, sp, #0
 801cb06:	6078      	str	r0, [r7, #4]
 801cb08:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	3350      	adds	r3, #80	@ 0x50
 801cb14:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801cb16:	683b      	ldr	r3, [r7, #0]
 801cb18:	009b      	lsls	r3, r3, #2
 801cb1a:	68fa      	ldr	r2, [r7, #12]
 801cb1c:	18d3      	adds	r3, r2, r3
 801cb1e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	681b      	ldr	r3, [r3, #0]
}
 801cb24:	0018      	movs	r0, r3
 801cb26:	46bd      	mov	sp, r7
 801cb28:	b004      	add	sp, #16
 801cb2a:	bd80      	pop	{r7, pc}

0801cb2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b082      	sub	sp, #8
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d101      	bne.n	801cb3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cb3a:	2301      	movs	r3, #1
 801cb3c:	e032      	b.n	801cba4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	2239      	movs	r2, #57	@ 0x39
 801cb42:	5c9b      	ldrb	r3, [r3, r2]
 801cb44:	b2db      	uxtb	r3, r3
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d107      	bne.n	801cb5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	2238      	movs	r2, #56	@ 0x38
 801cb4e:	2100      	movs	r1, #0
 801cb50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	0018      	movs	r0, r3
 801cb56:	f7f6 fec3 	bl	80138e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	2239      	movs	r2, #57	@ 0x39
 801cb5e:	2102      	movs	r1, #2
 801cb60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	681a      	ldr	r2, [r3, #0]
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	3304      	adds	r3, #4
 801cb6a:	0019      	movs	r1, r3
 801cb6c:	0010      	movs	r0, r2
 801cb6e:	f000 fa1d 	bl	801cfac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	223e      	movs	r2, #62	@ 0x3e
 801cb76:	2101      	movs	r1, #1
 801cb78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	223a      	movs	r2, #58	@ 0x3a
 801cb7e:	2101      	movs	r1, #1
 801cb80:	5499      	strb	r1, [r3, r2]
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	223b      	movs	r2, #59	@ 0x3b
 801cb86:	2101      	movs	r1, #1
 801cb88:	5499      	strb	r1, [r3, r2]
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	223c      	movs	r2, #60	@ 0x3c
 801cb8e:	2101      	movs	r1, #1
 801cb90:	5499      	strb	r1, [r3, r2]
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	223d      	movs	r2, #61	@ 0x3d
 801cb96:	2101      	movs	r1, #1
 801cb98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2239      	movs	r2, #57	@ 0x39
 801cb9e:	2101      	movs	r1, #1
 801cba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cba2:	2300      	movs	r3, #0
}
 801cba4:	0018      	movs	r0, r3
 801cba6:	46bd      	mov	sp, r7
 801cba8:	b002      	add	sp, #8
 801cbaa:	bd80      	pop	{r7, pc}

0801cbac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cbac:	b580      	push	{r7, lr}
 801cbae:	b084      	sub	sp, #16
 801cbb0:	af00      	add	r7, sp, #0
 801cbb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	2239      	movs	r2, #57	@ 0x39
 801cbb8:	5c9b      	ldrb	r3, [r3, r2]
 801cbba:	b2db      	uxtb	r3, r3
 801cbbc:	2b01      	cmp	r3, #1
 801cbbe:	d001      	beq.n	801cbc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cbc0:	2301      	movs	r3, #1
 801cbc2:	e033      	b.n	801cc2c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	2239      	movs	r2, #57	@ 0x39
 801cbc8:	2102      	movs	r1, #2
 801cbca:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	681a      	ldr	r2, [r3, #0]
 801cbd0:	2380      	movs	r3, #128	@ 0x80
 801cbd2:	05db      	lsls	r3, r3, #23
 801cbd4:	429a      	cmp	r2, r3
 801cbd6:	d00e      	beq.n	801cbf6 <HAL_TIM_Base_Start+0x4a>
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	4a15      	ldr	r2, [pc, #84]	@ (801cc34 <HAL_TIM_Base_Start+0x88>)
 801cbde:	4293      	cmp	r3, r2
 801cbe0:	d009      	beq.n	801cbf6 <HAL_TIM_Base_Start+0x4a>
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	4a14      	ldr	r2, [pc, #80]	@ (801cc38 <HAL_TIM_Base_Start+0x8c>)
 801cbe8:	4293      	cmp	r3, r2
 801cbea:	d004      	beq.n	801cbf6 <HAL_TIM_Base_Start+0x4a>
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	4a12      	ldr	r2, [pc, #72]	@ (801cc3c <HAL_TIM_Base_Start+0x90>)
 801cbf2:	4293      	cmp	r3, r2
 801cbf4:	d111      	bne.n	801cc1a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	689b      	ldr	r3, [r3, #8]
 801cbfc:	2207      	movs	r2, #7
 801cbfe:	4013      	ands	r3, r2
 801cc00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	2b06      	cmp	r3, #6
 801cc06:	d010      	beq.n	801cc2a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	681a      	ldr	r2, [r3, #0]
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	2101      	movs	r1, #1
 801cc14:	430a      	orrs	r2, r1
 801cc16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc18:	e007      	b.n	801cc2a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	681a      	ldr	r2, [r3, #0]
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	2101      	movs	r1, #1
 801cc26:	430a      	orrs	r2, r1
 801cc28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cc2a:	2300      	movs	r3, #0
}
 801cc2c:	0018      	movs	r0, r3
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	b004      	add	sp, #16
 801cc32:	bd80      	pop	{r7, pc}
 801cc34:	40000400 	.word	0x40000400
 801cc38:	40010800 	.word	0x40010800
 801cc3c:	40011400 	.word	0x40011400

0801cc40 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	b082      	sub	sp, #8
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	6a1b      	ldr	r3, [r3, #32]
 801cc4e:	4a0a      	ldr	r2, [pc, #40]	@ (801cc78 <HAL_TIM_Base_Stop+0x38>)
 801cc50:	4013      	ands	r3, r2
 801cc52:	d107      	bne.n	801cc64 <HAL_TIM_Base_Stop+0x24>
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	681a      	ldr	r2, [r3, #0]
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	2101      	movs	r1, #1
 801cc60:	438a      	bics	r2, r1
 801cc62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	2239      	movs	r2, #57	@ 0x39
 801cc68:	2101      	movs	r1, #1
 801cc6a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801cc6c:	2300      	movs	r3, #0
}
 801cc6e:	0018      	movs	r0, r3
 801cc70:	46bd      	mov	sp, r7
 801cc72:	b002      	add	sp, #8
 801cc74:	bd80      	pop	{r7, pc}
 801cc76:	46c0      	nop			@ (mov r8, r8)
 801cc78:	00001111 	.word	0x00001111

0801cc7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b082      	sub	sp, #8
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d101      	bne.n	801cc8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cc8a:	2301      	movs	r3, #1
 801cc8c:	e032      	b.n	801ccf4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	2239      	movs	r2, #57	@ 0x39
 801cc92:	5c9b      	ldrb	r3, [r3, r2]
 801cc94:	b2db      	uxtb	r3, r3
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d107      	bne.n	801ccaa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	2238      	movs	r2, #56	@ 0x38
 801cc9e:	2100      	movs	r1, #0
 801cca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	0018      	movs	r0, r3
 801cca6:	f7f6 fdf7 	bl	8013898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	2239      	movs	r2, #57	@ 0x39
 801ccae:	2102      	movs	r1, #2
 801ccb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	681a      	ldr	r2, [r3, #0]
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	3304      	adds	r3, #4
 801ccba:	0019      	movs	r1, r3
 801ccbc:	0010      	movs	r0, r2
 801ccbe:	f000 f975 	bl	801cfac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	223e      	movs	r2, #62	@ 0x3e
 801ccc6:	2101      	movs	r1, #1
 801ccc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	223a      	movs	r2, #58	@ 0x3a
 801ccce:	2101      	movs	r1, #1
 801ccd0:	5499      	strb	r1, [r3, r2]
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	223b      	movs	r2, #59	@ 0x3b
 801ccd6:	2101      	movs	r1, #1
 801ccd8:	5499      	strb	r1, [r3, r2]
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	223c      	movs	r2, #60	@ 0x3c
 801ccde:	2101      	movs	r1, #1
 801cce0:	5499      	strb	r1, [r3, r2]
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	223d      	movs	r2, #61	@ 0x3d
 801cce6:	2101      	movs	r1, #1
 801cce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	2239      	movs	r2, #57	@ 0x39
 801ccee:	2101      	movs	r1, #1
 801ccf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ccf2:	2300      	movs	r3, #0
}
 801ccf4:	0018      	movs	r0, r3
 801ccf6:	46bd      	mov	sp, r7
 801ccf8:	b002      	add	sp, #8
 801ccfa:	bd80      	pop	{r7, pc}

0801ccfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b084      	sub	sp, #16
 801cd00:	af00      	add	r7, sp, #0
 801cd02:	6078      	str	r0, [r7, #4]
 801cd04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801cd06:	683b      	ldr	r3, [r7, #0]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d108      	bne.n	801cd1e <HAL_TIM_PWM_Start+0x22>
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	223a      	movs	r2, #58	@ 0x3a
 801cd10:	5c9b      	ldrb	r3, [r3, r2]
 801cd12:	b2db      	uxtb	r3, r3
 801cd14:	3b01      	subs	r3, #1
 801cd16:	1e5a      	subs	r2, r3, #1
 801cd18:	4193      	sbcs	r3, r2
 801cd1a:	b2db      	uxtb	r3, r3
 801cd1c:	e01f      	b.n	801cd5e <HAL_TIM_PWM_Start+0x62>
 801cd1e:	683b      	ldr	r3, [r7, #0]
 801cd20:	2b04      	cmp	r3, #4
 801cd22:	d108      	bne.n	801cd36 <HAL_TIM_PWM_Start+0x3a>
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	223b      	movs	r2, #59	@ 0x3b
 801cd28:	5c9b      	ldrb	r3, [r3, r2]
 801cd2a:	b2db      	uxtb	r3, r3
 801cd2c:	3b01      	subs	r3, #1
 801cd2e:	1e5a      	subs	r2, r3, #1
 801cd30:	4193      	sbcs	r3, r2
 801cd32:	b2db      	uxtb	r3, r3
 801cd34:	e013      	b.n	801cd5e <HAL_TIM_PWM_Start+0x62>
 801cd36:	683b      	ldr	r3, [r7, #0]
 801cd38:	2b08      	cmp	r3, #8
 801cd3a:	d108      	bne.n	801cd4e <HAL_TIM_PWM_Start+0x52>
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	223c      	movs	r2, #60	@ 0x3c
 801cd40:	5c9b      	ldrb	r3, [r3, r2]
 801cd42:	b2db      	uxtb	r3, r3
 801cd44:	3b01      	subs	r3, #1
 801cd46:	1e5a      	subs	r2, r3, #1
 801cd48:	4193      	sbcs	r3, r2
 801cd4a:	b2db      	uxtb	r3, r3
 801cd4c:	e007      	b.n	801cd5e <HAL_TIM_PWM_Start+0x62>
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	223d      	movs	r2, #61	@ 0x3d
 801cd52:	5c9b      	ldrb	r3, [r3, r2]
 801cd54:	b2db      	uxtb	r3, r3
 801cd56:	3b01      	subs	r3, #1
 801cd58:	1e5a      	subs	r2, r3, #1
 801cd5a:	4193      	sbcs	r3, r2
 801cd5c:	b2db      	uxtb	r3, r3
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d001      	beq.n	801cd66 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801cd62:	2301      	movs	r3, #1
 801cd64:	e052      	b.n	801ce0c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cd66:	683b      	ldr	r3, [r7, #0]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d104      	bne.n	801cd76 <HAL_TIM_PWM_Start+0x7a>
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	223a      	movs	r2, #58	@ 0x3a
 801cd70:	2102      	movs	r1, #2
 801cd72:	5499      	strb	r1, [r3, r2]
 801cd74:	e013      	b.n	801cd9e <HAL_TIM_PWM_Start+0xa2>
 801cd76:	683b      	ldr	r3, [r7, #0]
 801cd78:	2b04      	cmp	r3, #4
 801cd7a:	d104      	bne.n	801cd86 <HAL_TIM_PWM_Start+0x8a>
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	223b      	movs	r2, #59	@ 0x3b
 801cd80:	2102      	movs	r1, #2
 801cd82:	5499      	strb	r1, [r3, r2]
 801cd84:	e00b      	b.n	801cd9e <HAL_TIM_PWM_Start+0xa2>
 801cd86:	683b      	ldr	r3, [r7, #0]
 801cd88:	2b08      	cmp	r3, #8
 801cd8a:	d104      	bne.n	801cd96 <HAL_TIM_PWM_Start+0x9a>
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	223c      	movs	r2, #60	@ 0x3c
 801cd90:	2102      	movs	r1, #2
 801cd92:	5499      	strb	r1, [r3, r2]
 801cd94:	e003      	b.n	801cd9e <HAL_TIM_PWM_Start+0xa2>
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	223d      	movs	r2, #61	@ 0x3d
 801cd9a:	2102      	movs	r1, #2
 801cd9c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	6839      	ldr	r1, [r7, #0]
 801cda4:	2201      	movs	r2, #1
 801cda6:	0018      	movs	r0, r3
 801cda8:	f000 fa62 	bl	801d270 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	681a      	ldr	r2, [r3, #0]
 801cdb0:	2380      	movs	r3, #128	@ 0x80
 801cdb2:	05db      	lsls	r3, r3, #23
 801cdb4:	429a      	cmp	r2, r3
 801cdb6:	d00e      	beq.n	801cdd6 <HAL_TIM_PWM_Start+0xda>
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	4a15      	ldr	r2, [pc, #84]	@ (801ce14 <HAL_TIM_PWM_Start+0x118>)
 801cdbe:	4293      	cmp	r3, r2
 801cdc0:	d009      	beq.n	801cdd6 <HAL_TIM_PWM_Start+0xda>
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	4a14      	ldr	r2, [pc, #80]	@ (801ce18 <HAL_TIM_PWM_Start+0x11c>)
 801cdc8:	4293      	cmp	r3, r2
 801cdca:	d004      	beq.n	801cdd6 <HAL_TIM_PWM_Start+0xda>
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	4a12      	ldr	r2, [pc, #72]	@ (801ce1c <HAL_TIM_PWM_Start+0x120>)
 801cdd2:	4293      	cmp	r3, r2
 801cdd4:	d111      	bne.n	801cdfa <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	689b      	ldr	r3, [r3, #8]
 801cddc:	2207      	movs	r2, #7
 801cdde:	4013      	ands	r3, r2
 801cde0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cde2:	68fb      	ldr	r3, [r7, #12]
 801cde4:	2b06      	cmp	r3, #6
 801cde6:	d010      	beq.n	801ce0a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	681a      	ldr	r2, [r3, #0]
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	2101      	movs	r1, #1
 801cdf4:	430a      	orrs	r2, r1
 801cdf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cdf8:	e007      	b.n	801ce0a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	681a      	ldr	r2, [r3, #0]
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	2101      	movs	r1, #1
 801ce06:	430a      	orrs	r2, r1
 801ce08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ce0a:	2300      	movs	r3, #0
}
 801ce0c:	0018      	movs	r0, r3
 801ce0e:	46bd      	mov	sp, r7
 801ce10:	b004      	add	sp, #16
 801ce12:	bd80      	pop	{r7, pc}
 801ce14:	40000400 	.word	0x40000400
 801ce18:	40010800 	.word	0x40010800
 801ce1c:	40011400 	.word	0x40011400

0801ce20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ce20:	b580      	push	{r7, lr}
 801ce22:	b086      	sub	sp, #24
 801ce24:	af00      	add	r7, sp, #0
 801ce26:	60f8      	str	r0, [r7, #12]
 801ce28:	60b9      	str	r1, [r7, #8]
 801ce2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ce2c:	2317      	movs	r3, #23
 801ce2e:	18fb      	adds	r3, r7, r3
 801ce30:	2200      	movs	r2, #0
 801ce32:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	2238      	movs	r2, #56	@ 0x38
 801ce38:	5c9b      	ldrb	r3, [r3, r2]
 801ce3a:	2b01      	cmp	r3, #1
 801ce3c:	d101      	bne.n	801ce42 <HAL_TIM_PWM_ConfigChannel+0x22>
 801ce3e:	2302      	movs	r3, #2
 801ce40:	e0ad      	b.n	801cf9e <HAL_TIM_PWM_ConfigChannel+0x17e>
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	2238      	movs	r2, #56	@ 0x38
 801ce46:	2101      	movs	r1, #1
 801ce48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	2b0c      	cmp	r3, #12
 801ce4e:	d100      	bne.n	801ce52 <HAL_TIM_PWM_ConfigChannel+0x32>
 801ce50:	e076      	b.n	801cf40 <HAL_TIM_PWM_ConfigChannel+0x120>
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	2b0c      	cmp	r3, #12
 801ce56:	d900      	bls.n	801ce5a <HAL_TIM_PWM_ConfigChannel+0x3a>
 801ce58:	e095      	b.n	801cf86 <HAL_TIM_PWM_ConfigChannel+0x166>
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	2b08      	cmp	r3, #8
 801ce5e:	d04e      	beq.n	801cefe <HAL_TIM_PWM_ConfigChannel+0xde>
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	2b08      	cmp	r3, #8
 801ce64:	d900      	bls.n	801ce68 <HAL_TIM_PWM_ConfigChannel+0x48>
 801ce66:	e08e      	b.n	801cf86 <HAL_TIM_PWM_ConfigChannel+0x166>
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d003      	beq.n	801ce76 <HAL_TIM_PWM_ConfigChannel+0x56>
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	2b04      	cmp	r3, #4
 801ce72:	d021      	beq.n	801ceb8 <HAL_TIM_PWM_ConfigChannel+0x98>
 801ce74:	e087      	b.n	801cf86 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	68ba      	ldr	r2, [r7, #8]
 801ce7c:	0011      	movs	r1, r2
 801ce7e:	0018      	movs	r0, r3
 801ce80:	f000 f8f2 	bl	801d068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ce84:	68fb      	ldr	r3, [r7, #12]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	699a      	ldr	r2, [r3, #24]
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	2108      	movs	r1, #8
 801ce90:	430a      	orrs	r2, r1
 801ce92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	699a      	ldr	r2, [r3, #24]
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	2104      	movs	r1, #4
 801cea0:	438a      	bics	r2, r1
 801cea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	6999      	ldr	r1, [r3, #24]
 801ceaa:	68bb      	ldr	r3, [r7, #8]
 801ceac:	68da      	ldr	r2, [r3, #12]
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	430a      	orrs	r2, r1
 801ceb4:	619a      	str	r2, [r3, #24]
      break;
 801ceb6:	e06b      	b.n	801cf90 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	68ba      	ldr	r2, [r7, #8]
 801cebe:	0011      	movs	r1, r2
 801cec0:	0018      	movs	r0, r3
 801cec2:	f000 f90d 	bl	801d0e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	699a      	ldr	r2, [r3, #24]
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	2180      	movs	r1, #128	@ 0x80
 801ced2:	0109      	lsls	r1, r1, #4
 801ced4:	430a      	orrs	r2, r1
 801ced6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	681b      	ldr	r3, [r3, #0]
 801cedc:	699a      	ldr	r2, [r3, #24]
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	4931      	ldr	r1, [pc, #196]	@ (801cfa8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cee4:	400a      	ands	r2, r1
 801cee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	6999      	ldr	r1, [r3, #24]
 801ceee:	68bb      	ldr	r3, [r7, #8]
 801cef0:	68db      	ldr	r3, [r3, #12]
 801cef2:	021a      	lsls	r2, r3, #8
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	430a      	orrs	r2, r1
 801cefa:	619a      	str	r2, [r3, #24]
      break;
 801cefc:	e048      	b.n	801cf90 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	68ba      	ldr	r2, [r7, #8]
 801cf04:	0011      	movs	r1, r2
 801cf06:	0018      	movs	r0, r3
 801cf08:	f000 f92c 	bl	801d164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	69da      	ldr	r2, [r3, #28]
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	2108      	movs	r1, #8
 801cf18:	430a      	orrs	r2, r1
 801cf1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	69da      	ldr	r2, [r3, #28]
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	2104      	movs	r1, #4
 801cf28:	438a      	bics	r2, r1
 801cf2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	69d9      	ldr	r1, [r3, #28]
 801cf32:	68bb      	ldr	r3, [r7, #8]
 801cf34:	68da      	ldr	r2, [r3, #12]
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	430a      	orrs	r2, r1
 801cf3c:	61da      	str	r2, [r3, #28]
      break;
 801cf3e:	e027      	b.n	801cf90 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	68ba      	ldr	r2, [r7, #8]
 801cf46:	0011      	movs	r1, r2
 801cf48:	0018      	movs	r0, r3
 801cf4a:	f000 f94b 	bl	801d1e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	69da      	ldr	r2, [r3, #28]
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	2180      	movs	r1, #128	@ 0x80
 801cf5a:	0109      	lsls	r1, r1, #4
 801cf5c:	430a      	orrs	r2, r1
 801cf5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	69da      	ldr	r2, [r3, #28]
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	490f      	ldr	r1, [pc, #60]	@ (801cfa8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cf6c:	400a      	ands	r2, r1
 801cf6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	69d9      	ldr	r1, [r3, #28]
 801cf76:	68bb      	ldr	r3, [r7, #8]
 801cf78:	68db      	ldr	r3, [r3, #12]
 801cf7a:	021a      	lsls	r2, r3, #8
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	430a      	orrs	r2, r1
 801cf82:	61da      	str	r2, [r3, #28]
      break;
 801cf84:	e004      	b.n	801cf90 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801cf86:	2317      	movs	r3, #23
 801cf88:	18fb      	adds	r3, r7, r3
 801cf8a:	2201      	movs	r2, #1
 801cf8c:	701a      	strb	r2, [r3, #0]
      break;
 801cf8e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	2238      	movs	r2, #56	@ 0x38
 801cf94:	2100      	movs	r1, #0
 801cf96:	5499      	strb	r1, [r3, r2]

  return status;
 801cf98:	2317      	movs	r3, #23
 801cf9a:	18fb      	adds	r3, r7, r3
 801cf9c:	781b      	ldrb	r3, [r3, #0]
}
 801cf9e:	0018      	movs	r0, r3
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	b006      	add	sp, #24
 801cfa4:	bd80      	pop	{r7, pc}
 801cfa6:	46c0      	nop			@ (mov r8, r8)
 801cfa8:	fffffbff 	.word	0xfffffbff

0801cfac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801cfac:	b580      	push	{r7, lr}
 801cfae:	b084      	sub	sp, #16
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	6078      	str	r0, [r7, #4]
 801cfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801cfbc:	687a      	ldr	r2, [r7, #4]
 801cfbe:	2380      	movs	r3, #128	@ 0x80
 801cfc0:	05db      	lsls	r3, r3, #23
 801cfc2:	429a      	cmp	r2, r3
 801cfc4:	d00b      	beq.n	801cfde <TIM_Base_SetConfig+0x32>
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	4a23      	ldr	r2, [pc, #140]	@ (801d058 <TIM_Base_SetConfig+0xac>)
 801cfca:	4293      	cmp	r3, r2
 801cfcc:	d007      	beq.n	801cfde <TIM_Base_SetConfig+0x32>
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	4a22      	ldr	r2, [pc, #136]	@ (801d05c <TIM_Base_SetConfig+0xb0>)
 801cfd2:	4293      	cmp	r3, r2
 801cfd4:	d003      	beq.n	801cfde <TIM_Base_SetConfig+0x32>
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	4a21      	ldr	r2, [pc, #132]	@ (801d060 <TIM_Base_SetConfig+0xb4>)
 801cfda:	4293      	cmp	r3, r2
 801cfdc:	d108      	bne.n	801cff0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	2270      	movs	r2, #112	@ 0x70
 801cfe2:	4393      	bics	r3, r2
 801cfe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801cfe6:	683b      	ldr	r3, [r7, #0]
 801cfe8:	685b      	ldr	r3, [r3, #4]
 801cfea:	68fa      	ldr	r2, [r7, #12]
 801cfec:	4313      	orrs	r3, r2
 801cfee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801cff0:	687a      	ldr	r2, [r7, #4]
 801cff2:	2380      	movs	r3, #128	@ 0x80
 801cff4:	05db      	lsls	r3, r3, #23
 801cff6:	429a      	cmp	r2, r3
 801cff8:	d00b      	beq.n	801d012 <TIM_Base_SetConfig+0x66>
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	4a16      	ldr	r2, [pc, #88]	@ (801d058 <TIM_Base_SetConfig+0xac>)
 801cffe:	4293      	cmp	r3, r2
 801d000:	d007      	beq.n	801d012 <TIM_Base_SetConfig+0x66>
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	4a15      	ldr	r2, [pc, #84]	@ (801d05c <TIM_Base_SetConfig+0xb0>)
 801d006:	4293      	cmp	r3, r2
 801d008:	d003      	beq.n	801d012 <TIM_Base_SetConfig+0x66>
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	4a14      	ldr	r2, [pc, #80]	@ (801d060 <TIM_Base_SetConfig+0xb4>)
 801d00e:	4293      	cmp	r3, r2
 801d010:	d108      	bne.n	801d024 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	4a13      	ldr	r2, [pc, #76]	@ (801d064 <TIM_Base_SetConfig+0xb8>)
 801d016:	4013      	ands	r3, r2
 801d018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d01a:	683b      	ldr	r3, [r7, #0]
 801d01c:	68db      	ldr	r3, [r3, #12]
 801d01e:	68fa      	ldr	r2, [r7, #12]
 801d020:	4313      	orrs	r3, r2
 801d022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	2280      	movs	r2, #128	@ 0x80
 801d028:	4393      	bics	r3, r2
 801d02a:	001a      	movs	r2, r3
 801d02c:	683b      	ldr	r3, [r7, #0]
 801d02e:	691b      	ldr	r3, [r3, #16]
 801d030:	4313      	orrs	r3, r2
 801d032:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	68fa      	ldr	r2, [r7, #12]
 801d038:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d03a:	683b      	ldr	r3, [r7, #0]
 801d03c:	689a      	ldr	r2, [r3, #8]
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d042:	683b      	ldr	r3, [r7, #0]
 801d044:	681a      	ldr	r2, [r3, #0]
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	2201      	movs	r2, #1
 801d04e:	615a      	str	r2, [r3, #20]
}
 801d050:	46c0      	nop			@ (mov r8, r8)
 801d052:	46bd      	mov	sp, r7
 801d054:	b004      	add	sp, #16
 801d056:	bd80      	pop	{r7, pc}
 801d058:	40000400 	.word	0x40000400
 801d05c:	40010800 	.word	0x40010800
 801d060:	40011400 	.word	0x40011400
 801d064:	fffffcff 	.word	0xfffffcff

0801d068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d068:	b580      	push	{r7, lr}
 801d06a:	b086      	sub	sp, #24
 801d06c:	af00      	add	r7, sp, #0
 801d06e:	6078      	str	r0, [r7, #4]
 801d070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	6a1b      	ldr	r3, [r3, #32]
 801d076:	2201      	movs	r2, #1
 801d078:	4393      	bics	r3, r2
 801d07a:	001a      	movs	r2, r3
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	6a1b      	ldr	r3, [r3, #32]
 801d084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	685b      	ldr	r3, [r3, #4]
 801d08a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	699b      	ldr	r3, [r3, #24]
 801d090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	2270      	movs	r2, #112	@ 0x70
 801d096:	4393      	bics	r3, r2
 801d098:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	2203      	movs	r2, #3
 801d09e:	4393      	bics	r3, r2
 801d0a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d0a2:	683b      	ldr	r3, [r7, #0]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	68fa      	ldr	r2, [r7, #12]
 801d0a8:	4313      	orrs	r3, r2
 801d0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d0ac:	697b      	ldr	r3, [r7, #20]
 801d0ae:	2202      	movs	r2, #2
 801d0b0:	4393      	bics	r3, r2
 801d0b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d0b4:	683b      	ldr	r3, [r7, #0]
 801d0b6:	689b      	ldr	r3, [r3, #8]
 801d0b8:	697a      	ldr	r2, [r7, #20]
 801d0ba:	4313      	orrs	r3, r2
 801d0bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	693a      	ldr	r2, [r7, #16]
 801d0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	68fa      	ldr	r2, [r7, #12]
 801d0c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d0ca:	683b      	ldr	r3, [r7, #0]
 801d0cc:	685a      	ldr	r2, [r3, #4]
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	697a      	ldr	r2, [r7, #20]
 801d0d6:	621a      	str	r2, [r3, #32]
}
 801d0d8:	46c0      	nop			@ (mov r8, r8)
 801d0da:	46bd      	mov	sp, r7
 801d0dc:	b006      	add	sp, #24
 801d0de:	bd80      	pop	{r7, pc}

0801d0e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d0e0:	b580      	push	{r7, lr}
 801d0e2:	b086      	sub	sp, #24
 801d0e4:	af00      	add	r7, sp, #0
 801d0e6:	6078      	str	r0, [r7, #4]
 801d0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6a1b      	ldr	r3, [r3, #32]
 801d0ee:	2210      	movs	r2, #16
 801d0f0:	4393      	bics	r3, r2
 801d0f2:	001a      	movs	r2, r3
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	6a1b      	ldr	r3, [r3, #32]
 801d0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	685b      	ldr	r3, [r3, #4]
 801d102:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	699b      	ldr	r3, [r3, #24]
 801d108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	4a13      	ldr	r2, [pc, #76]	@ (801d15c <TIM_OC2_SetConfig+0x7c>)
 801d10e:	4013      	ands	r3, r2
 801d110:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	4a12      	ldr	r2, [pc, #72]	@ (801d160 <TIM_OC2_SetConfig+0x80>)
 801d116:	4013      	ands	r3, r2
 801d118:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d11a:	683b      	ldr	r3, [r7, #0]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	021b      	lsls	r3, r3, #8
 801d120:	68fa      	ldr	r2, [r7, #12]
 801d122:	4313      	orrs	r3, r2
 801d124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d126:	697b      	ldr	r3, [r7, #20]
 801d128:	2220      	movs	r2, #32
 801d12a:	4393      	bics	r3, r2
 801d12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	689b      	ldr	r3, [r3, #8]
 801d132:	011b      	lsls	r3, r3, #4
 801d134:	697a      	ldr	r2, [r7, #20]
 801d136:	4313      	orrs	r3, r2
 801d138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	693a      	ldr	r2, [r7, #16]
 801d13e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	68fa      	ldr	r2, [r7, #12]
 801d144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d146:	683b      	ldr	r3, [r7, #0]
 801d148:	685a      	ldr	r2, [r3, #4]
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	697a      	ldr	r2, [r7, #20]
 801d152:	621a      	str	r2, [r3, #32]
}
 801d154:	46c0      	nop			@ (mov r8, r8)
 801d156:	46bd      	mov	sp, r7
 801d158:	b006      	add	sp, #24
 801d15a:	bd80      	pop	{r7, pc}
 801d15c:	ffff8fff 	.word	0xffff8fff
 801d160:	fffffcff 	.word	0xfffffcff

0801d164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b086      	sub	sp, #24
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
 801d16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	6a1b      	ldr	r3, [r3, #32]
 801d172:	4a1a      	ldr	r2, [pc, #104]	@ (801d1dc <TIM_OC3_SetConfig+0x78>)
 801d174:	401a      	ands	r2, r3
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	6a1b      	ldr	r3, [r3, #32]
 801d17e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	685b      	ldr	r3, [r3, #4]
 801d184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	69db      	ldr	r3, [r3, #28]
 801d18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	2270      	movs	r2, #112	@ 0x70
 801d190:	4393      	bics	r3, r2
 801d192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	2203      	movs	r2, #3
 801d198:	4393      	bics	r3, r2
 801d19a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d19c:	683b      	ldr	r3, [r7, #0]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	68fa      	ldr	r2, [r7, #12]
 801d1a2:	4313      	orrs	r3, r2
 801d1a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d1a6:	697b      	ldr	r3, [r7, #20]
 801d1a8:	4a0d      	ldr	r2, [pc, #52]	@ (801d1e0 <TIM_OC3_SetConfig+0x7c>)
 801d1aa:	4013      	ands	r3, r2
 801d1ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d1ae:	683b      	ldr	r3, [r7, #0]
 801d1b0:	689b      	ldr	r3, [r3, #8]
 801d1b2:	021b      	lsls	r3, r3, #8
 801d1b4:	697a      	ldr	r2, [r7, #20]
 801d1b6:	4313      	orrs	r3, r2
 801d1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	693a      	ldr	r2, [r7, #16]
 801d1be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	68fa      	ldr	r2, [r7, #12]
 801d1c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d1c6:	683b      	ldr	r3, [r7, #0]
 801d1c8:	685a      	ldr	r2, [r3, #4]
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	697a      	ldr	r2, [r7, #20]
 801d1d2:	621a      	str	r2, [r3, #32]
}
 801d1d4:	46c0      	nop			@ (mov r8, r8)
 801d1d6:	46bd      	mov	sp, r7
 801d1d8:	b006      	add	sp, #24
 801d1da:	bd80      	pop	{r7, pc}
 801d1dc:	fffffeff 	.word	0xfffffeff
 801d1e0:	fffffdff 	.word	0xfffffdff

0801d1e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b086      	sub	sp, #24
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
 801d1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	6a1b      	ldr	r3, [r3, #32]
 801d1f2:	4a1b      	ldr	r2, [pc, #108]	@ (801d260 <TIM_OC4_SetConfig+0x7c>)
 801d1f4:	401a      	ands	r2, r3
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	6a1b      	ldr	r3, [r3, #32]
 801d1fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	685b      	ldr	r3, [r3, #4]
 801d204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	69db      	ldr	r3, [r3, #28]
 801d20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	4a15      	ldr	r2, [pc, #84]	@ (801d264 <TIM_OC4_SetConfig+0x80>)
 801d210:	4013      	ands	r3, r2
 801d212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	4a14      	ldr	r2, [pc, #80]	@ (801d268 <TIM_OC4_SetConfig+0x84>)
 801d218:	4013      	ands	r3, r2
 801d21a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d21c:	683b      	ldr	r3, [r7, #0]
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	021b      	lsls	r3, r3, #8
 801d222:	68fa      	ldr	r2, [r7, #12]
 801d224:	4313      	orrs	r3, r2
 801d226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d228:	697b      	ldr	r3, [r7, #20]
 801d22a:	4a10      	ldr	r2, [pc, #64]	@ (801d26c <TIM_OC4_SetConfig+0x88>)
 801d22c:	4013      	ands	r3, r2
 801d22e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d230:	683b      	ldr	r3, [r7, #0]
 801d232:	689b      	ldr	r3, [r3, #8]
 801d234:	031b      	lsls	r3, r3, #12
 801d236:	697a      	ldr	r2, [r7, #20]
 801d238:	4313      	orrs	r3, r2
 801d23a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	693a      	ldr	r2, [r7, #16]
 801d240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	68fa      	ldr	r2, [r7, #12]
 801d246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d248:	683b      	ldr	r3, [r7, #0]
 801d24a:	685a      	ldr	r2, [r3, #4]
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	697a      	ldr	r2, [r7, #20]
 801d254:	621a      	str	r2, [r3, #32]
}
 801d256:	46c0      	nop			@ (mov r8, r8)
 801d258:	46bd      	mov	sp, r7
 801d25a:	b006      	add	sp, #24
 801d25c:	bd80      	pop	{r7, pc}
 801d25e:	46c0      	nop			@ (mov r8, r8)
 801d260:	ffffefff 	.word	0xffffefff
 801d264:	ffff8fff 	.word	0xffff8fff
 801d268:	fffffcff 	.word	0xfffffcff
 801d26c:	ffffdfff 	.word	0xffffdfff

0801d270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d270:	b580      	push	{r7, lr}
 801d272:	b086      	sub	sp, #24
 801d274:	af00      	add	r7, sp, #0
 801d276:	60f8      	str	r0, [r7, #12]
 801d278:	60b9      	str	r1, [r7, #8]
 801d27a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d27c:	68bb      	ldr	r3, [r7, #8]
 801d27e:	221f      	movs	r2, #31
 801d280:	4013      	ands	r3, r2
 801d282:	2201      	movs	r2, #1
 801d284:	409a      	lsls	r2, r3
 801d286:	0013      	movs	r3, r2
 801d288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	6a1b      	ldr	r3, [r3, #32]
 801d28e:	697a      	ldr	r2, [r7, #20]
 801d290:	43d2      	mvns	r2, r2
 801d292:	401a      	ands	r2, r3
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	6a1a      	ldr	r2, [r3, #32]
 801d29c:	68bb      	ldr	r3, [r7, #8]
 801d29e:	211f      	movs	r1, #31
 801d2a0:	400b      	ands	r3, r1
 801d2a2:	6879      	ldr	r1, [r7, #4]
 801d2a4:	4099      	lsls	r1, r3
 801d2a6:	000b      	movs	r3, r1
 801d2a8:	431a      	orrs	r2, r3
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	621a      	str	r2, [r3, #32]
}
 801d2ae:	46c0      	nop			@ (mov r8, r8)
 801d2b0:	46bd      	mov	sp, r7
 801d2b2:	b006      	add	sp, #24
 801d2b4:	bd80      	pop	{r7, pc}
	...

0801d2b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d2b8:	b580      	push	{r7, lr}
 801d2ba:	b084      	sub	sp, #16
 801d2bc:	af00      	add	r7, sp, #0
 801d2be:	6078      	str	r0, [r7, #4]
 801d2c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	2238      	movs	r2, #56	@ 0x38
 801d2c6:	5c9b      	ldrb	r3, [r3, r2]
 801d2c8:	2b01      	cmp	r3, #1
 801d2ca:	d101      	bne.n	801d2d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d2cc:	2302      	movs	r3, #2
 801d2ce:	e047      	b.n	801d360 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	2238      	movs	r2, #56	@ 0x38
 801d2d4:	2101      	movs	r1, #1
 801d2d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	2239      	movs	r2, #57	@ 0x39
 801d2dc:	2102      	movs	r1, #2
 801d2de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	685b      	ldr	r3, [r3, #4]
 801d2e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	689b      	ldr	r3, [r3, #8]
 801d2ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	2270      	movs	r2, #112	@ 0x70
 801d2f4:	4393      	bics	r3, r2
 801d2f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d2f8:	683b      	ldr	r3, [r7, #0]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	68fa      	ldr	r2, [r7, #12]
 801d2fe:	4313      	orrs	r3, r2
 801d300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	68fa      	ldr	r2, [r7, #12]
 801d308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	681a      	ldr	r2, [r3, #0]
 801d30e:	2380      	movs	r3, #128	@ 0x80
 801d310:	05db      	lsls	r3, r3, #23
 801d312:	429a      	cmp	r2, r3
 801d314:	d00e      	beq.n	801d334 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	4a13      	ldr	r2, [pc, #76]	@ (801d368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d31c:	4293      	cmp	r3, r2
 801d31e:	d009      	beq.n	801d334 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	4a11      	ldr	r2, [pc, #68]	@ (801d36c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d326:	4293      	cmp	r3, r2
 801d328:	d004      	beq.n	801d334 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	4a10      	ldr	r2, [pc, #64]	@ (801d370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d330:	4293      	cmp	r3, r2
 801d332:	d10c      	bne.n	801d34e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d334:	68bb      	ldr	r3, [r7, #8]
 801d336:	2280      	movs	r2, #128	@ 0x80
 801d338:	4393      	bics	r3, r2
 801d33a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d33c:	683b      	ldr	r3, [r7, #0]
 801d33e:	685b      	ldr	r3, [r3, #4]
 801d340:	68ba      	ldr	r2, [r7, #8]
 801d342:	4313      	orrs	r3, r2
 801d344:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	68ba      	ldr	r2, [r7, #8]
 801d34c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	2239      	movs	r2, #57	@ 0x39
 801d352:	2101      	movs	r1, #1
 801d354:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	2238      	movs	r2, #56	@ 0x38
 801d35a:	2100      	movs	r1, #0
 801d35c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d35e:	2300      	movs	r3, #0
}
 801d360:	0018      	movs	r0, r3
 801d362:	46bd      	mov	sp, r7
 801d364:	b004      	add	sp, #16
 801d366:	bd80      	pop	{r7, pc}
 801d368:	40000400 	.word	0x40000400
 801d36c:	40010800 	.word	0x40010800
 801d370:	40011400 	.word	0x40011400

0801d374 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b082      	sub	sp, #8
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
 801d37c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	2238      	movs	r2, #56	@ 0x38
 801d382:	5c9b      	ldrb	r3, [r3, r2]
 801d384:	2b01      	cmp	r3, #1
 801d386:	d101      	bne.n	801d38c <HAL_TIMEx_RemapConfig+0x18>
 801d388:	2302      	movs	r3, #2
 801d38a:	e00c      	b.n	801d3a6 <HAL_TIMEx_RemapConfig+0x32>
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	2238      	movs	r2, #56	@ 0x38
 801d390:	2101      	movs	r1, #1
 801d392:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	683a      	ldr	r2, [r7, #0]
 801d39a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	2238      	movs	r2, #56	@ 0x38
 801d3a0:	2100      	movs	r1, #0
 801d3a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d3a4:	2300      	movs	r3, #0
}
 801d3a6:	0018      	movs	r0, r3
 801d3a8:	46bd      	mov	sp, r7
 801d3aa:	b002      	add	sp, #8
 801d3ac:	bd80      	pop	{r7, pc}
	...

0801d3b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d3b0:	b580      	push	{r7, lr}
 801d3b2:	b082      	sub	sp, #8
 801d3b4:	af00      	add	r7, sp, #0
 801d3b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d101      	bne.n	801d3c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d3be:	2301      	movs	r3, #1
 801d3c0:	e053      	b.n	801d46a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d116      	bne.n	801d3f8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	2278      	movs	r2, #120	@ 0x78
 801d3ce:	2100      	movs	r1, #0
 801d3d0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	0018      	movs	r0, r3
 801d3d6:	f000 fd65 	bl	801dea4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	22b0      	movs	r2, #176	@ 0xb0
 801d3de:	589b      	ldr	r3, [r3, r2]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d103      	bne.n	801d3ec <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	21b0      	movs	r1, #176	@ 0xb0
 801d3e8:	4a22      	ldr	r2, [pc, #136]	@ (801d474 <HAL_UART_Init+0xc4>)
 801d3ea:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	22b0      	movs	r2, #176	@ 0xb0
 801d3f0:	589b      	ldr	r3, [r3, r2]
 801d3f2:	687a      	ldr	r2, [r7, #4]
 801d3f4:	0010      	movs	r0, r2
 801d3f6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	2224      	movs	r2, #36	@ 0x24
 801d3fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	681a      	ldr	r2, [r3, #0]
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	2101      	movs	r1, #1
 801d40a:	438a      	bics	r2, r1
 801d40c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	0018      	movs	r0, r3
 801d412:	f000 fd8b 	bl	801df2c <UART_SetConfig>
 801d416:	0003      	movs	r3, r0
 801d418:	2b01      	cmp	r3, #1
 801d41a:	d101      	bne.n	801d420 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d41c:	2301      	movs	r3, #1
 801d41e:	e024      	b.n	801d46a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d424:	2b00      	cmp	r3, #0
 801d426:	d003      	beq.n	801d430 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	0018      	movs	r0, r3
 801d42c:	f001 f81c 	bl	801e468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	685a      	ldr	r2, [r3, #4]
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	490f      	ldr	r1, [pc, #60]	@ (801d478 <HAL_UART_Init+0xc8>)
 801d43c:	400a      	ands	r2, r1
 801d43e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	689a      	ldr	r2, [r3, #8]
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	212a      	movs	r1, #42	@ 0x2a
 801d44c:	438a      	bics	r2, r1
 801d44e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	681a      	ldr	r2, [r3, #0]
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	2101      	movs	r1, #1
 801d45c:	430a      	orrs	r2, r1
 801d45e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	0018      	movs	r0, r3
 801d464:	f001 f8b4 	bl	801e5d0 <UART_CheckIdleState>
 801d468:	0003      	movs	r3, r0
}
 801d46a:	0018      	movs	r0, r3
 801d46c:	46bd      	mov	sp, r7
 801d46e:	b002      	add	sp, #8
 801d470:	bd80      	pop	{r7, pc}
 801d472:	46c0      	nop			@ (mov r8, r8)
 801d474:	08013b0d 	.word	0x08013b0d
 801d478:	ffffb7ff 	.word	0xffffb7ff

0801d47c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b08a      	sub	sp, #40	@ 0x28
 801d480:	af02      	add	r7, sp, #8
 801d482:	60f8      	str	r0, [r7, #12]
 801d484:	60b9      	str	r1, [r7, #8]
 801d486:	603b      	str	r3, [r7, #0]
 801d488:	1dbb      	adds	r3, r7, #6
 801d48a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d490:	2b20      	cmp	r3, #32
 801d492:	d000      	beq.n	801d496 <HAL_UART_Transmit+0x1a>
 801d494:	e08c      	b.n	801d5b0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d496:	68bb      	ldr	r3, [r7, #8]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d003      	beq.n	801d4a4 <HAL_UART_Transmit+0x28>
 801d49c:	1dbb      	adds	r3, r7, #6
 801d49e:	881b      	ldrh	r3, [r3, #0]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d101      	bne.n	801d4a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	e084      	b.n	801d5b2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	689a      	ldr	r2, [r3, #8]
 801d4ac:	2380      	movs	r3, #128	@ 0x80
 801d4ae:	015b      	lsls	r3, r3, #5
 801d4b0:	429a      	cmp	r2, r3
 801d4b2:	d109      	bne.n	801d4c8 <HAL_UART_Transmit+0x4c>
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	691b      	ldr	r3, [r3, #16]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d105      	bne.n	801d4c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d4bc:	68bb      	ldr	r3, [r7, #8]
 801d4be:	2201      	movs	r2, #1
 801d4c0:	4013      	ands	r3, r2
 801d4c2:	d001      	beq.n	801d4c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d4c4:	2301      	movs	r3, #1
 801d4c6:	e074      	b.n	801d5b2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	2284      	movs	r2, #132	@ 0x84
 801d4cc:	2100      	movs	r1, #0
 801d4ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	2221      	movs	r2, #33	@ 0x21
 801d4d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d4d6:	f7f7 fa1f 	bl	8014918 <HAL_GetTick>
 801d4da:	0003      	movs	r3, r0
 801d4dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d4de:	68fb      	ldr	r3, [r7, #12]
 801d4e0:	1dba      	adds	r2, r7, #6
 801d4e2:	2150      	movs	r1, #80	@ 0x50
 801d4e4:	8812      	ldrh	r2, [r2, #0]
 801d4e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d4e8:	68fb      	ldr	r3, [r7, #12]
 801d4ea:	1dba      	adds	r2, r7, #6
 801d4ec:	2152      	movs	r1, #82	@ 0x52
 801d4ee:	8812      	ldrh	r2, [r2, #0]
 801d4f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	689a      	ldr	r2, [r3, #8]
 801d4f6:	2380      	movs	r3, #128	@ 0x80
 801d4f8:	015b      	lsls	r3, r3, #5
 801d4fa:	429a      	cmp	r2, r3
 801d4fc:	d108      	bne.n	801d510 <HAL_UART_Transmit+0x94>
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	691b      	ldr	r3, [r3, #16]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d104      	bne.n	801d510 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d506:	2300      	movs	r3, #0
 801d508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	61bb      	str	r3, [r7, #24]
 801d50e:	e003      	b.n	801d518 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d510:	68bb      	ldr	r3, [r7, #8]
 801d512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d514:	2300      	movs	r3, #0
 801d516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d518:	e02f      	b.n	801d57a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d51a:	697a      	ldr	r2, [r7, #20]
 801d51c:	68f8      	ldr	r0, [r7, #12]
 801d51e:	683b      	ldr	r3, [r7, #0]
 801d520:	9300      	str	r3, [sp, #0]
 801d522:	0013      	movs	r3, r2
 801d524:	2200      	movs	r2, #0
 801d526:	2180      	movs	r1, #128	@ 0x80
 801d528:	f001 f8fa 	bl	801e720 <UART_WaitOnFlagUntilTimeout>
 801d52c:	1e03      	subs	r3, r0, #0
 801d52e:	d004      	beq.n	801d53a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	2220      	movs	r2, #32
 801d534:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d536:	2303      	movs	r3, #3
 801d538:	e03b      	b.n	801d5b2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d53a:	69fb      	ldr	r3, [r7, #28]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d10b      	bne.n	801d558 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d540:	69bb      	ldr	r3, [r7, #24]
 801d542:	881b      	ldrh	r3, [r3, #0]
 801d544:	001a      	movs	r2, r3
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	05d2      	lsls	r2, r2, #23
 801d54c:	0dd2      	lsrs	r2, r2, #23
 801d54e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d550:	69bb      	ldr	r3, [r7, #24]
 801d552:	3302      	adds	r3, #2
 801d554:	61bb      	str	r3, [r7, #24]
 801d556:	e007      	b.n	801d568 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d558:	69fb      	ldr	r3, [r7, #28]
 801d55a:	781a      	ldrb	r2, [r3, #0]
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d562:	69fb      	ldr	r3, [r7, #28]
 801d564:	3301      	adds	r3, #1
 801d566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	2252      	movs	r2, #82	@ 0x52
 801d56c:	5a9b      	ldrh	r3, [r3, r2]
 801d56e:	b29b      	uxth	r3, r3
 801d570:	3b01      	subs	r3, #1
 801d572:	b299      	uxth	r1, r3
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	2252      	movs	r2, #82	@ 0x52
 801d578:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	2252      	movs	r2, #82	@ 0x52
 801d57e:	5a9b      	ldrh	r3, [r3, r2]
 801d580:	b29b      	uxth	r3, r3
 801d582:	2b00      	cmp	r3, #0
 801d584:	d1c9      	bne.n	801d51a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d586:	697a      	ldr	r2, [r7, #20]
 801d588:	68f8      	ldr	r0, [r7, #12]
 801d58a:	683b      	ldr	r3, [r7, #0]
 801d58c:	9300      	str	r3, [sp, #0]
 801d58e:	0013      	movs	r3, r2
 801d590:	2200      	movs	r2, #0
 801d592:	2140      	movs	r1, #64	@ 0x40
 801d594:	f001 f8c4 	bl	801e720 <UART_WaitOnFlagUntilTimeout>
 801d598:	1e03      	subs	r3, r0, #0
 801d59a:	d004      	beq.n	801d5a6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	2220      	movs	r2, #32
 801d5a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d5a2:	2303      	movs	r3, #3
 801d5a4:	e005      	b.n	801d5b2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	2220      	movs	r2, #32
 801d5aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	e000      	b.n	801d5b2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d5b0:	2302      	movs	r3, #2
  }
}
 801d5b2:	0018      	movs	r0, r3
 801d5b4:	46bd      	mov	sp, r7
 801d5b6:	b008      	add	sp, #32
 801d5b8:	bd80      	pop	{r7, pc}
	...

0801d5bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b088      	sub	sp, #32
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	60f8      	str	r0, [r7, #12]
 801d5c4:	60b9      	str	r1, [r7, #8]
 801d5c6:	1dbb      	adds	r3, r7, #6
 801d5c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	2280      	movs	r2, #128	@ 0x80
 801d5ce:	589b      	ldr	r3, [r3, r2]
 801d5d0:	2b20      	cmp	r3, #32
 801d5d2:	d14a      	bne.n	801d66a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d5d4:	68bb      	ldr	r3, [r7, #8]
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d003      	beq.n	801d5e2 <HAL_UART_Receive_IT+0x26>
 801d5da:	1dbb      	adds	r3, r7, #6
 801d5dc:	881b      	ldrh	r3, [r3, #0]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d101      	bne.n	801d5e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d5e2:	2301      	movs	r3, #1
 801d5e4:	e042      	b.n	801d66c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	689a      	ldr	r2, [r3, #8]
 801d5ea:	2380      	movs	r3, #128	@ 0x80
 801d5ec:	015b      	lsls	r3, r3, #5
 801d5ee:	429a      	cmp	r2, r3
 801d5f0:	d109      	bne.n	801d606 <HAL_UART_Receive_IT+0x4a>
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	691b      	ldr	r3, [r3, #16]
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d105      	bne.n	801d606 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d5fa:	68bb      	ldr	r3, [r7, #8]
 801d5fc:	2201      	movs	r2, #1
 801d5fe:	4013      	ands	r3, r2
 801d600:	d001      	beq.n	801d606 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d602:	2301      	movs	r3, #1
 801d604:	e032      	b.n	801d66c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	2200      	movs	r2, #0
 801d60a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	4a18      	ldr	r2, [pc, #96]	@ (801d674 <HAL_UART_Receive_IT+0xb8>)
 801d612:	4293      	cmp	r3, r2
 801d614:	d020      	beq.n	801d658 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	685a      	ldr	r2, [r3, #4]
 801d61c:	2380      	movs	r3, #128	@ 0x80
 801d61e:	041b      	lsls	r3, r3, #16
 801d620:	4013      	ands	r3, r2
 801d622:	d019      	beq.n	801d658 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d624:	f3ef 8310 	mrs	r3, PRIMASK
 801d628:	613b      	str	r3, [r7, #16]
  return(result);
 801d62a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d62c:	61fb      	str	r3, [r7, #28]
 801d62e:	2301      	movs	r3, #1
 801d630:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d632:	697b      	ldr	r3, [r7, #20]
 801d634:	f383 8810 	msr	PRIMASK, r3
}
 801d638:	46c0      	nop			@ (mov r8, r8)
 801d63a:	68fb      	ldr	r3, [r7, #12]
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	681a      	ldr	r2, [r3, #0]
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	2180      	movs	r1, #128	@ 0x80
 801d646:	04c9      	lsls	r1, r1, #19
 801d648:	430a      	orrs	r2, r1
 801d64a:	601a      	str	r2, [r3, #0]
 801d64c:	69fb      	ldr	r3, [r7, #28]
 801d64e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d650:	69bb      	ldr	r3, [r7, #24]
 801d652:	f383 8810 	msr	PRIMASK, r3
}
 801d656:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d658:	1dbb      	adds	r3, r7, #6
 801d65a:	881a      	ldrh	r2, [r3, #0]
 801d65c:	68b9      	ldr	r1, [r7, #8]
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	0018      	movs	r0, r3
 801d662:	f001 f8c7 	bl	801e7f4 <UART_Start_Receive_IT>
 801d666:	0003      	movs	r3, r0
 801d668:	e000      	b.n	801d66c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d66a:	2302      	movs	r3, #2
  }
}
 801d66c:	0018      	movs	r0, r3
 801d66e:	46bd      	mov	sp, r7
 801d670:	b008      	add	sp, #32
 801d672:	bd80      	pop	{r7, pc}
 801d674:	40004800 	.word	0x40004800

0801d678 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d678:	b580      	push	{r7, lr}
 801d67a:	b088      	sub	sp, #32
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	60f8      	str	r0, [r7, #12]
 801d680:	60b9      	str	r1, [r7, #8]
 801d682:	1dbb      	adds	r3, r7, #6
 801d684:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d68a:	2b20      	cmp	r3, #32
 801d68c:	d000      	beq.n	801d690 <HAL_UART_Transmit_DMA+0x18>
 801d68e:	e077      	b.n	801d780 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d690:	68bb      	ldr	r3, [r7, #8]
 801d692:	2b00      	cmp	r3, #0
 801d694:	d003      	beq.n	801d69e <HAL_UART_Transmit_DMA+0x26>
 801d696:	1dbb      	adds	r3, r7, #6
 801d698:	881b      	ldrh	r3, [r3, #0]
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d101      	bne.n	801d6a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d69e:	2301      	movs	r3, #1
 801d6a0:	e06f      	b.n	801d782 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	689a      	ldr	r2, [r3, #8]
 801d6a6:	2380      	movs	r3, #128	@ 0x80
 801d6a8:	015b      	lsls	r3, r3, #5
 801d6aa:	429a      	cmp	r2, r3
 801d6ac:	d109      	bne.n	801d6c2 <HAL_UART_Transmit_DMA+0x4a>
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	691b      	ldr	r3, [r3, #16]
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d105      	bne.n	801d6c2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d6b6:	68bb      	ldr	r3, [r7, #8]
 801d6b8:	2201      	movs	r2, #1
 801d6ba:	4013      	ands	r3, r2
 801d6bc:	d001      	beq.n	801d6c2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d6be:	2301      	movs	r3, #1
 801d6c0:	e05f      	b.n	801d782 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	68ba      	ldr	r2, [r7, #8]
 801d6c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	1dba      	adds	r2, r7, #6
 801d6cc:	2150      	movs	r1, #80	@ 0x50
 801d6ce:	8812      	ldrh	r2, [r2, #0]
 801d6d0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	1dba      	adds	r2, r7, #6
 801d6d6:	2152      	movs	r1, #82	@ 0x52
 801d6d8:	8812      	ldrh	r2, [r2, #0]
 801d6da:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	2284      	movs	r2, #132	@ 0x84
 801d6e0:	2100      	movs	r1, #0
 801d6e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	2221      	movs	r2, #33	@ 0x21
 801d6e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d027      	beq.n	801d742 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6f6:	4a25      	ldr	r2, [pc, #148]	@ (801d78c <HAL_UART_Transmit_DMA+0x114>)
 801d6f8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6fe:	4a24      	ldr	r2, [pc, #144]	@ (801d790 <HAL_UART_Transmit_DMA+0x118>)
 801d700:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d706:	4a23      	ldr	r2, [pc, #140]	@ (801d794 <HAL_UART_Transmit_DMA+0x11c>)
 801d708:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d70a:	68fb      	ldr	r3, [r7, #12]
 801d70c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d70e:	2200      	movs	r2, #0
 801d710:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d71a:	0019      	movs	r1, r3
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	3328      	adds	r3, #40	@ 0x28
 801d722:	001a      	movs	r2, r3
 801d724:	1dbb      	adds	r3, r7, #6
 801d726:	881b      	ldrh	r3, [r3, #0]
 801d728:	f7f7 fe2a 	bl	8015380 <HAL_DMA_Start_IT>
 801d72c:	1e03      	subs	r3, r0, #0
 801d72e:	d008      	beq.n	801d742 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	2284      	movs	r2, #132	@ 0x84
 801d734:	2110      	movs	r1, #16
 801d736:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	2220      	movs	r2, #32
 801d73c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d73e:	2301      	movs	r3, #1
 801d740:	e01f      	b.n	801d782 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	2240      	movs	r2, #64	@ 0x40
 801d748:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d74a:	f3ef 8310 	mrs	r3, PRIMASK
 801d74e:	613b      	str	r3, [r7, #16]
  return(result);
 801d750:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d752:	61fb      	str	r3, [r7, #28]
 801d754:	2301      	movs	r3, #1
 801d756:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d758:	697b      	ldr	r3, [r7, #20]
 801d75a:	f383 8810 	msr	PRIMASK, r3
}
 801d75e:	46c0      	nop			@ (mov r8, r8)
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	689a      	ldr	r2, [r3, #8]
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	2180      	movs	r1, #128	@ 0x80
 801d76c:	430a      	orrs	r2, r1
 801d76e:	609a      	str	r2, [r3, #8]
 801d770:	69fb      	ldr	r3, [r7, #28]
 801d772:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d774:	69bb      	ldr	r3, [r7, #24]
 801d776:	f383 8810 	msr	PRIMASK, r3
}
 801d77a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d77c:	2300      	movs	r3, #0
 801d77e:	e000      	b.n	801d782 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d780:	2302      	movs	r3, #2
  }
}
 801d782:	0018      	movs	r0, r3
 801d784:	46bd      	mov	sp, r7
 801d786:	b008      	add	sp, #32
 801d788:	bd80      	pop	{r7, pc}
 801d78a:	46c0      	nop			@ (mov r8, r8)
 801d78c:	0801ebd9 	.word	0x0801ebd9
 801d790:	0801ec75 	.word	0x0801ec75
 801d794:	0801ee15 	.word	0x0801ee15

0801d798 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d798:	b580      	push	{r7, lr}
 801d79a:	b088      	sub	sp, #32
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	60f8      	str	r0, [r7, #12]
 801d7a0:	60b9      	str	r1, [r7, #8]
 801d7a2:	1dbb      	adds	r3, r7, #6
 801d7a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	2280      	movs	r2, #128	@ 0x80
 801d7aa:	589b      	ldr	r3, [r3, r2]
 801d7ac:	2b20      	cmp	r3, #32
 801d7ae:	d14a      	bne.n	801d846 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d7b0:	68bb      	ldr	r3, [r7, #8]
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d003      	beq.n	801d7be <HAL_UART_Receive_DMA+0x26>
 801d7b6:	1dbb      	adds	r3, r7, #6
 801d7b8:	881b      	ldrh	r3, [r3, #0]
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	d101      	bne.n	801d7c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d7be:	2301      	movs	r3, #1
 801d7c0:	e042      	b.n	801d848 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	689a      	ldr	r2, [r3, #8]
 801d7c6:	2380      	movs	r3, #128	@ 0x80
 801d7c8:	015b      	lsls	r3, r3, #5
 801d7ca:	429a      	cmp	r2, r3
 801d7cc:	d109      	bne.n	801d7e2 <HAL_UART_Receive_DMA+0x4a>
 801d7ce:	68fb      	ldr	r3, [r7, #12]
 801d7d0:	691b      	ldr	r3, [r3, #16]
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d105      	bne.n	801d7e2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d7d6:	68bb      	ldr	r3, [r7, #8]
 801d7d8:	2201      	movs	r2, #1
 801d7da:	4013      	ands	r3, r2
 801d7dc:	d001      	beq.n	801d7e2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d7de:	2301      	movs	r3, #1
 801d7e0:	e032      	b.n	801d848 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	4a18      	ldr	r2, [pc, #96]	@ (801d850 <HAL_UART_Receive_DMA+0xb8>)
 801d7ee:	4293      	cmp	r3, r2
 801d7f0:	d020      	beq.n	801d834 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d7f2:	68fb      	ldr	r3, [r7, #12]
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	685a      	ldr	r2, [r3, #4]
 801d7f8:	2380      	movs	r3, #128	@ 0x80
 801d7fa:	041b      	lsls	r3, r3, #16
 801d7fc:	4013      	ands	r3, r2
 801d7fe:	d019      	beq.n	801d834 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d800:	f3ef 8310 	mrs	r3, PRIMASK
 801d804:	613b      	str	r3, [r7, #16]
  return(result);
 801d806:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d808:	61fb      	str	r3, [r7, #28]
 801d80a:	2301      	movs	r3, #1
 801d80c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d80e:	697b      	ldr	r3, [r7, #20]
 801d810:	f383 8810 	msr	PRIMASK, r3
}
 801d814:	46c0      	nop			@ (mov r8, r8)
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	681a      	ldr	r2, [r3, #0]
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	2180      	movs	r1, #128	@ 0x80
 801d822:	04c9      	lsls	r1, r1, #19
 801d824:	430a      	orrs	r2, r1
 801d826:	601a      	str	r2, [r3, #0]
 801d828:	69fb      	ldr	r3, [r7, #28]
 801d82a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d82c:	69bb      	ldr	r3, [r7, #24]
 801d82e:	f383 8810 	msr	PRIMASK, r3
}
 801d832:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d834:	1dbb      	adds	r3, r7, #6
 801d836:	881a      	ldrh	r2, [r3, #0]
 801d838:	68b9      	ldr	r1, [r7, #8]
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	0018      	movs	r0, r3
 801d83e:	f001 f8a3 	bl	801e988 <UART_Start_Receive_DMA>
 801d842:	0003      	movs	r3, r0
 801d844:	e000      	b.n	801d848 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d846:	2302      	movs	r3, #2
  }
}
 801d848:	0018      	movs	r0, r3
 801d84a:	46bd      	mov	sp, r7
 801d84c:	b008      	add	sp, #32
 801d84e:	bd80      	pop	{r7, pc}
 801d850:	40004800 	.word	0x40004800

0801d854 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d854:	b590      	push	{r4, r7, lr}
 801d856:	b0ab      	sub	sp, #172	@ 0xac
 801d858:	af00      	add	r7, sp, #0
 801d85a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	69db      	ldr	r3, [r3, #28]
 801d862:	22a4      	movs	r2, #164	@ 0xa4
 801d864:	18b9      	adds	r1, r7, r2
 801d866:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	20a0      	movs	r0, #160	@ 0xa0
 801d870:	1839      	adds	r1, r7, r0
 801d872:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	689b      	ldr	r3, [r3, #8]
 801d87a:	219c      	movs	r1, #156	@ 0x9c
 801d87c:	1879      	adds	r1, r7, r1
 801d87e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d880:	0011      	movs	r1, r2
 801d882:	18bb      	adds	r3, r7, r2
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	4a9c      	ldr	r2, [pc, #624]	@ (801daf8 <HAL_UART_IRQHandler+0x2a4>)
 801d888:	4013      	ands	r3, r2
 801d88a:	2298      	movs	r2, #152	@ 0x98
 801d88c:	18bc      	adds	r4, r7, r2
 801d88e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801d890:	18bb      	adds	r3, r7, r2
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	2b00      	cmp	r3, #0
 801d896:	d114      	bne.n	801d8c2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d898:	187b      	adds	r3, r7, r1
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	2220      	movs	r2, #32
 801d89e:	4013      	ands	r3, r2
 801d8a0:	d00f      	beq.n	801d8c2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d8a2:	183b      	adds	r3, r7, r0
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	2220      	movs	r2, #32
 801d8a8:	4013      	ands	r3, r2
 801d8aa:	d00a      	beq.n	801d8c2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d100      	bne.n	801d8b6 <HAL_UART_IRQHandler+0x62>
 801d8b4:	e2aa      	b.n	801de0c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d8ba:	687a      	ldr	r2, [r7, #4]
 801d8bc:	0010      	movs	r0, r2
 801d8be:	4798      	blx	r3
      }
      return;
 801d8c0:	e2a4      	b.n	801de0c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801d8c2:	2398      	movs	r3, #152	@ 0x98
 801d8c4:	18fb      	adds	r3, r7, r3
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d100      	bne.n	801d8ce <HAL_UART_IRQHandler+0x7a>
 801d8cc:	e11a      	b.n	801db04 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d8ce:	239c      	movs	r3, #156	@ 0x9c
 801d8d0:	18fb      	adds	r3, r7, r3
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	2201      	movs	r2, #1
 801d8d6:	4013      	ands	r3, r2
 801d8d8:	d106      	bne.n	801d8e8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d8da:	23a0      	movs	r3, #160	@ 0xa0
 801d8dc:	18fb      	adds	r3, r7, r3
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	4a86      	ldr	r2, [pc, #536]	@ (801dafc <HAL_UART_IRQHandler+0x2a8>)
 801d8e2:	4013      	ands	r3, r2
 801d8e4:	d100      	bne.n	801d8e8 <HAL_UART_IRQHandler+0x94>
 801d8e6:	e10d      	b.n	801db04 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d8e8:	23a4      	movs	r3, #164	@ 0xa4
 801d8ea:	18fb      	adds	r3, r7, r3
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	2201      	movs	r2, #1
 801d8f0:	4013      	ands	r3, r2
 801d8f2:	d012      	beq.n	801d91a <HAL_UART_IRQHandler+0xc6>
 801d8f4:	23a0      	movs	r3, #160	@ 0xa0
 801d8f6:	18fb      	adds	r3, r7, r3
 801d8f8:	681a      	ldr	r2, [r3, #0]
 801d8fa:	2380      	movs	r3, #128	@ 0x80
 801d8fc:	005b      	lsls	r3, r3, #1
 801d8fe:	4013      	ands	r3, r2
 801d900:	d00b      	beq.n	801d91a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	2201      	movs	r2, #1
 801d908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	2284      	movs	r2, #132	@ 0x84
 801d90e:	589b      	ldr	r3, [r3, r2]
 801d910:	2201      	movs	r2, #1
 801d912:	431a      	orrs	r2, r3
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	2184      	movs	r1, #132	@ 0x84
 801d918:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d91a:	23a4      	movs	r3, #164	@ 0xa4
 801d91c:	18fb      	adds	r3, r7, r3
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2202      	movs	r2, #2
 801d922:	4013      	ands	r3, r2
 801d924:	d011      	beq.n	801d94a <HAL_UART_IRQHandler+0xf6>
 801d926:	239c      	movs	r3, #156	@ 0x9c
 801d928:	18fb      	adds	r3, r7, r3
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	2201      	movs	r2, #1
 801d92e:	4013      	ands	r3, r2
 801d930:	d00b      	beq.n	801d94a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	2202      	movs	r2, #2
 801d938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	2284      	movs	r2, #132	@ 0x84
 801d93e:	589b      	ldr	r3, [r3, r2]
 801d940:	2204      	movs	r2, #4
 801d942:	431a      	orrs	r2, r3
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	2184      	movs	r1, #132	@ 0x84
 801d948:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d94a:	23a4      	movs	r3, #164	@ 0xa4
 801d94c:	18fb      	adds	r3, r7, r3
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	2204      	movs	r2, #4
 801d952:	4013      	ands	r3, r2
 801d954:	d011      	beq.n	801d97a <HAL_UART_IRQHandler+0x126>
 801d956:	239c      	movs	r3, #156	@ 0x9c
 801d958:	18fb      	adds	r3, r7, r3
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	2201      	movs	r2, #1
 801d95e:	4013      	ands	r3, r2
 801d960:	d00b      	beq.n	801d97a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	2204      	movs	r2, #4
 801d968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	2284      	movs	r2, #132	@ 0x84
 801d96e:	589b      	ldr	r3, [r3, r2]
 801d970:	2202      	movs	r2, #2
 801d972:	431a      	orrs	r2, r3
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	2184      	movs	r1, #132	@ 0x84
 801d978:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d97a:	23a4      	movs	r3, #164	@ 0xa4
 801d97c:	18fb      	adds	r3, r7, r3
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	2208      	movs	r2, #8
 801d982:	4013      	ands	r3, r2
 801d984:	d017      	beq.n	801d9b6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d986:	23a0      	movs	r3, #160	@ 0xa0
 801d988:	18fb      	adds	r3, r7, r3
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	2220      	movs	r2, #32
 801d98e:	4013      	ands	r3, r2
 801d990:	d105      	bne.n	801d99e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d992:	239c      	movs	r3, #156	@ 0x9c
 801d994:	18fb      	adds	r3, r7, r3
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	2201      	movs	r2, #1
 801d99a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d99c:	d00b      	beq.n	801d9b6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	681b      	ldr	r3, [r3, #0]
 801d9a2:	2208      	movs	r2, #8
 801d9a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	2284      	movs	r2, #132	@ 0x84
 801d9aa:	589b      	ldr	r3, [r3, r2]
 801d9ac:	2208      	movs	r2, #8
 801d9ae:	431a      	orrs	r2, r3
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	2184      	movs	r1, #132	@ 0x84
 801d9b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d9b6:	23a4      	movs	r3, #164	@ 0xa4
 801d9b8:	18fb      	adds	r3, r7, r3
 801d9ba:	681a      	ldr	r2, [r3, #0]
 801d9bc:	2380      	movs	r3, #128	@ 0x80
 801d9be:	011b      	lsls	r3, r3, #4
 801d9c0:	4013      	ands	r3, r2
 801d9c2:	d013      	beq.n	801d9ec <HAL_UART_IRQHandler+0x198>
 801d9c4:	23a0      	movs	r3, #160	@ 0xa0
 801d9c6:	18fb      	adds	r3, r7, r3
 801d9c8:	681a      	ldr	r2, [r3, #0]
 801d9ca:	2380      	movs	r3, #128	@ 0x80
 801d9cc:	04db      	lsls	r3, r3, #19
 801d9ce:	4013      	ands	r3, r2
 801d9d0:	d00c      	beq.n	801d9ec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	2280      	movs	r2, #128	@ 0x80
 801d9d8:	0112      	lsls	r2, r2, #4
 801d9da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	2284      	movs	r2, #132	@ 0x84
 801d9e0:	589b      	ldr	r3, [r3, r2]
 801d9e2:	2220      	movs	r2, #32
 801d9e4:	431a      	orrs	r2, r3
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	2184      	movs	r1, #132	@ 0x84
 801d9ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	2284      	movs	r2, #132	@ 0x84
 801d9f0:	589b      	ldr	r3, [r3, r2]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d100      	bne.n	801d9f8 <HAL_UART_IRQHandler+0x1a4>
 801d9f6:	e20b      	b.n	801de10 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801d9f8:	23a4      	movs	r3, #164	@ 0xa4
 801d9fa:	18fb      	adds	r3, r7, r3
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	2220      	movs	r2, #32
 801da00:	4013      	ands	r3, r2
 801da02:	d00e      	beq.n	801da22 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801da04:	23a0      	movs	r3, #160	@ 0xa0
 801da06:	18fb      	adds	r3, r7, r3
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	2220      	movs	r2, #32
 801da0c:	4013      	ands	r3, r2
 801da0e:	d008      	beq.n	801da22 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da14:	2b00      	cmp	r3, #0
 801da16:	d004      	beq.n	801da22 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da1c:	687a      	ldr	r2, [r7, #4]
 801da1e:	0010      	movs	r0, r2
 801da20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	2284      	movs	r2, #132	@ 0x84
 801da26:	589b      	ldr	r3, [r3, r2]
 801da28:	2194      	movs	r1, #148	@ 0x94
 801da2a:	187a      	adds	r2, r7, r1
 801da2c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	689b      	ldr	r3, [r3, #8]
 801da34:	2240      	movs	r2, #64	@ 0x40
 801da36:	4013      	ands	r3, r2
 801da38:	2b40      	cmp	r3, #64	@ 0x40
 801da3a:	d004      	beq.n	801da46 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801da3c:	187b      	adds	r3, r7, r1
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	2228      	movs	r2, #40	@ 0x28
 801da42:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da44:	d04b      	beq.n	801dade <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	0018      	movs	r0, r3
 801da4a:	f001 f861 	bl	801eb10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	689b      	ldr	r3, [r3, #8]
 801da54:	2240      	movs	r2, #64	@ 0x40
 801da56:	4013      	ands	r3, r2
 801da58:	2b40      	cmp	r3, #64	@ 0x40
 801da5a:	d139      	bne.n	801dad0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da5c:	f3ef 8310 	mrs	r3, PRIMASK
 801da60:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801da62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801da64:	2090      	movs	r0, #144	@ 0x90
 801da66:	183a      	adds	r2, r7, r0
 801da68:	6013      	str	r3, [r2, #0]
 801da6a:	2301      	movs	r3, #1
 801da6c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801da70:	f383 8810 	msr	PRIMASK, r3
}
 801da74:	46c0      	nop			@ (mov r8, r8)
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	689a      	ldr	r2, [r3, #8]
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	2140      	movs	r1, #64	@ 0x40
 801da82:	438a      	bics	r2, r1
 801da84:	609a      	str	r2, [r3, #8]
 801da86:	183b      	adds	r3, r7, r0
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801da8e:	f383 8810 	msr	PRIMASK, r3
}
 801da92:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d012      	beq.n	801dac2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daa0:	4a17      	ldr	r2, [pc, #92]	@ (801db00 <HAL_UART_IRQHandler+0x2ac>)
 801daa2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daa8:	0018      	movs	r0, r3
 801daaa:	f7f7 fd0f 	bl	80154cc <HAL_DMA_Abort_IT>
 801daae:	1e03      	subs	r3, r0, #0
 801dab0:	d020      	beq.n	801daf4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dabc:	0018      	movs	r0, r3
 801dabe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dac0:	e018      	b.n	801daf4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	2298      	movs	r2, #152	@ 0x98
 801dac6:	589b      	ldr	r3, [r3, r2]
 801dac8:	687a      	ldr	r2, [r7, #4]
 801daca:	0010      	movs	r0, r2
 801dacc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dace:	e011      	b.n	801daf4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	2298      	movs	r2, #152	@ 0x98
 801dad4:	589b      	ldr	r3, [r3, r2]
 801dad6:	687a      	ldr	r2, [r7, #4]
 801dad8:	0010      	movs	r0, r2
 801dada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dadc:	e00a      	b.n	801daf4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	2298      	movs	r2, #152	@ 0x98
 801dae2:	589b      	ldr	r3, [r3, r2]
 801dae4:	687a      	ldr	r2, [r7, #4]
 801dae6:	0010      	movs	r0, r2
 801dae8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	2284      	movs	r2, #132	@ 0x84
 801daee:	2100      	movs	r1, #0
 801daf0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801daf2:	e18d      	b.n	801de10 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801daf4:	46c0      	nop			@ (mov r8, r8)
    return;
 801daf6:	e18b      	b.n	801de10 <HAL_UART_IRQHandler+0x5bc>
 801daf8:	0000080f 	.word	0x0000080f
 801dafc:	04000120 	.word	0x04000120
 801db00:	0801ee9d 	.word	0x0801ee9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801db08:	2b01      	cmp	r3, #1
 801db0a:	d000      	beq.n	801db0e <HAL_UART_IRQHandler+0x2ba>
 801db0c:	e13d      	b.n	801dd8a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801db0e:	23a4      	movs	r3, #164	@ 0xa4
 801db10:	18fb      	adds	r3, r7, r3
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	2210      	movs	r2, #16
 801db16:	4013      	ands	r3, r2
 801db18:	d100      	bne.n	801db1c <HAL_UART_IRQHandler+0x2c8>
 801db1a:	e136      	b.n	801dd8a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801db1c:	23a0      	movs	r3, #160	@ 0xa0
 801db1e:	18fb      	adds	r3, r7, r3
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	2210      	movs	r2, #16
 801db24:	4013      	ands	r3, r2
 801db26:	d100      	bne.n	801db2a <HAL_UART_IRQHandler+0x2d6>
 801db28:	e12f      	b.n	801dd8a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	2210      	movs	r2, #16
 801db30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	689b      	ldr	r3, [r3, #8]
 801db38:	2240      	movs	r2, #64	@ 0x40
 801db3a:	4013      	ands	r3, r2
 801db3c:	2b40      	cmp	r3, #64	@ 0x40
 801db3e:	d000      	beq.n	801db42 <HAL_UART_IRQHandler+0x2ee>
 801db40:	e0a2      	b.n	801dc88 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	685a      	ldr	r2, [r3, #4]
 801db4a:	217e      	movs	r1, #126	@ 0x7e
 801db4c:	187b      	adds	r3, r7, r1
 801db4e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801db50:	187b      	adds	r3, r7, r1
 801db52:	881b      	ldrh	r3, [r3, #0]
 801db54:	2b00      	cmp	r3, #0
 801db56:	d100      	bne.n	801db5a <HAL_UART_IRQHandler+0x306>
 801db58:	e15c      	b.n	801de14 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	2258      	movs	r2, #88	@ 0x58
 801db5e:	5a9b      	ldrh	r3, [r3, r2]
 801db60:	187a      	adds	r2, r7, r1
 801db62:	8812      	ldrh	r2, [r2, #0]
 801db64:	429a      	cmp	r2, r3
 801db66:	d300      	bcc.n	801db6a <HAL_UART_IRQHandler+0x316>
 801db68:	e154      	b.n	801de14 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	187a      	adds	r2, r7, r1
 801db6e:	215a      	movs	r1, #90	@ 0x5a
 801db70:	8812      	ldrh	r2, [r2, #0]
 801db72:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	2220      	movs	r2, #32
 801db7e:	4013      	ands	r3, r2
 801db80:	d16f      	bne.n	801dc62 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db82:	f3ef 8310 	mrs	r3, PRIMASK
 801db86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801db88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801db8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801db8c:	2301      	movs	r3, #1
 801db8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801db92:	f383 8810 	msr	PRIMASK, r3
}
 801db96:	46c0      	nop			@ (mov r8, r8)
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	681a      	ldr	r2, [r3, #0]
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	49a0      	ldr	r1, [pc, #640]	@ (801de24 <HAL_UART_IRQHandler+0x5d0>)
 801dba4:	400a      	ands	r2, r1
 801dba6:	601a      	str	r2, [r3, #0]
 801dba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dbaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dbae:	f383 8810 	msr	PRIMASK, r3
}
 801dbb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbb4:	f3ef 8310 	mrs	r3, PRIMASK
 801dbb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801dbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dbbc:	677b      	str	r3, [r7, #116]	@ 0x74
 801dbbe:	2301      	movs	r3, #1
 801dbc0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dbc4:	f383 8810 	msr	PRIMASK, r3
}
 801dbc8:	46c0      	nop			@ (mov r8, r8)
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	689a      	ldr	r2, [r3, #8]
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	2101      	movs	r1, #1
 801dbd6:	438a      	bics	r2, r1
 801dbd8:	609a      	str	r2, [r3, #8]
 801dbda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dbdc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbe0:	f383 8810 	msr	PRIMASK, r3
}
 801dbe4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbe6:	f3ef 8310 	mrs	r3, PRIMASK
 801dbea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801dbec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dbee:	673b      	str	r3, [r7, #112]	@ 0x70
 801dbf0:	2301      	movs	r3, #1
 801dbf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dbf6:	f383 8810 	msr	PRIMASK, r3
}
 801dbfa:	46c0      	nop			@ (mov r8, r8)
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	689a      	ldr	r2, [r3, #8]
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	2140      	movs	r1, #64	@ 0x40
 801dc08:	438a      	bics	r2, r1
 801dc0a:	609a      	str	r2, [r3, #8]
 801dc0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dc0e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dc12:	f383 8810 	msr	PRIMASK, r3
}
 801dc16:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	2280      	movs	r2, #128	@ 0x80
 801dc1c:	2120      	movs	r1, #32
 801dc1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	2200      	movs	r2, #0
 801dc24:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc26:	f3ef 8310 	mrs	r3, PRIMASK
 801dc2a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801dc2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dc2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dc30:	2301      	movs	r3, #1
 801dc32:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dc36:	f383 8810 	msr	PRIMASK, r3
}
 801dc3a:	46c0      	nop			@ (mov r8, r8)
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	681a      	ldr	r2, [r3, #0]
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	2110      	movs	r1, #16
 801dc48:	438a      	bics	r2, r1
 801dc4a:	601a      	str	r2, [r3, #0]
 801dc4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dc4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dc52:	f383 8810 	msr	PRIMASK, r3
}
 801dc56:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc5c:	0018      	movs	r0, r3
 801dc5e:	f7f7 fbf5 	bl	801544c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	2202      	movs	r2, #2
 801dc66:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	22ac      	movs	r2, #172	@ 0xac
 801dc6c:	589b      	ldr	r3, [r3, r2]
 801dc6e:	687a      	ldr	r2, [r7, #4]
 801dc70:	2158      	movs	r1, #88	@ 0x58
 801dc72:	5a51      	ldrh	r1, [r2, r1]
 801dc74:	687a      	ldr	r2, [r7, #4]
 801dc76:	205a      	movs	r0, #90	@ 0x5a
 801dc78:	5a12      	ldrh	r2, [r2, r0]
 801dc7a:	b292      	uxth	r2, r2
 801dc7c:	1a8a      	subs	r2, r1, r2
 801dc7e:	b291      	uxth	r1, r2
 801dc80:	687a      	ldr	r2, [r7, #4]
 801dc82:	0010      	movs	r0, r2
 801dc84:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dc86:	e0c5      	b.n	801de14 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	2258      	movs	r2, #88	@ 0x58
 801dc8c:	5a99      	ldrh	r1, [r3, r2]
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	225a      	movs	r2, #90	@ 0x5a
 801dc92:	5a9b      	ldrh	r3, [r3, r2]
 801dc94:	b29a      	uxth	r2, r3
 801dc96:	208e      	movs	r0, #142	@ 0x8e
 801dc98:	183b      	adds	r3, r7, r0
 801dc9a:	1a8a      	subs	r2, r1, r2
 801dc9c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	225a      	movs	r2, #90	@ 0x5a
 801dca2:	5a9b      	ldrh	r3, [r3, r2]
 801dca4:	b29b      	uxth	r3, r3
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d100      	bne.n	801dcac <HAL_UART_IRQHandler+0x458>
 801dcaa:	e0b5      	b.n	801de18 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801dcac:	183b      	adds	r3, r7, r0
 801dcae:	881b      	ldrh	r3, [r3, #0]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d100      	bne.n	801dcb6 <HAL_UART_IRQHandler+0x462>
 801dcb4:	e0b0      	b.n	801de18 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcb6:	f3ef 8310 	mrs	r3, PRIMASK
 801dcba:	60fb      	str	r3, [r7, #12]
  return(result);
 801dcbc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dcbe:	2488      	movs	r4, #136	@ 0x88
 801dcc0:	193a      	adds	r2, r7, r4
 801dcc2:	6013      	str	r3, [r2, #0]
 801dcc4:	2301      	movs	r3, #1
 801dcc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcc8:	693b      	ldr	r3, [r7, #16]
 801dcca:	f383 8810 	msr	PRIMASK, r3
}
 801dcce:	46c0      	nop			@ (mov r8, r8)
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	681a      	ldr	r2, [r3, #0]
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	4953      	ldr	r1, [pc, #332]	@ (801de28 <HAL_UART_IRQHandler+0x5d4>)
 801dcdc:	400a      	ands	r2, r1
 801dcde:	601a      	str	r2, [r3, #0]
 801dce0:	193b      	adds	r3, r7, r4
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dce6:	697b      	ldr	r3, [r7, #20]
 801dce8:	f383 8810 	msr	PRIMASK, r3
}
 801dcec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcee:	f3ef 8310 	mrs	r3, PRIMASK
 801dcf2:	61bb      	str	r3, [r7, #24]
  return(result);
 801dcf4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dcf6:	2484      	movs	r4, #132	@ 0x84
 801dcf8:	193a      	adds	r2, r7, r4
 801dcfa:	6013      	str	r3, [r2, #0]
 801dcfc:	2301      	movs	r3, #1
 801dcfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd00:	69fb      	ldr	r3, [r7, #28]
 801dd02:	f383 8810 	msr	PRIMASK, r3
}
 801dd06:	46c0      	nop			@ (mov r8, r8)
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	689a      	ldr	r2, [r3, #8]
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	2101      	movs	r1, #1
 801dd14:	438a      	bics	r2, r1
 801dd16:	609a      	str	r2, [r3, #8]
 801dd18:	193b      	adds	r3, r7, r4
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd1e:	6a3b      	ldr	r3, [r7, #32]
 801dd20:	f383 8810 	msr	PRIMASK, r3
}
 801dd24:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	2280      	movs	r2, #128	@ 0x80
 801dd2a:	2120      	movs	r1, #32
 801dd2c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	2200      	movs	r2, #0
 801dd32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	2200      	movs	r2, #0
 801dd38:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd3a:	f3ef 8310 	mrs	r3, PRIMASK
 801dd3e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dd42:	2480      	movs	r4, #128	@ 0x80
 801dd44:	193a      	adds	r2, r7, r4
 801dd46:	6013      	str	r3, [r2, #0]
 801dd48:	2301      	movs	r3, #1
 801dd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd4e:	f383 8810 	msr	PRIMASK, r3
}
 801dd52:	46c0      	nop			@ (mov r8, r8)
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	681a      	ldr	r2, [r3, #0]
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	2110      	movs	r1, #16
 801dd60:	438a      	bics	r2, r1
 801dd62:	601a      	str	r2, [r3, #0]
 801dd64:	193b      	adds	r3, r7, r4
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd6c:	f383 8810 	msr	PRIMASK, r3
}
 801dd70:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	2202      	movs	r2, #2
 801dd76:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	22ac      	movs	r2, #172	@ 0xac
 801dd7c:	589b      	ldr	r3, [r3, r2]
 801dd7e:	183a      	adds	r2, r7, r0
 801dd80:	8811      	ldrh	r1, [r2, #0]
 801dd82:	687a      	ldr	r2, [r7, #4]
 801dd84:	0010      	movs	r0, r2
 801dd86:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dd88:	e046      	b.n	801de18 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801dd8a:	23a4      	movs	r3, #164	@ 0xa4
 801dd8c:	18fb      	adds	r3, r7, r3
 801dd8e:	681a      	ldr	r2, [r3, #0]
 801dd90:	2380      	movs	r3, #128	@ 0x80
 801dd92:	035b      	lsls	r3, r3, #13
 801dd94:	4013      	ands	r3, r2
 801dd96:	d012      	beq.n	801ddbe <HAL_UART_IRQHandler+0x56a>
 801dd98:	239c      	movs	r3, #156	@ 0x9c
 801dd9a:	18fb      	adds	r3, r7, r3
 801dd9c:	681a      	ldr	r2, [r3, #0]
 801dd9e:	2380      	movs	r3, #128	@ 0x80
 801dda0:	03db      	lsls	r3, r3, #15
 801dda2:	4013      	ands	r3, r2
 801dda4:	d00b      	beq.n	801ddbe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	2280      	movs	r2, #128	@ 0x80
 801ddac:	0352      	lsls	r2, r2, #13
 801ddae:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	22a8      	movs	r2, #168	@ 0xa8
 801ddb4:	589b      	ldr	r3, [r3, r2]
 801ddb6:	687a      	ldr	r2, [r7, #4]
 801ddb8:	0010      	movs	r0, r2
 801ddba:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ddbc:	e02f      	b.n	801de1e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801ddbe:	23a4      	movs	r3, #164	@ 0xa4
 801ddc0:	18fb      	adds	r3, r7, r3
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	2280      	movs	r2, #128	@ 0x80
 801ddc6:	4013      	ands	r3, r2
 801ddc8:	d00f      	beq.n	801ddea <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801ddca:	23a0      	movs	r3, #160	@ 0xa0
 801ddcc:	18fb      	adds	r3, r7, r3
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	2280      	movs	r2, #128	@ 0x80
 801ddd2:	4013      	ands	r3, r2
 801ddd4:	d009      	beq.n	801ddea <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d01e      	beq.n	801de1c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dde2:	687a      	ldr	r2, [r7, #4]
 801dde4:	0010      	movs	r0, r2
 801dde6:	4798      	blx	r3
    }
    return;
 801dde8:	e018      	b.n	801de1c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801ddea:	23a4      	movs	r3, #164	@ 0xa4
 801ddec:	18fb      	adds	r3, r7, r3
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	2240      	movs	r2, #64	@ 0x40
 801ddf2:	4013      	ands	r3, r2
 801ddf4:	d013      	beq.n	801de1e <HAL_UART_IRQHandler+0x5ca>
 801ddf6:	23a0      	movs	r3, #160	@ 0xa0
 801ddf8:	18fb      	adds	r3, r7, r3
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	2240      	movs	r2, #64	@ 0x40
 801ddfe:	4013      	ands	r3, r2
 801de00:	d00d      	beq.n	801de1e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	0018      	movs	r0, r3
 801de06:	f001 f862 	bl	801eece <UART_EndTransmit_IT>
    return;
 801de0a:	e008      	b.n	801de1e <HAL_UART_IRQHandler+0x5ca>
      return;
 801de0c:	46c0      	nop			@ (mov r8, r8)
 801de0e:	e006      	b.n	801de1e <HAL_UART_IRQHandler+0x5ca>
    return;
 801de10:	46c0      	nop			@ (mov r8, r8)
 801de12:	e004      	b.n	801de1e <HAL_UART_IRQHandler+0x5ca>
      return;
 801de14:	46c0      	nop			@ (mov r8, r8)
 801de16:	e002      	b.n	801de1e <HAL_UART_IRQHandler+0x5ca>
      return;
 801de18:	46c0      	nop			@ (mov r8, r8)
 801de1a:	e000      	b.n	801de1e <HAL_UART_IRQHandler+0x5ca>
    return;
 801de1c:	46c0      	nop			@ (mov r8, r8)
  }

}
 801de1e:	46bd      	mov	sp, r7
 801de20:	b02b      	add	sp, #172	@ 0xac
 801de22:	bd90      	pop	{r4, r7, pc}
 801de24:	fffffeff 	.word	0xfffffeff
 801de28:	fffffedf 	.word	0xfffffedf

0801de2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801de2c:	b580      	push	{r7, lr}
 801de2e:	b082      	sub	sp, #8
 801de30:	af00      	add	r7, sp, #0
 801de32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801de34:	46c0      	nop			@ (mov r8, r8)
 801de36:	46bd      	mov	sp, r7
 801de38:	b002      	add	sp, #8
 801de3a:	bd80      	pop	{r7, pc}

0801de3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801de3c:	b580      	push	{r7, lr}
 801de3e:	b082      	sub	sp, #8
 801de40:	af00      	add	r7, sp, #0
 801de42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801de44:	46c0      	nop			@ (mov r8, r8)
 801de46:	46bd      	mov	sp, r7
 801de48:	b002      	add	sp, #8
 801de4a:	bd80      	pop	{r7, pc}

0801de4c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801de4c:	b580      	push	{r7, lr}
 801de4e:	b082      	sub	sp, #8
 801de50:	af00      	add	r7, sp, #0
 801de52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801de54:	46c0      	nop			@ (mov r8, r8)
 801de56:	46bd      	mov	sp, r7
 801de58:	b002      	add	sp, #8
 801de5a:	bd80      	pop	{r7, pc}

0801de5c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801de5c:	b580      	push	{r7, lr}
 801de5e:	b082      	sub	sp, #8
 801de60:	af00      	add	r7, sp, #0
 801de62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801de64:	46c0      	nop			@ (mov r8, r8)
 801de66:	46bd      	mov	sp, r7
 801de68:	b002      	add	sp, #8
 801de6a:	bd80      	pop	{r7, pc}

0801de6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801de6c:	b580      	push	{r7, lr}
 801de6e:	b082      	sub	sp, #8
 801de70:	af00      	add	r7, sp, #0
 801de72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801de74:	46c0      	nop			@ (mov r8, r8)
 801de76:	46bd      	mov	sp, r7
 801de78:	b002      	add	sp, #8
 801de7a:	bd80      	pop	{r7, pc}

0801de7c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801de7c:	b580      	push	{r7, lr}
 801de7e:	b082      	sub	sp, #8
 801de80:	af00      	add	r7, sp, #0
 801de82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801de84:	46c0      	nop			@ (mov r8, r8)
 801de86:	46bd      	mov	sp, r7
 801de88:	b002      	add	sp, #8
 801de8a:	bd80      	pop	{r7, pc}

0801de8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801de8c:	b580      	push	{r7, lr}
 801de8e:	b082      	sub	sp, #8
 801de90:	af00      	add	r7, sp, #0
 801de92:	6078      	str	r0, [r7, #4]
 801de94:	000a      	movs	r2, r1
 801de96:	1cbb      	adds	r3, r7, #2
 801de98:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801de9a:	46c0      	nop			@ (mov r8, r8)
 801de9c:	46bd      	mov	sp, r7
 801de9e:	b002      	add	sp, #8
 801dea0:	bd80      	pop	{r7, pc}
	...

0801dea4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801dea4:	b580      	push	{r7, lr}
 801dea6:	b082      	sub	sp, #8
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	2188      	movs	r1, #136	@ 0x88
 801deb0:	4a14      	ldr	r2, [pc, #80]	@ (801df04 <UART_InitCallbacksToDefault+0x60>)
 801deb2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	218c      	movs	r1, #140	@ 0x8c
 801deb8:	4a13      	ldr	r2, [pc, #76]	@ (801df08 <UART_InitCallbacksToDefault+0x64>)
 801deba:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	2190      	movs	r1, #144	@ 0x90
 801dec0:	4a12      	ldr	r2, [pc, #72]	@ (801df0c <UART_InitCallbacksToDefault+0x68>)
 801dec2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	2194      	movs	r1, #148	@ 0x94
 801dec8:	4a11      	ldr	r2, [pc, #68]	@ (801df10 <UART_InitCallbacksToDefault+0x6c>)
 801deca:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	2198      	movs	r1, #152	@ 0x98
 801ded0:	4a10      	ldr	r2, [pc, #64]	@ (801df14 <UART_InitCallbacksToDefault+0x70>)
 801ded2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	219c      	movs	r1, #156	@ 0x9c
 801ded8:	4a0f      	ldr	r2, [pc, #60]	@ (801df18 <UART_InitCallbacksToDefault+0x74>)
 801deda:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	21a0      	movs	r1, #160	@ 0xa0
 801dee0:	4a0e      	ldr	r2, [pc, #56]	@ (801df1c <UART_InitCallbacksToDefault+0x78>)
 801dee2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	21a4      	movs	r1, #164	@ 0xa4
 801dee8:	4a0d      	ldr	r2, [pc, #52]	@ (801df20 <UART_InitCallbacksToDefault+0x7c>)
 801deea:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	21a8      	movs	r1, #168	@ 0xa8
 801def0:	4a0c      	ldr	r2, [pc, #48]	@ (801df24 <UART_InitCallbacksToDefault+0x80>)
 801def2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	21ac      	movs	r1, #172	@ 0xac
 801def8:	4a0b      	ldr	r2, [pc, #44]	@ (801df28 <UART_InitCallbacksToDefault+0x84>)
 801defa:	505a      	str	r2, [r3, r1]

}
 801defc:	46c0      	nop			@ (mov r8, r8)
 801defe:	46bd      	mov	sp, r7
 801df00:	b002      	add	sp, #8
 801df02:	bd80      	pop	{r7, pc}
 801df04:	0801de3d 	.word	0x0801de3d
 801df08:	0801de2d 	.word	0x0801de2d
 801df0c:	0801de4d 	.word	0x0801de4d
 801df10:	0800d315 	.word	0x0800d315
 801df14:	080051a5 	.word	0x080051a5
 801df18:	0801de5d 	.word	0x0801de5d
 801df1c:	0801de6d 	.word	0x0801de6d
 801df20:	0801de7d 	.word	0x0801de7d
 801df24:	0801f2c1 	.word	0x0801f2c1
 801df28:	0801de8d 	.word	0x0801de8d

0801df2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801df2c:	b5b0      	push	{r4, r5, r7, lr}
 801df2e:	b08e      	sub	sp, #56	@ 0x38
 801df30:	af00      	add	r7, sp, #0
 801df32:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801df34:	231a      	movs	r3, #26
 801df36:	2218      	movs	r2, #24
 801df38:	189b      	adds	r3, r3, r2
 801df3a:	19db      	adds	r3, r3, r7
 801df3c:	2200      	movs	r2, #0
 801df3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801df40:	69fb      	ldr	r3, [r7, #28]
 801df42:	689a      	ldr	r2, [r3, #8]
 801df44:	69fb      	ldr	r3, [r7, #28]
 801df46:	691b      	ldr	r3, [r3, #16]
 801df48:	431a      	orrs	r2, r3
 801df4a:	69fb      	ldr	r3, [r7, #28]
 801df4c:	695b      	ldr	r3, [r3, #20]
 801df4e:	431a      	orrs	r2, r3
 801df50:	69fb      	ldr	r3, [r7, #28]
 801df52:	69db      	ldr	r3, [r3, #28]
 801df54:	4313      	orrs	r3, r2
 801df56:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801df58:	69fb      	ldr	r3, [r7, #28]
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	4ac3      	ldr	r2, [pc, #780]	@ (801e26c <UART_SetConfig+0x340>)
 801df60:	4013      	ands	r3, r2
 801df62:	0019      	movs	r1, r3
 801df64:	69fb      	ldr	r3, [r7, #28]
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df6a:	430a      	orrs	r2, r1
 801df6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801df6e:	69fb      	ldr	r3, [r7, #28]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	685b      	ldr	r3, [r3, #4]
 801df74:	4abe      	ldr	r2, [pc, #760]	@ (801e270 <UART_SetConfig+0x344>)
 801df76:	4013      	ands	r3, r2
 801df78:	0019      	movs	r1, r3
 801df7a:	69fb      	ldr	r3, [r7, #28]
 801df7c:	68da      	ldr	r2, [r3, #12]
 801df7e:	69fb      	ldr	r3, [r7, #28]
 801df80:	681b      	ldr	r3, [r3, #0]
 801df82:	430a      	orrs	r2, r1
 801df84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801df86:	69fb      	ldr	r3, [r7, #28]
 801df88:	699b      	ldr	r3, [r3, #24]
 801df8a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801df8c:	69fb      	ldr	r3, [r7, #28]
 801df8e:	681b      	ldr	r3, [r3, #0]
 801df90:	4ab8      	ldr	r2, [pc, #736]	@ (801e274 <UART_SetConfig+0x348>)
 801df92:	4293      	cmp	r3, r2
 801df94:	d004      	beq.n	801dfa0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801df96:	69fb      	ldr	r3, [r7, #28]
 801df98:	6a1b      	ldr	r3, [r3, #32]
 801df9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df9c:	4313      	orrs	r3, r2
 801df9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801dfa0:	69fb      	ldr	r3, [r7, #28]
 801dfa2:	681b      	ldr	r3, [r3, #0]
 801dfa4:	689b      	ldr	r3, [r3, #8]
 801dfa6:	4ab4      	ldr	r2, [pc, #720]	@ (801e278 <UART_SetConfig+0x34c>)
 801dfa8:	4013      	ands	r3, r2
 801dfaa:	0019      	movs	r1, r3
 801dfac:	69fb      	ldr	r3, [r7, #28]
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dfb2:	430a      	orrs	r2, r1
 801dfb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dfb6:	69fb      	ldr	r3, [r7, #28]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	4ab0      	ldr	r2, [pc, #704]	@ (801e27c <UART_SetConfig+0x350>)
 801dfbc:	4293      	cmp	r3, r2
 801dfbe:	d131      	bne.n	801e024 <UART_SetConfig+0xf8>
 801dfc0:	4baf      	ldr	r3, [pc, #700]	@ (801e280 <UART_SetConfig+0x354>)
 801dfc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dfc4:	2203      	movs	r2, #3
 801dfc6:	4013      	ands	r3, r2
 801dfc8:	2b03      	cmp	r3, #3
 801dfca:	d01d      	beq.n	801e008 <UART_SetConfig+0xdc>
 801dfcc:	d823      	bhi.n	801e016 <UART_SetConfig+0xea>
 801dfce:	2b02      	cmp	r3, #2
 801dfd0:	d00c      	beq.n	801dfec <UART_SetConfig+0xc0>
 801dfd2:	d820      	bhi.n	801e016 <UART_SetConfig+0xea>
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d002      	beq.n	801dfde <UART_SetConfig+0xb2>
 801dfd8:	2b01      	cmp	r3, #1
 801dfda:	d00e      	beq.n	801dffa <UART_SetConfig+0xce>
 801dfdc:	e01b      	b.n	801e016 <UART_SetConfig+0xea>
 801dfde:	231b      	movs	r3, #27
 801dfe0:	2218      	movs	r2, #24
 801dfe2:	189b      	adds	r3, r3, r2
 801dfe4:	19db      	adds	r3, r3, r7
 801dfe6:	2201      	movs	r2, #1
 801dfe8:	701a      	strb	r2, [r3, #0]
 801dfea:	e0b4      	b.n	801e156 <UART_SetConfig+0x22a>
 801dfec:	231b      	movs	r3, #27
 801dfee:	2218      	movs	r2, #24
 801dff0:	189b      	adds	r3, r3, r2
 801dff2:	19db      	adds	r3, r3, r7
 801dff4:	2202      	movs	r2, #2
 801dff6:	701a      	strb	r2, [r3, #0]
 801dff8:	e0ad      	b.n	801e156 <UART_SetConfig+0x22a>
 801dffa:	231b      	movs	r3, #27
 801dffc:	2218      	movs	r2, #24
 801dffe:	189b      	adds	r3, r3, r2
 801e000:	19db      	adds	r3, r3, r7
 801e002:	2204      	movs	r2, #4
 801e004:	701a      	strb	r2, [r3, #0]
 801e006:	e0a6      	b.n	801e156 <UART_SetConfig+0x22a>
 801e008:	231b      	movs	r3, #27
 801e00a:	2218      	movs	r2, #24
 801e00c:	189b      	adds	r3, r3, r2
 801e00e:	19db      	adds	r3, r3, r7
 801e010:	2208      	movs	r2, #8
 801e012:	701a      	strb	r2, [r3, #0]
 801e014:	e09f      	b.n	801e156 <UART_SetConfig+0x22a>
 801e016:	231b      	movs	r3, #27
 801e018:	2218      	movs	r2, #24
 801e01a:	189b      	adds	r3, r3, r2
 801e01c:	19db      	adds	r3, r3, r7
 801e01e:	2210      	movs	r2, #16
 801e020:	701a      	strb	r2, [r3, #0]
 801e022:	e098      	b.n	801e156 <UART_SetConfig+0x22a>
 801e024:	69fb      	ldr	r3, [r7, #28]
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	4a96      	ldr	r2, [pc, #600]	@ (801e284 <UART_SetConfig+0x358>)
 801e02a:	4293      	cmp	r3, r2
 801e02c:	d131      	bne.n	801e092 <UART_SetConfig+0x166>
 801e02e:	4b94      	ldr	r3, [pc, #592]	@ (801e280 <UART_SetConfig+0x354>)
 801e030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e032:	220c      	movs	r2, #12
 801e034:	4013      	ands	r3, r2
 801e036:	2b0c      	cmp	r3, #12
 801e038:	d01d      	beq.n	801e076 <UART_SetConfig+0x14a>
 801e03a:	d823      	bhi.n	801e084 <UART_SetConfig+0x158>
 801e03c:	2b08      	cmp	r3, #8
 801e03e:	d00c      	beq.n	801e05a <UART_SetConfig+0x12e>
 801e040:	d820      	bhi.n	801e084 <UART_SetConfig+0x158>
 801e042:	2b00      	cmp	r3, #0
 801e044:	d002      	beq.n	801e04c <UART_SetConfig+0x120>
 801e046:	2b04      	cmp	r3, #4
 801e048:	d00e      	beq.n	801e068 <UART_SetConfig+0x13c>
 801e04a:	e01b      	b.n	801e084 <UART_SetConfig+0x158>
 801e04c:	231b      	movs	r3, #27
 801e04e:	2218      	movs	r2, #24
 801e050:	189b      	adds	r3, r3, r2
 801e052:	19db      	adds	r3, r3, r7
 801e054:	2200      	movs	r2, #0
 801e056:	701a      	strb	r2, [r3, #0]
 801e058:	e07d      	b.n	801e156 <UART_SetConfig+0x22a>
 801e05a:	231b      	movs	r3, #27
 801e05c:	2218      	movs	r2, #24
 801e05e:	189b      	adds	r3, r3, r2
 801e060:	19db      	adds	r3, r3, r7
 801e062:	2202      	movs	r2, #2
 801e064:	701a      	strb	r2, [r3, #0]
 801e066:	e076      	b.n	801e156 <UART_SetConfig+0x22a>
 801e068:	231b      	movs	r3, #27
 801e06a:	2218      	movs	r2, #24
 801e06c:	189b      	adds	r3, r3, r2
 801e06e:	19db      	adds	r3, r3, r7
 801e070:	2204      	movs	r2, #4
 801e072:	701a      	strb	r2, [r3, #0]
 801e074:	e06f      	b.n	801e156 <UART_SetConfig+0x22a>
 801e076:	231b      	movs	r3, #27
 801e078:	2218      	movs	r2, #24
 801e07a:	189b      	adds	r3, r3, r2
 801e07c:	19db      	adds	r3, r3, r7
 801e07e:	2208      	movs	r2, #8
 801e080:	701a      	strb	r2, [r3, #0]
 801e082:	e068      	b.n	801e156 <UART_SetConfig+0x22a>
 801e084:	231b      	movs	r3, #27
 801e086:	2218      	movs	r2, #24
 801e088:	189b      	adds	r3, r3, r2
 801e08a:	19db      	adds	r3, r3, r7
 801e08c:	2210      	movs	r2, #16
 801e08e:	701a      	strb	r2, [r3, #0]
 801e090:	e061      	b.n	801e156 <UART_SetConfig+0x22a>
 801e092:	69fb      	ldr	r3, [r7, #28]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	4a7c      	ldr	r2, [pc, #496]	@ (801e288 <UART_SetConfig+0x35c>)
 801e098:	4293      	cmp	r3, r2
 801e09a:	d106      	bne.n	801e0aa <UART_SetConfig+0x17e>
 801e09c:	231b      	movs	r3, #27
 801e09e:	2218      	movs	r2, #24
 801e0a0:	189b      	adds	r3, r3, r2
 801e0a2:	19db      	adds	r3, r3, r7
 801e0a4:	2200      	movs	r2, #0
 801e0a6:	701a      	strb	r2, [r3, #0]
 801e0a8:	e055      	b.n	801e156 <UART_SetConfig+0x22a>
 801e0aa:	69fb      	ldr	r3, [r7, #28]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	4a77      	ldr	r2, [pc, #476]	@ (801e28c <UART_SetConfig+0x360>)
 801e0b0:	4293      	cmp	r3, r2
 801e0b2:	d106      	bne.n	801e0c2 <UART_SetConfig+0x196>
 801e0b4:	231b      	movs	r3, #27
 801e0b6:	2218      	movs	r2, #24
 801e0b8:	189b      	adds	r3, r3, r2
 801e0ba:	19db      	adds	r3, r3, r7
 801e0bc:	2200      	movs	r2, #0
 801e0be:	701a      	strb	r2, [r3, #0]
 801e0c0:	e049      	b.n	801e156 <UART_SetConfig+0x22a>
 801e0c2:	69fb      	ldr	r3, [r7, #28]
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	4a6b      	ldr	r2, [pc, #428]	@ (801e274 <UART_SetConfig+0x348>)
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	d13e      	bne.n	801e14a <UART_SetConfig+0x21e>
 801e0cc:	4b6c      	ldr	r3, [pc, #432]	@ (801e280 <UART_SetConfig+0x354>)
 801e0ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e0d0:	23c0      	movs	r3, #192	@ 0xc0
 801e0d2:	011b      	lsls	r3, r3, #4
 801e0d4:	4013      	ands	r3, r2
 801e0d6:	22c0      	movs	r2, #192	@ 0xc0
 801e0d8:	0112      	lsls	r2, r2, #4
 801e0da:	4293      	cmp	r3, r2
 801e0dc:	d027      	beq.n	801e12e <UART_SetConfig+0x202>
 801e0de:	22c0      	movs	r2, #192	@ 0xc0
 801e0e0:	0112      	lsls	r2, r2, #4
 801e0e2:	4293      	cmp	r3, r2
 801e0e4:	d82a      	bhi.n	801e13c <UART_SetConfig+0x210>
 801e0e6:	2280      	movs	r2, #128	@ 0x80
 801e0e8:	0112      	lsls	r2, r2, #4
 801e0ea:	4293      	cmp	r3, r2
 801e0ec:	d011      	beq.n	801e112 <UART_SetConfig+0x1e6>
 801e0ee:	2280      	movs	r2, #128	@ 0x80
 801e0f0:	0112      	lsls	r2, r2, #4
 801e0f2:	4293      	cmp	r3, r2
 801e0f4:	d822      	bhi.n	801e13c <UART_SetConfig+0x210>
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d004      	beq.n	801e104 <UART_SetConfig+0x1d8>
 801e0fa:	2280      	movs	r2, #128	@ 0x80
 801e0fc:	00d2      	lsls	r2, r2, #3
 801e0fe:	4293      	cmp	r3, r2
 801e100:	d00e      	beq.n	801e120 <UART_SetConfig+0x1f4>
 801e102:	e01b      	b.n	801e13c <UART_SetConfig+0x210>
 801e104:	231b      	movs	r3, #27
 801e106:	2218      	movs	r2, #24
 801e108:	189b      	adds	r3, r3, r2
 801e10a:	19db      	adds	r3, r3, r7
 801e10c:	2200      	movs	r2, #0
 801e10e:	701a      	strb	r2, [r3, #0]
 801e110:	e021      	b.n	801e156 <UART_SetConfig+0x22a>
 801e112:	231b      	movs	r3, #27
 801e114:	2218      	movs	r2, #24
 801e116:	189b      	adds	r3, r3, r2
 801e118:	19db      	adds	r3, r3, r7
 801e11a:	2202      	movs	r2, #2
 801e11c:	701a      	strb	r2, [r3, #0]
 801e11e:	e01a      	b.n	801e156 <UART_SetConfig+0x22a>
 801e120:	231b      	movs	r3, #27
 801e122:	2218      	movs	r2, #24
 801e124:	189b      	adds	r3, r3, r2
 801e126:	19db      	adds	r3, r3, r7
 801e128:	2204      	movs	r2, #4
 801e12a:	701a      	strb	r2, [r3, #0]
 801e12c:	e013      	b.n	801e156 <UART_SetConfig+0x22a>
 801e12e:	231b      	movs	r3, #27
 801e130:	2218      	movs	r2, #24
 801e132:	189b      	adds	r3, r3, r2
 801e134:	19db      	adds	r3, r3, r7
 801e136:	2208      	movs	r2, #8
 801e138:	701a      	strb	r2, [r3, #0]
 801e13a:	e00c      	b.n	801e156 <UART_SetConfig+0x22a>
 801e13c:	231b      	movs	r3, #27
 801e13e:	2218      	movs	r2, #24
 801e140:	189b      	adds	r3, r3, r2
 801e142:	19db      	adds	r3, r3, r7
 801e144:	2210      	movs	r2, #16
 801e146:	701a      	strb	r2, [r3, #0]
 801e148:	e005      	b.n	801e156 <UART_SetConfig+0x22a>
 801e14a:	231b      	movs	r3, #27
 801e14c:	2218      	movs	r2, #24
 801e14e:	189b      	adds	r3, r3, r2
 801e150:	19db      	adds	r3, r3, r7
 801e152:	2210      	movs	r2, #16
 801e154:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e156:	69fb      	ldr	r3, [r7, #28]
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	4a46      	ldr	r2, [pc, #280]	@ (801e274 <UART_SetConfig+0x348>)
 801e15c:	4293      	cmp	r3, r2
 801e15e:	d000      	beq.n	801e162 <UART_SetConfig+0x236>
 801e160:	e09a      	b.n	801e298 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e162:	231b      	movs	r3, #27
 801e164:	2218      	movs	r2, #24
 801e166:	189b      	adds	r3, r3, r2
 801e168:	19db      	adds	r3, r3, r7
 801e16a:	781b      	ldrb	r3, [r3, #0]
 801e16c:	2b08      	cmp	r3, #8
 801e16e:	d01d      	beq.n	801e1ac <UART_SetConfig+0x280>
 801e170:	dc20      	bgt.n	801e1b4 <UART_SetConfig+0x288>
 801e172:	2b04      	cmp	r3, #4
 801e174:	d015      	beq.n	801e1a2 <UART_SetConfig+0x276>
 801e176:	dc1d      	bgt.n	801e1b4 <UART_SetConfig+0x288>
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d002      	beq.n	801e182 <UART_SetConfig+0x256>
 801e17c:	2b02      	cmp	r3, #2
 801e17e:	d005      	beq.n	801e18c <UART_SetConfig+0x260>
 801e180:	e018      	b.n	801e1b4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e182:	f7fd fe2d 	bl	801bde0 <HAL_RCC_GetPCLK1Freq>
 801e186:	0003      	movs	r3, r0
 801e188:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e18a:	e01c      	b.n	801e1c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e18c:	4b3c      	ldr	r3, [pc, #240]	@ (801e280 <UART_SetConfig+0x354>)
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	2210      	movs	r2, #16
 801e192:	4013      	ands	r3, r2
 801e194:	d002      	beq.n	801e19c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e196:	4b3e      	ldr	r3, [pc, #248]	@ (801e290 <UART_SetConfig+0x364>)
 801e198:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e19a:	e014      	b.n	801e1c6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e19c:	4b3d      	ldr	r3, [pc, #244]	@ (801e294 <UART_SetConfig+0x368>)
 801e19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e1a0:	e011      	b.n	801e1c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e1a2:	f7fd fd6d 	bl	801bc80 <HAL_RCC_GetSysClockFreq>
 801e1a6:	0003      	movs	r3, r0
 801e1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e1aa:	e00c      	b.n	801e1c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e1ac:	2380      	movs	r3, #128	@ 0x80
 801e1ae:	021b      	lsls	r3, r3, #8
 801e1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e1b2:	e008      	b.n	801e1c6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e1b4:	2300      	movs	r3, #0
 801e1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e1b8:	231a      	movs	r3, #26
 801e1ba:	2218      	movs	r2, #24
 801e1bc:	189b      	adds	r3, r3, r2
 801e1be:	19db      	adds	r3, r3, r7
 801e1c0:	2201      	movs	r2, #1
 801e1c2:	701a      	strb	r2, [r3, #0]
        break;
 801e1c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d100      	bne.n	801e1ce <UART_SetConfig+0x2a2>
 801e1cc:	e133      	b.n	801e436 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e1ce:	69fb      	ldr	r3, [r7, #28]
 801e1d0:	685a      	ldr	r2, [r3, #4]
 801e1d2:	0013      	movs	r3, r2
 801e1d4:	005b      	lsls	r3, r3, #1
 801e1d6:	189b      	adds	r3, r3, r2
 801e1d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e1da:	429a      	cmp	r2, r3
 801e1dc:	d305      	bcc.n	801e1ea <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e1de:	69fb      	ldr	r3, [r7, #28]
 801e1e0:	685b      	ldr	r3, [r3, #4]
 801e1e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e1e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e1e6:	429a      	cmp	r2, r3
 801e1e8:	d906      	bls.n	801e1f8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e1ea:	231a      	movs	r3, #26
 801e1ec:	2218      	movs	r2, #24
 801e1ee:	189b      	adds	r3, r3, r2
 801e1f0:	19db      	adds	r3, r3, r7
 801e1f2:	2201      	movs	r2, #1
 801e1f4:	701a      	strb	r2, [r3, #0]
 801e1f6:	e11e      	b.n	801e436 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1fa:	613b      	str	r3, [r7, #16]
 801e1fc:	2300      	movs	r3, #0
 801e1fe:	617b      	str	r3, [r7, #20]
 801e200:	6939      	ldr	r1, [r7, #16]
 801e202:	697a      	ldr	r2, [r7, #20]
 801e204:	000b      	movs	r3, r1
 801e206:	0e1b      	lsrs	r3, r3, #24
 801e208:	0010      	movs	r0, r2
 801e20a:	0205      	lsls	r5, r0, #8
 801e20c:	431d      	orrs	r5, r3
 801e20e:	000b      	movs	r3, r1
 801e210:	021c      	lsls	r4, r3, #8
 801e212:	69fb      	ldr	r3, [r7, #28]
 801e214:	685b      	ldr	r3, [r3, #4]
 801e216:	085b      	lsrs	r3, r3, #1
 801e218:	60bb      	str	r3, [r7, #8]
 801e21a:	2300      	movs	r3, #0
 801e21c:	60fb      	str	r3, [r7, #12]
 801e21e:	68b8      	ldr	r0, [r7, #8]
 801e220:	68f9      	ldr	r1, [r7, #12]
 801e222:	1900      	adds	r0, r0, r4
 801e224:	4169      	adcs	r1, r5
 801e226:	69fb      	ldr	r3, [r7, #28]
 801e228:	685b      	ldr	r3, [r3, #4]
 801e22a:	603b      	str	r3, [r7, #0]
 801e22c:	2300      	movs	r3, #0
 801e22e:	607b      	str	r3, [r7, #4]
 801e230:	683a      	ldr	r2, [r7, #0]
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	f7e2 f9a4 	bl	8000580 <__aeabi_uldivmod>
 801e238:	0002      	movs	r2, r0
 801e23a:	000b      	movs	r3, r1
 801e23c:	0013      	movs	r3, r2
 801e23e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e242:	23c0      	movs	r3, #192	@ 0xc0
 801e244:	009b      	lsls	r3, r3, #2
 801e246:	429a      	cmp	r2, r3
 801e248:	d309      	bcc.n	801e25e <UART_SetConfig+0x332>
 801e24a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e24c:	2380      	movs	r3, #128	@ 0x80
 801e24e:	035b      	lsls	r3, r3, #13
 801e250:	429a      	cmp	r2, r3
 801e252:	d204      	bcs.n	801e25e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e254:	69fb      	ldr	r3, [r7, #28]
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e25a:	60da      	str	r2, [r3, #12]
 801e25c:	e0eb      	b.n	801e436 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e25e:	231a      	movs	r3, #26
 801e260:	2218      	movs	r2, #24
 801e262:	189b      	adds	r3, r3, r2
 801e264:	19db      	adds	r3, r3, r7
 801e266:	2201      	movs	r2, #1
 801e268:	701a      	strb	r2, [r3, #0]
 801e26a:	e0e4      	b.n	801e436 <UART_SetConfig+0x50a>
 801e26c:	efff69f3 	.word	0xefff69f3
 801e270:	ffffcfff 	.word	0xffffcfff
 801e274:	40004800 	.word	0x40004800
 801e278:	fffff4ff 	.word	0xfffff4ff
 801e27c:	40013800 	.word	0x40013800
 801e280:	40021000 	.word	0x40021000
 801e284:	40004400 	.word	0x40004400
 801e288:	40004c00 	.word	0x40004c00
 801e28c:	40005000 	.word	0x40005000
 801e290:	003d0900 	.word	0x003d0900
 801e294:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e298:	69fb      	ldr	r3, [r7, #28]
 801e29a:	69da      	ldr	r2, [r3, #28]
 801e29c:	2380      	movs	r3, #128	@ 0x80
 801e29e:	021b      	lsls	r3, r3, #8
 801e2a0:	429a      	cmp	r2, r3
 801e2a2:	d000      	beq.n	801e2a6 <UART_SetConfig+0x37a>
 801e2a4:	e070      	b.n	801e388 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e2a6:	231b      	movs	r3, #27
 801e2a8:	2218      	movs	r2, #24
 801e2aa:	189b      	adds	r3, r3, r2
 801e2ac:	19db      	adds	r3, r3, r7
 801e2ae:	781b      	ldrb	r3, [r3, #0]
 801e2b0:	2b08      	cmp	r3, #8
 801e2b2:	d822      	bhi.n	801e2fa <UART_SetConfig+0x3ce>
 801e2b4:	009a      	lsls	r2, r3, #2
 801e2b6:	4b67      	ldr	r3, [pc, #412]	@ (801e454 <UART_SetConfig+0x528>)
 801e2b8:	18d3      	adds	r3, r2, r3
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e2be:	f7fd fd8f 	bl	801bde0 <HAL_RCC_GetPCLK1Freq>
 801e2c2:	0003      	movs	r3, r0
 801e2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2c6:	e021      	b.n	801e30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e2c8:	f7fd fda0 	bl	801be0c <HAL_RCC_GetPCLK2Freq>
 801e2cc:	0003      	movs	r3, r0
 801e2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2d0:	e01c      	b.n	801e30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e2d2:	4b61      	ldr	r3, [pc, #388]	@ (801e458 <UART_SetConfig+0x52c>)
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	2210      	movs	r2, #16
 801e2d8:	4013      	ands	r3, r2
 801e2da:	d002      	beq.n	801e2e2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e2dc:	4b5f      	ldr	r3, [pc, #380]	@ (801e45c <UART_SetConfig+0x530>)
 801e2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e2e0:	e014      	b.n	801e30c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e2e2:	4b5f      	ldr	r3, [pc, #380]	@ (801e460 <UART_SetConfig+0x534>)
 801e2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2e6:	e011      	b.n	801e30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e2e8:	f7fd fcca 	bl	801bc80 <HAL_RCC_GetSysClockFreq>
 801e2ec:	0003      	movs	r3, r0
 801e2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2f0:	e00c      	b.n	801e30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e2f2:	2380      	movs	r3, #128	@ 0x80
 801e2f4:	021b      	lsls	r3, r3, #8
 801e2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2f8:	e008      	b.n	801e30c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e2fe:	231a      	movs	r3, #26
 801e300:	2218      	movs	r2, #24
 801e302:	189b      	adds	r3, r3, r2
 801e304:	19db      	adds	r3, r3, r7
 801e306:	2201      	movs	r2, #1
 801e308:	701a      	strb	r2, [r3, #0]
        break;
 801e30a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d100      	bne.n	801e314 <UART_SetConfig+0x3e8>
 801e312:	e090      	b.n	801e436 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e316:	005a      	lsls	r2, r3, #1
 801e318:	69fb      	ldr	r3, [r7, #28]
 801e31a:	685b      	ldr	r3, [r3, #4]
 801e31c:	085b      	lsrs	r3, r3, #1
 801e31e:	18d2      	adds	r2, r2, r3
 801e320:	69fb      	ldr	r3, [r7, #28]
 801e322:	685b      	ldr	r3, [r3, #4]
 801e324:	0019      	movs	r1, r3
 801e326:	0010      	movs	r0, r2
 801e328:	f7e1 ff3c 	bl	80001a4 <__udivsi3>
 801e32c:	0003      	movs	r3, r0
 801e32e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e332:	2b0f      	cmp	r3, #15
 801e334:	d921      	bls.n	801e37a <UART_SetConfig+0x44e>
 801e336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e338:	2380      	movs	r3, #128	@ 0x80
 801e33a:	025b      	lsls	r3, r3, #9
 801e33c:	429a      	cmp	r2, r3
 801e33e:	d21c      	bcs.n	801e37a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e342:	b29a      	uxth	r2, r3
 801e344:	200e      	movs	r0, #14
 801e346:	2418      	movs	r4, #24
 801e348:	1903      	adds	r3, r0, r4
 801e34a:	19db      	adds	r3, r3, r7
 801e34c:	210f      	movs	r1, #15
 801e34e:	438a      	bics	r2, r1
 801e350:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e354:	085b      	lsrs	r3, r3, #1
 801e356:	b29b      	uxth	r3, r3
 801e358:	2207      	movs	r2, #7
 801e35a:	4013      	ands	r3, r2
 801e35c:	b299      	uxth	r1, r3
 801e35e:	1903      	adds	r3, r0, r4
 801e360:	19db      	adds	r3, r3, r7
 801e362:	1902      	adds	r2, r0, r4
 801e364:	19d2      	adds	r2, r2, r7
 801e366:	8812      	ldrh	r2, [r2, #0]
 801e368:	430a      	orrs	r2, r1
 801e36a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e36c:	69fb      	ldr	r3, [r7, #28]
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	1902      	adds	r2, r0, r4
 801e372:	19d2      	adds	r2, r2, r7
 801e374:	8812      	ldrh	r2, [r2, #0]
 801e376:	60da      	str	r2, [r3, #12]
 801e378:	e05d      	b.n	801e436 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e37a:	231a      	movs	r3, #26
 801e37c:	2218      	movs	r2, #24
 801e37e:	189b      	adds	r3, r3, r2
 801e380:	19db      	adds	r3, r3, r7
 801e382:	2201      	movs	r2, #1
 801e384:	701a      	strb	r2, [r3, #0]
 801e386:	e056      	b.n	801e436 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e388:	231b      	movs	r3, #27
 801e38a:	2218      	movs	r2, #24
 801e38c:	189b      	adds	r3, r3, r2
 801e38e:	19db      	adds	r3, r3, r7
 801e390:	781b      	ldrb	r3, [r3, #0]
 801e392:	2b08      	cmp	r3, #8
 801e394:	d822      	bhi.n	801e3dc <UART_SetConfig+0x4b0>
 801e396:	009a      	lsls	r2, r3, #2
 801e398:	4b32      	ldr	r3, [pc, #200]	@ (801e464 <UART_SetConfig+0x538>)
 801e39a:	18d3      	adds	r3, r2, r3
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e3a0:	f7fd fd1e 	bl	801bde0 <HAL_RCC_GetPCLK1Freq>
 801e3a4:	0003      	movs	r3, r0
 801e3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3a8:	e021      	b.n	801e3ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e3aa:	f7fd fd2f 	bl	801be0c <HAL_RCC_GetPCLK2Freq>
 801e3ae:	0003      	movs	r3, r0
 801e3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3b2:	e01c      	b.n	801e3ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e3b4:	4b28      	ldr	r3, [pc, #160]	@ (801e458 <UART_SetConfig+0x52c>)
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	2210      	movs	r2, #16
 801e3ba:	4013      	ands	r3, r2
 801e3bc:	d002      	beq.n	801e3c4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e3be:	4b27      	ldr	r3, [pc, #156]	@ (801e45c <UART_SetConfig+0x530>)
 801e3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e3c2:	e014      	b.n	801e3ee <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e3c4:	4b26      	ldr	r3, [pc, #152]	@ (801e460 <UART_SetConfig+0x534>)
 801e3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3c8:	e011      	b.n	801e3ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e3ca:	f7fd fc59 	bl	801bc80 <HAL_RCC_GetSysClockFreq>
 801e3ce:	0003      	movs	r3, r0
 801e3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3d2:	e00c      	b.n	801e3ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e3d4:	2380      	movs	r3, #128	@ 0x80
 801e3d6:	021b      	lsls	r3, r3, #8
 801e3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3da:	e008      	b.n	801e3ee <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e3dc:	2300      	movs	r3, #0
 801e3de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e3e0:	231a      	movs	r3, #26
 801e3e2:	2218      	movs	r2, #24
 801e3e4:	189b      	adds	r3, r3, r2
 801e3e6:	19db      	adds	r3, r3, r7
 801e3e8:	2201      	movs	r2, #1
 801e3ea:	701a      	strb	r2, [r3, #0]
        break;
 801e3ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d020      	beq.n	801e436 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e3f4:	69fb      	ldr	r3, [r7, #28]
 801e3f6:	685b      	ldr	r3, [r3, #4]
 801e3f8:	085a      	lsrs	r2, r3, #1
 801e3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3fc:	18d2      	adds	r2, r2, r3
 801e3fe:	69fb      	ldr	r3, [r7, #28]
 801e400:	685b      	ldr	r3, [r3, #4]
 801e402:	0019      	movs	r1, r3
 801e404:	0010      	movs	r0, r2
 801e406:	f7e1 fecd 	bl	80001a4 <__udivsi3>
 801e40a:	0003      	movs	r3, r0
 801e40c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e410:	2b0f      	cmp	r3, #15
 801e412:	d90a      	bls.n	801e42a <UART_SetConfig+0x4fe>
 801e414:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e416:	2380      	movs	r3, #128	@ 0x80
 801e418:	025b      	lsls	r3, r3, #9
 801e41a:	429a      	cmp	r2, r3
 801e41c:	d205      	bcs.n	801e42a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e420:	b29a      	uxth	r2, r3
 801e422:	69fb      	ldr	r3, [r7, #28]
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	60da      	str	r2, [r3, #12]
 801e428:	e005      	b.n	801e436 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e42a:	231a      	movs	r3, #26
 801e42c:	2218      	movs	r2, #24
 801e42e:	189b      	adds	r3, r3, r2
 801e430:	19db      	adds	r3, r3, r7
 801e432:	2201      	movs	r2, #1
 801e434:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e436:	69fb      	ldr	r3, [r7, #28]
 801e438:	2200      	movs	r2, #0
 801e43a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e43c:	69fb      	ldr	r3, [r7, #28]
 801e43e:	2200      	movs	r2, #0
 801e440:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e442:	231a      	movs	r3, #26
 801e444:	2218      	movs	r2, #24
 801e446:	189b      	adds	r3, r3, r2
 801e448:	19db      	adds	r3, r3, r7
 801e44a:	781b      	ldrb	r3, [r3, #0]
}
 801e44c:	0018      	movs	r0, r3
 801e44e:	46bd      	mov	sp, r7
 801e450:	b00e      	add	sp, #56	@ 0x38
 801e452:	bdb0      	pop	{r4, r5, r7, pc}
 801e454:	0802e56c 	.word	0x0802e56c
 801e458:	40021000 	.word	0x40021000
 801e45c:	003d0900 	.word	0x003d0900
 801e460:	00f42400 	.word	0x00f42400
 801e464:	0802e590 	.word	0x0802e590

0801e468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e468:	b580      	push	{r7, lr}
 801e46a:	b082      	sub	sp, #8
 801e46c:	af00      	add	r7, sp, #0
 801e46e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e474:	2201      	movs	r2, #1
 801e476:	4013      	ands	r3, r2
 801e478:	d00b      	beq.n	801e492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	685b      	ldr	r3, [r3, #4]
 801e480:	4a4a      	ldr	r2, [pc, #296]	@ (801e5ac <UART_AdvFeatureConfig+0x144>)
 801e482:	4013      	ands	r3, r2
 801e484:	0019      	movs	r1, r3
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	430a      	orrs	r2, r1
 801e490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e496:	2202      	movs	r2, #2
 801e498:	4013      	ands	r3, r2
 801e49a:	d00b      	beq.n	801e4b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	685b      	ldr	r3, [r3, #4]
 801e4a2:	4a43      	ldr	r2, [pc, #268]	@ (801e5b0 <UART_AdvFeatureConfig+0x148>)
 801e4a4:	4013      	ands	r3, r2
 801e4a6:	0019      	movs	r1, r3
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	430a      	orrs	r2, r1
 801e4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4b8:	2204      	movs	r2, #4
 801e4ba:	4013      	ands	r3, r2
 801e4bc:	d00b      	beq.n	801e4d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	685b      	ldr	r3, [r3, #4]
 801e4c4:	4a3b      	ldr	r2, [pc, #236]	@ (801e5b4 <UART_AdvFeatureConfig+0x14c>)
 801e4c6:	4013      	ands	r3, r2
 801e4c8:	0019      	movs	r1, r3
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	430a      	orrs	r2, r1
 801e4d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4da:	2208      	movs	r2, #8
 801e4dc:	4013      	ands	r3, r2
 801e4de:	d00b      	beq.n	801e4f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	685b      	ldr	r3, [r3, #4]
 801e4e6:	4a34      	ldr	r2, [pc, #208]	@ (801e5b8 <UART_AdvFeatureConfig+0x150>)
 801e4e8:	4013      	ands	r3, r2
 801e4ea:	0019      	movs	r1, r3
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	430a      	orrs	r2, r1
 801e4f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4fc:	2210      	movs	r2, #16
 801e4fe:	4013      	ands	r3, r2
 801e500:	d00b      	beq.n	801e51a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	689b      	ldr	r3, [r3, #8]
 801e508:	4a2c      	ldr	r2, [pc, #176]	@ (801e5bc <UART_AdvFeatureConfig+0x154>)
 801e50a:	4013      	ands	r3, r2
 801e50c:	0019      	movs	r1, r3
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	430a      	orrs	r2, r1
 801e518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e51e:	2220      	movs	r2, #32
 801e520:	4013      	ands	r3, r2
 801e522:	d00b      	beq.n	801e53c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	681b      	ldr	r3, [r3, #0]
 801e528:	689b      	ldr	r3, [r3, #8]
 801e52a:	4a25      	ldr	r2, [pc, #148]	@ (801e5c0 <UART_AdvFeatureConfig+0x158>)
 801e52c:	4013      	ands	r3, r2
 801e52e:	0019      	movs	r1, r3
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	430a      	orrs	r2, r1
 801e53a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e540:	2240      	movs	r2, #64	@ 0x40
 801e542:	4013      	ands	r3, r2
 801e544:	d01d      	beq.n	801e582 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	685b      	ldr	r3, [r3, #4]
 801e54c:	4a1d      	ldr	r2, [pc, #116]	@ (801e5c4 <UART_AdvFeatureConfig+0x15c>)
 801e54e:	4013      	ands	r3, r2
 801e550:	0019      	movs	r1, r3
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	681b      	ldr	r3, [r3, #0]
 801e55a:	430a      	orrs	r2, r1
 801e55c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e562:	2380      	movs	r3, #128	@ 0x80
 801e564:	035b      	lsls	r3, r3, #13
 801e566:	429a      	cmp	r2, r3
 801e568:	d10b      	bne.n	801e582 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	685b      	ldr	r3, [r3, #4]
 801e570:	4a15      	ldr	r2, [pc, #84]	@ (801e5c8 <UART_AdvFeatureConfig+0x160>)
 801e572:	4013      	ands	r3, r2
 801e574:	0019      	movs	r1, r3
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	430a      	orrs	r2, r1
 801e580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e586:	2280      	movs	r2, #128	@ 0x80
 801e588:	4013      	ands	r3, r2
 801e58a:	d00b      	beq.n	801e5a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	685b      	ldr	r3, [r3, #4]
 801e592:	4a0e      	ldr	r2, [pc, #56]	@ (801e5cc <UART_AdvFeatureConfig+0x164>)
 801e594:	4013      	ands	r3, r2
 801e596:	0019      	movs	r1, r3
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	430a      	orrs	r2, r1
 801e5a2:	605a      	str	r2, [r3, #4]
  }
}
 801e5a4:	46c0      	nop			@ (mov r8, r8)
 801e5a6:	46bd      	mov	sp, r7
 801e5a8:	b002      	add	sp, #8
 801e5aa:	bd80      	pop	{r7, pc}
 801e5ac:	fffdffff 	.word	0xfffdffff
 801e5b0:	fffeffff 	.word	0xfffeffff
 801e5b4:	fffbffff 	.word	0xfffbffff
 801e5b8:	ffff7fff 	.word	0xffff7fff
 801e5bc:	ffffefff 	.word	0xffffefff
 801e5c0:	ffffdfff 	.word	0xffffdfff
 801e5c4:	ffefffff 	.word	0xffefffff
 801e5c8:	ff9fffff 	.word	0xff9fffff
 801e5cc:	fff7ffff 	.word	0xfff7ffff

0801e5d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e5d0:	b580      	push	{r7, lr}
 801e5d2:	b092      	sub	sp, #72	@ 0x48
 801e5d4:	af02      	add	r7, sp, #8
 801e5d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	2284      	movs	r2, #132	@ 0x84
 801e5dc:	2100      	movs	r1, #0
 801e5de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e5e0:	f7f6 f99a 	bl	8014918 <HAL_GetTick>
 801e5e4:	0003      	movs	r3, r0
 801e5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	2208      	movs	r2, #8
 801e5f0:	4013      	ands	r3, r2
 801e5f2:	2b08      	cmp	r3, #8
 801e5f4:	d12c      	bne.n	801e650 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5f8:	2280      	movs	r2, #128	@ 0x80
 801e5fa:	0391      	lsls	r1, r2, #14
 801e5fc:	6878      	ldr	r0, [r7, #4]
 801e5fe:	4a46      	ldr	r2, [pc, #280]	@ (801e718 <UART_CheckIdleState+0x148>)
 801e600:	9200      	str	r2, [sp, #0]
 801e602:	2200      	movs	r2, #0
 801e604:	f000 f88c 	bl	801e720 <UART_WaitOnFlagUntilTimeout>
 801e608:	1e03      	subs	r3, r0, #0
 801e60a:	d021      	beq.n	801e650 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e60c:	f3ef 8310 	mrs	r3, PRIMASK
 801e610:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e614:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e616:	2301      	movs	r3, #1
 801e618:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e61c:	f383 8810 	msr	PRIMASK, r3
}
 801e620:	46c0      	nop			@ (mov r8, r8)
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	681a      	ldr	r2, [r3, #0]
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	2180      	movs	r1, #128	@ 0x80
 801e62e:	438a      	bics	r2, r1
 801e630:	601a      	str	r2, [r3, #0]
 801e632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e638:	f383 8810 	msr	PRIMASK, r3
}
 801e63c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	2220      	movs	r2, #32
 801e642:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	2278      	movs	r2, #120	@ 0x78
 801e648:	2100      	movs	r1, #0
 801e64a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e64c:	2303      	movs	r3, #3
 801e64e:	e05f      	b.n	801e710 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	2204      	movs	r2, #4
 801e658:	4013      	ands	r3, r2
 801e65a:	2b04      	cmp	r3, #4
 801e65c:	d146      	bne.n	801e6ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e660:	2280      	movs	r2, #128	@ 0x80
 801e662:	03d1      	lsls	r1, r2, #15
 801e664:	6878      	ldr	r0, [r7, #4]
 801e666:	4a2c      	ldr	r2, [pc, #176]	@ (801e718 <UART_CheckIdleState+0x148>)
 801e668:	9200      	str	r2, [sp, #0]
 801e66a:	2200      	movs	r2, #0
 801e66c:	f000 f858 	bl	801e720 <UART_WaitOnFlagUntilTimeout>
 801e670:	1e03      	subs	r3, r0, #0
 801e672:	d03b      	beq.n	801e6ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e674:	f3ef 8310 	mrs	r3, PRIMASK
 801e678:	60fb      	str	r3, [r7, #12]
  return(result);
 801e67a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e67c:	637b      	str	r3, [r7, #52]	@ 0x34
 801e67e:	2301      	movs	r3, #1
 801e680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e682:	693b      	ldr	r3, [r7, #16]
 801e684:	f383 8810 	msr	PRIMASK, r3
}
 801e688:	46c0      	nop			@ (mov r8, r8)
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	681a      	ldr	r2, [r3, #0]
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	4921      	ldr	r1, [pc, #132]	@ (801e71c <UART_CheckIdleState+0x14c>)
 801e696:	400a      	ands	r2, r1
 801e698:	601a      	str	r2, [r3, #0]
 801e69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e69c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e69e:	697b      	ldr	r3, [r7, #20]
 801e6a0:	f383 8810 	msr	PRIMASK, r3
}
 801e6a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6a6:	f3ef 8310 	mrs	r3, PRIMASK
 801e6aa:	61bb      	str	r3, [r7, #24]
  return(result);
 801e6ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e6ae:	633b      	str	r3, [r7, #48]	@ 0x30
 801e6b0:	2301      	movs	r3, #1
 801e6b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6b4:	69fb      	ldr	r3, [r7, #28]
 801e6b6:	f383 8810 	msr	PRIMASK, r3
}
 801e6ba:	46c0      	nop			@ (mov r8, r8)
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	689a      	ldr	r2, [r3, #8]
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	2101      	movs	r1, #1
 801e6c8:	438a      	bics	r2, r1
 801e6ca:	609a      	str	r2, [r3, #8]
 801e6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6d0:	6a3b      	ldr	r3, [r7, #32]
 801e6d2:	f383 8810 	msr	PRIMASK, r3
}
 801e6d6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	2280      	movs	r2, #128	@ 0x80
 801e6dc:	2120      	movs	r1, #32
 801e6de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	2278      	movs	r2, #120	@ 0x78
 801e6e4:	2100      	movs	r1, #0
 801e6e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e6e8:	2303      	movs	r3, #3
 801e6ea:	e011      	b.n	801e710 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	2220      	movs	r2, #32
 801e6f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	2280      	movs	r2, #128	@ 0x80
 801e6f6:	2120      	movs	r1, #32
 801e6f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e6fa:	687b      	ldr	r3, [r7, #4]
 801e6fc:	2200      	movs	r2, #0
 801e6fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	2200      	movs	r2, #0
 801e704:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	2278      	movs	r2, #120	@ 0x78
 801e70a:	2100      	movs	r1, #0
 801e70c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e70e:	2300      	movs	r3, #0
}
 801e710:	0018      	movs	r0, r3
 801e712:	46bd      	mov	sp, r7
 801e714:	b010      	add	sp, #64	@ 0x40
 801e716:	bd80      	pop	{r7, pc}
 801e718:	01ffffff 	.word	0x01ffffff
 801e71c:	fffffedf 	.word	0xfffffedf

0801e720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e720:	b580      	push	{r7, lr}
 801e722:	b084      	sub	sp, #16
 801e724:	af00      	add	r7, sp, #0
 801e726:	60f8      	str	r0, [r7, #12]
 801e728:	60b9      	str	r1, [r7, #8]
 801e72a:	603b      	str	r3, [r7, #0]
 801e72c:	1dfb      	adds	r3, r7, #7
 801e72e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e730:	e04b      	b.n	801e7ca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e732:	69bb      	ldr	r3, [r7, #24]
 801e734:	3301      	adds	r3, #1
 801e736:	d048      	beq.n	801e7ca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e738:	f7f6 f8ee 	bl	8014918 <HAL_GetTick>
 801e73c:	0002      	movs	r2, r0
 801e73e:	683b      	ldr	r3, [r7, #0]
 801e740:	1ad3      	subs	r3, r2, r3
 801e742:	69ba      	ldr	r2, [r7, #24]
 801e744:	429a      	cmp	r2, r3
 801e746:	d302      	bcc.n	801e74e <UART_WaitOnFlagUntilTimeout+0x2e>
 801e748:	69bb      	ldr	r3, [r7, #24]
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d101      	bne.n	801e752 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e74e:	2303      	movs	r3, #3
 801e750:	e04b      	b.n	801e7ea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	2204      	movs	r2, #4
 801e75a:	4013      	ands	r3, r2
 801e75c:	d035      	beq.n	801e7ca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	69db      	ldr	r3, [r3, #28]
 801e764:	2208      	movs	r2, #8
 801e766:	4013      	ands	r3, r2
 801e768:	2b08      	cmp	r3, #8
 801e76a:	d111      	bne.n	801e790 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	2208      	movs	r2, #8
 801e772:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	0018      	movs	r0, r3
 801e778:	f000 f9ca 	bl	801eb10 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	2284      	movs	r2, #132	@ 0x84
 801e780:	2108      	movs	r1, #8
 801e782:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	2278      	movs	r2, #120	@ 0x78
 801e788:	2100      	movs	r1, #0
 801e78a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e78c:	2301      	movs	r3, #1
 801e78e:	e02c      	b.n	801e7ea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	681b      	ldr	r3, [r3, #0]
 801e794:	69da      	ldr	r2, [r3, #28]
 801e796:	2380      	movs	r3, #128	@ 0x80
 801e798:	011b      	lsls	r3, r3, #4
 801e79a:	401a      	ands	r2, r3
 801e79c:	2380      	movs	r3, #128	@ 0x80
 801e79e:	011b      	lsls	r3, r3, #4
 801e7a0:	429a      	cmp	r2, r3
 801e7a2:	d112      	bne.n	801e7ca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e7a4:	68fb      	ldr	r3, [r7, #12]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	2280      	movs	r2, #128	@ 0x80
 801e7aa:	0112      	lsls	r2, r2, #4
 801e7ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	0018      	movs	r0, r3
 801e7b2:	f000 f9ad 	bl	801eb10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	2284      	movs	r2, #132	@ 0x84
 801e7ba:	2120      	movs	r1, #32
 801e7bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	2278      	movs	r2, #120	@ 0x78
 801e7c2:	2100      	movs	r1, #0
 801e7c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801e7c6:	2303      	movs	r3, #3
 801e7c8:	e00f      	b.n	801e7ea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	69db      	ldr	r3, [r3, #28]
 801e7d0:	68ba      	ldr	r2, [r7, #8]
 801e7d2:	4013      	ands	r3, r2
 801e7d4:	68ba      	ldr	r2, [r7, #8]
 801e7d6:	1ad3      	subs	r3, r2, r3
 801e7d8:	425a      	negs	r2, r3
 801e7da:	4153      	adcs	r3, r2
 801e7dc:	b2db      	uxtb	r3, r3
 801e7de:	001a      	movs	r2, r3
 801e7e0:	1dfb      	adds	r3, r7, #7
 801e7e2:	781b      	ldrb	r3, [r3, #0]
 801e7e4:	429a      	cmp	r2, r3
 801e7e6:	d0a4      	beq.n	801e732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e7e8:	2300      	movs	r3, #0
}
 801e7ea:	0018      	movs	r0, r3
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	b004      	add	sp, #16
 801e7f0:	bd80      	pop	{r7, pc}
	...

0801e7f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e7f4:	b580      	push	{r7, lr}
 801e7f6:	b090      	sub	sp, #64	@ 0x40
 801e7f8:	af00      	add	r7, sp, #0
 801e7fa:	60f8      	str	r0, [r7, #12]
 801e7fc:	60b9      	str	r1, [r7, #8]
 801e7fe:	1dbb      	adds	r3, r7, #6
 801e800:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	68ba      	ldr	r2, [r7, #8]
 801e806:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	1dba      	adds	r2, r7, #6
 801e80c:	2158      	movs	r1, #88	@ 0x58
 801e80e:	8812      	ldrh	r2, [r2, #0]
 801e810:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	1dba      	adds	r2, r7, #6
 801e816:	215a      	movs	r1, #90	@ 0x5a
 801e818:	8812      	ldrh	r2, [r2, #0]
 801e81a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	2200      	movs	r2, #0
 801e820:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	689a      	ldr	r2, [r3, #8]
 801e826:	2380      	movs	r3, #128	@ 0x80
 801e828:	015b      	lsls	r3, r3, #5
 801e82a:	429a      	cmp	r2, r3
 801e82c:	d10d      	bne.n	801e84a <UART_Start_Receive_IT+0x56>
 801e82e:	68fb      	ldr	r3, [r7, #12]
 801e830:	691b      	ldr	r3, [r3, #16]
 801e832:	2b00      	cmp	r3, #0
 801e834:	d104      	bne.n	801e840 <UART_Start_Receive_IT+0x4c>
 801e836:	68fb      	ldr	r3, [r7, #12]
 801e838:	225c      	movs	r2, #92	@ 0x5c
 801e83a:	4950      	ldr	r1, [pc, #320]	@ (801e97c <UART_Start_Receive_IT+0x188>)
 801e83c:	5299      	strh	r1, [r3, r2]
 801e83e:	e02e      	b.n	801e89e <UART_Start_Receive_IT+0xaa>
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	225c      	movs	r2, #92	@ 0x5c
 801e844:	21ff      	movs	r1, #255	@ 0xff
 801e846:	5299      	strh	r1, [r3, r2]
 801e848:	e029      	b.n	801e89e <UART_Start_Receive_IT+0xaa>
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	689b      	ldr	r3, [r3, #8]
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d10d      	bne.n	801e86e <UART_Start_Receive_IT+0x7a>
 801e852:	68fb      	ldr	r3, [r7, #12]
 801e854:	691b      	ldr	r3, [r3, #16]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d104      	bne.n	801e864 <UART_Start_Receive_IT+0x70>
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	225c      	movs	r2, #92	@ 0x5c
 801e85e:	21ff      	movs	r1, #255	@ 0xff
 801e860:	5299      	strh	r1, [r3, r2]
 801e862:	e01c      	b.n	801e89e <UART_Start_Receive_IT+0xaa>
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	225c      	movs	r2, #92	@ 0x5c
 801e868:	217f      	movs	r1, #127	@ 0x7f
 801e86a:	5299      	strh	r1, [r3, r2]
 801e86c:	e017      	b.n	801e89e <UART_Start_Receive_IT+0xaa>
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	689a      	ldr	r2, [r3, #8]
 801e872:	2380      	movs	r3, #128	@ 0x80
 801e874:	055b      	lsls	r3, r3, #21
 801e876:	429a      	cmp	r2, r3
 801e878:	d10d      	bne.n	801e896 <UART_Start_Receive_IT+0xa2>
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	691b      	ldr	r3, [r3, #16]
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d104      	bne.n	801e88c <UART_Start_Receive_IT+0x98>
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	225c      	movs	r2, #92	@ 0x5c
 801e886:	217f      	movs	r1, #127	@ 0x7f
 801e888:	5299      	strh	r1, [r3, r2]
 801e88a:	e008      	b.n	801e89e <UART_Start_Receive_IT+0xaa>
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	225c      	movs	r2, #92	@ 0x5c
 801e890:	213f      	movs	r1, #63	@ 0x3f
 801e892:	5299      	strh	r1, [r3, r2]
 801e894:	e003      	b.n	801e89e <UART_Start_Receive_IT+0xaa>
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	225c      	movs	r2, #92	@ 0x5c
 801e89a:	2100      	movs	r1, #0
 801e89c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e89e:	68fb      	ldr	r3, [r7, #12]
 801e8a0:	2284      	movs	r2, #132	@ 0x84
 801e8a2:	2100      	movs	r1, #0
 801e8a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e8a6:	68fb      	ldr	r3, [r7, #12]
 801e8a8:	2280      	movs	r2, #128	@ 0x80
 801e8aa:	2122      	movs	r1, #34	@ 0x22
 801e8ac:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8ae:	f3ef 8310 	mrs	r3, PRIMASK
 801e8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e8b8:	2301      	movs	r3, #1
 801e8ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8be:	f383 8810 	msr	PRIMASK, r3
}
 801e8c2:	46c0      	nop			@ (mov r8, r8)
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	689a      	ldr	r2, [r3, #8]
 801e8ca:	68fb      	ldr	r3, [r7, #12]
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	2101      	movs	r1, #1
 801e8d0:	430a      	orrs	r2, r1
 801e8d2:	609a      	str	r2, [r3, #8]
 801e8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e8da:	f383 8810 	msr	PRIMASK, r3
}
 801e8de:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e8e0:	68fb      	ldr	r3, [r7, #12]
 801e8e2:	689a      	ldr	r2, [r3, #8]
 801e8e4:	2380      	movs	r3, #128	@ 0x80
 801e8e6:	015b      	lsls	r3, r3, #5
 801e8e8:	429a      	cmp	r2, r3
 801e8ea:	d107      	bne.n	801e8fc <UART_Start_Receive_IT+0x108>
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	691b      	ldr	r3, [r3, #16]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d103      	bne.n	801e8fc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	4a22      	ldr	r2, [pc, #136]	@ (801e980 <UART_Start_Receive_IT+0x18c>)
 801e8f8:	669a      	str	r2, [r3, #104]	@ 0x68
 801e8fa:	e002      	b.n	801e902 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	4a21      	ldr	r2, [pc, #132]	@ (801e984 <UART_Start_Receive_IT+0x190>)
 801e900:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e902:	68fb      	ldr	r3, [r7, #12]
 801e904:	691b      	ldr	r3, [r3, #16]
 801e906:	2b00      	cmp	r3, #0
 801e908:	d019      	beq.n	801e93e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e90a:	f3ef 8310 	mrs	r3, PRIMASK
 801e90e:	61fb      	str	r3, [r7, #28]
  return(result);
 801e910:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e912:	637b      	str	r3, [r7, #52]	@ 0x34
 801e914:	2301      	movs	r3, #1
 801e916:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e918:	6a3b      	ldr	r3, [r7, #32]
 801e91a:	f383 8810 	msr	PRIMASK, r3
}
 801e91e:	46c0      	nop			@ (mov r8, r8)
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	681a      	ldr	r2, [r3, #0]
 801e926:	68fb      	ldr	r3, [r7, #12]
 801e928:	681b      	ldr	r3, [r3, #0]
 801e92a:	2190      	movs	r1, #144	@ 0x90
 801e92c:	0049      	lsls	r1, r1, #1
 801e92e:	430a      	orrs	r2, r1
 801e930:	601a      	str	r2, [r3, #0]
 801e932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e934:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e938:	f383 8810 	msr	PRIMASK, r3
}
 801e93c:	e018      	b.n	801e970 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e93e:	f3ef 8310 	mrs	r3, PRIMASK
 801e942:	613b      	str	r3, [r7, #16]
  return(result);
 801e944:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801e946:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e948:	2301      	movs	r3, #1
 801e94a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e94c:	697b      	ldr	r3, [r7, #20]
 801e94e:	f383 8810 	msr	PRIMASK, r3
}
 801e952:	46c0      	nop			@ (mov r8, r8)
 801e954:	68fb      	ldr	r3, [r7, #12]
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	681a      	ldr	r2, [r3, #0]
 801e95a:	68fb      	ldr	r3, [r7, #12]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	2120      	movs	r1, #32
 801e960:	430a      	orrs	r2, r1
 801e962:	601a      	str	r2, [r3, #0]
 801e964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e966:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e968:	69bb      	ldr	r3, [r7, #24]
 801e96a:	f383 8810 	msr	PRIMASK, r3
}
 801e96e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801e970:	2300      	movs	r3, #0
}
 801e972:	0018      	movs	r0, r3
 801e974:	46bd      	mov	sp, r7
 801e976:	b010      	add	sp, #64	@ 0x40
 801e978:	bd80      	pop	{r7, pc}
 801e97a:	46c0      	nop			@ (mov r8, r8)
 801e97c:	000001ff 	.word	0x000001ff
 801e980:	0801f0f5 	.word	0x0801f0f5
 801e984:	0801ef29 	.word	0x0801ef29

0801e988 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e988:	b580      	push	{r7, lr}
 801e98a:	b090      	sub	sp, #64	@ 0x40
 801e98c:	af00      	add	r7, sp, #0
 801e98e:	60f8      	str	r0, [r7, #12]
 801e990:	60b9      	str	r1, [r7, #8]
 801e992:	1dbb      	adds	r3, r7, #6
 801e994:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	68ba      	ldr	r2, [r7, #8]
 801e99a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801e99c:	68fb      	ldr	r3, [r7, #12]
 801e99e:	1dba      	adds	r2, r7, #6
 801e9a0:	2158      	movs	r1, #88	@ 0x58
 801e9a2:	8812      	ldrh	r2, [r2, #0]
 801e9a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e9a6:	68fb      	ldr	r3, [r7, #12]
 801e9a8:	2284      	movs	r2, #132	@ 0x84
 801e9aa:	2100      	movs	r1, #0
 801e9ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	2280      	movs	r2, #128	@ 0x80
 801e9b2:	2122      	movs	r1, #34	@ 0x22
 801e9b4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801e9b6:	68fb      	ldr	r3, [r7, #12]
 801e9b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d028      	beq.n	801ea10 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801e9be:	68fb      	ldr	r3, [r7, #12]
 801e9c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9c2:	4a3e      	ldr	r2, [pc, #248]	@ (801eabc <UART_Start_Receive_DMA+0x134>)
 801e9c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9ca:	4a3d      	ldr	r2, [pc, #244]	@ (801eac0 <UART_Start_Receive_DMA+0x138>)
 801e9cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801e9ce:	68fb      	ldr	r3, [r7, #12]
 801e9d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9d2:	4a3c      	ldr	r2, [pc, #240]	@ (801eac4 <UART_Start_Receive_DMA+0x13c>)
 801e9d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e9da:	2200      	movs	r2, #0
 801e9dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801e9e2:	68fb      	ldr	r3, [r7, #12]
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	3324      	adds	r3, #36	@ 0x24
 801e9e8:	0019      	movs	r1, r3
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e9ee:	001a      	movs	r2, r3
 801e9f0:	1dbb      	adds	r3, r7, #6
 801e9f2:	881b      	ldrh	r3, [r3, #0]
 801e9f4:	f7f6 fcc4 	bl	8015380 <HAL_DMA_Start_IT>
 801e9f8:	1e03      	subs	r3, r0, #0
 801e9fa:	d009      	beq.n	801ea10 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801e9fc:	68fb      	ldr	r3, [r7, #12]
 801e9fe:	2284      	movs	r2, #132	@ 0x84
 801ea00:	2110      	movs	r1, #16
 801ea02:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	2280      	movs	r2, #128	@ 0x80
 801ea08:	2120      	movs	r1, #32
 801ea0a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801ea0c:	2301      	movs	r3, #1
 801ea0e:	e050      	b.n	801eab2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ea10:	68fb      	ldr	r3, [r7, #12]
 801ea12:	691b      	ldr	r3, [r3, #16]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d019      	beq.n	801ea4c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea18:	f3ef 8310 	mrs	r3, PRIMASK
 801ea1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ea1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ea20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ea22:	2301      	movs	r3, #1
 801ea24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea28:	f383 8810 	msr	PRIMASK, r3
}
 801ea2c:	46c0      	nop			@ (mov r8, r8)
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	681b      	ldr	r3, [r3, #0]
 801ea32:	681a      	ldr	r2, [r3, #0]
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	2180      	movs	r1, #128	@ 0x80
 801ea3a:	0049      	lsls	r1, r1, #1
 801ea3c:	430a      	orrs	r2, r1
 801ea3e:	601a      	str	r2, [r3, #0]
 801ea40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ea42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea46:	f383 8810 	msr	PRIMASK, r3
}
 801ea4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea4c:	f3ef 8310 	mrs	r3, PRIMASK
 801ea50:	613b      	str	r3, [r7, #16]
  return(result);
 801ea52:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea54:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ea56:	2301      	movs	r3, #1
 801ea58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea5a:	697b      	ldr	r3, [r7, #20]
 801ea5c:	f383 8810 	msr	PRIMASK, r3
}
 801ea60:	46c0      	nop			@ (mov r8, r8)
 801ea62:	68fb      	ldr	r3, [r7, #12]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	689a      	ldr	r2, [r3, #8]
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	2101      	movs	r1, #1
 801ea6e:	430a      	orrs	r2, r1
 801ea70:	609a      	str	r2, [r3, #8]
 801ea72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea76:	69bb      	ldr	r3, [r7, #24]
 801ea78:	f383 8810 	msr	PRIMASK, r3
}
 801ea7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea7e:	f3ef 8310 	mrs	r3, PRIMASK
 801ea82:	61fb      	str	r3, [r7, #28]
  return(result);
 801ea84:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ea86:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea88:	2301      	movs	r3, #1
 801ea8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea8c:	6a3b      	ldr	r3, [r7, #32]
 801ea8e:	f383 8810 	msr	PRIMASK, r3
}
 801ea92:	46c0      	nop			@ (mov r8, r8)
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	689a      	ldr	r2, [r3, #8]
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	2140      	movs	r1, #64	@ 0x40
 801eaa0:	430a      	orrs	r2, r1
 801eaa2:	609a      	str	r2, [r3, #8]
 801eaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eaa6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eaaa:	f383 8810 	msr	PRIMASK, r3
}
 801eaae:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801eab0:	2300      	movs	r3, #0
}
 801eab2:	0018      	movs	r0, r3
 801eab4:	46bd      	mov	sp, r7
 801eab6:	b010      	add	sp, #64	@ 0x40
 801eab8:	bd80      	pop	{r7, pc}
 801eaba:	46c0      	nop			@ (mov r8, r8)
 801eabc:	0801ec99 	.word	0x0801ec99
 801eac0:	0801edcd 	.word	0x0801edcd
 801eac4:	0801ee15 	.word	0x0801ee15

0801eac8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b086      	sub	sp, #24
 801eacc:	af00      	add	r7, sp, #0
 801eace:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ead0:	f3ef 8310 	mrs	r3, PRIMASK
 801ead4:	60bb      	str	r3, [r7, #8]
  return(result);
 801ead6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ead8:	617b      	str	r3, [r7, #20]
 801eada:	2301      	movs	r3, #1
 801eadc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eade:	68fb      	ldr	r3, [r7, #12]
 801eae0:	f383 8810 	msr	PRIMASK, r3
}
 801eae4:	46c0      	nop			@ (mov r8, r8)
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	681a      	ldr	r2, [r3, #0]
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	21c0      	movs	r1, #192	@ 0xc0
 801eaf2:	438a      	bics	r2, r1
 801eaf4:	601a      	str	r2, [r3, #0]
 801eaf6:	697b      	ldr	r3, [r7, #20]
 801eaf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eafa:	693b      	ldr	r3, [r7, #16]
 801eafc:	f383 8810 	msr	PRIMASK, r3
}
 801eb00:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	2220      	movs	r2, #32
 801eb06:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801eb08:	46c0      	nop			@ (mov r8, r8)
 801eb0a:	46bd      	mov	sp, r7
 801eb0c:	b006      	add	sp, #24
 801eb0e:	bd80      	pop	{r7, pc}

0801eb10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801eb10:	b580      	push	{r7, lr}
 801eb12:	b08e      	sub	sp, #56	@ 0x38
 801eb14:	af00      	add	r7, sp, #0
 801eb16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb18:	f3ef 8310 	mrs	r3, PRIMASK
 801eb1c:	617b      	str	r3, [r7, #20]
  return(result);
 801eb1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801eb20:	637b      	str	r3, [r7, #52]	@ 0x34
 801eb22:	2301      	movs	r3, #1
 801eb24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb26:	69bb      	ldr	r3, [r7, #24]
 801eb28:	f383 8810 	msr	PRIMASK, r3
}
 801eb2c:	46c0      	nop			@ (mov r8, r8)
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	681b      	ldr	r3, [r3, #0]
 801eb32:	681a      	ldr	r2, [r3, #0]
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	4926      	ldr	r1, [pc, #152]	@ (801ebd4 <UART_EndRxTransfer+0xc4>)
 801eb3a:	400a      	ands	r2, r1
 801eb3c:	601a      	str	r2, [r3, #0]
 801eb3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eb40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb42:	69fb      	ldr	r3, [r7, #28]
 801eb44:	f383 8810 	msr	PRIMASK, r3
}
 801eb48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb4a:	f3ef 8310 	mrs	r3, PRIMASK
 801eb4e:	623b      	str	r3, [r7, #32]
  return(result);
 801eb50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb52:	633b      	str	r3, [r7, #48]	@ 0x30
 801eb54:	2301      	movs	r3, #1
 801eb56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb5a:	f383 8810 	msr	PRIMASK, r3
}
 801eb5e:	46c0      	nop			@ (mov r8, r8)
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	689a      	ldr	r2, [r3, #8]
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	2101      	movs	r1, #1
 801eb6c:	438a      	bics	r2, r1
 801eb6e:	609a      	str	r2, [r3, #8]
 801eb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb76:	f383 8810 	msr	PRIMASK, r3
}
 801eb7a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801eb80:	2b01      	cmp	r3, #1
 801eb82:	d118      	bne.n	801ebb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb84:	f3ef 8310 	mrs	r3, PRIMASK
 801eb88:	60bb      	str	r3, [r7, #8]
  return(result);
 801eb8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801eb8e:	2301      	movs	r3, #1
 801eb90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb92:	68fb      	ldr	r3, [r7, #12]
 801eb94:	f383 8810 	msr	PRIMASK, r3
}
 801eb98:	46c0      	nop			@ (mov r8, r8)
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	681a      	ldr	r2, [r3, #0]
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	2110      	movs	r1, #16
 801eba6:	438a      	bics	r2, r1
 801eba8:	601a      	str	r2, [r3, #0]
 801ebaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebae:	693b      	ldr	r3, [r7, #16]
 801ebb0:	f383 8810 	msr	PRIMASK, r3
}
 801ebb4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	2280      	movs	r2, #128	@ 0x80
 801ebba:	2120      	movs	r1, #32
 801ebbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	2200      	movs	r2, #0
 801ebc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	2200      	movs	r2, #0
 801ebc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ebca:	46c0      	nop			@ (mov r8, r8)
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	b00e      	add	sp, #56	@ 0x38
 801ebd0:	bd80      	pop	{r7, pc}
 801ebd2:	46c0      	nop			@ (mov r8, r8)
 801ebd4:	fffffedf 	.word	0xfffffedf

0801ebd8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ebd8:	b580      	push	{r7, lr}
 801ebda:	b08c      	sub	sp, #48	@ 0x30
 801ebdc:	af00      	add	r7, sp, #0
 801ebde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	2220      	movs	r2, #32
 801ebee:	4013      	ands	r3, r2
 801ebf0:	d135      	bne.n	801ec5e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801ebf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebf4:	2252      	movs	r2, #82	@ 0x52
 801ebf6:	2100      	movs	r1, #0
 801ebf8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebfa:	f3ef 8310 	mrs	r3, PRIMASK
 801ebfe:	60fb      	str	r3, [r7, #12]
  return(result);
 801ec00:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ec02:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ec04:	2301      	movs	r3, #1
 801ec06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec08:	693b      	ldr	r3, [r7, #16]
 801ec0a:	f383 8810 	msr	PRIMASK, r3
}
 801ec0e:	46c0      	nop			@ (mov r8, r8)
 801ec10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec12:	681b      	ldr	r3, [r3, #0]
 801ec14:	689a      	ldr	r2, [r3, #8]
 801ec16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	2180      	movs	r1, #128	@ 0x80
 801ec1c:	438a      	bics	r2, r1
 801ec1e:	609a      	str	r2, [r3, #8]
 801ec20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ec22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec24:	697b      	ldr	r3, [r7, #20]
 801ec26:	f383 8810 	msr	PRIMASK, r3
}
 801ec2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec2c:	f3ef 8310 	mrs	r3, PRIMASK
 801ec30:	61bb      	str	r3, [r7, #24]
  return(result);
 801ec32:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ec34:	627b      	str	r3, [r7, #36]	@ 0x24
 801ec36:	2301      	movs	r3, #1
 801ec38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec3a:	69fb      	ldr	r3, [r7, #28]
 801ec3c:	f383 8810 	msr	PRIMASK, r3
}
 801ec40:	46c0      	nop			@ (mov r8, r8)
 801ec42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	681a      	ldr	r2, [r3, #0]
 801ec48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	2140      	movs	r1, #64	@ 0x40
 801ec4e:	430a      	orrs	r2, r1
 801ec50:	601a      	str	r2, [r3, #0]
 801ec52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec56:	6a3b      	ldr	r3, [r7, #32]
 801ec58:	f383 8810 	msr	PRIMASK, r3
}
 801ec5c:	e006      	b.n	801ec6c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801ec5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec60:	228c      	movs	r2, #140	@ 0x8c
 801ec62:	589b      	ldr	r3, [r3, r2]
 801ec64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ec66:	0010      	movs	r0, r2
 801ec68:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ec6a:	46c0      	nop			@ (mov r8, r8)
 801ec6c:	46c0      	nop			@ (mov r8, r8)
 801ec6e:	46bd      	mov	sp, r7
 801ec70:	b00c      	add	sp, #48	@ 0x30
 801ec72:	bd80      	pop	{r7, pc}

0801ec74 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ec74:	b580      	push	{r7, lr}
 801ec76:	b084      	sub	sp, #16
 801ec78:	af00      	add	r7, sp, #0
 801ec7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec80:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	2288      	movs	r2, #136	@ 0x88
 801ec86:	589b      	ldr	r3, [r3, r2]
 801ec88:	68fa      	ldr	r2, [r7, #12]
 801ec8a:	0010      	movs	r0, r2
 801ec8c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ec8e:	46c0      	nop			@ (mov r8, r8)
 801ec90:	46bd      	mov	sp, r7
 801ec92:	b004      	add	sp, #16
 801ec94:	bd80      	pop	{r7, pc}
	...

0801ec98 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ec98:	b580      	push	{r7, lr}
 801ec9a:	b094      	sub	sp, #80	@ 0x50
 801ec9c:	af00      	add	r7, sp, #0
 801ec9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eca4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	681b      	ldr	r3, [r3, #0]
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	2220      	movs	r2, #32
 801ecae:	4013      	ands	r3, r2
 801ecb0:	d16f      	bne.n	801ed92 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ecb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecb4:	225a      	movs	r2, #90	@ 0x5a
 801ecb6:	2100      	movs	r1, #0
 801ecb8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecba:	f3ef 8310 	mrs	r3, PRIMASK
 801ecbe:	61bb      	str	r3, [r7, #24]
  return(result);
 801ecc0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ecc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ecc4:	2301      	movs	r3, #1
 801ecc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecc8:	69fb      	ldr	r3, [r7, #28]
 801ecca:	f383 8810 	msr	PRIMASK, r3
}
 801ecce:	46c0      	nop			@ (mov r8, r8)
 801ecd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecd2:	681b      	ldr	r3, [r3, #0]
 801ecd4:	681a      	ldr	r2, [r3, #0]
 801ecd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	493b      	ldr	r1, [pc, #236]	@ (801edc8 <UART_DMAReceiveCplt+0x130>)
 801ecdc:	400a      	ands	r2, r1
 801ecde:	601a      	str	r2, [r3, #0]
 801ece0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ece2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ece4:	6a3b      	ldr	r3, [r7, #32]
 801ece6:	f383 8810 	msr	PRIMASK, r3
}
 801ecea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecec:	f3ef 8310 	mrs	r3, PRIMASK
 801ecf0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ecf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ecf4:	647b      	str	r3, [r7, #68]	@ 0x44
 801ecf6:	2301      	movs	r3, #1
 801ecf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ecfc:	f383 8810 	msr	PRIMASK, r3
}
 801ed00:	46c0      	nop			@ (mov r8, r8)
 801ed02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	689a      	ldr	r2, [r3, #8]
 801ed08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	2101      	movs	r1, #1
 801ed0e:	438a      	bics	r2, r1
 801ed10:	609a      	str	r2, [r3, #8]
 801ed12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ed14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed18:	f383 8810 	msr	PRIMASK, r3
}
 801ed1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed1e:	f3ef 8310 	mrs	r3, PRIMASK
 801ed22:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ed24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ed26:	643b      	str	r3, [r7, #64]	@ 0x40
 801ed28:	2301      	movs	r3, #1
 801ed2a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed2e:	f383 8810 	msr	PRIMASK, r3
}
 801ed32:	46c0      	nop			@ (mov r8, r8)
 801ed34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	689a      	ldr	r2, [r3, #8]
 801ed3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	2140      	movs	r1, #64	@ 0x40
 801ed40:	438a      	bics	r2, r1
 801ed42:	609a      	str	r2, [r3, #8]
 801ed44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ed46:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed4a:	f383 8810 	msr	PRIMASK, r3
}
 801ed4e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801ed50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed52:	2280      	movs	r2, #128	@ 0x80
 801ed54:	2120      	movs	r1, #32
 801ed56:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ed5c:	2b01      	cmp	r3, #1
 801ed5e:	d118      	bne.n	801ed92 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed60:	f3ef 8310 	mrs	r3, PRIMASK
 801ed64:	60fb      	str	r3, [r7, #12]
  return(result);
 801ed66:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ed68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed6a:	2301      	movs	r3, #1
 801ed6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed6e:	693b      	ldr	r3, [r7, #16]
 801ed70:	f383 8810 	msr	PRIMASK, r3
}
 801ed74:	46c0      	nop			@ (mov r8, r8)
 801ed76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	681a      	ldr	r2, [r3, #0]
 801ed7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	2110      	movs	r1, #16
 801ed82:	438a      	bics	r2, r1
 801ed84:	601a      	str	r2, [r3, #0]
 801ed86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed8a:	697b      	ldr	r3, [r7, #20]
 801ed8c:	f383 8810 	msr	PRIMASK, r3
}
 801ed90:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ed92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed94:	2200      	movs	r2, #0
 801ed96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ed9c:	2b01      	cmp	r3, #1
 801ed9e:	d109      	bne.n	801edb4 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801eda0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eda2:	22ac      	movs	r2, #172	@ 0xac
 801eda4:	589b      	ldr	r3, [r3, r2]
 801eda6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801eda8:	2158      	movs	r1, #88	@ 0x58
 801edaa:	5a51      	ldrh	r1, [r2, r1]
 801edac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801edae:	0010      	movs	r0, r2
 801edb0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801edb2:	e005      	b.n	801edc0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801edb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edb6:	2294      	movs	r2, #148	@ 0x94
 801edb8:	589b      	ldr	r3, [r3, r2]
 801edba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801edbc:	0010      	movs	r0, r2
 801edbe:	4798      	blx	r3
}
 801edc0:	46c0      	nop			@ (mov r8, r8)
 801edc2:	46bd      	mov	sp, r7
 801edc4:	b014      	add	sp, #80	@ 0x50
 801edc6:	bd80      	pop	{r7, pc}
 801edc8:	fffffeff 	.word	0xfffffeff

0801edcc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801edcc:	b580      	push	{r7, lr}
 801edce:	b084      	sub	sp, #16
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edd8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801edda:	68fb      	ldr	r3, [r7, #12]
 801eddc:	2201      	movs	r2, #1
 801edde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ede4:	2b01      	cmp	r3, #1
 801ede6:	d10b      	bne.n	801ee00 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801ede8:	68fb      	ldr	r3, [r7, #12]
 801edea:	22ac      	movs	r2, #172	@ 0xac
 801edec:	589b      	ldr	r3, [r3, r2]
 801edee:	68fa      	ldr	r2, [r7, #12]
 801edf0:	2158      	movs	r1, #88	@ 0x58
 801edf2:	5a52      	ldrh	r2, [r2, r1]
 801edf4:	0852      	lsrs	r2, r2, #1
 801edf6:	b291      	uxth	r1, r2
 801edf8:	68fa      	ldr	r2, [r7, #12]
 801edfa:	0010      	movs	r0, r2
 801edfc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801edfe:	e005      	b.n	801ee0c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801ee00:	68fb      	ldr	r3, [r7, #12]
 801ee02:	2290      	movs	r2, #144	@ 0x90
 801ee04:	589b      	ldr	r3, [r3, r2]
 801ee06:	68fa      	ldr	r2, [r7, #12]
 801ee08:	0010      	movs	r0, r2
 801ee0a:	4798      	blx	r3
}
 801ee0c:	46c0      	nop			@ (mov r8, r8)
 801ee0e:	46bd      	mov	sp, r7
 801ee10:	b004      	add	sp, #16
 801ee12:	bd80      	pop	{r7, pc}

0801ee14 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801ee14:	b580      	push	{r7, lr}
 801ee16:	b086      	sub	sp, #24
 801ee18:	af00      	add	r7, sp, #0
 801ee1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee20:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801ee22:	697b      	ldr	r3, [r7, #20]
 801ee24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ee26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801ee28:	697b      	ldr	r3, [r7, #20]
 801ee2a:	2280      	movs	r2, #128	@ 0x80
 801ee2c:	589b      	ldr	r3, [r3, r2]
 801ee2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801ee30:	697b      	ldr	r3, [r7, #20]
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	689b      	ldr	r3, [r3, #8]
 801ee36:	2280      	movs	r2, #128	@ 0x80
 801ee38:	4013      	ands	r3, r2
 801ee3a:	2b80      	cmp	r3, #128	@ 0x80
 801ee3c:	d10a      	bne.n	801ee54 <UART_DMAError+0x40>
 801ee3e:	693b      	ldr	r3, [r7, #16]
 801ee40:	2b21      	cmp	r3, #33	@ 0x21
 801ee42:	d107      	bne.n	801ee54 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801ee44:	697b      	ldr	r3, [r7, #20]
 801ee46:	2252      	movs	r2, #82	@ 0x52
 801ee48:	2100      	movs	r1, #0
 801ee4a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801ee4c:	697b      	ldr	r3, [r7, #20]
 801ee4e:	0018      	movs	r0, r3
 801ee50:	f7ff fe3a 	bl	801eac8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801ee54:	697b      	ldr	r3, [r7, #20]
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	689b      	ldr	r3, [r3, #8]
 801ee5a:	2240      	movs	r2, #64	@ 0x40
 801ee5c:	4013      	ands	r3, r2
 801ee5e:	2b40      	cmp	r3, #64	@ 0x40
 801ee60:	d10a      	bne.n	801ee78 <UART_DMAError+0x64>
 801ee62:	68fb      	ldr	r3, [r7, #12]
 801ee64:	2b22      	cmp	r3, #34	@ 0x22
 801ee66:	d107      	bne.n	801ee78 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801ee68:	697b      	ldr	r3, [r7, #20]
 801ee6a:	225a      	movs	r2, #90	@ 0x5a
 801ee6c:	2100      	movs	r1, #0
 801ee6e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801ee70:	697b      	ldr	r3, [r7, #20]
 801ee72:	0018      	movs	r0, r3
 801ee74:	f7ff fe4c 	bl	801eb10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801ee78:	697b      	ldr	r3, [r7, #20]
 801ee7a:	2284      	movs	r2, #132	@ 0x84
 801ee7c:	589b      	ldr	r3, [r3, r2]
 801ee7e:	2210      	movs	r2, #16
 801ee80:	431a      	orrs	r2, r3
 801ee82:	697b      	ldr	r3, [r7, #20]
 801ee84:	2184      	movs	r1, #132	@ 0x84
 801ee86:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ee88:	697b      	ldr	r3, [r7, #20]
 801ee8a:	2298      	movs	r2, #152	@ 0x98
 801ee8c:	589b      	ldr	r3, [r3, r2]
 801ee8e:	697a      	ldr	r2, [r7, #20]
 801ee90:	0010      	movs	r0, r2
 801ee92:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ee94:	46c0      	nop			@ (mov r8, r8)
 801ee96:	46bd      	mov	sp, r7
 801ee98:	b006      	add	sp, #24
 801ee9a:	bd80      	pop	{r7, pc}

0801ee9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ee9c:	b580      	push	{r7, lr}
 801ee9e:	b084      	sub	sp, #16
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eea8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801eeaa:	68fb      	ldr	r3, [r7, #12]
 801eeac:	225a      	movs	r2, #90	@ 0x5a
 801eeae:	2100      	movs	r1, #0
 801eeb0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801eeb2:	68fb      	ldr	r3, [r7, #12]
 801eeb4:	2252      	movs	r2, #82	@ 0x52
 801eeb6:	2100      	movs	r1, #0
 801eeb8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801eeba:	68fb      	ldr	r3, [r7, #12]
 801eebc:	2298      	movs	r2, #152	@ 0x98
 801eebe:	589b      	ldr	r3, [r3, r2]
 801eec0:	68fa      	ldr	r2, [r7, #12]
 801eec2:	0010      	movs	r0, r2
 801eec4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801eec6:	46c0      	nop			@ (mov r8, r8)
 801eec8:	46bd      	mov	sp, r7
 801eeca:	b004      	add	sp, #16
 801eecc:	bd80      	pop	{r7, pc}

0801eece <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801eece:	b580      	push	{r7, lr}
 801eed0:	b086      	sub	sp, #24
 801eed2:	af00      	add	r7, sp, #0
 801eed4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eed6:	f3ef 8310 	mrs	r3, PRIMASK
 801eeda:	60bb      	str	r3, [r7, #8]
  return(result);
 801eedc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801eede:	617b      	str	r3, [r7, #20]
 801eee0:	2301      	movs	r3, #1
 801eee2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eee4:	68fb      	ldr	r3, [r7, #12]
 801eee6:	f383 8810 	msr	PRIMASK, r3
}
 801eeea:	46c0      	nop			@ (mov r8, r8)
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	681a      	ldr	r2, [r3, #0]
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	2140      	movs	r1, #64	@ 0x40
 801eef8:	438a      	bics	r2, r1
 801eefa:	601a      	str	r2, [r3, #0]
 801eefc:	697b      	ldr	r3, [r7, #20]
 801eefe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef00:	693b      	ldr	r3, [r7, #16]
 801ef02:	f383 8810 	msr	PRIMASK, r3
}
 801ef06:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	2220      	movs	r2, #32
 801ef0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	2200      	movs	r2, #0
 801ef12:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	228c      	movs	r2, #140	@ 0x8c
 801ef18:	589b      	ldr	r3, [r3, r2]
 801ef1a:	687a      	ldr	r2, [r7, #4]
 801ef1c:	0010      	movs	r0, r2
 801ef1e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ef20:	46c0      	nop			@ (mov r8, r8)
 801ef22:	46bd      	mov	sp, r7
 801ef24:	b006      	add	sp, #24
 801ef26:	bd80      	pop	{r7, pc}

0801ef28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801ef28:	b580      	push	{r7, lr}
 801ef2a:	b094      	sub	sp, #80	@ 0x50
 801ef2c:	af00      	add	r7, sp, #0
 801ef2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801ef30:	204e      	movs	r0, #78	@ 0x4e
 801ef32:	183b      	adds	r3, r7, r0
 801ef34:	687a      	ldr	r2, [r7, #4]
 801ef36:	215c      	movs	r1, #92	@ 0x5c
 801ef38:	5a52      	ldrh	r2, [r2, r1]
 801ef3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	2280      	movs	r2, #128	@ 0x80
 801ef40:	589b      	ldr	r3, [r3, r2]
 801ef42:	2b22      	cmp	r3, #34	@ 0x22
 801ef44:	d000      	beq.n	801ef48 <UART_RxISR_8BIT+0x20>
 801ef46:	e0c2      	b.n	801f0ce <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ef4e:	214c      	movs	r1, #76	@ 0x4c
 801ef50:	187b      	adds	r3, r7, r1
 801ef52:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801ef54:	187b      	adds	r3, r7, r1
 801ef56:	881b      	ldrh	r3, [r3, #0]
 801ef58:	b2da      	uxtb	r2, r3
 801ef5a:	183b      	adds	r3, r7, r0
 801ef5c:	881b      	ldrh	r3, [r3, #0]
 801ef5e:	b2d9      	uxtb	r1, r3
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef64:	400a      	ands	r2, r1
 801ef66:	b2d2      	uxtb	r2, r2
 801ef68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef6e:	1c5a      	adds	r2, r3, #1
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	225a      	movs	r2, #90	@ 0x5a
 801ef78:	5a9b      	ldrh	r3, [r3, r2]
 801ef7a:	b29b      	uxth	r3, r3
 801ef7c:	3b01      	subs	r3, #1
 801ef7e:	b299      	uxth	r1, r3
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	225a      	movs	r2, #90	@ 0x5a
 801ef84:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	225a      	movs	r2, #90	@ 0x5a
 801ef8a:	5a9b      	ldrh	r3, [r3, r2]
 801ef8c:	b29b      	uxth	r3, r3
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d000      	beq.n	801ef94 <UART_RxISR_8BIT+0x6c>
 801ef92:	e0a4      	b.n	801f0de <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef94:	f3ef 8310 	mrs	r3, PRIMASK
 801ef98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ef9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ef9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ef9e:	2301      	movs	r3, #1
 801efa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efa4:	f383 8810 	msr	PRIMASK, r3
}
 801efa8:	46c0      	nop			@ (mov r8, r8)
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	681a      	ldr	r2, [r3, #0]
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	494c      	ldr	r1, [pc, #304]	@ (801f0e8 <UART_RxISR_8BIT+0x1c0>)
 801efb6:	400a      	ands	r2, r1
 801efb8:	601a      	str	r2, [r3, #0]
 801efba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801efbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efc0:	f383 8810 	msr	PRIMASK, r3
}
 801efc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efc6:	f3ef 8310 	mrs	r3, PRIMASK
 801efca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801efcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801efce:	647b      	str	r3, [r7, #68]	@ 0x44
 801efd0:	2301      	movs	r3, #1
 801efd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efd6:	f383 8810 	msr	PRIMASK, r3
}
 801efda:	46c0      	nop			@ (mov r8, r8)
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	689a      	ldr	r2, [r3, #8]
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	2101      	movs	r1, #1
 801efe8:	438a      	bics	r2, r1
 801efea:	609a      	str	r2, [r3, #8]
 801efec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801efee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eff2:	f383 8810 	msr	PRIMASK, r3
}
 801eff6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	2280      	movs	r2, #128	@ 0x80
 801effc:	2120      	movs	r1, #32
 801effe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	2200      	movs	r2, #0
 801f004:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	2200      	movs	r2, #0
 801f00a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	4a36      	ldr	r2, [pc, #216]	@ (801f0ec <UART_RxISR_8BIT+0x1c4>)
 801f012:	4293      	cmp	r3, r2
 801f014:	d01f      	beq.n	801f056 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	685a      	ldr	r2, [r3, #4]
 801f01c:	2380      	movs	r3, #128	@ 0x80
 801f01e:	041b      	lsls	r3, r3, #16
 801f020:	4013      	ands	r3, r2
 801f022:	d018      	beq.n	801f056 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f024:	f3ef 8310 	mrs	r3, PRIMASK
 801f028:	61bb      	str	r3, [r7, #24]
  return(result);
 801f02a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f02c:	643b      	str	r3, [r7, #64]	@ 0x40
 801f02e:	2301      	movs	r3, #1
 801f030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f032:	69fb      	ldr	r3, [r7, #28]
 801f034:	f383 8810 	msr	PRIMASK, r3
}
 801f038:	46c0      	nop			@ (mov r8, r8)
 801f03a:	687b      	ldr	r3, [r7, #4]
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	681a      	ldr	r2, [r3, #0]
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	681b      	ldr	r3, [r3, #0]
 801f044:	492a      	ldr	r1, [pc, #168]	@ (801f0f0 <UART_RxISR_8BIT+0x1c8>)
 801f046:	400a      	ands	r2, r1
 801f048:	601a      	str	r2, [r3, #0]
 801f04a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f04c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f04e:	6a3b      	ldr	r3, [r7, #32]
 801f050:	f383 8810 	msr	PRIMASK, r3
}
 801f054:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f05a:	2b01      	cmp	r3, #1
 801f05c:	d130      	bne.n	801f0c0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	2200      	movs	r2, #0
 801f062:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f064:	f3ef 8310 	mrs	r3, PRIMASK
 801f068:	60fb      	str	r3, [r7, #12]
  return(result);
 801f06a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f06e:	2301      	movs	r3, #1
 801f070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f072:	693b      	ldr	r3, [r7, #16]
 801f074:	f383 8810 	msr	PRIMASK, r3
}
 801f078:	46c0      	nop			@ (mov r8, r8)
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	681a      	ldr	r2, [r3, #0]
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	2110      	movs	r1, #16
 801f086:	438a      	bics	r2, r1
 801f088:	601a      	str	r2, [r3, #0]
 801f08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f08e:	697b      	ldr	r3, [r7, #20]
 801f090:	f383 8810 	msr	PRIMASK, r3
}
 801f094:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	69db      	ldr	r3, [r3, #28]
 801f09c:	2210      	movs	r2, #16
 801f09e:	4013      	ands	r3, r2
 801f0a0:	2b10      	cmp	r3, #16
 801f0a2:	d103      	bne.n	801f0ac <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	2210      	movs	r2, #16
 801f0aa:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	22ac      	movs	r2, #172	@ 0xac
 801f0b0:	589b      	ldr	r3, [r3, r2]
 801f0b2:	687a      	ldr	r2, [r7, #4]
 801f0b4:	2158      	movs	r1, #88	@ 0x58
 801f0b6:	5a51      	ldrh	r1, [r2, r1]
 801f0b8:	687a      	ldr	r2, [r7, #4]
 801f0ba:	0010      	movs	r0, r2
 801f0bc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f0be:	e00e      	b.n	801f0de <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	2294      	movs	r2, #148	@ 0x94
 801f0c4:	589b      	ldr	r3, [r3, r2]
 801f0c6:	687a      	ldr	r2, [r7, #4]
 801f0c8:	0010      	movs	r0, r2
 801f0ca:	4798      	blx	r3
}
 801f0cc:	e007      	b.n	801f0de <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	699a      	ldr	r2, [r3, #24]
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	2108      	movs	r1, #8
 801f0da:	430a      	orrs	r2, r1
 801f0dc:	619a      	str	r2, [r3, #24]
}
 801f0de:	46c0      	nop			@ (mov r8, r8)
 801f0e0:	46bd      	mov	sp, r7
 801f0e2:	b014      	add	sp, #80	@ 0x50
 801f0e4:	bd80      	pop	{r7, pc}
 801f0e6:	46c0      	nop			@ (mov r8, r8)
 801f0e8:	fffffedf 	.word	0xfffffedf
 801f0ec:	40004800 	.word	0x40004800
 801f0f0:	fbffffff 	.word	0xfbffffff

0801f0f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f0f4:	b580      	push	{r7, lr}
 801f0f6:	b094      	sub	sp, #80	@ 0x50
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f0fc:	204e      	movs	r0, #78	@ 0x4e
 801f0fe:	183b      	adds	r3, r7, r0
 801f100:	687a      	ldr	r2, [r7, #4]
 801f102:	215c      	movs	r1, #92	@ 0x5c
 801f104:	5a52      	ldrh	r2, [r2, r1]
 801f106:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	2280      	movs	r2, #128	@ 0x80
 801f10c:	589b      	ldr	r3, [r3, r2]
 801f10e:	2b22      	cmp	r3, #34	@ 0x22
 801f110:	d000      	beq.n	801f114 <UART_RxISR_16BIT+0x20>
 801f112:	e0c2      	b.n	801f29a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	681b      	ldr	r3, [r3, #0]
 801f118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f11a:	214c      	movs	r1, #76	@ 0x4c
 801f11c:	187b      	adds	r3, r7, r1
 801f11e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f124:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f126:	187b      	adds	r3, r7, r1
 801f128:	183a      	adds	r2, r7, r0
 801f12a:	881b      	ldrh	r3, [r3, #0]
 801f12c:	8812      	ldrh	r2, [r2, #0]
 801f12e:	4013      	ands	r3, r2
 801f130:	b29a      	uxth	r2, r3
 801f132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f134:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f13a:	1c9a      	adds	r2, r3, #2
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	225a      	movs	r2, #90	@ 0x5a
 801f144:	5a9b      	ldrh	r3, [r3, r2]
 801f146:	b29b      	uxth	r3, r3
 801f148:	3b01      	subs	r3, #1
 801f14a:	b299      	uxth	r1, r3
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	225a      	movs	r2, #90	@ 0x5a
 801f150:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	225a      	movs	r2, #90	@ 0x5a
 801f156:	5a9b      	ldrh	r3, [r3, r2]
 801f158:	b29b      	uxth	r3, r3
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d000      	beq.n	801f160 <UART_RxISR_16BIT+0x6c>
 801f15e:	e0a4      	b.n	801f2aa <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f160:	f3ef 8310 	mrs	r3, PRIMASK
 801f164:	623b      	str	r3, [r7, #32]
  return(result);
 801f166:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f168:	647b      	str	r3, [r7, #68]	@ 0x44
 801f16a:	2301      	movs	r3, #1
 801f16c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f170:	f383 8810 	msr	PRIMASK, r3
}
 801f174:	46c0      	nop			@ (mov r8, r8)
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	681b      	ldr	r3, [r3, #0]
 801f17a:	681a      	ldr	r2, [r3, #0]
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	494c      	ldr	r1, [pc, #304]	@ (801f2b4 <UART_RxISR_16BIT+0x1c0>)
 801f182:	400a      	ands	r2, r1
 801f184:	601a      	str	r2, [r3, #0]
 801f186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f188:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f18c:	f383 8810 	msr	PRIMASK, r3
}
 801f190:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f192:	f3ef 8310 	mrs	r3, PRIMASK
 801f196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f19a:	643b      	str	r3, [r7, #64]	@ 0x40
 801f19c:	2301      	movs	r3, #1
 801f19e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1a2:	f383 8810 	msr	PRIMASK, r3
}
 801f1a6:	46c0      	nop			@ (mov r8, r8)
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	689a      	ldr	r2, [r3, #8]
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	2101      	movs	r1, #1
 801f1b4:	438a      	bics	r2, r1
 801f1b6:	609a      	str	r2, [r3, #8]
 801f1b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f1ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f1be:	f383 8810 	msr	PRIMASK, r3
}
 801f1c2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	2280      	movs	r2, #128	@ 0x80
 801f1c8:	2120      	movs	r1, #32
 801f1ca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	2200      	movs	r2, #0
 801f1d0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	681b      	ldr	r3, [r3, #0]
 801f1dc:	4a36      	ldr	r2, [pc, #216]	@ (801f2b8 <UART_RxISR_16BIT+0x1c4>)
 801f1de:	4293      	cmp	r3, r2
 801f1e0:	d01f      	beq.n	801f222 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	685a      	ldr	r2, [r3, #4]
 801f1e8:	2380      	movs	r3, #128	@ 0x80
 801f1ea:	041b      	lsls	r3, r3, #16
 801f1ec:	4013      	ands	r3, r2
 801f1ee:	d018      	beq.n	801f222 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1f0:	f3ef 8310 	mrs	r3, PRIMASK
 801f1f4:	617b      	str	r3, [r7, #20]
  return(result);
 801f1f6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f1fa:	2301      	movs	r3, #1
 801f1fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1fe:	69bb      	ldr	r3, [r7, #24]
 801f200:	f383 8810 	msr	PRIMASK, r3
}
 801f204:	46c0      	nop			@ (mov r8, r8)
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	681a      	ldr	r2, [r3, #0]
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	492a      	ldr	r1, [pc, #168]	@ (801f2bc <UART_RxISR_16BIT+0x1c8>)
 801f212:	400a      	ands	r2, r1
 801f214:	601a      	str	r2, [r3, #0]
 801f216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f21a:	69fb      	ldr	r3, [r7, #28]
 801f21c:	f383 8810 	msr	PRIMASK, r3
}
 801f220:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f226:	2b01      	cmp	r3, #1
 801f228:	d130      	bne.n	801f28c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	2200      	movs	r2, #0
 801f22e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f230:	f3ef 8310 	mrs	r3, PRIMASK
 801f234:	60bb      	str	r3, [r7, #8]
  return(result);
 801f236:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f238:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f23a:	2301      	movs	r3, #1
 801f23c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f23e:	68fb      	ldr	r3, [r7, #12]
 801f240:	f383 8810 	msr	PRIMASK, r3
}
 801f244:	46c0      	nop			@ (mov r8, r8)
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	681a      	ldr	r2, [r3, #0]
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	2110      	movs	r1, #16
 801f252:	438a      	bics	r2, r1
 801f254:	601a      	str	r2, [r3, #0]
 801f256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f25a:	693b      	ldr	r3, [r7, #16]
 801f25c:	f383 8810 	msr	PRIMASK, r3
}
 801f260:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	69db      	ldr	r3, [r3, #28]
 801f268:	2210      	movs	r2, #16
 801f26a:	4013      	ands	r3, r2
 801f26c:	2b10      	cmp	r3, #16
 801f26e:	d103      	bne.n	801f278 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	2210      	movs	r2, #16
 801f276:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	22ac      	movs	r2, #172	@ 0xac
 801f27c:	589b      	ldr	r3, [r3, r2]
 801f27e:	687a      	ldr	r2, [r7, #4]
 801f280:	2158      	movs	r1, #88	@ 0x58
 801f282:	5a51      	ldrh	r1, [r2, r1]
 801f284:	687a      	ldr	r2, [r7, #4]
 801f286:	0010      	movs	r0, r2
 801f288:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f28a:	e00e      	b.n	801f2aa <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	2294      	movs	r2, #148	@ 0x94
 801f290:	589b      	ldr	r3, [r3, r2]
 801f292:	687a      	ldr	r2, [r7, #4]
 801f294:	0010      	movs	r0, r2
 801f296:	4798      	blx	r3
}
 801f298:	e007      	b.n	801f2aa <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	699a      	ldr	r2, [r3, #24]
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	2108      	movs	r1, #8
 801f2a6:	430a      	orrs	r2, r1
 801f2a8:	619a      	str	r2, [r3, #24]
}
 801f2aa:	46c0      	nop			@ (mov r8, r8)
 801f2ac:	46bd      	mov	sp, r7
 801f2ae:	b014      	add	sp, #80	@ 0x50
 801f2b0:	bd80      	pop	{r7, pc}
 801f2b2:	46c0      	nop			@ (mov r8, r8)
 801f2b4:	fffffedf 	.word	0xfffffedf
 801f2b8:	40004800 	.word	0x40004800
 801f2bc:	fbffffff 	.word	0xfbffffff

0801f2c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f2c0:	b580      	push	{r7, lr}
 801f2c2:	b082      	sub	sp, #8
 801f2c4:	af00      	add	r7, sp, #0
 801f2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f2c8:	46c0      	nop			@ (mov r8, r8)
 801f2ca:	46bd      	mov	sp, r7
 801f2cc:	b002      	add	sp, #8
 801f2ce:	bd80      	pop	{r7, pc}

0801f2d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f2d0:	b580      	push	{r7, lr}
 801f2d2:	b084      	sub	sp, #16
 801f2d4:	af00      	add	r7, sp, #0
 801f2d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	2244      	movs	r2, #68	@ 0x44
 801f2dc:	2100      	movs	r1, #0
 801f2de:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f2e0:	4b05      	ldr	r3, [pc, #20]	@ (801f2f8 <USB_EnableGlobalInt+0x28>)
 801f2e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	b299      	uxth	r1, r3
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	2240      	movs	r2, #64	@ 0x40
 801f2ec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f2ee:	2300      	movs	r3, #0
}
 801f2f0:	0018      	movs	r0, r3
 801f2f2:	46bd      	mov	sp, r7
 801f2f4:	b004      	add	sp, #16
 801f2f6:	bd80      	pop	{r7, pc}
 801f2f8:	0000bf80 	.word	0x0000bf80

0801f2fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f2fc:	b580      	push	{r7, lr}
 801f2fe:	b084      	sub	sp, #16
 801f300:	af00      	add	r7, sp, #0
 801f302:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f304:	4b09      	ldr	r3, [pc, #36]	@ (801f32c <USB_DisableGlobalInt+0x30>)
 801f306:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	2240      	movs	r2, #64	@ 0x40
 801f30c:	5a9b      	ldrh	r3, [r3, r2]
 801f30e:	b29b      	uxth	r3, r3
 801f310:	68fa      	ldr	r2, [r7, #12]
 801f312:	b292      	uxth	r2, r2
 801f314:	43d2      	mvns	r2, r2
 801f316:	b292      	uxth	r2, r2
 801f318:	4013      	ands	r3, r2
 801f31a:	b299      	uxth	r1, r3
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	2240      	movs	r2, #64	@ 0x40
 801f320:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f322:	2300      	movs	r3, #0
}
 801f324:	0018      	movs	r0, r3
 801f326:	46bd      	mov	sp, r7
 801f328:	b004      	add	sp, #16
 801f32a:	bd80      	pop	{r7, pc}
 801f32c:	0000bf80 	.word	0x0000bf80

0801f330 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f330:	b084      	sub	sp, #16
 801f332:	b590      	push	{r4, r7, lr}
 801f334:	b083      	sub	sp, #12
 801f336:	af00      	add	r7, sp, #0
 801f338:	6078      	str	r0, [r7, #4]
 801f33a:	2004      	movs	r0, #4
 801f33c:	2410      	movs	r4, #16
 801f33e:	1900      	adds	r0, r0, r4
 801f340:	2408      	movs	r4, #8
 801f342:	46a4      	mov	ip, r4
 801f344:	44bc      	add	ip, r7
 801f346:	4460      	add	r0, ip
 801f348:	6001      	str	r1, [r0, #0]
 801f34a:	6042      	str	r2, [r0, #4]
 801f34c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	2240      	movs	r2, #64	@ 0x40
 801f352:	2101      	movs	r1, #1
 801f354:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	2240      	movs	r2, #64	@ 0x40
 801f35a:	2100      	movs	r1, #0
 801f35c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	2244      	movs	r2, #68	@ 0x44
 801f362:	2100      	movs	r1, #0
 801f364:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	2250      	movs	r2, #80	@ 0x50
 801f36a:	2100      	movs	r1, #0
 801f36c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f36e:	2300      	movs	r3, #0
}
 801f370:	0018      	movs	r0, r3
 801f372:	46bd      	mov	sp, r7
 801f374:	b003      	add	sp, #12
 801f376:	bc90      	pop	{r4, r7}
 801f378:	bc08      	pop	{r3}
 801f37a:	b004      	add	sp, #16
 801f37c:	4718      	bx	r3
	...

0801f380 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f380:	b580      	push	{r7, lr}
 801f382:	b09c      	sub	sp, #112	@ 0x70
 801f384:	af00      	add	r7, sp, #0
 801f386:	6078      	str	r0, [r7, #4]
 801f388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f38a:	236f      	movs	r3, #111	@ 0x6f
 801f38c:	18fb      	adds	r3, r7, r3
 801f38e:	2200      	movs	r2, #0
 801f390:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f392:	687a      	ldr	r2, [r7, #4]
 801f394:	683b      	ldr	r3, [r7, #0]
 801f396:	781b      	ldrb	r3, [r3, #0]
 801f398:	009b      	lsls	r3, r3, #2
 801f39a:	18d3      	adds	r3, r2, r3
 801f39c:	881b      	ldrh	r3, [r3, #0]
 801f39e:	b29a      	uxth	r2, r3
 801f3a0:	236c      	movs	r3, #108	@ 0x6c
 801f3a2:	18fb      	adds	r3, r7, r3
 801f3a4:	49a3      	ldr	r1, [pc, #652]	@ (801f634 <USB_ActivateEndpoint+0x2b4>)
 801f3a6:	400a      	ands	r2, r1
 801f3a8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f3aa:	683b      	ldr	r3, [r7, #0]
 801f3ac:	78db      	ldrb	r3, [r3, #3]
 801f3ae:	2b03      	cmp	r3, #3
 801f3b0:	d017      	beq.n	801f3e2 <USB_ActivateEndpoint+0x62>
 801f3b2:	dc28      	bgt.n	801f406 <USB_ActivateEndpoint+0x86>
 801f3b4:	2b02      	cmp	r3, #2
 801f3b6:	d00e      	beq.n	801f3d6 <USB_ActivateEndpoint+0x56>
 801f3b8:	dc25      	bgt.n	801f406 <USB_ActivateEndpoint+0x86>
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d002      	beq.n	801f3c4 <USB_ActivateEndpoint+0x44>
 801f3be:	2b01      	cmp	r3, #1
 801f3c0:	d018      	beq.n	801f3f4 <USB_ActivateEndpoint+0x74>
 801f3c2:	e020      	b.n	801f406 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f3c4:	226c      	movs	r2, #108	@ 0x6c
 801f3c6:	18bb      	adds	r3, r7, r2
 801f3c8:	18ba      	adds	r2, r7, r2
 801f3ca:	8812      	ldrh	r2, [r2, #0]
 801f3cc:	2180      	movs	r1, #128	@ 0x80
 801f3ce:	0089      	lsls	r1, r1, #2
 801f3d0:	430a      	orrs	r2, r1
 801f3d2:	801a      	strh	r2, [r3, #0]
      break;
 801f3d4:	e01c      	b.n	801f410 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f3d6:	226c      	movs	r2, #108	@ 0x6c
 801f3d8:	18bb      	adds	r3, r7, r2
 801f3da:	18ba      	adds	r2, r7, r2
 801f3dc:	8812      	ldrh	r2, [r2, #0]
 801f3de:	801a      	strh	r2, [r3, #0]
      break;
 801f3e0:	e016      	b.n	801f410 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f3e2:	226c      	movs	r2, #108	@ 0x6c
 801f3e4:	18bb      	adds	r3, r7, r2
 801f3e6:	18ba      	adds	r2, r7, r2
 801f3e8:	8812      	ldrh	r2, [r2, #0]
 801f3ea:	21c0      	movs	r1, #192	@ 0xc0
 801f3ec:	00c9      	lsls	r1, r1, #3
 801f3ee:	430a      	orrs	r2, r1
 801f3f0:	801a      	strh	r2, [r3, #0]
      break;
 801f3f2:	e00d      	b.n	801f410 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f3f4:	226c      	movs	r2, #108	@ 0x6c
 801f3f6:	18bb      	adds	r3, r7, r2
 801f3f8:	18ba      	adds	r2, r7, r2
 801f3fa:	8812      	ldrh	r2, [r2, #0]
 801f3fc:	2180      	movs	r1, #128	@ 0x80
 801f3fe:	00c9      	lsls	r1, r1, #3
 801f400:	430a      	orrs	r2, r1
 801f402:	801a      	strh	r2, [r3, #0]
      break;
 801f404:	e004      	b.n	801f410 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f406:	236f      	movs	r3, #111	@ 0x6f
 801f408:	18fb      	adds	r3, r7, r3
 801f40a:	2201      	movs	r2, #1
 801f40c:	701a      	strb	r2, [r3, #0]
      break;
 801f40e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f410:	687a      	ldr	r2, [r7, #4]
 801f412:	683b      	ldr	r3, [r7, #0]
 801f414:	781b      	ldrb	r3, [r3, #0]
 801f416:	009b      	lsls	r3, r3, #2
 801f418:	18d3      	adds	r3, r2, r3
 801f41a:	226c      	movs	r2, #108	@ 0x6c
 801f41c:	18ba      	adds	r2, r7, r2
 801f41e:	8812      	ldrh	r2, [r2, #0]
 801f420:	4985      	ldr	r1, [pc, #532]	@ (801f638 <USB_ActivateEndpoint+0x2b8>)
 801f422:	430a      	orrs	r2, r1
 801f424:	b292      	uxth	r2, r2
 801f426:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f428:	687a      	ldr	r2, [r7, #4]
 801f42a:	683b      	ldr	r3, [r7, #0]
 801f42c:	781b      	ldrb	r3, [r3, #0]
 801f42e:	009b      	lsls	r3, r3, #2
 801f430:	18d3      	adds	r3, r2, r3
 801f432:	881b      	ldrh	r3, [r3, #0]
 801f434:	b29b      	uxth	r3, r3
 801f436:	b21b      	sxth	r3, r3
 801f438:	4a80      	ldr	r2, [pc, #512]	@ (801f63c <USB_ActivateEndpoint+0x2bc>)
 801f43a:	4013      	ands	r3, r2
 801f43c:	b21a      	sxth	r2, r3
 801f43e:	683b      	ldr	r3, [r7, #0]
 801f440:	781b      	ldrb	r3, [r3, #0]
 801f442:	b21b      	sxth	r3, r3
 801f444:	4313      	orrs	r3, r2
 801f446:	b21a      	sxth	r2, r3
 801f448:	2166      	movs	r1, #102	@ 0x66
 801f44a:	187b      	adds	r3, r7, r1
 801f44c:	801a      	strh	r2, [r3, #0]
 801f44e:	687a      	ldr	r2, [r7, #4]
 801f450:	683b      	ldr	r3, [r7, #0]
 801f452:	781b      	ldrb	r3, [r3, #0]
 801f454:	009b      	lsls	r3, r3, #2
 801f456:	18d3      	adds	r3, r2, r3
 801f458:	187a      	adds	r2, r7, r1
 801f45a:	8812      	ldrh	r2, [r2, #0]
 801f45c:	4976      	ldr	r1, [pc, #472]	@ (801f638 <USB_ActivateEndpoint+0x2b8>)
 801f45e:	430a      	orrs	r2, r1
 801f460:	b292      	uxth	r2, r2
 801f462:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f464:	683b      	ldr	r3, [r7, #0]
 801f466:	7b1b      	ldrb	r3, [r3, #12]
 801f468:	2b00      	cmp	r3, #0
 801f46a:	d000      	beq.n	801f46e <USB_ActivateEndpoint+0xee>
 801f46c:	e178      	b.n	801f760 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f46e:	683b      	ldr	r3, [r7, #0]
 801f470:	785b      	ldrb	r3, [r3, #1]
 801f472:	2b00      	cmp	r3, #0
 801f474:	d100      	bne.n	801f478 <USB_ActivateEndpoint+0xf8>
 801f476:	e07a      	b.n	801f56e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	61bb      	str	r3, [r7, #24]
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	2250      	movs	r2, #80	@ 0x50
 801f480:	5a9b      	ldrh	r3, [r3, r2]
 801f482:	b29b      	uxth	r3, r3
 801f484:	001a      	movs	r2, r3
 801f486:	69bb      	ldr	r3, [r7, #24]
 801f488:	189b      	adds	r3, r3, r2
 801f48a:	61bb      	str	r3, [r7, #24]
 801f48c:	683b      	ldr	r3, [r7, #0]
 801f48e:	781b      	ldrb	r3, [r3, #0]
 801f490:	00da      	lsls	r2, r3, #3
 801f492:	69bb      	ldr	r3, [r7, #24]
 801f494:	18d3      	adds	r3, r2, r3
 801f496:	2280      	movs	r2, #128	@ 0x80
 801f498:	00d2      	lsls	r2, r2, #3
 801f49a:	4694      	mov	ip, r2
 801f49c:	4463      	add	r3, ip
 801f49e:	617b      	str	r3, [r7, #20]
 801f4a0:	683b      	ldr	r3, [r7, #0]
 801f4a2:	88db      	ldrh	r3, [r3, #6]
 801f4a4:	085b      	lsrs	r3, r3, #1
 801f4a6:	b29b      	uxth	r3, r3
 801f4a8:	18db      	adds	r3, r3, r3
 801f4aa:	b29a      	uxth	r2, r3
 801f4ac:	697b      	ldr	r3, [r7, #20]
 801f4ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f4b0:	687a      	ldr	r2, [r7, #4]
 801f4b2:	683b      	ldr	r3, [r7, #0]
 801f4b4:	781b      	ldrb	r3, [r3, #0]
 801f4b6:	009b      	lsls	r3, r3, #2
 801f4b8:	18d2      	adds	r2, r2, r3
 801f4ba:	2112      	movs	r1, #18
 801f4bc:	187b      	adds	r3, r7, r1
 801f4be:	8812      	ldrh	r2, [r2, #0]
 801f4c0:	801a      	strh	r2, [r3, #0]
 801f4c2:	187b      	adds	r3, r7, r1
 801f4c4:	881b      	ldrh	r3, [r3, #0]
 801f4c6:	2240      	movs	r2, #64	@ 0x40
 801f4c8:	4013      	ands	r3, r2
 801f4ca:	d016      	beq.n	801f4fa <USB_ActivateEndpoint+0x17a>
 801f4cc:	687a      	ldr	r2, [r7, #4]
 801f4ce:	683b      	ldr	r3, [r7, #0]
 801f4d0:	781b      	ldrb	r3, [r3, #0]
 801f4d2:	009b      	lsls	r3, r3, #2
 801f4d4:	18d3      	adds	r3, r2, r3
 801f4d6:	881b      	ldrh	r3, [r3, #0]
 801f4d8:	b29a      	uxth	r2, r3
 801f4da:	2010      	movs	r0, #16
 801f4dc:	183b      	adds	r3, r7, r0
 801f4de:	4957      	ldr	r1, [pc, #348]	@ (801f63c <USB_ActivateEndpoint+0x2bc>)
 801f4e0:	400a      	ands	r2, r1
 801f4e2:	801a      	strh	r2, [r3, #0]
 801f4e4:	687a      	ldr	r2, [r7, #4]
 801f4e6:	683b      	ldr	r3, [r7, #0]
 801f4e8:	781b      	ldrb	r3, [r3, #0]
 801f4ea:	009b      	lsls	r3, r3, #2
 801f4ec:	18d3      	adds	r3, r2, r3
 801f4ee:	183a      	adds	r2, r7, r0
 801f4f0:	8812      	ldrh	r2, [r2, #0]
 801f4f2:	4953      	ldr	r1, [pc, #332]	@ (801f640 <USB_ActivateEndpoint+0x2c0>)
 801f4f4:	430a      	orrs	r2, r1
 801f4f6:	b292      	uxth	r2, r2
 801f4f8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f4fa:	683b      	ldr	r3, [r7, #0]
 801f4fc:	78db      	ldrb	r3, [r3, #3]
 801f4fe:	2b01      	cmp	r3, #1
 801f500:	d01d      	beq.n	801f53e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f502:	687a      	ldr	r2, [r7, #4]
 801f504:	683b      	ldr	r3, [r7, #0]
 801f506:	781b      	ldrb	r3, [r3, #0]
 801f508:	009b      	lsls	r3, r3, #2
 801f50a:	18d3      	adds	r3, r2, r3
 801f50c:	881b      	ldrh	r3, [r3, #0]
 801f50e:	b29a      	uxth	r2, r3
 801f510:	200c      	movs	r0, #12
 801f512:	183b      	adds	r3, r7, r0
 801f514:	494b      	ldr	r1, [pc, #300]	@ (801f644 <USB_ActivateEndpoint+0x2c4>)
 801f516:	400a      	ands	r2, r1
 801f518:	801a      	strh	r2, [r3, #0]
 801f51a:	183b      	adds	r3, r7, r0
 801f51c:	183a      	adds	r2, r7, r0
 801f51e:	8812      	ldrh	r2, [r2, #0]
 801f520:	2120      	movs	r1, #32
 801f522:	404a      	eors	r2, r1
 801f524:	801a      	strh	r2, [r3, #0]
 801f526:	687a      	ldr	r2, [r7, #4]
 801f528:	683b      	ldr	r3, [r7, #0]
 801f52a:	781b      	ldrb	r3, [r3, #0]
 801f52c:	009b      	lsls	r3, r3, #2
 801f52e:	18d3      	adds	r3, r2, r3
 801f530:	183a      	adds	r2, r7, r0
 801f532:	8812      	ldrh	r2, [r2, #0]
 801f534:	4940      	ldr	r1, [pc, #256]	@ (801f638 <USB_ActivateEndpoint+0x2b8>)
 801f536:	430a      	orrs	r2, r1
 801f538:	b292      	uxth	r2, r2
 801f53a:	801a      	strh	r2, [r3, #0]
 801f53c:	e2b4      	b.n	801faa8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f53e:	687a      	ldr	r2, [r7, #4]
 801f540:	683b      	ldr	r3, [r7, #0]
 801f542:	781b      	ldrb	r3, [r3, #0]
 801f544:	009b      	lsls	r3, r3, #2
 801f546:	18d3      	adds	r3, r2, r3
 801f548:	881b      	ldrh	r3, [r3, #0]
 801f54a:	b29a      	uxth	r2, r3
 801f54c:	200e      	movs	r0, #14
 801f54e:	183b      	adds	r3, r7, r0
 801f550:	493c      	ldr	r1, [pc, #240]	@ (801f644 <USB_ActivateEndpoint+0x2c4>)
 801f552:	400a      	ands	r2, r1
 801f554:	801a      	strh	r2, [r3, #0]
 801f556:	687a      	ldr	r2, [r7, #4]
 801f558:	683b      	ldr	r3, [r7, #0]
 801f55a:	781b      	ldrb	r3, [r3, #0]
 801f55c:	009b      	lsls	r3, r3, #2
 801f55e:	18d3      	adds	r3, r2, r3
 801f560:	183a      	adds	r2, r7, r0
 801f562:	8812      	ldrh	r2, [r2, #0]
 801f564:	4934      	ldr	r1, [pc, #208]	@ (801f638 <USB_ActivateEndpoint+0x2b8>)
 801f566:	430a      	orrs	r2, r1
 801f568:	b292      	uxth	r2, r2
 801f56a:	801a      	strh	r2, [r3, #0]
 801f56c:	e29c      	b.n	801faa8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	633b      	str	r3, [r7, #48]	@ 0x30
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	2250      	movs	r2, #80	@ 0x50
 801f576:	5a9b      	ldrh	r3, [r3, r2]
 801f578:	b29b      	uxth	r3, r3
 801f57a:	001a      	movs	r2, r3
 801f57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f57e:	189b      	adds	r3, r3, r2
 801f580:	633b      	str	r3, [r7, #48]	@ 0x30
 801f582:	683b      	ldr	r3, [r7, #0]
 801f584:	781b      	ldrb	r3, [r3, #0]
 801f586:	00da      	lsls	r2, r3, #3
 801f588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f58a:	18d3      	adds	r3, r2, r3
 801f58c:	4a2e      	ldr	r2, [pc, #184]	@ (801f648 <USB_ActivateEndpoint+0x2c8>)
 801f58e:	4694      	mov	ip, r2
 801f590:	4463      	add	r3, ip
 801f592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f594:	683b      	ldr	r3, [r7, #0]
 801f596:	88db      	ldrh	r3, [r3, #6]
 801f598:	085b      	lsrs	r3, r3, #1
 801f59a:	b29b      	uxth	r3, r3
 801f59c:	18db      	adds	r3, r3, r3
 801f59e:	b29a      	uxth	r2, r3
 801f5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f5a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	2250      	movs	r2, #80	@ 0x50
 801f5ac:	5a9b      	ldrh	r3, [r3, r2]
 801f5ae:	b29b      	uxth	r3, r3
 801f5b0:	001a      	movs	r2, r3
 801f5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5b4:	189b      	adds	r3, r3, r2
 801f5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f5b8:	683b      	ldr	r3, [r7, #0]
 801f5ba:	781b      	ldrb	r3, [r3, #0]
 801f5bc:	00da      	lsls	r2, r3, #3
 801f5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5c0:	18d3      	adds	r3, r2, r3
 801f5c2:	4a22      	ldr	r2, [pc, #136]	@ (801f64c <USB_ActivateEndpoint+0x2cc>)
 801f5c4:	4694      	mov	ip, r2
 801f5c6:	4463      	add	r3, ip
 801f5c8:	627b      	str	r3, [r7, #36]	@ 0x24
 801f5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5cc:	881b      	ldrh	r3, [r3, #0]
 801f5ce:	b29b      	uxth	r3, r3
 801f5d0:	059b      	lsls	r3, r3, #22
 801f5d2:	0d9b      	lsrs	r3, r3, #22
 801f5d4:	b29a      	uxth	r2, r3
 801f5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5d8:	801a      	strh	r2, [r3, #0]
 801f5da:	683b      	ldr	r3, [r7, #0]
 801f5dc:	691b      	ldr	r3, [r3, #16]
 801f5de:	2b3e      	cmp	r3, #62	@ 0x3e
 801f5e0:	d91a      	bls.n	801f618 <USB_ActivateEndpoint+0x298>
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	691b      	ldr	r3, [r3, #16]
 801f5e6:	095b      	lsrs	r3, r3, #5
 801f5e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	691b      	ldr	r3, [r3, #16]
 801f5ee:	221f      	movs	r2, #31
 801f5f0:	4013      	ands	r3, r2
 801f5f2:	d102      	bne.n	801f5fa <USB_ActivateEndpoint+0x27a>
 801f5f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f5f6:	3b01      	subs	r3, #1
 801f5f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5fc:	881b      	ldrh	r3, [r3, #0]
 801f5fe:	b29a      	uxth	r2, r3
 801f600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f602:	b29b      	uxth	r3, r3
 801f604:	029b      	lsls	r3, r3, #10
 801f606:	b29b      	uxth	r3, r3
 801f608:	4313      	orrs	r3, r2
 801f60a:	b29b      	uxth	r3, r3
 801f60c:	4a10      	ldr	r2, [pc, #64]	@ (801f650 <USB_ActivateEndpoint+0x2d0>)
 801f60e:	4313      	orrs	r3, r2
 801f610:	b29a      	uxth	r2, r3
 801f612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f614:	801a      	strh	r2, [r3, #0]
 801f616:	e034      	b.n	801f682 <USB_ActivateEndpoint+0x302>
 801f618:	683b      	ldr	r3, [r7, #0]
 801f61a:	691b      	ldr	r3, [r3, #16]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d119      	bne.n	801f654 <USB_ActivateEndpoint+0x2d4>
 801f620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f622:	881b      	ldrh	r3, [r3, #0]
 801f624:	b29b      	uxth	r3, r3
 801f626:	4a0a      	ldr	r2, [pc, #40]	@ (801f650 <USB_ActivateEndpoint+0x2d0>)
 801f628:	4313      	orrs	r3, r2
 801f62a:	b29a      	uxth	r2, r3
 801f62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f62e:	801a      	strh	r2, [r3, #0]
 801f630:	e027      	b.n	801f682 <USB_ActivateEndpoint+0x302>
 801f632:	46c0      	nop			@ (mov r8, r8)
 801f634:	ffff898f 	.word	0xffff898f
 801f638:	ffff8080 	.word	0xffff8080
 801f63c:	ffff8f8f 	.word	0xffff8f8f
 801f640:	ffff80c0 	.word	0xffff80c0
 801f644:	ffff8fbf 	.word	0xffff8fbf
 801f648:	00000404 	.word	0x00000404
 801f64c:	00000406 	.word	0x00000406
 801f650:	ffff8000 	.word	0xffff8000
 801f654:	683b      	ldr	r3, [r7, #0]
 801f656:	691b      	ldr	r3, [r3, #16]
 801f658:	085b      	lsrs	r3, r3, #1
 801f65a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f65c:	683b      	ldr	r3, [r7, #0]
 801f65e:	691b      	ldr	r3, [r3, #16]
 801f660:	2201      	movs	r2, #1
 801f662:	4013      	ands	r3, r2
 801f664:	d002      	beq.n	801f66c <USB_ActivateEndpoint+0x2ec>
 801f666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f668:	3301      	adds	r3, #1
 801f66a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f66e:	881b      	ldrh	r3, [r3, #0]
 801f670:	b29a      	uxth	r2, r3
 801f672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f674:	b29b      	uxth	r3, r3
 801f676:	029b      	lsls	r3, r3, #10
 801f678:	b29b      	uxth	r3, r3
 801f67a:	4313      	orrs	r3, r2
 801f67c:	b29a      	uxth	r2, r3
 801f67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f680:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f682:	687a      	ldr	r2, [r7, #4]
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	781b      	ldrb	r3, [r3, #0]
 801f688:	009b      	lsls	r3, r3, #2
 801f68a:	18d2      	adds	r2, r2, r3
 801f68c:	2122      	movs	r1, #34	@ 0x22
 801f68e:	187b      	adds	r3, r7, r1
 801f690:	8812      	ldrh	r2, [r2, #0]
 801f692:	801a      	strh	r2, [r3, #0]
 801f694:	187b      	adds	r3, r7, r1
 801f696:	881a      	ldrh	r2, [r3, #0]
 801f698:	2380      	movs	r3, #128	@ 0x80
 801f69a:	01db      	lsls	r3, r3, #7
 801f69c:	4013      	ands	r3, r2
 801f69e:	d016      	beq.n	801f6ce <USB_ActivateEndpoint+0x34e>
 801f6a0:	687a      	ldr	r2, [r7, #4]
 801f6a2:	683b      	ldr	r3, [r7, #0]
 801f6a4:	781b      	ldrb	r3, [r3, #0]
 801f6a6:	009b      	lsls	r3, r3, #2
 801f6a8:	18d3      	adds	r3, r2, r3
 801f6aa:	881b      	ldrh	r3, [r3, #0]
 801f6ac:	b29a      	uxth	r2, r3
 801f6ae:	2020      	movs	r0, #32
 801f6b0:	183b      	adds	r3, r7, r0
 801f6b2:	49dd      	ldr	r1, [pc, #884]	@ (801fa28 <USB_ActivateEndpoint+0x6a8>)
 801f6b4:	400a      	ands	r2, r1
 801f6b6:	801a      	strh	r2, [r3, #0]
 801f6b8:	687a      	ldr	r2, [r7, #4]
 801f6ba:	683b      	ldr	r3, [r7, #0]
 801f6bc:	781b      	ldrb	r3, [r3, #0]
 801f6be:	009b      	lsls	r3, r3, #2
 801f6c0:	18d3      	adds	r3, r2, r3
 801f6c2:	183a      	adds	r2, r7, r0
 801f6c4:	8812      	ldrh	r2, [r2, #0]
 801f6c6:	49d9      	ldr	r1, [pc, #868]	@ (801fa2c <USB_ActivateEndpoint+0x6ac>)
 801f6c8:	430a      	orrs	r2, r1
 801f6ca:	b292      	uxth	r2, r2
 801f6cc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f6ce:	683b      	ldr	r3, [r7, #0]
 801f6d0:	781b      	ldrb	r3, [r3, #0]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d125      	bne.n	801f722 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f6d6:	687a      	ldr	r2, [r7, #4]
 801f6d8:	683b      	ldr	r3, [r7, #0]
 801f6da:	781b      	ldrb	r3, [r3, #0]
 801f6dc:	009b      	lsls	r3, r3, #2
 801f6de:	18d3      	adds	r3, r2, r3
 801f6e0:	881b      	ldrh	r3, [r3, #0]
 801f6e2:	b29a      	uxth	r2, r3
 801f6e4:	201c      	movs	r0, #28
 801f6e6:	183b      	adds	r3, r7, r0
 801f6e8:	49d1      	ldr	r1, [pc, #836]	@ (801fa30 <USB_ActivateEndpoint+0x6b0>)
 801f6ea:	400a      	ands	r2, r1
 801f6ec:	801a      	strh	r2, [r3, #0]
 801f6ee:	183b      	adds	r3, r7, r0
 801f6f0:	183a      	adds	r2, r7, r0
 801f6f2:	8812      	ldrh	r2, [r2, #0]
 801f6f4:	2180      	movs	r1, #128	@ 0x80
 801f6f6:	0149      	lsls	r1, r1, #5
 801f6f8:	404a      	eors	r2, r1
 801f6fa:	801a      	strh	r2, [r3, #0]
 801f6fc:	183b      	adds	r3, r7, r0
 801f6fe:	183a      	adds	r2, r7, r0
 801f700:	8812      	ldrh	r2, [r2, #0]
 801f702:	2180      	movs	r1, #128	@ 0x80
 801f704:	0189      	lsls	r1, r1, #6
 801f706:	404a      	eors	r2, r1
 801f708:	801a      	strh	r2, [r3, #0]
 801f70a:	687a      	ldr	r2, [r7, #4]
 801f70c:	683b      	ldr	r3, [r7, #0]
 801f70e:	781b      	ldrb	r3, [r3, #0]
 801f710:	009b      	lsls	r3, r3, #2
 801f712:	18d3      	adds	r3, r2, r3
 801f714:	183a      	adds	r2, r7, r0
 801f716:	8812      	ldrh	r2, [r2, #0]
 801f718:	49c6      	ldr	r1, [pc, #792]	@ (801fa34 <USB_ActivateEndpoint+0x6b4>)
 801f71a:	430a      	orrs	r2, r1
 801f71c:	b292      	uxth	r2, r2
 801f71e:	801a      	strh	r2, [r3, #0]
 801f720:	e1c2      	b.n	801faa8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f722:	687a      	ldr	r2, [r7, #4]
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	781b      	ldrb	r3, [r3, #0]
 801f728:	009b      	lsls	r3, r3, #2
 801f72a:	18d3      	adds	r3, r2, r3
 801f72c:	881b      	ldrh	r3, [r3, #0]
 801f72e:	b29a      	uxth	r2, r3
 801f730:	201e      	movs	r0, #30
 801f732:	183b      	adds	r3, r7, r0
 801f734:	49be      	ldr	r1, [pc, #760]	@ (801fa30 <USB_ActivateEndpoint+0x6b0>)
 801f736:	400a      	ands	r2, r1
 801f738:	801a      	strh	r2, [r3, #0]
 801f73a:	183b      	adds	r3, r7, r0
 801f73c:	183a      	adds	r2, r7, r0
 801f73e:	8812      	ldrh	r2, [r2, #0]
 801f740:	2180      	movs	r1, #128	@ 0x80
 801f742:	0189      	lsls	r1, r1, #6
 801f744:	404a      	eors	r2, r1
 801f746:	801a      	strh	r2, [r3, #0]
 801f748:	687a      	ldr	r2, [r7, #4]
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	781b      	ldrb	r3, [r3, #0]
 801f74e:	009b      	lsls	r3, r3, #2
 801f750:	18d3      	adds	r3, r2, r3
 801f752:	183a      	adds	r2, r7, r0
 801f754:	8812      	ldrh	r2, [r2, #0]
 801f756:	49b7      	ldr	r1, [pc, #732]	@ (801fa34 <USB_ActivateEndpoint+0x6b4>)
 801f758:	430a      	orrs	r2, r1
 801f75a:	b292      	uxth	r2, r2
 801f75c:	801a      	strh	r2, [r3, #0]
 801f75e:	e1a3      	b.n	801faa8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f760:	683b      	ldr	r3, [r7, #0]
 801f762:	78db      	ldrb	r3, [r3, #3]
 801f764:	2b02      	cmp	r3, #2
 801f766:	d117      	bne.n	801f798 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f768:	687a      	ldr	r2, [r7, #4]
 801f76a:	683b      	ldr	r3, [r7, #0]
 801f76c:	781b      	ldrb	r3, [r3, #0]
 801f76e:	009b      	lsls	r3, r3, #2
 801f770:	18d3      	adds	r3, r2, r3
 801f772:	881b      	ldrh	r3, [r3, #0]
 801f774:	b29a      	uxth	r2, r3
 801f776:	2062      	movs	r0, #98	@ 0x62
 801f778:	183b      	adds	r3, r7, r0
 801f77a:	49ab      	ldr	r1, [pc, #684]	@ (801fa28 <USB_ActivateEndpoint+0x6a8>)
 801f77c:	400a      	ands	r2, r1
 801f77e:	801a      	strh	r2, [r3, #0]
 801f780:	687a      	ldr	r2, [r7, #4]
 801f782:	683b      	ldr	r3, [r7, #0]
 801f784:	781b      	ldrb	r3, [r3, #0]
 801f786:	009b      	lsls	r3, r3, #2
 801f788:	18d3      	adds	r3, r2, r3
 801f78a:	183a      	adds	r2, r7, r0
 801f78c:	8812      	ldrh	r2, [r2, #0]
 801f78e:	49aa      	ldr	r1, [pc, #680]	@ (801fa38 <USB_ActivateEndpoint+0x6b8>)
 801f790:	430a      	orrs	r2, r1
 801f792:	b292      	uxth	r2, r2
 801f794:	801a      	strh	r2, [r3, #0]
 801f796:	e016      	b.n	801f7c6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f798:	687a      	ldr	r2, [r7, #4]
 801f79a:	683b      	ldr	r3, [r7, #0]
 801f79c:	781b      	ldrb	r3, [r3, #0]
 801f79e:	009b      	lsls	r3, r3, #2
 801f7a0:	18d3      	adds	r3, r2, r3
 801f7a2:	881b      	ldrh	r3, [r3, #0]
 801f7a4:	b29a      	uxth	r2, r3
 801f7a6:	2064      	movs	r0, #100	@ 0x64
 801f7a8:	183b      	adds	r3, r7, r0
 801f7aa:	49a4      	ldr	r1, [pc, #656]	@ (801fa3c <USB_ActivateEndpoint+0x6bc>)
 801f7ac:	400a      	ands	r2, r1
 801f7ae:	801a      	strh	r2, [r3, #0]
 801f7b0:	687a      	ldr	r2, [r7, #4]
 801f7b2:	683b      	ldr	r3, [r7, #0]
 801f7b4:	781b      	ldrb	r3, [r3, #0]
 801f7b6:	009b      	lsls	r3, r3, #2
 801f7b8:	18d3      	adds	r3, r2, r3
 801f7ba:	183a      	adds	r2, r7, r0
 801f7bc:	8812      	ldrh	r2, [r2, #0]
 801f7be:	499d      	ldr	r1, [pc, #628]	@ (801fa34 <USB_ActivateEndpoint+0x6b4>)
 801f7c0:	430a      	orrs	r2, r1
 801f7c2:	b292      	uxth	r2, r2
 801f7c4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	2250      	movs	r2, #80	@ 0x50
 801f7ce:	5a9b      	ldrh	r3, [r3, r2]
 801f7d0:	b29b      	uxth	r3, r3
 801f7d2:	001a      	movs	r2, r3
 801f7d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f7d6:	189b      	adds	r3, r3, r2
 801f7d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f7da:	683b      	ldr	r3, [r7, #0]
 801f7dc:	781b      	ldrb	r3, [r3, #0]
 801f7de:	00da      	lsls	r2, r3, #3
 801f7e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f7e2:	18d3      	adds	r3, r2, r3
 801f7e4:	2280      	movs	r2, #128	@ 0x80
 801f7e6:	00d2      	lsls	r2, r2, #3
 801f7e8:	4694      	mov	ip, r2
 801f7ea:	4463      	add	r3, ip
 801f7ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f7ee:	683b      	ldr	r3, [r7, #0]
 801f7f0:	891b      	ldrh	r3, [r3, #8]
 801f7f2:	085b      	lsrs	r3, r3, #1
 801f7f4:	b29b      	uxth	r3, r3
 801f7f6:	18db      	adds	r3, r3, r3
 801f7f8:	b29a      	uxth	r2, r3
 801f7fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f7fc:	801a      	strh	r2, [r3, #0]
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	657b      	str	r3, [r7, #84]	@ 0x54
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	2250      	movs	r2, #80	@ 0x50
 801f806:	5a9b      	ldrh	r3, [r3, r2]
 801f808:	b29b      	uxth	r3, r3
 801f80a:	001a      	movs	r2, r3
 801f80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f80e:	189b      	adds	r3, r3, r2
 801f810:	657b      	str	r3, [r7, #84]	@ 0x54
 801f812:	683b      	ldr	r3, [r7, #0]
 801f814:	781b      	ldrb	r3, [r3, #0]
 801f816:	00da      	lsls	r2, r3, #3
 801f818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f81a:	18d3      	adds	r3, r2, r3
 801f81c:	4a88      	ldr	r2, [pc, #544]	@ (801fa40 <USB_ActivateEndpoint+0x6c0>)
 801f81e:	4694      	mov	ip, r2
 801f820:	4463      	add	r3, ip
 801f822:	653b      	str	r3, [r7, #80]	@ 0x50
 801f824:	683b      	ldr	r3, [r7, #0]
 801f826:	895b      	ldrh	r3, [r3, #10]
 801f828:	085b      	lsrs	r3, r3, #1
 801f82a:	b29b      	uxth	r3, r3
 801f82c:	18db      	adds	r3, r3, r3
 801f82e:	b29a      	uxth	r2, r3
 801f830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f832:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801f834:	683b      	ldr	r3, [r7, #0]
 801f836:	785b      	ldrb	r3, [r3, #1]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d000      	beq.n	801f83e <USB_ActivateEndpoint+0x4be>
 801f83c:	e087      	b.n	801f94e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f83e:	687a      	ldr	r2, [r7, #4]
 801f840:	683b      	ldr	r3, [r7, #0]
 801f842:	781b      	ldrb	r3, [r3, #0]
 801f844:	009b      	lsls	r3, r3, #2
 801f846:	18d2      	adds	r2, r2, r3
 801f848:	2140      	movs	r1, #64	@ 0x40
 801f84a:	187b      	adds	r3, r7, r1
 801f84c:	8812      	ldrh	r2, [r2, #0]
 801f84e:	801a      	strh	r2, [r3, #0]
 801f850:	187b      	adds	r3, r7, r1
 801f852:	881a      	ldrh	r2, [r3, #0]
 801f854:	2380      	movs	r3, #128	@ 0x80
 801f856:	01db      	lsls	r3, r3, #7
 801f858:	4013      	ands	r3, r2
 801f85a:	d016      	beq.n	801f88a <USB_ActivateEndpoint+0x50a>
 801f85c:	687a      	ldr	r2, [r7, #4]
 801f85e:	683b      	ldr	r3, [r7, #0]
 801f860:	781b      	ldrb	r3, [r3, #0]
 801f862:	009b      	lsls	r3, r3, #2
 801f864:	18d3      	adds	r3, r2, r3
 801f866:	881b      	ldrh	r3, [r3, #0]
 801f868:	b29a      	uxth	r2, r3
 801f86a:	203e      	movs	r0, #62	@ 0x3e
 801f86c:	183b      	adds	r3, r7, r0
 801f86e:	496e      	ldr	r1, [pc, #440]	@ (801fa28 <USB_ActivateEndpoint+0x6a8>)
 801f870:	400a      	ands	r2, r1
 801f872:	801a      	strh	r2, [r3, #0]
 801f874:	687a      	ldr	r2, [r7, #4]
 801f876:	683b      	ldr	r3, [r7, #0]
 801f878:	781b      	ldrb	r3, [r3, #0]
 801f87a:	009b      	lsls	r3, r3, #2
 801f87c:	18d3      	adds	r3, r2, r3
 801f87e:	183a      	adds	r2, r7, r0
 801f880:	8812      	ldrh	r2, [r2, #0]
 801f882:	496a      	ldr	r1, [pc, #424]	@ (801fa2c <USB_ActivateEndpoint+0x6ac>)
 801f884:	430a      	orrs	r2, r1
 801f886:	b292      	uxth	r2, r2
 801f888:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f88a:	687a      	ldr	r2, [r7, #4]
 801f88c:	683b      	ldr	r3, [r7, #0]
 801f88e:	781b      	ldrb	r3, [r3, #0]
 801f890:	009b      	lsls	r3, r3, #2
 801f892:	18d2      	adds	r2, r2, r3
 801f894:	213c      	movs	r1, #60	@ 0x3c
 801f896:	187b      	adds	r3, r7, r1
 801f898:	8812      	ldrh	r2, [r2, #0]
 801f89a:	801a      	strh	r2, [r3, #0]
 801f89c:	187b      	adds	r3, r7, r1
 801f89e:	881b      	ldrh	r3, [r3, #0]
 801f8a0:	2240      	movs	r2, #64	@ 0x40
 801f8a2:	4013      	ands	r3, r2
 801f8a4:	d016      	beq.n	801f8d4 <USB_ActivateEndpoint+0x554>
 801f8a6:	687a      	ldr	r2, [r7, #4]
 801f8a8:	683b      	ldr	r3, [r7, #0]
 801f8aa:	781b      	ldrb	r3, [r3, #0]
 801f8ac:	009b      	lsls	r3, r3, #2
 801f8ae:	18d3      	adds	r3, r2, r3
 801f8b0:	881b      	ldrh	r3, [r3, #0]
 801f8b2:	b29a      	uxth	r2, r3
 801f8b4:	203a      	movs	r0, #58	@ 0x3a
 801f8b6:	183b      	adds	r3, r7, r0
 801f8b8:	495b      	ldr	r1, [pc, #364]	@ (801fa28 <USB_ActivateEndpoint+0x6a8>)
 801f8ba:	400a      	ands	r2, r1
 801f8bc:	801a      	strh	r2, [r3, #0]
 801f8be:	687a      	ldr	r2, [r7, #4]
 801f8c0:	683b      	ldr	r3, [r7, #0]
 801f8c2:	781b      	ldrb	r3, [r3, #0]
 801f8c4:	009b      	lsls	r3, r3, #2
 801f8c6:	18d3      	adds	r3, r2, r3
 801f8c8:	183a      	adds	r2, r7, r0
 801f8ca:	8812      	ldrh	r2, [r2, #0]
 801f8cc:	495d      	ldr	r1, [pc, #372]	@ (801fa44 <USB_ActivateEndpoint+0x6c4>)
 801f8ce:	430a      	orrs	r2, r1
 801f8d0:	b292      	uxth	r2, r2
 801f8d2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f8d4:	687a      	ldr	r2, [r7, #4]
 801f8d6:	683b      	ldr	r3, [r7, #0]
 801f8d8:	781b      	ldrb	r3, [r3, #0]
 801f8da:	009b      	lsls	r3, r3, #2
 801f8dc:	18d3      	adds	r3, r2, r3
 801f8de:	881b      	ldrh	r3, [r3, #0]
 801f8e0:	b29a      	uxth	r2, r3
 801f8e2:	2038      	movs	r0, #56	@ 0x38
 801f8e4:	183b      	adds	r3, r7, r0
 801f8e6:	4952      	ldr	r1, [pc, #328]	@ (801fa30 <USB_ActivateEndpoint+0x6b0>)
 801f8e8:	400a      	ands	r2, r1
 801f8ea:	801a      	strh	r2, [r3, #0]
 801f8ec:	183b      	adds	r3, r7, r0
 801f8ee:	183a      	adds	r2, r7, r0
 801f8f0:	8812      	ldrh	r2, [r2, #0]
 801f8f2:	2180      	movs	r1, #128	@ 0x80
 801f8f4:	0149      	lsls	r1, r1, #5
 801f8f6:	404a      	eors	r2, r1
 801f8f8:	801a      	strh	r2, [r3, #0]
 801f8fa:	183b      	adds	r3, r7, r0
 801f8fc:	183a      	adds	r2, r7, r0
 801f8fe:	8812      	ldrh	r2, [r2, #0]
 801f900:	2180      	movs	r1, #128	@ 0x80
 801f902:	0189      	lsls	r1, r1, #6
 801f904:	404a      	eors	r2, r1
 801f906:	801a      	strh	r2, [r3, #0]
 801f908:	687a      	ldr	r2, [r7, #4]
 801f90a:	683b      	ldr	r3, [r7, #0]
 801f90c:	781b      	ldrb	r3, [r3, #0]
 801f90e:	009b      	lsls	r3, r3, #2
 801f910:	18d3      	adds	r3, r2, r3
 801f912:	183a      	adds	r2, r7, r0
 801f914:	8812      	ldrh	r2, [r2, #0]
 801f916:	4947      	ldr	r1, [pc, #284]	@ (801fa34 <USB_ActivateEndpoint+0x6b4>)
 801f918:	430a      	orrs	r2, r1
 801f91a:	b292      	uxth	r2, r2
 801f91c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f91e:	687a      	ldr	r2, [r7, #4]
 801f920:	683b      	ldr	r3, [r7, #0]
 801f922:	781b      	ldrb	r3, [r3, #0]
 801f924:	009b      	lsls	r3, r3, #2
 801f926:	18d3      	adds	r3, r2, r3
 801f928:	881b      	ldrh	r3, [r3, #0]
 801f92a:	b29a      	uxth	r2, r3
 801f92c:	2036      	movs	r0, #54	@ 0x36
 801f92e:	183b      	adds	r3, r7, r0
 801f930:	4945      	ldr	r1, [pc, #276]	@ (801fa48 <USB_ActivateEndpoint+0x6c8>)
 801f932:	400a      	ands	r2, r1
 801f934:	801a      	strh	r2, [r3, #0]
 801f936:	687a      	ldr	r2, [r7, #4]
 801f938:	683b      	ldr	r3, [r7, #0]
 801f93a:	781b      	ldrb	r3, [r3, #0]
 801f93c:	009b      	lsls	r3, r3, #2
 801f93e:	18d3      	adds	r3, r2, r3
 801f940:	183a      	adds	r2, r7, r0
 801f942:	8812      	ldrh	r2, [r2, #0]
 801f944:	493b      	ldr	r1, [pc, #236]	@ (801fa34 <USB_ActivateEndpoint+0x6b4>)
 801f946:	430a      	orrs	r2, r1
 801f948:	b292      	uxth	r2, r2
 801f94a:	801a      	strh	r2, [r3, #0]
 801f94c:	e0ac      	b.n	801faa8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f94e:	687a      	ldr	r2, [r7, #4]
 801f950:	683b      	ldr	r3, [r7, #0]
 801f952:	781b      	ldrb	r3, [r3, #0]
 801f954:	009b      	lsls	r3, r3, #2
 801f956:	18d2      	adds	r2, r2, r3
 801f958:	214e      	movs	r1, #78	@ 0x4e
 801f95a:	187b      	adds	r3, r7, r1
 801f95c:	8812      	ldrh	r2, [r2, #0]
 801f95e:	801a      	strh	r2, [r3, #0]
 801f960:	187b      	adds	r3, r7, r1
 801f962:	881a      	ldrh	r2, [r3, #0]
 801f964:	2380      	movs	r3, #128	@ 0x80
 801f966:	01db      	lsls	r3, r3, #7
 801f968:	4013      	ands	r3, r2
 801f96a:	d016      	beq.n	801f99a <USB_ActivateEndpoint+0x61a>
 801f96c:	687a      	ldr	r2, [r7, #4]
 801f96e:	683b      	ldr	r3, [r7, #0]
 801f970:	781b      	ldrb	r3, [r3, #0]
 801f972:	009b      	lsls	r3, r3, #2
 801f974:	18d3      	adds	r3, r2, r3
 801f976:	881b      	ldrh	r3, [r3, #0]
 801f978:	b29a      	uxth	r2, r3
 801f97a:	204c      	movs	r0, #76	@ 0x4c
 801f97c:	183b      	adds	r3, r7, r0
 801f97e:	492a      	ldr	r1, [pc, #168]	@ (801fa28 <USB_ActivateEndpoint+0x6a8>)
 801f980:	400a      	ands	r2, r1
 801f982:	801a      	strh	r2, [r3, #0]
 801f984:	687a      	ldr	r2, [r7, #4]
 801f986:	683b      	ldr	r3, [r7, #0]
 801f988:	781b      	ldrb	r3, [r3, #0]
 801f98a:	009b      	lsls	r3, r3, #2
 801f98c:	18d3      	adds	r3, r2, r3
 801f98e:	183a      	adds	r2, r7, r0
 801f990:	8812      	ldrh	r2, [r2, #0]
 801f992:	4926      	ldr	r1, [pc, #152]	@ (801fa2c <USB_ActivateEndpoint+0x6ac>)
 801f994:	430a      	orrs	r2, r1
 801f996:	b292      	uxth	r2, r2
 801f998:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f99a:	687a      	ldr	r2, [r7, #4]
 801f99c:	683b      	ldr	r3, [r7, #0]
 801f99e:	781b      	ldrb	r3, [r3, #0]
 801f9a0:	009b      	lsls	r3, r3, #2
 801f9a2:	18d2      	adds	r2, r2, r3
 801f9a4:	214a      	movs	r1, #74	@ 0x4a
 801f9a6:	187b      	adds	r3, r7, r1
 801f9a8:	8812      	ldrh	r2, [r2, #0]
 801f9aa:	801a      	strh	r2, [r3, #0]
 801f9ac:	187b      	adds	r3, r7, r1
 801f9ae:	881b      	ldrh	r3, [r3, #0]
 801f9b0:	2240      	movs	r2, #64	@ 0x40
 801f9b2:	4013      	ands	r3, r2
 801f9b4:	d016      	beq.n	801f9e4 <USB_ActivateEndpoint+0x664>
 801f9b6:	687a      	ldr	r2, [r7, #4]
 801f9b8:	683b      	ldr	r3, [r7, #0]
 801f9ba:	781b      	ldrb	r3, [r3, #0]
 801f9bc:	009b      	lsls	r3, r3, #2
 801f9be:	18d3      	adds	r3, r2, r3
 801f9c0:	881b      	ldrh	r3, [r3, #0]
 801f9c2:	b29a      	uxth	r2, r3
 801f9c4:	2048      	movs	r0, #72	@ 0x48
 801f9c6:	183b      	adds	r3, r7, r0
 801f9c8:	4917      	ldr	r1, [pc, #92]	@ (801fa28 <USB_ActivateEndpoint+0x6a8>)
 801f9ca:	400a      	ands	r2, r1
 801f9cc:	801a      	strh	r2, [r3, #0]
 801f9ce:	687a      	ldr	r2, [r7, #4]
 801f9d0:	683b      	ldr	r3, [r7, #0]
 801f9d2:	781b      	ldrb	r3, [r3, #0]
 801f9d4:	009b      	lsls	r3, r3, #2
 801f9d6:	18d3      	adds	r3, r2, r3
 801f9d8:	183a      	adds	r2, r7, r0
 801f9da:	8812      	ldrh	r2, [r2, #0]
 801f9dc:	4919      	ldr	r1, [pc, #100]	@ (801fa44 <USB_ActivateEndpoint+0x6c4>)
 801f9de:	430a      	orrs	r2, r1
 801f9e0:	b292      	uxth	r2, r2
 801f9e2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f9e4:	683b      	ldr	r3, [r7, #0]
 801f9e6:	78db      	ldrb	r3, [r3, #3]
 801f9e8:	2b01      	cmp	r3, #1
 801f9ea:	d02f      	beq.n	801fa4c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f9ec:	687a      	ldr	r2, [r7, #4]
 801f9ee:	683b      	ldr	r3, [r7, #0]
 801f9f0:	781b      	ldrb	r3, [r3, #0]
 801f9f2:	009b      	lsls	r3, r3, #2
 801f9f4:	18d3      	adds	r3, r2, r3
 801f9f6:	881b      	ldrh	r3, [r3, #0]
 801f9f8:	b29a      	uxth	r2, r3
 801f9fa:	2044      	movs	r0, #68	@ 0x44
 801f9fc:	183b      	adds	r3, r7, r0
 801f9fe:	4912      	ldr	r1, [pc, #72]	@ (801fa48 <USB_ActivateEndpoint+0x6c8>)
 801fa00:	400a      	ands	r2, r1
 801fa02:	801a      	strh	r2, [r3, #0]
 801fa04:	183b      	adds	r3, r7, r0
 801fa06:	183a      	adds	r2, r7, r0
 801fa08:	8812      	ldrh	r2, [r2, #0]
 801fa0a:	2120      	movs	r1, #32
 801fa0c:	404a      	eors	r2, r1
 801fa0e:	801a      	strh	r2, [r3, #0]
 801fa10:	687a      	ldr	r2, [r7, #4]
 801fa12:	683b      	ldr	r3, [r7, #0]
 801fa14:	781b      	ldrb	r3, [r3, #0]
 801fa16:	009b      	lsls	r3, r3, #2
 801fa18:	18d3      	adds	r3, r2, r3
 801fa1a:	183a      	adds	r2, r7, r0
 801fa1c:	8812      	ldrh	r2, [r2, #0]
 801fa1e:	4905      	ldr	r1, [pc, #20]	@ (801fa34 <USB_ActivateEndpoint+0x6b4>)
 801fa20:	430a      	orrs	r2, r1
 801fa22:	b292      	uxth	r2, r2
 801fa24:	801a      	strh	r2, [r3, #0]
 801fa26:	e028      	b.n	801fa7a <USB_ActivateEndpoint+0x6fa>
 801fa28:	ffff8f8f 	.word	0xffff8f8f
 801fa2c:	ffffc080 	.word	0xffffc080
 801fa30:	ffffbf8f 	.word	0xffffbf8f
 801fa34:	ffff8080 	.word	0xffff8080
 801fa38:	ffff8180 	.word	0xffff8180
 801fa3c:	ffff8e8f 	.word	0xffff8e8f
 801fa40:	00000404 	.word	0x00000404
 801fa44:	ffff80c0 	.word	0xffff80c0
 801fa48:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fa4c:	687a      	ldr	r2, [r7, #4]
 801fa4e:	683b      	ldr	r3, [r7, #0]
 801fa50:	781b      	ldrb	r3, [r3, #0]
 801fa52:	009b      	lsls	r3, r3, #2
 801fa54:	18d3      	adds	r3, r2, r3
 801fa56:	881b      	ldrh	r3, [r3, #0]
 801fa58:	b29a      	uxth	r2, r3
 801fa5a:	2046      	movs	r0, #70	@ 0x46
 801fa5c:	183b      	adds	r3, r7, r0
 801fa5e:	4916      	ldr	r1, [pc, #88]	@ (801fab8 <USB_ActivateEndpoint+0x738>)
 801fa60:	400a      	ands	r2, r1
 801fa62:	801a      	strh	r2, [r3, #0]
 801fa64:	687a      	ldr	r2, [r7, #4]
 801fa66:	683b      	ldr	r3, [r7, #0]
 801fa68:	781b      	ldrb	r3, [r3, #0]
 801fa6a:	009b      	lsls	r3, r3, #2
 801fa6c:	18d3      	adds	r3, r2, r3
 801fa6e:	183a      	adds	r2, r7, r0
 801fa70:	8812      	ldrh	r2, [r2, #0]
 801fa72:	4912      	ldr	r1, [pc, #72]	@ (801fabc <USB_ActivateEndpoint+0x73c>)
 801fa74:	430a      	orrs	r2, r1
 801fa76:	b292      	uxth	r2, r2
 801fa78:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fa7a:	687a      	ldr	r2, [r7, #4]
 801fa7c:	683b      	ldr	r3, [r7, #0]
 801fa7e:	781b      	ldrb	r3, [r3, #0]
 801fa80:	009b      	lsls	r3, r3, #2
 801fa82:	18d3      	adds	r3, r2, r3
 801fa84:	881b      	ldrh	r3, [r3, #0]
 801fa86:	b29a      	uxth	r2, r3
 801fa88:	2042      	movs	r0, #66	@ 0x42
 801fa8a:	183b      	adds	r3, r7, r0
 801fa8c:	490c      	ldr	r1, [pc, #48]	@ (801fac0 <USB_ActivateEndpoint+0x740>)
 801fa8e:	400a      	ands	r2, r1
 801fa90:	801a      	strh	r2, [r3, #0]
 801fa92:	687a      	ldr	r2, [r7, #4]
 801fa94:	683b      	ldr	r3, [r7, #0]
 801fa96:	781b      	ldrb	r3, [r3, #0]
 801fa98:	009b      	lsls	r3, r3, #2
 801fa9a:	18d3      	adds	r3, r2, r3
 801fa9c:	183a      	adds	r2, r7, r0
 801fa9e:	8812      	ldrh	r2, [r2, #0]
 801faa0:	4906      	ldr	r1, [pc, #24]	@ (801fabc <USB_ActivateEndpoint+0x73c>)
 801faa2:	430a      	orrs	r2, r1
 801faa4:	b292      	uxth	r2, r2
 801faa6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801faa8:	236f      	movs	r3, #111	@ 0x6f
 801faaa:	18fb      	adds	r3, r7, r3
 801faac:	781b      	ldrb	r3, [r3, #0]
}
 801faae:	0018      	movs	r0, r3
 801fab0:	46bd      	mov	sp, r7
 801fab2:	b01c      	add	sp, #112	@ 0x70
 801fab4:	bd80      	pop	{r7, pc}
 801fab6:	46c0      	nop			@ (mov r8, r8)
 801fab8:	ffff8fbf 	.word	0xffff8fbf
 801fabc:	ffff8080 	.word	0xffff8080
 801fac0:	ffffbf8f 	.word	0xffffbf8f

0801fac4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fac4:	b580      	push	{r7, lr}
 801fac6:	b08c      	sub	sp, #48	@ 0x30
 801fac8:	af00      	add	r7, sp, #0
 801faca:	6078      	str	r0, [r7, #4]
 801facc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801face:	683b      	ldr	r3, [r7, #0]
 801fad0:	7b1b      	ldrb	r3, [r3, #12]
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d000      	beq.n	801fad8 <USB_DeactivateEndpoint+0x14>
 801fad6:	e07e      	b.n	801fbd6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fad8:	683b      	ldr	r3, [r7, #0]
 801fada:	785b      	ldrb	r3, [r3, #1]
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d03c      	beq.n	801fb5a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fae0:	687a      	ldr	r2, [r7, #4]
 801fae2:	683b      	ldr	r3, [r7, #0]
 801fae4:	781b      	ldrb	r3, [r3, #0]
 801fae6:	009b      	lsls	r3, r3, #2
 801fae8:	18d2      	adds	r2, r2, r3
 801faea:	210c      	movs	r1, #12
 801faec:	187b      	adds	r3, r7, r1
 801faee:	8812      	ldrh	r2, [r2, #0]
 801faf0:	801a      	strh	r2, [r3, #0]
 801faf2:	187b      	adds	r3, r7, r1
 801faf4:	881b      	ldrh	r3, [r3, #0]
 801faf6:	2240      	movs	r2, #64	@ 0x40
 801faf8:	4013      	ands	r3, r2
 801fafa:	d016      	beq.n	801fb2a <USB_DeactivateEndpoint+0x66>
 801fafc:	687a      	ldr	r2, [r7, #4]
 801fafe:	683b      	ldr	r3, [r7, #0]
 801fb00:	781b      	ldrb	r3, [r3, #0]
 801fb02:	009b      	lsls	r3, r3, #2
 801fb04:	18d3      	adds	r3, r2, r3
 801fb06:	881b      	ldrh	r3, [r3, #0]
 801fb08:	b29a      	uxth	r2, r3
 801fb0a:	200a      	movs	r0, #10
 801fb0c:	183b      	adds	r3, r7, r0
 801fb0e:	49c7      	ldr	r1, [pc, #796]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fb10:	400a      	ands	r2, r1
 801fb12:	801a      	strh	r2, [r3, #0]
 801fb14:	687a      	ldr	r2, [r7, #4]
 801fb16:	683b      	ldr	r3, [r7, #0]
 801fb18:	781b      	ldrb	r3, [r3, #0]
 801fb1a:	009b      	lsls	r3, r3, #2
 801fb1c:	18d3      	adds	r3, r2, r3
 801fb1e:	183a      	adds	r2, r7, r0
 801fb20:	8812      	ldrh	r2, [r2, #0]
 801fb22:	49c3      	ldr	r1, [pc, #780]	@ (801fe30 <USB_DeactivateEndpoint+0x36c>)
 801fb24:	430a      	orrs	r2, r1
 801fb26:	b292      	uxth	r2, r2
 801fb28:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fb2a:	687a      	ldr	r2, [r7, #4]
 801fb2c:	683b      	ldr	r3, [r7, #0]
 801fb2e:	781b      	ldrb	r3, [r3, #0]
 801fb30:	009b      	lsls	r3, r3, #2
 801fb32:	18d3      	adds	r3, r2, r3
 801fb34:	881b      	ldrh	r3, [r3, #0]
 801fb36:	b29a      	uxth	r2, r3
 801fb38:	2008      	movs	r0, #8
 801fb3a:	183b      	adds	r3, r7, r0
 801fb3c:	49bd      	ldr	r1, [pc, #756]	@ (801fe34 <USB_DeactivateEndpoint+0x370>)
 801fb3e:	400a      	ands	r2, r1
 801fb40:	801a      	strh	r2, [r3, #0]
 801fb42:	687a      	ldr	r2, [r7, #4]
 801fb44:	683b      	ldr	r3, [r7, #0]
 801fb46:	781b      	ldrb	r3, [r3, #0]
 801fb48:	009b      	lsls	r3, r3, #2
 801fb4a:	18d3      	adds	r3, r2, r3
 801fb4c:	183a      	adds	r2, r7, r0
 801fb4e:	8812      	ldrh	r2, [r2, #0]
 801fb50:	49b9      	ldr	r1, [pc, #740]	@ (801fe38 <USB_DeactivateEndpoint+0x374>)
 801fb52:	430a      	orrs	r2, r1
 801fb54:	b292      	uxth	r2, r2
 801fb56:	801a      	strh	r2, [r3, #0]
 801fb58:	e163      	b.n	801fe22 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fb5a:	687a      	ldr	r2, [r7, #4]
 801fb5c:	683b      	ldr	r3, [r7, #0]
 801fb5e:	781b      	ldrb	r3, [r3, #0]
 801fb60:	009b      	lsls	r3, r3, #2
 801fb62:	18d2      	adds	r2, r2, r3
 801fb64:	2112      	movs	r1, #18
 801fb66:	187b      	adds	r3, r7, r1
 801fb68:	8812      	ldrh	r2, [r2, #0]
 801fb6a:	801a      	strh	r2, [r3, #0]
 801fb6c:	187b      	adds	r3, r7, r1
 801fb6e:	881a      	ldrh	r2, [r3, #0]
 801fb70:	2380      	movs	r3, #128	@ 0x80
 801fb72:	01db      	lsls	r3, r3, #7
 801fb74:	4013      	ands	r3, r2
 801fb76:	d016      	beq.n	801fba6 <USB_DeactivateEndpoint+0xe2>
 801fb78:	687a      	ldr	r2, [r7, #4]
 801fb7a:	683b      	ldr	r3, [r7, #0]
 801fb7c:	781b      	ldrb	r3, [r3, #0]
 801fb7e:	009b      	lsls	r3, r3, #2
 801fb80:	18d3      	adds	r3, r2, r3
 801fb82:	881b      	ldrh	r3, [r3, #0]
 801fb84:	b29a      	uxth	r2, r3
 801fb86:	2010      	movs	r0, #16
 801fb88:	183b      	adds	r3, r7, r0
 801fb8a:	49a8      	ldr	r1, [pc, #672]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fb8c:	400a      	ands	r2, r1
 801fb8e:	801a      	strh	r2, [r3, #0]
 801fb90:	687a      	ldr	r2, [r7, #4]
 801fb92:	683b      	ldr	r3, [r7, #0]
 801fb94:	781b      	ldrb	r3, [r3, #0]
 801fb96:	009b      	lsls	r3, r3, #2
 801fb98:	18d3      	adds	r3, r2, r3
 801fb9a:	183a      	adds	r2, r7, r0
 801fb9c:	8812      	ldrh	r2, [r2, #0]
 801fb9e:	49a7      	ldr	r1, [pc, #668]	@ (801fe3c <USB_DeactivateEndpoint+0x378>)
 801fba0:	430a      	orrs	r2, r1
 801fba2:	b292      	uxth	r2, r2
 801fba4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fba6:	687a      	ldr	r2, [r7, #4]
 801fba8:	683b      	ldr	r3, [r7, #0]
 801fbaa:	781b      	ldrb	r3, [r3, #0]
 801fbac:	009b      	lsls	r3, r3, #2
 801fbae:	18d3      	adds	r3, r2, r3
 801fbb0:	881b      	ldrh	r3, [r3, #0]
 801fbb2:	b29a      	uxth	r2, r3
 801fbb4:	200e      	movs	r0, #14
 801fbb6:	183b      	adds	r3, r7, r0
 801fbb8:	49a1      	ldr	r1, [pc, #644]	@ (801fe40 <USB_DeactivateEndpoint+0x37c>)
 801fbba:	400a      	ands	r2, r1
 801fbbc:	801a      	strh	r2, [r3, #0]
 801fbbe:	687a      	ldr	r2, [r7, #4]
 801fbc0:	683b      	ldr	r3, [r7, #0]
 801fbc2:	781b      	ldrb	r3, [r3, #0]
 801fbc4:	009b      	lsls	r3, r3, #2
 801fbc6:	18d3      	adds	r3, r2, r3
 801fbc8:	183a      	adds	r2, r7, r0
 801fbca:	8812      	ldrh	r2, [r2, #0]
 801fbcc:	499a      	ldr	r1, [pc, #616]	@ (801fe38 <USB_DeactivateEndpoint+0x374>)
 801fbce:	430a      	orrs	r2, r1
 801fbd0:	b292      	uxth	r2, r2
 801fbd2:	801a      	strh	r2, [r3, #0]
 801fbd4:	e125      	b.n	801fe22 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fbd6:	683b      	ldr	r3, [r7, #0]
 801fbd8:	785b      	ldrb	r3, [r3, #1]
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d000      	beq.n	801fbe0 <USB_DeactivateEndpoint+0x11c>
 801fbde:	e090      	b.n	801fd02 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fbe0:	687a      	ldr	r2, [r7, #4]
 801fbe2:	683b      	ldr	r3, [r7, #0]
 801fbe4:	781b      	ldrb	r3, [r3, #0]
 801fbe6:	009b      	lsls	r3, r3, #2
 801fbe8:	18d2      	adds	r2, r2, r3
 801fbea:	2120      	movs	r1, #32
 801fbec:	187b      	adds	r3, r7, r1
 801fbee:	8812      	ldrh	r2, [r2, #0]
 801fbf0:	801a      	strh	r2, [r3, #0]
 801fbf2:	187b      	adds	r3, r7, r1
 801fbf4:	881a      	ldrh	r2, [r3, #0]
 801fbf6:	2380      	movs	r3, #128	@ 0x80
 801fbf8:	01db      	lsls	r3, r3, #7
 801fbfa:	4013      	ands	r3, r2
 801fbfc:	d016      	beq.n	801fc2c <USB_DeactivateEndpoint+0x168>
 801fbfe:	687a      	ldr	r2, [r7, #4]
 801fc00:	683b      	ldr	r3, [r7, #0]
 801fc02:	781b      	ldrb	r3, [r3, #0]
 801fc04:	009b      	lsls	r3, r3, #2
 801fc06:	18d3      	adds	r3, r2, r3
 801fc08:	881b      	ldrh	r3, [r3, #0]
 801fc0a:	b29a      	uxth	r2, r3
 801fc0c:	201e      	movs	r0, #30
 801fc0e:	183b      	adds	r3, r7, r0
 801fc10:	4986      	ldr	r1, [pc, #536]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fc12:	400a      	ands	r2, r1
 801fc14:	801a      	strh	r2, [r3, #0]
 801fc16:	687a      	ldr	r2, [r7, #4]
 801fc18:	683b      	ldr	r3, [r7, #0]
 801fc1a:	781b      	ldrb	r3, [r3, #0]
 801fc1c:	009b      	lsls	r3, r3, #2
 801fc1e:	18d3      	adds	r3, r2, r3
 801fc20:	183a      	adds	r2, r7, r0
 801fc22:	8812      	ldrh	r2, [r2, #0]
 801fc24:	4985      	ldr	r1, [pc, #532]	@ (801fe3c <USB_DeactivateEndpoint+0x378>)
 801fc26:	430a      	orrs	r2, r1
 801fc28:	b292      	uxth	r2, r2
 801fc2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fc2c:	687a      	ldr	r2, [r7, #4]
 801fc2e:	683b      	ldr	r3, [r7, #0]
 801fc30:	781b      	ldrb	r3, [r3, #0]
 801fc32:	009b      	lsls	r3, r3, #2
 801fc34:	18d2      	adds	r2, r2, r3
 801fc36:	211c      	movs	r1, #28
 801fc38:	187b      	adds	r3, r7, r1
 801fc3a:	8812      	ldrh	r2, [r2, #0]
 801fc3c:	801a      	strh	r2, [r3, #0]
 801fc3e:	187b      	adds	r3, r7, r1
 801fc40:	881b      	ldrh	r3, [r3, #0]
 801fc42:	2240      	movs	r2, #64	@ 0x40
 801fc44:	4013      	ands	r3, r2
 801fc46:	d016      	beq.n	801fc76 <USB_DeactivateEndpoint+0x1b2>
 801fc48:	687a      	ldr	r2, [r7, #4]
 801fc4a:	683b      	ldr	r3, [r7, #0]
 801fc4c:	781b      	ldrb	r3, [r3, #0]
 801fc4e:	009b      	lsls	r3, r3, #2
 801fc50:	18d3      	adds	r3, r2, r3
 801fc52:	881b      	ldrh	r3, [r3, #0]
 801fc54:	b29a      	uxth	r2, r3
 801fc56:	201a      	movs	r0, #26
 801fc58:	183b      	adds	r3, r7, r0
 801fc5a:	4974      	ldr	r1, [pc, #464]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fc5c:	400a      	ands	r2, r1
 801fc5e:	801a      	strh	r2, [r3, #0]
 801fc60:	687a      	ldr	r2, [r7, #4]
 801fc62:	683b      	ldr	r3, [r7, #0]
 801fc64:	781b      	ldrb	r3, [r3, #0]
 801fc66:	009b      	lsls	r3, r3, #2
 801fc68:	18d3      	adds	r3, r2, r3
 801fc6a:	183a      	adds	r2, r7, r0
 801fc6c:	8812      	ldrh	r2, [r2, #0]
 801fc6e:	4970      	ldr	r1, [pc, #448]	@ (801fe30 <USB_DeactivateEndpoint+0x36c>)
 801fc70:	430a      	orrs	r2, r1
 801fc72:	b292      	uxth	r2, r2
 801fc74:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801fc76:	687a      	ldr	r2, [r7, #4]
 801fc78:	683b      	ldr	r3, [r7, #0]
 801fc7a:	781b      	ldrb	r3, [r3, #0]
 801fc7c:	009b      	lsls	r3, r3, #2
 801fc7e:	18d3      	adds	r3, r2, r3
 801fc80:	881b      	ldrh	r3, [r3, #0]
 801fc82:	b29a      	uxth	r2, r3
 801fc84:	2018      	movs	r0, #24
 801fc86:	183b      	adds	r3, r7, r0
 801fc88:	4968      	ldr	r1, [pc, #416]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fc8a:	400a      	ands	r2, r1
 801fc8c:	801a      	strh	r2, [r3, #0]
 801fc8e:	687a      	ldr	r2, [r7, #4]
 801fc90:	683b      	ldr	r3, [r7, #0]
 801fc92:	781b      	ldrb	r3, [r3, #0]
 801fc94:	009b      	lsls	r3, r3, #2
 801fc96:	18d3      	adds	r3, r2, r3
 801fc98:	183a      	adds	r2, r7, r0
 801fc9a:	8812      	ldrh	r2, [r2, #0]
 801fc9c:	4964      	ldr	r1, [pc, #400]	@ (801fe30 <USB_DeactivateEndpoint+0x36c>)
 801fc9e:	430a      	orrs	r2, r1
 801fca0:	b292      	uxth	r2, r2
 801fca2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fca4:	687a      	ldr	r2, [r7, #4]
 801fca6:	683b      	ldr	r3, [r7, #0]
 801fca8:	781b      	ldrb	r3, [r3, #0]
 801fcaa:	009b      	lsls	r3, r3, #2
 801fcac:	18d3      	adds	r3, r2, r3
 801fcae:	881b      	ldrh	r3, [r3, #0]
 801fcb0:	b29a      	uxth	r2, r3
 801fcb2:	2016      	movs	r0, #22
 801fcb4:	183b      	adds	r3, r7, r0
 801fcb6:	4962      	ldr	r1, [pc, #392]	@ (801fe40 <USB_DeactivateEndpoint+0x37c>)
 801fcb8:	400a      	ands	r2, r1
 801fcba:	801a      	strh	r2, [r3, #0]
 801fcbc:	687a      	ldr	r2, [r7, #4]
 801fcbe:	683b      	ldr	r3, [r7, #0]
 801fcc0:	781b      	ldrb	r3, [r3, #0]
 801fcc2:	009b      	lsls	r3, r3, #2
 801fcc4:	18d3      	adds	r3, r2, r3
 801fcc6:	183a      	adds	r2, r7, r0
 801fcc8:	8812      	ldrh	r2, [r2, #0]
 801fcca:	495b      	ldr	r1, [pc, #364]	@ (801fe38 <USB_DeactivateEndpoint+0x374>)
 801fccc:	430a      	orrs	r2, r1
 801fcce:	b292      	uxth	r2, r2
 801fcd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fcd2:	687a      	ldr	r2, [r7, #4]
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	781b      	ldrb	r3, [r3, #0]
 801fcd8:	009b      	lsls	r3, r3, #2
 801fcda:	18d3      	adds	r3, r2, r3
 801fcdc:	881b      	ldrh	r3, [r3, #0]
 801fcde:	b29a      	uxth	r2, r3
 801fce0:	2014      	movs	r0, #20
 801fce2:	183b      	adds	r3, r7, r0
 801fce4:	4953      	ldr	r1, [pc, #332]	@ (801fe34 <USB_DeactivateEndpoint+0x370>)
 801fce6:	400a      	ands	r2, r1
 801fce8:	801a      	strh	r2, [r3, #0]
 801fcea:	687a      	ldr	r2, [r7, #4]
 801fcec:	683b      	ldr	r3, [r7, #0]
 801fcee:	781b      	ldrb	r3, [r3, #0]
 801fcf0:	009b      	lsls	r3, r3, #2
 801fcf2:	18d3      	adds	r3, r2, r3
 801fcf4:	183a      	adds	r2, r7, r0
 801fcf6:	8812      	ldrh	r2, [r2, #0]
 801fcf8:	494f      	ldr	r1, [pc, #316]	@ (801fe38 <USB_DeactivateEndpoint+0x374>)
 801fcfa:	430a      	orrs	r2, r1
 801fcfc:	b292      	uxth	r2, r2
 801fcfe:	801a      	strh	r2, [r3, #0]
 801fd00:	e08f      	b.n	801fe22 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fd02:	687a      	ldr	r2, [r7, #4]
 801fd04:	683b      	ldr	r3, [r7, #0]
 801fd06:	781b      	ldrb	r3, [r3, #0]
 801fd08:	009b      	lsls	r3, r3, #2
 801fd0a:	18d2      	adds	r2, r2, r3
 801fd0c:	212e      	movs	r1, #46	@ 0x2e
 801fd0e:	187b      	adds	r3, r7, r1
 801fd10:	8812      	ldrh	r2, [r2, #0]
 801fd12:	801a      	strh	r2, [r3, #0]
 801fd14:	187b      	adds	r3, r7, r1
 801fd16:	881a      	ldrh	r2, [r3, #0]
 801fd18:	2380      	movs	r3, #128	@ 0x80
 801fd1a:	01db      	lsls	r3, r3, #7
 801fd1c:	4013      	ands	r3, r2
 801fd1e:	d016      	beq.n	801fd4e <USB_DeactivateEndpoint+0x28a>
 801fd20:	687a      	ldr	r2, [r7, #4]
 801fd22:	683b      	ldr	r3, [r7, #0]
 801fd24:	781b      	ldrb	r3, [r3, #0]
 801fd26:	009b      	lsls	r3, r3, #2
 801fd28:	18d3      	adds	r3, r2, r3
 801fd2a:	881b      	ldrh	r3, [r3, #0]
 801fd2c:	b29a      	uxth	r2, r3
 801fd2e:	202c      	movs	r0, #44	@ 0x2c
 801fd30:	183b      	adds	r3, r7, r0
 801fd32:	493e      	ldr	r1, [pc, #248]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fd34:	400a      	ands	r2, r1
 801fd36:	801a      	strh	r2, [r3, #0]
 801fd38:	687a      	ldr	r2, [r7, #4]
 801fd3a:	683b      	ldr	r3, [r7, #0]
 801fd3c:	781b      	ldrb	r3, [r3, #0]
 801fd3e:	009b      	lsls	r3, r3, #2
 801fd40:	18d3      	adds	r3, r2, r3
 801fd42:	183a      	adds	r2, r7, r0
 801fd44:	8812      	ldrh	r2, [r2, #0]
 801fd46:	493d      	ldr	r1, [pc, #244]	@ (801fe3c <USB_DeactivateEndpoint+0x378>)
 801fd48:	430a      	orrs	r2, r1
 801fd4a:	b292      	uxth	r2, r2
 801fd4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fd4e:	687a      	ldr	r2, [r7, #4]
 801fd50:	683b      	ldr	r3, [r7, #0]
 801fd52:	781b      	ldrb	r3, [r3, #0]
 801fd54:	009b      	lsls	r3, r3, #2
 801fd56:	18d2      	adds	r2, r2, r3
 801fd58:	212a      	movs	r1, #42	@ 0x2a
 801fd5a:	187b      	adds	r3, r7, r1
 801fd5c:	8812      	ldrh	r2, [r2, #0]
 801fd5e:	801a      	strh	r2, [r3, #0]
 801fd60:	187b      	adds	r3, r7, r1
 801fd62:	881b      	ldrh	r3, [r3, #0]
 801fd64:	2240      	movs	r2, #64	@ 0x40
 801fd66:	4013      	ands	r3, r2
 801fd68:	d016      	beq.n	801fd98 <USB_DeactivateEndpoint+0x2d4>
 801fd6a:	687a      	ldr	r2, [r7, #4]
 801fd6c:	683b      	ldr	r3, [r7, #0]
 801fd6e:	781b      	ldrb	r3, [r3, #0]
 801fd70:	009b      	lsls	r3, r3, #2
 801fd72:	18d3      	adds	r3, r2, r3
 801fd74:	881b      	ldrh	r3, [r3, #0]
 801fd76:	b29a      	uxth	r2, r3
 801fd78:	2028      	movs	r0, #40	@ 0x28
 801fd7a:	183b      	adds	r3, r7, r0
 801fd7c:	492b      	ldr	r1, [pc, #172]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fd7e:	400a      	ands	r2, r1
 801fd80:	801a      	strh	r2, [r3, #0]
 801fd82:	687a      	ldr	r2, [r7, #4]
 801fd84:	683b      	ldr	r3, [r7, #0]
 801fd86:	781b      	ldrb	r3, [r3, #0]
 801fd88:	009b      	lsls	r3, r3, #2
 801fd8a:	18d3      	adds	r3, r2, r3
 801fd8c:	183a      	adds	r2, r7, r0
 801fd8e:	8812      	ldrh	r2, [r2, #0]
 801fd90:	4927      	ldr	r1, [pc, #156]	@ (801fe30 <USB_DeactivateEndpoint+0x36c>)
 801fd92:	430a      	orrs	r2, r1
 801fd94:	b292      	uxth	r2, r2
 801fd96:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801fd98:	687a      	ldr	r2, [r7, #4]
 801fd9a:	683b      	ldr	r3, [r7, #0]
 801fd9c:	781b      	ldrb	r3, [r3, #0]
 801fd9e:	009b      	lsls	r3, r3, #2
 801fda0:	18d3      	adds	r3, r2, r3
 801fda2:	881b      	ldrh	r3, [r3, #0]
 801fda4:	b29a      	uxth	r2, r3
 801fda6:	2026      	movs	r0, #38	@ 0x26
 801fda8:	183b      	adds	r3, r7, r0
 801fdaa:	4920      	ldr	r1, [pc, #128]	@ (801fe2c <USB_DeactivateEndpoint+0x368>)
 801fdac:	400a      	ands	r2, r1
 801fdae:	801a      	strh	r2, [r3, #0]
 801fdb0:	687a      	ldr	r2, [r7, #4]
 801fdb2:	683b      	ldr	r3, [r7, #0]
 801fdb4:	781b      	ldrb	r3, [r3, #0]
 801fdb6:	009b      	lsls	r3, r3, #2
 801fdb8:	18d3      	adds	r3, r2, r3
 801fdba:	183a      	adds	r2, r7, r0
 801fdbc:	8812      	ldrh	r2, [r2, #0]
 801fdbe:	491f      	ldr	r1, [pc, #124]	@ (801fe3c <USB_DeactivateEndpoint+0x378>)
 801fdc0:	430a      	orrs	r2, r1
 801fdc2:	b292      	uxth	r2, r2
 801fdc4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fdc6:	687a      	ldr	r2, [r7, #4]
 801fdc8:	683b      	ldr	r3, [r7, #0]
 801fdca:	781b      	ldrb	r3, [r3, #0]
 801fdcc:	009b      	lsls	r3, r3, #2
 801fdce:	18d3      	adds	r3, r2, r3
 801fdd0:	881b      	ldrh	r3, [r3, #0]
 801fdd2:	b29a      	uxth	r2, r3
 801fdd4:	2024      	movs	r0, #36	@ 0x24
 801fdd6:	183b      	adds	r3, r7, r0
 801fdd8:	4916      	ldr	r1, [pc, #88]	@ (801fe34 <USB_DeactivateEndpoint+0x370>)
 801fdda:	400a      	ands	r2, r1
 801fddc:	801a      	strh	r2, [r3, #0]
 801fdde:	687a      	ldr	r2, [r7, #4]
 801fde0:	683b      	ldr	r3, [r7, #0]
 801fde2:	781b      	ldrb	r3, [r3, #0]
 801fde4:	009b      	lsls	r3, r3, #2
 801fde6:	18d3      	adds	r3, r2, r3
 801fde8:	183a      	adds	r2, r7, r0
 801fdea:	8812      	ldrh	r2, [r2, #0]
 801fdec:	4912      	ldr	r1, [pc, #72]	@ (801fe38 <USB_DeactivateEndpoint+0x374>)
 801fdee:	430a      	orrs	r2, r1
 801fdf0:	b292      	uxth	r2, r2
 801fdf2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fdf4:	687a      	ldr	r2, [r7, #4]
 801fdf6:	683b      	ldr	r3, [r7, #0]
 801fdf8:	781b      	ldrb	r3, [r3, #0]
 801fdfa:	009b      	lsls	r3, r3, #2
 801fdfc:	18d3      	adds	r3, r2, r3
 801fdfe:	881b      	ldrh	r3, [r3, #0]
 801fe00:	b29a      	uxth	r2, r3
 801fe02:	2022      	movs	r0, #34	@ 0x22
 801fe04:	183b      	adds	r3, r7, r0
 801fe06:	490e      	ldr	r1, [pc, #56]	@ (801fe40 <USB_DeactivateEndpoint+0x37c>)
 801fe08:	400a      	ands	r2, r1
 801fe0a:	801a      	strh	r2, [r3, #0]
 801fe0c:	687a      	ldr	r2, [r7, #4]
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	781b      	ldrb	r3, [r3, #0]
 801fe12:	009b      	lsls	r3, r3, #2
 801fe14:	18d3      	adds	r3, r2, r3
 801fe16:	183a      	adds	r2, r7, r0
 801fe18:	8812      	ldrh	r2, [r2, #0]
 801fe1a:	4907      	ldr	r1, [pc, #28]	@ (801fe38 <USB_DeactivateEndpoint+0x374>)
 801fe1c:	430a      	orrs	r2, r1
 801fe1e:	b292      	uxth	r2, r2
 801fe20:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801fe22:	2300      	movs	r3, #0
}
 801fe24:	0018      	movs	r0, r3
 801fe26:	46bd      	mov	sp, r7
 801fe28:	b00c      	add	sp, #48	@ 0x30
 801fe2a:	bd80      	pop	{r7, pc}
 801fe2c:	ffff8f8f 	.word	0xffff8f8f
 801fe30:	ffff80c0 	.word	0xffff80c0
 801fe34:	ffff8fbf 	.word	0xffff8fbf
 801fe38:	ffff8080 	.word	0xffff8080
 801fe3c:	ffffc080 	.word	0xffffc080
 801fe40:	ffffbf8f 	.word	0xffffbf8f

0801fe44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fe44:	b590      	push	{r4, r7, lr}
 801fe46:	b0c3      	sub	sp, #268	@ 0x10c
 801fe48:	af00      	add	r7, sp, #0
 801fe4a:	6078      	str	r0, [r7, #4]
 801fe4c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801fe4e:	683b      	ldr	r3, [r7, #0]
 801fe50:	785b      	ldrb	r3, [r3, #1]
 801fe52:	2b01      	cmp	r3, #1
 801fe54:	d001      	beq.n	801fe5a <USB_EPStartXfer+0x16>
 801fe56:	f000 fd2d 	bl	80208b4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801fe5a:	683b      	ldr	r3, [r7, #0]
 801fe5c:	699a      	ldr	r2, [r3, #24]
 801fe5e:	683b      	ldr	r3, [r7, #0]
 801fe60:	691b      	ldr	r3, [r3, #16]
 801fe62:	429a      	cmp	r2, r3
 801fe64:	d905      	bls.n	801fe72 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801fe66:	683b      	ldr	r3, [r7, #0]
 801fe68:	691b      	ldr	r3, [r3, #16]
 801fe6a:	1d7a      	adds	r2, r7, #5
 801fe6c:	32ff      	adds	r2, #255	@ 0xff
 801fe6e:	6013      	str	r3, [r2, #0]
 801fe70:	e004      	b.n	801fe7c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801fe72:	683b      	ldr	r3, [r7, #0]
 801fe74:	699b      	ldr	r3, [r3, #24]
 801fe76:	1d7a      	adds	r2, r7, #5
 801fe78:	32ff      	adds	r2, #255	@ 0xff
 801fe7a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801fe7c:	683b      	ldr	r3, [r7, #0]
 801fe7e:	7b1b      	ldrb	r3, [r3, #12]
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d125      	bne.n	801fed0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801fe84:	683b      	ldr	r3, [r7, #0]
 801fe86:	6959      	ldr	r1, [r3, #20]
 801fe88:	683b      	ldr	r3, [r7, #0]
 801fe8a:	88da      	ldrh	r2, [r3, #6]
 801fe8c:	1d7b      	adds	r3, r7, #5
 801fe8e:	33ff      	adds	r3, #255	@ 0xff
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	b29b      	uxth	r3, r3
 801fe94:	6878      	ldr	r0, [r7, #4]
 801fe96:	f001 fa47 	bl	8021328 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801fe9a:	687b      	ldr	r3, [r7, #4]
 801fe9c:	613b      	str	r3, [r7, #16]
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	2250      	movs	r2, #80	@ 0x50
 801fea2:	5a9b      	ldrh	r3, [r3, r2]
 801fea4:	b29b      	uxth	r3, r3
 801fea6:	001a      	movs	r2, r3
 801fea8:	693b      	ldr	r3, [r7, #16]
 801feaa:	189b      	adds	r3, r3, r2
 801feac:	613b      	str	r3, [r7, #16]
 801feae:	683b      	ldr	r3, [r7, #0]
 801feb0:	781b      	ldrb	r3, [r3, #0]
 801feb2:	00da      	lsls	r2, r3, #3
 801feb4:	693b      	ldr	r3, [r7, #16]
 801feb6:	18d3      	adds	r3, r2, r3
 801feb8:	4ad7      	ldr	r2, [pc, #860]	@ (8020218 <USB_EPStartXfer+0x3d4>)
 801feba:	4694      	mov	ip, r2
 801febc:	4463      	add	r3, ip
 801febe:	60fb      	str	r3, [r7, #12]
 801fec0:	1d7b      	adds	r3, r7, #5
 801fec2:	33ff      	adds	r3, #255	@ 0xff
 801fec4:	681b      	ldr	r3, [r3, #0]
 801fec6:	b29a      	uxth	r2, r3
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	801a      	strh	r2, [r3, #0]
 801fecc:	f000 fccd 	bl	802086a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801fed0:	683b      	ldr	r3, [r7, #0]
 801fed2:	78db      	ldrb	r3, [r3, #3]
 801fed4:	2b02      	cmp	r3, #2
 801fed6:	d000      	beq.n	801feda <USB_EPStartXfer+0x96>
 801fed8:	e362      	b.n	80205a0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801feda:	683b      	ldr	r3, [r7, #0]
 801fedc:	6a1a      	ldr	r2, [r3, #32]
 801fede:	683b      	ldr	r3, [r7, #0]
 801fee0:	691b      	ldr	r3, [r3, #16]
 801fee2:	429a      	cmp	r2, r3
 801fee4:	d800      	bhi.n	801fee8 <USB_EPStartXfer+0xa4>
 801fee6:	e309      	b.n	80204fc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801fee8:	687a      	ldr	r2, [r7, #4]
 801feea:	683b      	ldr	r3, [r7, #0]
 801feec:	781b      	ldrb	r3, [r3, #0]
 801feee:	009b      	lsls	r3, r3, #2
 801fef0:	18d3      	adds	r3, r2, r3
 801fef2:	881b      	ldrh	r3, [r3, #0]
 801fef4:	b29a      	uxth	r2, r3
 801fef6:	2056      	movs	r0, #86	@ 0x56
 801fef8:	183b      	adds	r3, r7, r0
 801fefa:	49c8      	ldr	r1, [pc, #800]	@ (802021c <USB_EPStartXfer+0x3d8>)
 801fefc:	400a      	ands	r2, r1
 801fefe:	801a      	strh	r2, [r3, #0]
 801ff00:	687a      	ldr	r2, [r7, #4]
 801ff02:	683b      	ldr	r3, [r7, #0]
 801ff04:	781b      	ldrb	r3, [r3, #0]
 801ff06:	009b      	lsls	r3, r3, #2
 801ff08:	18d3      	adds	r3, r2, r3
 801ff0a:	183a      	adds	r2, r7, r0
 801ff0c:	8812      	ldrh	r2, [r2, #0]
 801ff0e:	49c4      	ldr	r1, [pc, #784]	@ (8020220 <USB_EPStartXfer+0x3dc>)
 801ff10:	430a      	orrs	r2, r1
 801ff12:	b292      	uxth	r2, r2
 801ff14:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801ff16:	683b      	ldr	r3, [r7, #0]
 801ff18:	6a1a      	ldr	r2, [r3, #32]
 801ff1a:	1d7b      	adds	r3, r7, #5
 801ff1c:	33ff      	adds	r3, #255	@ 0xff
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	1ad2      	subs	r2, r2, r3
 801ff22:	683b      	ldr	r3, [r7, #0]
 801ff24:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ff26:	687a      	ldr	r2, [r7, #4]
 801ff28:	683b      	ldr	r3, [r7, #0]
 801ff2a:	781b      	ldrb	r3, [r3, #0]
 801ff2c:	009b      	lsls	r3, r3, #2
 801ff2e:	18d3      	adds	r3, r2, r3
 801ff30:	881b      	ldrh	r3, [r3, #0]
 801ff32:	b29b      	uxth	r3, r3
 801ff34:	001a      	movs	r2, r3
 801ff36:	2340      	movs	r3, #64	@ 0x40
 801ff38:	4013      	ands	r3, r2
 801ff3a:	d100      	bne.n	801ff3e <USB_EPStartXfer+0xfa>
 801ff3c:	e176      	b.n	802022c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	633b      	str	r3, [r7, #48]	@ 0x30
 801ff42:	683b      	ldr	r3, [r7, #0]
 801ff44:	785b      	ldrb	r3, [r3, #1]
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	d000      	beq.n	801ff4c <USB_EPStartXfer+0x108>
 801ff4a:	e074      	b.n	8020036 <USB_EPStartXfer+0x1f2>
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	2250      	movs	r2, #80	@ 0x50
 801ff54:	5a9b      	ldrh	r3, [r3, r2]
 801ff56:	b29b      	uxth	r3, r3
 801ff58:	001a      	movs	r2, r3
 801ff5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff5c:	189b      	adds	r3, r3, r2
 801ff5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ff60:	683b      	ldr	r3, [r7, #0]
 801ff62:	781b      	ldrb	r3, [r3, #0]
 801ff64:	00da      	lsls	r2, r3, #3
 801ff66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff68:	18d3      	adds	r3, r2, r3
 801ff6a:	4aae      	ldr	r2, [pc, #696]	@ (8020224 <USB_EPStartXfer+0x3e0>)
 801ff6c:	4694      	mov	ip, r2
 801ff6e:	4463      	add	r3, ip
 801ff70:	627b      	str	r3, [r7, #36]	@ 0x24
 801ff72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff74:	881b      	ldrh	r3, [r3, #0]
 801ff76:	b29b      	uxth	r3, r3
 801ff78:	059b      	lsls	r3, r3, #22
 801ff7a:	0d9b      	lsrs	r3, r3, #22
 801ff7c:	b29a      	uxth	r2, r3
 801ff7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff80:	801a      	strh	r2, [r3, #0]
 801ff82:	1d7b      	adds	r3, r7, #5
 801ff84:	33ff      	adds	r3, #255	@ 0xff
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	2b3e      	cmp	r3, #62	@ 0x3e
 801ff8a:	d924      	bls.n	801ffd6 <USB_EPStartXfer+0x192>
 801ff8c:	1d7b      	adds	r3, r7, #5
 801ff8e:	33ff      	adds	r3, #255	@ 0xff
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	095b      	lsrs	r3, r3, #5
 801ff94:	1c7a      	adds	r2, r7, #1
 801ff96:	32ff      	adds	r2, #255	@ 0xff
 801ff98:	6013      	str	r3, [r2, #0]
 801ff9a:	1d7b      	adds	r3, r7, #5
 801ff9c:	33ff      	adds	r3, #255	@ 0xff
 801ff9e:	681b      	ldr	r3, [r3, #0]
 801ffa0:	221f      	movs	r2, #31
 801ffa2:	4013      	ands	r3, r2
 801ffa4:	d106      	bne.n	801ffb4 <USB_EPStartXfer+0x170>
 801ffa6:	1c7b      	adds	r3, r7, #1
 801ffa8:	33ff      	adds	r3, #255	@ 0xff
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	3b01      	subs	r3, #1
 801ffae:	1c7a      	adds	r2, r7, #1
 801ffb0:	32ff      	adds	r2, #255	@ 0xff
 801ffb2:	6013      	str	r3, [r2, #0]
 801ffb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffb6:	881b      	ldrh	r3, [r3, #0]
 801ffb8:	b29a      	uxth	r2, r3
 801ffba:	1c7b      	adds	r3, r7, #1
 801ffbc:	33ff      	adds	r3, #255	@ 0xff
 801ffbe:	681b      	ldr	r3, [r3, #0]
 801ffc0:	b29b      	uxth	r3, r3
 801ffc2:	029b      	lsls	r3, r3, #10
 801ffc4:	b29b      	uxth	r3, r3
 801ffc6:	4313      	orrs	r3, r2
 801ffc8:	b29b      	uxth	r3, r3
 801ffca:	4a97      	ldr	r2, [pc, #604]	@ (8020228 <USB_EPStartXfer+0x3e4>)
 801ffcc:	4313      	orrs	r3, r2
 801ffce:	b29a      	uxth	r2, r3
 801ffd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffd2:	801a      	strh	r2, [r3, #0]
 801ffd4:	e04a      	b.n	802006c <USB_EPStartXfer+0x228>
 801ffd6:	1d7b      	adds	r3, r7, #5
 801ffd8:	33ff      	adds	r3, #255	@ 0xff
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	2b00      	cmp	r3, #0
 801ffde:	d108      	bne.n	801fff2 <USB_EPStartXfer+0x1ae>
 801ffe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffe2:	881b      	ldrh	r3, [r3, #0]
 801ffe4:	b29b      	uxth	r3, r3
 801ffe6:	4a90      	ldr	r2, [pc, #576]	@ (8020228 <USB_EPStartXfer+0x3e4>)
 801ffe8:	4313      	orrs	r3, r2
 801ffea:	b29a      	uxth	r2, r3
 801ffec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffee:	801a      	strh	r2, [r3, #0]
 801fff0:	e03c      	b.n	802006c <USB_EPStartXfer+0x228>
 801fff2:	1d7b      	adds	r3, r7, #5
 801fff4:	33ff      	adds	r3, #255	@ 0xff
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	085b      	lsrs	r3, r3, #1
 801fffa:	1c7a      	adds	r2, r7, #1
 801fffc:	32ff      	adds	r2, #255	@ 0xff
 801fffe:	6013      	str	r3, [r2, #0]
 8020000:	1d7b      	adds	r3, r7, #5
 8020002:	33ff      	adds	r3, #255	@ 0xff
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	2201      	movs	r2, #1
 8020008:	4013      	ands	r3, r2
 802000a:	d006      	beq.n	802001a <USB_EPStartXfer+0x1d6>
 802000c:	1c7b      	adds	r3, r7, #1
 802000e:	33ff      	adds	r3, #255	@ 0xff
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	3301      	adds	r3, #1
 8020014:	1c7a      	adds	r2, r7, #1
 8020016:	32ff      	adds	r2, #255	@ 0xff
 8020018:	6013      	str	r3, [r2, #0]
 802001a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802001c:	881b      	ldrh	r3, [r3, #0]
 802001e:	b29a      	uxth	r2, r3
 8020020:	1c7b      	adds	r3, r7, #1
 8020022:	33ff      	adds	r3, #255	@ 0xff
 8020024:	681b      	ldr	r3, [r3, #0]
 8020026:	b29b      	uxth	r3, r3
 8020028:	029b      	lsls	r3, r3, #10
 802002a:	b29b      	uxth	r3, r3
 802002c:	4313      	orrs	r3, r2
 802002e:	b29a      	uxth	r2, r3
 8020030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020032:	801a      	strh	r2, [r3, #0]
 8020034:	e01a      	b.n	802006c <USB_EPStartXfer+0x228>
 8020036:	683b      	ldr	r3, [r7, #0]
 8020038:	785b      	ldrb	r3, [r3, #1]
 802003a:	2b01      	cmp	r3, #1
 802003c:	d116      	bne.n	802006c <USB_EPStartXfer+0x228>
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	2250      	movs	r2, #80	@ 0x50
 8020042:	5a9b      	ldrh	r3, [r3, r2]
 8020044:	b29b      	uxth	r3, r3
 8020046:	001a      	movs	r2, r3
 8020048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802004a:	189b      	adds	r3, r3, r2
 802004c:	633b      	str	r3, [r7, #48]	@ 0x30
 802004e:	683b      	ldr	r3, [r7, #0]
 8020050:	781b      	ldrb	r3, [r3, #0]
 8020052:	00da      	lsls	r2, r3, #3
 8020054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020056:	18d3      	adds	r3, r2, r3
 8020058:	4a72      	ldr	r2, [pc, #456]	@ (8020224 <USB_EPStartXfer+0x3e0>)
 802005a:	4694      	mov	ip, r2
 802005c:	4463      	add	r3, ip
 802005e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020060:	1d7b      	adds	r3, r7, #5
 8020062:	33ff      	adds	r3, #255	@ 0xff
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	b29a      	uxth	r2, r3
 8020068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802006a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 802006c:	2076      	movs	r0, #118	@ 0x76
 802006e:	183b      	adds	r3, r7, r0
 8020070:	683a      	ldr	r2, [r7, #0]
 8020072:	8952      	ldrh	r2, [r2, #10]
 8020074:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020076:	683b      	ldr	r3, [r7, #0]
 8020078:	6959      	ldr	r1, [r3, #20]
 802007a:	1d7b      	adds	r3, r7, #5
 802007c:	33ff      	adds	r3, #255	@ 0xff
 802007e:	681b      	ldr	r3, [r3, #0]
 8020080:	b29c      	uxth	r4, r3
 8020082:	183b      	adds	r3, r7, r0
 8020084:	881a      	ldrh	r2, [r3, #0]
 8020086:	6878      	ldr	r0, [r7, #4]
 8020088:	0023      	movs	r3, r4
 802008a:	f001 f94d 	bl	8021328 <USB_WritePMA>
            ep->xfer_buff += len;
 802008e:	683b      	ldr	r3, [r7, #0]
 8020090:	695a      	ldr	r2, [r3, #20]
 8020092:	1d7b      	adds	r3, r7, #5
 8020094:	33ff      	adds	r3, #255	@ 0xff
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	18d2      	adds	r2, r2, r3
 802009a:	683b      	ldr	r3, [r7, #0]
 802009c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 802009e:	683b      	ldr	r3, [r7, #0]
 80200a0:	6a1a      	ldr	r2, [r3, #32]
 80200a2:	683b      	ldr	r3, [r7, #0]
 80200a4:	691b      	ldr	r3, [r3, #16]
 80200a6:	429a      	cmp	r2, r3
 80200a8:	d908      	bls.n	80200bc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80200aa:	683b      	ldr	r3, [r7, #0]
 80200ac:	6a1a      	ldr	r2, [r3, #32]
 80200ae:	1d7b      	adds	r3, r7, #5
 80200b0:	33ff      	adds	r3, #255	@ 0xff
 80200b2:	681b      	ldr	r3, [r3, #0]
 80200b4:	1ad2      	subs	r2, r2, r3
 80200b6:	683b      	ldr	r3, [r7, #0]
 80200b8:	621a      	str	r2, [r3, #32]
 80200ba:	e007      	b.n	80200cc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80200bc:	683b      	ldr	r3, [r7, #0]
 80200be:	6a1b      	ldr	r3, [r3, #32]
 80200c0:	1d7a      	adds	r2, r7, #5
 80200c2:	32ff      	adds	r2, #255	@ 0xff
 80200c4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80200c6:	683b      	ldr	r3, [r7, #0]
 80200c8:	2200      	movs	r2, #0
 80200ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80200cc:	683b      	ldr	r3, [r7, #0]
 80200ce:	785b      	ldrb	r3, [r3, #1]
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	d000      	beq.n	80200d6 <USB_EPStartXfer+0x292>
 80200d4:	e070      	b.n	80201b8 <USB_EPStartXfer+0x374>
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	61bb      	str	r3, [r7, #24]
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	2250      	movs	r2, #80	@ 0x50
 80200de:	5a9b      	ldrh	r3, [r3, r2]
 80200e0:	b29b      	uxth	r3, r3
 80200e2:	001a      	movs	r2, r3
 80200e4:	69bb      	ldr	r3, [r7, #24]
 80200e6:	189b      	adds	r3, r3, r2
 80200e8:	61bb      	str	r3, [r7, #24]
 80200ea:	683b      	ldr	r3, [r7, #0]
 80200ec:	781b      	ldrb	r3, [r3, #0]
 80200ee:	00da      	lsls	r2, r3, #3
 80200f0:	69bb      	ldr	r3, [r7, #24]
 80200f2:	18d3      	adds	r3, r2, r3
 80200f4:	4a48      	ldr	r2, [pc, #288]	@ (8020218 <USB_EPStartXfer+0x3d4>)
 80200f6:	4694      	mov	ip, r2
 80200f8:	4463      	add	r3, ip
 80200fa:	617b      	str	r3, [r7, #20]
 80200fc:	697b      	ldr	r3, [r7, #20]
 80200fe:	881b      	ldrh	r3, [r3, #0]
 8020100:	b29b      	uxth	r3, r3
 8020102:	059b      	lsls	r3, r3, #22
 8020104:	0d9b      	lsrs	r3, r3, #22
 8020106:	b29a      	uxth	r2, r3
 8020108:	697b      	ldr	r3, [r7, #20]
 802010a:	801a      	strh	r2, [r3, #0]
 802010c:	1d7b      	adds	r3, r7, #5
 802010e:	33ff      	adds	r3, #255	@ 0xff
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	2b3e      	cmp	r3, #62	@ 0x3e
 8020114:	d922      	bls.n	802015c <USB_EPStartXfer+0x318>
 8020116:	1d7b      	adds	r3, r7, #5
 8020118:	33ff      	adds	r3, #255	@ 0xff
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	095b      	lsrs	r3, r3, #5
 802011e:	21fc      	movs	r1, #252	@ 0xfc
 8020120:	187a      	adds	r2, r7, r1
 8020122:	6013      	str	r3, [r2, #0]
 8020124:	1d7b      	adds	r3, r7, #5
 8020126:	33ff      	adds	r3, #255	@ 0xff
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	221f      	movs	r2, #31
 802012c:	4013      	ands	r3, r2
 802012e:	d104      	bne.n	802013a <USB_EPStartXfer+0x2f6>
 8020130:	187b      	adds	r3, r7, r1
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	3b01      	subs	r3, #1
 8020136:	187a      	adds	r2, r7, r1
 8020138:	6013      	str	r3, [r2, #0]
 802013a:	697b      	ldr	r3, [r7, #20]
 802013c:	881b      	ldrh	r3, [r3, #0]
 802013e:	b29a      	uxth	r2, r3
 8020140:	23fc      	movs	r3, #252	@ 0xfc
 8020142:	18fb      	adds	r3, r7, r3
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	b29b      	uxth	r3, r3
 8020148:	029b      	lsls	r3, r3, #10
 802014a:	b29b      	uxth	r3, r3
 802014c:	4313      	orrs	r3, r2
 802014e:	b29b      	uxth	r3, r3
 8020150:	4a35      	ldr	r2, [pc, #212]	@ (8020228 <USB_EPStartXfer+0x3e4>)
 8020152:	4313      	orrs	r3, r2
 8020154:	b29a      	uxth	r2, r3
 8020156:	697b      	ldr	r3, [r7, #20]
 8020158:	801a      	strh	r2, [r3, #0]
 802015a:	e04a      	b.n	80201f2 <USB_EPStartXfer+0x3ae>
 802015c:	1d7b      	adds	r3, r7, #5
 802015e:	33ff      	adds	r3, #255	@ 0xff
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	2b00      	cmp	r3, #0
 8020164:	d108      	bne.n	8020178 <USB_EPStartXfer+0x334>
 8020166:	697b      	ldr	r3, [r7, #20]
 8020168:	881b      	ldrh	r3, [r3, #0]
 802016a:	b29b      	uxth	r3, r3
 802016c:	4a2e      	ldr	r2, [pc, #184]	@ (8020228 <USB_EPStartXfer+0x3e4>)
 802016e:	4313      	orrs	r3, r2
 8020170:	b29a      	uxth	r2, r3
 8020172:	697b      	ldr	r3, [r7, #20]
 8020174:	801a      	strh	r2, [r3, #0]
 8020176:	e03c      	b.n	80201f2 <USB_EPStartXfer+0x3ae>
 8020178:	1d7b      	adds	r3, r7, #5
 802017a:	33ff      	adds	r3, #255	@ 0xff
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	085b      	lsrs	r3, r3, #1
 8020180:	21fc      	movs	r1, #252	@ 0xfc
 8020182:	187a      	adds	r2, r7, r1
 8020184:	6013      	str	r3, [r2, #0]
 8020186:	1d7b      	adds	r3, r7, #5
 8020188:	33ff      	adds	r3, #255	@ 0xff
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	2201      	movs	r2, #1
 802018e:	4013      	ands	r3, r2
 8020190:	d004      	beq.n	802019c <USB_EPStartXfer+0x358>
 8020192:	187b      	adds	r3, r7, r1
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	3301      	adds	r3, #1
 8020198:	187a      	adds	r2, r7, r1
 802019a:	6013      	str	r3, [r2, #0]
 802019c:	697b      	ldr	r3, [r7, #20]
 802019e:	881b      	ldrh	r3, [r3, #0]
 80201a0:	b29a      	uxth	r2, r3
 80201a2:	23fc      	movs	r3, #252	@ 0xfc
 80201a4:	18fb      	adds	r3, r7, r3
 80201a6:	681b      	ldr	r3, [r3, #0]
 80201a8:	b29b      	uxth	r3, r3
 80201aa:	029b      	lsls	r3, r3, #10
 80201ac:	b29b      	uxth	r3, r3
 80201ae:	4313      	orrs	r3, r2
 80201b0:	b29a      	uxth	r2, r3
 80201b2:	697b      	ldr	r3, [r7, #20]
 80201b4:	801a      	strh	r2, [r3, #0]
 80201b6:	e01c      	b.n	80201f2 <USB_EPStartXfer+0x3ae>
 80201b8:	683b      	ldr	r3, [r7, #0]
 80201ba:	785b      	ldrb	r3, [r3, #1]
 80201bc:	2b01      	cmp	r3, #1
 80201be:	d118      	bne.n	80201f2 <USB_EPStartXfer+0x3ae>
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	623b      	str	r3, [r7, #32]
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	2250      	movs	r2, #80	@ 0x50
 80201c8:	5a9b      	ldrh	r3, [r3, r2]
 80201ca:	b29b      	uxth	r3, r3
 80201cc:	001a      	movs	r2, r3
 80201ce:	6a3b      	ldr	r3, [r7, #32]
 80201d0:	189b      	adds	r3, r3, r2
 80201d2:	623b      	str	r3, [r7, #32]
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	781b      	ldrb	r3, [r3, #0]
 80201d8:	00da      	lsls	r2, r3, #3
 80201da:	6a3b      	ldr	r3, [r7, #32]
 80201dc:	18d3      	adds	r3, r2, r3
 80201de:	4a0e      	ldr	r2, [pc, #56]	@ (8020218 <USB_EPStartXfer+0x3d4>)
 80201e0:	4694      	mov	ip, r2
 80201e2:	4463      	add	r3, ip
 80201e4:	61fb      	str	r3, [r7, #28]
 80201e6:	1d7b      	adds	r3, r7, #5
 80201e8:	33ff      	adds	r3, #255	@ 0xff
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	b29a      	uxth	r2, r3
 80201ee:	69fb      	ldr	r3, [r7, #28]
 80201f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80201f2:	2076      	movs	r0, #118	@ 0x76
 80201f4:	183b      	adds	r3, r7, r0
 80201f6:	683a      	ldr	r2, [r7, #0]
 80201f8:	8912      	ldrh	r2, [r2, #8]
 80201fa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80201fc:	683b      	ldr	r3, [r7, #0]
 80201fe:	6959      	ldr	r1, [r3, #20]
 8020200:	1d7b      	adds	r3, r7, #5
 8020202:	33ff      	adds	r3, #255	@ 0xff
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	b29c      	uxth	r4, r3
 8020208:	183b      	adds	r3, r7, r0
 802020a:	881a      	ldrh	r2, [r3, #0]
 802020c:	6878      	ldr	r0, [r7, #4]
 802020e:	0023      	movs	r3, r4
 8020210:	f001 f88a 	bl	8021328 <USB_WritePMA>
 8020214:	e329      	b.n	802086a <USB_EPStartXfer+0xa26>
 8020216:	46c0      	nop			@ (mov r8, r8)
 8020218:	00000402 	.word	0x00000402
 802021c:	ffff8f8f 	.word	0xffff8f8f
 8020220:	ffff8180 	.word	0xffff8180
 8020224:	00000406 	.word	0x00000406
 8020228:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802022c:	683b      	ldr	r3, [r7, #0]
 802022e:	785b      	ldrb	r3, [r3, #1]
 8020230:	2b00      	cmp	r3, #0
 8020232:	d000      	beq.n	8020236 <USB_EPStartXfer+0x3f2>
 8020234:	e070      	b.n	8020318 <USB_EPStartXfer+0x4d4>
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	64bb      	str	r3, [r7, #72]	@ 0x48
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	2250      	movs	r2, #80	@ 0x50
 802023e:	5a9b      	ldrh	r3, [r3, r2]
 8020240:	b29b      	uxth	r3, r3
 8020242:	001a      	movs	r2, r3
 8020244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020246:	189b      	adds	r3, r3, r2
 8020248:	64bb      	str	r3, [r7, #72]	@ 0x48
 802024a:	683b      	ldr	r3, [r7, #0]
 802024c:	781b      	ldrb	r3, [r3, #0]
 802024e:	00da      	lsls	r2, r3, #3
 8020250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020252:	18d3      	adds	r3, r2, r3
 8020254:	4acd      	ldr	r2, [pc, #820]	@ (802058c <USB_EPStartXfer+0x748>)
 8020256:	4694      	mov	ip, r2
 8020258:	4463      	add	r3, ip
 802025a:	647b      	str	r3, [r7, #68]	@ 0x44
 802025c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802025e:	881b      	ldrh	r3, [r3, #0]
 8020260:	b29b      	uxth	r3, r3
 8020262:	059b      	lsls	r3, r3, #22
 8020264:	0d9b      	lsrs	r3, r3, #22
 8020266:	b29a      	uxth	r2, r3
 8020268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802026a:	801a      	strh	r2, [r3, #0]
 802026c:	1d7b      	adds	r3, r7, #5
 802026e:	33ff      	adds	r3, #255	@ 0xff
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	2b3e      	cmp	r3, #62	@ 0x3e
 8020274:	d922      	bls.n	80202bc <USB_EPStartXfer+0x478>
 8020276:	1d7b      	adds	r3, r7, #5
 8020278:	33ff      	adds	r3, #255	@ 0xff
 802027a:	681b      	ldr	r3, [r3, #0]
 802027c:	095b      	lsrs	r3, r3, #5
 802027e:	21f8      	movs	r1, #248	@ 0xf8
 8020280:	187a      	adds	r2, r7, r1
 8020282:	6013      	str	r3, [r2, #0]
 8020284:	1d7b      	adds	r3, r7, #5
 8020286:	33ff      	adds	r3, #255	@ 0xff
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	221f      	movs	r2, #31
 802028c:	4013      	ands	r3, r2
 802028e:	d104      	bne.n	802029a <USB_EPStartXfer+0x456>
 8020290:	187b      	adds	r3, r7, r1
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	3b01      	subs	r3, #1
 8020296:	187a      	adds	r2, r7, r1
 8020298:	6013      	str	r3, [r2, #0]
 802029a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802029c:	881b      	ldrh	r3, [r3, #0]
 802029e:	b29a      	uxth	r2, r3
 80202a0:	23f8      	movs	r3, #248	@ 0xf8
 80202a2:	18fb      	adds	r3, r7, r3
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	b29b      	uxth	r3, r3
 80202a8:	029b      	lsls	r3, r3, #10
 80202aa:	b29b      	uxth	r3, r3
 80202ac:	4313      	orrs	r3, r2
 80202ae:	b29b      	uxth	r3, r3
 80202b0:	4ab7      	ldr	r2, [pc, #732]	@ (8020590 <USB_EPStartXfer+0x74c>)
 80202b2:	4313      	orrs	r3, r2
 80202b4:	b29a      	uxth	r2, r3
 80202b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202b8:	801a      	strh	r2, [r3, #0]
 80202ba:	e04a      	b.n	8020352 <USB_EPStartXfer+0x50e>
 80202bc:	1d7b      	adds	r3, r7, #5
 80202be:	33ff      	adds	r3, #255	@ 0xff
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d108      	bne.n	80202d8 <USB_EPStartXfer+0x494>
 80202c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202c8:	881b      	ldrh	r3, [r3, #0]
 80202ca:	b29b      	uxth	r3, r3
 80202cc:	4ab0      	ldr	r2, [pc, #704]	@ (8020590 <USB_EPStartXfer+0x74c>)
 80202ce:	4313      	orrs	r3, r2
 80202d0:	b29a      	uxth	r2, r3
 80202d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202d4:	801a      	strh	r2, [r3, #0]
 80202d6:	e03c      	b.n	8020352 <USB_EPStartXfer+0x50e>
 80202d8:	1d7b      	adds	r3, r7, #5
 80202da:	33ff      	adds	r3, #255	@ 0xff
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	085b      	lsrs	r3, r3, #1
 80202e0:	21f8      	movs	r1, #248	@ 0xf8
 80202e2:	187a      	adds	r2, r7, r1
 80202e4:	6013      	str	r3, [r2, #0]
 80202e6:	1d7b      	adds	r3, r7, #5
 80202e8:	33ff      	adds	r3, #255	@ 0xff
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	2201      	movs	r2, #1
 80202ee:	4013      	ands	r3, r2
 80202f0:	d004      	beq.n	80202fc <USB_EPStartXfer+0x4b8>
 80202f2:	187b      	adds	r3, r7, r1
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	3301      	adds	r3, #1
 80202f8:	187a      	adds	r2, r7, r1
 80202fa:	6013      	str	r3, [r2, #0]
 80202fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202fe:	881b      	ldrh	r3, [r3, #0]
 8020300:	b29a      	uxth	r2, r3
 8020302:	23f8      	movs	r3, #248	@ 0xf8
 8020304:	18fb      	adds	r3, r7, r3
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	b29b      	uxth	r3, r3
 802030a:	029b      	lsls	r3, r3, #10
 802030c:	b29b      	uxth	r3, r3
 802030e:	4313      	orrs	r3, r2
 8020310:	b29a      	uxth	r2, r3
 8020312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020314:	801a      	strh	r2, [r3, #0]
 8020316:	e01c      	b.n	8020352 <USB_EPStartXfer+0x50e>
 8020318:	683b      	ldr	r3, [r7, #0]
 802031a:	785b      	ldrb	r3, [r3, #1]
 802031c:	2b01      	cmp	r3, #1
 802031e:	d118      	bne.n	8020352 <USB_EPStartXfer+0x50e>
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	653b      	str	r3, [r7, #80]	@ 0x50
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	2250      	movs	r2, #80	@ 0x50
 8020328:	5a9b      	ldrh	r3, [r3, r2]
 802032a:	b29b      	uxth	r3, r3
 802032c:	001a      	movs	r2, r3
 802032e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020330:	189b      	adds	r3, r3, r2
 8020332:	653b      	str	r3, [r7, #80]	@ 0x50
 8020334:	683b      	ldr	r3, [r7, #0]
 8020336:	781b      	ldrb	r3, [r3, #0]
 8020338:	00da      	lsls	r2, r3, #3
 802033a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802033c:	18d3      	adds	r3, r2, r3
 802033e:	4a93      	ldr	r2, [pc, #588]	@ (802058c <USB_EPStartXfer+0x748>)
 8020340:	4694      	mov	ip, r2
 8020342:	4463      	add	r3, ip
 8020344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020346:	1d7b      	adds	r3, r7, #5
 8020348:	33ff      	adds	r3, #255	@ 0xff
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	b29a      	uxth	r2, r3
 802034e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8020352:	2076      	movs	r0, #118	@ 0x76
 8020354:	183b      	adds	r3, r7, r0
 8020356:	683a      	ldr	r2, [r7, #0]
 8020358:	8912      	ldrh	r2, [r2, #8]
 802035a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802035c:	683b      	ldr	r3, [r7, #0]
 802035e:	6959      	ldr	r1, [r3, #20]
 8020360:	1d7b      	adds	r3, r7, #5
 8020362:	33ff      	adds	r3, #255	@ 0xff
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	b29c      	uxth	r4, r3
 8020368:	183b      	adds	r3, r7, r0
 802036a:	881a      	ldrh	r2, [r3, #0]
 802036c:	6878      	ldr	r0, [r7, #4]
 802036e:	0023      	movs	r3, r4
 8020370:	f000 ffda 	bl	8021328 <USB_WritePMA>
            ep->xfer_buff += len;
 8020374:	683b      	ldr	r3, [r7, #0]
 8020376:	695a      	ldr	r2, [r3, #20]
 8020378:	1d7b      	adds	r3, r7, #5
 802037a:	33ff      	adds	r3, #255	@ 0xff
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	18d2      	adds	r2, r2, r3
 8020380:	683b      	ldr	r3, [r7, #0]
 8020382:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8020384:	683b      	ldr	r3, [r7, #0]
 8020386:	6a1a      	ldr	r2, [r3, #32]
 8020388:	683b      	ldr	r3, [r7, #0]
 802038a:	691b      	ldr	r3, [r3, #16]
 802038c:	429a      	cmp	r2, r3
 802038e:	d908      	bls.n	80203a2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8020390:	683b      	ldr	r3, [r7, #0]
 8020392:	6a1a      	ldr	r2, [r3, #32]
 8020394:	1d7b      	adds	r3, r7, #5
 8020396:	33ff      	adds	r3, #255	@ 0xff
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	1ad2      	subs	r2, r2, r3
 802039c:	683b      	ldr	r3, [r7, #0]
 802039e:	621a      	str	r2, [r3, #32]
 80203a0:	e007      	b.n	80203b2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80203a2:	683b      	ldr	r3, [r7, #0]
 80203a4:	6a1b      	ldr	r3, [r3, #32]
 80203a6:	1d7a      	adds	r2, r7, #5
 80203a8:	32ff      	adds	r2, #255	@ 0xff
 80203aa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80203ac:	683b      	ldr	r3, [r7, #0]
 80203ae:	2200      	movs	r2, #0
 80203b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80203b6:	683b      	ldr	r3, [r7, #0]
 80203b8:	785b      	ldrb	r3, [r3, #1]
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d000      	beq.n	80203c0 <USB_EPStartXfer+0x57c>
 80203be:	e070      	b.n	80204a2 <USB_EPStartXfer+0x65e>
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	2250      	movs	r2, #80	@ 0x50
 80203c8:	5a9b      	ldrh	r3, [r3, r2]
 80203ca:	b29b      	uxth	r3, r3
 80203cc:	001a      	movs	r2, r3
 80203ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203d0:	189b      	adds	r3, r3, r2
 80203d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80203d4:	683b      	ldr	r3, [r7, #0]
 80203d6:	781b      	ldrb	r3, [r3, #0]
 80203d8:	00da      	lsls	r2, r3, #3
 80203da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203dc:	18d3      	adds	r3, r2, r3
 80203de:	4a6d      	ldr	r2, [pc, #436]	@ (8020594 <USB_EPStartXfer+0x750>)
 80203e0:	4694      	mov	ip, r2
 80203e2:	4463      	add	r3, ip
 80203e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80203e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203e8:	881b      	ldrh	r3, [r3, #0]
 80203ea:	b29b      	uxth	r3, r3
 80203ec:	059b      	lsls	r3, r3, #22
 80203ee:	0d9b      	lsrs	r3, r3, #22
 80203f0:	b29a      	uxth	r2, r3
 80203f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203f4:	801a      	strh	r2, [r3, #0]
 80203f6:	1d7b      	adds	r3, r7, #5
 80203f8:	33ff      	adds	r3, #255	@ 0xff
 80203fa:	681b      	ldr	r3, [r3, #0]
 80203fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80203fe:	d922      	bls.n	8020446 <USB_EPStartXfer+0x602>
 8020400:	1d7b      	adds	r3, r7, #5
 8020402:	33ff      	adds	r3, #255	@ 0xff
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	095b      	lsrs	r3, r3, #5
 8020408:	21f4      	movs	r1, #244	@ 0xf4
 802040a:	187a      	adds	r2, r7, r1
 802040c:	6013      	str	r3, [r2, #0]
 802040e:	1d7b      	adds	r3, r7, #5
 8020410:	33ff      	adds	r3, #255	@ 0xff
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	221f      	movs	r2, #31
 8020416:	4013      	ands	r3, r2
 8020418:	d104      	bne.n	8020424 <USB_EPStartXfer+0x5e0>
 802041a:	187b      	adds	r3, r7, r1
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	3b01      	subs	r3, #1
 8020420:	187a      	adds	r2, r7, r1
 8020422:	6013      	str	r3, [r2, #0]
 8020424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020426:	881b      	ldrh	r3, [r3, #0]
 8020428:	b29a      	uxth	r2, r3
 802042a:	23f4      	movs	r3, #244	@ 0xf4
 802042c:	18fb      	adds	r3, r7, r3
 802042e:	681b      	ldr	r3, [r3, #0]
 8020430:	b29b      	uxth	r3, r3
 8020432:	029b      	lsls	r3, r3, #10
 8020434:	b29b      	uxth	r3, r3
 8020436:	4313      	orrs	r3, r2
 8020438:	b29b      	uxth	r3, r3
 802043a:	4a55      	ldr	r2, [pc, #340]	@ (8020590 <USB_EPStartXfer+0x74c>)
 802043c:	4313      	orrs	r3, r2
 802043e:	b29a      	uxth	r2, r3
 8020440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020442:	801a      	strh	r2, [r3, #0]
 8020444:	e048      	b.n	80204d8 <USB_EPStartXfer+0x694>
 8020446:	1d7b      	adds	r3, r7, #5
 8020448:	33ff      	adds	r3, #255	@ 0xff
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	2b00      	cmp	r3, #0
 802044e:	d108      	bne.n	8020462 <USB_EPStartXfer+0x61e>
 8020450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020452:	881b      	ldrh	r3, [r3, #0]
 8020454:	b29b      	uxth	r3, r3
 8020456:	4a4e      	ldr	r2, [pc, #312]	@ (8020590 <USB_EPStartXfer+0x74c>)
 8020458:	4313      	orrs	r3, r2
 802045a:	b29a      	uxth	r2, r3
 802045c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802045e:	801a      	strh	r2, [r3, #0]
 8020460:	e03a      	b.n	80204d8 <USB_EPStartXfer+0x694>
 8020462:	1d7b      	adds	r3, r7, #5
 8020464:	33ff      	adds	r3, #255	@ 0xff
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	085b      	lsrs	r3, r3, #1
 802046a:	21f4      	movs	r1, #244	@ 0xf4
 802046c:	187a      	adds	r2, r7, r1
 802046e:	6013      	str	r3, [r2, #0]
 8020470:	1d7b      	adds	r3, r7, #5
 8020472:	33ff      	adds	r3, #255	@ 0xff
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	2201      	movs	r2, #1
 8020478:	4013      	ands	r3, r2
 802047a:	d004      	beq.n	8020486 <USB_EPStartXfer+0x642>
 802047c:	187b      	adds	r3, r7, r1
 802047e:	681b      	ldr	r3, [r3, #0]
 8020480:	3301      	adds	r3, #1
 8020482:	187a      	adds	r2, r7, r1
 8020484:	6013      	str	r3, [r2, #0]
 8020486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020488:	881b      	ldrh	r3, [r3, #0]
 802048a:	b29a      	uxth	r2, r3
 802048c:	23f4      	movs	r3, #244	@ 0xf4
 802048e:	18fb      	adds	r3, r7, r3
 8020490:	681b      	ldr	r3, [r3, #0]
 8020492:	b29b      	uxth	r3, r3
 8020494:	029b      	lsls	r3, r3, #10
 8020496:	b29b      	uxth	r3, r3
 8020498:	4313      	orrs	r3, r2
 802049a:	b29a      	uxth	r2, r3
 802049c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802049e:	801a      	strh	r2, [r3, #0]
 80204a0:	e01a      	b.n	80204d8 <USB_EPStartXfer+0x694>
 80204a2:	683b      	ldr	r3, [r7, #0]
 80204a4:	785b      	ldrb	r3, [r3, #1]
 80204a6:	2b01      	cmp	r3, #1
 80204a8:	d116      	bne.n	80204d8 <USB_EPStartXfer+0x694>
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	2250      	movs	r2, #80	@ 0x50
 80204ae:	5a9b      	ldrh	r3, [r3, r2]
 80204b0:	b29b      	uxth	r3, r3
 80204b2:	001a      	movs	r2, r3
 80204b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80204b6:	189b      	adds	r3, r3, r2
 80204b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80204ba:	683b      	ldr	r3, [r7, #0]
 80204bc:	781b      	ldrb	r3, [r3, #0]
 80204be:	00da      	lsls	r2, r3, #3
 80204c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80204c2:	18d3      	adds	r3, r2, r3
 80204c4:	4a33      	ldr	r2, [pc, #204]	@ (8020594 <USB_EPStartXfer+0x750>)
 80204c6:	4694      	mov	ip, r2
 80204c8:	4463      	add	r3, ip
 80204ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80204cc:	1d7b      	adds	r3, r7, #5
 80204ce:	33ff      	adds	r3, #255	@ 0xff
 80204d0:	681b      	ldr	r3, [r3, #0]
 80204d2:	b29a      	uxth	r2, r3
 80204d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80204d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80204d8:	2076      	movs	r0, #118	@ 0x76
 80204da:	183b      	adds	r3, r7, r0
 80204dc:	683a      	ldr	r2, [r7, #0]
 80204de:	8952      	ldrh	r2, [r2, #10]
 80204e0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80204e2:	683b      	ldr	r3, [r7, #0]
 80204e4:	6959      	ldr	r1, [r3, #20]
 80204e6:	1d7b      	adds	r3, r7, #5
 80204e8:	33ff      	adds	r3, #255	@ 0xff
 80204ea:	681b      	ldr	r3, [r3, #0]
 80204ec:	b29c      	uxth	r4, r3
 80204ee:	183b      	adds	r3, r7, r0
 80204f0:	881a      	ldrh	r2, [r3, #0]
 80204f2:	6878      	ldr	r0, [r7, #4]
 80204f4:	0023      	movs	r3, r4
 80204f6:	f000 ff17 	bl	8021328 <USB_WritePMA>
 80204fa:	e1b6      	b.n	802086a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80204fc:	683b      	ldr	r3, [r7, #0]
 80204fe:	6a1b      	ldr	r3, [r3, #32]
 8020500:	1d7a      	adds	r2, r7, #5
 8020502:	32ff      	adds	r2, #255	@ 0xff
 8020504:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8020506:	687a      	ldr	r2, [r7, #4]
 8020508:	683b      	ldr	r3, [r7, #0]
 802050a:	781b      	ldrb	r3, [r3, #0]
 802050c:	009b      	lsls	r3, r3, #2
 802050e:	18d3      	adds	r3, r2, r3
 8020510:	881b      	ldrh	r3, [r3, #0]
 8020512:	b29a      	uxth	r2, r3
 8020514:	2062      	movs	r0, #98	@ 0x62
 8020516:	183b      	adds	r3, r7, r0
 8020518:	491f      	ldr	r1, [pc, #124]	@ (8020598 <USB_EPStartXfer+0x754>)
 802051a:	400a      	ands	r2, r1
 802051c:	801a      	strh	r2, [r3, #0]
 802051e:	687a      	ldr	r2, [r7, #4]
 8020520:	683b      	ldr	r3, [r7, #0]
 8020522:	781b      	ldrb	r3, [r3, #0]
 8020524:	009b      	lsls	r3, r3, #2
 8020526:	18d3      	adds	r3, r2, r3
 8020528:	183a      	adds	r2, r7, r0
 802052a:	8812      	ldrh	r2, [r2, #0]
 802052c:	491b      	ldr	r1, [pc, #108]	@ (802059c <USB_EPStartXfer+0x758>)
 802052e:	430a      	orrs	r2, r1
 8020530:	b292      	uxth	r2, r2
 8020532:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	2250      	movs	r2, #80	@ 0x50
 802053c:	5a9b      	ldrh	r3, [r3, r2]
 802053e:	b29b      	uxth	r3, r3
 8020540:	001a      	movs	r2, r3
 8020542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020544:	189b      	adds	r3, r3, r2
 8020546:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020548:	683b      	ldr	r3, [r7, #0]
 802054a:	781b      	ldrb	r3, [r3, #0]
 802054c:	00da      	lsls	r2, r3, #3
 802054e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020550:	18d3      	adds	r3, r2, r3
 8020552:	4a0e      	ldr	r2, [pc, #56]	@ (802058c <USB_EPStartXfer+0x748>)
 8020554:	4694      	mov	ip, r2
 8020556:	4463      	add	r3, ip
 8020558:	65bb      	str	r3, [r7, #88]	@ 0x58
 802055a:	1d7b      	adds	r3, r7, #5
 802055c:	33ff      	adds	r3, #255	@ 0xff
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	b29a      	uxth	r2, r3
 8020562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020564:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8020566:	2076      	movs	r0, #118	@ 0x76
 8020568:	183b      	adds	r3, r7, r0
 802056a:	683a      	ldr	r2, [r7, #0]
 802056c:	8912      	ldrh	r2, [r2, #8]
 802056e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020570:	683b      	ldr	r3, [r7, #0]
 8020572:	6959      	ldr	r1, [r3, #20]
 8020574:	1d7b      	adds	r3, r7, #5
 8020576:	33ff      	adds	r3, #255	@ 0xff
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	b29c      	uxth	r4, r3
 802057c:	183b      	adds	r3, r7, r0
 802057e:	881a      	ldrh	r2, [r3, #0]
 8020580:	6878      	ldr	r0, [r7, #4]
 8020582:	0023      	movs	r3, r4
 8020584:	f000 fed0 	bl	8021328 <USB_WritePMA>
 8020588:	e16f      	b.n	802086a <USB_EPStartXfer+0xa26>
 802058a:	46c0      	nop			@ (mov r8, r8)
 802058c:	00000402 	.word	0x00000402
 8020590:	ffff8000 	.word	0xffff8000
 8020594:	00000406 	.word	0x00000406
 8020598:	ffff8e8f 	.word	0xffff8e8f
 802059c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80205a0:	683b      	ldr	r3, [r7, #0]
 80205a2:	6a1a      	ldr	r2, [r3, #32]
 80205a4:	1d7b      	adds	r3, r7, #5
 80205a6:	33ff      	adds	r3, #255	@ 0xff
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	1ad2      	subs	r2, r2, r3
 80205ac:	683b      	ldr	r3, [r7, #0]
 80205ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80205b0:	687a      	ldr	r2, [r7, #4]
 80205b2:	683b      	ldr	r3, [r7, #0]
 80205b4:	781b      	ldrb	r3, [r3, #0]
 80205b6:	009b      	lsls	r3, r3, #2
 80205b8:	18d3      	adds	r3, r2, r3
 80205ba:	881b      	ldrh	r3, [r3, #0]
 80205bc:	b29b      	uxth	r3, r3
 80205be:	001a      	movs	r2, r3
 80205c0:	2340      	movs	r3, #64	@ 0x40
 80205c2:	4013      	ands	r3, r2
 80205c4:	d100      	bne.n	80205c8 <USB_EPStartXfer+0x784>
 80205c6:	e0a4      	b.n	8020712 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80205cc:	683b      	ldr	r3, [r7, #0]
 80205ce:	785b      	ldrb	r3, [r3, #1]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d000      	beq.n	80205d6 <USB_EPStartXfer+0x792>
 80205d4:	e070      	b.n	80206b8 <USB_EPStartXfer+0x874>
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	2250      	movs	r2, #80	@ 0x50
 80205de:	5a9b      	ldrh	r3, [r3, r2]
 80205e0:	b29b      	uxth	r3, r3
 80205e2:	001a      	movs	r2, r3
 80205e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80205e6:	189b      	adds	r3, r3, r2
 80205e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80205ea:	683b      	ldr	r3, [r7, #0]
 80205ec:	781b      	ldrb	r3, [r3, #0]
 80205ee:	00da      	lsls	r2, r3, #3
 80205f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80205f2:	18d3      	adds	r3, r2, r3
 80205f4:	4abc      	ldr	r2, [pc, #752]	@ (80208e8 <USB_EPStartXfer+0xaa4>)
 80205f6:	4694      	mov	ip, r2
 80205f8:	4463      	add	r3, ip
 80205fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80205fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205fe:	881b      	ldrh	r3, [r3, #0]
 8020600:	b29b      	uxth	r3, r3
 8020602:	059b      	lsls	r3, r3, #22
 8020604:	0d9b      	lsrs	r3, r3, #22
 8020606:	b29a      	uxth	r2, r3
 8020608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802060a:	801a      	strh	r2, [r3, #0]
 802060c:	1d7b      	adds	r3, r7, #5
 802060e:	33ff      	adds	r3, #255	@ 0xff
 8020610:	681b      	ldr	r3, [r3, #0]
 8020612:	2b3e      	cmp	r3, #62	@ 0x3e
 8020614:	d922      	bls.n	802065c <USB_EPStartXfer+0x818>
 8020616:	1d7b      	adds	r3, r7, #5
 8020618:	33ff      	adds	r3, #255	@ 0xff
 802061a:	681b      	ldr	r3, [r3, #0]
 802061c:	095b      	lsrs	r3, r3, #5
 802061e:	21f0      	movs	r1, #240	@ 0xf0
 8020620:	187a      	adds	r2, r7, r1
 8020622:	6013      	str	r3, [r2, #0]
 8020624:	1d7b      	adds	r3, r7, #5
 8020626:	33ff      	adds	r3, #255	@ 0xff
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	221f      	movs	r2, #31
 802062c:	4013      	ands	r3, r2
 802062e:	d104      	bne.n	802063a <USB_EPStartXfer+0x7f6>
 8020630:	187b      	adds	r3, r7, r1
 8020632:	681b      	ldr	r3, [r3, #0]
 8020634:	3b01      	subs	r3, #1
 8020636:	187a      	adds	r2, r7, r1
 8020638:	6013      	str	r3, [r2, #0]
 802063a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802063c:	881b      	ldrh	r3, [r3, #0]
 802063e:	b29a      	uxth	r2, r3
 8020640:	23f0      	movs	r3, #240	@ 0xf0
 8020642:	18fb      	adds	r3, r7, r3
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	b29b      	uxth	r3, r3
 8020648:	029b      	lsls	r3, r3, #10
 802064a:	b29b      	uxth	r3, r3
 802064c:	4313      	orrs	r3, r2
 802064e:	b29b      	uxth	r3, r3
 8020650:	4aa6      	ldr	r2, [pc, #664]	@ (80208ec <USB_EPStartXfer+0xaa8>)
 8020652:	4313      	orrs	r3, r2
 8020654:	b29a      	uxth	r2, r3
 8020656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020658:	801a      	strh	r2, [r3, #0]
 802065a:	e048      	b.n	80206ee <USB_EPStartXfer+0x8aa>
 802065c:	1d7b      	adds	r3, r7, #5
 802065e:	33ff      	adds	r3, #255	@ 0xff
 8020660:	681b      	ldr	r3, [r3, #0]
 8020662:	2b00      	cmp	r3, #0
 8020664:	d108      	bne.n	8020678 <USB_EPStartXfer+0x834>
 8020666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020668:	881b      	ldrh	r3, [r3, #0]
 802066a:	b29b      	uxth	r3, r3
 802066c:	4a9f      	ldr	r2, [pc, #636]	@ (80208ec <USB_EPStartXfer+0xaa8>)
 802066e:	4313      	orrs	r3, r2
 8020670:	b29a      	uxth	r2, r3
 8020672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020674:	801a      	strh	r2, [r3, #0]
 8020676:	e03a      	b.n	80206ee <USB_EPStartXfer+0x8aa>
 8020678:	1d7b      	adds	r3, r7, #5
 802067a:	33ff      	adds	r3, #255	@ 0xff
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	085b      	lsrs	r3, r3, #1
 8020680:	21f0      	movs	r1, #240	@ 0xf0
 8020682:	187a      	adds	r2, r7, r1
 8020684:	6013      	str	r3, [r2, #0]
 8020686:	1d7b      	adds	r3, r7, #5
 8020688:	33ff      	adds	r3, #255	@ 0xff
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	2201      	movs	r2, #1
 802068e:	4013      	ands	r3, r2
 8020690:	d004      	beq.n	802069c <USB_EPStartXfer+0x858>
 8020692:	187b      	adds	r3, r7, r1
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	3301      	adds	r3, #1
 8020698:	187a      	adds	r2, r7, r1
 802069a:	6013      	str	r3, [r2, #0]
 802069c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802069e:	881b      	ldrh	r3, [r3, #0]
 80206a0:	b29a      	uxth	r2, r3
 80206a2:	23f0      	movs	r3, #240	@ 0xf0
 80206a4:	18fb      	adds	r3, r7, r3
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	b29b      	uxth	r3, r3
 80206aa:	029b      	lsls	r3, r3, #10
 80206ac:	b29b      	uxth	r3, r3
 80206ae:	4313      	orrs	r3, r2
 80206b0:	b29a      	uxth	r2, r3
 80206b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80206b4:	801a      	strh	r2, [r3, #0]
 80206b6:	e01a      	b.n	80206ee <USB_EPStartXfer+0x8aa>
 80206b8:	683b      	ldr	r3, [r7, #0]
 80206ba:	785b      	ldrb	r3, [r3, #1]
 80206bc:	2b01      	cmp	r3, #1
 80206be:	d116      	bne.n	80206ee <USB_EPStartXfer+0x8aa>
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	2250      	movs	r2, #80	@ 0x50
 80206c4:	5a9b      	ldrh	r3, [r3, r2]
 80206c6:	b29b      	uxth	r3, r3
 80206c8:	001a      	movs	r2, r3
 80206ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80206cc:	189b      	adds	r3, r3, r2
 80206ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80206d0:	683b      	ldr	r3, [r7, #0]
 80206d2:	781b      	ldrb	r3, [r3, #0]
 80206d4:	00da      	lsls	r2, r3, #3
 80206d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80206d8:	18d3      	adds	r3, r2, r3
 80206da:	4a83      	ldr	r2, [pc, #524]	@ (80208e8 <USB_EPStartXfer+0xaa4>)
 80206dc:	4694      	mov	ip, r2
 80206de:	4463      	add	r3, ip
 80206e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80206e2:	1d7b      	adds	r3, r7, #5
 80206e4:	33ff      	adds	r3, #255	@ 0xff
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	b29a      	uxth	r2, r3
 80206ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80206ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80206ee:	2076      	movs	r0, #118	@ 0x76
 80206f0:	183b      	adds	r3, r7, r0
 80206f2:	683a      	ldr	r2, [r7, #0]
 80206f4:	8952      	ldrh	r2, [r2, #10]
 80206f6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80206f8:	683b      	ldr	r3, [r7, #0]
 80206fa:	6959      	ldr	r1, [r3, #20]
 80206fc:	1d7b      	adds	r3, r7, #5
 80206fe:	33ff      	adds	r3, #255	@ 0xff
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	b29c      	uxth	r4, r3
 8020704:	183b      	adds	r3, r7, r0
 8020706:	881a      	ldrh	r2, [r3, #0]
 8020708:	6878      	ldr	r0, [r7, #4]
 802070a:	0023      	movs	r3, r4
 802070c:	f000 fe0c 	bl	8021328 <USB_WritePMA>
 8020710:	e0ab      	b.n	802086a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020712:	683b      	ldr	r3, [r7, #0]
 8020714:	785b      	ldrb	r3, [r3, #1]
 8020716:	2b00      	cmp	r3, #0
 8020718:	d000      	beq.n	802071c <USB_EPStartXfer+0x8d8>
 802071a:	e070      	b.n	80207fe <USB_EPStartXfer+0x9ba>
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	2250      	movs	r2, #80	@ 0x50
 8020724:	5a9b      	ldrh	r3, [r3, r2]
 8020726:	b29b      	uxth	r3, r3
 8020728:	001a      	movs	r2, r3
 802072a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802072c:	189b      	adds	r3, r3, r2
 802072e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020730:	683b      	ldr	r3, [r7, #0]
 8020732:	781b      	ldrb	r3, [r3, #0]
 8020734:	00da      	lsls	r2, r3, #3
 8020736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8020738:	18d3      	adds	r3, r2, r3
 802073a:	4a6d      	ldr	r2, [pc, #436]	@ (80208f0 <USB_EPStartXfer+0xaac>)
 802073c:	4694      	mov	ip, r2
 802073e:	4463      	add	r3, ip
 8020740:	67bb      	str	r3, [r7, #120]	@ 0x78
 8020742:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020744:	881b      	ldrh	r3, [r3, #0]
 8020746:	b29b      	uxth	r3, r3
 8020748:	059b      	lsls	r3, r3, #22
 802074a:	0d9b      	lsrs	r3, r3, #22
 802074c:	b29a      	uxth	r2, r3
 802074e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020750:	801a      	strh	r2, [r3, #0]
 8020752:	1d7b      	adds	r3, r7, #5
 8020754:	33ff      	adds	r3, #255	@ 0xff
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	2b3e      	cmp	r3, #62	@ 0x3e
 802075a:	d922      	bls.n	80207a2 <USB_EPStartXfer+0x95e>
 802075c:	1d7b      	adds	r3, r7, #5
 802075e:	33ff      	adds	r3, #255	@ 0xff
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	095b      	lsrs	r3, r3, #5
 8020764:	21ec      	movs	r1, #236	@ 0xec
 8020766:	187a      	adds	r2, r7, r1
 8020768:	6013      	str	r3, [r2, #0]
 802076a:	1d7b      	adds	r3, r7, #5
 802076c:	33ff      	adds	r3, #255	@ 0xff
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	221f      	movs	r2, #31
 8020772:	4013      	ands	r3, r2
 8020774:	d104      	bne.n	8020780 <USB_EPStartXfer+0x93c>
 8020776:	187b      	adds	r3, r7, r1
 8020778:	681b      	ldr	r3, [r3, #0]
 802077a:	3b01      	subs	r3, #1
 802077c:	187a      	adds	r2, r7, r1
 802077e:	6013      	str	r3, [r2, #0]
 8020780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020782:	881b      	ldrh	r3, [r3, #0]
 8020784:	b29a      	uxth	r2, r3
 8020786:	23ec      	movs	r3, #236	@ 0xec
 8020788:	18fb      	adds	r3, r7, r3
 802078a:	681b      	ldr	r3, [r3, #0]
 802078c:	b29b      	uxth	r3, r3
 802078e:	029b      	lsls	r3, r3, #10
 8020790:	b29b      	uxth	r3, r3
 8020792:	4313      	orrs	r3, r2
 8020794:	b29b      	uxth	r3, r3
 8020796:	4a55      	ldr	r2, [pc, #340]	@ (80208ec <USB_EPStartXfer+0xaa8>)
 8020798:	4313      	orrs	r3, r2
 802079a:	b29a      	uxth	r2, r3
 802079c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802079e:	801a      	strh	r2, [r3, #0]
 80207a0:	e052      	b.n	8020848 <USB_EPStartXfer+0xa04>
 80207a2:	1d7b      	adds	r3, r7, #5
 80207a4:	33ff      	adds	r3, #255	@ 0xff
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d108      	bne.n	80207be <USB_EPStartXfer+0x97a>
 80207ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207ae:	881b      	ldrh	r3, [r3, #0]
 80207b0:	b29b      	uxth	r3, r3
 80207b2:	4a4e      	ldr	r2, [pc, #312]	@ (80208ec <USB_EPStartXfer+0xaa8>)
 80207b4:	4313      	orrs	r3, r2
 80207b6:	b29a      	uxth	r2, r3
 80207b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207ba:	801a      	strh	r2, [r3, #0]
 80207bc:	e044      	b.n	8020848 <USB_EPStartXfer+0xa04>
 80207be:	1d7b      	adds	r3, r7, #5
 80207c0:	33ff      	adds	r3, #255	@ 0xff
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	085b      	lsrs	r3, r3, #1
 80207c6:	21ec      	movs	r1, #236	@ 0xec
 80207c8:	187a      	adds	r2, r7, r1
 80207ca:	6013      	str	r3, [r2, #0]
 80207cc:	1d7b      	adds	r3, r7, #5
 80207ce:	33ff      	adds	r3, #255	@ 0xff
 80207d0:	681b      	ldr	r3, [r3, #0]
 80207d2:	2201      	movs	r2, #1
 80207d4:	4013      	ands	r3, r2
 80207d6:	d004      	beq.n	80207e2 <USB_EPStartXfer+0x99e>
 80207d8:	187b      	adds	r3, r7, r1
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	3301      	adds	r3, #1
 80207de:	187a      	adds	r2, r7, r1
 80207e0:	6013      	str	r3, [r2, #0]
 80207e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207e4:	881b      	ldrh	r3, [r3, #0]
 80207e6:	b29a      	uxth	r2, r3
 80207e8:	23ec      	movs	r3, #236	@ 0xec
 80207ea:	18fb      	adds	r3, r7, r3
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	b29b      	uxth	r3, r3
 80207f0:	029b      	lsls	r3, r3, #10
 80207f2:	b29b      	uxth	r3, r3
 80207f4:	4313      	orrs	r3, r2
 80207f6:	b29a      	uxth	r2, r3
 80207f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207fa:	801a      	strh	r2, [r3, #0]
 80207fc:	e024      	b.n	8020848 <USB_EPStartXfer+0xa04>
 80207fe:	683b      	ldr	r3, [r7, #0]
 8020800:	785b      	ldrb	r3, [r3, #1]
 8020802:	2b01      	cmp	r3, #1
 8020804:	d120      	bne.n	8020848 <USB_EPStartXfer+0xa04>
 8020806:	687b      	ldr	r3, [r7, #4]
 8020808:	2184      	movs	r1, #132	@ 0x84
 802080a:	187a      	adds	r2, r7, r1
 802080c:	6013      	str	r3, [r2, #0]
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	2250      	movs	r2, #80	@ 0x50
 8020812:	5a9b      	ldrh	r3, [r3, r2]
 8020814:	b29b      	uxth	r3, r3
 8020816:	001a      	movs	r2, r3
 8020818:	187b      	adds	r3, r7, r1
 802081a:	681b      	ldr	r3, [r3, #0]
 802081c:	189b      	adds	r3, r3, r2
 802081e:	187a      	adds	r2, r7, r1
 8020820:	6013      	str	r3, [r2, #0]
 8020822:	683b      	ldr	r3, [r7, #0]
 8020824:	781b      	ldrb	r3, [r3, #0]
 8020826:	00da      	lsls	r2, r3, #3
 8020828:	187b      	adds	r3, r7, r1
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	18d3      	adds	r3, r2, r3
 802082e:	4a30      	ldr	r2, [pc, #192]	@ (80208f0 <USB_EPStartXfer+0xaac>)
 8020830:	4694      	mov	ip, r2
 8020832:	4463      	add	r3, ip
 8020834:	2180      	movs	r1, #128	@ 0x80
 8020836:	187a      	adds	r2, r7, r1
 8020838:	6013      	str	r3, [r2, #0]
 802083a:	1d7b      	adds	r3, r7, #5
 802083c:	33ff      	adds	r3, #255	@ 0xff
 802083e:	681b      	ldr	r3, [r3, #0]
 8020840:	b29a      	uxth	r2, r3
 8020842:	187b      	adds	r3, r7, r1
 8020844:	681b      	ldr	r3, [r3, #0]
 8020846:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8020848:	2076      	movs	r0, #118	@ 0x76
 802084a:	183b      	adds	r3, r7, r0
 802084c:	683a      	ldr	r2, [r7, #0]
 802084e:	8912      	ldrh	r2, [r2, #8]
 8020850:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020852:	683b      	ldr	r3, [r7, #0]
 8020854:	6959      	ldr	r1, [r3, #20]
 8020856:	1d7b      	adds	r3, r7, #5
 8020858:	33ff      	adds	r3, #255	@ 0xff
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	b29c      	uxth	r4, r3
 802085e:	183b      	adds	r3, r7, r0
 8020860:	881a      	ldrh	r2, [r3, #0]
 8020862:	6878      	ldr	r0, [r7, #4]
 8020864:	0023      	movs	r3, r4
 8020866:	f000 fd5f 	bl	8021328 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 802086a:	687a      	ldr	r2, [r7, #4]
 802086c:	683b      	ldr	r3, [r7, #0]
 802086e:	781b      	ldrb	r3, [r3, #0]
 8020870:	009b      	lsls	r3, r3, #2
 8020872:	18d3      	adds	r3, r2, r3
 8020874:	881b      	ldrh	r3, [r3, #0]
 8020876:	b29a      	uxth	r2, r3
 8020878:	200a      	movs	r0, #10
 802087a:	183b      	adds	r3, r7, r0
 802087c:	491d      	ldr	r1, [pc, #116]	@ (80208f4 <USB_EPStartXfer+0xab0>)
 802087e:	400a      	ands	r2, r1
 8020880:	801a      	strh	r2, [r3, #0]
 8020882:	183b      	adds	r3, r7, r0
 8020884:	183a      	adds	r2, r7, r0
 8020886:	8812      	ldrh	r2, [r2, #0]
 8020888:	2110      	movs	r1, #16
 802088a:	404a      	eors	r2, r1
 802088c:	801a      	strh	r2, [r3, #0]
 802088e:	183b      	adds	r3, r7, r0
 8020890:	183a      	adds	r2, r7, r0
 8020892:	8812      	ldrh	r2, [r2, #0]
 8020894:	2120      	movs	r1, #32
 8020896:	404a      	eors	r2, r1
 8020898:	801a      	strh	r2, [r3, #0]
 802089a:	687a      	ldr	r2, [r7, #4]
 802089c:	683b      	ldr	r3, [r7, #0]
 802089e:	781b      	ldrb	r3, [r3, #0]
 80208a0:	009b      	lsls	r3, r3, #2
 80208a2:	18d3      	adds	r3, r2, r3
 80208a4:	183a      	adds	r2, r7, r0
 80208a6:	8812      	ldrh	r2, [r2, #0]
 80208a8:	4913      	ldr	r1, [pc, #76]	@ (80208f8 <USB_EPStartXfer+0xab4>)
 80208aa:	430a      	orrs	r2, r1
 80208ac:	b292      	uxth	r2, r2
 80208ae:	801a      	strh	r2, [r3, #0]
 80208b0:	f000 fbf4 	bl	802109c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80208b4:	683b      	ldr	r3, [r7, #0]
 80208b6:	7b1b      	ldrb	r3, [r3, #12]
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	d000      	beq.n	80208be <USB_EPStartXfer+0xa7a>
 80208bc:	e0a9      	b.n	8020a12 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80208be:	683b      	ldr	r3, [r7, #0]
 80208c0:	699a      	ldr	r2, [r3, #24]
 80208c2:	683b      	ldr	r3, [r7, #0]
 80208c4:	691b      	ldr	r3, [r3, #16]
 80208c6:	429a      	cmp	r2, r3
 80208c8:	d918      	bls.n	80208fc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80208ca:	683b      	ldr	r3, [r7, #0]
 80208cc:	691b      	ldr	r3, [r3, #16]
 80208ce:	1d7a      	adds	r2, r7, #5
 80208d0:	32ff      	adds	r2, #255	@ 0xff
 80208d2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80208d4:	683b      	ldr	r3, [r7, #0]
 80208d6:	699a      	ldr	r2, [r3, #24]
 80208d8:	1d7b      	adds	r3, r7, #5
 80208da:	33ff      	adds	r3, #255	@ 0xff
 80208dc:	681b      	ldr	r3, [r3, #0]
 80208de:	1ad2      	subs	r2, r2, r3
 80208e0:	683b      	ldr	r3, [r7, #0]
 80208e2:	619a      	str	r2, [r3, #24]
 80208e4:	e012      	b.n	802090c <USB_EPStartXfer+0xac8>
 80208e6:	46c0      	nop			@ (mov r8, r8)
 80208e8:	00000406 	.word	0x00000406
 80208ec:	ffff8000 	.word	0xffff8000
 80208f0:	00000402 	.word	0x00000402
 80208f4:	ffff8fbf 	.word	0xffff8fbf
 80208f8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80208fc:	683b      	ldr	r3, [r7, #0]
 80208fe:	699b      	ldr	r3, [r3, #24]
 8020900:	1d7a      	adds	r2, r7, #5
 8020902:	32ff      	adds	r2, #255	@ 0xff
 8020904:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020906:	683b      	ldr	r3, [r7, #0]
 8020908:	2200      	movs	r2, #0
 802090a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	2190      	movs	r1, #144	@ 0x90
 8020910:	187a      	adds	r2, r7, r1
 8020912:	6013      	str	r3, [r2, #0]
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	2250      	movs	r2, #80	@ 0x50
 8020918:	5a9b      	ldrh	r3, [r3, r2]
 802091a:	b29b      	uxth	r3, r3
 802091c:	001a      	movs	r2, r3
 802091e:	187b      	adds	r3, r7, r1
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	189b      	adds	r3, r3, r2
 8020924:	187a      	adds	r2, r7, r1
 8020926:	6013      	str	r3, [r2, #0]
 8020928:	683b      	ldr	r3, [r7, #0]
 802092a:	781b      	ldrb	r3, [r3, #0]
 802092c:	00da      	lsls	r2, r3, #3
 802092e:	187b      	adds	r3, r7, r1
 8020930:	681b      	ldr	r3, [r3, #0]
 8020932:	18d3      	adds	r3, r2, r3
 8020934:	4acf      	ldr	r2, [pc, #828]	@ (8020c74 <USB_EPStartXfer+0xe30>)
 8020936:	4694      	mov	ip, r2
 8020938:	4463      	add	r3, ip
 802093a:	218c      	movs	r1, #140	@ 0x8c
 802093c:	187a      	adds	r2, r7, r1
 802093e:	6013      	str	r3, [r2, #0]
 8020940:	187b      	adds	r3, r7, r1
 8020942:	681b      	ldr	r3, [r3, #0]
 8020944:	881b      	ldrh	r3, [r3, #0]
 8020946:	b29b      	uxth	r3, r3
 8020948:	059b      	lsls	r3, r3, #22
 802094a:	0d9b      	lsrs	r3, r3, #22
 802094c:	b29a      	uxth	r2, r3
 802094e:	187b      	adds	r3, r7, r1
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	801a      	strh	r2, [r3, #0]
 8020954:	1d7b      	adds	r3, r7, #5
 8020956:	33ff      	adds	r3, #255	@ 0xff
 8020958:	681b      	ldr	r3, [r3, #0]
 802095a:	2b3e      	cmp	r3, #62	@ 0x3e
 802095c:	d925      	bls.n	80209aa <USB_EPStartXfer+0xb66>
 802095e:	1d7b      	adds	r3, r7, #5
 8020960:	33ff      	adds	r3, #255	@ 0xff
 8020962:	681b      	ldr	r3, [r3, #0]
 8020964:	095b      	lsrs	r3, r3, #5
 8020966:	21e8      	movs	r1, #232	@ 0xe8
 8020968:	187a      	adds	r2, r7, r1
 802096a:	6013      	str	r3, [r2, #0]
 802096c:	1d7b      	adds	r3, r7, #5
 802096e:	33ff      	adds	r3, #255	@ 0xff
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	221f      	movs	r2, #31
 8020974:	4013      	ands	r3, r2
 8020976:	d104      	bne.n	8020982 <USB_EPStartXfer+0xb3e>
 8020978:	187b      	adds	r3, r7, r1
 802097a:	681b      	ldr	r3, [r3, #0]
 802097c:	3b01      	subs	r3, #1
 802097e:	187a      	adds	r2, r7, r1
 8020980:	6013      	str	r3, [r2, #0]
 8020982:	218c      	movs	r1, #140	@ 0x8c
 8020984:	187b      	adds	r3, r7, r1
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	881b      	ldrh	r3, [r3, #0]
 802098a:	b29a      	uxth	r2, r3
 802098c:	23e8      	movs	r3, #232	@ 0xe8
 802098e:	18fb      	adds	r3, r7, r3
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	b29b      	uxth	r3, r3
 8020994:	029b      	lsls	r3, r3, #10
 8020996:	b29b      	uxth	r3, r3
 8020998:	4313      	orrs	r3, r2
 802099a:	b29b      	uxth	r3, r3
 802099c:	4ab6      	ldr	r2, [pc, #728]	@ (8020c78 <USB_EPStartXfer+0xe34>)
 802099e:	4313      	orrs	r3, r2
 80209a0:	b29a      	uxth	r2, r3
 80209a2:	187b      	adds	r3, r7, r1
 80209a4:	681b      	ldr	r3, [r3, #0]
 80209a6:	801a      	strh	r2, [r3, #0]
 80209a8:	e353      	b.n	8021052 <USB_EPStartXfer+0x120e>
 80209aa:	1d7b      	adds	r3, r7, #5
 80209ac:	33ff      	adds	r3, #255	@ 0xff
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	d10b      	bne.n	80209cc <USB_EPStartXfer+0xb88>
 80209b4:	218c      	movs	r1, #140	@ 0x8c
 80209b6:	187b      	adds	r3, r7, r1
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	881b      	ldrh	r3, [r3, #0]
 80209bc:	b29b      	uxth	r3, r3
 80209be:	4aae      	ldr	r2, [pc, #696]	@ (8020c78 <USB_EPStartXfer+0xe34>)
 80209c0:	4313      	orrs	r3, r2
 80209c2:	b29a      	uxth	r2, r3
 80209c4:	187b      	adds	r3, r7, r1
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	801a      	strh	r2, [r3, #0]
 80209ca:	e342      	b.n	8021052 <USB_EPStartXfer+0x120e>
 80209cc:	1d7b      	adds	r3, r7, #5
 80209ce:	33ff      	adds	r3, #255	@ 0xff
 80209d0:	681b      	ldr	r3, [r3, #0]
 80209d2:	085b      	lsrs	r3, r3, #1
 80209d4:	21e8      	movs	r1, #232	@ 0xe8
 80209d6:	187a      	adds	r2, r7, r1
 80209d8:	6013      	str	r3, [r2, #0]
 80209da:	1d7b      	adds	r3, r7, #5
 80209dc:	33ff      	adds	r3, #255	@ 0xff
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	2201      	movs	r2, #1
 80209e2:	4013      	ands	r3, r2
 80209e4:	d004      	beq.n	80209f0 <USB_EPStartXfer+0xbac>
 80209e6:	187b      	adds	r3, r7, r1
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	3301      	adds	r3, #1
 80209ec:	187a      	adds	r2, r7, r1
 80209ee:	6013      	str	r3, [r2, #0]
 80209f0:	218c      	movs	r1, #140	@ 0x8c
 80209f2:	187b      	adds	r3, r7, r1
 80209f4:	681b      	ldr	r3, [r3, #0]
 80209f6:	881b      	ldrh	r3, [r3, #0]
 80209f8:	b29a      	uxth	r2, r3
 80209fa:	23e8      	movs	r3, #232	@ 0xe8
 80209fc:	18fb      	adds	r3, r7, r3
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	b29b      	uxth	r3, r3
 8020a02:	029b      	lsls	r3, r3, #10
 8020a04:	b29b      	uxth	r3, r3
 8020a06:	4313      	orrs	r3, r2
 8020a08:	b29a      	uxth	r2, r3
 8020a0a:	187b      	adds	r3, r7, r1
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	801a      	strh	r2, [r3, #0]
 8020a10:	e31f      	b.n	8021052 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8020a12:	683b      	ldr	r3, [r7, #0]
 8020a14:	78db      	ldrb	r3, [r3, #3]
 8020a16:	2b02      	cmp	r3, #2
 8020a18:	d000      	beq.n	8020a1c <USB_EPStartXfer+0xbd8>
 8020a1a:	e191      	b.n	8020d40 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020a1c:	683b      	ldr	r3, [r7, #0]
 8020a1e:	785b      	ldrb	r3, [r3, #1]
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d000      	beq.n	8020a26 <USB_EPStartXfer+0xbe2>
 8020a24:	e07c      	b.n	8020b20 <USB_EPStartXfer+0xcdc>
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	21ac      	movs	r1, #172	@ 0xac
 8020a2a:	187a      	adds	r2, r7, r1
 8020a2c:	6013      	str	r3, [r2, #0]
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	2250      	movs	r2, #80	@ 0x50
 8020a32:	5a9b      	ldrh	r3, [r3, r2]
 8020a34:	b29b      	uxth	r3, r3
 8020a36:	001a      	movs	r2, r3
 8020a38:	187b      	adds	r3, r7, r1
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	189b      	adds	r3, r3, r2
 8020a3e:	187a      	adds	r2, r7, r1
 8020a40:	6013      	str	r3, [r2, #0]
 8020a42:	683b      	ldr	r3, [r7, #0]
 8020a44:	781b      	ldrb	r3, [r3, #0]
 8020a46:	00da      	lsls	r2, r3, #3
 8020a48:	187b      	adds	r3, r7, r1
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	18d3      	adds	r3, r2, r3
 8020a4e:	4a8b      	ldr	r2, [pc, #556]	@ (8020c7c <USB_EPStartXfer+0xe38>)
 8020a50:	4694      	mov	ip, r2
 8020a52:	4463      	add	r3, ip
 8020a54:	21a8      	movs	r1, #168	@ 0xa8
 8020a56:	187a      	adds	r2, r7, r1
 8020a58:	6013      	str	r3, [r2, #0]
 8020a5a:	187b      	adds	r3, r7, r1
 8020a5c:	681b      	ldr	r3, [r3, #0]
 8020a5e:	881b      	ldrh	r3, [r3, #0]
 8020a60:	b29b      	uxth	r3, r3
 8020a62:	059b      	lsls	r3, r3, #22
 8020a64:	0d9b      	lsrs	r3, r3, #22
 8020a66:	b29a      	uxth	r2, r3
 8020a68:	187b      	adds	r3, r7, r1
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	801a      	strh	r2, [r3, #0]
 8020a6e:	683b      	ldr	r3, [r7, #0]
 8020a70:	691b      	ldr	r3, [r3, #16]
 8020a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8020a74:	d923      	bls.n	8020abe <USB_EPStartXfer+0xc7a>
 8020a76:	683b      	ldr	r3, [r7, #0]
 8020a78:	691b      	ldr	r3, [r3, #16]
 8020a7a:	095b      	lsrs	r3, r3, #5
 8020a7c:	21e4      	movs	r1, #228	@ 0xe4
 8020a7e:	187a      	adds	r2, r7, r1
 8020a80:	6013      	str	r3, [r2, #0]
 8020a82:	683b      	ldr	r3, [r7, #0]
 8020a84:	691b      	ldr	r3, [r3, #16]
 8020a86:	221f      	movs	r2, #31
 8020a88:	4013      	ands	r3, r2
 8020a8a:	d104      	bne.n	8020a96 <USB_EPStartXfer+0xc52>
 8020a8c:	187b      	adds	r3, r7, r1
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	3b01      	subs	r3, #1
 8020a92:	187a      	adds	r2, r7, r1
 8020a94:	6013      	str	r3, [r2, #0]
 8020a96:	21a8      	movs	r1, #168	@ 0xa8
 8020a98:	187b      	adds	r3, r7, r1
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	881b      	ldrh	r3, [r3, #0]
 8020a9e:	b29a      	uxth	r2, r3
 8020aa0:	23e4      	movs	r3, #228	@ 0xe4
 8020aa2:	18fb      	adds	r3, r7, r3
 8020aa4:	681b      	ldr	r3, [r3, #0]
 8020aa6:	b29b      	uxth	r3, r3
 8020aa8:	029b      	lsls	r3, r3, #10
 8020aaa:	b29b      	uxth	r3, r3
 8020aac:	4313      	orrs	r3, r2
 8020aae:	b29b      	uxth	r3, r3
 8020ab0:	4a71      	ldr	r2, [pc, #452]	@ (8020c78 <USB_EPStartXfer+0xe34>)
 8020ab2:	4313      	orrs	r3, r2
 8020ab4:	b29a      	uxth	r2, r3
 8020ab6:	187b      	adds	r3, r7, r1
 8020ab8:	681b      	ldr	r3, [r3, #0]
 8020aba:	801a      	strh	r2, [r3, #0]
 8020abc:	e054      	b.n	8020b68 <USB_EPStartXfer+0xd24>
 8020abe:	683b      	ldr	r3, [r7, #0]
 8020ac0:	691b      	ldr	r3, [r3, #16]
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	d10b      	bne.n	8020ade <USB_EPStartXfer+0xc9a>
 8020ac6:	21a8      	movs	r1, #168	@ 0xa8
 8020ac8:	187b      	adds	r3, r7, r1
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	881b      	ldrh	r3, [r3, #0]
 8020ace:	b29b      	uxth	r3, r3
 8020ad0:	4a69      	ldr	r2, [pc, #420]	@ (8020c78 <USB_EPStartXfer+0xe34>)
 8020ad2:	4313      	orrs	r3, r2
 8020ad4:	b29a      	uxth	r2, r3
 8020ad6:	187b      	adds	r3, r7, r1
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	801a      	strh	r2, [r3, #0]
 8020adc:	e044      	b.n	8020b68 <USB_EPStartXfer+0xd24>
 8020ade:	683b      	ldr	r3, [r7, #0]
 8020ae0:	691b      	ldr	r3, [r3, #16]
 8020ae2:	085b      	lsrs	r3, r3, #1
 8020ae4:	21e4      	movs	r1, #228	@ 0xe4
 8020ae6:	187a      	adds	r2, r7, r1
 8020ae8:	6013      	str	r3, [r2, #0]
 8020aea:	683b      	ldr	r3, [r7, #0]
 8020aec:	691b      	ldr	r3, [r3, #16]
 8020aee:	2201      	movs	r2, #1
 8020af0:	4013      	ands	r3, r2
 8020af2:	d004      	beq.n	8020afe <USB_EPStartXfer+0xcba>
 8020af4:	187b      	adds	r3, r7, r1
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	3301      	adds	r3, #1
 8020afa:	187a      	adds	r2, r7, r1
 8020afc:	6013      	str	r3, [r2, #0]
 8020afe:	21a8      	movs	r1, #168	@ 0xa8
 8020b00:	187b      	adds	r3, r7, r1
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	881b      	ldrh	r3, [r3, #0]
 8020b06:	b29a      	uxth	r2, r3
 8020b08:	23e4      	movs	r3, #228	@ 0xe4
 8020b0a:	18fb      	adds	r3, r7, r3
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	b29b      	uxth	r3, r3
 8020b10:	029b      	lsls	r3, r3, #10
 8020b12:	b29b      	uxth	r3, r3
 8020b14:	4313      	orrs	r3, r2
 8020b16:	b29a      	uxth	r2, r3
 8020b18:	187b      	adds	r3, r7, r1
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	801a      	strh	r2, [r3, #0]
 8020b1e:	e023      	b.n	8020b68 <USB_EPStartXfer+0xd24>
 8020b20:	683b      	ldr	r3, [r7, #0]
 8020b22:	785b      	ldrb	r3, [r3, #1]
 8020b24:	2b01      	cmp	r3, #1
 8020b26:	d11f      	bne.n	8020b68 <USB_EPStartXfer+0xd24>
 8020b28:	687b      	ldr	r3, [r7, #4]
 8020b2a:	21b4      	movs	r1, #180	@ 0xb4
 8020b2c:	187a      	adds	r2, r7, r1
 8020b2e:	6013      	str	r3, [r2, #0]
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	2250      	movs	r2, #80	@ 0x50
 8020b34:	5a9b      	ldrh	r3, [r3, r2]
 8020b36:	b29b      	uxth	r3, r3
 8020b38:	001a      	movs	r2, r3
 8020b3a:	187b      	adds	r3, r7, r1
 8020b3c:	681b      	ldr	r3, [r3, #0]
 8020b3e:	189b      	adds	r3, r3, r2
 8020b40:	187a      	adds	r2, r7, r1
 8020b42:	6013      	str	r3, [r2, #0]
 8020b44:	683b      	ldr	r3, [r7, #0]
 8020b46:	781b      	ldrb	r3, [r3, #0]
 8020b48:	00da      	lsls	r2, r3, #3
 8020b4a:	187b      	adds	r3, r7, r1
 8020b4c:	681b      	ldr	r3, [r3, #0]
 8020b4e:	18d3      	adds	r3, r2, r3
 8020b50:	4a4a      	ldr	r2, [pc, #296]	@ (8020c7c <USB_EPStartXfer+0xe38>)
 8020b52:	4694      	mov	ip, r2
 8020b54:	4463      	add	r3, ip
 8020b56:	21b0      	movs	r1, #176	@ 0xb0
 8020b58:	187a      	adds	r2, r7, r1
 8020b5a:	6013      	str	r3, [r2, #0]
 8020b5c:	683b      	ldr	r3, [r7, #0]
 8020b5e:	691b      	ldr	r3, [r3, #16]
 8020b60:	b29a      	uxth	r2, r3
 8020b62:	187b      	adds	r3, r7, r1
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	801a      	strh	r2, [r3, #0]
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	22a4      	movs	r2, #164	@ 0xa4
 8020b6c:	18ba      	adds	r2, r7, r2
 8020b6e:	6013      	str	r3, [r2, #0]
 8020b70:	683b      	ldr	r3, [r7, #0]
 8020b72:	785b      	ldrb	r3, [r3, #1]
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	d000      	beq.n	8020b7a <USB_EPStartXfer+0xd36>
 8020b78:	e082      	b.n	8020c80 <USB_EPStartXfer+0xe3c>
 8020b7a:	687b      	ldr	r3, [r7, #4]
 8020b7c:	219c      	movs	r1, #156	@ 0x9c
 8020b7e:	187a      	adds	r2, r7, r1
 8020b80:	6013      	str	r3, [r2, #0]
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	2250      	movs	r2, #80	@ 0x50
 8020b86:	5a9b      	ldrh	r3, [r3, r2]
 8020b88:	b29b      	uxth	r3, r3
 8020b8a:	001a      	movs	r2, r3
 8020b8c:	187b      	adds	r3, r7, r1
 8020b8e:	681b      	ldr	r3, [r3, #0]
 8020b90:	189b      	adds	r3, r3, r2
 8020b92:	187a      	adds	r2, r7, r1
 8020b94:	6013      	str	r3, [r2, #0]
 8020b96:	683b      	ldr	r3, [r7, #0]
 8020b98:	781b      	ldrb	r3, [r3, #0]
 8020b9a:	00da      	lsls	r2, r3, #3
 8020b9c:	187b      	adds	r3, r7, r1
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	18d3      	adds	r3, r2, r3
 8020ba2:	4a34      	ldr	r2, [pc, #208]	@ (8020c74 <USB_EPStartXfer+0xe30>)
 8020ba4:	4694      	mov	ip, r2
 8020ba6:	4463      	add	r3, ip
 8020ba8:	2198      	movs	r1, #152	@ 0x98
 8020baa:	187a      	adds	r2, r7, r1
 8020bac:	6013      	str	r3, [r2, #0]
 8020bae:	187b      	adds	r3, r7, r1
 8020bb0:	681b      	ldr	r3, [r3, #0]
 8020bb2:	881b      	ldrh	r3, [r3, #0]
 8020bb4:	b29b      	uxth	r3, r3
 8020bb6:	059b      	lsls	r3, r3, #22
 8020bb8:	0d9b      	lsrs	r3, r3, #22
 8020bba:	b29a      	uxth	r2, r3
 8020bbc:	187b      	adds	r3, r7, r1
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	801a      	strh	r2, [r3, #0]
 8020bc2:	683b      	ldr	r3, [r7, #0]
 8020bc4:	691b      	ldr	r3, [r3, #16]
 8020bc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8020bc8:	d923      	bls.n	8020c12 <USB_EPStartXfer+0xdce>
 8020bca:	683b      	ldr	r3, [r7, #0]
 8020bcc:	691b      	ldr	r3, [r3, #16]
 8020bce:	095b      	lsrs	r3, r3, #5
 8020bd0:	21e0      	movs	r1, #224	@ 0xe0
 8020bd2:	187a      	adds	r2, r7, r1
 8020bd4:	6013      	str	r3, [r2, #0]
 8020bd6:	683b      	ldr	r3, [r7, #0]
 8020bd8:	691b      	ldr	r3, [r3, #16]
 8020bda:	221f      	movs	r2, #31
 8020bdc:	4013      	ands	r3, r2
 8020bde:	d104      	bne.n	8020bea <USB_EPStartXfer+0xda6>
 8020be0:	187b      	adds	r3, r7, r1
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	3b01      	subs	r3, #1
 8020be6:	187a      	adds	r2, r7, r1
 8020be8:	6013      	str	r3, [r2, #0]
 8020bea:	2198      	movs	r1, #152	@ 0x98
 8020bec:	187b      	adds	r3, r7, r1
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	881b      	ldrh	r3, [r3, #0]
 8020bf2:	b29a      	uxth	r2, r3
 8020bf4:	23e0      	movs	r3, #224	@ 0xe0
 8020bf6:	18fb      	adds	r3, r7, r3
 8020bf8:	681b      	ldr	r3, [r3, #0]
 8020bfa:	b29b      	uxth	r3, r3
 8020bfc:	029b      	lsls	r3, r3, #10
 8020bfe:	b29b      	uxth	r3, r3
 8020c00:	4313      	orrs	r3, r2
 8020c02:	b29b      	uxth	r3, r3
 8020c04:	4a1c      	ldr	r2, [pc, #112]	@ (8020c78 <USB_EPStartXfer+0xe34>)
 8020c06:	4313      	orrs	r3, r2
 8020c08:	b29a      	uxth	r2, r3
 8020c0a:	187b      	adds	r3, r7, r1
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	801a      	strh	r2, [r3, #0]
 8020c10:	e057      	b.n	8020cc2 <USB_EPStartXfer+0xe7e>
 8020c12:	683b      	ldr	r3, [r7, #0]
 8020c14:	691b      	ldr	r3, [r3, #16]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d10b      	bne.n	8020c32 <USB_EPStartXfer+0xdee>
 8020c1a:	2198      	movs	r1, #152	@ 0x98
 8020c1c:	187b      	adds	r3, r7, r1
 8020c1e:	681b      	ldr	r3, [r3, #0]
 8020c20:	881b      	ldrh	r3, [r3, #0]
 8020c22:	b29b      	uxth	r3, r3
 8020c24:	4a14      	ldr	r2, [pc, #80]	@ (8020c78 <USB_EPStartXfer+0xe34>)
 8020c26:	4313      	orrs	r3, r2
 8020c28:	b29a      	uxth	r2, r3
 8020c2a:	187b      	adds	r3, r7, r1
 8020c2c:	681b      	ldr	r3, [r3, #0]
 8020c2e:	801a      	strh	r2, [r3, #0]
 8020c30:	e047      	b.n	8020cc2 <USB_EPStartXfer+0xe7e>
 8020c32:	683b      	ldr	r3, [r7, #0]
 8020c34:	691b      	ldr	r3, [r3, #16]
 8020c36:	085b      	lsrs	r3, r3, #1
 8020c38:	21e0      	movs	r1, #224	@ 0xe0
 8020c3a:	187a      	adds	r2, r7, r1
 8020c3c:	6013      	str	r3, [r2, #0]
 8020c3e:	683b      	ldr	r3, [r7, #0]
 8020c40:	691b      	ldr	r3, [r3, #16]
 8020c42:	2201      	movs	r2, #1
 8020c44:	4013      	ands	r3, r2
 8020c46:	d004      	beq.n	8020c52 <USB_EPStartXfer+0xe0e>
 8020c48:	187b      	adds	r3, r7, r1
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	3301      	adds	r3, #1
 8020c4e:	187a      	adds	r2, r7, r1
 8020c50:	6013      	str	r3, [r2, #0]
 8020c52:	2198      	movs	r1, #152	@ 0x98
 8020c54:	187b      	adds	r3, r7, r1
 8020c56:	681b      	ldr	r3, [r3, #0]
 8020c58:	881b      	ldrh	r3, [r3, #0]
 8020c5a:	b29a      	uxth	r2, r3
 8020c5c:	23e0      	movs	r3, #224	@ 0xe0
 8020c5e:	18fb      	adds	r3, r7, r3
 8020c60:	681b      	ldr	r3, [r3, #0]
 8020c62:	b29b      	uxth	r3, r3
 8020c64:	029b      	lsls	r3, r3, #10
 8020c66:	b29b      	uxth	r3, r3
 8020c68:	4313      	orrs	r3, r2
 8020c6a:	b29a      	uxth	r2, r3
 8020c6c:	187b      	adds	r3, r7, r1
 8020c6e:	681b      	ldr	r3, [r3, #0]
 8020c70:	801a      	strh	r2, [r3, #0]
 8020c72:	e026      	b.n	8020cc2 <USB_EPStartXfer+0xe7e>
 8020c74:	00000406 	.word	0x00000406
 8020c78:	ffff8000 	.word	0xffff8000
 8020c7c:	00000402 	.word	0x00000402
 8020c80:	683b      	ldr	r3, [r7, #0]
 8020c82:	785b      	ldrb	r3, [r3, #1]
 8020c84:	2b01      	cmp	r3, #1
 8020c86:	d11c      	bne.n	8020cc2 <USB_EPStartXfer+0xe7e>
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	2250      	movs	r2, #80	@ 0x50
 8020c8c:	5a9b      	ldrh	r3, [r3, r2]
 8020c8e:	b29b      	uxth	r3, r3
 8020c90:	001a      	movs	r2, r3
 8020c92:	21a4      	movs	r1, #164	@ 0xa4
 8020c94:	187b      	adds	r3, r7, r1
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	189b      	adds	r3, r3, r2
 8020c9a:	187a      	adds	r2, r7, r1
 8020c9c:	6013      	str	r3, [r2, #0]
 8020c9e:	683b      	ldr	r3, [r7, #0]
 8020ca0:	781b      	ldrb	r3, [r3, #0]
 8020ca2:	00da      	lsls	r2, r3, #3
 8020ca4:	187b      	adds	r3, r7, r1
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	18d3      	adds	r3, r2, r3
 8020caa:	4ad2      	ldr	r2, [pc, #840]	@ (8020ff4 <USB_EPStartXfer+0x11b0>)
 8020cac:	4694      	mov	ip, r2
 8020cae:	4463      	add	r3, ip
 8020cb0:	21a0      	movs	r1, #160	@ 0xa0
 8020cb2:	187a      	adds	r2, r7, r1
 8020cb4:	6013      	str	r3, [r2, #0]
 8020cb6:	683b      	ldr	r3, [r7, #0]
 8020cb8:	691b      	ldr	r3, [r3, #16]
 8020cba:	b29a      	uxth	r2, r3
 8020cbc:	187b      	adds	r3, r7, r1
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020cc2:	683b      	ldr	r3, [r7, #0]
 8020cc4:	69db      	ldr	r3, [r3, #28]
 8020cc6:	2b00      	cmp	r3, #0
 8020cc8:	d100      	bne.n	8020ccc <USB_EPStartXfer+0xe88>
 8020cca:	e1c2      	b.n	8021052 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020ccc:	687a      	ldr	r2, [r7, #4]
 8020cce:	683b      	ldr	r3, [r7, #0]
 8020cd0:	781b      	ldrb	r3, [r3, #0]
 8020cd2:	009b      	lsls	r3, r3, #2
 8020cd4:	18d2      	adds	r2, r2, r3
 8020cd6:	2196      	movs	r1, #150	@ 0x96
 8020cd8:	187b      	adds	r3, r7, r1
 8020cda:	8812      	ldrh	r2, [r2, #0]
 8020cdc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020cde:	187b      	adds	r3, r7, r1
 8020ce0:	881a      	ldrh	r2, [r3, #0]
 8020ce2:	2380      	movs	r3, #128	@ 0x80
 8020ce4:	01db      	lsls	r3, r3, #7
 8020ce6:	4013      	ands	r3, r2
 8020ce8:	d004      	beq.n	8020cf4 <USB_EPStartXfer+0xeb0>
 8020cea:	187b      	adds	r3, r7, r1
 8020cec:	881b      	ldrh	r3, [r3, #0]
 8020cee:	2240      	movs	r2, #64	@ 0x40
 8020cf0:	4013      	ands	r3, r2
 8020cf2:	d10d      	bne.n	8020d10 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020cf4:	2196      	movs	r1, #150	@ 0x96
 8020cf6:	187b      	adds	r3, r7, r1
 8020cf8:	881a      	ldrh	r2, [r3, #0]
 8020cfa:	2380      	movs	r3, #128	@ 0x80
 8020cfc:	01db      	lsls	r3, r3, #7
 8020cfe:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020d00:	d000      	beq.n	8020d04 <USB_EPStartXfer+0xec0>
 8020d02:	e1a6      	b.n	8021052 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020d04:	187b      	adds	r3, r7, r1
 8020d06:	881b      	ldrh	r3, [r3, #0]
 8020d08:	2240      	movs	r2, #64	@ 0x40
 8020d0a:	4013      	ands	r3, r2
 8020d0c:	d000      	beq.n	8020d10 <USB_EPStartXfer+0xecc>
 8020d0e:	e1a0      	b.n	8021052 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020d10:	687a      	ldr	r2, [r7, #4]
 8020d12:	683b      	ldr	r3, [r7, #0]
 8020d14:	781b      	ldrb	r3, [r3, #0]
 8020d16:	009b      	lsls	r3, r3, #2
 8020d18:	18d3      	adds	r3, r2, r3
 8020d1a:	881b      	ldrh	r3, [r3, #0]
 8020d1c:	b29a      	uxth	r2, r3
 8020d1e:	2094      	movs	r0, #148	@ 0x94
 8020d20:	183b      	adds	r3, r7, r0
 8020d22:	49b5      	ldr	r1, [pc, #724]	@ (8020ff8 <USB_EPStartXfer+0x11b4>)
 8020d24:	400a      	ands	r2, r1
 8020d26:	801a      	strh	r2, [r3, #0]
 8020d28:	687a      	ldr	r2, [r7, #4]
 8020d2a:	683b      	ldr	r3, [r7, #0]
 8020d2c:	781b      	ldrb	r3, [r3, #0]
 8020d2e:	009b      	lsls	r3, r3, #2
 8020d30:	18d3      	adds	r3, r2, r3
 8020d32:	183a      	adds	r2, r7, r0
 8020d34:	8812      	ldrh	r2, [r2, #0]
 8020d36:	49b1      	ldr	r1, [pc, #708]	@ (8020ffc <USB_EPStartXfer+0x11b8>)
 8020d38:	430a      	orrs	r2, r1
 8020d3a:	b292      	uxth	r2, r2
 8020d3c:	801a      	strh	r2, [r3, #0]
 8020d3e:	e188      	b.n	8021052 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	78db      	ldrb	r3, [r3, #3]
 8020d44:	2b01      	cmp	r3, #1
 8020d46:	d000      	beq.n	8020d4a <USB_EPStartXfer+0xf06>
 8020d48:	e181      	b.n	802104e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020d4a:	683b      	ldr	r3, [r7, #0]
 8020d4c:	699a      	ldr	r2, [r3, #24]
 8020d4e:	683b      	ldr	r3, [r7, #0]
 8020d50:	691b      	ldr	r3, [r3, #16]
 8020d52:	429a      	cmp	r2, r3
 8020d54:	d90d      	bls.n	8020d72 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020d56:	683b      	ldr	r3, [r7, #0]
 8020d58:	691b      	ldr	r3, [r3, #16]
 8020d5a:	1d7a      	adds	r2, r7, #5
 8020d5c:	32ff      	adds	r2, #255	@ 0xff
 8020d5e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020d60:	683b      	ldr	r3, [r7, #0]
 8020d62:	699a      	ldr	r2, [r3, #24]
 8020d64:	1d7b      	adds	r3, r7, #5
 8020d66:	33ff      	adds	r3, #255	@ 0xff
 8020d68:	681b      	ldr	r3, [r3, #0]
 8020d6a:	1ad2      	subs	r2, r2, r3
 8020d6c:	683b      	ldr	r3, [r7, #0]
 8020d6e:	619a      	str	r2, [r3, #24]
 8020d70:	e007      	b.n	8020d82 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020d72:	683b      	ldr	r3, [r7, #0]
 8020d74:	699b      	ldr	r3, [r3, #24]
 8020d76:	1d7a      	adds	r2, r7, #5
 8020d78:	32ff      	adds	r2, #255	@ 0xff
 8020d7a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020d7c:	683b      	ldr	r3, [r7, #0]
 8020d7e:	2200      	movs	r2, #0
 8020d80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020d82:	683b      	ldr	r3, [r7, #0]
 8020d84:	785b      	ldrb	r3, [r3, #1]
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d000      	beq.n	8020d8c <USB_EPStartXfer+0xf48>
 8020d8a:	e082      	b.n	8020e92 <USB_EPStartXfer+0x104e>
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	21cc      	movs	r1, #204	@ 0xcc
 8020d90:	187a      	adds	r2, r7, r1
 8020d92:	6013      	str	r3, [r2, #0]
 8020d94:	687b      	ldr	r3, [r7, #4]
 8020d96:	2250      	movs	r2, #80	@ 0x50
 8020d98:	5a9b      	ldrh	r3, [r3, r2]
 8020d9a:	b29b      	uxth	r3, r3
 8020d9c:	001a      	movs	r2, r3
 8020d9e:	187b      	adds	r3, r7, r1
 8020da0:	681b      	ldr	r3, [r3, #0]
 8020da2:	189b      	adds	r3, r3, r2
 8020da4:	187a      	adds	r2, r7, r1
 8020da6:	6013      	str	r3, [r2, #0]
 8020da8:	683b      	ldr	r3, [r7, #0]
 8020daa:	781b      	ldrb	r3, [r3, #0]
 8020dac:	00da      	lsls	r2, r3, #3
 8020dae:	187b      	adds	r3, r7, r1
 8020db0:	681b      	ldr	r3, [r3, #0]
 8020db2:	18d3      	adds	r3, r2, r3
 8020db4:	4a92      	ldr	r2, [pc, #584]	@ (8021000 <USB_EPStartXfer+0x11bc>)
 8020db6:	4694      	mov	ip, r2
 8020db8:	4463      	add	r3, ip
 8020dba:	21c8      	movs	r1, #200	@ 0xc8
 8020dbc:	187a      	adds	r2, r7, r1
 8020dbe:	6013      	str	r3, [r2, #0]
 8020dc0:	187b      	adds	r3, r7, r1
 8020dc2:	681b      	ldr	r3, [r3, #0]
 8020dc4:	881b      	ldrh	r3, [r3, #0]
 8020dc6:	b29b      	uxth	r3, r3
 8020dc8:	059b      	lsls	r3, r3, #22
 8020dca:	0d9b      	lsrs	r3, r3, #22
 8020dcc:	b29a      	uxth	r2, r3
 8020dce:	187b      	adds	r3, r7, r1
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	801a      	strh	r2, [r3, #0]
 8020dd4:	1d7b      	adds	r3, r7, #5
 8020dd6:	33ff      	adds	r3, #255	@ 0xff
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	2b3e      	cmp	r3, #62	@ 0x3e
 8020ddc:	d925      	bls.n	8020e2a <USB_EPStartXfer+0xfe6>
 8020dde:	1d7b      	adds	r3, r7, #5
 8020de0:	33ff      	adds	r3, #255	@ 0xff
 8020de2:	681b      	ldr	r3, [r3, #0]
 8020de4:	095b      	lsrs	r3, r3, #5
 8020de6:	21dc      	movs	r1, #220	@ 0xdc
 8020de8:	187a      	adds	r2, r7, r1
 8020dea:	6013      	str	r3, [r2, #0]
 8020dec:	1d7b      	adds	r3, r7, #5
 8020dee:	33ff      	adds	r3, #255	@ 0xff
 8020df0:	681b      	ldr	r3, [r3, #0]
 8020df2:	221f      	movs	r2, #31
 8020df4:	4013      	ands	r3, r2
 8020df6:	d104      	bne.n	8020e02 <USB_EPStartXfer+0xfbe>
 8020df8:	187b      	adds	r3, r7, r1
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	3b01      	subs	r3, #1
 8020dfe:	187a      	adds	r2, r7, r1
 8020e00:	6013      	str	r3, [r2, #0]
 8020e02:	21c8      	movs	r1, #200	@ 0xc8
 8020e04:	187b      	adds	r3, r7, r1
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	881b      	ldrh	r3, [r3, #0]
 8020e0a:	b29a      	uxth	r2, r3
 8020e0c:	23dc      	movs	r3, #220	@ 0xdc
 8020e0e:	18fb      	adds	r3, r7, r3
 8020e10:	681b      	ldr	r3, [r3, #0]
 8020e12:	b29b      	uxth	r3, r3
 8020e14:	029b      	lsls	r3, r3, #10
 8020e16:	b29b      	uxth	r3, r3
 8020e18:	4313      	orrs	r3, r2
 8020e1a:	b29b      	uxth	r3, r3
 8020e1c:	4a79      	ldr	r2, [pc, #484]	@ (8021004 <USB_EPStartXfer+0x11c0>)
 8020e1e:	4313      	orrs	r3, r2
 8020e20:	b29a      	uxth	r2, r3
 8020e22:	187b      	adds	r3, r7, r1
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	801a      	strh	r2, [r3, #0]
 8020e28:	e058      	b.n	8020edc <USB_EPStartXfer+0x1098>
 8020e2a:	1d7b      	adds	r3, r7, #5
 8020e2c:	33ff      	adds	r3, #255	@ 0xff
 8020e2e:	681b      	ldr	r3, [r3, #0]
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d10b      	bne.n	8020e4c <USB_EPStartXfer+0x1008>
 8020e34:	21c8      	movs	r1, #200	@ 0xc8
 8020e36:	187b      	adds	r3, r7, r1
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	881b      	ldrh	r3, [r3, #0]
 8020e3c:	b29b      	uxth	r3, r3
 8020e3e:	4a71      	ldr	r2, [pc, #452]	@ (8021004 <USB_EPStartXfer+0x11c0>)
 8020e40:	4313      	orrs	r3, r2
 8020e42:	b29a      	uxth	r2, r3
 8020e44:	187b      	adds	r3, r7, r1
 8020e46:	681b      	ldr	r3, [r3, #0]
 8020e48:	801a      	strh	r2, [r3, #0]
 8020e4a:	e047      	b.n	8020edc <USB_EPStartXfer+0x1098>
 8020e4c:	1d7b      	adds	r3, r7, #5
 8020e4e:	33ff      	adds	r3, #255	@ 0xff
 8020e50:	681b      	ldr	r3, [r3, #0]
 8020e52:	085b      	lsrs	r3, r3, #1
 8020e54:	21dc      	movs	r1, #220	@ 0xdc
 8020e56:	187a      	adds	r2, r7, r1
 8020e58:	6013      	str	r3, [r2, #0]
 8020e5a:	1d7b      	adds	r3, r7, #5
 8020e5c:	33ff      	adds	r3, #255	@ 0xff
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	2201      	movs	r2, #1
 8020e62:	4013      	ands	r3, r2
 8020e64:	d004      	beq.n	8020e70 <USB_EPStartXfer+0x102c>
 8020e66:	187b      	adds	r3, r7, r1
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	3301      	adds	r3, #1
 8020e6c:	187a      	adds	r2, r7, r1
 8020e6e:	6013      	str	r3, [r2, #0]
 8020e70:	21c8      	movs	r1, #200	@ 0xc8
 8020e72:	187b      	adds	r3, r7, r1
 8020e74:	681b      	ldr	r3, [r3, #0]
 8020e76:	881b      	ldrh	r3, [r3, #0]
 8020e78:	b29a      	uxth	r2, r3
 8020e7a:	23dc      	movs	r3, #220	@ 0xdc
 8020e7c:	18fb      	adds	r3, r7, r3
 8020e7e:	681b      	ldr	r3, [r3, #0]
 8020e80:	b29b      	uxth	r3, r3
 8020e82:	029b      	lsls	r3, r3, #10
 8020e84:	b29b      	uxth	r3, r3
 8020e86:	4313      	orrs	r3, r2
 8020e88:	b29a      	uxth	r2, r3
 8020e8a:	187b      	adds	r3, r7, r1
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	801a      	strh	r2, [r3, #0]
 8020e90:	e024      	b.n	8020edc <USB_EPStartXfer+0x1098>
 8020e92:	683b      	ldr	r3, [r7, #0]
 8020e94:	785b      	ldrb	r3, [r3, #1]
 8020e96:	2b01      	cmp	r3, #1
 8020e98:	d120      	bne.n	8020edc <USB_EPStartXfer+0x1098>
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	21d4      	movs	r1, #212	@ 0xd4
 8020e9e:	187a      	adds	r2, r7, r1
 8020ea0:	6013      	str	r3, [r2, #0]
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	2250      	movs	r2, #80	@ 0x50
 8020ea6:	5a9b      	ldrh	r3, [r3, r2]
 8020ea8:	b29b      	uxth	r3, r3
 8020eaa:	001a      	movs	r2, r3
 8020eac:	187b      	adds	r3, r7, r1
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	189b      	adds	r3, r3, r2
 8020eb2:	187a      	adds	r2, r7, r1
 8020eb4:	6013      	str	r3, [r2, #0]
 8020eb6:	683b      	ldr	r3, [r7, #0]
 8020eb8:	781b      	ldrb	r3, [r3, #0]
 8020eba:	00da      	lsls	r2, r3, #3
 8020ebc:	187b      	adds	r3, r7, r1
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	18d3      	adds	r3, r2, r3
 8020ec2:	4a4f      	ldr	r2, [pc, #316]	@ (8021000 <USB_EPStartXfer+0x11bc>)
 8020ec4:	4694      	mov	ip, r2
 8020ec6:	4463      	add	r3, ip
 8020ec8:	21d0      	movs	r1, #208	@ 0xd0
 8020eca:	187a      	adds	r2, r7, r1
 8020ecc:	6013      	str	r3, [r2, #0]
 8020ece:	1d7b      	adds	r3, r7, #5
 8020ed0:	33ff      	adds	r3, #255	@ 0xff
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	b29a      	uxth	r2, r3
 8020ed6:	187b      	adds	r3, r7, r1
 8020ed8:	681b      	ldr	r3, [r3, #0]
 8020eda:	801a      	strh	r2, [r3, #0]
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	22c4      	movs	r2, #196	@ 0xc4
 8020ee0:	18ba      	adds	r2, r7, r2
 8020ee2:	6013      	str	r3, [r2, #0]
 8020ee4:	683b      	ldr	r3, [r7, #0]
 8020ee6:	785b      	ldrb	r3, [r3, #1]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d000      	beq.n	8020eee <USB_EPStartXfer+0x10aa>
 8020eec:	e08c      	b.n	8021008 <USB_EPStartXfer+0x11c4>
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	21bc      	movs	r1, #188	@ 0xbc
 8020ef2:	187a      	adds	r2, r7, r1
 8020ef4:	6013      	str	r3, [r2, #0]
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	2250      	movs	r2, #80	@ 0x50
 8020efa:	5a9b      	ldrh	r3, [r3, r2]
 8020efc:	b29b      	uxth	r3, r3
 8020efe:	001a      	movs	r2, r3
 8020f00:	187b      	adds	r3, r7, r1
 8020f02:	681b      	ldr	r3, [r3, #0]
 8020f04:	189b      	adds	r3, r3, r2
 8020f06:	187a      	adds	r2, r7, r1
 8020f08:	6013      	str	r3, [r2, #0]
 8020f0a:	683b      	ldr	r3, [r7, #0]
 8020f0c:	781b      	ldrb	r3, [r3, #0]
 8020f0e:	00da      	lsls	r2, r3, #3
 8020f10:	187b      	adds	r3, r7, r1
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	18d3      	adds	r3, r2, r3
 8020f16:	4a37      	ldr	r2, [pc, #220]	@ (8020ff4 <USB_EPStartXfer+0x11b0>)
 8020f18:	4694      	mov	ip, r2
 8020f1a:	4463      	add	r3, ip
 8020f1c:	21b8      	movs	r1, #184	@ 0xb8
 8020f1e:	187a      	adds	r2, r7, r1
 8020f20:	6013      	str	r3, [r2, #0]
 8020f22:	187b      	adds	r3, r7, r1
 8020f24:	681b      	ldr	r3, [r3, #0]
 8020f26:	881b      	ldrh	r3, [r3, #0]
 8020f28:	b29b      	uxth	r3, r3
 8020f2a:	059b      	lsls	r3, r3, #22
 8020f2c:	0d9b      	lsrs	r3, r3, #22
 8020f2e:	b29a      	uxth	r2, r3
 8020f30:	187b      	adds	r3, r7, r1
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	801a      	strh	r2, [r3, #0]
 8020f36:	1d7b      	adds	r3, r7, #5
 8020f38:	33ff      	adds	r3, #255	@ 0xff
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8020f3e:	d925      	bls.n	8020f8c <USB_EPStartXfer+0x1148>
 8020f40:	1d7b      	adds	r3, r7, #5
 8020f42:	33ff      	adds	r3, #255	@ 0xff
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	095b      	lsrs	r3, r3, #5
 8020f48:	21d8      	movs	r1, #216	@ 0xd8
 8020f4a:	187a      	adds	r2, r7, r1
 8020f4c:	6013      	str	r3, [r2, #0]
 8020f4e:	1d7b      	adds	r3, r7, #5
 8020f50:	33ff      	adds	r3, #255	@ 0xff
 8020f52:	681b      	ldr	r3, [r3, #0]
 8020f54:	221f      	movs	r2, #31
 8020f56:	4013      	ands	r3, r2
 8020f58:	d104      	bne.n	8020f64 <USB_EPStartXfer+0x1120>
 8020f5a:	187b      	adds	r3, r7, r1
 8020f5c:	681b      	ldr	r3, [r3, #0]
 8020f5e:	3b01      	subs	r3, #1
 8020f60:	187a      	adds	r2, r7, r1
 8020f62:	6013      	str	r3, [r2, #0]
 8020f64:	21b8      	movs	r1, #184	@ 0xb8
 8020f66:	187b      	adds	r3, r7, r1
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	881b      	ldrh	r3, [r3, #0]
 8020f6c:	b29a      	uxth	r2, r3
 8020f6e:	23d8      	movs	r3, #216	@ 0xd8
 8020f70:	18fb      	adds	r3, r7, r3
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	b29b      	uxth	r3, r3
 8020f76:	029b      	lsls	r3, r3, #10
 8020f78:	b29b      	uxth	r3, r3
 8020f7a:	4313      	orrs	r3, r2
 8020f7c:	b29b      	uxth	r3, r3
 8020f7e:	4a21      	ldr	r2, [pc, #132]	@ (8021004 <USB_EPStartXfer+0x11c0>)
 8020f80:	4313      	orrs	r3, r2
 8020f82:	b29a      	uxth	r2, r3
 8020f84:	187b      	adds	r3, r7, r1
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	801a      	strh	r2, [r3, #0]
 8020f8a:	e062      	b.n	8021052 <USB_EPStartXfer+0x120e>
 8020f8c:	1d7b      	adds	r3, r7, #5
 8020f8e:	33ff      	adds	r3, #255	@ 0xff
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d10b      	bne.n	8020fae <USB_EPStartXfer+0x116a>
 8020f96:	21b8      	movs	r1, #184	@ 0xb8
 8020f98:	187b      	adds	r3, r7, r1
 8020f9a:	681b      	ldr	r3, [r3, #0]
 8020f9c:	881b      	ldrh	r3, [r3, #0]
 8020f9e:	b29b      	uxth	r3, r3
 8020fa0:	4a18      	ldr	r2, [pc, #96]	@ (8021004 <USB_EPStartXfer+0x11c0>)
 8020fa2:	4313      	orrs	r3, r2
 8020fa4:	b29a      	uxth	r2, r3
 8020fa6:	187b      	adds	r3, r7, r1
 8020fa8:	681b      	ldr	r3, [r3, #0]
 8020faa:	801a      	strh	r2, [r3, #0]
 8020fac:	e051      	b.n	8021052 <USB_EPStartXfer+0x120e>
 8020fae:	1d7b      	adds	r3, r7, #5
 8020fb0:	33ff      	adds	r3, #255	@ 0xff
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	085b      	lsrs	r3, r3, #1
 8020fb6:	21d8      	movs	r1, #216	@ 0xd8
 8020fb8:	187a      	adds	r2, r7, r1
 8020fba:	6013      	str	r3, [r2, #0]
 8020fbc:	1d7b      	adds	r3, r7, #5
 8020fbe:	33ff      	adds	r3, #255	@ 0xff
 8020fc0:	681b      	ldr	r3, [r3, #0]
 8020fc2:	2201      	movs	r2, #1
 8020fc4:	4013      	ands	r3, r2
 8020fc6:	d004      	beq.n	8020fd2 <USB_EPStartXfer+0x118e>
 8020fc8:	187b      	adds	r3, r7, r1
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	3301      	adds	r3, #1
 8020fce:	187a      	adds	r2, r7, r1
 8020fd0:	6013      	str	r3, [r2, #0]
 8020fd2:	21b8      	movs	r1, #184	@ 0xb8
 8020fd4:	187b      	adds	r3, r7, r1
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	881b      	ldrh	r3, [r3, #0]
 8020fda:	b29a      	uxth	r2, r3
 8020fdc:	23d8      	movs	r3, #216	@ 0xd8
 8020fde:	18fb      	adds	r3, r7, r3
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	b29b      	uxth	r3, r3
 8020fe4:	029b      	lsls	r3, r3, #10
 8020fe6:	b29b      	uxth	r3, r3
 8020fe8:	4313      	orrs	r3, r2
 8020fea:	b29a      	uxth	r2, r3
 8020fec:	187b      	adds	r3, r7, r1
 8020fee:	681b      	ldr	r3, [r3, #0]
 8020ff0:	801a      	strh	r2, [r3, #0]
 8020ff2:	e02e      	b.n	8021052 <USB_EPStartXfer+0x120e>
 8020ff4:	00000406 	.word	0x00000406
 8020ff8:	ffff8f8f 	.word	0xffff8f8f
 8020ffc:	ffff80c0 	.word	0xffff80c0
 8021000:	00000402 	.word	0x00000402
 8021004:	ffff8000 	.word	0xffff8000
 8021008:	683b      	ldr	r3, [r7, #0]
 802100a:	785b      	ldrb	r3, [r3, #1]
 802100c:	2b01      	cmp	r3, #1
 802100e:	d120      	bne.n	8021052 <USB_EPStartXfer+0x120e>
 8021010:	687b      	ldr	r3, [r7, #4]
 8021012:	2250      	movs	r2, #80	@ 0x50
 8021014:	5a9b      	ldrh	r3, [r3, r2]
 8021016:	b29b      	uxth	r3, r3
 8021018:	001a      	movs	r2, r3
 802101a:	21c4      	movs	r1, #196	@ 0xc4
 802101c:	187b      	adds	r3, r7, r1
 802101e:	681b      	ldr	r3, [r3, #0]
 8021020:	189b      	adds	r3, r3, r2
 8021022:	187a      	adds	r2, r7, r1
 8021024:	6013      	str	r3, [r2, #0]
 8021026:	683b      	ldr	r3, [r7, #0]
 8021028:	781b      	ldrb	r3, [r3, #0]
 802102a:	00da      	lsls	r2, r3, #3
 802102c:	187b      	adds	r3, r7, r1
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	18d3      	adds	r3, r2, r3
 8021032:	4a1d      	ldr	r2, [pc, #116]	@ (80210a8 <USB_EPStartXfer+0x1264>)
 8021034:	4694      	mov	ip, r2
 8021036:	4463      	add	r3, ip
 8021038:	21c0      	movs	r1, #192	@ 0xc0
 802103a:	187a      	adds	r2, r7, r1
 802103c:	6013      	str	r3, [r2, #0]
 802103e:	1d7b      	adds	r3, r7, #5
 8021040:	33ff      	adds	r3, #255	@ 0xff
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	b29a      	uxth	r2, r3
 8021046:	187b      	adds	r3, r7, r1
 8021048:	681b      	ldr	r3, [r3, #0]
 802104a:	801a      	strh	r2, [r3, #0]
 802104c:	e001      	b.n	8021052 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 802104e:	2301      	movs	r3, #1
 8021050:	e025      	b.n	802109e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8021052:	687a      	ldr	r2, [r7, #4]
 8021054:	683b      	ldr	r3, [r7, #0]
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	009b      	lsls	r3, r3, #2
 802105a:	18d3      	adds	r3, r2, r3
 802105c:	881b      	ldrh	r3, [r3, #0]
 802105e:	b29a      	uxth	r2, r3
 8021060:	208a      	movs	r0, #138	@ 0x8a
 8021062:	183b      	adds	r3, r7, r0
 8021064:	4911      	ldr	r1, [pc, #68]	@ (80210ac <USB_EPStartXfer+0x1268>)
 8021066:	400a      	ands	r2, r1
 8021068:	801a      	strh	r2, [r3, #0]
 802106a:	183b      	adds	r3, r7, r0
 802106c:	183a      	adds	r2, r7, r0
 802106e:	8812      	ldrh	r2, [r2, #0]
 8021070:	2180      	movs	r1, #128	@ 0x80
 8021072:	0149      	lsls	r1, r1, #5
 8021074:	404a      	eors	r2, r1
 8021076:	801a      	strh	r2, [r3, #0]
 8021078:	183b      	adds	r3, r7, r0
 802107a:	183a      	adds	r2, r7, r0
 802107c:	8812      	ldrh	r2, [r2, #0]
 802107e:	2180      	movs	r1, #128	@ 0x80
 8021080:	0189      	lsls	r1, r1, #6
 8021082:	404a      	eors	r2, r1
 8021084:	801a      	strh	r2, [r3, #0]
 8021086:	687a      	ldr	r2, [r7, #4]
 8021088:	683b      	ldr	r3, [r7, #0]
 802108a:	781b      	ldrb	r3, [r3, #0]
 802108c:	009b      	lsls	r3, r3, #2
 802108e:	18d3      	adds	r3, r2, r3
 8021090:	183a      	adds	r2, r7, r0
 8021092:	8812      	ldrh	r2, [r2, #0]
 8021094:	4906      	ldr	r1, [pc, #24]	@ (80210b0 <USB_EPStartXfer+0x126c>)
 8021096:	430a      	orrs	r2, r1
 8021098:	b292      	uxth	r2, r2
 802109a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 802109c:	2300      	movs	r3, #0
}
 802109e:	0018      	movs	r0, r3
 80210a0:	46bd      	mov	sp, r7
 80210a2:	b043      	add	sp, #268	@ 0x10c
 80210a4:	bd90      	pop	{r4, r7, pc}
 80210a6:	46c0      	nop			@ (mov r8, r8)
 80210a8:	00000406 	.word	0x00000406
 80210ac:	ffffbf8f 	.word	0xffffbf8f
 80210b0:	ffff8080 	.word	0xffff8080

080210b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80210b4:	b580      	push	{r7, lr}
 80210b6:	b084      	sub	sp, #16
 80210b8:	af00      	add	r7, sp, #0
 80210ba:	6078      	str	r0, [r7, #4]
 80210bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80210be:	683b      	ldr	r3, [r7, #0]
 80210c0:	785b      	ldrb	r3, [r3, #1]
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	d01d      	beq.n	8021102 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80210c6:	687a      	ldr	r2, [r7, #4]
 80210c8:	683b      	ldr	r3, [r7, #0]
 80210ca:	781b      	ldrb	r3, [r3, #0]
 80210cc:	009b      	lsls	r3, r3, #2
 80210ce:	18d3      	adds	r3, r2, r3
 80210d0:	881b      	ldrh	r3, [r3, #0]
 80210d2:	b29a      	uxth	r2, r3
 80210d4:	200c      	movs	r0, #12
 80210d6:	183b      	adds	r3, r7, r0
 80210d8:	491b      	ldr	r1, [pc, #108]	@ (8021148 <USB_EPSetStall+0x94>)
 80210da:	400a      	ands	r2, r1
 80210dc:	801a      	strh	r2, [r3, #0]
 80210de:	183b      	adds	r3, r7, r0
 80210e0:	183a      	adds	r2, r7, r0
 80210e2:	8812      	ldrh	r2, [r2, #0]
 80210e4:	2110      	movs	r1, #16
 80210e6:	404a      	eors	r2, r1
 80210e8:	801a      	strh	r2, [r3, #0]
 80210ea:	687a      	ldr	r2, [r7, #4]
 80210ec:	683b      	ldr	r3, [r7, #0]
 80210ee:	781b      	ldrb	r3, [r3, #0]
 80210f0:	009b      	lsls	r3, r3, #2
 80210f2:	18d3      	adds	r3, r2, r3
 80210f4:	183a      	adds	r2, r7, r0
 80210f6:	8812      	ldrh	r2, [r2, #0]
 80210f8:	4914      	ldr	r1, [pc, #80]	@ (802114c <USB_EPSetStall+0x98>)
 80210fa:	430a      	orrs	r2, r1
 80210fc:	b292      	uxth	r2, r2
 80210fe:	801a      	strh	r2, [r3, #0]
 8021100:	e01d      	b.n	802113e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8021102:	687a      	ldr	r2, [r7, #4]
 8021104:	683b      	ldr	r3, [r7, #0]
 8021106:	781b      	ldrb	r3, [r3, #0]
 8021108:	009b      	lsls	r3, r3, #2
 802110a:	18d3      	adds	r3, r2, r3
 802110c:	881b      	ldrh	r3, [r3, #0]
 802110e:	b29a      	uxth	r2, r3
 8021110:	200e      	movs	r0, #14
 8021112:	183b      	adds	r3, r7, r0
 8021114:	490e      	ldr	r1, [pc, #56]	@ (8021150 <USB_EPSetStall+0x9c>)
 8021116:	400a      	ands	r2, r1
 8021118:	801a      	strh	r2, [r3, #0]
 802111a:	183b      	adds	r3, r7, r0
 802111c:	183a      	adds	r2, r7, r0
 802111e:	8812      	ldrh	r2, [r2, #0]
 8021120:	2180      	movs	r1, #128	@ 0x80
 8021122:	0149      	lsls	r1, r1, #5
 8021124:	404a      	eors	r2, r1
 8021126:	801a      	strh	r2, [r3, #0]
 8021128:	687a      	ldr	r2, [r7, #4]
 802112a:	683b      	ldr	r3, [r7, #0]
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	009b      	lsls	r3, r3, #2
 8021130:	18d3      	adds	r3, r2, r3
 8021132:	183a      	adds	r2, r7, r0
 8021134:	8812      	ldrh	r2, [r2, #0]
 8021136:	4905      	ldr	r1, [pc, #20]	@ (802114c <USB_EPSetStall+0x98>)
 8021138:	430a      	orrs	r2, r1
 802113a:	b292      	uxth	r2, r2
 802113c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 802113e:	2300      	movs	r3, #0
}
 8021140:	0018      	movs	r0, r3
 8021142:	46bd      	mov	sp, r7
 8021144:	b004      	add	sp, #16
 8021146:	bd80      	pop	{r7, pc}
 8021148:	ffff8fbf 	.word	0xffff8fbf
 802114c:	ffff8080 	.word	0xffff8080
 8021150:	ffffbf8f 	.word	0xffffbf8f

08021154 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021154:	b580      	push	{r7, lr}
 8021156:	b086      	sub	sp, #24
 8021158:	af00      	add	r7, sp, #0
 802115a:	6078      	str	r0, [r7, #4]
 802115c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 802115e:	683b      	ldr	r3, [r7, #0]
 8021160:	7b1b      	ldrb	r3, [r3, #12]
 8021162:	2b00      	cmp	r3, #0
 8021164:	d000      	beq.n	8021168 <USB_EPClearStall+0x14>
 8021166:	e095      	b.n	8021294 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8021168:	683b      	ldr	r3, [r7, #0]
 802116a:	785b      	ldrb	r3, [r3, #1]
 802116c:	2b00      	cmp	r3, #0
 802116e:	d046      	beq.n	80211fe <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8021170:	687a      	ldr	r2, [r7, #4]
 8021172:	683b      	ldr	r3, [r7, #0]
 8021174:	781b      	ldrb	r3, [r3, #0]
 8021176:	009b      	lsls	r3, r3, #2
 8021178:	18d2      	adds	r2, r2, r3
 802117a:	2110      	movs	r1, #16
 802117c:	187b      	adds	r3, r7, r1
 802117e:	8812      	ldrh	r2, [r2, #0]
 8021180:	801a      	strh	r2, [r3, #0]
 8021182:	187b      	adds	r3, r7, r1
 8021184:	881b      	ldrh	r3, [r3, #0]
 8021186:	2240      	movs	r2, #64	@ 0x40
 8021188:	4013      	ands	r3, r2
 802118a:	d016      	beq.n	80211ba <USB_EPClearStall+0x66>
 802118c:	687a      	ldr	r2, [r7, #4]
 802118e:	683b      	ldr	r3, [r7, #0]
 8021190:	781b      	ldrb	r3, [r3, #0]
 8021192:	009b      	lsls	r3, r3, #2
 8021194:	18d3      	adds	r3, r2, r3
 8021196:	881b      	ldrh	r3, [r3, #0]
 8021198:	b29a      	uxth	r2, r3
 802119a:	200e      	movs	r0, #14
 802119c:	183b      	adds	r3, r7, r0
 802119e:	4940      	ldr	r1, [pc, #256]	@ (80212a0 <USB_EPClearStall+0x14c>)
 80211a0:	400a      	ands	r2, r1
 80211a2:	801a      	strh	r2, [r3, #0]
 80211a4:	687a      	ldr	r2, [r7, #4]
 80211a6:	683b      	ldr	r3, [r7, #0]
 80211a8:	781b      	ldrb	r3, [r3, #0]
 80211aa:	009b      	lsls	r3, r3, #2
 80211ac:	18d3      	adds	r3, r2, r3
 80211ae:	183a      	adds	r2, r7, r0
 80211b0:	8812      	ldrh	r2, [r2, #0]
 80211b2:	493c      	ldr	r1, [pc, #240]	@ (80212a4 <USB_EPClearStall+0x150>)
 80211b4:	430a      	orrs	r2, r1
 80211b6:	b292      	uxth	r2, r2
 80211b8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80211ba:	683b      	ldr	r3, [r7, #0]
 80211bc:	78db      	ldrb	r3, [r3, #3]
 80211be:	2b01      	cmp	r3, #1
 80211c0:	d068      	beq.n	8021294 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80211c2:	687a      	ldr	r2, [r7, #4]
 80211c4:	683b      	ldr	r3, [r7, #0]
 80211c6:	781b      	ldrb	r3, [r3, #0]
 80211c8:	009b      	lsls	r3, r3, #2
 80211ca:	18d3      	adds	r3, r2, r3
 80211cc:	881b      	ldrh	r3, [r3, #0]
 80211ce:	b29a      	uxth	r2, r3
 80211d0:	200c      	movs	r0, #12
 80211d2:	183b      	adds	r3, r7, r0
 80211d4:	4934      	ldr	r1, [pc, #208]	@ (80212a8 <USB_EPClearStall+0x154>)
 80211d6:	400a      	ands	r2, r1
 80211d8:	801a      	strh	r2, [r3, #0]
 80211da:	183b      	adds	r3, r7, r0
 80211dc:	183a      	adds	r2, r7, r0
 80211de:	8812      	ldrh	r2, [r2, #0]
 80211e0:	2120      	movs	r1, #32
 80211e2:	404a      	eors	r2, r1
 80211e4:	801a      	strh	r2, [r3, #0]
 80211e6:	687a      	ldr	r2, [r7, #4]
 80211e8:	683b      	ldr	r3, [r7, #0]
 80211ea:	781b      	ldrb	r3, [r3, #0]
 80211ec:	009b      	lsls	r3, r3, #2
 80211ee:	18d3      	adds	r3, r2, r3
 80211f0:	183a      	adds	r2, r7, r0
 80211f2:	8812      	ldrh	r2, [r2, #0]
 80211f4:	492d      	ldr	r1, [pc, #180]	@ (80212ac <USB_EPClearStall+0x158>)
 80211f6:	430a      	orrs	r2, r1
 80211f8:	b292      	uxth	r2, r2
 80211fa:	801a      	strh	r2, [r3, #0]
 80211fc:	e04a      	b.n	8021294 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80211fe:	687a      	ldr	r2, [r7, #4]
 8021200:	683b      	ldr	r3, [r7, #0]
 8021202:	781b      	ldrb	r3, [r3, #0]
 8021204:	009b      	lsls	r3, r3, #2
 8021206:	18d2      	adds	r2, r2, r3
 8021208:	2116      	movs	r1, #22
 802120a:	187b      	adds	r3, r7, r1
 802120c:	8812      	ldrh	r2, [r2, #0]
 802120e:	801a      	strh	r2, [r3, #0]
 8021210:	187b      	adds	r3, r7, r1
 8021212:	881a      	ldrh	r2, [r3, #0]
 8021214:	2380      	movs	r3, #128	@ 0x80
 8021216:	01db      	lsls	r3, r3, #7
 8021218:	4013      	ands	r3, r2
 802121a:	d016      	beq.n	802124a <USB_EPClearStall+0xf6>
 802121c:	687a      	ldr	r2, [r7, #4]
 802121e:	683b      	ldr	r3, [r7, #0]
 8021220:	781b      	ldrb	r3, [r3, #0]
 8021222:	009b      	lsls	r3, r3, #2
 8021224:	18d3      	adds	r3, r2, r3
 8021226:	881b      	ldrh	r3, [r3, #0]
 8021228:	b29a      	uxth	r2, r3
 802122a:	2014      	movs	r0, #20
 802122c:	183b      	adds	r3, r7, r0
 802122e:	491c      	ldr	r1, [pc, #112]	@ (80212a0 <USB_EPClearStall+0x14c>)
 8021230:	400a      	ands	r2, r1
 8021232:	801a      	strh	r2, [r3, #0]
 8021234:	687a      	ldr	r2, [r7, #4]
 8021236:	683b      	ldr	r3, [r7, #0]
 8021238:	781b      	ldrb	r3, [r3, #0]
 802123a:	009b      	lsls	r3, r3, #2
 802123c:	18d3      	adds	r3, r2, r3
 802123e:	183a      	adds	r2, r7, r0
 8021240:	8812      	ldrh	r2, [r2, #0]
 8021242:	491b      	ldr	r1, [pc, #108]	@ (80212b0 <USB_EPClearStall+0x15c>)
 8021244:	430a      	orrs	r2, r1
 8021246:	b292      	uxth	r2, r2
 8021248:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 802124a:	687a      	ldr	r2, [r7, #4]
 802124c:	683b      	ldr	r3, [r7, #0]
 802124e:	781b      	ldrb	r3, [r3, #0]
 8021250:	009b      	lsls	r3, r3, #2
 8021252:	18d3      	adds	r3, r2, r3
 8021254:	881b      	ldrh	r3, [r3, #0]
 8021256:	b29a      	uxth	r2, r3
 8021258:	2012      	movs	r0, #18
 802125a:	183b      	adds	r3, r7, r0
 802125c:	4915      	ldr	r1, [pc, #84]	@ (80212b4 <USB_EPClearStall+0x160>)
 802125e:	400a      	ands	r2, r1
 8021260:	801a      	strh	r2, [r3, #0]
 8021262:	183b      	adds	r3, r7, r0
 8021264:	183a      	adds	r2, r7, r0
 8021266:	8812      	ldrh	r2, [r2, #0]
 8021268:	2180      	movs	r1, #128	@ 0x80
 802126a:	0149      	lsls	r1, r1, #5
 802126c:	404a      	eors	r2, r1
 802126e:	801a      	strh	r2, [r3, #0]
 8021270:	183b      	adds	r3, r7, r0
 8021272:	183a      	adds	r2, r7, r0
 8021274:	8812      	ldrh	r2, [r2, #0]
 8021276:	2180      	movs	r1, #128	@ 0x80
 8021278:	0189      	lsls	r1, r1, #6
 802127a:	404a      	eors	r2, r1
 802127c:	801a      	strh	r2, [r3, #0]
 802127e:	687a      	ldr	r2, [r7, #4]
 8021280:	683b      	ldr	r3, [r7, #0]
 8021282:	781b      	ldrb	r3, [r3, #0]
 8021284:	009b      	lsls	r3, r3, #2
 8021286:	18d3      	adds	r3, r2, r3
 8021288:	183a      	adds	r2, r7, r0
 802128a:	8812      	ldrh	r2, [r2, #0]
 802128c:	4907      	ldr	r1, [pc, #28]	@ (80212ac <USB_EPClearStall+0x158>)
 802128e:	430a      	orrs	r2, r1
 8021290:	b292      	uxth	r2, r2
 8021292:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8021294:	2300      	movs	r3, #0
}
 8021296:	0018      	movs	r0, r3
 8021298:	46bd      	mov	sp, r7
 802129a:	b006      	add	sp, #24
 802129c:	bd80      	pop	{r7, pc}
 802129e:	46c0      	nop			@ (mov r8, r8)
 80212a0:	ffff8f8f 	.word	0xffff8f8f
 80212a4:	ffff80c0 	.word	0xffff80c0
 80212a8:	ffff8fbf 	.word	0xffff8fbf
 80212ac:	ffff8080 	.word	0xffff8080
 80212b0:	ffffc080 	.word	0xffffc080
 80212b4:	ffffbf8f 	.word	0xffffbf8f

080212b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80212b8:	b580      	push	{r7, lr}
 80212ba:	b082      	sub	sp, #8
 80212bc:	af00      	add	r7, sp, #0
 80212be:	6078      	str	r0, [r7, #4]
 80212c0:	000a      	movs	r2, r1
 80212c2:	1cfb      	adds	r3, r7, #3
 80212c4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80212c6:	1cfb      	adds	r3, r7, #3
 80212c8:	781b      	ldrb	r3, [r3, #0]
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	d103      	bne.n	80212d6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	224c      	movs	r2, #76	@ 0x4c
 80212d2:	2180      	movs	r1, #128	@ 0x80
 80212d4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80212d6:	2300      	movs	r3, #0
}
 80212d8:	0018      	movs	r0, r3
 80212da:	46bd      	mov	sp, r7
 80212dc:	b002      	add	sp, #8
 80212de:	bd80      	pop	{r7, pc}

080212e0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80212e0:	b580      	push	{r7, lr}
 80212e2:	b082      	sub	sp, #8
 80212e4:	af00      	add	r7, sp, #0
 80212e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80212e8:	687b      	ldr	r3, [r7, #4]
 80212ea:	2258      	movs	r2, #88	@ 0x58
 80212ec:	5a9b      	ldrh	r3, [r3, r2]
 80212ee:	b29b      	uxth	r3, r3
 80212f0:	4a05      	ldr	r2, [pc, #20]	@ (8021308 <USB_DevConnect+0x28>)
 80212f2:	4313      	orrs	r3, r2
 80212f4:	b299      	uxth	r1, r3
 80212f6:	687b      	ldr	r3, [r7, #4]
 80212f8:	2258      	movs	r2, #88	@ 0x58
 80212fa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80212fc:	2300      	movs	r3, #0
}
 80212fe:	0018      	movs	r0, r3
 8021300:	46bd      	mov	sp, r7
 8021302:	b002      	add	sp, #8
 8021304:	bd80      	pop	{r7, pc}
 8021306:	46c0      	nop			@ (mov r8, r8)
 8021308:	ffff8000 	.word	0xffff8000

0802130c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 802130c:	b580      	push	{r7, lr}
 802130e:	b084      	sub	sp, #16
 8021310:	af00      	add	r7, sp, #0
 8021312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	2244      	movs	r2, #68	@ 0x44
 8021318:	5a9b      	ldrh	r3, [r3, r2]
 802131a:	b29b      	uxth	r3, r3
 802131c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 802131e:	68fb      	ldr	r3, [r7, #12]
}
 8021320:	0018      	movs	r0, r3
 8021322:	46bd      	mov	sp, r7
 8021324:	b004      	add	sp, #16
 8021326:	bd80      	pop	{r7, pc}

08021328 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021328:	b580      	push	{r7, lr}
 802132a:	b08a      	sub	sp, #40	@ 0x28
 802132c:	af00      	add	r7, sp, #0
 802132e:	60f8      	str	r0, [r7, #12]
 8021330:	60b9      	str	r1, [r7, #8]
 8021332:	0019      	movs	r1, r3
 8021334:	1dbb      	adds	r3, r7, #6
 8021336:	801a      	strh	r2, [r3, #0]
 8021338:	1d3b      	adds	r3, r7, #4
 802133a:	1c0a      	adds	r2, r1, #0
 802133c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 802133e:	1d3b      	adds	r3, r7, #4
 8021340:	881b      	ldrh	r3, [r3, #0]
 8021342:	3301      	adds	r3, #1
 8021344:	085b      	lsrs	r3, r3, #1
 8021346:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8021348:	68fb      	ldr	r3, [r7, #12]
 802134a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 802134c:	68bb      	ldr	r3, [r7, #8]
 802134e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021350:	1dbb      	adds	r3, r7, #6
 8021352:	881a      	ldrh	r2, [r3, #0]
 8021354:	697b      	ldr	r3, [r7, #20]
 8021356:	18d3      	adds	r3, r2, r3
 8021358:	2280      	movs	r2, #128	@ 0x80
 802135a:	00d2      	lsls	r2, r2, #3
 802135c:	4694      	mov	ip, r2
 802135e:	4463      	add	r3, ip
 8021360:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8021362:	69bb      	ldr	r3, [r7, #24]
 8021364:	627b      	str	r3, [r7, #36]	@ 0x24
 8021366:	e021      	b.n	80213ac <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8021368:	69fb      	ldr	r3, [r7, #28]
 802136a:	781a      	ldrb	r2, [r3, #0]
 802136c:	2112      	movs	r1, #18
 802136e:	187b      	adds	r3, r7, r1
 8021370:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8021372:	69fb      	ldr	r3, [r7, #28]
 8021374:	3301      	adds	r3, #1
 8021376:	781b      	ldrb	r3, [r3, #0]
 8021378:	b21b      	sxth	r3, r3
 802137a:	021b      	lsls	r3, r3, #8
 802137c:	b21a      	sxth	r2, r3
 802137e:	187b      	adds	r3, r7, r1
 8021380:	2000      	movs	r0, #0
 8021382:	5e1b      	ldrsh	r3, [r3, r0]
 8021384:	4313      	orrs	r3, r2
 8021386:	b21a      	sxth	r2, r3
 8021388:	187b      	adds	r3, r7, r1
 802138a:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 802138c:	6a3b      	ldr	r3, [r7, #32]
 802138e:	187a      	adds	r2, r7, r1
 8021390:	8812      	ldrh	r2, [r2, #0]
 8021392:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8021394:	6a3b      	ldr	r3, [r7, #32]
 8021396:	3302      	adds	r3, #2
 8021398:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 802139a:	69fb      	ldr	r3, [r7, #28]
 802139c:	3301      	adds	r3, #1
 802139e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80213a0:	69fb      	ldr	r3, [r7, #28]
 80213a2:	3301      	adds	r3, #1
 80213a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80213a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213a8:	3b01      	subs	r3, #1
 80213aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80213ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	d1da      	bne.n	8021368 <USB_WritePMA+0x40>
  }
}
 80213b2:	46c0      	nop			@ (mov r8, r8)
 80213b4:	46c0      	nop			@ (mov r8, r8)
 80213b6:	46bd      	mov	sp, r7
 80213b8:	b00a      	add	sp, #40	@ 0x28
 80213ba:	bd80      	pop	{r7, pc}

080213bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80213bc:	b580      	push	{r7, lr}
 80213be:	b08a      	sub	sp, #40	@ 0x28
 80213c0:	af00      	add	r7, sp, #0
 80213c2:	60f8      	str	r0, [r7, #12]
 80213c4:	60b9      	str	r1, [r7, #8]
 80213c6:	0019      	movs	r1, r3
 80213c8:	1dbb      	adds	r3, r7, #6
 80213ca:	801a      	strh	r2, [r3, #0]
 80213cc:	1d3b      	adds	r3, r7, #4
 80213ce:	1c0a      	adds	r2, r1, #0
 80213d0:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80213d2:	1d3b      	adds	r3, r7, #4
 80213d4:	881b      	ldrh	r3, [r3, #0]
 80213d6:	085b      	lsrs	r3, r3, #1
 80213d8:	b29b      	uxth	r3, r3
 80213da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80213e0:	68bb      	ldr	r3, [r7, #8]
 80213e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80213e4:	1dbb      	adds	r3, r7, #6
 80213e6:	881a      	ldrh	r2, [r3, #0]
 80213e8:	697b      	ldr	r3, [r7, #20]
 80213ea:	18d3      	adds	r3, r2, r3
 80213ec:	2280      	movs	r2, #128	@ 0x80
 80213ee:	00d2      	lsls	r2, r2, #3
 80213f0:	4694      	mov	ip, r2
 80213f2:	4463      	add	r3, ip
 80213f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80213f6:	69bb      	ldr	r3, [r7, #24]
 80213f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80213fa:	e018      	b.n	802142e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80213fc:	6a3b      	ldr	r3, [r7, #32]
 80213fe:	881b      	ldrh	r3, [r3, #0]
 8021400:	b29b      	uxth	r3, r3
 8021402:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021404:	6a3b      	ldr	r3, [r7, #32]
 8021406:	3302      	adds	r3, #2
 8021408:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802140a:	693b      	ldr	r3, [r7, #16]
 802140c:	b2da      	uxtb	r2, r3
 802140e:	69fb      	ldr	r3, [r7, #28]
 8021410:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021412:	69fb      	ldr	r3, [r7, #28]
 8021414:	3301      	adds	r3, #1
 8021416:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8021418:	693b      	ldr	r3, [r7, #16]
 802141a:	0a1b      	lsrs	r3, r3, #8
 802141c:	b2da      	uxtb	r2, r3
 802141e:	69fb      	ldr	r3, [r7, #28]
 8021420:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021422:	69fb      	ldr	r3, [r7, #28]
 8021424:	3301      	adds	r3, #1
 8021426:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8021428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802142a:	3b01      	subs	r3, #1
 802142c:	627b      	str	r3, [r7, #36]	@ 0x24
 802142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021430:	2b00      	cmp	r3, #0
 8021432:	d1e3      	bne.n	80213fc <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8021434:	1d3b      	adds	r3, r7, #4
 8021436:	881b      	ldrh	r3, [r3, #0]
 8021438:	2201      	movs	r2, #1
 802143a:	4013      	ands	r3, r2
 802143c:	b29b      	uxth	r3, r3
 802143e:	2b00      	cmp	r3, #0
 8021440:	d007      	beq.n	8021452 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8021442:	6a3b      	ldr	r3, [r7, #32]
 8021444:	881b      	ldrh	r3, [r3, #0]
 8021446:	b29b      	uxth	r3, r3
 8021448:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802144a:	693b      	ldr	r3, [r7, #16]
 802144c:	b2da      	uxtb	r2, r3
 802144e:	69fb      	ldr	r3, [r7, #28]
 8021450:	701a      	strb	r2, [r3, #0]
  }
}
 8021452:	46c0      	nop			@ (mov r8, r8)
 8021454:	46bd      	mov	sp, r7
 8021456:	b00a      	add	sp, #40	@ 0x28
 8021458:	bd80      	pop	{r7, pc}

0802145a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802145a:	b580      	push	{r7, lr}
 802145c:	b084      	sub	sp, #16
 802145e:	af00      	add	r7, sp, #0
 8021460:	6078      	str	r0, [r7, #4]
 8021462:	000a      	movs	r2, r1
 8021464:	1cfb      	adds	r3, r7, #3
 8021466:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8021468:	230f      	movs	r3, #15
 802146a:	18fb      	adds	r3, r7, r3
 802146c:	2200      	movs	r2, #0
 802146e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	7c1b      	ldrb	r3, [r3, #16]
 8021474:	2b00      	cmp	r3, #0
 8021476:	d116      	bne.n	80214a6 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8021478:	2380      	movs	r3, #128	@ 0x80
 802147a:	009b      	lsls	r3, r3, #2
 802147c:	6878      	ldr	r0, [r7, #4]
 802147e:	2202      	movs	r2, #2
 8021480:	2181      	movs	r1, #129	@ 0x81
 8021482:	f002 f8f8 	bl	8023676 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	2201      	movs	r2, #1
 802148a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802148c:	2380      	movs	r3, #128	@ 0x80
 802148e:	009b      	lsls	r3, r3, #2
 8021490:	6878      	ldr	r0, [r7, #4]
 8021492:	2202      	movs	r2, #2
 8021494:	2101      	movs	r1, #1
 8021496:	f002 f8ee 	bl	8023676 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802149a:	687a      	ldr	r2, [r7, #4]
 802149c:	23b6      	movs	r3, #182	@ 0xb6
 802149e:	005b      	lsls	r3, r3, #1
 80214a0:	2101      	movs	r1, #1
 80214a2:	50d1      	str	r1, [r2, r3]
 80214a4:	e013      	b.n	80214ce <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80214a6:	6878      	ldr	r0, [r7, #4]
 80214a8:	2340      	movs	r3, #64	@ 0x40
 80214aa:	2202      	movs	r2, #2
 80214ac:	2181      	movs	r1, #129	@ 0x81
 80214ae:	f002 f8e2 	bl	8023676 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	2201      	movs	r2, #1
 80214b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80214b8:	6878      	ldr	r0, [r7, #4]
 80214ba:	2340      	movs	r3, #64	@ 0x40
 80214bc:	2202      	movs	r2, #2
 80214be:	2101      	movs	r1, #1
 80214c0:	f002 f8d9 	bl	8023676 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80214c4:	687a      	ldr	r2, [r7, #4]
 80214c6:	23b6      	movs	r3, #182	@ 0xb6
 80214c8:	005b      	lsls	r3, r3, #1
 80214ca:	2101      	movs	r1, #1
 80214cc:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80214ce:	6878      	ldr	r0, [r7, #4]
 80214d0:	2308      	movs	r3, #8
 80214d2:	2203      	movs	r2, #3
 80214d4:	2182      	movs	r1, #130	@ 0x82
 80214d6:	f002 f8ce 	bl	8023676 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	2201      	movs	r2, #1
 80214de:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80214e0:	2387      	movs	r3, #135	@ 0x87
 80214e2:	009b      	lsls	r3, r3, #2
 80214e4:	0018      	movs	r0, r3
 80214e6:	f002 fa5f 	bl	80239a8 <USBD_static_malloc>
 80214ea:	0001      	movs	r1, r0
 80214ec:	687a      	ldr	r2, [r7, #4]
 80214ee:	23ae      	movs	r3, #174	@ 0xae
 80214f0:	009b      	lsls	r3, r3, #2
 80214f2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80214f4:	687a      	ldr	r2, [r7, #4]
 80214f6:	23ae      	movs	r3, #174	@ 0xae
 80214f8:	009b      	lsls	r3, r3, #2
 80214fa:	58d3      	ldr	r3, [r2, r3]
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d104      	bne.n	802150a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8021500:	230f      	movs	r3, #15
 8021502:	18fb      	adds	r3, r7, r3
 8021504:	2201      	movs	r2, #1
 8021506:	701a      	strb	r2, [r3, #0]
 8021508:	e02c      	b.n	8021564 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802150a:	687a      	ldr	r2, [r7, #4]
 802150c:	23ae      	movs	r3, #174	@ 0xae
 802150e:	009b      	lsls	r3, r3, #2
 8021510:	58d3      	ldr	r3, [r2, r3]
 8021512:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021514:	687a      	ldr	r2, [r7, #4]
 8021516:	23af      	movs	r3, #175	@ 0xaf
 8021518:	009b      	lsls	r3, r3, #2
 802151a:	58d3      	ldr	r3, [r2, r3]
 802151c:	681b      	ldr	r3, [r3, #0]
 802151e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8021520:	68ba      	ldr	r2, [r7, #8]
 8021522:	2385      	movs	r3, #133	@ 0x85
 8021524:	009b      	lsls	r3, r3, #2
 8021526:	2100      	movs	r1, #0
 8021528:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 802152a:	68ba      	ldr	r2, [r7, #8]
 802152c:	2386      	movs	r3, #134	@ 0x86
 802152e:	009b      	lsls	r3, r3, #2
 8021530:	2100      	movs	r1, #0
 8021532:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	7c1b      	ldrb	r3, [r3, #16]
 8021538:	2b00      	cmp	r3, #0
 802153a:	d10a      	bne.n	8021552 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802153c:	68ba      	ldr	r2, [r7, #8]
 802153e:	2381      	movs	r3, #129	@ 0x81
 8021540:	009b      	lsls	r3, r3, #2
 8021542:	58d2      	ldr	r2, [r2, r3]
 8021544:	2380      	movs	r3, #128	@ 0x80
 8021546:	009b      	lsls	r3, r3, #2
 8021548:	6878      	ldr	r0, [r7, #4]
 802154a:	2101      	movs	r1, #1
 802154c:	f002 f9de 	bl	802390c <USBD_LL_PrepareReceive>
 8021550:	e008      	b.n	8021564 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8021552:	68ba      	ldr	r2, [r7, #8]
 8021554:	2381      	movs	r3, #129	@ 0x81
 8021556:	009b      	lsls	r3, r3, #2
 8021558:	58d2      	ldr	r2, [r2, r3]
 802155a:	6878      	ldr	r0, [r7, #4]
 802155c:	2340      	movs	r3, #64	@ 0x40
 802155e:	2101      	movs	r1, #1
 8021560:	f002 f9d4 	bl	802390c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8021564:	230f      	movs	r3, #15
 8021566:	18fb      	adds	r3, r7, r3
 8021568:	781b      	ldrb	r3, [r3, #0]
}
 802156a:	0018      	movs	r0, r3
 802156c:	46bd      	mov	sp, r7
 802156e:	b004      	add	sp, #16
 8021570:	bd80      	pop	{r7, pc}

08021572 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021572:	b580      	push	{r7, lr}
 8021574:	b084      	sub	sp, #16
 8021576:	af00      	add	r7, sp, #0
 8021578:	6078      	str	r0, [r7, #4]
 802157a:	000a      	movs	r2, r1
 802157c:	1cfb      	adds	r3, r7, #3
 802157e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8021580:	230f      	movs	r3, #15
 8021582:	18fb      	adds	r3, r7, r3
 8021584:	2200      	movs	r2, #0
 8021586:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	2181      	movs	r1, #129	@ 0x81
 802158c:	0018      	movs	r0, r3
 802158e:	f002 f8a9 	bl	80236e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	2200      	movs	r2, #0
 8021596:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8021598:	687b      	ldr	r3, [r7, #4]
 802159a:	2101      	movs	r1, #1
 802159c:	0018      	movs	r0, r3
 802159e:	f002 f8a1 	bl	80236e4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80215a2:	687a      	ldr	r2, [r7, #4]
 80215a4:	23b6      	movs	r3, #182	@ 0xb6
 80215a6:	005b      	lsls	r3, r3, #1
 80215a8:	2100      	movs	r1, #0
 80215aa:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	2182      	movs	r1, #130	@ 0x82
 80215b0:	0018      	movs	r0, r3
 80215b2:	f002 f897 	bl	80236e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	2200      	movs	r2, #0
 80215ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80215bc:	687a      	ldr	r2, [r7, #4]
 80215be:	23ae      	movs	r3, #174	@ 0xae
 80215c0:	009b      	lsls	r3, r3, #2
 80215c2:	58d3      	ldr	r3, [r2, r3]
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d011      	beq.n	80215ec <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80215c8:	687a      	ldr	r2, [r7, #4]
 80215ca:	23af      	movs	r3, #175	@ 0xaf
 80215cc:	009b      	lsls	r3, r3, #2
 80215ce:	58d3      	ldr	r3, [r2, r3]
 80215d0:	685b      	ldr	r3, [r3, #4]
 80215d2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80215d4:	687a      	ldr	r2, [r7, #4]
 80215d6:	23ae      	movs	r3, #174	@ 0xae
 80215d8:	009b      	lsls	r3, r3, #2
 80215da:	58d3      	ldr	r3, [r2, r3]
 80215dc:	0018      	movs	r0, r3
 80215de:	f002 f9ef 	bl	80239c0 <USBD_static_free>
    pdev->pClassData = NULL;
 80215e2:	687a      	ldr	r2, [r7, #4]
 80215e4:	23ae      	movs	r3, #174	@ 0xae
 80215e6:	009b      	lsls	r3, r3, #2
 80215e8:	2100      	movs	r1, #0
 80215ea:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80215ec:	230f      	movs	r3, #15
 80215ee:	18fb      	adds	r3, r7, r3
 80215f0:	781b      	ldrb	r3, [r3, #0]
}
 80215f2:	0018      	movs	r0, r3
 80215f4:	46bd      	mov	sp, r7
 80215f6:	b004      	add	sp, #16
 80215f8:	bd80      	pop	{r7, pc}
	...

080215fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80215fc:	b580      	push	{r7, lr}
 80215fe:	b086      	sub	sp, #24
 8021600:	af00      	add	r7, sp, #0
 8021602:	6078      	str	r0, [r7, #4]
 8021604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021606:	687a      	ldr	r2, [r7, #4]
 8021608:	23ae      	movs	r3, #174	@ 0xae
 802160a:	009b      	lsls	r3, r3, #2
 802160c:	58d3      	ldr	r3, [r2, r3]
 802160e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8021610:	230f      	movs	r3, #15
 8021612:	18fb      	adds	r3, r7, r3
 8021614:	2200      	movs	r2, #0
 8021616:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8021618:	230c      	movs	r3, #12
 802161a:	18fb      	adds	r3, r7, r3
 802161c:	2200      	movs	r2, #0
 802161e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8021620:	2317      	movs	r3, #23
 8021622:	18fb      	adds	r3, r7, r3
 8021624:	2200      	movs	r2, #0
 8021626:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021628:	683b      	ldr	r3, [r7, #0]
 802162a:	781b      	ldrb	r3, [r3, #0]
 802162c:	001a      	movs	r2, r3
 802162e:	2360      	movs	r3, #96	@ 0x60
 8021630:	4013      	ands	r3, r2
 8021632:	d03d      	beq.n	80216b0 <USBD_CDC_Setup+0xb4>
 8021634:	2b20      	cmp	r3, #32
 8021636:	d000      	beq.n	802163a <USBD_CDC_Setup+0x3e>
 8021638:	e094      	b.n	8021764 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 802163a:	683b      	ldr	r3, [r7, #0]
 802163c:	88db      	ldrh	r3, [r3, #6]
 802163e:	2b00      	cmp	r3, #0
 8021640:	d02b      	beq.n	802169a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8021642:	683b      	ldr	r3, [r7, #0]
 8021644:	781b      	ldrb	r3, [r3, #0]
 8021646:	b25b      	sxtb	r3, r3
 8021648:	2b00      	cmp	r3, #0
 802164a:	da12      	bge.n	8021672 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802164c:	687a      	ldr	r2, [r7, #4]
 802164e:	23af      	movs	r3, #175	@ 0xaf
 8021650:	009b      	lsls	r3, r3, #2
 8021652:	58d3      	ldr	r3, [r2, r3]
 8021654:	689b      	ldr	r3, [r3, #8]
 8021656:	683a      	ldr	r2, [r7, #0]
 8021658:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 802165a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802165c:	683a      	ldr	r2, [r7, #0]
 802165e:	88d2      	ldrh	r2, [r2, #6]
 8021660:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8021662:	6939      	ldr	r1, [r7, #16]
 8021664:	683b      	ldr	r3, [r7, #0]
 8021666:	88da      	ldrh	r2, [r3, #6]
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	0018      	movs	r0, r3
 802166c:	f001 fbaf 	bl	8022dce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8021670:	e083      	b.n	802177a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8021672:	683b      	ldr	r3, [r7, #0]
 8021674:	7859      	ldrb	r1, [r3, #1]
 8021676:	693a      	ldr	r2, [r7, #16]
 8021678:	2380      	movs	r3, #128	@ 0x80
 802167a:	009b      	lsls	r3, r3, #2
 802167c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 802167e:	683b      	ldr	r3, [r7, #0]
 8021680:	88db      	ldrh	r3, [r3, #6]
 8021682:	b2d9      	uxtb	r1, r3
 8021684:	693b      	ldr	r3, [r7, #16]
 8021686:	4a40      	ldr	r2, [pc, #256]	@ (8021788 <USBD_CDC_Setup+0x18c>)
 8021688:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802168a:	6939      	ldr	r1, [r7, #16]
 802168c:	683b      	ldr	r3, [r7, #0]
 802168e:	88da      	ldrh	r2, [r3, #6]
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	0018      	movs	r0, r3
 8021694:	f001 fbce 	bl	8022e34 <USBD_CtlPrepareRx>
      break;
 8021698:	e06f      	b.n	802177a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802169a:	687a      	ldr	r2, [r7, #4]
 802169c:	23af      	movs	r3, #175	@ 0xaf
 802169e:	009b      	lsls	r3, r3, #2
 80216a0:	58d3      	ldr	r3, [r2, r3]
 80216a2:	689b      	ldr	r3, [r3, #8]
 80216a4:	683a      	ldr	r2, [r7, #0]
 80216a6:	7850      	ldrb	r0, [r2, #1]
 80216a8:	6839      	ldr	r1, [r7, #0]
 80216aa:	2200      	movs	r2, #0
 80216ac:	4798      	blx	r3
      break;
 80216ae:	e064      	b.n	802177a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80216b0:	683b      	ldr	r3, [r7, #0]
 80216b2:	785b      	ldrb	r3, [r3, #1]
 80216b4:	2b0b      	cmp	r3, #11
 80216b6:	d037      	beq.n	8021728 <USBD_CDC_Setup+0x12c>
 80216b8:	dc47      	bgt.n	802174a <USBD_CDC_Setup+0x14e>
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d002      	beq.n	80216c4 <USBD_CDC_Setup+0xc8>
 80216be:	2b0a      	cmp	r3, #10
 80216c0:	d019      	beq.n	80216f6 <USBD_CDC_Setup+0xfa>
 80216c2:	e042      	b.n	802174a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80216c4:	687a      	ldr	r2, [r7, #4]
 80216c6:	23a7      	movs	r3, #167	@ 0xa7
 80216c8:	009b      	lsls	r3, r3, #2
 80216ca:	5cd3      	ldrb	r3, [r2, r3]
 80216cc:	2b03      	cmp	r3, #3
 80216ce:	d107      	bne.n	80216e0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80216d0:	230c      	movs	r3, #12
 80216d2:	18f9      	adds	r1, r7, r3
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	2202      	movs	r2, #2
 80216d8:	0018      	movs	r0, r3
 80216da:	f001 fb78 	bl	8022dce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80216de:	e040      	b.n	8021762 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80216e0:	683a      	ldr	r2, [r7, #0]
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	0011      	movs	r1, r2
 80216e6:	0018      	movs	r0, r3
 80216e8:	f001 faf3 	bl	8022cd2 <USBD_CtlError>
            ret = USBD_FAIL;
 80216ec:	2317      	movs	r3, #23
 80216ee:	18fb      	adds	r3, r7, r3
 80216f0:	2202      	movs	r2, #2
 80216f2:	701a      	strb	r2, [r3, #0]
          break;
 80216f4:	e035      	b.n	8021762 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80216f6:	687a      	ldr	r2, [r7, #4]
 80216f8:	23a7      	movs	r3, #167	@ 0xa7
 80216fa:	009b      	lsls	r3, r3, #2
 80216fc:	5cd3      	ldrb	r3, [r2, r3]
 80216fe:	2b03      	cmp	r3, #3
 8021700:	d107      	bne.n	8021712 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8021702:	230f      	movs	r3, #15
 8021704:	18f9      	adds	r1, r7, r3
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	2201      	movs	r2, #1
 802170a:	0018      	movs	r0, r3
 802170c:	f001 fb5f 	bl	8022dce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021710:	e027      	b.n	8021762 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021712:	683a      	ldr	r2, [r7, #0]
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	0011      	movs	r1, r2
 8021718:	0018      	movs	r0, r3
 802171a:	f001 fada 	bl	8022cd2 <USBD_CtlError>
            ret = USBD_FAIL;
 802171e:	2317      	movs	r3, #23
 8021720:	18fb      	adds	r3, r7, r3
 8021722:	2202      	movs	r2, #2
 8021724:	701a      	strb	r2, [r3, #0]
          break;
 8021726:	e01c      	b.n	8021762 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8021728:	687a      	ldr	r2, [r7, #4]
 802172a:	23a7      	movs	r3, #167	@ 0xa7
 802172c:	009b      	lsls	r3, r3, #2
 802172e:	5cd3      	ldrb	r3, [r2, r3]
 8021730:	2b03      	cmp	r3, #3
 8021732:	d015      	beq.n	8021760 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8021734:	683a      	ldr	r2, [r7, #0]
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	0011      	movs	r1, r2
 802173a:	0018      	movs	r0, r3
 802173c:	f001 fac9 	bl	8022cd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8021740:	2317      	movs	r3, #23
 8021742:	18fb      	adds	r3, r7, r3
 8021744:	2202      	movs	r2, #2
 8021746:	701a      	strb	r2, [r3, #0]
          }
          break;
 8021748:	e00a      	b.n	8021760 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 802174a:	683a      	ldr	r2, [r7, #0]
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	0011      	movs	r1, r2
 8021750:	0018      	movs	r0, r3
 8021752:	f001 fabe 	bl	8022cd2 <USBD_CtlError>
          ret = USBD_FAIL;
 8021756:	2317      	movs	r3, #23
 8021758:	18fb      	adds	r3, r7, r3
 802175a:	2202      	movs	r2, #2
 802175c:	701a      	strb	r2, [r3, #0]
          break;
 802175e:	e000      	b.n	8021762 <USBD_CDC_Setup+0x166>
          break;
 8021760:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021762:	e00a      	b.n	802177a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8021764:	683a      	ldr	r2, [r7, #0]
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	0011      	movs	r1, r2
 802176a:	0018      	movs	r0, r3
 802176c:	f001 fab1 	bl	8022cd2 <USBD_CtlError>
      ret = USBD_FAIL;
 8021770:	2317      	movs	r3, #23
 8021772:	18fb      	adds	r3, r7, r3
 8021774:	2202      	movs	r2, #2
 8021776:	701a      	strb	r2, [r3, #0]
      break;
 8021778:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 802177a:	2317      	movs	r3, #23
 802177c:	18fb      	adds	r3, r7, r3
 802177e:	781b      	ldrb	r3, [r3, #0]
}
 8021780:	0018      	movs	r0, r3
 8021782:	46bd      	mov	sp, r7
 8021784:	b006      	add	sp, #24
 8021786:	bd80      	pop	{r7, pc}
 8021788:	00000201 	.word	0x00000201

0802178c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802178c:	b580      	push	{r7, lr}
 802178e:	b084      	sub	sp, #16
 8021790:	af00      	add	r7, sp, #0
 8021792:	6078      	str	r0, [r7, #4]
 8021794:	000a      	movs	r2, r1
 8021796:	1cfb      	adds	r3, r7, #3
 8021798:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802179a:	687a      	ldr	r2, [r7, #4]
 802179c:	23ae      	movs	r3, #174	@ 0xae
 802179e:	009b      	lsls	r3, r3, #2
 80217a0:	58d3      	ldr	r3, [r2, r3]
 80217a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80217a4:	687a      	ldr	r2, [r7, #4]
 80217a6:	23b0      	movs	r3, #176	@ 0xb0
 80217a8:	009b      	lsls	r3, r3, #2
 80217aa:	58d3      	ldr	r3, [r2, r3]
 80217ac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80217ae:	687a      	ldr	r2, [r7, #4]
 80217b0:	23ae      	movs	r3, #174	@ 0xae
 80217b2:	009b      	lsls	r3, r3, #2
 80217b4:	58d3      	ldr	r3, [r2, r3]
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d03e      	beq.n	8021838 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80217ba:	1cfb      	adds	r3, r7, #3
 80217bc:	781a      	ldrb	r2, [r3, #0]
 80217be:	6879      	ldr	r1, [r7, #4]
 80217c0:	0013      	movs	r3, r2
 80217c2:	009b      	lsls	r3, r3, #2
 80217c4:	189b      	adds	r3, r3, r2
 80217c6:	009b      	lsls	r3, r3, #2
 80217c8:	18cb      	adds	r3, r1, r3
 80217ca:	331c      	adds	r3, #28
 80217cc:	681b      	ldr	r3, [r3, #0]
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d02b      	beq.n	802182a <USBD_CDC_DataIn+0x9e>
 80217d2:	1cfb      	adds	r3, r7, #3
 80217d4:	781a      	ldrb	r2, [r3, #0]
 80217d6:	6879      	ldr	r1, [r7, #4]
 80217d8:	0013      	movs	r3, r2
 80217da:	009b      	lsls	r3, r3, #2
 80217dc:	189b      	adds	r3, r3, r2
 80217de:	009b      	lsls	r3, r3, #2
 80217e0:	18cb      	adds	r3, r1, r3
 80217e2:	331c      	adds	r3, #28
 80217e4:	6818      	ldr	r0, [r3, #0]
 80217e6:	1cfb      	adds	r3, r7, #3
 80217e8:	781a      	ldrb	r2, [r3, #0]
 80217ea:	68b9      	ldr	r1, [r7, #8]
 80217ec:	0013      	movs	r3, r2
 80217ee:	009b      	lsls	r3, r3, #2
 80217f0:	189b      	adds	r3, r3, r2
 80217f2:	00db      	lsls	r3, r3, #3
 80217f4:	18cb      	adds	r3, r1, r3
 80217f6:	3338      	adds	r3, #56	@ 0x38
 80217f8:	681b      	ldr	r3, [r3, #0]
 80217fa:	0019      	movs	r1, r3
 80217fc:	f7de fd58 	bl	80002b0 <__aeabi_uidivmod>
 8021800:	1e0b      	subs	r3, r1, #0
 8021802:	d112      	bne.n	802182a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021804:	1cfb      	adds	r3, r7, #3
 8021806:	781a      	ldrb	r2, [r3, #0]
 8021808:	6879      	ldr	r1, [r7, #4]
 802180a:	0013      	movs	r3, r2
 802180c:	009b      	lsls	r3, r3, #2
 802180e:	189b      	adds	r3, r3, r2
 8021810:	009b      	lsls	r3, r3, #2
 8021812:	18cb      	adds	r3, r1, r3
 8021814:	331c      	adds	r3, #28
 8021816:	2200      	movs	r2, #0
 8021818:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802181a:	1cfb      	adds	r3, r7, #3
 802181c:	7819      	ldrb	r1, [r3, #0]
 802181e:	6878      	ldr	r0, [r7, #4]
 8021820:	2300      	movs	r3, #0
 8021822:	2200      	movs	r2, #0
 8021824:	f002 f83b 	bl	802389e <USBD_LL_Transmit>
 8021828:	e004      	b.n	8021834 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 802182a:	68fa      	ldr	r2, [r7, #12]
 802182c:	2385      	movs	r3, #133	@ 0x85
 802182e:	009b      	lsls	r3, r3, #2
 8021830:	2100      	movs	r1, #0
 8021832:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8021834:	2300      	movs	r3, #0
 8021836:	e000      	b.n	802183a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8021838:	2302      	movs	r3, #2
  }
}
 802183a:	0018      	movs	r0, r3
 802183c:	46bd      	mov	sp, r7
 802183e:	b004      	add	sp, #16
 8021840:	bd80      	pop	{r7, pc}

08021842 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021842:	b580      	push	{r7, lr}
 8021844:	b084      	sub	sp, #16
 8021846:	af00      	add	r7, sp, #0
 8021848:	6078      	str	r0, [r7, #4]
 802184a:	000a      	movs	r2, r1
 802184c:	1cfb      	adds	r3, r7, #3
 802184e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021850:	687a      	ldr	r2, [r7, #4]
 8021852:	23ae      	movs	r3, #174	@ 0xae
 8021854:	009b      	lsls	r3, r3, #2
 8021856:	58d3      	ldr	r3, [r2, r3]
 8021858:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802185a:	1cfb      	adds	r3, r7, #3
 802185c:	781a      	ldrb	r2, [r3, #0]
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	0011      	movs	r1, r2
 8021862:	0018      	movs	r0, r3
 8021864:	f002 f889 	bl	802397a <USBD_LL_GetRxDataSize>
 8021868:	0001      	movs	r1, r0
 802186a:	68fa      	ldr	r2, [r7, #12]
 802186c:	2383      	movs	r3, #131	@ 0x83
 802186e:	009b      	lsls	r3, r3, #2
 8021870:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8021872:	687a      	ldr	r2, [r7, #4]
 8021874:	23ae      	movs	r3, #174	@ 0xae
 8021876:	009b      	lsls	r3, r3, #2
 8021878:	58d3      	ldr	r3, [r2, r3]
 802187a:	2b00      	cmp	r3, #0
 802187c:	d011      	beq.n	80218a2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802187e:	687a      	ldr	r2, [r7, #4]
 8021880:	23af      	movs	r3, #175	@ 0xaf
 8021882:	009b      	lsls	r3, r3, #2
 8021884:	58d3      	ldr	r3, [r2, r3]
 8021886:	68da      	ldr	r2, [r3, #12]
 8021888:	68f9      	ldr	r1, [r7, #12]
 802188a:	2381      	movs	r3, #129	@ 0x81
 802188c:	009b      	lsls	r3, r3, #2
 802188e:	58c8      	ldr	r0, [r1, r3]
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	2183      	movs	r1, #131	@ 0x83
 8021894:	0089      	lsls	r1, r1, #2
 8021896:	468c      	mov	ip, r1
 8021898:	4463      	add	r3, ip
 802189a:	0019      	movs	r1, r3
 802189c:	4790      	blx	r2

    return USBD_OK;
 802189e:	2300      	movs	r3, #0
 80218a0:	e000      	b.n	80218a4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80218a2:	2302      	movs	r3, #2
  }
}
 80218a4:	0018      	movs	r0, r3
 80218a6:	46bd      	mov	sp, r7
 80218a8:	b004      	add	sp, #16
 80218aa:	bd80      	pop	{r7, pc}

080218ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80218ac:	b590      	push	{r4, r7, lr}
 80218ae:	b085      	sub	sp, #20
 80218b0:	af00      	add	r7, sp, #0
 80218b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80218b4:	687a      	ldr	r2, [r7, #4]
 80218b6:	23ae      	movs	r3, #174	@ 0xae
 80218b8:	009b      	lsls	r3, r3, #2
 80218ba:	58d3      	ldr	r3, [r2, r3]
 80218bc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80218be:	687a      	ldr	r2, [r7, #4]
 80218c0:	23af      	movs	r3, #175	@ 0xaf
 80218c2:	009b      	lsls	r3, r3, #2
 80218c4:	58d3      	ldr	r3, [r2, r3]
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d018      	beq.n	80218fc <USBD_CDC_EP0_RxReady+0x50>
 80218ca:	68fa      	ldr	r2, [r7, #12]
 80218cc:	2380      	movs	r3, #128	@ 0x80
 80218ce:	009b      	lsls	r3, r3, #2
 80218d0:	5cd3      	ldrb	r3, [r2, r3]
 80218d2:	2bff      	cmp	r3, #255	@ 0xff
 80218d4:	d012      	beq.n	80218fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80218d6:	687a      	ldr	r2, [r7, #4]
 80218d8:	23af      	movs	r3, #175	@ 0xaf
 80218da:	009b      	lsls	r3, r3, #2
 80218dc:	58d3      	ldr	r3, [r2, r3]
 80218de:	689b      	ldr	r3, [r3, #8]
 80218e0:	68f9      	ldr	r1, [r7, #12]
 80218e2:	2280      	movs	r2, #128	@ 0x80
 80218e4:	0092      	lsls	r2, r2, #2
 80218e6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80218e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80218ea:	68fa      	ldr	r2, [r7, #12]
 80218ec:	4c06      	ldr	r4, [pc, #24]	@ (8021908 <USBD_CDC_EP0_RxReady+0x5c>)
 80218ee:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80218f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80218f2:	68fa      	ldr	r2, [r7, #12]
 80218f4:	2380      	movs	r3, #128	@ 0x80
 80218f6:	009b      	lsls	r3, r3, #2
 80218f8:	21ff      	movs	r1, #255	@ 0xff
 80218fa:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80218fc:	2300      	movs	r3, #0
}
 80218fe:	0018      	movs	r0, r3
 8021900:	46bd      	mov	sp, r7
 8021902:	b005      	add	sp, #20
 8021904:	bd90      	pop	{r4, r7, pc}
 8021906:	46c0      	nop			@ (mov r8, r8)
 8021908:	00000201 	.word	0x00000201

0802190c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 802190c:	b580      	push	{r7, lr}
 802190e:	b082      	sub	sp, #8
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	2243      	movs	r2, #67	@ 0x43
 8021918:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 802191a:	4b02      	ldr	r3, [pc, #8]	@ (8021924 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 802191c:	0018      	movs	r0, r3
 802191e:	46bd      	mov	sp, r7
 8021920:	b002      	add	sp, #8
 8021922:	bd80      	pop	{r7, pc}
 8021924:	2000018c 	.word	0x2000018c

08021928 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8021928:	b580      	push	{r7, lr}
 802192a:	b082      	sub	sp, #8
 802192c:	af00      	add	r7, sp, #0
 802192e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8021930:	687b      	ldr	r3, [r7, #4]
 8021932:	2243      	movs	r2, #67	@ 0x43
 8021934:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8021936:	4b02      	ldr	r3, [pc, #8]	@ (8021940 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8021938:	0018      	movs	r0, r3
 802193a:	46bd      	mov	sp, r7
 802193c:	b002      	add	sp, #8
 802193e:	bd80      	pop	{r7, pc}
 8021940:	20000148 	.word	0x20000148

08021944 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8021944:	b580      	push	{r7, lr}
 8021946:	b082      	sub	sp, #8
 8021948:	af00      	add	r7, sp, #0
 802194a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	2243      	movs	r2, #67	@ 0x43
 8021950:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8021952:	4b02      	ldr	r3, [pc, #8]	@ (802195c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8021954:	0018      	movs	r0, r3
 8021956:	46bd      	mov	sp, r7
 8021958:	b002      	add	sp, #8
 802195a:	bd80      	pop	{r7, pc}
 802195c:	200001d0 	.word	0x200001d0

08021960 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021960:	b580      	push	{r7, lr}
 8021962:	b082      	sub	sp, #8
 8021964:	af00      	add	r7, sp, #0
 8021966:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8021968:	687b      	ldr	r3, [r7, #4]
 802196a:	220a      	movs	r2, #10
 802196c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 802196e:	4b02      	ldr	r3, [pc, #8]	@ (8021978 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021970:	0018      	movs	r0, r3
 8021972:	46bd      	mov	sp, r7
 8021974:	b002      	add	sp, #8
 8021976:	bd80      	pop	{r7, pc}
 8021978:	20000104 	.word	0x20000104

0802197c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 802197c:	b580      	push	{r7, lr}
 802197e:	b084      	sub	sp, #16
 8021980:	af00      	add	r7, sp, #0
 8021982:	6078      	str	r0, [r7, #4]
 8021984:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8021986:	200f      	movs	r0, #15
 8021988:	183b      	adds	r3, r7, r0
 802198a:	2202      	movs	r2, #2
 802198c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 802198e:	683b      	ldr	r3, [r7, #0]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d007      	beq.n	80219a4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8021994:	687a      	ldr	r2, [r7, #4]
 8021996:	23af      	movs	r3, #175	@ 0xaf
 8021998:	009b      	lsls	r3, r3, #2
 802199a:	6839      	ldr	r1, [r7, #0]
 802199c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 802199e:	183b      	adds	r3, r7, r0
 80219a0:	2200      	movs	r2, #0
 80219a2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80219a4:	230f      	movs	r3, #15
 80219a6:	18fb      	adds	r3, r7, r3
 80219a8:	781b      	ldrb	r3, [r3, #0]
}
 80219aa:	0018      	movs	r0, r3
 80219ac:	46bd      	mov	sp, r7
 80219ae:	b004      	add	sp, #16
 80219b0:	bd80      	pop	{r7, pc}

080219b2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80219b2:	b580      	push	{r7, lr}
 80219b4:	b086      	sub	sp, #24
 80219b6:	af00      	add	r7, sp, #0
 80219b8:	60f8      	str	r0, [r7, #12]
 80219ba:	60b9      	str	r1, [r7, #8]
 80219bc:	1dbb      	adds	r3, r7, #6
 80219be:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80219c0:	68fa      	ldr	r2, [r7, #12]
 80219c2:	23ae      	movs	r3, #174	@ 0xae
 80219c4:	009b      	lsls	r3, r3, #2
 80219c6:	58d3      	ldr	r3, [r2, r3]
 80219c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80219ca:	697a      	ldr	r2, [r7, #20]
 80219cc:	2382      	movs	r3, #130	@ 0x82
 80219ce:	009b      	lsls	r3, r3, #2
 80219d0:	68b9      	ldr	r1, [r7, #8]
 80219d2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80219d4:	1dbb      	adds	r3, r7, #6
 80219d6:	8819      	ldrh	r1, [r3, #0]
 80219d8:	697a      	ldr	r2, [r7, #20]
 80219da:	2384      	movs	r3, #132	@ 0x84
 80219dc:	009b      	lsls	r3, r3, #2
 80219de:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80219e0:	2300      	movs	r3, #0
}
 80219e2:	0018      	movs	r0, r3
 80219e4:	46bd      	mov	sp, r7
 80219e6:	b006      	add	sp, #24
 80219e8:	bd80      	pop	{r7, pc}

080219ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80219ea:	b580      	push	{r7, lr}
 80219ec:	b084      	sub	sp, #16
 80219ee:	af00      	add	r7, sp, #0
 80219f0:	6078      	str	r0, [r7, #4]
 80219f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80219f4:	687a      	ldr	r2, [r7, #4]
 80219f6:	23ae      	movs	r3, #174	@ 0xae
 80219f8:	009b      	lsls	r3, r3, #2
 80219fa:	58d3      	ldr	r3, [r2, r3]
 80219fc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80219fe:	68fa      	ldr	r2, [r7, #12]
 8021a00:	2381      	movs	r3, #129	@ 0x81
 8021a02:	009b      	lsls	r3, r3, #2
 8021a04:	6839      	ldr	r1, [r7, #0]
 8021a06:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021a08:	2300      	movs	r3, #0
}
 8021a0a:	0018      	movs	r0, r3
 8021a0c:	46bd      	mov	sp, r7
 8021a0e:	b004      	add	sp, #16
 8021a10:	bd80      	pop	{r7, pc}

08021a12 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8021a12:	b580      	push	{r7, lr}
 8021a14:	b084      	sub	sp, #16
 8021a16:	af00      	add	r7, sp, #0
 8021a18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a1a:	687a      	ldr	r2, [r7, #4]
 8021a1c:	23ae      	movs	r3, #174	@ 0xae
 8021a1e:	009b      	lsls	r3, r3, #2
 8021a20:	58d3      	ldr	r3, [r2, r3]
 8021a22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021a24:	687a      	ldr	r2, [r7, #4]
 8021a26:	23ae      	movs	r3, #174	@ 0xae
 8021a28:	009b      	lsls	r3, r3, #2
 8021a2a:	58d3      	ldr	r3, [r2, r3]
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d022      	beq.n	8021a76 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8021a30:	68fa      	ldr	r2, [r7, #12]
 8021a32:	2385      	movs	r3, #133	@ 0x85
 8021a34:	009b      	lsls	r3, r3, #2
 8021a36:	58d3      	ldr	r3, [r2, r3]
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d11a      	bne.n	8021a72 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021a3c:	68fa      	ldr	r2, [r7, #12]
 8021a3e:	2385      	movs	r3, #133	@ 0x85
 8021a40:	009b      	lsls	r3, r3, #2
 8021a42:	2101      	movs	r1, #1
 8021a44:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8021a46:	68fa      	ldr	r2, [r7, #12]
 8021a48:	2384      	movs	r3, #132	@ 0x84
 8021a4a:	009b      	lsls	r3, r3, #2
 8021a4c:	58d2      	ldr	r2, [r2, r3]
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021a52:	68fa      	ldr	r2, [r7, #12]
 8021a54:	2382      	movs	r3, #130	@ 0x82
 8021a56:	009b      	lsls	r3, r3, #2
 8021a58:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021a5a:	68fa      	ldr	r2, [r7, #12]
 8021a5c:	2384      	movs	r3, #132	@ 0x84
 8021a5e:	009b      	lsls	r3, r3, #2
 8021a60:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021a62:	b29b      	uxth	r3, r3
 8021a64:	6878      	ldr	r0, [r7, #4]
 8021a66:	000a      	movs	r2, r1
 8021a68:	2181      	movs	r1, #129	@ 0x81
 8021a6a:	f001 ff18 	bl	802389e <USBD_LL_Transmit>

      return USBD_OK;
 8021a6e:	2300      	movs	r3, #0
 8021a70:	e002      	b.n	8021a78 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021a72:	2301      	movs	r3, #1
 8021a74:	e000      	b.n	8021a78 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021a76:	2302      	movs	r3, #2
  }
}
 8021a78:	0018      	movs	r0, r3
 8021a7a:	46bd      	mov	sp, r7
 8021a7c:	b004      	add	sp, #16
 8021a7e:	bd80      	pop	{r7, pc}

08021a80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021a80:	b580      	push	{r7, lr}
 8021a82:	b084      	sub	sp, #16
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a88:	687a      	ldr	r2, [r7, #4]
 8021a8a:	23ae      	movs	r3, #174	@ 0xae
 8021a8c:	009b      	lsls	r3, r3, #2
 8021a8e:	58d3      	ldr	r3, [r2, r3]
 8021a90:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021a92:	687a      	ldr	r2, [r7, #4]
 8021a94:	23ae      	movs	r3, #174	@ 0xae
 8021a96:	009b      	lsls	r3, r3, #2
 8021a98:	58d3      	ldr	r3, [r2, r3]
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d019      	beq.n	8021ad2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	7c1b      	ldrb	r3, [r3, #16]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d10a      	bne.n	8021abc <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021aa6:	68fa      	ldr	r2, [r7, #12]
 8021aa8:	2381      	movs	r3, #129	@ 0x81
 8021aaa:	009b      	lsls	r3, r3, #2
 8021aac:	58d2      	ldr	r2, [r2, r3]
 8021aae:	2380      	movs	r3, #128	@ 0x80
 8021ab0:	009b      	lsls	r3, r3, #2
 8021ab2:	6878      	ldr	r0, [r7, #4]
 8021ab4:	2101      	movs	r1, #1
 8021ab6:	f001 ff29 	bl	802390c <USBD_LL_PrepareReceive>
 8021aba:	e008      	b.n	8021ace <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021abc:	68fa      	ldr	r2, [r7, #12]
 8021abe:	2381      	movs	r3, #129	@ 0x81
 8021ac0:	009b      	lsls	r3, r3, #2
 8021ac2:	58d2      	ldr	r2, [r2, r3]
 8021ac4:	6878      	ldr	r0, [r7, #4]
 8021ac6:	2340      	movs	r3, #64	@ 0x40
 8021ac8:	2101      	movs	r1, #1
 8021aca:	f001 ff1f 	bl	802390c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021ace:	2300      	movs	r3, #0
 8021ad0:	e000      	b.n	8021ad4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021ad2:	2302      	movs	r3, #2
  }
}
 8021ad4:	0018      	movs	r0, r3
 8021ad6:	46bd      	mov	sp, r7
 8021ad8:	b004      	add	sp, #16
 8021ada:	bd80      	pop	{r7, pc}

08021adc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021adc:	b580      	push	{r7, lr}
 8021ade:	b084      	sub	sp, #16
 8021ae0:	af00      	add	r7, sp, #0
 8021ae2:	60f8      	str	r0, [r7, #12]
 8021ae4:	60b9      	str	r1, [r7, #8]
 8021ae6:	1dfb      	adds	r3, r7, #7
 8021ae8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021aea:	68fb      	ldr	r3, [r7, #12]
 8021aec:	2b00      	cmp	r3, #0
 8021aee:	d101      	bne.n	8021af4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021af0:	2302      	movs	r3, #2
 8021af2:	e020      	b.n	8021b36 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021af4:	68fa      	ldr	r2, [r7, #12]
 8021af6:	23ad      	movs	r3, #173	@ 0xad
 8021af8:	009b      	lsls	r3, r3, #2
 8021afa:	58d3      	ldr	r3, [r2, r3]
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d004      	beq.n	8021b0a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021b00:	68fa      	ldr	r2, [r7, #12]
 8021b02:	23ad      	movs	r3, #173	@ 0xad
 8021b04:	009b      	lsls	r3, r3, #2
 8021b06:	2100      	movs	r1, #0
 8021b08:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021b0a:	68bb      	ldr	r3, [r7, #8]
 8021b0c:	2b00      	cmp	r3, #0
 8021b0e:	d004      	beq.n	8021b1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021b10:	68fa      	ldr	r2, [r7, #12]
 8021b12:	23ac      	movs	r3, #172	@ 0xac
 8021b14:	009b      	lsls	r3, r3, #2
 8021b16:	68b9      	ldr	r1, [r7, #8]
 8021b18:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021b1a:	68fa      	ldr	r2, [r7, #12]
 8021b1c:	23a7      	movs	r3, #167	@ 0xa7
 8021b1e:	009b      	lsls	r3, r3, #2
 8021b20:	2101      	movs	r1, #1
 8021b22:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021b24:	68fb      	ldr	r3, [r7, #12]
 8021b26:	1dfa      	adds	r2, r7, #7
 8021b28:	7812      	ldrb	r2, [r2, #0]
 8021b2a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021b2c:	68fb      	ldr	r3, [r7, #12]
 8021b2e:	0018      	movs	r0, r3
 8021b30:	f001 fd18 	bl	8023564 <USBD_LL_Init>

  return USBD_OK;
 8021b34:	2300      	movs	r3, #0
}
 8021b36:	0018      	movs	r0, r3
 8021b38:	46bd      	mov	sp, r7
 8021b3a:	b004      	add	sp, #16
 8021b3c:	bd80      	pop	{r7, pc}

08021b3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021b3e:	b580      	push	{r7, lr}
 8021b40:	b084      	sub	sp, #16
 8021b42:	af00      	add	r7, sp, #0
 8021b44:	6078      	str	r0, [r7, #4]
 8021b46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021b48:	200f      	movs	r0, #15
 8021b4a:	183b      	adds	r3, r7, r0
 8021b4c:	2200      	movs	r2, #0
 8021b4e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021b50:	683b      	ldr	r3, [r7, #0]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d008      	beq.n	8021b68 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021b56:	687a      	ldr	r2, [r7, #4]
 8021b58:	23ad      	movs	r3, #173	@ 0xad
 8021b5a:	009b      	lsls	r3, r3, #2
 8021b5c:	6839      	ldr	r1, [r7, #0]
 8021b5e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021b60:	183b      	adds	r3, r7, r0
 8021b62:	2200      	movs	r2, #0
 8021b64:	701a      	strb	r2, [r3, #0]
 8021b66:	e003      	b.n	8021b70 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021b68:	230f      	movs	r3, #15
 8021b6a:	18fb      	adds	r3, r7, r3
 8021b6c:	2202      	movs	r2, #2
 8021b6e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021b70:	230f      	movs	r3, #15
 8021b72:	18fb      	adds	r3, r7, r3
 8021b74:	781b      	ldrb	r3, [r3, #0]
}
 8021b76:	0018      	movs	r0, r3
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	b004      	add	sp, #16
 8021b7c:	bd80      	pop	{r7, pc}

08021b7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021b7e:	b580      	push	{r7, lr}
 8021b80:	b082      	sub	sp, #8
 8021b82:	af00      	add	r7, sp, #0
 8021b84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	0018      	movs	r0, r3
 8021b8a:	f001 fd4f 	bl	802362c <USBD_LL_Start>

  return USBD_OK;
 8021b8e:	2300      	movs	r3, #0
}
 8021b90:	0018      	movs	r0, r3
 8021b92:	46bd      	mov	sp, r7
 8021b94:	b002      	add	sp, #8
 8021b96:	bd80      	pop	{r7, pc}

08021b98 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021b98:	b580      	push	{r7, lr}
 8021b9a:	b082      	sub	sp, #8
 8021b9c:	af00      	add	r7, sp, #0
 8021b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021ba0:	2300      	movs	r3, #0
}
 8021ba2:	0018      	movs	r0, r3
 8021ba4:	46bd      	mov	sp, r7
 8021ba6:	b002      	add	sp, #8
 8021ba8:	bd80      	pop	{r7, pc}

08021baa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021baa:	b590      	push	{r4, r7, lr}
 8021bac:	b085      	sub	sp, #20
 8021bae:	af00      	add	r7, sp, #0
 8021bb0:	6078      	str	r0, [r7, #4]
 8021bb2:	000a      	movs	r2, r1
 8021bb4:	1cfb      	adds	r3, r7, #3
 8021bb6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021bb8:	240f      	movs	r4, #15
 8021bba:	193b      	adds	r3, r7, r4
 8021bbc:	2202      	movs	r2, #2
 8021bbe:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021bc0:	687a      	ldr	r2, [r7, #4]
 8021bc2:	23ad      	movs	r3, #173	@ 0xad
 8021bc4:	009b      	lsls	r3, r3, #2
 8021bc6:	58d3      	ldr	r3, [r2, r3]
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d00e      	beq.n	8021bea <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021bcc:	687a      	ldr	r2, [r7, #4]
 8021bce:	23ad      	movs	r3, #173	@ 0xad
 8021bd0:	009b      	lsls	r3, r3, #2
 8021bd2:	58d3      	ldr	r3, [r2, r3]
 8021bd4:	681b      	ldr	r3, [r3, #0]
 8021bd6:	1cfa      	adds	r2, r7, #3
 8021bd8:	7811      	ldrb	r1, [r2, #0]
 8021bda:	687a      	ldr	r2, [r7, #4]
 8021bdc:	0010      	movs	r0, r2
 8021bde:	4798      	blx	r3
 8021be0:	1e03      	subs	r3, r0, #0
 8021be2:	d102      	bne.n	8021bea <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021be4:	193b      	adds	r3, r7, r4
 8021be6:	2200      	movs	r2, #0
 8021be8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021bea:	230f      	movs	r3, #15
 8021bec:	18fb      	adds	r3, r7, r3
 8021bee:	781b      	ldrb	r3, [r3, #0]
}
 8021bf0:	0018      	movs	r0, r3
 8021bf2:	46bd      	mov	sp, r7
 8021bf4:	b005      	add	sp, #20
 8021bf6:	bd90      	pop	{r4, r7, pc}

08021bf8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021bf8:	b580      	push	{r7, lr}
 8021bfa:	b082      	sub	sp, #8
 8021bfc:	af00      	add	r7, sp, #0
 8021bfe:	6078      	str	r0, [r7, #4]
 8021c00:	000a      	movs	r2, r1
 8021c02:	1cfb      	adds	r3, r7, #3
 8021c04:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021c06:	687a      	ldr	r2, [r7, #4]
 8021c08:	23ad      	movs	r3, #173	@ 0xad
 8021c0a:	009b      	lsls	r3, r3, #2
 8021c0c:	58d3      	ldr	r3, [r2, r3]
 8021c0e:	685b      	ldr	r3, [r3, #4]
 8021c10:	1cfa      	adds	r2, r7, #3
 8021c12:	7811      	ldrb	r1, [r2, #0]
 8021c14:	687a      	ldr	r2, [r7, #4]
 8021c16:	0010      	movs	r0, r2
 8021c18:	4798      	blx	r3

  return USBD_OK;
 8021c1a:	2300      	movs	r3, #0
}
 8021c1c:	0018      	movs	r0, r3
 8021c1e:	46bd      	mov	sp, r7
 8021c20:	b002      	add	sp, #8
 8021c22:	bd80      	pop	{r7, pc}

08021c24 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021c24:	b580      	push	{r7, lr}
 8021c26:	b082      	sub	sp, #8
 8021c28:	af00      	add	r7, sp, #0
 8021c2a:	6078      	str	r0, [r7, #4]
 8021c2c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	22aa      	movs	r2, #170	@ 0xaa
 8021c32:	0092      	lsls	r2, r2, #2
 8021c34:	4694      	mov	ip, r2
 8021c36:	4463      	add	r3, ip
 8021c38:	683a      	ldr	r2, [r7, #0]
 8021c3a:	0011      	movs	r1, r2
 8021c3c:	0018      	movs	r0, r3
 8021c3e:	f001 f810 	bl	8022c62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021c42:	687a      	ldr	r2, [r7, #4]
 8021c44:	23a5      	movs	r3, #165	@ 0xa5
 8021c46:	009b      	lsls	r3, r3, #2
 8021c48:	2101      	movs	r1, #1
 8021c4a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	4a23      	ldr	r2, [pc, #140]	@ (8021cdc <USBD_LL_SetupStage+0xb8>)
 8021c50:	5a9b      	ldrh	r3, [r3, r2]
 8021c52:	0019      	movs	r1, r3
 8021c54:	687a      	ldr	r2, [r7, #4]
 8021c56:	23a6      	movs	r3, #166	@ 0xa6
 8021c58:	009b      	lsls	r3, r3, #2
 8021c5a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021c5c:	687a      	ldr	r2, [r7, #4]
 8021c5e:	23aa      	movs	r3, #170	@ 0xaa
 8021c60:	009b      	lsls	r3, r3, #2
 8021c62:	5cd3      	ldrb	r3, [r2, r3]
 8021c64:	001a      	movs	r2, r3
 8021c66:	231f      	movs	r3, #31
 8021c68:	4013      	ands	r3, r2
 8021c6a:	2b02      	cmp	r3, #2
 8021c6c:	d019      	beq.n	8021ca2 <USBD_LL_SetupStage+0x7e>
 8021c6e:	d822      	bhi.n	8021cb6 <USBD_LL_SetupStage+0x92>
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d002      	beq.n	8021c7a <USBD_LL_SetupStage+0x56>
 8021c74:	2b01      	cmp	r3, #1
 8021c76:	d00a      	beq.n	8021c8e <USBD_LL_SetupStage+0x6a>
 8021c78:	e01d      	b.n	8021cb6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	22aa      	movs	r2, #170	@ 0xaa
 8021c7e:	0092      	lsls	r2, r2, #2
 8021c80:	189a      	adds	r2, r3, r2
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	0011      	movs	r1, r2
 8021c86:	0018      	movs	r0, r3
 8021c88:	f000 fa10 	bl	80220ac <USBD_StdDevReq>
      break;
 8021c8c:	e020      	b.n	8021cd0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021c8e:	687b      	ldr	r3, [r7, #4]
 8021c90:	22aa      	movs	r2, #170	@ 0xaa
 8021c92:	0092      	lsls	r2, r2, #2
 8021c94:	189a      	adds	r2, r3, r2
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	0011      	movs	r1, r2
 8021c9a:	0018      	movs	r0, r3
 8021c9c:	f000 fa78 	bl	8022190 <USBD_StdItfReq>
      break;
 8021ca0:	e016      	b.n	8021cd0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	22aa      	movs	r2, #170	@ 0xaa
 8021ca6:	0092      	lsls	r2, r2, #2
 8021ca8:	189a      	adds	r2, r3, r2
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	0011      	movs	r1, r2
 8021cae:	0018      	movs	r0, r3
 8021cb0:	f000 fac5 	bl	802223e <USBD_StdEPReq>
      break;
 8021cb4:	e00c      	b.n	8021cd0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021cb6:	687a      	ldr	r2, [r7, #4]
 8021cb8:	23aa      	movs	r3, #170	@ 0xaa
 8021cba:	009b      	lsls	r3, r3, #2
 8021cbc:	5cd3      	ldrb	r3, [r2, r3]
 8021cbe:	227f      	movs	r2, #127	@ 0x7f
 8021cc0:	4393      	bics	r3, r2
 8021cc2:	b2da      	uxtb	r2, r3
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	0011      	movs	r1, r2
 8021cc8:	0018      	movs	r0, r3
 8021cca:	f001 fd36 	bl	802373a <USBD_LL_StallEP>
      break;
 8021cce:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021cd0:	2300      	movs	r3, #0
}
 8021cd2:	0018      	movs	r0, r3
 8021cd4:	46bd      	mov	sp, r7
 8021cd6:	b002      	add	sp, #8
 8021cd8:	bd80      	pop	{r7, pc}
 8021cda:	46c0      	nop			@ (mov r8, r8)
 8021cdc:	000002ae 	.word	0x000002ae

08021ce0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021ce0:	b580      	push	{r7, lr}
 8021ce2:	b086      	sub	sp, #24
 8021ce4:	af00      	add	r7, sp, #0
 8021ce6:	60f8      	str	r0, [r7, #12]
 8021ce8:	607a      	str	r2, [r7, #4]
 8021cea:	200b      	movs	r0, #11
 8021cec:	183b      	adds	r3, r7, r0
 8021cee:	1c0a      	adds	r2, r1, #0
 8021cf0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021cf2:	183b      	adds	r3, r7, r0
 8021cf4:	781b      	ldrb	r3, [r3, #0]
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d154      	bne.n	8021da4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021cfa:	68fb      	ldr	r3, [r7, #12]
 8021cfc:	3355      	adds	r3, #85	@ 0x55
 8021cfe:	33ff      	adds	r3, #255	@ 0xff
 8021d00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021d02:	68fa      	ldr	r2, [r7, #12]
 8021d04:	23a5      	movs	r3, #165	@ 0xa5
 8021d06:	009b      	lsls	r3, r3, #2
 8021d08:	58d3      	ldr	r3, [r2, r3]
 8021d0a:	2b03      	cmp	r3, #3
 8021d0c:	d139      	bne.n	8021d82 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	68da      	ldr	r2, [r3, #12]
 8021d12:	697b      	ldr	r3, [r7, #20]
 8021d14:	691b      	ldr	r3, [r3, #16]
 8021d16:	429a      	cmp	r2, r3
 8021d18:	d919      	bls.n	8021d4e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021d1a:	697b      	ldr	r3, [r7, #20]
 8021d1c:	68da      	ldr	r2, [r3, #12]
 8021d1e:	697b      	ldr	r3, [r7, #20]
 8021d20:	691b      	ldr	r3, [r3, #16]
 8021d22:	1ad2      	subs	r2, r2, r3
 8021d24:	697b      	ldr	r3, [r7, #20]
 8021d26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021d28:	697b      	ldr	r3, [r7, #20]
 8021d2a:	68da      	ldr	r2, [r3, #12]
 8021d2c:	697b      	ldr	r3, [r7, #20]
 8021d2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021d30:	429a      	cmp	r2, r3
 8021d32:	d203      	bcs.n	8021d3c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021d34:	697b      	ldr	r3, [r7, #20]
 8021d36:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021d38:	b29b      	uxth	r3, r3
 8021d3a:	e002      	b.n	8021d42 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021d3c:	697b      	ldr	r3, [r7, #20]
 8021d3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021d40:	b29b      	uxth	r3, r3
 8021d42:	6879      	ldr	r1, [r7, #4]
 8021d44:	68f8      	ldr	r0, [r7, #12]
 8021d46:	001a      	movs	r2, r3
 8021d48:	f001 f898 	bl	8022e7c <USBD_CtlContinueRx>
 8021d4c:	e045      	b.n	8021dda <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021d4e:	68fa      	ldr	r2, [r7, #12]
 8021d50:	23ad      	movs	r3, #173	@ 0xad
 8021d52:	009b      	lsls	r3, r3, #2
 8021d54:	58d3      	ldr	r3, [r2, r3]
 8021d56:	691b      	ldr	r3, [r3, #16]
 8021d58:	2b00      	cmp	r3, #0
 8021d5a:	d00d      	beq.n	8021d78 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021d5c:	68fa      	ldr	r2, [r7, #12]
 8021d5e:	23a7      	movs	r3, #167	@ 0xa7
 8021d60:	009b      	lsls	r3, r3, #2
 8021d62:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021d64:	2b03      	cmp	r3, #3
 8021d66:	d107      	bne.n	8021d78 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021d68:	68fa      	ldr	r2, [r7, #12]
 8021d6a:	23ad      	movs	r3, #173	@ 0xad
 8021d6c:	009b      	lsls	r3, r3, #2
 8021d6e:	58d3      	ldr	r3, [r2, r3]
 8021d70:	691b      	ldr	r3, [r3, #16]
 8021d72:	68fa      	ldr	r2, [r7, #12]
 8021d74:	0010      	movs	r0, r2
 8021d76:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	0018      	movs	r0, r3
 8021d7c:	f001 f891 	bl	8022ea2 <USBD_CtlSendStatus>
 8021d80:	e02b      	b.n	8021dda <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021d82:	68fa      	ldr	r2, [r7, #12]
 8021d84:	23a5      	movs	r3, #165	@ 0xa5
 8021d86:	009b      	lsls	r3, r3, #2
 8021d88:	58d3      	ldr	r3, [r2, r3]
 8021d8a:	2b05      	cmp	r3, #5
 8021d8c:	d125      	bne.n	8021dda <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021d8e:	68fa      	ldr	r2, [r7, #12]
 8021d90:	23a5      	movs	r3, #165	@ 0xa5
 8021d92:	009b      	lsls	r3, r3, #2
 8021d94:	2100      	movs	r1, #0
 8021d96:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021d98:	68fb      	ldr	r3, [r7, #12]
 8021d9a:	2100      	movs	r1, #0
 8021d9c:	0018      	movs	r0, r3
 8021d9e:	f001 fccc 	bl	802373a <USBD_LL_StallEP>
 8021da2:	e01a      	b.n	8021dda <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021da4:	68fa      	ldr	r2, [r7, #12]
 8021da6:	23ad      	movs	r3, #173	@ 0xad
 8021da8:	009b      	lsls	r3, r3, #2
 8021daa:	58d3      	ldr	r3, [r2, r3]
 8021dac:	699b      	ldr	r3, [r3, #24]
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d011      	beq.n	8021dd6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021db2:	68fa      	ldr	r2, [r7, #12]
 8021db4:	23a7      	movs	r3, #167	@ 0xa7
 8021db6:	009b      	lsls	r3, r3, #2
 8021db8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8021dba:	2b03      	cmp	r3, #3
 8021dbc:	d10b      	bne.n	8021dd6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021dbe:	68fa      	ldr	r2, [r7, #12]
 8021dc0:	23ad      	movs	r3, #173	@ 0xad
 8021dc2:	009b      	lsls	r3, r3, #2
 8021dc4:	58d3      	ldr	r3, [r2, r3]
 8021dc6:	699b      	ldr	r3, [r3, #24]
 8021dc8:	220b      	movs	r2, #11
 8021dca:	18ba      	adds	r2, r7, r2
 8021dcc:	7811      	ldrb	r1, [r2, #0]
 8021dce:	68fa      	ldr	r2, [r7, #12]
 8021dd0:	0010      	movs	r0, r2
 8021dd2:	4798      	blx	r3
 8021dd4:	e001      	b.n	8021dda <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021dd6:	2302      	movs	r3, #2
 8021dd8:	e000      	b.n	8021ddc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8021dda:	2300      	movs	r3, #0
}
 8021ddc:	0018      	movs	r0, r3
 8021dde:	46bd      	mov	sp, r7
 8021de0:	b006      	add	sp, #24
 8021de2:	bd80      	pop	{r7, pc}

08021de4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021de4:	b580      	push	{r7, lr}
 8021de6:	b086      	sub	sp, #24
 8021de8:	af00      	add	r7, sp, #0
 8021dea:	60f8      	str	r0, [r7, #12]
 8021dec:	607a      	str	r2, [r7, #4]
 8021dee:	200b      	movs	r0, #11
 8021df0:	183b      	adds	r3, r7, r0
 8021df2:	1c0a      	adds	r2, r1, #0
 8021df4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021df6:	183b      	adds	r3, r7, r0
 8021df8:	781b      	ldrb	r3, [r3, #0]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d000      	beq.n	8021e00 <USBD_LL_DataInStage+0x1c>
 8021dfe:	e08e      	b.n	8021f1e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8021e00:	68fb      	ldr	r3, [r7, #12]
 8021e02:	3314      	adds	r3, #20
 8021e04:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021e06:	68fa      	ldr	r2, [r7, #12]
 8021e08:	23a5      	movs	r3, #165	@ 0xa5
 8021e0a:	009b      	lsls	r3, r3, #2
 8021e0c:	58d3      	ldr	r3, [r2, r3]
 8021e0e:	2b02      	cmp	r3, #2
 8021e10:	d164      	bne.n	8021edc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8021e12:	697b      	ldr	r3, [r7, #20]
 8021e14:	68da      	ldr	r2, [r3, #12]
 8021e16:	697b      	ldr	r3, [r7, #20]
 8021e18:	691b      	ldr	r3, [r3, #16]
 8021e1a:	429a      	cmp	r2, r3
 8021e1c:	d915      	bls.n	8021e4a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8021e1e:	697b      	ldr	r3, [r7, #20]
 8021e20:	68da      	ldr	r2, [r3, #12]
 8021e22:	697b      	ldr	r3, [r7, #20]
 8021e24:	691b      	ldr	r3, [r3, #16]
 8021e26:	1ad2      	subs	r2, r2, r3
 8021e28:	697b      	ldr	r3, [r7, #20]
 8021e2a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021e2c:	697b      	ldr	r3, [r7, #20]
 8021e2e:	68db      	ldr	r3, [r3, #12]
 8021e30:	b29a      	uxth	r2, r3
 8021e32:	6879      	ldr	r1, [r7, #4]
 8021e34:	68fb      	ldr	r3, [r7, #12]
 8021e36:	0018      	movs	r0, r3
 8021e38:	f000 ffe9 	bl	8022e0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021e3c:	68f8      	ldr	r0, [r7, #12]
 8021e3e:	2300      	movs	r3, #0
 8021e40:	2200      	movs	r2, #0
 8021e42:	2100      	movs	r1, #0
 8021e44:	f001 fd62 	bl	802390c <USBD_LL_PrepareReceive>
 8021e48:	e059      	b.n	8021efe <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021e4a:	697b      	ldr	r3, [r7, #20]
 8021e4c:	689a      	ldr	r2, [r3, #8]
 8021e4e:	697b      	ldr	r3, [r7, #20]
 8021e50:	691b      	ldr	r3, [r3, #16]
 8021e52:	0019      	movs	r1, r3
 8021e54:	0010      	movs	r0, r2
 8021e56:	f7de fa2b 	bl	80002b0 <__aeabi_uidivmod>
 8021e5a:	1e0b      	subs	r3, r1, #0
 8021e5c:	d11f      	bne.n	8021e9e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8021e5e:	697b      	ldr	r3, [r7, #20]
 8021e60:	689a      	ldr	r2, [r3, #8]
 8021e62:	697b      	ldr	r3, [r7, #20]
 8021e64:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021e66:	429a      	cmp	r2, r3
 8021e68:	d319      	bcc.n	8021e9e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8021e6a:	697b      	ldr	r3, [r7, #20]
 8021e6c:	689a      	ldr	r2, [r3, #8]
 8021e6e:	68f9      	ldr	r1, [r7, #12]
 8021e70:	23a6      	movs	r3, #166	@ 0xa6
 8021e72:	009b      	lsls	r3, r3, #2
 8021e74:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8021e76:	429a      	cmp	r2, r3
 8021e78:	d211      	bcs.n	8021e9e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021e7a:	68fb      	ldr	r3, [r7, #12]
 8021e7c:	2200      	movs	r2, #0
 8021e7e:	2100      	movs	r1, #0
 8021e80:	0018      	movs	r0, r3
 8021e82:	f000 ffc4 	bl	8022e0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021e86:	68fa      	ldr	r2, [r7, #12]
 8021e88:	23a6      	movs	r3, #166	@ 0xa6
 8021e8a:	009b      	lsls	r3, r3, #2
 8021e8c:	2100      	movs	r1, #0
 8021e8e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021e90:	68f8      	ldr	r0, [r7, #12]
 8021e92:	2300      	movs	r3, #0
 8021e94:	2200      	movs	r2, #0
 8021e96:	2100      	movs	r1, #0
 8021e98:	f001 fd38 	bl	802390c <USBD_LL_PrepareReceive>
 8021e9c:	e02f      	b.n	8021efe <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021e9e:	68fa      	ldr	r2, [r7, #12]
 8021ea0:	23ad      	movs	r3, #173	@ 0xad
 8021ea2:	009b      	lsls	r3, r3, #2
 8021ea4:	58d3      	ldr	r3, [r2, r3]
 8021ea6:	68db      	ldr	r3, [r3, #12]
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	d00d      	beq.n	8021ec8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021eac:	68fa      	ldr	r2, [r7, #12]
 8021eae:	23a7      	movs	r3, #167	@ 0xa7
 8021eb0:	009b      	lsls	r3, r3, #2
 8021eb2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021eb4:	2b03      	cmp	r3, #3
 8021eb6:	d107      	bne.n	8021ec8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8021eb8:	68fa      	ldr	r2, [r7, #12]
 8021eba:	23ad      	movs	r3, #173	@ 0xad
 8021ebc:	009b      	lsls	r3, r3, #2
 8021ebe:	58d3      	ldr	r3, [r2, r3]
 8021ec0:	68db      	ldr	r3, [r3, #12]
 8021ec2:	68fa      	ldr	r2, [r7, #12]
 8021ec4:	0010      	movs	r0, r2
 8021ec6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8021ec8:	68fb      	ldr	r3, [r7, #12]
 8021eca:	2180      	movs	r1, #128	@ 0x80
 8021ecc:	0018      	movs	r0, r3
 8021ece:	f001 fc34 	bl	802373a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8021ed2:	68fb      	ldr	r3, [r7, #12]
 8021ed4:	0018      	movs	r0, r3
 8021ed6:	f000 fff8 	bl	8022eca <USBD_CtlReceiveStatus>
 8021eda:	e010      	b.n	8021efe <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021edc:	68fa      	ldr	r2, [r7, #12]
 8021ede:	23a5      	movs	r3, #165	@ 0xa5
 8021ee0:	009b      	lsls	r3, r3, #2
 8021ee2:	58d3      	ldr	r3, [r2, r3]
 8021ee4:	2b04      	cmp	r3, #4
 8021ee6:	d005      	beq.n	8021ef4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8021ee8:	68fa      	ldr	r2, [r7, #12]
 8021eea:	23a5      	movs	r3, #165	@ 0xa5
 8021eec:	009b      	lsls	r3, r3, #2
 8021eee:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021ef0:	2b00      	cmp	r3, #0
 8021ef2:	d104      	bne.n	8021efe <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021ef4:	68fb      	ldr	r3, [r7, #12]
 8021ef6:	2180      	movs	r1, #128	@ 0x80
 8021ef8:	0018      	movs	r0, r3
 8021efa:	f001 fc1e 	bl	802373a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8021efe:	68fa      	ldr	r2, [r7, #12]
 8021f00:	23a8      	movs	r3, #168	@ 0xa8
 8021f02:	009b      	lsls	r3, r3, #2
 8021f04:	5cd3      	ldrb	r3, [r2, r3]
 8021f06:	2b01      	cmp	r3, #1
 8021f08:	d124      	bne.n	8021f54 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021f0a:	68fb      	ldr	r3, [r7, #12]
 8021f0c:	0018      	movs	r0, r3
 8021f0e:	f7ff fe43 	bl	8021b98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021f12:	68fa      	ldr	r2, [r7, #12]
 8021f14:	23a8      	movs	r3, #168	@ 0xa8
 8021f16:	009b      	lsls	r3, r3, #2
 8021f18:	2100      	movs	r1, #0
 8021f1a:	54d1      	strb	r1, [r2, r3]
 8021f1c:	e01a      	b.n	8021f54 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8021f1e:	68fa      	ldr	r2, [r7, #12]
 8021f20:	23ad      	movs	r3, #173	@ 0xad
 8021f22:	009b      	lsls	r3, r3, #2
 8021f24:	58d3      	ldr	r3, [r2, r3]
 8021f26:	695b      	ldr	r3, [r3, #20]
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	d011      	beq.n	8021f50 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021f2c:	68fa      	ldr	r2, [r7, #12]
 8021f2e:	23a7      	movs	r3, #167	@ 0xa7
 8021f30:	009b      	lsls	r3, r3, #2
 8021f32:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021f34:	2b03      	cmp	r3, #3
 8021f36:	d10b      	bne.n	8021f50 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8021f38:	68fa      	ldr	r2, [r7, #12]
 8021f3a:	23ad      	movs	r3, #173	@ 0xad
 8021f3c:	009b      	lsls	r3, r3, #2
 8021f3e:	58d3      	ldr	r3, [r2, r3]
 8021f40:	695b      	ldr	r3, [r3, #20]
 8021f42:	220b      	movs	r2, #11
 8021f44:	18ba      	adds	r2, r7, r2
 8021f46:	7811      	ldrb	r1, [r2, #0]
 8021f48:	68fa      	ldr	r2, [r7, #12]
 8021f4a:	0010      	movs	r0, r2
 8021f4c:	4798      	blx	r3
 8021f4e:	e001      	b.n	8021f54 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021f50:	2302      	movs	r3, #2
 8021f52:	e000      	b.n	8021f56 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021f54:	2300      	movs	r3, #0
}
 8021f56:	0018      	movs	r0, r3
 8021f58:	46bd      	mov	sp, r7
 8021f5a:	b006      	add	sp, #24
 8021f5c:	bd80      	pop	{r7, pc}

08021f5e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021f5e:	b580      	push	{r7, lr}
 8021f60:	b082      	sub	sp, #8
 8021f62:	af00      	add	r7, sp, #0
 8021f64:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021f66:	6878      	ldr	r0, [r7, #4]
 8021f68:	2340      	movs	r3, #64	@ 0x40
 8021f6a:	2200      	movs	r2, #0
 8021f6c:	2100      	movs	r1, #0
 8021f6e:	f001 fb82 	bl	8023676 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021f72:	687a      	ldr	r2, [r7, #4]
 8021f74:	23ac      	movs	r3, #172	@ 0xac
 8021f76:	005b      	lsls	r3, r3, #1
 8021f78:	2101      	movs	r1, #1
 8021f7a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021f7c:	687a      	ldr	r2, [r7, #4]
 8021f7e:	23b2      	movs	r3, #178	@ 0xb2
 8021f80:	005b      	lsls	r3, r3, #1
 8021f82:	2140      	movs	r1, #64	@ 0x40
 8021f84:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021f86:	6878      	ldr	r0, [r7, #4]
 8021f88:	2340      	movs	r3, #64	@ 0x40
 8021f8a:	2200      	movs	r2, #0
 8021f8c:	2180      	movs	r1, #128	@ 0x80
 8021f8e:	f001 fb72 	bl	8023676 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	2201      	movs	r2, #1
 8021f96:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	2240      	movs	r2, #64	@ 0x40
 8021f9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021f9e:	687a      	ldr	r2, [r7, #4]
 8021fa0:	23a7      	movs	r3, #167	@ 0xa7
 8021fa2:	009b      	lsls	r3, r3, #2
 8021fa4:	2101      	movs	r1, #1
 8021fa6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8021fa8:	687a      	ldr	r2, [r7, #4]
 8021faa:	23a5      	movs	r3, #165	@ 0xa5
 8021fac:	009b      	lsls	r3, r3, #2
 8021fae:	2100      	movs	r1, #0
 8021fb0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021fb8:	687a      	ldr	r2, [r7, #4]
 8021fba:	23a9      	movs	r3, #169	@ 0xa9
 8021fbc:	009b      	lsls	r3, r3, #2
 8021fbe:	2100      	movs	r1, #0
 8021fc0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8021fc2:	687a      	ldr	r2, [r7, #4]
 8021fc4:	23ae      	movs	r3, #174	@ 0xae
 8021fc6:	009b      	lsls	r3, r3, #2
 8021fc8:	58d3      	ldr	r3, [r2, r3]
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d00a      	beq.n	8021fe4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021fce:	687a      	ldr	r2, [r7, #4]
 8021fd0:	23ad      	movs	r3, #173	@ 0xad
 8021fd2:	009b      	lsls	r3, r3, #2
 8021fd4:	58d3      	ldr	r3, [r2, r3]
 8021fd6:	685a      	ldr	r2, [r3, #4]
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	685b      	ldr	r3, [r3, #4]
 8021fdc:	b2d9      	uxtb	r1, r3
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	0018      	movs	r0, r3
 8021fe2:	4790      	blx	r2
  }

  return USBD_OK;
 8021fe4:	2300      	movs	r3, #0
}
 8021fe6:	0018      	movs	r0, r3
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	b002      	add	sp, #8
 8021fec:	bd80      	pop	{r7, pc}

08021fee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021fee:	b580      	push	{r7, lr}
 8021ff0:	b082      	sub	sp, #8
 8021ff2:	af00      	add	r7, sp, #0
 8021ff4:	6078      	str	r0, [r7, #4]
 8021ff6:	000a      	movs	r2, r1
 8021ff8:	1cfb      	adds	r3, r7, #3
 8021ffa:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	1cfa      	adds	r2, r7, #3
 8022000:	7812      	ldrb	r2, [r2, #0]
 8022002:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022004:	2300      	movs	r3, #0
}
 8022006:	0018      	movs	r0, r3
 8022008:	46bd      	mov	sp, r7
 802200a:	b002      	add	sp, #8
 802200c:	bd80      	pop	{r7, pc}
	...

08022010 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8022010:	b580      	push	{r7, lr}
 8022012:	b082      	sub	sp, #8
 8022014:	af00      	add	r7, sp, #0
 8022016:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8022018:	687a      	ldr	r2, [r7, #4]
 802201a:	23a7      	movs	r3, #167	@ 0xa7
 802201c:	009b      	lsls	r3, r3, #2
 802201e:	5cd1      	ldrb	r1, [r2, r3]
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	4a06      	ldr	r2, [pc, #24]	@ (802203c <USBD_LL_Suspend+0x2c>)
 8022024:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8022026:	687a      	ldr	r2, [r7, #4]
 8022028:	23a7      	movs	r3, #167	@ 0xa7
 802202a:	009b      	lsls	r3, r3, #2
 802202c:	2104      	movs	r1, #4
 802202e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8022030:	2300      	movs	r3, #0
}
 8022032:	0018      	movs	r0, r3
 8022034:	46bd      	mov	sp, r7
 8022036:	b002      	add	sp, #8
 8022038:	bd80      	pop	{r7, pc}
 802203a:	46c0      	nop			@ (mov r8, r8)
 802203c:	0000029d 	.word	0x0000029d

08022040 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8022040:	b580      	push	{r7, lr}
 8022042:	b082      	sub	sp, #8
 8022044:	af00      	add	r7, sp, #0
 8022046:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8022048:	687a      	ldr	r2, [r7, #4]
 802204a:	23a7      	movs	r3, #167	@ 0xa7
 802204c:	009b      	lsls	r3, r3, #2
 802204e:	5cd3      	ldrb	r3, [r2, r3]
 8022050:	2b04      	cmp	r3, #4
 8022052:	d106      	bne.n	8022062 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	4a05      	ldr	r2, [pc, #20]	@ (802206c <USBD_LL_Resume+0x2c>)
 8022058:	5c99      	ldrb	r1, [r3, r2]
 802205a:	687a      	ldr	r2, [r7, #4]
 802205c:	23a7      	movs	r3, #167	@ 0xa7
 802205e:	009b      	lsls	r3, r3, #2
 8022060:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8022062:	2300      	movs	r3, #0
}
 8022064:	0018      	movs	r0, r3
 8022066:	46bd      	mov	sp, r7
 8022068:	b002      	add	sp, #8
 802206a:	bd80      	pop	{r7, pc}
 802206c:	0000029d 	.word	0x0000029d

08022070 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8022070:	b580      	push	{r7, lr}
 8022072:	b082      	sub	sp, #8
 8022074:	af00      	add	r7, sp, #0
 8022076:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022078:	687a      	ldr	r2, [r7, #4]
 802207a:	23a7      	movs	r3, #167	@ 0xa7
 802207c:	009b      	lsls	r3, r3, #2
 802207e:	5cd3      	ldrb	r3, [r2, r3]
 8022080:	2b03      	cmp	r3, #3
 8022082:	d10e      	bne.n	80220a2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8022084:	687a      	ldr	r2, [r7, #4]
 8022086:	23ad      	movs	r3, #173	@ 0xad
 8022088:	009b      	lsls	r3, r3, #2
 802208a:	58d3      	ldr	r3, [r2, r3]
 802208c:	69db      	ldr	r3, [r3, #28]
 802208e:	2b00      	cmp	r3, #0
 8022090:	d007      	beq.n	80220a2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8022092:	687a      	ldr	r2, [r7, #4]
 8022094:	23ad      	movs	r3, #173	@ 0xad
 8022096:	009b      	lsls	r3, r3, #2
 8022098:	58d3      	ldr	r3, [r2, r3]
 802209a:	69db      	ldr	r3, [r3, #28]
 802209c:	687a      	ldr	r2, [r7, #4]
 802209e:	0010      	movs	r0, r2
 80220a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80220a2:	2300      	movs	r3, #0
}
 80220a4:	0018      	movs	r0, r3
 80220a6:	46bd      	mov	sp, r7
 80220a8:	b002      	add	sp, #8
 80220aa:	bd80      	pop	{r7, pc}

080220ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80220ac:	b580      	push	{r7, lr}
 80220ae:	b084      	sub	sp, #16
 80220b0:	af00      	add	r7, sp, #0
 80220b2:	6078      	str	r0, [r7, #4]
 80220b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80220b6:	230f      	movs	r3, #15
 80220b8:	18fb      	adds	r3, r7, r3
 80220ba:	2200      	movs	r2, #0
 80220bc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80220be:	683b      	ldr	r3, [r7, #0]
 80220c0:	781b      	ldrb	r3, [r3, #0]
 80220c2:	001a      	movs	r2, r3
 80220c4:	2360      	movs	r3, #96	@ 0x60
 80220c6:	4013      	ands	r3, r2
 80220c8:	2b40      	cmp	r3, #64	@ 0x40
 80220ca:	d004      	beq.n	80220d6 <USBD_StdDevReq+0x2a>
 80220cc:	d84f      	bhi.n	802216e <USBD_StdDevReq+0xc2>
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	d00b      	beq.n	80220ea <USBD_StdDevReq+0x3e>
 80220d2:	2b20      	cmp	r3, #32
 80220d4:	d14b      	bne.n	802216e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80220d6:	687a      	ldr	r2, [r7, #4]
 80220d8:	23ad      	movs	r3, #173	@ 0xad
 80220da:	009b      	lsls	r3, r3, #2
 80220dc:	58d3      	ldr	r3, [r2, r3]
 80220de:	689b      	ldr	r3, [r3, #8]
 80220e0:	6839      	ldr	r1, [r7, #0]
 80220e2:	687a      	ldr	r2, [r7, #4]
 80220e4:	0010      	movs	r0, r2
 80220e6:	4798      	blx	r3
      break;
 80220e8:	e048      	b.n	802217c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80220ea:	683b      	ldr	r3, [r7, #0]
 80220ec:	785b      	ldrb	r3, [r3, #1]
 80220ee:	2b09      	cmp	r3, #9
 80220f0:	d835      	bhi.n	802215e <USBD_StdDevReq+0xb2>
 80220f2:	009a      	lsls	r2, r3, #2
 80220f4:	4b25      	ldr	r3, [pc, #148]	@ (802218c <USBD_StdDevReq+0xe0>)
 80220f6:	18d3      	adds	r3, r2, r3
 80220f8:	681b      	ldr	r3, [r3, #0]
 80220fa:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80220fc:	683a      	ldr	r2, [r7, #0]
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	0011      	movs	r1, r2
 8022102:	0018      	movs	r0, r3
 8022104:	f000 fa52 	bl	80225ac <USBD_GetDescriptor>
          break;
 8022108:	e030      	b.n	802216c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802210a:	683a      	ldr	r2, [r7, #0]
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	0011      	movs	r1, r2
 8022110:	0018      	movs	r0, r3
 8022112:	f000 fbfd 	bl	8022910 <USBD_SetAddress>
          break;
 8022116:	e029      	b.n	802216c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8022118:	683a      	ldr	r2, [r7, #0]
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	0011      	movs	r1, r2
 802211e:	0018      	movs	r0, r3
 8022120:	f000 fc4a 	bl	80229b8 <USBD_SetConfig>
          break;
 8022124:	e022      	b.n	802216c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8022126:	683a      	ldr	r2, [r7, #0]
 8022128:	687b      	ldr	r3, [r7, #4]
 802212a:	0011      	movs	r1, r2
 802212c:	0018      	movs	r0, r3
 802212e:	f000 fce7 	bl	8022b00 <USBD_GetConfig>
          break;
 8022132:	e01b      	b.n	802216c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8022134:	683a      	ldr	r2, [r7, #0]
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	0011      	movs	r1, r2
 802213a:	0018      	movs	r0, r3
 802213c:	f000 fd1b 	bl	8022b76 <USBD_GetStatus>
          break;
 8022140:	e014      	b.n	802216c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8022142:	683a      	ldr	r2, [r7, #0]
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	0011      	movs	r1, r2
 8022148:	0018      	movs	r0, r3
 802214a:	f000 fd4e 	bl	8022bea <USBD_SetFeature>
          break;
 802214e:	e00d      	b.n	802216c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8022150:	683a      	ldr	r2, [r7, #0]
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	0011      	movs	r1, r2
 8022156:	0018      	movs	r0, r3
 8022158:	f000 fd5d 	bl	8022c16 <USBD_ClrFeature>
          break;
 802215c:	e006      	b.n	802216c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802215e:	683a      	ldr	r2, [r7, #0]
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	0011      	movs	r1, r2
 8022164:	0018      	movs	r0, r3
 8022166:	f000 fdb4 	bl	8022cd2 <USBD_CtlError>
          break;
 802216a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 802216c:	e006      	b.n	802217c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 802216e:	683a      	ldr	r2, [r7, #0]
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	0011      	movs	r1, r2
 8022174:	0018      	movs	r0, r3
 8022176:	f000 fdac 	bl	8022cd2 <USBD_CtlError>
      break;
 802217a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 802217c:	230f      	movs	r3, #15
 802217e:	18fb      	adds	r3, r7, r3
 8022180:	781b      	ldrb	r3, [r3, #0]
}
 8022182:	0018      	movs	r0, r3
 8022184:	46bd      	mov	sp, r7
 8022186:	b004      	add	sp, #16
 8022188:	bd80      	pop	{r7, pc}
 802218a:	46c0      	nop			@ (mov r8, r8)
 802218c:	0802e5b4 	.word	0x0802e5b4

08022190 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8022190:	b5b0      	push	{r4, r5, r7, lr}
 8022192:	b084      	sub	sp, #16
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
 8022198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802219a:	230f      	movs	r3, #15
 802219c:	18fb      	adds	r3, r7, r3
 802219e:	2200      	movs	r2, #0
 80221a0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80221a2:	683b      	ldr	r3, [r7, #0]
 80221a4:	781b      	ldrb	r3, [r3, #0]
 80221a6:	001a      	movs	r2, r3
 80221a8:	2360      	movs	r3, #96	@ 0x60
 80221aa:	4013      	ands	r3, r2
 80221ac:	2b40      	cmp	r3, #64	@ 0x40
 80221ae:	d004      	beq.n	80221ba <USBD_StdItfReq+0x2a>
 80221b0:	d839      	bhi.n	8022226 <USBD_StdItfReq+0x96>
 80221b2:	2b00      	cmp	r3, #0
 80221b4:	d001      	beq.n	80221ba <USBD_StdItfReq+0x2a>
 80221b6:	2b20      	cmp	r3, #32
 80221b8:	d135      	bne.n	8022226 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80221ba:	687a      	ldr	r2, [r7, #4]
 80221bc:	23a7      	movs	r3, #167	@ 0xa7
 80221be:	009b      	lsls	r3, r3, #2
 80221c0:	5cd3      	ldrb	r3, [r2, r3]
 80221c2:	3b01      	subs	r3, #1
 80221c4:	2b02      	cmp	r3, #2
 80221c6:	d825      	bhi.n	8022214 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80221c8:	683b      	ldr	r3, [r7, #0]
 80221ca:	889b      	ldrh	r3, [r3, #4]
 80221cc:	b2db      	uxtb	r3, r3
 80221ce:	2b01      	cmp	r3, #1
 80221d0:	d819      	bhi.n	8022206 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80221d2:	687a      	ldr	r2, [r7, #4]
 80221d4:	23ad      	movs	r3, #173	@ 0xad
 80221d6:	009b      	lsls	r3, r3, #2
 80221d8:	58d3      	ldr	r3, [r2, r3]
 80221da:	689b      	ldr	r3, [r3, #8]
 80221dc:	250f      	movs	r5, #15
 80221de:	197c      	adds	r4, r7, r5
 80221e0:	6839      	ldr	r1, [r7, #0]
 80221e2:	687a      	ldr	r2, [r7, #4]
 80221e4:	0010      	movs	r0, r2
 80221e6:	4798      	blx	r3
 80221e8:	0003      	movs	r3, r0
 80221ea:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80221ec:	683b      	ldr	r3, [r7, #0]
 80221ee:	88db      	ldrh	r3, [r3, #6]
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d116      	bne.n	8022222 <USBD_StdItfReq+0x92>
 80221f4:	197b      	adds	r3, r7, r5
 80221f6:	781b      	ldrb	r3, [r3, #0]
 80221f8:	2b00      	cmp	r3, #0
 80221fa:	d112      	bne.n	8022222 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	0018      	movs	r0, r3
 8022200:	f000 fe4f 	bl	8022ea2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022204:	e00d      	b.n	8022222 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8022206:	683a      	ldr	r2, [r7, #0]
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	0011      	movs	r1, r2
 802220c:	0018      	movs	r0, r3
 802220e:	f000 fd60 	bl	8022cd2 <USBD_CtlError>
          break;
 8022212:	e006      	b.n	8022222 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022214:	683a      	ldr	r2, [r7, #0]
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	0011      	movs	r1, r2
 802221a:	0018      	movs	r0, r3
 802221c:	f000 fd59 	bl	8022cd2 <USBD_CtlError>
          break;
 8022220:	e000      	b.n	8022224 <USBD_StdItfReq+0x94>
          break;
 8022222:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022224:	e006      	b.n	8022234 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8022226:	683a      	ldr	r2, [r7, #0]
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	0011      	movs	r1, r2
 802222c:	0018      	movs	r0, r3
 802222e:	f000 fd50 	bl	8022cd2 <USBD_CtlError>
      break;
 8022232:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8022234:	2300      	movs	r3, #0
}
 8022236:	0018      	movs	r0, r3
 8022238:	46bd      	mov	sp, r7
 802223a:	b004      	add	sp, #16
 802223c:	bdb0      	pop	{r4, r5, r7, pc}

0802223e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 802223e:	b5b0      	push	{r4, r5, r7, lr}
 8022240:	b084      	sub	sp, #16
 8022242:	af00      	add	r7, sp, #0
 8022244:	6078      	str	r0, [r7, #4]
 8022246:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8022248:	230f      	movs	r3, #15
 802224a:	18fb      	adds	r3, r7, r3
 802224c:	2200      	movs	r2, #0
 802224e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8022250:	683b      	ldr	r3, [r7, #0]
 8022252:	889a      	ldrh	r2, [r3, #4]
 8022254:	230e      	movs	r3, #14
 8022256:	18fb      	adds	r3, r7, r3
 8022258:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802225a:	683b      	ldr	r3, [r7, #0]
 802225c:	781b      	ldrb	r3, [r3, #0]
 802225e:	001a      	movs	r2, r3
 8022260:	2360      	movs	r3, #96	@ 0x60
 8022262:	4013      	ands	r3, r2
 8022264:	2b40      	cmp	r3, #64	@ 0x40
 8022266:	d006      	beq.n	8022276 <USBD_StdEPReq+0x38>
 8022268:	d900      	bls.n	802226c <USBD_StdEPReq+0x2e>
 802226a:	e190      	b.n	802258e <USBD_StdEPReq+0x350>
 802226c:	2b00      	cmp	r3, #0
 802226e:	d00c      	beq.n	802228a <USBD_StdEPReq+0x4c>
 8022270:	2b20      	cmp	r3, #32
 8022272:	d000      	beq.n	8022276 <USBD_StdEPReq+0x38>
 8022274:	e18b      	b.n	802258e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8022276:	687a      	ldr	r2, [r7, #4]
 8022278:	23ad      	movs	r3, #173	@ 0xad
 802227a:	009b      	lsls	r3, r3, #2
 802227c:	58d3      	ldr	r3, [r2, r3]
 802227e:	689b      	ldr	r3, [r3, #8]
 8022280:	6839      	ldr	r1, [r7, #0]
 8022282:	687a      	ldr	r2, [r7, #4]
 8022284:	0010      	movs	r0, r2
 8022286:	4798      	blx	r3
      break;
 8022288:	e188      	b.n	802259c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 802228a:	683b      	ldr	r3, [r7, #0]
 802228c:	781b      	ldrb	r3, [r3, #0]
 802228e:	001a      	movs	r2, r3
 8022290:	2360      	movs	r3, #96	@ 0x60
 8022292:	4013      	ands	r3, r2
 8022294:	2b20      	cmp	r3, #32
 8022296:	d10f      	bne.n	80222b8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8022298:	687a      	ldr	r2, [r7, #4]
 802229a:	23ad      	movs	r3, #173	@ 0xad
 802229c:	009b      	lsls	r3, r3, #2
 802229e:	58d3      	ldr	r3, [r2, r3]
 80222a0:	689b      	ldr	r3, [r3, #8]
 80222a2:	250f      	movs	r5, #15
 80222a4:	197c      	adds	r4, r7, r5
 80222a6:	6839      	ldr	r1, [r7, #0]
 80222a8:	687a      	ldr	r2, [r7, #4]
 80222aa:	0010      	movs	r0, r2
 80222ac:	4798      	blx	r3
 80222ae:	0003      	movs	r3, r0
 80222b0:	7023      	strb	r3, [r4, #0]

        return ret;
 80222b2:	197b      	adds	r3, r7, r5
 80222b4:	781b      	ldrb	r3, [r3, #0]
 80222b6:	e174      	b.n	80225a2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80222b8:	683b      	ldr	r3, [r7, #0]
 80222ba:	785b      	ldrb	r3, [r3, #1]
 80222bc:	2b03      	cmp	r3, #3
 80222be:	d007      	beq.n	80222d0 <USBD_StdEPReq+0x92>
 80222c0:	dd00      	ble.n	80222c4 <USBD_StdEPReq+0x86>
 80222c2:	e15c      	b.n	802257e <USBD_StdEPReq+0x340>
 80222c4:	2b00      	cmp	r3, #0
 80222c6:	d100      	bne.n	80222ca <USBD_StdEPReq+0x8c>
 80222c8:	e092      	b.n	80223f0 <USBD_StdEPReq+0x1b2>
 80222ca:	2b01      	cmp	r3, #1
 80222cc:	d04b      	beq.n	8022366 <USBD_StdEPReq+0x128>
 80222ce:	e156      	b.n	802257e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80222d0:	687a      	ldr	r2, [r7, #4]
 80222d2:	23a7      	movs	r3, #167	@ 0xa7
 80222d4:	009b      	lsls	r3, r3, #2
 80222d6:	5cd3      	ldrb	r3, [r2, r3]
 80222d8:	2b02      	cmp	r3, #2
 80222da:	d002      	beq.n	80222e2 <USBD_StdEPReq+0xa4>
 80222dc:	2b03      	cmp	r3, #3
 80222de:	d01d      	beq.n	802231c <USBD_StdEPReq+0xde>
 80222e0:	e039      	b.n	8022356 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80222e2:	220e      	movs	r2, #14
 80222e4:	18bb      	adds	r3, r7, r2
 80222e6:	781b      	ldrb	r3, [r3, #0]
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d010      	beq.n	802230e <USBD_StdEPReq+0xd0>
 80222ec:	18bb      	adds	r3, r7, r2
 80222ee:	781b      	ldrb	r3, [r3, #0]
 80222f0:	2b80      	cmp	r3, #128	@ 0x80
 80222f2:	d00c      	beq.n	802230e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80222f4:	18bb      	adds	r3, r7, r2
 80222f6:	781a      	ldrb	r2, [r3, #0]
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	0011      	movs	r1, r2
 80222fc:	0018      	movs	r0, r3
 80222fe:	f001 fa1c 	bl	802373a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	2180      	movs	r1, #128	@ 0x80
 8022306:	0018      	movs	r0, r3
 8022308:	f001 fa17 	bl	802373a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802230c:	e02a      	b.n	8022364 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 802230e:	683a      	ldr	r2, [r7, #0]
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	0011      	movs	r1, r2
 8022314:	0018      	movs	r0, r3
 8022316:	f000 fcdc 	bl	8022cd2 <USBD_CtlError>
              break;
 802231a:	e023      	b.n	8022364 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802231c:	683b      	ldr	r3, [r7, #0]
 802231e:	885b      	ldrh	r3, [r3, #2]
 8022320:	2b00      	cmp	r3, #0
 8022322:	d113      	bne.n	802234c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8022324:	220e      	movs	r2, #14
 8022326:	18bb      	adds	r3, r7, r2
 8022328:	781b      	ldrb	r3, [r3, #0]
 802232a:	2b00      	cmp	r3, #0
 802232c:	d00e      	beq.n	802234c <USBD_StdEPReq+0x10e>
 802232e:	18bb      	adds	r3, r7, r2
 8022330:	781b      	ldrb	r3, [r3, #0]
 8022332:	2b80      	cmp	r3, #128	@ 0x80
 8022334:	d00a      	beq.n	802234c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8022336:	683b      	ldr	r3, [r7, #0]
 8022338:	88db      	ldrh	r3, [r3, #6]
 802233a:	2b00      	cmp	r3, #0
 802233c:	d106      	bne.n	802234c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 802233e:	18bb      	adds	r3, r7, r2
 8022340:	781a      	ldrb	r2, [r3, #0]
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	0011      	movs	r1, r2
 8022346:	0018      	movs	r0, r3
 8022348:	f001 f9f7 	bl	802373a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	0018      	movs	r0, r3
 8022350:	f000 fda7 	bl	8022ea2 <USBD_CtlSendStatus>

              break;
 8022354:	e006      	b.n	8022364 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8022356:	683a      	ldr	r2, [r7, #0]
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	0011      	movs	r1, r2
 802235c:	0018      	movs	r0, r3
 802235e:	f000 fcb8 	bl	8022cd2 <USBD_CtlError>
              break;
 8022362:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022364:	e112      	b.n	802258c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8022366:	687a      	ldr	r2, [r7, #4]
 8022368:	23a7      	movs	r3, #167	@ 0xa7
 802236a:	009b      	lsls	r3, r3, #2
 802236c:	5cd3      	ldrb	r3, [r2, r3]
 802236e:	2b02      	cmp	r3, #2
 8022370:	d002      	beq.n	8022378 <USBD_StdEPReq+0x13a>
 8022372:	2b03      	cmp	r3, #3
 8022374:	d01d      	beq.n	80223b2 <USBD_StdEPReq+0x174>
 8022376:	e032      	b.n	80223de <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022378:	220e      	movs	r2, #14
 802237a:	18bb      	adds	r3, r7, r2
 802237c:	781b      	ldrb	r3, [r3, #0]
 802237e:	2b00      	cmp	r3, #0
 8022380:	d010      	beq.n	80223a4 <USBD_StdEPReq+0x166>
 8022382:	18bb      	adds	r3, r7, r2
 8022384:	781b      	ldrb	r3, [r3, #0]
 8022386:	2b80      	cmp	r3, #128	@ 0x80
 8022388:	d00c      	beq.n	80223a4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 802238a:	18bb      	adds	r3, r7, r2
 802238c:	781a      	ldrb	r2, [r3, #0]
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	0011      	movs	r1, r2
 8022392:	0018      	movs	r0, r3
 8022394:	f001 f9d1 	bl	802373a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	2180      	movs	r1, #128	@ 0x80
 802239c:	0018      	movs	r0, r3
 802239e:	f001 f9cc 	bl	802373a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80223a2:	e024      	b.n	80223ee <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80223a4:	683a      	ldr	r2, [r7, #0]
 80223a6:	687b      	ldr	r3, [r7, #4]
 80223a8:	0011      	movs	r1, r2
 80223aa:	0018      	movs	r0, r3
 80223ac:	f000 fc91 	bl	8022cd2 <USBD_CtlError>
              break;
 80223b0:	e01d      	b.n	80223ee <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80223b2:	683b      	ldr	r3, [r7, #0]
 80223b4:	885b      	ldrh	r3, [r3, #2]
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d118      	bne.n	80223ec <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80223ba:	210e      	movs	r1, #14
 80223bc:	187b      	adds	r3, r7, r1
 80223be:	781b      	ldrb	r3, [r3, #0]
 80223c0:	227f      	movs	r2, #127	@ 0x7f
 80223c2:	4013      	ands	r3, r2
 80223c4:	d006      	beq.n	80223d4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80223c6:	187b      	adds	r3, r7, r1
 80223c8:	781a      	ldrb	r2, [r3, #0]
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	0011      	movs	r1, r2
 80223ce:	0018      	movs	r0, r3
 80223d0:	f001 f9de 	bl	8023790 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	0018      	movs	r0, r3
 80223d8:	f000 fd63 	bl	8022ea2 <USBD_CtlSendStatus>
              }
              break;
 80223dc:	e006      	b.n	80223ec <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80223de:	683a      	ldr	r2, [r7, #0]
 80223e0:	687b      	ldr	r3, [r7, #4]
 80223e2:	0011      	movs	r1, r2
 80223e4:	0018      	movs	r0, r3
 80223e6:	f000 fc74 	bl	8022cd2 <USBD_CtlError>
              break;
 80223ea:	e000      	b.n	80223ee <USBD_StdEPReq+0x1b0>
              break;
 80223ec:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80223ee:	e0cd      	b.n	802258c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80223f0:	687a      	ldr	r2, [r7, #4]
 80223f2:	23a7      	movs	r3, #167	@ 0xa7
 80223f4:	009b      	lsls	r3, r3, #2
 80223f6:	5cd3      	ldrb	r3, [r2, r3]
 80223f8:	2b02      	cmp	r3, #2
 80223fa:	d002      	beq.n	8022402 <USBD_StdEPReq+0x1c4>
 80223fc:	2b03      	cmp	r3, #3
 80223fe:	d03c      	beq.n	802247a <USBD_StdEPReq+0x23c>
 8022400:	e0b5      	b.n	802256e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022402:	220e      	movs	r2, #14
 8022404:	18bb      	adds	r3, r7, r2
 8022406:	781b      	ldrb	r3, [r3, #0]
 8022408:	2b00      	cmp	r3, #0
 802240a:	d00a      	beq.n	8022422 <USBD_StdEPReq+0x1e4>
 802240c:	18bb      	adds	r3, r7, r2
 802240e:	781b      	ldrb	r3, [r3, #0]
 8022410:	2b80      	cmp	r3, #128	@ 0x80
 8022412:	d006      	beq.n	8022422 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022414:	683a      	ldr	r2, [r7, #0]
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	0011      	movs	r1, r2
 802241a:	0018      	movs	r0, r3
 802241c:	f000 fc59 	bl	8022cd2 <USBD_CtlError>
                break;
 8022420:	e0ac      	b.n	802257c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022422:	220e      	movs	r2, #14
 8022424:	18bb      	adds	r3, r7, r2
 8022426:	781b      	ldrb	r3, [r3, #0]
 8022428:	b25b      	sxtb	r3, r3
 802242a:	2b00      	cmp	r3, #0
 802242c:	da0c      	bge.n	8022448 <USBD_StdEPReq+0x20a>
 802242e:	18bb      	adds	r3, r7, r2
 8022430:	781b      	ldrb	r3, [r3, #0]
 8022432:	227f      	movs	r2, #127	@ 0x7f
 8022434:	401a      	ands	r2, r3
 8022436:	0013      	movs	r3, r2
 8022438:	009b      	lsls	r3, r3, #2
 802243a:	189b      	adds	r3, r3, r2
 802243c:	009b      	lsls	r3, r3, #2
 802243e:	3310      	adds	r3, #16
 8022440:	687a      	ldr	r2, [r7, #4]
 8022442:	18d3      	adds	r3, r2, r3
 8022444:	3304      	adds	r3, #4
 8022446:	e00d      	b.n	8022464 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022448:	230e      	movs	r3, #14
 802244a:	18fb      	adds	r3, r7, r3
 802244c:	781b      	ldrb	r3, [r3, #0]
 802244e:	227f      	movs	r2, #127	@ 0x7f
 8022450:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022452:	0013      	movs	r3, r2
 8022454:	009b      	lsls	r3, r3, #2
 8022456:	189b      	adds	r3, r3, r2
 8022458:	009b      	lsls	r3, r3, #2
 802245a:	3351      	adds	r3, #81	@ 0x51
 802245c:	33ff      	adds	r3, #255	@ 0xff
 802245e:	687a      	ldr	r2, [r7, #4]
 8022460:	18d3      	adds	r3, r2, r3
 8022462:	3304      	adds	r3, #4
 8022464:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8022466:	68bb      	ldr	r3, [r7, #8]
 8022468:	2200      	movs	r2, #0
 802246a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 802246c:	68b9      	ldr	r1, [r7, #8]
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	2202      	movs	r2, #2
 8022472:	0018      	movs	r0, r3
 8022474:	f000 fcab 	bl	8022dce <USBD_CtlSendData>
              break;
 8022478:	e080      	b.n	802257c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802247a:	220e      	movs	r2, #14
 802247c:	18bb      	adds	r3, r7, r2
 802247e:	781b      	ldrb	r3, [r3, #0]
 8022480:	b25b      	sxtb	r3, r3
 8022482:	2b00      	cmp	r3, #0
 8022484:	da14      	bge.n	80224b0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8022486:	18bb      	adds	r3, r7, r2
 8022488:	781b      	ldrb	r3, [r3, #0]
 802248a:	220f      	movs	r2, #15
 802248c:	401a      	ands	r2, r3
 802248e:	6879      	ldr	r1, [r7, #4]
 8022490:	0013      	movs	r3, r2
 8022492:	009b      	lsls	r3, r3, #2
 8022494:	189b      	adds	r3, r3, r2
 8022496:	009b      	lsls	r3, r3, #2
 8022498:	18cb      	adds	r3, r1, r3
 802249a:	3318      	adds	r3, #24
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d11e      	bne.n	80224e0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80224a2:	683a      	ldr	r2, [r7, #0]
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	0011      	movs	r1, r2
 80224a8:	0018      	movs	r0, r3
 80224aa:	f000 fc12 	bl	8022cd2 <USBD_CtlError>
                  break;
 80224ae:	e065      	b.n	802257c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80224b0:	230e      	movs	r3, #14
 80224b2:	18fb      	adds	r3, r7, r3
 80224b4:	781b      	ldrb	r3, [r3, #0]
 80224b6:	220f      	movs	r2, #15
 80224b8:	401a      	ands	r2, r3
 80224ba:	6878      	ldr	r0, [r7, #4]
 80224bc:	23ac      	movs	r3, #172	@ 0xac
 80224be:	0059      	lsls	r1, r3, #1
 80224c0:	0013      	movs	r3, r2
 80224c2:	009b      	lsls	r3, r3, #2
 80224c4:	189b      	adds	r3, r3, r2
 80224c6:	009b      	lsls	r3, r3, #2
 80224c8:	18c3      	adds	r3, r0, r3
 80224ca:	185b      	adds	r3, r3, r1
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	2b00      	cmp	r3, #0
 80224d0:	d106      	bne.n	80224e0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80224d2:	683a      	ldr	r2, [r7, #0]
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	0011      	movs	r1, r2
 80224d8:	0018      	movs	r0, r3
 80224da:	f000 fbfa 	bl	8022cd2 <USBD_CtlError>
                  break;
 80224de:	e04d      	b.n	802257c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80224e0:	220e      	movs	r2, #14
 80224e2:	18bb      	adds	r3, r7, r2
 80224e4:	781b      	ldrb	r3, [r3, #0]
 80224e6:	b25b      	sxtb	r3, r3
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	da0c      	bge.n	8022506 <USBD_StdEPReq+0x2c8>
 80224ec:	18bb      	adds	r3, r7, r2
 80224ee:	781b      	ldrb	r3, [r3, #0]
 80224f0:	227f      	movs	r2, #127	@ 0x7f
 80224f2:	401a      	ands	r2, r3
 80224f4:	0013      	movs	r3, r2
 80224f6:	009b      	lsls	r3, r3, #2
 80224f8:	189b      	adds	r3, r3, r2
 80224fa:	009b      	lsls	r3, r3, #2
 80224fc:	3310      	adds	r3, #16
 80224fe:	687a      	ldr	r2, [r7, #4]
 8022500:	18d3      	adds	r3, r2, r3
 8022502:	3304      	adds	r3, #4
 8022504:	e00d      	b.n	8022522 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022506:	230e      	movs	r3, #14
 8022508:	18fb      	adds	r3, r7, r3
 802250a:	781b      	ldrb	r3, [r3, #0]
 802250c:	227f      	movs	r2, #127	@ 0x7f
 802250e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022510:	0013      	movs	r3, r2
 8022512:	009b      	lsls	r3, r3, #2
 8022514:	189b      	adds	r3, r3, r2
 8022516:	009b      	lsls	r3, r3, #2
 8022518:	3351      	adds	r3, #81	@ 0x51
 802251a:	33ff      	adds	r3, #255	@ 0xff
 802251c:	687a      	ldr	r2, [r7, #4]
 802251e:	18d3      	adds	r3, r2, r3
 8022520:	3304      	adds	r3, #4
 8022522:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022524:	220e      	movs	r2, #14
 8022526:	18bb      	adds	r3, r7, r2
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	2b00      	cmp	r3, #0
 802252c:	d003      	beq.n	8022536 <USBD_StdEPReq+0x2f8>
 802252e:	18bb      	adds	r3, r7, r2
 8022530:	781b      	ldrb	r3, [r3, #0]
 8022532:	2b80      	cmp	r3, #128	@ 0x80
 8022534:	d103      	bne.n	802253e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8022536:	68bb      	ldr	r3, [r7, #8]
 8022538:	2200      	movs	r2, #0
 802253a:	601a      	str	r2, [r3, #0]
 802253c:	e010      	b.n	8022560 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 802253e:	230e      	movs	r3, #14
 8022540:	18fb      	adds	r3, r7, r3
 8022542:	781a      	ldrb	r2, [r3, #0]
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	0011      	movs	r1, r2
 8022548:	0018      	movs	r0, r3
 802254a:	f001 f94c 	bl	80237e6 <USBD_LL_IsStallEP>
 802254e:	1e03      	subs	r3, r0, #0
 8022550:	d003      	beq.n	802255a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8022552:	68bb      	ldr	r3, [r7, #8]
 8022554:	2201      	movs	r2, #1
 8022556:	601a      	str	r2, [r3, #0]
 8022558:	e002      	b.n	8022560 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 802255a:	68bb      	ldr	r3, [r7, #8]
 802255c:	2200      	movs	r2, #0
 802255e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8022560:	68b9      	ldr	r1, [r7, #8]
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	2202      	movs	r2, #2
 8022566:	0018      	movs	r0, r3
 8022568:	f000 fc31 	bl	8022dce <USBD_CtlSendData>
              break;
 802256c:	e006      	b.n	802257c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 802256e:	683a      	ldr	r2, [r7, #0]
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	0011      	movs	r1, r2
 8022574:	0018      	movs	r0, r3
 8022576:	f000 fbac 	bl	8022cd2 <USBD_CtlError>
              break;
 802257a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 802257c:	e006      	b.n	802258c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 802257e:	683a      	ldr	r2, [r7, #0]
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	0011      	movs	r1, r2
 8022584:	0018      	movs	r0, r3
 8022586:	f000 fba4 	bl	8022cd2 <USBD_CtlError>
          break;
 802258a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 802258c:	e006      	b.n	802259c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 802258e:	683a      	ldr	r2, [r7, #0]
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	0011      	movs	r1, r2
 8022594:	0018      	movs	r0, r3
 8022596:	f000 fb9c 	bl	8022cd2 <USBD_CtlError>
      break;
 802259a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 802259c:	230f      	movs	r3, #15
 802259e:	18fb      	adds	r3, r7, r3
 80225a0:	781b      	ldrb	r3, [r3, #0]
}
 80225a2:	0018      	movs	r0, r3
 80225a4:	46bd      	mov	sp, r7
 80225a6:	b004      	add	sp, #16
 80225a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080225ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	b084      	sub	sp, #16
 80225b0:	af00      	add	r7, sp, #0
 80225b2:	6078      	str	r0, [r7, #4]
 80225b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80225b6:	2308      	movs	r3, #8
 80225b8:	18fb      	adds	r3, r7, r3
 80225ba:	2200      	movs	r2, #0
 80225bc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80225be:	2300      	movs	r3, #0
 80225c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80225c2:	230b      	movs	r3, #11
 80225c4:	18fb      	adds	r3, r7, r3
 80225c6:	2200      	movs	r2, #0
 80225c8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80225ca:	683b      	ldr	r3, [r7, #0]
 80225cc:	885b      	ldrh	r3, [r3, #2]
 80225ce:	0a1b      	lsrs	r3, r3, #8
 80225d0:	b29b      	uxth	r3, r3
 80225d2:	2b07      	cmp	r3, #7
 80225d4:	d900      	bls.n	80225d8 <USBD_GetDescriptor+0x2c>
 80225d6:	e159      	b.n	802288c <USBD_GetDescriptor+0x2e0>
 80225d8:	009a      	lsls	r2, r3, #2
 80225da:	4bcb      	ldr	r3, [pc, #812]	@ (8022908 <USBD_GetDescriptor+0x35c>)
 80225dc:	18d3      	adds	r3, r2, r3
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80225e2:	687a      	ldr	r2, [r7, #4]
 80225e4:	23ac      	movs	r3, #172	@ 0xac
 80225e6:	009b      	lsls	r3, r3, #2
 80225e8:	58d3      	ldr	r3, [r2, r3]
 80225ea:	681b      	ldr	r3, [r3, #0]
 80225ec:	687a      	ldr	r2, [r7, #4]
 80225ee:	7c12      	ldrb	r2, [r2, #16]
 80225f0:	2108      	movs	r1, #8
 80225f2:	1879      	adds	r1, r7, r1
 80225f4:	0010      	movs	r0, r2
 80225f6:	4798      	blx	r3
 80225f8:	0003      	movs	r3, r0
 80225fa:	60fb      	str	r3, [r7, #12]
      break;
 80225fc:	e153      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	7c1b      	ldrb	r3, [r3, #16]
 8022602:	2b00      	cmp	r3, #0
 8022604:	d10f      	bne.n	8022626 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8022606:	687a      	ldr	r2, [r7, #4]
 8022608:	23ad      	movs	r3, #173	@ 0xad
 802260a:	009b      	lsls	r3, r3, #2
 802260c:	58d3      	ldr	r3, [r2, r3]
 802260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022610:	2208      	movs	r2, #8
 8022612:	18ba      	adds	r2, r7, r2
 8022614:	0010      	movs	r0, r2
 8022616:	4798      	blx	r3
 8022618:	0003      	movs	r3, r0
 802261a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802261c:	68fb      	ldr	r3, [r7, #12]
 802261e:	3301      	adds	r3, #1
 8022620:	2202      	movs	r2, #2
 8022622:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022624:	e13f      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8022626:	687a      	ldr	r2, [r7, #4]
 8022628:	23ad      	movs	r3, #173	@ 0xad
 802262a:	009b      	lsls	r3, r3, #2
 802262c:	58d3      	ldr	r3, [r2, r3]
 802262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022630:	2208      	movs	r2, #8
 8022632:	18ba      	adds	r2, r7, r2
 8022634:	0010      	movs	r0, r2
 8022636:	4798      	blx	r3
 8022638:	0003      	movs	r3, r0
 802263a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802263c:	68fb      	ldr	r3, [r7, #12]
 802263e:	3301      	adds	r3, #1
 8022640:	2202      	movs	r2, #2
 8022642:	701a      	strb	r2, [r3, #0]
      break;
 8022644:	e12f      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8022646:	683b      	ldr	r3, [r7, #0]
 8022648:	885b      	ldrh	r3, [r3, #2]
 802264a:	b2db      	uxtb	r3, r3
 802264c:	2b05      	cmp	r3, #5
 802264e:	d900      	bls.n	8022652 <USBD_GetDescriptor+0xa6>
 8022650:	e0d0      	b.n	80227f4 <USBD_GetDescriptor+0x248>
 8022652:	009a      	lsls	r2, r3, #2
 8022654:	4bad      	ldr	r3, [pc, #692]	@ (802290c <USBD_GetDescriptor+0x360>)
 8022656:	18d3      	adds	r3, r2, r3
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802265c:	687a      	ldr	r2, [r7, #4]
 802265e:	23ac      	movs	r3, #172	@ 0xac
 8022660:	009b      	lsls	r3, r3, #2
 8022662:	58d3      	ldr	r3, [r2, r3]
 8022664:	685b      	ldr	r3, [r3, #4]
 8022666:	2b00      	cmp	r3, #0
 8022668:	d00d      	beq.n	8022686 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802266a:	687a      	ldr	r2, [r7, #4]
 802266c:	23ac      	movs	r3, #172	@ 0xac
 802266e:	009b      	lsls	r3, r3, #2
 8022670:	58d3      	ldr	r3, [r2, r3]
 8022672:	685b      	ldr	r3, [r3, #4]
 8022674:	687a      	ldr	r2, [r7, #4]
 8022676:	7c12      	ldrb	r2, [r2, #16]
 8022678:	2108      	movs	r1, #8
 802267a:	1879      	adds	r1, r7, r1
 802267c:	0010      	movs	r0, r2
 802267e:	4798      	blx	r3
 8022680:	0003      	movs	r3, r0
 8022682:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022684:	e0c3      	b.n	802280e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022686:	683a      	ldr	r2, [r7, #0]
 8022688:	687b      	ldr	r3, [r7, #4]
 802268a:	0011      	movs	r1, r2
 802268c:	0018      	movs	r0, r3
 802268e:	f000 fb20 	bl	8022cd2 <USBD_CtlError>
            err++;
 8022692:	210b      	movs	r1, #11
 8022694:	187b      	adds	r3, r7, r1
 8022696:	781a      	ldrb	r2, [r3, #0]
 8022698:	187b      	adds	r3, r7, r1
 802269a:	3201      	adds	r2, #1
 802269c:	701a      	strb	r2, [r3, #0]
          break;
 802269e:	e0b6      	b.n	802280e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80226a0:	687a      	ldr	r2, [r7, #4]
 80226a2:	23ac      	movs	r3, #172	@ 0xac
 80226a4:	009b      	lsls	r3, r3, #2
 80226a6:	58d3      	ldr	r3, [r2, r3]
 80226a8:	689b      	ldr	r3, [r3, #8]
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	d00d      	beq.n	80226ca <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80226ae:	687a      	ldr	r2, [r7, #4]
 80226b0:	23ac      	movs	r3, #172	@ 0xac
 80226b2:	009b      	lsls	r3, r3, #2
 80226b4:	58d3      	ldr	r3, [r2, r3]
 80226b6:	689b      	ldr	r3, [r3, #8]
 80226b8:	687a      	ldr	r2, [r7, #4]
 80226ba:	7c12      	ldrb	r2, [r2, #16]
 80226bc:	2108      	movs	r1, #8
 80226be:	1879      	adds	r1, r7, r1
 80226c0:	0010      	movs	r0, r2
 80226c2:	4798      	blx	r3
 80226c4:	0003      	movs	r3, r0
 80226c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80226c8:	e0a1      	b.n	802280e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80226ca:	683a      	ldr	r2, [r7, #0]
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	0011      	movs	r1, r2
 80226d0:	0018      	movs	r0, r3
 80226d2:	f000 fafe 	bl	8022cd2 <USBD_CtlError>
            err++;
 80226d6:	210b      	movs	r1, #11
 80226d8:	187b      	adds	r3, r7, r1
 80226da:	781a      	ldrb	r2, [r3, #0]
 80226dc:	187b      	adds	r3, r7, r1
 80226de:	3201      	adds	r2, #1
 80226e0:	701a      	strb	r2, [r3, #0]
          break;
 80226e2:	e094      	b.n	802280e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80226e4:	687a      	ldr	r2, [r7, #4]
 80226e6:	23ac      	movs	r3, #172	@ 0xac
 80226e8:	009b      	lsls	r3, r3, #2
 80226ea:	58d3      	ldr	r3, [r2, r3]
 80226ec:	68db      	ldr	r3, [r3, #12]
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	d00d      	beq.n	802270e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80226f2:	687a      	ldr	r2, [r7, #4]
 80226f4:	23ac      	movs	r3, #172	@ 0xac
 80226f6:	009b      	lsls	r3, r3, #2
 80226f8:	58d3      	ldr	r3, [r2, r3]
 80226fa:	68db      	ldr	r3, [r3, #12]
 80226fc:	687a      	ldr	r2, [r7, #4]
 80226fe:	7c12      	ldrb	r2, [r2, #16]
 8022700:	2108      	movs	r1, #8
 8022702:	1879      	adds	r1, r7, r1
 8022704:	0010      	movs	r0, r2
 8022706:	4798      	blx	r3
 8022708:	0003      	movs	r3, r0
 802270a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802270c:	e07f      	b.n	802280e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802270e:	683a      	ldr	r2, [r7, #0]
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	0011      	movs	r1, r2
 8022714:	0018      	movs	r0, r3
 8022716:	f000 fadc 	bl	8022cd2 <USBD_CtlError>
            err++;
 802271a:	210b      	movs	r1, #11
 802271c:	187b      	adds	r3, r7, r1
 802271e:	781a      	ldrb	r2, [r3, #0]
 8022720:	187b      	adds	r3, r7, r1
 8022722:	3201      	adds	r2, #1
 8022724:	701a      	strb	r2, [r3, #0]
          break;
 8022726:	e072      	b.n	802280e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8022728:	687a      	ldr	r2, [r7, #4]
 802272a:	23ac      	movs	r3, #172	@ 0xac
 802272c:	009b      	lsls	r3, r3, #2
 802272e:	58d3      	ldr	r3, [r2, r3]
 8022730:	691b      	ldr	r3, [r3, #16]
 8022732:	2b00      	cmp	r3, #0
 8022734:	d00d      	beq.n	8022752 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8022736:	687a      	ldr	r2, [r7, #4]
 8022738:	23ac      	movs	r3, #172	@ 0xac
 802273a:	009b      	lsls	r3, r3, #2
 802273c:	58d3      	ldr	r3, [r2, r3]
 802273e:	691b      	ldr	r3, [r3, #16]
 8022740:	687a      	ldr	r2, [r7, #4]
 8022742:	7c12      	ldrb	r2, [r2, #16]
 8022744:	2108      	movs	r1, #8
 8022746:	1879      	adds	r1, r7, r1
 8022748:	0010      	movs	r0, r2
 802274a:	4798      	blx	r3
 802274c:	0003      	movs	r3, r0
 802274e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022750:	e05d      	b.n	802280e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022752:	683a      	ldr	r2, [r7, #0]
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	0011      	movs	r1, r2
 8022758:	0018      	movs	r0, r3
 802275a:	f000 faba 	bl	8022cd2 <USBD_CtlError>
            err++;
 802275e:	210b      	movs	r1, #11
 8022760:	187b      	adds	r3, r7, r1
 8022762:	781a      	ldrb	r2, [r3, #0]
 8022764:	187b      	adds	r3, r7, r1
 8022766:	3201      	adds	r2, #1
 8022768:	701a      	strb	r2, [r3, #0]
          break;
 802276a:	e050      	b.n	802280e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802276c:	687a      	ldr	r2, [r7, #4]
 802276e:	23ac      	movs	r3, #172	@ 0xac
 8022770:	009b      	lsls	r3, r3, #2
 8022772:	58d3      	ldr	r3, [r2, r3]
 8022774:	695b      	ldr	r3, [r3, #20]
 8022776:	2b00      	cmp	r3, #0
 8022778:	d00d      	beq.n	8022796 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802277a:	687a      	ldr	r2, [r7, #4]
 802277c:	23ac      	movs	r3, #172	@ 0xac
 802277e:	009b      	lsls	r3, r3, #2
 8022780:	58d3      	ldr	r3, [r2, r3]
 8022782:	695b      	ldr	r3, [r3, #20]
 8022784:	687a      	ldr	r2, [r7, #4]
 8022786:	7c12      	ldrb	r2, [r2, #16]
 8022788:	2108      	movs	r1, #8
 802278a:	1879      	adds	r1, r7, r1
 802278c:	0010      	movs	r0, r2
 802278e:	4798      	blx	r3
 8022790:	0003      	movs	r3, r0
 8022792:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022794:	e03b      	b.n	802280e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022796:	683a      	ldr	r2, [r7, #0]
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	0011      	movs	r1, r2
 802279c:	0018      	movs	r0, r3
 802279e:	f000 fa98 	bl	8022cd2 <USBD_CtlError>
            err++;
 80227a2:	210b      	movs	r1, #11
 80227a4:	187b      	adds	r3, r7, r1
 80227a6:	781a      	ldrb	r2, [r3, #0]
 80227a8:	187b      	adds	r3, r7, r1
 80227aa:	3201      	adds	r2, #1
 80227ac:	701a      	strb	r2, [r3, #0]
          break;
 80227ae:	e02e      	b.n	802280e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80227b0:	687a      	ldr	r2, [r7, #4]
 80227b2:	23ac      	movs	r3, #172	@ 0xac
 80227b4:	009b      	lsls	r3, r3, #2
 80227b6:	58d3      	ldr	r3, [r2, r3]
 80227b8:	699b      	ldr	r3, [r3, #24]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d00d      	beq.n	80227da <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80227be:	687a      	ldr	r2, [r7, #4]
 80227c0:	23ac      	movs	r3, #172	@ 0xac
 80227c2:	009b      	lsls	r3, r3, #2
 80227c4:	58d3      	ldr	r3, [r2, r3]
 80227c6:	699b      	ldr	r3, [r3, #24]
 80227c8:	687a      	ldr	r2, [r7, #4]
 80227ca:	7c12      	ldrb	r2, [r2, #16]
 80227cc:	2108      	movs	r1, #8
 80227ce:	1879      	adds	r1, r7, r1
 80227d0:	0010      	movs	r0, r2
 80227d2:	4798      	blx	r3
 80227d4:	0003      	movs	r3, r0
 80227d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80227d8:	e019      	b.n	802280e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80227da:	683a      	ldr	r2, [r7, #0]
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	0011      	movs	r1, r2
 80227e0:	0018      	movs	r0, r3
 80227e2:	f000 fa76 	bl	8022cd2 <USBD_CtlError>
            err++;
 80227e6:	210b      	movs	r1, #11
 80227e8:	187b      	adds	r3, r7, r1
 80227ea:	781a      	ldrb	r2, [r3, #0]
 80227ec:	187b      	adds	r3, r7, r1
 80227ee:	3201      	adds	r2, #1
 80227f0:	701a      	strb	r2, [r3, #0]
          break;
 80227f2:	e00c      	b.n	802280e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80227f4:	683a      	ldr	r2, [r7, #0]
 80227f6:	687b      	ldr	r3, [r7, #4]
 80227f8:	0011      	movs	r1, r2
 80227fa:	0018      	movs	r0, r3
 80227fc:	f000 fa69 	bl	8022cd2 <USBD_CtlError>
          err++;
 8022800:	210b      	movs	r1, #11
 8022802:	187b      	adds	r3, r7, r1
 8022804:	781a      	ldrb	r2, [r3, #0]
 8022806:	187b      	adds	r3, r7, r1
 8022808:	3201      	adds	r2, #1
 802280a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 802280c:	e04b      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>
 802280e:	e04a      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	7c1b      	ldrb	r3, [r3, #16]
 8022814:	2b00      	cmp	r3, #0
 8022816:	d10b      	bne.n	8022830 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8022818:	687a      	ldr	r2, [r7, #4]
 802281a:	23ad      	movs	r3, #173	@ 0xad
 802281c:	009b      	lsls	r3, r3, #2
 802281e:	58d3      	ldr	r3, [r2, r3]
 8022820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022822:	2208      	movs	r2, #8
 8022824:	18ba      	adds	r2, r7, r2
 8022826:	0010      	movs	r0, r2
 8022828:	4798      	blx	r3
 802282a:	0003      	movs	r3, r0
 802282c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802282e:	e03a      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022830:	683a      	ldr	r2, [r7, #0]
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	0011      	movs	r1, r2
 8022836:	0018      	movs	r0, r3
 8022838:	f000 fa4b 	bl	8022cd2 <USBD_CtlError>
        err++;
 802283c:	210b      	movs	r1, #11
 802283e:	187b      	adds	r3, r7, r1
 8022840:	781a      	ldrb	r2, [r3, #0]
 8022842:	187b      	adds	r3, r7, r1
 8022844:	3201      	adds	r2, #1
 8022846:	701a      	strb	r2, [r3, #0]
      break;
 8022848:	e02d      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	7c1b      	ldrb	r3, [r3, #16]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d10f      	bne.n	8022872 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8022852:	687a      	ldr	r2, [r7, #4]
 8022854:	23ad      	movs	r3, #173	@ 0xad
 8022856:	009b      	lsls	r3, r3, #2
 8022858:	58d3      	ldr	r3, [r2, r3]
 802285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802285c:	2208      	movs	r2, #8
 802285e:	18ba      	adds	r2, r7, r2
 8022860:	0010      	movs	r0, r2
 8022862:	4798      	blx	r3
 8022864:	0003      	movs	r3, r0
 8022866:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8022868:	68fb      	ldr	r3, [r7, #12]
 802286a:	3301      	adds	r3, #1
 802286c:	2207      	movs	r2, #7
 802286e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022870:	e019      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022872:	683a      	ldr	r2, [r7, #0]
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	0011      	movs	r1, r2
 8022878:	0018      	movs	r0, r3
 802287a:	f000 fa2a 	bl	8022cd2 <USBD_CtlError>
        err++;
 802287e:	210b      	movs	r1, #11
 8022880:	187b      	adds	r3, r7, r1
 8022882:	781a      	ldrb	r2, [r3, #0]
 8022884:	187b      	adds	r3, r7, r1
 8022886:	3201      	adds	r2, #1
 8022888:	701a      	strb	r2, [r3, #0]
      break;
 802288a:	e00c      	b.n	80228a6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 802288c:	683a      	ldr	r2, [r7, #0]
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	0011      	movs	r1, r2
 8022892:	0018      	movs	r0, r3
 8022894:	f000 fa1d 	bl	8022cd2 <USBD_CtlError>
      err++;
 8022898:	210b      	movs	r1, #11
 802289a:	187b      	adds	r3, r7, r1
 802289c:	781a      	ldrb	r2, [r3, #0]
 802289e:	187b      	adds	r3, r7, r1
 80228a0:	3201      	adds	r2, #1
 80228a2:	701a      	strb	r2, [r3, #0]
      break;
 80228a4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80228a6:	230b      	movs	r3, #11
 80228a8:	18fb      	adds	r3, r7, r3
 80228aa:	781b      	ldrb	r3, [r3, #0]
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	d127      	bne.n	8022900 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80228b0:	2108      	movs	r1, #8
 80228b2:	187b      	adds	r3, r7, r1
 80228b4:	881b      	ldrh	r3, [r3, #0]
 80228b6:	2b00      	cmp	r3, #0
 80228b8:	d019      	beq.n	80228ee <USBD_GetDescriptor+0x342>
 80228ba:	683b      	ldr	r3, [r7, #0]
 80228bc:	88db      	ldrh	r3, [r3, #6]
 80228be:	2b00      	cmp	r3, #0
 80228c0:	d015      	beq.n	80228ee <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80228c2:	683b      	ldr	r3, [r7, #0]
 80228c4:	88da      	ldrh	r2, [r3, #6]
 80228c6:	187b      	adds	r3, r7, r1
 80228c8:	881b      	ldrh	r3, [r3, #0]
 80228ca:	1c18      	adds	r0, r3, #0
 80228cc:	1c11      	adds	r1, r2, #0
 80228ce:	b28a      	uxth	r2, r1
 80228d0:	b283      	uxth	r3, r0
 80228d2:	429a      	cmp	r2, r3
 80228d4:	d900      	bls.n	80228d8 <USBD_GetDescriptor+0x32c>
 80228d6:	1c01      	adds	r1, r0, #0
 80228d8:	b28a      	uxth	r2, r1
 80228da:	2108      	movs	r1, #8
 80228dc:	187b      	adds	r3, r7, r1
 80228de:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80228e0:	187b      	adds	r3, r7, r1
 80228e2:	881a      	ldrh	r2, [r3, #0]
 80228e4:	68f9      	ldr	r1, [r7, #12]
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	0018      	movs	r0, r3
 80228ea:	f000 fa70 	bl	8022dce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80228ee:	683b      	ldr	r3, [r7, #0]
 80228f0:	88db      	ldrh	r3, [r3, #6]
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	d105      	bne.n	8022902 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	0018      	movs	r0, r3
 80228fa:	f000 fad2 	bl	8022ea2 <USBD_CtlSendStatus>
 80228fe:	e000      	b.n	8022902 <USBD_GetDescriptor+0x356>
    return;
 8022900:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022902:	46bd      	mov	sp, r7
 8022904:	b004      	add	sp, #16
 8022906:	bd80      	pop	{r7, pc}
 8022908:	0802e5dc 	.word	0x0802e5dc
 802290c:	0802e5fc 	.word	0x0802e5fc

08022910 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022910:	b590      	push	{r4, r7, lr}
 8022912:	b085      	sub	sp, #20
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
 8022918:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802291a:	683b      	ldr	r3, [r7, #0]
 802291c:	889b      	ldrh	r3, [r3, #4]
 802291e:	2b00      	cmp	r3, #0
 8022920:	d13d      	bne.n	802299e <USBD_SetAddress+0x8e>
 8022922:	683b      	ldr	r3, [r7, #0]
 8022924:	88db      	ldrh	r3, [r3, #6]
 8022926:	2b00      	cmp	r3, #0
 8022928:	d139      	bne.n	802299e <USBD_SetAddress+0x8e>
 802292a:	683b      	ldr	r3, [r7, #0]
 802292c:	885b      	ldrh	r3, [r3, #2]
 802292e:	2b7f      	cmp	r3, #127	@ 0x7f
 8022930:	d835      	bhi.n	802299e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022932:	683b      	ldr	r3, [r7, #0]
 8022934:	885b      	ldrh	r3, [r3, #2]
 8022936:	b2da      	uxtb	r2, r3
 8022938:	230f      	movs	r3, #15
 802293a:	18fb      	adds	r3, r7, r3
 802293c:	217f      	movs	r1, #127	@ 0x7f
 802293e:	400a      	ands	r2, r1
 8022940:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022942:	687a      	ldr	r2, [r7, #4]
 8022944:	23a7      	movs	r3, #167	@ 0xa7
 8022946:	009b      	lsls	r3, r3, #2
 8022948:	5cd3      	ldrb	r3, [r2, r3]
 802294a:	2b03      	cmp	r3, #3
 802294c:	d106      	bne.n	802295c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 802294e:	683a      	ldr	r2, [r7, #0]
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	0011      	movs	r1, r2
 8022954:	0018      	movs	r0, r3
 8022956:	f000 f9bc 	bl	8022cd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802295a:	e027      	b.n	80229ac <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	240f      	movs	r4, #15
 8022960:	193a      	adds	r2, r7, r4
 8022962:	4914      	ldr	r1, [pc, #80]	@ (80229b4 <USBD_SetAddress+0xa4>)
 8022964:	7812      	ldrb	r2, [r2, #0]
 8022966:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022968:	193b      	adds	r3, r7, r4
 802296a:	781a      	ldrb	r2, [r3, #0]
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	0011      	movs	r1, r2
 8022970:	0018      	movs	r0, r3
 8022972:	f000 ff69 	bl	8023848 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	0018      	movs	r0, r3
 802297a:	f000 fa92 	bl	8022ea2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 802297e:	193b      	adds	r3, r7, r4
 8022980:	781b      	ldrb	r3, [r3, #0]
 8022982:	2b00      	cmp	r3, #0
 8022984:	d005      	beq.n	8022992 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022986:	687a      	ldr	r2, [r7, #4]
 8022988:	23a7      	movs	r3, #167	@ 0xa7
 802298a:	009b      	lsls	r3, r3, #2
 802298c:	2102      	movs	r1, #2
 802298e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022990:	e00c      	b.n	80229ac <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022992:	687a      	ldr	r2, [r7, #4]
 8022994:	23a7      	movs	r3, #167	@ 0xa7
 8022996:	009b      	lsls	r3, r3, #2
 8022998:	2101      	movs	r1, #1
 802299a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802299c:	e006      	b.n	80229ac <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 802299e:	683a      	ldr	r2, [r7, #0]
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	0011      	movs	r1, r2
 80229a4:	0018      	movs	r0, r3
 80229a6:	f000 f994 	bl	8022cd2 <USBD_CtlError>
  }
}
 80229aa:	46c0      	nop			@ (mov r8, r8)
 80229ac:	46c0      	nop			@ (mov r8, r8)
 80229ae:	46bd      	mov	sp, r7
 80229b0:	b005      	add	sp, #20
 80229b2:	bd90      	pop	{r4, r7, pc}
 80229b4:	0000029e 	.word	0x0000029e

080229b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b082      	sub	sp, #8
 80229bc:	af00      	add	r7, sp, #0
 80229be:	6078      	str	r0, [r7, #4]
 80229c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80229c2:	683b      	ldr	r3, [r7, #0]
 80229c4:	885b      	ldrh	r3, [r3, #2]
 80229c6:	b2da      	uxtb	r2, r3
 80229c8:	4b4c      	ldr	r3, [pc, #304]	@ (8022afc <USBD_SetConfig+0x144>)
 80229ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80229cc:	4b4b      	ldr	r3, [pc, #300]	@ (8022afc <USBD_SetConfig+0x144>)
 80229ce:	781b      	ldrb	r3, [r3, #0]
 80229d0:	2b01      	cmp	r3, #1
 80229d2:	d906      	bls.n	80229e2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80229d4:	683a      	ldr	r2, [r7, #0]
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	0011      	movs	r1, r2
 80229da:	0018      	movs	r0, r3
 80229dc:	f000 f979 	bl	8022cd2 <USBD_CtlError>
 80229e0:	e088      	b.n	8022af4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80229e2:	687a      	ldr	r2, [r7, #4]
 80229e4:	23a7      	movs	r3, #167	@ 0xa7
 80229e6:	009b      	lsls	r3, r3, #2
 80229e8:	5cd3      	ldrb	r3, [r2, r3]
 80229ea:	2b02      	cmp	r3, #2
 80229ec:	d002      	beq.n	80229f4 <USBD_SetConfig+0x3c>
 80229ee:	2b03      	cmp	r3, #3
 80229f0:	d029      	beq.n	8022a46 <USBD_SetConfig+0x8e>
 80229f2:	e071      	b.n	8022ad8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80229f4:	4b41      	ldr	r3, [pc, #260]	@ (8022afc <USBD_SetConfig+0x144>)
 80229f6:	781b      	ldrb	r3, [r3, #0]
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	d01f      	beq.n	8022a3c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80229fc:	4b3f      	ldr	r3, [pc, #252]	@ (8022afc <USBD_SetConfig+0x144>)
 80229fe:	781b      	ldrb	r3, [r3, #0]
 8022a00:	001a      	movs	r2, r3
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022a06:	687a      	ldr	r2, [r7, #4]
 8022a08:	23a7      	movs	r3, #167	@ 0xa7
 8022a0a:	009b      	lsls	r3, r3, #2
 8022a0c:	2103      	movs	r1, #3
 8022a0e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022a10:	4b3a      	ldr	r3, [pc, #232]	@ (8022afc <USBD_SetConfig+0x144>)
 8022a12:	781a      	ldrb	r2, [r3, #0]
 8022a14:	687b      	ldr	r3, [r7, #4]
 8022a16:	0011      	movs	r1, r2
 8022a18:	0018      	movs	r0, r3
 8022a1a:	f7ff f8c6 	bl	8021baa <USBD_SetClassConfig>
 8022a1e:	0003      	movs	r3, r0
 8022a20:	2b02      	cmp	r3, #2
 8022a22:	d106      	bne.n	8022a32 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022a24:	683a      	ldr	r2, [r7, #0]
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	0011      	movs	r1, r2
 8022a2a:	0018      	movs	r0, r3
 8022a2c:	f000 f951 	bl	8022cd2 <USBD_CtlError>
            return;
 8022a30:	e060      	b.n	8022af4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	0018      	movs	r0, r3
 8022a36:	f000 fa34 	bl	8022ea2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022a3a:	e05b      	b.n	8022af4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022a3c:	687b      	ldr	r3, [r7, #4]
 8022a3e:	0018      	movs	r0, r3
 8022a40:	f000 fa2f 	bl	8022ea2 <USBD_CtlSendStatus>
        break;
 8022a44:	e056      	b.n	8022af4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8022a46:	4b2d      	ldr	r3, [pc, #180]	@ (8022afc <USBD_SetConfig+0x144>)
 8022a48:	781b      	ldrb	r3, [r3, #0]
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d115      	bne.n	8022a7a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022a4e:	687a      	ldr	r2, [r7, #4]
 8022a50:	23a7      	movs	r3, #167	@ 0xa7
 8022a52:	009b      	lsls	r3, r3, #2
 8022a54:	2102      	movs	r1, #2
 8022a56:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022a58:	4b28      	ldr	r3, [pc, #160]	@ (8022afc <USBD_SetConfig+0x144>)
 8022a5a:	781b      	ldrb	r3, [r3, #0]
 8022a5c:	001a      	movs	r2, r3
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022a62:	4b26      	ldr	r3, [pc, #152]	@ (8022afc <USBD_SetConfig+0x144>)
 8022a64:	781a      	ldrb	r2, [r3, #0]
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	0011      	movs	r1, r2
 8022a6a:	0018      	movs	r0, r3
 8022a6c:	f7ff f8c4 	bl	8021bf8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	0018      	movs	r0, r3
 8022a74:	f000 fa15 	bl	8022ea2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022a78:	e03c      	b.n	8022af4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022a7a:	4b20      	ldr	r3, [pc, #128]	@ (8022afc <USBD_SetConfig+0x144>)
 8022a7c:	781b      	ldrb	r3, [r3, #0]
 8022a7e:	001a      	movs	r2, r3
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	685b      	ldr	r3, [r3, #4]
 8022a84:	429a      	cmp	r2, r3
 8022a86:	d022      	beq.n	8022ace <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	685b      	ldr	r3, [r3, #4]
 8022a8c:	b2da      	uxtb	r2, r3
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	0011      	movs	r1, r2
 8022a92:	0018      	movs	r0, r3
 8022a94:	f7ff f8b0 	bl	8021bf8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022a98:	4b18      	ldr	r3, [pc, #96]	@ (8022afc <USBD_SetConfig+0x144>)
 8022a9a:	781b      	ldrb	r3, [r3, #0]
 8022a9c:	001a      	movs	r2, r3
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022aa2:	4b16      	ldr	r3, [pc, #88]	@ (8022afc <USBD_SetConfig+0x144>)
 8022aa4:	781a      	ldrb	r2, [r3, #0]
 8022aa6:	687b      	ldr	r3, [r7, #4]
 8022aa8:	0011      	movs	r1, r2
 8022aaa:	0018      	movs	r0, r3
 8022aac:	f7ff f87d 	bl	8021baa <USBD_SetClassConfig>
 8022ab0:	0003      	movs	r3, r0
 8022ab2:	2b02      	cmp	r3, #2
 8022ab4:	d106      	bne.n	8022ac4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022ab6:	683a      	ldr	r2, [r7, #0]
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	0011      	movs	r1, r2
 8022abc:	0018      	movs	r0, r3
 8022abe:	f000 f908 	bl	8022cd2 <USBD_CtlError>
            return;
 8022ac2:	e017      	b.n	8022af4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	0018      	movs	r0, r3
 8022ac8:	f000 f9eb 	bl	8022ea2 <USBD_CtlSendStatus>
        break;
 8022acc:	e012      	b.n	8022af4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	0018      	movs	r0, r3
 8022ad2:	f000 f9e6 	bl	8022ea2 <USBD_CtlSendStatus>
        break;
 8022ad6:	e00d      	b.n	8022af4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022ad8:	683a      	ldr	r2, [r7, #0]
 8022ada:	687b      	ldr	r3, [r7, #4]
 8022adc:	0011      	movs	r1, r2
 8022ade:	0018      	movs	r0, r3
 8022ae0:	f000 f8f7 	bl	8022cd2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022ae4:	4b05      	ldr	r3, [pc, #20]	@ (8022afc <USBD_SetConfig+0x144>)
 8022ae6:	781a      	ldrb	r2, [r3, #0]
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	0011      	movs	r1, r2
 8022aec:	0018      	movs	r0, r3
 8022aee:	f7ff f883 	bl	8021bf8 <USBD_ClrClassConfig>
        break;
 8022af2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022af4:	46bd      	mov	sp, r7
 8022af6:	b002      	add	sp, #8
 8022af8:	bd80      	pop	{r7, pc}
 8022afa:	46c0      	nop			@ (mov r8, r8)
 8022afc:	20002534 	.word	0x20002534

08022b00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022b00:	b580      	push	{r7, lr}
 8022b02:	b082      	sub	sp, #8
 8022b04:	af00      	add	r7, sp, #0
 8022b06:	6078      	str	r0, [r7, #4]
 8022b08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022b0a:	683b      	ldr	r3, [r7, #0]
 8022b0c:	88db      	ldrh	r3, [r3, #6]
 8022b0e:	2b01      	cmp	r3, #1
 8022b10:	d006      	beq.n	8022b20 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022b12:	683a      	ldr	r2, [r7, #0]
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	0011      	movs	r1, r2
 8022b18:	0018      	movs	r0, r3
 8022b1a:	f000 f8da 	bl	8022cd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022b1e:	e026      	b.n	8022b6e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022b20:	687a      	ldr	r2, [r7, #4]
 8022b22:	23a7      	movs	r3, #167	@ 0xa7
 8022b24:	009b      	lsls	r3, r3, #2
 8022b26:	5cd3      	ldrb	r3, [r2, r3]
 8022b28:	2b02      	cmp	r3, #2
 8022b2a:	dc02      	bgt.n	8022b32 <USBD_GetConfig+0x32>
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	dc03      	bgt.n	8022b38 <USBD_GetConfig+0x38>
 8022b30:	e016      	b.n	8022b60 <USBD_GetConfig+0x60>
 8022b32:	2b03      	cmp	r3, #3
 8022b34:	d00c      	beq.n	8022b50 <USBD_GetConfig+0x50>
 8022b36:	e013      	b.n	8022b60 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	2200      	movs	r2, #0
 8022b3c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022b3e:	687b      	ldr	r3, [r7, #4]
 8022b40:	3308      	adds	r3, #8
 8022b42:	0019      	movs	r1, r3
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	2201      	movs	r2, #1
 8022b48:	0018      	movs	r0, r3
 8022b4a:	f000 f940 	bl	8022dce <USBD_CtlSendData>
        break;
 8022b4e:	e00e      	b.n	8022b6e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022b50:	687b      	ldr	r3, [r7, #4]
 8022b52:	1d19      	adds	r1, r3, #4
 8022b54:	687b      	ldr	r3, [r7, #4]
 8022b56:	2201      	movs	r2, #1
 8022b58:	0018      	movs	r0, r3
 8022b5a:	f000 f938 	bl	8022dce <USBD_CtlSendData>
        break;
 8022b5e:	e006      	b.n	8022b6e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022b60:	683a      	ldr	r2, [r7, #0]
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	0011      	movs	r1, r2
 8022b66:	0018      	movs	r0, r3
 8022b68:	f000 f8b3 	bl	8022cd2 <USBD_CtlError>
        break;
 8022b6c:	46c0      	nop			@ (mov r8, r8)
}
 8022b6e:	46c0      	nop			@ (mov r8, r8)
 8022b70:	46bd      	mov	sp, r7
 8022b72:	b002      	add	sp, #8
 8022b74:	bd80      	pop	{r7, pc}

08022b76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022b76:	b580      	push	{r7, lr}
 8022b78:	b082      	sub	sp, #8
 8022b7a:	af00      	add	r7, sp, #0
 8022b7c:	6078      	str	r0, [r7, #4]
 8022b7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022b80:	687a      	ldr	r2, [r7, #4]
 8022b82:	23a7      	movs	r3, #167	@ 0xa7
 8022b84:	009b      	lsls	r3, r3, #2
 8022b86:	5cd3      	ldrb	r3, [r2, r3]
 8022b88:	3b01      	subs	r3, #1
 8022b8a:	2b02      	cmp	r3, #2
 8022b8c:	d822      	bhi.n	8022bd4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022b8e:	683b      	ldr	r3, [r7, #0]
 8022b90:	88db      	ldrh	r3, [r3, #6]
 8022b92:	2b02      	cmp	r3, #2
 8022b94:	d006      	beq.n	8022ba4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022b96:	683a      	ldr	r2, [r7, #0]
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	0011      	movs	r1, r2
 8022b9c:	0018      	movs	r0, r3
 8022b9e:	f000 f898 	bl	8022cd2 <USBD_CtlError>
        break;
 8022ba2:	e01e      	b.n	8022be2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	2201      	movs	r2, #1
 8022ba8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022baa:	687a      	ldr	r2, [r7, #4]
 8022bac:	23a9      	movs	r3, #169	@ 0xa9
 8022bae:	009b      	lsls	r3, r3, #2
 8022bb0:	58d3      	ldr	r3, [r2, r3]
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	d005      	beq.n	8022bc2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	68db      	ldr	r3, [r3, #12]
 8022bba:	2202      	movs	r2, #2
 8022bbc:	431a      	orrs	r2, r3
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022bc2:	687b      	ldr	r3, [r7, #4]
 8022bc4:	330c      	adds	r3, #12
 8022bc6:	0019      	movs	r1, r3
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	2202      	movs	r2, #2
 8022bcc:	0018      	movs	r0, r3
 8022bce:	f000 f8fe 	bl	8022dce <USBD_CtlSendData>
      break;
 8022bd2:	e006      	b.n	8022be2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022bd4:	683a      	ldr	r2, [r7, #0]
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	0011      	movs	r1, r2
 8022bda:	0018      	movs	r0, r3
 8022bdc:	f000 f879 	bl	8022cd2 <USBD_CtlError>
      break;
 8022be0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022be2:	46c0      	nop			@ (mov r8, r8)
 8022be4:	46bd      	mov	sp, r7
 8022be6:	b002      	add	sp, #8
 8022be8:	bd80      	pop	{r7, pc}

08022bea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022bea:	b580      	push	{r7, lr}
 8022bec:	b082      	sub	sp, #8
 8022bee:	af00      	add	r7, sp, #0
 8022bf0:	6078      	str	r0, [r7, #4]
 8022bf2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022bf4:	683b      	ldr	r3, [r7, #0]
 8022bf6:	885b      	ldrh	r3, [r3, #2]
 8022bf8:	2b01      	cmp	r3, #1
 8022bfa:	d108      	bne.n	8022c0e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022bfc:	687a      	ldr	r2, [r7, #4]
 8022bfe:	23a9      	movs	r3, #169	@ 0xa9
 8022c00:	009b      	lsls	r3, r3, #2
 8022c02:	2101      	movs	r1, #1
 8022c04:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	0018      	movs	r0, r3
 8022c0a:	f000 f94a 	bl	8022ea2 <USBD_CtlSendStatus>
  }
}
 8022c0e:	46c0      	nop			@ (mov r8, r8)
 8022c10:	46bd      	mov	sp, r7
 8022c12:	b002      	add	sp, #8
 8022c14:	bd80      	pop	{r7, pc}

08022c16 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022c16:	b580      	push	{r7, lr}
 8022c18:	b082      	sub	sp, #8
 8022c1a:	af00      	add	r7, sp, #0
 8022c1c:	6078      	str	r0, [r7, #4]
 8022c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022c20:	687a      	ldr	r2, [r7, #4]
 8022c22:	23a7      	movs	r3, #167	@ 0xa7
 8022c24:	009b      	lsls	r3, r3, #2
 8022c26:	5cd3      	ldrb	r3, [r2, r3]
 8022c28:	3b01      	subs	r3, #1
 8022c2a:	2b02      	cmp	r3, #2
 8022c2c:	d80d      	bhi.n	8022c4a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022c2e:	683b      	ldr	r3, [r7, #0]
 8022c30:	885b      	ldrh	r3, [r3, #2]
 8022c32:	2b01      	cmp	r3, #1
 8022c34:	d110      	bne.n	8022c58 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022c36:	687a      	ldr	r2, [r7, #4]
 8022c38:	23a9      	movs	r3, #169	@ 0xa9
 8022c3a:	009b      	lsls	r3, r3, #2
 8022c3c:	2100      	movs	r1, #0
 8022c3e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	0018      	movs	r0, r3
 8022c44:	f000 f92d 	bl	8022ea2 <USBD_CtlSendStatus>
      }
      break;
 8022c48:	e006      	b.n	8022c58 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022c4a:	683a      	ldr	r2, [r7, #0]
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	0011      	movs	r1, r2
 8022c50:	0018      	movs	r0, r3
 8022c52:	f000 f83e 	bl	8022cd2 <USBD_CtlError>
      break;
 8022c56:	e000      	b.n	8022c5a <USBD_ClrFeature+0x44>
      break;
 8022c58:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022c5a:	46c0      	nop			@ (mov r8, r8)
 8022c5c:	46bd      	mov	sp, r7
 8022c5e:	b002      	add	sp, #8
 8022c60:	bd80      	pop	{r7, pc}

08022c62 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022c62:	b580      	push	{r7, lr}
 8022c64:	b082      	sub	sp, #8
 8022c66:	af00      	add	r7, sp, #0
 8022c68:	6078      	str	r0, [r7, #4]
 8022c6a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022c6c:	683b      	ldr	r3, [r7, #0]
 8022c6e:	781a      	ldrb	r2, [r3, #0]
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022c74:	683b      	ldr	r3, [r7, #0]
 8022c76:	785a      	ldrb	r2, [r3, #1]
 8022c78:	687b      	ldr	r3, [r7, #4]
 8022c7a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022c7c:	683b      	ldr	r3, [r7, #0]
 8022c7e:	3302      	adds	r3, #2
 8022c80:	781b      	ldrb	r3, [r3, #0]
 8022c82:	001a      	movs	r2, r3
 8022c84:	683b      	ldr	r3, [r7, #0]
 8022c86:	3303      	adds	r3, #3
 8022c88:	781b      	ldrb	r3, [r3, #0]
 8022c8a:	021b      	lsls	r3, r3, #8
 8022c8c:	b29b      	uxth	r3, r3
 8022c8e:	18d3      	adds	r3, r2, r3
 8022c90:	b29a      	uxth	r2, r3
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022c96:	683b      	ldr	r3, [r7, #0]
 8022c98:	3304      	adds	r3, #4
 8022c9a:	781b      	ldrb	r3, [r3, #0]
 8022c9c:	001a      	movs	r2, r3
 8022c9e:	683b      	ldr	r3, [r7, #0]
 8022ca0:	3305      	adds	r3, #5
 8022ca2:	781b      	ldrb	r3, [r3, #0]
 8022ca4:	021b      	lsls	r3, r3, #8
 8022ca6:	b29b      	uxth	r3, r3
 8022ca8:	18d3      	adds	r3, r2, r3
 8022caa:	b29a      	uxth	r2, r3
 8022cac:	687b      	ldr	r3, [r7, #4]
 8022cae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022cb0:	683b      	ldr	r3, [r7, #0]
 8022cb2:	3306      	adds	r3, #6
 8022cb4:	781b      	ldrb	r3, [r3, #0]
 8022cb6:	001a      	movs	r2, r3
 8022cb8:	683b      	ldr	r3, [r7, #0]
 8022cba:	3307      	adds	r3, #7
 8022cbc:	781b      	ldrb	r3, [r3, #0]
 8022cbe:	021b      	lsls	r3, r3, #8
 8022cc0:	b29b      	uxth	r3, r3
 8022cc2:	18d3      	adds	r3, r2, r3
 8022cc4:	b29a      	uxth	r2, r3
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	80da      	strh	r2, [r3, #6]

}
 8022cca:	46c0      	nop			@ (mov r8, r8)
 8022ccc:	46bd      	mov	sp, r7
 8022cce:	b002      	add	sp, #8
 8022cd0:	bd80      	pop	{r7, pc}

08022cd2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022cd2:	b580      	push	{r7, lr}
 8022cd4:	b082      	sub	sp, #8
 8022cd6:	af00      	add	r7, sp, #0
 8022cd8:	6078      	str	r0, [r7, #4]
 8022cda:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	2180      	movs	r1, #128	@ 0x80
 8022ce0:	0018      	movs	r0, r3
 8022ce2:	f000 fd2a 	bl	802373a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022ce6:	687b      	ldr	r3, [r7, #4]
 8022ce8:	2100      	movs	r1, #0
 8022cea:	0018      	movs	r0, r3
 8022cec:	f000 fd25 	bl	802373a <USBD_LL_StallEP>
}
 8022cf0:	46c0      	nop			@ (mov r8, r8)
 8022cf2:	46bd      	mov	sp, r7
 8022cf4:	b002      	add	sp, #8
 8022cf6:	bd80      	pop	{r7, pc}

08022cf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022cf8:	b590      	push	{r4, r7, lr}
 8022cfa:	b087      	sub	sp, #28
 8022cfc:	af00      	add	r7, sp, #0
 8022cfe:	60f8      	str	r0, [r7, #12]
 8022d00:	60b9      	str	r1, [r7, #8]
 8022d02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022d04:	2417      	movs	r4, #23
 8022d06:	193b      	adds	r3, r7, r4
 8022d08:	2200      	movs	r2, #0
 8022d0a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022d0c:	68fb      	ldr	r3, [r7, #12]
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	d03c      	beq.n	8022d8c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	0018      	movs	r0, r3
 8022d16:	f000 f83d 	bl	8022d94 <USBD_GetLen>
 8022d1a:	0003      	movs	r3, r0
 8022d1c:	3301      	adds	r3, #1
 8022d1e:	b29b      	uxth	r3, r3
 8022d20:	18db      	adds	r3, r3, r3
 8022d22:	b29a      	uxth	r2, r3
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022d28:	193b      	adds	r3, r7, r4
 8022d2a:	781b      	ldrb	r3, [r3, #0]
 8022d2c:	193a      	adds	r2, r7, r4
 8022d2e:	1c59      	adds	r1, r3, #1
 8022d30:	7011      	strb	r1, [r2, #0]
 8022d32:	001a      	movs	r2, r3
 8022d34:	68bb      	ldr	r3, [r7, #8]
 8022d36:	189b      	adds	r3, r3, r2
 8022d38:	687a      	ldr	r2, [r7, #4]
 8022d3a:	7812      	ldrb	r2, [r2, #0]
 8022d3c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022d3e:	193b      	adds	r3, r7, r4
 8022d40:	781b      	ldrb	r3, [r3, #0]
 8022d42:	193a      	adds	r2, r7, r4
 8022d44:	1c59      	adds	r1, r3, #1
 8022d46:	7011      	strb	r1, [r2, #0]
 8022d48:	001a      	movs	r2, r3
 8022d4a:	68bb      	ldr	r3, [r7, #8]
 8022d4c:	189b      	adds	r3, r3, r2
 8022d4e:	2203      	movs	r2, #3
 8022d50:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022d52:	e017      	b.n	8022d84 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022d54:	68fb      	ldr	r3, [r7, #12]
 8022d56:	1c5a      	adds	r2, r3, #1
 8022d58:	60fa      	str	r2, [r7, #12]
 8022d5a:	2417      	movs	r4, #23
 8022d5c:	193a      	adds	r2, r7, r4
 8022d5e:	7812      	ldrb	r2, [r2, #0]
 8022d60:	1939      	adds	r1, r7, r4
 8022d62:	1c50      	adds	r0, r2, #1
 8022d64:	7008      	strb	r0, [r1, #0]
 8022d66:	0011      	movs	r1, r2
 8022d68:	68ba      	ldr	r2, [r7, #8]
 8022d6a:	1852      	adds	r2, r2, r1
 8022d6c:	781b      	ldrb	r3, [r3, #0]
 8022d6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022d70:	193b      	adds	r3, r7, r4
 8022d72:	781b      	ldrb	r3, [r3, #0]
 8022d74:	193a      	adds	r2, r7, r4
 8022d76:	1c59      	adds	r1, r3, #1
 8022d78:	7011      	strb	r1, [r2, #0]
 8022d7a:	001a      	movs	r2, r3
 8022d7c:	68bb      	ldr	r3, [r7, #8]
 8022d7e:	189b      	adds	r3, r3, r2
 8022d80:	2200      	movs	r2, #0
 8022d82:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022d84:	68fb      	ldr	r3, [r7, #12]
 8022d86:	781b      	ldrb	r3, [r3, #0]
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	d1e3      	bne.n	8022d54 <USBD_GetString+0x5c>
    }
  }
}
 8022d8c:	46c0      	nop			@ (mov r8, r8)
 8022d8e:	46bd      	mov	sp, r7
 8022d90:	b007      	add	sp, #28
 8022d92:	bd90      	pop	{r4, r7, pc}

08022d94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022d94:	b580      	push	{r7, lr}
 8022d96:	b084      	sub	sp, #16
 8022d98:	af00      	add	r7, sp, #0
 8022d9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022d9c:	230f      	movs	r3, #15
 8022d9e:	18fb      	adds	r3, r7, r3
 8022da0:	2200      	movs	r2, #0
 8022da2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022da4:	e008      	b.n	8022db8 <USBD_GetLen+0x24>
  {
    len++;
 8022da6:	210f      	movs	r1, #15
 8022da8:	187b      	adds	r3, r7, r1
 8022daa:	781a      	ldrb	r2, [r3, #0]
 8022dac:	187b      	adds	r3, r7, r1
 8022dae:	3201      	adds	r2, #1
 8022db0:	701a      	strb	r2, [r3, #0]
    buf++;
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	3301      	adds	r3, #1
 8022db6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8022db8:	687b      	ldr	r3, [r7, #4]
 8022dba:	781b      	ldrb	r3, [r3, #0]
 8022dbc:	2b00      	cmp	r3, #0
 8022dbe:	d1f2      	bne.n	8022da6 <USBD_GetLen+0x12>
  }

  return len;
 8022dc0:	230f      	movs	r3, #15
 8022dc2:	18fb      	adds	r3, r7, r3
 8022dc4:	781b      	ldrb	r3, [r3, #0]
}
 8022dc6:	0018      	movs	r0, r3
 8022dc8:	46bd      	mov	sp, r7
 8022dca:	b004      	add	sp, #16
 8022dcc:	bd80      	pop	{r7, pc}

08022dce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022dce:	b580      	push	{r7, lr}
 8022dd0:	b084      	sub	sp, #16
 8022dd2:	af00      	add	r7, sp, #0
 8022dd4:	60f8      	str	r0, [r7, #12]
 8022dd6:	60b9      	str	r1, [r7, #8]
 8022dd8:	1dbb      	adds	r3, r7, #6
 8022dda:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022ddc:	68fa      	ldr	r2, [r7, #12]
 8022dde:	23a5      	movs	r3, #165	@ 0xa5
 8022de0:	009b      	lsls	r3, r3, #2
 8022de2:	2102      	movs	r1, #2
 8022de4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8022de6:	1dbb      	adds	r3, r7, #6
 8022de8:	881a      	ldrh	r2, [r3, #0]
 8022dea:	68fb      	ldr	r3, [r7, #12]
 8022dec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022dee:	1dbb      	adds	r3, r7, #6
 8022df0:	881a      	ldrh	r2, [r3, #0]
 8022df2:	68fb      	ldr	r3, [r7, #12]
 8022df4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022df6:	1dbb      	adds	r3, r7, #6
 8022df8:	881b      	ldrh	r3, [r3, #0]
 8022dfa:	68ba      	ldr	r2, [r7, #8]
 8022dfc:	68f8      	ldr	r0, [r7, #12]
 8022dfe:	2100      	movs	r1, #0
 8022e00:	f000 fd4d 	bl	802389e <USBD_LL_Transmit>

  return USBD_OK;
 8022e04:	2300      	movs	r3, #0
}
 8022e06:	0018      	movs	r0, r3
 8022e08:	46bd      	mov	sp, r7
 8022e0a:	b004      	add	sp, #16
 8022e0c:	bd80      	pop	{r7, pc}

08022e0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8022e0e:	b580      	push	{r7, lr}
 8022e10:	b084      	sub	sp, #16
 8022e12:	af00      	add	r7, sp, #0
 8022e14:	60f8      	str	r0, [r7, #12]
 8022e16:	60b9      	str	r1, [r7, #8]
 8022e18:	1dbb      	adds	r3, r7, #6
 8022e1a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022e1c:	1dbb      	adds	r3, r7, #6
 8022e1e:	881b      	ldrh	r3, [r3, #0]
 8022e20:	68ba      	ldr	r2, [r7, #8]
 8022e22:	68f8      	ldr	r0, [r7, #12]
 8022e24:	2100      	movs	r1, #0
 8022e26:	f000 fd3a 	bl	802389e <USBD_LL_Transmit>

  return USBD_OK;
 8022e2a:	2300      	movs	r3, #0
}
 8022e2c:	0018      	movs	r0, r3
 8022e2e:	46bd      	mov	sp, r7
 8022e30:	b004      	add	sp, #16
 8022e32:	bd80      	pop	{r7, pc}

08022e34 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022e34:	b580      	push	{r7, lr}
 8022e36:	b084      	sub	sp, #16
 8022e38:	af00      	add	r7, sp, #0
 8022e3a:	60f8      	str	r0, [r7, #12]
 8022e3c:	60b9      	str	r1, [r7, #8]
 8022e3e:	1dbb      	adds	r3, r7, #6
 8022e40:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8022e42:	68fa      	ldr	r2, [r7, #12]
 8022e44:	23a5      	movs	r3, #165	@ 0xa5
 8022e46:	009b      	lsls	r3, r3, #2
 8022e48:	2103      	movs	r1, #3
 8022e4a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022e4c:	1dbb      	adds	r3, r7, #6
 8022e4e:	8819      	ldrh	r1, [r3, #0]
 8022e50:	68fa      	ldr	r2, [r7, #12]
 8022e52:	23ae      	movs	r3, #174	@ 0xae
 8022e54:	005b      	lsls	r3, r3, #1
 8022e56:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8022e58:	1dbb      	adds	r3, r7, #6
 8022e5a:	8819      	ldrh	r1, [r3, #0]
 8022e5c:	68fa      	ldr	r2, [r7, #12]
 8022e5e:	23b0      	movs	r3, #176	@ 0xb0
 8022e60:	005b      	lsls	r3, r3, #1
 8022e62:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022e64:	1dbb      	adds	r3, r7, #6
 8022e66:	881b      	ldrh	r3, [r3, #0]
 8022e68:	68ba      	ldr	r2, [r7, #8]
 8022e6a:	68f8      	ldr	r0, [r7, #12]
 8022e6c:	2100      	movs	r1, #0
 8022e6e:	f000 fd4d 	bl	802390c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022e72:	2300      	movs	r3, #0
}
 8022e74:	0018      	movs	r0, r3
 8022e76:	46bd      	mov	sp, r7
 8022e78:	b004      	add	sp, #16
 8022e7a:	bd80      	pop	{r7, pc}

08022e7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022e7c:	b580      	push	{r7, lr}
 8022e7e:	b084      	sub	sp, #16
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	60f8      	str	r0, [r7, #12]
 8022e84:	60b9      	str	r1, [r7, #8]
 8022e86:	1dbb      	adds	r3, r7, #6
 8022e88:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022e8a:	1dbb      	adds	r3, r7, #6
 8022e8c:	881b      	ldrh	r3, [r3, #0]
 8022e8e:	68ba      	ldr	r2, [r7, #8]
 8022e90:	68f8      	ldr	r0, [r7, #12]
 8022e92:	2100      	movs	r1, #0
 8022e94:	f000 fd3a 	bl	802390c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022e98:	2300      	movs	r3, #0
}
 8022e9a:	0018      	movs	r0, r3
 8022e9c:	46bd      	mov	sp, r7
 8022e9e:	b004      	add	sp, #16
 8022ea0:	bd80      	pop	{r7, pc}

08022ea2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022ea2:	b580      	push	{r7, lr}
 8022ea4:	b082      	sub	sp, #8
 8022ea6:	af00      	add	r7, sp, #0
 8022ea8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022eaa:	687a      	ldr	r2, [r7, #4]
 8022eac:	23a5      	movs	r3, #165	@ 0xa5
 8022eae:	009b      	lsls	r3, r3, #2
 8022eb0:	2104      	movs	r1, #4
 8022eb2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022eb4:	6878      	ldr	r0, [r7, #4]
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	2200      	movs	r2, #0
 8022eba:	2100      	movs	r1, #0
 8022ebc:	f000 fcef 	bl	802389e <USBD_LL_Transmit>

  return USBD_OK;
 8022ec0:	2300      	movs	r3, #0
}
 8022ec2:	0018      	movs	r0, r3
 8022ec4:	46bd      	mov	sp, r7
 8022ec6:	b002      	add	sp, #8
 8022ec8:	bd80      	pop	{r7, pc}

08022eca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022eca:	b580      	push	{r7, lr}
 8022ecc:	b082      	sub	sp, #8
 8022ece:	af00      	add	r7, sp, #0
 8022ed0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022ed2:	687a      	ldr	r2, [r7, #4]
 8022ed4:	23a5      	movs	r3, #165	@ 0xa5
 8022ed6:	009b      	lsls	r3, r3, #2
 8022ed8:	2105      	movs	r1, #5
 8022eda:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022edc:	6878      	ldr	r0, [r7, #4]
 8022ede:	2300      	movs	r3, #0
 8022ee0:	2200      	movs	r2, #0
 8022ee2:	2100      	movs	r1, #0
 8022ee4:	f000 fd12 	bl	802390c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022ee8:	2300      	movs	r3, #0
}
 8022eea:	0018      	movs	r0, r3
 8022eec:	46bd      	mov	sp, r7
 8022eee:	b002      	add	sp, #8
 8022ef0:	bd80      	pop	{r7, pc}
	...

08022ef4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022ef4:	b580      	push	{r7, lr}
 8022ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022ef8:	4914      	ldr	r1, [pc, #80]	@ (8022f4c <MX_USB_DEVICE_Init+0x58>)
 8022efa:	4b15      	ldr	r3, [pc, #84]	@ (8022f50 <MX_USB_DEVICE_Init+0x5c>)
 8022efc:	2200      	movs	r2, #0
 8022efe:	0018      	movs	r0, r3
 8022f00:	f7fe fdec 	bl	8021adc <USBD_Init>
 8022f04:	1e03      	subs	r3, r0, #0
 8022f06:	d001      	beq.n	8022f0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022f08:	f7ea fa3a 	bl	800d380 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022f0c:	4a11      	ldr	r2, [pc, #68]	@ (8022f54 <MX_USB_DEVICE_Init+0x60>)
 8022f0e:	4b10      	ldr	r3, [pc, #64]	@ (8022f50 <MX_USB_DEVICE_Init+0x5c>)
 8022f10:	0011      	movs	r1, r2
 8022f12:	0018      	movs	r0, r3
 8022f14:	f7fe fe13 	bl	8021b3e <USBD_RegisterClass>
 8022f18:	1e03      	subs	r3, r0, #0
 8022f1a:	d001      	beq.n	8022f20 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022f1c:	f7ea fa30 	bl	800d380 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022f20:	4a0d      	ldr	r2, [pc, #52]	@ (8022f58 <MX_USB_DEVICE_Init+0x64>)
 8022f22:	4b0b      	ldr	r3, [pc, #44]	@ (8022f50 <MX_USB_DEVICE_Init+0x5c>)
 8022f24:	0011      	movs	r1, r2
 8022f26:	0018      	movs	r0, r3
 8022f28:	f7fe fd28 	bl	802197c <USBD_CDC_RegisterInterface>
 8022f2c:	1e03      	subs	r3, r0, #0
 8022f2e:	d001      	beq.n	8022f34 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8022f30:	f7ea fa26 	bl	800d380 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022f34:	4b06      	ldr	r3, [pc, #24]	@ (8022f50 <MX_USB_DEVICE_Init+0x5c>)
 8022f36:	0018      	movs	r0, r3
 8022f38:	f7fe fe21 	bl	8021b7e <USBD_Start>
 8022f3c:	1e03      	subs	r3, r0, #0
 8022f3e:	d001      	beq.n	8022f44 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8022f40:	f7ea fa1e 	bl	800d380 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022f44:	46c0      	nop			@ (mov r8, r8)
 8022f46:	46bd      	mov	sp, r7
 8022f48:	bd80      	pop	{r7, pc}
 8022f4a:	46c0      	nop			@ (mov r8, r8)
 8022f4c:	20000224 	.word	0x20000224
 8022f50:	20002538 	.word	0x20002538
 8022f54:	20000110 	.word	0x20000110
 8022f58:	20000214 	.word	0x20000214

08022f5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022f5c:	b580      	push	{r7, lr}
 8022f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022f60:	4907      	ldr	r1, [pc, #28]	@ (8022f80 <CDC_Init_FS+0x24>)
 8022f62:	4b08      	ldr	r3, [pc, #32]	@ (8022f84 <CDC_Init_FS+0x28>)
 8022f64:	2200      	movs	r2, #0
 8022f66:	0018      	movs	r0, r3
 8022f68:	f7fe fd23 	bl	80219b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022f6c:	4a06      	ldr	r2, [pc, #24]	@ (8022f88 <CDC_Init_FS+0x2c>)
 8022f6e:	4b05      	ldr	r3, [pc, #20]	@ (8022f84 <CDC_Init_FS+0x28>)
 8022f70:	0011      	movs	r1, r2
 8022f72:	0018      	movs	r0, r3
 8022f74:	f7fe fd39 	bl	80219ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022f78:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022f7a:	0018      	movs	r0, r3
 8022f7c:	46bd      	mov	sp, r7
 8022f7e:	bd80      	pop	{r7, pc}
 8022f80:	20002cbc 	.word	0x20002cbc
 8022f84:	20002538 	.word	0x20002538
 8022f88:	200028bc 	.word	0x200028bc

08022f8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022f8c:	b580      	push	{r7, lr}
 8022f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022f90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8022f92:	0018      	movs	r0, r3
 8022f94:	46bd      	mov	sp, r7
 8022f96:	bd80      	pop	{r7, pc}

08022f98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022f98:	b580      	push	{r7, lr}
 8022f9a:	b084      	sub	sp, #16
 8022f9c:	af00      	add	r7, sp, #0
 8022f9e:	6039      	str	r1, [r7, #0]
 8022fa0:	0011      	movs	r1, r2
 8022fa2:	1dfb      	adds	r3, r7, #7
 8022fa4:	1c02      	adds	r2, r0, #0
 8022fa6:	701a      	strb	r2, [r3, #0]
 8022fa8:	1d3b      	adds	r3, r7, #4
 8022faa:	1c0a      	adds	r2, r1, #0
 8022fac:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8022fae:	1dfb      	adds	r3, r7, #7
 8022fb0:	781b      	ldrb	r3, [r3, #0]
 8022fb2:	2b23      	cmp	r3, #35	@ 0x23
 8022fb4:	d810      	bhi.n	8022fd8 <CDC_Control_FS+0x40>
 8022fb6:	009a      	lsls	r2, r3, #2
 8022fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8022fe4 <CDC_Control_FS+0x4c>)
 8022fba:	18d3      	adds	r3, r2, r3
 8022fbc:	681b      	ldr	r3, [r3, #0]
 8022fbe:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8022fc0:	683b      	ldr	r3, [r7, #0]
 8022fc2:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8022fc4:	68fb      	ldr	r3, [r7, #12]
 8022fc6:	885b      	ldrh	r3, [r3, #2]
 8022fc8:	001a      	movs	r2, r3
 8022fca:	2301      	movs	r3, #1
 8022fcc:	4013      	ands	r3, r2
 8022fce:	d001      	beq.n	8022fd4 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 8022fd0:	2302      	movs	r3, #2
 8022fd2:	e003      	b.n	8022fdc <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8022fd4:	2300      	movs	r3, #0
 8022fd6:	e001      	b.n	8022fdc <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022fd8:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8022fda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022fdc:	0018      	movs	r0, r3
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	b004      	add	sp, #16
 8022fe2:	bd80      	pop	{r7, pc}
 8022fe4:	0802e614 	.word	0x0802e614

08022fe8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022fe8:	b580      	push	{r7, lr}
 8022fea:	b082      	sub	sp, #8
 8022fec:	af00      	add	r7, sp, #0
 8022fee:	6078      	str	r0, [r7, #4]
 8022ff0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8022ff2:	4b12      	ldr	r3, [pc, #72]	@ (802303c <CDC_Receive_FS+0x54>)
 8022ff4:	781b      	ldrb	r3, [r3, #0]
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	d013      	beq.n	8023022 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8022ffa:	683b      	ldr	r3, [r7, #0]
 8022ffc:	681b      	ldr	r3, [r3, #0]
 8022ffe:	b29a      	uxth	r2, r3
 8023000:	2301      	movs	r3, #1
 8023002:	425b      	negs	r3, r3
 8023004:	6879      	ldr	r1, [r7, #4]
 8023006:	480e      	ldr	r0, [pc, #56]	@ (8023040 <CDC_Receive_FS+0x58>)
 8023008:	f7fa fa38 	bl	801d47c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802300c:	687a      	ldr	r2, [r7, #4]
 802300e:	4b0d      	ldr	r3, [pc, #52]	@ (8023044 <CDC_Receive_FS+0x5c>)
 8023010:	0011      	movs	r1, r2
 8023012:	0018      	movs	r0, r3
 8023014:	f7fe fce9 	bl	80219ea <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023018:	4b0a      	ldr	r3, [pc, #40]	@ (8023044 <CDC_Receive_FS+0x5c>)
 802301a:	0018      	movs	r0, r3
 802301c:	f7fe fd30 	bl	8021a80 <USBD_CDC_ReceivePacket>
 8023020:	e006      	b.n	8023030 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8023022:	683b      	ldr	r3, [r7, #0]
 8023024:	681a      	ldr	r2, [r3, #0]
 8023026:	4b08      	ldr	r3, [pc, #32]	@ (8023048 <CDC_Receive_FS+0x60>)
 8023028:	681b      	ldr	r3, [r3, #0]
 802302a:	18d2      	adds	r2, r2, r3
 802302c:	4b06      	ldr	r3, [pc, #24]	@ (8023048 <CDC_Receive_FS+0x60>)
 802302e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8023030:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8023032:	0018      	movs	r0, r3
 8023034:	46bd      	mov	sp, r7
 8023036:	b002      	add	sp, #8
 8023038:	bd80      	pop	{r7, pc}
 802303a:	46c0      	nop			@ (mov r8, r8)
 802303c:	200027fc 	.word	0x200027fc
 8023040:	20002800 	.word	0x20002800
 8023044:	20002538 	.word	0x20002538
 8023048:	200028b8 	.word	0x200028b8

0802304c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802304c:	b5b0      	push	{r4, r5, r7, lr}
 802304e:	b084      	sub	sp, #16
 8023050:	af00      	add	r7, sp, #0
 8023052:	6078      	str	r0, [r7, #4]
 8023054:	000a      	movs	r2, r1
 8023056:	1cbb      	adds	r3, r7, #2
 8023058:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802305a:	230f      	movs	r3, #15
 802305c:	18fb      	adds	r3, r7, r3
 802305e:	2200      	movs	r2, #0
 8023060:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8023062:	4a11      	ldr	r2, [pc, #68]	@ (80230a8 <CDC_Transmit_FS+0x5c>)
 8023064:	23ae      	movs	r3, #174	@ 0xae
 8023066:	009b      	lsls	r3, r3, #2
 8023068:	58d3      	ldr	r3, [r2, r3]
 802306a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 802306c:	68ba      	ldr	r2, [r7, #8]
 802306e:	2385      	movs	r3, #133	@ 0x85
 8023070:	009b      	lsls	r3, r3, #2
 8023072:	58d3      	ldr	r3, [r2, r3]
 8023074:	2b00      	cmp	r3, #0
 8023076:	d001      	beq.n	802307c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8023078:	2301      	movs	r3, #1
 802307a:	e010      	b.n	802309e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802307c:	1cbb      	adds	r3, r7, #2
 802307e:	881a      	ldrh	r2, [r3, #0]
 8023080:	6879      	ldr	r1, [r7, #4]
 8023082:	4b09      	ldr	r3, [pc, #36]	@ (80230a8 <CDC_Transmit_FS+0x5c>)
 8023084:	0018      	movs	r0, r3
 8023086:	f7fe fc94 	bl	80219b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802308a:	250f      	movs	r5, #15
 802308c:	197c      	adds	r4, r7, r5
 802308e:	4b06      	ldr	r3, [pc, #24]	@ (80230a8 <CDC_Transmit_FS+0x5c>)
 8023090:	0018      	movs	r0, r3
 8023092:	f7fe fcbe 	bl	8021a12 <USBD_CDC_TransmitPacket>
 8023096:	0003      	movs	r3, r0
 8023098:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802309a:	197b      	adds	r3, r7, r5
 802309c:	781b      	ldrb	r3, [r3, #0]
}
 802309e:	0018      	movs	r0, r3
 80230a0:	46bd      	mov	sp, r7
 80230a2:	b004      	add	sp, #16
 80230a4:	bdb0      	pop	{r4, r5, r7, pc}
 80230a6:	46c0      	nop			@ (mov r8, r8)
 80230a8:	20002538 	.word	0x20002538

080230ac <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80230ac:	b580      	push	{r7, lr}
 80230ae:	af00      	add	r7, sp, #0
  ESPProg = true;
 80230b0:	4b02      	ldr	r3, [pc, #8]	@ (80230bc <EnableESPProg+0x10>)
 80230b2:	2201      	movs	r2, #1
 80230b4:	701a      	strb	r2, [r3, #0]
}
 80230b6:	46c0      	nop			@ (mov r8, r8)
 80230b8:	46bd      	mov	sp, r7
 80230ba:	bd80      	pop	{r7, pc}
 80230bc:	200027fc 	.word	0x200027fc

080230c0 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80230c0:	b580      	push	{r7, lr}
 80230c2:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80230c4:	4b01      	ldr	r3, [pc, #4]	@ (80230cc <GetUsbRxPointer+0xc>)
}
 80230c6:	0018      	movs	r0, r3
 80230c8:	46bd      	mov	sp, r7
 80230ca:	bd80      	pop	{r7, pc}
 80230cc:	200028bc 	.word	0x200028bc

080230d0 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80230d0:	b580      	push	{r7, lr}
 80230d2:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80230d4:	4b07      	ldr	r3, [pc, #28]	@ (80230f4 <ResetUsbRxDataSize+0x24>)
 80230d6:	2200      	movs	r2, #0
 80230d8:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80230da:	4a07      	ldr	r2, [pc, #28]	@ (80230f8 <ResetUsbRxDataSize+0x28>)
 80230dc:	4b07      	ldr	r3, [pc, #28]	@ (80230fc <ResetUsbRxDataSize+0x2c>)
 80230de:	0011      	movs	r1, r2
 80230e0:	0018      	movs	r0, r3
 80230e2:	f7fe fc82 	bl	80219ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80230e6:	4b05      	ldr	r3, [pc, #20]	@ (80230fc <ResetUsbRxDataSize+0x2c>)
 80230e8:	0018      	movs	r0, r3
 80230ea:	f7fe fcc9 	bl	8021a80 <USBD_CDC_ReceivePacket>
}
 80230ee:	46c0      	nop			@ (mov r8, r8)
 80230f0:	46bd      	mov	sp, r7
 80230f2:	bd80      	pop	{r7, pc}
 80230f4:	200028b8 	.word	0x200028b8
 80230f8:	200028bc 	.word	0x200028bc
 80230fc:	20002538 	.word	0x20002538

08023100 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8023100:	b580      	push	{r7, lr}
 8023102:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023104:	4b02      	ldr	r3, [pc, #8]	@ (8023110 <GetUsbRxDataSize+0x10>)
 8023106:	681b      	ldr	r3, [r3, #0]
}
 8023108:	0018      	movs	r0, r3
 802310a:	46bd      	mov	sp, r7
 802310c:	bd80      	pop	{r7, pc}
 802310e:	46c0      	nop			@ (mov r8, r8)
 8023110:	200028b8 	.word	0x200028b8

08023114 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023114:	b580      	push	{r7, lr}
 8023116:	b082      	sub	sp, #8
 8023118:	af00      	add	r7, sp, #0
 802311a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 802311c:	687a      	ldr	r2, [r7, #4]
 802311e:	4b07      	ldr	r3, [pc, #28]	@ (802313c <GetUsbRxNextChunk+0x28>)
 8023120:	18d2      	adds	r2, r2, r3
 8023122:	4b07      	ldr	r3, [pc, #28]	@ (8023140 <GetUsbRxNextChunk+0x2c>)
 8023124:	0011      	movs	r1, r2
 8023126:	0018      	movs	r0, r3
 8023128:	f7fe fc5f 	bl	80219ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802312c:	4b04      	ldr	r3, [pc, #16]	@ (8023140 <GetUsbRxNextChunk+0x2c>)
 802312e:	0018      	movs	r0, r3
 8023130:	f7fe fca6 	bl	8021a80 <USBD_CDC_ReceivePacket>
}
 8023134:	46c0      	nop			@ (mov r8, r8)
 8023136:	46bd      	mov	sp, r7
 8023138:	b002      	add	sp, #8
 802313a:	bd80      	pop	{r7, pc}
 802313c:	200028bc 	.word	0x200028bc
 8023140:	20002538 	.word	0x20002538

08023144 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023144:	b580      	push	{r7, lr}
 8023146:	b082      	sub	sp, #8
 8023148:	af00      	add	r7, sp, #0
 802314a:	0002      	movs	r2, r0
 802314c:	6039      	str	r1, [r7, #0]
 802314e:	1dfb      	adds	r3, r7, #7
 8023150:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8023152:	683b      	ldr	r3, [r7, #0]
 8023154:	2212      	movs	r2, #18
 8023156:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8023158:	4b02      	ldr	r3, [pc, #8]	@ (8023164 <USBD_FS_DeviceDescriptor+0x20>)
}
 802315a:	0018      	movs	r0, r3
 802315c:	46bd      	mov	sp, r7
 802315e:	b002      	add	sp, #8
 8023160:	bd80      	pop	{r7, pc}
 8023162:	46c0      	nop			@ (mov r8, r8)
 8023164:	20000240 	.word	0x20000240

08023168 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023168:	b580      	push	{r7, lr}
 802316a:	b082      	sub	sp, #8
 802316c:	af00      	add	r7, sp, #0
 802316e:	0002      	movs	r2, r0
 8023170:	6039      	str	r1, [r7, #0]
 8023172:	1dfb      	adds	r3, r7, #7
 8023174:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8023176:	683b      	ldr	r3, [r7, #0]
 8023178:	2204      	movs	r2, #4
 802317a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802317c:	4b02      	ldr	r3, [pc, #8]	@ (8023188 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802317e:	0018      	movs	r0, r3
 8023180:	46bd      	mov	sp, r7
 8023182:	b002      	add	sp, #8
 8023184:	bd80      	pop	{r7, pc}
 8023186:	46c0      	nop			@ (mov r8, r8)
 8023188:	20000254 	.word	0x20000254

0802318c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802318c:	b580      	push	{r7, lr}
 802318e:	b082      	sub	sp, #8
 8023190:	af00      	add	r7, sp, #0
 8023192:	0002      	movs	r2, r0
 8023194:	6039      	str	r1, [r7, #0]
 8023196:	1dfb      	adds	r3, r7, #7
 8023198:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802319a:	1dfb      	adds	r3, r7, #7
 802319c:	781b      	ldrb	r3, [r3, #0]
 802319e:	2b00      	cmp	r3, #0
 80231a0:	d106      	bne.n	80231b0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80231a2:	683a      	ldr	r2, [r7, #0]
 80231a4:	4908      	ldr	r1, [pc, #32]	@ (80231c8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80231a6:	4b09      	ldr	r3, [pc, #36]	@ (80231cc <USBD_FS_ProductStrDescriptor+0x40>)
 80231a8:	0018      	movs	r0, r3
 80231aa:	f7ff fda5 	bl	8022cf8 <USBD_GetString>
 80231ae:	e005      	b.n	80231bc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80231b0:	683a      	ldr	r2, [r7, #0]
 80231b2:	4905      	ldr	r1, [pc, #20]	@ (80231c8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80231b4:	4b05      	ldr	r3, [pc, #20]	@ (80231cc <USBD_FS_ProductStrDescriptor+0x40>)
 80231b6:	0018      	movs	r0, r3
 80231b8:	f7ff fd9e 	bl	8022cf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80231bc:	4b02      	ldr	r3, [pc, #8]	@ (80231c8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80231be:	0018      	movs	r0, r3
 80231c0:	46bd      	mov	sp, r7
 80231c2:	b002      	add	sp, #8
 80231c4:	bd80      	pop	{r7, pc}
 80231c6:	46c0      	nop			@ (mov r8, r8)
 80231c8:	200030bc 	.word	0x200030bc
 80231cc:	0802dcb4 	.word	0x0802dcb4

080231d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80231d0:	b580      	push	{r7, lr}
 80231d2:	b082      	sub	sp, #8
 80231d4:	af00      	add	r7, sp, #0
 80231d6:	0002      	movs	r2, r0
 80231d8:	6039      	str	r1, [r7, #0]
 80231da:	1dfb      	adds	r3, r7, #7
 80231dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80231de:	683a      	ldr	r2, [r7, #0]
 80231e0:	4904      	ldr	r1, [pc, #16]	@ (80231f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80231e2:	4b05      	ldr	r3, [pc, #20]	@ (80231f8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80231e4:	0018      	movs	r0, r3
 80231e6:	f7ff fd87 	bl	8022cf8 <USBD_GetString>
  return USBD_StrDesc;
 80231ea:	4b02      	ldr	r3, [pc, #8]	@ (80231f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80231ec:	0018      	movs	r0, r3
 80231ee:	46bd      	mov	sp, r7
 80231f0:	b002      	add	sp, #8
 80231f2:	bd80      	pop	{r7, pc}
 80231f4:	200030bc 	.word	0x200030bc
 80231f8:	0802dccc 	.word	0x0802dccc

080231fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80231fc:	b580      	push	{r7, lr}
 80231fe:	b082      	sub	sp, #8
 8023200:	af00      	add	r7, sp, #0
 8023202:	0002      	movs	r2, r0
 8023204:	6039      	str	r1, [r7, #0]
 8023206:	1dfb      	adds	r3, r7, #7
 8023208:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802320a:	683b      	ldr	r3, [r7, #0]
 802320c:	221a      	movs	r2, #26
 802320e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8023210:	f000 f84c 	bl	80232ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023214:	4b02      	ldr	r3, [pc, #8]	@ (8023220 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8023216:	0018      	movs	r0, r3
 8023218:	46bd      	mov	sp, r7
 802321a:	b002      	add	sp, #8
 802321c:	bd80      	pop	{r7, pc}
 802321e:	46c0      	nop			@ (mov r8, r8)
 8023220:	20000258 	.word	0x20000258

08023224 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023224:	b580      	push	{r7, lr}
 8023226:	b082      	sub	sp, #8
 8023228:	af00      	add	r7, sp, #0
 802322a:	0002      	movs	r2, r0
 802322c:	6039      	str	r1, [r7, #0]
 802322e:	1dfb      	adds	r3, r7, #7
 8023230:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8023232:	1dfb      	adds	r3, r7, #7
 8023234:	781b      	ldrb	r3, [r3, #0]
 8023236:	2b00      	cmp	r3, #0
 8023238:	d106      	bne.n	8023248 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802323a:	683a      	ldr	r2, [r7, #0]
 802323c:	4908      	ldr	r1, [pc, #32]	@ (8023260 <USBD_FS_ConfigStrDescriptor+0x3c>)
 802323e:	4b09      	ldr	r3, [pc, #36]	@ (8023264 <USBD_FS_ConfigStrDescriptor+0x40>)
 8023240:	0018      	movs	r0, r3
 8023242:	f7ff fd59 	bl	8022cf8 <USBD_GetString>
 8023246:	e005      	b.n	8023254 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023248:	683a      	ldr	r2, [r7, #0]
 802324a:	4905      	ldr	r1, [pc, #20]	@ (8023260 <USBD_FS_ConfigStrDescriptor+0x3c>)
 802324c:	4b05      	ldr	r3, [pc, #20]	@ (8023264 <USBD_FS_ConfigStrDescriptor+0x40>)
 802324e:	0018      	movs	r0, r3
 8023250:	f7ff fd52 	bl	8022cf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023254:	4b02      	ldr	r3, [pc, #8]	@ (8023260 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8023256:	0018      	movs	r0, r3
 8023258:	46bd      	mov	sp, r7
 802325a:	b002      	add	sp, #8
 802325c:	bd80      	pop	{r7, pc}
 802325e:	46c0      	nop			@ (mov r8, r8)
 8023260:	200030bc 	.word	0x200030bc
 8023264:	0802dce0 	.word	0x0802dce0

08023268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023268:	b580      	push	{r7, lr}
 802326a:	b082      	sub	sp, #8
 802326c:	af00      	add	r7, sp, #0
 802326e:	0002      	movs	r2, r0
 8023270:	6039      	str	r1, [r7, #0]
 8023272:	1dfb      	adds	r3, r7, #7
 8023274:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8023276:	1dfb      	adds	r3, r7, #7
 8023278:	781b      	ldrb	r3, [r3, #0]
 802327a:	2b00      	cmp	r3, #0
 802327c:	d106      	bne.n	802328c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802327e:	683a      	ldr	r2, [r7, #0]
 8023280:	4908      	ldr	r1, [pc, #32]	@ (80232a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023282:	4b09      	ldr	r3, [pc, #36]	@ (80232a8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023284:	0018      	movs	r0, r3
 8023286:	f7ff fd37 	bl	8022cf8 <USBD_GetString>
 802328a:	e005      	b.n	8023298 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802328c:	683a      	ldr	r2, [r7, #0]
 802328e:	4905      	ldr	r1, [pc, #20]	@ (80232a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023290:	4b05      	ldr	r3, [pc, #20]	@ (80232a8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023292:	0018      	movs	r0, r3
 8023294:	f7ff fd30 	bl	8022cf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023298:	4b02      	ldr	r3, [pc, #8]	@ (80232a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802329a:	0018      	movs	r0, r3
 802329c:	46bd      	mov	sp, r7
 802329e:	b002      	add	sp, #8
 80232a0:	bd80      	pop	{r7, pc}
 80232a2:	46c0      	nop			@ (mov r8, r8)
 80232a4:	200030bc 	.word	0x200030bc
 80232a8:	0802dcec 	.word	0x0802dcec

080232ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80232ac:	b580      	push	{r7, lr}
 80232ae:	b084      	sub	sp, #16
 80232b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80232b2:	4b10      	ldr	r3, [pc, #64]	@ (80232f4 <Get_SerialNum+0x48>)
 80232b4:	681b      	ldr	r3, [r3, #0]
 80232b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80232b8:	4b0f      	ldr	r3, [pc, #60]	@ (80232f8 <Get_SerialNum+0x4c>)
 80232ba:	681b      	ldr	r3, [r3, #0]
 80232bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80232be:	4b0f      	ldr	r3, [pc, #60]	@ (80232fc <Get_SerialNum+0x50>)
 80232c0:	681b      	ldr	r3, [r3, #0]
 80232c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80232c4:	68fa      	ldr	r2, [r7, #12]
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	18d3      	adds	r3, r2, r3
 80232ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80232cc:	68fb      	ldr	r3, [r7, #12]
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d00b      	beq.n	80232ea <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80232d2:	490b      	ldr	r1, [pc, #44]	@ (8023300 <Get_SerialNum+0x54>)
 80232d4:	68fb      	ldr	r3, [r7, #12]
 80232d6:	2208      	movs	r2, #8
 80232d8:	0018      	movs	r0, r3
 80232da:	f000 f815 	bl	8023308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80232de:	4909      	ldr	r1, [pc, #36]	@ (8023304 <Get_SerialNum+0x58>)
 80232e0:	68bb      	ldr	r3, [r7, #8]
 80232e2:	2204      	movs	r2, #4
 80232e4:	0018      	movs	r0, r3
 80232e6:	f000 f80f 	bl	8023308 <IntToUnicode>
  }
}
 80232ea:	46c0      	nop			@ (mov r8, r8)
 80232ec:	46bd      	mov	sp, r7
 80232ee:	b004      	add	sp, #16
 80232f0:	bd80      	pop	{r7, pc}
 80232f2:	46c0      	nop			@ (mov r8, r8)
 80232f4:	1ff80050 	.word	0x1ff80050
 80232f8:	1ff80054 	.word	0x1ff80054
 80232fc:	1ff80058 	.word	0x1ff80058
 8023300:	2000025a 	.word	0x2000025a
 8023304:	2000026a 	.word	0x2000026a

08023308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8023308:	b580      	push	{r7, lr}
 802330a:	b086      	sub	sp, #24
 802330c:	af00      	add	r7, sp, #0
 802330e:	60f8      	str	r0, [r7, #12]
 8023310:	60b9      	str	r1, [r7, #8]
 8023312:	1dfb      	adds	r3, r7, #7
 8023314:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8023316:	2117      	movs	r1, #23
 8023318:	187b      	adds	r3, r7, r1
 802331a:	2200      	movs	r2, #0
 802331c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802331e:	187b      	adds	r3, r7, r1
 8023320:	2200      	movs	r2, #0
 8023322:	701a      	strb	r2, [r3, #0]
 8023324:	e02f      	b.n	8023386 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8023326:	68fb      	ldr	r3, [r7, #12]
 8023328:	0f1b      	lsrs	r3, r3, #28
 802332a:	2b09      	cmp	r3, #9
 802332c:	d80d      	bhi.n	802334a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802332e:	68fb      	ldr	r3, [r7, #12]
 8023330:	0f1b      	lsrs	r3, r3, #28
 8023332:	b2da      	uxtb	r2, r3
 8023334:	2317      	movs	r3, #23
 8023336:	18fb      	adds	r3, r7, r3
 8023338:	781b      	ldrb	r3, [r3, #0]
 802333a:	005b      	lsls	r3, r3, #1
 802333c:	0019      	movs	r1, r3
 802333e:	68bb      	ldr	r3, [r7, #8]
 8023340:	185b      	adds	r3, r3, r1
 8023342:	3230      	adds	r2, #48	@ 0x30
 8023344:	b2d2      	uxtb	r2, r2
 8023346:	701a      	strb	r2, [r3, #0]
 8023348:	e00c      	b.n	8023364 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802334a:	68fb      	ldr	r3, [r7, #12]
 802334c:	0f1b      	lsrs	r3, r3, #28
 802334e:	b2da      	uxtb	r2, r3
 8023350:	2317      	movs	r3, #23
 8023352:	18fb      	adds	r3, r7, r3
 8023354:	781b      	ldrb	r3, [r3, #0]
 8023356:	005b      	lsls	r3, r3, #1
 8023358:	0019      	movs	r1, r3
 802335a:	68bb      	ldr	r3, [r7, #8]
 802335c:	185b      	adds	r3, r3, r1
 802335e:	3237      	adds	r2, #55	@ 0x37
 8023360:	b2d2      	uxtb	r2, r2
 8023362:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8023364:	68fb      	ldr	r3, [r7, #12]
 8023366:	011b      	lsls	r3, r3, #4
 8023368:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802336a:	2117      	movs	r1, #23
 802336c:	187b      	adds	r3, r7, r1
 802336e:	781b      	ldrb	r3, [r3, #0]
 8023370:	005b      	lsls	r3, r3, #1
 8023372:	3301      	adds	r3, #1
 8023374:	68ba      	ldr	r2, [r7, #8]
 8023376:	18d3      	adds	r3, r2, r3
 8023378:	2200      	movs	r2, #0
 802337a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802337c:	187b      	adds	r3, r7, r1
 802337e:	781a      	ldrb	r2, [r3, #0]
 8023380:	187b      	adds	r3, r7, r1
 8023382:	3201      	adds	r2, #1
 8023384:	701a      	strb	r2, [r3, #0]
 8023386:	2317      	movs	r3, #23
 8023388:	18fa      	adds	r2, r7, r3
 802338a:	1dfb      	adds	r3, r7, #7
 802338c:	7812      	ldrb	r2, [r2, #0]
 802338e:	781b      	ldrb	r3, [r3, #0]
 8023390:	429a      	cmp	r2, r3
 8023392:	d3c8      	bcc.n	8023326 <IntToUnicode+0x1e>
  }
}
 8023394:	46c0      	nop			@ (mov r8, r8)
 8023396:	46c0      	nop			@ (mov r8, r8)
 8023398:	46bd      	mov	sp, r7
 802339a:	b006      	add	sp, #24
 802339c:	bd80      	pop	{r7, pc}
	...

080233a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80233a0:	b580      	push	{r7, lr}
 80233a2:	b082      	sub	sp, #8
 80233a4:	af00      	add	r7, sp, #0
 80233a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	681b      	ldr	r3, [r3, #0]
 80233ac:	4a0a      	ldr	r2, [pc, #40]	@ (80233d8 <HAL_PCD_MspInit+0x38>)
 80233ae:	4293      	cmp	r3, r2
 80233b0:	d10e      	bne.n	80233d0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80233b2:	4b0a      	ldr	r3, [pc, #40]	@ (80233dc <HAL_PCD_MspInit+0x3c>)
 80233b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80233b6:	4b09      	ldr	r3, [pc, #36]	@ (80233dc <HAL_PCD_MspInit+0x3c>)
 80233b8:	2180      	movs	r1, #128	@ 0x80
 80233ba:	0409      	lsls	r1, r1, #16
 80233bc:	430a      	orrs	r2, r1
 80233be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80233c0:	2200      	movs	r2, #0
 80233c2:	2100      	movs	r1, #0
 80233c4:	201f      	movs	r0, #31
 80233c6:	f7f1 ff2d 	bl	8015224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80233ca:	201f      	movs	r0, #31
 80233cc:	f7f1 ff3f 	bl	801524e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80233d0:	46c0      	nop			@ (mov r8, r8)
 80233d2:	46bd      	mov	sp, r7
 80233d4:	b002      	add	sp, #8
 80233d6:	bd80      	pop	{r7, pc}
 80233d8:	40005c00 	.word	0x40005c00
 80233dc:	40021000 	.word	0x40021000

080233e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80233e0:	b580      	push	{r7, lr}
 80233e2:	b082      	sub	sp, #8
 80233e4:	af00      	add	r7, sp, #0
 80233e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80233e8:	687a      	ldr	r2, [r7, #4]
 80233ea:	23bc      	movs	r3, #188	@ 0xbc
 80233ec:	009b      	lsls	r3, r3, #2
 80233ee:	58d2      	ldr	r2, [r2, r3]
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	21ac      	movs	r1, #172	@ 0xac
 80233f4:	0089      	lsls	r1, r1, #2
 80233f6:	468c      	mov	ip, r1
 80233f8:	4463      	add	r3, ip
 80233fa:	0019      	movs	r1, r3
 80233fc:	0010      	movs	r0, r2
 80233fe:	f7fe fc11 	bl	8021c24 <USBD_LL_SetupStage>
}
 8023402:	46c0      	nop			@ (mov r8, r8)
 8023404:	46bd      	mov	sp, r7
 8023406:	b002      	add	sp, #8
 8023408:	bd80      	pop	{r7, pc}

0802340a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802340a:	b590      	push	{r4, r7, lr}
 802340c:	b083      	sub	sp, #12
 802340e:	af00      	add	r7, sp, #0
 8023410:	6078      	str	r0, [r7, #4]
 8023412:	000a      	movs	r2, r1
 8023414:	1cfb      	adds	r3, r7, #3
 8023416:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023418:	687a      	ldr	r2, [r7, #4]
 802341a:	23bc      	movs	r3, #188	@ 0xbc
 802341c:	009b      	lsls	r3, r3, #2
 802341e:	58d4      	ldr	r4, [r2, r3]
 8023420:	1cfb      	adds	r3, r7, #3
 8023422:	781a      	ldrb	r2, [r3, #0]
 8023424:	6878      	ldr	r0, [r7, #4]
 8023426:	23be      	movs	r3, #190	@ 0xbe
 8023428:	0059      	lsls	r1, r3, #1
 802342a:	0013      	movs	r3, r2
 802342c:	009b      	lsls	r3, r3, #2
 802342e:	189b      	adds	r3, r3, r2
 8023430:	00db      	lsls	r3, r3, #3
 8023432:	18c3      	adds	r3, r0, r3
 8023434:	185b      	adds	r3, r3, r1
 8023436:	681a      	ldr	r2, [r3, #0]
 8023438:	1cfb      	adds	r3, r7, #3
 802343a:	781b      	ldrb	r3, [r3, #0]
 802343c:	0019      	movs	r1, r3
 802343e:	0020      	movs	r0, r4
 8023440:	f7fe fc4e 	bl	8021ce0 <USBD_LL_DataOutStage>
}
 8023444:	46c0      	nop			@ (mov r8, r8)
 8023446:	46bd      	mov	sp, r7
 8023448:	b003      	add	sp, #12
 802344a:	bd90      	pop	{r4, r7, pc}

0802344c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802344c:	b580      	push	{r7, lr}
 802344e:	b082      	sub	sp, #8
 8023450:	af00      	add	r7, sp, #0
 8023452:	6078      	str	r0, [r7, #4]
 8023454:	000a      	movs	r2, r1
 8023456:	1cfb      	adds	r3, r7, #3
 8023458:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802345a:	687a      	ldr	r2, [r7, #4]
 802345c:	23bc      	movs	r3, #188	@ 0xbc
 802345e:	009b      	lsls	r3, r3, #2
 8023460:	58d0      	ldr	r0, [r2, r3]
 8023462:	1cfb      	adds	r3, r7, #3
 8023464:	781a      	ldrb	r2, [r3, #0]
 8023466:	6879      	ldr	r1, [r7, #4]
 8023468:	0013      	movs	r3, r2
 802346a:	009b      	lsls	r3, r3, #2
 802346c:	189b      	adds	r3, r3, r2
 802346e:	00db      	lsls	r3, r3, #3
 8023470:	18cb      	adds	r3, r1, r3
 8023472:	333c      	adds	r3, #60	@ 0x3c
 8023474:	681a      	ldr	r2, [r3, #0]
 8023476:	1cfb      	adds	r3, r7, #3
 8023478:	781b      	ldrb	r3, [r3, #0]
 802347a:	0019      	movs	r1, r3
 802347c:	f7fe fcb2 	bl	8021de4 <USBD_LL_DataInStage>
}
 8023480:	46c0      	nop			@ (mov r8, r8)
 8023482:	46bd      	mov	sp, r7
 8023484:	b002      	add	sp, #8
 8023486:	bd80      	pop	{r7, pc}

08023488 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023488:	b580      	push	{r7, lr}
 802348a:	b082      	sub	sp, #8
 802348c:	af00      	add	r7, sp, #0
 802348e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023490:	687a      	ldr	r2, [r7, #4]
 8023492:	23bc      	movs	r3, #188	@ 0xbc
 8023494:	009b      	lsls	r3, r3, #2
 8023496:	58d3      	ldr	r3, [r2, r3]
 8023498:	0018      	movs	r0, r3
 802349a:	f7fe fde9 	bl	8022070 <USBD_LL_SOF>
}
 802349e:	46c0      	nop			@ (mov r8, r8)
 80234a0:	46bd      	mov	sp, r7
 80234a2:	b002      	add	sp, #8
 80234a4:	bd80      	pop	{r7, pc}

080234a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80234a6:	b580      	push	{r7, lr}
 80234a8:	b084      	sub	sp, #16
 80234aa:	af00      	add	r7, sp, #0
 80234ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80234ae:	230f      	movs	r3, #15
 80234b0:	18fb      	adds	r3, r7, r3
 80234b2:	2201      	movs	r2, #1
 80234b4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80234b6:	687b      	ldr	r3, [r7, #4]
 80234b8:	689b      	ldr	r3, [r3, #8]
 80234ba:	2b02      	cmp	r3, #2
 80234bc:	d001      	beq.n	80234c2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80234be:	f7e9 ff5f 	bl	800d380 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80234c2:	687a      	ldr	r2, [r7, #4]
 80234c4:	23bc      	movs	r3, #188	@ 0xbc
 80234c6:	009b      	lsls	r3, r3, #2
 80234c8:	58d2      	ldr	r2, [r2, r3]
 80234ca:	230f      	movs	r3, #15
 80234cc:	18fb      	adds	r3, r7, r3
 80234ce:	781b      	ldrb	r3, [r3, #0]
 80234d0:	0019      	movs	r1, r3
 80234d2:	0010      	movs	r0, r2
 80234d4:	f7fe fd8b 	bl	8021fee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80234d8:	687a      	ldr	r2, [r7, #4]
 80234da:	23bc      	movs	r3, #188	@ 0xbc
 80234dc:	009b      	lsls	r3, r3, #2
 80234de:	58d3      	ldr	r3, [r2, r3]
 80234e0:	0018      	movs	r0, r3
 80234e2:	f7fe fd3c 	bl	8021f5e <USBD_LL_Reset>
}
 80234e6:	46c0      	nop			@ (mov r8, r8)
 80234e8:	46bd      	mov	sp, r7
 80234ea:	b004      	add	sp, #16
 80234ec:	bd80      	pop	{r7, pc}
	...

080234f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80234f0:	b580      	push	{r7, lr}
 80234f2:	b082      	sub	sp, #8
 80234f4:	af00      	add	r7, sp, #0
 80234f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80234f8:	687a      	ldr	r2, [r7, #4]
 80234fa:	23bc      	movs	r3, #188	@ 0xbc
 80234fc:	009b      	lsls	r3, r3, #2
 80234fe:	58d3      	ldr	r3, [r2, r3]
 8023500:	0018      	movs	r0, r3
 8023502:	f7fe fd85 	bl	8022010 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	699b      	ldr	r3, [r3, #24]
 802350a:	2b00      	cmp	r3, #0
 802350c:	d005      	beq.n	802351a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802350e:	4b05      	ldr	r3, [pc, #20]	@ (8023524 <HAL_PCD_SuspendCallback+0x34>)
 8023510:	691a      	ldr	r2, [r3, #16]
 8023512:	4b04      	ldr	r3, [pc, #16]	@ (8023524 <HAL_PCD_SuspendCallback+0x34>)
 8023514:	2106      	movs	r1, #6
 8023516:	430a      	orrs	r2, r1
 8023518:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802351a:	46c0      	nop			@ (mov r8, r8)
 802351c:	46bd      	mov	sp, r7
 802351e:	b002      	add	sp, #8
 8023520:	bd80      	pop	{r7, pc}
 8023522:	46c0      	nop			@ (mov r8, r8)
 8023524:	e000ed00 	.word	0xe000ed00

08023528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023528:	b580      	push	{r7, lr}
 802352a:	b082      	sub	sp, #8
 802352c:	af00      	add	r7, sp, #0
 802352e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	699b      	ldr	r3, [r3, #24]
 8023534:	2b00      	cmp	r3, #0
 8023536:	d007      	beq.n	8023548 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023538:	4b09      	ldr	r3, [pc, #36]	@ (8023560 <HAL_PCD_ResumeCallback+0x38>)
 802353a:	691a      	ldr	r2, [r3, #16]
 802353c:	4b08      	ldr	r3, [pc, #32]	@ (8023560 <HAL_PCD_ResumeCallback+0x38>)
 802353e:	2106      	movs	r1, #6
 8023540:	438a      	bics	r2, r1
 8023542:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8023544:	f000 fa44 	bl	80239d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8023548:	687a      	ldr	r2, [r7, #4]
 802354a:	23bc      	movs	r3, #188	@ 0xbc
 802354c:	009b      	lsls	r3, r3, #2
 802354e:	58d3      	ldr	r3, [r2, r3]
 8023550:	0018      	movs	r0, r3
 8023552:	f7fe fd75 	bl	8022040 <USBD_LL_Resume>
}
 8023556:	46c0      	nop			@ (mov r8, r8)
 8023558:	46bd      	mov	sp, r7
 802355a:	b002      	add	sp, #8
 802355c:	bd80      	pop	{r7, pc}
 802355e:	46c0      	nop			@ (mov r8, r8)
 8023560:	e000ed00 	.word	0xe000ed00

08023564 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8023564:	b580      	push	{r7, lr}
 8023566:	b082      	sub	sp, #8
 8023568:	af00      	add	r7, sp, #0
 802356a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 802356c:	4a2d      	ldr	r2, [pc, #180]	@ (8023624 <USBD_LL_Init+0xc0>)
 802356e:	23bc      	movs	r3, #188	@ 0xbc
 8023570:	009b      	lsls	r3, r3, #2
 8023572:	6879      	ldr	r1, [r7, #4]
 8023574:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8023576:	687a      	ldr	r2, [r7, #4]
 8023578:	23b0      	movs	r3, #176	@ 0xb0
 802357a:	009b      	lsls	r3, r3, #2
 802357c:	4929      	ldr	r1, [pc, #164]	@ (8023624 <USBD_LL_Init+0xc0>)
 802357e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8023580:	4b28      	ldr	r3, [pc, #160]	@ (8023624 <USBD_LL_Init+0xc0>)
 8023582:	4a29      	ldr	r2, [pc, #164]	@ (8023628 <USBD_LL_Init+0xc4>)
 8023584:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8023586:	4b27      	ldr	r3, [pc, #156]	@ (8023624 <USBD_LL_Init+0xc0>)
 8023588:	2208      	movs	r2, #8
 802358a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 802358c:	4b25      	ldr	r3, [pc, #148]	@ (8023624 <USBD_LL_Init+0xc0>)
 802358e:	2202      	movs	r2, #2
 8023590:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8023592:	4b24      	ldr	r3, [pc, #144]	@ (8023624 <USBD_LL_Init+0xc0>)
 8023594:	2202      	movs	r2, #2
 8023596:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8023598:	4b22      	ldr	r3, [pc, #136]	@ (8023624 <USBD_LL_Init+0xc0>)
 802359a:	2200      	movs	r2, #0
 802359c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 802359e:	4b21      	ldr	r3, [pc, #132]	@ (8023624 <USBD_LL_Init+0xc0>)
 80235a0:	2200      	movs	r2, #0
 80235a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80235a4:	4b1f      	ldr	r3, [pc, #124]	@ (8023624 <USBD_LL_Init+0xc0>)
 80235a6:	2200      	movs	r2, #0
 80235a8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80235aa:	4b1e      	ldr	r3, [pc, #120]	@ (8023624 <USBD_LL_Init+0xc0>)
 80235ac:	0018      	movs	r0, r3
 80235ae:	f7f5 ff7f 	bl	80194b0 <HAL_PCD_Init>
 80235b2:	1e03      	subs	r3, r0, #0
 80235b4:	d001      	beq.n	80235ba <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80235b6:	f7e9 fee3 	bl	800d380 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80235ba:	687a      	ldr	r2, [r7, #4]
 80235bc:	23b0      	movs	r3, #176	@ 0xb0
 80235be:	009b      	lsls	r3, r3, #2
 80235c0:	58d0      	ldr	r0, [r2, r3]
 80235c2:	2318      	movs	r3, #24
 80235c4:	2200      	movs	r2, #0
 80235c6:	2100      	movs	r1, #0
 80235c8:	f7f7 fd40 	bl	801b04c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80235cc:	687a      	ldr	r2, [r7, #4]
 80235ce:	23b0      	movs	r3, #176	@ 0xb0
 80235d0:	009b      	lsls	r3, r3, #2
 80235d2:	58d0      	ldr	r0, [r2, r3]
 80235d4:	2358      	movs	r3, #88	@ 0x58
 80235d6:	2200      	movs	r2, #0
 80235d8:	2180      	movs	r1, #128	@ 0x80
 80235da:	f7f7 fd37 	bl	801b04c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80235de:	687a      	ldr	r2, [r7, #4]
 80235e0:	23b0      	movs	r3, #176	@ 0xb0
 80235e2:	009b      	lsls	r3, r3, #2
 80235e4:	58d0      	ldr	r0, [r2, r3]
 80235e6:	23c0      	movs	r3, #192	@ 0xc0
 80235e8:	2200      	movs	r2, #0
 80235ea:	2181      	movs	r1, #129	@ 0x81
 80235ec:	f7f7 fd2e 	bl	801b04c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80235f0:	687a      	ldr	r2, [r7, #4]
 80235f2:	23b0      	movs	r3, #176	@ 0xb0
 80235f4:	009b      	lsls	r3, r3, #2
 80235f6:	58d0      	ldr	r0, [r2, r3]
 80235f8:	2388      	movs	r3, #136	@ 0x88
 80235fa:	005b      	lsls	r3, r3, #1
 80235fc:	2200      	movs	r2, #0
 80235fe:	2101      	movs	r1, #1
 8023600:	f7f7 fd24 	bl	801b04c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023604:	687a      	ldr	r2, [r7, #4]
 8023606:	23b0      	movs	r3, #176	@ 0xb0
 8023608:	009b      	lsls	r3, r3, #2
 802360a:	58d0      	ldr	r0, [r2, r3]
 802360c:	2380      	movs	r3, #128	@ 0x80
 802360e:	005b      	lsls	r3, r3, #1
 8023610:	2200      	movs	r2, #0
 8023612:	2182      	movs	r1, #130	@ 0x82
 8023614:	f7f7 fd1a 	bl	801b04c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8023618:	2300      	movs	r3, #0
}
 802361a:	0018      	movs	r0, r3
 802361c:	46bd      	mov	sp, r7
 802361e:	b002      	add	sp, #8
 8023620:	bd80      	pop	{r7, pc}
 8023622:	46c0      	nop			@ (mov r8, r8)
 8023624:	200032bc 	.word	0x200032bc
 8023628:	40005c00 	.word	0x40005c00

0802362c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 802362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802362e:	b085      	sub	sp, #20
 8023630:	af00      	add	r7, sp, #0
 8023632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023634:	210f      	movs	r1, #15
 8023636:	187b      	adds	r3, r7, r1
 8023638:	2200      	movs	r2, #0
 802363a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802363c:	260e      	movs	r6, #14
 802363e:	19bb      	adds	r3, r7, r6
 8023640:	2200      	movs	r2, #0
 8023642:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8023644:	687a      	ldr	r2, [r7, #4]
 8023646:	23b0      	movs	r3, #176	@ 0xb0
 8023648:	009b      	lsls	r3, r3, #2
 802364a:	58d3      	ldr	r3, [r2, r3]
 802364c:	000d      	movs	r5, r1
 802364e:	187c      	adds	r4, r7, r1
 8023650:	0018      	movs	r0, r3
 8023652:	f7f6 f82d 	bl	80196b0 <HAL_PCD_Start>
 8023656:	0003      	movs	r3, r0
 8023658:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802365a:	19bc      	adds	r4, r7, r6
 802365c:	197b      	adds	r3, r7, r5
 802365e:	781b      	ldrb	r3, [r3, #0]
 8023660:	0018      	movs	r0, r3
 8023662:	f000 f9bc 	bl	80239de <USBD_Get_USB_Status>
 8023666:	0003      	movs	r3, r0
 8023668:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802366a:	19bb      	adds	r3, r7, r6
 802366c:	781b      	ldrb	r3, [r3, #0]
}
 802366e:	0018      	movs	r0, r3
 8023670:	46bd      	mov	sp, r7
 8023672:	b005      	add	sp, #20
 8023674:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023676 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8023676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023678:	b085      	sub	sp, #20
 802367a:	af00      	add	r7, sp, #0
 802367c:	6078      	str	r0, [r7, #4]
 802367e:	000c      	movs	r4, r1
 8023680:	0010      	movs	r0, r2
 8023682:	0019      	movs	r1, r3
 8023684:	1cfb      	adds	r3, r7, #3
 8023686:	1c22      	adds	r2, r4, #0
 8023688:	701a      	strb	r2, [r3, #0]
 802368a:	1cbb      	adds	r3, r7, #2
 802368c:	1c02      	adds	r2, r0, #0
 802368e:	701a      	strb	r2, [r3, #0]
 8023690:	003b      	movs	r3, r7
 8023692:	1c0a      	adds	r2, r1, #0
 8023694:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023696:	260f      	movs	r6, #15
 8023698:	19bb      	adds	r3, r7, r6
 802369a:	2200      	movs	r2, #0
 802369c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802369e:	250e      	movs	r5, #14
 80236a0:	197b      	adds	r3, r7, r5
 80236a2:	2200      	movs	r2, #0
 80236a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80236a6:	687a      	ldr	r2, [r7, #4]
 80236a8:	23b0      	movs	r3, #176	@ 0xb0
 80236aa:	009b      	lsls	r3, r3, #2
 80236ac:	58d0      	ldr	r0, [r2, r3]
 80236ae:	19bc      	adds	r4, r7, r6
 80236b0:	1cbb      	adds	r3, r7, #2
 80236b2:	781d      	ldrb	r5, [r3, #0]
 80236b4:	003b      	movs	r3, r7
 80236b6:	881a      	ldrh	r2, [r3, #0]
 80236b8:	1cfb      	adds	r3, r7, #3
 80236ba:	7819      	ldrb	r1, [r3, #0]
 80236bc:	002b      	movs	r3, r5
 80236be:	f7f6 f98c 	bl	80199da <HAL_PCD_EP_Open>
 80236c2:	0003      	movs	r3, r0
 80236c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80236c6:	250e      	movs	r5, #14
 80236c8:	197c      	adds	r4, r7, r5
 80236ca:	19bb      	adds	r3, r7, r6
 80236cc:	781b      	ldrb	r3, [r3, #0]
 80236ce:	0018      	movs	r0, r3
 80236d0:	f000 f985 	bl	80239de <USBD_Get_USB_Status>
 80236d4:	0003      	movs	r3, r0
 80236d6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80236d8:	197b      	adds	r3, r7, r5
 80236da:	781b      	ldrb	r3, [r3, #0]
}
 80236dc:	0018      	movs	r0, r3
 80236de:	46bd      	mov	sp, r7
 80236e0:	b005      	add	sp, #20
 80236e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080236e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80236e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236e6:	b085      	sub	sp, #20
 80236e8:	af00      	add	r7, sp, #0
 80236ea:	6078      	str	r0, [r7, #4]
 80236ec:	000a      	movs	r2, r1
 80236ee:	1cfb      	adds	r3, r7, #3
 80236f0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80236f2:	210f      	movs	r1, #15
 80236f4:	187b      	adds	r3, r7, r1
 80236f6:	2200      	movs	r2, #0
 80236f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80236fa:	260e      	movs	r6, #14
 80236fc:	19bb      	adds	r3, r7, r6
 80236fe:	2200      	movs	r2, #0
 8023700:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023702:	687a      	ldr	r2, [r7, #4]
 8023704:	23b0      	movs	r3, #176	@ 0xb0
 8023706:	009b      	lsls	r3, r3, #2
 8023708:	58d2      	ldr	r2, [r2, r3]
 802370a:	000d      	movs	r5, r1
 802370c:	187c      	adds	r4, r7, r1
 802370e:	1cfb      	adds	r3, r7, #3
 8023710:	781b      	ldrb	r3, [r3, #0]
 8023712:	0019      	movs	r1, r3
 8023714:	0010      	movs	r0, r2
 8023716:	f7f6 f9cf 	bl	8019ab8 <HAL_PCD_EP_Close>
 802371a:	0003      	movs	r3, r0
 802371c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802371e:	19bc      	adds	r4, r7, r6
 8023720:	197b      	adds	r3, r7, r5
 8023722:	781b      	ldrb	r3, [r3, #0]
 8023724:	0018      	movs	r0, r3
 8023726:	f000 f95a 	bl	80239de <USBD_Get_USB_Status>
 802372a:	0003      	movs	r3, r0
 802372c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802372e:	19bb      	adds	r3, r7, r6
 8023730:	781b      	ldrb	r3, [r3, #0]
}
 8023732:	0018      	movs	r0, r3
 8023734:	46bd      	mov	sp, r7
 8023736:	b005      	add	sp, #20
 8023738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802373a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802373a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802373c:	b085      	sub	sp, #20
 802373e:	af00      	add	r7, sp, #0
 8023740:	6078      	str	r0, [r7, #4]
 8023742:	000a      	movs	r2, r1
 8023744:	1cfb      	adds	r3, r7, #3
 8023746:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023748:	210f      	movs	r1, #15
 802374a:	187b      	adds	r3, r7, r1
 802374c:	2200      	movs	r2, #0
 802374e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023750:	260e      	movs	r6, #14
 8023752:	19bb      	adds	r3, r7, r6
 8023754:	2200      	movs	r2, #0
 8023756:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023758:	687a      	ldr	r2, [r7, #4]
 802375a:	23b0      	movs	r3, #176	@ 0xb0
 802375c:	009b      	lsls	r3, r3, #2
 802375e:	58d2      	ldr	r2, [r2, r3]
 8023760:	000d      	movs	r5, r1
 8023762:	187c      	adds	r4, r7, r1
 8023764:	1cfb      	adds	r3, r7, #3
 8023766:	781b      	ldrb	r3, [r3, #0]
 8023768:	0019      	movs	r1, r3
 802376a:	0010      	movs	r0, r2
 802376c:	f7f6 fa81 	bl	8019c72 <HAL_PCD_EP_SetStall>
 8023770:	0003      	movs	r3, r0
 8023772:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023774:	19bc      	adds	r4, r7, r6
 8023776:	197b      	adds	r3, r7, r5
 8023778:	781b      	ldrb	r3, [r3, #0]
 802377a:	0018      	movs	r0, r3
 802377c:	f000 f92f 	bl	80239de <USBD_Get_USB_Status>
 8023780:	0003      	movs	r3, r0
 8023782:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023784:	19bb      	adds	r3, r7, r6
 8023786:	781b      	ldrb	r3, [r3, #0]
}
 8023788:	0018      	movs	r0, r3
 802378a:	46bd      	mov	sp, r7
 802378c:	b005      	add	sp, #20
 802378e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023790 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023792:	b085      	sub	sp, #20
 8023794:	af00      	add	r7, sp, #0
 8023796:	6078      	str	r0, [r7, #4]
 8023798:	000a      	movs	r2, r1
 802379a:	1cfb      	adds	r3, r7, #3
 802379c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802379e:	210f      	movs	r1, #15
 80237a0:	187b      	adds	r3, r7, r1
 80237a2:	2200      	movs	r2, #0
 80237a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80237a6:	260e      	movs	r6, #14
 80237a8:	19bb      	adds	r3, r7, r6
 80237aa:	2200      	movs	r2, #0
 80237ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80237ae:	687a      	ldr	r2, [r7, #4]
 80237b0:	23b0      	movs	r3, #176	@ 0xb0
 80237b2:	009b      	lsls	r3, r3, #2
 80237b4:	58d2      	ldr	r2, [r2, r3]
 80237b6:	000d      	movs	r5, r1
 80237b8:	187c      	adds	r4, r7, r1
 80237ba:	1cfb      	adds	r3, r7, #3
 80237bc:	781b      	ldrb	r3, [r3, #0]
 80237be:	0019      	movs	r1, r3
 80237c0:	0010      	movs	r0, r2
 80237c2:	f7f6 fab2 	bl	8019d2a <HAL_PCD_EP_ClrStall>
 80237c6:	0003      	movs	r3, r0
 80237c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80237ca:	19bc      	adds	r4, r7, r6
 80237cc:	197b      	adds	r3, r7, r5
 80237ce:	781b      	ldrb	r3, [r3, #0]
 80237d0:	0018      	movs	r0, r3
 80237d2:	f000 f904 	bl	80239de <USBD_Get_USB_Status>
 80237d6:	0003      	movs	r3, r0
 80237d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80237da:	19bb      	adds	r3, r7, r6
 80237dc:	781b      	ldrb	r3, [r3, #0]
}
 80237de:	0018      	movs	r0, r3
 80237e0:	46bd      	mov	sp, r7
 80237e2:	b005      	add	sp, #20
 80237e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080237e6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80237e6:	b580      	push	{r7, lr}
 80237e8:	b084      	sub	sp, #16
 80237ea:	af00      	add	r7, sp, #0
 80237ec:	6078      	str	r0, [r7, #4]
 80237ee:	000a      	movs	r2, r1
 80237f0:	1cfb      	adds	r3, r7, #3
 80237f2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80237f4:	687a      	ldr	r2, [r7, #4]
 80237f6:	23b0      	movs	r3, #176	@ 0xb0
 80237f8:	009b      	lsls	r3, r3, #2
 80237fa:	58d3      	ldr	r3, [r2, r3]
 80237fc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80237fe:	1cfb      	adds	r3, r7, #3
 8023800:	781b      	ldrb	r3, [r3, #0]
 8023802:	b25b      	sxtb	r3, r3
 8023804:	2b00      	cmp	r3, #0
 8023806:	da0d      	bge.n	8023824 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023808:	1cfb      	adds	r3, r7, #3
 802380a:	781b      	ldrb	r3, [r3, #0]
 802380c:	227f      	movs	r2, #127	@ 0x7f
 802380e:	4013      	ands	r3, r2
 8023810:	68f9      	ldr	r1, [r7, #12]
 8023812:	1c5a      	adds	r2, r3, #1
 8023814:	0013      	movs	r3, r2
 8023816:	009b      	lsls	r3, r3, #2
 8023818:	189b      	adds	r3, r3, r2
 802381a:	00db      	lsls	r3, r3, #3
 802381c:	18cb      	adds	r3, r1, r3
 802381e:	3302      	adds	r3, #2
 8023820:	781b      	ldrb	r3, [r3, #0]
 8023822:	e00d      	b.n	8023840 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023824:	1cfb      	adds	r3, r7, #3
 8023826:	781b      	ldrb	r3, [r3, #0]
 8023828:	227f      	movs	r2, #127	@ 0x7f
 802382a:	401a      	ands	r2, r3
 802382c:	68f8      	ldr	r0, [r7, #12]
 802382e:	23b5      	movs	r3, #181	@ 0xb5
 8023830:	0059      	lsls	r1, r3, #1
 8023832:	0013      	movs	r3, r2
 8023834:	009b      	lsls	r3, r3, #2
 8023836:	189b      	adds	r3, r3, r2
 8023838:	00db      	lsls	r3, r3, #3
 802383a:	18c3      	adds	r3, r0, r3
 802383c:	185b      	adds	r3, r3, r1
 802383e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023840:	0018      	movs	r0, r3
 8023842:	46bd      	mov	sp, r7
 8023844:	b004      	add	sp, #16
 8023846:	bd80      	pop	{r7, pc}

08023848 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8023848:	b5f0      	push	{r4, r5, r6, r7, lr}
 802384a:	b085      	sub	sp, #20
 802384c:	af00      	add	r7, sp, #0
 802384e:	6078      	str	r0, [r7, #4]
 8023850:	000a      	movs	r2, r1
 8023852:	1cfb      	adds	r3, r7, #3
 8023854:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023856:	210f      	movs	r1, #15
 8023858:	187b      	adds	r3, r7, r1
 802385a:	2200      	movs	r2, #0
 802385c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802385e:	260e      	movs	r6, #14
 8023860:	19bb      	adds	r3, r7, r6
 8023862:	2200      	movs	r2, #0
 8023864:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023866:	687a      	ldr	r2, [r7, #4]
 8023868:	23b0      	movs	r3, #176	@ 0xb0
 802386a:	009b      	lsls	r3, r3, #2
 802386c:	58d2      	ldr	r2, [r2, r3]
 802386e:	000d      	movs	r5, r1
 8023870:	187c      	adds	r4, r7, r1
 8023872:	1cfb      	adds	r3, r7, #3
 8023874:	781b      	ldrb	r3, [r3, #0]
 8023876:	0019      	movs	r1, r3
 8023878:	0010      	movs	r0, r2
 802387a:	f7f6 f883 	bl	8019984 <HAL_PCD_SetAddress>
 802387e:	0003      	movs	r3, r0
 8023880:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023882:	19bc      	adds	r4, r7, r6
 8023884:	197b      	adds	r3, r7, r5
 8023886:	781b      	ldrb	r3, [r3, #0]
 8023888:	0018      	movs	r0, r3
 802388a:	f000 f8a8 	bl	80239de <USBD_Get_USB_Status>
 802388e:	0003      	movs	r3, r0
 8023890:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023892:	19bb      	adds	r3, r7, r6
 8023894:	781b      	ldrb	r3, [r3, #0]
}
 8023896:	0018      	movs	r0, r3
 8023898:	46bd      	mov	sp, r7
 802389a:	b005      	add	sp, #20
 802389c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802389e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 802389e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238a0:	b087      	sub	sp, #28
 80238a2:	af00      	add	r7, sp, #0
 80238a4:	60f8      	str	r0, [r7, #12]
 80238a6:	0008      	movs	r0, r1
 80238a8:	607a      	str	r2, [r7, #4]
 80238aa:	0019      	movs	r1, r3
 80238ac:	230b      	movs	r3, #11
 80238ae:	18fb      	adds	r3, r7, r3
 80238b0:	1c02      	adds	r2, r0, #0
 80238b2:	701a      	strb	r2, [r3, #0]
 80238b4:	2408      	movs	r4, #8
 80238b6:	193b      	adds	r3, r7, r4
 80238b8:	1c0a      	adds	r2, r1, #0
 80238ba:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80238bc:	2117      	movs	r1, #23
 80238be:	187b      	adds	r3, r7, r1
 80238c0:	2200      	movs	r2, #0
 80238c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80238c4:	2516      	movs	r5, #22
 80238c6:	197b      	adds	r3, r7, r5
 80238c8:	2200      	movs	r2, #0
 80238ca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80238cc:	68fa      	ldr	r2, [r7, #12]
 80238ce:	23b0      	movs	r3, #176	@ 0xb0
 80238d0:	009b      	lsls	r3, r3, #2
 80238d2:	58d0      	ldr	r0, [r2, r3]
 80238d4:	193b      	adds	r3, r7, r4
 80238d6:	881d      	ldrh	r5, [r3, #0]
 80238d8:	000e      	movs	r6, r1
 80238da:	187c      	adds	r4, r7, r1
 80238dc:	687a      	ldr	r2, [r7, #4]
 80238de:	230b      	movs	r3, #11
 80238e0:	18fb      	adds	r3, r7, r3
 80238e2:	7819      	ldrb	r1, [r3, #0]
 80238e4:	002b      	movs	r3, r5
 80238e6:	f7f6 f988 	bl	8019bfa <HAL_PCD_EP_Transmit>
 80238ea:	0003      	movs	r3, r0
 80238ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80238ee:	2516      	movs	r5, #22
 80238f0:	197c      	adds	r4, r7, r5
 80238f2:	19bb      	adds	r3, r7, r6
 80238f4:	781b      	ldrb	r3, [r3, #0]
 80238f6:	0018      	movs	r0, r3
 80238f8:	f000 f871 	bl	80239de <USBD_Get_USB_Status>
 80238fc:	0003      	movs	r3, r0
 80238fe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023900:	197b      	adds	r3, r7, r5
 8023902:	781b      	ldrb	r3, [r3, #0]
}
 8023904:	0018      	movs	r0, r3
 8023906:	46bd      	mov	sp, r7
 8023908:	b007      	add	sp, #28
 802390a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802390c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 802390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802390e:	b087      	sub	sp, #28
 8023910:	af00      	add	r7, sp, #0
 8023912:	60f8      	str	r0, [r7, #12]
 8023914:	0008      	movs	r0, r1
 8023916:	607a      	str	r2, [r7, #4]
 8023918:	0019      	movs	r1, r3
 802391a:	230b      	movs	r3, #11
 802391c:	18fb      	adds	r3, r7, r3
 802391e:	1c02      	adds	r2, r0, #0
 8023920:	701a      	strb	r2, [r3, #0]
 8023922:	2408      	movs	r4, #8
 8023924:	193b      	adds	r3, r7, r4
 8023926:	1c0a      	adds	r2, r1, #0
 8023928:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802392a:	2117      	movs	r1, #23
 802392c:	187b      	adds	r3, r7, r1
 802392e:	2200      	movs	r2, #0
 8023930:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023932:	2516      	movs	r5, #22
 8023934:	197b      	adds	r3, r7, r5
 8023936:	2200      	movs	r2, #0
 8023938:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802393a:	68fa      	ldr	r2, [r7, #12]
 802393c:	23b0      	movs	r3, #176	@ 0xb0
 802393e:	009b      	lsls	r3, r3, #2
 8023940:	58d0      	ldr	r0, [r2, r3]
 8023942:	193b      	adds	r3, r7, r4
 8023944:	881d      	ldrh	r5, [r3, #0]
 8023946:	000e      	movs	r6, r1
 8023948:	187c      	adds	r4, r7, r1
 802394a:	687a      	ldr	r2, [r7, #4]
 802394c:	230b      	movs	r3, #11
 802394e:	18fb      	adds	r3, r7, r3
 8023950:	7819      	ldrb	r1, [r3, #0]
 8023952:	002b      	movs	r3, r5
 8023954:	f7f6 f901 	bl	8019b5a <HAL_PCD_EP_Receive>
 8023958:	0003      	movs	r3, r0
 802395a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802395c:	2516      	movs	r5, #22
 802395e:	197c      	adds	r4, r7, r5
 8023960:	19bb      	adds	r3, r7, r6
 8023962:	781b      	ldrb	r3, [r3, #0]
 8023964:	0018      	movs	r0, r3
 8023966:	f000 f83a 	bl	80239de <USBD_Get_USB_Status>
 802396a:	0003      	movs	r3, r0
 802396c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802396e:	197b      	adds	r3, r7, r5
 8023970:	781b      	ldrb	r3, [r3, #0]
}
 8023972:	0018      	movs	r0, r3
 8023974:	46bd      	mov	sp, r7
 8023976:	b007      	add	sp, #28
 8023978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802397a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802397a:	b580      	push	{r7, lr}
 802397c:	b082      	sub	sp, #8
 802397e:	af00      	add	r7, sp, #0
 8023980:	6078      	str	r0, [r7, #4]
 8023982:	000a      	movs	r2, r1
 8023984:	1cfb      	adds	r3, r7, #3
 8023986:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023988:	687a      	ldr	r2, [r7, #4]
 802398a:	23b0      	movs	r3, #176	@ 0xb0
 802398c:	009b      	lsls	r3, r3, #2
 802398e:	58d2      	ldr	r2, [r2, r3]
 8023990:	1cfb      	adds	r3, r7, #3
 8023992:	781b      	ldrb	r3, [r3, #0]
 8023994:	0019      	movs	r1, r3
 8023996:	0010      	movs	r0, r2
 8023998:	f7f6 f916 	bl	8019bc8 <HAL_PCD_EP_GetRxCount>
 802399c:	0003      	movs	r3, r0
}
 802399e:	0018      	movs	r0, r3
 80239a0:	46bd      	mov	sp, r7
 80239a2:	b002      	add	sp, #8
 80239a4:	bd80      	pop	{r7, pc}
	...

080239a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80239a8:	b580      	push	{r7, lr}
 80239aa:	b082      	sub	sp, #8
 80239ac:	af00      	add	r7, sp, #0
 80239ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80239b0:	4b02      	ldr	r3, [pc, #8]	@ (80239bc <USBD_static_malloc+0x14>)
}
 80239b2:	0018      	movs	r0, r3
 80239b4:	46bd      	mov	sp, r7
 80239b6:	b002      	add	sp, #8
 80239b8:	bd80      	pop	{r7, pc}
 80239ba:	46c0      	nop			@ (mov r8, r8)
 80239bc:	200035b0 	.word	0x200035b0

080239c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80239c0:	b580      	push	{r7, lr}
 80239c2:	b082      	sub	sp, #8
 80239c4:	af00      	add	r7, sp, #0
 80239c6:	6078      	str	r0, [r7, #4]

}
 80239c8:	46c0      	nop			@ (mov r8, r8)
 80239ca:	46bd      	mov	sp, r7
 80239cc:	b002      	add	sp, #8
 80239ce:	bd80      	pop	{r7, pc}

080239d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80239d0:	b580      	push	{r7, lr}
 80239d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80239d4:	f7e9 fb68 	bl	800d0a8 <SystemClock_Config>
}
 80239d8:	46c0      	nop			@ (mov r8, r8)
 80239da:	46bd      	mov	sp, r7
 80239dc:	bd80      	pop	{r7, pc}

080239de <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80239de:	b580      	push	{r7, lr}
 80239e0:	b084      	sub	sp, #16
 80239e2:	af00      	add	r7, sp, #0
 80239e4:	0002      	movs	r2, r0
 80239e6:	1dfb      	adds	r3, r7, #7
 80239e8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239ea:	230f      	movs	r3, #15
 80239ec:	18fb      	adds	r3, r7, r3
 80239ee:	2200      	movs	r2, #0
 80239f0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80239f2:	1dfb      	adds	r3, r7, #7
 80239f4:	781b      	ldrb	r3, [r3, #0]
 80239f6:	2b03      	cmp	r3, #3
 80239f8:	d017      	beq.n	8023a2a <USBD_Get_USB_Status+0x4c>
 80239fa:	dc1b      	bgt.n	8023a34 <USBD_Get_USB_Status+0x56>
 80239fc:	2b02      	cmp	r3, #2
 80239fe:	d00f      	beq.n	8023a20 <USBD_Get_USB_Status+0x42>
 8023a00:	dc18      	bgt.n	8023a34 <USBD_Get_USB_Status+0x56>
 8023a02:	2b00      	cmp	r3, #0
 8023a04:	d002      	beq.n	8023a0c <USBD_Get_USB_Status+0x2e>
 8023a06:	2b01      	cmp	r3, #1
 8023a08:	d005      	beq.n	8023a16 <USBD_Get_USB_Status+0x38>
 8023a0a:	e013      	b.n	8023a34 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023a0c:	230f      	movs	r3, #15
 8023a0e:	18fb      	adds	r3, r7, r3
 8023a10:	2200      	movs	r2, #0
 8023a12:	701a      	strb	r2, [r3, #0]
    break;
 8023a14:	e013      	b.n	8023a3e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023a16:	230f      	movs	r3, #15
 8023a18:	18fb      	adds	r3, r7, r3
 8023a1a:	2202      	movs	r2, #2
 8023a1c:	701a      	strb	r2, [r3, #0]
    break;
 8023a1e:	e00e      	b.n	8023a3e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023a20:	230f      	movs	r3, #15
 8023a22:	18fb      	adds	r3, r7, r3
 8023a24:	2201      	movs	r2, #1
 8023a26:	701a      	strb	r2, [r3, #0]
    break;
 8023a28:	e009      	b.n	8023a3e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023a2a:	230f      	movs	r3, #15
 8023a2c:	18fb      	adds	r3, r7, r3
 8023a2e:	2202      	movs	r2, #2
 8023a30:	701a      	strb	r2, [r3, #0]
    break;
 8023a32:	e004      	b.n	8023a3e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023a34:	230f      	movs	r3, #15
 8023a36:	18fb      	adds	r3, r7, r3
 8023a38:	2202      	movs	r2, #2
 8023a3a:	701a      	strb	r2, [r3, #0]
    break;
 8023a3c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8023a3e:	230f      	movs	r3, #15
 8023a40:	18fb      	adds	r3, r7, r3
 8023a42:	781b      	ldrb	r3, [r3, #0]
}
 8023a44:	0018      	movs	r0, r3
 8023a46:	46bd      	mov	sp, r7
 8023a48:	b004      	add	sp, #16
 8023a4a:	bd80      	pop	{r7, pc}

08023a4c <arm_cfft_radix4by2_q31>:
 8023a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a4e:	465f      	mov	r7, fp
 8023a50:	4656      	mov	r6, sl
 8023a52:	464d      	mov	r5, r9
 8023a54:	4644      	mov	r4, r8
 8023a56:	000b      	movs	r3, r1
 8023a58:	b4f0      	push	{r4, r5, r6, r7}
 8023a5a:	085b      	lsrs	r3, r3, #1
 8023a5c:	b08f      	sub	sp, #60	@ 0x3c
 8023a5e:	910a      	str	r1, [sp, #40]	@ 0x28
 8023a60:	0007      	movs	r7, r0
 8023a62:	9009      	str	r0, [sp, #36]	@ 0x24
 8023a64:	0011      	movs	r1, r2
 8023a66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023a68:	930c      	str	r3, [sp, #48]	@ 0x30
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	d100      	bne.n	8023a70 <arm_cfft_radix4by2_q31+0x24>
 8023a6e:	e0a0      	b.n	8023bb2 <arm_cfft_radix4by2_q31+0x166>
 8023a70:	0002      	movs	r2, r0
 8023a72:	00db      	lsls	r3, r3, #3
 8023a74:	3204      	adds	r2, #4
 8023a76:	4691      	mov	r9, r2
 8023a78:	4698      	mov	r8, r3
 8023a7a:	000a      	movs	r2, r1
 8023a7c:	464e      	mov	r6, r9
 8023a7e:	4442      	add	r2, r8
 8023a80:	4699      	mov	r9, r3
 8023a82:	4688      	mov	r8, r1
 8023a84:	9208      	str	r2, [sp, #32]
 8023a86:	900d      	str	r0, [sp, #52]	@ 0x34
 8023a88:	4643      	mov	r3, r8
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	469b      	mov	fp, r3
 8023a8e:	4643      	mov	r3, r8
 8023a90:	685b      	ldr	r3, [r3, #4]
 8023a92:	469a      	mov	sl, r3
 8023a94:	683b      	ldr	r3, [r7, #0]
 8023a96:	109c      	asrs	r4, r3, #2
 8023a98:	464b      	mov	r3, r9
 8023a9a:	58fb      	ldr	r3, [r7, r3]
 8023a9c:	109a      	asrs	r2, r3, #2
 8023a9e:	18a3      	adds	r3, r4, r2
 8023aa0:	603b      	str	r3, [r7, #0]
 8023aa2:	6833      	ldr	r3, [r6, #0]
 8023aa4:	1aa4      	subs	r4, r4, r2
 8023aa6:	109d      	asrs	r5, r3, #2
 8023aa8:	464b      	mov	r3, r9
 8023aaa:	58f3      	ldr	r3, [r6, r3]
 8023aac:	17e2      	asrs	r2, r4, #31
 8023aae:	109b      	asrs	r3, r3, #2
 8023ab0:	18e9      	adds	r1, r5, r3
 8023ab2:	6031      	str	r1, [r6, #0]
 8023ab4:	0011      	movs	r1, r2
 8023ab6:	465a      	mov	r2, fp
 8023ab8:	17d2      	asrs	r2, r2, #31
 8023aba:	0010      	movs	r0, r2
 8023abc:	4652      	mov	r2, sl
 8023abe:	1aed      	subs	r5, r5, r3
 8023ac0:	17eb      	asrs	r3, r5, #31
 8023ac2:	17d2      	asrs	r2, r2, #31
 8023ac4:	9307      	str	r3, [sp, #28]
 8023ac6:	9204      	str	r2, [sp, #16]
 8023ac8:	0003      	movs	r3, r0
 8023aca:	465a      	mov	r2, fp
 8023acc:	9006      	str	r0, [sp, #24]
 8023ace:	0020      	movs	r0, r4
 8023ad0:	9105      	str	r1, [sp, #20]
 8023ad2:	f7dc fd75 	bl	80005c0 <__aeabi_lmul>
 8023ad6:	2280      	movs	r2, #128	@ 0x80
 8023ad8:	2300      	movs	r3, #0
 8023ada:	0612      	lsls	r2, r2, #24
 8023adc:	1880      	adds	r0, r0, r2
 8023ade:	4159      	adcs	r1, r3
 8023ae0:	2300      	movs	r3, #0
 8023ae2:	9101      	str	r1, [sp, #4]
 8023ae4:	9300      	str	r3, [sp, #0]
 8023ae6:	4652      	mov	r2, sl
 8023ae8:	9b04      	ldr	r3, [sp, #16]
 8023aea:	0028      	movs	r0, r5
 8023aec:	17e9      	asrs	r1, r5, #31
 8023aee:	f7dc fd67 	bl	80005c0 <__aeabi_lmul>
 8023af2:	9a00      	ldr	r2, [sp, #0]
 8023af4:	9b01      	ldr	r3, [sp, #4]
 8023af6:	1880      	adds	r0, r0, r2
 8023af8:	4159      	adcs	r1, r3
 8023afa:	2280      	movs	r2, #128	@ 0x80
 8023afc:	2300      	movs	r3, #0
 8023afe:	0612      	lsls	r2, r2, #24
 8023b00:	1880      	adds	r0, r0, r2
 8023b02:	4159      	adcs	r1, r3
 8023b04:	464a      	mov	r2, r9
 8023b06:	004b      	lsls	r3, r1, #1
 8023b08:	50bb      	str	r3, [r7, r2]
 8023b0a:	4658      	mov	r0, fp
 8023b0c:	002a      	movs	r2, r5
 8023b0e:	9b07      	ldr	r3, [sp, #28]
 8023b10:	9906      	ldr	r1, [sp, #24]
 8023b12:	f7dc fd55 	bl	80005c0 <__aeabi_lmul>
 8023b16:	2280      	movs	r2, #128	@ 0x80
 8023b18:	2300      	movs	r3, #0
 8023b1a:	0612      	lsls	r2, r2, #24
 8023b1c:	1880      	adds	r0, r0, r2
 8023b1e:	4159      	adcs	r1, r3
 8023b20:	2000      	movs	r0, #0
 8023b22:	9103      	str	r1, [sp, #12]
 8023b24:	9002      	str	r0, [sp, #8]
 8023b26:	4652      	mov	r2, sl
 8023b28:	9b04      	ldr	r3, [sp, #16]
 8023b2a:	0020      	movs	r0, r4
 8023b2c:	9905      	ldr	r1, [sp, #20]
 8023b2e:	f7dc fd47 	bl	80005c0 <__aeabi_lmul>
 8023b32:	9a02      	ldr	r2, [sp, #8]
 8023b34:	9b03      	ldr	r3, [sp, #12]
 8023b36:	1a12      	subs	r2, r2, r0
 8023b38:	418b      	sbcs	r3, r1
 8023b3a:	2080      	movs	r0, #128	@ 0x80
 8023b3c:	2100      	movs	r1, #0
 8023b3e:	0600      	lsls	r0, r0, #24
 8023b40:	1812      	adds	r2, r2, r0
 8023b42:	414b      	adcs	r3, r1
 8023b44:	464a      	mov	r2, r9
 8023b46:	005b      	lsls	r3, r3, #1
 8023b48:	50b3      	str	r3, [r6, r2]
 8023b4a:	2308      	movs	r3, #8
 8023b4c:	469c      	mov	ip, r3
 8023b4e:	9b08      	ldr	r3, [sp, #32]
 8023b50:	44e0      	add	r8, ip
 8023b52:	3708      	adds	r7, #8
 8023b54:	3608      	adds	r6, #8
 8023b56:	4598      	cmp	r8, r3
 8023b58:	d196      	bne.n	8023a88 <arm_cfft_radix4by2_q31+0x3c>
 8023b5a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023b5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023b5e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023b60:	2302      	movs	r3, #2
 8023b62:	003a      	movs	r2, r7
 8023b64:	0029      	movs	r1, r5
 8023b66:	0020      	movs	r0, r4
 8023b68:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023b6a:	f000 f957 	bl	8023e1c <arm_radix4_butterfly_q31>
 8023b6e:	46a4      	mov	ip, r4
 8023b70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023b72:	2302      	movs	r3, #2
 8023b74:	0088      	lsls	r0, r1, #2
 8023b76:	4460      	add	r0, ip
 8023b78:	003a      	movs	r2, r7
 8023b7a:	0029      	movs	r1, r5
 8023b7c:	f000 f94e 	bl	8023e1c <arm_radix4_butterfly_q31>
 8023b80:	46a4      	mov	ip, r4
 8023b82:	0128      	lsls	r0, r5, #4
 8023b84:	4460      	add	r0, ip
 8023b86:	6833      	ldr	r3, [r6, #0]
 8023b88:	005b      	lsls	r3, r3, #1
 8023b8a:	6033      	str	r3, [r6, #0]
 8023b8c:	6873      	ldr	r3, [r6, #4]
 8023b8e:	005b      	lsls	r3, r3, #1
 8023b90:	6073      	str	r3, [r6, #4]
 8023b92:	68b3      	ldr	r3, [r6, #8]
 8023b94:	005b      	lsls	r3, r3, #1
 8023b96:	60b3      	str	r3, [r6, #8]
 8023b98:	68f3      	ldr	r3, [r6, #12]
 8023b9a:	005b      	lsls	r3, r3, #1
 8023b9c:	60f3      	str	r3, [r6, #12]
 8023b9e:	3610      	adds	r6, #16
 8023ba0:	42b0      	cmp	r0, r6
 8023ba2:	d1f0      	bne.n	8023b86 <arm_cfft_radix4by2_q31+0x13a>
 8023ba4:	b00f      	add	sp, #60	@ 0x3c
 8023ba6:	bc3c      	pop	{r2, r3, r4, r5}
 8023ba8:	4690      	mov	r8, r2
 8023baa:	4699      	mov	r9, r3
 8023bac:	46a2      	mov	sl, r4
 8023bae:	46ab      	mov	fp, r5
 8023bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bb2:	2302      	movs	r3, #2
 8023bb4:	2100      	movs	r1, #0
 8023bb6:	0015      	movs	r5, r2
 8023bb8:	f000 f930 	bl	8023e1c <arm_radix4_butterfly_q31>
 8023bbc:	46bc      	mov	ip, r7
 8023bbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023bc0:	002a      	movs	r2, r5
 8023bc2:	0098      	lsls	r0, r3, #2
 8023bc4:	4460      	add	r0, ip
 8023bc6:	2302      	movs	r3, #2
 8023bc8:	2100      	movs	r1, #0
 8023bca:	f000 f927 	bl	8023e1c <arm_radix4_butterfly_q31>
 8023bce:	e7e9      	b.n	8023ba4 <arm_cfft_radix4by2_q31+0x158>

08023bd0 <arm_cfft_radix4by2_inverse_q31>:
 8023bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bd2:	465f      	mov	r7, fp
 8023bd4:	4656      	mov	r6, sl
 8023bd6:	464d      	mov	r5, r9
 8023bd8:	4644      	mov	r4, r8
 8023bda:	000b      	movs	r3, r1
 8023bdc:	b4f0      	push	{r4, r5, r6, r7}
 8023bde:	085b      	lsrs	r3, r3, #1
 8023be0:	b08f      	sub	sp, #60	@ 0x3c
 8023be2:	910a      	str	r1, [sp, #40]	@ 0x28
 8023be4:	0007      	movs	r7, r0
 8023be6:	9009      	str	r0, [sp, #36]	@ 0x24
 8023be8:	0011      	movs	r1, r2
 8023bea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023bec:	930c      	str	r3, [sp, #48]	@ 0x30
 8023bee:	2b00      	cmp	r3, #0
 8023bf0:	d100      	bne.n	8023bf4 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023bf2:	e0a0      	b.n	8023d36 <arm_cfft_radix4by2_inverse_q31+0x166>
 8023bf4:	0002      	movs	r2, r0
 8023bf6:	00db      	lsls	r3, r3, #3
 8023bf8:	3204      	adds	r2, #4
 8023bfa:	4691      	mov	r9, r2
 8023bfc:	4698      	mov	r8, r3
 8023bfe:	000a      	movs	r2, r1
 8023c00:	464e      	mov	r6, r9
 8023c02:	4442      	add	r2, r8
 8023c04:	4699      	mov	r9, r3
 8023c06:	4688      	mov	r8, r1
 8023c08:	9208      	str	r2, [sp, #32]
 8023c0a:	900d      	str	r0, [sp, #52]	@ 0x34
 8023c0c:	4643      	mov	r3, r8
 8023c0e:	681b      	ldr	r3, [r3, #0]
 8023c10:	469b      	mov	fp, r3
 8023c12:	4643      	mov	r3, r8
 8023c14:	685b      	ldr	r3, [r3, #4]
 8023c16:	469a      	mov	sl, r3
 8023c18:	683b      	ldr	r3, [r7, #0]
 8023c1a:	109c      	asrs	r4, r3, #2
 8023c1c:	464b      	mov	r3, r9
 8023c1e:	58fb      	ldr	r3, [r7, r3]
 8023c20:	109a      	asrs	r2, r3, #2
 8023c22:	18a3      	adds	r3, r4, r2
 8023c24:	603b      	str	r3, [r7, #0]
 8023c26:	6833      	ldr	r3, [r6, #0]
 8023c28:	1aa4      	subs	r4, r4, r2
 8023c2a:	109d      	asrs	r5, r3, #2
 8023c2c:	464b      	mov	r3, r9
 8023c2e:	58f3      	ldr	r3, [r6, r3]
 8023c30:	17e2      	asrs	r2, r4, #31
 8023c32:	109b      	asrs	r3, r3, #2
 8023c34:	18e9      	adds	r1, r5, r3
 8023c36:	6031      	str	r1, [r6, #0]
 8023c38:	0011      	movs	r1, r2
 8023c3a:	465a      	mov	r2, fp
 8023c3c:	17d2      	asrs	r2, r2, #31
 8023c3e:	0010      	movs	r0, r2
 8023c40:	4652      	mov	r2, sl
 8023c42:	1aed      	subs	r5, r5, r3
 8023c44:	17eb      	asrs	r3, r5, #31
 8023c46:	17d2      	asrs	r2, r2, #31
 8023c48:	9307      	str	r3, [sp, #28]
 8023c4a:	9204      	str	r2, [sp, #16]
 8023c4c:	0003      	movs	r3, r0
 8023c4e:	465a      	mov	r2, fp
 8023c50:	9006      	str	r0, [sp, #24]
 8023c52:	0020      	movs	r0, r4
 8023c54:	9105      	str	r1, [sp, #20]
 8023c56:	f7dc fcb3 	bl	80005c0 <__aeabi_lmul>
 8023c5a:	2280      	movs	r2, #128	@ 0x80
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	0612      	lsls	r2, r2, #24
 8023c60:	1880      	adds	r0, r0, r2
 8023c62:	4159      	adcs	r1, r3
 8023c64:	2300      	movs	r3, #0
 8023c66:	9101      	str	r1, [sp, #4]
 8023c68:	9300      	str	r3, [sp, #0]
 8023c6a:	4652      	mov	r2, sl
 8023c6c:	9b04      	ldr	r3, [sp, #16]
 8023c6e:	0028      	movs	r0, r5
 8023c70:	17e9      	asrs	r1, r5, #31
 8023c72:	f7dc fca5 	bl	80005c0 <__aeabi_lmul>
 8023c76:	9a00      	ldr	r2, [sp, #0]
 8023c78:	9b01      	ldr	r3, [sp, #4]
 8023c7a:	1a12      	subs	r2, r2, r0
 8023c7c:	418b      	sbcs	r3, r1
 8023c7e:	2080      	movs	r0, #128	@ 0x80
 8023c80:	2100      	movs	r1, #0
 8023c82:	0600      	lsls	r0, r0, #24
 8023c84:	1812      	adds	r2, r2, r0
 8023c86:	414b      	adcs	r3, r1
 8023c88:	464a      	mov	r2, r9
 8023c8a:	005b      	lsls	r3, r3, #1
 8023c8c:	50bb      	str	r3, [r7, r2]
 8023c8e:	4658      	mov	r0, fp
 8023c90:	002a      	movs	r2, r5
 8023c92:	9b07      	ldr	r3, [sp, #28]
 8023c94:	9906      	ldr	r1, [sp, #24]
 8023c96:	f7dc fc93 	bl	80005c0 <__aeabi_lmul>
 8023c9a:	2280      	movs	r2, #128	@ 0x80
 8023c9c:	2300      	movs	r3, #0
 8023c9e:	0612      	lsls	r2, r2, #24
 8023ca0:	1880      	adds	r0, r0, r2
 8023ca2:	4159      	adcs	r1, r3
 8023ca4:	2000      	movs	r0, #0
 8023ca6:	9103      	str	r1, [sp, #12]
 8023ca8:	9002      	str	r0, [sp, #8]
 8023caa:	4652      	mov	r2, sl
 8023cac:	9b04      	ldr	r3, [sp, #16]
 8023cae:	0020      	movs	r0, r4
 8023cb0:	9905      	ldr	r1, [sp, #20]
 8023cb2:	f7dc fc85 	bl	80005c0 <__aeabi_lmul>
 8023cb6:	9b02      	ldr	r3, [sp, #8]
 8023cb8:	9c03      	ldr	r4, [sp, #12]
 8023cba:	18c0      	adds	r0, r0, r3
 8023cbc:	4161      	adcs	r1, r4
 8023cbe:	2380      	movs	r3, #128	@ 0x80
 8023cc0:	2400      	movs	r4, #0
 8023cc2:	061b      	lsls	r3, r3, #24
 8023cc4:	18c0      	adds	r0, r0, r3
 8023cc6:	4161      	adcs	r1, r4
 8023cc8:	464a      	mov	r2, r9
 8023cca:	004b      	lsls	r3, r1, #1
 8023ccc:	50b3      	str	r3, [r6, r2]
 8023cce:	2308      	movs	r3, #8
 8023cd0:	469c      	mov	ip, r3
 8023cd2:	9b08      	ldr	r3, [sp, #32]
 8023cd4:	44e0      	add	r8, ip
 8023cd6:	3708      	adds	r7, #8
 8023cd8:	3608      	adds	r6, #8
 8023cda:	4598      	cmp	r8, r3
 8023cdc:	d196      	bne.n	8023c0c <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023cde:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023ce0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023ce2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023ce4:	2302      	movs	r3, #2
 8023ce6:	003a      	movs	r2, r7
 8023ce8:	0029      	movs	r1, r5
 8023cea:	0020      	movs	r0, r4
 8023cec:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023cee:	f000 fb3b 	bl	8024368 <arm_radix4_butterfly_inverse_q31>
 8023cf2:	46a4      	mov	ip, r4
 8023cf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023cf6:	2302      	movs	r3, #2
 8023cf8:	0088      	lsls	r0, r1, #2
 8023cfa:	4460      	add	r0, ip
 8023cfc:	003a      	movs	r2, r7
 8023cfe:	0029      	movs	r1, r5
 8023d00:	f000 fb32 	bl	8024368 <arm_radix4_butterfly_inverse_q31>
 8023d04:	46a4      	mov	ip, r4
 8023d06:	0128      	lsls	r0, r5, #4
 8023d08:	4460      	add	r0, ip
 8023d0a:	6833      	ldr	r3, [r6, #0]
 8023d0c:	005b      	lsls	r3, r3, #1
 8023d0e:	6033      	str	r3, [r6, #0]
 8023d10:	6873      	ldr	r3, [r6, #4]
 8023d12:	005b      	lsls	r3, r3, #1
 8023d14:	6073      	str	r3, [r6, #4]
 8023d16:	68b3      	ldr	r3, [r6, #8]
 8023d18:	005b      	lsls	r3, r3, #1
 8023d1a:	60b3      	str	r3, [r6, #8]
 8023d1c:	68f3      	ldr	r3, [r6, #12]
 8023d1e:	005b      	lsls	r3, r3, #1
 8023d20:	60f3      	str	r3, [r6, #12]
 8023d22:	3610      	adds	r6, #16
 8023d24:	42b0      	cmp	r0, r6
 8023d26:	d1f0      	bne.n	8023d0a <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023d28:	b00f      	add	sp, #60	@ 0x3c
 8023d2a:	bc3c      	pop	{r2, r3, r4, r5}
 8023d2c:	4690      	mov	r8, r2
 8023d2e:	4699      	mov	r9, r3
 8023d30:	46a2      	mov	sl, r4
 8023d32:	46ab      	mov	fp, r5
 8023d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d36:	2302      	movs	r3, #2
 8023d38:	2100      	movs	r1, #0
 8023d3a:	0015      	movs	r5, r2
 8023d3c:	f000 fb14 	bl	8024368 <arm_radix4_butterfly_inverse_q31>
 8023d40:	46bc      	mov	ip, r7
 8023d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023d44:	002a      	movs	r2, r5
 8023d46:	0098      	lsls	r0, r3, #2
 8023d48:	4460      	add	r0, ip
 8023d4a:	2302      	movs	r3, #2
 8023d4c:	2100      	movs	r1, #0
 8023d4e:	f000 fb0b 	bl	8024368 <arm_radix4_butterfly_inverse_q31>
 8023d52:	e7e9      	b.n	8023d28 <arm_cfft_radix4by2_inverse_q31+0x158>

08023d54 <arm_cfft_q31>:
 8023d54:	b570      	push	{r4, r5, r6, lr}
 8023d56:	001e      	movs	r6, r3
 8023d58:	2380      	movs	r3, #128	@ 0x80
 8023d5a:	000d      	movs	r5, r1
 8023d5c:	0004      	movs	r4, r0
 8023d5e:	8801      	ldrh	r1, [r0, #0]
 8023d60:	005b      	lsls	r3, r3, #1
 8023d62:	2a01      	cmp	r2, #1
 8023d64:	d028      	beq.n	8023db8 <arm_cfft_q31+0x64>
 8023d66:	4299      	cmp	r1, r3
 8023d68:	d020      	beq.n	8023dac <arm_cfft_q31+0x58>
 8023d6a:	d812      	bhi.n	8023d92 <arm_cfft_q31+0x3e>
 8023d6c:	2920      	cmp	r1, #32
 8023d6e:	d004      	beq.n	8023d7a <arm_cfft_q31+0x26>
 8023d70:	d949      	bls.n	8023e06 <arm_cfft_q31+0xb2>
 8023d72:	2940      	cmp	r1, #64	@ 0x40
 8023d74:	d01a      	beq.n	8023dac <arm_cfft_q31+0x58>
 8023d76:	2980      	cmp	r1, #128	@ 0x80
 8023d78:	d103      	bne.n	8023d82 <arm_cfft_q31+0x2e>
 8023d7a:	6862      	ldr	r2, [r4, #4]
 8023d7c:	0028      	movs	r0, r5
 8023d7e:	f7ff fe65 	bl	8023a4c <arm_cfft_radix4by2_q31>
 8023d82:	2e00      	cmp	r6, #0
 8023d84:	d004      	beq.n	8023d90 <arm_cfft_q31+0x3c>
 8023d86:	68a2      	ldr	r2, [r4, #8]
 8023d88:	89a1      	ldrh	r1, [r4, #12]
 8023d8a:	0028      	movs	r0, r5
 8023d8c:	f7dc f9bc 	bl	8000108 <arm_bitreversal_32>
 8023d90:	bd70      	pop	{r4, r5, r6, pc}
 8023d92:	2380      	movs	r3, #128	@ 0x80
 8023d94:	00db      	lsls	r3, r3, #3
 8023d96:	4299      	cmp	r1, r3
 8023d98:	d008      	beq.n	8023dac <arm_cfft_q31+0x58>
 8023d9a:	d92f      	bls.n	8023dfc <arm_cfft_q31+0xa8>
 8023d9c:	2380      	movs	r3, #128	@ 0x80
 8023d9e:	011b      	lsls	r3, r3, #4
 8023da0:	4299      	cmp	r1, r3
 8023da2:	d0ea      	beq.n	8023d7a <arm_cfft_q31+0x26>
 8023da4:	2380      	movs	r3, #128	@ 0x80
 8023da6:	015b      	lsls	r3, r3, #5
 8023da8:	4299      	cmp	r1, r3
 8023daa:	d1ea      	bne.n	8023d82 <arm_cfft_q31+0x2e>
 8023dac:	2301      	movs	r3, #1
 8023dae:	6862      	ldr	r2, [r4, #4]
 8023db0:	0028      	movs	r0, r5
 8023db2:	f000 f833 	bl	8023e1c <arm_radix4_butterfly_q31>
 8023db6:	e7e4      	b.n	8023d82 <arm_cfft_q31+0x2e>
 8023db8:	4299      	cmp	r1, r3
 8023dba:	d019      	beq.n	8023df0 <arm_cfft_q31+0x9c>
 8023dbc:	d80b      	bhi.n	8023dd6 <arm_cfft_q31+0x82>
 8023dbe:	2920      	cmp	r1, #32
 8023dc0:	d004      	beq.n	8023dcc <arm_cfft_q31+0x78>
 8023dc2:	d928      	bls.n	8023e16 <arm_cfft_q31+0xc2>
 8023dc4:	2940      	cmp	r1, #64	@ 0x40
 8023dc6:	d013      	beq.n	8023df0 <arm_cfft_q31+0x9c>
 8023dc8:	2980      	cmp	r1, #128	@ 0x80
 8023dca:	d1da      	bne.n	8023d82 <arm_cfft_q31+0x2e>
 8023dcc:	6862      	ldr	r2, [r4, #4]
 8023dce:	0028      	movs	r0, r5
 8023dd0:	f7ff fefe 	bl	8023bd0 <arm_cfft_radix4by2_inverse_q31>
 8023dd4:	e7d5      	b.n	8023d82 <arm_cfft_q31+0x2e>
 8023dd6:	2380      	movs	r3, #128	@ 0x80
 8023dd8:	00db      	lsls	r3, r3, #3
 8023dda:	4299      	cmp	r1, r3
 8023ddc:	d008      	beq.n	8023df0 <arm_cfft_q31+0x9c>
 8023dde:	d915      	bls.n	8023e0c <arm_cfft_q31+0xb8>
 8023de0:	2380      	movs	r3, #128	@ 0x80
 8023de2:	011b      	lsls	r3, r3, #4
 8023de4:	4299      	cmp	r1, r3
 8023de6:	d0f1      	beq.n	8023dcc <arm_cfft_q31+0x78>
 8023de8:	2380      	movs	r3, #128	@ 0x80
 8023dea:	015b      	lsls	r3, r3, #5
 8023dec:	4299      	cmp	r1, r3
 8023dee:	d1c8      	bne.n	8023d82 <arm_cfft_q31+0x2e>
 8023df0:	2301      	movs	r3, #1
 8023df2:	6862      	ldr	r2, [r4, #4]
 8023df4:	0028      	movs	r0, r5
 8023df6:	f000 fab7 	bl	8024368 <arm_radix4_butterfly_inverse_q31>
 8023dfa:	e7c2      	b.n	8023d82 <arm_cfft_q31+0x2e>
 8023dfc:	2380      	movs	r3, #128	@ 0x80
 8023dfe:	009b      	lsls	r3, r3, #2
 8023e00:	4299      	cmp	r1, r3
 8023e02:	d0ba      	beq.n	8023d7a <arm_cfft_q31+0x26>
 8023e04:	e7bd      	b.n	8023d82 <arm_cfft_q31+0x2e>
 8023e06:	2910      	cmp	r1, #16
 8023e08:	d1bb      	bne.n	8023d82 <arm_cfft_q31+0x2e>
 8023e0a:	e7cf      	b.n	8023dac <arm_cfft_q31+0x58>
 8023e0c:	2380      	movs	r3, #128	@ 0x80
 8023e0e:	009b      	lsls	r3, r3, #2
 8023e10:	4299      	cmp	r1, r3
 8023e12:	d0db      	beq.n	8023dcc <arm_cfft_q31+0x78>
 8023e14:	e7b5      	b.n	8023d82 <arm_cfft_q31+0x2e>
 8023e16:	2910      	cmp	r1, #16
 8023e18:	d1b3      	bne.n	8023d82 <arm_cfft_q31+0x2e>
 8023e1a:	e7e9      	b.n	8023df0 <arm_cfft_q31+0x9c>

08023e1c <arm_radix4_butterfly_q31>:
 8023e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e1e:	464d      	mov	r5, r9
 8023e20:	4644      	mov	r4, r8
 8023e22:	465f      	mov	r7, fp
 8023e24:	4656      	mov	r6, sl
 8023e26:	469c      	mov	ip, r3
 8023e28:	b4f0      	push	{r4, r5, r6, r7}
 8023e2a:	b0a7      	sub	sp, #156	@ 0x9c
 8023e2c:	9114      	str	r1, [sp, #80]	@ 0x50
 8023e2e:	0889      	lsrs	r1, r1, #2
 8023e30:	9310      	str	r3, [sp, #64]	@ 0x40
 8023e32:	00cb      	lsls	r3, r1, #3
 8023e34:	0015      	movs	r5, r2
 8023e36:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023e38:	18c2      	adds	r2, r0, r3
 8023e3a:	000c      	movs	r4, r1
 8023e3c:	469a      	mov	sl, r3
 8023e3e:	9124      	str	r1, [sp, #144]	@ 0x90
 8023e40:	18d1      	adds	r1, r2, r3
 8023e42:	4663      	mov	r3, ip
 8023e44:	468b      	mov	fp, r1
 8023e46:	0119      	lsls	r1, r3, #4
 8023e48:	910d      	str	r1, [sp, #52]	@ 0x34
 8023e4a:	00d9      	lsls	r1, r3, #3
 8023e4c:	005b      	lsls	r3, r3, #1
 8023e4e:	4463      	add	r3, ip
 8023e50:	910e      	str	r1, [sp, #56]	@ 0x38
 8023e52:	00d9      	lsls	r1, r3, #3
 8023e54:	465b      	mov	r3, fp
 8023e56:	44da      	add	sl, fp
 8023e58:	4690      	mov	r8, r2
 8023e5a:	4683      	mov	fp, r0
 8023e5c:	4699      	mov	r9, r3
 8023e5e:	9022      	str	r0, [sp, #136]	@ 0x88
 8023e60:	9025      	str	r0, [sp, #148]	@ 0x94
 8023e62:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023e64:	9502      	str	r5, [sp, #8]
 8023e66:	9500      	str	r5, [sp, #0]
 8023e68:	9501      	str	r5, [sp, #4]
 8023e6a:	9407      	str	r4, [sp, #28]
 8023e6c:	465b      	mov	r3, fp
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	4642      	mov	r2, r8
 8023e72:	111c      	asrs	r4, r3, #4
 8023e74:	464b      	mov	r3, r9
 8023e76:	4658      	mov	r0, fp
 8023e78:	681b      	ldr	r3, [r3, #0]
 8023e7a:	6812      	ldr	r2, [r2, #0]
 8023e7c:	111b      	asrs	r3, r3, #4
 8023e7e:	18e7      	adds	r7, r4, r3
 8023e80:	1ae3      	subs	r3, r4, r3
 8023e82:	1114      	asrs	r4, r2, #4
 8023e84:	4652      	mov	r2, sl
 8023e86:	6840      	ldr	r0, [r0, #4]
 8023e88:	6812      	ldr	r2, [r2, #0]
 8023e8a:	1105      	asrs	r5, r0, #4
 8023e8c:	4648      	mov	r0, r9
 8023e8e:	9303      	str	r3, [sp, #12]
 8023e90:	1113      	asrs	r3, r2, #4
 8023e92:	18e2      	adds	r2, r4, r3
 8023e94:	465c      	mov	r4, fp
 8023e96:	6840      	ldr	r0, [r0, #4]
 8023e98:	1103      	asrs	r3, r0, #4
 8023e9a:	18ee      	adds	r6, r5, r3
 8023e9c:	1ae8      	subs	r0, r5, r3
 8023e9e:	18bb      	adds	r3, r7, r2
 8023ea0:	6023      	str	r3, [r4, #0]
 8023ea2:	4644      	mov	r4, r8
 8023ea4:	6864      	ldr	r4, [r4, #4]
 8023ea6:	9004      	str	r0, [sp, #16]
 8023ea8:	1125      	asrs	r5, r4, #4
 8023eaa:	4654      	mov	r4, sl
 8023eac:	6864      	ldr	r4, [r4, #4]
 8023eae:	1123      	asrs	r3, r4, #4
 8023eb0:	465c      	mov	r4, fp
 8023eb2:	18eb      	adds	r3, r5, r3
 8023eb4:	18f1      	adds	r1, r6, r3
 8023eb6:	6061      	str	r1, [r4, #4]
 8023eb8:	4655      	mov	r5, sl
 8023eba:	4644      	mov	r4, r8
 8023ebc:	686d      	ldr	r5, [r5, #4]
 8023ebe:	6864      	ldr	r4, [r4, #4]
 8023ec0:	1129      	asrs	r1, r5, #4
 8023ec2:	1124      	asrs	r4, r4, #4
 8023ec4:	1a64      	subs	r4, r4, r1
 8023ec6:	4641      	mov	r1, r8
 8023ec8:	6809      	ldr	r1, [r1, #0]
 8023eca:	9405      	str	r4, [sp, #20]
 8023ecc:	1108      	asrs	r0, r1, #4
 8023ece:	4651      	mov	r1, sl
 8023ed0:	6809      	ldr	r1, [r1, #0]
 8023ed2:	1abc      	subs	r4, r7, r2
 8023ed4:	1109      	asrs	r1, r1, #4
 8023ed6:	1a41      	subs	r1, r0, r1
 8023ed8:	17e2      	asrs	r2, r4, #31
 8023eda:	9106      	str	r1, [sp, #24]
 8023edc:	0011      	movs	r1, r2
 8023ede:	9a01      	ldr	r2, [sp, #4]
 8023ee0:	9108      	str	r1, [sp, #32]
 8023ee2:	6817      	ldr	r7, [r2, #0]
 8023ee4:	17fd      	asrs	r5, r7, #31
 8023ee6:	0028      	movs	r0, r5
 8023ee8:	1af5      	subs	r5, r6, r3
 8023eea:	17ee      	asrs	r6, r5, #31
 8023eec:	960a      	str	r6, [sp, #40]	@ 0x28
 8023eee:	6856      	ldr	r6, [r2, #4]
 8023ef0:	9009      	str	r0, [sp, #36]	@ 0x24
 8023ef2:	17f3      	asrs	r3, r6, #31
 8023ef4:	003a      	movs	r2, r7
 8023ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023ef8:	0003      	movs	r3, r0
 8023efa:	0020      	movs	r0, r4
 8023efc:	f7dc fb60 	bl	80005c0 <__aeabi_lmul>
 8023f00:	0032      	movs	r2, r6
 8023f02:	17f3      	asrs	r3, r6, #31
 8023f04:	910c      	str	r1, [sp, #48]	@ 0x30
 8023f06:	0028      	movs	r0, r5
 8023f08:	17e9      	asrs	r1, r5, #31
 8023f0a:	f7dc fb59 	bl	80005c0 <__aeabi_lmul>
 8023f0e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023f10:	002a      	movs	r2, r5
 8023f12:	4684      	mov	ip, r0
 8023f14:	4640      	mov	r0, r8
 8023f16:	4461      	add	r1, ip
 8023f18:	0049      	lsls	r1, r1, #1
 8023f1a:	6001      	str	r1, [r0, #0]
 8023f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023f20:	0038      	movs	r0, r7
 8023f22:	f7dc fb4d 	bl	80005c0 <__aeabi_lmul>
 8023f26:	0032      	movs	r2, r6
 8023f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f2a:	000d      	movs	r5, r1
 8023f2c:	0020      	movs	r0, r4
 8023f2e:	9908      	ldr	r1, [sp, #32]
 8023f30:	f7dc fb46 	bl	80005c0 <__aeabi_lmul>
 8023f34:	4646      	mov	r6, r8
 8023f36:	1a6d      	subs	r5, r5, r1
 8023f38:	006d      	lsls	r5, r5, #1
 8023f3a:	6075      	str	r5, [r6, #4]
 8023f3c:	9903      	ldr	r1, [sp, #12]
 8023f3e:	9d05      	ldr	r5, [sp, #20]
 8023f40:	000c      	movs	r4, r1
 8023f42:	46ac      	mov	ip, r5
 8023f44:	4464      	add	r4, ip
 8023f46:	17e6      	asrs	r6, r4, #31
 8023f48:	0031      	movs	r1, r6
 8023f4a:	9b00      	ldr	r3, [sp, #0]
 8023f4c:	9804      	ldr	r0, [sp, #16]
 8023f4e:	681e      	ldr	r6, [r3, #0]
 8023f50:	17f7      	asrs	r7, r6, #31
 8023f52:	9709      	str	r7, [sp, #36]	@ 0x24
 8023f54:	9f06      	ldr	r7, [sp, #24]
 8023f56:	0032      	movs	r2, r6
 8023f58:	1bc7      	subs	r7, r0, r7
 8023f5a:	17fd      	asrs	r5, r7, #31
 8023f5c:	950a      	str	r5, [sp, #40]	@ 0x28
 8023f5e:	685d      	ldr	r5, [r3, #4]
 8023f60:	17f3      	asrs	r3, r6, #31
 8023f62:	17e8      	asrs	r0, r5, #31
 8023f64:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023f66:	0020      	movs	r0, r4
 8023f68:	9108      	str	r1, [sp, #32]
 8023f6a:	f7dc fb29 	bl	80005c0 <__aeabi_lmul>
 8023f6e:	002a      	movs	r2, r5
 8023f70:	17eb      	asrs	r3, r5, #31
 8023f72:	910c      	str	r1, [sp, #48]	@ 0x30
 8023f74:	0038      	movs	r0, r7
 8023f76:	17f9      	asrs	r1, r7, #31
 8023f78:	f7dc fb22 	bl	80005c0 <__aeabi_lmul>
 8023f7c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023f7e:	003a      	movs	r2, r7
 8023f80:	4684      	mov	ip, r0
 8023f82:	4648      	mov	r0, r9
 8023f84:	4461      	add	r1, ip
 8023f86:	0049      	lsls	r1, r1, #1
 8023f88:	6001      	str	r1, [r0, #0]
 8023f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f8c:	0030      	movs	r0, r6
 8023f8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023f90:	f7dc fb16 	bl	80005c0 <__aeabi_lmul>
 8023f94:	002a      	movs	r2, r5
 8023f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f98:	000e      	movs	r6, r1
 8023f9a:	0020      	movs	r0, r4
 8023f9c:	9908      	ldr	r1, [sp, #32]
 8023f9e:	f7dc fb0f 	bl	80005c0 <__aeabi_lmul>
 8023fa2:	464c      	mov	r4, r9
 8023fa4:	9d05      	ldr	r5, [sp, #20]
 8023fa6:	1a76      	subs	r6, r6, r1
 8023fa8:	9903      	ldr	r1, [sp, #12]
 8023faa:	0076      	lsls	r6, r6, #1
 8023fac:	6066      	str	r6, [r4, #4]
 8023fae:	1b4c      	subs	r4, r1, r5
 8023fb0:	9e06      	ldr	r6, [sp, #24]
 8023fb2:	17e1      	asrs	r1, r4, #31
 8023fb4:	9103      	str	r1, [sp, #12]
 8023fb6:	9902      	ldr	r1, [sp, #8]
 8023fb8:	46b4      	mov	ip, r6
 8023fba:	680f      	ldr	r7, [r1, #0]
 8023fbc:	9804      	ldr	r0, [sp, #16]
 8023fbe:	17fd      	asrs	r5, r7, #31
 8023fc0:	002b      	movs	r3, r5
 8023fc2:	684e      	ldr	r6, [r1, #4]
 8023fc4:	4460      	add	r0, ip
 8023fc6:	0005      	movs	r5, r0
 8023fc8:	17c0      	asrs	r0, r0, #31
 8023fca:	9005      	str	r0, [sp, #20]
 8023fcc:	17f0      	asrs	r0, r6, #31
 8023fce:	9006      	str	r0, [sp, #24]
 8023fd0:	003a      	movs	r2, r7
 8023fd2:	0020      	movs	r0, r4
 8023fd4:	17e1      	asrs	r1, r4, #31
 8023fd6:	9304      	str	r3, [sp, #16]
 8023fd8:	f7dc faf2 	bl	80005c0 <__aeabi_lmul>
 8023fdc:	0032      	movs	r2, r6
 8023fde:	9108      	str	r1, [sp, #32]
 8023fe0:	17f3      	asrs	r3, r6, #31
 8023fe2:	0028      	movs	r0, r5
 8023fe4:	17e9      	asrs	r1, r5, #31
 8023fe6:	f7dc faeb 	bl	80005c0 <__aeabi_lmul>
 8023fea:	9808      	ldr	r0, [sp, #32]
 8023fec:	002a      	movs	r2, r5
 8023fee:	4684      	mov	ip, r0
 8023ff0:	4650      	mov	r0, sl
 8023ff2:	4461      	add	r1, ip
 8023ff4:	0049      	lsls	r1, r1, #1
 8023ff6:	6001      	str	r1, [r0, #0]
 8023ff8:	9b05      	ldr	r3, [sp, #20]
 8023ffa:	9904      	ldr	r1, [sp, #16]
 8023ffc:	0038      	movs	r0, r7
 8023ffe:	f7dc fadf 	bl	80005c0 <__aeabi_lmul>
 8024002:	0020      	movs	r0, r4
 8024004:	2408      	movs	r4, #8
 8024006:	000d      	movs	r5, r1
 8024008:	0032      	movs	r2, r6
 802400a:	9b06      	ldr	r3, [sp, #24]
 802400c:	9903      	ldr	r1, [sp, #12]
 802400e:	f7dc fad7 	bl	80005c0 <__aeabi_lmul>
 8024012:	46a4      	mov	ip, r4
 8024014:	4650      	mov	r0, sl
 8024016:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024018:	44e3      	add	fp, ip
 802401a:	44e0      	add	r8, ip
 802401c:	44e1      	add	r9, ip
 802401e:	44e2      	add	sl, ip
 8024020:	46a4      	mov	ip, r4
 8024022:	1a6d      	subs	r5, r5, r1
 8024024:	006d      	lsls	r5, r5, #1
 8024026:	9a01      	ldr	r2, [sp, #4]
 8024028:	6045      	str	r5, [r0, #4]
 802402a:	9807      	ldr	r0, [sp, #28]
 802402c:	4462      	add	r2, ip
 802402e:	3801      	subs	r0, #1
 8024030:	9201      	str	r2, [sp, #4]
 8024032:	9007      	str	r0, [sp, #28]
 8024034:	9b00      	ldr	r3, [sp, #0]
 8024036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024038:	9902      	ldr	r1, [sp, #8]
 802403a:	4694      	mov	ip, r2
 802403c:	4463      	add	r3, ip
 802403e:	9300      	str	r3, [sp, #0]
 8024040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024042:	469c      	mov	ip, r3
 8024044:	4461      	add	r1, ip
 8024046:	9102      	str	r1, [sp, #8]
 8024048:	2800      	cmp	r0, #0
 802404a:	d000      	beq.n	802404e <arm_radix4_butterfly_q31+0x232>
 802404c:	e70e      	b.n	8023e6c <arm_radix4_butterfly_q31+0x50>
 802404e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024050:	009b      	lsls	r3, r3, #2
 8024052:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024054:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024056:	9320      	str	r3, [sp, #128]	@ 0x80
 8024058:	9313      	str	r3, [sp, #76]	@ 0x4c
 802405a:	2b04      	cmp	r3, #4
 802405c:	d800      	bhi.n	8024060 <arm_radix4_butterfly_q31+0x244>
 802405e:	e180      	b.n	8024362 <arm_radix4_butterfly_q31+0x546>
 8024060:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024062:	0893      	lsrs	r3, r2, #2
 8024064:	1e59      	subs	r1, r3, #1
 8024066:	9321      	str	r3, [sp, #132]	@ 0x84
 8024068:	00db      	lsls	r3, r3, #3
 802406a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802406c:	00d3      	lsls	r3, r2, #3
 802406e:	9300      	str	r3, [sp, #0]
 8024070:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024072:	911a      	str	r1, [sp, #104]	@ 0x68
 8024074:	00da      	lsls	r2, r3, #3
 8024076:	921e      	str	r2, [sp, #120]	@ 0x78
 8024078:	011a      	lsls	r2, r3, #4
 802407a:	921d      	str	r2, [sp, #116]	@ 0x74
 802407c:	001a      	movs	r2, r3
 802407e:	4694      	mov	ip, r2
 8024080:	005b      	lsls	r3, r3, #1
 8024082:	4463      	add	r3, ip
 8024084:	00db      	lsls	r3, r3, #3
 8024086:	931c      	str	r3, [sp, #112]	@ 0x70
 8024088:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802408a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802408c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802408e:	9318      	str	r3, [sp, #96]	@ 0x60
 8024090:	9319      	str	r3, [sp, #100]	@ 0x64
 8024092:	9316      	str	r3, [sp, #88]	@ 0x58
 8024094:	2300      	movs	r3, #0
 8024096:	9315      	str	r3, [sp, #84]	@ 0x54
 8024098:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802409a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802409c:	681a      	ldr	r2, [r3, #0]
 802409e:	685b      	ldr	r3, [r3, #4]
 80240a0:	9205      	str	r2, [sp, #20]
 80240a2:	9306      	str	r3, [sp, #24]
 80240a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80240a6:	468c      	mov	ip, r1
 80240a8:	681a      	ldr	r2, [r3, #0]
 80240aa:	685b      	ldr	r3, [r3, #4]
 80240ac:	9207      	str	r2, [sp, #28]
 80240ae:	9308      	str	r3, [sp, #32]
 80240b0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80240b2:	681a      	ldr	r2, [r3, #0]
 80240b4:	685b      	ldr	r3, [r3, #4]
 80240b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80240b8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80240ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80240bc:	0013      	movs	r3, r2
 80240be:	4463      	add	r3, ip
 80240c0:	4698      	mov	r8, r3
 80240c2:	0013      	movs	r3, r2
 80240c4:	4442      	add	r2, r8
 80240c6:	4691      	mov	r9, r2
 80240c8:	001a      	movs	r2, r3
 80240ca:	444a      	add	r2, r9
 80240cc:	4692      	mov	sl, r2
 80240ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80240d0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80240d2:	4293      	cmp	r3, r2
 80240d4:	d800      	bhi.n	80240d8 <arm_radix4_butterfly_q31+0x2bc>
 80240d6:	e0dd      	b.n	8024294 <arm_radix4_butterfly_q31+0x478>
 80240d8:	4694      	mov	ip, r2
 80240da:	468b      	mov	fp, r1
 80240dc:	4644      	mov	r4, r8
 80240de:	4655      	mov	r5, sl
 80240e0:	9b07      	ldr	r3, [sp, #28]
 80240e2:	17db      	asrs	r3, r3, #31
 80240e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80240e6:	9b08      	ldr	r3, [sp, #32]
 80240e8:	17db      	asrs	r3, r3, #31
 80240ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80240ec:	9b05      	ldr	r3, [sp, #20]
 80240ee:	17db      	asrs	r3, r3, #31
 80240f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80240f2:	9b06      	ldr	r3, [sp, #24]
 80240f4:	17db      	asrs	r3, r3, #31
 80240f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80240f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240fa:	17db      	asrs	r3, r3, #31
 80240fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80240fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024100:	17db      	asrs	r3, r3, #31
 8024102:	9311      	str	r3, [sp, #68]	@ 0x44
 8024104:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024106:	4463      	add	r3, ip
 8024108:	930b      	str	r3, [sp, #44]	@ 0x2c
 802410a:	465b      	mov	r3, fp
 802410c:	4659      	mov	r1, fp
 802410e:	681a      	ldr	r2, [r3, #0]
 8024110:	464b      	mov	r3, r9
 8024112:	684f      	ldr	r7, [r1, #4]
 8024114:	4649      	mov	r1, r9
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	18d6      	adds	r6, r2, r3
 802411a:	1ad3      	subs	r3, r2, r3
 802411c:	9301      	str	r3, [sp, #4]
 802411e:	684b      	ldr	r3, [r1, #4]
 8024120:	18f8      	adds	r0, r7, r3
 8024122:	1af9      	subs	r1, r7, r3
 8024124:	6827      	ldr	r7, [r4, #0]
 8024126:	9102      	str	r1, [sp, #8]
 8024128:	003a      	movs	r2, r7
 802412a:	682f      	ldr	r7, [r5, #0]
 802412c:	46bc      	mov	ip, r7
 802412e:	465f      	mov	r7, fp
 8024130:	4462      	add	r2, ip
 8024132:	18b3      	adds	r3, r6, r2
 8024134:	109b      	asrs	r3, r3, #2
 8024136:	603b      	str	r3, [r7, #0]
 8024138:	6867      	ldr	r7, [r4, #4]
 802413a:	1ab6      	subs	r6, r6, r2
 802413c:	46b8      	mov	r8, r7
 802413e:	686f      	ldr	r7, [r5, #4]
 8024140:	17f2      	asrs	r2, r6, #31
 8024142:	46bc      	mov	ip, r7
 8024144:	44e0      	add	r8, ip
 8024146:	4643      	mov	r3, r8
 8024148:	465f      	mov	r7, fp
 802414a:	18c1      	adds	r1, r0, r3
 802414c:	1089      	asrs	r1, r1, #2
 802414e:	6079      	str	r1, [r7, #4]
 8024150:	9900      	ldr	r1, [sp, #0]
 8024152:	4690      	mov	r8, r2
 8024154:	468c      	mov	ip, r1
 8024156:	6867      	ldr	r7, [r4, #4]
 8024158:	6869      	ldr	r1, [r5, #4]
 802415a:	44e3      	add	fp, ip
 802415c:	1a7f      	subs	r7, r7, r1
 802415e:	9703      	str	r7, [sp, #12]
 8024160:	6829      	ldr	r1, [r5, #0]
 8024162:	6827      	ldr	r7, [r4, #0]
 8024164:	1a7f      	subs	r7, r7, r1
 8024166:	9704      	str	r7, [sp, #16]
 8024168:	1ac7      	subs	r7, r0, r3
 802416a:	17fa      	asrs	r2, r7, #31
 802416c:	4692      	mov	sl, r2
 802416e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024170:	9a07      	ldr	r2, [sp, #28]
 8024172:	0030      	movs	r0, r6
 8024174:	4641      	mov	r1, r8
 8024176:	f7dc fa23 	bl	80005c0 <__aeabi_lmul>
 802417a:	9a08      	ldr	r2, [sp, #32]
 802417c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802417e:	9112      	str	r1, [sp, #72]	@ 0x48
 8024180:	0038      	movs	r0, r7
 8024182:	4651      	mov	r1, sl
 8024184:	f7dc fa1c 	bl	80005c0 <__aeabi_lmul>
 8024188:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802418a:	9a07      	ldr	r2, [sp, #28]
 802418c:	4684      	mov	ip, r0
 802418e:	4461      	add	r1, ip
 8024190:	1049      	asrs	r1, r1, #1
 8024192:	6021      	str	r1, [r4, #0]
 8024194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024196:	0038      	movs	r0, r7
 8024198:	4651      	mov	r1, sl
 802419a:	f7dc fa11 	bl	80005c0 <__aeabi_lmul>
 802419e:	9a08      	ldr	r2, [sp, #32]
 80241a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241a2:	000f      	movs	r7, r1
 80241a4:	0030      	movs	r0, r6
 80241a6:	4641      	mov	r1, r8
 80241a8:	f7dc fa0a 	bl	80005c0 <__aeabi_lmul>
 80241ac:	9b00      	ldr	r3, [sp, #0]
 80241ae:	9a01      	ldr	r2, [sp, #4]
 80241b0:	469c      	mov	ip, r3
 80241b2:	9803      	ldr	r0, [sp, #12]
 80241b4:	1a7f      	subs	r7, r7, r1
 80241b6:	107f      	asrs	r7, r7, #1
 80241b8:	6067      	str	r7, [r4, #4]
 80241ba:	0016      	movs	r6, r2
 80241bc:	4464      	add	r4, ip
 80241be:	4684      	mov	ip, r0
 80241c0:	4466      	add	r6, ip
 80241c2:	17f2      	asrs	r2, r6, #31
 80241c4:	4690      	mov	r8, r2
 80241c6:	9902      	ldr	r1, [sp, #8]
 80241c8:	9f04      	ldr	r7, [sp, #16]
 80241ca:	0030      	movs	r0, r6
 80241cc:	1bcf      	subs	r7, r1, r7
 80241ce:	17fa      	asrs	r2, r7, #31
 80241d0:	4692      	mov	sl, r2
 80241d2:	4641      	mov	r1, r8
 80241d4:	9a05      	ldr	r2, [sp, #20]
 80241d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80241d8:	f7dc f9f2 	bl	80005c0 <__aeabi_lmul>
 80241dc:	9a06      	ldr	r2, [sp, #24]
 80241de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241e0:	9112      	str	r1, [sp, #72]	@ 0x48
 80241e2:	0038      	movs	r0, r7
 80241e4:	4651      	mov	r1, sl
 80241e6:	f7dc f9eb 	bl	80005c0 <__aeabi_lmul>
 80241ea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80241ec:	9a05      	ldr	r2, [sp, #20]
 80241ee:	4684      	mov	ip, r0
 80241f0:	4648      	mov	r0, r9
 80241f2:	4461      	add	r1, ip
 80241f4:	1049      	asrs	r1, r1, #1
 80241f6:	6001      	str	r1, [r0, #0]
 80241f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80241fa:	0038      	movs	r0, r7
 80241fc:	4651      	mov	r1, sl
 80241fe:	f7dc f9df 	bl	80005c0 <__aeabi_lmul>
 8024202:	9a06      	ldr	r2, [sp, #24]
 8024204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024206:	000f      	movs	r7, r1
 8024208:	0030      	movs	r0, r6
 802420a:	4641      	mov	r1, r8
 802420c:	f7dc f9d8 	bl	80005c0 <__aeabi_lmul>
 8024210:	464e      	mov	r6, r9
 8024212:	9a00      	ldr	r2, [sp, #0]
 8024214:	9b01      	ldr	r3, [sp, #4]
 8024216:	4694      	mov	ip, r2
 8024218:	9803      	ldr	r0, [sp, #12]
 802421a:	1a7f      	subs	r7, r7, r1
 802421c:	107f      	asrs	r7, r7, #1
 802421e:	6077      	str	r7, [r6, #4]
 8024220:	1a1e      	subs	r6, r3, r0
 8024222:	9b04      	ldr	r3, [sp, #16]
 8024224:	44e1      	add	r9, ip
 8024226:	469c      	mov	ip, r3
 8024228:	17f0      	asrs	r0, r6, #31
 802422a:	4680      	mov	r8, r0
 802422c:	9902      	ldr	r1, [sp, #8]
 802422e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024230:	4461      	add	r1, ip
 8024232:	17cb      	asrs	r3, r1, #31
 8024234:	000f      	movs	r7, r1
 8024236:	469a      	mov	sl, r3
 8024238:	0030      	movs	r0, r6
 802423a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802423c:	4641      	mov	r1, r8
 802423e:	f7dc f9bf 	bl	80005c0 <__aeabi_lmul>
 8024242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024244:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024246:	9101      	str	r1, [sp, #4]
 8024248:	0038      	movs	r0, r7
 802424a:	4651      	mov	r1, sl
 802424c:	f7dc f9b8 	bl	80005c0 <__aeabi_lmul>
 8024250:	9801      	ldr	r0, [sp, #4]
 8024252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024254:	4684      	mov	ip, r0
 8024256:	4461      	add	r1, ip
 8024258:	1049      	asrs	r1, r1, #1
 802425a:	6029      	str	r1, [r5, #0]
 802425c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802425e:	0038      	movs	r0, r7
 8024260:	4651      	mov	r1, sl
 8024262:	f7dc f9ad 	bl	80005c0 <__aeabi_lmul>
 8024266:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024268:	000f      	movs	r7, r1
 802426a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802426c:	0030      	movs	r0, r6
 802426e:	4641      	mov	r1, r8
 8024270:	f7dc f9a6 	bl	80005c0 <__aeabi_lmul>
 8024274:	1a7f      	subs	r7, r7, r1
 8024276:	107f      	asrs	r7, r7, #1
 8024278:	606f      	str	r7, [r5, #4]
 802427a:	9a00      	ldr	r2, [sp, #0]
 802427c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802427e:	4694      	mov	ip, r2
 8024280:	4465      	add	r5, ip
 8024282:	468c      	mov	ip, r1
 8024284:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024286:	0013      	movs	r3, r2
 8024288:	4462      	add	r2, ip
 802428a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802428c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802428e:	429a      	cmp	r2, r3
 8024290:	d900      	bls.n	8024294 <arm_radix4_butterfly_q31+0x478>
 8024292:	e73a      	b.n	802410a <arm_radix4_butterfly_q31+0x2ee>
 8024294:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024296:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024298:	468c      	mov	ip, r1
 802429a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802429c:	4462      	add	r2, ip
 802429e:	468c      	mov	ip, r1
 80242a0:	9216      	str	r2, [sp, #88]	@ 0x58
 80242a2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80242a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80242a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80242a8:	4462      	add	r2, ip
 80242aa:	468c      	mov	ip, r1
 80242ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80242ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80242b0:	3301      	adds	r3, #1
 80242b2:	4462      	add	r2, ip
 80242b4:	9218      	str	r2, [sp, #96]	@ 0x60
 80242b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80242b8:	9315      	str	r3, [sp, #84]	@ 0x54
 80242ba:	3208      	adds	r2, #8
 80242bc:	9217      	str	r2, [sp, #92]	@ 0x5c
 80242be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80242c0:	4293      	cmp	r3, r2
 80242c2:	d800      	bhi.n	80242c6 <arm_radix4_butterfly_q31+0x4aa>
 80242c4:	e6e8      	b.n	8024098 <arm_radix4_butterfly_q31+0x27c>
 80242c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80242c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80242ca:	009b      	lsls	r3, r3, #2
 80242cc:	931f      	str	r3, [sp, #124]	@ 0x7c
 80242ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80242d0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80242d2:	089b      	lsrs	r3, r3, #2
 80242d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80242d6:	2b04      	cmp	r3, #4
 80242d8:	d900      	bls.n	80242dc <arm_radix4_butterfly_q31+0x4c0>
 80242da:	e6c1      	b.n	8024060 <arm_radix4_butterfly_q31+0x244>
 80242dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242de:	469a      	mov	sl, r3
 80242e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80242e2:	691c      	ldr	r4, [r3, #16]
 80242e4:	685a      	ldr	r2, [r3, #4]
 80242e6:	46a1      	mov	r9, r4
 80242e8:	4690      	mov	r8, r2
 80242ea:	6819      	ldr	r1, [r3, #0]
 80242ec:	689a      	ldr	r2, [r3, #8]
 80242ee:	699f      	ldr	r7, [r3, #24]
 80242f0:	188d      	adds	r5, r1, r2
 80242f2:	444d      	add	r5, r9
 80242f4:	19ed      	adds	r5, r5, r7
 80242f6:	69de      	ldr	r6, [r3, #28]
 80242f8:	601d      	str	r5, [r3, #0]
 80242fa:	4645      	mov	r5, r8
 80242fc:	46b4      	mov	ip, r6
 80242fe:	68d8      	ldr	r0, [r3, #12]
 8024300:	695c      	ldr	r4, [r3, #20]
 8024302:	182d      	adds	r5, r5, r0
 8024304:	192d      	adds	r5, r5, r4
 8024306:	4465      	add	r5, ip
 8024308:	605d      	str	r5, [r3, #4]
 802430a:	1a8d      	subs	r5, r1, r2
 802430c:	444d      	add	r5, r9
 802430e:	1bed      	subs	r5, r5, r7
 8024310:	609d      	str	r5, [r3, #8]
 8024312:	4645      	mov	r5, r8
 8024314:	1a2d      	subs	r5, r5, r0
 8024316:	192d      	adds	r5, r5, r4
 8024318:	1bad      	subs	r5, r5, r6
 802431a:	464e      	mov	r6, r9
 802431c:	60dd      	str	r5, [r3, #12]
 802431e:	180d      	adds	r5, r1, r0
 8024320:	1bad      	subs	r5, r5, r6
 8024322:	4666      	mov	r6, ip
 8024324:	1bad      	subs	r5, r5, r6
 8024326:	611d      	str	r5, [r3, #16]
 8024328:	4645      	mov	r5, r8
 802432a:	1aad      	subs	r5, r5, r2
 802432c:	4442      	add	r2, r8
 802432e:	1b12      	subs	r2, r2, r4
 8024330:	1bd2      	subs	r2, r2, r7
 8024332:	1a08      	subs	r0, r1, r0
 8024334:	61da      	str	r2, [r3, #28]
 8024336:	4649      	mov	r1, r9
 8024338:	2201      	movs	r2, #1
 802433a:	1a41      	subs	r1, r0, r1
 802433c:	4252      	negs	r2, r2
 802433e:	4461      	add	r1, ip
 8024340:	4694      	mov	ip, r2
 8024342:	44e2      	add	sl, ip
 8024344:	4652      	mov	r2, sl
 8024346:	1b2d      	subs	r5, r5, r4
 8024348:	19ed      	adds	r5, r5, r7
 802434a:	615d      	str	r5, [r3, #20]
 802434c:	6199      	str	r1, [r3, #24]
 802434e:	3320      	adds	r3, #32
 8024350:	2a00      	cmp	r2, #0
 8024352:	d1c6      	bne.n	80242e2 <arm_radix4_butterfly_q31+0x4c6>
 8024354:	b027      	add	sp, #156	@ 0x9c
 8024356:	bc3c      	pop	{r2, r3, r4, r5}
 8024358:	4690      	mov	r8, r2
 802435a:	4699      	mov	r9, r3
 802435c:	46a2      	mov	sl, r4
 802435e:	46ab      	mov	fp, r5
 8024360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024362:	469a      	mov	sl, r3
 8024364:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024366:	e7bc      	b.n	80242e2 <arm_radix4_butterfly_q31+0x4c6>

08024368 <arm_radix4_butterfly_inverse_q31>:
 8024368:	b5f0      	push	{r4, r5, r6, r7, lr}
 802436a:	464d      	mov	r5, r9
 802436c:	4644      	mov	r4, r8
 802436e:	465f      	mov	r7, fp
 8024370:	4656      	mov	r6, sl
 8024372:	b4f0      	push	{r4, r5, r6, r7}
 8024374:	b0a7      	sub	sp, #156	@ 0x9c
 8024376:	469c      	mov	ip, r3
 8024378:	9114      	str	r1, [sp, #80]	@ 0x50
 802437a:	0889      	lsrs	r1, r1, #2
 802437c:	9310      	str	r3, [sp, #64]	@ 0x40
 802437e:	00cb      	lsls	r3, r1, #3
 8024380:	0015      	movs	r5, r2
 8024382:	9223      	str	r2, [sp, #140]	@ 0x8c
 8024384:	18c2      	adds	r2, r0, r3
 8024386:	000c      	movs	r4, r1
 8024388:	9124      	str	r1, [sp, #144]	@ 0x90
 802438a:	18d1      	adds	r1, r2, r3
 802438c:	468b      	mov	fp, r1
 802438e:	469a      	mov	sl, r3
 8024390:	4663      	mov	r3, ip
 8024392:	44da      	add	sl, fp
 8024394:	46d0      	mov	r8, sl
 8024396:	4681      	mov	r9, r0
 8024398:	4692      	mov	sl, r2
 802439a:	0119      	lsls	r1, r3, #4
 802439c:	910d      	str	r1, [sp, #52]	@ 0x34
 802439e:	00d9      	lsls	r1, r3, #3
 80243a0:	005b      	lsls	r3, r3, #1
 80243a2:	4463      	add	r3, ip
 80243a4:	910e      	str	r1, [sp, #56]	@ 0x38
 80243a6:	00d9      	lsls	r1, r3, #3
 80243a8:	9022      	str	r0, [sp, #136]	@ 0x88
 80243aa:	9025      	str	r0, [sp, #148]	@ 0x94
 80243ac:	910f      	str	r1, [sp, #60]	@ 0x3c
 80243ae:	9502      	str	r5, [sp, #8]
 80243b0:	9500      	str	r5, [sp, #0]
 80243b2:	9501      	str	r5, [sp, #4]
 80243b4:	9409      	str	r4, [sp, #36]	@ 0x24
 80243b6:	464b      	mov	r3, r9
 80243b8:	681b      	ldr	r3, [r3, #0]
 80243ba:	4652      	mov	r2, sl
 80243bc:	111c      	asrs	r4, r3, #4
 80243be:	465b      	mov	r3, fp
 80243c0:	4648      	mov	r0, r9
 80243c2:	681b      	ldr	r3, [r3, #0]
 80243c4:	6812      	ldr	r2, [r2, #0]
 80243c6:	6840      	ldr	r0, [r0, #4]
 80243c8:	111b      	asrs	r3, r3, #4
 80243ca:	18e7      	adds	r7, r4, r3
 80243cc:	1ae3      	subs	r3, r4, r3
 80243ce:	1114      	asrs	r4, r2, #4
 80243d0:	4642      	mov	r2, r8
 80243d2:	1105      	asrs	r5, r0, #4
 80243d4:	4658      	mov	r0, fp
 80243d6:	6812      	ldr	r2, [r2, #0]
 80243d8:	6840      	ldr	r0, [r0, #4]
 80243da:	9303      	str	r3, [sp, #12]
 80243dc:	1113      	asrs	r3, r2, #4
 80243de:	18e2      	adds	r2, r4, r3
 80243e0:	1103      	asrs	r3, r0, #4
 80243e2:	18ee      	adds	r6, r5, r3
 80243e4:	1ae8      	subs	r0, r5, r3
 80243e6:	464d      	mov	r5, r9
 80243e8:	18bb      	adds	r3, r7, r2
 80243ea:	602b      	str	r3, [r5, #0]
 80243ec:	4641      	mov	r1, r8
 80243ee:	4655      	mov	r5, sl
 80243f0:	6849      	ldr	r1, [r1, #4]
 80243f2:	686d      	ldr	r5, [r5, #4]
 80243f4:	110b      	asrs	r3, r1, #4
 80243f6:	112d      	asrs	r5, r5, #4
 80243f8:	18eb      	adds	r3, r5, r3
 80243fa:	464d      	mov	r5, r9
 80243fc:	18f1      	adds	r1, r6, r3
 80243fe:	6069      	str	r1, [r5, #4]
 8024400:	4655      	mov	r5, sl
 8024402:	686d      	ldr	r5, [r5, #4]
 8024404:	9004      	str	r0, [sp, #16]
 8024406:	112c      	asrs	r4, r5, #4
 8024408:	4645      	mov	r5, r8
 802440a:	686d      	ldr	r5, [r5, #4]
 802440c:	1129      	asrs	r1, r5, #4
 802440e:	1a65      	subs	r5, r4, r1
 8024410:	4651      	mov	r1, sl
 8024412:	6809      	ldr	r1, [r1, #0]
 8024414:	1abc      	subs	r4, r7, r2
 8024416:	1108      	asrs	r0, r1, #4
 8024418:	4641      	mov	r1, r8
 802441a:	17e2      	asrs	r2, r4, #31
 802441c:	6809      	ldr	r1, [r1, #0]
 802441e:	9207      	str	r2, [sp, #28]
 8024420:	9a01      	ldr	r2, [sp, #4]
 8024422:	1109      	asrs	r1, r1, #4
 8024424:	6817      	ldr	r7, [r2, #0]
 8024426:	1a41      	subs	r1, r0, r1
 8024428:	9106      	str	r1, [sp, #24]
 802442a:	0039      	movs	r1, r7
 802442c:	17ff      	asrs	r7, r7, #31
 802442e:	0038      	movs	r0, r7
 8024430:	9505      	str	r5, [sp, #20]
 8024432:	1af5      	subs	r5, r6, r3
 8024434:	17ef      	asrs	r7, r5, #31
 8024436:	970b      	str	r7, [sp, #44]	@ 0x2c
 8024438:	6857      	ldr	r7, [r2, #4]
 802443a:	0003      	movs	r3, r0
 802443c:	17fe      	asrs	r6, r7, #31
 802443e:	000a      	movs	r2, r1
 8024440:	9108      	str	r1, [sp, #32]
 8024442:	900a      	str	r0, [sp, #40]	@ 0x28
 8024444:	17e1      	asrs	r1, r4, #31
 8024446:	0020      	movs	r0, r4
 8024448:	960c      	str	r6, [sp, #48]	@ 0x30
 802444a:	f7dc f8b9 	bl	80005c0 <__aeabi_lmul>
 802444e:	003a      	movs	r2, r7
 8024450:	17fb      	asrs	r3, r7, #31
 8024452:	000e      	movs	r6, r1
 8024454:	0028      	movs	r0, r5
 8024456:	17e9      	asrs	r1, r5, #31
 8024458:	f7dc f8b2 	bl	80005c0 <__aeabi_lmul>
 802445c:	4653      	mov	r3, sl
 802445e:	1a76      	subs	r6, r6, r1
 8024460:	0076      	lsls	r6, r6, #1
 8024462:	601e      	str	r6, [r3, #0]
 8024464:	002a      	movs	r2, r5
 8024466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024468:	9808      	ldr	r0, [sp, #32]
 802446a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802446c:	f7dc f8a8 	bl	80005c0 <__aeabi_lmul>
 8024470:	003a      	movs	r2, r7
 8024472:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024474:	000d      	movs	r5, r1
 8024476:	0020      	movs	r0, r4
 8024478:	9907      	ldr	r1, [sp, #28]
 802447a:	f7dc f8a1 	bl	80005c0 <__aeabi_lmul>
 802447e:	4657      	mov	r7, sl
 8024480:	186d      	adds	r5, r5, r1
 8024482:	006d      	lsls	r5, r5, #1
 8024484:	607d      	str	r5, [r7, #4]
 8024486:	9b03      	ldr	r3, [sp, #12]
 8024488:	9e06      	ldr	r6, [sp, #24]
 802448a:	9d05      	ldr	r5, [sp, #20]
 802448c:	46b4      	mov	ip, r6
 802448e:	1b5d      	subs	r5, r3, r5
 8024490:	9b00      	ldr	r3, [sp, #0]
 8024492:	17ef      	asrs	r7, r5, #31
 8024494:	0039      	movs	r1, r7
 8024496:	681f      	ldr	r7, [r3, #0]
 8024498:	17fc      	asrs	r4, r7, #31
 802449a:	0020      	movs	r0, r4
 802449c:	9c04      	ldr	r4, [sp, #16]
 802449e:	4464      	add	r4, ip
 80244a0:	17e6      	asrs	r6, r4, #31
 80244a2:	9407      	str	r4, [sp, #28]
 80244a4:	9608      	str	r6, [sp, #32]
 80244a6:	685e      	ldr	r6, [r3, #4]
 80244a8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80244aa:	17f2      	asrs	r2, r6, #31
 80244ac:	0003      	movs	r3, r0
 80244ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80244b0:	0028      	movs	r0, r5
 80244b2:	003a      	movs	r2, r7
 80244b4:	910a      	str	r1, [sp, #40]	@ 0x28
 80244b6:	f7dc f883 	bl	80005c0 <__aeabi_lmul>
 80244ba:	0032      	movs	r2, r6
 80244bc:	17f3      	asrs	r3, r6, #31
 80244be:	9807      	ldr	r0, [sp, #28]
 80244c0:	000c      	movs	r4, r1
 80244c2:	9908      	ldr	r1, [sp, #32]
 80244c4:	f7dc f87c 	bl	80005c0 <__aeabi_lmul>
 80244c8:	4658      	mov	r0, fp
 80244ca:	1a64      	subs	r4, r4, r1
 80244cc:	0064      	lsls	r4, r4, #1
 80244ce:	9a07      	ldr	r2, [sp, #28]
 80244d0:	6004      	str	r4, [r0, #0]
 80244d2:	9b08      	ldr	r3, [sp, #32]
 80244d4:	0038      	movs	r0, r7
 80244d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80244d8:	f7dc f872 	bl	80005c0 <__aeabi_lmul>
 80244dc:	0032      	movs	r2, r6
 80244de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80244e0:	000c      	movs	r4, r1
 80244e2:	0028      	movs	r0, r5
 80244e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80244e6:	f7dc f86b 	bl	80005c0 <__aeabi_lmul>
 80244ea:	9d05      	ldr	r5, [sp, #20]
 80244ec:	465f      	mov	r7, fp
 80244ee:	46ac      	mov	ip, r5
 80244f0:	1864      	adds	r4, r4, r1
 80244f2:	9903      	ldr	r1, [sp, #12]
 80244f4:	0064      	lsls	r4, r4, #1
 80244f6:	4461      	add	r1, ip
 80244f8:	607c      	str	r4, [r7, #4]
 80244fa:	000c      	movs	r4, r1
 80244fc:	17c9      	asrs	r1, r1, #31
 80244fe:	9105      	str	r1, [sp, #20]
 8024500:	9902      	ldr	r1, [sp, #8]
 8024502:	9804      	ldr	r0, [sp, #16]
 8024504:	680d      	ldr	r5, [r1, #0]
 8024506:	9e06      	ldr	r6, [sp, #24]
 8024508:	002b      	movs	r3, r5
 802450a:	17ed      	asrs	r5, r5, #31
 802450c:	684f      	ldr	r7, [r1, #4]
 802450e:	9503      	str	r5, [sp, #12]
 8024510:	1b85      	subs	r5, r0, r6
 8024512:	17e8      	asrs	r0, r5, #31
 8024514:	001a      	movs	r2, r3
 8024516:	9006      	str	r0, [sp, #24]
 8024518:	17fe      	asrs	r6, r7, #31
 802451a:	9304      	str	r3, [sp, #16]
 802451c:	0020      	movs	r0, r4
 802451e:	9b03      	ldr	r3, [sp, #12]
 8024520:	17e1      	asrs	r1, r4, #31
 8024522:	9607      	str	r6, [sp, #28]
 8024524:	f7dc f84c 	bl	80005c0 <__aeabi_lmul>
 8024528:	003a      	movs	r2, r7
 802452a:	000e      	movs	r6, r1
 802452c:	17fb      	asrs	r3, r7, #31
 802452e:	0028      	movs	r0, r5
 8024530:	17e9      	asrs	r1, r5, #31
 8024532:	f7dc f845 	bl	80005c0 <__aeabi_lmul>
 8024536:	4640      	mov	r0, r8
 8024538:	1a76      	subs	r6, r6, r1
 802453a:	0076      	lsls	r6, r6, #1
 802453c:	002a      	movs	r2, r5
 802453e:	9b06      	ldr	r3, [sp, #24]
 8024540:	6006      	str	r6, [r0, #0]
 8024542:	9903      	ldr	r1, [sp, #12]
 8024544:	9804      	ldr	r0, [sp, #16]
 8024546:	f7dc f83b 	bl	80005c0 <__aeabi_lmul>
 802454a:	0020      	movs	r0, r4
 802454c:	2408      	movs	r4, #8
 802454e:	9b07      	ldr	r3, [sp, #28]
 8024550:	000d      	movs	r5, r1
 8024552:	003a      	movs	r2, r7
 8024554:	9905      	ldr	r1, [sp, #20]
 8024556:	f7dc f833 	bl	80005c0 <__aeabi_lmul>
 802455a:	4640      	mov	r0, r8
 802455c:	46a4      	mov	ip, r4
 802455e:	186d      	adds	r5, r5, r1
 8024560:	006d      	lsls	r5, r5, #1
 8024562:	6045      	str	r5, [r0, #4]
 8024564:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024566:	44e1      	add	r9, ip
 8024568:	3801      	subs	r0, #1
 802456a:	9009      	str	r0, [sp, #36]	@ 0x24
 802456c:	9a01      	ldr	r2, [sp, #4]
 802456e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024570:	44e2      	add	sl, ip
 8024572:	44e3      	add	fp, ip
 8024574:	44e0      	add	r8, ip
 8024576:	46a4      	mov	ip, r4
 8024578:	4462      	add	r2, ip
 802457a:	9201      	str	r2, [sp, #4]
 802457c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802457e:	9b00      	ldr	r3, [sp, #0]
 8024580:	4694      	mov	ip, r2
 8024582:	4463      	add	r3, ip
 8024584:	9300      	str	r3, [sp, #0]
 8024586:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024588:	9902      	ldr	r1, [sp, #8]
 802458a:	469c      	mov	ip, r3
 802458c:	4461      	add	r1, ip
 802458e:	9102      	str	r1, [sp, #8]
 8024590:	2800      	cmp	r0, #0
 8024592:	d000      	beq.n	8024596 <arm_radix4_butterfly_inverse_q31+0x22e>
 8024594:	e70f      	b.n	80243b6 <arm_radix4_butterfly_inverse_q31+0x4e>
 8024596:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024598:	009b      	lsls	r3, r3, #2
 802459a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802459c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802459e:	9320      	str	r3, [sp, #128]	@ 0x80
 80245a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80245a2:	2b04      	cmp	r3, #4
 80245a4:	d800      	bhi.n	80245a8 <arm_radix4_butterfly_inverse_q31+0x240>
 80245a6:	e17c      	b.n	80248a2 <arm_radix4_butterfly_inverse_q31+0x53a>
 80245a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80245aa:	0893      	lsrs	r3, r2, #2
 80245ac:	1e59      	subs	r1, r3, #1
 80245ae:	9321      	str	r3, [sp, #132]	@ 0x84
 80245b0:	00db      	lsls	r3, r3, #3
 80245b2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80245b4:	00d3      	lsls	r3, r2, #3
 80245b6:	9300      	str	r3, [sp, #0]
 80245b8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80245ba:	911a      	str	r1, [sp, #104]	@ 0x68
 80245bc:	00da      	lsls	r2, r3, #3
 80245be:	921e      	str	r2, [sp, #120]	@ 0x78
 80245c0:	011a      	lsls	r2, r3, #4
 80245c2:	921d      	str	r2, [sp, #116]	@ 0x74
 80245c4:	001a      	movs	r2, r3
 80245c6:	4694      	mov	ip, r2
 80245c8:	005b      	lsls	r3, r3, #1
 80245ca:	4463      	add	r3, ip
 80245cc:	00db      	lsls	r3, r3, #3
 80245ce:	931c      	str	r3, [sp, #112]	@ 0x70
 80245d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80245d2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80245d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80245d6:	9318      	str	r3, [sp, #96]	@ 0x60
 80245d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80245da:	9316      	str	r3, [sp, #88]	@ 0x58
 80245dc:	2300      	movs	r3, #0
 80245de:	9315      	str	r3, [sp, #84]	@ 0x54
 80245e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80245e2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80245e4:	681a      	ldr	r2, [r3, #0]
 80245e6:	685b      	ldr	r3, [r3, #4]
 80245e8:	9205      	str	r2, [sp, #20]
 80245ea:	9306      	str	r3, [sp, #24]
 80245ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80245ee:	468c      	mov	ip, r1
 80245f0:	681a      	ldr	r2, [r3, #0]
 80245f2:	685b      	ldr	r3, [r3, #4]
 80245f4:	9207      	str	r2, [sp, #28]
 80245f6:	9308      	str	r3, [sp, #32]
 80245f8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80245fa:	681a      	ldr	r2, [r3, #0]
 80245fc:	685b      	ldr	r3, [r3, #4]
 80245fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8024600:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024602:	930a      	str	r3, [sp, #40]	@ 0x28
 8024604:	0013      	movs	r3, r2
 8024606:	4463      	add	r3, ip
 8024608:	4698      	mov	r8, r3
 802460a:	0013      	movs	r3, r2
 802460c:	4442      	add	r2, r8
 802460e:	4691      	mov	r9, r2
 8024610:	001a      	movs	r2, r3
 8024612:	444a      	add	r2, r9
 8024614:	4692      	mov	sl, r2
 8024616:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024618:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802461a:	4293      	cmp	r3, r2
 802461c:	d800      	bhi.n	8024620 <arm_radix4_butterfly_inverse_q31+0x2b8>
 802461e:	e0d9      	b.n	80247d4 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024620:	4694      	mov	ip, r2
 8024622:	4644      	mov	r4, r8
 8024624:	4655      	mov	r5, sl
 8024626:	4688      	mov	r8, r1
 8024628:	9b07      	ldr	r3, [sp, #28]
 802462a:	17db      	asrs	r3, r3, #31
 802462c:	930c      	str	r3, [sp, #48]	@ 0x30
 802462e:	9b08      	ldr	r3, [sp, #32]
 8024630:	17db      	asrs	r3, r3, #31
 8024632:	930d      	str	r3, [sp, #52]	@ 0x34
 8024634:	9b05      	ldr	r3, [sp, #20]
 8024636:	17db      	asrs	r3, r3, #31
 8024638:	930e      	str	r3, [sp, #56]	@ 0x38
 802463a:	9b06      	ldr	r3, [sp, #24]
 802463c:	17db      	asrs	r3, r3, #31
 802463e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024642:	17db      	asrs	r3, r3, #31
 8024644:	9310      	str	r3, [sp, #64]	@ 0x40
 8024646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024648:	17db      	asrs	r3, r3, #31
 802464a:	9311      	str	r3, [sp, #68]	@ 0x44
 802464c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802464e:	4463      	add	r3, ip
 8024650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024652:	4643      	mov	r3, r8
 8024654:	4641      	mov	r1, r8
 8024656:	681a      	ldr	r2, [r3, #0]
 8024658:	464b      	mov	r3, r9
 802465a:	684f      	ldr	r7, [r1, #4]
 802465c:	4649      	mov	r1, r9
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	18d6      	adds	r6, r2, r3
 8024662:	1ad3      	subs	r3, r2, r3
 8024664:	9301      	str	r3, [sp, #4]
 8024666:	684b      	ldr	r3, [r1, #4]
 8024668:	1af9      	subs	r1, r7, r3
 802466a:	9102      	str	r1, [sp, #8]
 802466c:	6829      	ldr	r1, [r5, #0]
 802466e:	18f8      	adds	r0, r7, r3
 8024670:	468c      	mov	ip, r1
 8024672:	6827      	ldr	r7, [r4, #0]
 8024674:	4467      	add	r7, ip
 8024676:	003a      	movs	r2, r7
 8024678:	19f3      	adds	r3, r6, r7
 802467a:	4647      	mov	r7, r8
 802467c:	109b      	asrs	r3, r3, #2
 802467e:	603b      	str	r3, [r7, #0]
 8024680:	6869      	ldr	r1, [r5, #4]
 8024682:	6867      	ldr	r7, [r4, #4]
 8024684:	468c      	mov	ip, r1
 8024686:	4467      	add	r7, ip
 8024688:	003b      	movs	r3, r7
 802468a:	19c1      	adds	r1, r0, r7
 802468c:	4647      	mov	r7, r8
 802468e:	1ab6      	subs	r6, r6, r2
 8024690:	1089      	asrs	r1, r1, #2
 8024692:	6079      	str	r1, [r7, #4]
 8024694:	17f2      	asrs	r2, r6, #31
 8024696:	9900      	ldr	r1, [sp, #0]
 8024698:	4692      	mov	sl, r2
 802469a:	468c      	mov	ip, r1
 802469c:	6867      	ldr	r7, [r4, #4]
 802469e:	6869      	ldr	r1, [r5, #4]
 80246a0:	44e0      	add	r8, ip
 80246a2:	1a7f      	subs	r7, r7, r1
 80246a4:	9703      	str	r7, [sp, #12]
 80246a6:	6821      	ldr	r1, [r4, #0]
 80246a8:	682f      	ldr	r7, [r5, #0]
 80246aa:	1bc9      	subs	r1, r1, r7
 80246ac:	1ac7      	subs	r7, r0, r3
 80246ae:	17fa      	asrs	r2, r7, #31
 80246b0:	4693      	mov	fp, r2
 80246b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246b4:	9a07      	ldr	r2, [sp, #28]
 80246b6:	9104      	str	r1, [sp, #16]
 80246b8:	0030      	movs	r0, r6
 80246ba:	4651      	mov	r1, sl
 80246bc:	f7db ff80 	bl	80005c0 <__aeabi_lmul>
 80246c0:	9a08      	ldr	r2, [sp, #32]
 80246c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246c4:	9112      	str	r1, [sp, #72]	@ 0x48
 80246c6:	0038      	movs	r0, r7
 80246c8:	4659      	mov	r1, fp
 80246ca:	f7db ff79 	bl	80005c0 <__aeabi_lmul>
 80246ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80246d0:	9a07      	ldr	r2, [sp, #28]
 80246d2:	1a41      	subs	r1, r0, r1
 80246d4:	1049      	asrs	r1, r1, #1
 80246d6:	6021      	str	r1, [r4, #0]
 80246d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246da:	0038      	movs	r0, r7
 80246dc:	4659      	mov	r1, fp
 80246de:	f7db ff6f 	bl	80005c0 <__aeabi_lmul>
 80246e2:	9a08      	ldr	r2, [sp, #32]
 80246e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246e6:	000f      	movs	r7, r1
 80246e8:	0030      	movs	r0, r6
 80246ea:	4651      	mov	r1, sl
 80246ec:	f7db ff68 	bl	80005c0 <__aeabi_lmul>
 80246f0:	9b00      	ldr	r3, [sp, #0]
 80246f2:	187f      	adds	r7, r7, r1
 80246f4:	469c      	mov	ip, r3
 80246f6:	107f      	asrs	r7, r7, #1
 80246f8:	6067      	str	r7, [r4, #4]
 80246fa:	9a01      	ldr	r2, [sp, #4]
 80246fc:	9f03      	ldr	r7, [sp, #12]
 80246fe:	9802      	ldr	r0, [sp, #8]
 8024700:	1bd7      	subs	r7, r2, r7
 8024702:	17fe      	asrs	r6, r7, #31
 8024704:	0031      	movs	r1, r6
 8024706:	9e04      	ldr	r6, [sp, #16]
 8024708:	4682      	mov	sl, r0
 802470a:	4464      	add	r4, ip
 802470c:	46b4      	mov	ip, r6
 802470e:	44e2      	add	sl, ip
 8024710:	4652      	mov	r2, sl
 8024712:	17d2      	asrs	r2, r2, #31
 8024714:	4693      	mov	fp, r2
 8024716:	0038      	movs	r0, r7
 8024718:	9a05      	ldr	r2, [sp, #20]
 802471a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802471c:	9112      	str	r1, [sp, #72]	@ 0x48
 802471e:	f7db ff4f 	bl	80005c0 <__aeabi_lmul>
 8024722:	9a06      	ldr	r2, [sp, #24]
 8024724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024726:	000e      	movs	r6, r1
 8024728:	4650      	mov	r0, sl
 802472a:	4659      	mov	r1, fp
 802472c:	f7db ff48 	bl	80005c0 <__aeabi_lmul>
 8024730:	4648      	mov	r0, r9
 8024732:	1a76      	subs	r6, r6, r1
 8024734:	1076      	asrs	r6, r6, #1
 8024736:	6006      	str	r6, [r0, #0]
 8024738:	9a05      	ldr	r2, [sp, #20]
 802473a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802473c:	4650      	mov	r0, sl
 802473e:	4659      	mov	r1, fp
 8024740:	f7db ff3e 	bl	80005c0 <__aeabi_lmul>
 8024744:	9a06      	ldr	r2, [sp, #24]
 8024746:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024748:	000e      	movs	r6, r1
 802474a:	0038      	movs	r0, r7
 802474c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802474e:	f7db ff37 	bl	80005c0 <__aeabi_lmul>
 8024752:	9a00      	ldr	r2, [sp, #0]
 8024754:	9f03      	ldr	r7, [sp, #12]
 8024756:	4694      	mov	ip, r2
 8024758:	1876      	adds	r6, r6, r1
 802475a:	4649      	mov	r1, r9
 802475c:	44e1      	add	r9, ip
 802475e:	46bc      	mov	ip, r7
 8024760:	9b01      	ldr	r3, [sp, #4]
 8024762:	1076      	asrs	r6, r6, #1
 8024764:	4463      	add	r3, ip
 8024766:	17df      	asrs	r7, r3, #31
 8024768:	604e      	str	r6, [r1, #4]
 802476a:	46ba      	mov	sl, r7
 802476c:	001e      	movs	r6, r3
 802476e:	9802      	ldr	r0, [sp, #8]
 8024770:	9b04      	ldr	r3, [sp, #16]
 8024772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024774:	1ac7      	subs	r7, r0, r3
 8024776:	17fb      	asrs	r3, r7, #31
 8024778:	469b      	mov	fp, r3
 802477a:	0030      	movs	r0, r6
 802477c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802477e:	4651      	mov	r1, sl
 8024780:	f7db ff1e 	bl	80005c0 <__aeabi_lmul>
 8024784:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024786:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024788:	9101      	str	r1, [sp, #4]
 802478a:	0038      	movs	r0, r7
 802478c:	4659      	mov	r1, fp
 802478e:	f7db ff17 	bl	80005c0 <__aeabi_lmul>
 8024792:	9801      	ldr	r0, [sp, #4]
 8024794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024796:	1a41      	subs	r1, r0, r1
 8024798:	1049      	asrs	r1, r1, #1
 802479a:	6029      	str	r1, [r5, #0]
 802479c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802479e:	0038      	movs	r0, r7
 80247a0:	4659      	mov	r1, fp
 80247a2:	f7db ff0d 	bl	80005c0 <__aeabi_lmul>
 80247a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80247a8:	000f      	movs	r7, r1
 80247aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80247ac:	0030      	movs	r0, r6
 80247ae:	4651      	mov	r1, sl
 80247b0:	f7db ff06 	bl	80005c0 <__aeabi_lmul>
 80247b4:	187f      	adds	r7, r7, r1
 80247b6:	107f      	asrs	r7, r7, #1
 80247b8:	606f      	str	r7, [r5, #4]
 80247ba:	9a00      	ldr	r2, [sp, #0]
 80247bc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80247be:	4694      	mov	ip, r2
 80247c0:	4465      	add	r5, ip
 80247c2:	468c      	mov	ip, r1
 80247c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80247c6:	0013      	movs	r3, r2
 80247c8:	4462      	add	r2, ip
 80247ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80247cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80247ce:	429a      	cmp	r2, r3
 80247d0:	d900      	bls.n	80247d4 <arm_radix4_butterfly_inverse_q31+0x46c>
 80247d2:	e73e      	b.n	8024652 <arm_radix4_butterfly_inverse_q31+0x2ea>
 80247d4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80247d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80247d8:	468c      	mov	ip, r1
 80247da:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80247dc:	4462      	add	r2, ip
 80247de:	468c      	mov	ip, r1
 80247e0:	9216      	str	r2, [sp, #88]	@ 0x58
 80247e2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80247e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80247e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80247e8:	4462      	add	r2, ip
 80247ea:	468c      	mov	ip, r1
 80247ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80247ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80247f0:	3301      	adds	r3, #1
 80247f2:	4462      	add	r2, ip
 80247f4:	9218      	str	r2, [sp, #96]	@ 0x60
 80247f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80247f8:	9315      	str	r3, [sp, #84]	@ 0x54
 80247fa:	3208      	adds	r2, #8
 80247fc:	9217      	str	r2, [sp, #92]	@ 0x5c
 80247fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024800:	4293      	cmp	r3, r2
 8024802:	d800      	bhi.n	8024806 <arm_radix4_butterfly_inverse_q31+0x49e>
 8024804:	e6ec      	b.n	80245e0 <arm_radix4_butterfly_inverse_q31+0x278>
 8024806:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024808:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802480a:	009b      	lsls	r3, r3, #2
 802480c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802480e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024810:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024812:	089b      	lsrs	r3, r3, #2
 8024814:	9320      	str	r3, [sp, #128]	@ 0x80
 8024816:	2b04      	cmp	r3, #4
 8024818:	d900      	bls.n	802481c <arm_radix4_butterfly_inverse_q31+0x4b4>
 802481a:	e6c5      	b.n	80245a8 <arm_radix4_butterfly_inverse_q31+0x240>
 802481c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802481e:	469a      	mov	sl, r3
 8024820:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024822:	681a      	ldr	r2, [r3, #0]
 8024824:	6918      	ldr	r0, [r3, #16]
 8024826:	4691      	mov	r9, r2
 8024828:	464c      	mov	r4, r9
 802482a:	4680      	mov	r8, r0
 802482c:	69de      	ldr	r6, [r3, #28]
 802482e:	689d      	ldr	r5, [r3, #8]
 8024830:	46b4      	mov	ip, r6
 8024832:	6998      	ldr	r0, [r3, #24]
 8024834:	1964      	adds	r4, r4, r5
 8024836:	6859      	ldr	r1, [r3, #4]
 8024838:	68da      	ldr	r2, [r3, #12]
 802483a:	4444      	add	r4, r8
 802483c:	695f      	ldr	r7, [r3, #20]
 802483e:	1824      	adds	r4, r4, r0
 8024840:	601c      	str	r4, [r3, #0]
 8024842:	188c      	adds	r4, r1, r2
 8024844:	19e4      	adds	r4, r4, r7
 8024846:	4464      	add	r4, ip
 8024848:	605c      	str	r4, [r3, #4]
 802484a:	464c      	mov	r4, r9
 802484c:	1b64      	subs	r4, r4, r5
 802484e:	4444      	add	r4, r8
 8024850:	1a24      	subs	r4, r4, r0
 8024852:	609c      	str	r4, [r3, #8]
 8024854:	1a8c      	subs	r4, r1, r2
 8024856:	19e4      	adds	r4, r4, r7
 8024858:	1ba4      	subs	r4, r4, r6
 802485a:	60dc      	str	r4, [r3, #12]
 802485c:	464c      	mov	r4, r9
 802485e:	4646      	mov	r6, r8
 8024860:	1aa4      	subs	r4, r4, r2
 8024862:	1ba4      	subs	r4, r4, r6
 8024864:	4464      	add	r4, ip
 8024866:	611c      	str	r4, [r3, #16]
 8024868:	194c      	adds	r4, r1, r5
 802486a:	1be4      	subs	r4, r4, r7
 802486c:	1a24      	subs	r4, r4, r0
 802486e:	615c      	str	r4, [r3, #20]
 8024870:	4644      	mov	r4, r8
 8024872:	4666      	mov	r6, ip
 8024874:	444a      	add	r2, r9
 8024876:	1b12      	subs	r2, r2, r4
 8024878:	1b92      	subs	r2, r2, r6
 802487a:	619a      	str	r2, [r3, #24]
 802487c:	1b4a      	subs	r2, r1, r5
 802487e:	1bd1      	subs	r1, r2, r7
 8024880:	2201      	movs	r2, #1
 8024882:	4252      	negs	r2, r2
 8024884:	4694      	mov	ip, r2
 8024886:	44e2      	add	sl, ip
 8024888:	4652      	mov	r2, sl
 802488a:	1809      	adds	r1, r1, r0
 802488c:	61d9      	str	r1, [r3, #28]
 802488e:	3320      	adds	r3, #32
 8024890:	2a00      	cmp	r2, #0
 8024892:	d1c6      	bne.n	8024822 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8024894:	b027      	add	sp, #156	@ 0x9c
 8024896:	bc3c      	pop	{r2, r3, r4, r5}
 8024898:	4690      	mov	r8, r2
 802489a:	4699      	mov	r9, r3
 802489c:	46a2      	mov	sl, r4
 802489e:	46ab      	mov	fp, r5
 80248a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248a2:	469a      	mov	sl, r3
 80248a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80248a6:	e7bc      	b.n	8024822 <arm_radix4_butterfly_inverse_q31+0x4ba>

080248a8 <arm_cmplx_mag_squared_q31>:
 80248a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248aa:	464f      	mov	r7, r9
 80248ac:	4646      	mov	r6, r8
 80248ae:	0004      	movs	r4, r0
 80248b0:	b4c0      	push	{r6, r7}
 80248b2:	0016      	movs	r6, r2
 80248b4:	000f      	movs	r7, r1
 80248b6:	2a00      	cmp	r2, #0
 80248b8:	d018      	beq.n	80248ec <arm_cmplx_mag_squared_q31+0x44>
 80248ba:	6823      	ldr	r3, [r4, #0]
 80248bc:	6822      	ldr	r2, [r4, #0]
 80248be:	17d9      	asrs	r1, r3, #31
 80248c0:	6863      	ldr	r3, [r4, #4]
 80248c2:	0010      	movs	r0, r2
 80248c4:	4698      	mov	r8, r3
 80248c6:	17db      	asrs	r3, r3, #31
 80248c8:	4699      	mov	r9, r3
 80248ca:	000b      	movs	r3, r1
 80248cc:	f7db fe78 	bl	80005c0 <__aeabi_lmul>
 80248d0:	4642      	mov	r2, r8
 80248d2:	104d      	asrs	r5, r1, #1
 80248d4:	464b      	mov	r3, r9
 80248d6:	4640      	mov	r0, r8
 80248d8:	4649      	mov	r1, r9
 80248da:	f7db fe71 	bl	80005c0 <__aeabi_lmul>
 80248de:	1049      	asrs	r1, r1, #1
 80248e0:	1869      	adds	r1, r5, r1
 80248e2:	3e01      	subs	r6, #1
 80248e4:	c702      	stmia	r7!, {r1}
 80248e6:	3408      	adds	r4, #8
 80248e8:	2e00      	cmp	r6, #0
 80248ea:	d1e6      	bne.n	80248ba <arm_cmplx_mag_squared_q31+0x12>
 80248ec:	bc0c      	pop	{r2, r3}
 80248ee:	4690      	mov	r8, r2
 80248f0:	4699      	mov	r9, r3
 80248f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080248f4 <arm_mult_q31>:
 80248f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248f6:	4646      	mov	r6, r8
 80248f8:	464f      	mov	r7, r9
 80248fa:	4690      	mov	r8, r2
 80248fc:	b4c0      	push	{r6, r7}
 80248fe:	001d      	movs	r5, r3
 8024900:	0006      	movs	r6, r0
 8024902:	000f      	movs	r7, r1
 8024904:	2400      	movs	r4, #0
 8024906:	2b00      	cmp	r3, #0
 8024908:	d020      	beq.n	802494c <arm_mult_q31+0x58>
 802490a:	4b12      	ldr	r3, [pc, #72]	@ (8024954 <arm_mult_q31+0x60>)
 802490c:	4699      	mov	r9, r3
 802490e:	e007      	b.n	8024920 <arm_mult_q31+0x2c>
 8024910:	464b      	mov	r3, r9
 8024912:	4059      	eors	r1, r3
 8024914:	4643      	mov	r3, r8
 8024916:	3d01      	subs	r5, #1
 8024918:	5119      	str	r1, [r3, r4]
 802491a:	3404      	adds	r4, #4
 802491c:	2d00      	cmp	r5, #0
 802491e:	d015      	beq.n	802494c <arm_mult_q31+0x58>
 8024920:	5933      	ldr	r3, [r6, r4]
 8024922:	593a      	ldr	r2, [r7, r4]
 8024924:	17d9      	asrs	r1, r3, #31
 8024926:	593b      	ldr	r3, [r7, r4]
 8024928:	5930      	ldr	r0, [r6, r4]
 802492a:	17db      	asrs	r3, r3, #31
 802492c:	f7db fe48 	bl	80005c0 <__aeabi_lmul>
 8024930:	004b      	lsls	r3, r1, #1
 8024932:	0fc0      	lsrs	r0, r0, #31
 8024934:	4318      	orrs	r0, r3
 8024936:	17c9      	asrs	r1, r1, #31
 8024938:	17c3      	asrs	r3, r0, #31
 802493a:	428b      	cmp	r3, r1
 802493c:	d1e8      	bne.n	8024910 <arm_mult_q31+0x1c>
 802493e:	0001      	movs	r1, r0
 8024940:	4643      	mov	r3, r8
 8024942:	3d01      	subs	r5, #1
 8024944:	5119      	str	r1, [r3, r4]
 8024946:	3404      	adds	r4, #4
 8024948:	2d00      	cmp	r5, #0
 802494a:	d1e9      	bne.n	8024920 <arm_mult_q31+0x2c>
 802494c:	bc0c      	pop	{r2, r3}
 802494e:	4690      	mov	r8, r2
 8024950:	4699      	mov	r9, r3
 8024952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024954:	7fffffff 	.word	0x7fffffff

08024958 <arm_add_q31>:
 8024958:	b5f0      	push	{r4, r5, r6, r7, lr}
 802495a:	465f      	mov	r7, fp
 802495c:	4656      	mov	r6, sl
 802495e:	464d      	mov	r5, r9
 8024960:	4644      	mov	r4, r8
 8024962:	b4f0      	push	{r4, r5, r6, r7}
 8024964:	4693      	mov	fp, r2
 8024966:	b083      	sub	sp, #12
 8024968:	4681      	mov	r9, r0
 802496a:	468a      	mov	sl, r1
 802496c:	4698      	mov	r8, r3
 802496e:	2200      	movs	r2, #0
 8024970:	2b00      	cmp	r3, #0
 8024972:	d020      	beq.n	80249b6 <arm_add_q31+0x5e>
 8024974:	4649      	mov	r1, r9
 8024976:	4653      	mov	r3, sl
 8024978:	588e      	ldr	r6, [r1, r2]
 802497a:	589b      	ldr	r3, [r3, r2]
 802497c:	17f7      	asrs	r7, r6, #31
 802497e:	001c      	movs	r4, r3
 8024980:	0030      	movs	r0, r6
 8024982:	0039      	movs	r1, r7
 8024984:	17dd      	asrs	r5, r3, #31
 8024986:	46b4      	mov	ip, r6
 8024988:	1900      	adds	r0, r0, r4
 802498a:	4169      	adcs	r1, r5
 802498c:	4463      	add	r3, ip
 802498e:	9000      	str	r0, [sp, #0]
 8024990:	9101      	str	r1, [sp, #4]
 8024992:	17d9      	asrs	r1, r3, #31
 8024994:	468c      	mov	ip, r1
 8024996:	9901      	ldr	r1, [sp, #4]
 8024998:	458c      	cmp	ip, r1
 802499a:	d002      	beq.n	80249a2 <arm_add_q31+0x4a>
 802499c:	17cb      	asrs	r3, r1, #31
 802499e:	4909      	ldr	r1, [pc, #36]	@ (80249c4 <arm_add_q31+0x6c>)
 80249a0:	404b      	eors	r3, r1
 80249a2:	4659      	mov	r1, fp
 80249a4:	508b      	str	r3, [r1, r2]
 80249a6:	2301      	movs	r3, #1
 80249a8:	425b      	negs	r3, r3
 80249aa:	469c      	mov	ip, r3
 80249ac:	44e0      	add	r8, ip
 80249ae:	4643      	mov	r3, r8
 80249b0:	3204      	adds	r2, #4
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	d1de      	bne.n	8024974 <arm_add_q31+0x1c>
 80249b6:	b003      	add	sp, #12
 80249b8:	bc3c      	pop	{r2, r3, r4, r5}
 80249ba:	4690      	mov	r8, r2
 80249bc:	4699      	mov	r9, r3
 80249be:	46a2      	mov	sl, r4
 80249c0:	46ab      	mov	fp, r5
 80249c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249c4:	7fffffff 	.word	0x7fffffff

080249c8 <atof>:
 80249c8:	b510      	push	{r4, lr}
 80249ca:	2100      	movs	r1, #0
 80249cc:	f000 fe1e 	bl	802560c <strtod>
 80249d0:	bd10      	pop	{r4, pc}

080249d2 <atoi>:
 80249d2:	b510      	push	{r4, lr}
 80249d4:	220a      	movs	r2, #10
 80249d6:	2100      	movs	r1, #0
 80249d8:	f000 feb0 	bl	802573c <strtol>
 80249dc:	bd10      	pop	{r4, pc}
	...

080249e0 <sulp>:
 80249e0:	b570      	push	{r4, r5, r6, lr}
 80249e2:	0016      	movs	r6, r2
 80249e4:	000d      	movs	r5, r1
 80249e6:	f003 fced 	bl	80283c4 <__ulp>
 80249ea:	2e00      	cmp	r6, #0
 80249ec:	d00d      	beq.n	8024a0a <sulp+0x2a>
 80249ee:	236b      	movs	r3, #107	@ 0x6b
 80249f0:	006a      	lsls	r2, r5, #1
 80249f2:	0d52      	lsrs	r2, r2, #21
 80249f4:	1a9b      	subs	r3, r3, r2
 80249f6:	2b00      	cmp	r3, #0
 80249f8:	dd07      	ble.n	8024a0a <sulp+0x2a>
 80249fa:	2400      	movs	r4, #0
 80249fc:	4a03      	ldr	r2, [pc, #12]	@ (8024a0c <sulp+0x2c>)
 80249fe:	051b      	lsls	r3, r3, #20
 8024a00:	189d      	adds	r5, r3, r2
 8024a02:	002b      	movs	r3, r5
 8024a04:	0022      	movs	r2, r4
 8024a06:	f7dd ffa5 	bl	8002954 <__aeabi_dmul>
 8024a0a:	bd70      	pop	{r4, r5, r6, pc}
 8024a0c:	3ff00000 	.word	0x3ff00000

08024a10 <_strtod_l>:
 8024a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a12:	b0a3      	sub	sp, #140	@ 0x8c
 8024a14:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024a16:	2200      	movs	r2, #0
 8024a18:	2600      	movs	r6, #0
 8024a1a:	2700      	movs	r7, #0
 8024a1c:	9005      	str	r0, [sp, #20]
 8024a1e:	9109      	str	r1, [sp, #36]	@ 0x24
 8024a20:	921e      	str	r2, [sp, #120]	@ 0x78
 8024a22:	911d      	str	r1, [sp, #116]	@ 0x74
 8024a24:	780a      	ldrb	r2, [r1, #0]
 8024a26:	2a2b      	cmp	r2, #43	@ 0x2b
 8024a28:	d053      	beq.n	8024ad2 <_strtod_l+0xc2>
 8024a2a:	d83f      	bhi.n	8024aac <_strtod_l+0x9c>
 8024a2c:	2a0d      	cmp	r2, #13
 8024a2e:	d839      	bhi.n	8024aa4 <_strtod_l+0x94>
 8024a30:	2a08      	cmp	r2, #8
 8024a32:	d839      	bhi.n	8024aa8 <_strtod_l+0x98>
 8024a34:	2a00      	cmp	r2, #0
 8024a36:	d042      	beq.n	8024abe <_strtod_l+0xae>
 8024a38:	2200      	movs	r2, #0
 8024a3a:	9212      	str	r2, [sp, #72]	@ 0x48
 8024a3c:	2100      	movs	r1, #0
 8024a3e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024a40:	910c      	str	r1, [sp, #48]	@ 0x30
 8024a42:	782a      	ldrb	r2, [r5, #0]
 8024a44:	2a30      	cmp	r2, #48	@ 0x30
 8024a46:	d000      	beq.n	8024a4a <_strtod_l+0x3a>
 8024a48:	e083      	b.n	8024b52 <_strtod_l+0x142>
 8024a4a:	786a      	ldrb	r2, [r5, #1]
 8024a4c:	3120      	adds	r1, #32
 8024a4e:	438a      	bics	r2, r1
 8024a50:	2a58      	cmp	r2, #88	@ 0x58
 8024a52:	d000      	beq.n	8024a56 <_strtod_l+0x46>
 8024a54:	e073      	b.n	8024b3e <_strtod_l+0x12e>
 8024a56:	9302      	str	r3, [sp, #8]
 8024a58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024a5a:	4a9b      	ldr	r2, [pc, #620]	@ (8024cc8 <_strtod_l+0x2b8>)
 8024a5c:	9301      	str	r3, [sp, #4]
 8024a5e:	ab1e      	add	r3, sp, #120	@ 0x78
 8024a60:	9300      	str	r3, [sp, #0]
 8024a62:	9805      	ldr	r0, [sp, #20]
 8024a64:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024a66:	a91d      	add	r1, sp, #116	@ 0x74
 8024a68:	f002 fd64 	bl	8027534 <__gethex>
 8024a6c:	230f      	movs	r3, #15
 8024a6e:	0002      	movs	r2, r0
 8024a70:	401a      	ands	r2, r3
 8024a72:	0004      	movs	r4, r0
 8024a74:	9206      	str	r2, [sp, #24]
 8024a76:	4218      	tst	r0, r3
 8024a78:	d005      	beq.n	8024a86 <_strtod_l+0x76>
 8024a7a:	2a06      	cmp	r2, #6
 8024a7c:	d12b      	bne.n	8024ad6 <_strtod_l+0xc6>
 8024a7e:	2300      	movs	r3, #0
 8024a80:	3501      	adds	r5, #1
 8024a82:	951d      	str	r5, [sp, #116]	@ 0x74
 8024a84:	9312      	str	r3, [sp, #72]	@ 0x48
 8024a86:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024a88:	2b00      	cmp	r3, #0
 8024a8a:	d002      	beq.n	8024a92 <_strtod_l+0x82>
 8024a8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024a8e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024a90:	6013      	str	r3, [r2, #0]
 8024a92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024a94:	2b00      	cmp	r3, #0
 8024a96:	d019      	beq.n	8024acc <_strtod_l+0xbc>
 8024a98:	2380      	movs	r3, #128	@ 0x80
 8024a9a:	0030      	movs	r0, r6
 8024a9c:	061b      	lsls	r3, r3, #24
 8024a9e:	18f9      	adds	r1, r7, r3
 8024aa0:	b023      	add	sp, #140	@ 0x8c
 8024aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024aa4:	2a20      	cmp	r2, #32
 8024aa6:	d1c7      	bne.n	8024a38 <_strtod_l+0x28>
 8024aa8:	3101      	adds	r1, #1
 8024aaa:	e7ba      	b.n	8024a22 <_strtod_l+0x12>
 8024aac:	2a2d      	cmp	r2, #45	@ 0x2d
 8024aae:	d1c3      	bne.n	8024a38 <_strtod_l+0x28>
 8024ab0:	3a2c      	subs	r2, #44	@ 0x2c
 8024ab2:	9212      	str	r2, [sp, #72]	@ 0x48
 8024ab4:	1c4a      	adds	r2, r1, #1
 8024ab6:	921d      	str	r2, [sp, #116]	@ 0x74
 8024ab8:	784a      	ldrb	r2, [r1, #1]
 8024aba:	2a00      	cmp	r2, #0
 8024abc:	d1be      	bne.n	8024a3c <_strtod_l+0x2c>
 8024abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ac0:	931d      	str	r3, [sp, #116]	@ 0x74
 8024ac2:	2300      	movs	r3, #0
 8024ac4:	9312      	str	r3, [sp, #72]	@ 0x48
 8024ac6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024ac8:	2b00      	cmp	r3, #0
 8024aca:	d1df      	bne.n	8024a8c <_strtod_l+0x7c>
 8024acc:	0030      	movs	r0, r6
 8024ace:	0039      	movs	r1, r7
 8024ad0:	e7e6      	b.n	8024aa0 <_strtod_l+0x90>
 8024ad2:	2200      	movs	r2, #0
 8024ad4:	e7ed      	b.n	8024ab2 <_strtod_l+0xa2>
 8024ad6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024ad8:	2a00      	cmp	r2, #0
 8024ada:	d007      	beq.n	8024aec <_strtod_l+0xdc>
 8024adc:	2135      	movs	r1, #53	@ 0x35
 8024ade:	a820      	add	r0, sp, #128	@ 0x80
 8024ae0:	f003 fd66 	bl	80285b0 <__copybits>
 8024ae4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024ae6:	9805      	ldr	r0, [sp, #20]
 8024ae8:	f003 f928 	bl	8027d3c <_Bfree>
 8024aec:	9806      	ldr	r0, [sp, #24]
 8024aee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024af0:	3801      	subs	r0, #1
 8024af2:	2804      	cmp	r0, #4
 8024af4:	d806      	bhi.n	8024b04 <_strtod_l+0xf4>
 8024af6:	f7db fb41 	bl	800017c <__gnu_thumb1_case_uqi>
 8024afa:	0312      	.short	0x0312
 8024afc:	1e1c      	.short	0x1e1c
 8024afe:	12          	.byte	0x12
 8024aff:	00          	.byte	0x00
 8024b00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024b02:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024b04:	05e4      	lsls	r4, r4, #23
 8024b06:	d502      	bpl.n	8024b0e <_strtod_l+0xfe>
 8024b08:	2380      	movs	r3, #128	@ 0x80
 8024b0a:	061b      	lsls	r3, r3, #24
 8024b0c:	431f      	orrs	r7, r3
 8024b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8024ccc <_strtod_l+0x2bc>)
 8024b10:	423b      	tst	r3, r7
 8024b12:	d1b8      	bne.n	8024a86 <_strtod_l+0x76>
 8024b14:	f001 fd9e 	bl	8026654 <__errno>
 8024b18:	2322      	movs	r3, #34	@ 0x22
 8024b1a:	6003      	str	r3, [r0, #0]
 8024b1c:	e7b3      	b.n	8024a86 <_strtod_l+0x76>
 8024b1e:	496c      	ldr	r1, [pc, #432]	@ (8024cd0 <_strtod_l+0x2c0>)
 8024b20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024b22:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024b24:	400a      	ands	r2, r1
 8024b26:	496b      	ldr	r1, [pc, #428]	@ (8024cd4 <_strtod_l+0x2c4>)
 8024b28:	185b      	adds	r3, r3, r1
 8024b2a:	051b      	lsls	r3, r3, #20
 8024b2c:	431a      	orrs	r2, r3
 8024b2e:	0017      	movs	r7, r2
 8024b30:	e7e8      	b.n	8024b04 <_strtod_l+0xf4>
 8024b32:	4f66      	ldr	r7, [pc, #408]	@ (8024ccc <_strtod_l+0x2bc>)
 8024b34:	e7e6      	b.n	8024b04 <_strtod_l+0xf4>
 8024b36:	2601      	movs	r6, #1
 8024b38:	4f67      	ldr	r7, [pc, #412]	@ (8024cd8 <_strtod_l+0x2c8>)
 8024b3a:	4276      	negs	r6, r6
 8024b3c:	e7e2      	b.n	8024b04 <_strtod_l+0xf4>
 8024b3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b40:	1c5a      	adds	r2, r3, #1
 8024b42:	921d      	str	r2, [sp, #116]	@ 0x74
 8024b44:	785b      	ldrb	r3, [r3, #1]
 8024b46:	2b30      	cmp	r3, #48	@ 0x30
 8024b48:	d0f9      	beq.n	8024b3e <_strtod_l+0x12e>
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	d09b      	beq.n	8024a86 <_strtod_l+0x76>
 8024b4e:	2301      	movs	r3, #1
 8024b50:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b54:	220a      	movs	r2, #10
 8024b56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024b58:	2300      	movs	r3, #0
 8024b5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b5c:	930d      	str	r3, [sp, #52]	@ 0x34
 8024b5e:	9308      	str	r3, [sp, #32]
 8024b60:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024b62:	7804      	ldrb	r4, [r0, #0]
 8024b64:	0023      	movs	r3, r4
 8024b66:	3b30      	subs	r3, #48	@ 0x30
 8024b68:	b2d9      	uxtb	r1, r3
 8024b6a:	2909      	cmp	r1, #9
 8024b6c:	d927      	bls.n	8024bbe <_strtod_l+0x1ae>
 8024b6e:	2201      	movs	r2, #1
 8024b70:	495a      	ldr	r1, [pc, #360]	@ (8024cdc <_strtod_l+0x2cc>)
 8024b72:	f001 fce1 	bl	8026538 <strncmp>
 8024b76:	2800      	cmp	r0, #0
 8024b78:	d033      	beq.n	8024be2 <_strtod_l+0x1d2>
 8024b7a:	2000      	movs	r0, #0
 8024b7c:	0023      	movs	r3, r4
 8024b7e:	4684      	mov	ip, r0
 8024b80:	9a08      	ldr	r2, [sp, #32]
 8024b82:	900e      	str	r0, [sp, #56]	@ 0x38
 8024b84:	9206      	str	r2, [sp, #24]
 8024b86:	2220      	movs	r2, #32
 8024b88:	0019      	movs	r1, r3
 8024b8a:	4391      	bics	r1, r2
 8024b8c:	000a      	movs	r2, r1
 8024b8e:	2100      	movs	r1, #0
 8024b90:	9107      	str	r1, [sp, #28]
 8024b92:	2a45      	cmp	r2, #69	@ 0x45
 8024b94:	d000      	beq.n	8024b98 <_strtod_l+0x188>
 8024b96:	e0cb      	b.n	8024d30 <_strtod_l+0x320>
 8024b98:	9b06      	ldr	r3, [sp, #24]
 8024b9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024b9c:	4303      	orrs	r3, r0
 8024b9e:	4313      	orrs	r3, r2
 8024ba0:	428b      	cmp	r3, r1
 8024ba2:	d08c      	beq.n	8024abe <_strtod_l+0xae>
 8024ba4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ba8:	3301      	adds	r3, #1
 8024baa:	931d      	str	r3, [sp, #116]	@ 0x74
 8024bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bae:	785b      	ldrb	r3, [r3, #1]
 8024bb0:	2b2b      	cmp	r3, #43	@ 0x2b
 8024bb2:	d07b      	beq.n	8024cac <_strtod_l+0x29c>
 8024bb4:	000c      	movs	r4, r1
 8024bb6:	2b2d      	cmp	r3, #45	@ 0x2d
 8024bb8:	d17e      	bne.n	8024cb8 <_strtod_l+0x2a8>
 8024bba:	2401      	movs	r4, #1
 8024bbc:	e077      	b.n	8024cae <_strtod_l+0x29e>
 8024bbe:	9908      	ldr	r1, [sp, #32]
 8024bc0:	2908      	cmp	r1, #8
 8024bc2:	dc09      	bgt.n	8024bd8 <_strtod_l+0x1c8>
 8024bc4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024bc6:	4351      	muls	r1, r2
 8024bc8:	185b      	adds	r3, r3, r1
 8024bca:	930d      	str	r3, [sp, #52]	@ 0x34
 8024bcc:	9b08      	ldr	r3, [sp, #32]
 8024bce:	3001      	adds	r0, #1
 8024bd0:	3301      	adds	r3, #1
 8024bd2:	9308      	str	r3, [sp, #32]
 8024bd4:	901d      	str	r0, [sp, #116]	@ 0x74
 8024bd6:	e7c3      	b.n	8024b60 <_strtod_l+0x150>
 8024bd8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024bda:	4355      	muls	r5, r2
 8024bdc:	195b      	adds	r3, r3, r5
 8024bde:	9310      	str	r3, [sp, #64]	@ 0x40
 8024be0:	e7f4      	b.n	8024bcc <_strtod_l+0x1bc>
 8024be2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024be4:	1c5a      	adds	r2, r3, #1
 8024be6:	921d      	str	r2, [sp, #116]	@ 0x74
 8024be8:	9a08      	ldr	r2, [sp, #32]
 8024bea:	785b      	ldrb	r3, [r3, #1]
 8024bec:	2a00      	cmp	r2, #0
 8024bee:	d03e      	beq.n	8024c6e <_strtod_l+0x25e>
 8024bf0:	900e      	str	r0, [sp, #56]	@ 0x38
 8024bf2:	9206      	str	r2, [sp, #24]
 8024bf4:	001a      	movs	r2, r3
 8024bf6:	3a30      	subs	r2, #48	@ 0x30
 8024bf8:	2a09      	cmp	r2, #9
 8024bfa:	d912      	bls.n	8024c22 <_strtod_l+0x212>
 8024bfc:	2201      	movs	r2, #1
 8024bfe:	4694      	mov	ip, r2
 8024c00:	e7c1      	b.n	8024b86 <_strtod_l+0x176>
 8024c02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c04:	3001      	adds	r0, #1
 8024c06:	1c5a      	adds	r2, r3, #1
 8024c08:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c0a:	785b      	ldrb	r3, [r3, #1]
 8024c0c:	2b30      	cmp	r3, #48	@ 0x30
 8024c0e:	d0f8      	beq.n	8024c02 <_strtod_l+0x1f2>
 8024c10:	001a      	movs	r2, r3
 8024c12:	3a31      	subs	r2, #49	@ 0x31
 8024c14:	2a08      	cmp	r2, #8
 8024c16:	d844      	bhi.n	8024ca2 <_strtod_l+0x292>
 8024c18:	900e      	str	r0, [sp, #56]	@ 0x38
 8024c1a:	2000      	movs	r0, #0
 8024c1c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024c1e:	9006      	str	r0, [sp, #24]
 8024c20:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024c22:	001c      	movs	r4, r3
 8024c24:	1c42      	adds	r2, r0, #1
 8024c26:	3c30      	subs	r4, #48	@ 0x30
 8024c28:	2b30      	cmp	r3, #48	@ 0x30
 8024c2a:	d01a      	beq.n	8024c62 <_strtod_l+0x252>
 8024c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c2e:	9906      	ldr	r1, [sp, #24]
 8024c30:	189b      	adds	r3, r3, r2
 8024c32:	930e      	str	r3, [sp, #56]	@ 0x38
 8024c34:	230a      	movs	r3, #10
 8024c36:	469c      	mov	ip, r3
 8024c38:	9d06      	ldr	r5, [sp, #24]
 8024c3a:	1c4b      	adds	r3, r1, #1
 8024c3c:	1b5d      	subs	r5, r3, r5
 8024c3e:	42aa      	cmp	r2, r5
 8024c40:	dc17      	bgt.n	8024c72 <_strtod_l+0x262>
 8024c42:	43c3      	mvns	r3, r0
 8024c44:	9a06      	ldr	r2, [sp, #24]
 8024c46:	17db      	asrs	r3, r3, #31
 8024c48:	4003      	ands	r3, r0
 8024c4a:	18d1      	adds	r1, r2, r3
 8024c4c:	3201      	adds	r2, #1
 8024c4e:	18d3      	adds	r3, r2, r3
 8024c50:	9306      	str	r3, [sp, #24]
 8024c52:	2908      	cmp	r1, #8
 8024c54:	dc1c      	bgt.n	8024c90 <_strtod_l+0x280>
 8024c56:	230a      	movs	r3, #10
 8024c58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c5a:	4353      	muls	r3, r2
 8024c5c:	2200      	movs	r2, #0
 8024c5e:	18e3      	adds	r3, r4, r3
 8024c60:	930d      	str	r3, [sp, #52]	@ 0x34
 8024c62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c64:	0010      	movs	r0, r2
 8024c66:	1c59      	adds	r1, r3, #1
 8024c68:	911d      	str	r1, [sp, #116]	@ 0x74
 8024c6a:	785b      	ldrb	r3, [r3, #1]
 8024c6c:	e7c2      	b.n	8024bf4 <_strtod_l+0x1e4>
 8024c6e:	9808      	ldr	r0, [sp, #32]
 8024c70:	e7cc      	b.n	8024c0c <_strtod_l+0x1fc>
 8024c72:	2908      	cmp	r1, #8
 8024c74:	dc05      	bgt.n	8024c82 <_strtod_l+0x272>
 8024c76:	4665      	mov	r5, ip
 8024c78:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024c7a:	4369      	muls	r1, r5
 8024c7c:	910d      	str	r1, [sp, #52]	@ 0x34
 8024c7e:	0019      	movs	r1, r3
 8024c80:	e7da      	b.n	8024c38 <_strtod_l+0x228>
 8024c82:	2b10      	cmp	r3, #16
 8024c84:	dcfb      	bgt.n	8024c7e <_strtod_l+0x26e>
 8024c86:	4661      	mov	r1, ip
 8024c88:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024c8a:	434d      	muls	r5, r1
 8024c8c:	9510      	str	r5, [sp, #64]	@ 0x40
 8024c8e:	e7f6      	b.n	8024c7e <_strtod_l+0x26e>
 8024c90:	2200      	movs	r2, #0
 8024c92:	290f      	cmp	r1, #15
 8024c94:	dce5      	bgt.n	8024c62 <_strtod_l+0x252>
 8024c96:	230a      	movs	r3, #10
 8024c98:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024c9a:	435d      	muls	r5, r3
 8024c9c:	1963      	adds	r3, r4, r5
 8024c9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024ca0:	e7df      	b.n	8024c62 <_strtod_l+0x252>
 8024ca2:	2200      	movs	r2, #0
 8024ca4:	920e      	str	r2, [sp, #56]	@ 0x38
 8024ca6:	9206      	str	r2, [sp, #24]
 8024ca8:	3201      	adds	r2, #1
 8024caa:	e7a8      	b.n	8024bfe <_strtod_l+0x1ee>
 8024cac:	2400      	movs	r4, #0
 8024cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cb0:	3302      	adds	r3, #2
 8024cb2:	931d      	str	r3, [sp, #116]	@ 0x74
 8024cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cb6:	789b      	ldrb	r3, [r3, #2]
 8024cb8:	001a      	movs	r2, r3
 8024cba:	3a30      	subs	r2, #48	@ 0x30
 8024cbc:	2a09      	cmp	r2, #9
 8024cbe:	d913      	bls.n	8024ce8 <_strtod_l+0x2d8>
 8024cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024cc2:	921d      	str	r2, [sp, #116]	@ 0x74
 8024cc4:	2200      	movs	r2, #0
 8024cc6:	e032      	b.n	8024d2e <_strtod_l+0x31e>
 8024cc8:	0802ec7c 	.word	0x0802ec7c
 8024ccc:	7ff00000 	.word	0x7ff00000
 8024cd0:	ffefffff 	.word	0xffefffff
 8024cd4:	00000433 	.word	0x00000433
 8024cd8:	7fffffff 	.word	0x7fffffff
 8024cdc:	0802ea94 	.word	0x0802ea94
 8024ce0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ce2:	1c5a      	adds	r2, r3, #1
 8024ce4:	921d      	str	r2, [sp, #116]	@ 0x74
 8024ce6:	785b      	ldrb	r3, [r3, #1]
 8024ce8:	2b30      	cmp	r3, #48	@ 0x30
 8024cea:	d0f9      	beq.n	8024ce0 <_strtod_l+0x2d0>
 8024cec:	2200      	movs	r2, #0
 8024cee:	9207      	str	r2, [sp, #28]
 8024cf0:	001a      	movs	r2, r3
 8024cf2:	3a31      	subs	r2, #49	@ 0x31
 8024cf4:	2a08      	cmp	r2, #8
 8024cf6:	d81b      	bhi.n	8024d30 <_strtod_l+0x320>
 8024cf8:	3b30      	subs	r3, #48	@ 0x30
 8024cfa:	001a      	movs	r2, r3
 8024cfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cfe:	9307      	str	r3, [sp, #28]
 8024d00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d02:	1c59      	adds	r1, r3, #1
 8024d04:	911d      	str	r1, [sp, #116]	@ 0x74
 8024d06:	785b      	ldrb	r3, [r3, #1]
 8024d08:	001d      	movs	r5, r3
 8024d0a:	3d30      	subs	r5, #48	@ 0x30
 8024d0c:	2d09      	cmp	r5, #9
 8024d0e:	d93a      	bls.n	8024d86 <_strtod_l+0x376>
 8024d10:	9d07      	ldr	r5, [sp, #28]
 8024d12:	1b49      	subs	r1, r1, r5
 8024d14:	000d      	movs	r5, r1
 8024d16:	49b3      	ldr	r1, [pc, #716]	@ (8024fe4 <_strtod_l+0x5d4>)
 8024d18:	9107      	str	r1, [sp, #28]
 8024d1a:	2d08      	cmp	r5, #8
 8024d1c:	dc03      	bgt.n	8024d26 <_strtod_l+0x316>
 8024d1e:	9207      	str	r2, [sp, #28]
 8024d20:	428a      	cmp	r2, r1
 8024d22:	dd00      	ble.n	8024d26 <_strtod_l+0x316>
 8024d24:	9107      	str	r1, [sp, #28]
 8024d26:	2c00      	cmp	r4, #0
 8024d28:	d002      	beq.n	8024d30 <_strtod_l+0x320>
 8024d2a:	9a07      	ldr	r2, [sp, #28]
 8024d2c:	4252      	negs	r2, r2
 8024d2e:	9207      	str	r2, [sp, #28]
 8024d30:	9a06      	ldr	r2, [sp, #24]
 8024d32:	2a00      	cmp	r2, #0
 8024d34:	d14b      	bne.n	8024dce <_strtod_l+0x3be>
 8024d36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d38:	4310      	orrs	r0, r2
 8024d3a:	d000      	beq.n	8024d3e <_strtod_l+0x32e>
 8024d3c:	e6a3      	b.n	8024a86 <_strtod_l+0x76>
 8024d3e:	4662      	mov	r2, ip
 8024d40:	2a00      	cmp	r2, #0
 8024d42:	d000      	beq.n	8024d46 <_strtod_l+0x336>
 8024d44:	e6bb      	b.n	8024abe <_strtod_l+0xae>
 8024d46:	2b69      	cmp	r3, #105	@ 0x69
 8024d48:	d025      	beq.n	8024d96 <_strtod_l+0x386>
 8024d4a:	dc21      	bgt.n	8024d90 <_strtod_l+0x380>
 8024d4c:	2b49      	cmp	r3, #73	@ 0x49
 8024d4e:	d022      	beq.n	8024d96 <_strtod_l+0x386>
 8024d50:	2b4e      	cmp	r3, #78	@ 0x4e
 8024d52:	d000      	beq.n	8024d56 <_strtod_l+0x346>
 8024d54:	e6b3      	b.n	8024abe <_strtod_l+0xae>
 8024d56:	49a4      	ldr	r1, [pc, #656]	@ (8024fe8 <_strtod_l+0x5d8>)
 8024d58:	a81d      	add	r0, sp, #116	@ 0x74
 8024d5a:	f002 fe21 	bl	80279a0 <__match>
 8024d5e:	2800      	cmp	r0, #0
 8024d60:	d100      	bne.n	8024d64 <_strtod_l+0x354>
 8024d62:	e6ac      	b.n	8024abe <_strtod_l+0xae>
 8024d64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d66:	781b      	ldrb	r3, [r3, #0]
 8024d68:	2b28      	cmp	r3, #40	@ 0x28
 8024d6a:	d12a      	bne.n	8024dc2 <_strtod_l+0x3b2>
 8024d6c:	499f      	ldr	r1, [pc, #636]	@ (8024fec <_strtod_l+0x5dc>)
 8024d6e:	aa20      	add	r2, sp, #128	@ 0x80
 8024d70:	a81d      	add	r0, sp, #116	@ 0x74
 8024d72:	f002 fe29 	bl	80279c8 <__hexnan>
 8024d76:	2805      	cmp	r0, #5
 8024d78:	d123      	bne.n	8024dc2 <_strtod_l+0x3b2>
 8024d7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024d7c:	4a9c      	ldr	r2, [pc, #624]	@ (8024ff0 <_strtod_l+0x5e0>)
 8024d7e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d80:	431a      	orrs	r2, r3
 8024d82:	0017      	movs	r7, r2
 8024d84:	e67f      	b.n	8024a86 <_strtod_l+0x76>
 8024d86:	210a      	movs	r1, #10
 8024d88:	434a      	muls	r2, r1
 8024d8a:	18d2      	adds	r2, r2, r3
 8024d8c:	3a30      	subs	r2, #48	@ 0x30
 8024d8e:	e7b7      	b.n	8024d00 <_strtod_l+0x2f0>
 8024d90:	2b6e      	cmp	r3, #110	@ 0x6e
 8024d92:	d0e0      	beq.n	8024d56 <_strtod_l+0x346>
 8024d94:	e693      	b.n	8024abe <_strtod_l+0xae>
 8024d96:	4997      	ldr	r1, [pc, #604]	@ (8024ff4 <_strtod_l+0x5e4>)
 8024d98:	a81d      	add	r0, sp, #116	@ 0x74
 8024d9a:	f002 fe01 	bl	80279a0 <__match>
 8024d9e:	2800      	cmp	r0, #0
 8024da0:	d100      	bne.n	8024da4 <_strtod_l+0x394>
 8024da2:	e68c      	b.n	8024abe <_strtod_l+0xae>
 8024da4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024da6:	4994      	ldr	r1, [pc, #592]	@ (8024ff8 <_strtod_l+0x5e8>)
 8024da8:	3b01      	subs	r3, #1
 8024daa:	a81d      	add	r0, sp, #116	@ 0x74
 8024dac:	931d      	str	r3, [sp, #116]	@ 0x74
 8024dae:	f002 fdf7 	bl	80279a0 <__match>
 8024db2:	2800      	cmp	r0, #0
 8024db4:	d102      	bne.n	8024dbc <_strtod_l+0x3ac>
 8024db6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024db8:	3301      	adds	r3, #1
 8024dba:	931d      	str	r3, [sp, #116]	@ 0x74
 8024dbc:	2600      	movs	r6, #0
 8024dbe:	4f8c      	ldr	r7, [pc, #560]	@ (8024ff0 <_strtod_l+0x5e0>)
 8024dc0:	e661      	b.n	8024a86 <_strtod_l+0x76>
 8024dc2:	488e      	ldr	r0, [pc, #568]	@ (8024ffc <_strtod_l+0x5ec>)
 8024dc4:	f001 fc88 	bl	80266d8 <nan>
 8024dc8:	0006      	movs	r6, r0
 8024dca:	000f      	movs	r7, r1
 8024dcc:	e65b      	b.n	8024a86 <_strtod_l+0x76>
 8024dce:	9b07      	ldr	r3, [sp, #28]
 8024dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024dd2:	1a9b      	subs	r3, r3, r2
 8024dd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8024dd6:	9b08      	ldr	r3, [sp, #32]
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	d101      	bne.n	8024de0 <_strtod_l+0x3d0>
 8024ddc:	9b06      	ldr	r3, [sp, #24]
 8024dde:	9308      	str	r3, [sp, #32]
 8024de0:	9c06      	ldr	r4, [sp, #24]
 8024de2:	2c10      	cmp	r4, #16
 8024de4:	dd00      	ble.n	8024de8 <_strtod_l+0x3d8>
 8024de6:	2410      	movs	r4, #16
 8024de8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024dea:	f7de fd2f 	bl	800384c <__aeabi_ui2d>
 8024dee:	9b06      	ldr	r3, [sp, #24]
 8024df0:	0006      	movs	r6, r0
 8024df2:	000f      	movs	r7, r1
 8024df4:	2b09      	cmp	r3, #9
 8024df6:	dc13      	bgt.n	8024e20 <_strtod_l+0x410>
 8024df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024dfa:	2b00      	cmp	r3, #0
 8024dfc:	d100      	bne.n	8024e00 <_strtod_l+0x3f0>
 8024dfe:	e642      	b.n	8024a86 <_strtod_l+0x76>
 8024e00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e02:	2b00      	cmp	r3, #0
 8024e04:	dc00      	bgt.n	8024e08 <_strtod_l+0x3f8>
 8024e06:	e07e      	b.n	8024f06 <_strtod_l+0x4f6>
 8024e08:	2b16      	cmp	r3, #22
 8024e0a:	dc63      	bgt.n	8024ed4 <_strtod_l+0x4c4>
 8024e0c:	497c      	ldr	r1, [pc, #496]	@ (8025000 <_strtod_l+0x5f0>)
 8024e0e:	00db      	lsls	r3, r3, #3
 8024e10:	18c9      	adds	r1, r1, r3
 8024e12:	0032      	movs	r2, r6
 8024e14:	6808      	ldr	r0, [r1, #0]
 8024e16:	6849      	ldr	r1, [r1, #4]
 8024e18:	003b      	movs	r3, r7
 8024e1a:	f7dd fd9b 	bl	8002954 <__aeabi_dmul>
 8024e1e:	e7d3      	b.n	8024dc8 <_strtod_l+0x3b8>
 8024e20:	0022      	movs	r2, r4
 8024e22:	4b77      	ldr	r3, [pc, #476]	@ (8025000 <_strtod_l+0x5f0>)
 8024e24:	3a09      	subs	r2, #9
 8024e26:	00d2      	lsls	r2, r2, #3
 8024e28:	189b      	adds	r3, r3, r2
 8024e2a:	681a      	ldr	r2, [r3, #0]
 8024e2c:	685b      	ldr	r3, [r3, #4]
 8024e2e:	f7dd fd91 	bl	8002954 <__aeabi_dmul>
 8024e32:	0006      	movs	r6, r0
 8024e34:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024e36:	000f      	movs	r7, r1
 8024e38:	f7de fd08 	bl	800384c <__aeabi_ui2d>
 8024e3c:	000b      	movs	r3, r1
 8024e3e:	0002      	movs	r2, r0
 8024e40:	0039      	movs	r1, r7
 8024e42:	0030      	movs	r0, r6
 8024e44:	f7dc fd86 	bl	8001954 <__aeabi_dadd>
 8024e48:	9b06      	ldr	r3, [sp, #24]
 8024e4a:	0006      	movs	r6, r0
 8024e4c:	000f      	movs	r7, r1
 8024e4e:	2b0f      	cmp	r3, #15
 8024e50:	ddd2      	ble.n	8024df8 <_strtod_l+0x3e8>
 8024e52:	9b06      	ldr	r3, [sp, #24]
 8024e54:	1b1c      	subs	r4, r3, r4
 8024e56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e58:	18e4      	adds	r4, r4, r3
 8024e5a:	2c00      	cmp	r4, #0
 8024e5c:	dc00      	bgt.n	8024e60 <_strtod_l+0x450>
 8024e5e:	e09b      	b.n	8024f98 <_strtod_l+0x588>
 8024e60:	220f      	movs	r2, #15
 8024e62:	0023      	movs	r3, r4
 8024e64:	4013      	ands	r3, r2
 8024e66:	4214      	tst	r4, r2
 8024e68:	d00a      	beq.n	8024e80 <_strtod_l+0x470>
 8024e6a:	4965      	ldr	r1, [pc, #404]	@ (8025000 <_strtod_l+0x5f0>)
 8024e6c:	00db      	lsls	r3, r3, #3
 8024e6e:	18c9      	adds	r1, r1, r3
 8024e70:	0032      	movs	r2, r6
 8024e72:	6808      	ldr	r0, [r1, #0]
 8024e74:	6849      	ldr	r1, [r1, #4]
 8024e76:	003b      	movs	r3, r7
 8024e78:	f7dd fd6c 	bl	8002954 <__aeabi_dmul>
 8024e7c:	0006      	movs	r6, r0
 8024e7e:	000f      	movs	r7, r1
 8024e80:	230f      	movs	r3, #15
 8024e82:	439c      	bics	r4, r3
 8024e84:	d073      	beq.n	8024f6e <_strtod_l+0x55e>
 8024e86:	3326      	adds	r3, #38	@ 0x26
 8024e88:	33ff      	adds	r3, #255	@ 0xff
 8024e8a:	429c      	cmp	r4, r3
 8024e8c:	dd4b      	ble.n	8024f26 <_strtod_l+0x516>
 8024e8e:	2300      	movs	r3, #0
 8024e90:	9306      	str	r3, [sp, #24]
 8024e92:	9307      	str	r3, [sp, #28]
 8024e94:	930d      	str	r3, [sp, #52]	@ 0x34
 8024e96:	9308      	str	r3, [sp, #32]
 8024e98:	2322      	movs	r3, #34	@ 0x22
 8024e9a:	2600      	movs	r6, #0
 8024e9c:	9a05      	ldr	r2, [sp, #20]
 8024e9e:	4f54      	ldr	r7, [pc, #336]	@ (8024ff0 <_strtod_l+0x5e0>)
 8024ea0:	6013      	str	r3, [r2, #0]
 8024ea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024ea4:	42b3      	cmp	r3, r6
 8024ea6:	d100      	bne.n	8024eaa <_strtod_l+0x49a>
 8024ea8:	e5ed      	b.n	8024a86 <_strtod_l+0x76>
 8024eaa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024eac:	9805      	ldr	r0, [sp, #20]
 8024eae:	f002 ff45 	bl	8027d3c <_Bfree>
 8024eb2:	9908      	ldr	r1, [sp, #32]
 8024eb4:	9805      	ldr	r0, [sp, #20]
 8024eb6:	f002 ff41 	bl	8027d3c <_Bfree>
 8024eba:	9907      	ldr	r1, [sp, #28]
 8024ebc:	9805      	ldr	r0, [sp, #20]
 8024ebe:	f002 ff3d 	bl	8027d3c <_Bfree>
 8024ec2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024ec4:	9805      	ldr	r0, [sp, #20]
 8024ec6:	f002 ff39 	bl	8027d3c <_Bfree>
 8024eca:	9906      	ldr	r1, [sp, #24]
 8024ecc:	9805      	ldr	r0, [sp, #20]
 8024ece:	f002 ff35 	bl	8027d3c <_Bfree>
 8024ed2:	e5d8      	b.n	8024a86 <_strtod_l+0x76>
 8024ed4:	2325      	movs	r3, #37	@ 0x25
 8024ed6:	9a06      	ldr	r2, [sp, #24]
 8024ed8:	1a9b      	subs	r3, r3, r2
 8024eda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024edc:	4293      	cmp	r3, r2
 8024ede:	dbb8      	blt.n	8024e52 <_strtod_l+0x442>
 8024ee0:	240f      	movs	r4, #15
 8024ee2:	9b06      	ldr	r3, [sp, #24]
 8024ee4:	4d46      	ldr	r5, [pc, #280]	@ (8025000 <_strtod_l+0x5f0>)
 8024ee6:	1ae4      	subs	r4, r4, r3
 8024ee8:	00e1      	lsls	r1, r4, #3
 8024eea:	1869      	adds	r1, r5, r1
 8024eec:	0032      	movs	r2, r6
 8024eee:	6808      	ldr	r0, [r1, #0]
 8024ef0:	6849      	ldr	r1, [r1, #4]
 8024ef2:	003b      	movs	r3, r7
 8024ef4:	f7dd fd2e 	bl	8002954 <__aeabi_dmul>
 8024ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024efa:	1b1c      	subs	r4, r3, r4
 8024efc:	00e4      	lsls	r4, r4, #3
 8024efe:	192d      	adds	r5, r5, r4
 8024f00:	682a      	ldr	r2, [r5, #0]
 8024f02:	686b      	ldr	r3, [r5, #4]
 8024f04:	e789      	b.n	8024e1a <_strtod_l+0x40a>
 8024f06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f08:	3316      	adds	r3, #22
 8024f0a:	dba2      	blt.n	8024e52 <_strtod_l+0x442>
 8024f0c:	9907      	ldr	r1, [sp, #28]
 8024f0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024f10:	4b3b      	ldr	r3, [pc, #236]	@ (8025000 <_strtod_l+0x5f0>)
 8024f12:	1a52      	subs	r2, r2, r1
 8024f14:	00d2      	lsls	r2, r2, #3
 8024f16:	189b      	adds	r3, r3, r2
 8024f18:	0030      	movs	r0, r6
 8024f1a:	681a      	ldr	r2, [r3, #0]
 8024f1c:	685b      	ldr	r3, [r3, #4]
 8024f1e:	0039      	movs	r1, r7
 8024f20:	f7dd f8de 	bl	80020e0 <__aeabi_ddiv>
 8024f24:	e750      	b.n	8024dc8 <_strtod_l+0x3b8>
 8024f26:	2300      	movs	r3, #0
 8024f28:	0030      	movs	r0, r6
 8024f2a:	0039      	movs	r1, r7
 8024f2c:	4d35      	ldr	r5, [pc, #212]	@ (8025004 <_strtod_l+0x5f4>)
 8024f2e:	1124      	asrs	r4, r4, #4
 8024f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f32:	2c01      	cmp	r4, #1
 8024f34:	dc1e      	bgt.n	8024f74 <_strtod_l+0x564>
 8024f36:	2b00      	cmp	r3, #0
 8024f38:	d001      	beq.n	8024f3e <_strtod_l+0x52e>
 8024f3a:	0006      	movs	r6, r0
 8024f3c:	000f      	movs	r7, r1
 8024f3e:	4b32      	ldr	r3, [pc, #200]	@ (8025008 <_strtod_l+0x5f8>)
 8024f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f42:	18ff      	adds	r7, r7, r3
 8024f44:	4b2f      	ldr	r3, [pc, #188]	@ (8025004 <_strtod_l+0x5f4>)
 8024f46:	00d5      	lsls	r5, r2, #3
 8024f48:	195d      	adds	r5, r3, r5
 8024f4a:	0032      	movs	r2, r6
 8024f4c:	6828      	ldr	r0, [r5, #0]
 8024f4e:	6869      	ldr	r1, [r5, #4]
 8024f50:	003b      	movs	r3, r7
 8024f52:	f7dd fcff 	bl	8002954 <__aeabi_dmul>
 8024f56:	4b26      	ldr	r3, [pc, #152]	@ (8024ff0 <_strtod_l+0x5e0>)
 8024f58:	4a2c      	ldr	r2, [pc, #176]	@ (802500c <_strtod_l+0x5fc>)
 8024f5a:	0006      	movs	r6, r0
 8024f5c:	400b      	ands	r3, r1
 8024f5e:	4293      	cmp	r3, r2
 8024f60:	d895      	bhi.n	8024e8e <_strtod_l+0x47e>
 8024f62:	4a2b      	ldr	r2, [pc, #172]	@ (8025010 <_strtod_l+0x600>)
 8024f64:	4293      	cmp	r3, r2
 8024f66:	d913      	bls.n	8024f90 <_strtod_l+0x580>
 8024f68:	2601      	movs	r6, #1
 8024f6a:	4f2a      	ldr	r7, [pc, #168]	@ (8025014 <_strtod_l+0x604>)
 8024f6c:	4276      	negs	r6, r6
 8024f6e:	2300      	movs	r3, #0
 8024f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f72:	e086      	b.n	8025082 <_strtod_l+0x672>
 8024f74:	2201      	movs	r2, #1
 8024f76:	4214      	tst	r4, r2
 8024f78:	d004      	beq.n	8024f84 <_strtod_l+0x574>
 8024f7a:	682a      	ldr	r2, [r5, #0]
 8024f7c:	686b      	ldr	r3, [r5, #4]
 8024f7e:	f7dd fce9 	bl	8002954 <__aeabi_dmul>
 8024f82:	2301      	movs	r3, #1
 8024f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f86:	1064      	asrs	r4, r4, #1
 8024f88:	3201      	adds	r2, #1
 8024f8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8024f8c:	3508      	adds	r5, #8
 8024f8e:	e7d0      	b.n	8024f32 <_strtod_l+0x522>
 8024f90:	23d4      	movs	r3, #212	@ 0xd4
 8024f92:	049b      	lsls	r3, r3, #18
 8024f94:	18cf      	adds	r7, r1, r3
 8024f96:	e7ea      	b.n	8024f6e <_strtod_l+0x55e>
 8024f98:	2c00      	cmp	r4, #0
 8024f9a:	d0e8      	beq.n	8024f6e <_strtod_l+0x55e>
 8024f9c:	4264      	negs	r4, r4
 8024f9e:	230f      	movs	r3, #15
 8024fa0:	0022      	movs	r2, r4
 8024fa2:	401a      	ands	r2, r3
 8024fa4:	421c      	tst	r4, r3
 8024fa6:	d00a      	beq.n	8024fbe <_strtod_l+0x5ae>
 8024fa8:	4b15      	ldr	r3, [pc, #84]	@ (8025000 <_strtod_l+0x5f0>)
 8024faa:	00d2      	lsls	r2, r2, #3
 8024fac:	189b      	adds	r3, r3, r2
 8024fae:	0030      	movs	r0, r6
 8024fb0:	681a      	ldr	r2, [r3, #0]
 8024fb2:	685b      	ldr	r3, [r3, #4]
 8024fb4:	0039      	movs	r1, r7
 8024fb6:	f7dd f893 	bl	80020e0 <__aeabi_ddiv>
 8024fba:	0006      	movs	r6, r0
 8024fbc:	000f      	movs	r7, r1
 8024fbe:	1124      	asrs	r4, r4, #4
 8024fc0:	d0d5      	beq.n	8024f6e <_strtod_l+0x55e>
 8024fc2:	2c1f      	cmp	r4, #31
 8024fc4:	dd28      	ble.n	8025018 <_strtod_l+0x608>
 8024fc6:	2300      	movs	r3, #0
 8024fc8:	9306      	str	r3, [sp, #24]
 8024fca:	9307      	str	r3, [sp, #28]
 8024fcc:	930d      	str	r3, [sp, #52]	@ 0x34
 8024fce:	9308      	str	r3, [sp, #32]
 8024fd0:	2322      	movs	r3, #34	@ 0x22
 8024fd2:	9a05      	ldr	r2, [sp, #20]
 8024fd4:	2600      	movs	r6, #0
 8024fd6:	6013      	str	r3, [r2, #0]
 8024fd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024fda:	2700      	movs	r7, #0
 8024fdc:	2b00      	cmp	r3, #0
 8024fde:	d000      	beq.n	8024fe2 <_strtod_l+0x5d2>
 8024fe0:	e763      	b.n	8024eaa <_strtod_l+0x49a>
 8024fe2:	e550      	b.n	8024a86 <_strtod_l+0x76>
 8024fe4:	00004e1f 	.word	0x00004e1f
 8024fe8:	0802eaa3 	.word	0x0802eaa3
 8024fec:	0802ec68 	.word	0x0802ec68
 8024ff0:	7ff00000 	.word	0x7ff00000
 8024ff4:	0802ea9b 	.word	0x0802ea9b
 8024ff8:	0802ead5 	.word	0x0802ead5
 8024ffc:	0802ec64 	.word	0x0802ec64
 8025000:	0802edf0 	.word	0x0802edf0
 8025004:	0802edc8 	.word	0x0802edc8
 8025008:	fcb00000 	.word	0xfcb00000
 802500c:	7ca00000 	.word	0x7ca00000
 8025010:	7c900000 	.word	0x7c900000
 8025014:	7fefffff 	.word	0x7fefffff
 8025018:	2310      	movs	r3, #16
 802501a:	0022      	movs	r2, r4
 802501c:	401a      	ands	r2, r3
 802501e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025020:	421c      	tst	r4, r3
 8025022:	d001      	beq.n	8025028 <_strtod_l+0x618>
 8025024:	335a      	adds	r3, #90	@ 0x5a
 8025026:	9309      	str	r3, [sp, #36]	@ 0x24
 8025028:	0030      	movs	r0, r6
 802502a:	0039      	movs	r1, r7
 802502c:	2300      	movs	r3, #0
 802502e:	4dc0      	ldr	r5, [pc, #768]	@ (8025330 <_strtod_l+0x920>)
 8025030:	2201      	movs	r2, #1
 8025032:	4214      	tst	r4, r2
 8025034:	d004      	beq.n	8025040 <_strtod_l+0x630>
 8025036:	682a      	ldr	r2, [r5, #0]
 8025038:	686b      	ldr	r3, [r5, #4]
 802503a:	f7dd fc8b 	bl	8002954 <__aeabi_dmul>
 802503e:	2301      	movs	r3, #1
 8025040:	1064      	asrs	r4, r4, #1
 8025042:	3508      	adds	r5, #8
 8025044:	2c00      	cmp	r4, #0
 8025046:	d1f3      	bne.n	8025030 <_strtod_l+0x620>
 8025048:	2b00      	cmp	r3, #0
 802504a:	d001      	beq.n	8025050 <_strtod_l+0x640>
 802504c:	0006      	movs	r6, r0
 802504e:	000f      	movs	r7, r1
 8025050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025052:	2b00      	cmp	r3, #0
 8025054:	d00d      	beq.n	8025072 <_strtod_l+0x662>
 8025056:	236b      	movs	r3, #107	@ 0x6b
 8025058:	007a      	lsls	r2, r7, #1
 802505a:	0d52      	lsrs	r2, r2, #21
 802505c:	0039      	movs	r1, r7
 802505e:	1a9b      	subs	r3, r3, r2
 8025060:	2b00      	cmp	r3, #0
 8025062:	dd06      	ble.n	8025072 <_strtod_l+0x662>
 8025064:	2b1f      	cmp	r3, #31
 8025066:	dd5c      	ble.n	8025122 <_strtod_l+0x712>
 8025068:	2600      	movs	r6, #0
 802506a:	2b34      	cmp	r3, #52	@ 0x34
 802506c:	dd52      	ble.n	8025114 <_strtod_l+0x704>
 802506e:	27dc      	movs	r7, #220	@ 0xdc
 8025070:	04bf      	lsls	r7, r7, #18
 8025072:	2200      	movs	r2, #0
 8025074:	2300      	movs	r3, #0
 8025076:	0030      	movs	r0, r6
 8025078:	0039      	movs	r1, r7
 802507a:	f7db fa19 	bl	80004b0 <__aeabi_dcmpeq>
 802507e:	2800      	cmp	r0, #0
 8025080:	d1a1      	bne.n	8024fc6 <_strtod_l+0x5b6>
 8025082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025084:	9a08      	ldr	r2, [sp, #32]
 8025086:	9300      	str	r3, [sp, #0]
 8025088:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802508a:	9b06      	ldr	r3, [sp, #24]
 802508c:	9805      	ldr	r0, [sp, #20]
 802508e:	f002 febd 	bl	8027e0c <__s2b>
 8025092:	900d      	str	r0, [sp, #52]	@ 0x34
 8025094:	2800      	cmp	r0, #0
 8025096:	d100      	bne.n	802509a <_strtod_l+0x68a>
 8025098:	e6f9      	b.n	8024e8e <_strtod_l+0x47e>
 802509a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802509c:	9907      	ldr	r1, [sp, #28]
 802509e:	43db      	mvns	r3, r3
 80250a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80250a2:	17db      	asrs	r3, r3, #31
 80250a4:	1a52      	subs	r2, r2, r1
 80250a6:	9214      	str	r2, [sp, #80]	@ 0x50
 80250a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80250aa:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80250ac:	17d2      	asrs	r2, r2, #31
 80250ae:	4011      	ands	r1, r2
 80250b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80250b2:	9114      	str	r1, [sp, #80]	@ 0x50
 80250b4:	401a      	ands	r2, r3
 80250b6:	2300      	movs	r3, #0
 80250b8:	921a      	str	r2, [sp, #104]	@ 0x68
 80250ba:	9306      	str	r3, [sp, #24]
 80250bc:	9307      	str	r3, [sp, #28]
 80250be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80250c0:	9805      	ldr	r0, [sp, #20]
 80250c2:	6859      	ldr	r1, [r3, #4]
 80250c4:	f002 fdf6 	bl	8027cb4 <_Balloc>
 80250c8:	9008      	str	r0, [sp, #32]
 80250ca:	2800      	cmp	r0, #0
 80250cc:	d100      	bne.n	80250d0 <_strtod_l+0x6c0>
 80250ce:	e6e3      	b.n	8024e98 <_strtod_l+0x488>
 80250d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80250d2:	300c      	adds	r0, #12
 80250d4:	0019      	movs	r1, r3
 80250d6:	691a      	ldr	r2, [r3, #16]
 80250d8:	310c      	adds	r1, #12
 80250da:	3202      	adds	r2, #2
 80250dc:	0092      	lsls	r2, r2, #2
 80250de:	f001 faf1 	bl	80266c4 <memcpy>
 80250e2:	ab20      	add	r3, sp, #128	@ 0x80
 80250e4:	9301      	str	r3, [sp, #4]
 80250e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80250e8:	9300      	str	r3, [sp, #0]
 80250ea:	0032      	movs	r2, r6
 80250ec:	003b      	movs	r3, r7
 80250ee:	9805      	ldr	r0, [sp, #20]
 80250f0:	9610      	str	r6, [sp, #64]	@ 0x40
 80250f2:	9711      	str	r7, [sp, #68]	@ 0x44
 80250f4:	f003 f9d2 	bl	802849c <__d2b>
 80250f8:	901e      	str	r0, [sp, #120]	@ 0x78
 80250fa:	2800      	cmp	r0, #0
 80250fc:	d100      	bne.n	8025100 <_strtod_l+0x6f0>
 80250fe:	e6cb      	b.n	8024e98 <_strtod_l+0x488>
 8025100:	2101      	movs	r1, #1
 8025102:	9805      	ldr	r0, [sp, #20]
 8025104:	f002 ff1e 	bl	8027f44 <__i2b>
 8025108:	9007      	str	r0, [sp, #28]
 802510a:	2800      	cmp	r0, #0
 802510c:	d10e      	bne.n	802512c <_strtod_l+0x71c>
 802510e:	2300      	movs	r3, #0
 8025110:	9307      	str	r3, [sp, #28]
 8025112:	e6c1      	b.n	8024e98 <_strtod_l+0x488>
 8025114:	234b      	movs	r3, #75	@ 0x4b
 8025116:	1a9a      	subs	r2, r3, r2
 8025118:	3b4c      	subs	r3, #76	@ 0x4c
 802511a:	4093      	lsls	r3, r2
 802511c:	4019      	ands	r1, r3
 802511e:	000f      	movs	r7, r1
 8025120:	e7a7      	b.n	8025072 <_strtod_l+0x662>
 8025122:	2201      	movs	r2, #1
 8025124:	4252      	negs	r2, r2
 8025126:	409a      	lsls	r2, r3
 8025128:	4016      	ands	r6, r2
 802512a:	e7a2      	b.n	8025072 <_strtod_l+0x662>
 802512c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802512e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025130:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025132:	1ad4      	subs	r4, r2, r3
 8025134:	2b00      	cmp	r3, #0
 8025136:	db01      	blt.n	802513c <_strtod_l+0x72c>
 8025138:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802513a:	195d      	adds	r5, r3, r5
 802513c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802513e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025140:	1a5b      	subs	r3, r3, r1
 8025142:	2136      	movs	r1, #54	@ 0x36
 8025144:	189b      	adds	r3, r3, r2
 8025146:	1a8a      	subs	r2, r1, r2
 8025148:	497a      	ldr	r1, [pc, #488]	@ (8025334 <_strtod_l+0x924>)
 802514a:	2001      	movs	r0, #1
 802514c:	468c      	mov	ip, r1
 802514e:	2100      	movs	r1, #0
 8025150:	3b01      	subs	r3, #1
 8025152:	9115      	str	r1, [sp, #84]	@ 0x54
 8025154:	9016      	str	r0, [sp, #88]	@ 0x58
 8025156:	4563      	cmp	r3, ip
 8025158:	da06      	bge.n	8025168 <_strtod_l+0x758>
 802515a:	4661      	mov	r1, ip
 802515c:	1ac9      	subs	r1, r1, r3
 802515e:	1a52      	subs	r2, r2, r1
 8025160:	291f      	cmp	r1, #31
 8025162:	dc3f      	bgt.n	80251e4 <_strtod_l+0x7d4>
 8025164:	4088      	lsls	r0, r1
 8025166:	9016      	str	r0, [sp, #88]	@ 0x58
 8025168:	18ab      	adds	r3, r5, r2
 802516a:	930e      	str	r3, [sp, #56]	@ 0x38
 802516c:	18a4      	adds	r4, r4, r2
 802516e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025170:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025172:	191c      	adds	r4, r3, r4
 8025174:	002b      	movs	r3, r5
 8025176:	4295      	cmp	r5, r2
 8025178:	dd00      	ble.n	802517c <_strtod_l+0x76c>
 802517a:	0013      	movs	r3, r2
 802517c:	42a3      	cmp	r3, r4
 802517e:	dd00      	ble.n	8025182 <_strtod_l+0x772>
 8025180:	0023      	movs	r3, r4
 8025182:	2b00      	cmp	r3, #0
 8025184:	dd04      	ble.n	8025190 <_strtod_l+0x780>
 8025186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025188:	1ae4      	subs	r4, r4, r3
 802518a:	1ad2      	subs	r2, r2, r3
 802518c:	920e      	str	r2, [sp, #56]	@ 0x38
 802518e:	1aed      	subs	r5, r5, r3
 8025190:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025192:	2b00      	cmp	r3, #0
 8025194:	dd16      	ble.n	80251c4 <_strtod_l+0x7b4>
 8025196:	001a      	movs	r2, r3
 8025198:	9907      	ldr	r1, [sp, #28]
 802519a:	9805      	ldr	r0, [sp, #20]
 802519c:	f002 ff94 	bl	80280c8 <__pow5mult>
 80251a0:	9007      	str	r0, [sp, #28]
 80251a2:	2800      	cmp	r0, #0
 80251a4:	d0b3      	beq.n	802510e <_strtod_l+0x6fe>
 80251a6:	0001      	movs	r1, r0
 80251a8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80251aa:	9805      	ldr	r0, [sp, #20]
 80251ac:	f002 fee2 	bl	8027f74 <__multiply>
 80251b0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80251b2:	2800      	cmp	r0, #0
 80251b4:	d100      	bne.n	80251b8 <_strtod_l+0x7a8>
 80251b6:	e66f      	b.n	8024e98 <_strtod_l+0x488>
 80251b8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80251ba:	9805      	ldr	r0, [sp, #20]
 80251bc:	f002 fdbe 	bl	8027d3c <_Bfree>
 80251c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80251c2:	931e      	str	r3, [sp, #120]	@ 0x78
 80251c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80251c6:	2b00      	cmp	r3, #0
 80251c8:	dc12      	bgt.n	80251f0 <_strtod_l+0x7e0>
 80251ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	dd18      	ble.n	8025202 <_strtod_l+0x7f2>
 80251d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80251d2:	9908      	ldr	r1, [sp, #32]
 80251d4:	9805      	ldr	r0, [sp, #20]
 80251d6:	f002 ff77 	bl	80280c8 <__pow5mult>
 80251da:	9008      	str	r0, [sp, #32]
 80251dc:	2800      	cmp	r0, #0
 80251de:	d110      	bne.n	8025202 <_strtod_l+0x7f2>
 80251e0:	2300      	movs	r3, #0
 80251e2:	e658      	b.n	8024e96 <_strtod_l+0x486>
 80251e4:	4954      	ldr	r1, [pc, #336]	@ (8025338 <_strtod_l+0x928>)
 80251e6:	1acb      	subs	r3, r1, r3
 80251e8:	0001      	movs	r1, r0
 80251ea:	4099      	lsls	r1, r3
 80251ec:	9115      	str	r1, [sp, #84]	@ 0x54
 80251ee:	e7ba      	b.n	8025166 <_strtod_l+0x756>
 80251f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80251f2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80251f4:	9805      	ldr	r0, [sp, #20]
 80251f6:	f002 ffc3 	bl	8028180 <__lshift>
 80251fa:	901e      	str	r0, [sp, #120]	@ 0x78
 80251fc:	2800      	cmp	r0, #0
 80251fe:	d1e4      	bne.n	80251ca <_strtod_l+0x7ba>
 8025200:	e64a      	b.n	8024e98 <_strtod_l+0x488>
 8025202:	2c00      	cmp	r4, #0
 8025204:	dd07      	ble.n	8025216 <_strtod_l+0x806>
 8025206:	0022      	movs	r2, r4
 8025208:	9908      	ldr	r1, [sp, #32]
 802520a:	9805      	ldr	r0, [sp, #20]
 802520c:	f002 ffb8 	bl	8028180 <__lshift>
 8025210:	9008      	str	r0, [sp, #32]
 8025212:	2800      	cmp	r0, #0
 8025214:	d0e4      	beq.n	80251e0 <_strtod_l+0x7d0>
 8025216:	2d00      	cmp	r5, #0
 8025218:	dd08      	ble.n	802522c <_strtod_l+0x81c>
 802521a:	002a      	movs	r2, r5
 802521c:	9907      	ldr	r1, [sp, #28]
 802521e:	9805      	ldr	r0, [sp, #20]
 8025220:	f002 ffae 	bl	8028180 <__lshift>
 8025224:	9007      	str	r0, [sp, #28]
 8025226:	2800      	cmp	r0, #0
 8025228:	d100      	bne.n	802522c <_strtod_l+0x81c>
 802522a:	e635      	b.n	8024e98 <_strtod_l+0x488>
 802522c:	9a08      	ldr	r2, [sp, #32]
 802522e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025230:	9805      	ldr	r0, [sp, #20]
 8025232:	f003 f82d 	bl	8028290 <__mdiff>
 8025236:	9006      	str	r0, [sp, #24]
 8025238:	2800      	cmp	r0, #0
 802523a:	d100      	bne.n	802523e <_strtod_l+0x82e>
 802523c:	e62c      	b.n	8024e98 <_strtod_l+0x488>
 802523e:	68c3      	ldr	r3, [r0, #12]
 8025240:	9907      	ldr	r1, [sp, #28]
 8025242:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025244:	2300      	movs	r3, #0
 8025246:	60c3      	str	r3, [r0, #12]
 8025248:	f003 f806 	bl	8028258 <__mcmp>
 802524c:	2800      	cmp	r0, #0
 802524e:	da3b      	bge.n	80252c8 <_strtod_l+0x8b8>
 8025250:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025252:	4333      	orrs	r3, r6
 8025254:	d167      	bne.n	8025326 <_strtod_l+0x916>
 8025256:	033b      	lsls	r3, r7, #12
 8025258:	d165      	bne.n	8025326 <_strtod_l+0x916>
 802525a:	22d6      	movs	r2, #214	@ 0xd6
 802525c:	4b37      	ldr	r3, [pc, #220]	@ (802533c <_strtod_l+0x92c>)
 802525e:	04d2      	lsls	r2, r2, #19
 8025260:	403b      	ands	r3, r7
 8025262:	4293      	cmp	r3, r2
 8025264:	d95f      	bls.n	8025326 <_strtod_l+0x916>
 8025266:	9b06      	ldr	r3, [sp, #24]
 8025268:	695b      	ldr	r3, [r3, #20]
 802526a:	2b00      	cmp	r3, #0
 802526c:	d103      	bne.n	8025276 <_strtod_l+0x866>
 802526e:	9b06      	ldr	r3, [sp, #24]
 8025270:	691b      	ldr	r3, [r3, #16]
 8025272:	2b01      	cmp	r3, #1
 8025274:	dd57      	ble.n	8025326 <_strtod_l+0x916>
 8025276:	9906      	ldr	r1, [sp, #24]
 8025278:	2201      	movs	r2, #1
 802527a:	9805      	ldr	r0, [sp, #20]
 802527c:	f002 ff80 	bl	8028180 <__lshift>
 8025280:	9907      	ldr	r1, [sp, #28]
 8025282:	9006      	str	r0, [sp, #24]
 8025284:	f002 ffe8 	bl	8028258 <__mcmp>
 8025288:	2800      	cmp	r0, #0
 802528a:	dd4c      	ble.n	8025326 <_strtod_l+0x916>
 802528c:	4b2b      	ldr	r3, [pc, #172]	@ (802533c <_strtod_l+0x92c>)
 802528e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025290:	403b      	ands	r3, r7
 8025292:	2a00      	cmp	r2, #0
 8025294:	d074      	beq.n	8025380 <_strtod_l+0x970>
 8025296:	22d6      	movs	r2, #214	@ 0xd6
 8025298:	04d2      	lsls	r2, r2, #19
 802529a:	4293      	cmp	r3, r2
 802529c:	d870      	bhi.n	8025380 <_strtod_l+0x970>
 802529e:	22dc      	movs	r2, #220	@ 0xdc
 80252a0:	0492      	lsls	r2, r2, #18
 80252a2:	4293      	cmp	r3, r2
 80252a4:	d800      	bhi.n	80252a8 <_strtod_l+0x898>
 80252a6:	e693      	b.n	8024fd0 <_strtod_l+0x5c0>
 80252a8:	0030      	movs	r0, r6
 80252aa:	0039      	movs	r1, r7
 80252ac:	4b24      	ldr	r3, [pc, #144]	@ (8025340 <_strtod_l+0x930>)
 80252ae:	2200      	movs	r2, #0
 80252b0:	f7dd fb50 	bl	8002954 <__aeabi_dmul>
 80252b4:	4b21      	ldr	r3, [pc, #132]	@ (802533c <_strtod_l+0x92c>)
 80252b6:	0006      	movs	r6, r0
 80252b8:	000f      	movs	r7, r1
 80252ba:	420b      	tst	r3, r1
 80252bc:	d000      	beq.n	80252c0 <_strtod_l+0x8b0>
 80252be:	e5f4      	b.n	8024eaa <_strtod_l+0x49a>
 80252c0:	2322      	movs	r3, #34	@ 0x22
 80252c2:	9a05      	ldr	r2, [sp, #20]
 80252c4:	6013      	str	r3, [r2, #0]
 80252c6:	e5f0      	b.n	8024eaa <_strtod_l+0x49a>
 80252c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80252ca:	2800      	cmp	r0, #0
 80252cc:	d175      	bne.n	80253ba <_strtod_l+0x9aa>
 80252ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80252d0:	033b      	lsls	r3, r7, #12
 80252d2:	0b1b      	lsrs	r3, r3, #12
 80252d4:	2a00      	cmp	r2, #0
 80252d6:	d039      	beq.n	802534c <_strtod_l+0x93c>
 80252d8:	4a1a      	ldr	r2, [pc, #104]	@ (8025344 <_strtod_l+0x934>)
 80252da:	4293      	cmp	r3, r2
 80252dc:	d138      	bne.n	8025350 <_strtod_l+0x940>
 80252de:	2101      	movs	r1, #1
 80252e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252e2:	4249      	negs	r1, r1
 80252e4:	0032      	movs	r2, r6
 80252e6:	0008      	movs	r0, r1
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	d00b      	beq.n	8025304 <_strtod_l+0x8f4>
 80252ec:	24d4      	movs	r4, #212	@ 0xd4
 80252ee:	4b13      	ldr	r3, [pc, #76]	@ (802533c <_strtod_l+0x92c>)
 80252f0:	0008      	movs	r0, r1
 80252f2:	403b      	ands	r3, r7
 80252f4:	04e4      	lsls	r4, r4, #19
 80252f6:	42a3      	cmp	r3, r4
 80252f8:	d804      	bhi.n	8025304 <_strtod_l+0x8f4>
 80252fa:	306c      	adds	r0, #108	@ 0x6c
 80252fc:	0d1b      	lsrs	r3, r3, #20
 80252fe:	1ac3      	subs	r3, r0, r3
 8025300:	4099      	lsls	r1, r3
 8025302:	0008      	movs	r0, r1
 8025304:	4282      	cmp	r2, r0
 8025306:	d123      	bne.n	8025350 <_strtod_l+0x940>
 8025308:	4b0f      	ldr	r3, [pc, #60]	@ (8025348 <_strtod_l+0x938>)
 802530a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802530c:	4299      	cmp	r1, r3
 802530e:	d102      	bne.n	8025316 <_strtod_l+0x906>
 8025310:	3201      	adds	r2, #1
 8025312:	d100      	bne.n	8025316 <_strtod_l+0x906>
 8025314:	e5c0      	b.n	8024e98 <_strtod_l+0x488>
 8025316:	4b09      	ldr	r3, [pc, #36]	@ (802533c <_strtod_l+0x92c>)
 8025318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802531a:	2600      	movs	r6, #0
 802531c:	401a      	ands	r2, r3
 802531e:	0013      	movs	r3, r2
 8025320:	2280      	movs	r2, #128	@ 0x80
 8025322:	0352      	lsls	r2, r2, #13
 8025324:	189f      	adds	r7, r3, r2
 8025326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025328:	2b00      	cmp	r3, #0
 802532a:	d1bd      	bne.n	80252a8 <_strtod_l+0x898>
 802532c:	e5bd      	b.n	8024eaa <_strtod_l+0x49a>
 802532e:	46c0      	nop			@ (mov r8, r8)
 8025330:	0802ec90 	.word	0x0802ec90
 8025334:	fffffc02 	.word	0xfffffc02
 8025338:	fffffbe2 	.word	0xfffffbe2
 802533c:	7ff00000 	.word	0x7ff00000
 8025340:	39500000 	.word	0x39500000
 8025344:	000fffff 	.word	0x000fffff
 8025348:	7fefffff 	.word	0x7fefffff
 802534c:	4333      	orrs	r3, r6
 802534e:	d09d      	beq.n	802528c <_strtod_l+0x87c>
 8025350:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025352:	2b00      	cmp	r3, #0
 8025354:	d01c      	beq.n	8025390 <_strtod_l+0x980>
 8025356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025358:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802535a:	4213      	tst	r3, r2
 802535c:	d0e3      	beq.n	8025326 <_strtod_l+0x916>
 802535e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025360:	0030      	movs	r0, r6
 8025362:	0039      	movs	r1, r7
 8025364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025366:	2b00      	cmp	r3, #0
 8025368:	d016      	beq.n	8025398 <_strtod_l+0x988>
 802536a:	f7ff fb39 	bl	80249e0 <sulp>
 802536e:	0002      	movs	r2, r0
 8025370:	000b      	movs	r3, r1
 8025372:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025374:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025376:	f7dc faed 	bl	8001954 <__aeabi_dadd>
 802537a:	0006      	movs	r6, r0
 802537c:	000f      	movs	r7, r1
 802537e:	e7d2      	b.n	8025326 <_strtod_l+0x916>
 8025380:	2601      	movs	r6, #1
 8025382:	4a92      	ldr	r2, [pc, #584]	@ (80255cc <_strtod_l+0xbbc>)
 8025384:	4276      	negs	r6, r6
 8025386:	189b      	adds	r3, r3, r2
 8025388:	4a91      	ldr	r2, [pc, #580]	@ (80255d0 <_strtod_l+0xbc0>)
 802538a:	431a      	orrs	r2, r3
 802538c:	0017      	movs	r7, r2
 802538e:	e7ca      	b.n	8025326 <_strtod_l+0x916>
 8025390:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025392:	4233      	tst	r3, r6
 8025394:	d0c7      	beq.n	8025326 <_strtod_l+0x916>
 8025396:	e7e2      	b.n	802535e <_strtod_l+0x94e>
 8025398:	f7ff fb22 	bl	80249e0 <sulp>
 802539c:	0002      	movs	r2, r0
 802539e:	000b      	movs	r3, r1
 80253a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80253a2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80253a4:	f7dd fdbc 	bl	8002f20 <__aeabi_dsub>
 80253a8:	2200      	movs	r2, #0
 80253aa:	2300      	movs	r3, #0
 80253ac:	0006      	movs	r6, r0
 80253ae:	000f      	movs	r7, r1
 80253b0:	f7db f87e 	bl	80004b0 <__aeabi_dcmpeq>
 80253b4:	2800      	cmp	r0, #0
 80253b6:	d0b6      	beq.n	8025326 <_strtod_l+0x916>
 80253b8:	e60a      	b.n	8024fd0 <_strtod_l+0x5c0>
 80253ba:	9907      	ldr	r1, [sp, #28]
 80253bc:	9806      	ldr	r0, [sp, #24]
 80253be:	f003 f8cd 	bl	802855c <__ratio>
 80253c2:	2380      	movs	r3, #128	@ 0x80
 80253c4:	2200      	movs	r2, #0
 80253c6:	05db      	lsls	r3, r3, #23
 80253c8:	0004      	movs	r4, r0
 80253ca:	000d      	movs	r5, r1
 80253cc:	f7db f880 	bl	80004d0 <__aeabi_dcmple>
 80253d0:	2800      	cmp	r0, #0
 80253d2:	d06c      	beq.n	80254ae <_strtod_l+0xa9e>
 80253d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80253d6:	2b00      	cmp	r3, #0
 80253d8:	d177      	bne.n	80254ca <_strtod_l+0xaba>
 80253da:	2e00      	cmp	r6, #0
 80253dc:	d157      	bne.n	802548e <_strtod_l+0xa7e>
 80253de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253e0:	031b      	lsls	r3, r3, #12
 80253e2:	d15a      	bne.n	802549a <_strtod_l+0xa8a>
 80253e4:	2200      	movs	r2, #0
 80253e6:	0020      	movs	r0, r4
 80253e8:	0029      	movs	r1, r5
 80253ea:	4b7a      	ldr	r3, [pc, #488]	@ (80255d4 <_strtod_l+0xbc4>)
 80253ec:	f7db f866 	bl	80004bc <__aeabi_dcmplt>
 80253f0:	2800      	cmp	r0, #0
 80253f2:	d159      	bne.n	80254a8 <_strtod_l+0xa98>
 80253f4:	0020      	movs	r0, r4
 80253f6:	0029      	movs	r1, r5
 80253f8:	2200      	movs	r2, #0
 80253fa:	4b77      	ldr	r3, [pc, #476]	@ (80255d8 <_strtod_l+0xbc8>)
 80253fc:	f7dd faaa 	bl	8002954 <__aeabi_dmul>
 8025400:	0004      	movs	r4, r0
 8025402:	000d      	movs	r5, r1
 8025404:	2380      	movs	r3, #128	@ 0x80
 8025406:	061b      	lsls	r3, r3, #24
 8025408:	18eb      	adds	r3, r5, r3
 802540a:	940a      	str	r4, [sp, #40]	@ 0x28
 802540c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802540e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025412:	9216      	str	r2, [sp, #88]	@ 0x58
 8025414:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025416:	4a71      	ldr	r2, [pc, #452]	@ (80255dc <_strtod_l+0xbcc>)
 8025418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802541a:	4013      	ands	r3, r2
 802541c:	9315      	str	r3, [sp, #84]	@ 0x54
 802541e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025420:	4b6f      	ldr	r3, [pc, #444]	@ (80255e0 <_strtod_l+0xbd0>)
 8025422:	429a      	cmp	r2, r3
 8025424:	d000      	beq.n	8025428 <_strtod_l+0xa18>
 8025426:	e087      	b.n	8025538 <_strtod_l+0xb28>
 8025428:	4a6e      	ldr	r2, [pc, #440]	@ (80255e4 <_strtod_l+0xbd4>)
 802542a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802542c:	4694      	mov	ip, r2
 802542e:	4463      	add	r3, ip
 8025430:	001f      	movs	r7, r3
 8025432:	0030      	movs	r0, r6
 8025434:	0019      	movs	r1, r3
 8025436:	f002 ffc5 	bl	80283c4 <__ulp>
 802543a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802543c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802543e:	f7dd fa89 	bl	8002954 <__aeabi_dmul>
 8025442:	0032      	movs	r2, r6
 8025444:	003b      	movs	r3, r7
 8025446:	f7dc fa85 	bl	8001954 <__aeabi_dadd>
 802544a:	4a64      	ldr	r2, [pc, #400]	@ (80255dc <_strtod_l+0xbcc>)
 802544c:	4b66      	ldr	r3, [pc, #408]	@ (80255e8 <_strtod_l+0xbd8>)
 802544e:	0006      	movs	r6, r0
 8025450:	400a      	ands	r2, r1
 8025452:	429a      	cmp	r2, r3
 8025454:	d940      	bls.n	80254d8 <_strtod_l+0xac8>
 8025456:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025458:	4a64      	ldr	r2, [pc, #400]	@ (80255ec <_strtod_l+0xbdc>)
 802545a:	4293      	cmp	r3, r2
 802545c:	d103      	bne.n	8025466 <_strtod_l+0xa56>
 802545e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025460:	3301      	adds	r3, #1
 8025462:	d100      	bne.n	8025466 <_strtod_l+0xa56>
 8025464:	e518      	b.n	8024e98 <_strtod_l+0x488>
 8025466:	2601      	movs	r6, #1
 8025468:	4f60      	ldr	r7, [pc, #384]	@ (80255ec <_strtod_l+0xbdc>)
 802546a:	4276      	negs	r6, r6
 802546c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802546e:	9805      	ldr	r0, [sp, #20]
 8025470:	f002 fc64 	bl	8027d3c <_Bfree>
 8025474:	9908      	ldr	r1, [sp, #32]
 8025476:	9805      	ldr	r0, [sp, #20]
 8025478:	f002 fc60 	bl	8027d3c <_Bfree>
 802547c:	9907      	ldr	r1, [sp, #28]
 802547e:	9805      	ldr	r0, [sp, #20]
 8025480:	f002 fc5c 	bl	8027d3c <_Bfree>
 8025484:	9906      	ldr	r1, [sp, #24]
 8025486:	9805      	ldr	r0, [sp, #20]
 8025488:	f002 fc58 	bl	8027d3c <_Bfree>
 802548c:	e617      	b.n	80250be <_strtod_l+0x6ae>
 802548e:	2e01      	cmp	r6, #1
 8025490:	d103      	bne.n	802549a <_strtod_l+0xa8a>
 8025492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025494:	2b00      	cmp	r3, #0
 8025496:	d100      	bne.n	802549a <_strtod_l+0xa8a>
 8025498:	e59a      	b.n	8024fd0 <_strtod_l+0x5c0>
 802549a:	2300      	movs	r3, #0
 802549c:	4c54      	ldr	r4, [pc, #336]	@ (80255f0 <_strtod_l+0xbe0>)
 802549e:	4d4d      	ldr	r5, [pc, #308]	@ (80255d4 <_strtod_l+0xbc4>)
 80254a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80254a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80254a4:	2400      	movs	r4, #0
 80254a6:	e7b2      	b.n	802540e <_strtod_l+0x9fe>
 80254a8:	2400      	movs	r4, #0
 80254aa:	4d4b      	ldr	r5, [pc, #300]	@ (80255d8 <_strtod_l+0xbc8>)
 80254ac:	e7aa      	b.n	8025404 <_strtod_l+0x9f4>
 80254ae:	0020      	movs	r0, r4
 80254b0:	0029      	movs	r1, r5
 80254b2:	4b49      	ldr	r3, [pc, #292]	@ (80255d8 <_strtod_l+0xbc8>)
 80254b4:	2200      	movs	r2, #0
 80254b6:	f7dd fa4d 	bl	8002954 <__aeabi_dmul>
 80254ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254bc:	0004      	movs	r4, r0
 80254be:	000d      	movs	r5, r1
 80254c0:	2b00      	cmp	r3, #0
 80254c2:	d09f      	beq.n	8025404 <_strtod_l+0x9f4>
 80254c4:	940a      	str	r4, [sp, #40]	@ 0x28
 80254c6:	950b      	str	r5, [sp, #44]	@ 0x2c
 80254c8:	e7a1      	b.n	802540e <_strtod_l+0x9fe>
 80254ca:	2300      	movs	r3, #0
 80254cc:	4c41      	ldr	r4, [pc, #260]	@ (80255d4 <_strtod_l+0xbc4>)
 80254ce:	0025      	movs	r5, r4
 80254d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80254d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80254d4:	001c      	movs	r4, r3
 80254d6:	e79a      	b.n	802540e <_strtod_l+0x9fe>
 80254d8:	23d4      	movs	r3, #212	@ 0xd4
 80254da:	049b      	lsls	r3, r3, #18
 80254dc:	18cf      	adds	r7, r1, r3
 80254de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254e0:	9710      	str	r7, [sp, #64]	@ 0x40
 80254e2:	2b00      	cmp	r3, #0
 80254e4:	d1c2      	bne.n	802546c <_strtod_l+0xa5c>
 80254e6:	4b3d      	ldr	r3, [pc, #244]	@ (80255dc <_strtod_l+0xbcc>)
 80254e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80254ea:	403b      	ands	r3, r7
 80254ec:	429a      	cmp	r2, r3
 80254ee:	d1bd      	bne.n	802546c <_strtod_l+0xa5c>
 80254f0:	0020      	movs	r0, r4
 80254f2:	0029      	movs	r1, r5
 80254f4:	f7db f8c8 	bl	8000688 <__aeabi_d2lz>
 80254f8:	f7db f900 	bl	80006fc <__aeabi_l2d>
 80254fc:	0002      	movs	r2, r0
 80254fe:	000b      	movs	r3, r1
 8025500:	0020      	movs	r0, r4
 8025502:	0029      	movs	r1, r5
 8025504:	f7dd fd0c 	bl	8002f20 <__aeabi_dsub>
 8025508:	033c      	lsls	r4, r7, #12
 802550a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802550c:	0b24      	lsrs	r4, r4, #12
 802550e:	4334      	orrs	r4, r6
 8025510:	900e      	str	r0, [sp, #56]	@ 0x38
 8025512:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025514:	4a37      	ldr	r2, [pc, #220]	@ (80255f4 <_strtod_l+0xbe4>)
 8025516:	431c      	orrs	r4, r3
 8025518:	d052      	beq.n	80255c0 <_strtod_l+0xbb0>
 802551a:	4b37      	ldr	r3, [pc, #220]	@ (80255f8 <_strtod_l+0xbe8>)
 802551c:	f7da ffce 	bl	80004bc <__aeabi_dcmplt>
 8025520:	2800      	cmp	r0, #0
 8025522:	d000      	beq.n	8025526 <_strtod_l+0xb16>
 8025524:	e4c1      	b.n	8024eaa <_strtod_l+0x49a>
 8025526:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025528:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802552a:	4a34      	ldr	r2, [pc, #208]	@ (80255fc <_strtod_l+0xbec>)
 802552c:	4b2a      	ldr	r3, [pc, #168]	@ (80255d8 <_strtod_l+0xbc8>)
 802552e:	f7da ffd9 	bl	80004e4 <__aeabi_dcmpgt>
 8025532:	2800      	cmp	r0, #0
 8025534:	d09a      	beq.n	802546c <_strtod_l+0xa5c>
 8025536:	e4b8      	b.n	8024eaa <_strtod_l+0x49a>
 8025538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802553a:	2b00      	cmp	r3, #0
 802553c:	d02a      	beq.n	8025594 <_strtod_l+0xb84>
 802553e:	23d4      	movs	r3, #212	@ 0xd4
 8025540:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025542:	04db      	lsls	r3, r3, #19
 8025544:	429a      	cmp	r2, r3
 8025546:	d825      	bhi.n	8025594 <_strtod_l+0xb84>
 8025548:	0020      	movs	r0, r4
 802554a:	0029      	movs	r1, r5
 802554c:	4a2c      	ldr	r2, [pc, #176]	@ (8025600 <_strtod_l+0xbf0>)
 802554e:	4b2d      	ldr	r3, [pc, #180]	@ (8025604 <_strtod_l+0xbf4>)
 8025550:	f7da ffbe 	bl	80004d0 <__aeabi_dcmple>
 8025554:	2800      	cmp	r0, #0
 8025556:	d016      	beq.n	8025586 <_strtod_l+0xb76>
 8025558:	0020      	movs	r0, r4
 802555a:	0029      	movs	r1, r5
 802555c:	f7db f876 	bl	800064c <__aeabi_d2uiz>
 8025560:	2800      	cmp	r0, #0
 8025562:	d100      	bne.n	8025566 <_strtod_l+0xb56>
 8025564:	3001      	adds	r0, #1
 8025566:	f7de f971 	bl	800384c <__aeabi_ui2d>
 802556a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802556c:	0004      	movs	r4, r0
 802556e:	000d      	movs	r5, r1
 8025570:	2b00      	cmp	r3, #0
 8025572:	d122      	bne.n	80255ba <_strtod_l+0xbaa>
 8025574:	2380      	movs	r3, #128	@ 0x80
 8025576:	061b      	lsls	r3, r3, #24
 8025578:	18cb      	adds	r3, r1, r3
 802557a:	9018      	str	r0, [sp, #96]	@ 0x60
 802557c:	9319      	str	r3, [sp, #100]	@ 0x64
 802557e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025582:	9216      	str	r2, [sp, #88]	@ 0x58
 8025584:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025586:	22d6      	movs	r2, #214	@ 0xd6
 8025588:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802558a:	04d2      	lsls	r2, r2, #19
 802558c:	189b      	adds	r3, r3, r2
 802558e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025590:	1a9b      	subs	r3, r3, r2
 8025592:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025594:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025596:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025598:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802559a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 802559c:	f002 ff12 	bl	80283c4 <__ulp>
 80255a0:	0002      	movs	r2, r0
 80255a2:	000b      	movs	r3, r1
 80255a4:	0030      	movs	r0, r6
 80255a6:	0039      	movs	r1, r7
 80255a8:	f7dd f9d4 	bl	8002954 <__aeabi_dmul>
 80255ac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80255ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80255b0:	f7dc f9d0 	bl	8001954 <__aeabi_dadd>
 80255b4:	0006      	movs	r6, r0
 80255b6:	000f      	movs	r7, r1
 80255b8:	e791      	b.n	80254de <_strtod_l+0xace>
 80255ba:	9418      	str	r4, [sp, #96]	@ 0x60
 80255bc:	9519      	str	r5, [sp, #100]	@ 0x64
 80255be:	e7de      	b.n	802557e <_strtod_l+0xb6e>
 80255c0:	4b11      	ldr	r3, [pc, #68]	@ (8025608 <_strtod_l+0xbf8>)
 80255c2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80255c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80255c6:	f7da ff79 	bl	80004bc <__aeabi_dcmplt>
 80255ca:	e7b2      	b.n	8025532 <_strtod_l+0xb22>
 80255cc:	fff00000 	.word	0xfff00000
 80255d0:	000fffff 	.word	0x000fffff
 80255d4:	3ff00000 	.word	0x3ff00000
 80255d8:	3fe00000 	.word	0x3fe00000
 80255dc:	7ff00000 	.word	0x7ff00000
 80255e0:	7fe00000 	.word	0x7fe00000
 80255e4:	fcb00000 	.word	0xfcb00000
 80255e8:	7c9fffff 	.word	0x7c9fffff
 80255ec:	7fefffff 	.word	0x7fefffff
 80255f0:	bff00000 	.word	0xbff00000
 80255f4:	94a03595 	.word	0x94a03595
 80255f8:	3fdfffff 	.word	0x3fdfffff
 80255fc:	35afe535 	.word	0x35afe535
 8025600:	ffc00000 	.word	0xffc00000
 8025604:	41dfffff 	.word	0x41dfffff
 8025608:	3fcfffff 	.word	0x3fcfffff

0802560c <strtod>:
 802560c:	b510      	push	{r4, lr}
 802560e:	4c04      	ldr	r4, [pc, #16]	@ (8025620 <strtod+0x14>)
 8025610:	000a      	movs	r2, r1
 8025612:	0001      	movs	r1, r0
 8025614:	4b03      	ldr	r3, [pc, #12]	@ (8025624 <strtod+0x18>)
 8025616:	6820      	ldr	r0, [r4, #0]
 8025618:	f7ff f9fa 	bl	8024a10 <_strtod_l>
 802561c:	bd10      	pop	{r4, pc}
 802561e:	46c0      	nop			@ (mov r8, r8)
 8025620:	200003ec 	.word	0x200003ec
 8025624:	20000280 	.word	0x20000280

08025628 <_strtol_l.isra.0>:
 8025628:	b5f0      	push	{r4, r5, r6, r7, lr}
 802562a:	b085      	sub	sp, #20
 802562c:	0017      	movs	r7, r2
 802562e:	001e      	movs	r6, r3
 8025630:	9003      	str	r0, [sp, #12]
 8025632:	9101      	str	r1, [sp, #4]
 8025634:	2b24      	cmp	r3, #36	@ 0x24
 8025636:	d823      	bhi.n	8025680 <_strtol_l.isra.0+0x58>
 8025638:	000c      	movs	r4, r1
 802563a:	2b01      	cmp	r3, #1
 802563c:	d020      	beq.n	8025680 <_strtol_l.isra.0+0x58>
 802563e:	4b3d      	ldr	r3, [pc, #244]	@ (8025734 <_strtol_l.isra.0+0x10c>)
 8025640:	2208      	movs	r2, #8
 8025642:	469c      	mov	ip, r3
 8025644:	0023      	movs	r3, r4
 8025646:	4661      	mov	r1, ip
 8025648:	781d      	ldrb	r5, [r3, #0]
 802564a:	3401      	adds	r4, #1
 802564c:	5d48      	ldrb	r0, [r1, r5]
 802564e:	0001      	movs	r1, r0
 8025650:	4011      	ands	r1, r2
 8025652:	4210      	tst	r0, r2
 8025654:	d1f6      	bne.n	8025644 <_strtol_l.isra.0+0x1c>
 8025656:	2d2d      	cmp	r5, #45	@ 0x2d
 8025658:	d119      	bne.n	802568e <_strtol_l.isra.0+0x66>
 802565a:	7825      	ldrb	r5, [r4, #0]
 802565c:	1c9c      	adds	r4, r3, #2
 802565e:	2301      	movs	r3, #1
 8025660:	9300      	str	r3, [sp, #0]
 8025662:	2210      	movs	r2, #16
 8025664:	0033      	movs	r3, r6
 8025666:	4393      	bics	r3, r2
 8025668:	d11d      	bne.n	80256a6 <_strtol_l.isra.0+0x7e>
 802566a:	2d30      	cmp	r5, #48	@ 0x30
 802566c:	d115      	bne.n	802569a <_strtol_l.isra.0+0x72>
 802566e:	2120      	movs	r1, #32
 8025670:	7823      	ldrb	r3, [r4, #0]
 8025672:	438b      	bics	r3, r1
 8025674:	2b58      	cmp	r3, #88	@ 0x58
 8025676:	d110      	bne.n	802569a <_strtol_l.isra.0+0x72>
 8025678:	7865      	ldrb	r5, [r4, #1]
 802567a:	3402      	adds	r4, #2
 802567c:	2610      	movs	r6, #16
 802567e:	e012      	b.n	80256a6 <_strtol_l.isra.0+0x7e>
 8025680:	f000 ffe8 	bl	8026654 <__errno>
 8025684:	2316      	movs	r3, #22
 8025686:	6003      	str	r3, [r0, #0]
 8025688:	2000      	movs	r0, #0
 802568a:	b005      	add	sp, #20
 802568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802568e:	9100      	str	r1, [sp, #0]
 8025690:	2d2b      	cmp	r5, #43	@ 0x2b
 8025692:	d1e6      	bne.n	8025662 <_strtol_l.isra.0+0x3a>
 8025694:	7825      	ldrb	r5, [r4, #0]
 8025696:	1c9c      	adds	r4, r3, #2
 8025698:	e7e3      	b.n	8025662 <_strtol_l.isra.0+0x3a>
 802569a:	2e00      	cmp	r6, #0
 802569c:	d1ee      	bne.n	802567c <_strtol_l.isra.0+0x54>
 802569e:	360a      	adds	r6, #10
 80256a0:	2d30      	cmp	r5, #48	@ 0x30
 80256a2:	d100      	bne.n	80256a6 <_strtol_l.isra.0+0x7e>
 80256a4:	3e02      	subs	r6, #2
 80256a6:	4a24      	ldr	r2, [pc, #144]	@ (8025738 <_strtol_l.isra.0+0x110>)
 80256a8:	9b00      	ldr	r3, [sp, #0]
 80256aa:	4694      	mov	ip, r2
 80256ac:	4463      	add	r3, ip
 80256ae:	0031      	movs	r1, r6
 80256b0:	0018      	movs	r0, r3
 80256b2:	9302      	str	r3, [sp, #8]
 80256b4:	f7da fdfc 	bl	80002b0 <__aeabi_uidivmod>
 80256b8:	2200      	movs	r2, #0
 80256ba:	4684      	mov	ip, r0
 80256bc:	0010      	movs	r0, r2
 80256be:	002b      	movs	r3, r5
 80256c0:	3b30      	subs	r3, #48	@ 0x30
 80256c2:	2b09      	cmp	r3, #9
 80256c4:	d811      	bhi.n	80256ea <_strtol_l.isra.0+0xc2>
 80256c6:	001d      	movs	r5, r3
 80256c8:	42ae      	cmp	r6, r5
 80256ca:	dd1d      	ble.n	8025708 <_strtol_l.isra.0+0xe0>
 80256cc:	1c53      	adds	r3, r2, #1
 80256ce:	d009      	beq.n	80256e4 <_strtol_l.isra.0+0xbc>
 80256d0:	2201      	movs	r2, #1
 80256d2:	4252      	negs	r2, r2
 80256d4:	4584      	cmp	ip, r0
 80256d6:	d305      	bcc.n	80256e4 <_strtol_l.isra.0+0xbc>
 80256d8:	d101      	bne.n	80256de <_strtol_l.isra.0+0xb6>
 80256da:	42a9      	cmp	r1, r5
 80256dc:	db11      	blt.n	8025702 <_strtol_l.isra.0+0xda>
 80256de:	2201      	movs	r2, #1
 80256e0:	4370      	muls	r0, r6
 80256e2:	1828      	adds	r0, r5, r0
 80256e4:	7825      	ldrb	r5, [r4, #0]
 80256e6:	3401      	adds	r4, #1
 80256e8:	e7e9      	b.n	80256be <_strtol_l.isra.0+0x96>
 80256ea:	002b      	movs	r3, r5
 80256ec:	3b41      	subs	r3, #65	@ 0x41
 80256ee:	2b19      	cmp	r3, #25
 80256f0:	d801      	bhi.n	80256f6 <_strtol_l.isra.0+0xce>
 80256f2:	3d37      	subs	r5, #55	@ 0x37
 80256f4:	e7e8      	b.n	80256c8 <_strtol_l.isra.0+0xa0>
 80256f6:	002b      	movs	r3, r5
 80256f8:	3b61      	subs	r3, #97	@ 0x61
 80256fa:	2b19      	cmp	r3, #25
 80256fc:	d804      	bhi.n	8025708 <_strtol_l.isra.0+0xe0>
 80256fe:	3d57      	subs	r5, #87	@ 0x57
 8025700:	e7e2      	b.n	80256c8 <_strtol_l.isra.0+0xa0>
 8025702:	2201      	movs	r2, #1
 8025704:	4252      	negs	r2, r2
 8025706:	e7ed      	b.n	80256e4 <_strtol_l.isra.0+0xbc>
 8025708:	1c53      	adds	r3, r2, #1
 802570a:	d108      	bne.n	802571e <_strtol_l.isra.0+0xf6>
 802570c:	2322      	movs	r3, #34	@ 0x22
 802570e:	9a03      	ldr	r2, [sp, #12]
 8025710:	9802      	ldr	r0, [sp, #8]
 8025712:	6013      	str	r3, [r2, #0]
 8025714:	2f00      	cmp	r7, #0
 8025716:	d0b8      	beq.n	802568a <_strtol_l.isra.0+0x62>
 8025718:	1e63      	subs	r3, r4, #1
 802571a:	9301      	str	r3, [sp, #4]
 802571c:	e007      	b.n	802572e <_strtol_l.isra.0+0x106>
 802571e:	9b00      	ldr	r3, [sp, #0]
 8025720:	2b00      	cmp	r3, #0
 8025722:	d000      	beq.n	8025726 <_strtol_l.isra.0+0xfe>
 8025724:	4240      	negs	r0, r0
 8025726:	2f00      	cmp	r7, #0
 8025728:	d0af      	beq.n	802568a <_strtol_l.isra.0+0x62>
 802572a:	2a00      	cmp	r2, #0
 802572c:	d1f4      	bne.n	8025718 <_strtol_l.isra.0+0xf0>
 802572e:	9b01      	ldr	r3, [sp, #4]
 8025730:	603b      	str	r3, [r7, #0]
 8025732:	e7aa      	b.n	802568a <_strtol_l.isra.0+0x62>
 8025734:	0802ecb9 	.word	0x0802ecb9
 8025738:	7fffffff 	.word	0x7fffffff

0802573c <strtol>:
 802573c:	b510      	push	{r4, lr}
 802573e:	4c04      	ldr	r4, [pc, #16]	@ (8025750 <strtol+0x14>)
 8025740:	0013      	movs	r3, r2
 8025742:	000a      	movs	r2, r1
 8025744:	0001      	movs	r1, r0
 8025746:	6820      	ldr	r0, [r4, #0]
 8025748:	f7ff ff6e 	bl	8025628 <_strtol_l.isra.0>
 802574c:	bd10      	pop	{r4, pc}
 802574e:	46c0      	nop			@ (mov r8, r8)
 8025750:	200003ec 	.word	0x200003ec

08025754 <__cvt>:
 8025754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025756:	001f      	movs	r7, r3
 8025758:	2300      	movs	r3, #0
 802575a:	0016      	movs	r6, r2
 802575c:	b08b      	sub	sp, #44	@ 0x2c
 802575e:	429f      	cmp	r7, r3
 8025760:	da04      	bge.n	802576c <__cvt+0x18>
 8025762:	2180      	movs	r1, #128	@ 0x80
 8025764:	0609      	lsls	r1, r1, #24
 8025766:	187b      	adds	r3, r7, r1
 8025768:	001f      	movs	r7, r3
 802576a:	232d      	movs	r3, #45	@ 0x2d
 802576c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802576e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025770:	7013      	strb	r3, [r2, #0]
 8025772:	2320      	movs	r3, #32
 8025774:	2203      	movs	r2, #3
 8025776:	439d      	bics	r5, r3
 8025778:	2d46      	cmp	r5, #70	@ 0x46
 802577a:	d007      	beq.n	802578c <__cvt+0x38>
 802577c:	002b      	movs	r3, r5
 802577e:	3b45      	subs	r3, #69	@ 0x45
 8025780:	4259      	negs	r1, r3
 8025782:	414b      	adcs	r3, r1
 8025784:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025786:	3a01      	subs	r2, #1
 8025788:	18cb      	adds	r3, r1, r3
 802578a:	9310      	str	r3, [sp, #64]	@ 0x40
 802578c:	ab09      	add	r3, sp, #36	@ 0x24
 802578e:	9304      	str	r3, [sp, #16]
 8025790:	ab08      	add	r3, sp, #32
 8025792:	9303      	str	r3, [sp, #12]
 8025794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025796:	9200      	str	r2, [sp, #0]
 8025798:	9302      	str	r3, [sp, #8]
 802579a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802579c:	0032      	movs	r2, r6
 802579e:	9301      	str	r3, [sp, #4]
 80257a0:	003b      	movs	r3, r7
 80257a2:	f001 f825 	bl	80267f0 <_dtoa_r>
 80257a6:	0004      	movs	r4, r0
 80257a8:	2d47      	cmp	r5, #71	@ 0x47
 80257aa:	d11b      	bne.n	80257e4 <__cvt+0x90>
 80257ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80257ae:	07db      	lsls	r3, r3, #31
 80257b0:	d511      	bpl.n	80257d6 <__cvt+0x82>
 80257b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80257b4:	18c3      	adds	r3, r0, r3
 80257b6:	9307      	str	r3, [sp, #28]
 80257b8:	2200      	movs	r2, #0
 80257ba:	2300      	movs	r3, #0
 80257bc:	0030      	movs	r0, r6
 80257be:	0039      	movs	r1, r7
 80257c0:	f7da fe76 	bl	80004b0 <__aeabi_dcmpeq>
 80257c4:	2800      	cmp	r0, #0
 80257c6:	d001      	beq.n	80257cc <__cvt+0x78>
 80257c8:	9b07      	ldr	r3, [sp, #28]
 80257ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80257cc:	2230      	movs	r2, #48	@ 0x30
 80257ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257d0:	9907      	ldr	r1, [sp, #28]
 80257d2:	428b      	cmp	r3, r1
 80257d4:	d320      	bcc.n	8025818 <__cvt+0xc4>
 80257d6:	0020      	movs	r0, r4
 80257d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80257dc:	1b1b      	subs	r3, r3, r4
 80257de:	6013      	str	r3, [r2, #0]
 80257e0:	b00b      	add	sp, #44	@ 0x2c
 80257e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80257e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80257e6:	18c3      	adds	r3, r0, r3
 80257e8:	9307      	str	r3, [sp, #28]
 80257ea:	2d46      	cmp	r5, #70	@ 0x46
 80257ec:	d1e4      	bne.n	80257b8 <__cvt+0x64>
 80257ee:	7803      	ldrb	r3, [r0, #0]
 80257f0:	2b30      	cmp	r3, #48	@ 0x30
 80257f2:	d10c      	bne.n	802580e <__cvt+0xba>
 80257f4:	2200      	movs	r2, #0
 80257f6:	2300      	movs	r3, #0
 80257f8:	0030      	movs	r0, r6
 80257fa:	0039      	movs	r1, r7
 80257fc:	f7da fe58 	bl	80004b0 <__aeabi_dcmpeq>
 8025800:	2800      	cmp	r0, #0
 8025802:	d104      	bne.n	802580e <__cvt+0xba>
 8025804:	2301      	movs	r3, #1
 8025806:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025808:	1a9b      	subs	r3, r3, r2
 802580a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802580c:	6013      	str	r3, [r2, #0]
 802580e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025810:	9a07      	ldr	r2, [sp, #28]
 8025812:	681b      	ldr	r3, [r3, #0]
 8025814:	18d3      	adds	r3, r2, r3
 8025816:	e7ce      	b.n	80257b6 <__cvt+0x62>
 8025818:	1c59      	adds	r1, r3, #1
 802581a:	9109      	str	r1, [sp, #36]	@ 0x24
 802581c:	701a      	strb	r2, [r3, #0]
 802581e:	e7d6      	b.n	80257ce <__cvt+0x7a>

08025820 <__exponent>:
 8025820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025822:	232b      	movs	r3, #43	@ 0x2b
 8025824:	b085      	sub	sp, #20
 8025826:	0005      	movs	r5, r0
 8025828:	1e0c      	subs	r4, r1, #0
 802582a:	7002      	strb	r2, [r0, #0]
 802582c:	da01      	bge.n	8025832 <__exponent+0x12>
 802582e:	424c      	negs	r4, r1
 8025830:	3302      	adds	r3, #2
 8025832:	706b      	strb	r3, [r5, #1]
 8025834:	2c09      	cmp	r4, #9
 8025836:	dd2c      	ble.n	8025892 <__exponent+0x72>
 8025838:	ab02      	add	r3, sp, #8
 802583a:	1dde      	adds	r6, r3, #7
 802583c:	0020      	movs	r0, r4
 802583e:	210a      	movs	r1, #10
 8025840:	f7da fe20 	bl	8000484 <__aeabi_idivmod>
 8025844:	0037      	movs	r7, r6
 8025846:	3130      	adds	r1, #48	@ 0x30
 8025848:	3e01      	subs	r6, #1
 802584a:	0020      	movs	r0, r4
 802584c:	7031      	strb	r1, [r6, #0]
 802584e:	210a      	movs	r1, #10
 8025850:	9401      	str	r4, [sp, #4]
 8025852:	f7da fd31 	bl	80002b8 <__divsi3>
 8025856:	9b01      	ldr	r3, [sp, #4]
 8025858:	0004      	movs	r4, r0
 802585a:	2b63      	cmp	r3, #99	@ 0x63
 802585c:	dcee      	bgt.n	802583c <__exponent+0x1c>
 802585e:	1eba      	subs	r2, r7, #2
 8025860:	1ca8      	adds	r0, r5, #2
 8025862:	0001      	movs	r1, r0
 8025864:	0013      	movs	r3, r2
 8025866:	3430      	adds	r4, #48	@ 0x30
 8025868:	7014      	strb	r4, [r2, #0]
 802586a:	ac02      	add	r4, sp, #8
 802586c:	3407      	adds	r4, #7
 802586e:	429c      	cmp	r4, r3
 8025870:	d80a      	bhi.n	8025888 <__exponent+0x68>
 8025872:	2300      	movs	r3, #0
 8025874:	4294      	cmp	r4, r2
 8025876:	d303      	bcc.n	8025880 <__exponent+0x60>
 8025878:	3309      	adds	r3, #9
 802587a:	aa02      	add	r2, sp, #8
 802587c:	189b      	adds	r3, r3, r2
 802587e:	1bdb      	subs	r3, r3, r7
 8025880:	18c0      	adds	r0, r0, r3
 8025882:	1b40      	subs	r0, r0, r5
 8025884:	b005      	add	sp, #20
 8025886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025888:	781c      	ldrb	r4, [r3, #0]
 802588a:	3301      	adds	r3, #1
 802588c:	700c      	strb	r4, [r1, #0]
 802588e:	3101      	adds	r1, #1
 8025890:	e7eb      	b.n	802586a <__exponent+0x4a>
 8025892:	2330      	movs	r3, #48	@ 0x30
 8025894:	18e4      	adds	r4, r4, r3
 8025896:	70ab      	strb	r3, [r5, #2]
 8025898:	1d28      	adds	r0, r5, #4
 802589a:	70ec      	strb	r4, [r5, #3]
 802589c:	e7f1      	b.n	8025882 <__exponent+0x62>
	...

080258a0 <_printf_float>:
 80258a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258a2:	b097      	sub	sp, #92	@ 0x5c
 80258a4:	000d      	movs	r5, r1
 80258a6:	920a      	str	r2, [sp, #40]	@ 0x28
 80258a8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80258aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80258ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80258ae:	f000 fe7f 	bl	80265b0 <_localeconv_r>
 80258b2:	6803      	ldr	r3, [r0, #0]
 80258b4:	0018      	movs	r0, r3
 80258b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80258b8:	f7da fc58 	bl	800016c <strlen>
 80258bc:	2300      	movs	r3, #0
 80258be:	900f      	str	r0, [sp, #60]	@ 0x3c
 80258c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80258c2:	7e2b      	ldrb	r3, [r5, #24]
 80258c4:	2207      	movs	r2, #7
 80258c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80258c8:	682b      	ldr	r3, [r5, #0]
 80258ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80258cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80258ce:	6823      	ldr	r3, [r4, #0]
 80258d0:	05c9      	lsls	r1, r1, #23
 80258d2:	d545      	bpl.n	8025960 <_printf_float+0xc0>
 80258d4:	189b      	adds	r3, r3, r2
 80258d6:	4393      	bics	r3, r2
 80258d8:	001a      	movs	r2, r3
 80258da:	3208      	adds	r2, #8
 80258dc:	6022      	str	r2, [r4, #0]
 80258de:	2201      	movs	r2, #1
 80258e0:	681e      	ldr	r6, [r3, #0]
 80258e2:	685f      	ldr	r7, [r3, #4]
 80258e4:	007b      	lsls	r3, r7, #1
 80258e6:	085b      	lsrs	r3, r3, #1
 80258e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80258ea:	9610      	str	r6, [sp, #64]	@ 0x40
 80258ec:	64ae      	str	r6, [r5, #72]	@ 0x48
 80258ee:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80258f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80258f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80258f4:	4ba7      	ldr	r3, [pc, #668]	@ (8025b94 <_printf_float+0x2f4>)
 80258f6:	4252      	negs	r2, r2
 80258f8:	f7dd ff1c 	bl	8003734 <__aeabi_dcmpun>
 80258fc:	2800      	cmp	r0, #0
 80258fe:	d131      	bne.n	8025964 <_printf_float+0xc4>
 8025900:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025902:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025904:	2201      	movs	r2, #1
 8025906:	4ba3      	ldr	r3, [pc, #652]	@ (8025b94 <_printf_float+0x2f4>)
 8025908:	4252      	negs	r2, r2
 802590a:	f7da fde1 	bl	80004d0 <__aeabi_dcmple>
 802590e:	2800      	cmp	r0, #0
 8025910:	d128      	bne.n	8025964 <_printf_float+0xc4>
 8025912:	2200      	movs	r2, #0
 8025914:	2300      	movs	r3, #0
 8025916:	0030      	movs	r0, r6
 8025918:	0039      	movs	r1, r7
 802591a:	f7da fdcf 	bl	80004bc <__aeabi_dcmplt>
 802591e:	2800      	cmp	r0, #0
 8025920:	d003      	beq.n	802592a <_printf_float+0x8a>
 8025922:	002b      	movs	r3, r5
 8025924:	222d      	movs	r2, #45	@ 0x2d
 8025926:	3343      	adds	r3, #67	@ 0x43
 8025928:	701a      	strb	r2, [r3, #0]
 802592a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802592c:	4f9a      	ldr	r7, [pc, #616]	@ (8025b98 <_printf_float+0x2f8>)
 802592e:	2b47      	cmp	r3, #71	@ 0x47
 8025930:	d800      	bhi.n	8025934 <_printf_float+0x94>
 8025932:	4f9a      	ldr	r7, [pc, #616]	@ (8025b9c <_printf_float+0x2fc>)
 8025934:	2303      	movs	r3, #3
 8025936:	2400      	movs	r4, #0
 8025938:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802593a:	612b      	str	r3, [r5, #16]
 802593c:	3301      	adds	r3, #1
 802593e:	439a      	bics	r2, r3
 8025940:	602a      	str	r2, [r5, #0]
 8025942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025944:	0029      	movs	r1, r5
 8025946:	9300      	str	r3, [sp, #0]
 8025948:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802594a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802594c:	aa15      	add	r2, sp, #84	@ 0x54
 802594e:	f000 f9e5 	bl	8025d1c <_printf_common>
 8025952:	3001      	adds	r0, #1
 8025954:	d000      	beq.n	8025958 <_printf_float+0xb8>
 8025956:	e09e      	b.n	8025a96 <_printf_float+0x1f6>
 8025958:	2001      	movs	r0, #1
 802595a:	4240      	negs	r0, r0
 802595c:	b017      	add	sp, #92	@ 0x5c
 802595e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025960:	3307      	adds	r3, #7
 8025962:	e7b8      	b.n	80258d6 <_printf_float+0x36>
 8025964:	0032      	movs	r2, r6
 8025966:	003b      	movs	r3, r7
 8025968:	0030      	movs	r0, r6
 802596a:	0039      	movs	r1, r7
 802596c:	f7dd fee2 	bl	8003734 <__aeabi_dcmpun>
 8025970:	2800      	cmp	r0, #0
 8025972:	d00b      	beq.n	802598c <_printf_float+0xec>
 8025974:	2f00      	cmp	r7, #0
 8025976:	da03      	bge.n	8025980 <_printf_float+0xe0>
 8025978:	002b      	movs	r3, r5
 802597a:	222d      	movs	r2, #45	@ 0x2d
 802597c:	3343      	adds	r3, #67	@ 0x43
 802597e:	701a      	strb	r2, [r3, #0]
 8025980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025982:	4f87      	ldr	r7, [pc, #540]	@ (8025ba0 <_printf_float+0x300>)
 8025984:	2b47      	cmp	r3, #71	@ 0x47
 8025986:	d8d5      	bhi.n	8025934 <_printf_float+0x94>
 8025988:	4f86      	ldr	r7, [pc, #536]	@ (8025ba4 <_printf_float+0x304>)
 802598a:	e7d3      	b.n	8025934 <_printf_float+0x94>
 802598c:	2220      	movs	r2, #32
 802598e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025990:	686b      	ldr	r3, [r5, #4]
 8025992:	4394      	bics	r4, r2
 8025994:	1c5a      	adds	r2, r3, #1
 8025996:	d146      	bne.n	8025a26 <_printf_float+0x186>
 8025998:	3307      	adds	r3, #7
 802599a:	606b      	str	r3, [r5, #4]
 802599c:	2380      	movs	r3, #128	@ 0x80
 802599e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80259a0:	00db      	lsls	r3, r3, #3
 80259a2:	4313      	orrs	r3, r2
 80259a4:	2200      	movs	r2, #0
 80259a6:	602b      	str	r3, [r5, #0]
 80259a8:	9206      	str	r2, [sp, #24]
 80259aa:	aa14      	add	r2, sp, #80	@ 0x50
 80259ac:	9205      	str	r2, [sp, #20]
 80259ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80259b0:	a90a      	add	r1, sp, #40	@ 0x28
 80259b2:	9204      	str	r2, [sp, #16]
 80259b4:	aa13      	add	r2, sp, #76	@ 0x4c
 80259b6:	9203      	str	r2, [sp, #12]
 80259b8:	2223      	movs	r2, #35	@ 0x23
 80259ba:	1852      	adds	r2, r2, r1
 80259bc:	9202      	str	r2, [sp, #8]
 80259be:	9301      	str	r3, [sp, #4]
 80259c0:	686b      	ldr	r3, [r5, #4]
 80259c2:	0032      	movs	r2, r6
 80259c4:	9300      	str	r3, [sp, #0]
 80259c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80259c8:	003b      	movs	r3, r7
 80259ca:	f7ff fec3 	bl	8025754 <__cvt>
 80259ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80259d0:	0007      	movs	r7, r0
 80259d2:	2c47      	cmp	r4, #71	@ 0x47
 80259d4:	d12d      	bne.n	8025a32 <_printf_float+0x192>
 80259d6:	1cd3      	adds	r3, r2, #3
 80259d8:	db02      	blt.n	80259e0 <_printf_float+0x140>
 80259da:	686b      	ldr	r3, [r5, #4]
 80259dc:	429a      	cmp	r2, r3
 80259de:	dd47      	ble.n	8025a70 <_printf_float+0x1d0>
 80259e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259e2:	3b02      	subs	r3, #2
 80259e4:	b2db      	uxtb	r3, r3
 80259e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80259e8:	0028      	movs	r0, r5
 80259ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80259ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80259ee:	3901      	subs	r1, #1
 80259f0:	3050      	adds	r0, #80	@ 0x50
 80259f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80259f4:	f7ff ff14 	bl	8025820 <__exponent>
 80259f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80259fa:	0004      	movs	r4, r0
 80259fc:	1813      	adds	r3, r2, r0
 80259fe:	612b      	str	r3, [r5, #16]
 8025a00:	2a01      	cmp	r2, #1
 8025a02:	dc02      	bgt.n	8025a0a <_printf_float+0x16a>
 8025a04:	682a      	ldr	r2, [r5, #0]
 8025a06:	07d2      	lsls	r2, r2, #31
 8025a08:	d501      	bpl.n	8025a0e <_printf_float+0x16e>
 8025a0a:	3301      	adds	r3, #1
 8025a0c:	612b      	str	r3, [r5, #16]
 8025a0e:	2323      	movs	r3, #35	@ 0x23
 8025a10:	aa0a      	add	r2, sp, #40	@ 0x28
 8025a12:	189b      	adds	r3, r3, r2
 8025a14:	781b      	ldrb	r3, [r3, #0]
 8025a16:	2b00      	cmp	r3, #0
 8025a18:	d100      	bne.n	8025a1c <_printf_float+0x17c>
 8025a1a:	e792      	b.n	8025942 <_printf_float+0xa2>
 8025a1c:	002b      	movs	r3, r5
 8025a1e:	222d      	movs	r2, #45	@ 0x2d
 8025a20:	3343      	adds	r3, #67	@ 0x43
 8025a22:	701a      	strb	r2, [r3, #0]
 8025a24:	e78d      	b.n	8025942 <_printf_float+0xa2>
 8025a26:	2c47      	cmp	r4, #71	@ 0x47
 8025a28:	d1b8      	bne.n	802599c <_printf_float+0xfc>
 8025a2a:	2b00      	cmp	r3, #0
 8025a2c:	d1b6      	bne.n	802599c <_printf_float+0xfc>
 8025a2e:	3301      	adds	r3, #1
 8025a30:	e7b3      	b.n	802599a <_printf_float+0xfa>
 8025a32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a34:	2b65      	cmp	r3, #101	@ 0x65
 8025a36:	d9d7      	bls.n	80259e8 <_printf_float+0x148>
 8025a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a3a:	2b66      	cmp	r3, #102	@ 0x66
 8025a3c:	d11a      	bne.n	8025a74 <_printf_float+0x1d4>
 8025a3e:	686b      	ldr	r3, [r5, #4]
 8025a40:	2a00      	cmp	r2, #0
 8025a42:	dd09      	ble.n	8025a58 <_printf_float+0x1b8>
 8025a44:	612a      	str	r2, [r5, #16]
 8025a46:	2b00      	cmp	r3, #0
 8025a48:	d102      	bne.n	8025a50 <_printf_float+0x1b0>
 8025a4a:	6829      	ldr	r1, [r5, #0]
 8025a4c:	07c9      	lsls	r1, r1, #31
 8025a4e:	d50b      	bpl.n	8025a68 <_printf_float+0x1c8>
 8025a50:	3301      	adds	r3, #1
 8025a52:	189b      	adds	r3, r3, r2
 8025a54:	612b      	str	r3, [r5, #16]
 8025a56:	e007      	b.n	8025a68 <_printf_float+0x1c8>
 8025a58:	2b00      	cmp	r3, #0
 8025a5a:	d103      	bne.n	8025a64 <_printf_float+0x1c4>
 8025a5c:	2201      	movs	r2, #1
 8025a5e:	6829      	ldr	r1, [r5, #0]
 8025a60:	4211      	tst	r1, r2
 8025a62:	d000      	beq.n	8025a66 <_printf_float+0x1c6>
 8025a64:	1c9a      	adds	r2, r3, #2
 8025a66:	612a      	str	r2, [r5, #16]
 8025a68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a6a:	2400      	movs	r4, #0
 8025a6c:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025a6e:	e7ce      	b.n	8025a0e <_printf_float+0x16e>
 8025a70:	2367      	movs	r3, #103	@ 0x67
 8025a72:	930c      	str	r3, [sp, #48]	@ 0x30
 8025a74:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025a76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025a78:	4299      	cmp	r1, r3
 8025a7a:	db06      	blt.n	8025a8a <_printf_float+0x1ea>
 8025a7c:	682b      	ldr	r3, [r5, #0]
 8025a7e:	6129      	str	r1, [r5, #16]
 8025a80:	07db      	lsls	r3, r3, #31
 8025a82:	d5f1      	bpl.n	8025a68 <_printf_float+0x1c8>
 8025a84:	3101      	adds	r1, #1
 8025a86:	6129      	str	r1, [r5, #16]
 8025a88:	e7ee      	b.n	8025a68 <_printf_float+0x1c8>
 8025a8a:	2201      	movs	r2, #1
 8025a8c:	2900      	cmp	r1, #0
 8025a8e:	dce0      	bgt.n	8025a52 <_printf_float+0x1b2>
 8025a90:	1892      	adds	r2, r2, r2
 8025a92:	1a52      	subs	r2, r2, r1
 8025a94:	e7dd      	b.n	8025a52 <_printf_float+0x1b2>
 8025a96:	682a      	ldr	r2, [r5, #0]
 8025a98:	0553      	lsls	r3, r2, #21
 8025a9a:	d408      	bmi.n	8025aae <_printf_float+0x20e>
 8025a9c:	692b      	ldr	r3, [r5, #16]
 8025a9e:	003a      	movs	r2, r7
 8025aa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025aa4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025aa6:	47a0      	blx	r4
 8025aa8:	3001      	adds	r0, #1
 8025aaa:	d129      	bne.n	8025b00 <_printf_float+0x260>
 8025aac:	e754      	b.n	8025958 <_printf_float+0xb8>
 8025aae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ab0:	2b65      	cmp	r3, #101	@ 0x65
 8025ab2:	d800      	bhi.n	8025ab6 <_printf_float+0x216>
 8025ab4:	e0db      	b.n	8025c6e <_printf_float+0x3ce>
 8025ab6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025ab8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025aba:	2200      	movs	r2, #0
 8025abc:	2300      	movs	r3, #0
 8025abe:	f7da fcf7 	bl	80004b0 <__aeabi_dcmpeq>
 8025ac2:	2800      	cmp	r0, #0
 8025ac4:	d033      	beq.n	8025b2e <_printf_float+0x28e>
 8025ac6:	2301      	movs	r3, #1
 8025ac8:	4a37      	ldr	r2, [pc, #220]	@ (8025ba8 <_printf_float+0x308>)
 8025aca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025acc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ace:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ad0:	47a0      	blx	r4
 8025ad2:	3001      	adds	r0, #1
 8025ad4:	d100      	bne.n	8025ad8 <_printf_float+0x238>
 8025ad6:	e73f      	b.n	8025958 <_printf_float+0xb8>
 8025ad8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025ada:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025adc:	42b3      	cmp	r3, r6
 8025ade:	db02      	blt.n	8025ae6 <_printf_float+0x246>
 8025ae0:	682b      	ldr	r3, [r5, #0]
 8025ae2:	07db      	lsls	r3, r3, #31
 8025ae4:	d50c      	bpl.n	8025b00 <_printf_float+0x260>
 8025ae6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025aea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025af0:	47a0      	blx	r4
 8025af2:	2400      	movs	r4, #0
 8025af4:	3001      	adds	r0, #1
 8025af6:	d100      	bne.n	8025afa <_printf_float+0x25a>
 8025af8:	e72e      	b.n	8025958 <_printf_float+0xb8>
 8025afa:	1e73      	subs	r3, r6, #1
 8025afc:	42a3      	cmp	r3, r4
 8025afe:	dc0a      	bgt.n	8025b16 <_printf_float+0x276>
 8025b00:	682b      	ldr	r3, [r5, #0]
 8025b02:	079b      	lsls	r3, r3, #30
 8025b04:	d500      	bpl.n	8025b08 <_printf_float+0x268>
 8025b06:	e106      	b.n	8025d16 <_printf_float+0x476>
 8025b08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025b0a:	68e8      	ldr	r0, [r5, #12]
 8025b0c:	4298      	cmp	r0, r3
 8025b0e:	db00      	blt.n	8025b12 <_printf_float+0x272>
 8025b10:	e724      	b.n	802595c <_printf_float+0xbc>
 8025b12:	0018      	movs	r0, r3
 8025b14:	e722      	b.n	802595c <_printf_float+0xbc>
 8025b16:	002a      	movs	r2, r5
 8025b18:	2301      	movs	r3, #1
 8025b1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b1e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025b20:	321a      	adds	r2, #26
 8025b22:	47b8      	blx	r7
 8025b24:	3001      	adds	r0, #1
 8025b26:	d100      	bne.n	8025b2a <_printf_float+0x28a>
 8025b28:	e716      	b.n	8025958 <_printf_float+0xb8>
 8025b2a:	3401      	adds	r4, #1
 8025b2c:	e7e5      	b.n	8025afa <_printf_float+0x25a>
 8025b2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b30:	2b00      	cmp	r3, #0
 8025b32:	dc3b      	bgt.n	8025bac <_printf_float+0x30c>
 8025b34:	2301      	movs	r3, #1
 8025b36:	4a1c      	ldr	r2, [pc, #112]	@ (8025ba8 <_printf_float+0x308>)
 8025b38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b3e:	47a0      	blx	r4
 8025b40:	3001      	adds	r0, #1
 8025b42:	d100      	bne.n	8025b46 <_printf_float+0x2a6>
 8025b44:	e708      	b.n	8025958 <_printf_float+0xb8>
 8025b46:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025b48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b4a:	4333      	orrs	r3, r6
 8025b4c:	d102      	bne.n	8025b54 <_printf_float+0x2b4>
 8025b4e:	682b      	ldr	r3, [r5, #0]
 8025b50:	07db      	lsls	r3, r3, #31
 8025b52:	d5d5      	bpl.n	8025b00 <_printf_float+0x260>
 8025b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025b56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b5c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b5e:	47a0      	blx	r4
 8025b60:	2300      	movs	r3, #0
 8025b62:	3001      	adds	r0, #1
 8025b64:	d100      	bne.n	8025b68 <_printf_float+0x2c8>
 8025b66:	e6f7      	b.n	8025958 <_printf_float+0xb8>
 8025b68:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b6c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b6e:	425b      	negs	r3, r3
 8025b70:	4293      	cmp	r3, r2
 8025b72:	dc01      	bgt.n	8025b78 <_printf_float+0x2d8>
 8025b74:	0033      	movs	r3, r6
 8025b76:	e792      	b.n	8025a9e <_printf_float+0x1fe>
 8025b78:	002a      	movs	r2, r5
 8025b7a:	2301      	movs	r3, #1
 8025b7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b82:	321a      	adds	r2, #26
 8025b84:	47a0      	blx	r4
 8025b86:	3001      	adds	r0, #1
 8025b88:	d100      	bne.n	8025b8c <_printf_float+0x2ec>
 8025b8a:	e6e5      	b.n	8025958 <_printf_float+0xb8>
 8025b8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b8e:	3301      	adds	r3, #1
 8025b90:	e7ea      	b.n	8025b68 <_printf_float+0x2c8>
 8025b92:	46c0      	nop			@ (mov r8, r8)
 8025b94:	7fefffff 	.word	0x7fefffff
 8025b98:	0802ea9a 	.word	0x0802ea9a
 8025b9c:	0802ea96 	.word	0x0802ea96
 8025ba0:	0802eaa2 	.word	0x0802eaa2
 8025ba4:	0802ea9e 	.word	0x0802ea9e
 8025ba8:	0802eaa6 	.word	0x0802eaa6
 8025bac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025bae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025bb0:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bb2:	429e      	cmp	r6, r3
 8025bb4:	dd00      	ble.n	8025bb8 <_printf_float+0x318>
 8025bb6:	001e      	movs	r6, r3
 8025bb8:	2e00      	cmp	r6, #0
 8025bba:	dc31      	bgt.n	8025c20 <_printf_float+0x380>
 8025bbc:	43f3      	mvns	r3, r6
 8025bbe:	2400      	movs	r4, #0
 8025bc0:	17db      	asrs	r3, r3, #31
 8025bc2:	4033      	ands	r3, r6
 8025bc4:	930e      	str	r3, [sp, #56]	@ 0x38
 8025bc6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025bca:	1af3      	subs	r3, r6, r3
 8025bcc:	42a3      	cmp	r3, r4
 8025bce:	dc30      	bgt.n	8025c32 <_printf_float+0x392>
 8025bd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025bd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025bd4:	429a      	cmp	r2, r3
 8025bd6:	dc38      	bgt.n	8025c4a <_printf_float+0x3aa>
 8025bd8:	682b      	ldr	r3, [r5, #0]
 8025bda:	07db      	lsls	r3, r3, #31
 8025bdc:	d435      	bmi.n	8025c4a <_printf_float+0x3aa>
 8025bde:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025be0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025be2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025be4:	1b9b      	subs	r3, r3, r6
 8025be6:	1b14      	subs	r4, r2, r4
 8025be8:	429c      	cmp	r4, r3
 8025bea:	dd00      	ble.n	8025bee <_printf_float+0x34e>
 8025bec:	001c      	movs	r4, r3
 8025bee:	2c00      	cmp	r4, #0
 8025bf0:	dc34      	bgt.n	8025c5c <_printf_float+0x3bc>
 8025bf2:	43e3      	mvns	r3, r4
 8025bf4:	2600      	movs	r6, #0
 8025bf6:	17db      	asrs	r3, r3, #31
 8025bf8:	401c      	ands	r4, r3
 8025bfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025bfc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025bfe:	1ad3      	subs	r3, r2, r3
 8025c00:	1b1b      	subs	r3, r3, r4
 8025c02:	42b3      	cmp	r3, r6
 8025c04:	dc00      	bgt.n	8025c08 <_printf_float+0x368>
 8025c06:	e77b      	b.n	8025b00 <_printf_float+0x260>
 8025c08:	002a      	movs	r2, r5
 8025c0a:	2301      	movs	r3, #1
 8025c0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025c12:	321a      	adds	r2, #26
 8025c14:	47b8      	blx	r7
 8025c16:	3001      	adds	r0, #1
 8025c18:	d100      	bne.n	8025c1c <_printf_float+0x37c>
 8025c1a:	e69d      	b.n	8025958 <_printf_float+0xb8>
 8025c1c:	3601      	adds	r6, #1
 8025c1e:	e7ec      	b.n	8025bfa <_printf_float+0x35a>
 8025c20:	0033      	movs	r3, r6
 8025c22:	003a      	movs	r2, r7
 8025c24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c28:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c2a:	47a0      	blx	r4
 8025c2c:	3001      	adds	r0, #1
 8025c2e:	d1c5      	bne.n	8025bbc <_printf_float+0x31c>
 8025c30:	e692      	b.n	8025958 <_printf_float+0xb8>
 8025c32:	002a      	movs	r2, r5
 8025c34:	2301      	movs	r3, #1
 8025c36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c3c:	321a      	adds	r2, #26
 8025c3e:	47b0      	blx	r6
 8025c40:	3001      	adds	r0, #1
 8025c42:	d100      	bne.n	8025c46 <_printf_float+0x3a6>
 8025c44:	e688      	b.n	8025958 <_printf_float+0xb8>
 8025c46:	3401      	adds	r4, #1
 8025c48:	e7bd      	b.n	8025bc6 <_printf_float+0x326>
 8025c4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c54:	47a0      	blx	r4
 8025c56:	3001      	adds	r0, #1
 8025c58:	d1c1      	bne.n	8025bde <_printf_float+0x33e>
 8025c5a:	e67d      	b.n	8025958 <_printf_float+0xb8>
 8025c5c:	19ba      	adds	r2, r7, r6
 8025c5e:	0023      	movs	r3, r4
 8025c60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c64:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c66:	47b0      	blx	r6
 8025c68:	3001      	adds	r0, #1
 8025c6a:	d1c2      	bne.n	8025bf2 <_printf_float+0x352>
 8025c6c:	e674      	b.n	8025958 <_printf_float+0xb8>
 8025c6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025c70:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c72:	2b01      	cmp	r3, #1
 8025c74:	dc02      	bgt.n	8025c7c <_printf_float+0x3dc>
 8025c76:	2301      	movs	r3, #1
 8025c78:	421a      	tst	r2, r3
 8025c7a:	d039      	beq.n	8025cf0 <_printf_float+0x450>
 8025c7c:	2301      	movs	r3, #1
 8025c7e:	003a      	movs	r2, r7
 8025c80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c84:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c86:	47b0      	blx	r6
 8025c88:	3001      	adds	r0, #1
 8025c8a:	d100      	bne.n	8025c8e <_printf_float+0x3ee>
 8025c8c:	e664      	b.n	8025958 <_printf_float+0xb8>
 8025c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c96:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c98:	47b0      	blx	r6
 8025c9a:	3001      	adds	r0, #1
 8025c9c:	d100      	bne.n	8025ca0 <_printf_float+0x400>
 8025c9e:	e65b      	b.n	8025958 <_printf_float+0xb8>
 8025ca0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025ca2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025ca4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ca6:	2200      	movs	r2, #0
 8025ca8:	3b01      	subs	r3, #1
 8025caa:	930c      	str	r3, [sp, #48]	@ 0x30
 8025cac:	2300      	movs	r3, #0
 8025cae:	f7da fbff 	bl	80004b0 <__aeabi_dcmpeq>
 8025cb2:	2800      	cmp	r0, #0
 8025cb4:	d11a      	bne.n	8025cec <_printf_float+0x44c>
 8025cb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025cb8:	1c7a      	adds	r2, r7, #1
 8025cba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cbe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025cc0:	47b0      	blx	r6
 8025cc2:	3001      	adds	r0, #1
 8025cc4:	d10e      	bne.n	8025ce4 <_printf_float+0x444>
 8025cc6:	e647      	b.n	8025958 <_printf_float+0xb8>
 8025cc8:	002a      	movs	r2, r5
 8025cca:	2301      	movs	r3, #1
 8025ccc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cd0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025cd2:	321a      	adds	r2, #26
 8025cd4:	47b8      	blx	r7
 8025cd6:	3001      	adds	r0, #1
 8025cd8:	d100      	bne.n	8025cdc <_printf_float+0x43c>
 8025cda:	e63d      	b.n	8025958 <_printf_float+0xb8>
 8025cdc:	3601      	adds	r6, #1
 8025cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ce0:	429e      	cmp	r6, r3
 8025ce2:	dbf1      	blt.n	8025cc8 <_printf_float+0x428>
 8025ce4:	002a      	movs	r2, r5
 8025ce6:	0023      	movs	r3, r4
 8025ce8:	3250      	adds	r2, #80	@ 0x50
 8025cea:	e6d9      	b.n	8025aa0 <_printf_float+0x200>
 8025cec:	2600      	movs	r6, #0
 8025cee:	e7f6      	b.n	8025cde <_printf_float+0x43e>
 8025cf0:	003a      	movs	r2, r7
 8025cf2:	e7e2      	b.n	8025cba <_printf_float+0x41a>
 8025cf4:	002a      	movs	r2, r5
 8025cf6:	2301      	movs	r3, #1
 8025cf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cfc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025cfe:	3219      	adds	r2, #25
 8025d00:	47b0      	blx	r6
 8025d02:	3001      	adds	r0, #1
 8025d04:	d100      	bne.n	8025d08 <_printf_float+0x468>
 8025d06:	e627      	b.n	8025958 <_printf_float+0xb8>
 8025d08:	3401      	adds	r4, #1
 8025d0a:	68eb      	ldr	r3, [r5, #12]
 8025d0c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025d0e:	1a9b      	subs	r3, r3, r2
 8025d10:	42a3      	cmp	r3, r4
 8025d12:	dcef      	bgt.n	8025cf4 <_printf_float+0x454>
 8025d14:	e6f8      	b.n	8025b08 <_printf_float+0x268>
 8025d16:	2400      	movs	r4, #0
 8025d18:	e7f7      	b.n	8025d0a <_printf_float+0x46a>
 8025d1a:	46c0      	nop			@ (mov r8, r8)

08025d1c <_printf_common>:
 8025d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025d1e:	0016      	movs	r6, r2
 8025d20:	9301      	str	r3, [sp, #4]
 8025d22:	688a      	ldr	r2, [r1, #8]
 8025d24:	690b      	ldr	r3, [r1, #16]
 8025d26:	000c      	movs	r4, r1
 8025d28:	9000      	str	r0, [sp, #0]
 8025d2a:	4293      	cmp	r3, r2
 8025d2c:	da00      	bge.n	8025d30 <_printf_common+0x14>
 8025d2e:	0013      	movs	r3, r2
 8025d30:	0022      	movs	r2, r4
 8025d32:	6033      	str	r3, [r6, #0]
 8025d34:	3243      	adds	r2, #67	@ 0x43
 8025d36:	7812      	ldrb	r2, [r2, #0]
 8025d38:	2a00      	cmp	r2, #0
 8025d3a:	d001      	beq.n	8025d40 <_printf_common+0x24>
 8025d3c:	3301      	adds	r3, #1
 8025d3e:	6033      	str	r3, [r6, #0]
 8025d40:	6823      	ldr	r3, [r4, #0]
 8025d42:	069b      	lsls	r3, r3, #26
 8025d44:	d502      	bpl.n	8025d4c <_printf_common+0x30>
 8025d46:	6833      	ldr	r3, [r6, #0]
 8025d48:	3302      	adds	r3, #2
 8025d4a:	6033      	str	r3, [r6, #0]
 8025d4c:	6822      	ldr	r2, [r4, #0]
 8025d4e:	2306      	movs	r3, #6
 8025d50:	0015      	movs	r5, r2
 8025d52:	401d      	ands	r5, r3
 8025d54:	421a      	tst	r2, r3
 8025d56:	d027      	beq.n	8025da8 <_printf_common+0x8c>
 8025d58:	0023      	movs	r3, r4
 8025d5a:	3343      	adds	r3, #67	@ 0x43
 8025d5c:	781b      	ldrb	r3, [r3, #0]
 8025d5e:	1e5a      	subs	r2, r3, #1
 8025d60:	4193      	sbcs	r3, r2
 8025d62:	6822      	ldr	r2, [r4, #0]
 8025d64:	0692      	lsls	r2, r2, #26
 8025d66:	d430      	bmi.n	8025dca <_printf_common+0xae>
 8025d68:	0022      	movs	r2, r4
 8025d6a:	9901      	ldr	r1, [sp, #4]
 8025d6c:	9800      	ldr	r0, [sp, #0]
 8025d6e:	9d08      	ldr	r5, [sp, #32]
 8025d70:	3243      	adds	r2, #67	@ 0x43
 8025d72:	47a8      	blx	r5
 8025d74:	3001      	adds	r0, #1
 8025d76:	d025      	beq.n	8025dc4 <_printf_common+0xa8>
 8025d78:	2206      	movs	r2, #6
 8025d7a:	6823      	ldr	r3, [r4, #0]
 8025d7c:	2500      	movs	r5, #0
 8025d7e:	4013      	ands	r3, r2
 8025d80:	2b04      	cmp	r3, #4
 8025d82:	d105      	bne.n	8025d90 <_printf_common+0x74>
 8025d84:	6833      	ldr	r3, [r6, #0]
 8025d86:	68e5      	ldr	r5, [r4, #12]
 8025d88:	1aed      	subs	r5, r5, r3
 8025d8a:	43eb      	mvns	r3, r5
 8025d8c:	17db      	asrs	r3, r3, #31
 8025d8e:	401d      	ands	r5, r3
 8025d90:	68a3      	ldr	r3, [r4, #8]
 8025d92:	6922      	ldr	r2, [r4, #16]
 8025d94:	4293      	cmp	r3, r2
 8025d96:	dd01      	ble.n	8025d9c <_printf_common+0x80>
 8025d98:	1a9b      	subs	r3, r3, r2
 8025d9a:	18ed      	adds	r5, r5, r3
 8025d9c:	2600      	movs	r6, #0
 8025d9e:	42b5      	cmp	r5, r6
 8025da0:	d120      	bne.n	8025de4 <_printf_common+0xc8>
 8025da2:	2000      	movs	r0, #0
 8025da4:	e010      	b.n	8025dc8 <_printf_common+0xac>
 8025da6:	3501      	adds	r5, #1
 8025da8:	68e3      	ldr	r3, [r4, #12]
 8025daa:	6832      	ldr	r2, [r6, #0]
 8025dac:	1a9b      	subs	r3, r3, r2
 8025dae:	42ab      	cmp	r3, r5
 8025db0:	ddd2      	ble.n	8025d58 <_printf_common+0x3c>
 8025db2:	0022      	movs	r2, r4
 8025db4:	2301      	movs	r3, #1
 8025db6:	9901      	ldr	r1, [sp, #4]
 8025db8:	9800      	ldr	r0, [sp, #0]
 8025dba:	9f08      	ldr	r7, [sp, #32]
 8025dbc:	3219      	adds	r2, #25
 8025dbe:	47b8      	blx	r7
 8025dc0:	3001      	adds	r0, #1
 8025dc2:	d1f0      	bne.n	8025da6 <_printf_common+0x8a>
 8025dc4:	2001      	movs	r0, #1
 8025dc6:	4240      	negs	r0, r0
 8025dc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025dca:	2030      	movs	r0, #48	@ 0x30
 8025dcc:	18e1      	adds	r1, r4, r3
 8025dce:	3143      	adds	r1, #67	@ 0x43
 8025dd0:	7008      	strb	r0, [r1, #0]
 8025dd2:	0021      	movs	r1, r4
 8025dd4:	1c5a      	adds	r2, r3, #1
 8025dd6:	3145      	adds	r1, #69	@ 0x45
 8025dd8:	7809      	ldrb	r1, [r1, #0]
 8025dda:	18a2      	adds	r2, r4, r2
 8025ddc:	3243      	adds	r2, #67	@ 0x43
 8025dde:	3302      	adds	r3, #2
 8025de0:	7011      	strb	r1, [r2, #0]
 8025de2:	e7c1      	b.n	8025d68 <_printf_common+0x4c>
 8025de4:	0022      	movs	r2, r4
 8025de6:	2301      	movs	r3, #1
 8025de8:	9901      	ldr	r1, [sp, #4]
 8025dea:	9800      	ldr	r0, [sp, #0]
 8025dec:	9f08      	ldr	r7, [sp, #32]
 8025dee:	321a      	adds	r2, #26
 8025df0:	47b8      	blx	r7
 8025df2:	3001      	adds	r0, #1
 8025df4:	d0e6      	beq.n	8025dc4 <_printf_common+0xa8>
 8025df6:	3601      	adds	r6, #1
 8025df8:	e7d1      	b.n	8025d9e <_printf_common+0x82>
	...

08025dfc <_printf_i>:
 8025dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025dfe:	b08b      	sub	sp, #44	@ 0x2c
 8025e00:	9206      	str	r2, [sp, #24]
 8025e02:	000a      	movs	r2, r1
 8025e04:	3243      	adds	r2, #67	@ 0x43
 8025e06:	9307      	str	r3, [sp, #28]
 8025e08:	9005      	str	r0, [sp, #20]
 8025e0a:	9203      	str	r2, [sp, #12]
 8025e0c:	7e0a      	ldrb	r2, [r1, #24]
 8025e0e:	000c      	movs	r4, r1
 8025e10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025e12:	2a78      	cmp	r2, #120	@ 0x78
 8025e14:	d809      	bhi.n	8025e2a <_printf_i+0x2e>
 8025e16:	2a62      	cmp	r2, #98	@ 0x62
 8025e18:	d80b      	bhi.n	8025e32 <_printf_i+0x36>
 8025e1a:	2a00      	cmp	r2, #0
 8025e1c:	d100      	bne.n	8025e20 <_printf_i+0x24>
 8025e1e:	e0ba      	b.n	8025f96 <_printf_i+0x19a>
 8025e20:	497a      	ldr	r1, [pc, #488]	@ (802600c <_printf_i+0x210>)
 8025e22:	9104      	str	r1, [sp, #16]
 8025e24:	2a58      	cmp	r2, #88	@ 0x58
 8025e26:	d100      	bne.n	8025e2a <_printf_i+0x2e>
 8025e28:	e08e      	b.n	8025f48 <_printf_i+0x14c>
 8025e2a:	0025      	movs	r5, r4
 8025e2c:	3542      	adds	r5, #66	@ 0x42
 8025e2e:	702a      	strb	r2, [r5, #0]
 8025e30:	e022      	b.n	8025e78 <_printf_i+0x7c>
 8025e32:	0010      	movs	r0, r2
 8025e34:	3863      	subs	r0, #99	@ 0x63
 8025e36:	2815      	cmp	r0, #21
 8025e38:	d8f7      	bhi.n	8025e2a <_printf_i+0x2e>
 8025e3a:	f7da f9a9 	bl	8000190 <__gnu_thumb1_case_shi>
 8025e3e:	0016      	.short	0x0016
 8025e40:	fff6001f 	.word	0xfff6001f
 8025e44:	fff6fff6 	.word	0xfff6fff6
 8025e48:	001ffff6 	.word	0x001ffff6
 8025e4c:	fff6fff6 	.word	0xfff6fff6
 8025e50:	fff6fff6 	.word	0xfff6fff6
 8025e54:	0036009f 	.word	0x0036009f
 8025e58:	fff6007e 	.word	0xfff6007e
 8025e5c:	00b0fff6 	.word	0x00b0fff6
 8025e60:	0036fff6 	.word	0x0036fff6
 8025e64:	fff6fff6 	.word	0xfff6fff6
 8025e68:	0082      	.short	0x0082
 8025e6a:	0025      	movs	r5, r4
 8025e6c:	681a      	ldr	r2, [r3, #0]
 8025e6e:	3542      	adds	r5, #66	@ 0x42
 8025e70:	1d11      	adds	r1, r2, #4
 8025e72:	6019      	str	r1, [r3, #0]
 8025e74:	6813      	ldr	r3, [r2, #0]
 8025e76:	702b      	strb	r3, [r5, #0]
 8025e78:	2301      	movs	r3, #1
 8025e7a:	e09e      	b.n	8025fba <_printf_i+0x1be>
 8025e7c:	6818      	ldr	r0, [r3, #0]
 8025e7e:	6809      	ldr	r1, [r1, #0]
 8025e80:	1d02      	adds	r2, r0, #4
 8025e82:	060d      	lsls	r5, r1, #24
 8025e84:	d50b      	bpl.n	8025e9e <_printf_i+0xa2>
 8025e86:	6806      	ldr	r6, [r0, #0]
 8025e88:	601a      	str	r2, [r3, #0]
 8025e8a:	2e00      	cmp	r6, #0
 8025e8c:	da03      	bge.n	8025e96 <_printf_i+0x9a>
 8025e8e:	232d      	movs	r3, #45	@ 0x2d
 8025e90:	9a03      	ldr	r2, [sp, #12]
 8025e92:	4276      	negs	r6, r6
 8025e94:	7013      	strb	r3, [r2, #0]
 8025e96:	4b5d      	ldr	r3, [pc, #372]	@ (802600c <_printf_i+0x210>)
 8025e98:	270a      	movs	r7, #10
 8025e9a:	9304      	str	r3, [sp, #16]
 8025e9c:	e018      	b.n	8025ed0 <_printf_i+0xd4>
 8025e9e:	6806      	ldr	r6, [r0, #0]
 8025ea0:	601a      	str	r2, [r3, #0]
 8025ea2:	0649      	lsls	r1, r1, #25
 8025ea4:	d5f1      	bpl.n	8025e8a <_printf_i+0x8e>
 8025ea6:	b236      	sxth	r6, r6
 8025ea8:	e7ef      	b.n	8025e8a <_printf_i+0x8e>
 8025eaa:	6808      	ldr	r0, [r1, #0]
 8025eac:	6819      	ldr	r1, [r3, #0]
 8025eae:	c940      	ldmia	r1!, {r6}
 8025eb0:	0605      	lsls	r5, r0, #24
 8025eb2:	d402      	bmi.n	8025eba <_printf_i+0xbe>
 8025eb4:	0640      	lsls	r0, r0, #25
 8025eb6:	d500      	bpl.n	8025eba <_printf_i+0xbe>
 8025eb8:	b2b6      	uxth	r6, r6
 8025eba:	6019      	str	r1, [r3, #0]
 8025ebc:	4b53      	ldr	r3, [pc, #332]	@ (802600c <_printf_i+0x210>)
 8025ebe:	270a      	movs	r7, #10
 8025ec0:	9304      	str	r3, [sp, #16]
 8025ec2:	2a6f      	cmp	r2, #111	@ 0x6f
 8025ec4:	d100      	bne.n	8025ec8 <_printf_i+0xcc>
 8025ec6:	3f02      	subs	r7, #2
 8025ec8:	0023      	movs	r3, r4
 8025eca:	2200      	movs	r2, #0
 8025ecc:	3343      	adds	r3, #67	@ 0x43
 8025ece:	701a      	strb	r2, [r3, #0]
 8025ed0:	6863      	ldr	r3, [r4, #4]
 8025ed2:	60a3      	str	r3, [r4, #8]
 8025ed4:	2b00      	cmp	r3, #0
 8025ed6:	db06      	blt.n	8025ee6 <_printf_i+0xea>
 8025ed8:	2104      	movs	r1, #4
 8025eda:	6822      	ldr	r2, [r4, #0]
 8025edc:	9d03      	ldr	r5, [sp, #12]
 8025ede:	438a      	bics	r2, r1
 8025ee0:	6022      	str	r2, [r4, #0]
 8025ee2:	4333      	orrs	r3, r6
 8025ee4:	d00c      	beq.n	8025f00 <_printf_i+0x104>
 8025ee6:	9d03      	ldr	r5, [sp, #12]
 8025ee8:	0030      	movs	r0, r6
 8025eea:	0039      	movs	r1, r7
 8025eec:	f7da f9e0 	bl	80002b0 <__aeabi_uidivmod>
 8025ef0:	9b04      	ldr	r3, [sp, #16]
 8025ef2:	3d01      	subs	r5, #1
 8025ef4:	5c5b      	ldrb	r3, [r3, r1]
 8025ef6:	702b      	strb	r3, [r5, #0]
 8025ef8:	0033      	movs	r3, r6
 8025efa:	0006      	movs	r6, r0
 8025efc:	429f      	cmp	r7, r3
 8025efe:	d9f3      	bls.n	8025ee8 <_printf_i+0xec>
 8025f00:	2f08      	cmp	r7, #8
 8025f02:	d109      	bne.n	8025f18 <_printf_i+0x11c>
 8025f04:	6823      	ldr	r3, [r4, #0]
 8025f06:	07db      	lsls	r3, r3, #31
 8025f08:	d506      	bpl.n	8025f18 <_printf_i+0x11c>
 8025f0a:	6862      	ldr	r2, [r4, #4]
 8025f0c:	6923      	ldr	r3, [r4, #16]
 8025f0e:	429a      	cmp	r2, r3
 8025f10:	dc02      	bgt.n	8025f18 <_printf_i+0x11c>
 8025f12:	2330      	movs	r3, #48	@ 0x30
 8025f14:	3d01      	subs	r5, #1
 8025f16:	702b      	strb	r3, [r5, #0]
 8025f18:	9b03      	ldr	r3, [sp, #12]
 8025f1a:	1b5b      	subs	r3, r3, r5
 8025f1c:	6123      	str	r3, [r4, #16]
 8025f1e:	9b07      	ldr	r3, [sp, #28]
 8025f20:	0021      	movs	r1, r4
 8025f22:	9300      	str	r3, [sp, #0]
 8025f24:	9805      	ldr	r0, [sp, #20]
 8025f26:	9b06      	ldr	r3, [sp, #24]
 8025f28:	aa09      	add	r2, sp, #36	@ 0x24
 8025f2a:	f7ff fef7 	bl	8025d1c <_printf_common>
 8025f2e:	3001      	adds	r0, #1
 8025f30:	d148      	bne.n	8025fc4 <_printf_i+0x1c8>
 8025f32:	2001      	movs	r0, #1
 8025f34:	4240      	negs	r0, r0
 8025f36:	b00b      	add	sp, #44	@ 0x2c
 8025f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f3a:	2220      	movs	r2, #32
 8025f3c:	6809      	ldr	r1, [r1, #0]
 8025f3e:	430a      	orrs	r2, r1
 8025f40:	6022      	str	r2, [r4, #0]
 8025f42:	2278      	movs	r2, #120	@ 0x78
 8025f44:	4932      	ldr	r1, [pc, #200]	@ (8026010 <_printf_i+0x214>)
 8025f46:	9104      	str	r1, [sp, #16]
 8025f48:	0021      	movs	r1, r4
 8025f4a:	3145      	adds	r1, #69	@ 0x45
 8025f4c:	700a      	strb	r2, [r1, #0]
 8025f4e:	6819      	ldr	r1, [r3, #0]
 8025f50:	6822      	ldr	r2, [r4, #0]
 8025f52:	c940      	ldmia	r1!, {r6}
 8025f54:	0610      	lsls	r0, r2, #24
 8025f56:	d402      	bmi.n	8025f5e <_printf_i+0x162>
 8025f58:	0650      	lsls	r0, r2, #25
 8025f5a:	d500      	bpl.n	8025f5e <_printf_i+0x162>
 8025f5c:	b2b6      	uxth	r6, r6
 8025f5e:	6019      	str	r1, [r3, #0]
 8025f60:	07d3      	lsls	r3, r2, #31
 8025f62:	d502      	bpl.n	8025f6a <_printf_i+0x16e>
 8025f64:	2320      	movs	r3, #32
 8025f66:	4313      	orrs	r3, r2
 8025f68:	6023      	str	r3, [r4, #0]
 8025f6a:	2e00      	cmp	r6, #0
 8025f6c:	d001      	beq.n	8025f72 <_printf_i+0x176>
 8025f6e:	2710      	movs	r7, #16
 8025f70:	e7aa      	b.n	8025ec8 <_printf_i+0xcc>
 8025f72:	2220      	movs	r2, #32
 8025f74:	6823      	ldr	r3, [r4, #0]
 8025f76:	4393      	bics	r3, r2
 8025f78:	6023      	str	r3, [r4, #0]
 8025f7a:	e7f8      	b.n	8025f6e <_printf_i+0x172>
 8025f7c:	681a      	ldr	r2, [r3, #0]
 8025f7e:	680d      	ldr	r5, [r1, #0]
 8025f80:	1d10      	adds	r0, r2, #4
 8025f82:	6949      	ldr	r1, [r1, #20]
 8025f84:	6018      	str	r0, [r3, #0]
 8025f86:	6813      	ldr	r3, [r2, #0]
 8025f88:	062e      	lsls	r6, r5, #24
 8025f8a:	d501      	bpl.n	8025f90 <_printf_i+0x194>
 8025f8c:	6019      	str	r1, [r3, #0]
 8025f8e:	e002      	b.n	8025f96 <_printf_i+0x19a>
 8025f90:	066d      	lsls	r5, r5, #25
 8025f92:	d5fb      	bpl.n	8025f8c <_printf_i+0x190>
 8025f94:	8019      	strh	r1, [r3, #0]
 8025f96:	2300      	movs	r3, #0
 8025f98:	9d03      	ldr	r5, [sp, #12]
 8025f9a:	6123      	str	r3, [r4, #16]
 8025f9c:	e7bf      	b.n	8025f1e <_printf_i+0x122>
 8025f9e:	681a      	ldr	r2, [r3, #0]
 8025fa0:	1d11      	adds	r1, r2, #4
 8025fa2:	6019      	str	r1, [r3, #0]
 8025fa4:	6815      	ldr	r5, [r2, #0]
 8025fa6:	2100      	movs	r1, #0
 8025fa8:	0028      	movs	r0, r5
 8025faa:	6862      	ldr	r2, [r4, #4]
 8025fac:	f000 fb7f 	bl	80266ae <memchr>
 8025fb0:	2800      	cmp	r0, #0
 8025fb2:	d001      	beq.n	8025fb8 <_printf_i+0x1bc>
 8025fb4:	1b40      	subs	r0, r0, r5
 8025fb6:	6060      	str	r0, [r4, #4]
 8025fb8:	6863      	ldr	r3, [r4, #4]
 8025fba:	6123      	str	r3, [r4, #16]
 8025fbc:	2300      	movs	r3, #0
 8025fbe:	9a03      	ldr	r2, [sp, #12]
 8025fc0:	7013      	strb	r3, [r2, #0]
 8025fc2:	e7ac      	b.n	8025f1e <_printf_i+0x122>
 8025fc4:	002a      	movs	r2, r5
 8025fc6:	6923      	ldr	r3, [r4, #16]
 8025fc8:	9906      	ldr	r1, [sp, #24]
 8025fca:	9805      	ldr	r0, [sp, #20]
 8025fcc:	9d07      	ldr	r5, [sp, #28]
 8025fce:	47a8      	blx	r5
 8025fd0:	3001      	adds	r0, #1
 8025fd2:	d0ae      	beq.n	8025f32 <_printf_i+0x136>
 8025fd4:	6823      	ldr	r3, [r4, #0]
 8025fd6:	079b      	lsls	r3, r3, #30
 8025fd8:	d415      	bmi.n	8026006 <_printf_i+0x20a>
 8025fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025fdc:	68e0      	ldr	r0, [r4, #12]
 8025fde:	4298      	cmp	r0, r3
 8025fe0:	daa9      	bge.n	8025f36 <_printf_i+0x13a>
 8025fe2:	0018      	movs	r0, r3
 8025fe4:	e7a7      	b.n	8025f36 <_printf_i+0x13a>
 8025fe6:	0022      	movs	r2, r4
 8025fe8:	2301      	movs	r3, #1
 8025fea:	9906      	ldr	r1, [sp, #24]
 8025fec:	9805      	ldr	r0, [sp, #20]
 8025fee:	9e07      	ldr	r6, [sp, #28]
 8025ff0:	3219      	adds	r2, #25
 8025ff2:	47b0      	blx	r6
 8025ff4:	3001      	adds	r0, #1
 8025ff6:	d09c      	beq.n	8025f32 <_printf_i+0x136>
 8025ff8:	3501      	adds	r5, #1
 8025ffa:	68e3      	ldr	r3, [r4, #12]
 8025ffc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025ffe:	1a9b      	subs	r3, r3, r2
 8026000:	42ab      	cmp	r3, r5
 8026002:	dcf0      	bgt.n	8025fe6 <_printf_i+0x1ea>
 8026004:	e7e9      	b.n	8025fda <_printf_i+0x1de>
 8026006:	2500      	movs	r5, #0
 8026008:	e7f7      	b.n	8025ffa <_printf_i+0x1fe>
 802600a:	46c0      	nop			@ (mov r8, r8)
 802600c:	0802eaa8 	.word	0x0802eaa8
 8026010:	0802eab9 	.word	0x0802eab9

08026014 <std>:
 8026014:	2300      	movs	r3, #0
 8026016:	b510      	push	{r4, lr}
 8026018:	0004      	movs	r4, r0
 802601a:	6003      	str	r3, [r0, #0]
 802601c:	6043      	str	r3, [r0, #4]
 802601e:	6083      	str	r3, [r0, #8]
 8026020:	8181      	strh	r1, [r0, #12]
 8026022:	6643      	str	r3, [r0, #100]	@ 0x64
 8026024:	81c2      	strh	r2, [r0, #14]
 8026026:	6103      	str	r3, [r0, #16]
 8026028:	6143      	str	r3, [r0, #20]
 802602a:	6183      	str	r3, [r0, #24]
 802602c:	0019      	movs	r1, r3
 802602e:	2208      	movs	r2, #8
 8026030:	305c      	adds	r0, #92	@ 0x5c
 8026032:	f000 fa6b 	bl	802650c <memset>
 8026036:	4b0b      	ldr	r3, [pc, #44]	@ (8026064 <std+0x50>)
 8026038:	6224      	str	r4, [r4, #32]
 802603a:	6263      	str	r3, [r4, #36]	@ 0x24
 802603c:	4b0a      	ldr	r3, [pc, #40]	@ (8026068 <std+0x54>)
 802603e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026040:	4b0a      	ldr	r3, [pc, #40]	@ (802606c <std+0x58>)
 8026042:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026044:	4b0a      	ldr	r3, [pc, #40]	@ (8026070 <std+0x5c>)
 8026046:	6323      	str	r3, [r4, #48]	@ 0x30
 8026048:	4b0a      	ldr	r3, [pc, #40]	@ (8026074 <std+0x60>)
 802604a:	429c      	cmp	r4, r3
 802604c:	d005      	beq.n	802605a <std+0x46>
 802604e:	4b0a      	ldr	r3, [pc, #40]	@ (8026078 <std+0x64>)
 8026050:	429c      	cmp	r4, r3
 8026052:	d002      	beq.n	802605a <std+0x46>
 8026054:	4b09      	ldr	r3, [pc, #36]	@ (802607c <std+0x68>)
 8026056:	429c      	cmp	r4, r3
 8026058:	d103      	bne.n	8026062 <std+0x4e>
 802605a:	0020      	movs	r0, r4
 802605c:	3058      	adds	r0, #88	@ 0x58
 802605e:	f000 fb23 	bl	80266a8 <__retarget_lock_init_recursive>
 8026062:	bd10      	pop	{r4, pc}
 8026064:	080262c1 	.word	0x080262c1
 8026068:	080262e9 	.word	0x080262e9
 802606c:	08026321 	.word	0x08026321
 8026070:	0802634d 	.word	0x0802634d
 8026074:	200037d0 	.word	0x200037d0
 8026078:	20003838 	.word	0x20003838
 802607c:	200038a0 	.word	0x200038a0

08026080 <stdio_exit_handler>:
 8026080:	b510      	push	{r4, lr}
 8026082:	4a03      	ldr	r2, [pc, #12]	@ (8026090 <stdio_exit_handler+0x10>)
 8026084:	4903      	ldr	r1, [pc, #12]	@ (8026094 <stdio_exit_handler+0x14>)
 8026086:	4804      	ldr	r0, [pc, #16]	@ (8026098 <stdio_exit_handler+0x18>)
 8026088:	f000 f86c 	bl	8026164 <_fwalk_sglue>
 802608c:	bd10      	pop	{r4, pc}
 802608e:	46c0      	nop			@ (mov r8, r8)
 8026090:	20000274 	.word	0x20000274
 8026094:	08028ca5 	.word	0x08028ca5
 8026098:	200003f0 	.word	0x200003f0

0802609c <cleanup_stdio>:
 802609c:	6841      	ldr	r1, [r0, #4]
 802609e:	4b0b      	ldr	r3, [pc, #44]	@ (80260cc <cleanup_stdio+0x30>)
 80260a0:	b510      	push	{r4, lr}
 80260a2:	0004      	movs	r4, r0
 80260a4:	4299      	cmp	r1, r3
 80260a6:	d001      	beq.n	80260ac <cleanup_stdio+0x10>
 80260a8:	f002 fdfc 	bl	8028ca4 <_fflush_r>
 80260ac:	68a1      	ldr	r1, [r4, #8]
 80260ae:	4b08      	ldr	r3, [pc, #32]	@ (80260d0 <cleanup_stdio+0x34>)
 80260b0:	4299      	cmp	r1, r3
 80260b2:	d002      	beq.n	80260ba <cleanup_stdio+0x1e>
 80260b4:	0020      	movs	r0, r4
 80260b6:	f002 fdf5 	bl	8028ca4 <_fflush_r>
 80260ba:	68e1      	ldr	r1, [r4, #12]
 80260bc:	4b05      	ldr	r3, [pc, #20]	@ (80260d4 <cleanup_stdio+0x38>)
 80260be:	4299      	cmp	r1, r3
 80260c0:	d002      	beq.n	80260c8 <cleanup_stdio+0x2c>
 80260c2:	0020      	movs	r0, r4
 80260c4:	f002 fdee 	bl	8028ca4 <_fflush_r>
 80260c8:	bd10      	pop	{r4, pc}
 80260ca:	46c0      	nop			@ (mov r8, r8)
 80260cc:	200037d0 	.word	0x200037d0
 80260d0:	20003838 	.word	0x20003838
 80260d4:	200038a0 	.word	0x200038a0

080260d8 <global_stdio_init.part.0>:
 80260d8:	b510      	push	{r4, lr}
 80260da:	4b09      	ldr	r3, [pc, #36]	@ (8026100 <global_stdio_init.part.0+0x28>)
 80260dc:	4a09      	ldr	r2, [pc, #36]	@ (8026104 <global_stdio_init.part.0+0x2c>)
 80260de:	2104      	movs	r1, #4
 80260e0:	601a      	str	r2, [r3, #0]
 80260e2:	4809      	ldr	r0, [pc, #36]	@ (8026108 <global_stdio_init.part.0+0x30>)
 80260e4:	2200      	movs	r2, #0
 80260e6:	f7ff ff95 	bl	8026014 <std>
 80260ea:	2201      	movs	r2, #1
 80260ec:	2109      	movs	r1, #9
 80260ee:	4807      	ldr	r0, [pc, #28]	@ (802610c <global_stdio_init.part.0+0x34>)
 80260f0:	f7ff ff90 	bl	8026014 <std>
 80260f4:	2202      	movs	r2, #2
 80260f6:	2112      	movs	r1, #18
 80260f8:	4805      	ldr	r0, [pc, #20]	@ (8026110 <global_stdio_init.part.0+0x38>)
 80260fa:	f7ff ff8b 	bl	8026014 <std>
 80260fe:	bd10      	pop	{r4, pc}
 8026100:	20003908 	.word	0x20003908
 8026104:	08026081 	.word	0x08026081
 8026108:	200037d0 	.word	0x200037d0
 802610c:	20003838 	.word	0x20003838
 8026110:	200038a0 	.word	0x200038a0

08026114 <__sfp_lock_acquire>:
 8026114:	b510      	push	{r4, lr}
 8026116:	4802      	ldr	r0, [pc, #8]	@ (8026120 <__sfp_lock_acquire+0xc>)
 8026118:	f000 fac7 	bl	80266aa <__retarget_lock_acquire_recursive>
 802611c:	bd10      	pop	{r4, pc}
 802611e:	46c0      	nop			@ (mov r8, r8)
 8026120:	20003911 	.word	0x20003911

08026124 <__sfp_lock_release>:
 8026124:	b510      	push	{r4, lr}
 8026126:	4802      	ldr	r0, [pc, #8]	@ (8026130 <__sfp_lock_release+0xc>)
 8026128:	f000 fac0 	bl	80266ac <__retarget_lock_release_recursive>
 802612c:	bd10      	pop	{r4, pc}
 802612e:	46c0      	nop			@ (mov r8, r8)
 8026130:	20003911 	.word	0x20003911

08026134 <__sinit>:
 8026134:	b510      	push	{r4, lr}
 8026136:	0004      	movs	r4, r0
 8026138:	f7ff ffec 	bl	8026114 <__sfp_lock_acquire>
 802613c:	6a23      	ldr	r3, [r4, #32]
 802613e:	2b00      	cmp	r3, #0
 8026140:	d002      	beq.n	8026148 <__sinit+0x14>
 8026142:	f7ff ffef 	bl	8026124 <__sfp_lock_release>
 8026146:	bd10      	pop	{r4, pc}
 8026148:	4b04      	ldr	r3, [pc, #16]	@ (802615c <__sinit+0x28>)
 802614a:	6223      	str	r3, [r4, #32]
 802614c:	4b04      	ldr	r3, [pc, #16]	@ (8026160 <__sinit+0x2c>)
 802614e:	681b      	ldr	r3, [r3, #0]
 8026150:	2b00      	cmp	r3, #0
 8026152:	d1f6      	bne.n	8026142 <__sinit+0xe>
 8026154:	f7ff ffc0 	bl	80260d8 <global_stdio_init.part.0>
 8026158:	e7f3      	b.n	8026142 <__sinit+0xe>
 802615a:	46c0      	nop			@ (mov r8, r8)
 802615c:	0802609d 	.word	0x0802609d
 8026160:	20003908 	.word	0x20003908

08026164 <_fwalk_sglue>:
 8026164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026166:	0014      	movs	r4, r2
 8026168:	2600      	movs	r6, #0
 802616a:	9000      	str	r0, [sp, #0]
 802616c:	9101      	str	r1, [sp, #4]
 802616e:	68a5      	ldr	r5, [r4, #8]
 8026170:	6867      	ldr	r7, [r4, #4]
 8026172:	3f01      	subs	r7, #1
 8026174:	d504      	bpl.n	8026180 <_fwalk_sglue+0x1c>
 8026176:	6824      	ldr	r4, [r4, #0]
 8026178:	2c00      	cmp	r4, #0
 802617a:	d1f8      	bne.n	802616e <_fwalk_sglue+0xa>
 802617c:	0030      	movs	r0, r6
 802617e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026180:	89ab      	ldrh	r3, [r5, #12]
 8026182:	2b01      	cmp	r3, #1
 8026184:	d908      	bls.n	8026198 <_fwalk_sglue+0x34>
 8026186:	220e      	movs	r2, #14
 8026188:	5eab      	ldrsh	r3, [r5, r2]
 802618a:	3301      	adds	r3, #1
 802618c:	d004      	beq.n	8026198 <_fwalk_sglue+0x34>
 802618e:	0029      	movs	r1, r5
 8026190:	9800      	ldr	r0, [sp, #0]
 8026192:	9b01      	ldr	r3, [sp, #4]
 8026194:	4798      	blx	r3
 8026196:	4306      	orrs	r6, r0
 8026198:	3568      	adds	r5, #104	@ 0x68
 802619a:	e7ea      	b.n	8026172 <_fwalk_sglue+0xe>

0802619c <iprintf>:
 802619c:	b40f      	push	{r0, r1, r2, r3}
 802619e:	b507      	push	{r0, r1, r2, lr}
 80261a0:	4905      	ldr	r1, [pc, #20]	@ (80261b8 <iprintf+0x1c>)
 80261a2:	ab04      	add	r3, sp, #16
 80261a4:	6808      	ldr	r0, [r1, #0]
 80261a6:	cb04      	ldmia	r3!, {r2}
 80261a8:	6881      	ldr	r1, [r0, #8]
 80261aa:	9301      	str	r3, [sp, #4]
 80261ac:	f002 fbd8 	bl	8028960 <_vfiprintf_r>
 80261b0:	b003      	add	sp, #12
 80261b2:	bc08      	pop	{r3}
 80261b4:	b004      	add	sp, #16
 80261b6:	4718      	bx	r3
 80261b8:	200003ec 	.word	0x200003ec

080261bc <_puts_r>:
 80261bc:	6a03      	ldr	r3, [r0, #32]
 80261be:	b570      	push	{r4, r5, r6, lr}
 80261c0:	0005      	movs	r5, r0
 80261c2:	000e      	movs	r6, r1
 80261c4:	6884      	ldr	r4, [r0, #8]
 80261c6:	2b00      	cmp	r3, #0
 80261c8:	d101      	bne.n	80261ce <_puts_r+0x12>
 80261ca:	f7ff ffb3 	bl	8026134 <__sinit>
 80261ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80261d0:	07db      	lsls	r3, r3, #31
 80261d2:	d405      	bmi.n	80261e0 <_puts_r+0x24>
 80261d4:	89a3      	ldrh	r3, [r4, #12]
 80261d6:	059b      	lsls	r3, r3, #22
 80261d8:	d402      	bmi.n	80261e0 <_puts_r+0x24>
 80261da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80261dc:	f000 fa65 	bl	80266aa <__retarget_lock_acquire_recursive>
 80261e0:	89a3      	ldrh	r3, [r4, #12]
 80261e2:	071b      	lsls	r3, r3, #28
 80261e4:	d502      	bpl.n	80261ec <_puts_r+0x30>
 80261e6:	6923      	ldr	r3, [r4, #16]
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d11f      	bne.n	802622c <_puts_r+0x70>
 80261ec:	0021      	movs	r1, r4
 80261ee:	0028      	movs	r0, r5
 80261f0:	f000 f92e 	bl	8026450 <__swsetup_r>
 80261f4:	2800      	cmp	r0, #0
 80261f6:	d019      	beq.n	802622c <_puts_r+0x70>
 80261f8:	2501      	movs	r5, #1
 80261fa:	426d      	negs	r5, r5
 80261fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80261fe:	07db      	lsls	r3, r3, #31
 8026200:	d405      	bmi.n	802620e <_puts_r+0x52>
 8026202:	89a3      	ldrh	r3, [r4, #12]
 8026204:	059b      	lsls	r3, r3, #22
 8026206:	d402      	bmi.n	802620e <_puts_r+0x52>
 8026208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802620a:	f000 fa4f 	bl	80266ac <__retarget_lock_release_recursive>
 802620e:	0028      	movs	r0, r5
 8026210:	bd70      	pop	{r4, r5, r6, pc}
 8026212:	3601      	adds	r6, #1
 8026214:	60a3      	str	r3, [r4, #8]
 8026216:	2b00      	cmp	r3, #0
 8026218:	da04      	bge.n	8026224 <_puts_r+0x68>
 802621a:	69a2      	ldr	r2, [r4, #24]
 802621c:	429a      	cmp	r2, r3
 802621e:	dc16      	bgt.n	802624e <_puts_r+0x92>
 8026220:	290a      	cmp	r1, #10
 8026222:	d014      	beq.n	802624e <_puts_r+0x92>
 8026224:	6823      	ldr	r3, [r4, #0]
 8026226:	1c5a      	adds	r2, r3, #1
 8026228:	6022      	str	r2, [r4, #0]
 802622a:	7019      	strb	r1, [r3, #0]
 802622c:	68a3      	ldr	r3, [r4, #8]
 802622e:	7831      	ldrb	r1, [r6, #0]
 8026230:	3b01      	subs	r3, #1
 8026232:	2900      	cmp	r1, #0
 8026234:	d1ed      	bne.n	8026212 <_puts_r+0x56>
 8026236:	60a3      	str	r3, [r4, #8]
 8026238:	2b00      	cmp	r3, #0
 802623a:	da0f      	bge.n	802625c <_puts_r+0xa0>
 802623c:	0022      	movs	r2, r4
 802623e:	0028      	movs	r0, r5
 8026240:	310a      	adds	r1, #10
 8026242:	f000 f8c3 	bl	80263cc <__swbuf_r>
 8026246:	3001      	adds	r0, #1
 8026248:	d0d6      	beq.n	80261f8 <_puts_r+0x3c>
 802624a:	250a      	movs	r5, #10
 802624c:	e7d6      	b.n	80261fc <_puts_r+0x40>
 802624e:	0022      	movs	r2, r4
 8026250:	0028      	movs	r0, r5
 8026252:	f000 f8bb 	bl	80263cc <__swbuf_r>
 8026256:	3001      	adds	r0, #1
 8026258:	d1e8      	bne.n	802622c <_puts_r+0x70>
 802625a:	e7cd      	b.n	80261f8 <_puts_r+0x3c>
 802625c:	6823      	ldr	r3, [r4, #0]
 802625e:	1c5a      	adds	r2, r3, #1
 8026260:	6022      	str	r2, [r4, #0]
 8026262:	220a      	movs	r2, #10
 8026264:	701a      	strb	r2, [r3, #0]
 8026266:	e7f0      	b.n	802624a <_puts_r+0x8e>

08026268 <puts>:
 8026268:	b510      	push	{r4, lr}
 802626a:	4b03      	ldr	r3, [pc, #12]	@ (8026278 <puts+0x10>)
 802626c:	0001      	movs	r1, r0
 802626e:	6818      	ldr	r0, [r3, #0]
 8026270:	f7ff ffa4 	bl	80261bc <_puts_r>
 8026274:	bd10      	pop	{r4, pc}
 8026276:	46c0      	nop			@ (mov r8, r8)
 8026278:	200003ec 	.word	0x200003ec

0802627c <siprintf>:
 802627c:	b40e      	push	{r1, r2, r3}
 802627e:	b510      	push	{r4, lr}
 8026280:	2400      	movs	r4, #0
 8026282:	490c      	ldr	r1, [pc, #48]	@ (80262b4 <siprintf+0x38>)
 8026284:	b09d      	sub	sp, #116	@ 0x74
 8026286:	ab1f      	add	r3, sp, #124	@ 0x7c
 8026288:	9002      	str	r0, [sp, #8]
 802628a:	9006      	str	r0, [sp, #24]
 802628c:	9107      	str	r1, [sp, #28]
 802628e:	9104      	str	r1, [sp, #16]
 8026290:	4809      	ldr	r0, [pc, #36]	@ (80262b8 <siprintf+0x3c>)
 8026292:	490a      	ldr	r1, [pc, #40]	@ (80262bc <siprintf+0x40>)
 8026294:	cb04      	ldmia	r3!, {r2}
 8026296:	9105      	str	r1, [sp, #20]
 8026298:	6800      	ldr	r0, [r0, #0]
 802629a:	a902      	add	r1, sp, #8
 802629c:	9301      	str	r3, [sp, #4]
 802629e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80262a0:	f002 fa38 	bl	8028714 <_svfiprintf_r>
 80262a4:	9b02      	ldr	r3, [sp, #8]
 80262a6:	701c      	strb	r4, [r3, #0]
 80262a8:	b01d      	add	sp, #116	@ 0x74
 80262aa:	bc10      	pop	{r4}
 80262ac:	bc08      	pop	{r3}
 80262ae:	b003      	add	sp, #12
 80262b0:	4718      	bx	r3
 80262b2:	46c0      	nop			@ (mov r8, r8)
 80262b4:	7fffffff 	.word	0x7fffffff
 80262b8:	200003ec 	.word	0x200003ec
 80262bc:	ffff0208 	.word	0xffff0208

080262c0 <__sread>:
 80262c0:	b570      	push	{r4, r5, r6, lr}
 80262c2:	000c      	movs	r4, r1
 80262c4:	250e      	movs	r5, #14
 80262c6:	5f49      	ldrsh	r1, [r1, r5]
 80262c8:	f000 f99c 	bl	8026604 <_read_r>
 80262cc:	2800      	cmp	r0, #0
 80262ce:	db03      	blt.n	80262d8 <__sread+0x18>
 80262d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80262d2:	181b      	adds	r3, r3, r0
 80262d4:	6563      	str	r3, [r4, #84]	@ 0x54
 80262d6:	bd70      	pop	{r4, r5, r6, pc}
 80262d8:	89a3      	ldrh	r3, [r4, #12]
 80262da:	4a02      	ldr	r2, [pc, #8]	@ (80262e4 <__sread+0x24>)
 80262dc:	4013      	ands	r3, r2
 80262de:	81a3      	strh	r3, [r4, #12]
 80262e0:	e7f9      	b.n	80262d6 <__sread+0x16>
 80262e2:	46c0      	nop			@ (mov r8, r8)
 80262e4:	ffffefff 	.word	0xffffefff

080262e8 <__swrite>:
 80262e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262ea:	001f      	movs	r7, r3
 80262ec:	898b      	ldrh	r3, [r1, #12]
 80262ee:	0005      	movs	r5, r0
 80262f0:	000c      	movs	r4, r1
 80262f2:	0016      	movs	r6, r2
 80262f4:	05db      	lsls	r3, r3, #23
 80262f6:	d505      	bpl.n	8026304 <__swrite+0x1c>
 80262f8:	230e      	movs	r3, #14
 80262fa:	5ec9      	ldrsh	r1, [r1, r3]
 80262fc:	2200      	movs	r2, #0
 80262fe:	2302      	movs	r3, #2
 8026300:	f000 f96c 	bl	80265dc <_lseek_r>
 8026304:	89a3      	ldrh	r3, [r4, #12]
 8026306:	4a05      	ldr	r2, [pc, #20]	@ (802631c <__swrite+0x34>)
 8026308:	0028      	movs	r0, r5
 802630a:	4013      	ands	r3, r2
 802630c:	81a3      	strh	r3, [r4, #12]
 802630e:	0032      	movs	r2, r6
 8026310:	230e      	movs	r3, #14
 8026312:	5ee1      	ldrsh	r1, [r4, r3]
 8026314:	003b      	movs	r3, r7
 8026316:	f000 f989 	bl	802662c <_write_r>
 802631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802631c:	ffffefff 	.word	0xffffefff

08026320 <__sseek>:
 8026320:	b570      	push	{r4, r5, r6, lr}
 8026322:	000c      	movs	r4, r1
 8026324:	250e      	movs	r5, #14
 8026326:	5f49      	ldrsh	r1, [r1, r5]
 8026328:	f000 f958 	bl	80265dc <_lseek_r>
 802632c:	89a3      	ldrh	r3, [r4, #12]
 802632e:	1c42      	adds	r2, r0, #1
 8026330:	d103      	bne.n	802633a <__sseek+0x1a>
 8026332:	4a05      	ldr	r2, [pc, #20]	@ (8026348 <__sseek+0x28>)
 8026334:	4013      	ands	r3, r2
 8026336:	81a3      	strh	r3, [r4, #12]
 8026338:	bd70      	pop	{r4, r5, r6, pc}
 802633a:	2280      	movs	r2, #128	@ 0x80
 802633c:	0152      	lsls	r2, r2, #5
 802633e:	4313      	orrs	r3, r2
 8026340:	81a3      	strh	r3, [r4, #12]
 8026342:	6560      	str	r0, [r4, #84]	@ 0x54
 8026344:	e7f8      	b.n	8026338 <__sseek+0x18>
 8026346:	46c0      	nop			@ (mov r8, r8)
 8026348:	ffffefff 	.word	0xffffefff

0802634c <__sclose>:
 802634c:	b510      	push	{r4, lr}
 802634e:	230e      	movs	r3, #14
 8026350:	5ec9      	ldrsh	r1, [r1, r3]
 8026352:	f000 f931 	bl	80265b8 <_close_r>
 8026356:	bd10      	pop	{r4, pc}

08026358 <_vsniprintf_r>:
 8026358:	b530      	push	{r4, r5, lr}
 802635a:	0005      	movs	r5, r0
 802635c:	0014      	movs	r4, r2
 802635e:	0008      	movs	r0, r1
 8026360:	001a      	movs	r2, r3
 8026362:	b09b      	sub	sp, #108	@ 0x6c
 8026364:	2c00      	cmp	r4, #0
 8026366:	da05      	bge.n	8026374 <_vsniprintf_r+0x1c>
 8026368:	238b      	movs	r3, #139	@ 0x8b
 802636a:	2001      	movs	r0, #1
 802636c:	602b      	str	r3, [r5, #0]
 802636e:	4240      	negs	r0, r0
 8026370:	b01b      	add	sp, #108	@ 0x6c
 8026372:	bd30      	pop	{r4, r5, pc}
 8026374:	2382      	movs	r3, #130	@ 0x82
 8026376:	4669      	mov	r1, sp
 8026378:	009b      	lsls	r3, r3, #2
 802637a:	818b      	strh	r3, [r1, #12]
 802637c:	2100      	movs	r1, #0
 802637e:	9000      	str	r0, [sp, #0]
 8026380:	9119      	str	r1, [sp, #100]	@ 0x64
 8026382:	9004      	str	r0, [sp, #16]
 8026384:	428c      	cmp	r4, r1
 8026386:	d000      	beq.n	802638a <_vsniprintf_r+0x32>
 8026388:	1e61      	subs	r1, r4, #1
 802638a:	2301      	movs	r3, #1
 802638c:	9102      	str	r1, [sp, #8]
 802638e:	9105      	str	r1, [sp, #20]
 8026390:	4669      	mov	r1, sp
 8026392:	425b      	negs	r3, r3
 8026394:	81cb      	strh	r3, [r1, #14]
 8026396:	0028      	movs	r0, r5
 8026398:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802639a:	f002 f9bb 	bl	8028714 <_svfiprintf_r>
 802639e:	1c43      	adds	r3, r0, #1
 80263a0:	da01      	bge.n	80263a6 <_vsniprintf_r+0x4e>
 80263a2:	238b      	movs	r3, #139	@ 0x8b
 80263a4:	602b      	str	r3, [r5, #0]
 80263a6:	2c00      	cmp	r4, #0
 80263a8:	d0e2      	beq.n	8026370 <_vsniprintf_r+0x18>
 80263aa:	2200      	movs	r2, #0
 80263ac:	9b00      	ldr	r3, [sp, #0]
 80263ae:	701a      	strb	r2, [r3, #0]
 80263b0:	e7de      	b.n	8026370 <_vsniprintf_r+0x18>
	...

080263b4 <vsniprintf>:
 80263b4:	b513      	push	{r0, r1, r4, lr}
 80263b6:	4c04      	ldr	r4, [pc, #16]	@ (80263c8 <vsniprintf+0x14>)
 80263b8:	9300      	str	r3, [sp, #0]
 80263ba:	0013      	movs	r3, r2
 80263bc:	000a      	movs	r2, r1
 80263be:	0001      	movs	r1, r0
 80263c0:	6820      	ldr	r0, [r4, #0]
 80263c2:	f7ff ffc9 	bl	8026358 <_vsniprintf_r>
 80263c6:	bd16      	pop	{r1, r2, r4, pc}
 80263c8:	200003ec 	.word	0x200003ec

080263cc <__swbuf_r>:
 80263cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263ce:	0006      	movs	r6, r0
 80263d0:	000d      	movs	r5, r1
 80263d2:	0014      	movs	r4, r2
 80263d4:	2800      	cmp	r0, #0
 80263d6:	d004      	beq.n	80263e2 <__swbuf_r+0x16>
 80263d8:	6a03      	ldr	r3, [r0, #32]
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d101      	bne.n	80263e2 <__swbuf_r+0x16>
 80263de:	f7ff fea9 	bl	8026134 <__sinit>
 80263e2:	69a3      	ldr	r3, [r4, #24]
 80263e4:	60a3      	str	r3, [r4, #8]
 80263e6:	89a3      	ldrh	r3, [r4, #12]
 80263e8:	071b      	lsls	r3, r3, #28
 80263ea:	d502      	bpl.n	80263f2 <__swbuf_r+0x26>
 80263ec:	6923      	ldr	r3, [r4, #16]
 80263ee:	2b00      	cmp	r3, #0
 80263f0:	d109      	bne.n	8026406 <__swbuf_r+0x3a>
 80263f2:	0021      	movs	r1, r4
 80263f4:	0030      	movs	r0, r6
 80263f6:	f000 f82b 	bl	8026450 <__swsetup_r>
 80263fa:	2800      	cmp	r0, #0
 80263fc:	d003      	beq.n	8026406 <__swbuf_r+0x3a>
 80263fe:	2501      	movs	r5, #1
 8026400:	426d      	negs	r5, r5
 8026402:	0028      	movs	r0, r5
 8026404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026406:	6923      	ldr	r3, [r4, #16]
 8026408:	6820      	ldr	r0, [r4, #0]
 802640a:	b2ef      	uxtb	r7, r5
 802640c:	1ac0      	subs	r0, r0, r3
 802640e:	6963      	ldr	r3, [r4, #20]
 8026410:	b2ed      	uxtb	r5, r5
 8026412:	4283      	cmp	r3, r0
 8026414:	dc05      	bgt.n	8026422 <__swbuf_r+0x56>
 8026416:	0021      	movs	r1, r4
 8026418:	0030      	movs	r0, r6
 802641a:	f002 fc43 	bl	8028ca4 <_fflush_r>
 802641e:	2800      	cmp	r0, #0
 8026420:	d1ed      	bne.n	80263fe <__swbuf_r+0x32>
 8026422:	68a3      	ldr	r3, [r4, #8]
 8026424:	3001      	adds	r0, #1
 8026426:	3b01      	subs	r3, #1
 8026428:	60a3      	str	r3, [r4, #8]
 802642a:	6823      	ldr	r3, [r4, #0]
 802642c:	1c5a      	adds	r2, r3, #1
 802642e:	6022      	str	r2, [r4, #0]
 8026430:	701f      	strb	r7, [r3, #0]
 8026432:	6963      	ldr	r3, [r4, #20]
 8026434:	4283      	cmp	r3, r0
 8026436:	d004      	beq.n	8026442 <__swbuf_r+0x76>
 8026438:	89a3      	ldrh	r3, [r4, #12]
 802643a:	07db      	lsls	r3, r3, #31
 802643c:	d5e1      	bpl.n	8026402 <__swbuf_r+0x36>
 802643e:	2d0a      	cmp	r5, #10
 8026440:	d1df      	bne.n	8026402 <__swbuf_r+0x36>
 8026442:	0021      	movs	r1, r4
 8026444:	0030      	movs	r0, r6
 8026446:	f002 fc2d 	bl	8028ca4 <_fflush_r>
 802644a:	2800      	cmp	r0, #0
 802644c:	d0d9      	beq.n	8026402 <__swbuf_r+0x36>
 802644e:	e7d6      	b.n	80263fe <__swbuf_r+0x32>

08026450 <__swsetup_r>:
 8026450:	4b2d      	ldr	r3, [pc, #180]	@ (8026508 <__swsetup_r+0xb8>)
 8026452:	b570      	push	{r4, r5, r6, lr}
 8026454:	0005      	movs	r5, r0
 8026456:	6818      	ldr	r0, [r3, #0]
 8026458:	000c      	movs	r4, r1
 802645a:	2800      	cmp	r0, #0
 802645c:	d004      	beq.n	8026468 <__swsetup_r+0x18>
 802645e:	6a03      	ldr	r3, [r0, #32]
 8026460:	2b00      	cmp	r3, #0
 8026462:	d101      	bne.n	8026468 <__swsetup_r+0x18>
 8026464:	f7ff fe66 	bl	8026134 <__sinit>
 8026468:	220c      	movs	r2, #12
 802646a:	5ea3      	ldrsh	r3, [r4, r2]
 802646c:	071a      	lsls	r2, r3, #28
 802646e:	d423      	bmi.n	80264b8 <__swsetup_r+0x68>
 8026470:	06da      	lsls	r2, r3, #27
 8026472:	d407      	bmi.n	8026484 <__swsetup_r+0x34>
 8026474:	2209      	movs	r2, #9
 8026476:	602a      	str	r2, [r5, #0]
 8026478:	2240      	movs	r2, #64	@ 0x40
 802647a:	2001      	movs	r0, #1
 802647c:	4313      	orrs	r3, r2
 802647e:	81a3      	strh	r3, [r4, #12]
 8026480:	4240      	negs	r0, r0
 8026482:	e03a      	b.n	80264fa <__swsetup_r+0xaa>
 8026484:	075b      	lsls	r3, r3, #29
 8026486:	d513      	bpl.n	80264b0 <__swsetup_r+0x60>
 8026488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802648a:	2900      	cmp	r1, #0
 802648c:	d008      	beq.n	80264a0 <__swsetup_r+0x50>
 802648e:	0023      	movs	r3, r4
 8026490:	3344      	adds	r3, #68	@ 0x44
 8026492:	4299      	cmp	r1, r3
 8026494:	d002      	beq.n	802649c <__swsetup_r+0x4c>
 8026496:	0028      	movs	r0, r5
 8026498:	f000 ff9a 	bl	80273d0 <_free_r>
 802649c:	2300      	movs	r3, #0
 802649e:	6363      	str	r3, [r4, #52]	@ 0x34
 80264a0:	2224      	movs	r2, #36	@ 0x24
 80264a2:	89a3      	ldrh	r3, [r4, #12]
 80264a4:	4393      	bics	r3, r2
 80264a6:	81a3      	strh	r3, [r4, #12]
 80264a8:	2300      	movs	r3, #0
 80264aa:	6063      	str	r3, [r4, #4]
 80264ac:	6923      	ldr	r3, [r4, #16]
 80264ae:	6023      	str	r3, [r4, #0]
 80264b0:	2308      	movs	r3, #8
 80264b2:	89a2      	ldrh	r2, [r4, #12]
 80264b4:	4313      	orrs	r3, r2
 80264b6:	81a3      	strh	r3, [r4, #12]
 80264b8:	6923      	ldr	r3, [r4, #16]
 80264ba:	2b00      	cmp	r3, #0
 80264bc:	d10b      	bne.n	80264d6 <__swsetup_r+0x86>
 80264be:	21a0      	movs	r1, #160	@ 0xa0
 80264c0:	2280      	movs	r2, #128	@ 0x80
 80264c2:	89a3      	ldrh	r3, [r4, #12]
 80264c4:	0089      	lsls	r1, r1, #2
 80264c6:	0092      	lsls	r2, r2, #2
 80264c8:	400b      	ands	r3, r1
 80264ca:	4293      	cmp	r3, r2
 80264cc:	d003      	beq.n	80264d6 <__swsetup_r+0x86>
 80264ce:	0021      	movs	r1, r4
 80264d0:	0028      	movs	r0, r5
 80264d2:	f002 fc3d 	bl	8028d50 <__smakebuf_r>
 80264d6:	220c      	movs	r2, #12
 80264d8:	5ea3      	ldrsh	r3, [r4, r2]
 80264da:	2101      	movs	r1, #1
 80264dc:	001a      	movs	r2, r3
 80264de:	400a      	ands	r2, r1
 80264e0:	420b      	tst	r3, r1
 80264e2:	d00b      	beq.n	80264fc <__swsetup_r+0xac>
 80264e4:	2200      	movs	r2, #0
 80264e6:	60a2      	str	r2, [r4, #8]
 80264e8:	6962      	ldr	r2, [r4, #20]
 80264ea:	4252      	negs	r2, r2
 80264ec:	61a2      	str	r2, [r4, #24]
 80264ee:	2000      	movs	r0, #0
 80264f0:	6922      	ldr	r2, [r4, #16]
 80264f2:	4282      	cmp	r2, r0
 80264f4:	d101      	bne.n	80264fa <__swsetup_r+0xaa>
 80264f6:	061a      	lsls	r2, r3, #24
 80264f8:	d4be      	bmi.n	8026478 <__swsetup_r+0x28>
 80264fa:	bd70      	pop	{r4, r5, r6, pc}
 80264fc:	0799      	lsls	r1, r3, #30
 80264fe:	d400      	bmi.n	8026502 <__swsetup_r+0xb2>
 8026500:	6962      	ldr	r2, [r4, #20]
 8026502:	60a2      	str	r2, [r4, #8]
 8026504:	e7f3      	b.n	80264ee <__swsetup_r+0x9e>
 8026506:	46c0      	nop			@ (mov r8, r8)
 8026508:	200003ec 	.word	0x200003ec

0802650c <memset>:
 802650c:	0003      	movs	r3, r0
 802650e:	1882      	adds	r2, r0, r2
 8026510:	4293      	cmp	r3, r2
 8026512:	d100      	bne.n	8026516 <memset+0xa>
 8026514:	4770      	bx	lr
 8026516:	7019      	strb	r1, [r3, #0]
 8026518:	3301      	adds	r3, #1
 802651a:	e7f9      	b.n	8026510 <memset+0x4>

0802651c <strchr>:
 802651c:	b2c9      	uxtb	r1, r1
 802651e:	7803      	ldrb	r3, [r0, #0]
 8026520:	2b00      	cmp	r3, #0
 8026522:	d004      	beq.n	802652e <strchr+0x12>
 8026524:	428b      	cmp	r3, r1
 8026526:	d100      	bne.n	802652a <strchr+0xe>
 8026528:	4770      	bx	lr
 802652a:	3001      	adds	r0, #1
 802652c:	e7f7      	b.n	802651e <strchr+0x2>
 802652e:	424b      	negs	r3, r1
 8026530:	4159      	adcs	r1, r3
 8026532:	4249      	negs	r1, r1
 8026534:	4008      	ands	r0, r1
 8026536:	e7f7      	b.n	8026528 <strchr+0xc>

08026538 <strncmp>:
 8026538:	b530      	push	{r4, r5, lr}
 802653a:	0005      	movs	r5, r0
 802653c:	1e10      	subs	r0, r2, #0
 802653e:	d00b      	beq.n	8026558 <strncmp+0x20>
 8026540:	2400      	movs	r4, #0
 8026542:	3a01      	subs	r2, #1
 8026544:	5d2b      	ldrb	r3, [r5, r4]
 8026546:	5d08      	ldrb	r0, [r1, r4]
 8026548:	4283      	cmp	r3, r0
 802654a:	d104      	bne.n	8026556 <strncmp+0x1e>
 802654c:	4294      	cmp	r4, r2
 802654e:	d002      	beq.n	8026556 <strncmp+0x1e>
 8026550:	3401      	adds	r4, #1
 8026552:	2b00      	cmp	r3, #0
 8026554:	d1f6      	bne.n	8026544 <strncmp+0xc>
 8026556:	1a18      	subs	r0, r3, r0
 8026558:	bd30      	pop	{r4, r5, pc}

0802655a <strncpy>:
 802655a:	0003      	movs	r3, r0
 802655c:	b530      	push	{r4, r5, lr}
 802655e:	001d      	movs	r5, r3
 8026560:	2a00      	cmp	r2, #0
 8026562:	d006      	beq.n	8026572 <strncpy+0x18>
 8026564:	780c      	ldrb	r4, [r1, #0]
 8026566:	3a01      	subs	r2, #1
 8026568:	3301      	adds	r3, #1
 802656a:	702c      	strb	r4, [r5, #0]
 802656c:	3101      	adds	r1, #1
 802656e:	2c00      	cmp	r4, #0
 8026570:	d1f5      	bne.n	802655e <strncpy+0x4>
 8026572:	2100      	movs	r1, #0
 8026574:	189a      	adds	r2, r3, r2
 8026576:	4293      	cmp	r3, r2
 8026578:	d100      	bne.n	802657c <strncpy+0x22>
 802657a:	bd30      	pop	{r4, r5, pc}
 802657c:	7019      	strb	r1, [r3, #0]
 802657e:	3301      	adds	r3, #1
 8026580:	e7f9      	b.n	8026576 <strncpy+0x1c>

08026582 <strstr>:
 8026582:	780a      	ldrb	r2, [r1, #0]
 8026584:	b530      	push	{r4, r5, lr}
 8026586:	2a00      	cmp	r2, #0
 8026588:	d10c      	bne.n	80265a4 <strstr+0x22>
 802658a:	bd30      	pop	{r4, r5, pc}
 802658c:	429a      	cmp	r2, r3
 802658e:	d108      	bne.n	80265a2 <strstr+0x20>
 8026590:	2301      	movs	r3, #1
 8026592:	5ccc      	ldrb	r4, [r1, r3]
 8026594:	2c00      	cmp	r4, #0
 8026596:	d0f8      	beq.n	802658a <strstr+0x8>
 8026598:	5cc5      	ldrb	r5, [r0, r3]
 802659a:	42a5      	cmp	r5, r4
 802659c:	d101      	bne.n	80265a2 <strstr+0x20>
 802659e:	3301      	adds	r3, #1
 80265a0:	e7f7      	b.n	8026592 <strstr+0x10>
 80265a2:	3001      	adds	r0, #1
 80265a4:	7803      	ldrb	r3, [r0, #0]
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d1f0      	bne.n	802658c <strstr+0xa>
 80265aa:	0018      	movs	r0, r3
 80265ac:	e7ed      	b.n	802658a <strstr+0x8>
	...

080265b0 <_localeconv_r>:
 80265b0:	4800      	ldr	r0, [pc, #0]	@ (80265b4 <_localeconv_r+0x4>)
 80265b2:	4770      	bx	lr
 80265b4:	20000370 	.word	0x20000370

080265b8 <_close_r>:
 80265b8:	2300      	movs	r3, #0
 80265ba:	b570      	push	{r4, r5, r6, lr}
 80265bc:	4d06      	ldr	r5, [pc, #24]	@ (80265d8 <_close_r+0x20>)
 80265be:	0004      	movs	r4, r0
 80265c0:	0008      	movs	r0, r1
 80265c2:	602b      	str	r3, [r5, #0]
 80265c4:	f7ec ffd2 	bl	801356c <_close>
 80265c8:	1c43      	adds	r3, r0, #1
 80265ca:	d103      	bne.n	80265d4 <_close_r+0x1c>
 80265cc:	682b      	ldr	r3, [r5, #0]
 80265ce:	2b00      	cmp	r3, #0
 80265d0:	d000      	beq.n	80265d4 <_close_r+0x1c>
 80265d2:	6023      	str	r3, [r4, #0]
 80265d4:	bd70      	pop	{r4, r5, r6, pc}
 80265d6:	46c0      	nop			@ (mov r8, r8)
 80265d8:	2000390c 	.word	0x2000390c

080265dc <_lseek_r>:
 80265dc:	b570      	push	{r4, r5, r6, lr}
 80265de:	0004      	movs	r4, r0
 80265e0:	0008      	movs	r0, r1
 80265e2:	0011      	movs	r1, r2
 80265e4:	001a      	movs	r2, r3
 80265e6:	2300      	movs	r3, #0
 80265e8:	4d05      	ldr	r5, [pc, #20]	@ (8026600 <_lseek_r+0x24>)
 80265ea:	602b      	str	r3, [r5, #0]
 80265ec:	f7ec ffdf 	bl	80135ae <_lseek>
 80265f0:	1c43      	adds	r3, r0, #1
 80265f2:	d103      	bne.n	80265fc <_lseek_r+0x20>
 80265f4:	682b      	ldr	r3, [r5, #0]
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d000      	beq.n	80265fc <_lseek_r+0x20>
 80265fa:	6023      	str	r3, [r4, #0]
 80265fc:	bd70      	pop	{r4, r5, r6, pc}
 80265fe:	46c0      	nop			@ (mov r8, r8)
 8026600:	2000390c 	.word	0x2000390c

08026604 <_read_r>:
 8026604:	b570      	push	{r4, r5, r6, lr}
 8026606:	0004      	movs	r4, r0
 8026608:	0008      	movs	r0, r1
 802660a:	0011      	movs	r1, r2
 802660c:	001a      	movs	r2, r3
 802660e:	2300      	movs	r3, #0
 8026610:	4d05      	ldr	r5, [pc, #20]	@ (8026628 <_read_r+0x24>)
 8026612:	602b      	str	r3, [r5, #0]
 8026614:	f7ec ff8d 	bl	8013532 <_read>
 8026618:	1c43      	adds	r3, r0, #1
 802661a:	d103      	bne.n	8026624 <_read_r+0x20>
 802661c:	682b      	ldr	r3, [r5, #0]
 802661e:	2b00      	cmp	r3, #0
 8026620:	d000      	beq.n	8026624 <_read_r+0x20>
 8026622:	6023      	str	r3, [r4, #0]
 8026624:	bd70      	pop	{r4, r5, r6, pc}
 8026626:	46c0      	nop			@ (mov r8, r8)
 8026628:	2000390c 	.word	0x2000390c

0802662c <_write_r>:
 802662c:	b570      	push	{r4, r5, r6, lr}
 802662e:	0004      	movs	r4, r0
 8026630:	0008      	movs	r0, r1
 8026632:	0011      	movs	r1, r2
 8026634:	001a      	movs	r2, r3
 8026636:	2300      	movs	r3, #0
 8026638:	4d05      	ldr	r5, [pc, #20]	@ (8026650 <_write_r+0x24>)
 802663a:	602b      	str	r3, [r5, #0]
 802663c:	f7ed fc5a 	bl	8013ef4 <_write>
 8026640:	1c43      	adds	r3, r0, #1
 8026642:	d103      	bne.n	802664c <_write_r+0x20>
 8026644:	682b      	ldr	r3, [r5, #0]
 8026646:	2b00      	cmp	r3, #0
 8026648:	d000      	beq.n	802664c <_write_r+0x20>
 802664a:	6023      	str	r3, [r4, #0]
 802664c:	bd70      	pop	{r4, r5, r6, pc}
 802664e:	46c0      	nop			@ (mov r8, r8)
 8026650:	2000390c 	.word	0x2000390c

08026654 <__errno>:
 8026654:	4b01      	ldr	r3, [pc, #4]	@ (802665c <__errno+0x8>)
 8026656:	6818      	ldr	r0, [r3, #0]
 8026658:	4770      	bx	lr
 802665a:	46c0      	nop			@ (mov r8, r8)
 802665c:	200003ec 	.word	0x200003ec

08026660 <__libc_init_array>:
 8026660:	b570      	push	{r4, r5, r6, lr}
 8026662:	2600      	movs	r6, #0
 8026664:	4c0c      	ldr	r4, [pc, #48]	@ (8026698 <__libc_init_array+0x38>)
 8026666:	4d0d      	ldr	r5, [pc, #52]	@ (802669c <__libc_init_array+0x3c>)
 8026668:	1b64      	subs	r4, r4, r5
 802666a:	10a4      	asrs	r4, r4, #2
 802666c:	42a6      	cmp	r6, r4
 802666e:	d109      	bne.n	8026684 <__libc_init_array+0x24>
 8026670:	2600      	movs	r6, #0
 8026672:	f003 ffcb 	bl	802a60c <_init>
 8026676:	4c0a      	ldr	r4, [pc, #40]	@ (80266a0 <__libc_init_array+0x40>)
 8026678:	4d0a      	ldr	r5, [pc, #40]	@ (80266a4 <__libc_init_array+0x44>)
 802667a:	1b64      	subs	r4, r4, r5
 802667c:	10a4      	asrs	r4, r4, #2
 802667e:	42a6      	cmp	r6, r4
 8026680:	d105      	bne.n	802668e <__libc_init_array+0x2e>
 8026682:	bd70      	pop	{r4, r5, r6, pc}
 8026684:	00b3      	lsls	r3, r6, #2
 8026686:	58eb      	ldr	r3, [r5, r3]
 8026688:	4798      	blx	r3
 802668a:	3601      	adds	r6, #1
 802668c:	e7ee      	b.n	802666c <__libc_init_array+0xc>
 802668e:	00b3      	lsls	r3, r6, #2
 8026690:	58eb      	ldr	r3, [r5, r3]
 8026692:	4798      	blx	r3
 8026694:	3601      	adds	r6, #1
 8026696:	e7f2      	b.n	802667e <__libc_init_array+0x1e>
 8026698:	0802ef20 	.word	0x0802ef20
 802669c:	0802ef20 	.word	0x0802ef20
 80266a0:	0802ef24 	.word	0x0802ef24
 80266a4:	0802ef20 	.word	0x0802ef20

080266a8 <__retarget_lock_init_recursive>:
 80266a8:	4770      	bx	lr

080266aa <__retarget_lock_acquire_recursive>:
 80266aa:	4770      	bx	lr

080266ac <__retarget_lock_release_recursive>:
 80266ac:	4770      	bx	lr

080266ae <memchr>:
 80266ae:	b2c9      	uxtb	r1, r1
 80266b0:	1882      	adds	r2, r0, r2
 80266b2:	4290      	cmp	r0, r2
 80266b4:	d101      	bne.n	80266ba <memchr+0xc>
 80266b6:	2000      	movs	r0, #0
 80266b8:	4770      	bx	lr
 80266ba:	7803      	ldrb	r3, [r0, #0]
 80266bc:	428b      	cmp	r3, r1
 80266be:	d0fb      	beq.n	80266b8 <memchr+0xa>
 80266c0:	3001      	adds	r0, #1
 80266c2:	e7f6      	b.n	80266b2 <memchr+0x4>

080266c4 <memcpy>:
 80266c4:	2300      	movs	r3, #0
 80266c6:	b510      	push	{r4, lr}
 80266c8:	429a      	cmp	r2, r3
 80266ca:	d100      	bne.n	80266ce <memcpy+0xa>
 80266cc:	bd10      	pop	{r4, pc}
 80266ce:	5ccc      	ldrb	r4, [r1, r3]
 80266d0:	54c4      	strb	r4, [r0, r3]
 80266d2:	3301      	adds	r3, #1
 80266d4:	e7f8      	b.n	80266c8 <memcpy+0x4>
	...

080266d8 <nan>:
 80266d8:	2000      	movs	r0, #0
 80266da:	4901      	ldr	r1, [pc, #4]	@ (80266e0 <nan+0x8>)
 80266dc:	4770      	bx	lr
 80266de:	46c0      	nop			@ (mov r8, r8)
 80266e0:	7ff80000 	.word	0x7ff80000

080266e4 <quorem>:
 80266e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80266e6:	6903      	ldr	r3, [r0, #16]
 80266e8:	690c      	ldr	r4, [r1, #16]
 80266ea:	b089      	sub	sp, #36	@ 0x24
 80266ec:	9003      	str	r0, [sp, #12]
 80266ee:	9106      	str	r1, [sp, #24]
 80266f0:	2000      	movs	r0, #0
 80266f2:	42a3      	cmp	r3, r4
 80266f4:	db63      	blt.n	80267be <quorem+0xda>
 80266f6:	000b      	movs	r3, r1
 80266f8:	3c01      	subs	r4, #1
 80266fa:	3314      	adds	r3, #20
 80266fc:	00a5      	lsls	r5, r4, #2
 80266fe:	9304      	str	r3, [sp, #16]
 8026700:	195b      	adds	r3, r3, r5
 8026702:	9305      	str	r3, [sp, #20]
 8026704:	9b03      	ldr	r3, [sp, #12]
 8026706:	3314      	adds	r3, #20
 8026708:	9301      	str	r3, [sp, #4]
 802670a:	195d      	adds	r5, r3, r5
 802670c:	9b05      	ldr	r3, [sp, #20]
 802670e:	682f      	ldr	r7, [r5, #0]
 8026710:	681e      	ldr	r6, [r3, #0]
 8026712:	0038      	movs	r0, r7
 8026714:	3601      	adds	r6, #1
 8026716:	0031      	movs	r1, r6
 8026718:	f7d9 fd44 	bl	80001a4 <__udivsi3>
 802671c:	9002      	str	r0, [sp, #8]
 802671e:	42b7      	cmp	r7, r6
 8026720:	d327      	bcc.n	8026772 <quorem+0x8e>
 8026722:	9b04      	ldr	r3, [sp, #16]
 8026724:	2700      	movs	r7, #0
 8026726:	469c      	mov	ip, r3
 8026728:	9e01      	ldr	r6, [sp, #4]
 802672a:	9707      	str	r7, [sp, #28]
 802672c:	4662      	mov	r2, ip
 802672e:	ca08      	ldmia	r2!, {r3}
 8026730:	6830      	ldr	r0, [r6, #0]
 8026732:	4694      	mov	ip, r2
 8026734:	9a02      	ldr	r2, [sp, #8]
 8026736:	b299      	uxth	r1, r3
 8026738:	4351      	muls	r1, r2
 802673a:	0c1b      	lsrs	r3, r3, #16
 802673c:	4353      	muls	r3, r2
 802673e:	19c9      	adds	r1, r1, r7
 8026740:	0c0a      	lsrs	r2, r1, #16
 8026742:	189b      	adds	r3, r3, r2
 8026744:	b289      	uxth	r1, r1
 8026746:	b282      	uxth	r2, r0
 8026748:	1a52      	subs	r2, r2, r1
 802674a:	9907      	ldr	r1, [sp, #28]
 802674c:	0c1f      	lsrs	r7, r3, #16
 802674e:	1852      	adds	r2, r2, r1
 8026750:	0c00      	lsrs	r0, r0, #16
 8026752:	b29b      	uxth	r3, r3
 8026754:	1411      	asrs	r1, r2, #16
 8026756:	1ac3      	subs	r3, r0, r3
 8026758:	185b      	adds	r3, r3, r1
 802675a:	1419      	asrs	r1, r3, #16
 802675c:	b292      	uxth	r2, r2
 802675e:	041b      	lsls	r3, r3, #16
 8026760:	431a      	orrs	r2, r3
 8026762:	9b05      	ldr	r3, [sp, #20]
 8026764:	9107      	str	r1, [sp, #28]
 8026766:	c604      	stmia	r6!, {r2}
 8026768:	4563      	cmp	r3, ip
 802676a:	d2df      	bcs.n	802672c <quorem+0x48>
 802676c:	682b      	ldr	r3, [r5, #0]
 802676e:	2b00      	cmp	r3, #0
 8026770:	d02b      	beq.n	80267ca <quorem+0xe6>
 8026772:	9906      	ldr	r1, [sp, #24]
 8026774:	9803      	ldr	r0, [sp, #12]
 8026776:	f001 fd6f 	bl	8028258 <__mcmp>
 802677a:	2800      	cmp	r0, #0
 802677c:	db1e      	blt.n	80267bc <quorem+0xd8>
 802677e:	2600      	movs	r6, #0
 8026780:	9d01      	ldr	r5, [sp, #4]
 8026782:	9904      	ldr	r1, [sp, #16]
 8026784:	c901      	ldmia	r1!, {r0}
 8026786:	682b      	ldr	r3, [r5, #0]
 8026788:	b287      	uxth	r7, r0
 802678a:	b29a      	uxth	r2, r3
 802678c:	1bd2      	subs	r2, r2, r7
 802678e:	1992      	adds	r2, r2, r6
 8026790:	0c00      	lsrs	r0, r0, #16
 8026792:	0c1b      	lsrs	r3, r3, #16
 8026794:	1a1b      	subs	r3, r3, r0
 8026796:	1410      	asrs	r0, r2, #16
 8026798:	181b      	adds	r3, r3, r0
 802679a:	141e      	asrs	r6, r3, #16
 802679c:	b292      	uxth	r2, r2
 802679e:	041b      	lsls	r3, r3, #16
 80267a0:	431a      	orrs	r2, r3
 80267a2:	9b05      	ldr	r3, [sp, #20]
 80267a4:	c504      	stmia	r5!, {r2}
 80267a6:	428b      	cmp	r3, r1
 80267a8:	d2ec      	bcs.n	8026784 <quorem+0xa0>
 80267aa:	9a01      	ldr	r2, [sp, #4]
 80267ac:	00a3      	lsls	r3, r4, #2
 80267ae:	18d3      	adds	r3, r2, r3
 80267b0:	681a      	ldr	r2, [r3, #0]
 80267b2:	2a00      	cmp	r2, #0
 80267b4:	d014      	beq.n	80267e0 <quorem+0xfc>
 80267b6:	9b02      	ldr	r3, [sp, #8]
 80267b8:	3301      	adds	r3, #1
 80267ba:	9302      	str	r3, [sp, #8]
 80267bc:	9802      	ldr	r0, [sp, #8]
 80267be:	b009      	add	sp, #36	@ 0x24
 80267c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80267c2:	682b      	ldr	r3, [r5, #0]
 80267c4:	2b00      	cmp	r3, #0
 80267c6:	d104      	bne.n	80267d2 <quorem+0xee>
 80267c8:	3c01      	subs	r4, #1
 80267ca:	9b01      	ldr	r3, [sp, #4]
 80267cc:	3d04      	subs	r5, #4
 80267ce:	42ab      	cmp	r3, r5
 80267d0:	d3f7      	bcc.n	80267c2 <quorem+0xde>
 80267d2:	9b03      	ldr	r3, [sp, #12]
 80267d4:	611c      	str	r4, [r3, #16]
 80267d6:	e7cc      	b.n	8026772 <quorem+0x8e>
 80267d8:	681a      	ldr	r2, [r3, #0]
 80267da:	2a00      	cmp	r2, #0
 80267dc:	d104      	bne.n	80267e8 <quorem+0x104>
 80267de:	3c01      	subs	r4, #1
 80267e0:	9a01      	ldr	r2, [sp, #4]
 80267e2:	3b04      	subs	r3, #4
 80267e4:	429a      	cmp	r2, r3
 80267e6:	d3f7      	bcc.n	80267d8 <quorem+0xf4>
 80267e8:	9b03      	ldr	r3, [sp, #12]
 80267ea:	611c      	str	r4, [r3, #16]
 80267ec:	e7e3      	b.n	80267b6 <quorem+0xd2>
	...

080267f0 <_dtoa_r>:
 80267f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80267f2:	0014      	movs	r4, r2
 80267f4:	001d      	movs	r5, r3
 80267f6:	69c6      	ldr	r6, [r0, #28]
 80267f8:	b09d      	sub	sp, #116	@ 0x74
 80267fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80267fc:	950b      	str	r5, [sp, #44]	@ 0x2c
 80267fe:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8026800:	9003      	str	r0, [sp, #12]
 8026802:	2e00      	cmp	r6, #0
 8026804:	d10f      	bne.n	8026826 <_dtoa_r+0x36>
 8026806:	2010      	movs	r0, #16
 8026808:	f001 f986 	bl	8027b18 <malloc>
 802680c:	9b03      	ldr	r3, [sp, #12]
 802680e:	1e02      	subs	r2, r0, #0
 8026810:	61d8      	str	r0, [r3, #28]
 8026812:	d104      	bne.n	802681e <_dtoa_r+0x2e>
 8026814:	21ef      	movs	r1, #239	@ 0xef
 8026816:	4bc7      	ldr	r3, [pc, #796]	@ (8026b34 <_dtoa_r+0x344>)
 8026818:	48c7      	ldr	r0, [pc, #796]	@ (8026b38 <_dtoa_r+0x348>)
 802681a:	f002 fb23 	bl	8028e64 <__assert_func>
 802681e:	6046      	str	r6, [r0, #4]
 8026820:	6086      	str	r6, [r0, #8]
 8026822:	6006      	str	r6, [r0, #0]
 8026824:	60c6      	str	r6, [r0, #12]
 8026826:	9b03      	ldr	r3, [sp, #12]
 8026828:	69db      	ldr	r3, [r3, #28]
 802682a:	6819      	ldr	r1, [r3, #0]
 802682c:	2900      	cmp	r1, #0
 802682e:	d00b      	beq.n	8026848 <_dtoa_r+0x58>
 8026830:	685a      	ldr	r2, [r3, #4]
 8026832:	2301      	movs	r3, #1
 8026834:	4093      	lsls	r3, r2
 8026836:	604a      	str	r2, [r1, #4]
 8026838:	608b      	str	r3, [r1, #8]
 802683a:	9803      	ldr	r0, [sp, #12]
 802683c:	f001 fa7e 	bl	8027d3c <_Bfree>
 8026840:	2200      	movs	r2, #0
 8026842:	9b03      	ldr	r3, [sp, #12]
 8026844:	69db      	ldr	r3, [r3, #28]
 8026846:	601a      	str	r2, [r3, #0]
 8026848:	2d00      	cmp	r5, #0
 802684a:	da1e      	bge.n	802688a <_dtoa_r+0x9a>
 802684c:	2301      	movs	r3, #1
 802684e:	603b      	str	r3, [r7, #0]
 8026850:	006b      	lsls	r3, r5, #1
 8026852:	085b      	lsrs	r3, r3, #1
 8026854:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026856:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026858:	4bb8      	ldr	r3, [pc, #736]	@ (8026b3c <_dtoa_r+0x34c>)
 802685a:	4ab8      	ldr	r2, [pc, #736]	@ (8026b3c <_dtoa_r+0x34c>)
 802685c:	403b      	ands	r3, r7
 802685e:	4293      	cmp	r3, r2
 8026860:	d116      	bne.n	8026890 <_dtoa_r+0xa0>
 8026862:	4bb7      	ldr	r3, [pc, #732]	@ (8026b40 <_dtoa_r+0x350>)
 8026864:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026866:	6013      	str	r3, [r2, #0]
 8026868:	033b      	lsls	r3, r7, #12
 802686a:	0b1b      	lsrs	r3, r3, #12
 802686c:	4323      	orrs	r3, r4
 802686e:	d101      	bne.n	8026874 <_dtoa_r+0x84>
 8026870:	f000 fd80 	bl	8027374 <_dtoa_r+0xb84>
 8026874:	4bb3      	ldr	r3, [pc, #716]	@ (8026b44 <_dtoa_r+0x354>)
 8026876:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026878:	9308      	str	r3, [sp, #32]
 802687a:	2a00      	cmp	r2, #0
 802687c:	d002      	beq.n	8026884 <_dtoa_r+0x94>
 802687e:	4bb2      	ldr	r3, [pc, #712]	@ (8026b48 <_dtoa_r+0x358>)
 8026880:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026882:	6013      	str	r3, [r2, #0]
 8026884:	9808      	ldr	r0, [sp, #32]
 8026886:	b01d      	add	sp, #116	@ 0x74
 8026888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802688a:	2300      	movs	r3, #0
 802688c:	603b      	str	r3, [r7, #0]
 802688e:	e7e2      	b.n	8026856 <_dtoa_r+0x66>
 8026890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026894:	9212      	str	r2, [sp, #72]	@ 0x48
 8026896:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026898:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802689a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802689c:	2200      	movs	r2, #0
 802689e:	2300      	movs	r3, #0
 80268a0:	f7d9 fe06 	bl	80004b0 <__aeabi_dcmpeq>
 80268a4:	1e06      	subs	r6, r0, #0
 80268a6:	d00b      	beq.n	80268c0 <_dtoa_r+0xd0>
 80268a8:	2301      	movs	r3, #1
 80268aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80268ac:	6013      	str	r3, [r2, #0]
 80268ae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d002      	beq.n	80268ba <_dtoa_r+0xca>
 80268b4:	4ba5      	ldr	r3, [pc, #660]	@ (8026b4c <_dtoa_r+0x35c>)
 80268b6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80268b8:	6013      	str	r3, [r2, #0]
 80268ba:	4ba5      	ldr	r3, [pc, #660]	@ (8026b50 <_dtoa_r+0x360>)
 80268bc:	9308      	str	r3, [sp, #32]
 80268be:	e7e1      	b.n	8026884 <_dtoa_r+0x94>
 80268c0:	ab1a      	add	r3, sp, #104	@ 0x68
 80268c2:	9301      	str	r3, [sp, #4]
 80268c4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80268c6:	9300      	str	r3, [sp, #0]
 80268c8:	9803      	ldr	r0, [sp, #12]
 80268ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80268cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80268ce:	f001 fde5 	bl	802849c <__d2b>
 80268d2:	007a      	lsls	r2, r7, #1
 80268d4:	9005      	str	r0, [sp, #20]
 80268d6:	0d52      	lsrs	r2, r2, #21
 80268d8:	d100      	bne.n	80268dc <_dtoa_r+0xec>
 80268da:	e07b      	b.n	80269d4 <_dtoa_r+0x1e4>
 80268dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80268de:	9618      	str	r6, [sp, #96]	@ 0x60
 80268e0:	0319      	lsls	r1, r3, #12
 80268e2:	4b9c      	ldr	r3, [pc, #624]	@ (8026b54 <_dtoa_r+0x364>)
 80268e4:	0b09      	lsrs	r1, r1, #12
 80268e6:	430b      	orrs	r3, r1
 80268e8:	499b      	ldr	r1, [pc, #620]	@ (8026b58 <_dtoa_r+0x368>)
 80268ea:	1857      	adds	r7, r2, r1
 80268ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80268ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80268f0:	0019      	movs	r1, r3
 80268f2:	2200      	movs	r2, #0
 80268f4:	4b99      	ldr	r3, [pc, #612]	@ (8026b5c <_dtoa_r+0x36c>)
 80268f6:	f7dc fb13 	bl	8002f20 <__aeabi_dsub>
 80268fa:	4a99      	ldr	r2, [pc, #612]	@ (8026b60 <_dtoa_r+0x370>)
 80268fc:	4b99      	ldr	r3, [pc, #612]	@ (8026b64 <_dtoa_r+0x374>)
 80268fe:	f7dc f829 	bl	8002954 <__aeabi_dmul>
 8026902:	4a99      	ldr	r2, [pc, #612]	@ (8026b68 <_dtoa_r+0x378>)
 8026904:	4b99      	ldr	r3, [pc, #612]	@ (8026b6c <_dtoa_r+0x37c>)
 8026906:	f7db f825 	bl	8001954 <__aeabi_dadd>
 802690a:	0004      	movs	r4, r0
 802690c:	0038      	movs	r0, r7
 802690e:	000d      	movs	r5, r1
 8026910:	f7dc ff6e 	bl	80037f0 <__aeabi_i2d>
 8026914:	4a96      	ldr	r2, [pc, #600]	@ (8026b70 <_dtoa_r+0x380>)
 8026916:	4b97      	ldr	r3, [pc, #604]	@ (8026b74 <_dtoa_r+0x384>)
 8026918:	f7dc f81c 	bl	8002954 <__aeabi_dmul>
 802691c:	0002      	movs	r2, r0
 802691e:	000b      	movs	r3, r1
 8026920:	0020      	movs	r0, r4
 8026922:	0029      	movs	r1, r5
 8026924:	f7db f816 	bl	8001954 <__aeabi_dadd>
 8026928:	0004      	movs	r4, r0
 802692a:	000d      	movs	r5, r1
 802692c:	f7dc ff24 	bl	8003778 <__aeabi_d2iz>
 8026930:	2200      	movs	r2, #0
 8026932:	9004      	str	r0, [sp, #16]
 8026934:	2300      	movs	r3, #0
 8026936:	0020      	movs	r0, r4
 8026938:	0029      	movs	r1, r5
 802693a:	f7d9 fdbf 	bl	80004bc <__aeabi_dcmplt>
 802693e:	2800      	cmp	r0, #0
 8026940:	d00b      	beq.n	802695a <_dtoa_r+0x16a>
 8026942:	9804      	ldr	r0, [sp, #16]
 8026944:	f7dc ff54 	bl	80037f0 <__aeabi_i2d>
 8026948:	002b      	movs	r3, r5
 802694a:	0022      	movs	r2, r4
 802694c:	f7d9 fdb0 	bl	80004b0 <__aeabi_dcmpeq>
 8026950:	4243      	negs	r3, r0
 8026952:	4158      	adcs	r0, r3
 8026954:	9b04      	ldr	r3, [sp, #16]
 8026956:	1a1b      	subs	r3, r3, r0
 8026958:	9304      	str	r3, [sp, #16]
 802695a:	2301      	movs	r3, #1
 802695c:	9315      	str	r3, [sp, #84]	@ 0x54
 802695e:	9b04      	ldr	r3, [sp, #16]
 8026960:	2b16      	cmp	r3, #22
 8026962:	d810      	bhi.n	8026986 <_dtoa_r+0x196>
 8026964:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026966:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026968:	9a04      	ldr	r2, [sp, #16]
 802696a:	4b83      	ldr	r3, [pc, #524]	@ (8026b78 <_dtoa_r+0x388>)
 802696c:	00d2      	lsls	r2, r2, #3
 802696e:	189b      	adds	r3, r3, r2
 8026970:	681a      	ldr	r2, [r3, #0]
 8026972:	685b      	ldr	r3, [r3, #4]
 8026974:	f7d9 fda2 	bl	80004bc <__aeabi_dcmplt>
 8026978:	2800      	cmp	r0, #0
 802697a:	d047      	beq.n	8026a0c <_dtoa_r+0x21c>
 802697c:	9b04      	ldr	r3, [sp, #16]
 802697e:	3b01      	subs	r3, #1
 8026980:	9304      	str	r3, [sp, #16]
 8026982:	2300      	movs	r3, #0
 8026984:	9315      	str	r3, [sp, #84]	@ 0x54
 8026986:	2200      	movs	r2, #0
 8026988:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802698a:	9206      	str	r2, [sp, #24]
 802698c:	1bdb      	subs	r3, r3, r7
 802698e:	1e5a      	subs	r2, r3, #1
 8026990:	d53e      	bpl.n	8026a10 <_dtoa_r+0x220>
 8026992:	2201      	movs	r2, #1
 8026994:	1ad3      	subs	r3, r2, r3
 8026996:	9306      	str	r3, [sp, #24]
 8026998:	2300      	movs	r3, #0
 802699a:	930d      	str	r3, [sp, #52]	@ 0x34
 802699c:	9b04      	ldr	r3, [sp, #16]
 802699e:	2b00      	cmp	r3, #0
 80269a0:	db38      	blt.n	8026a14 <_dtoa_r+0x224>
 80269a2:	9a04      	ldr	r2, [sp, #16]
 80269a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80269a6:	4694      	mov	ip, r2
 80269a8:	4463      	add	r3, ip
 80269aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80269ac:	2300      	movs	r3, #0
 80269ae:	9214      	str	r2, [sp, #80]	@ 0x50
 80269b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80269b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80269b4:	2401      	movs	r4, #1
 80269b6:	2b09      	cmp	r3, #9
 80269b8:	d862      	bhi.n	8026a80 <_dtoa_r+0x290>
 80269ba:	2b05      	cmp	r3, #5
 80269bc:	dd02      	ble.n	80269c4 <_dtoa_r+0x1d4>
 80269be:	2400      	movs	r4, #0
 80269c0:	3b04      	subs	r3, #4
 80269c2:	9322      	str	r3, [sp, #136]	@ 0x88
 80269c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80269c6:	1e98      	subs	r0, r3, #2
 80269c8:	2803      	cmp	r0, #3
 80269ca:	d863      	bhi.n	8026a94 <_dtoa_r+0x2a4>
 80269cc:	f7d9 fbd6 	bl	800017c <__gnu_thumb1_case_uqi>
 80269d0:	2b385654 	.word	0x2b385654
 80269d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80269d6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80269d8:	18f6      	adds	r6, r6, r3
 80269da:	4b68      	ldr	r3, [pc, #416]	@ (8026b7c <_dtoa_r+0x38c>)
 80269dc:	18f2      	adds	r2, r6, r3
 80269de:	2a20      	cmp	r2, #32
 80269e0:	dd0f      	ble.n	8026a02 <_dtoa_r+0x212>
 80269e2:	2340      	movs	r3, #64	@ 0x40
 80269e4:	1a9b      	subs	r3, r3, r2
 80269e6:	409f      	lsls	r7, r3
 80269e8:	4b65      	ldr	r3, [pc, #404]	@ (8026b80 <_dtoa_r+0x390>)
 80269ea:	0038      	movs	r0, r7
 80269ec:	18f3      	adds	r3, r6, r3
 80269ee:	40dc      	lsrs	r4, r3
 80269f0:	4320      	orrs	r0, r4
 80269f2:	f7dc ff2b 	bl	800384c <__aeabi_ui2d>
 80269f6:	2201      	movs	r2, #1
 80269f8:	4b62      	ldr	r3, [pc, #392]	@ (8026b84 <_dtoa_r+0x394>)
 80269fa:	1e77      	subs	r7, r6, #1
 80269fc:	18cb      	adds	r3, r1, r3
 80269fe:	9218      	str	r2, [sp, #96]	@ 0x60
 8026a00:	e776      	b.n	80268f0 <_dtoa_r+0x100>
 8026a02:	2320      	movs	r3, #32
 8026a04:	0020      	movs	r0, r4
 8026a06:	1a9b      	subs	r3, r3, r2
 8026a08:	4098      	lsls	r0, r3
 8026a0a:	e7f2      	b.n	80269f2 <_dtoa_r+0x202>
 8026a0c:	9015      	str	r0, [sp, #84]	@ 0x54
 8026a0e:	e7ba      	b.n	8026986 <_dtoa_r+0x196>
 8026a10:	920d      	str	r2, [sp, #52]	@ 0x34
 8026a12:	e7c3      	b.n	802699c <_dtoa_r+0x1ac>
 8026a14:	9b06      	ldr	r3, [sp, #24]
 8026a16:	9a04      	ldr	r2, [sp, #16]
 8026a18:	1a9b      	subs	r3, r3, r2
 8026a1a:	9306      	str	r3, [sp, #24]
 8026a1c:	4253      	negs	r3, r2
 8026a1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026a20:	2300      	movs	r3, #0
 8026a22:	9314      	str	r3, [sp, #80]	@ 0x50
 8026a24:	e7c5      	b.n	80269b2 <_dtoa_r+0x1c2>
 8026a26:	2301      	movs	r3, #1
 8026a28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026a2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a2c:	4694      	mov	ip, r2
 8026a2e:	9b04      	ldr	r3, [sp, #16]
 8026a30:	4463      	add	r3, ip
 8026a32:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a34:	3301      	adds	r3, #1
 8026a36:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	dc08      	bgt.n	8026a4e <_dtoa_r+0x25e>
 8026a3c:	2301      	movs	r3, #1
 8026a3e:	e006      	b.n	8026a4e <_dtoa_r+0x25e>
 8026a40:	2301      	movs	r3, #1
 8026a42:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	dd28      	ble.n	8026a9c <_dtoa_r+0x2ac>
 8026a4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a4e:	9a03      	ldr	r2, [sp, #12]
 8026a50:	2100      	movs	r1, #0
 8026a52:	69d0      	ldr	r0, [r2, #28]
 8026a54:	2204      	movs	r2, #4
 8026a56:	0015      	movs	r5, r2
 8026a58:	3514      	adds	r5, #20
 8026a5a:	429d      	cmp	r5, r3
 8026a5c:	d923      	bls.n	8026aa6 <_dtoa_r+0x2b6>
 8026a5e:	6041      	str	r1, [r0, #4]
 8026a60:	9803      	ldr	r0, [sp, #12]
 8026a62:	f001 f927 	bl	8027cb4 <_Balloc>
 8026a66:	9008      	str	r0, [sp, #32]
 8026a68:	2800      	cmp	r0, #0
 8026a6a:	d11f      	bne.n	8026aac <_dtoa_r+0x2bc>
 8026a6c:	21b0      	movs	r1, #176	@ 0xb0
 8026a6e:	4b46      	ldr	r3, [pc, #280]	@ (8026b88 <_dtoa_r+0x398>)
 8026a70:	4831      	ldr	r0, [pc, #196]	@ (8026b38 <_dtoa_r+0x348>)
 8026a72:	9a08      	ldr	r2, [sp, #32]
 8026a74:	31ff      	adds	r1, #255	@ 0xff
 8026a76:	e6d0      	b.n	802681a <_dtoa_r+0x2a>
 8026a78:	2300      	movs	r3, #0
 8026a7a:	e7e2      	b.n	8026a42 <_dtoa_r+0x252>
 8026a7c:	2300      	movs	r3, #0
 8026a7e:	e7d3      	b.n	8026a28 <_dtoa_r+0x238>
 8026a80:	2300      	movs	r3, #0
 8026a82:	9410      	str	r4, [sp, #64]	@ 0x40
 8026a84:	9322      	str	r3, [sp, #136]	@ 0x88
 8026a86:	3b01      	subs	r3, #1
 8026a88:	2200      	movs	r2, #0
 8026a8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a8e:	3313      	adds	r3, #19
 8026a90:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026a92:	e7dc      	b.n	8026a4e <_dtoa_r+0x25e>
 8026a94:	2301      	movs	r3, #1
 8026a96:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a98:	3b02      	subs	r3, #2
 8026a9a:	e7f5      	b.n	8026a88 <_dtoa_r+0x298>
 8026a9c:	2301      	movs	r3, #1
 8026a9e:	001a      	movs	r2, r3
 8026aa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8026aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8026aa4:	e7f4      	b.n	8026a90 <_dtoa_r+0x2a0>
 8026aa6:	3101      	adds	r1, #1
 8026aa8:	0052      	lsls	r2, r2, #1
 8026aaa:	e7d4      	b.n	8026a56 <_dtoa_r+0x266>
 8026aac:	9b03      	ldr	r3, [sp, #12]
 8026aae:	9a08      	ldr	r2, [sp, #32]
 8026ab0:	69db      	ldr	r3, [r3, #28]
 8026ab2:	601a      	str	r2, [r3, #0]
 8026ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ab6:	2b0e      	cmp	r3, #14
 8026ab8:	d900      	bls.n	8026abc <_dtoa_r+0x2cc>
 8026aba:	e0d6      	b.n	8026c6a <_dtoa_r+0x47a>
 8026abc:	2c00      	cmp	r4, #0
 8026abe:	d100      	bne.n	8026ac2 <_dtoa_r+0x2d2>
 8026ac0:	e0d3      	b.n	8026c6a <_dtoa_r+0x47a>
 8026ac2:	9b04      	ldr	r3, [sp, #16]
 8026ac4:	2b00      	cmp	r3, #0
 8026ac6:	dd63      	ble.n	8026b90 <_dtoa_r+0x3a0>
 8026ac8:	210f      	movs	r1, #15
 8026aca:	9a04      	ldr	r2, [sp, #16]
 8026acc:	4b2a      	ldr	r3, [pc, #168]	@ (8026b78 <_dtoa_r+0x388>)
 8026ace:	400a      	ands	r2, r1
 8026ad0:	00d2      	lsls	r2, r2, #3
 8026ad2:	189b      	adds	r3, r3, r2
 8026ad4:	681e      	ldr	r6, [r3, #0]
 8026ad6:	685f      	ldr	r7, [r3, #4]
 8026ad8:	9b04      	ldr	r3, [sp, #16]
 8026ada:	2402      	movs	r4, #2
 8026adc:	111d      	asrs	r5, r3, #4
 8026ade:	05db      	lsls	r3, r3, #23
 8026ae0:	d50a      	bpl.n	8026af8 <_dtoa_r+0x308>
 8026ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8026b8c <_dtoa_r+0x39c>)
 8026ae4:	400d      	ands	r5, r1
 8026ae6:	6a1a      	ldr	r2, [r3, #32]
 8026ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026aea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026aec:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026aee:	f7db faf7 	bl	80020e0 <__aeabi_ddiv>
 8026af2:	900a      	str	r0, [sp, #40]	@ 0x28
 8026af4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026af6:	3401      	adds	r4, #1
 8026af8:	4b24      	ldr	r3, [pc, #144]	@ (8026b8c <_dtoa_r+0x39c>)
 8026afa:	930c      	str	r3, [sp, #48]	@ 0x30
 8026afc:	2d00      	cmp	r5, #0
 8026afe:	d108      	bne.n	8026b12 <_dtoa_r+0x322>
 8026b00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026b02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026b04:	0032      	movs	r2, r6
 8026b06:	003b      	movs	r3, r7
 8026b08:	f7db faea 	bl	80020e0 <__aeabi_ddiv>
 8026b0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8026b0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026b10:	e059      	b.n	8026bc6 <_dtoa_r+0x3d6>
 8026b12:	2301      	movs	r3, #1
 8026b14:	421d      	tst	r5, r3
 8026b16:	d009      	beq.n	8026b2c <_dtoa_r+0x33c>
 8026b18:	18e4      	adds	r4, r4, r3
 8026b1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026b1c:	0030      	movs	r0, r6
 8026b1e:	681a      	ldr	r2, [r3, #0]
 8026b20:	685b      	ldr	r3, [r3, #4]
 8026b22:	0039      	movs	r1, r7
 8026b24:	f7db ff16 	bl	8002954 <__aeabi_dmul>
 8026b28:	0006      	movs	r6, r0
 8026b2a:	000f      	movs	r7, r1
 8026b2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026b2e:	106d      	asrs	r5, r5, #1
 8026b30:	3308      	adds	r3, #8
 8026b32:	e7e2      	b.n	8026afa <_dtoa_r+0x30a>
 8026b34:	0802eadf 	.word	0x0802eadf
 8026b38:	0802eaf6 	.word	0x0802eaf6
 8026b3c:	7ff00000 	.word	0x7ff00000
 8026b40:	0000270f 	.word	0x0000270f
 8026b44:	0802eadb 	.word	0x0802eadb
 8026b48:	0802eade 	.word	0x0802eade
 8026b4c:	0802eaa7 	.word	0x0802eaa7
 8026b50:	0802eaa6 	.word	0x0802eaa6
 8026b54:	3ff00000 	.word	0x3ff00000
 8026b58:	fffffc01 	.word	0xfffffc01
 8026b5c:	3ff80000 	.word	0x3ff80000
 8026b60:	636f4361 	.word	0x636f4361
 8026b64:	3fd287a7 	.word	0x3fd287a7
 8026b68:	8b60c8b3 	.word	0x8b60c8b3
 8026b6c:	3fc68a28 	.word	0x3fc68a28
 8026b70:	509f79fb 	.word	0x509f79fb
 8026b74:	3fd34413 	.word	0x3fd34413
 8026b78:	0802edf0 	.word	0x0802edf0
 8026b7c:	00000432 	.word	0x00000432
 8026b80:	00000412 	.word	0x00000412
 8026b84:	fe100000 	.word	0xfe100000
 8026b88:	0802eb4e 	.word	0x0802eb4e
 8026b8c:	0802edc8 	.word	0x0802edc8
 8026b90:	9b04      	ldr	r3, [sp, #16]
 8026b92:	2402      	movs	r4, #2
 8026b94:	2b00      	cmp	r3, #0
 8026b96:	d016      	beq.n	8026bc6 <_dtoa_r+0x3d6>
 8026b98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026b9c:	220f      	movs	r2, #15
 8026b9e:	425d      	negs	r5, r3
 8026ba0:	402a      	ands	r2, r5
 8026ba2:	4bd5      	ldr	r3, [pc, #852]	@ (8026ef8 <_dtoa_r+0x708>)
 8026ba4:	00d2      	lsls	r2, r2, #3
 8026ba6:	189b      	adds	r3, r3, r2
 8026ba8:	681a      	ldr	r2, [r3, #0]
 8026baa:	685b      	ldr	r3, [r3, #4]
 8026bac:	f7db fed2 	bl	8002954 <__aeabi_dmul>
 8026bb0:	2701      	movs	r7, #1
 8026bb2:	2300      	movs	r3, #0
 8026bb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8026bb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026bb8:	4ed0      	ldr	r6, [pc, #832]	@ (8026efc <_dtoa_r+0x70c>)
 8026bba:	112d      	asrs	r5, r5, #4
 8026bbc:	2d00      	cmp	r5, #0
 8026bbe:	d000      	beq.n	8026bc2 <_dtoa_r+0x3d2>
 8026bc0:	e095      	b.n	8026cee <_dtoa_r+0x4fe>
 8026bc2:	2b00      	cmp	r3, #0
 8026bc4:	d1a2      	bne.n	8026b0c <_dtoa_r+0x31c>
 8026bc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026bc8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026bca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026bcc:	2b00      	cmp	r3, #0
 8026bce:	d100      	bne.n	8026bd2 <_dtoa_r+0x3e2>
 8026bd0:	e098      	b.n	8026d04 <_dtoa_r+0x514>
 8026bd2:	2200      	movs	r2, #0
 8026bd4:	0030      	movs	r0, r6
 8026bd6:	0039      	movs	r1, r7
 8026bd8:	4bc9      	ldr	r3, [pc, #804]	@ (8026f00 <_dtoa_r+0x710>)
 8026bda:	f7d9 fc6f 	bl	80004bc <__aeabi_dcmplt>
 8026bde:	2800      	cmp	r0, #0
 8026be0:	d100      	bne.n	8026be4 <_dtoa_r+0x3f4>
 8026be2:	e08f      	b.n	8026d04 <_dtoa_r+0x514>
 8026be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026be6:	2b00      	cmp	r3, #0
 8026be8:	d100      	bne.n	8026bec <_dtoa_r+0x3fc>
 8026bea:	e08b      	b.n	8026d04 <_dtoa_r+0x514>
 8026bec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026bee:	2b00      	cmp	r3, #0
 8026bf0:	dd37      	ble.n	8026c62 <_dtoa_r+0x472>
 8026bf2:	9b04      	ldr	r3, [sp, #16]
 8026bf4:	2200      	movs	r2, #0
 8026bf6:	3b01      	subs	r3, #1
 8026bf8:	930c      	str	r3, [sp, #48]	@ 0x30
 8026bfa:	0030      	movs	r0, r6
 8026bfc:	4bc1      	ldr	r3, [pc, #772]	@ (8026f04 <_dtoa_r+0x714>)
 8026bfe:	0039      	movs	r1, r7
 8026c00:	f7db fea8 	bl	8002954 <__aeabi_dmul>
 8026c04:	900a      	str	r0, [sp, #40]	@ 0x28
 8026c06:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026c08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c0a:	3401      	adds	r4, #1
 8026c0c:	0020      	movs	r0, r4
 8026c0e:	9311      	str	r3, [sp, #68]	@ 0x44
 8026c10:	f7dc fdee 	bl	80037f0 <__aeabi_i2d>
 8026c14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026c18:	f7db fe9c 	bl	8002954 <__aeabi_dmul>
 8026c1c:	4bba      	ldr	r3, [pc, #744]	@ (8026f08 <_dtoa_r+0x718>)
 8026c1e:	2200      	movs	r2, #0
 8026c20:	f7da fe98 	bl	8001954 <__aeabi_dadd>
 8026c24:	4bb9      	ldr	r3, [pc, #740]	@ (8026f0c <_dtoa_r+0x71c>)
 8026c26:	0006      	movs	r6, r0
 8026c28:	18cf      	adds	r7, r1, r3
 8026c2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c2c:	2b00      	cmp	r3, #0
 8026c2e:	d16d      	bne.n	8026d0c <_dtoa_r+0x51c>
 8026c30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026c32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026c34:	2200      	movs	r2, #0
 8026c36:	4bb6      	ldr	r3, [pc, #728]	@ (8026f10 <_dtoa_r+0x720>)
 8026c38:	f7dc f972 	bl	8002f20 <__aeabi_dsub>
 8026c3c:	0032      	movs	r2, r6
 8026c3e:	003b      	movs	r3, r7
 8026c40:	0004      	movs	r4, r0
 8026c42:	000d      	movs	r5, r1
 8026c44:	f7d9 fc4e 	bl	80004e4 <__aeabi_dcmpgt>
 8026c48:	2800      	cmp	r0, #0
 8026c4a:	d000      	beq.n	8026c4e <_dtoa_r+0x45e>
 8026c4c:	e2b6      	b.n	80271bc <_dtoa_r+0x9cc>
 8026c4e:	2180      	movs	r1, #128	@ 0x80
 8026c50:	0609      	lsls	r1, r1, #24
 8026c52:	187b      	adds	r3, r7, r1
 8026c54:	0032      	movs	r2, r6
 8026c56:	0020      	movs	r0, r4
 8026c58:	0029      	movs	r1, r5
 8026c5a:	f7d9 fc2f 	bl	80004bc <__aeabi_dcmplt>
 8026c5e:	2800      	cmp	r0, #0
 8026c60:	d128      	bne.n	8026cb4 <_dtoa_r+0x4c4>
 8026c62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026c64:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8026c68:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026c6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c6c:	2b00      	cmp	r3, #0
 8026c6e:	da00      	bge.n	8026c72 <_dtoa_r+0x482>
 8026c70:	e174      	b.n	8026f5c <_dtoa_r+0x76c>
 8026c72:	9a04      	ldr	r2, [sp, #16]
 8026c74:	2a0e      	cmp	r2, #14
 8026c76:	dd00      	ble.n	8026c7a <_dtoa_r+0x48a>
 8026c78:	e170      	b.n	8026f5c <_dtoa_r+0x76c>
 8026c7a:	4b9f      	ldr	r3, [pc, #636]	@ (8026ef8 <_dtoa_r+0x708>)
 8026c7c:	00d2      	lsls	r2, r2, #3
 8026c7e:	189b      	adds	r3, r3, r2
 8026c80:	685c      	ldr	r4, [r3, #4]
 8026c82:	681b      	ldr	r3, [r3, #0]
 8026c84:	9306      	str	r3, [sp, #24]
 8026c86:	9407      	str	r4, [sp, #28]
 8026c88:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	db00      	blt.n	8026c90 <_dtoa_r+0x4a0>
 8026c8e:	e0e7      	b.n	8026e60 <_dtoa_r+0x670>
 8026c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c92:	2b00      	cmp	r3, #0
 8026c94:	dd00      	ble.n	8026c98 <_dtoa_r+0x4a8>
 8026c96:	e0e3      	b.n	8026e60 <_dtoa_r+0x670>
 8026c98:	d10c      	bne.n	8026cb4 <_dtoa_r+0x4c4>
 8026c9a:	9806      	ldr	r0, [sp, #24]
 8026c9c:	9907      	ldr	r1, [sp, #28]
 8026c9e:	2200      	movs	r2, #0
 8026ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8026f10 <_dtoa_r+0x720>)
 8026ca2:	f7db fe57 	bl	8002954 <__aeabi_dmul>
 8026ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026caa:	f7d9 fc25 	bl	80004f8 <__aeabi_dcmpge>
 8026cae:	2800      	cmp	r0, #0
 8026cb0:	d100      	bne.n	8026cb4 <_dtoa_r+0x4c4>
 8026cb2:	e286      	b.n	80271c2 <_dtoa_r+0x9d2>
 8026cb4:	2600      	movs	r6, #0
 8026cb6:	0037      	movs	r7, r6
 8026cb8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026cba:	9c08      	ldr	r4, [sp, #32]
 8026cbc:	43db      	mvns	r3, r3
 8026cbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8026cc0:	9704      	str	r7, [sp, #16]
 8026cc2:	2700      	movs	r7, #0
 8026cc4:	0031      	movs	r1, r6
 8026cc6:	9803      	ldr	r0, [sp, #12]
 8026cc8:	f001 f838 	bl	8027d3c <_Bfree>
 8026ccc:	9b04      	ldr	r3, [sp, #16]
 8026cce:	2b00      	cmp	r3, #0
 8026cd0:	d100      	bne.n	8026cd4 <_dtoa_r+0x4e4>
 8026cd2:	e0bb      	b.n	8026e4c <_dtoa_r+0x65c>
 8026cd4:	2f00      	cmp	r7, #0
 8026cd6:	d005      	beq.n	8026ce4 <_dtoa_r+0x4f4>
 8026cd8:	429f      	cmp	r7, r3
 8026cda:	d003      	beq.n	8026ce4 <_dtoa_r+0x4f4>
 8026cdc:	0039      	movs	r1, r7
 8026cde:	9803      	ldr	r0, [sp, #12]
 8026ce0:	f001 f82c 	bl	8027d3c <_Bfree>
 8026ce4:	9904      	ldr	r1, [sp, #16]
 8026ce6:	9803      	ldr	r0, [sp, #12]
 8026ce8:	f001 f828 	bl	8027d3c <_Bfree>
 8026cec:	e0ae      	b.n	8026e4c <_dtoa_r+0x65c>
 8026cee:	423d      	tst	r5, r7
 8026cf0:	d005      	beq.n	8026cfe <_dtoa_r+0x50e>
 8026cf2:	6832      	ldr	r2, [r6, #0]
 8026cf4:	6873      	ldr	r3, [r6, #4]
 8026cf6:	f7db fe2d 	bl	8002954 <__aeabi_dmul>
 8026cfa:	003b      	movs	r3, r7
 8026cfc:	3401      	adds	r4, #1
 8026cfe:	106d      	asrs	r5, r5, #1
 8026d00:	3608      	adds	r6, #8
 8026d02:	e75b      	b.n	8026bbc <_dtoa_r+0x3cc>
 8026d04:	9b04      	ldr	r3, [sp, #16]
 8026d06:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d0a:	e77f      	b.n	8026c0c <_dtoa_r+0x41c>
 8026d0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8026ef8 <_dtoa_r+0x708>)
 8026d10:	3a01      	subs	r2, #1
 8026d12:	00d2      	lsls	r2, r2, #3
 8026d14:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026d16:	189b      	adds	r3, r3, r2
 8026d18:	681a      	ldr	r2, [r3, #0]
 8026d1a:	685b      	ldr	r3, [r3, #4]
 8026d1c:	2900      	cmp	r1, #0
 8026d1e:	d04c      	beq.n	8026dba <_dtoa_r+0x5ca>
 8026d20:	2000      	movs	r0, #0
 8026d22:	497c      	ldr	r1, [pc, #496]	@ (8026f14 <_dtoa_r+0x724>)
 8026d24:	f7db f9dc 	bl	80020e0 <__aeabi_ddiv>
 8026d28:	0032      	movs	r2, r6
 8026d2a:	003b      	movs	r3, r7
 8026d2c:	f7dc f8f8 	bl	8002f20 <__aeabi_dsub>
 8026d30:	9a08      	ldr	r2, [sp, #32]
 8026d32:	0006      	movs	r6, r0
 8026d34:	4694      	mov	ip, r2
 8026d36:	000f      	movs	r7, r1
 8026d38:	9b08      	ldr	r3, [sp, #32]
 8026d3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8026d3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d3e:	4463      	add	r3, ip
 8026d40:	9311      	str	r3, [sp, #68]	@ 0x44
 8026d42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d46:	f7dc fd17 	bl	8003778 <__aeabi_d2iz>
 8026d4a:	0005      	movs	r5, r0
 8026d4c:	f7dc fd50 	bl	80037f0 <__aeabi_i2d>
 8026d50:	0002      	movs	r2, r0
 8026d52:	000b      	movs	r3, r1
 8026d54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d58:	f7dc f8e2 	bl	8002f20 <__aeabi_dsub>
 8026d5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026d5e:	3530      	adds	r5, #48	@ 0x30
 8026d60:	1c5c      	adds	r4, r3, #1
 8026d62:	701d      	strb	r5, [r3, #0]
 8026d64:	0032      	movs	r2, r6
 8026d66:	003b      	movs	r3, r7
 8026d68:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d6c:	f7d9 fba6 	bl	80004bc <__aeabi_dcmplt>
 8026d70:	2800      	cmp	r0, #0
 8026d72:	d16b      	bne.n	8026e4c <_dtoa_r+0x65c>
 8026d74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d78:	2000      	movs	r0, #0
 8026d7a:	4961      	ldr	r1, [pc, #388]	@ (8026f00 <_dtoa_r+0x710>)
 8026d7c:	f7dc f8d0 	bl	8002f20 <__aeabi_dsub>
 8026d80:	0032      	movs	r2, r6
 8026d82:	003b      	movs	r3, r7
 8026d84:	f7d9 fb9a 	bl	80004bc <__aeabi_dcmplt>
 8026d88:	2800      	cmp	r0, #0
 8026d8a:	d000      	beq.n	8026d8e <_dtoa_r+0x59e>
 8026d8c:	e0c6      	b.n	8026f1c <_dtoa_r+0x72c>
 8026d8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d90:	42a3      	cmp	r3, r4
 8026d92:	d100      	bne.n	8026d96 <_dtoa_r+0x5a6>
 8026d94:	e765      	b.n	8026c62 <_dtoa_r+0x472>
 8026d96:	2200      	movs	r2, #0
 8026d98:	0030      	movs	r0, r6
 8026d9a:	0039      	movs	r1, r7
 8026d9c:	4b59      	ldr	r3, [pc, #356]	@ (8026f04 <_dtoa_r+0x714>)
 8026d9e:	f7db fdd9 	bl	8002954 <__aeabi_dmul>
 8026da2:	2200      	movs	r2, #0
 8026da4:	0006      	movs	r6, r0
 8026da6:	000f      	movs	r7, r1
 8026da8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026daa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dac:	4b55      	ldr	r3, [pc, #340]	@ (8026f04 <_dtoa_r+0x714>)
 8026dae:	f7db fdd1 	bl	8002954 <__aeabi_dmul>
 8026db2:	9416      	str	r4, [sp, #88]	@ 0x58
 8026db4:	900a      	str	r0, [sp, #40]	@ 0x28
 8026db6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026db8:	e7c3      	b.n	8026d42 <_dtoa_r+0x552>
 8026dba:	0030      	movs	r0, r6
 8026dbc:	0039      	movs	r1, r7
 8026dbe:	f7db fdc9 	bl	8002954 <__aeabi_dmul>
 8026dc2:	9d08      	ldr	r5, [sp, #32]
 8026dc4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026dc6:	002b      	movs	r3, r5
 8026dc8:	4694      	mov	ip, r2
 8026dca:	9016      	str	r0, [sp, #88]	@ 0x58
 8026dcc:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026dce:	4463      	add	r3, ip
 8026dd0:	9319      	str	r3, [sp, #100]	@ 0x64
 8026dd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026dd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dd6:	f7dc fccf 	bl	8003778 <__aeabi_d2iz>
 8026dda:	0004      	movs	r4, r0
 8026ddc:	f7dc fd08 	bl	80037f0 <__aeabi_i2d>
 8026de0:	000b      	movs	r3, r1
 8026de2:	0002      	movs	r2, r0
 8026de4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026de6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026de8:	f7dc f89a 	bl	8002f20 <__aeabi_dsub>
 8026dec:	3430      	adds	r4, #48	@ 0x30
 8026dee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026df0:	702c      	strb	r4, [r5, #0]
 8026df2:	3501      	adds	r5, #1
 8026df4:	0006      	movs	r6, r0
 8026df6:	000f      	movs	r7, r1
 8026df8:	42ab      	cmp	r3, r5
 8026dfa:	d12a      	bne.n	8026e52 <_dtoa_r+0x662>
 8026dfc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8026dfe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026e00:	9b08      	ldr	r3, [sp, #32]
 8026e02:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026e04:	469c      	mov	ip, r3
 8026e06:	2200      	movs	r2, #0
 8026e08:	4b42      	ldr	r3, [pc, #264]	@ (8026f14 <_dtoa_r+0x724>)
 8026e0a:	4464      	add	r4, ip
 8026e0c:	f7da fda2 	bl	8001954 <__aeabi_dadd>
 8026e10:	0002      	movs	r2, r0
 8026e12:	000b      	movs	r3, r1
 8026e14:	0030      	movs	r0, r6
 8026e16:	0039      	movs	r1, r7
 8026e18:	f7d9 fb64 	bl	80004e4 <__aeabi_dcmpgt>
 8026e1c:	2800      	cmp	r0, #0
 8026e1e:	d000      	beq.n	8026e22 <_dtoa_r+0x632>
 8026e20:	e07c      	b.n	8026f1c <_dtoa_r+0x72c>
 8026e22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026e24:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026e26:	2000      	movs	r0, #0
 8026e28:	493a      	ldr	r1, [pc, #232]	@ (8026f14 <_dtoa_r+0x724>)
 8026e2a:	f7dc f879 	bl	8002f20 <__aeabi_dsub>
 8026e2e:	0002      	movs	r2, r0
 8026e30:	000b      	movs	r3, r1
 8026e32:	0030      	movs	r0, r6
 8026e34:	0039      	movs	r1, r7
 8026e36:	f7d9 fb41 	bl	80004bc <__aeabi_dcmplt>
 8026e3a:	2800      	cmp	r0, #0
 8026e3c:	d100      	bne.n	8026e40 <_dtoa_r+0x650>
 8026e3e:	e710      	b.n	8026c62 <_dtoa_r+0x472>
 8026e40:	0023      	movs	r3, r4
 8026e42:	3c01      	subs	r4, #1
 8026e44:	7822      	ldrb	r2, [r4, #0]
 8026e46:	2a30      	cmp	r2, #48	@ 0x30
 8026e48:	d0fa      	beq.n	8026e40 <_dtoa_r+0x650>
 8026e4a:	001c      	movs	r4, r3
 8026e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026e4e:	9304      	str	r3, [sp, #16]
 8026e50:	e042      	b.n	8026ed8 <_dtoa_r+0x6e8>
 8026e52:	2200      	movs	r2, #0
 8026e54:	4b2b      	ldr	r3, [pc, #172]	@ (8026f04 <_dtoa_r+0x714>)
 8026e56:	f7db fd7d 	bl	8002954 <__aeabi_dmul>
 8026e5a:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e5e:	e7b8      	b.n	8026dd2 <_dtoa_r+0x5e2>
 8026e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e62:	9d08      	ldr	r5, [sp, #32]
 8026e64:	3b01      	subs	r3, #1
 8026e66:	195b      	adds	r3, r3, r5
 8026e68:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026e6a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026e6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e6e:	9a06      	ldr	r2, [sp, #24]
 8026e70:	9b07      	ldr	r3, [sp, #28]
 8026e72:	0030      	movs	r0, r6
 8026e74:	0039      	movs	r1, r7
 8026e76:	f7db f933 	bl	80020e0 <__aeabi_ddiv>
 8026e7a:	f7dc fc7d 	bl	8003778 <__aeabi_d2iz>
 8026e7e:	9009      	str	r0, [sp, #36]	@ 0x24
 8026e80:	f7dc fcb6 	bl	80037f0 <__aeabi_i2d>
 8026e84:	9a06      	ldr	r2, [sp, #24]
 8026e86:	9b07      	ldr	r3, [sp, #28]
 8026e88:	f7db fd64 	bl	8002954 <__aeabi_dmul>
 8026e8c:	0002      	movs	r2, r0
 8026e8e:	000b      	movs	r3, r1
 8026e90:	0030      	movs	r0, r6
 8026e92:	0039      	movs	r1, r7
 8026e94:	f7dc f844 	bl	8002f20 <__aeabi_dsub>
 8026e98:	002b      	movs	r3, r5
 8026e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026e9c:	3501      	adds	r5, #1
 8026e9e:	3230      	adds	r2, #48	@ 0x30
 8026ea0:	701a      	strb	r2, [r3, #0]
 8026ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ea4:	002c      	movs	r4, r5
 8026ea6:	429a      	cmp	r2, r3
 8026ea8:	d14b      	bne.n	8026f42 <_dtoa_r+0x752>
 8026eaa:	0002      	movs	r2, r0
 8026eac:	000b      	movs	r3, r1
 8026eae:	f7da fd51 	bl	8001954 <__aeabi_dadd>
 8026eb2:	9a06      	ldr	r2, [sp, #24]
 8026eb4:	9b07      	ldr	r3, [sp, #28]
 8026eb6:	0006      	movs	r6, r0
 8026eb8:	000f      	movs	r7, r1
 8026eba:	f7d9 fb13 	bl	80004e4 <__aeabi_dcmpgt>
 8026ebe:	2800      	cmp	r0, #0
 8026ec0:	d12a      	bne.n	8026f18 <_dtoa_r+0x728>
 8026ec2:	9a06      	ldr	r2, [sp, #24]
 8026ec4:	9b07      	ldr	r3, [sp, #28]
 8026ec6:	0030      	movs	r0, r6
 8026ec8:	0039      	movs	r1, r7
 8026eca:	f7d9 faf1 	bl	80004b0 <__aeabi_dcmpeq>
 8026ece:	2800      	cmp	r0, #0
 8026ed0:	d002      	beq.n	8026ed8 <_dtoa_r+0x6e8>
 8026ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ed4:	07dd      	lsls	r5, r3, #31
 8026ed6:	d41f      	bmi.n	8026f18 <_dtoa_r+0x728>
 8026ed8:	9905      	ldr	r1, [sp, #20]
 8026eda:	9803      	ldr	r0, [sp, #12]
 8026edc:	f000 ff2e 	bl	8027d3c <_Bfree>
 8026ee0:	2300      	movs	r3, #0
 8026ee2:	7023      	strb	r3, [r4, #0]
 8026ee4:	9b04      	ldr	r3, [sp, #16]
 8026ee6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026ee8:	3301      	adds	r3, #1
 8026eea:	6013      	str	r3, [r2, #0]
 8026eec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026eee:	2b00      	cmp	r3, #0
 8026ef0:	d100      	bne.n	8026ef4 <_dtoa_r+0x704>
 8026ef2:	e4c7      	b.n	8026884 <_dtoa_r+0x94>
 8026ef4:	601c      	str	r4, [r3, #0]
 8026ef6:	e4c5      	b.n	8026884 <_dtoa_r+0x94>
 8026ef8:	0802edf0 	.word	0x0802edf0
 8026efc:	0802edc8 	.word	0x0802edc8
 8026f00:	3ff00000 	.word	0x3ff00000
 8026f04:	40240000 	.word	0x40240000
 8026f08:	401c0000 	.word	0x401c0000
 8026f0c:	fcc00000 	.word	0xfcc00000
 8026f10:	40140000 	.word	0x40140000
 8026f14:	3fe00000 	.word	0x3fe00000
 8026f18:	9b04      	ldr	r3, [sp, #16]
 8026f1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8026f1c:	0023      	movs	r3, r4
 8026f1e:	001c      	movs	r4, r3
 8026f20:	3b01      	subs	r3, #1
 8026f22:	781a      	ldrb	r2, [r3, #0]
 8026f24:	2a39      	cmp	r2, #57	@ 0x39
 8026f26:	d108      	bne.n	8026f3a <_dtoa_r+0x74a>
 8026f28:	9a08      	ldr	r2, [sp, #32]
 8026f2a:	429a      	cmp	r2, r3
 8026f2c:	d1f7      	bne.n	8026f1e <_dtoa_r+0x72e>
 8026f2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026f30:	9908      	ldr	r1, [sp, #32]
 8026f32:	3201      	adds	r2, #1
 8026f34:	920c      	str	r2, [sp, #48]	@ 0x30
 8026f36:	2230      	movs	r2, #48	@ 0x30
 8026f38:	700a      	strb	r2, [r1, #0]
 8026f3a:	781a      	ldrb	r2, [r3, #0]
 8026f3c:	3201      	adds	r2, #1
 8026f3e:	701a      	strb	r2, [r3, #0]
 8026f40:	e784      	b.n	8026e4c <_dtoa_r+0x65c>
 8026f42:	2200      	movs	r2, #0
 8026f44:	4bc6      	ldr	r3, [pc, #792]	@ (8027260 <_dtoa_r+0xa70>)
 8026f46:	f7db fd05 	bl	8002954 <__aeabi_dmul>
 8026f4a:	2200      	movs	r2, #0
 8026f4c:	2300      	movs	r3, #0
 8026f4e:	0006      	movs	r6, r0
 8026f50:	000f      	movs	r7, r1
 8026f52:	f7d9 faad 	bl	80004b0 <__aeabi_dcmpeq>
 8026f56:	2800      	cmp	r0, #0
 8026f58:	d089      	beq.n	8026e6e <_dtoa_r+0x67e>
 8026f5a:	e7bd      	b.n	8026ed8 <_dtoa_r+0x6e8>
 8026f5c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026f5e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026f60:	9c06      	ldr	r4, [sp, #24]
 8026f62:	2f00      	cmp	r7, #0
 8026f64:	d014      	beq.n	8026f90 <_dtoa_r+0x7a0>
 8026f66:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026f68:	2a01      	cmp	r2, #1
 8026f6a:	dd00      	ble.n	8026f6e <_dtoa_r+0x77e>
 8026f6c:	e0e4      	b.n	8027138 <_dtoa_r+0x948>
 8026f6e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026f70:	2a00      	cmp	r2, #0
 8026f72:	d100      	bne.n	8026f76 <_dtoa_r+0x786>
 8026f74:	e0da      	b.n	802712c <_dtoa_r+0x93c>
 8026f76:	4abb      	ldr	r2, [pc, #748]	@ (8027264 <_dtoa_r+0xa74>)
 8026f78:	189b      	adds	r3, r3, r2
 8026f7a:	9a06      	ldr	r2, [sp, #24]
 8026f7c:	2101      	movs	r1, #1
 8026f7e:	18d2      	adds	r2, r2, r3
 8026f80:	9206      	str	r2, [sp, #24]
 8026f82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f84:	9803      	ldr	r0, [sp, #12]
 8026f86:	18d3      	adds	r3, r2, r3
 8026f88:	930d      	str	r3, [sp, #52]	@ 0x34
 8026f8a:	f000 ffdb 	bl	8027f44 <__i2b>
 8026f8e:	0007      	movs	r7, r0
 8026f90:	2c00      	cmp	r4, #0
 8026f92:	d00e      	beq.n	8026fb2 <_dtoa_r+0x7c2>
 8026f94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	dd0b      	ble.n	8026fb2 <_dtoa_r+0x7c2>
 8026f9a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f9c:	0023      	movs	r3, r4
 8026f9e:	4294      	cmp	r4, r2
 8026fa0:	dd00      	ble.n	8026fa4 <_dtoa_r+0x7b4>
 8026fa2:	0013      	movs	r3, r2
 8026fa4:	9a06      	ldr	r2, [sp, #24]
 8026fa6:	1ae4      	subs	r4, r4, r3
 8026fa8:	1ad2      	subs	r2, r2, r3
 8026faa:	9206      	str	r2, [sp, #24]
 8026fac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026fae:	1ad3      	subs	r3, r2, r3
 8026fb0:	930d      	str	r3, [sp, #52]	@ 0x34
 8026fb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026fb4:	2b00      	cmp	r3, #0
 8026fb6:	d021      	beq.n	8026ffc <_dtoa_r+0x80c>
 8026fb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	d100      	bne.n	8026fc0 <_dtoa_r+0x7d0>
 8026fbe:	e0d3      	b.n	8027168 <_dtoa_r+0x978>
 8026fc0:	9e05      	ldr	r6, [sp, #20]
 8026fc2:	2d00      	cmp	r5, #0
 8026fc4:	d014      	beq.n	8026ff0 <_dtoa_r+0x800>
 8026fc6:	0039      	movs	r1, r7
 8026fc8:	002a      	movs	r2, r5
 8026fca:	9803      	ldr	r0, [sp, #12]
 8026fcc:	f001 f87c 	bl	80280c8 <__pow5mult>
 8026fd0:	9a05      	ldr	r2, [sp, #20]
 8026fd2:	0001      	movs	r1, r0
 8026fd4:	0007      	movs	r7, r0
 8026fd6:	9803      	ldr	r0, [sp, #12]
 8026fd8:	f000 ffcc 	bl	8027f74 <__multiply>
 8026fdc:	0006      	movs	r6, r0
 8026fde:	9905      	ldr	r1, [sp, #20]
 8026fe0:	9803      	ldr	r0, [sp, #12]
 8026fe2:	f000 feab 	bl	8027d3c <_Bfree>
 8026fe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026fe8:	9605      	str	r6, [sp, #20]
 8026fea:	1b5b      	subs	r3, r3, r5
 8026fec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026fee:	d005      	beq.n	8026ffc <_dtoa_r+0x80c>
 8026ff0:	0031      	movs	r1, r6
 8026ff2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026ff4:	9803      	ldr	r0, [sp, #12]
 8026ff6:	f001 f867 	bl	80280c8 <__pow5mult>
 8026ffa:	9005      	str	r0, [sp, #20]
 8026ffc:	2101      	movs	r1, #1
 8026ffe:	9803      	ldr	r0, [sp, #12]
 8027000:	f000 ffa0 	bl	8027f44 <__i2b>
 8027004:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027006:	0006      	movs	r6, r0
 8027008:	2b00      	cmp	r3, #0
 802700a:	d100      	bne.n	802700e <_dtoa_r+0x81e>
 802700c:	e1bc      	b.n	8027388 <_dtoa_r+0xb98>
 802700e:	001a      	movs	r2, r3
 8027010:	0001      	movs	r1, r0
 8027012:	9803      	ldr	r0, [sp, #12]
 8027014:	f001 f858 	bl	80280c8 <__pow5mult>
 8027018:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802701a:	0006      	movs	r6, r0
 802701c:	2500      	movs	r5, #0
 802701e:	2b01      	cmp	r3, #1
 8027020:	dc16      	bgt.n	8027050 <_dtoa_r+0x860>
 8027022:	2500      	movs	r5, #0
 8027024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027026:	42ab      	cmp	r3, r5
 8027028:	d10e      	bne.n	8027048 <_dtoa_r+0x858>
 802702a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802702c:	031b      	lsls	r3, r3, #12
 802702e:	42ab      	cmp	r3, r5
 8027030:	d10a      	bne.n	8027048 <_dtoa_r+0x858>
 8027032:	4b8d      	ldr	r3, [pc, #564]	@ (8027268 <_dtoa_r+0xa78>)
 8027034:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027036:	4213      	tst	r3, r2
 8027038:	d006      	beq.n	8027048 <_dtoa_r+0x858>
 802703a:	9b06      	ldr	r3, [sp, #24]
 802703c:	3501      	adds	r5, #1
 802703e:	3301      	adds	r3, #1
 8027040:	9306      	str	r3, [sp, #24]
 8027042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027044:	3301      	adds	r3, #1
 8027046:	930d      	str	r3, [sp, #52]	@ 0x34
 8027048:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802704a:	2001      	movs	r0, #1
 802704c:	2b00      	cmp	r3, #0
 802704e:	d008      	beq.n	8027062 <_dtoa_r+0x872>
 8027050:	6933      	ldr	r3, [r6, #16]
 8027052:	3303      	adds	r3, #3
 8027054:	009b      	lsls	r3, r3, #2
 8027056:	18f3      	adds	r3, r6, r3
 8027058:	6858      	ldr	r0, [r3, #4]
 802705a:	f000 ff23 	bl	8027ea4 <__hi0bits>
 802705e:	2320      	movs	r3, #32
 8027060:	1a18      	subs	r0, r3, r0
 8027062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027064:	1818      	adds	r0, r3, r0
 8027066:	0002      	movs	r2, r0
 8027068:	231f      	movs	r3, #31
 802706a:	401a      	ands	r2, r3
 802706c:	4218      	tst	r0, r3
 802706e:	d100      	bne.n	8027072 <_dtoa_r+0x882>
 8027070:	e081      	b.n	8027176 <_dtoa_r+0x986>
 8027072:	3301      	adds	r3, #1
 8027074:	1a9b      	subs	r3, r3, r2
 8027076:	2b04      	cmp	r3, #4
 8027078:	dd79      	ble.n	802716e <_dtoa_r+0x97e>
 802707a:	231c      	movs	r3, #28
 802707c:	1a9b      	subs	r3, r3, r2
 802707e:	9a06      	ldr	r2, [sp, #24]
 8027080:	18e4      	adds	r4, r4, r3
 8027082:	18d2      	adds	r2, r2, r3
 8027084:	9206      	str	r2, [sp, #24]
 8027086:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027088:	18d3      	adds	r3, r2, r3
 802708a:	930d      	str	r3, [sp, #52]	@ 0x34
 802708c:	9b06      	ldr	r3, [sp, #24]
 802708e:	2b00      	cmp	r3, #0
 8027090:	dd05      	ble.n	802709e <_dtoa_r+0x8ae>
 8027092:	001a      	movs	r2, r3
 8027094:	9905      	ldr	r1, [sp, #20]
 8027096:	9803      	ldr	r0, [sp, #12]
 8027098:	f001 f872 	bl	8028180 <__lshift>
 802709c:	9005      	str	r0, [sp, #20]
 802709e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80270a0:	2b00      	cmp	r3, #0
 80270a2:	dd05      	ble.n	80270b0 <_dtoa_r+0x8c0>
 80270a4:	0031      	movs	r1, r6
 80270a6:	001a      	movs	r2, r3
 80270a8:	9803      	ldr	r0, [sp, #12]
 80270aa:	f001 f869 	bl	8028180 <__lshift>
 80270ae:	0006      	movs	r6, r0
 80270b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80270b2:	2b00      	cmp	r3, #0
 80270b4:	d061      	beq.n	802717a <_dtoa_r+0x98a>
 80270b6:	0031      	movs	r1, r6
 80270b8:	9805      	ldr	r0, [sp, #20]
 80270ba:	f001 f8cd 	bl	8028258 <__mcmp>
 80270be:	2800      	cmp	r0, #0
 80270c0:	da5b      	bge.n	802717a <_dtoa_r+0x98a>
 80270c2:	9b04      	ldr	r3, [sp, #16]
 80270c4:	220a      	movs	r2, #10
 80270c6:	3b01      	subs	r3, #1
 80270c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80270ca:	9905      	ldr	r1, [sp, #20]
 80270cc:	2300      	movs	r3, #0
 80270ce:	9803      	ldr	r0, [sp, #12]
 80270d0:	f000 fe58 	bl	8027d84 <__multadd>
 80270d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80270d6:	9005      	str	r0, [sp, #20]
 80270d8:	2b00      	cmp	r3, #0
 80270da:	d100      	bne.n	80270de <_dtoa_r+0x8ee>
 80270dc:	e15b      	b.n	8027396 <_dtoa_r+0xba6>
 80270de:	2300      	movs	r3, #0
 80270e0:	0039      	movs	r1, r7
 80270e2:	220a      	movs	r2, #10
 80270e4:	9803      	ldr	r0, [sp, #12]
 80270e6:	f000 fe4d 	bl	8027d84 <__multadd>
 80270ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80270ec:	0007      	movs	r7, r0
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	dc4d      	bgt.n	802718e <_dtoa_r+0x99e>
 80270f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80270f4:	2b02      	cmp	r3, #2
 80270f6:	dd46      	ble.n	8027186 <_dtoa_r+0x996>
 80270f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80270fa:	2b00      	cmp	r3, #0
 80270fc:	d000      	beq.n	8027100 <_dtoa_r+0x910>
 80270fe:	e5db      	b.n	8026cb8 <_dtoa_r+0x4c8>
 8027100:	0031      	movs	r1, r6
 8027102:	2205      	movs	r2, #5
 8027104:	9803      	ldr	r0, [sp, #12]
 8027106:	f000 fe3d 	bl	8027d84 <__multadd>
 802710a:	0006      	movs	r6, r0
 802710c:	0001      	movs	r1, r0
 802710e:	9805      	ldr	r0, [sp, #20]
 8027110:	f001 f8a2 	bl	8028258 <__mcmp>
 8027114:	2800      	cmp	r0, #0
 8027116:	dc00      	bgt.n	802711a <_dtoa_r+0x92a>
 8027118:	e5ce      	b.n	8026cb8 <_dtoa_r+0x4c8>
 802711a:	9b08      	ldr	r3, [sp, #32]
 802711c:	9a08      	ldr	r2, [sp, #32]
 802711e:	1c5c      	adds	r4, r3, #1
 8027120:	2331      	movs	r3, #49	@ 0x31
 8027122:	7013      	strb	r3, [r2, #0]
 8027124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027126:	3301      	adds	r3, #1
 8027128:	930c      	str	r3, [sp, #48]	@ 0x30
 802712a:	e5c9      	b.n	8026cc0 <_dtoa_r+0x4d0>
 802712c:	2336      	movs	r3, #54	@ 0x36
 802712e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027130:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027132:	1a9b      	subs	r3, r3, r2
 8027134:	9c06      	ldr	r4, [sp, #24]
 8027136:	e720      	b.n	8026f7a <_dtoa_r+0x78a>
 8027138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802713a:	1e5d      	subs	r5, r3, #1
 802713c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802713e:	42ab      	cmp	r3, r5
 8027140:	db08      	blt.n	8027154 <_dtoa_r+0x964>
 8027142:	1b5d      	subs	r5, r3, r5
 8027144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027146:	2b00      	cmp	r3, #0
 8027148:	daf4      	bge.n	8027134 <_dtoa_r+0x944>
 802714a:	9b06      	ldr	r3, [sp, #24]
 802714c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802714e:	1a9c      	subs	r4, r3, r2
 8027150:	2300      	movs	r3, #0
 8027152:	e712      	b.n	8026f7a <_dtoa_r+0x78a>
 8027154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027156:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027158:	1aeb      	subs	r3, r5, r3
 802715a:	18d3      	adds	r3, r2, r3
 802715c:	9314      	str	r3, [sp, #80]	@ 0x50
 802715e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027160:	9c06      	ldr	r4, [sp, #24]
 8027162:	2500      	movs	r5, #0
 8027164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027166:	e708      	b.n	8026f7a <_dtoa_r+0x78a>
 8027168:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802716a:	9905      	ldr	r1, [sp, #20]
 802716c:	e742      	b.n	8026ff4 <_dtoa_r+0x804>
 802716e:	2b04      	cmp	r3, #4
 8027170:	d08c      	beq.n	802708c <_dtoa_r+0x89c>
 8027172:	331c      	adds	r3, #28
 8027174:	e783      	b.n	802707e <_dtoa_r+0x88e>
 8027176:	0013      	movs	r3, r2
 8027178:	e7fb      	b.n	8027172 <_dtoa_r+0x982>
 802717a:	9b04      	ldr	r3, [sp, #16]
 802717c:	930c      	str	r3, [sp, #48]	@ 0x30
 802717e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027180:	930e      	str	r3, [sp, #56]	@ 0x38
 8027182:	2b00      	cmp	r3, #0
 8027184:	ddb5      	ble.n	80270f2 <_dtoa_r+0x902>
 8027186:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027188:	2b00      	cmp	r3, #0
 802718a:	d100      	bne.n	802718e <_dtoa_r+0x99e>
 802718c:	e107      	b.n	802739e <_dtoa_r+0xbae>
 802718e:	2c00      	cmp	r4, #0
 8027190:	dd05      	ble.n	802719e <_dtoa_r+0x9ae>
 8027192:	0039      	movs	r1, r7
 8027194:	0022      	movs	r2, r4
 8027196:	9803      	ldr	r0, [sp, #12]
 8027198:	f000 fff2 	bl	8028180 <__lshift>
 802719c:	0007      	movs	r7, r0
 802719e:	9704      	str	r7, [sp, #16]
 80271a0:	2d00      	cmp	r5, #0
 80271a2:	d020      	beq.n	80271e6 <_dtoa_r+0x9f6>
 80271a4:	6879      	ldr	r1, [r7, #4]
 80271a6:	9803      	ldr	r0, [sp, #12]
 80271a8:	f000 fd84 	bl	8027cb4 <_Balloc>
 80271ac:	1e04      	subs	r4, r0, #0
 80271ae:	d10c      	bne.n	80271ca <_dtoa_r+0x9da>
 80271b0:	0022      	movs	r2, r4
 80271b2:	4b2e      	ldr	r3, [pc, #184]	@ (802726c <_dtoa_r+0xa7c>)
 80271b4:	482e      	ldr	r0, [pc, #184]	@ (8027270 <_dtoa_r+0xa80>)
 80271b6:	492f      	ldr	r1, [pc, #188]	@ (8027274 <_dtoa_r+0xa84>)
 80271b8:	f7ff fb2f 	bl	802681a <_dtoa_r+0x2a>
 80271bc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80271be:	0037      	movs	r7, r6
 80271c0:	e7ab      	b.n	802711a <_dtoa_r+0x92a>
 80271c2:	9b04      	ldr	r3, [sp, #16]
 80271c4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80271c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80271c8:	e7f9      	b.n	80271be <_dtoa_r+0x9ce>
 80271ca:	0039      	movs	r1, r7
 80271cc:	693a      	ldr	r2, [r7, #16]
 80271ce:	310c      	adds	r1, #12
 80271d0:	3202      	adds	r2, #2
 80271d2:	0092      	lsls	r2, r2, #2
 80271d4:	300c      	adds	r0, #12
 80271d6:	f7ff fa75 	bl	80266c4 <memcpy>
 80271da:	2201      	movs	r2, #1
 80271dc:	0021      	movs	r1, r4
 80271de:	9803      	ldr	r0, [sp, #12]
 80271e0:	f000 ffce 	bl	8028180 <__lshift>
 80271e4:	9004      	str	r0, [sp, #16]
 80271e6:	9b08      	ldr	r3, [sp, #32]
 80271e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80271ea:	9306      	str	r3, [sp, #24]
 80271ec:	3b01      	subs	r3, #1
 80271ee:	189b      	adds	r3, r3, r2
 80271f0:	2201      	movs	r2, #1
 80271f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80271f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80271f6:	4013      	ands	r3, r2
 80271f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80271fa:	0031      	movs	r1, r6
 80271fc:	9805      	ldr	r0, [sp, #20]
 80271fe:	f7ff fa71 	bl	80266e4 <quorem>
 8027202:	0039      	movs	r1, r7
 8027204:	0005      	movs	r5, r0
 8027206:	900a      	str	r0, [sp, #40]	@ 0x28
 8027208:	9805      	ldr	r0, [sp, #20]
 802720a:	f001 f825 	bl	8028258 <__mcmp>
 802720e:	9a04      	ldr	r2, [sp, #16]
 8027210:	900d      	str	r0, [sp, #52]	@ 0x34
 8027212:	0031      	movs	r1, r6
 8027214:	9803      	ldr	r0, [sp, #12]
 8027216:	f001 f83b 	bl	8028290 <__mdiff>
 802721a:	2201      	movs	r2, #1
 802721c:	68c3      	ldr	r3, [r0, #12]
 802721e:	0004      	movs	r4, r0
 8027220:	3530      	adds	r5, #48	@ 0x30
 8027222:	9209      	str	r2, [sp, #36]	@ 0x24
 8027224:	2b00      	cmp	r3, #0
 8027226:	d104      	bne.n	8027232 <_dtoa_r+0xa42>
 8027228:	0001      	movs	r1, r0
 802722a:	9805      	ldr	r0, [sp, #20]
 802722c:	f001 f814 	bl	8028258 <__mcmp>
 8027230:	9009      	str	r0, [sp, #36]	@ 0x24
 8027232:	0021      	movs	r1, r4
 8027234:	9803      	ldr	r0, [sp, #12]
 8027236:	f000 fd81 	bl	8027d3c <_Bfree>
 802723a:	9b06      	ldr	r3, [sp, #24]
 802723c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802723e:	1c5c      	adds	r4, r3, #1
 8027240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027242:	4313      	orrs	r3, r2
 8027244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027246:	4313      	orrs	r3, r2
 8027248:	d116      	bne.n	8027278 <_dtoa_r+0xa88>
 802724a:	2d39      	cmp	r5, #57	@ 0x39
 802724c:	d02f      	beq.n	80272ae <_dtoa_r+0xabe>
 802724e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027250:	2b00      	cmp	r3, #0
 8027252:	dd01      	ble.n	8027258 <_dtoa_r+0xa68>
 8027254:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027256:	3531      	adds	r5, #49	@ 0x31
 8027258:	9b06      	ldr	r3, [sp, #24]
 802725a:	701d      	strb	r5, [r3, #0]
 802725c:	e532      	b.n	8026cc4 <_dtoa_r+0x4d4>
 802725e:	46c0      	nop			@ (mov r8, r8)
 8027260:	40240000 	.word	0x40240000
 8027264:	00000433 	.word	0x00000433
 8027268:	7ff00000 	.word	0x7ff00000
 802726c:	0802eb4e 	.word	0x0802eb4e
 8027270:	0802eaf6 	.word	0x0802eaf6
 8027274:	000002ef 	.word	0x000002ef
 8027278:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802727a:	2b00      	cmp	r3, #0
 802727c:	db04      	blt.n	8027288 <_dtoa_r+0xa98>
 802727e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027280:	4313      	orrs	r3, r2
 8027282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027284:	4313      	orrs	r3, r2
 8027286:	d11e      	bne.n	80272c6 <_dtoa_r+0xad6>
 8027288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802728a:	2b00      	cmp	r3, #0
 802728c:	dde4      	ble.n	8027258 <_dtoa_r+0xa68>
 802728e:	9905      	ldr	r1, [sp, #20]
 8027290:	2201      	movs	r2, #1
 8027292:	9803      	ldr	r0, [sp, #12]
 8027294:	f000 ff74 	bl	8028180 <__lshift>
 8027298:	0031      	movs	r1, r6
 802729a:	9005      	str	r0, [sp, #20]
 802729c:	f000 ffdc 	bl	8028258 <__mcmp>
 80272a0:	2800      	cmp	r0, #0
 80272a2:	dc02      	bgt.n	80272aa <_dtoa_r+0xaba>
 80272a4:	d1d8      	bne.n	8027258 <_dtoa_r+0xa68>
 80272a6:	07eb      	lsls	r3, r5, #31
 80272a8:	d5d6      	bpl.n	8027258 <_dtoa_r+0xa68>
 80272aa:	2d39      	cmp	r5, #57	@ 0x39
 80272ac:	d1d2      	bne.n	8027254 <_dtoa_r+0xa64>
 80272ae:	2339      	movs	r3, #57	@ 0x39
 80272b0:	9a06      	ldr	r2, [sp, #24]
 80272b2:	7013      	strb	r3, [r2, #0]
 80272b4:	0023      	movs	r3, r4
 80272b6:	001c      	movs	r4, r3
 80272b8:	3b01      	subs	r3, #1
 80272ba:	781a      	ldrb	r2, [r3, #0]
 80272bc:	2a39      	cmp	r2, #57	@ 0x39
 80272be:	d050      	beq.n	8027362 <_dtoa_r+0xb72>
 80272c0:	3201      	adds	r2, #1
 80272c2:	701a      	strb	r2, [r3, #0]
 80272c4:	e4fe      	b.n	8026cc4 <_dtoa_r+0x4d4>
 80272c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272c8:	2b00      	cmp	r3, #0
 80272ca:	dd03      	ble.n	80272d4 <_dtoa_r+0xae4>
 80272cc:	2d39      	cmp	r5, #57	@ 0x39
 80272ce:	d0ee      	beq.n	80272ae <_dtoa_r+0xabe>
 80272d0:	3501      	adds	r5, #1
 80272d2:	e7c1      	b.n	8027258 <_dtoa_r+0xa68>
 80272d4:	9b06      	ldr	r3, [sp, #24]
 80272d6:	9a06      	ldr	r2, [sp, #24]
 80272d8:	701d      	strb	r5, [r3, #0]
 80272da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272dc:	4293      	cmp	r3, r2
 80272de:	d02b      	beq.n	8027338 <_dtoa_r+0xb48>
 80272e0:	2300      	movs	r3, #0
 80272e2:	220a      	movs	r2, #10
 80272e4:	9905      	ldr	r1, [sp, #20]
 80272e6:	9803      	ldr	r0, [sp, #12]
 80272e8:	f000 fd4c 	bl	8027d84 <__multadd>
 80272ec:	9b04      	ldr	r3, [sp, #16]
 80272ee:	9005      	str	r0, [sp, #20]
 80272f0:	429f      	cmp	r7, r3
 80272f2:	d109      	bne.n	8027308 <_dtoa_r+0xb18>
 80272f4:	0039      	movs	r1, r7
 80272f6:	2300      	movs	r3, #0
 80272f8:	220a      	movs	r2, #10
 80272fa:	9803      	ldr	r0, [sp, #12]
 80272fc:	f000 fd42 	bl	8027d84 <__multadd>
 8027300:	0007      	movs	r7, r0
 8027302:	9004      	str	r0, [sp, #16]
 8027304:	9406      	str	r4, [sp, #24]
 8027306:	e778      	b.n	80271fa <_dtoa_r+0xa0a>
 8027308:	0039      	movs	r1, r7
 802730a:	2300      	movs	r3, #0
 802730c:	220a      	movs	r2, #10
 802730e:	9803      	ldr	r0, [sp, #12]
 8027310:	f000 fd38 	bl	8027d84 <__multadd>
 8027314:	2300      	movs	r3, #0
 8027316:	0007      	movs	r7, r0
 8027318:	220a      	movs	r2, #10
 802731a:	9904      	ldr	r1, [sp, #16]
 802731c:	9803      	ldr	r0, [sp, #12]
 802731e:	f000 fd31 	bl	8027d84 <__multadd>
 8027322:	9004      	str	r0, [sp, #16]
 8027324:	e7ee      	b.n	8027304 <_dtoa_r+0xb14>
 8027326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027328:	2401      	movs	r4, #1
 802732a:	2b00      	cmp	r3, #0
 802732c:	dd00      	ble.n	8027330 <_dtoa_r+0xb40>
 802732e:	001c      	movs	r4, r3
 8027330:	9704      	str	r7, [sp, #16]
 8027332:	2700      	movs	r7, #0
 8027334:	9b08      	ldr	r3, [sp, #32]
 8027336:	191c      	adds	r4, r3, r4
 8027338:	9905      	ldr	r1, [sp, #20]
 802733a:	2201      	movs	r2, #1
 802733c:	9803      	ldr	r0, [sp, #12]
 802733e:	f000 ff1f 	bl	8028180 <__lshift>
 8027342:	0031      	movs	r1, r6
 8027344:	9005      	str	r0, [sp, #20]
 8027346:	f000 ff87 	bl	8028258 <__mcmp>
 802734a:	2800      	cmp	r0, #0
 802734c:	dcb2      	bgt.n	80272b4 <_dtoa_r+0xac4>
 802734e:	d101      	bne.n	8027354 <_dtoa_r+0xb64>
 8027350:	07ed      	lsls	r5, r5, #31
 8027352:	d4af      	bmi.n	80272b4 <_dtoa_r+0xac4>
 8027354:	0023      	movs	r3, r4
 8027356:	001c      	movs	r4, r3
 8027358:	3b01      	subs	r3, #1
 802735a:	781a      	ldrb	r2, [r3, #0]
 802735c:	2a30      	cmp	r2, #48	@ 0x30
 802735e:	d0fa      	beq.n	8027356 <_dtoa_r+0xb66>
 8027360:	e4b0      	b.n	8026cc4 <_dtoa_r+0x4d4>
 8027362:	9a08      	ldr	r2, [sp, #32]
 8027364:	429a      	cmp	r2, r3
 8027366:	d1a6      	bne.n	80272b6 <_dtoa_r+0xac6>
 8027368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802736a:	3301      	adds	r3, #1
 802736c:	930c      	str	r3, [sp, #48]	@ 0x30
 802736e:	2331      	movs	r3, #49	@ 0x31
 8027370:	7013      	strb	r3, [r2, #0]
 8027372:	e4a7      	b.n	8026cc4 <_dtoa_r+0x4d4>
 8027374:	4b14      	ldr	r3, [pc, #80]	@ (80273c8 <_dtoa_r+0xbd8>)
 8027376:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027378:	9308      	str	r3, [sp, #32]
 802737a:	4b14      	ldr	r3, [pc, #80]	@ (80273cc <_dtoa_r+0xbdc>)
 802737c:	2a00      	cmp	r2, #0
 802737e:	d001      	beq.n	8027384 <_dtoa_r+0xb94>
 8027380:	f7ff fa7e 	bl	8026880 <_dtoa_r+0x90>
 8027384:	f7ff fa7e 	bl	8026884 <_dtoa_r+0x94>
 8027388:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802738a:	2b01      	cmp	r3, #1
 802738c:	dc00      	bgt.n	8027390 <_dtoa_r+0xba0>
 802738e:	e648      	b.n	8027022 <_dtoa_r+0x832>
 8027390:	2001      	movs	r0, #1
 8027392:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027394:	e665      	b.n	8027062 <_dtoa_r+0x872>
 8027396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027398:	2b00      	cmp	r3, #0
 802739a:	dc00      	bgt.n	802739e <_dtoa_r+0xbae>
 802739c:	e6a9      	b.n	80270f2 <_dtoa_r+0x902>
 802739e:	2400      	movs	r4, #0
 80273a0:	0031      	movs	r1, r6
 80273a2:	9805      	ldr	r0, [sp, #20]
 80273a4:	f7ff f99e 	bl	80266e4 <quorem>
 80273a8:	9b08      	ldr	r3, [sp, #32]
 80273aa:	3030      	adds	r0, #48	@ 0x30
 80273ac:	5518      	strb	r0, [r3, r4]
 80273ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80273b0:	3401      	adds	r4, #1
 80273b2:	0005      	movs	r5, r0
 80273b4:	42a3      	cmp	r3, r4
 80273b6:	ddb6      	ble.n	8027326 <_dtoa_r+0xb36>
 80273b8:	2300      	movs	r3, #0
 80273ba:	220a      	movs	r2, #10
 80273bc:	9905      	ldr	r1, [sp, #20]
 80273be:	9803      	ldr	r0, [sp, #12]
 80273c0:	f000 fce0 	bl	8027d84 <__multadd>
 80273c4:	9005      	str	r0, [sp, #20]
 80273c6:	e7eb      	b.n	80273a0 <_dtoa_r+0xbb0>
 80273c8:	0802ead2 	.word	0x0802ead2
 80273cc:	0802eada 	.word	0x0802eada

080273d0 <_free_r>:
 80273d0:	b570      	push	{r4, r5, r6, lr}
 80273d2:	0005      	movs	r5, r0
 80273d4:	1e0c      	subs	r4, r1, #0
 80273d6:	d010      	beq.n	80273fa <_free_r+0x2a>
 80273d8:	3c04      	subs	r4, #4
 80273da:	6823      	ldr	r3, [r4, #0]
 80273dc:	2b00      	cmp	r3, #0
 80273de:	da00      	bge.n	80273e2 <_free_r+0x12>
 80273e0:	18e4      	adds	r4, r4, r3
 80273e2:	0028      	movs	r0, r5
 80273e4:	f000 fc56 	bl	8027c94 <__malloc_lock>
 80273e8:	4a1d      	ldr	r2, [pc, #116]	@ (8027460 <_free_r+0x90>)
 80273ea:	6813      	ldr	r3, [r2, #0]
 80273ec:	2b00      	cmp	r3, #0
 80273ee:	d105      	bne.n	80273fc <_free_r+0x2c>
 80273f0:	6063      	str	r3, [r4, #4]
 80273f2:	6014      	str	r4, [r2, #0]
 80273f4:	0028      	movs	r0, r5
 80273f6:	f000 fc55 	bl	8027ca4 <__malloc_unlock>
 80273fa:	bd70      	pop	{r4, r5, r6, pc}
 80273fc:	42a3      	cmp	r3, r4
 80273fe:	d908      	bls.n	8027412 <_free_r+0x42>
 8027400:	6820      	ldr	r0, [r4, #0]
 8027402:	1821      	adds	r1, r4, r0
 8027404:	428b      	cmp	r3, r1
 8027406:	d1f3      	bne.n	80273f0 <_free_r+0x20>
 8027408:	6819      	ldr	r1, [r3, #0]
 802740a:	685b      	ldr	r3, [r3, #4]
 802740c:	1809      	adds	r1, r1, r0
 802740e:	6021      	str	r1, [r4, #0]
 8027410:	e7ee      	b.n	80273f0 <_free_r+0x20>
 8027412:	001a      	movs	r2, r3
 8027414:	685b      	ldr	r3, [r3, #4]
 8027416:	2b00      	cmp	r3, #0
 8027418:	d001      	beq.n	802741e <_free_r+0x4e>
 802741a:	42a3      	cmp	r3, r4
 802741c:	d9f9      	bls.n	8027412 <_free_r+0x42>
 802741e:	6811      	ldr	r1, [r2, #0]
 8027420:	1850      	adds	r0, r2, r1
 8027422:	42a0      	cmp	r0, r4
 8027424:	d10b      	bne.n	802743e <_free_r+0x6e>
 8027426:	6820      	ldr	r0, [r4, #0]
 8027428:	1809      	adds	r1, r1, r0
 802742a:	1850      	adds	r0, r2, r1
 802742c:	6011      	str	r1, [r2, #0]
 802742e:	4283      	cmp	r3, r0
 8027430:	d1e0      	bne.n	80273f4 <_free_r+0x24>
 8027432:	6818      	ldr	r0, [r3, #0]
 8027434:	685b      	ldr	r3, [r3, #4]
 8027436:	1841      	adds	r1, r0, r1
 8027438:	6011      	str	r1, [r2, #0]
 802743a:	6053      	str	r3, [r2, #4]
 802743c:	e7da      	b.n	80273f4 <_free_r+0x24>
 802743e:	42a0      	cmp	r0, r4
 8027440:	d902      	bls.n	8027448 <_free_r+0x78>
 8027442:	230c      	movs	r3, #12
 8027444:	602b      	str	r3, [r5, #0]
 8027446:	e7d5      	b.n	80273f4 <_free_r+0x24>
 8027448:	6820      	ldr	r0, [r4, #0]
 802744a:	1821      	adds	r1, r4, r0
 802744c:	428b      	cmp	r3, r1
 802744e:	d103      	bne.n	8027458 <_free_r+0x88>
 8027450:	6819      	ldr	r1, [r3, #0]
 8027452:	685b      	ldr	r3, [r3, #4]
 8027454:	1809      	adds	r1, r1, r0
 8027456:	6021      	str	r1, [r4, #0]
 8027458:	6063      	str	r3, [r4, #4]
 802745a:	6054      	str	r4, [r2, #4]
 802745c:	e7ca      	b.n	80273f4 <_free_r+0x24>
 802745e:	46c0      	nop			@ (mov r8, r8)
 8027460:	20003918 	.word	0x20003918

08027464 <rshift>:
 8027464:	0002      	movs	r2, r0
 8027466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027468:	6904      	ldr	r4, [r0, #16]
 802746a:	b085      	sub	sp, #20
 802746c:	3214      	adds	r2, #20
 802746e:	114b      	asrs	r3, r1, #5
 8027470:	0016      	movs	r6, r2
 8027472:	9302      	str	r3, [sp, #8]
 8027474:	429c      	cmp	r4, r3
 8027476:	dd31      	ble.n	80274dc <rshift+0x78>
 8027478:	261f      	movs	r6, #31
 802747a:	000f      	movs	r7, r1
 802747c:	009b      	lsls	r3, r3, #2
 802747e:	00a5      	lsls	r5, r4, #2
 8027480:	18d3      	adds	r3, r2, r3
 8027482:	4037      	ands	r7, r6
 8027484:	1955      	adds	r5, r2, r5
 8027486:	9300      	str	r3, [sp, #0]
 8027488:	9701      	str	r7, [sp, #4]
 802748a:	4231      	tst	r1, r6
 802748c:	d10d      	bne.n	80274aa <rshift+0x46>
 802748e:	0016      	movs	r6, r2
 8027490:	0019      	movs	r1, r3
 8027492:	428d      	cmp	r5, r1
 8027494:	d836      	bhi.n	8027504 <rshift+0xa0>
 8027496:	9b00      	ldr	r3, [sp, #0]
 8027498:	2600      	movs	r6, #0
 802749a:	3b03      	subs	r3, #3
 802749c:	429d      	cmp	r5, r3
 802749e:	d302      	bcc.n	80274a6 <rshift+0x42>
 80274a0:	9b02      	ldr	r3, [sp, #8]
 80274a2:	1ae4      	subs	r4, r4, r3
 80274a4:	00a6      	lsls	r6, r4, #2
 80274a6:	1996      	adds	r6, r2, r6
 80274a8:	e018      	b.n	80274dc <rshift+0x78>
 80274aa:	2120      	movs	r1, #32
 80274ac:	9e01      	ldr	r6, [sp, #4]
 80274ae:	9f01      	ldr	r7, [sp, #4]
 80274b0:	1b89      	subs	r1, r1, r6
 80274b2:	9e00      	ldr	r6, [sp, #0]
 80274b4:	9103      	str	r1, [sp, #12]
 80274b6:	ce02      	ldmia	r6!, {r1}
 80274b8:	4694      	mov	ip, r2
 80274ba:	40f9      	lsrs	r1, r7
 80274bc:	42b5      	cmp	r5, r6
 80274be:	d816      	bhi.n	80274ee <rshift+0x8a>
 80274c0:	9b00      	ldr	r3, [sp, #0]
 80274c2:	2600      	movs	r6, #0
 80274c4:	3301      	adds	r3, #1
 80274c6:	429d      	cmp	r5, r3
 80274c8:	d303      	bcc.n	80274d2 <rshift+0x6e>
 80274ca:	9b02      	ldr	r3, [sp, #8]
 80274cc:	1ae4      	subs	r4, r4, r3
 80274ce:	00a6      	lsls	r6, r4, #2
 80274d0:	3e04      	subs	r6, #4
 80274d2:	1996      	adds	r6, r2, r6
 80274d4:	6031      	str	r1, [r6, #0]
 80274d6:	2900      	cmp	r1, #0
 80274d8:	d000      	beq.n	80274dc <rshift+0x78>
 80274da:	3604      	adds	r6, #4
 80274dc:	1ab1      	subs	r1, r6, r2
 80274de:	1089      	asrs	r1, r1, #2
 80274e0:	6101      	str	r1, [r0, #16]
 80274e2:	4296      	cmp	r6, r2
 80274e4:	d101      	bne.n	80274ea <rshift+0x86>
 80274e6:	2300      	movs	r3, #0
 80274e8:	6143      	str	r3, [r0, #20]
 80274ea:	b005      	add	sp, #20
 80274ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80274ee:	6837      	ldr	r7, [r6, #0]
 80274f0:	9b03      	ldr	r3, [sp, #12]
 80274f2:	409f      	lsls	r7, r3
 80274f4:	430f      	orrs	r7, r1
 80274f6:	4661      	mov	r1, ip
 80274f8:	c180      	stmia	r1!, {r7}
 80274fa:	468c      	mov	ip, r1
 80274fc:	9b01      	ldr	r3, [sp, #4]
 80274fe:	ce02      	ldmia	r6!, {r1}
 8027500:	40d9      	lsrs	r1, r3
 8027502:	e7db      	b.n	80274bc <rshift+0x58>
 8027504:	c980      	ldmia	r1!, {r7}
 8027506:	c680      	stmia	r6!, {r7}
 8027508:	e7c3      	b.n	8027492 <rshift+0x2e>

0802750a <__hexdig_fun>:
 802750a:	0002      	movs	r2, r0
 802750c:	3a30      	subs	r2, #48	@ 0x30
 802750e:	0003      	movs	r3, r0
 8027510:	2a09      	cmp	r2, #9
 8027512:	d802      	bhi.n	802751a <__hexdig_fun+0x10>
 8027514:	3b20      	subs	r3, #32
 8027516:	b2d8      	uxtb	r0, r3
 8027518:	4770      	bx	lr
 802751a:	0002      	movs	r2, r0
 802751c:	3a61      	subs	r2, #97	@ 0x61
 802751e:	2a05      	cmp	r2, #5
 8027520:	d801      	bhi.n	8027526 <__hexdig_fun+0x1c>
 8027522:	3b47      	subs	r3, #71	@ 0x47
 8027524:	e7f7      	b.n	8027516 <__hexdig_fun+0xc>
 8027526:	001a      	movs	r2, r3
 8027528:	3a41      	subs	r2, #65	@ 0x41
 802752a:	2000      	movs	r0, #0
 802752c:	2a05      	cmp	r2, #5
 802752e:	d8f3      	bhi.n	8027518 <__hexdig_fun+0xe>
 8027530:	3b27      	subs	r3, #39	@ 0x27
 8027532:	e7f0      	b.n	8027516 <__hexdig_fun+0xc>

08027534 <__gethex>:
 8027534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027536:	b089      	sub	sp, #36	@ 0x24
 8027538:	9307      	str	r3, [sp, #28]
 802753a:	680b      	ldr	r3, [r1, #0]
 802753c:	9201      	str	r2, [sp, #4]
 802753e:	9003      	str	r0, [sp, #12]
 8027540:	9106      	str	r1, [sp, #24]
 8027542:	1c9a      	adds	r2, r3, #2
 8027544:	0011      	movs	r1, r2
 8027546:	3201      	adds	r2, #1
 8027548:	1e50      	subs	r0, r2, #1
 802754a:	7800      	ldrb	r0, [r0, #0]
 802754c:	2830      	cmp	r0, #48	@ 0x30
 802754e:	d0f9      	beq.n	8027544 <__gethex+0x10>
 8027550:	1acb      	subs	r3, r1, r3
 8027552:	3b02      	subs	r3, #2
 8027554:	9305      	str	r3, [sp, #20]
 8027556:	9100      	str	r1, [sp, #0]
 8027558:	f7ff ffd7 	bl	802750a <__hexdig_fun>
 802755c:	2300      	movs	r3, #0
 802755e:	001d      	movs	r5, r3
 8027560:	9302      	str	r3, [sp, #8]
 8027562:	4298      	cmp	r0, r3
 8027564:	d11e      	bne.n	80275a4 <__gethex+0x70>
 8027566:	2201      	movs	r2, #1
 8027568:	49a6      	ldr	r1, [pc, #664]	@ (8027804 <__gethex+0x2d0>)
 802756a:	9800      	ldr	r0, [sp, #0]
 802756c:	f7fe ffe4 	bl	8026538 <strncmp>
 8027570:	0007      	movs	r7, r0
 8027572:	42a8      	cmp	r0, r5
 8027574:	d000      	beq.n	8027578 <__gethex+0x44>
 8027576:	e06a      	b.n	802764e <__gethex+0x11a>
 8027578:	9b00      	ldr	r3, [sp, #0]
 802757a:	7858      	ldrb	r0, [r3, #1]
 802757c:	1c5c      	adds	r4, r3, #1
 802757e:	f7ff ffc4 	bl	802750a <__hexdig_fun>
 8027582:	2301      	movs	r3, #1
 8027584:	9302      	str	r3, [sp, #8]
 8027586:	42a8      	cmp	r0, r5
 8027588:	d02f      	beq.n	80275ea <__gethex+0xb6>
 802758a:	9400      	str	r4, [sp, #0]
 802758c:	9b00      	ldr	r3, [sp, #0]
 802758e:	7818      	ldrb	r0, [r3, #0]
 8027590:	2830      	cmp	r0, #48	@ 0x30
 8027592:	d009      	beq.n	80275a8 <__gethex+0x74>
 8027594:	f7ff ffb9 	bl	802750a <__hexdig_fun>
 8027598:	4242      	negs	r2, r0
 802759a:	4142      	adcs	r2, r0
 802759c:	2301      	movs	r3, #1
 802759e:	0025      	movs	r5, r4
 80275a0:	9202      	str	r2, [sp, #8]
 80275a2:	9305      	str	r3, [sp, #20]
 80275a4:	9c00      	ldr	r4, [sp, #0]
 80275a6:	e004      	b.n	80275b2 <__gethex+0x7e>
 80275a8:	9b00      	ldr	r3, [sp, #0]
 80275aa:	3301      	adds	r3, #1
 80275ac:	9300      	str	r3, [sp, #0]
 80275ae:	e7ed      	b.n	802758c <__gethex+0x58>
 80275b0:	3401      	adds	r4, #1
 80275b2:	7820      	ldrb	r0, [r4, #0]
 80275b4:	f7ff ffa9 	bl	802750a <__hexdig_fun>
 80275b8:	1e07      	subs	r7, r0, #0
 80275ba:	d1f9      	bne.n	80275b0 <__gethex+0x7c>
 80275bc:	2201      	movs	r2, #1
 80275be:	0020      	movs	r0, r4
 80275c0:	4990      	ldr	r1, [pc, #576]	@ (8027804 <__gethex+0x2d0>)
 80275c2:	f7fe ffb9 	bl	8026538 <strncmp>
 80275c6:	2800      	cmp	r0, #0
 80275c8:	d10d      	bne.n	80275e6 <__gethex+0xb2>
 80275ca:	2d00      	cmp	r5, #0
 80275cc:	d106      	bne.n	80275dc <__gethex+0xa8>
 80275ce:	3401      	adds	r4, #1
 80275d0:	0025      	movs	r5, r4
 80275d2:	7820      	ldrb	r0, [r4, #0]
 80275d4:	f7ff ff99 	bl	802750a <__hexdig_fun>
 80275d8:	2800      	cmp	r0, #0
 80275da:	d102      	bne.n	80275e2 <__gethex+0xae>
 80275dc:	1b2d      	subs	r5, r5, r4
 80275de:	00af      	lsls	r7, r5, #2
 80275e0:	e003      	b.n	80275ea <__gethex+0xb6>
 80275e2:	3401      	adds	r4, #1
 80275e4:	e7f5      	b.n	80275d2 <__gethex+0x9e>
 80275e6:	2d00      	cmp	r5, #0
 80275e8:	d1f8      	bne.n	80275dc <__gethex+0xa8>
 80275ea:	2220      	movs	r2, #32
 80275ec:	7823      	ldrb	r3, [r4, #0]
 80275ee:	0026      	movs	r6, r4
 80275f0:	4393      	bics	r3, r2
 80275f2:	2b50      	cmp	r3, #80	@ 0x50
 80275f4:	d11d      	bne.n	8027632 <__gethex+0xfe>
 80275f6:	7863      	ldrb	r3, [r4, #1]
 80275f8:	2b2b      	cmp	r3, #43	@ 0x2b
 80275fa:	d02d      	beq.n	8027658 <__gethex+0x124>
 80275fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80275fe:	d02f      	beq.n	8027660 <__gethex+0x12c>
 8027600:	2300      	movs	r3, #0
 8027602:	1c66      	adds	r6, r4, #1
 8027604:	9304      	str	r3, [sp, #16]
 8027606:	7830      	ldrb	r0, [r6, #0]
 8027608:	f7ff ff7f 	bl	802750a <__hexdig_fun>
 802760c:	1e43      	subs	r3, r0, #1
 802760e:	b2db      	uxtb	r3, r3
 8027610:	0005      	movs	r5, r0
 8027612:	2b18      	cmp	r3, #24
 8027614:	d82a      	bhi.n	802766c <__gethex+0x138>
 8027616:	7870      	ldrb	r0, [r6, #1]
 8027618:	f7ff ff77 	bl	802750a <__hexdig_fun>
 802761c:	1e43      	subs	r3, r0, #1
 802761e:	b2db      	uxtb	r3, r3
 8027620:	3601      	adds	r6, #1
 8027622:	3d10      	subs	r5, #16
 8027624:	2b18      	cmp	r3, #24
 8027626:	d91d      	bls.n	8027664 <__gethex+0x130>
 8027628:	9b04      	ldr	r3, [sp, #16]
 802762a:	2b00      	cmp	r3, #0
 802762c:	d000      	beq.n	8027630 <__gethex+0xfc>
 802762e:	426d      	negs	r5, r5
 8027630:	197f      	adds	r7, r7, r5
 8027632:	9b06      	ldr	r3, [sp, #24]
 8027634:	601e      	str	r6, [r3, #0]
 8027636:	9b02      	ldr	r3, [sp, #8]
 8027638:	2b00      	cmp	r3, #0
 802763a:	d019      	beq.n	8027670 <__gethex+0x13c>
 802763c:	9b05      	ldr	r3, [sp, #20]
 802763e:	2606      	movs	r6, #6
 8027640:	425a      	negs	r2, r3
 8027642:	4153      	adcs	r3, r2
 8027644:	425b      	negs	r3, r3
 8027646:	401e      	ands	r6, r3
 8027648:	0030      	movs	r0, r6
 802764a:	b009      	add	sp, #36	@ 0x24
 802764c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802764e:	2301      	movs	r3, #1
 8027650:	2700      	movs	r7, #0
 8027652:	9c00      	ldr	r4, [sp, #0]
 8027654:	9302      	str	r3, [sp, #8]
 8027656:	e7c8      	b.n	80275ea <__gethex+0xb6>
 8027658:	2300      	movs	r3, #0
 802765a:	9304      	str	r3, [sp, #16]
 802765c:	1ca6      	adds	r6, r4, #2
 802765e:	e7d2      	b.n	8027606 <__gethex+0xd2>
 8027660:	2301      	movs	r3, #1
 8027662:	e7fa      	b.n	802765a <__gethex+0x126>
 8027664:	230a      	movs	r3, #10
 8027666:	435d      	muls	r5, r3
 8027668:	182d      	adds	r5, r5, r0
 802766a:	e7d4      	b.n	8027616 <__gethex+0xe2>
 802766c:	0026      	movs	r6, r4
 802766e:	e7e0      	b.n	8027632 <__gethex+0xfe>
 8027670:	9b00      	ldr	r3, [sp, #0]
 8027672:	9902      	ldr	r1, [sp, #8]
 8027674:	1ae3      	subs	r3, r4, r3
 8027676:	3b01      	subs	r3, #1
 8027678:	2b07      	cmp	r3, #7
 802767a:	dc0a      	bgt.n	8027692 <__gethex+0x15e>
 802767c:	9803      	ldr	r0, [sp, #12]
 802767e:	f000 fb19 	bl	8027cb4 <_Balloc>
 8027682:	1e05      	subs	r5, r0, #0
 8027684:	d108      	bne.n	8027698 <__gethex+0x164>
 8027686:	002a      	movs	r2, r5
 8027688:	21e4      	movs	r1, #228	@ 0xe4
 802768a:	4b5f      	ldr	r3, [pc, #380]	@ (8027808 <__gethex+0x2d4>)
 802768c:	485f      	ldr	r0, [pc, #380]	@ (802780c <__gethex+0x2d8>)
 802768e:	f001 fbe9 	bl	8028e64 <__assert_func>
 8027692:	3101      	adds	r1, #1
 8027694:	105b      	asrs	r3, r3, #1
 8027696:	e7ef      	b.n	8027678 <__gethex+0x144>
 8027698:	0003      	movs	r3, r0
 802769a:	3314      	adds	r3, #20
 802769c:	9302      	str	r3, [sp, #8]
 802769e:	9305      	str	r3, [sp, #20]
 80276a0:	2300      	movs	r3, #0
 80276a2:	001e      	movs	r6, r3
 80276a4:	9304      	str	r3, [sp, #16]
 80276a6:	9b00      	ldr	r3, [sp, #0]
 80276a8:	42a3      	cmp	r3, r4
 80276aa:	d338      	bcc.n	802771e <__gethex+0x1ea>
 80276ac:	9c05      	ldr	r4, [sp, #20]
 80276ae:	9b02      	ldr	r3, [sp, #8]
 80276b0:	c440      	stmia	r4!, {r6}
 80276b2:	1ae4      	subs	r4, r4, r3
 80276b4:	10a4      	asrs	r4, r4, #2
 80276b6:	0030      	movs	r0, r6
 80276b8:	612c      	str	r4, [r5, #16]
 80276ba:	f000 fbf3 	bl	8027ea4 <__hi0bits>
 80276be:	9b01      	ldr	r3, [sp, #4]
 80276c0:	0164      	lsls	r4, r4, #5
 80276c2:	681b      	ldr	r3, [r3, #0]
 80276c4:	1a26      	subs	r6, r4, r0
 80276c6:	9300      	str	r3, [sp, #0]
 80276c8:	429e      	cmp	r6, r3
 80276ca:	dd52      	ble.n	8027772 <__gethex+0x23e>
 80276cc:	1af6      	subs	r6, r6, r3
 80276ce:	0031      	movs	r1, r6
 80276d0:	0028      	movs	r0, r5
 80276d2:	f000 ff8e 	bl	80285f2 <__any_on>
 80276d6:	1e04      	subs	r4, r0, #0
 80276d8:	d00f      	beq.n	80276fa <__gethex+0x1c6>
 80276da:	2401      	movs	r4, #1
 80276dc:	211f      	movs	r1, #31
 80276de:	0020      	movs	r0, r4
 80276e0:	1e73      	subs	r3, r6, #1
 80276e2:	4019      	ands	r1, r3
 80276e4:	4088      	lsls	r0, r1
 80276e6:	0001      	movs	r1, r0
 80276e8:	115a      	asrs	r2, r3, #5
 80276ea:	9802      	ldr	r0, [sp, #8]
 80276ec:	0092      	lsls	r2, r2, #2
 80276ee:	5812      	ldr	r2, [r2, r0]
 80276f0:	420a      	tst	r2, r1
 80276f2:	d002      	beq.n	80276fa <__gethex+0x1c6>
 80276f4:	42a3      	cmp	r3, r4
 80276f6:	dc34      	bgt.n	8027762 <__gethex+0x22e>
 80276f8:	2402      	movs	r4, #2
 80276fa:	0031      	movs	r1, r6
 80276fc:	0028      	movs	r0, r5
 80276fe:	f7ff feb1 	bl	8027464 <rshift>
 8027702:	19bf      	adds	r7, r7, r6
 8027704:	9b01      	ldr	r3, [sp, #4]
 8027706:	689b      	ldr	r3, [r3, #8]
 8027708:	42bb      	cmp	r3, r7
 802770a:	da42      	bge.n	8027792 <__gethex+0x25e>
 802770c:	0029      	movs	r1, r5
 802770e:	9803      	ldr	r0, [sp, #12]
 8027710:	f000 fb14 	bl	8027d3c <_Bfree>
 8027714:	2300      	movs	r3, #0
 8027716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027718:	26a3      	movs	r6, #163	@ 0xa3
 802771a:	6013      	str	r3, [r2, #0]
 802771c:	e794      	b.n	8027648 <__gethex+0x114>
 802771e:	3c01      	subs	r4, #1
 8027720:	7823      	ldrb	r3, [r4, #0]
 8027722:	2b2e      	cmp	r3, #46	@ 0x2e
 8027724:	d012      	beq.n	802774c <__gethex+0x218>
 8027726:	9b04      	ldr	r3, [sp, #16]
 8027728:	2b20      	cmp	r3, #32
 802772a:	d104      	bne.n	8027736 <__gethex+0x202>
 802772c:	9b05      	ldr	r3, [sp, #20]
 802772e:	c340      	stmia	r3!, {r6}
 8027730:	2600      	movs	r6, #0
 8027732:	9305      	str	r3, [sp, #20]
 8027734:	9604      	str	r6, [sp, #16]
 8027736:	7820      	ldrb	r0, [r4, #0]
 8027738:	f7ff fee7 	bl	802750a <__hexdig_fun>
 802773c:	230f      	movs	r3, #15
 802773e:	4018      	ands	r0, r3
 8027740:	9b04      	ldr	r3, [sp, #16]
 8027742:	4098      	lsls	r0, r3
 8027744:	3304      	adds	r3, #4
 8027746:	4306      	orrs	r6, r0
 8027748:	9304      	str	r3, [sp, #16]
 802774a:	e7ac      	b.n	80276a6 <__gethex+0x172>
 802774c:	9b00      	ldr	r3, [sp, #0]
 802774e:	42a3      	cmp	r3, r4
 8027750:	d8e9      	bhi.n	8027726 <__gethex+0x1f2>
 8027752:	2201      	movs	r2, #1
 8027754:	0020      	movs	r0, r4
 8027756:	492b      	ldr	r1, [pc, #172]	@ (8027804 <__gethex+0x2d0>)
 8027758:	f7fe feee 	bl	8026538 <strncmp>
 802775c:	2800      	cmp	r0, #0
 802775e:	d1e2      	bne.n	8027726 <__gethex+0x1f2>
 8027760:	e7a1      	b.n	80276a6 <__gethex+0x172>
 8027762:	0028      	movs	r0, r5
 8027764:	1eb1      	subs	r1, r6, #2
 8027766:	f000 ff44 	bl	80285f2 <__any_on>
 802776a:	2800      	cmp	r0, #0
 802776c:	d0c4      	beq.n	80276f8 <__gethex+0x1c4>
 802776e:	2403      	movs	r4, #3
 8027770:	e7c3      	b.n	80276fa <__gethex+0x1c6>
 8027772:	9b00      	ldr	r3, [sp, #0]
 8027774:	2400      	movs	r4, #0
 8027776:	429e      	cmp	r6, r3
 8027778:	dac4      	bge.n	8027704 <__gethex+0x1d0>
 802777a:	1b9e      	subs	r6, r3, r6
 802777c:	0029      	movs	r1, r5
 802777e:	0032      	movs	r2, r6
 8027780:	9803      	ldr	r0, [sp, #12]
 8027782:	f000 fcfd 	bl	8028180 <__lshift>
 8027786:	0003      	movs	r3, r0
 8027788:	3314      	adds	r3, #20
 802778a:	0005      	movs	r5, r0
 802778c:	1bbf      	subs	r7, r7, r6
 802778e:	9302      	str	r3, [sp, #8]
 8027790:	e7b8      	b.n	8027704 <__gethex+0x1d0>
 8027792:	9b01      	ldr	r3, [sp, #4]
 8027794:	685e      	ldr	r6, [r3, #4]
 8027796:	42be      	cmp	r6, r7
 8027798:	dd6f      	ble.n	802787a <__gethex+0x346>
 802779a:	9b00      	ldr	r3, [sp, #0]
 802779c:	1bf6      	subs	r6, r6, r7
 802779e:	42b3      	cmp	r3, r6
 80277a0:	dc36      	bgt.n	8027810 <__gethex+0x2dc>
 80277a2:	9b01      	ldr	r3, [sp, #4]
 80277a4:	68db      	ldr	r3, [r3, #12]
 80277a6:	2b02      	cmp	r3, #2
 80277a8:	d024      	beq.n	80277f4 <__gethex+0x2c0>
 80277aa:	2b03      	cmp	r3, #3
 80277ac:	d026      	beq.n	80277fc <__gethex+0x2c8>
 80277ae:	2b01      	cmp	r3, #1
 80277b0:	d117      	bne.n	80277e2 <__gethex+0x2ae>
 80277b2:	9b00      	ldr	r3, [sp, #0]
 80277b4:	42b3      	cmp	r3, r6
 80277b6:	d114      	bne.n	80277e2 <__gethex+0x2ae>
 80277b8:	2b01      	cmp	r3, #1
 80277ba:	d10b      	bne.n	80277d4 <__gethex+0x2a0>
 80277bc:	9b01      	ldr	r3, [sp, #4]
 80277be:	9a07      	ldr	r2, [sp, #28]
 80277c0:	685b      	ldr	r3, [r3, #4]
 80277c2:	2662      	movs	r6, #98	@ 0x62
 80277c4:	6013      	str	r3, [r2, #0]
 80277c6:	2301      	movs	r3, #1
 80277c8:	9a02      	ldr	r2, [sp, #8]
 80277ca:	612b      	str	r3, [r5, #16]
 80277cc:	6013      	str	r3, [r2, #0]
 80277ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80277d0:	601d      	str	r5, [r3, #0]
 80277d2:	e739      	b.n	8027648 <__gethex+0x114>
 80277d4:	9900      	ldr	r1, [sp, #0]
 80277d6:	0028      	movs	r0, r5
 80277d8:	3901      	subs	r1, #1
 80277da:	f000 ff0a 	bl	80285f2 <__any_on>
 80277de:	2800      	cmp	r0, #0
 80277e0:	d1ec      	bne.n	80277bc <__gethex+0x288>
 80277e2:	0029      	movs	r1, r5
 80277e4:	9803      	ldr	r0, [sp, #12]
 80277e6:	f000 faa9 	bl	8027d3c <_Bfree>
 80277ea:	2300      	movs	r3, #0
 80277ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80277ee:	2650      	movs	r6, #80	@ 0x50
 80277f0:	6013      	str	r3, [r2, #0]
 80277f2:	e729      	b.n	8027648 <__gethex+0x114>
 80277f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80277f6:	2b00      	cmp	r3, #0
 80277f8:	d1f3      	bne.n	80277e2 <__gethex+0x2ae>
 80277fa:	e7df      	b.n	80277bc <__gethex+0x288>
 80277fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80277fe:	2b00      	cmp	r3, #0
 8027800:	d1dc      	bne.n	80277bc <__gethex+0x288>
 8027802:	e7ee      	b.n	80277e2 <__gethex+0x2ae>
 8027804:	0802ea94 	.word	0x0802ea94
 8027808:	0802eb4e 	.word	0x0802eb4e
 802780c:	0802eb5f 	.word	0x0802eb5f
 8027810:	1e77      	subs	r7, r6, #1
 8027812:	2c00      	cmp	r4, #0
 8027814:	d12f      	bne.n	8027876 <__gethex+0x342>
 8027816:	2f00      	cmp	r7, #0
 8027818:	d004      	beq.n	8027824 <__gethex+0x2f0>
 802781a:	0039      	movs	r1, r7
 802781c:	0028      	movs	r0, r5
 802781e:	f000 fee8 	bl	80285f2 <__any_on>
 8027822:	0004      	movs	r4, r0
 8027824:	231f      	movs	r3, #31
 8027826:	117a      	asrs	r2, r7, #5
 8027828:	401f      	ands	r7, r3
 802782a:	3b1e      	subs	r3, #30
 802782c:	40bb      	lsls	r3, r7
 802782e:	9902      	ldr	r1, [sp, #8]
 8027830:	0092      	lsls	r2, r2, #2
 8027832:	5852      	ldr	r2, [r2, r1]
 8027834:	421a      	tst	r2, r3
 8027836:	d001      	beq.n	802783c <__gethex+0x308>
 8027838:	2302      	movs	r3, #2
 802783a:	431c      	orrs	r4, r3
 802783c:	9b00      	ldr	r3, [sp, #0]
 802783e:	0031      	movs	r1, r6
 8027840:	1b9b      	subs	r3, r3, r6
 8027842:	2602      	movs	r6, #2
 8027844:	0028      	movs	r0, r5
 8027846:	9300      	str	r3, [sp, #0]
 8027848:	f7ff fe0c 	bl	8027464 <rshift>
 802784c:	9b01      	ldr	r3, [sp, #4]
 802784e:	685f      	ldr	r7, [r3, #4]
 8027850:	2c00      	cmp	r4, #0
 8027852:	d03f      	beq.n	80278d4 <__gethex+0x3a0>
 8027854:	9b01      	ldr	r3, [sp, #4]
 8027856:	68db      	ldr	r3, [r3, #12]
 8027858:	2b02      	cmp	r3, #2
 802785a:	d010      	beq.n	802787e <__gethex+0x34a>
 802785c:	2b03      	cmp	r3, #3
 802785e:	d012      	beq.n	8027886 <__gethex+0x352>
 8027860:	2b01      	cmp	r3, #1
 8027862:	d106      	bne.n	8027872 <__gethex+0x33e>
 8027864:	07a2      	lsls	r2, r4, #30
 8027866:	d504      	bpl.n	8027872 <__gethex+0x33e>
 8027868:	9a02      	ldr	r2, [sp, #8]
 802786a:	6812      	ldr	r2, [r2, #0]
 802786c:	4314      	orrs	r4, r2
 802786e:	421c      	tst	r4, r3
 8027870:	d10c      	bne.n	802788c <__gethex+0x358>
 8027872:	2310      	movs	r3, #16
 8027874:	e02d      	b.n	80278d2 <__gethex+0x39e>
 8027876:	2401      	movs	r4, #1
 8027878:	e7d4      	b.n	8027824 <__gethex+0x2f0>
 802787a:	2601      	movs	r6, #1
 802787c:	e7e8      	b.n	8027850 <__gethex+0x31c>
 802787e:	2301      	movs	r3, #1
 8027880:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027882:	1a9b      	subs	r3, r3, r2
 8027884:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027888:	2b00      	cmp	r3, #0
 802788a:	d0f2      	beq.n	8027872 <__gethex+0x33e>
 802788c:	692b      	ldr	r3, [r5, #16]
 802788e:	2000      	movs	r0, #0
 8027890:	9302      	str	r3, [sp, #8]
 8027892:	009b      	lsls	r3, r3, #2
 8027894:	9304      	str	r3, [sp, #16]
 8027896:	002b      	movs	r3, r5
 8027898:	9a04      	ldr	r2, [sp, #16]
 802789a:	3314      	adds	r3, #20
 802789c:	1899      	adds	r1, r3, r2
 802789e:	681a      	ldr	r2, [r3, #0]
 80278a0:	1c54      	adds	r4, r2, #1
 80278a2:	d01c      	beq.n	80278de <__gethex+0x3aa>
 80278a4:	3201      	adds	r2, #1
 80278a6:	601a      	str	r2, [r3, #0]
 80278a8:	002b      	movs	r3, r5
 80278aa:	3314      	adds	r3, #20
 80278ac:	2e02      	cmp	r6, #2
 80278ae:	d13f      	bne.n	8027930 <__gethex+0x3fc>
 80278b0:	9a01      	ldr	r2, [sp, #4]
 80278b2:	9900      	ldr	r1, [sp, #0]
 80278b4:	6812      	ldr	r2, [r2, #0]
 80278b6:	3a01      	subs	r2, #1
 80278b8:	428a      	cmp	r2, r1
 80278ba:	d109      	bne.n	80278d0 <__gethex+0x39c>
 80278bc:	000a      	movs	r2, r1
 80278be:	201f      	movs	r0, #31
 80278c0:	4010      	ands	r0, r2
 80278c2:	2201      	movs	r2, #1
 80278c4:	4082      	lsls	r2, r0
 80278c6:	1149      	asrs	r1, r1, #5
 80278c8:	0089      	lsls	r1, r1, #2
 80278ca:	58cb      	ldr	r3, [r1, r3]
 80278cc:	4213      	tst	r3, r2
 80278ce:	d13d      	bne.n	802794c <__gethex+0x418>
 80278d0:	2320      	movs	r3, #32
 80278d2:	431e      	orrs	r6, r3
 80278d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80278d6:	601d      	str	r5, [r3, #0]
 80278d8:	9b07      	ldr	r3, [sp, #28]
 80278da:	601f      	str	r7, [r3, #0]
 80278dc:	e6b4      	b.n	8027648 <__gethex+0x114>
 80278de:	c301      	stmia	r3!, {r0}
 80278e0:	4299      	cmp	r1, r3
 80278e2:	d8dc      	bhi.n	802789e <__gethex+0x36a>
 80278e4:	68ab      	ldr	r3, [r5, #8]
 80278e6:	9a02      	ldr	r2, [sp, #8]
 80278e8:	429a      	cmp	r2, r3
 80278ea:	db18      	blt.n	802791e <__gethex+0x3ea>
 80278ec:	6869      	ldr	r1, [r5, #4]
 80278ee:	9803      	ldr	r0, [sp, #12]
 80278f0:	3101      	adds	r1, #1
 80278f2:	f000 f9df 	bl	8027cb4 <_Balloc>
 80278f6:	1e04      	subs	r4, r0, #0
 80278f8:	d104      	bne.n	8027904 <__gethex+0x3d0>
 80278fa:	0022      	movs	r2, r4
 80278fc:	2184      	movs	r1, #132	@ 0x84
 80278fe:	4b1d      	ldr	r3, [pc, #116]	@ (8027974 <__gethex+0x440>)
 8027900:	481d      	ldr	r0, [pc, #116]	@ (8027978 <__gethex+0x444>)
 8027902:	e6c4      	b.n	802768e <__gethex+0x15a>
 8027904:	0029      	movs	r1, r5
 8027906:	692a      	ldr	r2, [r5, #16]
 8027908:	310c      	adds	r1, #12
 802790a:	3202      	adds	r2, #2
 802790c:	0092      	lsls	r2, r2, #2
 802790e:	300c      	adds	r0, #12
 8027910:	f7fe fed8 	bl	80266c4 <memcpy>
 8027914:	0029      	movs	r1, r5
 8027916:	9803      	ldr	r0, [sp, #12]
 8027918:	f000 fa10 	bl	8027d3c <_Bfree>
 802791c:	0025      	movs	r5, r4
 802791e:	692b      	ldr	r3, [r5, #16]
 8027920:	1c5a      	adds	r2, r3, #1
 8027922:	612a      	str	r2, [r5, #16]
 8027924:	2201      	movs	r2, #1
 8027926:	3304      	adds	r3, #4
 8027928:	009b      	lsls	r3, r3, #2
 802792a:	18eb      	adds	r3, r5, r3
 802792c:	605a      	str	r2, [r3, #4]
 802792e:	e7bb      	b.n	80278a8 <__gethex+0x374>
 8027930:	692a      	ldr	r2, [r5, #16]
 8027932:	9902      	ldr	r1, [sp, #8]
 8027934:	428a      	cmp	r2, r1
 8027936:	dd0b      	ble.n	8027950 <__gethex+0x41c>
 8027938:	2101      	movs	r1, #1
 802793a:	0028      	movs	r0, r5
 802793c:	f7ff fd92 	bl	8027464 <rshift>
 8027940:	9b01      	ldr	r3, [sp, #4]
 8027942:	3701      	adds	r7, #1
 8027944:	689b      	ldr	r3, [r3, #8]
 8027946:	42bb      	cmp	r3, r7
 8027948:	da00      	bge.n	802794c <__gethex+0x418>
 802794a:	e6df      	b.n	802770c <__gethex+0x1d8>
 802794c:	2601      	movs	r6, #1
 802794e:	e7bf      	b.n	80278d0 <__gethex+0x39c>
 8027950:	221f      	movs	r2, #31
 8027952:	9c00      	ldr	r4, [sp, #0]
 8027954:	9900      	ldr	r1, [sp, #0]
 8027956:	4014      	ands	r4, r2
 8027958:	4211      	tst	r1, r2
 802795a:	d0f7      	beq.n	802794c <__gethex+0x418>
 802795c:	9a04      	ldr	r2, [sp, #16]
 802795e:	189b      	adds	r3, r3, r2
 8027960:	3b04      	subs	r3, #4
 8027962:	6818      	ldr	r0, [r3, #0]
 8027964:	f000 fa9e 	bl	8027ea4 <__hi0bits>
 8027968:	2320      	movs	r3, #32
 802796a:	1b1b      	subs	r3, r3, r4
 802796c:	4298      	cmp	r0, r3
 802796e:	dbe3      	blt.n	8027938 <__gethex+0x404>
 8027970:	e7ec      	b.n	802794c <__gethex+0x418>
 8027972:	46c0      	nop			@ (mov r8, r8)
 8027974:	0802eb4e 	.word	0x0802eb4e
 8027978:	0802eb5f 	.word	0x0802eb5f

0802797c <L_shift>:
 802797c:	2308      	movs	r3, #8
 802797e:	b570      	push	{r4, r5, r6, lr}
 8027980:	2520      	movs	r5, #32
 8027982:	1a9a      	subs	r2, r3, r2
 8027984:	0092      	lsls	r2, r2, #2
 8027986:	1aad      	subs	r5, r5, r2
 8027988:	6843      	ldr	r3, [r0, #4]
 802798a:	6804      	ldr	r4, [r0, #0]
 802798c:	001e      	movs	r6, r3
 802798e:	40ae      	lsls	r6, r5
 8027990:	40d3      	lsrs	r3, r2
 8027992:	4334      	orrs	r4, r6
 8027994:	6004      	str	r4, [r0, #0]
 8027996:	6043      	str	r3, [r0, #4]
 8027998:	3004      	adds	r0, #4
 802799a:	4288      	cmp	r0, r1
 802799c:	d3f4      	bcc.n	8027988 <L_shift+0xc>
 802799e:	bd70      	pop	{r4, r5, r6, pc}

080279a0 <__match>:
 80279a0:	b530      	push	{r4, r5, lr}
 80279a2:	6803      	ldr	r3, [r0, #0]
 80279a4:	780c      	ldrb	r4, [r1, #0]
 80279a6:	3301      	adds	r3, #1
 80279a8:	2c00      	cmp	r4, #0
 80279aa:	d102      	bne.n	80279b2 <__match+0x12>
 80279ac:	6003      	str	r3, [r0, #0]
 80279ae:	2001      	movs	r0, #1
 80279b0:	bd30      	pop	{r4, r5, pc}
 80279b2:	781a      	ldrb	r2, [r3, #0]
 80279b4:	0015      	movs	r5, r2
 80279b6:	3d41      	subs	r5, #65	@ 0x41
 80279b8:	2d19      	cmp	r5, #25
 80279ba:	d800      	bhi.n	80279be <__match+0x1e>
 80279bc:	3220      	adds	r2, #32
 80279be:	3101      	adds	r1, #1
 80279c0:	42a2      	cmp	r2, r4
 80279c2:	d0ef      	beq.n	80279a4 <__match+0x4>
 80279c4:	2000      	movs	r0, #0
 80279c6:	e7f3      	b.n	80279b0 <__match+0x10>

080279c8 <__hexnan>:
 80279c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279ca:	680b      	ldr	r3, [r1, #0]
 80279cc:	b08b      	sub	sp, #44	@ 0x2c
 80279ce:	9201      	str	r2, [sp, #4]
 80279d0:	9901      	ldr	r1, [sp, #4]
 80279d2:	115a      	asrs	r2, r3, #5
 80279d4:	0092      	lsls	r2, r2, #2
 80279d6:	188a      	adds	r2, r1, r2
 80279d8:	9202      	str	r2, [sp, #8]
 80279da:	0019      	movs	r1, r3
 80279dc:	221f      	movs	r2, #31
 80279de:	4011      	ands	r1, r2
 80279e0:	9008      	str	r0, [sp, #32]
 80279e2:	9106      	str	r1, [sp, #24]
 80279e4:	4213      	tst	r3, r2
 80279e6:	d002      	beq.n	80279ee <__hexnan+0x26>
 80279e8:	9b02      	ldr	r3, [sp, #8]
 80279ea:	3304      	adds	r3, #4
 80279ec:	9302      	str	r3, [sp, #8]
 80279ee:	9b02      	ldr	r3, [sp, #8]
 80279f0:	2500      	movs	r5, #0
 80279f2:	1f1f      	subs	r7, r3, #4
 80279f4:	003e      	movs	r6, r7
 80279f6:	003c      	movs	r4, r7
 80279f8:	9b08      	ldr	r3, [sp, #32]
 80279fa:	603d      	str	r5, [r7, #0]
 80279fc:	681b      	ldr	r3, [r3, #0]
 80279fe:	9507      	str	r5, [sp, #28]
 8027a00:	9305      	str	r3, [sp, #20]
 8027a02:	9503      	str	r5, [sp, #12]
 8027a04:	9b05      	ldr	r3, [sp, #20]
 8027a06:	3301      	adds	r3, #1
 8027a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8027a0a:	9b05      	ldr	r3, [sp, #20]
 8027a0c:	785b      	ldrb	r3, [r3, #1]
 8027a0e:	9304      	str	r3, [sp, #16]
 8027a10:	2b00      	cmp	r3, #0
 8027a12:	d028      	beq.n	8027a66 <__hexnan+0x9e>
 8027a14:	9804      	ldr	r0, [sp, #16]
 8027a16:	f7ff fd78 	bl	802750a <__hexdig_fun>
 8027a1a:	2800      	cmp	r0, #0
 8027a1c:	d155      	bne.n	8027aca <__hexnan+0x102>
 8027a1e:	9b04      	ldr	r3, [sp, #16]
 8027a20:	2b20      	cmp	r3, #32
 8027a22:	d819      	bhi.n	8027a58 <__hexnan+0x90>
 8027a24:	9b03      	ldr	r3, [sp, #12]
 8027a26:	9a07      	ldr	r2, [sp, #28]
 8027a28:	4293      	cmp	r3, r2
 8027a2a:	dd12      	ble.n	8027a52 <__hexnan+0x8a>
 8027a2c:	42b4      	cmp	r4, r6
 8027a2e:	d206      	bcs.n	8027a3e <__hexnan+0x76>
 8027a30:	2d07      	cmp	r5, #7
 8027a32:	dc04      	bgt.n	8027a3e <__hexnan+0x76>
 8027a34:	002a      	movs	r2, r5
 8027a36:	0031      	movs	r1, r6
 8027a38:	0020      	movs	r0, r4
 8027a3a:	f7ff ff9f 	bl	802797c <L_shift>
 8027a3e:	9b01      	ldr	r3, [sp, #4]
 8027a40:	2508      	movs	r5, #8
 8027a42:	429c      	cmp	r4, r3
 8027a44:	d905      	bls.n	8027a52 <__hexnan+0x8a>
 8027a46:	1f26      	subs	r6, r4, #4
 8027a48:	2500      	movs	r5, #0
 8027a4a:	0034      	movs	r4, r6
 8027a4c:	9b03      	ldr	r3, [sp, #12]
 8027a4e:	6035      	str	r5, [r6, #0]
 8027a50:	9307      	str	r3, [sp, #28]
 8027a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a54:	9305      	str	r3, [sp, #20]
 8027a56:	e7d5      	b.n	8027a04 <__hexnan+0x3c>
 8027a58:	9b04      	ldr	r3, [sp, #16]
 8027a5a:	2b29      	cmp	r3, #41	@ 0x29
 8027a5c:	d15a      	bne.n	8027b14 <__hexnan+0x14c>
 8027a5e:	9b05      	ldr	r3, [sp, #20]
 8027a60:	9a08      	ldr	r2, [sp, #32]
 8027a62:	3302      	adds	r3, #2
 8027a64:	6013      	str	r3, [r2, #0]
 8027a66:	9b03      	ldr	r3, [sp, #12]
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	d053      	beq.n	8027b14 <__hexnan+0x14c>
 8027a6c:	42b4      	cmp	r4, r6
 8027a6e:	d206      	bcs.n	8027a7e <__hexnan+0xb6>
 8027a70:	2d07      	cmp	r5, #7
 8027a72:	dc04      	bgt.n	8027a7e <__hexnan+0xb6>
 8027a74:	002a      	movs	r2, r5
 8027a76:	0031      	movs	r1, r6
 8027a78:	0020      	movs	r0, r4
 8027a7a:	f7ff ff7f 	bl	802797c <L_shift>
 8027a7e:	9b01      	ldr	r3, [sp, #4]
 8027a80:	429c      	cmp	r4, r3
 8027a82:	d936      	bls.n	8027af2 <__hexnan+0x12a>
 8027a84:	001a      	movs	r2, r3
 8027a86:	0023      	movs	r3, r4
 8027a88:	cb02      	ldmia	r3!, {r1}
 8027a8a:	c202      	stmia	r2!, {r1}
 8027a8c:	429f      	cmp	r7, r3
 8027a8e:	d2fb      	bcs.n	8027a88 <__hexnan+0xc0>
 8027a90:	9b02      	ldr	r3, [sp, #8]
 8027a92:	1c62      	adds	r2, r4, #1
 8027a94:	1ed9      	subs	r1, r3, #3
 8027a96:	2304      	movs	r3, #4
 8027a98:	4291      	cmp	r1, r2
 8027a9a:	d305      	bcc.n	8027aa8 <__hexnan+0xe0>
 8027a9c:	9b02      	ldr	r3, [sp, #8]
 8027a9e:	3b04      	subs	r3, #4
 8027aa0:	1b1b      	subs	r3, r3, r4
 8027aa2:	089b      	lsrs	r3, r3, #2
 8027aa4:	3301      	adds	r3, #1
 8027aa6:	009b      	lsls	r3, r3, #2
 8027aa8:	9a01      	ldr	r2, [sp, #4]
 8027aaa:	18d3      	adds	r3, r2, r3
 8027aac:	2200      	movs	r2, #0
 8027aae:	c304      	stmia	r3!, {r2}
 8027ab0:	429f      	cmp	r7, r3
 8027ab2:	d2fc      	bcs.n	8027aae <__hexnan+0xe6>
 8027ab4:	683b      	ldr	r3, [r7, #0]
 8027ab6:	2b00      	cmp	r3, #0
 8027ab8:	d104      	bne.n	8027ac4 <__hexnan+0xfc>
 8027aba:	9b01      	ldr	r3, [sp, #4]
 8027abc:	429f      	cmp	r7, r3
 8027abe:	d127      	bne.n	8027b10 <__hexnan+0x148>
 8027ac0:	2301      	movs	r3, #1
 8027ac2:	603b      	str	r3, [r7, #0]
 8027ac4:	2005      	movs	r0, #5
 8027ac6:	b00b      	add	sp, #44	@ 0x2c
 8027ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027aca:	9b03      	ldr	r3, [sp, #12]
 8027acc:	3501      	adds	r5, #1
 8027ace:	3301      	adds	r3, #1
 8027ad0:	9303      	str	r3, [sp, #12]
 8027ad2:	2d08      	cmp	r5, #8
 8027ad4:	dd06      	ble.n	8027ae4 <__hexnan+0x11c>
 8027ad6:	9b01      	ldr	r3, [sp, #4]
 8027ad8:	429c      	cmp	r4, r3
 8027ada:	d9ba      	bls.n	8027a52 <__hexnan+0x8a>
 8027adc:	2300      	movs	r3, #0
 8027ade:	2501      	movs	r5, #1
 8027ae0:	3c04      	subs	r4, #4
 8027ae2:	6023      	str	r3, [r4, #0]
 8027ae4:	220f      	movs	r2, #15
 8027ae6:	6823      	ldr	r3, [r4, #0]
 8027ae8:	4010      	ands	r0, r2
 8027aea:	011b      	lsls	r3, r3, #4
 8027aec:	4303      	orrs	r3, r0
 8027aee:	6023      	str	r3, [r4, #0]
 8027af0:	e7af      	b.n	8027a52 <__hexnan+0x8a>
 8027af2:	9b06      	ldr	r3, [sp, #24]
 8027af4:	2b00      	cmp	r3, #0
 8027af6:	d0dd      	beq.n	8027ab4 <__hexnan+0xec>
 8027af8:	2320      	movs	r3, #32
 8027afa:	9a06      	ldr	r2, [sp, #24]
 8027afc:	9902      	ldr	r1, [sp, #8]
 8027afe:	1a9b      	subs	r3, r3, r2
 8027b00:	2201      	movs	r2, #1
 8027b02:	4252      	negs	r2, r2
 8027b04:	40da      	lsrs	r2, r3
 8027b06:	3904      	subs	r1, #4
 8027b08:	680b      	ldr	r3, [r1, #0]
 8027b0a:	4013      	ands	r3, r2
 8027b0c:	600b      	str	r3, [r1, #0]
 8027b0e:	e7d1      	b.n	8027ab4 <__hexnan+0xec>
 8027b10:	3f04      	subs	r7, #4
 8027b12:	e7cf      	b.n	8027ab4 <__hexnan+0xec>
 8027b14:	2004      	movs	r0, #4
 8027b16:	e7d6      	b.n	8027ac6 <__hexnan+0xfe>

08027b18 <malloc>:
 8027b18:	b510      	push	{r4, lr}
 8027b1a:	4b03      	ldr	r3, [pc, #12]	@ (8027b28 <malloc+0x10>)
 8027b1c:	0001      	movs	r1, r0
 8027b1e:	6818      	ldr	r0, [r3, #0]
 8027b20:	f000 f826 	bl	8027b70 <_malloc_r>
 8027b24:	bd10      	pop	{r4, pc}
 8027b26:	46c0      	nop			@ (mov r8, r8)
 8027b28:	200003ec 	.word	0x200003ec

08027b2c <sbrk_aligned>:
 8027b2c:	b570      	push	{r4, r5, r6, lr}
 8027b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8027b6c <sbrk_aligned+0x40>)
 8027b30:	000d      	movs	r5, r1
 8027b32:	6831      	ldr	r1, [r6, #0]
 8027b34:	0004      	movs	r4, r0
 8027b36:	2900      	cmp	r1, #0
 8027b38:	d102      	bne.n	8027b40 <sbrk_aligned+0x14>
 8027b3a:	f001 f981 	bl	8028e40 <_sbrk_r>
 8027b3e:	6030      	str	r0, [r6, #0]
 8027b40:	0029      	movs	r1, r5
 8027b42:	0020      	movs	r0, r4
 8027b44:	f001 f97c 	bl	8028e40 <_sbrk_r>
 8027b48:	1c43      	adds	r3, r0, #1
 8027b4a:	d103      	bne.n	8027b54 <sbrk_aligned+0x28>
 8027b4c:	2501      	movs	r5, #1
 8027b4e:	426d      	negs	r5, r5
 8027b50:	0028      	movs	r0, r5
 8027b52:	bd70      	pop	{r4, r5, r6, pc}
 8027b54:	2303      	movs	r3, #3
 8027b56:	1cc5      	adds	r5, r0, #3
 8027b58:	439d      	bics	r5, r3
 8027b5a:	42a8      	cmp	r0, r5
 8027b5c:	d0f8      	beq.n	8027b50 <sbrk_aligned+0x24>
 8027b5e:	1a29      	subs	r1, r5, r0
 8027b60:	0020      	movs	r0, r4
 8027b62:	f001 f96d 	bl	8028e40 <_sbrk_r>
 8027b66:	3001      	adds	r0, #1
 8027b68:	d1f2      	bne.n	8027b50 <sbrk_aligned+0x24>
 8027b6a:	e7ef      	b.n	8027b4c <sbrk_aligned+0x20>
 8027b6c:	20003914 	.word	0x20003914

08027b70 <_malloc_r>:
 8027b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027b72:	2203      	movs	r2, #3
 8027b74:	1ccb      	adds	r3, r1, #3
 8027b76:	4393      	bics	r3, r2
 8027b78:	3308      	adds	r3, #8
 8027b7a:	0005      	movs	r5, r0
 8027b7c:	001f      	movs	r7, r3
 8027b7e:	2b0c      	cmp	r3, #12
 8027b80:	d234      	bcs.n	8027bec <_malloc_r+0x7c>
 8027b82:	270c      	movs	r7, #12
 8027b84:	42b9      	cmp	r1, r7
 8027b86:	d833      	bhi.n	8027bf0 <_malloc_r+0x80>
 8027b88:	0028      	movs	r0, r5
 8027b8a:	f000 f883 	bl	8027c94 <__malloc_lock>
 8027b8e:	4e37      	ldr	r6, [pc, #220]	@ (8027c6c <_malloc_r+0xfc>)
 8027b90:	6833      	ldr	r3, [r6, #0]
 8027b92:	001c      	movs	r4, r3
 8027b94:	2c00      	cmp	r4, #0
 8027b96:	d12f      	bne.n	8027bf8 <_malloc_r+0x88>
 8027b98:	0039      	movs	r1, r7
 8027b9a:	0028      	movs	r0, r5
 8027b9c:	f7ff ffc6 	bl	8027b2c <sbrk_aligned>
 8027ba0:	0004      	movs	r4, r0
 8027ba2:	1c43      	adds	r3, r0, #1
 8027ba4:	d15f      	bne.n	8027c66 <_malloc_r+0xf6>
 8027ba6:	6834      	ldr	r4, [r6, #0]
 8027ba8:	9400      	str	r4, [sp, #0]
 8027baa:	9b00      	ldr	r3, [sp, #0]
 8027bac:	2b00      	cmp	r3, #0
 8027bae:	d14a      	bne.n	8027c46 <_malloc_r+0xd6>
 8027bb0:	2c00      	cmp	r4, #0
 8027bb2:	d052      	beq.n	8027c5a <_malloc_r+0xea>
 8027bb4:	6823      	ldr	r3, [r4, #0]
 8027bb6:	0028      	movs	r0, r5
 8027bb8:	18e3      	adds	r3, r4, r3
 8027bba:	9900      	ldr	r1, [sp, #0]
 8027bbc:	9301      	str	r3, [sp, #4]
 8027bbe:	f001 f93f 	bl	8028e40 <_sbrk_r>
 8027bc2:	9b01      	ldr	r3, [sp, #4]
 8027bc4:	4283      	cmp	r3, r0
 8027bc6:	d148      	bne.n	8027c5a <_malloc_r+0xea>
 8027bc8:	6823      	ldr	r3, [r4, #0]
 8027bca:	0028      	movs	r0, r5
 8027bcc:	1aff      	subs	r7, r7, r3
 8027bce:	0039      	movs	r1, r7
 8027bd0:	f7ff ffac 	bl	8027b2c <sbrk_aligned>
 8027bd4:	3001      	adds	r0, #1
 8027bd6:	d040      	beq.n	8027c5a <_malloc_r+0xea>
 8027bd8:	6823      	ldr	r3, [r4, #0]
 8027bda:	19db      	adds	r3, r3, r7
 8027bdc:	6023      	str	r3, [r4, #0]
 8027bde:	6833      	ldr	r3, [r6, #0]
 8027be0:	685a      	ldr	r2, [r3, #4]
 8027be2:	2a00      	cmp	r2, #0
 8027be4:	d133      	bne.n	8027c4e <_malloc_r+0xde>
 8027be6:	9b00      	ldr	r3, [sp, #0]
 8027be8:	6033      	str	r3, [r6, #0]
 8027bea:	e019      	b.n	8027c20 <_malloc_r+0xb0>
 8027bec:	2b00      	cmp	r3, #0
 8027bee:	dac9      	bge.n	8027b84 <_malloc_r+0x14>
 8027bf0:	230c      	movs	r3, #12
 8027bf2:	602b      	str	r3, [r5, #0]
 8027bf4:	2000      	movs	r0, #0
 8027bf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027bf8:	6821      	ldr	r1, [r4, #0]
 8027bfa:	1bc9      	subs	r1, r1, r7
 8027bfc:	d420      	bmi.n	8027c40 <_malloc_r+0xd0>
 8027bfe:	290b      	cmp	r1, #11
 8027c00:	d90a      	bls.n	8027c18 <_malloc_r+0xa8>
 8027c02:	19e2      	adds	r2, r4, r7
 8027c04:	6027      	str	r7, [r4, #0]
 8027c06:	42a3      	cmp	r3, r4
 8027c08:	d104      	bne.n	8027c14 <_malloc_r+0xa4>
 8027c0a:	6032      	str	r2, [r6, #0]
 8027c0c:	6863      	ldr	r3, [r4, #4]
 8027c0e:	6011      	str	r1, [r2, #0]
 8027c10:	6053      	str	r3, [r2, #4]
 8027c12:	e005      	b.n	8027c20 <_malloc_r+0xb0>
 8027c14:	605a      	str	r2, [r3, #4]
 8027c16:	e7f9      	b.n	8027c0c <_malloc_r+0x9c>
 8027c18:	6862      	ldr	r2, [r4, #4]
 8027c1a:	42a3      	cmp	r3, r4
 8027c1c:	d10e      	bne.n	8027c3c <_malloc_r+0xcc>
 8027c1e:	6032      	str	r2, [r6, #0]
 8027c20:	0028      	movs	r0, r5
 8027c22:	f000 f83f 	bl	8027ca4 <__malloc_unlock>
 8027c26:	0020      	movs	r0, r4
 8027c28:	2207      	movs	r2, #7
 8027c2a:	300b      	adds	r0, #11
 8027c2c:	1d23      	adds	r3, r4, #4
 8027c2e:	4390      	bics	r0, r2
 8027c30:	1ac2      	subs	r2, r0, r3
 8027c32:	4298      	cmp	r0, r3
 8027c34:	d0df      	beq.n	8027bf6 <_malloc_r+0x86>
 8027c36:	1a1b      	subs	r3, r3, r0
 8027c38:	50a3      	str	r3, [r4, r2]
 8027c3a:	e7dc      	b.n	8027bf6 <_malloc_r+0x86>
 8027c3c:	605a      	str	r2, [r3, #4]
 8027c3e:	e7ef      	b.n	8027c20 <_malloc_r+0xb0>
 8027c40:	0023      	movs	r3, r4
 8027c42:	6864      	ldr	r4, [r4, #4]
 8027c44:	e7a6      	b.n	8027b94 <_malloc_r+0x24>
 8027c46:	9c00      	ldr	r4, [sp, #0]
 8027c48:	6863      	ldr	r3, [r4, #4]
 8027c4a:	9300      	str	r3, [sp, #0]
 8027c4c:	e7ad      	b.n	8027baa <_malloc_r+0x3a>
 8027c4e:	001a      	movs	r2, r3
 8027c50:	685b      	ldr	r3, [r3, #4]
 8027c52:	42a3      	cmp	r3, r4
 8027c54:	d1fb      	bne.n	8027c4e <_malloc_r+0xde>
 8027c56:	2300      	movs	r3, #0
 8027c58:	e7da      	b.n	8027c10 <_malloc_r+0xa0>
 8027c5a:	230c      	movs	r3, #12
 8027c5c:	0028      	movs	r0, r5
 8027c5e:	602b      	str	r3, [r5, #0]
 8027c60:	f000 f820 	bl	8027ca4 <__malloc_unlock>
 8027c64:	e7c6      	b.n	8027bf4 <_malloc_r+0x84>
 8027c66:	6007      	str	r7, [r0, #0]
 8027c68:	e7da      	b.n	8027c20 <_malloc_r+0xb0>
 8027c6a:	46c0      	nop			@ (mov r8, r8)
 8027c6c:	20003918 	.word	0x20003918

08027c70 <__ascii_mbtowc>:
 8027c70:	b082      	sub	sp, #8
 8027c72:	2900      	cmp	r1, #0
 8027c74:	d100      	bne.n	8027c78 <__ascii_mbtowc+0x8>
 8027c76:	a901      	add	r1, sp, #4
 8027c78:	1e10      	subs	r0, r2, #0
 8027c7a:	d006      	beq.n	8027c8a <__ascii_mbtowc+0x1a>
 8027c7c:	2b00      	cmp	r3, #0
 8027c7e:	d006      	beq.n	8027c8e <__ascii_mbtowc+0x1e>
 8027c80:	7813      	ldrb	r3, [r2, #0]
 8027c82:	600b      	str	r3, [r1, #0]
 8027c84:	7810      	ldrb	r0, [r2, #0]
 8027c86:	1e43      	subs	r3, r0, #1
 8027c88:	4198      	sbcs	r0, r3
 8027c8a:	b002      	add	sp, #8
 8027c8c:	4770      	bx	lr
 8027c8e:	2002      	movs	r0, #2
 8027c90:	4240      	negs	r0, r0
 8027c92:	e7fa      	b.n	8027c8a <__ascii_mbtowc+0x1a>

08027c94 <__malloc_lock>:
 8027c94:	b510      	push	{r4, lr}
 8027c96:	4802      	ldr	r0, [pc, #8]	@ (8027ca0 <__malloc_lock+0xc>)
 8027c98:	f7fe fd07 	bl	80266aa <__retarget_lock_acquire_recursive>
 8027c9c:	bd10      	pop	{r4, pc}
 8027c9e:	46c0      	nop			@ (mov r8, r8)
 8027ca0:	20003910 	.word	0x20003910

08027ca4 <__malloc_unlock>:
 8027ca4:	b510      	push	{r4, lr}
 8027ca6:	4802      	ldr	r0, [pc, #8]	@ (8027cb0 <__malloc_unlock+0xc>)
 8027ca8:	f7fe fd00 	bl	80266ac <__retarget_lock_release_recursive>
 8027cac:	bd10      	pop	{r4, pc}
 8027cae:	46c0      	nop			@ (mov r8, r8)
 8027cb0:	20003910 	.word	0x20003910

08027cb4 <_Balloc>:
 8027cb4:	b570      	push	{r4, r5, r6, lr}
 8027cb6:	69c5      	ldr	r5, [r0, #28]
 8027cb8:	0006      	movs	r6, r0
 8027cba:	000c      	movs	r4, r1
 8027cbc:	2d00      	cmp	r5, #0
 8027cbe:	d10e      	bne.n	8027cde <_Balloc+0x2a>
 8027cc0:	2010      	movs	r0, #16
 8027cc2:	f7ff ff29 	bl	8027b18 <malloc>
 8027cc6:	1e02      	subs	r2, r0, #0
 8027cc8:	61f0      	str	r0, [r6, #28]
 8027cca:	d104      	bne.n	8027cd6 <_Balloc+0x22>
 8027ccc:	216b      	movs	r1, #107	@ 0x6b
 8027cce:	4b19      	ldr	r3, [pc, #100]	@ (8027d34 <_Balloc+0x80>)
 8027cd0:	4819      	ldr	r0, [pc, #100]	@ (8027d38 <_Balloc+0x84>)
 8027cd2:	f001 f8c7 	bl	8028e64 <__assert_func>
 8027cd6:	6045      	str	r5, [r0, #4]
 8027cd8:	6085      	str	r5, [r0, #8]
 8027cda:	6005      	str	r5, [r0, #0]
 8027cdc:	60c5      	str	r5, [r0, #12]
 8027cde:	69f5      	ldr	r5, [r6, #28]
 8027ce0:	68eb      	ldr	r3, [r5, #12]
 8027ce2:	2b00      	cmp	r3, #0
 8027ce4:	d013      	beq.n	8027d0e <_Balloc+0x5a>
 8027ce6:	69f3      	ldr	r3, [r6, #28]
 8027ce8:	00a2      	lsls	r2, r4, #2
 8027cea:	68db      	ldr	r3, [r3, #12]
 8027cec:	189b      	adds	r3, r3, r2
 8027cee:	6818      	ldr	r0, [r3, #0]
 8027cf0:	2800      	cmp	r0, #0
 8027cf2:	d118      	bne.n	8027d26 <_Balloc+0x72>
 8027cf4:	2101      	movs	r1, #1
 8027cf6:	000d      	movs	r5, r1
 8027cf8:	40a5      	lsls	r5, r4
 8027cfa:	1d6a      	adds	r2, r5, #5
 8027cfc:	0030      	movs	r0, r6
 8027cfe:	0092      	lsls	r2, r2, #2
 8027d00:	f001 f8ce 	bl	8028ea0 <_calloc_r>
 8027d04:	2800      	cmp	r0, #0
 8027d06:	d00c      	beq.n	8027d22 <_Balloc+0x6e>
 8027d08:	6044      	str	r4, [r0, #4]
 8027d0a:	6085      	str	r5, [r0, #8]
 8027d0c:	e00d      	b.n	8027d2a <_Balloc+0x76>
 8027d0e:	2221      	movs	r2, #33	@ 0x21
 8027d10:	2104      	movs	r1, #4
 8027d12:	0030      	movs	r0, r6
 8027d14:	f001 f8c4 	bl	8028ea0 <_calloc_r>
 8027d18:	69f3      	ldr	r3, [r6, #28]
 8027d1a:	60e8      	str	r0, [r5, #12]
 8027d1c:	68db      	ldr	r3, [r3, #12]
 8027d1e:	2b00      	cmp	r3, #0
 8027d20:	d1e1      	bne.n	8027ce6 <_Balloc+0x32>
 8027d22:	2000      	movs	r0, #0
 8027d24:	bd70      	pop	{r4, r5, r6, pc}
 8027d26:	6802      	ldr	r2, [r0, #0]
 8027d28:	601a      	str	r2, [r3, #0]
 8027d2a:	2300      	movs	r3, #0
 8027d2c:	6103      	str	r3, [r0, #16]
 8027d2e:	60c3      	str	r3, [r0, #12]
 8027d30:	e7f8      	b.n	8027d24 <_Balloc+0x70>
 8027d32:	46c0      	nop			@ (mov r8, r8)
 8027d34:	0802eadf 	.word	0x0802eadf
 8027d38:	0802ebbf 	.word	0x0802ebbf

08027d3c <_Bfree>:
 8027d3c:	b570      	push	{r4, r5, r6, lr}
 8027d3e:	69c6      	ldr	r6, [r0, #28]
 8027d40:	0005      	movs	r5, r0
 8027d42:	000c      	movs	r4, r1
 8027d44:	2e00      	cmp	r6, #0
 8027d46:	d10e      	bne.n	8027d66 <_Bfree+0x2a>
 8027d48:	2010      	movs	r0, #16
 8027d4a:	f7ff fee5 	bl	8027b18 <malloc>
 8027d4e:	1e02      	subs	r2, r0, #0
 8027d50:	61e8      	str	r0, [r5, #28]
 8027d52:	d104      	bne.n	8027d5e <_Bfree+0x22>
 8027d54:	218f      	movs	r1, #143	@ 0x8f
 8027d56:	4b09      	ldr	r3, [pc, #36]	@ (8027d7c <_Bfree+0x40>)
 8027d58:	4809      	ldr	r0, [pc, #36]	@ (8027d80 <_Bfree+0x44>)
 8027d5a:	f001 f883 	bl	8028e64 <__assert_func>
 8027d5e:	6046      	str	r6, [r0, #4]
 8027d60:	6086      	str	r6, [r0, #8]
 8027d62:	6006      	str	r6, [r0, #0]
 8027d64:	60c6      	str	r6, [r0, #12]
 8027d66:	2c00      	cmp	r4, #0
 8027d68:	d007      	beq.n	8027d7a <_Bfree+0x3e>
 8027d6a:	69eb      	ldr	r3, [r5, #28]
 8027d6c:	6862      	ldr	r2, [r4, #4]
 8027d6e:	68db      	ldr	r3, [r3, #12]
 8027d70:	0092      	lsls	r2, r2, #2
 8027d72:	189b      	adds	r3, r3, r2
 8027d74:	681a      	ldr	r2, [r3, #0]
 8027d76:	6022      	str	r2, [r4, #0]
 8027d78:	601c      	str	r4, [r3, #0]
 8027d7a:	bd70      	pop	{r4, r5, r6, pc}
 8027d7c:	0802eadf 	.word	0x0802eadf
 8027d80:	0802ebbf 	.word	0x0802ebbf

08027d84 <__multadd>:
 8027d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027d86:	000f      	movs	r7, r1
 8027d88:	9001      	str	r0, [sp, #4]
 8027d8a:	000c      	movs	r4, r1
 8027d8c:	001e      	movs	r6, r3
 8027d8e:	2000      	movs	r0, #0
 8027d90:	690d      	ldr	r5, [r1, #16]
 8027d92:	3714      	adds	r7, #20
 8027d94:	683b      	ldr	r3, [r7, #0]
 8027d96:	3001      	adds	r0, #1
 8027d98:	b299      	uxth	r1, r3
 8027d9a:	4351      	muls	r1, r2
 8027d9c:	0c1b      	lsrs	r3, r3, #16
 8027d9e:	4353      	muls	r3, r2
 8027da0:	1989      	adds	r1, r1, r6
 8027da2:	0c0e      	lsrs	r6, r1, #16
 8027da4:	199b      	adds	r3, r3, r6
 8027da6:	0c1e      	lsrs	r6, r3, #16
 8027da8:	b289      	uxth	r1, r1
 8027daa:	041b      	lsls	r3, r3, #16
 8027dac:	185b      	adds	r3, r3, r1
 8027dae:	c708      	stmia	r7!, {r3}
 8027db0:	4285      	cmp	r5, r0
 8027db2:	dcef      	bgt.n	8027d94 <__multadd+0x10>
 8027db4:	2e00      	cmp	r6, #0
 8027db6:	d022      	beq.n	8027dfe <__multadd+0x7a>
 8027db8:	68a3      	ldr	r3, [r4, #8]
 8027dba:	42ab      	cmp	r3, r5
 8027dbc:	dc19      	bgt.n	8027df2 <__multadd+0x6e>
 8027dbe:	6861      	ldr	r1, [r4, #4]
 8027dc0:	9801      	ldr	r0, [sp, #4]
 8027dc2:	3101      	adds	r1, #1
 8027dc4:	f7ff ff76 	bl	8027cb4 <_Balloc>
 8027dc8:	1e07      	subs	r7, r0, #0
 8027dca:	d105      	bne.n	8027dd8 <__multadd+0x54>
 8027dcc:	003a      	movs	r2, r7
 8027dce:	21ba      	movs	r1, #186	@ 0xba
 8027dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8027e04 <__multadd+0x80>)
 8027dd2:	480d      	ldr	r0, [pc, #52]	@ (8027e08 <__multadd+0x84>)
 8027dd4:	f001 f846 	bl	8028e64 <__assert_func>
 8027dd8:	0021      	movs	r1, r4
 8027dda:	6922      	ldr	r2, [r4, #16]
 8027ddc:	310c      	adds	r1, #12
 8027dde:	3202      	adds	r2, #2
 8027de0:	0092      	lsls	r2, r2, #2
 8027de2:	300c      	adds	r0, #12
 8027de4:	f7fe fc6e 	bl	80266c4 <memcpy>
 8027de8:	0021      	movs	r1, r4
 8027dea:	9801      	ldr	r0, [sp, #4]
 8027dec:	f7ff ffa6 	bl	8027d3c <_Bfree>
 8027df0:	003c      	movs	r4, r7
 8027df2:	1d2b      	adds	r3, r5, #4
 8027df4:	009b      	lsls	r3, r3, #2
 8027df6:	18e3      	adds	r3, r4, r3
 8027df8:	3501      	adds	r5, #1
 8027dfa:	605e      	str	r6, [r3, #4]
 8027dfc:	6125      	str	r5, [r4, #16]
 8027dfe:	0020      	movs	r0, r4
 8027e00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e02:	46c0      	nop			@ (mov r8, r8)
 8027e04:	0802eb4e 	.word	0x0802eb4e
 8027e08:	0802ebbf 	.word	0x0802ebbf

08027e0c <__s2b>:
 8027e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027e0e:	0007      	movs	r7, r0
 8027e10:	0018      	movs	r0, r3
 8027e12:	000c      	movs	r4, r1
 8027e14:	3008      	adds	r0, #8
 8027e16:	2109      	movs	r1, #9
 8027e18:	9301      	str	r3, [sp, #4]
 8027e1a:	0015      	movs	r5, r2
 8027e1c:	f7d8 fa4c 	bl	80002b8 <__divsi3>
 8027e20:	2301      	movs	r3, #1
 8027e22:	2100      	movs	r1, #0
 8027e24:	4283      	cmp	r3, r0
 8027e26:	db0a      	blt.n	8027e3e <__s2b+0x32>
 8027e28:	0038      	movs	r0, r7
 8027e2a:	f7ff ff43 	bl	8027cb4 <_Balloc>
 8027e2e:	1e01      	subs	r1, r0, #0
 8027e30:	d108      	bne.n	8027e44 <__s2b+0x38>
 8027e32:	000a      	movs	r2, r1
 8027e34:	4b19      	ldr	r3, [pc, #100]	@ (8027e9c <__s2b+0x90>)
 8027e36:	481a      	ldr	r0, [pc, #104]	@ (8027ea0 <__s2b+0x94>)
 8027e38:	31d3      	adds	r1, #211	@ 0xd3
 8027e3a:	f001 f813 	bl	8028e64 <__assert_func>
 8027e3e:	005b      	lsls	r3, r3, #1
 8027e40:	3101      	adds	r1, #1
 8027e42:	e7ef      	b.n	8027e24 <__s2b+0x18>
 8027e44:	9b08      	ldr	r3, [sp, #32]
 8027e46:	6143      	str	r3, [r0, #20]
 8027e48:	2301      	movs	r3, #1
 8027e4a:	6103      	str	r3, [r0, #16]
 8027e4c:	2d09      	cmp	r5, #9
 8027e4e:	dd18      	ble.n	8027e82 <__s2b+0x76>
 8027e50:	0023      	movs	r3, r4
 8027e52:	3309      	adds	r3, #9
 8027e54:	001e      	movs	r6, r3
 8027e56:	9300      	str	r3, [sp, #0]
 8027e58:	1964      	adds	r4, r4, r5
 8027e5a:	7833      	ldrb	r3, [r6, #0]
 8027e5c:	220a      	movs	r2, #10
 8027e5e:	0038      	movs	r0, r7
 8027e60:	3b30      	subs	r3, #48	@ 0x30
 8027e62:	f7ff ff8f 	bl	8027d84 <__multadd>
 8027e66:	3601      	adds	r6, #1
 8027e68:	0001      	movs	r1, r0
 8027e6a:	42a6      	cmp	r6, r4
 8027e6c:	d1f5      	bne.n	8027e5a <__s2b+0x4e>
 8027e6e:	002c      	movs	r4, r5
 8027e70:	9b00      	ldr	r3, [sp, #0]
 8027e72:	3c08      	subs	r4, #8
 8027e74:	191c      	adds	r4, r3, r4
 8027e76:	002e      	movs	r6, r5
 8027e78:	9b01      	ldr	r3, [sp, #4]
 8027e7a:	429e      	cmp	r6, r3
 8027e7c:	db04      	blt.n	8027e88 <__s2b+0x7c>
 8027e7e:	0008      	movs	r0, r1
 8027e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e82:	2509      	movs	r5, #9
 8027e84:	340a      	adds	r4, #10
 8027e86:	e7f6      	b.n	8027e76 <__s2b+0x6a>
 8027e88:	1b63      	subs	r3, r4, r5
 8027e8a:	5d9b      	ldrb	r3, [r3, r6]
 8027e8c:	220a      	movs	r2, #10
 8027e8e:	0038      	movs	r0, r7
 8027e90:	3b30      	subs	r3, #48	@ 0x30
 8027e92:	f7ff ff77 	bl	8027d84 <__multadd>
 8027e96:	3601      	adds	r6, #1
 8027e98:	0001      	movs	r1, r0
 8027e9a:	e7ed      	b.n	8027e78 <__s2b+0x6c>
 8027e9c:	0802eb4e 	.word	0x0802eb4e
 8027ea0:	0802ebbf 	.word	0x0802ebbf

08027ea4 <__hi0bits>:
 8027ea4:	2280      	movs	r2, #128	@ 0x80
 8027ea6:	0003      	movs	r3, r0
 8027ea8:	0252      	lsls	r2, r2, #9
 8027eaa:	2000      	movs	r0, #0
 8027eac:	4293      	cmp	r3, r2
 8027eae:	d201      	bcs.n	8027eb4 <__hi0bits+0x10>
 8027eb0:	041b      	lsls	r3, r3, #16
 8027eb2:	3010      	adds	r0, #16
 8027eb4:	2280      	movs	r2, #128	@ 0x80
 8027eb6:	0452      	lsls	r2, r2, #17
 8027eb8:	4293      	cmp	r3, r2
 8027eba:	d201      	bcs.n	8027ec0 <__hi0bits+0x1c>
 8027ebc:	3008      	adds	r0, #8
 8027ebe:	021b      	lsls	r3, r3, #8
 8027ec0:	2280      	movs	r2, #128	@ 0x80
 8027ec2:	0552      	lsls	r2, r2, #21
 8027ec4:	4293      	cmp	r3, r2
 8027ec6:	d201      	bcs.n	8027ecc <__hi0bits+0x28>
 8027ec8:	3004      	adds	r0, #4
 8027eca:	011b      	lsls	r3, r3, #4
 8027ecc:	2280      	movs	r2, #128	@ 0x80
 8027ece:	05d2      	lsls	r2, r2, #23
 8027ed0:	4293      	cmp	r3, r2
 8027ed2:	d201      	bcs.n	8027ed8 <__hi0bits+0x34>
 8027ed4:	3002      	adds	r0, #2
 8027ed6:	009b      	lsls	r3, r3, #2
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	db03      	blt.n	8027ee4 <__hi0bits+0x40>
 8027edc:	3001      	adds	r0, #1
 8027ede:	4213      	tst	r3, r2
 8027ee0:	d100      	bne.n	8027ee4 <__hi0bits+0x40>
 8027ee2:	2020      	movs	r0, #32
 8027ee4:	4770      	bx	lr

08027ee6 <__lo0bits>:
 8027ee6:	6803      	ldr	r3, [r0, #0]
 8027ee8:	0001      	movs	r1, r0
 8027eea:	2207      	movs	r2, #7
 8027eec:	0018      	movs	r0, r3
 8027eee:	4010      	ands	r0, r2
 8027ef0:	4213      	tst	r3, r2
 8027ef2:	d00d      	beq.n	8027f10 <__lo0bits+0x2a>
 8027ef4:	3a06      	subs	r2, #6
 8027ef6:	2000      	movs	r0, #0
 8027ef8:	4213      	tst	r3, r2
 8027efa:	d105      	bne.n	8027f08 <__lo0bits+0x22>
 8027efc:	3002      	adds	r0, #2
 8027efe:	4203      	tst	r3, r0
 8027f00:	d003      	beq.n	8027f0a <__lo0bits+0x24>
 8027f02:	40d3      	lsrs	r3, r2
 8027f04:	0010      	movs	r0, r2
 8027f06:	600b      	str	r3, [r1, #0]
 8027f08:	4770      	bx	lr
 8027f0a:	089b      	lsrs	r3, r3, #2
 8027f0c:	600b      	str	r3, [r1, #0]
 8027f0e:	e7fb      	b.n	8027f08 <__lo0bits+0x22>
 8027f10:	b29a      	uxth	r2, r3
 8027f12:	2a00      	cmp	r2, #0
 8027f14:	d101      	bne.n	8027f1a <__lo0bits+0x34>
 8027f16:	2010      	movs	r0, #16
 8027f18:	0c1b      	lsrs	r3, r3, #16
 8027f1a:	b2da      	uxtb	r2, r3
 8027f1c:	2a00      	cmp	r2, #0
 8027f1e:	d101      	bne.n	8027f24 <__lo0bits+0x3e>
 8027f20:	3008      	adds	r0, #8
 8027f22:	0a1b      	lsrs	r3, r3, #8
 8027f24:	071a      	lsls	r2, r3, #28
 8027f26:	d101      	bne.n	8027f2c <__lo0bits+0x46>
 8027f28:	3004      	adds	r0, #4
 8027f2a:	091b      	lsrs	r3, r3, #4
 8027f2c:	079a      	lsls	r2, r3, #30
 8027f2e:	d101      	bne.n	8027f34 <__lo0bits+0x4e>
 8027f30:	3002      	adds	r0, #2
 8027f32:	089b      	lsrs	r3, r3, #2
 8027f34:	07da      	lsls	r2, r3, #31
 8027f36:	d4e9      	bmi.n	8027f0c <__lo0bits+0x26>
 8027f38:	3001      	adds	r0, #1
 8027f3a:	085b      	lsrs	r3, r3, #1
 8027f3c:	d1e6      	bne.n	8027f0c <__lo0bits+0x26>
 8027f3e:	2020      	movs	r0, #32
 8027f40:	e7e2      	b.n	8027f08 <__lo0bits+0x22>
	...

08027f44 <__i2b>:
 8027f44:	b510      	push	{r4, lr}
 8027f46:	000c      	movs	r4, r1
 8027f48:	2101      	movs	r1, #1
 8027f4a:	f7ff feb3 	bl	8027cb4 <_Balloc>
 8027f4e:	2800      	cmp	r0, #0
 8027f50:	d107      	bne.n	8027f62 <__i2b+0x1e>
 8027f52:	2146      	movs	r1, #70	@ 0x46
 8027f54:	4c05      	ldr	r4, [pc, #20]	@ (8027f6c <__i2b+0x28>)
 8027f56:	0002      	movs	r2, r0
 8027f58:	4b05      	ldr	r3, [pc, #20]	@ (8027f70 <__i2b+0x2c>)
 8027f5a:	0020      	movs	r0, r4
 8027f5c:	31ff      	adds	r1, #255	@ 0xff
 8027f5e:	f000 ff81 	bl	8028e64 <__assert_func>
 8027f62:	2301      	movs	r3, #1
 8027f64:	6144      	str	r4, [r0, #20]
 8027f66:	6103      	str	r3, [r0, #16]
 8027f68:	bd10      	pop	{r4, pc}
 8027f6a:	46c0      	nop			@ (mov r8, r8)
 8027f6c:	0802ebbf 	.word	0x0802ebbf
 8027f70:	0802eb4e 	.word	0x0802eb4e

08027f74 <__multiply>:
 8027f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f76:	0014      	movs	r4, r2
 8027f78:	690a      	ldr	r2, [r1, #16]
 8027f7a:	6923      	ldr	r3, [r4, #16]
 8027f7c:	000d      	movs	r5, r1
 8027f7e:	b089      	sub	sp, #36	@ 0x24
 8027f80:	429a      	cmp	r2, r3
 8027f82:	db02      	blt.n	8027f8a <__multiply+0x16>
 8027f84:	0023      	movs	r3, r4
 8027f86:	000c      	movs	r4, r1
 8027f88:	001d      	movs	r5, r3
 8027f8a:	6927      	ldr	r7, [r4, #16]
 8027f8c:	692e      	ldr	r6, [r5, #16]
 8027f8e:	6861      	ldr	r1, [r4, #4]
 8027f90:	19bb      	adds	r3, r7, r6
 8027f92:	9300      	str	r3, [sp, #0]
 8027f94:	68a3      	ldr	r3, [r4, #8]
 8027f96:	19ba      	adds	r2, r7, r6
 8027f98:	4293      	cmp	r3, r2
 8027f9a:	da00      	bge.n	8027f9e <__multiply+0x2a>
 8027f9c:	3101      	adds	r1, #1
 8027f9e:	f7ff fe89 	bl	8027cb4 <_Balloc>
 8027fa2:	4684      	mov	ip, r0
 8027fa4:	2800      	cmp	r0, #0
 8027fa6:	d106      	bne.n	8027fb6 <__multiply+0x42>
 8027fa8:	21b1      	movs	r1, #177	@ 0xb1
 8027faa:	4662      	mov	r2, ip
 8027fac:	4b44      	ldr	r3, [pc, #272]	@ (80280c0 <__multiply+0x14c>)
 8027fae:	4845      	ldr	r0, [pc, #276]	@ (80280c4 <__multiply+0x150>)
 8027fb0:	0049      	lsls	r1, r1, #1
 8027fb2:	f000 ff57 	bl	8028e64 <__assert_func>
 8027fb6:	0002      	movs	r2, r0
 8027fb8:	19bb      	adds	r3, r7, r6
 8027fba:	3214      	adds	r2, #20
 8027fbc:	009b      	lsls	r3, r3, #2
 8027fbe:	18d3      	adds	r3, r2, r3
 8027fc0:	9301      	str	r3, [sp, #4]
 8027fc2:	2100      	movs	r1, #0
 8027fc4:	0013      	movs	r3, r2
 8027fc6:	9801      	ldr	r0, [sp, #4]
 8027fc8:	4283      	cmp	r3, r0
 8027fca:	d328      	bcc.n	802801e <__multiply+0xaa>
 8027fcc:	0023      	movs	r3, r4
 8027fce:	00bf      	lsls	r7, r7, #2
 8027fd0:	3314      	adds	r3, #20
 8027fd2:	9304      	str	r3, [sp, #16]
 8027fd4:	3514      	adds	r5, #20
 8027fd6:	19db      	adds	r3, r3, r7
 8027fd8:	00b6      	lsls	r6, r6, #2
 8027fda:	9302      	str	r3, [sp, #8]
 8027fdc:	19ab      	adds	r3, r5, r6
 8027fde:	9307      	str	r3, [sp, #28]
 8027fe0:	2304      	movs	r3, #4
 8027fe2:	9305      	str	r3, [sp, #20]
 8027fe4:	0023      	movs	r3, r4
 8027fe6:	9902      	ldr	r1, [sp, #8]
 8027fe8:	3315      	adds	r3, #21
 8027fea:	4299      	cmp	r1, r3
 8027fec:	d305      	bcc.n	8027ffa <__multiply+0x86>
 8027fee:	1b0c      	subs	r4, r1, r4
 8027ff0:	3c15      	subs	r4, #21
 8027ff2:	08a4      	lsrs	r4, r4, #2
 8027ff4:	3401      	adds	r4, #1
 8027ff6:	00a3      	lsls	r3, r4, #2
 8027ff8:	9305      	str	r3, [sp, #20]
 8027ffa:	9b07      	ldr	r3, [sp, #28]
 8027ffc:	429d      	cmp	r5, r3
 8027ffe:	d310      	bcc.n	8028022 <__multiply+0xae>
 8028000:	9b00      	ldr	r3, [sp, #0]
 8028002:	2b00      	cmp	r3, #0
 8028004:	dd05      	ble.n	8028012 <__multiply+0x9e>
 8028006:	9b01      	ldr	r3, [sp, #4]
 8028008:	3b04      	subs	r3, #4
 802800a:	9301      	str	r3, [sp, #4]
 802800c:	681b      	ldr	r3, [r3, #0]
 802800e:	2b00      	cmp	r3, #0
 8028010:	d052      	beq.n	80280b8 <__multiply+0x144>
 8028012:	4663      	mov	r3, ip
 8028014:	4660      	mov	r0, ip
 8028016:	9a00      	ldr	r2, [sp, #0]
 8028018:	611a      	str	r2, [r3, #16]
 802801a:	b009      	add	sp, #36	@ 0x24
 802801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802801e:	c302      	stmia	r3!, {r1}
 8028020:	e7d1      	b.n	8027fc6 <__multiply+0x52>
 8028022:	682c      	ldr	r4, [r5, #0]
 8028024:	b2a4      	uxth	r4, r4
 8028026:	2c00      	cmp	r4, #0
 8028028:	d01f      	beq.n	802806a <__multiply+0xf6>
 802802a:	2300      	movs	r3, #0
 802802c:	0017      	movs	r7, r2
 802802e:	9e04      	ldr	r6, [sp, #16]
 8028030:	9303      	str	r3, [sp, #12]
 8028032:	ce08      	ldmia	r6!, {r3}
 8028034:	6839      	ldr	r1, [r7, #0]
 8028036:	9306      	str	r3, [sp, #24]
 8028038:	466b      	mov	r3, sp
 802803a:	8b1b      	ldrh	r3, [r3, #24]
 802803c:	b288      	uxth	r0, r1
 802803e:	4363      	muls	r3, r4
 8028040:	181b      	adds	r3, r3, r0
 8028042:	9803      	ldr	r0, [sp, #12]
 8028044:	0c09      	lsrs	r1, r1, #16
 8028046:	181b      	adds	r3, r3, r0
 8028048:	9806      	ldr	r0, [sp, #24]
 802804a:	0c00      	lsrs	r0, r0, #16
 802804c:	4360      	muls	r0, r4
 802804e:	1840      	adds	r0, r0, r1
 8028050:	0c19      	lsrs	r1, r3, #16
 8028052:	1841      	adds	r1, r0, r1
 8028054:	0c08      	lsrs	r0, r1, #16
 8028056:	b29b      	uxth	r3, r3
 8028058:	0409      	lsls	r1, r1, #16
 802805a:	4319      	orrs	r1, r3
 802805c:	9b02      	ldr	r3, [sp, #8]
 802805e:	9003      	str	r0, [sp, #12]
 8028060:	c702      	stmia	r7!, {r1}
 8028062:	42b3      	cmp	r3, r6
 8028064:	d8e5      	bhi.n	8028032 <__multiply+0xbe>
 8028066:	9b05      	ldr	r3, [sp, #20]
 8028068:	50d0      	str	r0, [r2, r3]
 802806a:	682c      	ldr	r4, [r5, #0]
 802806c:	0c24      	lsrs	r4, r4, #16
 802806e:	d020      	beq.n	80280b2 <__multiply+0x13e>
 8028070:	2100      	movs	r1, #0
 8028072:	0010      	movs	r0, r2
 8028074:	6813      	ldr	r3, [r2, #0]
 8028076:	9e04      	ldr	r6, [sp, #16]
 8028078:	9103      	str	r1, [sp, #12]
 802807a:	6831      	ldr	r1, [r6, #0]
 802807c:	6807      	ldr	r7, [r0, #0]
 802807e:	b289      	uxth	r1, r1
 8028080:	4361      	muls	r1, r4
 8028082:	0c3f      	lsrs	r7, r7, #16
 8028084:	19c9      	adds	r1, r1, r7
 8028086:	9f03      	ldr	r7, [sp, #12]
 8028088:	b29b      	uxth	r3, r3
 802808a:	19c9      	adds	r1, r1, r7
 802808c:	040f      	lsls	r7, r1, #16
 802808e:	431f      	orrs	r7, r3
 8028090:	6007      	str	r7, [r0, #0]
 8028092:	ce80      	ldmia	r6!, {r7}
 8028094:	6843      	ldr	r3, [r0, #4]
 8028096:	0c3f      	lsrs	r7, r7, #16
 8028098:	4367      	muls	r7, r4
 802809a:	b29b      	uxth	r3, r3
 802809c:	0c09      	lsrs	r1, r1, #16
 802809e:	18fb      	adds	r3, r7, r3
 80280a0:	185b      	adds	r3, r3, r1
 80280a2:	0c19      	lsrs	r1, r3, #16
 80280a4:	9103      	str	r1, [sp, #12]
 80280a6:	9902      	ldr	r1, [sp, #8]
 80280a8:	3004      	adds	r0, #4
 80280aa:	42b1      	cmp	r1, r6
 80280ac:	d8e5      	bhi.n	802807a <__multiply+0x106>
 80280ae:	9905      	ldr	r1, [sp, #20]
 80280b0:	5053      	str	r3, [r2, r1]
 80280b2:	3504      	adds	r5, #4
 80280b4:	3204      	adds	r2, #4
 80280b6:	e7a0      	b.n	8027ffa <__multiply+0x86>
 80280b8:	9b00      	ldr	r3, [sp, #0]
 80280ba:	3b01      	subs	r3, #1
 80280bc:	9300      	str	r3, [sp, #0]
 80280be:	e79f      	b.n	8028000 <__multiply+0x8c>
 80280c0:	0802eb4e 	.word	0x0802eb4e
 80280c4:	0802ebbf 	.word	0x0802ebbf

080280c8 <__pow5mult>:
 80280c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80280ca:	2303      	movs	r3, #3
 80280cc:	0015      	movs	r5, r2
 80280ce:	0007      	movs	r7, r0
 80280d0:	000e      	movs	r6, r1
 80280d2:	401a      	ands	r2, r3
 80280d4:	421d      	tst	r5, r3
 80280d6:	d008      	beq.n	80280ea <__pow5mult+0x22>
 80280d8:	4925      	ldr	r1, [pc, #148]	@ (8028170 <__pow5mult+0xa8>)
 80280da:	3a01      	subs	r2, #1
 80280dc:	0092      	lsls	r2, r2, #2
 80280de:	5852      	ldr	r2, [r2, r1]
 80280e0:	2300      	movs	r3, #0
 80280e2:	0031      	movs	r1, r6
 80280e4:	f7ff fe4e 	bl	8027d84 <__multadd>
 80280e8:	0006      	movs	r6, r0
 80280ea:	10ad      	asrs	r5, r5, #2
 80280ec:	d03d      	beq.n	802816a <__pow5mult+0xa2>
 80280ee:	69fc      	ldr	r4, [r7, #28]
 80280f0:	2c00      	cmp	r4, #0
 80280f2:	d10f      	bne.n	8028114 <__pow5mult+0x4c>
 80280f4:	2010      	movs	r0, #16
 80280f6:	f7ff fd0f 	bl	8027b18 <malloc>
 80280fa:	1e02      	subs	r2, r0, #0
 80280fc:	61f8      	str	r0, [r7, #28]
 80280fe:	d105      	bne.n	802810c <__pow5mult+0x44>
 8028100:	21b4      	movs	r1, #180	@ 0xb4
 8028102:	4b1c      	ldr	r3, [pc, #112]	@ (8028174 <__pow5mult+0xac>)
 8028104:	481c      	ldr	r0, [pc, #112]	@ (8028178 <__pow5mult+0xb0>)
 8028106:	31ff      	adds	r1, #255	@ 0xff
 8028108:	f000 feac 	bl	8028e64 <__assert_func>
 802810c:	6044      	str	r4, [r0, #4]
 802810e:	6084      	str	r4, [r0, #8]
 8028110:	6004      	str	r4, [r0, #0]
 8028112:	60c4      	str	r4, [r0, #12]
 8028114:	69fb      	ldr	r3, [r7, #28]
 8028116:	689c      	ldr	r4, [r3, #8]
 8028118:	9301      	str	r3, [sp, #4]
 802811a:	2c00      	cmp	r4, #0
 802811c:	d108      	bne.n	8028130 <__pow5mult+0x68>
 802811e:	0038      	movs	r0, r7
 8028120:	4916      	ldr	r1, [pc, #88]	@ (802817c <__pow5mult+0xb4>)
 8028122:	f7ff ff0f 	bl	8027f44 <__i2b>
 8028126:	9b01      	ldr	r3, [sp, #4]
 8028128:	0004      	movs	r4, r0
 802812a:	6098      	str	r0, [r3, #8]
 802812c:	2300      	movs	r3, #0
 802812e:	6003      	str	r3, [r0, #0]
 8028130:	2301      	movs	r3, #1
 8028132:	421d      	tst	r5, r3
 8028134:	d00a      	beq.n	802814c <__pow5mult+0x84>
 8028136:	0031      	movs	r1, r6
 8028138:	0022      	movs	r2, r4
 802813a:	0038      	movs	r0, r7
 802813c:	f7ff ff1a 	bl	8027f74 <__multiply>
 8028140:	0031      	movs	r1, r6
 8028142:	9001      	str	r0, [sp, #4]
 8028144:	0038      	movs	r0, r7
 8028146:	f7ff fdf9 	bl	8027d3c <_Bfree>
 802814a:	9e01      	ldr	r6, [sp, #4]
 802814c:	106d      	asrs	r5, r5, #1
 802814e:	d00c      	beq.n	802816a <__pow5mult+0xa2>
 8028150:	6820      	ldr	r0, [r4, #0]
 8028152:	2800      	cmp	r0, #0
 8028154:	d107      	bne.n	8028166 <__pow5mult+0x9e>
 8028156:	0022      	movs	r2, r4
 8028158:	0021      	movs	r1, r4
 802815a:	0038      	movs	r0, r7
 802815c:	f7ff ff0a 	bl	8027f74 <__multiply>
 8028160:	2300      	movs	r3, #0
 8028162:	6020      	str	r0, [r4, #0]
 8028164:	6003      	str	r3, [r0, #0]
 8028166:	0004      	movs	r4, r0
 8028168:	e7e2      	b.n	8028130 <__pow5mult+0x68>
 802816a:	0030      	movs	r0, r6
 802816c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802816e:	46c0      	nop			@ (mov r8, r8)
 8028170:	0802edbc 	.word	0x0802edbc
 8028174:	0802eadf 	.word	0x0802eadf
 8028178:	0802ebbf 	.word	0x0802ebbf
 802817c:	00000271 	.word	0x00000271

08028180 <__lshift>:
 8028180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028182:	000c      	movs	r4, r1
 8028184:	0016      	movs	r6, r2
 8028186:	6923      	ldr	r3, [r4, #16]
 8028188:	1157      	asrs	r7, r2, #5
 802818a:	b085      	sub	sp, #20
 802818c:	18fb      	adds	r3, r7, r3
 802818e:	9301      	str	r3, [sp, #4]
 8028190:	3301      	adds	r3, #1
 8028192:	9300      	str	r3, [sp, #0]
 8028194:	6849      	ldr	r1, [r1, #4]
 8028196:	68a3      	ldr	r3, [r4, #8]
 8028198:	9002      	str	r0, [sp, #8]
 802819a:	9a00      	ldr	r2, [sp, #0]
 802819c:	4293      	cmp	r3, r2
 802819e:	db10      	blt.n	80281c2 <__lshift+0x42>
 80281a0:	9802      	ldr	r0, [sp, #8]
 80281a2:	f7ff fd87 	bl	8027cb4 <_Balloc>
 80281a6:	2300      	movs	r3, #0
 80281a8:	0001      	movs	r1, r0
 80281aa:	0005      	movs	r5, r0
 80281ac:	001a      	movs	r2, r3
 80281ae:	3114      	adds	r1, #20
 80281b0:	4298      	cmp	r0, r3
 80281b2:	d10c      	bne.n	80281ce <__lshift+0x4e>
 80281b4:	21ef      	movs	r1, #239	@ 0xef
 80281b6:	002a      	movs	r2, r5
 80281b8:	4b25      	ldr	r3, [pc, #148]	@ (8028250 <__lshift+0xd0>)
 80281ba:	4826      	ldr	r0, [pc, #152]	@ (8028254 <__lshift+0xd4>)
 80281bc:	0049      	lsls	r1, r1, #1
 80281be:	f000 fe51 	bl	8028e64 <__assert_func>
 80281c2:	3101      	adds	r1, #1
 80281c4:	005b      	lsls	r3, r3, #1
 80281c6:	e7e8      	b.n	802819a <__lshift+0x1a>
 80281c8:	0098      	lsls	r0, r3, #2
 80281ca:	500a      	str	r2, [r1, r0]
 80281cc:	3301      	adds	r3, #1
 80281ce:	42bb      	cmp	r3, r7
 80281d0:	dbfa      	blt.n	80281c8 <__lshift+0x48>
 80281d2:	43fb      	mvns	r3, r7
 80281d4:	17db      	asrs	r3, r3, #31
 80281d6:	401f      	ands	r7, r3
 80281d8:	00bf      	lsls	r7, r7, #2
 80281da:	0023      	movs	r3, r4
 80281dc:	201f      	movs	r0, #31
 80281de:	19c9      	adds	r1, r1, r7
 80281e0:	0037      	movs	r7, r6
 80281e2:	6922      	ldr	r2, [r4, #16]
 80281e4:	3314      	adds	r3, #20
 80281e6:	0092      	lsls	r2, r2, #2
 80281e8:	189a      	adds	r2, r3, r2
 80281ea:	4007      	ands	r7, r0
 80281ec:	4206      	tst	r6, r0
 80281ee:	d029      	beq.n	8028244 <__lshift+0xc4>
 80281f0:	3001      	adds	r0, #1
 80281f2:	1bc0      	subs	r0, r0, r7
 80281f4:	9003      	str	r0, [sp, #12]
 80281f6:	468c      	mov	ip, r1
 80281f8:	2000      	movs	r0, #0
 80281fa:	681e      	ldr	r6, [r3, #0]
 80281fc:	40be      	lsls	r6, r7
 80281fe:	4306      	orrs	r6, r0
 8028200:	4660      	mov	r0, ip
 8028202:	c040      	stmia	r0!, {r6}
 8028204:	4684      	mov	ip, r0
 8028206:	9e03      	ldr	r6, [sp, #12]
 8028208:	cb01      	ldmia	r3!, {r0}
 802820a:	40f0      	lsrs	r0, r6
 802820c:	429a      	cmp	r2, r3
 802820e:	d8f4      	bhi.n	80281fa <__lshift+0x7a>
 8028210:	0026      	movs	r6, r4
 8028212:	3615      	adds	r6, #21
 8028214:	2304      	movs	r3, #4
 8028216:	42b2      	cmp	r2, r6
 8028218:	d304      	bcc.n	8028224 <__lshift+0xa4>
 802821a:	1b13      	subs	r3, r2, r4
 802821c:	3b15      	subs	r3, #21
 802821e:	089b      	lsrs	r3, r3, #2
 8028220:	3301      	adds	r3, #1
 8028222:	009b      	lsls	r3, r3, #2
 8028224:	50c8      	str	r0, [r1, r3]
 8028226:	2800      	cmp	r0, #0
 8028228:	d002      	beq.n	8028230 <__lshift+0xb0>
 802822a:	9b01      	ldr	r3, [sp, #4]
 802822c:	3302      	adds	r3, #2
 802822e:	9300      	str	r3, [sp, #0]
 8028230:	9b00      	ldr	r3, [sp, #0]
 8028232:	9802      	ldr	r0, [sp, #8]
 8028234:	3b01      	subs	r3, #1
 8028236:	0021      	movs	r1, r4
 8028238:	612b      	str	r3, [r5, #16]
 802823a:	f7ff fd7f 	bl	8027d3c <_Bfree>
 802823e:	0028      	movs	r0, r5
 8028240:	b005      	add	sp, #20
 8028242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028244:	cb01      	ldmia	r3!, {r0}
 8028246:	c101      	stmia	r1!, {r0}
 8028248:	429a      	cmp	r2, r3
 802824a:	d8fb      	bhi.n	8028244 <__lshift+0xc4>
 802824c:	e7f0      	b.n	8028230 <__lshift+0xb0>
 802824e:	46c0      	nop			@ (mov r8, r8)
 8028250:	0802eb4e 	.word	0x0802eb4e
 8028254:	0802ebbf 	.word	0x0802ebbf

08028258 <__mcmp>:
 8028258:	b530      	push	{r4, r5, lr}
 802825a:	690b      	ldr	r3, [r1, #16]
 802825c:	6904      	ldr	r4, [r0, #16]
 802825e:	0002      	movs	r2, r0
 8028260:	1ae0      	subs	r0, r4, r3
 8028262:	429c      	cmp	r4, r3
 8028264:	d10f      	bne.n	8028286 <__mcmp+0x2e>
 8028266:	3214      	adds	r2, #20
 8028268:	009b      	lsls	r3, r3, #2
 802826a:	3114      	adds	r1, #20
 802826c:	0014      	movs	r4, r2
 802826e:	18c9      	adds	r1, r1, r3
 8028270:	18d2      	adds	r2, r2, r3
 8028272:	3a04      	subs	r2, #4
 8028274:	3904      	subs	r1, #4
 8028276:	6815      	ldr	r5, [r2, #0]
 8028278:	680b      	ldr	r3, [r1, #0]
 802827a:	429d      	cmp	r5, r3
 802827c:	d004      	beq.n	8028288 <__mcmp+0x30>
 802827e:	2001      	movs	r0, #1
 8028280:	429d      	cmp	r5, r3
 8028282:	d200      	bcs.n	8028286 <__mcmp+0x2e>
 8028284:	3802      	subs	r0, #2
 8028286:	bd30      	pop	{r4, r5, pc}
 8028288:	4294      	cmp	r4, r2
 802828a:	d3f2      	bcc.n	8028272 <__mcmp+0x1a>
 802828c:	e7fb      	b.n	8028286 <__mcmp+0x2e>
	...

08028290 <__mdiff>:
 8028290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028292:	000c      	movs	r4, r1
 8028294:	b087      	sub	sp, #28
 8028296:	9000      	str	r0, [sp, #0]
 8028298:	0011      	movs	r1, r2
 802829a:	0020      	movs	r0, r4
 802829c:	0017      	movs	r7, r2
 802829e:	f7ff ffdb 	bl	8028258 <__mcmp>
 80282a2:	1e05      	subs	r5, r0, #0
 80282a4:	d110      	bne.n	80282c8 <__mdiff+0x38>
 80282a6:	0001      	movs	r1, r0
 80282a8:	9800      	ldr	r0, [sp, #0]
 80282aa:	f7ff fd03 	bl	8027cb4 <_Balloc>
 80282ae:	1e02      	subs	r2, r0, #0
 80282b0:	d104      	bne.n	80282bc <__mdiff+0x2c>
 80282b2:	4b40      	ldr	r3, [pc, #256]	@ (80283b4 <__mdiff+0x124>)
 80282b4:	4840      	ldr	r0, [pc, #256]	@ (80283b8 <__mdiff+0x128>)
 80282b6:	4941      	ldr	r1, [pc, #260]	@ (80283bc <__mdiff+0x12c>)
 80282b8:	f000 fdd4 	bl	8028e64 <__assert_func>
 80282bc:	2301      	movs	r3, #1
 80282be:	6145      	str	r5, [r0, #20]
 80282c0:	6103      	str	r3, [r0, #16]
 80282c2:	0010      	movs	r0, r2
 80282c4:	b007      	add	sp, #28
 80282c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80282c8:	2600      	movs	r6, #0
 80282ca:	42b0      	cmp	r0, r6
 80282cc:	da03      	bge.n	80282d6 <__mdiff+0x46>
 80282ce:	0023      	movs	r3, r4
 80282d0:	003c      	movs	r4, r7
 80282d2:	001f      	movs	r7, r3
 80282d4:	3601      	adds	r6, #1
 80282d6:	6861      	ldr	r1, [r4, #4]
 80282d8:	9800      	ldr	r0, [sp, #0]
 80282da:	f7ff fceb 	bl	8027cb4 <_Balloc>
 80282de:	1e02      	subs	r2, r0, #0
 80282e0:	d103      	bne.n	80282ea <__mdiff+0x5a>
 80282e2:	4b34      	ldr	r3, [pc, #208]	@ (80283b4 <__mdiff+0x124>)
 80282e4:	4834      	ldr	r0, [pc, #208]	@ (80283b8 <__mdiff+0x128>)
 80282e6:	4936      	ldr	r1, [pc, #216]	@ (80283c0 <__mdiff+0x130>)
 80282e8:	e7e6      	b.n	80282b8 <__mdiff+0x28>
 80282ea:	6923      	ldr	r3, [r4, #16]
 80282ec:	3414      	adds	r4, #20
 80282ee:	9300      	str	r3, [sp, #0]
 80282f0:	009b      	lsls	r3, r3, #2
 80282f2:	18e3      	adds	r3, r4, r3
 80282f4:	0021      	movs	r1, r4
 80282f6:	9401      	str	r4, [sp, #4]
 80282f8:	003c      	movs	r4, r7
 80282fa:	9302      	str	r3, [sp, #8]
 80282fc:	693b      	ldr	r3, [r7, #16]
 80282fe:	3414      	adds	r4, #20
 8028300:	009b      	lsls	r3, r3, #2
 8028302:	18e3      	adds	r3, r4, r3
 8028304:	9303      	str	r3, [sp, #12]
 8028306:	0003      	movs	r3, r0
 8028308:	60c6      	str	r6, [r0, #12]
 802830a:	468c      	mov	ip, r1
 802830c:	2000      	movs	r0, #0
 802830e:	3314      	adds	r3, #20
 8028310:	9304      	str	r3, [sp, #16]
 8028312:	9305      	str	r3, [sp, #20]
 8028314:	4663      	mov	r3, ip
 8028316:	cb20      	ldmia	r3!, {r5}
 8028318:	b2a9      	uxth	r1, r5
 802831a:	000e      	movs	r6, r1
 802831c:	469c      	mov	ip, r3
 802831e:	cc08      	ldmia	r4!, {r3}
 8028320:	0c2d      	lsrs	r5, r5, #16
 8028322:	b299      	uxth	r1, r3
 8028324:	1a71      	subs	r1, r6, r1
 8028326:	1809      	adds	r1, r1, r0
 8028328:	0c1b      	lsrs	r3, r3, #16
 802832a:	1408      	asrs	r0, r1, #16
 802832c:	1aeb      	subs	r3, r5, r3
 802832e:	181b      	adds	r3, r3, r0
 8028330:	1418      	asrs	r0, r3, #16
 8028332:	b289      	uxth	r1, r1
 8028334:	041b      	lsls	r3, r3, #16
 8028336:	4319      	orrs	r1, r3
 8028338:	9b05      	ldr	r3, [sp, #20]
 802833a:	c302      	stmia	r3!, {r1}
 802833c:	9305      	str	r3, [sp, #20]
 802833e:	9b03      	ldr	r3, [sp, #12]
 8028340:	42a3      	cmp	r3, r4
 8028342:	d8e7      	bhi.n	8028314 <__mdiff+0x84>
 8028344:	0039      	movs	r1, r7
 8028346:	9c03      	ldr	r4, [sp, #12]
 8028348:	3115      	adds	r1, #21
 802834a:	2304      	movs	r3, #4
 802834c:	428c      	cmp	r4, r1
 802834e:	d304      	bcc.n	802835a <__mdiff+0xca>
 8028350:	1be3      	subs	r3, r4, r7
 8028352:	3b15      	subs	r3, #21
 8028354:	089b      	lsrs	r3, r3, #2
 8028356:	3301      	adds	r3, #1
 8028358:	009b      	lsls	r3, r3, #2
 802835a:	9901      	ldr	r1, [sp, #4]
 802835c:	18cd      	adds	r5, r1, r3
 802835e:	9904      	ldr	r1, [sp, #16]
 8028360:	002e      	movs	r6, r5
 8028362:	18cb      	adds	r3, r1, r3
 8028364:	001f      	movs	r7, r3
 8028366:	9902      	ldr	r1, [sp, #8]
 8028368:	428e      	cmp	r6, r1
 802836a:	d311      	bcc.n	8028390 <__mdiff+0x100>
 802836c:	9c02      	ldr	r4, [sp, #8]
 802836e:	1ee9      	subs	r1, r5, #3
 8028370:	2000      	movs	r0, #0
 8028372:	428c      	cmp	r4, r1
 8028374:	d304      	bcc.n	8028380 <__mdiff+0xf0>
 8028376:	0021      	movs	r1, r4
 8028378:	3103      	adds	r1, #3
 802837a:	1b49      	subs	r1, r1, r5
 802837c:	0889      	lsrs	r1, r1, #2
 802837e:	0088      	lsls	r0, r1, #2
 8028380:	181b      	adds	r3, r3, r0
 8028382:	3b04      	subs	r3, #4
 8028384:	6819      	ldr	r1, [r3, #0]
 8028386:	2900      	cmp	r1, #0
 8028388:	d010      	beq.n	80283ac <__mdiff+0x11c>
 802838a:	9b00      	ldr	r3, [sp, #0]
 802838c:	6113      	str	r3, [r2, #16]
 802838e:	e798      	b.n	80282c2 <__mdiff+0x32>
 8028390:	4684      	mov	ip, r0
 8028392:	ce02      	ldmia	r6!, {r1}
 8028394:	b288      	uxth	r0, r1
 8028396:	4460      	add	r0, ip
 8028398:	1400      	asrs	r0, r0, #16
 802839a:	0c0c      	lsrs	r4, r1, #16
 802839c:	1904      	adds	r4, r0, r4
 802839e:	4461      	add	r1, ip
 80283a0:	1420      	asrs	r0, r4, #16
 80283a2:	b289      	uxth	r1, r1
 80283a4:	0424      	lsls	r4, r4, #16
 80283a6:	4321      	orrs	r1, r4
 80283a8:	c702      	stmia	r7!, {r1}
 80283aa:	e7dc      	b.n	8028366 <__mdiff+0xd6>
 80283ac:	9900      	ldr	r1, [sp, #0]
 80283ae:	3901      	subs	r1, #1
 80283b0:	9100      	str	r1, [sp, #0]
 80283b2:	e7e6      	b.n	8028382 <__mdiff+0xf2>
 80283b4:	0802eb4e 	.word	0x0802eb4e
 80283b8:	0802ebbf 	.word	0x0802ebbf
 80283bc:	00000237 	.word	0x00000237
 80283c0:	00000245 	.word	0x00000245

080283c4 <__ulp>:
 80283c4:	b510      	push	{r4, lr}
 80283c6:	2400      	movs	r4, #0
 80283c8:	4b0c      	ldr	r3, [pc, #48]	@ (80283fc <__ulp+0x38>)
 80283ca:	4a0d      	ldr	r2, [pc, #52]	@ (8028400 <__ulp+0x3c>)
 80283cc:	400b      	ands	r3, r1
 80283ce:	189b      	adds	r3, r3, r2
 80283d0:	42a3      	cmp	r3, r4
 80283d2:	dc06      	bgt.n	80283e2 <__ulp+0x1e>
 80283d4:	425b      	negs	r3, r3
 80283d6:	151a      	asrs	r2, r3, #20
 80283d8:	2a13      	cmp	r2, #19
 80283da:	dc05      	bgt.n	80283e8 <__ulp+0x24>
 80283dc:	2380      	movs	r3, #128	@ 0x80
 80283de:	031b      	lsls	r3, r3, #12
 80283e0:	4113      	asrs	r3, r2
 80283e2:	0019      	movs	r1, r3
 80283e4:	0020      	movs	r0, r4
 80283e6:	bd10      	pop	{r4, pc}
 80283e8:	3a14      	subs	r2, #20
 80283ea:	2401      	movs	r4, #1
 80283ec:	2a1e      	cmp	r2, #30
 80283ee:	dc02      	bgt.n	80283f6 <__ulp+0x32>
 80283f0:	2480      	movs	r4, #128	@ 0x80
 80283f2:	0624      	lsls	r4, r4, #24
 80283f4:	40d4      	lsrs	r4, r2
 80283f6:	2300      	movs	r3, #0
 80283f8:	e7f3      	b.n	80283e2 <__ulp+0x1e>
 80283fa:	46c0      	nop			@ (mov r8, r8)
 80283fc:	7ff00000 	.word	0x7ff00000
 8028400:	fcc00000 	.word	0xfcc00000

08028404 <__b2d>:
 8028404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028406:	0006      	movs	r6, r0
 8028408:	6903      	ldr	r3, [r0, #16]
 802840a:	3614      	adds	r6, #20
 802840c:	009b      	lsls	r3, r3, #2
 802840e:	18f3      	adds	r3, r6, r3
 8028410:	1f1d      	subs	r5, r3, #4
 8028412:	682c      	ldr	r4, [r5, #0]
 8028414:	000f      	movs	r7, r1
 8028416:	0020      	movs	r0, r4
 8028418:	9301      	str	r3, [sp, #4]
 802841a:	f7ff fd43 	bl	8027ea4 <__hi0bits>
 802841e:	2220      	movs	r2, #32
 8028420:	1a12      	subs	r2, r2, r0
 8028422:	603a      	str	r2, [r7, #0]
 8028424:	0003      	movs	r3, r0
 8028426:	4a1c      	ldr	r2, [pc, #112]	@ (8028498 <__b2d+0x94>)
 8028428:	280a      	cmp	r0, #10
 802842a:	dc15      	bgt.n	8028458 <__b2d+0x54>
 802842c:	210b      	movs	r1, #11
 802842e:	0027      	movs	r7, r4
 8028430:	1a09      	subs	r1, r1, r0
 8028432:	40cf      	lsrs	r7, r1
 8028434:	433a      	orrs	r2, r7
 8028436:	468c      	mov	ip, r1
 8028438:	0011      	movs	r1, r2
 802843a:	2200      	movs	r2, #0
 802843c:	42ae      	cmp	r6, r5
 802843e:	d202      	bcs.n	8028446 <__b2d+0x42>
 8028440:	9a01      	ldr	r2, [sp, #4]
 8028442:	3a08      	subs	r2, #8
 8028444:	6812      	ldr	r2, [r2, #0]
 8028446:	3315      	adds	r3, #21
 8028448:	409c      	lsls	r4, r3
 802844a:	4663      	mov	r3, ip
 802844c:	0027      	movs	r7, r4
 802844e:	40da      	lsrs	r2, r3
 8028450:	4317      	orrs	r7, r2
 8028452:	0038      	movs	r0, r7
 8028454:	b003      	add	sp, #12
 8028456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028458:	2700      	movs	r7, #0
 802845a:	42ae      	cmp	r6, r5
 802845c:	d202      	bcs.n	8028464 <__b2d+0x60>
 802845e:	9d01      	ldr	r5, [sp, #4]
 8028460:	3d08      	subs	r5, #8
 8028462:	682f      	ldr	r7, [r5, #0]
 8028464:	210b      	movs	r1, #11
 8028466:	4249      	negs	r1, r1
 8028468:	468c      	mov	ip, r1
 802846a:	449c      	add	ip, r3
 802846c:	2b0b      	cmp	r3, #11
 802846e:	d010      	beq.n	8028492 <__b2d+0x8e>
 8028470:	4661      	mov	r1, ip
 8028472:	2320      	movs	r3, #32
 8028474:	408c      	lsls	r4, r1
 8028476:	1a5b      	subs	r3, r3, r1
 8028478:	0039      	movs	r1, r7
 802847a:	40d9      	lsrs	r1, r3
 802847c:	430c      	orrs	r4, r1
 802847e:	4322      	orrs	r2, r4
 8028480:	0011      	movs	r1, r2
 8028482:	2200      	movs	r2, #0
 8028484:	42b5      	cmp	r5, r6
 8028486:	d901      	bls.n	802848c <__b2d+0x88>
 8028488:	3d04      	subs	r5, #4
 802848a:	682a      	ldr	r2, [r5, #0]
 802848c:	4664      	mov	r4, ip
 802848e:	40a7      	lsls	r7, r4
 8028490:	e7dd      	b.n	802844e <__b2d+0x4a>
 8028492:	4322      	orrs	r2, r4
 8028494:	0011      	movs	r1, r2
 8028496:	e7dc      	b.n	8028452 <__b2d+0x4e>
 8028498:	3ff00000 	.word	0x3ff00000

0802849c <__d2b>:
 802849c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802849e:	2101      	movs	r1, #1
 80284a0:	0016      	movs	r6, r2
 80284a2:	001f      	movs	r7, r3
 80284a4:	f7ff fc06 	bl	8027cb4 <_Balloc>
 80284a8:	1e04      	subs	r4, r0, #0
 80284aa:	d105      	bne.n	80284b8 <__d2b+0x1c>
 80284ac:	0022      	movs	r2, r4
 80284ae:	4b25      	ldr	r3, [pc, #148]	@ (8028544 <__d2b+0xa8>)
 80284b0:	4825      	ldr	r0, [pc, #148]	@ (8028548 <__d2b+0xac>)
 80284b2:	4926      	ldr	r1, [pc, #152]	@ (802854c <__d2b+0xb0>)
 80284b4:	f000 fcd6 	bl	8028e64 <__assert_func>
 80284b8:	033b      	lsls	r3, r7, #12
 80284ba:	007d      	lsls	r5, r7, #1
 80284bc:	0b1b      	lsrs	r3, r3, #12
 80284be:	0d6d      	lsrs	r5, r5, #21
 80284c0:	d002      	beq.n	80284c8 <__d2b+0x2c>
 80284c2:	2280      	movs	r2, #128	@ 0x80
 80284c4:	0352      	lsls	r2, r2, #13
 80284c6:	4313      	orrs	r3, r2
 80284c8:	9301      	str	r3, [sp, #4]
 80284ca:	2e00      	cmp	r6, #0
 80284cc:	d025      	beq.n	802851a <__d2b+0x7e>
 80284ce:	4668      	mov	r0, sp
 80284d0:	9600      	str	r6, [sp, #0]
 80284d2:	f7ff fd08 	bl	8027ee6 <__lo0bits>
 80284d6:	9b01      	ldr	r3, [sp, #4]
 80284d8:	9900      	ldr	r1, [sp, #0]
 80284da:	2800      	cmp	r0, #0
 80284dc:	d01b      	beq.n	8028516 <__d2b+0x7a>
 80284de:	2220      	movs	r2, #32
 80284e0:	001e      	movs	r6, r3
 80284e2:	1a12      	subs	r2, r2, r0
 80284e4:	4096      	lsls	r6, r2
 80284e6:	0032      	movs	r2, r6
 80284e8:	40c3      	lsrs	r3, r0
 80284ea:	430a      	orrs	r2, r1
 80284ec:	6162      	str	r2, [r4, #20]
 80284ee:	9301      	str	r3, [sp, #4]
 80284f0:	9e01      	ldr	r6, [sp, #4]
 80284f2:	61a6      	str	r6, [r4, #24]
 80284f4:	1e73      	subs	r3, r6, #1
 80284f6:	419e      	sbcs	r6, r3
 80284f8:	3601      	adds	r6, #1
 80284fa:	6126      	str	r6, [r4, #16]
 80284fc:	2d00      	cmp	r5, #0
 80284fe:	d014      	beq.n	802852a <__d2b+0x8e>
 8028500:	2635      	movs	r6, #53	@ 0x35
 8028502:	4b13      	ldr	r3, [pc, #76]	@ (8028550 <__d2b+0xb4>)
 8028504:	18ed      	adds	r5, r5, r3
 8028506:	9b08      	ldr	r3, [sp, #32]
 8028508:	182d      	adds	r5, r5, r0
 802850a:	601d      	str	r5, [r3, #0]
 802850c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802850e:	1a36      	subs	r6, r6, r0
 8028510:	601e      	str	r6, [r3, #0]
 8028512:	0020      	movs	r0, r4
 8028514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028516:	6161      	str	r1, [r4, #20]
 8028518:	e7ea      	b.n	80284f0 <__d2b+0x54>
 802851a:	a801      	add	r0, sp, #4
 802851c:	f7ff fce3 	bl	8027ee6 <__lo0bits>
 8028520:	9b01      	ldr	r3, [sp, #4]
 8028522:	2601      	movs	r6, #1
 8028524:	6163      	str	r3, [r4, #20]
 8028526:	3020      	adds	r0, #32
 8028528:	e7e7      	b.n	80284fa <__d2b+0x5e>
 802852a:	4b0a      	ldr	r3, [pc, #40]	@ (8028554 <__d2b+0xb8>)
 802852c:	18c0      	adds	r0, r0, r3
 802852e:	9b08      	ldr	r3, [sp, #32]
 8028530:	6018      	str	r0, [r3, #0]
 8028532:	4b09      	ldr	r3, [pc, #36]	@ (8028558 <__d2b+0xbc>)
 8028534:	18f3      	adds	r3, r6, r3
 8028536:	009b      	lsls	r3, r3, #2
 8028538:	18e3      	adds	r3, r4, r3
 802853a:	6958      	ldr	r0, [r3, #20]
 802853c:	f7ff fcb2 	bl	8027ea4 <__hi0bits>
 8028540:	0176      	lsls	r6, r6, #5
 8028542:	e7e3      	b.n	802850c <__d2b+0x70>
 8028544:	0802eb4e 	.word	0x0802eb4e
 8028548:	0802ebbf 	.word	0x0802ebbf
 802854c:	0000030f 	.word	0x0000030f
 8028550:	fffffbcd 	.word	0xfffffbcd
 8028554:	fffffbce 	.word	0xfffffbce
 8028558:	3fffffff 	.word	0x3fffffff

0802855c <__ratio>:
 802855c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802855e:	b087      	sub	sp, #28
 8028560:	000f      	movs	r7, r1
 8028562:	a904      	add	r1, sp, #16
 8028564:	0006      	movs	r6, r0
 8028566:	f7ff ff4d 	bl	8028404 <__b2d>
 802856a:	9000      	str	r0, [sp, #0]
 802856c:	9101      	str	r1, [sp, #4]
 802856e:	9b00      	ldr	r3, [sp, #0]
 8028570:	9c01      	ldr	r4, [sp, #4]
 8028572:	0038      	movs	r0, r7
 8028574:	a905      	add	r1, sp, #20
 8028576:	9302      	str	r3, [sp, #8]
 8028578:	9403      	str	r4, [sp, #12]
 802857a:	f7ff ff43 	bl	8028404 <__b2d>
 802857e:	000d      	movs	r5, r1
 8028580:	0002      	movs	r2, r0
 8028582:	000b      	movs	r3, r1
 8028584:	6930      	ldr	r0, [r6, #16]
 8028586:	6939      	ldr	r1, [r7, #16]
 8028588:	9e04      	ldr	r6, [sp, #16]
 802858a:	1a40      	subs	r0, r0, r1
 802858c:	9905      	ldr	r1, [sp, #20]
 802858e:	0140      	lsls	r0, r0, #5
 8028590:	1a71      	subs	r1, r6, r1
 8028592:	1841      	adds	r1, r0, r1
 8028594:	0508      	lsls	r0, r1, #20
 8028596:	2900      	cmp	r1, #0
 8028598:	dd08      	ble.n	80285ac <__ratio+0x50>
 802859a:	9901      	ldr	r1, [sp, #4]
 802859c:	1841      	adds	r1, r0, r1
 802859e:	9103      	str	r1, [sp, #12]
 80285a0:	9802      	ldr	r0, [sp, #8]
 80285a2:	9903      	ldr	r1, [sp, #12]
 80285a4:	f7d9 fd9c 	bl	80020e0 <__aeabi_ddiv>
 80285a8:	b007      	add	sp, #28
 80285aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80285ac:	1a2b      	subs	r3, r5, r0
 80285ae:	e7f7      	b.n	80285a0 <__ratio+0x44>

080285b0 <__copybits>:
 80285b0:	b570      	push	{r4, r5, r6, lr}
 80285b2:	0014      	movs	r4, r2
 80285b4:	0005      	movs	r5, r0
 80285b6:	3901      	subs	r1, #1
 80285b8:	6913      	ldr	r3, [r2, #16]
 80285ba:	1149      	asrs	r1, r1, #5
 80285bc:	3101      	adds	r1, #1
 80285be:	0089      	lsls	r1, r1, #2
 80285c0:	3414      	adds	r4, #20
 80285c2:	009b      	lsls	r3, r3, #2
 80285c4:	1841      	adds	r1, r0, r1
 80285c6:	18e3      	adds	r3, r4, r3
 80285c8:	42a3      	cmp	r3, r4
 80285ca:	d80d      	bhi.n	80285e8 <__copybits+0x38>
 80285cc:	0014      	movs	r4, r2
 80285ce:	3411      	adds	r4, #17
 80285d0:	2500      	movs	r5, #0
 80285d2:	42a3      	cmp	r3, r4
 80285d4:	d303      	bcc.n	80285de <__copybits+0x2e>
 80285d6:	1a9b      	subs	r3, r3, r2
 80285d8:	3b11      	subs	r3, #17
 80285da:	089b      	lsrs	r3, r3, #2
 80285dc:	009d      	lsls	r5, r3, #2
 80285de:	2300      	movs	r3, #0
 80285e0:	1940      	adds	r0, r0, r5
 80285e2:	4281      	cmp	r1, r0
 80285e4:	d803      	bhi.n	80285ee <__copybits+0x3e>
 80285e6:	bd70      	pop	{r4, r5, r6, pc}
 80285e8:	cc40      	ldmia	r4!, {r6}
 80285ea:	c540      	stmia	r5!, {r6}
 80285ec:	e7ec      	b.n	80285c8 <__copybits+0x18>
 80285ee:	c008      	stmia	r0!, {r3}
 80285f0:	e7f7      	b.n	80285e2 <__copybits+0x32>

080285f2 <__any_on>:
 80285f2:	0002      	movs	r2, r0
 80285f4:	6900      	ldr	r0, [r0, #16]
 80285f6:	b510      	push	{r4, lr}
 80285f8:	3214      	adds	r2, #20
 80285fa:	114b      	asrs	r3, r1, #5
 80285fc:	4298      	cmp	r0, r3
 80285fe:	db13      	blt.n	8028628 <__any_on+0x36>
 8028600:	dd0c      	ble.n	802861c <__any_on+0x2a>
 8028602:	241f      	movs	r4, #31
 8028604:	0008      	movs	r0, r1
 8028606:	4020      	ands	r0, r4
 8028608:	4221      	tst	r1, r4
 802860a:	d007      	beq.n	802861c <__any_on+0x2a>
 802860c:	0099      	lsls	r1, r3, #2
 802860e:	588c      	ldr	r4, [r1, r2]
 8028610:	0021      	movs	r1, r4
 8028612:	40c1      	lsrs	r1, r0
 8028614:	4081      	lsls	r1, r0
 8028616:	2001      	movs	r0, #1
 8028618:	428c      	cmp	r4, r1
 802861a:	d104      	bne.n	8028626 <__any_on+0x34>
 802861c:	009b      	lsls	r3, r3, #2
 802861e:	18d3      	adds	r3, r2, r3
 8028620:	4293      	cmp	r3, r2
 8028622:	d803      	bhi.n	802862c <__any_on+0x3a>
 8028624:	2000      	movs	r0, #0
 8028626:	bd10      	pop	{r4, pc}
 8028628:	0003      	movs	r3, r0
 802862a:	e7f7      	b.n	802861c <__any_on+0x2a>
 802862c:	3b04      	subs	r3, #4
 802862e:	6819      	ldr	r1, [r3, #0]
 8028630:	2900      	cmp	r1, #0
 8028632:	d0f5      	beq.n	8028620 <__any_on+0x2e>
 8028634:	2001      	movs	r0, #1
 8028636:	e7f6      	b.n	8028626 <__any_on+0x34>

08028638 <__ascii_wctomb>:
 8028638:	0003      	movs	r3, r0
 802863a:	1e08      	subs	r0, r1, #0
 802863c:	d005      	beq.n	802864a <__ascii_wctomb+0x12>
 802863e:	2aff      	cmp	r2, #255	@ 0xff
 8028640:	d904      	bls.n	802864c <__ascii_wctomb+0x14>
 8028642:	228a      	movs	r2, #138	@ 0x8a
 8028644:	2001      	movs	r0, #1
 8028646:	601a      	str	r2, [r3, #0]
 8028648:	4240      	negs	r0, r0
 802864a:	4770      	bx	lr
 802864c:	2001      	movs	r0, #1
 802864e:	700a      	strb	r2, [r1, #0]
 8028650:	e7fb      	b.n	802864a <__ascii_wctomb+0x12>
	...

08028654 <__ssputs_r>:
 8028654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028656:	688e      	ldr	r6, [r1, #8]
 8028658:	b085      	sub	sp, #20
 802865a:	001f      	movs	r7, r3
 802865c:	000c      	movs	r4, r1
 802865e:	680b      	ldr	r3, [r1, #0]
 8028660:	9002      	str	r0, [sp, #8]
 8028662:	9203      	str	r2, [sp, #12]
 8028664:	42be      	cmp	r6, r7
 8028666:	d830      	bhi.n	80286ca <__ssputs_r+0x76>
 8028668:	210c      	movs	r1, #12
 802866a:	5e62      	ldrsh	r2, [r4, r1]
 802866c:	2190      	movs	r1, #144	@ 0x90
 802866e:	00c9      	lsls	r1, r1, #3
 8028670:	420a      	tst	r2, r1
 8028672:	d028      	beq.n	80286c6 <__ssputs_r+0x72>
 8028674:	2003      	movs	r0, #3
 8028676:	6921      	ldr	r1, [r4, #16]
 8028678:	1a5b      	subs	r3, r3, r1
 802867a:	9301      	str	r3, [sp, #4]
 802867c:	6963      	ldr	r3, [r4, #20]
 802867e:	4343      	muls	r3, r0
 8028680:	9801      	ldr	r0, [sp, #4]
 8028682:	0fdd      	lsrs	r5, r3, #31
 8028684:	18ed      	adds	r5, r5, r3
 8028686:	1c7b      	adds	r3, r7, #1
 8028688:	181b      	adds	r3, r3, r0
 802868a:	106d      	asrs	r5, r5, #1
 802868c:	42ab      	cmp	r3, r5
 802868e:	d900      	bls.n	8028692 <__ssputs_r+0x3e>
 8028690:	001d      	movs	r5, r3
 8028692:	0552      	lsls	r2, r2, #21
 8028694:	d528      	bpl.n	80286e8 <__ssputs_r+0x94>
 8028696:	0029      	movs	r1, r5
 8028698:	9802      	ldr	r0, [sp, #8]
 802869a:	f7ff fa69 	bl	8027b70 <_malloc_r>
 802869e:	1e06      	subs	r6, r0, #0
 80286a0:	d02c      	beq.n	80286fc <__ssputs_r+0xa8>
 80286a2:	9a01      	ldr	r2, [sp, #4]
 80286a4:	6921      	ldr	r1, [r4, #16]
 80286a6:	f7fe f80d 	bl	80266c4 <memcpy>
 80286aa:	89a2      	ldrh	r2, [r4, #12]
 80286ac:	4b18      	ldr	r3, [pc, #96]	@ (8028710 <__ssputs_r+0xbc>)
 80286ae:	401a      	ands	r2, r3
 80286b0:	2380      	movs	r3, #128	@ 0x80
 80286b2:	4313      	orrs	r3, r2
 80286b4:	81a3      	strh	r3, [r4, #12]
 80286b6:	9b01      	ldr	r3, [sp, #4]
 80286b8:	6126      	str	r6, [r4, #16]
 80286ba:	18f6      	adds	r6, r6, r3
 80286bc:	6026      	str	r6, [r4, #0]
 80286be:	003e      	movs	r6, r7
 80286c0:	6165      	str	r5, [r4, #20]
 80286c2:	1aed      	subs	r5, r5, r3
 80286c4:	60a5      	str	r5, [r4, #8]
 80286c6:	42be      	cmp	r6, r7
 80286c8:	d900      	bls.n	80286cc <__ssputs_r+0x78>
 80286ca:	003e      	movs	r6, r7
 80286cc:	0032      	movs	r2, r6
 80286ce:	9903      	ldr	r1, [sp, #12]
 80286d0:	6820      	ldr	r0, [r4, #0]
 80286d2:	f000 fb7e 	bl	8028dd2 <memmove>
 80286d6:	2000      	movs	r0, #0
 80286d8:	68a3      	ldr	r3, [r4, #8]
 80286da:	1b9b      	subs	r3, r3, r6
 80286dc:	60a3      	str	r3, [r4, #8]
 80286de:	6823      	ldr	r3, [r4, #0]
 80286e0:	199b      	adds	r3, r3, r6
 80286e2:	6023      	str	r3, [r4, #0]
 80286e4:	b005      	add	sp, #20
 80286e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80286e8:	002a      	movs	r2, r5
 80286ea:	9802      	ldr	r0, [sp, #8]
 80286ec:	f000 fc05 	bl	8028efa <_realloc_r>
 80286f0:	1e06      	subs	r6, r0, #0
 80286f2:	d1e0      	bne.n	80286b6 <__ssputs_r+0x62>
 80286f4:	6921      	ldr	r1, [r4, #16]
 80286f6:	9802      	ldr	r0, [sp, #8]
 80286f8:	f7fe fe6a 	bl	80273d0 <_free_r>
 80286fc:	230c      	movs	r3, #12
 80286fe:	2001      	movs	r0, #1
 8028700:	9a02      	ldr	r2, [sp, #8]
 8028702:	4240      	negs	r0, r0
 8028704:	6013      	str	r3, [r2, #0]
 8028706:	89a2      	ldrh	r2, [r4, #12]
 8028708:	3334      	adds	r3, #52	@ 0x34
 802870a:	4313      	orrs	r3, r2
 802870c:	81a3      	strh	r3, [r4, #12]
 802870e:	e7e9      	b.n	80286e4 <__ssputs_r+0x90>
 8028710:	fffffb7f 	.word	0xfffffb7f

08028714 <_svfiprintf_r>:
 8028714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028716:	b0a1      	sub	sp, #132	@ 0x84
 8028718:	9003      	str	r0, [sp, #12]
 802871a:	001d      	movs	r5, r3
 802871c:	898b      	ldrh	r3, [r1, #12]
 802871e:	000f      	movs	r7, r1
 8028720:	0016      	movs	r6, r2
 8028722:	061b      	lsls	r3, r3, #24
 8028724:	d511      	bpl.n	802874a <_svfiprintf_r+0x36>
 8028726:	690b      	ldr	r3, [r1, #16]
 8028728:	2b00      	cmp	r3, #0
 802872a:	d10e      	bne.n	802874a <_svfiprintf_r+0x36>
 802872c:	2140      	movs	r1, #64	@ 0x40
 802872e:	f7ff fa1f 	bl	8027b70 <_malloc_r>
 8028732:	6038      	str	r0, [r7, #0]
 8028734:	6138      	str	r0, [r7, #16]
 8028736:	2800      	cmp	r0, #0
 8028738:	d105      	bne.n	8028746 <_svfiprintf_r+0x32>
 802873a:	230c      	movs	r3, #12
 802873c:	9a03      	ldr	r2, [sp, #12]
 802873e:	6013      	str	r3, [r2, #0]
 8028740:	2001      	movs	r0, #1
 8028742:	4240      	negs	r0, r0
 8028744:	e0cf      	b.n	80288e6 <_svfiprintf_r+0x1d2>
 8028746:	2340      	movs	r3, #64	@ 0x40
 8028748:	617b      	str	r3, [r7, #20]
 802874a:	2300      	movs	r3, #0
 802874c:	ac08      	add	r4, sp, #32
 802874e:	6163      	str	r3, [r4, #20]
 8028750:	3320      	adds	r3, #32
 8028752:	7663      	strb	r3, [r4, #25]
 8028754:	3310      	adds	r3, #16
 8028756:	76a3      	strb	r3, [r4, #26]
 8028758:	9507      	str	r5, [sp, #28]
 802875a:	0035      	movs	r5, r6
 802875c:	782b      	ldrb	r3, [r5, #0]
 802875e:	2b00      	cmp	r3, #0
 8028760:	d001      	beq.n	8028766 <_svfiprintf_r+0x52>
 8028762:	2b25      	cmp	r3, #37	@ 0x25
 8028764:	d148      	bne.n	80287f8 <_svfiprintf_r+0xe4>
 8028766:	1bab      	subs	r3, r5, r6
 8028768:	9305      	str	r3, [sp, #20]
 802876a:	42b5      	cmp	r5, r6
 802876c:	d00b      	beq.n	8028786 <_svfiprintf_r+0x72>
 802876e:	0032      	movs	r2, r6
 8028770:	0039      	movs	r1, r7
 8028772:	9803      	ldr	r0, [sp, #12]
 8028774:	f7ff ff6e 	bl	8028654 <__ssputs_r>
 8028778:	3001      	adds	r0, #1
 802877a:	d100      	bne.n	802877e <_svfiprintf_r+0x6a>
 802877c:	e0ae      	b.n	80288dc <_svfiprintf_r+0x1c8>
 802877e:	6963      	ldr	r3, [r4, #20]
 8028780:	9a05      	ldr	r2, [sp, #20]
 8028782:	189b      	adds	r3, r3, r2
 8028784:	6163      	str	r3, [r4, #20]
 8028786:	782b      	ldrb	r3, [r5, #0]
 8028788:	2b00      	cmp	r3, #0
 802878a:	d100      	bne.n	802878e <_svfiprintf_r+0x7a>
 802878c:	e0a6      	b.n	80288dc <_svfiprintf_r+0x1c8>
 802878e:	2201      	movs	r2, #1
 8028790:	2300      	movs	r3, #0
 8028792:	4252      	negs	r2, r2
 8028794:	6062      	str	r2, [r4, #4]
 8028796:	a904      	add	r1, sp, #16
 8028798:	3254      	adds	r2, #84	@ 0x54
 802879a:	1852      	adds	r2, r2, r1
 802879c:	1c6e      	adds	r6, r5, #1
 802879e:	6023      	str	r3, [r4, #0]
 80287a0:	60e3      	str	r3, [r4, #12]
 80287a2:	60a3      	str	r3, [r4, #8]
 80287a4:	7013      	strb	r3, [r2, #0]
 80287a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80287a8:	4b54      	ldr	r3, [pc, #336]	@ (80288fc <_svfiprintf_r+0x1e8>)
 80287aa:	2205      	movs	r2, #5
 80287ac:	0018      	movs	r0, r3
 80287ae:	7831      	ldrb	r1, [r6, #0]
 80287b0:	9305      	str	r3, [sp, #20]
 80287b2:	f7fd ff7c 	bl	80266ae <memchr>
 80287b6:	1c75      	adds	r5, r6, #1
 80287b8:	2800      	cmp	r0, #0
 80287ba:	d11f      	bne.n	80287fc <_svfiprintf_r+0xe8>
 80287bc:	6822      	ldr	r2, [r4, #0]
 80287be:	06d3      	lsls	r3, r2, #27
 80287c0:	d504      	bpl.n	80287cc <_svfiprintf_r+0xb8>
 80287c2:	2353      	movs	r3, #83	@ 0x53
 80287c4:	a904      	add	r1, sp, #16
 80287c6:	185b      	adds	r3, r3, r1
 80287c8:	2120      	movs	r1, #32
 80287ca:	7019      	strb	r1, [r3, #0]
 80287cc:	0713      	lsls	r3, r2, #28
 80287ce:	d504      	bpl.n	80287da <_svfiprintf_r+0xc6>
 80287d0:	2353      	movs	r3, #83	@ 0x53
 80287d2:	a904      	add	r1, sp, #16
 80287d4:	185b      	adds	r3, r3, r1
 80287d6:	212b      	movs	r1, #43	@ 0x2b
 80287d8:	7019      	strb	r1, [r3, #0]
 80287da:	7833      	ldrb	r3, [r6, #0]
 80287dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80287de:	d016      	beq.n	802880e <_svfiprintf_r+0xfa>
 80287e0:	0035      	movs	r5, r6
 80287e2:	2100      	movs	r1, #0
 80287e4:	200a      	movs	r0, #10
 80287e6:	68e3      	ldr	r3, [r4, #12]
 80287e8:	782a      	ldrb	r2, [r5, #0]
 80287ea:	1c6e      	adds	r6, r5, #1
 80287ec:	3a30      	subs	r2, #48	@ 0x30
 80287ee:	2a09      	cmp	r2, #9
 80287f0:	d950      	bls.n	8028894 <_svfiprintf_r+0x180>
 80287f2:	2900      	cmp	r1, #0
 80287f4:	d111      	bne.n	802881a <_svfiprintf_r+0x106>
 80287f6:	e017      	b.n	8028828 <_svfiprintf_r+0x114>
 80287f8:	3501      	adds	r5, #1
 80287fa:	e7af      	b.n	802875c <_svfiprintf_r+0x48>
 80287fc:	9b05      	ldr	r3, [sp, #20]
 80287fe:	6822      	ldr	r2, [r4, #0]
 8028800:	1ac0      	subs	r0, r0, r3
 8028802:	2301      	movs	r3, #1
 8028804:	4083      	lsls	r3, r0
 8028806:	4313      	orrs	r3, r2
 8028808:	002e      	movs	r6, r5
 802880a:	6023      	str	r3, [r4, #0]
 802880c:	e7cc      	b.n	80287a8 <_svfiprintf_r+0x94>
 802880e:	9b07      	ldr	r3, [sp, #28]
 8028810:	1d19      	adds	r1, r3, #4
 8028812:	681b      	ldr	r3, [r3, #0]
 8028814:	9107      	str	r1, [sp, #28]
 8028816:	2b00      	cmp	r3, #0
 8028818:	db01      	blt.n	802881e <_svfiprintf_r+0x10a>
 802881a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802881c:	e004      	b.n	8028828 <_svfiprintf_r+0x114>
 802881e:	425b      	negs	r3, r3
 8028820:	60e3      	str	r3, [r4, #12]
 8028822:	2302      	movs	r3, #2
 8028824:	4313      	orrs	r3, r2
 8028826:	6023      	str	r3, [r4, #0]
 8028828:	782b      	ldrb	r3, [r5, #0]
 802882a:	2b2e      	cmp	r3, #46	@ 0x2e
 802882c:	d10c      	bne.n	8028848 <_svfiprintf_r+0x134>
 802882e:	786b      	ldrb	r3, [r5, #1]
 8028830:	2b2a      	cmp	r3, #42	@ 0x2a
 8028832:	d134      	bne.n	802889e <_svfiprintf_r+0x18a>
 8028834:	9b07      	ldr	r3, [sp, #28]
 8028836:	3502      	adds	r5, #2
 8028838:	1d1a      	adds	r2, r3, #4
 802883a:	681b      	ldr	r3, [r3, #0]
 802883c:	9207      	str	r2, [sp, #28]
 802883e:	2b00      	cmp	r3, #0
 8028840:	da01      	bge.n	8028846 <_svfiprintf_r+0x132>
 8028842:	2301      	movs	r3, #1
 8028844:	425b      	negs	r3, r3
 8028846:	9309      	str	r3, [sp, #36]	@ 0x24
 8028848:	4e2d      	ldr	r6, [pc, #180]	@ (8028900 <_svfiprintf_r+0x1ec>)
 802884a:	2203      	movs	r2, #3
 802884c:	0030      	movs	r0, r6
 802884e:	7829      	ldrb	r1, [r5, #0]
 8028850:	f7fd ff2d 	bl	80266ae <memchr>
 8028854:	2800      	cmp	r0, #0
 8028856:	d006      	beq.n	8028866 <_svfiprintf_r+0x152>
 8028858:	2340      	movs	r3, #64	@ 0x40
 802885a:	1b80      	subs	r0, r0, r6
 802885c:	4083      	lsls	r3, r0
 802885e:	6822      	ldr	r2, [r4, #0]
 8028860:	3501      	adds	r5, #1
 8028862:	4313      	orrs	r3, r2
 8028864:	6023      	str	r3, [r4, #0]
 8028866:	7829      	ldrb	r1, [r5, #0]
 8028868:	2206      	movs	r2, #6
 802886a:	4826      	ldr	r0, [pc, #152]	@ (8028904 <_svfiprintf_r+0x1f0>)
 802886c:	1c6e      	adds	r6, r5, #1
 802886e:	7621      	strb	r1, [r4, #24]
 8028870:	f7fd ff1d 	bl	80266ae <memchr>
 8028874:	2800      	cmp	r0, #0
 8028876:	d038      	beq.n	80288ea <_svfiprintf_r+0x1d6>
 8028878:	4b23      	ldr	r3, [pc, #140]	@ (8028908 <_svfiprintf_r+0x1f4>)
 802887a:	2b00      	cmp	r3, #0
 802887c:	d122      	bne.n	80288c4 <_svfiprintf_r+0x1b0>
 802887e:	2207      	movs	r2, #7
 8028880:	9b07      	ldr	r3, [sp, #28]
 8028882:	3307      	adds	r3, #7
 8028884:	4393      	bics	r3, r2
 8028886:	3308      	adds	r3, #8
 8028888:	9307      	str	r3, [sp, #28]
 802888a:	6963      	ldr	r3, [r4, #20]
 802888c:	9a04      	ldr	r2, [sp, #16]
 802888e:	189b      	adds	r3, r3, r2
 8028890:	6163      	str	r3, [r4, #20]
 8028892:	e762      	b.n	802875a <_svfiprintf_r+0x46>
 8028894:	4343      	muls	r3, r0
 8028896:	0035      	movs	r5, r6
 8028898:	2101      	movs	r1, #1
 802889a:	189b      	adds	r3, r3, r2
 802889c:	e7a4      	b.n	80287e8 <_svfiprintf_r+0xd4>
 802889e:	2300      	movs	r3, #0
 80288a0:	200a      	movs	r0, #10
 80288a2:	0019      	movs	r1, r3
 80288a4:	3501      	adds	r5, #1
 80288a6:	6063      	str	r3, [r4, #4]
 80288a8:	782a      	ldrb	r2, [r5, #0]
 80288aa:	1c6e      	adds	r6, r5, #1
 80288ac:	3a30      	subs	r2, #48	@ 0x30
 80288ae:	2a09      	cmp	r2, #9
 80288b0:	d903      	bls.n	80288ba <_svfiprintf_r+0x1a6>
 80288b2:	2b00      	cmp	r3, #0
 80288b4:	d0c8      	beq.n	8028848 <_svfiprintf_r+0x134>
 80288b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80288b8:	e7c6      	b.n	8028848 <_svfiprintf_r+0x134>
 80288ba:	4341      	muls	r1, r0
 80288bc:	0035      	movs	r5, r6
 80288be:	2301      	movs	r3, #1
 80288c0:	1889      	adds	r1, r1, r2
 80288c2:	e7f1      	b.n	80288a8 <_svfiprintf_r+0x194>
 80288c4:	aa07      	add	r2, sp, #28
 80288c6:	9200      	str	r2, [sp, #0]
 80288c8:	0021      	movs	r1, r4
 80288ca:	003a      	movs	r2, r7
 80288cc:	4b0f      	ldr	r3, [pc, #60]	@ (802890c <_svfiprintf_r+0x1f8>)
 80288ce:	9803      	ldr	r0, [sp, #12]
 80288d0:	f7fc ffe6 	bl	80258a0 <_printf_float>
 80288d4:	9004      	str	r0, [sp, #16]
 80288d6:	9b04      	ldr	r3, [sp, #16]
 80288d8:	3301      	adds	r3, #1
 80288da:	d1d6      	bne.n	802888a <_svfiprintf_r+0x176>
 80288dc:	89bb      	ldrh	r3, [r7, #12]
 80288de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80288e0:	065b      	lsls	r3, r3, #25
 80288e2:	d500      	bpl.n	80288e6 <_svfiprintf_r+0x1d2>
 80288e4:	e72c      	b.n	8028740 <_svfiprintf_r+0x2c>
 80288e6:	b021      	add	sp, #132	@ 0x84
 80288e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288ea:	aa07      	add	r2, sp, #28
 80288ec:	9200      	str	r2, [sp, #0]
 80288ee:	0021      	movs	r1, r4
 80288f0:	003a      	movs	r2, r7
 80288f2:	4b06      	ldr	r3, [pc, #24]	@ (802890c <_svfiprintf_r+0x1f8>)
 80288f4:	9803      	ldr	r0, [sp, #12]
 80288f6:	f7fd fa81 	bl	8025dfc <_printf_i>
 80288fa:	e7eb      	b.n	80288d4 <_svfiprintf_r+0x1c0>
 80288fc:	0802ec18 	.word	0x0802ec18
 8028900:	0802ec1e 	.word	0x0802ec1e
 8028904:	0802ec22 	.word	0x0802ec22
 8028908:	080258a1 	.word	0x080258a1
 802890c:	08028655 	.word	0x08028655

08028910 <__sfputc_r>:
 8028910:	6893      	ldr	r3, [r2, #8]
 8028912:	b510      	push	{r4, lr}
 8028914:	3b01      	subs	r3, #1
 8028916:	6093      	str	r3, [r2, #8]
 8028918:	2b00      	cmp	r3, #0
 802891a:	da04      	bge.n	8028926 <__sfputc_r+0x16>
 802891c:	6994      	ldr	r4, [r2, #24]
 802891e:	42a3      	cmp	r3, r4
 8028920:	db07      	blt.n	8028932 <__sfputc_r+0x22>
 8028922:	290a      	cmp	r1, #10
 8028924:	d005      	beq.n	8028932 <__sfputc_r+0x22>
 8028926:	6813      	ldr	r3, [r2, #0]
 8028928:	1c58      	adds	r0, r3, #1
 802892a:	6010      	str	r0, [r2, #0]
 802892c:	7019      	strb	r1, [r3, #0]
 802892e:	0008      	movs	r0, r1
 8028930:	bd10      	pop	{r4, pc}
 8028932:	f7fd fd4b 	bl	80263cc <__swbuf_r>
 8028936:	0001      	movs	r1, r0
 8028938:	e7f9      	b.n	802892e <__sfputc_r+0x1e>

0802893a <__sfputs_r>:
 802893a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802893c:	0006      	movs	r6, r0
 802893e:	000f      	movs	r7, r1
 8028940:	0014      	movs	r4, r2
 8028942:	18d5      	adds	r5, r2, r3
 8028944:	42ac      	cmp	r4, r5
 8028946:	d101      	bne.n	802894c <__sfputs_r+0x12>
 8028948:	2000      	movs	r0, #0
 802894a:	e007      	b.n	802895c <__sfputs_r+0x22>
 802894c:	7821      	ldrb	r1, [r4, #0]
 802894e:	003a      	movs	r2, r7
 8028950:	0030      	movs	r0, r6
 8028952:	f7ff ffdd 	bl	8028910 <__sfputc_r>
 8028956:	3401      	adds	r4, #1
 8028958:	1c43      	adds	r3, r0, #1
 802895a:	d1f3      	bne.n	8028944 <__sfputs_r+0xa>
 802895c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028960 <_vfiprintf_r>:
 8028960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028962:	b0a1      	sub	sp, #132	@ 0x84
 8028964:	000f      	movs	r7, r1
 8028966:	0015      	movs	r5, r2
 8028968:	001e      	movs	r6, r3
 802896a:	9003      	str	r0, [sp, #12]
 802896c:	2800      	cmp	r0, #0
 802896e:	d004      	beq.n	802897a <_vfiprintf_r+0x1a>
 8028970:	6a03      	ldr	r3, [r0, #32]
 8028972:	2b00      	cmp	r3, #0
 8028974:	d101      	bne.n	802897a <_vfiprintf_r+0x1a>
 8028976:	f7fd fbdd 	bl	8026134 <__sinit>
 802897a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802897c:	07db      	lsls	r3, r3, #31
 802897e:	d405      	bmi.n	802898c <_vfiprintf_r+0x2c>
 8028980:	89bb      	ldrh	r3, [r7, #12]
 8028982:	059b      	lsls	r3, r3, #22
 8028984:	d402      	bmi.n	802898c <_vfiprintf_r+0x2c>
 8028986:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028988:	f7fd fe8f 	bl	80266aa <__retarget_lock_acquire_recursive>
 802898c:	89bb      	ldrh	r3, [r7, #12]
 802898e:	071b      	lsls	r3, r3, #28
 8028990:	d502      	bpl.n	8028998 <_vfiprintf_r+0x38>
 8028992:	693b      	ldr	r3, [r7, #16]
 8028994:	2b00      	cmp	r3, #0
 8028996:	d113      	bne.n	80289c0 <_vfiprintf_r+0x60>
 8028998:	0039      	movs	r1, r7
 802899a:	9803      	ldr	r0, [sp, #12]
 802899c:	f7fd fd58 	bl	8026450 <__swsetup_r>
 80289a0:	2800      	cmp	r0, #0
 80289a2:	d00d      	beq.n	80289c0 <_vfiprintf_r+0x60>
 80289a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80289a6:	07db      	lsls	r3, r3, #31
 80289a8:	d503      	bpl.n	80289b2 <_vfiprintf_r+0x52>
 80289aa:	2001      	movs	r0, #1
 80289ac:	4240      	negs	r0, r0
 80289ae:	b021      	add	sp, #132	@ 0x84
 80289b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80289b2:	89bb      	ldrh	r3, [r7, #12]
 80289b4:	059b      	lsls	r3, r3, #22
 80289b6:	d4f8      	bmi.n	80289aa <_vfiprintf_r+0x4a>
 80289b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80289ba:	f7fd fe77 	bl	80266ac <__retarget_lock_release_recursive>
 80289be:	e7f4      	b.n	80289aa <_vfiprintf_r+0x4a>
 80289c0:	2300      	movs	r3, #0
 80289c2:	ac08      	add	r4, sp, #32
 80289c4:	6163      	str	r3, [r4, #20]
 80289c6:	3320      	adds	r3, #32
 80289c8:	7663      	strb	r3, [r4, #25]
 80289ca:	3310      	adds	r3, #16
 80289cc:	76a3      	strb	r3, [r4, #26]
 80289ce:	9607      	str	r6, [sp, #28]
 80289d0:	002e      	movs	r6, r5
 80289d2:	7833      	ldrb	r3, [r6, #0]
 80289d4:	2b00      	cmp	r3, #0
 80289d6:	d001      	beq.n	80289dc <_vfiprintf_r+0x7c>
 80289d8:	2b25      	cmp	r3, #37	@ 0x25
 80289da:	d148      	bne.n	8028a6e <_vfiprintf_r+0x10e>
 80289dc:	1b73      	subs	r3, r6, r5
 80289de:	9305      	str	r3, [sp, #20]
 80289e0:	42ae      	cmp	r6, r5
 80289e2:	d00b      	beq.n	80289fc <_vfiprintf_r+0x9c>
 80289e4:	002a      	movs	r2, r5
 80289e6:	0039      	movs	r1, r7
 80289e8:	9803      	ldr	r0, [sp, #12]
 80289ea:	f7ff ffa6 	bl	802893a <__sfputs_r>
 80289ee:	3001      	adds	r0, #1
 80289f0:	d100      	bne.n	80289f4 <_vfiprintf_r+0x94>
 80289f2:	e0ae      	b.n	8028b52 <_vfiprintf_r+0x1f2>
 80289f4:	6963      	ldr	r3, [r4, #20]
 80289f6:	9a05      	ldr	r2, [sp, #20]
 80289f8:	189b      	adds	r3, r3, r2
 80289fa:	6163      	str	r3, [r4, #20]
 80289fc:	7833      	ldrb	r3, [r6, #0]
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	d100      	bne.n	8028a04 <_vfiprintf_r+0xa4>
 8028a02:	e0a6      	b.n	8028b52 <_vfiprintf_r+0x1f2>
 8028a04:	2201      	movs	r2, #1
 8028a06:	2300      	movs	r3, #0
 8028a08:	4252      	negs	r2, r2
 8028a0a:	6062      	str	r2, [r4, #4]
 8028a0c:	a904      	add	r1, sp, #16
 8028a0e:	3254      	adds	r2, #84	@ 0x54
 8028a10:	1852      	adds	r2, r2, r1
 8028a12:	1c75      	adds	r5, r6, #1
 8028a14:	6023      	str	r3, [r4, #0]
 8028a16:	60e3      	str	r3, [r4, #12]
 8028a18:	60a3      	str	r3, [r4, #8]
 8028a1a:	7013      	strb	r3, [r2, #0]
 8028a1c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028a1e:	4b59      	ldr	r3, [pc, #356]	@ (8028b84 <_vfiprintf_r+0x224>)
 8028a20:	2205      	movs	r2, #5
 8028a22:	0018      	movs	r0, r3
 8028a24:	7829      	ldrb	r1, [r5, #0]
 8028a26:	9305      	str	r3, [sp, #20]
 8028a28:	f7fd fe41 	bl	80266ae <memchr>
 8028a2c:	1c6e      	adds	r6, r5, #1
 8028a2e:	2800      	cmp	r0, #0
 8028a30:	d11f      	bne.n	8028a72 <_vfiprintf_r+0x112>
 8028a32:	6822      	ldr	r2, [r4, #0]
 8028a34:	06d3      	lsls	r3, r2, #27
 8028a36:	d504      	bpl.n	8028a42 <_vfiprintf_r+0xe2>
 8028a38:	2353      	movs	r3, #83	@ 0x53
 8028a3a:	a904      	add	r1, sp, #16
 8028a3c:	185b      	adds	r3, r3, r1
 8028a3e:	2120      	movs	r1, #32
 8028a40:	7019      	strb	r1, [r3, #0]
 8028a42:	0713      	lsls	r3, r2, #28
 8028a44:	d504      	bpl.n	8028a50 <_vfiprintf_r+0xf0>
 8028a46:	2353      	movs	r3, #83	@ 0x53
 8028a48:	a904      	add	r1, sp, #16
 8028a4a:	185b      	adds	r3, r3, r1
 8028a4c:	212b      	movs	r1, #43	@ 0x2b
 8028a4e:	7019      	strb	r1, [r3, #0]
 8028a50:	782b      	ldrb	r3, [r5, #0]
 8028a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a54:	d016      	beq.n	8028a84 <_vfiprintf_r+0x124>
 8028a56:	002e      	movs	r6, r5
 8028a58:	2100      	movs	r1, #0
 8028a5a:	200a      	movs	r0, #10
 8028a5c:	68e3      	ldr	r3, [r4, #12]
 8028a5e:	7832      	ldrb	r2, [r6, #0]
 8028a60:	1c75      	adds	r5, r6, #1
 8028a62:	3a30      	subs	r2, #48	@ 0x30
 8028a64:	2a09      	cmp	r2, #9
 8028a66:	d950      	bls.n	8028b0a <_vfiprintf_r+0x1aa>
 8028a68:	2900      	cmp	r1, #0
 8028a6a:	d111      	bne.n	8028a90 <_vfiprintf_r+0x130>
 8028a6c:	e017      	b.n	8028a9e <_vfiprintf_r+0x13e>
 8028a6e:	3601      	adds	r6, #1
 8028a70:	e7af      	b.n	80289d2 <_vfiprintf_r+0x72>
 8028a72:	9b05      	ldr	r3, [sp, #20]
 8028a74:	6822      	ldr	r2, [r4, #0]
 8028a76:	1ac0      	subs	r0, r0, r3
 8028a78:	2301      	movs	r3, #1
 8028a7a:	4083      	lsls	r3, r0
 8028a7c:	4313      	orrs	r3, r2
 8028a7e:	0035      	movs	r5, r6
 8028a80:	6023      	str	r3, [r4, #0]
 8028a82:	e7cc      	b.n	8028a1e <_vfiprintf_r+0xbe>
 8028a84:	9b07      	ldr	r3, [sp, #28]
 8028a86:	1d19      	adds	r1, r3, #4
 8028a88:	681b      	ldr	r3, [r3, #0]
 8028a8a:	9107      	str	r1, [sp, #28]
 8028a8c:	2b00      	cmp	r3, #0
 8028a8e:	db01      	blt.n	8028a94 <_vfiprintf_r+0x134>
 8028a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028a92:	e004      	b.n	8028a9e <_vfiprintf_r+0x13e>
 8028a94:	425b      	negs	r3, r3
 8028a96:	60e3      	str	r3, [r4, #12]
 8028a98:	2302      	movs	r3, #2
 8028a9a:	4313      	orrs	r3, r2
 8028a9c:	6023      	str	r3, [r4, #0]
 8028a9e:	7833      	ldrb	r3, [r6, #0]
 8028aa0:	2b2e      	cmp	r3, #46	@ 0x2e
 8028aa2:	d10c      	bne.n	8028abe <_vfiprintf_r+0x15e>
 8028aa4:	7873      	ldrb	r3, [r6, #1]
 8028aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8028aa8:	d134      	bne.n	8028b14 <_vfiprintf_r+0x1b4>
 8028aaa:	9b07      	ldr	r3, [sp, #28]
 8028aac:	3602      	adds	r6, #2
 8028aae:	1d1a      	adds	r2, r3, #4
 8028ab0:	681b      	ldr	r3, [r3, #0]
 8028ab2:	9207      	str	r2, [sp, #28]
 8028ab4:	2b00      	cmp	r3, #0
 8028ab6:	da01      	bge.n	8028abc <_vfiprintf_r+0x15c>
 8028ab8:	2301      	movs	r3, #1
 8028aba:	425b      	negs	r3, r3
 8028abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8028abe:	4d32      	ldr	r5, [pc, #200]	@ (8028b88 <_vfiprintf_r+0x228>)
 8028ac0:	2203      	movs	r2, #3
 8028ac2:	0028      	movs	r0, r5
 8028ac4:	7831      	ldrb	r1, [r6, #0]
 8028ac6:	f7fd fdf2 	bl	80266ae <memchr>
 8028aca:	2800      	cmp	r0, #0
 8028acc:	d006      	beq.n	8028adc <_vfiprintf_r+0x17c>
 8028ace:	2340      	movs	r3, #64	@ 0x40
 8028ad0:	1b40      	subs	r0, r0, r5
 8028ad2:	4083      	lsls	r3, r0
 8028ad4:	6822      	ldr	r2, [r4, #0]
 8028ad6:	3601      	adds	r6, #1
 8028ad8:	4313      	orrs	r3, r2
 8028ada:	6023      	str	r3, [r4, #0]
 8028adc:	7831      	ldrb	r1, [r6, #0]
 8028ade:	2206      	movs	r2, #6
 8028ae0:	482a      	ldr	r0, [pc, #168]	@ (8028b8c <_vfiprintf_r+0x22c>)
 8028ae2:	1c75      	adds	r5, r6, #1
 8028ae4:	7621      	strb	r1, [r4, #24]
 8028ae6:	f7fd fde2 	bl	80266ae <memchr>
 8028aea:	2800      	cmp	r0, #0
 8028aec:	d040      	beq.n	8028b70 <_vfiprintf_r+0x210>
 8028aee:	4b28      	ldr	r3, [pc, #160]	@ (8028b90 <_vfiprintf_r+0x230>)
 8028af0:	2b00      	cmp	r3, #0
 8028af2:	d122      	bne.n	8028b3a <_vfiprintf_r+0x1da>
 8028af4:	2207      	movs	r2, #7
 8028af6:	9b07      	ldr	r3, [sp, #28]
 8028af8:	3307      	adds	r3, #7
 8028afa:	4393      	bics	r3, r2
 8028afc:	3308      	adds	r3, #8
 8028afe:	9307      	str	r3, [sp, #28]
 8028b00:	6963      	ldr	r3, [r4, #20]
 8028b02:	9a04      	ldr	r2, [sp, #16]
 8028b04:	189b      	adds	r3, r3, r2
 8028b06:	6163      	str	r3, [r4, #20]
 8028b08:	e762      	b.n	80289d0 <_vfiprintf_r+0x70>
 8028b0a:	4343      	muls	r3, r0
 8028b0c:	002e      	movs	r6, r5
 8028b0e:	2101      	movs	r1, #1
 8028b10:	189b      	adds	r3, r3, r2
 8028b12:	e7a4      	b.n	8028a5e <_vfiprintf_r+0xfe>
 8028b14:	2300      	movs	r3, #0
 8028b16:	200a      	movs	r0, #10
 8028b18:	0019      	movs	r1, r3
 8028b1a:	3601      	adds	r6, #1
 8028b1c:	6063      	str	r3, [r4, #4]
 8028b1e:	7832      	ldrb	r2, [r6, #0]
 8028b20:	1c75      	adds	r5, r6, #1
 8028b22:	3a30      	subs	r2, #48	@ 0x30
 8028b24:	2a09      	cmp	r2, #9
 8028b26:	d903      	bls.n	8028b30 <_vfiprintf_r+0x1d0>
 8028b28:	2b00      	cmp	r3, #0
 8028b2a:	d0c8      	beq.n	8028abe <_vfiprintf_r+0x15e>
 8028b2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8028b2e:	e7c6      	b.n	8028abe <_vfiprintf_r+0x15e>
 8028b30:	4341      	muls	r1, r0
 8028b32:	002e      	movs	r6, r5
 8028b34:	2301      	movs	r3, #1
 8028b36:	1889      	adds	r1, r1, r2
 8028b38:	e7f1      	b.n	8028b1e <_vfiprintf_r+0x1be>
 8028b3a:	aa07      	add	r2, sp, #28
 8028b3c:	9200      	str	r2, [sp, #0]
 8028b3e:	0021      	movs	r1, r4
 8028b40:	003a      	movs	r2, r7
 8028b42:	4b14      	ldr	r3, [pc, #80]	@ (8028b94 <_vfiprintf_r+0x234>)
 8028b44:	9803      	ldr	r0, [sp, #12]
 8028b46:	f7fc feab 	bl	80258a0 <_printf_float>
 8028b4a:	9004      	str	r0, [sp, #16]
 8028b4c:	9b04      	ldr	r3, [sp, #16]
 8028b4e:	3301      	adds	r3, #1
 8028b50:	d1d6      	bne.n	8028b00 <_vfiprintf_r+0x1a0>
 8028b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028b54:	07db      	lsls	r3, r3, #31
 8028b56:	d405      	bmi.n	8028b64 <_vfiprintf_r+0x204>
 8028b58:	89bb      	ldrh	r3, [r7, #12]
 8028b5a:	059b      	lsls	r3, r3, #22
 8028b5c:	d402      	bmi.n	8028b64 <_vfiprintf_r+0x204>
 8028b5e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028b60:	f7fd fda4 	bl	80266ac <__retarget_lock_release_recursive>
 8028b64:	89bb      	ldrh	r3, [r7, #12]
 8028b66:	065b      	lsls	r3, r3, #25
 8028b68:	d500      	bpl.n	8028b6c <_vfiprintf_r+0x20c>
 8028b6a:	e71e      	b.n	80289aa <_vfiprintf_r+0x4a>
 8028b6c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028b6e:	e71e      	b.n	80289ae <_vfiprintf_r+0x4e>
 8028b70:	aa07      	add	r2, sp, #28
 8028b72:	9200      	str	r2, [sp, #0]
 8028b74:	0021      	movs	r1, r4
 8028b76:	003a      	movs	r2, r7
 8028b78:	4b06      	ldr	r3, [pc, #24]	@ (8028b94 <_vfiprintf_r+0x234>)
 8028b7a:	9803      	ldr	r0, [sp, #12]
 8028b7c:	f7fd f93e 	bl	8025dfc <_printf_i>
 8028b80:	e7e3      	b.n	8028b4a <_vfiprintf_r+0x1ea>
 8028b82:	46c0      	nop			@ (mov r8, r8)
 8028b84:	0802ec18 	.word	0x0802ec18
 8028b88:	0802ec1e 	.word	0x0802ec1e
 8028b8c:	0802ec22 	.word	0x0802ec22
 8028b90:	080258a1 	.word	0x080258a1
 8028b94:	0802893b 	.word	0x0802893b

08028b98 <__sflush_r>:
 8028b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028b9a:	220c      	movs	r2, #12
 8028b9c:	5e8b      	ldrsh	r3, [r1, r2]
 8028b9e:	0005      	movs	r5, r0
 8028ba0:	000c      	movs	r4, r1
 8028ba2:	071a      	lsls	r2, r3, #28
 8028ba4:	d456      	bmi.n	8028c54 <__sflush_r+0xbc>
 8028ba6:	684a      	ldr	r2, [r1, #4]
 8028ba8:	2a00      	cmp	r2, #0
 8028baa:	dc02      	bgt.n	8028bb2 <__sflush_r+0x1a>
 8028bac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028bae:	2a00      	cmp	r2, #0
 8028bb0:	dd4e      	ble.n	8028c50 <__sflush_r+0xb8>
 8028bb2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028bb4:	2f00      	cmp	r7, #0
 8028bb6:	d04b      	beq.n	8028c50 <__sflush_r+0xb8>
 8028bb8:	2200      	movs	r2, #0
 8028bba:	2080      	movs	r0, #128	@ 0x80
 8028bbc:	682e      	ldr	r6, [r5, #0]
 8028bbe:	602a      	str	r2, [r5, #0]
 8028bc0:	001a      	movs	r2, r3
 8028bc2:	0140      	lsls	r0, r0, #5
 8028bc4:	6a21      	ldr	r1, [r4, #32]
 8028bc6:	4002      	ands	r2, r0
 8028bc8:	4203      	tst	r3, r0
 8028bca:	d033      	beq.n	8028c34 <__sflush_r+0x9c>
 8028bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028bce:	89a3      	ldrh	r3, [r4, #12]
 8028bd0:	075b      	lsls	r3, r3, #29
 8028bd2:	d506      	bpl.n	8028be2 <__sflush_r+0x4a>
 8028bd4:	6863      	ldr	r3, [r4, #4]
 8028bd6:	1ad2      	subs	r2, r2, r3
 8028bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028bda:	2b00      	cmp	r3, #0
 8028bdc:	d001      	beq.n	8028be2 <__sflush_r+0x4a>
 8028bde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028be0:	1ad2      	subs	r2, r2, r3
 8028be2:	2300      	movs	r3, #0
 8028be4:	0028      	movs	r0, r5
 8028be6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028be8:	6a21      	ldr	r1, [r4, #32]
 8028bea:	47b8      	blx	r7
 8028bec:	89a2      	ldrh	r2, [r4, #12]
 8028bee:	1c43      	adds	r3, r0, #1
 8028bf0:	d106      	bne.n	8028c00 <__sflush_r+0x68>
 8028bf2:	6829      	ldr	r1, [r5, #0]
 8028bf4:	291d      	cmp	r1, #29
 8028bf6:	d846      	bhi.n	8028c86 <__sflush_r+0xee>
 8028bf8:	4b29      	ldr	r3, [pc, #164]	@ (8028ca0 <__sflush_r+0x108>)
 8028bfa:	40cb      	lsrs	r3, r1
 8028bfc:	07db      	lsls	r3, r3, #31
 8028bfe:	d542      	bpl.n	8028c86 <__sflush_r+0xee>
 8028c00:	2300      	movs	r3, #0
 8028c02:	6063      	str	r3, [r4, #4]
 8028c04:	6923      	ldr	r3, [r4, #16]
 8028c06:	6023      	str	r3, [r4, #0]
 8028c08:	04d2      	lsls	r2, r2, #19
 8028c0a:	d505      	bpl.n	8028c18 <__sflush_r+0x80>
 8028c0c:	1c43      	adds	r3, r0, #1
 8028c0e:	d102      	bne.n	8028c16 <__sflush_r+0x7e>
 8028c10:	682b      	ldr	r3, [r5, #0]
 8028c12:	2b00      	cmp	r3, #0
 8028c14:	d100      	bne.n	8028c18 <__sflush_r+0x80>
 8028c16:	6560      	str	r0, [r4, #84]	@ 0x54
 8028c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028c1a:	602e      	str	r6, [r5, #0]
 8028c1c:	2900      	cmp	r1, #0
 8028c1e:	d017      	beq.n	8028c50 <__sflush_r+0xb8>
 8028c20:	0023      	movs	r3, r4
 8028c22:	3344      	adds	r3, #68	@ 0x44
 8028c24:	4299      	cmp	r1, r3
 8028c26:	d002      	beq.n	8028c2e <__sflush_r+0x96>
 8028c28:	0028      	movs	r0, r5
 8028c2a:	f7fe fbd1 	bl	80273d0 <_free_r>
 8028c2e:	2300      	movs	r3, #0
 8028c30:	6363      	str	r3, [r4, #52]	@ 0x34
 8028c32:	e00d      	b.n	8028c50 <__sflush_r+0xb8>
 8028c34:	2301      	movs	r3, #1
 8028c36:	0028      	movs	r0, r5
 8028c38:	47b8      	blx	r7
 8028c3a:	0002      	movs	r2, r0
 8028c3c:	1c43      	adds	r3, r0, #1
 8028c3e:	d1c6      	bne.n	8028bce <__sflush_r+0x36>
 8028c40:	682b      	ldr	r3, [r5, #0]
 8028c42:	2b00      	cmp	r3, #0
 8028c44:	d0c3      	beq.n	8028bce <__sflush_r+0x36>
 8028c46:	2b1d      	cmp	r3, #29
 8028c48:	d001      	beq.n	8028c4e <__sflush_r+0xb6>
 8028c4a:	2b16      	cmp	r3, #22
 8028c4c:	d11a      	bne.n	8028c84 <__sflush_r+0xec>
 8028c4e:	602e      	str	r6, [r5, #0]
 8028c50:	2000      	movs	r0, #0
 8028c52:	e01e      	b.n	8028c92 <__sflush_r+0xfa>
 8028c54:	690e      	ldr	r6, [r1, #16]
 8028c56:	2e00      	cmp	r6, #0
 8028c58:	d0fa      	beq.n	8028c50 <__sflush_r+0xb8>
 8028c5a:	680f      	ldr	r7, [r1, #0]
 8028c5c:	600e      	str	r6, [r1, #0]
 8028c5e:	1bba      	subs	r2, r7, r6
 8028c60:	9201      	str	r2, [sp, #4]
 8028c62:	2200      	movs	r2, #0
 8028c64:	079b      	lsls	r3, r3, #30
 8028c66:	d100      	bne.n	8028c6a <__sflush_r+0xd2>
 8028c68:	694a      	ldr	r2, [r1, #20]
 8028c6a:	60a2      	str	r2, [r4, #8]
 8028c6c:	9b01      	ldr	r3, [sp, #4]
 8028c6e:	2b00      	cmp	r3, #0
 8028c70:	ddee      	ble.n	8028c50 <__sflush_r+0xb8>
 8028c72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028c74:	0032      	movs	r2, r6
 8028c76:	001f      	movs	r7, r3
 8028c78:	0028      	movs	r0, r5
 8028c7a:	9b01      	ldr	r3, [sp, #4]
 8028c7c:	6a21      	ldr	r1, [r4, #32]
 8028c7e:	47b8      	blx	r7
 8028c80:	2800      	cmp	r0, #0
 8028c82:	dc07      	bgt.n	8028c94 <__sflush_r+0xfc>
 8028c84:	89a2      	ldrh	r2, [r4, #12]
 8028c86:	2340      	movs	r3, #64	@ 0x40
 8028c88:	2001      	movs	r0, #1
 8028c8a:	4313      	orrs	r3, r2
 8028c8c:	b21b      	sxth	r3, r3
 8028c8e:	81a3      	strh	r3, [r4, #12]
 8028c90:	4240      	negs	r0, r0
 8028c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028c94:	9b01      	ldr	r3, [sp, #4]
 8028c96:	1836      	adds	r6, r6, r0
 8028c98:	1a1b      	subs	r3, r3, r0
 8028c9a:	9301      	str	r3, [sp, #4]
 8028c9c:	e7e6      	b.n	8028c6c <__sflush_r+0xd4>
 8028c9e:	46c0      	nop			@ (mov r8, r8)
 8028ca0:	20400001 	.word	0x20400001

08028ca4 <_fflush_r>:
 8028ca4:	690b      	ldr	r3, [r1, #16]
 8028ca6:	b570      	push	{r4, r5, r6, lr}
 8028ca8:	0005      	movs	r5, r0
 8028caa:	000c      	movs	r4, r1
 8028cac:	2b00      	cmp	r3, #0
 8028cae:	d102      	bne.n	8028cb6 <_fflush_r+0x12>
 8028cb0:	2500      	movs	r5, #0
 8028cb2:	0028      	movs	r0, r5
 8028cb4:	bd70      	pop	{r4, r5, r6, pc}
 8028cb6:	2800      	cmp	r0, #0
 8028cb8:	d004      	beq.n	8028cc4 <_fflush_r+0x20>
 8028cba:	6a03      	ldr	r3, [r0, #32]
 8028cbc:	2b00      	cmp	r3, #0
 8028cbe:	d101      	bne.n	8028cc4 <_fflush_r+0x20>
 8028cc0:	f7fd fa38 	bl	8026134 <__sinit>
 8028cc4:	220c      	movs	r2, #12
 8028cc6:	5ea3      	ldrsh	r3, [r4, r2]
 8028cc8:	2b00      	cmp	r3, #0
 8028cca:	d0f1      	beq.n	8028cb0 <_fflush_r+0xc>
 8028ccc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028cce:	07d2      	lsls	r2, r2, #31
 8028cd0:	d404      	bmi.n	8028cdc <_fflush_r+0x38>
 8028cd2:	059b      	lsls	r3, r3, #22
 8028cd4:	d402      	bmi.n	8028cdc <_fflush_r+0x38>
 8028cd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028cd8:	f7fd fce7 	bl	80266aa <__retarget_lock_acquire_recursive>
 8028cdc:	0028      	movs	r0, r5
 8028cde:	0021      	movs	r1, r4
 8028ce0:	f7ff ff5a 	bl	8028b98 <__sflush_r>
 8028ce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028ce6:	0005      	movs	r5, r0
 8028ce8:	07db      	lsls	r3, r3, #31
 8028cea:	d4e2      	bmi.n	8028cb2 <_fflush_r+0xe>
 8028cec:	89a3      	ldrh	r3, [r4, #12]
 8028cee:	059b      	lsls	r3, r3, #22
 8028cf0:	d4df      	bmi.n	8028cb2 <_fflush_r+0xe>
 8028cf2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028cf4:	f7fd fcda 	bl	80266ac <__retarget_lock_release_recursive>
 8028cf8:	e7db      	b.n	8028cb2 <_fflush_r+0xe>
	...

08028cfc <__swhatbuf_r>:
 8028cfc:	b570      	push	{r4, r5, r6, lr}
 8028cfe:	000e      	movs	r6, r1
 8028d00:	001d      	movs	r5, r3
 8028d02:	230e      	movs	r3, #14
 8028d04:	5ec9      	ldrsh	r1, [r1, r3]
 8028d06:	0014      	movs	r4, r2
 8028d08:	b096      	sub	sp, #88	@ 0x58
 8028d0a:	2900      	cmp	r1, #0
 8028d0c:	da0c      	bge.n	8028d28 <__swhatbuf_r+0x2c>
 8028d0e:	89b2      	ldrh	r2, [r6, #12]
 8028d10:	2380      	movs	r3, #128	@ 0x80
 8028d12:	0011      	movs	r1, r2
 8028d14:	4019      	ands	r1, r3
 8028d16:	421a      	tst	r2, r3
 8028d18:	d114      	bne.n	8028d44 <__swhatbuf_r+0x48>
 8028d1a:	2380      	movs	r3, #128	@ 0x80
 8028d1c:	00db      	lsls	r3, r3, #3
 8028d1e:	2000      	movs	r0, #0
 8028d20:	6029      	str	r1, [r5, #0]
 8028d22:	6023      	str	r3, [r4, #0]
 8028d24:	b016      	add	sp, #88	@ 0x58
 8028d26:	bd70      	pop	{r4, r5, r6, pc}
 8028d28:	466a      	mov	r2, sp
 8028d2a:	f000 f865 	bl	8028df8 <_fstat_r>
 8028d2e:	2800      	cmp	r0, #0
 8028d30:	dbed      	blt.n	8028d0e <__swhatbuf_r+0x12>
 8028d32:	23f0      	movs	r3, #240	@ 0xf0
 8028d34:	9901      	ldr	r1, [sp, #4]
 8028d36:	021b      	lsls	r3, r3, #8
 8028d38:	4019      	ands	r1, r3
 8028d3a:	4b04      	ldr	r3, [pc, #16]	@ (8028d4c <__swhatbuf_r+0x50>)
 8028d3c:	18c9      	adds	r1, r1, r3
 8028d3e:	424b      	negs	r3, r1
 8028d40:	4159      	adcs	r1, r3
 8028d42:	e7ea      	b.n	8028d1a <__swhatbuf_r+0x1e>
 8028d44:	2100      	movs	r1, #0
 8028d46:	2340      	movs	r3, #64	@ 0x40
 8028d48:	e7e9      	b.n	8028d1e <__swhatbuf_r+0x22>
 8028d4a:	46c0      	nop			@ (mov r8, r8)
 8028d4c:	ffffe000 	.word	0xffffe000

08028d50 <__smakebuf_r>:
 8028d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028d52:	2602      	movs	r6, #2
 8028d54:	898b      	ldrh	r3, [r1, #12]
 8028d56:	0005      	movs	r5, r0
 8028d58:	000c      	movs	r4, r1
 8028d5a:	b085      	sub	sp, #20
 8028d5c:	4233      	tst	r3, r6
 8028d5e:	d007      	beq.n	8028d70 <__smakebuf_r+0x20>
 8028d60:	0023      	movs	r3, r4
 8028d62:	3347      	adds	r3, #71	@ 0x47
 8028d64:	6023      	str	r3, [r4, #0]
 8028d66:	6123      	str	r3, [r4, #16]
 8028d68:	2301      	movs	r3, #1
 8028d6a:	6163      	str	r3, [r4, #20]
 8028d6c:	b005      	add	sp, #20
 8028d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028d70:	ab03      	add	r3, sp, #12
 8028d72:	aa02      	add	r2, sp, #8
 8028d74:	f7ff ffc2 	bl	8028cfc <__swhatbuf_r>
 8028d78:	9f02      	ldr	r7, [sp, #8]
 8028d7a:	9001      	str	r0, [sp, #4]
 8028d7c:	0039      	movs	r1, r7
 8028d7e:	0028      	movs	r0, r5
 8028d80:	f7fe fef6 	bl	8027b70 <_malloc_r>
 8028d84:	2800      	cmp	r0, #0
 8028d86:	d108      	bne.n	8028d9a <__smakebuf_r+0x4a>
 8028d88:	220c      	movs	r2, #12
 8028d8a:	5ea3      	ldrsh	r3, [r4, r2]
 8028d8c:	059a      	lsls	r2, r3, #22
 8028d8e:	d4ed      	bmi.n	8028d6c <__smakebuf_r+0x1c>
 8028d90:	2203      	movs	r2, #3
 8028d92:	4393      	bics	r3, r2
 8028d94:	431e      	orrs	r6, r3
 8028d96:	81a6      	strh	r6, [r4, #12]
 8028d98:	e7e2      	b.n	8028d60 <__smakebuf_r+0x10>
 8028d9a:	2380      	movs	r3, #128	@ 0x80
 8028d9c:	89a2      	ldrh	r2, [r4, #12]
 8028d9e:	6020      	str	r0, [r4, #0]
 8028da0:	4313      	orrs	r3, r2
 8028da2:	81a3      	strh	r3, [r4, #12]
 8028da4:	9b03      	ldr	r3, [sp, #12]
 8028da6:	6120      	str	r0, [r4, #16]
 8028da8:	6167      	str	r7, [r4, #20]
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	d00c      	beq.n	8028dc8 <__smakebuf_r+0x78>
 8028dae:	0028      	movs	r0, r5
 8028db0:	230e      	movs	r3, #14
 8028db2:	5ee1      	ldrsh	r1, [r4, r3]
 8028db4:	f000 f832 	bl	8028e1c <_isatty_r>
 8028db8:	2800      	cmp	r0, #0
 8028dba:	d005      	beq.n	8028dc8 <__smakebuf_r+0x78>
 8028dbc:	2303      	movs	r3, #3
 8028dbe:	89a2      	ldrh	r2, [r4, #12]
 8028dc0:	439a      	bics	r2, r3
 8028dc2:	3b02      	subs	r3, #2
 8028dc4:	4313      	orrs	r3, r2
 8028dc6:	81a3      	strh	r3, [r4, #12]
 8028dc8:	89a3      	ldrh	r3, [r4, #12]
 8028dca:	9a01      	ldr	r2, [sp, #4]
 8028dcc:	4313      	orrs	r3, r2
 8028dce:	81a3      	strh	r3, [r4, #12]
 8028dd0:	e7cc      	b.n	8028d6c <__smakebuf_r+0x1c>

08028dd2 <memmove>:
 8028dd2:	b510      	push	{r4, lr}
 8028dd4:	4288      	cmp	r0, r1
 8028dd6:	d902      	bls.n	8028dde <memmove+0xc>
 8028dd8:	188b      	adds	r3, r1, r2
 8028dda:	4298      	cmp	r0, r3
 8028ddc:	d308      	bcc.n	8028df0 <memmove+0x1e>
 8028dde:	2300      	movs	r3, #0
 8028de0:	429a      	cmp	r2, r3
 8028de2:	d007      	beq.n	8028df4 <memmove+0x22>
 8028de4:	5ccc      	ldrb	r4, [r1, r3]
 8028de6:	54c4      	strb	r4, [r0, r3]
 8028de8:	3301      	adds	r3, #1
 8028dea:	e7f9      	b.n	8028de0 <memmove+0xe>
 8028dec:	5c8b      	ldrb	r3, [r1, r2]
 8028dee:	5483      	strb	r3, [r0, r2]
 8028df0:	3a01      	subs	r2, #1
 8028df2:	d2fb      	bcs.n	8028dec <memmove+0x1a>
 8028df4:	bd10      	pop	{r4, pc}
	...

08028df8 <_fstat_r>:
 8028df8:	2300      	movs	r3, #0
 8028dfa:	b570      	push	{r4, r5, r6, lr}
 8028dfc:	4d06      	ldr	r5, [pc, #24]	@ (8028e18 <_fstat_r+0x20>)
 8028dfe:	0004      	movs	r4, r0
 8028e00:	0008      	movs	r0, r1
 8028e02:	0011      	movs	r1, r2
 8028e04:	602b      	str	r3, [r5, #0]
 8028e06:	f7ea fbbb 	bl	8013580 <_fstat>
 8028e0a:	1c43      	adds	r3, r0, #1
 8028e0c:	d103      	bne.n	8028e16 <_fstat_r+0x1e>
 8028e0e:	682b      	ldr	r3, [r5, #0]
 8028e10:	2b00      	cmp	r3, #0
 8028e12:	d000      	beq.n	8028e16 <_fstat_r+0x1e>
 8028e14:	6023      	str	r3, [r4, #0]
 8028e16:	bd70      	pop	{r4, r5, r6, pc}
 8028e18:	2000390c 	.word	0x2000390c

08028e1c <_isatty_r>:
 8028e1c:	2300      	movs	r3, #0
 8028e1e:	b570      	push	{r4, r5, r6, lr}
 8028e20:	4d06      	ldr	r5, [pc, #24]	@ (8028e3c <_isatty_r+0x20>)
 8028e22:	0004      	movs	r4, r0
 8028e24:	0008      	movs	r0, r1
 8028e26:	602b      	str	r3, [r5, #0]
 8028e28:	f7ea fbb8 	bl	801359c <_isatty>
 8028e2c:	1c43      	adds	r3, r0, #1
 8028e2e:	d103      	bne.n	8028e38 <_isatty_r+0x1c>
 8028e30:	682b      	ldr	r3, [r5, #0]
 8028e32:	2b00      	cmp	r3, #0
 8028e34:	d000      	beq.n	8028e38 <_isatty_r+0x1c>
 8028e36:	6023      	str	r3, [r4, #0]
 8028e38:	bd70      	pop	{r4, r5, r6, pc}
 8028e3a:	46c0      	nop			@ (mov r8, r8)
 8028e3c:	2000390c 	.word	0x2000390c

08028e40 <_sbrk_r>:
 8028e40:	2300      	movs	r3, #0
 8028e42:	b570      	push	{r4, r5, r6, lr}
 8028e44:	4d06      	ldr	r5, [pc, #24]	@ (8028e60 <_sbrk_r+0x20>)
 8028e46:	0004      	movs	r4, r0
 8028e48:	0008      	movs	r0, r1
 8028e4a:	602b      	str	r3, [r5, #0]
 8028e4c:	f7ea fbba 	bl	80135c4 <_sbrk>
 8028e50:	1c43      	adds	r3, r0, #1
 8028e52:	d103      	bne.n	8028e5c <_sbrk_r+0x1c>
 8028e54:	682b      	ldr	r3, [r5, #0]
 8028e56:	2b00      	cmp	r3, #0
 8028e58:	d000      	beq.n	8028e5c <_sbrk_r+0x1c>
 8028e5a:	6023      	str	r3, [r4, #0]
 8028e5c:	bd70      	pop	{r4, r5, r6, pc}
 8028e5e:	46c0      	nop			@ (mov r8, r8)
 8028e60:	2000390c 	.word	0x2000390c

08028e64 <__assert_func>:
 8028e64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028e66:	0014      	movs	r4, r2
 8028e68:	001a      	movs	r2, r3
 8028e6a:	4b09      	ldr	r3, [pc, #36]	@ (8028e90 <__assert_func+0x2c>)
 8028e6c:	0005      	movs	r5, r0
 8028e6e:	681b      	ldr	r3, [r3, #0]
 8028e70:	000e      	movs	r6, r1
 8028e72:	68d8      	ldr	r0, [r3, #12]
 8028e74:	4b07      	ldr	r3, [pc, #28]	@ (8028e94 <__assert_func+0x30>)
 8028e76:	2c00      	cmp	r4, #0
 8028e78:	d101      	bne.n	8028e7e <__assert_func+0x1a>
 8028e7a:	4b07      	ldr	r3, [pc, #28]	@ (8028e98 <__assert_func+0x34>)
 8028e7c:	001c      	movs	r4, r3
 8028e7e:	4907      	ldr	r1, [pc, #28]	@ (8028e9c <__assert_func+0x38>)
 8028e80:	9301      	str	r3, [sp, #4]
 8028e82:	9402      	str	r4, [sp, #8]
 8028e84:	002b      	movs	r3, r5
 8028e86:	9600      	str	r6, [sp, #0]
 8028e88:	f000 f868 	bl	8028f5c <fiprintf>
 8028e8c:	f000 f876 	bl	8028f7c <abort>
 8028e90:	200003ec 	.word	0x200003ec
 8028e94:	0802ec29 	.word	0x0802ec29
 8028e98:	0802ec64 	.word	0x0802ec64
 8028e9c:	0802ec36 	.word	0x0802ec36

08028ea0 <_calloc_r>:
 8028ea0:	b570      	push	{r4, r5, r6, lr}
 8028ea2:	0c0b      	lsrs	r3, r1, #16
 8028ea4:	0c15      	lsrs	r5, r2, #16
 8028ea6:	2b00      	cmp	r3, #0
 8028ea8:	d11e      	bne.n	8028ee8 <_calloc_r+0x48>
 8028eaa:	2d00      	cmp	r5, #0
 8028eac:	d10c      	bne.n	8028ec8 <_calloc_r+0x28>
 8028eae:	b289      	uxth	r1, r1
 8028eb0:	b294      	uxth	r4, r2
 8028eb2:	434c      	muls	r4, r1
 8028eb4:	0021      	movs	r1, r4
 8028eb6:	f7fe fe5b 	bl	8027b70 <_malloc_r>
 8028eba:	1e05      	subs	r5, r0, #0
 8028ebc:	d01b      	beq.n	8028ef6 <_calloc_r+0x56>
 8028ebe:	0022      	movs	r2, r4
 8028ec0:	2100      	movs	r1, #0
 8028ec2:	f7fd fb23 	bl	802650c <memset>
 8028ec6:	e016      	b.n	8028ef6 <_calloc_r+0x56>
 8028ec8:	1c2b      	adds	r3, r5, #0
 8028eca:	1c0c      	adds	r4, r1, #0
 8028ecc:	b289      	uxth	r1, r1
 8028ece:	b292      	uxth	r2, r2
 8028ed0:	434a      	muls	r2, r1
 8028ed2:	b29b      	uxth	r3, r3
 8028ed4:	b2a1      	uxth	r1, r4
 8028ed6:	4359      	muls	r1, r3
 8028ed8:	0c14      	lsrs	r4, r2, #16
 8028eda:	190c      	adds	r4, r1, r4
 8028edc:	0c23      	lsrs	r3, r4, #16
 8028ede:	d107      	bne.n	8028ef0 <_calloc_r+0x50>
 8028ee0:	0424      	lsls	r4, r4, #16
 8028ee2:	b292      	uxth	r2, r2
 8028ee4:	4314      	orrs	r4, r2
 8028ee6:	e7e5      	b.n	8028eb4 <_calloc_r+0x14>
 8028ee8:	2d00      	cmp	r5, #0
 8028eea:	d101      	bne.n	8028ef0 <_calloc_r+0x50>
 8028eec:	1c14      	adds	r4, r2, #0
 8028eee:	e7ed      	b.n	8028ecc <_calloc_r+0x2c>
 8028ef0:	230c      	movs	r3, #12
 8028ef2:	2500      	movs	r5, #0
 8028ef4:	6003      	str	r3, [r0, #0]
 8028ef6:	0028      	movs	r0, r5
 8028ef8:	bd70      	pop	{r4, r5, r6, pc}

08028efa <_realloc_r>:
 8028efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028efc:	0006      	movs	r6, r0
 8028efe:	000c      	movs	r4, r1
 8028f00:	0015      	movs	r5, r2
 8028f02:	2900      	cmp	r1, #0
 8028f04:	d105      	bne.n	8028f12 <_realloc_r+0x18>
 8028f06:	0011      	movs	r1, r2
 8028f08:	f7fe fe32 	bl	8027b70 <_malloc_r>
 8028f0c:	0004      	movs	r4, r0
 8028f0e:	0020      	movs	r0, r4
 8028f10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028f12:	2a00      	cmp	r2, #0
 8028f14:	d103      	bne.n	8028f1e <_realloc_r+0x24>
 8028f16:	f7fe fa5b 	bl	80273d0 <_free_r>
 8028f1a:	002c      	movs	r4, r5
 8028f1c:	e7f7      	b.n	8028f0e <_realloc_r+0x14>
 8028f1e:	f000 f834 	bl	8028f8a <_malloc_usable_size_r>
 8028f22:	0007      	movs	r7, r0
 8028f24:	4285      	cmp	r5, r0
 8028f26:	d802      	bhi.n	8028f2e <_realloc_r+0x34>
 8028f28:	0843      	lsrs	r3, r0, #1
 8028f2a:	42ab      	cmp	r3, r5
 8028f2c:	d3ef      	bcc.n	8028f0e <_realloc_r+0x14>
 8028f2e:	0029      	movs	r1, r5
 8028f30:	0030      	movs	r0, r6
 8028f32:	f7fe fe1d 	bl	8027b70 <_malloc_r>
 8028f36:	9001      	str	r0, [sp, #4]
 8028f38:	2800      	cmp	r0, #0
 8028f3a:	d101      	bne.n	8028f40 <_realloc_r+0x46>
 8028f3c:	9c01      	ldr	r4, [sp, #4]
 8028f3e:	e7e6      	b.n	8028f0e <_realloc_r+0x14>
 8028f40:	002a      	movs	r2, r5
 8028f42:	42bd      	cmp	r5, r7
 8028f44:	d900      	bls.n	8028f48 <_realloc_r+0x4e>
 8028f46:	003a      	movs	r2, r7
 8028f48:	0021      	movs	r1, r4
 8028f4a:	9801      	ldr	r0, [sp, #4]
 8028f4c:	f7fd fbba 	bl	80266c4 <memcpy>
 8028f50:	0021      	movs	r1, r4
 8028f52:	0030      	movs	r0, r6
 8028f54:	f7fe fa3c 	bl	80273d0 <_free_r>
 8028f58:	e7f0      	b.n	8028f3c <_realloc_r+0x42>
	...

08028f5c <fiprintf>:
 8028f5c:	b40e      	push	{r1, r2, r3}
 8028f5e:	b517      	push	{r0, r1, r2, r4, lr}
 8028f60:	4c05      	ldr	r4, [pc, #20]	@ (8028f78 <fiprintf+0x1c>)
 8028f62:	ab05      	add	r3, sp, #20
 8028f64:	cb04      	ldmia	r3!, {r2}
 8028f66:	0001      	movs	r1, r0
 8028f68:	6820      	ldr	r0, [r4, #0]
 8028f6a:	9301      	str	r3, [sp, #4]
 8028f6c:	f7ff fcf8 	bl	8028960 <_vfiprintf_r>
 8028f70:	bc1e      	pop	{r1, r2, r3, r4}
 8028f72:	bc08      	pop	{r3}
 8028f74:	b003      	add	sp, #12
 8028f76:	4718      	bx	r3
 8028f78:	200003ec 	.word	0x200003ec

08028f7c <abort>:
 8028f7c:	2006      	movs	r0, #6
 8028f7e:	b510      	push	{r4, lr}
 8028f80:	f000 f834 	bl	8028fec <raise>
 8028f84:	2001      	movs	r0, #1
 8028f86:	f7ea fac7 	bl	8013518 <_exit>

08028f8a <_malloc_usable_size_r>:
 8028f8a:	1f0b      	subs	r3, r1, #4
 8028f8c:	681b      	ldr	r3, [r3, #0]
 8028f8e:	1f18      	subs	r0, r3, #4
 8028f90:	2b00      	cmp	r3, #0
 8028f92:	da01      	bge.n	8028f98 <_malloc_usable_size_r+0xe>
 8028f94:	580b      	ldr	r3, [r1, r0]
 8028f96:	18c0      	adds	r0, r0, r3
 8028f98:	4770      	bx	lr

08028f9a <_raise_r>:
 8028f9a:	b570      	push	{r4, r5, r6, lr}
 8028f9c:	0004      	movs	r4, r0
 8028f9e:	000d      	movs	r5, r1
 8028fa0:	291f      	cmp	r1, #31
 8028fa2:	d904      	bls.n	8028fae <_raise_r+0x14>
 8028fa4:	2316      	movs	r3, #22
 8028fa6:	6003      	str	r3, [r0, #0]
 8028fa8:	2001      	movs	r0, #1
 8028faa:	4240      	negs	r0, r0
 8028fac:	bd70      	pop	{r4, r5, r6, pc}
 8028fae:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028fb0:	2b00      	cmp	r3, #0
 8028fb2:	d004      	beq.n	8028fbe <_raise_r+0x24>
 8028fb4:	008a      	lsls	r2, r1, #2
 8028fb6:	189b      	adds	r3, r3, r2
 8028fb8:	681a      	ldr	r2, [r3, #0]
 8028fba:	2a00      	cmp	r2, #0
 8028fbc:	d108      	bne.n	8028fd0 <_raise_r+0x36>
 8028fbe:	0020      	movs	r0, r4
 8028fc0:	f000 f830 	bl	8029024 <_getpid_r>
 8028fc4:	002a      	movs	r2, r5
 8028fc6:	0001      	movs	r1, r0
 8028fc8:	0020      	movs	r0, r4
 8028fca:	f000 f819 	bl	8029000 <_kill_r>
 8028fce:	e7ed      	b.n	8028fac <_raise_r+0x12>
 8028fd0:	2a01      	cmp	r2, #1
 8028fd2:	d009      	beq.n	8028fe8 <_raise_r+0x4e>
 8028fd4:	1c51      	adds	r1, r2, #1
 8028fd6:	d103      	bne.n	8028fe0 <_raise_r+0x46>
 8028fd8:	2316      	movs	r3, #22
 8028fda:	6003      	str	r3, [r0, #0]
 8028fdc:	2001      	movs	r0, #1
 8028fde:	e7e5      	b.n	8028fac <_raise_r+0x12>
 8028fe0:	2100      	movs	r1, #0
 8028fe2:	0028      	movs	r0, r5
 8028fe4:	6019      	str	r1, [r3, #0]
 8028fe6:	4790      	blx	r2
 8028fe8:	2000      	movs	r0, #0
 8028fea:	e7df      	b.n	8028fac <_raise_r+0x12>

08028fec <raise>:
 8028fec:	b510      	push	{r4, lr}
 8028fee:	4b03      	ldr	r3, [pc, #12]	@ (8028ffc <raise+0x10>)
 8028ff0:	0001      	movs	r1, r0
 8028ff2:	6818      	ldr	r0, [r3, #0]
 8028ff4:	f7ff ffd1 	bl	8028f9a <_raise_r>
 8028ff8:	bd10      	pop	{r4, pc}
 8028ffa:	46c0      	nop			@ (mov r8, r8)
 8028ffc:	200003ec 	.word	0x200003ec

08029000 <_kill_r>:
 8029000:	2300      	movs	r3, #0
 8029002:	b570      	push	{r4, r5, r6, lr}
 8029004:	4d06      	ldr	r5, [pc, #24]	@ (8029020 <_kill_r+0x20>)
 8029006:	0004      	movs	r4, r0
 8029008:	0008      	movs	r0, r1
 802900a:	0011      	movs	r1, r2
 802900c:	602b      	str	r3, [r5, #0]
 802900e:	f7ea fa73 	bl	80134f8 <_kill>
 8029012:	1c43      	adds	r3, r0, #1
 8029014:	d103      	bne.n	802901e <_kill_r+0x1e>
 8029016:	682b      	ldr	r3, [r5, #0]
 8029018:	2b00      	cmp	r3, #0
 802901a:	d000      	beq.n	802901e <_kill_r+0x1e>
 802901c:	6023      	str	r3, [r4, #0]
 802901e:	bd70      	pop	{r4, r5, r6, pc}
 8029020:	2000390c 	.word	0x2000390c

08029024 <_getpid_r>:
 8029024:	b510      	push	{r4, lr}
 8029026:	f7ea fa61 	bl	80134ec <_getpid>
 802902a:	bd10      	pop	{r4, pc}

0802902c <log>:
 802902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802902e:	0004      	movs	r4, r0
 8029030:	000d      	movs	r5, r1
 8029032:	f000 f98d 	bl	8029350 <__ieee754_log>
 8029036:	0022      	movs	r2, r4
 8029038:	0006      	movs	r6, r0
 802903a:	000f      	movs	r7, r1
 802903c:	002b      	movs	r3, r5
 802903e:	0020      	movs	r0, r4
 8029040:	0029      	movs	r1, r5
 8029042:	f7da fb77 	bl	8003734 <__aeabi_dcmpun>
 8029046:	2800      	cmp	r0, #0
 8029048:	d115      	bne.n	8029076 <log+0x4a>
 802904a:	2200      	movs	r2, #0
 802904c:	2300      	movs	r3, #0
 802904e:	0020      	movs	r0, r4
 8029050:	0029      	movs	r1, r5
 8029052:	f7d7 fa47 	bl	80004e4 <__aeabi_dcmpgt>
 8029056:	2800      	cmp	r0, #0
 8029058:	d10d      	bne.n	8029076 <log+0x4a>
 802905a:	2200      	movs	r2, #0
 802905c:	2300      	movs	r3, #0
 802905e:	0020      	movs	r0, r4
 8029060:	0029      	movs	r1, r5
 8029062:	f7d7 fa25 	bl	80004b0 <__aeabi_dcmpeq>
 8029066:	2800      	cmp	r0, #0
 8029068:	d008      	beq.n	802907c <log+0x50>
 802906a:	f7fd faf3 	bl	8026654 <__errno>
 802906e:	2322      	movs	r3, #34	@ 0x22
 8029070:	2600      	movs	r6, #0
 8029072:	4f07      	ldr	r7, [pc, #28]	@ (8029090 <log+0x64>)
 8029074:	6003      	str	r3, [r0, #0]
 8029076:	0030      	movs	r0, r6
 8029078:	0039      	movs	r1, r7
 802907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802907c:	f7fd faea 	bl	8026654 <__errno>
 8029080:	2321      	movs	r3, #33	@ 0x21
 8029082:	6003      	str	r3, [r0, #0]
 8029084:	4803      	ldr	r0, [pc, #12]	@ (8029094 <log+0x68>)
 8029086:	f7fd fb27 	bl	80266d8 <nan>
 802908a:	0006      	movs	r6, r0
 802908c:	000f      	movs	r7, r1
 802908e:	e7f2      	b.n	8029076 <log+0x4a>
 8029090:	fff00000 	.word	0xfff00000
 8029094:	0802ec64 	.word	0x0802ec64

08029098 <pow>:
 8029098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802909a:	0014      	movs	r4, r2
 802909c:	001d      	movs	r5, r3
 802909e:	9000      	str	r0, [sp, #0]
 80290a0:	9101      	str	r1, [sp, #4]
 80290a2:	f000 fb07 	bl	80296b4 <__ieee754_pow>
 80290a6:	0022      	movs	r2, r4
 80290a8:	0006      	movs	r6, r0
 80290aa:	000f      	movs	r7, r1
 80290ac:	002b      	movs	r3, r5
 80290ae:	0020      	movs	r0, r4
 80290b0:	0029      	movs	r1, r5
 80290b2:	f7da fb3f 	bl	8003734 <__aeabi_dcmpun>
 80290b6:	2800      	cmp	r0, #0
 80290b8:	d13f      	bne.n	802913a <pow+0xa2>
 80290ba:	9800      	ldr	r0, [sp, #0]
 80290bc:	9901      	ldr	r1, [sp, #4]
 80290be:	2200      	movs	r2, #0
 80290c0:	2300      	movs	r3, #0
 80290c2:	f7d7 f9f5 	bl	80004b0 <__aeabi_dcmpeq>
 80290c6:	2800      	cmp	r0, #0
 80290c8:	d019      	beq.n	80290fe <pow+0x66>
 80290ca:	2200      	movs	r2, #0
 80290cc:	2300      	movs	r3, #0
 80290ce:	0020      	movs	r0, r4
 80290d0:	0029      	movs	r1, r5
 80290d2:	f7d7 f9ed 	bl	80004b0 <__aeabi_dcmpeq>
 80290d6:	2800      	cmp	r0, #0
 80290d8:	d146      	bne.n	8029168 <pow+0xd0>
 80290da:	0020      	movs	r0, r4
 80290dc:	0029      	movs	r1, r5
 80290de:	f000 f88d 	bl	80291fc <finite>
 80290e2:	2800      	cmp	r0, #0
 80290e4:	d029      	beq.n	802913a <pow+0xa2>
 80290e6:	2200      	movs	r2, #0
 80290e8:	2300      	movs	r3, #0
 80290ea:	0020      	movs	r0, r4
 80290ec:	0029      	movs	r1, r5
 80290ee:	f7d7 f9e5 	bl	80004bc <__aeabi_dcmplt>
 80290f2:	2800      	cmp	r0, #0
 80290f4:	d021      	beq.n	802913a <pow+0xa2>
 80290f6:	f7fd faad 	bl	8026654 <__errno>
 80290fa:	2322      	movs	r3, #34	@ 0x22
 80290fc:	e01c      	b.n	8029138 <pow+0xa0>
 80290fe:	0030      	movs	r0, r6
 8029100:	0039      	movs	r1, r7
 8029102:	f000 f87b 	bl	80291fc <finite>
 8029106:	2800      	cmp	r0, #0
 8029108:	d11b      	bne.n	8029142 <pow+0xaa>
 802910a:	9800      	ldr	r0, [sp, #0]
 802910c:	9901      	ldr	r1, [sp, #4]
 802910e:	f000 f875 	bl	80291fc <finite>
 8029112:	2800      	cmp	r0, #0
 8029114:	d015      	beq.n	8029142 <pow+0xaa>
 8029116:	0020      	movs	r0, r4
 8029118:	0029      	movs	r1, r5
 802911a:	f000 f86f 	bl	80291fc <finite>
 802911e:	2800      	cmp	r0, #0
 8029120:	d00f      	beq.n	8029142 <pow+0xaa>
 8029122:	0032      	movs	r2, r6
 8029124:	003b      	movs	r3, r7
 8029126:	0030      	movs	r0, r6
 8029128:	0039      	movs	r1, r7
 802912a:	f7da fb03 	bl	8003734 <__aeabi_dcmpun>
 802912e:	2800      	cmp	r0, #0
 8029130:	d0e1      	beq.n	80290f6 <pow+0x5e>
 8029132:	f7fd fa8f 	bl	8026654 <__errno>
 8029136:	2321      	movs	r3, #33	@ 0x21
 8029138:	6003      	str	r3, [r0, #0]
 802913a:	0030      	movs	r0, r6
 802913c:	0039      	movs	r1, r7
 802913e:	b003      	add	sp, #12
 8029140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029142:	2200      	movs	r2, #0
 8029144:	2300      	movs	r3, #0
 8029146:	0030      	movs	r0, r6
 8029148:	0039      	movs	r1, r7
 802914a:	f7d7 f9b1 	bl	80004b0 <__aeabi_dcmpeq>
 802914e:	2800      	cmp	r0, #0
 8029150:	d0f3      	beq.n	802913a <pow+0xa2>
 8029152:	9800      	ldr	r0, [sp, #0]
 8029154:	9901      	ldr	r1, [sp, #4]
 8029156:	f000 f851 	bl	80291fc <finite>
 802915a:	2800      	cmp	r0, #0
 802915c:	d0ed      	beq.n	802913a <pow+0xa2>
 802915e:	0020      	movs	r0, r4
 8029160:	0029      	movs	r1, r5
 8029162:	f000 f84b 	bl	80291fc <finite>
 8029166:	e7c4      	b.n	80290f2 <pow+0x5a>
 8029168:	2600      	movs	r6, #0
 802916a:	4f01      	ldr	r7, [pc, #4]	@ (8029170 <pow+0xd8>)
 802916c:	e7e5      	b.n	802913a <pow+0xa2>
 802916e:	46c0      	nop			@ (mov r8, r8)
 8029170:	3ff00000 	.word	0x3ff00000

08029174 <expf>:
 8029174:	b570      	push	{r4, r5, r6, lr}
 8029176:	1c04      	adds	r4, r0, #0
 8029178:	f000 ffb8 	bl	802a0ec <__ieee754_expf>
 802917c:	1c05      	adds	r5, r0, #0
 802917e:	1c20      	adds	r0, r4, #0
 8029180:	f000 f844 	bl	802920c <finitef>
 8029184:	2800      	cmp	r0, #0
 8029186:	d00b      	beq.n	80291a0 <expf+0x2c>
 8029188:	490c      	ldr	r1, [pc, #48]	@ (80291bc <expf+0x48>)
 802918a:	1c20      	adds	r0, r4, #0
 802918c:	f7d7 f9e4 	bl	8000558 <__aeabi_fcmpgt>
 8029190:	2800      	cmp	r0, #0
 8029192:	d007      	beq.n	80291a4 <expf+0x30>
 8029194:	f7fd fa5e 	bl	8026654 <__errno>
 8029198:	25ff      	movs	r5, #255	@ 0xff
 802919a:	2322      	movs	r3, #34	@ 0x22
 802919c:	05ed      	lsls	r5, r5, #23
 802919e:	6003      	str	r3, [r0, #0]
 80291a0:	1c28      	adds	r0, r5, #0
 80291a2:	bd70      	pop	{r4, r5, r6, pc}
 80291a4:	4906      	ldr	r1, [pc, #24]	@ (80291c0 <expf+0x4c>)
 80291a6:	1c20      	adds	r0, r4, #0
 80291a8:	f7d7 f9c2 	bl	8000530 <__aeabi_fcmplt>
 80291ac:	2800      	cmp	r0, #0
 80291ae:	d0f7      	beq.n	80291a0 <expf+0x2c>
 80291b0:	f7fd fa50 	bl	8026654 <__errno>
 80291b4:	2322      	movs	r3, #34	@ 0x22
 80291b6:	2500      	movs	r5, #0
 80291b8:	6003      	str	r3, [r0, #0]
 80291ba:	e7f1      	b.n	80291a0 <expf+0x2c>
 80291bc:	42b17217 	.word	0x42b17217
 80291c0:	c2cff1b5 	.word	0xc2cff1b5

080291c4 <sqrtf>:
 80291c4:	b570      	push	{r4, r5, r6, lr}
 80291c6:	1c05      	adds	r5, r0, #0
 80291c8:	f000 f82a 	bl	8029220 <__ieee754_sqrtf>
 80291cc:	1c29      	adds	r1, r5, #0
 80291ce:	1c04      	adds	r4, r0, #0
 80291d0:	1c28      	adds	r0, r5, #0
 80291d2:	f7d8 faf3 	bl	80017bc <__aeabi_fcmpun>
 80291d6:	2800      	cmp	r0, #0
 80291d8:	d10e      	bne.n	80291f8 <sqrtf+0x34>
 80291da:	2100      	movs	r1, #0
 80291dc:	1c28      	adds	r0, r5, #0
 80291de:	f7d7 f9a7 	bl	8000530 <__aeabi_fcmplt>
 80291e2:	2800      	cmp	r0, #0
 80291e4:	d008      	beq.n	80291f8 <sqrtf+0x34>
 80291e6:	f7fd fa35 	bl	8026654 <__errno>
 80291ea:	2321      	movs	r3, #33	@ 0x21
 80291ec:	2100      	movs	r1, #0
 80291ee:	6003      	str	r3, [r0, #0]
 80291f0:	1c08      	adds	r0, r1, #0
 80291f2:	f7d7 fd57 	bl	8000ca4 <__aeabi_fdiv>
 80291f6:	1c04      	adds	r4, r0, #0
 80291f8:	1c20      	adds	r0, r4, #0
 80291fa:	bd70      	pop	{r4, r5, r6, pc}

080291fc <finite>:
 80291fc:	4b02      	ldr	r3, [pc, #8]	@ (8029208 <finite+0xc>)
 80291fe:	0048      	lsls	r0, r1, #1
 8029200:	0840      	lsrs	r0, r0, #1
 8029202:	18c0      	adds	r0, r0, r3
 8029204:	0fc0      	lsrs	r0, r0, #31
 8029206:	4770      	bx	lr
 8029208:	80100000 	.word	0x80100000

0802920c <finitef>:
 802920c:	22ff      	movs	r2, #255	@ 0xff
 802920e:	0043      	lsls	r3, r0, #1
 8029210:	085b      	lsrs	r3, r3, #1
 8029212:	2001      	movs	r0, #1
 8029214:	05d2      	lsls	r2, r2, #23
 8029216:	4293      	cmp	r3, r2
 8029218:	db00      	blt.n	802921c <finitef+0x10>
 802921a:	2000      	movs	r0, #0
 802921c:	4770      	bx	lr
	...

08029220 <__ieee754_sqrtf>:
 8029220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029222:	21ff      	movs	r1, #255	@ 0xff
 8029224:	0042      	lsls	r2, r0, #1
 8029226:	0003      	movs	r3, r0
 8029228:	1c04      	adds	r4, r0, #0
 802922a:	0852      	lsrs	r2, r2, #1
 802922c:	05c9      	lsls	r1, r1, #23
 802922e:	428a      	cmp	r2, r1
 8029230:	d309      	bcc.n	8029246 <__ieee754_sqrtf+0x26>
 8029232:	1c01      	adds	r1, r0, #0
 8029234:	f7d7 ff04 	bl	8001040 <__aeabi_fmul>
 8029238:	1c01      	adds	r1, r0, #0
 802923a:	1c20      	adds	r0, r4, #0
 802923c:	f7d7 fb40 	bl	80008c0 <__aeabi_fadd>
 8029240:	1c04      	adds	r4, r0, #0
 8029242:	1c20      	adds	r0, r4, #0
 8029244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8029246:	2a00      	cmp	r2, #0
 8029248:	d0fb      	beq.n	8029242 <__ieee754_sqrtf+0x22>
 802924a:	2800      	cmp	r0, #0
 802924c:	da06      	bge.n	802925c <__ieee754_sqrtf+0x3c>
 802924e:	1c01      	adds	r1, r0, #0
 8029250:	f7d8 f850 	bl	80012f4 <__aeabi_fsub>
 8029254:	1c01      	adds	r1, r0, #0
 8029256:	f7d7 fd25 	bl	8000ca4 <__aeabi_fdiv>
 802925a:	e7f1      	b.n	8029240 <__ieee754_sqrtf+0x20>
 802925c:	0002      	movs	r2, r0
 802925e:	400a      	ands	r2, r1
 8029260:	4208      	tst	r0, r1
 8029262:	d040      	beq.n	80292e6 <__ieee754_sqrtf+0xc6>
 8029264:	15c1      	asrs	r1, r0, #23
 8029266:	2280      	movs	r2, #128	@ 0x80
 8029268:	000f      	movs	r7, r1
 802926a:	025b      	lsls	r3, r3, #9
 802926c:	0a5b      	lsrs	r3, r3, #9
 802926e:	0412      	lsls	r2, r2, #16
 8029270:	3f7f      	subs	r7, #127	@ 0x7f
 8029272:	4313      	orrs	r3, r2
 8029274:	07c9      	lsls	r1, r1, #31
 8029276:	d400      	bmi.n	802927a <__ieee754_sqrtf+0x5a>
 8029278:	005b      	lsls	r3, r3, #1
 802927a:	2400      	movs	r4, #0
 802927c:	2180      	movs	r1, #128	@ 0x80
 802927e:	2019      	movs	r0, #25
 8029280:	0026      	movs	r6, r4
 8029282:	107f      	asrs	r7, r7, #1
 8029284:	005b      	lsls	r3, r3, #1
 8029286:	0449      	lsls	r1, r1, #17
 8029288:	1875      	adds	r5, r6, r1
 802928a:	001a      	movs	r2, r3
 802928c:	429d      	cmp	r5, r3
 802928e:	dc02      	bgt.n	8029296 <__ieee754_sqrtf+0x76>
 8029290:	186e      	adds	r6, r5, r1
 8029292:	1b5a      	subs	r2, r3, r5
 8029294:	1864      	adds	r4, r4, r1
 8029296:	3801      	subs	r0, #1
 8029298:	0053      	lsls	r3, r2, #1
 802929a:	0849      	lsrs	r1, r1, #1
 802929c:	2800      	cmp	r0, #0
 802929e:	d1f3      	bne.n	8029288 <__ieee754_sqrtf+0x68>
 80292a0:	2a00      	cmp	r2, #0
 80292a2:	d019      	beq.n	80292d8 <__ieee754_sqrtf+0xb8>
 80292a4:	4d16      	ldr	r5, [pc, #88]	@ (8029300 <__ieee754_sqrtf+0xe0>)
 80292a6:	4e17      	ldr	r6, [pc, #92]	@ (8029304 <__ieee754_sqrtf+0xe4>)
 80292a8:	6828      	ldr	r0, [r5, #0]
 80292aa:	6831      	ldr	r1, [r6, #0]
 80292ac:	682b      	ldr	r3, [r5, #0]
 80292ae:	9301      	str	r3, [sp, #4]
 80292b0:	f7d8 f820 	bl	80012f4 <__aeabi_fsub>
 80292b4:	1c01      	adds	r1, r0, #0
 80292b6:	9801      	ldr	r0, [sp, #4]
 80292b8:	f7d7 f944 	bl	8000544 <__aeabi_fcmple>
 80292bc:	2800      	cmp	r0, #0
 80292be:	d00b      	beq.n	80292d8 <__ieee754_sqrtf+0xb8>
 80292c0:	6828      	ldr	r0, [r5, #0]
 80292c2:	6831      	ldr	r1, [r6, #0]
 80292c4:	f7d7 fafc 	bl	80008c0 <__aeabi_fadd>
 80292c8:	682d      	ldr	r5, [r5, #0]
 80292ca:	1c01      	adds	r1, r0, #0
 80292cc:	1c28      	adds	r0, r5, #0
 80292ce:	f7d7 f92f 	bl	8000530 <__aeabi_fcmplt>
 80292d2:	2800      	cmp	r0, #0
 80292d4:	d010      	beq.n	80292f8 <__ieee754_sqrtf+0xd8>
 80292d6:	3402      	adds	r4, #2
 80292d8:	23fc      	movs	r3, #252	@ 0xfc
 80292da:	1064      	asrs	r4, r4, #1
 80292dc:	059b      	lsls	r3, r3, #22
 80292de:	18e3      	adds	r3, r4, r3
 80292e0:	05fc      	lsls	r4, r7, #23
 80292e2:	18e4      	adds	r4, r4, r3
 80292e4:	e7ad      	b.n	8029242 <__ieee754_sqrtf+0x22>
 80292e6:	2080      	movs	r0, #128	@ 0x80
 80292e8:	0400      	lsls	r0, r0, #16
 80292ea:	005b      	lsls	r3, r3, #1
 80292ec:	0011      	movs	r1, r2
 80292ee:	3201      	adds	r2, #1
 80292f0:	4203      	tst	r3, r0
 80292f2:	d0fa      	beq.n	80292ea <__ieee754_sqrtf+0xca>
 80292f4:	4249      	negs	r1, r1
 80292f6:	e7b6      	b.n	8029266 <__ieee754_sqrtf+0x46>
 80292f8:	2301      	movs	r3, #1
 80292fa:	3401      	adds	r4, #1
 80292fc:	439c      	bics	r4, r3
 80292fe:	e7eb      	b.n	80292d8 <__ieee754_sqrtf+0xb8>
 8029300:	0802eebc 	.word	0x0802eebc
 8029304:	0802eeb8 	.word	0x0802eeb8

08029308 <roundf>:
 8029308:	0dc3      	lsrs	r3, r0, #23
 802930a:	b2db      	uxtb	r3, r3
 802930c:	3b7f      	subs	r3, #127	@ 0x7f
 802930e:	0002      	movs	r2, r0
 8029310:	b510      	push	{r4, lr}
 8029312:	2b16      	cmp	r3, #22
 8029314:	dc13      	bgt.n	802933e <roundf+0x36>
 8029316:	2b00      	cmp	r3, #0
 8029318:	da07      	bge.n	802932a <roundf+0x22>
 802931a:	0fc2      	lsrs	r2, r0, #31
 802931c:	07d0      	lsls	r0, r2, #31
 802931e:	3301      	adds	r3, #1
 8029320:	d102      	bne.n	8029328 <roundf+0x20>
 8029322:	23fe      	movs	r3, #254	@ 0xfe
 8029324:	059b      	lsls	r3, r3, #22
 8029326:	4318      	orrs	r0, r3
 8029328:	bd10      	pop	{r4, pc}
 802932a:	4908      	ldr	r1, [pc, #32]	@ (802934c <roundf+0x44>)
 802932c:	4119      	asrs	r1, r3
 802932e:	4208      	tst	r0, r1
 8029330:	d0fa      	beq.n	8029328 <roundf+0x20>
 8029332:	2080      	movs	r0, #128	@ 0x80
 8029334:	03c0      	lsls	r0, r0, #15
 8029336:	4118      	asrs	r0, r3
 8029338:	1880      	adds	r0, r0, r2
 802933a:	4388      	bics	r0, r1
 802933c:	e7f4      	b.n	8029328 <roundf+0x20>
 802933e:	2b80      	cmp	r3, #128	@ 0x80
 8029340:	d1f2      	bne.n	8029328 <roundf+0x20>
 8029342:	1c01      	adds	r1, r0, #0
 8029344:	f7d7 fabc 	bl	80008c0 <__aeabi_fadd>
 8029348:	e7ee      	b.n	8029328 <roundf+0x20>
 802934a:	46c0      	nop			@ (mov r8, r8)
 802934c:	007fffff 	.word	0x007fffff

08029350 <__ieee754_log>:
 8029350:	2380      	movs	r3, #128	@ 0x80
 8029352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029354:	035b      	lsls	r3, r3, #13
 8029356:	000e      	movs	r6, r1
 8029358:	b08d      	sub	sp, #52	@ 0x34
 802935a:	4299      	cmp	r1, r3
 802935c:	da23      	bge.n	80293a6 <__ieee754_log+0x56>
 802935e:	004b      	lsls	r3, r1, #1
 8029360:	085b      	lsrs	r3, r3, #1
 8029362:	4303      	orrs	r3, r0
 8029364:	d107      	bne.n	8029376 <__ieee754_log+0x26>
 8029366:	2200      	movs	r2, #0
 8029368:	2300      	movs	r3, #0
 802936a:	2000      	movs	r0, #0
 802936c:	49b4      	ldr	r1, [pc, #720]	@ (8029640 <__ieee754_log+0x2f0>)
 802936e:	f7d8 feb7 	bl	80020e0 <__aeabi_ddiv>
 8029372:	b00d      	add	sp, #52	@ 0x34
 8029374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029376:	2900      	cmp	r1, #0
 8029378:	da06      	bge.n	8029388 <__ieee754_log+0x38>
 802937a:	0002      	movs	r2, r0
 802937c:	000b      	movs	r3, r1
 802937e:	f7d9 fdcf 	bl	8002f20 <__aeabi_dsub>
 8029382:	2200      	movs	r2, #0
 8029384:	2300      	movs	r3, #0
 8029386:	e7f2      	b.n	802936e <__ieee754_log+0x1e>
 8029388:	4bae      	ldr	r3, [pc, #696]	@ (8029644 <__ieee754_log+0x2f4>)
 802938a:	2200      	movs	r2, #0
 802938c:	f7d9 fae2 	bl	8002954 <__aeabi_dmul>
 8029390:	2336      	movs	r3, #54	@ 0x36
 8029392:	000e      	movs	r6, r1
 8029394:	425b      	negs	r3, r3
 8029396:	4aac      	ldr	r2, [pc, #688]	@ (8029648 <__ieee754_log+0x2f8>)
 8029398:	4296      	cmp	r6, r2
 802939a:	dd06      	ble.n	80293aa <__ieee754_log+0x5a>
 802939c:	0002      	movs	r2, r0
 802939e:	000b      	movs	r3, r1
 80293a0:	f7d8 fad8 	bl	8001954 <__aeabi_dadd>
 80293a4:	e7e5      	b.n	8029372 <__ieee754_log+0x22>
 80293a6:	2300      	movs	r3, #0
 80293a8:	e7f5      	b.n	8029396 <__ieee754_log+0x46>
 80293aa:	4ca8      	ldr	r4, [pc, #672]	@ (802964c <__ieee754_log+0x2fc>)
 80293ac:	1532      	asrs	r2, r6, #20
 80293ae:	1912      	adds	r2, r2, r4
 80293b0:	0336      	lsls	r6, r6, #12
 80293b2:	4ca7      	ldr	r4, [pc, #668]	@ (8029650 <__ieee754_log+0x300>)
 80293b4:	18d2      	adds	r2, r2, r3
 80293b6:	0b33      	lsrs	r3, r6, #12
 80293b8:	9302      	str	r3, [sp, #8]
 80293ba:	191b      	adds	r3, r3, r4
 80293bc:	2480      	movs	r4, #128	@ 0x80
 80293be:	0364      	lsls	r4, r4, #13
 80293c0:	4023      	ands	r3, r4
 80293c2:	4ca4      	ldr	r4, [pc, #656]	@ (8029654 <__ieee754_log+0x304>)
 80293c4:	9d02      	ldr	r5, [sp, #8]
 80293c6:	405c      	eors	r4, r3
 80293c8:	151b      	asrs	r3, r3, #20
 80293ca:	189b      	adds	r3, r3, r2
 80293cc:	4325      	orrs	r5, r4
 80293ce:	2200      	movs	r2, #0
 80293d0:	9300      	str	r3, [sp, #0]
 80293d2:	0029      	movs	r1, r5
 80293d4:	4b9f      	ldr	r3, [pc, #636]	@ (8029654 <__ieee754_log+0x304>)
 80293d6:	f7d9 fda3 	bl	8002f20 <__aeabi_dsub>
 80293da:	9b02      	ldr	r3, [sp, #8]
 80293dc:	0006      	movs	r6, r0
 80293de:	3302      	adds	r3, #2
 80293e0:	031b      	lsls	r3, r3, #12
 80293e2:	000f      	movs	r7, r1
 80293e4:	2200      	movs	r2, #0
 80293e6:	0b1b      	lsrs	r3, r3, #12
 80293e8:	2b02      	cmp	r3, #2
 80293ea:	dc64      	bgt.n	80294b6 <__ieee754_log+0x166>
 80293ec:	2300      	movs	r3, #0
 80293ee:	f7d7 f85f 	bl	80004b0 <__aeabi_dcmpeq>
 80293f2:	2800      	cmp	r0, #0
 80293f4:	d019      	beq.n	802942a <__ieee754_log+0xda>
 80293f6:	9b00      	ldr	r3, [sp, #0]
 80293f8:	2b00      	cmp	r3, #0
 80293fa:	d100      	bne.n	80293fe <__ieee754_log+0xae>
 80293fc:	e11c      	b.n	8029638 <__ieee754_log+0x2e8>
 80293fe:	0018      	movs	r0, r3
 8029400:	f7da f9f6 	bl	80037f0 <__aeabi_i2d>
 8029404:	4a94      	ldr	r2, [pc, #592]	@ (8029658 <__ieee754_log+0x308>)
 8029406:	4b95      	ldr	r3, [pc, #596]	@ (802965c <__ieee754_log+0x30c>)
 8029408:	0004      	movs	r4, r0
 802940a:	000d      	movs	r5, r1
 802940c:	f7d9 faa2 	bl	8002954 <__aeabi_dmul>
 8029410:	4a93      	ldr	r2, [pc, #588]	@ (8029660 <__ieee754_log+0x310>)
 8029412:	0006      	movs	r6, r0
 8029414:	000f      	movs	r7, r1
 8029416:	4b93      	ldr	r3, [pc, #588]	@ (8029664 <__ieee754_log+0x314>)
 8029418:	0020      	movs	r0, r4
 802941a:	0029      	movs	r1, r5
 802941c:	f7d9 fa9a 	bl	8002954 <__aeabi_dmul>
 8029420:	0002      	movs	r2, r0
 8029422:	000b      	movs	r3, r1
 8029424:	0030      	movs	r0, r6
 8029426:	0039      	movs	r1, r7
 8029428:	e7ba      	b.n	80293a0 <__ieee754_log+0x50>
 802942a:	4a8f      	ldr	r2, [pc, #572]	@ (8029668 <__ieee754_log+0x318>)
 802942c:	4b8f      	ldr	r3, [pc, #572]	@ (802966c <__ieee754_log+0x31c>)
 802942e:	0030      	movs	r0, r6
 8029430:	0039      	movs	r1, r7
 8029432:	f7d9 fa8f 	bl	8002954 <__aeabi_dmul>
 8029436:	0002      	movs	r2, r0
 8029438:	000b      	movs	r3, r1
 802943a:	2000      	movs	r0, #0
 802943c:	498c      	ldr	r1, [pc, #560]	@ (8029670 <__ieee754_log+0x320>)
 802943e:	f7d9 fd6f 	bl	8002f20 <__aeabi_dsub>
 8029442:	0032      	movs	r2, r6
 8029444:	0004      	movs	r4, r0
 8029446:	000d      	movs	r5, r1
 8029448:	003b      	movs	r3, r7
 802944a:	0030      	movs	r0, r6
 802944c:	0039      	movs	r1, r7
 802944e:	f7d9 fa81 	bl	8002954 <__aeabi_dmul>
 8029452:	000b      	movs	r3, r1
 8029454:	0002      	movs	r2, r0
 8029456:	0029      	movs	r1, r5
 8029458:	0020      	movs	r0, r4
 802945a:	f7d9 fa7b 	bl	8002954 <__aeabi_dmul>
 802945e:	9b00      	ldr	r3, [sp, #0]
 8029460:	9002      	str	r0, [sp, #8]
 8029462:	9103      	str	r1, [sp, #12]
 8029464:	2b00      	cmp	r3, #0
 8029466:	d106      	bne.n	8029476 <__ieee754_log+0x126>
 8029468:	0002      	movs	r2, r0
 802946a:	000b      	movs	r3, r1
 802946c:	0030      	movs	r0, r6
 802946e:	0039      	movs	r1, r7
 8029470:	f7d9 fd56 	bl	8002f20 <__aeabi_dsub>
 8029474:	e77d      	b.n	8029372 <__ieee754_log+0x22>
 8029476:	9800      	ldr	r0, [sp, #0]
 8029478:	f7da f9ba 	bl	80037f0 <__aeabi_i2d>
 802947c:	4a76      	ldr	r2, [pc, #472]	@ (8029658 <__ieee754_log+0x308>)
 802947e:	4b77      	ldr	r3, [pc, #476]	@ (802965c <__ieee754_log+0x30c>)
 8029480:	0004      	movs	r4, r0
 8029482:	000d      	movs	r5, r1
 8029484:	f7d9 fa66 	bl	8002954 <__aeabi_dmul>
 8029488:	4a75      	ldr	r2, [pc, #468]	@ (8029660 <__ieee754_log+0x310>)
 802948a:	9000      	str	r0, [sp, #0]
 802948c:	9101      	str	r1, [sp, #4]
 802948e:	4b75      	ldr	r3, [pc, #468]	@ (8029664 <__ieee754_log+0x314>)
 8029490:	0020      	movs	r0, r4
 8029492:	0029      	movs	r1, r5
 8029494:	f7d9 fa5e 	bl	8002954 <__aeabi_dmul>
 8029498:	0002      	movs	r2, r0
 802949a:	000b      	movs	r3, r1
 802949c:	9802      	ldr	r0, [sp, #8]
 802949e:	9903      	ldr	r1, [sp, #12]
 80294a0:	f7d9 fd3e 	bl	8002f20 <__aeabi_dsub>
 80294a4:	0032      	movs	r2, r6
 80294a6:	003b      	movs	r3, r7
 80294a8:	f7d9 fd3a 	bl	8002f20 <__aeabi_dsub>
 80294ac:	0002      	movs	r2, r0
 80294ae:	000b      	movs	r3, r1
 80294b0:	9800      	ldr	r0, [sp, #0]
 80294b2:	9901      	ldr	r1, [sp, #4]
 80294b4:	e7dc      	b.n	8029470 <__ieee754_log+0x120>
 80294b6:	2380      	movs	r3, #128	@ 0x80
 80294b8:	05db      	lsls	r3, r3, #23
 80294ba:	f7d8 fa4b 	bl	8001954 <__aeabi_dadd>
 80294be:	0002      	movs	r2, r0
 80294c0:	000b      	movs	r3, r1
 80294c2:	0030      	movs	r0, r6
 80294c4:	0039      	movs	r1, r7
 80294c6:	f7d8 fe0b 	bl	80020e0 <__aeabi_ddiv>
 80294ca:	9004      	str	r0, [sp, #16]
 80294cc:	9105      	str	r1, [sp, #20]
 80294ce:	9800      	ldr	r0, [sp, #0]
 80294d0:	f7da f98e 	bl	80037f0 <__aeabi_i2d>
 80294d4:	9a04      	ldr	r2, [sp, #16]
 80294d6:	9b05      	ldr	r3, [sp, #20]
 80294d8:	9006      	str	r0, [sp, #24]
 80294da:	9107      	str	r1, [sp, #28]
 80294dc:	0010      	movs	r0, r2
 80294de:	0019      	movs	r1, r3
 80294e0:	f7d9 fa38 	bl	8002954 <__aeabi_dmul>
 80294e4:	4a63      	ldr	r2, [pc, #396]	@ (8029674 <__ieee754_log+0x324>)
 80294e6:	9b02      	ldr	r3, [sp, #8]
 80294e8:	4694      	mov	ip, r2
 80294ea:	4463      	add	r3, ip
 80294ec:	0002      	movs	r2, r0
 80294ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80294f0:	000b      	movs	r3, r1
 80294f2:	9008      	str	r0, [sp, #32]
 80294f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80294f6:	f7d9 fa2d 	bl	8002954 <__aeabi_dmul>
 80294fa:	0004      	movs	r4, r0
 80294fc:	000d      	movs	r5, r1
 80294fe:	4a5e      	ldr	r2, [pc, #376]	@ (8029678 <__ieee754_log+0x328>)
 8029500:	4b5e      	ldr	r3, [pc, #376]	@ (802967c <__ieee754_log+0x32c>)
 8029502:	f7d9 fa27 	bl	8002954 <__aeabi_dmul>
 8029506:	4a5e      	ldr	r2, [pc, #376]	@ (8029680 <__ieee754_log+0x330>)
 8029508:	4b5e      	ldr	r3, [pc, #376]	@ (8029684 <__ieee754_log+0x334>)
 802950a:	f7d8 fa23 	bl	8001954 <__aeabi_dadd>
 802950e:	0022      	movs	r2, r4
 8029510:	002b      	movs	r3, r5
 8029512:	f7d9 fa1f 	bl	8002954 <__aeabi_dmul>
 8029516:	4a5c      	ldr	r2, [pc, #368]	@ (8029688 <__ieee754_log+0x338>)
 8029518:	4b5c      	ldr	r3, [pc, #368]	@ (802968c <__ieee754_log+0x33c>)
 802951a:	f7d8 fa1b 	bl	8001954 <__aeabi_dadd>
 802951e:	0022      	movs	r2, r4
 8029520:	002b      	movs	r3, r5
 8029522:	f7d9 fa17 	bl	8002954 <__aeabi_dmul>
 8029526:	4a5a      	ldr	r2, [pc, #360]	@ (8029690 <__ieee754_log+0x340>)
 8029528:	4b5a      	ldr	r3, [pc, #360]	@ (8029694 <__ieee754_log+0x344>)
 802952a:	f7d8 fa13 	bl	8001954 <__aeabi_dadd>
 802952e:	9a08      	ldr	r2, [sp, #32]
 8029530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029532:	f7d9 fa0f 	bl	8002954 <__aeabi_dmul>
 8029536:	4a58      	ldr	r2, [pc, #352]	@ (8029698 <__ieee754_log+0x348>)
 8029538:	9008      	str	r0, [sp, #32]
 802953a:	9109      	str	r1, [sp, #36]	@ 0x24
 802953c:	4b57      	ldr	r3, [pc, #348]	@ (802969c <__ieee754_log+0x34c>)
 802953e:	0020      	movs	r0, r4
 8029540:	0029      	movs	r1, r5
 8029542:	f7d9 fa07 	bl	8002954 <__aeabi_dmul>
 8029546:	4a56      	ldr	r2, [pc, #344]	@ (80296a0 <__ieee754_log+0x350>)
 8029548:	4b56      	ldr	r3, [pc, #344]	@ (80296a4 <__ieee754_log+0x354>)
 802954a:	f7d8 fa03 	bl	8001954 <__aeabi_dadd>
 802954e:	0022      	movs	r2, r4
 8029550:	002b      	movs	r3, r5
 8029552:	f7d9 f9ff 	bl	8002954 <__aeabi_dmul>
 8029556:	4a54      	ldr	r2, [pc, #336]	@ (80296a8 <__ieee754_log+0x358>)
 8029558:	4b54      	ldr	r3, [pc, #336]	@ (80296ac <__ieee754_log+0x35c>)
 802955a:	f7d8 f9fb 	bl	8001954 <__aeabi_dadd>
 802955e:	0022      	movs	r2, r4
 8029560:	002b      	movs	r3, r5
 8029562:	f7d9 f9f7 	bl	8002954 <__aeabi_dmul>
 8029566:	0002      	movs	r2, r0
 8029568:	000b      	movs	r3, r1
 802956a:	9808      	ldr	r0, [sp, #32]
 802956c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802956e:	f7d8 f9f1 	bl	8001954 <__aeabi_dadd>
 8029572:	9a02      	ldr	r2, [sp, #8]
 8029574:	4b4e      	ldr	r3, [pc, #312]	@ (80296b0 <__ieee754_log+0x360>)
 8029576:	0004      	movs	r4, r0
 8029578:	1a9b      	subs	r3, r3, r2
 802957a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802957c:	000d      	movs	r5, r1
 802957e:	4313      	orrs	r3, r2
 8029580:	2b00      	cmp	r3, #0
 8029582:	dd34      	ble.n	80295ee <__ieee754_log+0x29e>
 8029584:	2200      	movs	r2, #0
 8029586:	4b3a      	ldr	r3, [pc, #232]	@ (8029670 <__ieee754_log+0x320>)
 8029588:	0030      	movs	r0, r6
 802958a:	0039      	movs	r1, r7
 802958c:	f7d9 f9e2 	bl	8002954 <__aeabi_dmul>
 8029590:	0032      	movs	r2, r6
 8029592:	003b      	movs	r3, r7
 8029594:	f7d9 f9de 	bl	8002954 <__aeabi_dmul>
 8029598:	0002      	movs	r2, r0
 802959a:	000b      	movs	r3, r1
 802959c:	9002      	str	r0, [sp, #8]
 802959e:	9103      	str	r1, [sp, #12]
 80295a0:	0020      	movs	r0, r4
 80295a2:	0029      	movs	r1, r5
 80295a4:	f7d8 f9d6 	bl	8001954 <__aeabi_dadd>
 80295a8:	9a04      	ldr	r2, [sp, #16]
 80295aa:	9b05      	ldr	r3, [sp, #20]
 80295ac:	f7d9 f9d2 	bl	8002954 <__aeabi_dmul>
 80295b0:	9b00      	ldr	r3, [sp, #0]
 80295b2:	0004      	movs	r4, r0
 80295b4:	000d      	movs	r5, r1
 80295b6:	2b00      	cmp	r3, #0
 80295b8:	d106      	bne.n	80295c8 <__ieee754_log+0x278>
 80295ba:	0002      	movs	r2, r0
 80295bc:	000b      	movs	r3, r1
 80295be:	9802      	ldr	r0, [sp, #8]
 80295c0:	9903      	ldr	r1, [sp, #12]
 80295c2:	f7d9 fcad 	bl	8002f20 <__aeabi_dsub>
 80295c6:	e74f      	b.n	8029468 <__ieee754_log+0x118>
 80295c8:	4a23      	ldr	r2, [pc, #140]	@ (8029658 <__ieee754_log+0x308>)
 80295ca:	4b24      	ldr	r3, [pc, #144]	@ (802965c <__ieee754_log+0x30c>)
 80295cc:	9806      	ldr	r0, [sp, #24]
 80295ce:	9907      	ldr	r1, [sp, #28]
 80295d0:	f7d9 f9c0 	bl	8002954 <__aeabi_dmul>
 80295d4:	4a22      	ldr	r2, [pc, #136]	@ (8029660 <__ieee754_log+0x310>)
 80295d6:	9000      	str	r0, [sp, #0]
 80295d8:	9101      	str	r1, [sp, #4]
 80295da:	9806      	ldr	r0, [sp, #24]
 80295dc:	9907      	ldr	r1, [sp, #28]
 80295de:	4b21      	ldr	r3, [pc, #132]	@ (8029664 <__ieee754_log+0x314>)
 80295e0:	f7d9 f9b8 	bl	8002954 <__aeabi_dmul>
 80295e4:	0022      	movs	r2, r4
 80295e6:	002b      	movs	r3, r5
 80295e8:	f7d8 f9b4 	bl	8001954 <__aeabi_dadd>
 80295ec:	e754      	b.n	8029498 <__ieee754_log+0x148>
 80295ee:	0002      	movs	r2, r0
 80295f0:	000b      	movs	r3, r1
 80295f2:	0030      	movs	r0, r6
 80295f4:	0039      	movs	r1, r7
 80295f6:	f7d9 fc93 	bl	8002f20 <__aeabi_dsub>
 80295fa:	9a04      	ldr	r2, [sp, #16]
 80295fc:	9b05      	ldr	r3, [sp, #20]
 80295fe:	f7d9 f9a9 	bl	8002954 <__aeabi_dmul>
 8029602:	9b00      	ldr	r3, [sp, #0]
 8029604:	0004      	movs	r4, r0
 8029606:	000d      	movs	r5, r1
 8029608:	2b00      	cmp	r3, #0
 802960a:	d102      	bne.n	8029612 <__ieee754_log+0x2c2>
 802960c:	0002      	movs	r2, r0
 802960e:	000b      	movs	r3, r1
 8029610:	e72c      	b.n	802946c <__ieee754_log+0x11c>
 8029612:	4a11      	ldr	r2, [pc, #68]	@ (8029658 <__ieee754_log+0x308>)
 8029614:	4b11      	ldr	r3, [pc, #68]	@ (802965c <__ieee754_log+0x30c>)
 8029616:	9806      	ldr	r0, [sp, #24]
 8029618:	9907      	ldr	r1, [sp, #28]
 802961a:	f7d9 f99b 	bl	8002954 <__aeabi_dmul>
 802961e:	4a10      	ldr	r2, [pc, #64]	@ (8029660 <__ieee754_log+0x310>)
 8029620:	9000      	str	r0, [sp, #0]
 8029622:	9101      	str	r1, [sp, #4]
 8029624:	9806      	ldr	r0, [sp, #24]
 8029626:	9907      	ldr	r1, [sp, #28]
 8029628:	4b0e      	ldr	r3, [pc, #56]	@ (8029664 <__ieee754_log+0x314>)
 802962a:	f7d9 f993 	bl	8002954 <__aeabi_dmul>
 802962e:	0002      	movs	r2, r0
 8029630:	000b      	movs	r3, r1
 8029632:	0020      	movs	r0, r4
 8029634:	0029      	movs	r1, r5
 8029636:	e733      	b.n	80294a0 <__ieee754_log+0x150>
 8029638:	2000      	movs	r0, #0
 802963a:	2100      	movs	r1, #0
 802963c:	e699      	b.n	8029372 <__ieee754_log+0x22>
 802963e:	46c0      	nop			@ (mov r8, r8)
 8029640:	c3500000 	.word	0xc3500000
 8029644:	43500000 	.word	0x43500000
 8029648:	7fefffff 	.word	0x7fefffff
 802964c:	fffffc01 	.word	0xfffffc01
 8029650:	00095f64 	.word	0x00095f64
 8029654:	3ff00000 	.word	0x3ff00000
 8029658:	fee00000 	.word	0xfee00000
 802965c:	3fe62e42 	.word	0x3fe62e42
 8029660:	35793c76 	.word	0x35793c76
 8029664:	3dea39ef 	.word	0x3dea39ef
 8029668:	55555555 	.word	0x55555555
 802966c:	3fd55555 	.word	0x3fd55555
 8029670:	3fe00000 	.word	0x3fe00000
 8029674:	fff9eb86 	.word	0xfff9eb86
 8029678:	df3e5244 	.word	0xdf3e5244
 802967c:	3fc2f112 	.word	0x3fc2f112
 8029680:	96cb03de 	.word	0x96cb03de
 8029684:	3fc74664 	.word	0x3fc74664
 8029688:	94229359 	.word	0x94229359
 802968c:	3fd24924 	.word	0x3fd24924
 8029690:	55555593 	.word	0x55555593
 8029694:	3fe55555 	.word	0x3fe55555
 8029698:	d078c69f 	.word	0xd078c69f
 802969c:	3fc39a09 	.word	0x3fc39a09
 80296a0:	1d8e78af 	.word	0x1d8e78af
 80296a4:	3fcc71c5 	.word	0x3fcc71c5
 80296a8:	9997fa04 	.word	0x9997fa04
 80296ac:	3fd99999 	.word	0x3fd99999
 80296b0:	0006b851 	.word	0x0006b851

080296b4 <__ieee754_pow>:
 80296b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80296b6:	b095      	sub	sp, #84	@ 0x54
 80296b8:	9204      	str	r2, [sp, #16]
 80296ba:	9305      	str	r3, [sp, #20]
 80296bc:	9b04      	ldr	r3, [sp, #16]
 80296be:	9f05      	ldr	r7, [sp, #20]
 80296c0:	001a      	movs	r2, r3
 80296c2:	007d      	lsls	r5, r7, #1
 80296c4:	086d      	lsrs	r5, r5, #1
 80296c6:	9002      	str	r0, [sp, #8]
 80296c8:	9103      	str	r1, [sp, #12]
 80296ca:	432a      	orrs	r2, r5
 80296cc:	d11a      	bne.n	8029704 <__ieee754_pow+0x50>
 80296ce:	2180      	movs	r1, #128	@ 0x80
 80296d0:	9a02      	ldr	r2, [sp, #8]
 80296d2:	9803      	ldr	r0, [sp, #12]
 80296d4:	0309      	lsls	r1, r1, #12
 80296d6:	4048      	eors	r0, r1
 80296d8:	0003      	movs	r3, r0
 80296da:	1892      	adds	r2, r2, r2
 80296dc:	415b      	adcs	r3, r3
 80296de:	4996      	ldr	r1, [pc, #600]	@ (8029938 <__ieee754_pow+0x284>)
 80296e0:	428b      	cmp	r3, r1
 80296e2:	d806      	bhi.n	80296f2 <__ieee754_pow+0x3e>
 80296e4:	d001      	beq.n	80296ea <__ieee754_pow+0x36>
 80296e6:	f000 fcce 	bl	802a086 <__ieee754_pow+0x9d2>
 80296ea:	2a00      	cmp	r2, #0
 80296ec:	d101      	bne.n	80296f2 <__ieee754_pow+0x3e>
 80296ee:	f000 fcca 	bl	802a086 <__ieee754_pow+0x9d2>
 80296f2:	9a04      	ldr	r2, [sp, #16]
 80296f4:	9b05      	ldr	r3, [sp, #20]
 80296f6:	9802      	ldr	r0, [sp, #8]
 80296f8:	9903      	ldr	r1, [sp, #12]
 80296fa:	f7d8 f92b 	bl	8001954 <__aeabi_dadd>
 80296fe:	9000      	str	r0, [sp, #0]
 8029700:	9101      	str	r1, [sp, #4]
 8029702:	e08e      	b.n	8029822 <__ieee754_pow+0x16e>
 8029704:	9a03      	ldr	r2, [sp, #12]
 8029706:	9206      	str	r2, [sp, #24]
 8029708:	9a02      	ldr	r2, [sp, #8]
 802970a:	920a      	str	r2, [sp, #40]	@ 0x28
 802970c:	9a03      	ldr	r2, [sp, #12]
 802970e:	0054      	lsls	r4, r2, #1
 8029710:	4a8a      	ldr	r2, [pc, #552]	@ (802993c <__ieee754_pow+0x288>)
 8029712:	0864      	lsrs	r4, r4, #1
 8029714:	4294      	cmp	r4, r2
 8029716:	d80e      	bhi.n	8029736 <__ieee754_pow+0x82>
 8029718:	d105      	bne.n	8029726 <__ieee754_pow+0x72>
 802971a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802971c:	2a00      	cmp	r2, #0
 802971e:	d1e8      	bne.n	80296f2 <__ieee754_pow+0x3e>
 8029720:	42a5      	cmp	r5, r4
 8029722:	d8e6      	bhi.n	80296f2 <__ieee754_pow+0x3e>
 8029724:	e002      	b.n	802972c <__ieee754_pow+0x78>
 8029726:	4a85      	ldr	r2, [pc, #532]	@ (802993c <__ieee754_pow+0x288>)
 8029728:	4295      	cmp	r5, r2
 802972a:	d804      	bhi.n	8029736 <__ieee754_pow+0x82>
 802972c:	4a83      	ldr	r2, [pc, #524]	@ (802993c <__ieee754_pow+0x288>)
 802972e:	4295      	cmp	r5, r2
 8029730:	d10c      	bne.n	802974c <__ieee754_pow+0x98>
 8029732:	2b00      	cmp	r3, #0
 8029734:	d00a      	beq.n	802974c <__ieee754_pow+0x98>
 8029736:	4a82      	ldr	r2, [pc, #520]	@ (8029940 <__ieee754_pow+0x28c>)
 8029738:	9b03      	ldr	r3, [sp, #12]
 802973a:	189b      	adds	r3, r3, r2
 802973c:	9a02      	ldr	r2, [sp, #8]
 802973e:	4313      	orrs	r3, r2
 8029740:	d1d7      	bne.n	80296f2 <__ieee754_pow+0x3e>
 8029742:	2180      	movs	r1, #128	@ 0x80
 8029744:	9a04      	ldr	r2, [sp, #16]
 8029746:	9805      	ldr	r0, [sp, #20]
 8029748:	0309      	lsls	r1, r1, #12
 802974a:	e7c4      	b.n	80296d6 <__ieee754_pow+0x22>
 802974c:	2600      	movs	r6, #0
 802974e:	9a06      	ldr	r2, [sp, #24]
 8029750:	9408      	str	r4, [sp, #32]
 8029752:	42b2      	cmp	r2, r6
 8029754:	da42      	bge.n	80297dc <__ieee754_pow+0x128>
 8029756:	4a7b      	ldr	r2, [pc, #492]	@ (8029944 <__ieee754_pow+0x290>)
 8029758:	4295      	cmp	r5, r2
 802975a:	d83e      	bhi.n	80297da <__ieee754_pow+0x126>
 802975c:	4a7a      	ldr	r2, [pc, #488]	@ (8029948 <__ieee754_pow+0x294>)
 802975e:	4295      	cmp	r5, r2
 8029760:	d910      	bls.n	8029784 <__ieee754_pow+0xd0>
 8029762:	497a      	ldr	r1, [pc, #488]	@ (802994c <__ieee754_pow+0x298>)
 8029764:	152a      	asrs	r2, r5, #20
 8029766:	1852      	adds	r2, r2, r1
 8029768:	2a14      	cmp	r2, #20
 802976a:	dd18      	ble.n	802979e <__ieee754_pow+0xea>
 802976c:	2134      	movs	r1, #52	@ 0x34
 802976e:	1a89      	subs	r1, r1, r2
 8029770:	9a04      	ldr	r2, [sp, #16]
 8029772:	40ca      	lsrs	r2, r1
 8029774:	0010      	movs	r0, r2
 8029776:	4088      	lsls	r0, r1
 8029778:	4298      	cmp	r0, r3
 802977a:	d103      	bne.n	8029784 <__ieee754_pow+0xd0>
 802977c:	2101      	movs	r1, #1
 802977e:	3602      	adds	r6, #2
 8029780:	400a      	ands	r2, r1
 8029782:	1ab6      	subs	r6, r6, r2
 8029784:	2b00      	cmp	r3, #0
 8029786:	d15b      	bne.n	8029840 <__ieee754_pow+0x18c>
 8029788:	2380      	movs	r3, #128	@ 0x80
 802978a:	05db      	lsls	r3, r3, #23
 802978c:	429f      	cmp	r7, r3
 802978e:	d14c      	bne.n	802982a <__ieee754_pow+0x176>
 8029790:	9a02      	ldr	r2, [sp, #8]
 8029792:	9b03      	ldr	r3, [sp, #12]
 8029794:	0010      	movs	r0, r2
 8029796:	0019      	movs	r1, r3
 8029798:	f7d9 f8dc 	bl	8002954 <__aeabi_dmul>
 802979c:	e7af      	b.n	80296fe <__ieee754_pow+0x4a>
 802979e:	2b00      	cmp	r3, #0
 80297a0:	d14e      	bne.n	8029840 <__ieee754_pow+0x18c>
 80297a2:	3314      	adds	r3, #20
 80297a4:	1a9a      	subs	r2, r3, r2
 80297a6:	002b      	movs	r3, r5
 80297a8:	4113      	asrs	r3, r2
 80297aa:	0019      	movs	r1, r3
 80297ac:	4091      	lsls	r1, r2
 80297ae:	42a9      	cmp	r1, r5
 80297b0:	d103      	bne.n	80297ba <__ieee754_pow+0x106>
 80297b2:	2201      	movs	r2, #1
 80297b4:	2602      	movs	r6, #2
 80297b6:	4013      	ands	r3, r2
 80297b8:	1af6      	subs	r6, r6, r3
 80297ba:	4b65      	ldr	r3, [pc, #404]	@ (8029950 <__ieee754_pow+0x29c>)
 80297bc:	429d      	cmp	r5, r3
 80297be:	d1e3      	bne.n	8029788 <__ieee754_pow+0xd4>
 80297c0:	9b02      	ldr	r3, [sp, #8]
 80297c2:	9c03      	ldr	r4, [sp, #12]
 80297c4:	9300      	str	r3, [sp, #0]
 80297c6:	9401      	str	r4, [sp, #4]
 80297c8:	2f00      	cmp	r7, #0
 80297ca:	da2a      	bge.n	8029822 <__ieee754_pow+0x16e>
 80297cc:	001a      	movs	r2, r3
 80297ce:	2000      	movs	r0, #0
 80297d0:	0023      	movs	r3, r4
 80297d2:	495f      	ldr	r1, [pc, #380]	@ (8029950 <__ieee754_pow+0x29c>)
 80297d4:	f7d8 fc84 	bl	80020e0 <__aeabi_ddiv>
 80297d8:	e791      	b.n	80296fe <__ieee754_pow+0x4a>
 80297da:	2602      	movs	r6, #2
 80297dc:	2b00      	cmp	r3, #0
 80297de:	d12f      	bne.n	8029840 <__ieee754_pow+0x18c>
 80297e0:	4b56      	ldr	r3, [pc, #344]	@ (802993c <__ieee754_pow+0x288>)
 80297e2:	429d      	cmp	r5, r3
 80297e4:	d1e9      	bne.n	80297ba <__ieee754_pow+0x106>
 80297e6:	4b56      	ldr	r3, [pc, #344]	@ (8029940 <__ieee754_pow+0x28c>)
 80297e8:	9a02      	ldr	r2, [sp, #8]
 80297ea:	18e3      	adds	r3, r4, r3
 80297ec:	4313      	orrs	r3, r2
 80297ee:	d101      	bne.n	80297f4 <__ieee754_pow+0x140>
 80297f0:	f000 fc49 	bl	802a086 <__ieee754_pow+0x9d2>
 80297f4:	4b54      	ldr	r3, [pc, #336]	@ (8029948 <__ieee754_pow+0x294>)
 80297f6:	429c      	cmp	r4, r3
 80297f8:	d909      	bls.n	802980e <__ieee754_pow+0x15a>
 80297fa:	9b04      	ldr	r3, [sp, #16]
 80297fc:	9c05      	ldr	r4, [sp, #20]
 80297fe:	9300      	str	r3, [sp, #0]
 8029800:	9401      	str	r4, [sp, #4]
 8029802:	2f00      	cmp	r7, #0
 8029804:	da0d      	bge.n	8029822 <__ieee754_pow+0x16e>
 8029806:	2300      	movs	r3, #0
 8029808:	2400      	movs	r4, #0
 802980a:	f000 fc3e 	bl	802a08a <__ieee754_pow+0x9d6>
 802980e:	2f00      	cmp	r7, #0
 8029810:	daf9      	bge.n	8029806 <__ieee754_pow+0x152>
 8029812:	2280      	movs	r2, #128	@ 0x80
 8029814:	0612      	lsls	r2, r2, #24
 8029816:	4694      	mov	ip, r2
 8029818:	9b04      	ldr	r3, [sp, #16]
 802981a:	9300      	str	r3, [sp, #0]
 802981c:	9b05      	ldr	r3, [sp, #20]
 802981e:	4463      	add	r3, ip
 8029820:	9301      	str	r3, [sp, #4]
 8029822:	9800      	ldr	r0, [sp, #0]
 8029824:	9901      	ldr	r1, [sp, #4]
 8029826:	b015      	add	sp, #84	@ 0x54
 8029828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802982a:	4b4a      	ldr	r3, [pc, #296]	@ (8029954 <__ieee754_pow+0x2a0>)
 802982c:	429f      	cmp	r7, r3
 802982e:	d107      	bne.n	8029840 <__ieee754_pow+0x18c>
 8029830:	9b06      	ldr	r3, [sp, #24]
 8029832:	2b00      	cmp	r3, #0
 8029834:	db04      	blt.n	8029840 <__ieee754_pow+0x18c>
 8029836:	9802      	ldr	r0, [sp, #8]
 8029838:	9903      	ldr	r1, [sp, #12]
 802983a:	f000 fe03 	bl	802a444 <__ieee754_sqrt>
 802983e:	e75e      	b.n	80296fe <__ieee754_pow+0x4a>
 8029840:	9802      	ldr	r0, [sp, #8]
 8029842:	9903      	ldr	r1, [sp, #12]
 8029844:	f000 fc4e 	bl	802a0e4 <fabs>
 8029848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802984a:	9000      	str	r0, [sp, #0]
 802984c:	9101      	str	r1, [sp, #4]
 802984e:	2b00      	cmp	r3, #0
 8029850:	d12c      	bne.n	80298ac <__ieee754_pow+0x1f8>
 8029852:	9b03      	ldr	r3, [sp, #12]
 8029854:	4a3e      	ldr	r2, [pc, #248]	@ (8029950 <__ieee754_pow+0x29c>)
 8029856:	009b      	lsls	r3, r3, #2
 8029858:	089b      	lsrs	r3, r3, #2
 802985a:	4293      	cmp	r3, r2
 802985c:	d001      	beq.n	8029862 <__ieee754_pow+0x1ae>
 802985e:	2c00      	cmp	r4, #0
 8029860:	d124      	bne.n	80298ac <__ieee754_pow+0x1f8>
 8029862:	2f00      	cmp	r7, #0
 8029864:	da07      	bge.n	8029876 <__ieee754_pow+0x1c2>
 8029866:	9a00      	ldr	r2, [sp, #0]
 8029868:	9b01      	ldr	r3, [sp, #4]
 802986a:	2000      	movs	r0, #0
 802986c:	4938      	ldr	r1, [pc, #224]	@ (8029950 <__ieee754_pow+0x29c>)
 802986e:	f7d8 fc37 	bl	80020e0 <__aeabi_ddiv>
 8029872:	9000      	str	r0, [sp, #0]
 8029874:	9101      	str	r1, [sp, #4]
 8029876:	9b06      	ldr	r3, [sp, #24]
 8029878:	2b00      	cmp	r3, #0
 802987a:	dad2      	bge.n	8029822 <__ieee754_pow+0x16e>
 802987c:	4b30      	ldr	r3, [pc, #192]	@ (8029940 <__ieee754_pow+0x28c>)
 802987e:	18e4      	adds	r4, r4, r3
 8029880:	4334      	orrs	r4, r6
 8029882:	d108      	bne.n	8029896 <__ieee754_pow+0x1e2>
 8029884:	9a00      	ldr	r2, [sp, #0]
 8029886:	9b01      	ldr	r3, [sp, #4]
 8029888:	0010      	movs	r0, r2
 802988a:	0019      	movs	r1, r3
 802988c:	f7d9 fb48 	bl	8002f20 <__aeabi_dsub>
 8029890:	0002      	movs	r2, r0
 8029892:	000b      	movs	r3, r1
 8029894:	e79e      	b.n	80297d4 <__ieee754_pow+0x120>
 8029896:	2e01      	cmp	r6, #1
 8029898:	d1c3      	bne.n	8029822 <__ieee754_pow+0x16e>
 802989a:	9800      	ldr	r0, [sp, #0]
 802989c:	2180      	movs	r1, #128	@ 0x80
 802989e:	0002      	movs	r2, r0
 80298a0:	9801      	ldr	r0, [sp, #4]
 80298a2:	0609      	lsls	r1, r1, #24
 80298a4:	1843      	adds	r3, r0, r1
 80298a6:	9200      	str	r2, [sp, #0]
 80298a8:	9301      	str	r3, [sp, #4]
 80298aa:	e7ba      	b.n	8029822 <__ieee754_pow+0x16e>
 80298ac:	9b03      	ldr	r3, [sp, #12]
 80298ae:	0fdb      	lsrs	r3, r3, #31
 80298b0:	3b01      	subs	r3, #1
 80298b2:	001a      	movs	r2, r3
 80298b4:	4332      	orrs	r2, r6
 80298b6:	d102      	bne.n	80298be <__ieee754_pow+0x20a>
 80298b8:	9a02      	ldr	r2, [sp, #8]
 80298ba:	9b03      	ldr	r3, [sp, #12]
 80298bc:	e7e4      	b.n	8029888 <__ieee754_pow+0x1d4>
 80298be:	3e01      	subs	r6, #1
 80298c0:	2200      	movs	r2, #0
 80298c2:	431e      	orrs	r6, r3
 80298c4:	d013      	beq.n	80298ee <__ieee754_pow+0x23a>
 80298c6:	4b22      	ldr	r3, [pc, #136]	@ (8029950 <__ieee754_pow+0x29c>)
 80298c8:	9206      	str	r2, [sp, #24]
 80298ca:	9307      	str	r3, [sp, #28]
 80298cc:	2384      	movs	r3, #132	@ 0x84
 80298ce:	05db      	lsls	r3, r3, #23
 80298d0:	429d      	cmp	r5, r3
 80298d2:	d800      	bhi.n	80298d6 <__ieee754_pow+0x222>
 80298d4:	e0fa      	b.n	8029acc <__ieee754_pow+0x418>
 80298d6:	4b20      	ldr	r3, [pc, #128]	@ (8029958 <__ieee754_pow+0x2a4>)
 80298d8:	429d      	cmp	r5, r3
 80298da:	d910      	bls.n	80298fe <__ieee754_pow+0x24a>
 80298dc:	4b1a      	ldr	r3, [pc, #104]	@ (8029948 <__ieee754_pow+0x294>)
 80298de:	429c      	cmp	r4, r3
 80298e0:	d807      	bhi.n	80298f2 <__ieee754_pow+0x23e>
 80298e2:	2f00      	cmp	r7, #0
 80298e4:	da07      	bge.n	80298f6 <__ieee754_pow+0x242>
 80298e6:	2000      	movs	r0, #0
 80298e8:	f000 fd82 	bl	802a3f0 <__math_oflow>
 80298ec:	e707      	b.n	80296fe <__ieee754_pow+0x4a>
 80298ee:	4b1b      	ldr	r3, [pc, #108]	@ (802995c <__ieee754_pow+0x2a8>)
 80298f0:	e7ea      	b.n	80298c8 <__ieee754_pow+0x214>
 80298f2:	2f00      	cmp	r7, #0
 80298f4:	dcf7      	bgt.n	80298e6 <__ieee754_pow+0x232>
 80298f6:	2000      	movs	r0, #0
 80298f8:	f000 fd73 	bl	802a3e2 <__math_uflow>
 80298fc:	e6ff      	b.n	80296fe <__ieee754_pow+0x4a>
 80298fe:	4b18      	ldr	r3, [pc, #96]	@ (8029960 <__ieee754_pow+0x2ac>)
 8029900:	429c      	cmp	r4, r3
 8029902:	d80a      	bhi.n	802991a <__ieee754_pow+0x266>
 8029904:	9806      	ldr	r0, [sp, #24]
 8029906:	9907      	ldr	r1, [sp, #28]
 8029908:	2300      	movs	r3, #0
 802990a:	2200      	movs	r2, #0
 802990c:	f7d6 fdd6 	bl	80004bc <__aeabi_dcmplt>
 8029910:	1e43      	subs	r3, r0, #1
 8029912:	4198      	sbcs	r0, r3
 8029914:	2f00      	cmp	r7, #0
 8029916:	daef      	bge.n	80298f8 <__ieee754_pow+0x244>
 8029918:	e7e6      	b.n	80298e8 <__ieee754_pow+0x234>
 802991a:	4b0d      	ldr	r3, [pc, #52]	@ (8029950 <__ieee754_pow+0x29c>)
 802991c:	2200      	movs	r2, #0
 802991e:	429c      	cmp	r4, r3
 8029920:	d920      	bls.n	8029964 <__ieee754_pow+0x2b0>
 8029922:	9806      	ldr	r0, [sp, #24]
 8029924:	9907      	ldr	r1, [sp, #28]
 8029926:	2300      	movs	r3, #0
 8029928:	f7d6 fdc8 	bl	80004bc <__aeabi_dcmplt>
 802992c:	1e43      	subs	r3, r0, #1
 802992e:	4198      	sbcs	r0, r3
 8029930:	2f00      	cmp	r7, #0
 8029932:	dcd9      	bgt.n	80298e8 <__ieee754_pow+0x234>
 8029934:	e7e0      	b.n	80298f8 <__ieee754_pow+0x244>
 8029936:	46c0      	nop			@ (mov r8, r8)
 8029938:	fff00000 	.word	0xfff00000
 802993c:	7ff00000 	.word	0x7ff00000
 8029940:	c0100000 	.word	0xc0100000
 8029944:	433fffff 	.word	0x433fffff
 8029948:	3fefffff 	.word	0x3fefffff
 802994c:	fffffc01 	.word	0xfffffc01
 8029950:	3ff00000 	.word	0x3ff00000
 8029954:	3fe00000 	.word	0x3fe00000
 8029958:	43f00000 	.word	0x43f00000
 802995c:	bff00000 	.word	0xbff00000
 8029960:	3feffffe 	.word	0x3feffffe
 8029964:	9800      	ldr	r0, [sp, #0]
 8029966:	9901      	ldr	r1, [sp, #4]
 8029968:	4b4d      	ldr	r3, [pc, #308]	@ (8029aa0 <__ieee754_pow+0x3ec>)
 802996a:	f7d9 fad9 	bl	8002f20 <__aeabi_dsub>
 802996e:	22c0      	movs	r2, #192	@ 0xc0
 8029970:	4b4c      	ldr	r3, [pc, #304]	@ (8029aa4 <__ieee754_pow+0x3f0>)
 8029972:	05d2      	lsls	r2, r2, #23
 8029974:	0006      	movs	r6, r0
 8029976:	000f      	movs	r7, r1
 8029978:	f7d8 ffec 	bl	8002954 <__aeabi_dmul>
 802997c:	4a4a      	ldr	r2, [pc, #296]	@ (8029aa8 <__ieee754_pow+0x3f4>)
 802997e:	9002      	str	r0, [sp, #8]
 8029980:	9103      	str	r1, [sp, #12]
 8029982:	4b4a      	ldr	r3, [pc, #296]	@ (8029aac <__ieee754_pow+0x3f8>)
 8029984:	0030      	movs	r0, r6
 8029986:	0039      	movs	r1, r7
 8029988:	f7d8 ffe4 	bl	8002954 <__aeabi_dmul>
 802998c:	2200      	movs	r2, #0
 802998e:	9000      	str	r0, [sp, #0]
 8029990:	9101      	str	r1, [sp, #4]
 8029992:	4b47      	ldr	r3, [pc, #284]	@ (8029ab0 <__ieee754_pow+0x3fc>)
 8029994:	0030      	movs	r0, r6
 8029996:	0039      	movs	r1, r7
 8029998:	f7d8 ffdc 	bl	8002954 <__aeabi_dmul>
 802999c:	0002      	movs	r2, r0
 802999e:	000b      	movs	r3, r1
 80299a0:	4844      	ldr	r0, [pc, #272]	@ (8029ab4 <__ieee754_pow+0x400>)
 80299a2:	4945      	ldr	r1, [pc, #276]	@ (8029ab8 <__ieee754_pow+0x404>)
 80299a4:	f7d9 fabc 	bl	8002f20 <__aeabi_dsub>
 80299a8:	0032      	movs	r2, r6
 80299aa:	003b      	movs	r3, r7
 80299ac:	f7d8 ffd2 	bl	8002954 <__aeabi_dmul>
 80299b0:	0002      	movs	r2, r0
 80299b2:	000b      	movs	r3, r1
 80299b4:	2000      	movs	r0, #0
 80299b6:	4941      	ldr	r1, [pc, #260]	@ (8029abc <__ieee754_pow+0x408>)
 80299b8:	f7d9 fab2 	bl	8002f20 <__aeabi_dsub>
 80299bc:	0032      	movs	r2, r6
 80299be:	0004      	movs	r4, r0
 80299c0:	000d      	movs	r5, r1
 80299c2:	003b      	movs	r3, r7
 80299c4:	0030      	movs	r0, r6
 80299c6:	0039      	movs	r1, r7
 80299c8:	f7d8 ffc4 	bl	8002954 <__aeabi_dmul>
 80299cc:	0002      	movs	r2, r0
 80299ce:	000b      	movs	r3, r1
 80299d0:	0020      	movs	r0, r4
 80299d2:	0029      	movs	r1, r5
 80299d4:	f7d8 ffbe 	bl	8002954 <__aeabi_dmul>
 80299d8:	4a39      	ldr	r2, [pc, #228]	@ (8029ac0 <__ieee754_pow+0x40c>)
 80299da:	4b32      	ldr	r3, [pc, #200]	@ (8029aa4 <__ieee754_pow+0x3f0>)
 80299dc:	f7d8 ffba 	bl	8002954 <__aeabi_dmul>
 80299e0:	0002      	movs	r2, r0
 80299e2:	000b      	movs	r3, r1
 80299e4:	9800      	ldr	r0, [sp, #0]
 80299e6:	9901      	ldr	r1, [sp, #4]
 80299e8:	f7d9 fa9a 	bl	8002f20 <__aeabi_dsub>
 80299ec:	0002      	movs	r2, r0
 80299ee:	000b      	movs	r3, r1
 80299f0:	0004      	movs	r4, r0
 80299f2:	000d      	movs	r5, r1
 80299f4:	9802      	ldr	r0, [sp, #8]
 80299f6:	9903      	ldr	r1, [sp, #12]
 80299f8:	f7d7 ffac 	bl	8001954 <__aeabi_dadd>
 80299fc:	9a02      	ldr	r2, [sp, #8]
 80299fe:	9b03      	ldr	r3, [sp, #12]
 8029a00:	2000      	movs	r0, #0
 8029a02:	9000      	str	r0, [sp, #0]
 8029a04:	9101      	str	r1, [sp, #4]
 8029a06:	f7d9 fa8b 	bl	8002f20 <__aeabi_dsub>
 8029a0a:	0002      	movs	r2, r0
 8029a0c:	000b      	movs	r3, r1
 8029a0e:	0020      	movs	r0, r4
 8029a10:	0029      	movs	r1, r5
 8029a12:	f7d9 fa85 	bl	8002f20 <__aeabi_dsub>
 8029a16:	9c04      	ldr	r4, [sp, #16]
 8029a18:	9d05      	ldr	r5, [sp, #20]
 8029a1a:	2400      	movs	r4, #0
 8029a1c:	0006      	movs	r6, r0
 8029a1e:	000f      	movs	r7, r1
 8029a20:	9804      	ldr	r0, [sp, #16]
 8029a22:	9905      	ldr	r1, [sp, #20]
 8029a24:	0022      	movs	r2, r4
 8029a26:	002b      	movs	r3, r5
 8029a28:	9402      	str	r4, [sp, #8]
 8029a2a:	9503      	str	r5, [sp, #12]
 8029a2c:	f7d9 fa78 	bl	8002f20 <__aeabi_dsub>
 8029a30:	9a00      	ldr	r2, [sp, #0]
 8029a32:	9b01      	ldr	r3, [sp, #4]
 8029a34:	f7d8 ff8e 	bl	8002954 <__aeabi_dmul>
 8029a38:	9a04      	ldr	r2, [sp, #16]
 8029a3a:	9b05      	ldr	r3, [sp, #20]
 8029a3c:	9008      	str	r0, [sp, #32]
 8029a3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029a40:	0030      	movs	r0, r6
 8029a42:	0039      	movs	r1, r7
 8029a44:	f7d8 ff86 	bl	8002954 <__aeabi_dmul>
 8029a48:	0002      	movs	r2, r0
 8029a4a:	000b      	movs	r3, r1
 8029a4c:	9808      	ldr	r0, [sp, #32]
 8029a4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029a50:	f7d7 ff80 	bl	8001954 <__aeabi_dadd>
 8029a54:	0022      	movs	r2, r4
 8029a56:	002b      	movs	r3, r5
 8029a58:	9004      	str	r0, [sp, #16]
 8029a5a:	9105      	str	r1, [sp, #20]
 8029a5c:	9800      	ldr	r0, [sp, #0]
 8029a5e:	9901      	ldr	r1, [sp, #4]
 8029a60:	f7d8 ff78 	bl	8002954 <__aeabi_dmul>
 8029a64:	000b      	movs	r3, r1
 8029a66:	0002      	movs	r2, r0
 8029a68:	9000      	str	r0, [sp, #0]
 8029a6a:	9101      	str	r1, [sp, #4]
 8029a6c:	9804      	ldr	r0, [sp, #16]
 8029a6e:	9905      	ldr	r1, [sp, #20]
 8029a70:	f7d7 ff70 	bl	8001954 <__aeabi_dadd>
 8029a74:	4b13      	ldr	r3, [pc, #76]	@ (8029ac4 <__ieee754_pow+0x410>)
 8029a76:	0006      	movs	r6, r0
 8029a78:	000f      	movs	r7, r1
 8029a7a:	9108      	str	r1, [sp, #32]
 8029a7c:	4299      	cmp	r1, r3
 8029a7e:	dc00      	bgt.n	8029a82 <__ieee754_pow+0x3ce>
 8029a80:	e1c0      	b.n	8029e04 <__ieee754_pow+0x750>
 8029a82:	4b11      	ldr	r3, [pc, #68]	@ (8029ac8 <__ieee754_pow+0x414>)
 8029a84:	18cb      	adds	r3, r1, r3
 8029a86:	4303      	orrs	r3, r0
 8029a88:	42a3      	cmp	r3, r4
 8029a8a:	d100      	bne.n	8029a8e <__ieee754_pow+0x3da>
 8029a8c:	e1a1      	b.n	8029dd2 <__ieee754_pow+0x71e>
 8029a8e:	9806      	ldr	r0, [sp, #24]
 8029a90:	9907      	ldr	r1, [sp, #28]
 8029a92:	2300      	movs	r3, #0
 8029a94:	2200      	movs	r2, #0
 8029a96:	f7d6 fd11 	bl	80004bc <__aeabi_dcmplt>
 8029a9a:	1e43      	subs	r3, r0, #1
 8029a9c:	4198      	sbcs	r0, r3
 8029a9e:	e723      	b.n	80298e8 <__ieee754_pow+0x234>
 8029aa0:	3ff00000 	.word	0x3ff00000
 8029aa4:	3ff71547 	.word	0x3ff71547
 8029aa8:	f85ddf44 	.word	0xf85ddf44
 8029aac:	3e54ae0b 	.word	0x3e54ae0b
 8029ab0:	3fd00000 	.word	0x3fd00000
 8029ab4:	55555555 	.word	0x55555555
 8029ab8:	3fd55555 	.word	0x3fd55555
 8029abc:	3fe00000 	.word	0x3fe00000
 8029ac0:	652b82fe 	.word	0x652b82fe
 8029ac4:	408fffff 	.word	0x408fffff
 8029ac8:	bf700000 	.word	0xbf700000
 8029acc:	4bdc      	ldr	r3, [pc, #880]	@ (8029e40 <__ieee754_pow+0x78c>)
 8029ace:	9903      	ldr	r1, [sp, #12]
 8029ad0:	2200      	movs	r2, #0
 8029ad2:	420b      	tst	r3, r1
 8029ad4:	d10b      	bne.n	8029aee <__ieee754_pow+0x43a>
 8029ad6:	9800      	ldr	r0, [sp, #0]
 8029ad8:	9901      	ldr	r1, [sp, #4]
 8029ada:	2200      	movs	r2, #0
 8029adc:	4bd9      	ldr	r3, [pc, #868]	@ (8029e44 <__ieee754_pow+0x790>)
 8029ade:	f7d8 ff39 	bl	8002954 <__aeabi_dmul>
 8029ae2:	2235      	movs	r2, #53	@ 0x35
 8029ae4:	9000      	str	r0, [sp, #0]
 8029ae6:	9101      	str	r1, [sp, #4]
 8029ae8:	9b01      	ldr	r3, [sp, #4]
 8029aea:	4252      	negs	r2, r2
 8029aec:	9308      	str	r3, [sp, #32]
 8029aee:	9b08      	ldr	r3, [sp, #32]
 8029af0:	49d5      	ldr	r1, [pc, #852]	@ (8029e48 <__ieee754_pow+0x794>)
 8029af2:	151b      	asrs	r3, r3, #20
 8029af4:	185b      	adds	r3, r3, r1
 8029af6:	189b      	adds	r3, r3, r2
 8029af8:	930e      	str	r3, [sp, #56]	@ 0x38
 8029afa:	9b08      	ldr	r3, [sp, #32]
 8029afc:	4dd3      	ldr	r5, [pc, #844]	@ (8029e4c <__ieee754_pow+0x798>)
 8029afe:	031b      	lsls	r3, r3, #12
 8029b00:	4ad3      	ldr	r2, [pc, #844]	@ (8029e50 <__ieee754_pow+0x79c>)
 8029b02:	0b1b      	lsrs	r3, r3, #12
 8029b04:	2600      	movs	r6, #0
 8029b06:	431d      	orrs	r5, r3
 8029b08:	4293      	cmp	r3, r2
 8029b0a:	dd09      	ble.n	8029b20 <__ieee754_pow+0x46c>
 8029b0c:	4ad1      	ldr	r2, [pc, #836]	@ (8029e54 <__ieee754_pow+0x7a0>)
 8029b0e:	3601      	adds	r6, #1
 8029b10:	4293      	cmp	r3, r2
 8029b12:	dd05      	ble.n	8029b20 <__ieee754_pow+0x46c>
 8029b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029b16:	199b      	adds	r3, r3, r6
 8029b18:	2600      	movs	r6, #0
 8029b1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8029b1c:	4bce      	ldr	r3, [pc, #824]	@ (8029e58 <__ieee754_pow+0x7a4>)
 8029b1e:	18ed      	adds	r5, r5, r3
 8029b20:	9800      	ldr	r0, [sp, #0]
 8029b22:	9901      	ldr	r1, [sp, #4]
 8029b24:	0029      	movs	r1, r5
 8029b26:	4bcd      	ldr	r3, [pc, #820]	@ (8029e5c <__ieee754_pow+0x7a8>)
 8029b28:	00f2      	lsls	r2, r6, #3
 8029b2a:	189b      	adds	r3, r3, r2
 8029b2c:	685c      	ldr	r4, [r3, #4]
 8029b2e:	681b      	ldr	r3, [r3, #0]
 8029b30:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029b32:	930a      	str	r3, [sp, #40]	@ 0x28
 8029b34:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029b36:	001a      	movs	r2, r3
 8029b38:	0023      	movs	r3, r4
 8029b3a:	900c      	str	r0, [sp, #48]	@ 0x30
 8029b3c:	910d      	str	r1, [sp, #52]	@ 0x34
 8029b3e:	f7d9 f9ef 	bl	8002f20 <__aeabi_dsub>
 8029b42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029b44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029b46:	9010      	str	r0, [sp, #64]	@ 0x40
 8029b48:	9111      	str	r1, [sp, #68]	@ 0x44
 8029b4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029b4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029b4e:	f7d7 ff01 	bl	8001954 <__aeabi_dadd>
 8029b52:	0002      	movs	r2, r0
 8029b54:	000b      	movs	r3, r1
 8029b56:	2000      	movs	r0, #0
 8029b58:	49bc      	ldr	r1, [pc, #752]	@ (8029e4c <__ieee754_pow+0x798>)
 8029b5a:	f7d8 fac1 	bl	80020e0 <__aeabi_ddiv>
 8029b5e:	0002      	movs	r2, r0
 8029b60:	000b      	movs	r3, r1
 8029b62:	9012      	str	r0, [sp, #72]	@ 0x48
 8029b64:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029b66:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029b68:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029b6a:	f7d8 fef3 	bl	8002954 <__aeabi_dmul>
 8029b6e:	9008      	str	r0, [sp, #32]
 8029b70:	9109      	str	r1, [sp, #36]	@ 0x24
 8029b72:	9b08      	ldr	r3, [sp, #32]
 8029b74:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029b76:	2180      	movs	r1, #128	@ 0x80
 8029b78:	9302      	str	r3, [sp, #8]
 8029b7a:	9403      	str	r4, [sp, #12]
 8029b7c:	2080      	movs	r0, #128	@ 0x80
 8029b7e:	2300      	movs	r3, #0
 8029b80:	2200      	movs	r2, #0
 8029b82:	106d      	asrs	r5, r5, #1
 8029b84:	0589      	lsls	r1, r1, #22
 8029b86:	9302      	str	r3, [sp, #8]
 8029b88:	4329      	orrs	r1, r5
 8029b8a:	0300      	lsls	r0, r0, #12
 8029b8c:	9b02      	ldr	r3, [sp, #8]
 8029b8e:	9c03      	ldr	r4, [sp, #12]
 8029b90:	1809      	adds	r1, r1, r0
 8029b92:	9300      	str	r3, [sp, #0]
 8029b94:	9401      	str	r4, [sp, #4]
 8029b96:	04b6      	lsls	r6, r6, #18
 8029b98:	198b      	adds	r3, r1, r6
 8029b9a:	9800      	ldr	r0, [sp, #0]
 8029b9c:	9901      	ldr	r1, [sp, #4]
 8029b9e:	0014      	movs	r4, r2
 8029ba0:	001d      	movs	r5, r3
 8029ba2:	f7d8 fed7 	bl	8002954 <__aeabi_dmul>
 8029ba6:	0002      	movs	r2, r0
 8029ba8:	000b      	movs	r3, r1
 8029baa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029bac:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029bae:	f7d9 f9b7 	bl	8002f20 <__aeabi_dsub>
 8029bb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029bb6:	0006      	movs	r6, r0
 8029bb8:	000f      	movs	r7, r1
 8029bba:	0020      	movs	r0, r4
 8029bbc:	0029      	movs	r1, r5
 8029bbe:	f7d9 f9af 	bl	8002f20 <__aeabi_dsub>
 8029bc2:	0002      	movs	r2, r0
 8029bc4:	000b      	movs	r3, r1
 8029bc6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029bc8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029bca:	f7d9 f9a9 	bl	8002f20 <__aeabi_dsub>
 8029bce:	9a00      	ldr	r2, [sp, #0]
 8029bd0:	9b01      	ldr	r3, [sp, #4]
 8029bd2:	f7d8 febf 	bl	8002954 <__aeabi_dmul>
 8029bd6:	0002      	movs	r2, r0
 8029bd8:	000b      	movs	r3, r1
 8029bda:	0030      	movs	r0, r6
 8029bdc:	0039      	movs	r1, r7
 8029bde:	f7d9 f99f 	bl	8002f20 <__aeabi_dsub>
 8029be2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029be6:	f7d8 feb5 	bl	8002954 <__aeabi_dmul>
 8029bea:	9a08      	ldr	r2, [sp, #32]
 8029bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029bee:	900a      	str	r0, [sp, #40]	@ 0x28
 8029bf0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029bf2:	0010      	movs	r0, r2
 8029bf4:	0019      	movs	r1, r3
 8029bf6:	f7d8 fead 	bl	8002954 <__aeabi_dmul>
 8029bfa:	0006      	movs	r6, r0
 8029bfc:	000f      	movs	r7, r1
 8029bfe:	4a98      	ldr	r2, [pc, #608]	@ (8029e60 <__ieee754_pow+0x7ac>)
 8029c00:	4b98      	ldr	r3, [pc, #608]	@ (8029e64 <__ieee754_pow+0x7b0>)
 8029c02:	f7d8 fea7 	bl	8002954 <__aeabi_dmul>
 8029c06:	4a98      	ldr	r2, [pc, #608]	@ (8029e68 <__ieee754_pow+0x7b4>)
 8029c08:	4b98      	ldr	r3, [pc, #608]	@ (8029e6c <__ieee754_pow+0x7b8>)
 8029c0a:	f7d7 fea3 	bl	8001954 <__aeabi_dadd>
 8029c0e:	0032      	movs	r2, r6
 8029c10:	003b      	movs	r3, r7
 8029c12:	f7d8 fe9f 	bl	8002954 <__aeabi_dmul>
 8029c16:	4a96      	ldr	r2, [pc, #600]	@ (8029e70 <__ieee754_pow+0x7bc>)
 8029c18:	4b96      	ldr	r3, [pc, #600]	@ (8029e74 <__ieee754_pow+0x7c0>)
 8029c1a:	f7d7 fe9b 	bl	8001954 <__aeabi_dadd>
 8029c1e:	0032      	movs	r2, r6
 8029c20:	003b      	movs	r3, r7
 8029c22:	f7d8 fe97 	bl	8002954 <__aeabi_dmul>
 8029c26:	4a94      	ldr	r2, [pc, #592]	@ (8029e78 <__ieee754_pow+0x7c4>)
 8029c28:	4b94      	ldr	r3, [pc, #592]	@ (8029e7c <__ieee754_pow+0x7c8>)
 8029c2a:	f7d7 fe93 	bl	8001954 <__aeabi_dadd>
 8029c2e:	0032      	movs	r2, r6
 8029c30:	003b      	movs	r3, r7
 8029c32:	f7d8 fe8f 	bl	8002954 <__aeabi_dmul>
 8029c36:	4a92      	ldr	r2, [pc, #584]	@ (8029e80 <__ieee754_pow+0x7cc>)
 8029c38:	4b92      	ldr	r3, [pc, #584]	@ (8029e84 <__ieee754_pow+0x7d0>)
 8029c3a:	f7d7 fe8b 	bl	8001954 <__aeabi_dadd>
 8029c3e:	0032      	movs	r2, r6
 8029c40:	003b      	movs	r3, r7
 8029c42:	f7d8 fe87 	bl	8002954 <__aeabi_dmul>
 8029c46:	4a90      	ldr	r2, [pc, #576]	@ (8029e88 <__ieee754_pow+0x7d4>)
 8029c48:	4b90      	ldr	r3, [pc, #576]	@ (8029e8c <__ieee754_pow+0x7d8>)
 8029c4a:	f7d7 fe83 	bl	8001954 <__aeabi_dadd>
 8029c4e:	0032      	movs	r2, r6
 8029c50:	0004      	movs	r4, r0
 8029c52:	000d      	movs	r5, r1
 8029c54:	003b      	movs	r3, r7
 8029c56:	0030      	movs	r0, r6
 8029c58:	0039      	movs	r1, r7
 8029c5a:	f7d8 fe7b 	bl	8002954 <__aeabi_dmul>
 8029c5e:	0002      	movs	r2, r0
 8029c60:	000b      	movs	r3, r1
 8029c62:	0020      	movs	r0, r4
 8029c64:	0029      	movs	r1, r5
 8029c66:	f7d8 fe75 	bl	8002954 <__aeabi_dmul>
 8029c6a:	9a00      	ldr	r2, [sp, #0]
 8029c6c:	9b01      	ldr	r3, [sp, #4]
 8029c6e:	0004      	movs	r4, r0
 8029c70:	000d      	movs	r5, r1
 8029c72:	9808      	ldr	r0, [sp, #32]
 8029c74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029c76:	f7d7 fe6d 	bl	8001954 <__aeabi_dadd>
 8029c7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029c7e:	f7d8 fe69 	bl	8002954 <__aeabi_dmul>
 8029c82:	0022      	movs	r2, r4
 8029c84:	002b      	movs	r3, r5
 8029c86:	f7d7 fe65 	bl	8001954 <__aeabi_dadd>
 8029c8a:	9a00      	ldr	r2, [sp, #0]
 8029c8c:	9b01      	ldr	r3, [sp, #4]
 8029c8e:	900c      	str	r0, [sp, #48]	@ 0x30
 8029c90:	910d      	str	r1, [sp, #52]	@ 0x34
 8029c92:	0010      	movs	r0, r2
 8029c94:	0019      	movs	r1, r3
 8029c96:	f7d8 fe5d 	bl	8002954 <__aeabi_dmul>
 8029c9a:	2200      	movs	r2, #0
 8029c9c:	4b7c      	ldr	r3, [pc, #496]	@ (8029e90 <__ieee754_pow+0x7dc>)
 8029c9e:	0004      	movs	r4, r0
 8029ca0:	000d      	movs	r5, r1
 8029ca2:	f7d7 fe57 	bl	8001954 <__aeabi_dadd>
 8029ca6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029ca8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029caa:	f7d7 fe53 	bl	8001954 <__aeabi_dadd>
 8029cae:	2000      	movs	r0, #0
 8029cb0:	000f      	movs	r7, r1
 8029cb2:	0006      	movs	r6, r0
 8029cb4:	0002      	movs	r2, r0
 8029cb6:	000b      	movs	r3, r1
 8029cb8:	9800      	ldr	r0, [sp, #0]
 8029cba:	9901      	ldr	r1, [sp, #4]
 8029cbc:	f7d8 fe4a 	bl	8002954 <__aeabi_dmul>
 8029cc0:	2200      	movs	r2, #0
 8029cc2:	9000      	str	r0, [sp, #0]
 8029cc4:	9101      	str	r1, [sp, #4]
 8029cc6:	4b72      	ldr	r3, [pc, #456]	@ (8029e90 <__ieee754_pow+0x7dc>)
 8029cc8:	0030      	movs	r0, r6
 8029cca:	0039      	movs	r1, r7
 8029ccc:	f7d9 f928 	bl	8002f20 <__aeabi_dsub>
 8029cd0:	0022      	movs	r2, r4
 8029cd2:	002b      	movs	r3, r5
 8029cd4:	f7d9 f924 	bl	8002f20 <__aeabi_dsub>
 8029cd8:	0002      	movs	r2, r0
 8029cda:	000b      	movs	r3, r1
 8029cdc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029cde:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029ce0:	f7d9 f91e 	bl	8002f20 <__aeabi_dsub>
 8029ce4:	9a08      	ldr	r2, [sp, #32]
 8029ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ce8:	f7d8 fe34 	bl	8002954 <__aeabi_dmul>
 8029cec:	0032      	movs	r2, r6
 8029cee:	0004      	movs	r4, r0
 8029cf0:	000d      	movs	r5, r1
 8029cf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029cf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029cf6:	003b      	movs	r3, r7
 8029cf8:	f7d8 fe2c 	bl	8002954 <__aeabi_dmul>
 8029cfc:	0002      	movs	r2, r0
 8029cfe:	000b      	movs	r3, r1
 8029d00:	0020      	movs	r0, r4
 8029d02:	0029      	movs	r1, r5
 8029d04:	f7d7 fe26 	bl	8001954 <__aeabi_dadd>
 8029d08:	0004      	movs	r4, r0
 8029d0a:	000d      	movs	r5, r1
 8029d0c:	0002      	movs	r2, r0
 8029d0e:	000b      	movs	r3, r1
 8029d10:	9800      	ldr	r0, [sp, #0]
 8029d12:	9901      	ldr	r1, [sp, #4]
 8029d14:	f7d7 fe1e 	bl	8001954 <__aeabi_dadd>
 8029d18:	22e0      	movs	r2, #224	@ 0xe0
 8029d1a:	2000      	movs	r0, #0
 8029d1c:	4b5d      	ldr	r3, [pc, #372]	@ (8029e94 <__ieee754_pow+0x7e0>)
 8029d1e:	0612      	lsls	r2, r2, #24
 8029d20:	0006      	movs	r6, r0
 8029d22:	000f      	movs	r7, r1
 8029d24:	f7d8 fe16 	bl	8002954 <__aeabi_dmul>
 8029d28:	9008      	str	r0, [sp, #32]
 8029d2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8029d2c:	9a00      	ldr	r2, [sp, #0]
 8029d2e:	9b01      	ldr	r3, [sp, #4]
 8029d30:	0030      	movs	r0, r6
 8029d32:	0039      	movs	r1, r7
 8029d34:	f7d9 f8f4 	bl	8002f20 <__aeabi_dsub>
 8029d38:	0002      	movs	r2, r0
 8029d3a:	000b      	movs	r3, r1
 8029d3c:	0020      	movs	r0, r4
 8029d3e:	0029      	movs	r1, r5
 8029d40:	f7d9 f8ee 	bl	8002f20 <__aeabi_dsub>
 8029d44:	4a54      	ldr	r2, [pc, #336]	@ (8029e98 <__ieee754_pow+0x7e4>)
 8029d46:	4b53      	ldr	r3, [pc, #332]	@ (8029e94 <__ieee754_pow+0x7e0>)
 8029d48:	f7d8 fe04 	bl	8002954 <__aeabi_dmul>
 8029d4c:	4a53      	ldr	r2, [pc, #332]	@ (8029e9c <__ieee754_pow+0x7e8>)
 8029d4e:	0004      	movs	r4, r0
 8029d50:	000d      	movs	r5, r1
 8029d52:	0030      	movs	r0, r6
 8029d54:	0039      	movs	r1, r7
 8029d56:	4b52      	ldr	r3, [pc, #328]	@ (8029ea0 <__ieee754_pow+0x7ec>)
 8029d58:	f7d8 fdfc 	bl	8002954 <__aeabi_dmul>
 8029d5c:	0002      	movs	r2, r0
 8029d5e:	000b      	movs	r3, r1
 8029d60:	0020      	movs	r0, r4
 8029d62:	0029      	movs	r1, r5
 8029d64:	f7d7 fdf6 	bl	8001954 <__aeabi_dadd>
 8029d68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8029ea4 <__ieee754_pow+0x7f0>)
 8029d6c:	189b      	adds	r3, r3, r2
 8029d6e:	681a      	ldr	r2, [r3, #0]
 8029d70:	685b      	ldr	r3, [r3, #4]
 8029d72:	f7d7 fdef 	bl	8001954 <__aeabi_dadd>
 8029d76:	900a      	str	r0, [sp, #40]	@ 0x28
 8029d78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029d7a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029d7c:	f7d9 fd38 	bl	80037f0 <__aeabi_i2d>
 8029d80:	0004      	movs	r4, r0
 8029d82:	000d      	movs	r5, r1
 8029d84:	9808      	ldr	r0, [sp, #32]
 8029d86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029d88:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d8a:	4b47      	ldr	r3, [pc, #284]	@ (8029ea8 <__ieee754_pow+0x7f4>)
 8029d8c:	189b      	adds	r3, r3, r2
 8029d8e:	681e      	ldr	r6, [r3, #0]
 8029d90:	685f      	ldr	r7, [r3, #4]
 8029d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d96:	f7d7 fddd 	bl	8001954 <__aeabi_dadd>
 8029d9a:	0032      	movs	r2, r6
 8029d9c:	003b      	movs	r3, r7
 8029d9e:	f7d7 fdd9 	bl	8001954 <__aeabi_dadd>
 8029da2:	0022      	movs	r2, r4
 8029da4:	002b      	movs	r3, r5
 8029da6:	f7d7 fdd5 	bl	8001954 <__aeabi_dadd>
 8029daa:	2000      	movs	r0, #0
 8029dac:	0022      	movs	r2, r4
 8029dae:	002b      	movs	r3, r5
 8029db0:	9000      	str	r0, [sp, #0]
 8029db2:	9101      	str	r1, [sp, #4]
 8029db4:	f7d9 f8b4 	bl	8002f20 <__aeabi_dsub>
 8029db8:	0032      	movs	r2, r6
 8029dba:	003b      	movs	r3, r7
 8029dbc:	f7d9 f8b0 	bl	8002f20 <__aeabi_dsub>
 8029dc0:	9a08      	ldr	r2, [sp, #32]
 8029dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029dc4:	f7d9 f8ac 	bl	8002f20 <__aeabi_dsub>
 8029dc8:	0002      	movs	r2, r0
 8029dca:	000b      	movs	r3, r1
 8029dcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029dce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029dd0:	e61f      	b.n	8029a12 <__ieee754_pow+0x35e>
 8029dd2:	4a36      	ldr	r2, [pc, #216]	@ (8029eac <__ieee754_pow+0x7f8>)
 8029dd4:	4b36      	ldr	r3, [pc, #216]	@ (8029eb0 <__ieee754_pow+0x7fc>)
 8029dd6:	9804      	ldr	r0, [sp, #16]
 8029dd8:	9905      	ldr	r1, [sp, #20]
 8029dda:	f7d7 fdbb 	bl	8001954 <__aeabi_dadd>
 8029dde:	9a00      	ldr	r2, [sp, #0]
 8029de0:	9b01      	ldr	r3, [sp, #4]
 8029de2:	0004      	movs	r4, r0
 8029de4:	000d      	movs	r5, r1
 8029de6:	0030      	movs	r0, r6
 8029de8:	0039      	movs	r1, r7
 8029dea:	f7d9 f899 	bl	8002f20 <__aeabi_dsub>
 8029dee:	0002      	movs	r2, r0
 8029df0:	000b      	movs	r3, r1
 8029df2:	0020      	movs	r0, r4
 8029df4:	0029      	movs	r1, r5
 8029df6:	f7d6 fb75 	bl	80004e4 <__aeabi_dcmpgt>
 8029dfa:	2800      	cmp	r0, #0
 8029dfc:	d000      	beq.n	8029e00 <__ieee754_pow+0x74c>
 8029dfe:	e646      	b.n	8029a8e <__ieee754_pow+0x3da>
 8029e00:	4b2c      	ldr	r3, [pc, #176]	@ (8029eb4 <__ieee754_pow+0x800>)
 8029e02:	e063      	b.n	8029ecc <__ieee754_pow+0x818>
 8029e04:	4a2c      	ldr	r2, [pc, #176]	@ (8029eb8 <__ieee754_pow+0x804>)
 8029e06:	004b      	lsls	r3, r1, #1
 8029e08:	085b      	lsrs	r3, r3, #1
 8029e0a:	4293      	cmp	r3, r2
 8029e0c:	d95a      	bls.n	8029ec4 <__ieee754_pow+0x810>
 8029e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8029ebc <__ieee754_pow+0x808>)
 8029e10:	18cb      	adds	r3, r1, r3
 8029e12:	4303      	orrs	r3, r0
 8029e14:	d008      	beq.n	8029e28 <__ieee754_pow+0x774>
 8029e16:	9806      	ldr	r0, [sp, #24]
 8029e18:	9907      	ldr	r1, [sp, #28]
 8029e1a:	2300      	movs	r3, #0
 8029e1c:	2200      	movs	r2, #0
 8029e1e:	f7d6 fb4d 	bl	80004bc <__aeabi_dcmplt>
 8029e22:	1e43      	subs	r3, r0, #1
 8029e24:	4198      	sbcs	r0, r3
 8029e26:	e567      	b.n	80298f8 <__ieee754_pow+0x244>
 8029e28:	9a00      	ldr	r2, [sp, #0]
 8029e2a:	9b01      	ldr	r3, [sp, #4]
 8029e2c:	f7d9 f878 	bl	8002f20 <__aeabi_dsub>
 8029e30:	9a04      	ldr	r2, [sp, #16]
 8029e32:	9b05      	ldr	r3, [sp, #20]
 8029e34:	f7d6 fb60 	bl	80004f8 <__aeabi_dcmpge>
 8029e38:	2800      	cmp	r0, #0
 8029e3a:	d1ec      	bne.n	8029e16 <__ieee754_pow+0x762>
 8029e3c:	4b20      	ldr	r3, [pc, #128]	@ (8029ec0 <__ieee754_pow+0x80c>)
 8029e3e:	e045      	b.n	8029ecc <__ieee754_pow+0x818>
 8029e40:	7ff00000 	.word	0x7ff00000
 8029e44:	43400000 	.word	0x43400000
 8029e48:	fffffc01 	.word	0xfffffc01
 8029e4c:	3ff00000 	.word	0x3ff00000
 8029e50:	0003988e 	.word	0x0003988e
 8029e54:	000bb679 	.word	0x000bb679
 8029e58:	fff00000 	.word	0xfff00000
 8029e5c:	0802eee0 	.word	0x0802eee0
 8029e60:	4a454eef 	.word	0x4a454eef
 8029e64:	3fca7e28 	.word	0x3fca7e28
 8029e68:	93c9db65 	.word	0x93c9db65
 8029e6c:	3fcd864a 	.word	0x3fcd864a
 8029e70:	a91d4101 	.word	0xa91d4101
 8029e74:	3fd17460 	.word	0x3fd17460
 8029e78:	518f264d 	.word	0x518f264d
 8029e7c:	3fd55555 	.word	0x3fd55555
 8029e80:	db6fabff 	.word	0xdb6fabff
 8029e84:	3fdb6db6 	.word	0x3fdb6db6
 8029e88:	33333303 	.word	0x33333303
 8029e8c:	3fe33333 	.word	0x3fe33333
 8029e90:	40080000 	.word	0x40080000
 8029e94:	3feec709 	.word	0x3feec709
 8029e98:	dc3a03fd 	.word	0xdc3a03fd
 8029e9c:	145b01f5 	.word	0x145b01f5
 8029ea0:	be3e2fe0 	.word	0xbe3e2fe0
 8029ea4:	0802eec0 	.word	0x0802eec0
 8029ea8:	0802eed0 	.word	0x0802eed0
 8029eac:	652b82fe 	.word	0x652b82fe
 8029eb0:	3c971547 	.word	0x3c971547
 8029eb4:	40900000 	.word	0x40900000
 8029eb8:	4090cbff 	.word	0x4090cbff
 8029ebc:	3f6f3400 	.word	0x3f6f3400
 8029ec0:	4090cc00 	.word	0x4090cc00
 8029ec4:	4a73      	ldr	r2, [pc, #460]	@ (802a094 <__ieee754_pow+0x9e0>)
 8029ec6:	9402      	str	r4, [sp, #8]
 8029ec8:	4293      	cmp	r3, r2
 8029eca:	d925      	bls.n	8029f18 <__ieee754_pow+0x864>
 8029ecc:	4a72      	ldr	r2, [pc, #456]	@ (802a098 <__ieee754_pow+0x9e4>)
 8029ece:	151b      	asrs	r3, r3, #20
 8029ed0:	189b      	adds	r3, r3, r2
 8029ed2:	2280      	movs	r2, #128	@ 0x80
 8029ed4:	0352      	lsls	r2, r2, #13
 8029ed6:	0011      	movs	r1, r2
 8029ed8:	4119      	asrs	r1, r3
 8029eda:	19cb      	adds	r3, r1, r7
 8029edc:	005c      	lsls	r4, r3, #1
 8029ede:	496f      	ldr	r1, [pc, #444]	@ (802a09c <__ieee754_pow+0x9e8>)
 8029ee0:	4d6f      	ldr	r5, [pc, #444]	@ (802a0a0 <__ieee754_pow+0x9ec>)
 8029ee2:	0d64      	lsrs	r4, r4, #21
 8029ee4:	1864      	adds	r4, r4, r1
 8029ee6:	4125      	asrs	r5, r4
 8029ee8:	401d      	ands	r5, r3
 8029eea:	031b      	lsls	r3, r3, #12
 8029eec:	0b1b      	lsrs	r3, r3, #12
 8029eee:	4313      	orrs	r3, r2
 8029ef0:	2214      	movs	r2, #20
 8029ef2:	1b12      	subs	r2, r2, r4
 8029ef4:	4113      	asrs	r3, r2
 8029ef6:	9302      	str	r3, [sp, #8]
 8029ef8:	9b08      	ldr	r3, [sp, #32]
 8029efa:	2000      	movs	r0, #0
 8029efc:	0029      	movs	r1, r5
 8029efe:	2b00      	cmp	r3, #0
 8029f00:	da02      	bge.n	8029f08 <__ieee754_pow+0x854>
 8029f02:	9b02      	ldr	r3, [sp, #8]
 8029f04:	425b      	negs	r3, r3
 8029f06:	9302      	str	r3, [sp, #8]
 8029f08:	0002      	movs	r2, r0
 8029f0a:	000b      	movs	r3, r1
 8029f0c:	9800      	ldr	r0, [sp, #0]
 8029f0e:	9901      	ldr	r1, [sp, #4]
 8029f10:	f7d9 f806 	bl	8002f20 <__aeabi_dsub>
 8029f14:	9000      	str	r0, [sp, #0]
 8029f16:	9101      	str	r1, [sp, #4]
 8029f18:	9a04      	ldr	r2, [sp, #16]
 8029f1a:	9b05      	ldr	r3, [sp, #20]
 8029f1c:	9800      	ldr	r0, [sp, #0]
 8029f1e:	9901      	ldr	r1, [sp, #4]
 8029f20:	f7d7 fd18 	bl	8001954 <__aeabi_dadd>
 8029f24:	2000      	movs	r0, #0
 8029f26:	2200      	movs	r2, #0
 8029f28:	4b5e      	ldr	r3, [pc, #376]	@ (802a0a4 <__ieee754_pow+0x9f0>)
 8029f2a:	0006      	movs	r6, r0
 8029f2c:	000f      	movs	r7, r1
 8029f2e:	f7d8 fd11 	bl	8002954 <__aeabi_dmul>
 8029f32:	9a00      	ldr	r2, [sp, #0]
 8029f34:	9b01      	ldr	r3, [sp, #4]
 8029f36:	9008      	str	r0, [sp, #32]
 8029f38:	9109      	str	r1, [sp, #36]	@ 0x24
 8029f3a:	0030      	movs	r0, r6
 8029f3c:	0039      	movs	r1, r7
 8029f3e:	f7d8 ffef 	bl	8002f20 <__aeabi_dsub>
 8029f42:	0002      	movs	r2, r0
 8029f44:	000b      	movs	r3, r1
 8029f46:	9804      	ldr	r0, [sp, #16]
 8029f48:	9905      	ldr	r1, [sp, #20]
 8029f4a:	f7d8 ffe9 	bl	8002f20 <__aeabi_dsub>
 8029f4e:	4a56      	ldr	r2, [pc, #344]	@ (802a0a8 <__ieee754_pow+0x9f4>)
 8029f50:	4b56      	ldr	r3, [pc, #344]	@ (802a0ac <__ieee754_pow+0x9f8>)
 8029f52:	f7d8 fcff 	bl	8002954 <__aeabi_dmul>
 8029f56:	4a56      	ldr	r2, [pc, #344]	@ (802a0b0 <__ieee754_pow+0x9fc>)
 8029f58:	0004      	movs	r4, r0
 8029f5a:	000d      	movs	r5, r1
 8029f5c:	0030      	movs	r0, r6
 8029f5e:	0039      	movs	r1, r7
 8029f60:	4b54      	ldr	r3, [pc, #336]	@ (802a0b4 <__ieee754_pow+0xa00>)
 8029f62:	f7d8 fcf7 	bl	8002954 <__aeabi_dmul>
 8029f66:	0002      	movs	r2, r0
 8029f68:	000b      	movs	r3, r1
 8029f6a:	0020      	movs	r0, r4
 8029f6c:	0029      	movs	r1, r5
 8029f6e:	f7d7 fcf1 	bl	8001954 <__aeabi_dadd>
 8029f72:	0004      	movs	r4, r0
 8029f74:	000d      	movs	r5, r1
 8029f76:	0002      	movs	r2, r0
 8029f78:	000b      	movs	r3, r1
 8029f7a:	9808      	ldr	r0, [sp, #32]
 8029f7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029f7e:	f7d7 fce9 	bl	8001954 <__aeabi_dadd>
 8029f82:	9a08      	ldr	r2, [sp, #32]
 8029f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f86:	0006      	movs	r6, r0
 8029f88:	000f      	movs	r7, r1
 8029f8a:	f7d8 ffc9 	bl	8002f20 <__aeabi_dsub>
 8029f8e:	0002      	movs	r2, r0
 8029f90:	000b      	movs	r3, r1
 8029f92:	0020      	movs	r0, r4
 8029f94:	0029      	movs	r1, r5
 8029f96:	f7d8 ffc3 	bl	8002f20 <__aeabi_dsub>
 8029f9a:	0032      	movs	r2, r6
 8029f9c:	9000      	str	r0, [sp, #0]
 8029f9e:	9101      	str	r1, [sp, #4]
 8029fa0:	003b      	movs	r3, r7
 8029fa2:	0030      	movs	r0, r6
 8029fa4:	0039      	movs	r1, r7
 8029fa6:	f7d8 fcd5 	bl	8002954 <__aeabi_dmul>
 8029faa:	0004      	movs	r4, r0
 8029fac:	000d      	movs	r5, r1
 8029fae:	4a42      	ldr	r2, [pc, #264]	@ (802a0b8 <__ieee754_pow+0xa04>)
 8029fb0:	4b42      	ldr	r3, [pc, #264]	@ (802a0bc <__ieee754_pow+0xa08>)
 8029fb2:	f7d8 fccf 	bl	8002954 <__aeabi_dmul>
 8029fb6:	4a42      	ldr	r2, [pc, #264]	@ (802a0c0 <__ieee754_pow+0xa0c>)
 8029fb8:	4b42      	ldr	r3, [pc, #264]	@ (802a0c4 <__ieee754_pow+0xa10>)
 8029fba:	f7d8 ffb1 	bl	8002f20 <__aeabi_dsub>
 8029fbe:	0022      	movs	r2, r4
 8029fc0:	002b      	movs	r3, r5
 8029fc2:	f7d8 fcc7 	bl	8002954 <__aeabi_dmul>
 8029fc6:	4a40      	ldr	r2, [pc, #256]	@ (802a0c8 <__ieee754_pow+0xa14>)
 8029fc8:	4b40      	ldr	r3, [pc, #256]	@ (802a0cc <__ieee754_pow+0xa18>)
 8029fca:	f7d7 fcc3 	bl	8001954 <__aeabi_dadd>
 8029fce:	0022      	movs	r2, r4
 8029fd0:	002b      	movs	r3, r5
 8029fd2:	f7d8 fcbf 	bl	8002954 <__aeabi_dmul>
 8029fd6:	4a3e      	ldr	r2, [pc, #248]	@ (802a0d0 <__ieee754_pow+0xa1c>)
 8029fd8:	4b3e      	ldr	r3, [pc, #248]	@ (802a0d4 <__ieee754_pow+0xa20>)
 8029fda:	f7d8 ffa1 	bl	8002f20 <__aeabi_dsub>
 8029fde:	0022      	movs	r2, r4
 8029fe0:	002b      	movs	r3, r5
 8029fe2:	f7d8 fcb7 	bl	8002954 <__aeabi_dmul>
 8029fe6:	4a3c      	ldr	r2, [pc, #240]	@ (802a0d8 <__ieee754_pow+0xa24>)
 8029fe8:	4b3c      	ldr	r3, [pc, #240]	@ (802a0dc <__ieee754_pow+0xa28>)
 8029fea:	f7d7 fcb3 	bl	8001954 <__aeabi_dadd>
 8029fee:	0022      	movs	r2, r4
 8029ff0:	002b      	movs	r3, r5
 8029ff2:	f7d8 fcaf 	bl	8002954 <__aeabi_dmul>
 8029ff6:	0002      	movs	r2, r0
 8029ff8:	000b      	movs	r3, r1
 8029ffa:	0030      	movs	r0, r6
 8029ffc:	0039      	movs	r1, r7
 8029ffe:	f7d8 ff8f 	bl	8002f20 <__aeabi_dsub>
 802a002:	0004      	movs	r4, r0
 802a004:	000d      	movs	r5, r1
 802a006:	0002      	movs	r2, r0
 802a008:	000b      	movs	r3, r1
 802a00a:	0030      	movs	r0, r6
 802a00c:	0039      	movs	r1, r7
 802a00e:	f7d8 fca1 	bl	8002954 <__aeabi_dmul>
 802a012:	2380      	movs	r3, #128	@ 0x80
 802a014:	9004      	str	r0, [sp, #16]
 802a016:	9105      	str	r1, [sp, #20]
 802a018:	2200      	movs	r2, #0
 802a01a:	0020      	movs	r0, r4
 802a01c:	0029      	movs	r1, r5
 802a01e:	05db      	lsls	r3, r3, #23
 802a020:	f7d8 ff7e 	bl	8002f20 <__aeabi_dsub>
 802a024:	0002      	movs	r2, r0
 802a026:	000b      	movs	r3, r1
 802a028:	9804      	ldr	r0, [sp, #16]
 802a02a:	9905      	ldr	r1, [sp, #20]
 802a02c:	f7d8 f858 	bl	80020e0 <__aeabi_ddiv>
 802a030:	9a00      	ldr	r2, [sp, #0]
 802a032:	9b01      	ldr	r3, [sp, #4]
 802a034:	0004      	movs	r4, r0
 802a036:	000d      	movs	r5, r1
 802a038:	0030      	movs	r0, r6
 802a03a:	0039      	movs	r1, r7
 802a03c:	f7d8 fc8a 	bl	8002954 <__aeabi_dmul>
 802a040:	9a00      	ldr	r2, [sp, #0]
 802a042:	9b01      	ldr	r3, [sp, #4]
 802a044:	f7d7 fc86 	bl	8001954 <__aeabi_dadd>
 802a048:	0002      	movs	r2, r0
 802a04a:	000b      	movs	r3, r1
 802a04c:	0020      	movs	r0, r4
 802a04e:	0029      	movs	r1, r5
 802a050:	f7d8 ff66 	bl	8002f20 <__aeabi_dsub>
 802a054:	0032      	movs	r2, r6
 802a056:	003b      	movs	r3, r7
 802a058:	f7d8 ff62 	bl	8002f20 <__aeabi_dsub>
 802a05c:	0002      	movs	r2, r0
 802a05e:	000b      	movs	r3, r1
 802a060:	2000      	movs	r0, #0
 802a062:	491f      	ldr	r1, [pc, #124]	@ (802a0e0 <__ieee754_pow+0xa2c>)
 802a064:	f7d8 ff5c 	bl	8002f20 <__aeabi_dsub>
 802a068:	9b02      	ldr	r3, [sp, #8]
 802a06a:	051b      	lsls	r3, r3, #20
 802a06c:	185b      	adds	r3, r3, r1
 802a06e:	151a      	asrs	r2, r3, #20
 802a070:	2a00      	cmp	r2, #0
 802a072:	dc06      	bgt.n	802a082 <__ieee754_pow+0x9ce>
 802a074:	9a02      	ldr	r2, [sp, #8]
 802a076:	f000 f929 	bl	802a2cc <scalbn>
 802a07a:	9a06      	ldr	r2, [sp, #24]
 802a07c:	9b07      	ldr	r3, [sp, #28]
 802a07e:	f7ff fb8b 	bl	8029798 <__ieee754_pow+0xe4>
 802a082:	0019      	movs	r1, r3
 802a084:	e7f9      	b.n	802a07a <__ieee754_pow+0x9c6>
 802a086:	2300      	movs	r3, #0
 802a088:	4c15      	ldr	r4, [pc, #84]	@ (802a0e0 <__ieee754_pow+0xa2c>)
 802a08a:	9300      	str	r3, [sp, #0]
 802a08c:	9401      	str	r4, [sp, #4]
 802a08e:	f7ff fbc8 	bl	8029822 <__ieee754_pow+0x16e>
 802a092:	46c0      	nop			@ (mov r8, r8)
 802a094:	3fe00000 	.word	0x3fe00000
 802a098:	fffffc02 	.word	0xfffffc02
 802a09c:	fffffc01 	.word	0xfffffc01
 802a0a0:	fff00000 	.word	0xfff00000
 802a0a4:	3fe62e43 	.word	0x3fe62e43
 802a0a8:	fefa39ef 	.word	0xfefa39ef
 802a0ac:	3fe62e42 	.word	0x3fe62e42
 802a0b0:	0ca86c39 	.word	0x0ca86c39
 802a0b4:	be205c61 	.word	0xbe205c61
 802a0b8:	72bea4d0 	.word	0x72bea4d0
 802a0bc:	3e663769 	.word	0x3e663769
 802a0c0:	c5d26bf1 	.word	0xc5d26bf1
 802a0c4:	3ebbbd41 	.word	0x3ebbbd41
 802a0c8:	af25de2c 	.word	0xaf25de2c
 802a0cc:	3f11566a 	.word	0x3f11566a
 802a0d0:	16bebd93 	.word	0x16bebd93
 802a0d4:	3f66c16c 	.word	0x3f66c16c
 802a0d8:	5555553e 	.word	0x5555553e
 802a0dc:	3fc55555 	.word	0x3fc55555
 802a0e0:	3ff00000 	.word	0x3ff00000

0802a0e4 <fabs>:
 802a0e4:	0049      	lsls	r1, r1, #1
 802a0e6:	084b      	lsrs	r3, r1, #1
 802a0e8:	0019      	movs	r1, r3
 802a0ea:	4770      	bx	lr

0802a0ec <__ieee754_expf>:
 802a0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a0ee:	21ff      	movs	r1, #255	@ 0xff
 802a0f0:	0043      	lsls	r3, r0, #1
 802a0f2:	1c04      	adds	r4, r0, #0
 802a0f4:	085b      	lsrs	r3, r3, #1
 802a0f6:	05c9      	lsls	r1, r1, #23
 802a0f8:	428b      	cmp	r3, r1
 802a0fa:	d904      	bls.n	802a106 <__ieee754_expf+0x1a>
 802a0fc:	1c01      	adds	r1, r0, #0
 802a0fe:	1c20      	adds	r0, r4, #0
 802a100:	f7d6 fbde 	bl	80008c0 <__aeabi_fadd>
 802a104:	e00d      	b.n	802a122 <__ieee754_expf+0x36>
 802a106:	0fc6      	lsrs	r6, r0, #31
 802a108:	428b      	cmp	r3, r1
 802a10a:	d104      	bne.n	802a116 <__ieee754_expf+0x2a>
 802a10c:	2e00      	cmp	r6, #0
 802a10e:	d000      	beq.n	802a112 <__ieee754_expf+0x26>
 802a110:	e0ba      	b.n	802a288 <__ieee754_expf+0x19c>
 802a112:	1c20      	adds	r0, r4, #0
 802a114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a116:	495d      	ldr	r1, [pc, #372]	@ (802a28c <__ieee754_expf+0x1a0>)
 802a118:	4288      	cmp	r0, r1
 802a11a:	dd04      	ble.n	802a126 <__ieee754_expf+0x3a>
 802a11c:	2000      	movs	r0, #0
 802a11e:	f000 f98a 	bl	802a436 <__math_oflowf>
 802a122:	1c04      	adds	r4, r0, #0
 802a124:	e7f5      	b.n	802a112 <__ieee754_expf+0x26>
 802a126:	2800      	cmp	r0, #0
 802a128:	da06      	bge.n	802a138 <__ieee754_expf+0x4c>
 802a12a:	4a59      	ldr	r2, [pc, #356]	@ (802a290 <__ieee754_expf+0x1a4>)
 802a12c:	4293      	cmp	r3, r2
 802a12e:	d903      	bls.n	802a138 <__ieee754_expf+0x4c>
 802a130:	2000      	movs	r0, #0
 802a132:	f000 f97a 	bl	802a42a <__math_uflowf>
 802a136:	e7f4      	b.n	802a122 <__ieee754_expf+0x36>
 802a138:	4a56      	ldr	r2, [pc, #344]	@ (802a294 <__ieee754_expf+0x1a8>)
 802a13a:	4293      	cmp	r3, r2
 802a13c:	d96e      	bls.n	802a21c <__ieee754_expf+0x130>
 802a13e:	4a56      	ldr	r2, [pc, #344]	@ (802a298 <__ieee754_expf+0x1ac>)
 802a140:	00b5      	lsls	r5, r6, #2
 802a142:	4293      	cmp	r3, r2
 802a144:	d84e      	bhi.n	802a1e4 <__ieee754_expf+0xf8>
 802a146:	4b55      	ldr	r3, [pc, #340]	@ (802a29c <__ieee754_expf+0x1b0>)
 802a148:	1c20      	adds	r0, r4, #0
 802a14a:	5959      	ldr	r1, [r3, r5]
 802a14c:	f7d7 f8d2 	bl	80012f4 <__aeabi_fsub>
 802a150:	4b53      	ldr	r3, [pc, #332]	@ (802a2a0 <__ieee754_expf+0x1b4>)
 802a152:	1c07      	adds	r7, r0, #0
 802a154:	595b      	ldr	r3, [r3, r5]
 802a156:	2501      	movs	r5, #1
 802a158:	4075      	eors	r5, r6
 802a15a:	9300      	str	r3, [sp, #0]
 802a15c:	1bad      	subs	r5, r5, r6
 802a15e:	9900      	ldr	r1, [sp, #0]
 802a160:	1c38      	adds	r0, r7, #0
 802a162:	f7d7 f8c7 	bl	80012f4 <__aeabi_fsub>
 802a166:	1c04      	adds	r4, r0, #0
 802a168:	1c21      	adds	r1, r4, #0
 802a16a:	1c20      	adds	r0, r4, #0
 802a16c:	f7d6 ff68 	bl	8001040 <__aeabi_fmul>
 802a170:	494c      	ldr	r1, [pc, #304]	@ (802a2a4 <__ieee754_expf+0x1b8>)
 802a172:	1c06      	adds	r6, r0, #0
 802a174:	f7d6 ff64 	bl	8001040 <__aeabi_fmul>
 802a178:	494b      	ldr	r1, [pc, #300]	@ (802a2a8 <__ieee754_expf+0x1bc>)
 802a17a:	f7d7 f8bb 	bl	80012f4 <__aeabi_fsub>
 802a17e:	1c31      	adds	r1, r6, #0
 802a180:	f7d6 ff5e 	bl	8001040 <__aeabi_fmul>
 802a184:	4949      	ldr	r1, [pc, #292]	@ (802a2ac <__ieee754_expf+0x1c0>)
 802a186:	f7d6 fb9b 	bl	80008c0 <__aeabi_fadd>
 802a18a:	1c31      	adds	r1, r6, #0
 802a18c:	f7d6 ff58 	bl	8001040 <__aeabi_fmul>
 802a190:	4947      	ldr	r1, [pc, #284]	@ (802a2b0 <__ieee754_expf+0x1c4>)
 802a192:	f7d7 f8af 	bl	80012f4 <__aeabi_fsub>
 802a196:	1c31      	adds	r1, r6, #0
 802a198:	f7d6 ff52 	bl	8001040 <__aeabi_fmul>
 802a19c:	4945      	ldr	r1, [pc, #276]	@ (802a2b4 <__ieee754_expf+0x1c8>)
 802a19e:	f7d6 fb8f 	bl	80008c0 <__aeabi_fadd>
 802a1a2:	1c31      	adds	r1, r6, #0
 802a1a4:	f7d6 ff4c 	bl	8001040 <__aeabi_fmul>
 802a1a8:	1c01      	adds	r1, r0, #0
 802a1aa:	1c20      	adds	r0, r4, #0
 802a1ac:	f7d7 f8a2 	bl	80012f4 <__aeabi_fsub>
 802a1b0:	1c01      	adds	r1, r0, #0
 802a1b2:	1c06      	adds	r6, r0, #0
 802a1b4:	1c20      	adds	r0, r4, #0
 802a1b6:	f7d6 ff43 	bl	8001040 <__aeabi_fmul>
 802a1ba:	9001      	str	r0, [sp, #4]
 802a1bc:	2d00      	cmp	r5, #0
 802a1be:	d140      	bne.n	802a242 <__ieee754_expf+0x156>
 802a1c0:	2180      	movs	r1, #128	@ 0x80
 802a1c2:	1c30      	adds	r0, r6, #0
 802a1c4:	05c9      	lsls	r1, r1, #23
 802a1c6:	f7d7 f895 	bl	80012f4 <__aeabi_fsub>
 802a1ca:	1c01      	adds	r1, r0, #0
 802a1cc:	9801      	ldr	r0, [sp, #4]
 802a1ce:	f7d6 fd69 	bl	8000ca4 <__aeabi_fdiv>
 802a1d2:	1c21      	adds	r1, r4, #0
 802a1d4:	f7d7 f88e 	bl	80012f4 <__aeabi_fsub>
 802a1d8:	1c01      	adds	r1, r0, #0
 802a1da:	20fe      	movs	r0, #254	@ 0xfe
 802a1dc:	0580      	lsls	r0, r0, #22
 802a1de:	f7d7 f889 	bl	80012f4 <__aeabi_fsub>
 802a1e2:	e79e      	b.n	802a122 <__ieee754_expf+0x36>
 802a1e4:	4934      	ldr	r1, [pc, #208]	@ (802a2b8 <__ieee754_expf+0x1cc>)
 802a1e6:	1c20      	adds	r0, r4, #0
 802a1e8:	f7d6 ff2a 	bl	8001040 <__aeabi_fmul>
 802a1ec:	4b33      	ldr	r3, [pc, #204]	@ (802a2bc <__ieee754_expf+0x1d0>)
 802a1ee:	5959      	ldr	r1, [r3, r5]
 802a1f0:	f7d6 fb66 	bl	80008c0 <__aeabi_fadd>
 802a1f4:	f7d7 faf8 	bl	80017e8 <__aeabi_f2iz>
 802a1f8:	0005      	movs	r5, r0
 802a1fa:	f7d7 fb15 	bl	8001828 <__aeabi_i2f>
 802a1fe:	4930      	ldr	r1, [pc, #192]	@ (802a2c0 <__ieee754_expf+0x1d4>)
 802a200:	1c06      	adds	r6, r0, #0
 802a202:	f7d6 ff1d 	bl	8001040 <__aeabi_fmul>
 802a206:	1c01      	adds	r1, r0, #0
 802a208:	1c20      	adds	r0, r4, #0
 802a20a:	f7d7 f873 	bl	80012f4 <__aeabi_fsub>
 802a20e:	492d      	ldr	r1, [pc, #180]	@ (802a2c4 <__ieee754_expf+0x1d8>)
 802a210:	1c07      	adds	r7, r0, #0
 802a212:	1c30      	adds	r0, r6, #0
 802a214:	f7d6 ff14 	bl	8001040 <__aeabi_fmul>
 802a218:	9000      	str	r0, [sp, #0]
 802a21a:	e7a0      	b.n	802a15e <__ieee754_expf+0x72>
 802a21c:	22d0      	movs	r2, #208	@ 0xd0
 802a21e:	0592      	lsls	r2, r2, #22
 802a220:	4293      	cmp	r3, r2
 802a222:	d20c      	bcs.n	802a23e <__ieee754_expf+0x152>
 802a224:	4928      	ldr	r1, [pc, #160]	@ (802a2c8 <__ieee754_expf+0x1dc>)
 802a226:	1c20      	adds	r0, r4, #0
 802a228:	f7d6 fb4a 	bl	80008c0 <__aeabi_fadd>
 802a22c:	21fe      	movs	r1, #254	@ 0xfe
 802a22e:	0589      	lsls	r1, r1, #22
 802a230:	f7d6 f992 	bl	8000558 <__aeabi_fcmpgt>
 802a234:	1e05      	subs	r5, r0, #0
 802a236:	d097      	beq.n	802a168 <__ieee754_expf+0x7c>
 802a238:	21fe      	movs	r1, #254	@ 0xfe
 802a23a:	0589      	lsls	r1, r1, #22
 802a23c:	e75f      	b.n	802a0fe <__ieee754_expf+0x12>
 802a23e:	2500      	movs	r5, #0
 802a240:	e792      	b.n	802a168 <__ieee754_expf+0x7c>
 802a242:	2080      	movs	r0, #128	@ 0x80
 802a244:	1c31      	adds	r1, r6, #0
 802a246:	05c0      	lsls	r0, r0, #23
 802a248:	f7d7 f854 	bl	80012f4 <__aeabi_fsub>
 802a24c:	1c01      	adds	r1, r0, #0
 802a24e:	9801      	ldr	r0, [sp, #4]
 802a250:	f7d6 fd28 	bl	8000ca4 <__aeabi_fdiv>
 802a254:	1c01      	adds	r1, r0, #0
 802a256:	9800      	ldr	r0, [sp, #0]
 802a258:	f7d7 f84c 	bl	80012f4 <__aeabi_fsub>
 802a25c:	1c39      	adds	r1, r7, #0
 802a25e:	f7d7 f849 	bl	80012f4 <__aeabi_fsub>
 802a262:	1c01      	adds	r1, r0, #0
 802a264:	20fe      	movs	r0, #254	@ 0xfe
 802a266:	0580      	lsls	r0, r0, #22
 802a268:	f7d7 f844 	bl	80012f4 <__aeabi_fsub>
 802a26c:	002b      	movs	r3, r5
 802a26e:	337d      	adds	r3, #125	@ 0x7d
 802a270:	db02      	blt.n	802a278 <__ieee754_expf+0x18c>
 802a272:	05ec      	lsls	r4, r5, #23
 802a274:	1824      	adds	r4, r4, r0
 802a276:	e74c      	b.n	802a112 <__ieee754_expf+0x26>
 802a278:	21d8      	movs	r1, #216	@ 0xd8
 802a27a:	3564      	adds	r5, #100	@ 0x64
 802a27c:	05ed      	lsls	r5, r5, #23
 802a27e:	1828      	adds	r0, r5, r0
 802a280:	0509      	lsls	r1, r1, #20
 802a282:	f7d6 fedd 	bl	8001040 <__aeabi_fmul>
 802a286:	e74c      	b.n	802a122 <__ieee754_expf+0x36>
 802a288:	2400      	movs	r4, #0
 802a28a:	e742      	b.n	802a112 <__ieee754_expf+0x26>
 802a28c:	42b17217 	.word	0x42b17217
 802a290:	42cff1b5 	.word	0x42cff1b5
 802a294:	3eb17218 	.word	0x3eb17218
 802a298:	3f851591 	.word	0x3f851591
 802a29c:	0802eef8 	.word	0x0802eef8
 802a2a0:	0802eef0 	.word	0x0802eef0
 802a2a4:	3331bb4c 	.word	0x3331bb4c
 802a2a8:	35ddea0e 	.word	0x35ddea0e
 802a2ac:	388ab355 	.word	0x388ab355
 802a2b0:	3b360b61 	.word	0x3b360b61
 802a2b4:	3e2aaaab 	.word	0x3e2aaaab
 802a2b8:	3fb8aa3b 	.word	0x3fb8aa3b
 802a2bc:	0802ef00 	.word	0x0802ef00
 802a2c0:	3f317180 	.word	0x3f317180
 802a2c4:	3717f7d1 	.word	0x3717f7d1
 802a2c8:	7149f2ca 	.word	0x7149f2ca

0802a2cc <scalbn>:
 802a2cc:	004b      	lsls	r3, r1, #1
 802a2ce:	b570      	push	{r4, r5, r6, lr}
 802a2d0:	0d5b      	lsrs	r3, r3, #21
 802a2d2:	0014      	movs	r4, r2
 802a2d4:	000d      	movs	r5, r1
 802a2d6:	2b00      	cmp	r3, #0
 802a2d8:	d10f      	bne.n	802a2fa <scalbn+0x2e>
 802a2da:	004b      	lsls	r3, r1, #1
 802a2dc:	085b      	lsrs	r3, r3, #1
 802a2de:	4303      	orrs	r3, r0
 802a2e0:	d012      	beq.n	802a308 <scalbn+0x3c>
 802a2e2:	4b23      	ldr	r3, [pc, #140]	@ (802a370 <scalbn+0xa4>)
 802a2e4:	2200      	movs	r2, #0
 802a2e6:	f7d8 fb35 	bl	8002954 <__aeabi_dmul>
 802a2ea:	4b22      	ldr	r3, [pc, #136]	@ (802a374 <scalbn+0xa8>)
 802a2ec:	429c      	cmp	r4, r3
 802a2ee:	da0c      	bge.n	802a30a <scalbn+0x3e>
 802a2f0:	4a21      	ldr	r2, [pc, #132]	@ (802a378 <scalbn+0xac>)
 802a2f2:	4b22      	ldr	r3, [pc, #136]	@ (802a37c <scalbn+0xb0>)
 802a2f4:	f7d8 fb2e 	bl	8002954 <__aeabi_dmul>
 802a2f8:	e006      	b.n	802a308 <scalbn+0x3c>
 802a2fa:	4a21      	ldr	r2, [pc, #132]	@ (802a380 <scalbn+0xb4>)
 802a2fc:	4293      	cmp	r3, r2
 802a2fe:	d108      	bne.n	802a312 <scalbn+0x46>
 802a300:	0002      	movs	r2, r0
 802a302:	000b      	movs	r3, r1
 802a304:	f7d7 fb26 	bl	8001954 <__aeabi_dadd>
 802a308:	bd70      	pop	{r4, r5, r6, pc}
 802a30a:	000d      	movs	r5, r1
 802a30c:	004b      	lsls	r3, r1, #1
 802a30e:	0d5b      	lsrs	r3, r3, #21
 802a310:	3b36      	subs	r3, #54	@ 0x36
 802a312:	4a1c      	ldr	r2, [pc, #112]	@ (802a384 <scalbn+0xb8>)
 802a314:	4294      	cmp	r4, r2
 802a316:	dd0a      	ble.n	802a32e <scalbn+0x62>
 802a318:	4c1b      	ldr	r4, [pc, #108]	@ (802a388 <scalbn+0xbc>)
 802a31a:	4d1c      	ldr	r5, [pc, #112]	@ (802a38c <scalbn+0xc0>)
 802a31c:	2900      	cmp	r1, #0
 802a31e:	da01      	bge.n	802a324 <scalbn+0x58>
 802a320:	4c19      	ldr	r4, [pc, #100]	@ (802a388 <scalbn+0xbc>)
 802a322:	4d1b      	ldr	r5, [pc, #108]	@ (802a390 <scalbn+0xc4>)
 802a324:	4a18      	ldr	r2, [pc, #96]	@ (802a388 <scalbn+0xbc>)
 802a326:	4b19      	ldr	r3, [pc, #100]	@ (802a38c <scalbn+0xc0>)
 802a328:	0020      	movs	r0, r4
 802a32a:	0029      	movs	r1, r5
 802a32c:	e7e2      	b.n	802a2f4 <scalbn+0x28>
 802a32e:	18e2      	adds	r2, r4, r3
 802a330:	4b18      	ldr	r3, [pc, #96]	@ (802a394 <scalbn+0xc8>)
 802a332:	429a      	cmp	r2, r3
 802a334:	dcf0      	bgt.n	802a318 <scalbn+0x4c>
 802a336:	2a00      	cmp	r2, #0
 802a338:	dd05      	ble.n	802a346 <scalbn+0x7a>
 802a33a:	4b17      	ldr	r3, [pc, #92]	@ (802a398 <scalbn+0xcc>)
 802a33c:	0512      	lsls	r2, r2, #20
 802a33e:	402b      	ands	r3, r5
 802a340:	4313      	orrs	r3, r2
 802a342:	0019      	movs	r1, r3
 802a344:	e7e0      	b.n	802a308 <scalbn+0x3c>
 802a346:	0013      	movs	r3, r2
 802a348:	3335      	adds	r3, #53	@ 0x35
 802a34a:	da08      	bge.n	802a35e <scalbn+0x92>
 802a34c:	4c0a      	ldr	r4, [pc, #40]	@ (802a378 <scalbn+0xac>)
 802a34e:	4d0b      	ldr	r5, [pc, #44]	@ (802a37c <scalbn+0xb0>)
 802a350:	2900      	cmp	r1, #0
 802a352:	da01      	bge.n	802a358 <scalbn+0x8c>
 802a354:	4c08      	ldr	r4, [pc, #32]	@ (802a378 <scalbn+0xac>)
 802a356:	4d11      	ldr	r5, [pc, #68]	@ (802a39c <scalbn+0xd0>)
 802a358:	4a07      	ldr	r2, [pc, #28]	@ (802a378 <scalbn+0xac>)
 802a35a:	4b08      	ldr	r3, [pc, #32]	@ (802a37c <scalbn+0xb0>)
 802a35c:	e7e4      	b.n	802a328 <scalbn+0x5c>
 802a35e:	4b0e      	ldr	r3, [pc, #56]	@ (802a398 <scalbn+0xcc>)
 802a360:	3236      	adds	r2, #54	@ 0x36
 802a362:	401d      	ands	r5, r3
 802a364:	0512      	lsls	r2, r2, #20
 802a366:	432a      	orrs	r2, r5
 802a368:	0011      	movs	r1, r2
 802a36a:	4b0d      	ldr	r3, [pc, #52]	@ (802a3a0 <scalbn+0xd4>)
 802a36c:	2200      	movs	r2, #0
 802a36e:	e7c1      	b.n	802a2f4 <scalbn+0x28>
 802a370:	43500000 	.word	0x43500000
 802a374:	ffff3cb0 	.word	0xffff3cb0
 802a378:	c2f8f359 	.word	0xc2f8f359
 802a37c:	01a56e1f 	.word	0x01a56e1f
 802a380:	000007ff 	.word	0x000007ff
 802a384:	0000c350 	.word	0x0000c350
 802a388:	8800759c 	.word	0x8800759c
 802a38c:	7e37e43c 	.word	0x7e37e43c
 802a390:	fe37e43c 	.word	0xfe37e43c
 802a394:	000007fe 	.word	0x000007fe
 802a398:	800fffff 	.word	0x800fffff
 802a39c:	81a56e1f 	.word	0x81a56e1f
 802a3a0:	3c900000 	.word	0x3c900000

0802a3a4 <with_errno>:
 802a3a4:	b570      	push	{r4, r5, r6, lr}
 802a3a6:	000d      	movs	r5, r1
 802a3a8:	0016      	movs	r6, r2
 802a3aa:	0004      	movs	r4, r0
 802a3ac:	f7fc f952 	bl	8026654 <__errno>
 802a3b0:	0029      	movs	r1, r5
 802a3b2:	6006      	str	r6, [r0, #0]
 802a3b4:	0020      	movs	r0, r4
 802a3b6:	bd70      	pop	{r4, r5, r6, pc}

0802a3b8 <xflow>:
 802a3b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a3ba:	0014      	movs	r4, r2
 802a3bc:	001d      	movs	r5, r3
 802a3be:	2800      	cmp	r0, #0
 802a3c0:	d002      	beq.n	802a3c8 <xflow+0x10>
 802a3c2:	2180      	movs	r1, #128	@ 0x80
 802a3c4:	0609      	lsls	r1, r1, #24
 802a3c6:	185b      	adds	r3, r3, r1
 802a3c8:	9200      	str	r2, [sp, #0]
 802a3ca:	9301      	str	r3, [sp, #4]
 802a3cc:	9a00      	ldr	r2, [sp, #0]
 802a3ce:	9b01      	ldr	r3, [sp, #4]
 802a3d0:	0020      	movs	r0, r4
 802a3d2:	0029      	movs	r1, r5
 802a3d4:	f7d8 fabe 	bl	8002954 <__aeabi_dmul>
 802a3d8:	2222      	movs	r2, #34	@ 0x22
 802a3da:	f7ff ffe3 	bl	802a3a4 <with_errno>
 802a3de:	b003      	add	sp, #12
 802a3e0:	bd30      	pop	{r4, r5, pc}

0802a3e2 <__math_uflow>:
 802a3e2:	2380      	movs	r3, #128	@ 0x80
 802a3e4:	b510      	push	{r4, lr}
 802a3e6:	2200      	movs	r2, #0
 802a3e8:	055b      	lsls	r3, r3, #21
 802a3ea:	f7ff ffe5 	bl	802a3b8 <xflow>
 802a3ee:	bd10      	pop	{r4, pc}

0802a3f0 <__math_oflow>:
 802a3f0:	23e0      	movs	r3, #224	@ 0xe0
 802a3f2:	b510      	push	{r4, lr}
 802a3f4:	2200      	movs	r2, #0
 802a3f6:	05db      	lsls	r3, r3, #23
 802a3f8:	f7ff ffde 	bl	802a3b8 <xflow>
 802a3fc:	bd10      	pop	{r4, pc}

0802a3fe <with_errnof>:
 802a3fe:	b570      	push	{r4, r5, r6, lr}
 802a400:	000d      	movs	r5, r1
 802a402:	1c04      	adds	r4, r0, #0
 802a404:	f7fc f926 	bl	8026654 <__errno>
 802a408:	6005      	str	r5, [r0, #0]
 802a40a:	1c20      	adds	r0, r4, #0
 802a40c:	bd70      	pop	{r4, r5, r6, pc}

0802a40e <xflowf>:
 802a40e:	b510      	push	{r4, lr}
 802a410:	1c0b      	adds	r3, r1, #0
 802a412:	2800      	cmp	r0, #0
 802a414:	d002      	beq.n	802a41c <xflowf+0xe>
 802a416:	2380      	movs	r3, #128	@ 0x80
 802a418:	061b      	lsls	r3, r3, #24
 802a41a:	18cb      	adds	r3, r1, r3
 802a41c:	1c18      	adds	r0, r3, #0
 802a41e:	f7d6 fe0f 	bl	8001040 <__aeabi_fmul>
 802a422:	2122      	movs	r1, #34	@ 0x22
 802a424:	f7ff ffeb 	bl	802a3fe <with_errnof>
 802a428:	bd10      	pop	{r4, pc}

0802a42a <__math_uflowf>:
 802a42a:	2180      	movs	r1, #128	@ 0x80
 802a42c:	b510      	push	{r4, lr}
 802a42e:	0549      	lsls	r1, r1, #21
 802a430:	f7ff ffed 	bl	802a40e <xflowf>
 802a434:	bd10      	pop	{r4, pc}

0802a436 <__math_oflowf>:
 802a436:	21e0      	movs	r1, #224	@ 0xe0
 802a438:	b510      	push	{r4, lr}
 802a43a:	05c9      	lsls	r1, r1, #23
 802a43c:	f7ff ffe7 	bl	802a40e <xflowf>
 802a440:	bd10      	pop	{r4, pc}
	...

0802a444 <__ieee754_sqrt>:
 802a444:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a446:	000a      	movs	r2, r1
 802a448:	000d      	movs	r5, r1
 802a44a:	496b      	ldr	r1, [pc, #428]	@ (802a5f8 <__ieee754_sqrt+0x1b4>)
 802a44c:	0004      	movs	r4, r0
 802a44e:	0003      	movs	r3, r0
 802a450:	0008      	movs	r0, r1
 802a452:	b087      	sub	sp, #28
 802a454:	4028      	ands	r0, r5
 802a456:	4288      	cmp	r0, r1
 802a458:	d111      	bne.n	802a47e <__ieee754_sqrt+0x3a>
 802a45a:	0022      	movs	r2, r4
 802a45c:	002b      	movs	r3, r5
 802a45e:	0020      	movs	r0, r4
 802a460:	0029      	movs	r1, r5
 802a462:	f7d8 fa77 	bl	8002954 <__aeabi_dmul>
 802a466:	0002      	movs	r2, r0
 802a468:	000b      	movs	r3, r1
 802a46a:	0020      	movs	r0, r4
 802a46c:	0029      	movs	r1, r5
 802a46e:	f7d7 fa71 	bl	8001954 <__aeabi_dadd>
 802a472:	0004      	movs	r4, r0
 802a474:	000d      	movs	r5, r1
 802a476:	0020      	movs	r0, r4
 802a478:	0029      	movs	r1, r5
 802a47a:	b007      	add	sp, #28
 802a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a47e:	2d00      	cmp	r5, #0
 802a480:	dc11      	bgt.n	802a4a6 <__ieee754_sqrt+0x62>
 802a482:	0069      	lsls	r1, r5, #1
 802a484:	0849      	lsrs	r1, r1, #1
 802a486:	4321      	orrs	r1, r4
 802a488:	d0f5      	beq.n	802a476 <__ieee754_sqrt+0x32>
 802a48a:	2000      	movs	r0, #0
 802a48c:	4285      	cmp	r5, r0
 802a48e:	d010      	beq.n	802a4b2 <__ieee754_sqrt+0x6e>
 802a490:	0022      	movs	r2, r4
 802a492:	002b      	movs	r3, r5
 802a494:	0020      	movs	r0, r4
 802a496:	0029      	movs	r1, r5
 802a498:	f7d8 fd42 	bl	8002f20 <__aeabi_dsub>
 802a49c:	0002      	movs	r2, r0
 802a49e:	000b      	movs	r3, r1
 802a4a0:	f7d7 fe1e 	bl	80020e0 <__aeabi_ddiv>
 802a4a4:	e7e5      	b.n	802a472 <__ieee754_sqrt+0x2e>
 802a4a6:	1528      	asrs	r0, r5, #20
 802a4a8:	d115      	bne.n	802a4d6 <__ieee754_sqrt+0x92>
 802a4aa:	2480      	movs	r4, #128	@ 0x80
 802a4ac:	2100      	movs	r1, #0
 802a4ae:	0364      	lsls	r4, r4, #13
 802a4b0:	e007      	b.n	802a4c2 <__ieee754_sqrt+0x7e>
 802a4b2:	0ada      	lsrs	r2, r3, #11
 802a4b4:	3815      	subs	r0, #21
 802a4b6:	055b      	lsls	r3, r3, #21
 802a4b8:	2a00      	cmp	r2, #0
 802a4ba:	d0fa      	beq.n	802a4b2 <__ieee754_sqrt+0x6e>
 802a4bc:	e7f5      	b.n	802a4aa <__ieee754_sqrt+0x66>
 802a4be:	0052      	lsls	r2, r2, #1
 802a4c0:	3101      	adds	r1, #1
 802a4c2:	4222      	tst	r2, r4
 802a4c4:	d0fb      	beq.n	802a4be <__ieee754_sqrt+0x7a>
 802a4c6:	1e4c      	subs	r4, r1, #1
 802a4c8:	1b00      	subs	r0, r0, r4
 802a4ca:	2420      	movs	r4, #32
 802a4cc:	001d      	movs	r5, r3
 802a4ce:	1a64      	subs	r4, r4, r1
 802a4d0:	40e5      	lsrs	r5, r4
 802a4d2:	408b      	lsls	r3, r1
 802a4d4:	432a      	orrs	r2, r5
 802a4d6:	4949      	ldr	r1, [pc, #292]	@ (802a5fc <__ieee754_sqrt+0x1b8>)
 802a4d8:	0312      	lsls	r2, r2, #12
 802a4da:	1844      	adds	r4, r0, r1
 802a4dc:	2180      	movs	r1, #128	@ 0x80
 802a4de:	0b12      	lsrs	r2, r2, #12
 802a4e0:	0349      	lsls	r1, r1, #13
 802a4e2:	4311      	orrs	r1, r2
 802a4e4:	07c0      	lsls	r0, r0, #31
 802a4e6:	d403      	bmi.n	802a4f0 <__ieee754_sqrt+0xac>
 802a4e8:	0fda      	lsrs	r2, r3, #31
 802a4ea:	0049      	lsls	r1, r1, #1
 802a4ec:	1851      	adds	r1, r2, r1
 802a4ee:	005b      	lsls	r3, r3, #1
 802a4f0:	2500      	movs	r5, #0
 802a4f2:	1062      	asrs	r2, r4, #1
 802a4f4:	0049      	lsls	r1, r1, #1
 802a4f6:	2480      	movs	r4, #128	@ 0x80
 802a4f8:	9205      	str	r2, [sp, #20]
 802a4fa:	0fda      	lsrs	r2, r3, #31
 802a4fc:	1852      	adds	r2, r2, r1
 802a4fe:	2016      	movs	r0, #22
 802a500:	0029      	movs	r1, r5
 802a502:	005b      	lsls	r3, r3, #1
 802a504:	03a4      	lsls	r4, r4, #14
 802a506:	190e      	adds	r6, r1, r4
 802a508:	4296      	cmp	r6, r2
 802a50a:	dc02      	bgt.n	802a512 <__ieee754_sqrt+0xce>
 802a50c:	1931      	adds	r1, r6, r4
 802a50e:	1b92      	subs	r2, r2, r6
 802a510:	192d      	adds	r5, r5, r4
 802a512:	0fde      	lsrs	r6, r3, #31
 802a514:	0052      	lsls	r2, r2, #1
 802a516:	3801      	subs	r0, #1
 802a518:	1992      	adds	r2, r2, r6
 802a51a:	005b      	lsls	r3, r3, #1
 802a51c:	0864      	lsrs	r4, r4, #1
 802a51e:	2800      	cmp	r0, #0
 802a520:	d1f1      	bne.n	802a506 <__ieee754_sqrt+0xc2>
 802a522:	2620      	movs	r6, #32
 802a524:	2780      	movs	r7, #128	@ 0x80
 802a526:	0004      	movs	r4, r0
 802a528:	9604      	str	r6, [sp, #16]
 802a52a:	063f      	lsls	r7, r7, #24
 802a52c:	183e      	adds	r6, r7, r0
 802a52e:	46b4      	mov	ip, r6
 802a530:	428a      	cmp	r2, r1
 802a532:	dc02      	bgt.n	802a53a <__ieee754_sqrt+0xf6>
 802a534:	d114      	bne.n	802a560 <__ieee754_sqrt+0x11c>
 802a536:	429e      	cmp	r6, r3
 802a538:	d812      	bhi.n	802a560 <__ieee754_sqrt+0x11c>
 802a53a:	4660      	mov	r0, ip
 802a53c:	4666      	mov	r6, ip
 802a53e:	19c0      	adds	r0, r0, r7
 802a540:	9100      	str	r1, [sp, #0]
 802a542:	2e00      	cmp	r6, #0
 802a544:	da03      	bge.n	802a54e <__ieee754_sqrt+0x10a>
 802a546:	43c6      	mvns	r6, r0
 802a548:	0ff6      	lsrs	r6, r6, #31
 802a54a:	198e      	adds	r6, r1, r6
 802a54c:	9600      	str	r6, [sp, #0]
 802a54e:	1a52      	subs	r2, r2, r1
 802a550:	4563      	cmp	r3, ip
 802a552:	4189      	sbcs	r1, r1
 802a554:	4249      	negs	r1, r1
 802a556:	1a52      	subs	r2, r2, r1
 802a558:	4661      	mov	r1, ip
 802a55a:	1a5b      	subs	r3, r3, r1
 802a55c:	9900      	ldr	r1, [sp, #0]
 802a55e:	19e4      	adds	r4, r4, r7
 802a560:	0fde      	lsrs	r6, r3, #31
 802a562:	0052      	lsls	r2, r2, #1
 802a564:	1992      	adds	r2, r2, r6
 802a566:	9e04      	ldr	r6, [sp, #16]
 802a568:	005b      	lsls	r3, r3, #1
 802a56a:	3e01      	subs	r6, #1
 802a56c:	087f      	lsrs	r7, r7, #1
 802a56e:	9604      	str	r6, [sp, #16]
 802a570:	2e00      	cmp	r6, #0
 802a572:	d1db      	bne.n	802a52c <__ieee754_sqrt+0xe8>
 802a574:	431a      	orrs	r2, r3
 802a576:	d01f      	beq.n	802a5b8 <__ieee754_sqrt+0x174>
 802a578:	4e21      	ldr	r6, [pc, #132]	@ (802a600 <__ieee754_sqrt+0x1bc>)
 802a57a:	4f22      	ldr	r7, [pc, #136]	@ (802a604 <__ieee754_sqrt+0x1c0>)
 802a57c:	6830      	ldr	r0, [r6, #0]
 802a57e:	6871      	ldr	r1, [r6, #4]
 802a580:	683a      	ldr	r2, [r7, #0]
 802a582:	687b      	ldr	r3, [r7, #4]
 802a584:	9200      	str	r2, [sp, #0]
 802a586:	9301      	str	r3, [sp, #4]
 802a588:	6832      	ldr	r2, [r6, #0]
 802a58a:	6873      	ldr	r3, [r6, #4]
 802a58c:	9202      	str	r2, [sp, #8]
 802a58e:	9303      	str	r3, [sp, #12]
 802a590:	9a00      	ldr	r2, [sp, #0]
 802a592:	9b01      	ldr	r3, [sp, #4]
 802a594:	f7d8 fcc4 	bl	8002f20 <__aeabi_dsub>
 802a598:	0002      	movs	r2, r0
 802a59a:	000b      	movs	r3, r1
 802a59c:	9802      	ldr	r0, [sp, #8]
 802a59e:	9903      	ldr	r1, [sp, #12]
 802a5a0:	f7d5 ff96 	bl	80004d0 <__aeabi_dcmple>
 802a5a4:	2800      	cmp	r0, #0
 802a5a6:	d007      	beq.n	802a5b8 <__ieee754_sqrt+0x174>
 802a5a8:	6830      	ldr	r0, [r6, #0]
 802a5aa:	6871      	ldr	r1, [r6, #4]
 802a5ac:	683a      	ldr	r2, [r7, #0]
 802a5ae:	687b      	ldr	r3, [r7, #4]
 802a5b0:	1c67      	adds	r7, r4, #1
 802a5b2:	d10c      	bne.n	802a5ce <__ieee754_sqrt+0x18a>
 802a5b4:	9c04      	ldr	r4, [sp, #16]
 802a5b6:	3501      	adds	r5, #1
 802a5b8:	4a13      	ldr	r2, [pc, #76]	@ (802a608 <__ieee754_sqrt+0x1c4>)
 802a5ba:	106b      	asrs	r3, r5, #1
 802a5bc:	189b      	adds	r3, r3, r2
 802a5be:	9a05      	ldr	r2, [sp, #20]
 802a5c0:	07ed      	lsls	r5, r5, #31
 802a5c2:	0864      	lsrs	r4, r4, #1
 802a5c4:	0512      	lsls	r2, r2, #20
 802a5c6:	4325      	orrs	r5, r4
 802a5c8:	0028      	movs	r0, r5
 802a5ca:	18d1      	adds	r1, r2, r3
 802a5cc:	e751      	b.n	802a472 <__ieee754_sqrt+0x2e>
 802a5ce:	f7d7 f9c1 	bl	8001954 <__aeabi_dadd>
 802a5d2:	6877      	ldr	r7, [r6, #4]
 802a5d4:	6836      	ldr	r6, [r6, #0]
 802a5d6:	0002      	movs	r2, r0
 802a5d8:	000b      	movs	r3, r1
 802a5da:	0030      	movs	r0, r6
 802a5dc:	0039      	movs	r1, r7
 802a5de:	f7d5 ff6d 	bl	80004bc <__aeabi_dcmplt>
 802a5e2:	2800      	cmp	r0, #0
 802a5e4:	d004      	beq.n	802a5f0 <__ieee754_sqrt+0x1ac>
 802a5e6:	3402      	adds	r4, #2
 802a5e8:	4263      	negs	r3, r4
 802a5ea:	4163      	adcs	r3, r4
 802a5ec:	18ed      	adds	r5, r5, r3
 802a5ee:	e7e3      	b.n	802a5b8 <__ieee754_sqrt+0x174>
 802a5f0:	2301      	movs	r3, #1
 802a5f2:	3401      	adds	r4, #1
 802a5f4:	439c      	bics	r4, r3
 802a5f6:	e7df      	b.n	802a5b8 <__ieee754_sqrt+0x174>
 802a5f8:	7ff00000 	.word	0x7ff00000
 802a5fc:	fffffc01 	.word	0xfffffc01
 802a600:	0802ef10 	.word	0x0802ef10
 802a604:	0802ef08 	.word	0x0802ef08
 802a608:	3fe00000 	.word	0x3fe00000

0802a60c <_init>:
 802a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a60e:	46c0      	nop			@ (mov r8, r8)
 802a610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a612:	bc08      	pop	{r3}
 802a614:	469e      	mov	lr, r3
 802a616:	4770      	bx	lr

0802a618 <_fini>:
 802a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a61a:	46c0      	nop			@ (mov r8, r8)
 802a61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a61e:	bc08      	pop	{r3}
 802a620:	469e      	mov	lr, r3
 802a622:	4770      	bx	lr
