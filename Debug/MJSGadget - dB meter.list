
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a7b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000049c0  0802a878  0802a878  0002b878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f238  0802f238  0003143c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f238  0802f238  00030238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f240  0802f240  0003143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f240  0802f240  00030240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f244  0802f244  00030244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802f248  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034dc  2000043c  0802f684  0003143c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003918  0802f684  00031918  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003143c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f03  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e91  00000000  00000000  00068367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd0  00000000  00000000  000721f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000222a  00000000  00000000  00074fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024659  00000000  00000000  000771f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046a23  00000000  00000000  0009b84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35d6  00000000  00000000  000e226e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00185844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc1c  00000000  00000000  001858f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00191514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00191581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00193afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a85c 	.word	0x0802a85c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a85c 	.word	0x0802a85c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802e018 	.word	0x0802e018
 8000ec8:	0802e058 	.word	0x0802e058
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802e094 	.word	0x0802e094
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 ff1c 	bl	8014994 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 fef3 	bl	80149a8 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 f92b 	bl	8013e94 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a878 	.word	0x0802a878
 8003c84:	0802a884 	.word	0x0802a884
 8003c88:	0802a888 	.word	0x0802a888
 8003c8c:	0802a894 	.word	0x0802a894
 8003c90:	0802a8b4 	.word	0x0802a8b4
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fe78 	bl	80149a8 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fe64 	bl	80149a8 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f8b7 	bl	8013e94 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fe3e 	bl	80149a8 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a8b8 	.word	0x0802a8b8
 8003d4c:	0802a884 	.word	0x0802a884
 8003d50:	0802a8bc 	.word	0x0802a8bc
 8003d54:	0802a8b4 	.word	0x0802a8b4

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fe20 	bl	80149a8 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fe14 	bl	80149a8 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f010 f859 	bl	8013e94 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fde0 	bl	80149a8 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a8e8 	.word	0x0802a8e8
 8003e08:	0802a8b4 	.word	0x0802a8b4

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fdad 	bl	80149a8 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f ffe6 	bl	8013e94 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f ffa7 	bl	8013e94 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a904 	.word	0x0802a904
 8003f5c:	0802a924 	.word	0x0802a924
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a928 	.word	0x0802a928
 8003f68:	0802a8b4 	.word	0x0802a8b4

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f ff80 	bl	8013e94 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a95c 	.word	0x0802a95c
 8003fa8:	0802a8b4 	.word	0x0802a8b4

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f ff60 	bl	8013e94 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fce3 	bl	80149a8 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fcd2 	bl	80149a8 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a970 	.word	0x0802a970
 8004098:	0802a8b4 	.word	0x0802a8b4
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f fee4 	bl	8013e94 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fc67 	bl	80149a8 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f025 f8d7 	bl	80292e8 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f025 f8b3 	bl	80292e8 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f025 f88f 	bl	80292e8 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f025 f86b 	bl	80292e8 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f025 f841 	bl	80292e8 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f025 f81d 	bl	80292e8 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 fff9 	bl	80292e8 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 ffd5 	bl	80292e8 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a98c 	.word	0x0802a98c
 800437c:	0802a8b4 	.word	0x0802a8b4
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc5      	ldr	r3, [pc, #788]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fcc0 	bl	8013de8 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc0      	ldr	r3, [pc, #768]	@ (8004778 <ENS_Upkeep+0x320>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e1fb      	b.n	8004874 <ENS_Upkeep+0x41c>
  }
  switch(ENSState) {
 800447c:	4bbe      	ldr	r3, [pc, #760]	@ (8004778 <ENS_Upkeep+0x320>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e1dd      	b.n	8004842 <ENS_Upkeep+0x3ea>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbc      	ldr	r3, [pc, #752]	@ (800477c <ENS_Upkeep+0x324>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abb      	ldr	r2, [pc, #748]	@ (8004780 <ENS_Upkeep+0x328>)
 8004492:	4bbc      	ldr	r3, [pc, #752]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fcfc 	bl	8013e94 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fa7a 	bl	8014994 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ab9      	ldr	r2, [pc, #740]	@ (8004788 <ENS_Upkeep+0x330>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004774 <ENS_Upkeep+0x31c>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bb8      	ldr	r3, [pc, #736]	@ (800478c <ENS_Upkeep+0x334>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004790 <ENS_Upkeep+0x338>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e1d0      	b.n	800485a <ENS_Upkeep+0x402>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4baf      	ldr	r3, [pc, #700]	@ (8004778 <ENS_Upkeep+0x320>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1cc      	b.n	800485a <ENS_Upkeep+0x402>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fd02 	bl	800dec8 <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1c9      	b.n	800485e <ENS_Upkeep+0x406>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fce8 	bl	800dea0 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bab      	ldr	r3, [pc, #684]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <ENS_Upkeep+0x340>)
 80044ea:	4aac      	ldr	r2, [pc, #688]	@ (800479c <ENS_Upkeep+0x344>)
 80044ec:	49a5      	ldr	r1, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fcd0 	bl	8013e94 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 fa57 	bl	80149a8 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fcd0 	bl	800dea0 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4b9d      	ldr	r3, [pc, #628]	@ (8004778 <ENS_Upkeep+0x320>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 fa45 	bl	8014994 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4b98      	ldr	r3, [pc, #608]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1ab      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fcd6 	bl	800dec8 <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e19f      	b.n	8004862 <ENS_Upkeep+0x40a>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fcbc 	bl	800dea0 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 fa38 	bl	80149a8 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fcb1 	bl	800dea0 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a8f      	ldr	r2, [pc, #572]	@ (80047a0 <ENS_Upkeep+0x348>)
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fc94 	bl	8013e94 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a8d      	ldr	r2, [pc, #564]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004570:	4b84      	ldr	r3, [pc, #528]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fc8d 	bl	8013e94 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a8a      	ldr	r2, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fc86 	bl	8013e94 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 f9fe 	bl	8014994 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b74      	ldr	r3, [pc, #464]	@ (8004774 <ENS_Upkeep+0x31c>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e164      	b.n	8004870 <ENS_Upkeep+0x418>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <ENS_Upkeep+0x320>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e160      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fc8b 	bl	800dec8 <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fc87 	bl	800dec8 <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fc81 	bl	800dec8 <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <ENS_Upkeep+0x354>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b6e      	ldr	r3, [pc, #440]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b6e      	ldr	r3, [pc, #440]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <ENS_Upkeep+0x364>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b6e      	ldr	r3, [pc, #440]	@ (80047c0 <ENS_Upkeep+0x368>)
 8004608:	4a6e      	ldr	r2, [pc, #440]	@ (80047c4 <ENS_Upkeep+0x36c>)
 800460a:	495e      	ldr	r1, [pc, #376]	@ (8004784 <ENS_Upkeep+0x32c>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fc41 	bl	8013e94 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 f9bf 	bl	8014994 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e125      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fc3b 	bl	800dea0 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 f9a9 	bl	8014994 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <ENS_Upkeep+0x31c>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 f9aa 	bl	80149a8 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fc23 	bl	800dea0 <setSensorLock>
      break;
 800465a:	e109      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 f9a0 	bl	80149a8 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 f99a 	bl	80149a8 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fc13 	bl	800dea0 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <ENS_Upkeep+0x320>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e0f6      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10f      	bne.n	80046aa <ENS_Upkeep+0x252>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <ENS_Upkeep+0x374>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <ENS_Upkeep+0x374>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b4d      	ldr	r3, [pc, #308]	@ (80047cc <ENS_Upkeep+0x374>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <ENS_Upkeep+0x378>)
 800469c:	494d      	ldr	r1, [pc, #308]	@ (80047d4 <ENS_Upkeep+0x37c>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fbf5 	bl	8013e94 <CreateLine>
//    Debug("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
//    Debug("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
//    Debug("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
//    Debug("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d103      	bne.n	80046ba <ENS_Upkeep+0x262>
 80046b2:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <ENS_Upkeep+0x26e>
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046c4:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <ENS_Upkeep+0x374>)
 80046c8:	7818      	ldrb	r0, [r3, #0]
 80046ca:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <ENS_Upkeep+0x374>)
 80046cc:	8859      	ldrh	r1, [r3, #2]
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <ENS_Upkeep+0x374>)
 80046d0:	889b      	ldrh	r3, [r3, #4]
 80046d2:	001a      	movs	r2, r3
 80046d4:	f000 fa24 	bl	8004b20 <setENS160>
    ENSState = ENS_LOW_POWER;
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <ENS_Upkeep+0x320>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
    break;
 80046de:	e0c7      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80046e0:	f010 f958 	bl	8014994 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	22fa      	movs	r2, #250	@ 0xfa
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	189a      	adds	r2, r3, r2
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <ENS_Upkeep+0x31c>)
 80046ee:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4053      	eors	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <ENS_Upkeep+0x312>
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <ENS_Upkeep+0x384>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	4053      	eors	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02e      	beq.n	800476a <ENS_Upkeep+0x312>
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <ENS_Upkeep+0x370>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d92a      	bls.n	800476a <ENS_Upkeep+0x312>
      if (getSensorLock() != FREE) {
 8004714:	f009 fbd8 	bl	800dec8 <getSensorLock>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d000      	beq.n	800471e <ENS_Upkeep+0x2c6>
 800471c:	e0a3      	b.n	8004866 <ENS_Upkeep+0x40e>
        break;
      }
      setSensorLock(ENS160);
 800471e:	2004      	movs	r0, #4
 8004720:	f009 fbbe 	bl	800dea0 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004724:	1cfc      	adds	r4, r7, #3
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff fb70 	bl	8003e0c <ENS160_setMode>
 800472c:	0003      	movs	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <ENS_Upkeep+0x2e4>
 8004738:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <ENS_Upkeep+0x33c>)
 800473a:	e000      	b.n	800473e <ENS_Upkeep+0x2e6>
 800473c:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <ENS_Upkeep+0x340>)
 800473e:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	0010      	movs	r0, r2
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	2003      	movs	r0, #3
 800474c:	f00f fba2 	bl	8013e94 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 8004750:	200a      	movs	r0, #10
 8004752:	f010 f929 	bl	80149a8 <HAL_Delay>
      setSensorLock(FREE);
 8004756:	2000      	movs	r0, #0
 8004758:	f009 fba2 	bl	800dea0 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 800475c:	f010 f91a 	bl	8014994 <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004764:	189a      	adds	r2, r3, r2
 8004766:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004768:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 800476a:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <ENS_Upkeep+0x320>)
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
    break;
 8004770:	e07e      	b.n	8004870 <ENS_Upkeep+0x418>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	2000045c 	.word	0x2000045c
 8004778:	20000000 	.word	0x20000000
 800477c:	0802e0d4 	.word	0x0802e0d4
 8004780:	0802a9ac 	.word	0x0802a9ac
 8004784:	0802a8b4 	.word	0x0802a8b4
 8004788:	000be6e0 	.word	0x000be6e0
 800478c:	20000e43 	.word	0x20000e43
 8004790:	20000461 	.word	0x20000461
 8004794:	0802a9e0 	.word	0x0802a9e0
 8004798:	0802a9e8 	.word	0x0802a9e8
 800479c:	0802a9f0 	.word	0x0802a9f0
 80047a0:	0802aa14 	.word	0x0802aa14
 80047a4:	0802aa2c 	.word	0x0802aa2c
 80047a8:	0802aa4c 	.word	0x0802aa4c
 80047ac:	0802aa64 	.word	0x0802aa64
 80047b0:	0802aa6c 	.word	0x0802aa6c
 80047b4:	0802aa74 	.word	0x0802aa74
 80047b8:	0802aa7c 	.word	0x0802aa7c
 80047bc:	0802aa84 	.word	0x0802aa84
 80047c0:	0802aa8c 	.word	0x0802aa8c
 80047c4:	0802aa94 	.word	0x0802aa94
 80047c8:	20000460 	.word	0x20000460
 80047cc:	20000490 	.word	0x20000490
 80047d0:	0802aabc 	.word	0x0802aabc
 80047d4:	0802a924 	.word	0x0802a924
 80047d8:	2000214d 	.word	0x2000214d
 80047dc:	2000214e 	.word	0x2000214e
 80047e0:	0802aae8 	.word	0x0802aae8
 80047e4:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80047e8:	f009 fb6e 	bl	800dec8 <getSensorLock>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d13c      	bne.n	800486a <ENS_Upkeep+0x412>
        break;
      }
      setSensorLock(ENS160);
 80047f0:	2004      	movs	r0, #4
 80047f2:	f009 fb55 	bl	800dea0 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80047f6:	1cba      	adds	r2, r7, #2
 80047f8:	2301      	movs	r3, #1
 80047fa:	2101      	movs	r1, #1
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7ff f96d 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004802:	1cbb      	adds	r3, r7, #2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d111      	bne.n	800482e <ENS_Upkeep+0x3d6>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800480a:	1dfc      	adds	r4, r7, #7
 800480c:	2002      	movs	r0, #2
 800480e:	f7ff fafd 	bl	8003e0c <ENS160_setMode>
 8004812:	0003      	movs	r3, r0
 8004814:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <ENS_Upkeep+0x3ca>
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <ENS_Upkeep+0x424>)
 8004820:	e000      	b.n	8004824 <ENS_Upkeep+0x3cc>
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <ENS_Upkeep+0x428>)
 8004824:	4a17      	ldr	r2, [pc, #92]	@ (8004884 <ENS_Upkeep+0x42c>)
 8004826:	4918      	ldr	r1, [pc, #96]	@ (8004888 <ENS_Upkeep+0x430>)
 8004828:	2003      	movs	r0, #3
 800482a:	f00f fb33 	bl	8013e94 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 800482e:	200a      	movs	r0, #10
 8004830:	f010 f8ba 	bl	80149a8 <HAL_Delay>
      setSensorLock(FREE);
 8004834:	2000      	movs	r0, #0
 8004836:	f009 fb33 	bl	800dea0 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <ENS_Upkeep+0x434>)
 800483c:	2203      	movs	r2, #3
 800483e:	701a      	strb	r2, [r3, #0]
    break;
 8004840:	e016      	b.n	8004870 <ENS_Upkeep+0x418>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <ENS_Upkeep+0x434>)
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 8004848:	f009 fb3e 	bl	800dec8 <getSensorLock>
 800484c:	0003      	movs	r3, r0
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00d      	beq.n	800486e <ENS_Upkeep+0x416>
      setSensorLock(FREE);
 8004852:	2000      	movs	r0, #0
 8004854:	f009 fb24 	bl	800dea0 <setSensorLock>
    }
    break;
 8004858:	e009      	b.n	800486e <ENS_Upkeep+0x416>
    break;
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	e008      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	e006      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	e004      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	e002      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	e000      	b.n	8004870 <ENS_Upkeep+0x418>
    break;
 800486e:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <ENS_Upkeep+0x434>)
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b003      	add	sp, #12
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0802a9e0 	.word	0x0802a9e0
 8004880:	0802a9e8 	.word	0x0802a9e8
 8004884:	0802ab20 	.word	0x0802ab20
 8004888:	0802a8b4 	.word	0x0802a8b4
 800488c:	20000000 	.word	0x20000000

08004890 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <forceNTPupdate+0x10>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000698 	.word	0x20000698

080048a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80048ac:	f010 f872 	bl	8014994 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <setESPTimeStamp+0x20>)
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	20000694 	.word	0x20000694

080048c8 <setCharges>:

void setCharges(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  solarCharge = ReadSolarVoltage() / 1000.0;
 80048cc:	f005 f9b4 	bl	8009c38 <ReadSolarVoltage>
 80048d0:	0003      	movs	r3, r0
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fe ff8c 	bl	80037f0 <__aeabi_i2d>
 80048d8:	2200      	movs	r2, #0
 80048da:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <setCharges+0x30>)
 80048dc:	f7fd fc00 	bl	80020e0 <__aeabi_ddiv>
 80048e0:	0002      	movs	r2, r0
 80048e2:	000b      	movs	r3, r1
 80048e4:	0010      	movs	r0, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	f7ff f81c 	bl	8003924 <__aeabi_d2f>
 80048ec:	1c02      	adds	r2, r0, #0
 80048ee:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <setCharges+0x34>)
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	408f4000 	.word	0x408f4000
 80048fc:	200005c0 	.word	0x200005c0

08004900 <getWifiCred>:

void getWifiCred(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 8004904:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <getWifiCred+0x58>)
 8004906:	4815      	ldr	r0, [pc, #84]	@ (800495c <getWifiCred+0x5c>)
 8004908:	2220      	movs	r2, #32
 800490a:	0019      	movs	r1, r3
 800490c:	f007 fc58 	bl	800c1c0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004910:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <getWifiCred+0x60>)
 8004912:	4814      	ldr	r0, [pc, #80]	@ (8004964 <getWifiCred+0x64>)
 8004914:	2240      	movs	r2, #64	@ 0x40
 8004916:	0019      	movs	r1, r3
 8004918:	f007 fc52 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <getWifiCred+0x58>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <getWifiCred+0x2e>
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <getWifiCred+0x58>)
 8004926:	2220      	movs	r2, #32
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 800492e:	4a0e      	ldr	r2, [pc, #56]	@ (8004968 <getWifiCred+0x68>)
 8004930:	4b0e      	ldr	r3, [pc, #56]	@ (800496c <getWifiCred+0x6c>)
 8004932:	0019      	movs	r1, r3
 8004934:	2001      	movs	r0, #1
 8004936:	f00f faad 	bl	8013e94 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 800493a:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <getWifiCred+0x58>)
 800493c:	4a0c      	ldr	r2, [pc, #48]	@ (8004970 <getWifiCred+0x70>)
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <getWifiCred+0x74>)
 8004940:	2002      	movs	r0, #2
 8004942:	f00f faa7 	bl	8013e94 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <getWifiCred+0x60>)
 8004948:	4a0b      	ldr	r2, [pc, #44]	@ (8004978 <getWifiCred+0x78>)
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <getWifiCred+0x74>)
 800494c:	2002      	movs	r0, #2
 800494e:	f00f faa1 	bl	8013e94 <CreateLine>
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	200006a0 	.word	0x200006a0
 800495c:	08080200 	.word	0x08080200
 8004960:	200006c0 	.word	0x200006c0
 8004964:	08080220 	.word	0x08080220
 8004968:	0802ab50 	.word	0x0802ab50
 800496c:	0802ab98 	.word	0x0802ab98
 8004970:	0802ab9c 	.word	0x0802ab9c
 8004974:	0802abac 	.word	0x0802abac
 8004978:	0802abb0 	.word	0x0802abb0

0800497c <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <checkName+0x5c>)
 8004984:	4815      	ldr	r0, [pc, #84]	@ (80049dc <checkName+0x60>)
 8004986:	2220      	movs	r2, #32
 8004988:	0019      	movs	r1, r3
 800498a:	f007 fc19 	bl	800c1c0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e00e      	b.n	80049b4 <checkName+0x38>
    configSum += nameConfig[i];
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <checkName+0x5c>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	001a      	movs	r2, r3
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <checkName+0x64>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	18d2      	adds	r2, r2, r3
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <checkName+0x64>)
 80049a8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	3201      	adds	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b0b      	cmp	r3, #11
 80049ba:	d9ec      	bls.n	8004996 <checkName+0x1a>
  }
  test = (configSum != 0);
 80049bc:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <checkName+0x64>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	4193      	sbcs	r3, r2
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <checkName+0x68>)
 80049c8:	701a      	strb	r2, [r3, #0]
  return test;
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <checkName+0x68>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	20000768 	.word	0x20000768
 80049dc:	08080090 	.word	0x08080090
 80049e0:	20000788 	.word	0x20000788
 80049e4:	2000078c 	.word	0x2000078c

080049e8 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08c      	sub	sp, #48	@ 0x30
 80049ec:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80049ee:	003b      	movs	r3, r7
 80049f0:	4814      	ldr	r0, [pc, #80]	@ (8004a44 <setModePowerMail+0x5c>)
 80049f2:	2230      	movs	r2, #48	@ 0x30
 80049f4:	0019      	movs	r1, r3
 80049f6:	f007 fbe3 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 80049fa:	003b      	movs	r3, r7
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a02:	4a11      	ldr	r2, [pc, #68]	@ (8004a48 <setModePowerMail+0x60>)
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <setModePowerMail+0x64>)
 8004a06:	0019      	movs	r1, r3
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f00f fa43 	bl	8013e94 <CreateLine>
 8004a0e:	e015      	b.n	8004a3c <setModePowerMail+0x54>
    return;
  }
//  Debug("Powermail is forced.");
  sendpwremail = DO_PWR_MAIL;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <setModePowerMail+0x68>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <setModePowerMail+0x6c>)
 8004a18:	2206      	movs	r2, #6
 8004a1a:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <setModePowerMail+0x70>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <setModePowerMail+0x74>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <setModePowerMail+0x78>)
 8004a28:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <setModePowerMail+0x74>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
  sendpwrmaildate = getDate();
 8004a30:	f005 fa0c 	bl	8009e4c <getDate>
 8004a34:	0003      	movs	r3, r0
 8004a36:	001a      	movs	r2, r3
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <setModePowerMail+0x7c>)
 8004a3a:	701a      	strb	r2, [r3, #0]
}
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00c      	add	sp, #48	@ 0x30
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	080802c0 	.word	0x080802c0
 8004a48:	0802abc4 	.word	0x0802abc4
 8004a4c:	0802ab98 	.word	0x0802ab98
 8004a50:	200010f9 	.word	0x200010f9
 8004a54:	20000702 	.word	0x20000702
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	20000694 	.word	0x20000694
 8004a60:	2000002c 	.word	0x2000002c
 8004a64:	20001110 	.word	0x20001110

08004a68 <pwrmailTodaySend>:

void pwrmailTodaySend() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  if (sendpwrmaildate != getDate()) {
 8004a6c:	f005 f9ee 	bl	8009e4c <getDate>
 8004a70:	0003      	movs	r3, r0
 8004a72:	001a      	movs	r2, r3
 8004a74:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <pwrmailTodaySend+0x20>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d002      	beq.n	8004a82 <pwrmailTodaySend+0x1a>
    sendpwremail = CLEAR;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <pwrmailTodaySend+0x24>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
  }
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20001110 	.word	0x20001110
 8004a8c:	200010f9 	.word	0x200010f9

08004a90 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <setHIDS+0x20>)
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <setHIDS+0x20>)
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	20000704 	.word	0x20000704

08004ab4 <setVOC>:

void setVOC(uint16_t voc) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	0002      	movs	r2, r0
 8004abc:	1dbb      	adds	r3, r7, #6
 8004abe:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <setVOC+0x20>)
 8004ac2:	1dba      	adds	r2, r7, #6
 8004ac4:	2148      	movs	r1, #72	@ 0x48
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	20000704 	.word	0x20000704

08004ad8 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <setAHT2x+0x20>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.AHT2x_temperature = airtemp;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <setAHT2x+0x20>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	20000704 	.word	0x20000704

08004afc <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <setBMP280+0x20>)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  MeasVal.BMP280_airpressure = airhpa;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <setBMP280+0x20>)
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20000704 	.word	0x20000704

08004b20 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	0004      	movs	r4, r0
 8004b28:	0008      	movs	r0, r1
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	1c22      	adds	r2, r4, #0
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	1c02      	adds	r2, r0, #0
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	1cbb      	adds	r3, r7, #2
 8004b3a:	1c0a      	adds	r2, r1, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <setENS160+0x74>)
 8004b40:	1dfa      	adds	r2, r7, #7
 8004b42:	2154      	movs	r1, #84	@ 0x54
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <setENS160+0x74>)
 8004b4a:	2255      	movs	r2, #85	@ 0x55
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	1dfa      	adds	r2, r7, #7
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d904      	bls.n	8004b60 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <setENS160+0x74>)
 8004b58:	1dfa      	adds	r2, r7, #7
 8004b5a:	2155      	movs	r1, #85	@ 0x55
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <setENS160+0x74>)
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	214a      	movs	r1, #74	@ 0x4a
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <setENS160+0x74>)
 8004b6c:	1cba      	adds	r2, r7, #2
 8004b6e:	2150      	movs	r1, #80	@ 0x50
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <setENS160+0x74>)
 8004b76:	2252      	movs	r2, #82	@ 0x52
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	1cba      	adds	r2, r7, #2
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d904      	bls.n	8004b8c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <setENS160+0x74>)
 8004b84:	1cba      	adds	r2, r7, #2
 8004b86:	2152      	movs	r1, #82	@ 0x52
 8004b88:	8812      	ldrh	r2, [r2, #0]
 8004b8a:	525a      	strh	r2, [r3, r1]
  }
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b003      	add	sp, #12
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	20000704 	.word	0x20000704

08004b98 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <setMic+0x28>)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <setMic+0x28>)
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <setMic+0x28>)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	20000704 	.word	0x20000704

08004bc4 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	0002      	movs	r2, r0
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fc fe27 	bl	8001828 <__aeabi_i2f>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	490d      	ldr	r1, [pc, #52]	@ (8004c14 <setPM1p0+0x50>)
 8004bde:	1c18      	adds	r0, r3, #0
 8004be0:	f7fc f860 	bl	8000ca4 <__aeabi_fdiv>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	1c1a      	adds	r2, r3, #0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <setPM1p0+0x54>)
 8004bea:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <setPM1p0+0x54>)
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <setPM1p0+0x54>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1c19      	adds	r1, r3, #0
 8004bf6:	1c10      	adds	r0, r2, #0
 8004bf8:	f7fb fcae 	bl	8000558 <__aeabi_fcmpgt>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d100      	bne.n	8004c02 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c00:	e003      	b.n	8004c0a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <setPM1p0+0x54>)
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <setPM1p0+0x54>)
 8004c08:	60da      	str	r2, [r3, #12]
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	41200000 	.word	0x41200000
 8004c18:	20000704 	.word	0x20000704

08004c1c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	0002      	movs	r2, r0
 8004c24:	1dbb      	adds	r3, r7, #6
 8004c26:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fc fdfb 	bl	8001828 <__aeabi_i2f>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	490d      	ldr	r1, [pc, #52]	@ (8004c6c <setPM2p5+0x50>)
 8004c36:	1c18      	adds	r0, r3, #0
 8004c38:	f7fc f834 	bl	8000ca4 <__aeabi_fdiv>
 8004c3c:	1c03      	adds	r3, r0, #0
 8004c3e:	1c1a      	adds	r2, r3, #0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <setPM2p5+0x54>)
 8004c42:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <setPM2p5+0x54>)
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <setPM2p5+0x54>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	1c19      	adds	r1, r3, #0
 8004c4e:	1c10      	adds	r0, r2, #0
 8004c50:	f7fb fc82 	bl	8000558 <__aeabi_fcmpgt>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d100      	bne.n	8004c5a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c58:	e003      	b.n	8004c62 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <setPM2p5+0x54>)
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <setPM2p5+0x54>)
 8004c60:	615a      	str	r2, [r3, #20]
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	41200000 	.word	0x41200000
 8004c70:	20000704 	.word	0x20000704

08004c74 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fc fdcf 	bl	8001828 <__aeabi_i2f>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	490d      	ldr	r1, [pc, #52]	@ (8004cc4 <setPM4p0+0x50>)
 8004c8e:	1c18      	adds	r0, r3, #0
 8004c90:	f7fc f808 	bl	8000ca4 <__aeabi_fdiv>
 8004c94:	1c03      	adds	r3, r0, #0
 8004c96:	1c1a      	adds	r2, r3, #0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9a:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <setPM4p0+0x54>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	1c19      	adds	r1, r3, #0
 8004ca6:	1c10      	adds	r0, r2, #0
 8004ca8:	f7fb fc56 	bl	8000558 <__aeabi_fcmpgt>
 8004cac:	1e03      	subs	r3, r0, #0
 8004cae:	d100      	bne.n	8004cb2 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004cb0:	e003      	b.n	8004cba <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb8:	61da      	str	r2, [r3, #28]
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	41200000 	.word	0x41200000
 8004cc8:	20000704 	.word	0x20000704

08004ccc <setPM10>:

void setPM10(uint16_t PM10) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	1dbb      	adds	r3, r7, #6
 8004cd6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7fc fda3 	bl	8001828 <__aeabi_i2f>
 8004ce2:	1c03      	adds	r3, r0, #0
 8004ce4:	490d      	ldr	r1, [pc, #52]	@ (8004d1c <setPM10+0x50>)
 8004ce6:	1c18      	adds	r0, r3, #0
 8004ce8:	f7fb ffdc 	bl	8000ca4 <__aeabi_fdiv>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	1c1a      	adds	r2, r3, #0
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <setPM10+0x54>)
 8004cf2:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <setPM10+0x54>)
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <setPM10+0x54>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	1c19      	adds	r1, r3, #0
 8004cfe:	1c10      	adds	r0, r2, #0
 8004d00:	f7fb fc2a 	bl	8000558 <__aeabi_fcmpgt>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d100      	bne.n	8004d0a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d08:	e003      	b.n	8004d12 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <setPM10+0x54>)
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <setPM10+0x54>)
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	41200000 	.word	0x41200000
 8004d20:	20000704 	.word	0x20000704

08004d24 <setNOx>:

void setNOx(uint16_t nox) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	801a      	strh	r2, [r3, #0]
  MeasVal.airNOx = nox;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <setNOx+0x38>)
 8004d32:	1dba      	adds	r2, r7, #6
 8004d34:	214c      	movs	r1, #76	@ 0x4c
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d3a:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <setNOx+0x38>)
 8004d3c:	224e      	movs	r2, #78	@ 0x4e
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	1dba      	adds	r2, r7, #6
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d904      	bls.n	8004d52 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <setNOx+0x38>)
 8004d4a:	1dba      	adds	r2, r7, #6
 8004d4c:	214e      	movs	r1, #78	@ 0x4e
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayNOx();
  }
#endif
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	20000704 	.word	0x20000704

08004d60 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d6a:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <SetSEN545temphum+0x34>)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ff99 	bl	8000ca4 <__aeabi_fdiv>
 8004d72:	1c03      	adds	r3, r0, #0
 8004d74:	1c1a      	adds	r2, r3, #0
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d7a:	4908      	ldr	r1, [pc, #32]	@ (8004d9c <SetSEN545temphum+0x3c>)
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f7fb ff91 	bl	8000ca4 <__aeabi_fdiv>
 8004d82:	1c03      	adds	r3, r0, #0
 8004d84:	1c1a      	adds	r2, r3, #0
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	43480000 	.word	0x43480000
 8004d98:	20000704 	.word	0x20000704
 8004d9c:	42c80000 	.word	0x42c80000

08004da0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004da4:	f009 fc4a 	bl	800e63c <sen5x_Get_sen5x_enable_state>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d00f      	beq.n	8004dcc <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc6:	224e      	movs	r2, #78	@ 0x4e
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.eCO2Indexmax = 0;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dce:	2252      	movs	r2, #82	@ 0x52
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dd6:	2255      	movs	r2, #85	@ 0x55
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000704 	.word	0x20000704

08004de8 <SetConfigMode>:

void SetConfigMode(){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <SetConfigMode+0x30>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4053      	eors	r3, r2
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004dfa:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <SetConfigMode+0x34>)
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <SetConfigMode+0x38>)
 8004dfe:	0019      	movs	r1, r3
 8004e00:	2003      	movs	r0, #3
 8004e02:	f00f f847 	bl	8013e94 <CreateLine>
  }
  ReconfigSet = true;
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SetConfigMode+0x30>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <SetConfigMode+0x3c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200005af 	.word	0x200005af
 8004e1c:	0802abdc 	.word	0x0802abdc
 8004e20:	0802abfc 	.word	0x0802abfc
 8004e24:	200010f7 	.word	0x200010f7

08004e28 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <GetReconfigMode+0x10>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	200005af 	.word	0x200005af

08004e3c <ESP_Init>:
  uid[1] = HAL_GetUIDw1();
  uid[2] = HAL_GetUIDw2();
}
#endif

void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <ESP_Init+0x1c>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <ESP_Init+0x20>)
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
#ifndef OPENSENSEMAP
  ESP_GetUID();
#endif
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200004a4 	.word	0x200004a4
 8004e5c:	20000030 	.word	0x20000030

08004e60 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	000a      	movs	r2, r1
 8004e6a:	1cbb      	adds	r3, r7, #2
 8004e6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <ESP_Send+0xac>)
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	250f      	movs	r5, #15
 8004e74:	197c      	adds	r4, r7, r5
 8004e76:	1cbb      	adds	r3, r7, #2
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	f018 fc2d 	bl	801d6dc <HAL_UART_Transmit_DMA>
 8004e82:	0003      	movs	r3, r0
 8004e84:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e8e:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <ESP_Send+0xb0>)
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <ESP_Send+0xb4>)
 8004e92:	0019      	movs	r1, r3
 8004e94:	2001      	movs	r0, #1
 8004e96:	f00e fffd 	bl	8013e94 <CreateLine>
    return false;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e032      	b.n	8004f04 <ESP_Send+0xa4>
  }
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	2b5a      	cmp	r3, #90	@ 0x5a
 8004ea4:	d927      	bls.n	8004ef6 <ESP_Send+0x96>
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <ESP_Send+0xb8>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d023      	beq.n	8004ef6 <ESP_Send+0x96>
 8004eae:	f004 ff17 	bl	8009ce0 <Check_USB_PowerOn>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d01f      	beq.n	8004ef6 <ESP_Send+0x96>
    char splitchar;
    splitchar = command[SPLIT_POS];
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	334c      	adds	r3, #76	@ 0x4c
 8004eba:	001a      	movs	r2, r3
 8004ebc:	240e      	movs	r4, #14
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	334c      	adds	r3, #76	@ 0x4c
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)command);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f003 fe0a 	bl	8008ae8 <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	193a      	adds	r2, r7, r4
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f003 fe00 	bl	8008ae8 <printf_USB>
    printf("ESP_Send: %s", command);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <ESP_Send+0xbc>)
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f021 fa7c 	bl	80263ec <iprintf>
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004ef4:	e005      	b.n	8004f02 <ESP_Send+0xa2>
  }
  else
    Debug("ESP_Send: %s", command);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a08      	ldr	r2, [pc, #32]	@ (8004f1c <ESP_Send+0xbc>)
 8004efa:	4909      	ldr	r1, [pc, #36]	@ (8004f20 <ESP_Send+0xc0>)
 8004efc:	2003      	movs	r0, #3
 8004efe:	f00e ffc9 	bl	8013e94 <CreateLine>
  return true;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0c:	200004a4 	.word	0x200004a4
 8004f10:	0802ac00 	.word	0x0802ac00
 8004f14:	0802ab98 	.word	0x0802ab98
 8004f18:	200010f7 	.word	0x200010f7
 8004f1c:	0802ac20 	.word	0x0802ac20
 8004f20:	0802abfc 	.word	0x0802abfc

08004f24 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b08b      	sub	sp, #44	@ 0x2c
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	1cbb      	adds	r3, r7, #2
 8004f30:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <ESP_Receive+0x11c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
#ifndef IGNORE_PARITY_ERRORS
  bool reset = false;
#endif
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f38:	4b42      	ldr	r3, [pc, #264]	@ (8005044 <ESP_Receive+0x120>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	2527      	movs	r5, #39	@ 0x27
 8004f3e:	197c      	adds	r4, r7, r5
 8004f40:	1cbb      	adds	r3, r7, #2
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0019      	movs	r1, r3
 8004f48:	f018 fc58 	bl	801d7fc <HAL_UART_Receive_DMA>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f50:	197b      	adds	r3, r7, r5
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d100      	bne.n	8004f5a <ESP_Receive+0x36>
 8004f58:	e06c      	b.n	8005034 <ESP_Receive+0x110>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005044 <ESP_Receive+0x120>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2284      	movs	r2, #132	@ 0x84
 8004f60:	589b      	ldr	r3, [r3, r2]
 8004f62:	4a39      	ldr	r2, [pc, #228]	@ (8005048 <ESP_Receive+0x124>)
 8004f64:	4939      	ldr	r1, [pc, #228]	@ (800504c <ESP_Receive+0x128>)
 8004f66:	2001      	movs	r0, #1
 8004f68:	f00e ff94 	bl	8013e94 <CreateLine>
#ifndef SMALLBUILD
    char uartespmod[] =" error in UART to ESP module";
 8004f6c:	2608      	movs	r6, #8
 8004f6e:	19bb      	adds	r3, r7, r6
 8004f70:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <ESP_Receive+0x12c>)
 8004f72:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f74:	c313      	stmia	r3!, {r0, r1, r4}
 8004f76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f78:	c313      	stmia	r3!, {r0, r1, r4}
 8004f7a:	6811      	ldr	r1, [r2, #0]
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	7912      	ldrb	r2, [r2, #4]
 8004f80:	711a      	strb	r2, [r3, #4]
    if (status & HAL_UART_ERROR_PE) {
 8004f82:	197b      	adds	r3, r7, r5
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2201      	movs	r2, #1
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d005      	beq.n	8004f98 <ESP_Receive+0x74>
      Error("Parity%s", uartespmod);
 8004f8c:	19bb      	adds	r3, r7, r6
 8004f8e:	4a31      	ldr	r2, [pc, #196]	@ (8005054 <ESP_Receive+0x130>)
 8004f90:	492e      	ldr	r1, [pc, #184]	@ (800504c <ESP_Receive+0x128>)
 8004f92:	2001      	movs	r0, #1
 8004f94:	f00e ff7e 	bl	8013e94 <CreateLine>
#ifndef IGNORE_PARITY_ERRORS
      reset = true;
#endif
    }
    if (status & HAL_UART_ERROR_NE) {
 8004f98:	2327      	movs	r3, #39	@ 0x27
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d006      	beq.n	8004fb2 <ESP_Receive+0x8e>
      Error("Noise%s", uartespmod);
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005058 <ESP_Receive+0x134>)
 8004faa:	4928      	ldr	r1, [pc, #160]	@ (800504c <ESP_Receive+0x128>)
 8004fac:	2001      	movs	r0, #1
 8004fae:	f00e ff71 	bl	8013e94 <CreateLine>
#ifndef IGNORE_PARITY_ERRORS
      reset = true;
#endif
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fb2:	2327      	movs	r3, #39	@ 0x27
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d006      	beq.n	8004fcc <ESP_Receive+0xa8>
      Error("Frame%s", uartespmod);
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	4a26      	ldr	r2, [pc, #152]	@ (800505c <ESP_Receive+0x138>)
 8004fc4:	4921      	ldr	r1, [pc, #132]	@ (800504c <ESP_Receive+0x128>)
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f00e ff64 	bl	8013e94 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004fcc:	2327      	movs	r3, #39	@ 0x27
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d006      	beq.n	8004fe6 <ESP_Receive+0xc2>
      Error("Overrun%s", uartespmod);
 8004fd8:	2308      	movs	r3, #8
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	4a20      	ldr	r2, [pc, #128]	@ (8005060 <ESP_Receive+0x13c>)
 8004fde:	491b      	ldr	r1, [pc, #108]	@ (800504c <ESP_Receive+0x128>)
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f00e ff57 	bl	8013e94 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004fe6:	2327      	movs	r3, #39	@ 0x27
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d006      	beq.n	8005000 <ESP_Receive+0xdc>
      Error("DMA transfer%s", uartespmod);
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <ESP_Receive+0x140>)
 8004ff8:	4914      	ldr	r1, [pc, #80]	@ (800504c <ESP_Receive+0x128>)
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f00e ff4a 	bl	8013e94 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005000:	2327      	movs	r3, #39	@ 0x27
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2220      	movs	r2, #32
 8005008:	4013      	ands	r3, r2
 800500a:	d006      	beq.n	800501a <ESP_Receive+0xf6>
      Error("Receiver Timeout%s", uartespmod);
 800500c:	2308      	movs	r3, #8
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <ESP_Receive+0x144>)
 8005012:	490e      	ldr	r1, [pc, #56]	@ (800504c <ESP_Receive+0x128>)
 8005014:	2001      	movs	r0, #1
 8005016:	f00e ff3d 	bl	8013e94 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 800501a:	2327      	movs	r3, #39	@ 0x27
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2240      	movs	r2, #64	@ 0x40
 8005022:	4013      	ands	r3, r2
 8005024:	d006      	beq.n	8005034 <ESP_Receive+0x110>
      Error("Invalid Callback%s", uartespmod);
 8005026:	2308      	movs	r3, #8
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	4a10      	ldr	r2, [pc, #64]	@ (800506c <ESP_Receive+0x148>)
 800502c:	4907      	ldr	r1, [pc, #28]	@ (800504c <ESP_Receive+0x128>)
 800502e:	2001      	movs	r0, #1
 8005030:	f00e ff30 	bl	8013e94 <CreateLine>
    RxComplete = true;
    return false;
#endif
#endif
  }
  return true;
 8005034:	2301      	movs	r3, #1
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b00b      	add	sp, #44	@ 0x2c
 800503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	200004a8 	.word	0x200004a8
 8005044:	200004a4 	.word	0x200004a4
 8005048:	0802ac30 	.word	0x0802ac30
 800504c:	0802ab98 	.word	0x0802ab98
 8005050:	0802acc0 	.word	0x0802acc0
 8005054:	0802ac60 	.word	0x0802ac60
 8005058:	0802ac6c 	.word	0x0802ac6c
 800505c:	0802ac74 	.word	0x0802ac74
 8005060:	0802ac7c 	.word	0x0802ac7c
 8005064:	0802ac88 	.word	0x0802ac88
 8005068:	0802ac98 	.word	0x0802ac98
 800506c:	0802acac 	.word	0x0802acac

08005070 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b093      	sub	sp, #76	@ 0x4c
 8005074:	af02      	add	r7, sp, #8
 8005076:	6078      	str	r0, [r7, #4]
  char espconnuart[] = "ESP connection UART ";
 8005078:	2328      	movs	r3, #40	@ 0x28
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	4a6d      	ldr	r2, [pc, #436]	@ (8005234 <HAL_UART_ErrorCallback+0x1c4>)
 800507e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005080:	c313      	stmia	r3!, {r0, r1, r4}
 8005082:	ca03      	ldmia	r2!, {r0, r1}
 8005084:	c303      	stmia	r3!, {r0, r1}
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
  char comcalb[] = " Complete";
 800508a:	231c      	movs	r3, #28
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	4a6a      	ldr	r2, [pc, #424]	@ (8005238 <HAL_UART_ErrorCallback+0x1c8>)
 8005090:	ca03      	ldmia	r2!, {r0, r1}
 8005092:	c303      	stmia	r3!, {r0, r1}
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	801a      	strh	r2, [r3, #0]
  char cid[] = " Callback ID";
 8005098:	230c      	movs	r3, #12
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_UART_ErrorCallback+0x1cc>)
 800509e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80050a0:	c313      	stmia	r3!, {r0, r1, r4}
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
  if (huart == EspUart) {
 80050a6:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_UART_ErrorCallback+0x1d0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d000      	beq.n	80050b2 <HAL_UART_ErrorCallback+0x42>
 80050b0:	e0bd      	b.n	800522e <HAL_UART_ErrorCallback+0x1be>
    if (huart->ErrorCode == 4) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2284      	movs	r2, #132	@ 0x84
 80050b6:	589b      	ldr	r3, [r3, r2]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d100      	bne.n	80050be <HAL_UART_ErrorCallback+0x4e>
 80050bc:	e0b6      	b.n	800522c <HAL_UART_ErrorCallback+0x1bc>
      return;
    }
    Error("A callback error has occurred, errorcode: 0x%X", huart->ErrorCode);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2284      	movs	r2, #132	@ 0x84
 80050c2:	589b      	ldr	r3, [r3, r2]
 80050c4:	4a5f      	ldr	r2, [pc, #380]	@ (8005244 <HAL_UART_ErrorCallback+0x1d4>)
 80050c6:	4960      	ldr	r1, [pc, #384]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80050c8:	2001      	movs	r0, #1
 80050ca:	f00e fee3 	bl	8013e94 <CreateLine>
    switch (huart->ErrorCode) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2284      	movs	r2, #132	@ 0x84
 80050d2:	589b      	ldr	r3, [r3, r2]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d900      	bls.n	80050da <HAL_UART_ErrorCallback+0x6a>
 80050d8:	e09d      	b.n	8005216 <HAL_UART_ErrorCallback+0x1a6>
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	4b5b      	ldr	r3, [pc, #364]	@ (800524c <HAL_UART_ErrorCallback+0x1dc>)
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("%sTx Half%s%s", espconnuart, comcalb, cid);
 80050e4:	2328      	movs	r3, #40	@ 0x28
 80050e6:	18f8      	adds	r0, r7, r3
 80050e8:	4a59      	ldr	r2, [pc, #356]	@ (8005250 <HAL_UART_ErrorCallback+0x1e0>)
 80050ea:	4957      	ldr	r1, [pc, #348]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80050ec:	230c      	movs	r3, #12
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	231c      	movs	r3, #28
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	0003      	movs	r3, r0
 80050fa:	2001      	movs	r0, #1
 80050fc:	f00e feca 	bl	8013e94 <CreateLine>
        break;
 8005100:	e08f      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("%sTx%s%s", espconnuart, comcalb, cid);
 8005102:	2328      	movs	r3, #40	@ 0x28
 8005104:	18f8      	adds	r0, r7, r3
 8005106:	4a53      	ldr	r2, [pc, #332]	@ (8005254 <HAL_UART_ErrorCallback+0x1e4>)
 8005108:	494f      	ldr	r1, [pc, #316]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800510a:	230c      	movs	r3, #12
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	231c      	movs	r3, #28
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	0003      	movs	r3, r0
 8005118:	2001      	movs	r0, #1
 800511a:	f00e febb 	bl	8013e94 <CreateLine>
        break;
 800511e:	e080      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("%sRx Half%s%s", espconnuart, comcalb, cid);
 8005120:	2328      	movs	r3, #40	@ 0x28
 8005122:	18f8      	adds	r0, r7, r3
 8005124:	4a4c      	ldr	r2, [pc, #304]	@ (8005258 <HAL_UART_ErrorCallback+0x1e8>)
 8005126:	4948      	ldr	r1, [pc, #288]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005128:	230c      	movs	r3, #12
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	231c      	movs	r3, #28
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	0003      	movs	r3, r0
 8005136:	2001      	movs	r0, #1
 8005138:	f00e feac 	bl	8013e94 <CreateLine>
        break;
 800513c:	e071      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("%sRx%s%s", espconnuart, comcalb, cid);
 800513e:	2328      	movs	r3, #40	@ 0x28
 8005140:	18f8      	adds	r0, r7, r3
 8005142:	4a46      	ldr	r2, [pc, #280]	@ (800525c <HAL_UART_ErrorCallback+0x1ec>)
 8005144:	4940      	ldr	r1, [pc, #256]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005146:	230c      	movs	r3, #12
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	231c      	movs	r3, #28
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	0003      	movs	r3, r0
 8005154:	2001      	movs	r0, #1
 8005156:	f00e fe9d 	bl	8013e94 <CreateLine>
        break;
 800515a:	e062      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ERROR_CB_ID:
        Error("%sError%s", espconnuart, cid);
 800515c:	2328      	movs	r3, #40	@ 0x28
 800515e:	18f8      	adds	r0, r7, r3
 8005160:	4a3f      	ldr	r2, [pc, #252]	@ (8005260 <HAL_UART_ErrorCallback+0x1f0>)
 8005162:	4939      	ldr	r1, [pc, #228]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005164:	230c      	movs	r3, #12
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	0003      	movs	r3, r0
 800516c:	2001      	movs	r0, #1
 800516e:	f00e fe91 	bl	8013e94 <CreateLine>
        break;
 8005172:	e056      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("%sAbort%s%s", espconnuart, comcalb, cid);
 8005174:	2328      	movs	r3, #40	@ 0x28
 8005176:	18f8      	adds	r0, r7, r3
 8005178:	4a3a      	ldr	r2, [pc, #232]	@ (8005264 <HAL_UART_ErrorCallback+0x1f4>)
 800517a:	4933      	ldr	r1, [pc, #204]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800517c:	230c      	movs	r3, #12
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	231c      	movs	r3, #28
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	0003      	movs	r3, r0
 800518a:	2001      	movs	r0, #1
 800518c:	f00e fe82 	bl	8013e94 <CreateLine>
        break;
 8005190:	e047      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("%sAbort Transmit%s%s", espconnuart, comcalb, cid);
 8005192:	2328      	movs	r3, #40	@ 0x28
 8005194:	18f8      	adds	r0, r7, r3
 8005196:	4a34      	ldr	r2, [pc, #208]	@ (8005268 <HAL_UART_ErrorCallback+0x1f8>)
 8005198:	492b      	ldr	r1, [pc, #172]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800519a:	230c      	movs	r3, #12
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	231c      	movs	r3, #28
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	0003      	movs	r3, r0
 80051a8:	2001      	movs	r0, #1
 80051aa:	f00e fe73 	bl	8013e94 <CreateLine>
        break;
 80051ae:	e038      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("%sAbort Receive%s%s", espconnuart, comcalb, cid);
 80051b0:	2328      	movs	r3, #40	@ 0x28
 80051b2:	18f8      	adds	r0, r7, r3
 80051b4:	4a2d      	ldr	r2, [pc, #180]	@ (800526c <HAL_UART_ErrorCallback+0x1fc>)
 80051b6:	4924      	ldr	r1, [pc, #144]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051b8:	230c      	movs	r3, #12
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	231c      	movs	r3, #28
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	0003      	movs	r3, r0
 80051c6:	2001      	movs	r0, #1
 80051c8:	f00e fe64 	bl	8013e94 <CreateLine>
        break;
 80051cc:	e029      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_WAKEUP_CB_ID:
        Error("%sWakeup%s", espconnuart, cid);
 80051ce:	2328      	movs	r3, #40	@ 0x28
 80051d0:	18f8      	adds	r0, r7, r3
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <HAL_UART_ErrorCallback+0x200>)
 80051d4:	491c      	ldr	r1, [pc, #112]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051d6:	230c      	movs	r3, #12
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	0003      	movs	r3, r0
 80051de:	2001      	movs	r0, #1
 80051e0:	f00e fe58 	bl	8013e94 <CreateLine>
        break;
 80051e4:	e01d      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_MSPINIT_CB_ID:
        Error("%sMspInit%s", espconnuart, cid);
 80051e6:	2328      	movs	r3, #40	@ 0x28
 80051e8:	18f8      	adds	r0, r7, r3
 80051ea:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <HAL_UART_ErrorCallback+0x204>)
 80051ec:	4916      	ldr	r1, [pc, #88]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051ee:	230c      	movs	r3, #12
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	0003      	movs	r3, r0
 80051f6:	2001      	movs	r0, #1
 80051f8:	f00e fe4c 	bl	8013e94 <CreateLine>
        break;
 80051fc:	e011      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("%sMspDeInit%s", espconnuart, cid);
 80051fe:	2328      	movs	r3, #40	@ 0x28
 8005200:	18f8      	adds	r0, r7, r3
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_UART_ErrorCallback+0x208>)
 8005204:	4910      	ldr	r1, [pc, #64]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005206:	230c      	movs	r3, #12
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	0003      	movs	r3, r0
 800520e:	2001      	movs	r0, #1
 8005210:	f00e fe40 	bl	8013e94 <CreateLine>
        break;
 8005214:	e005      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      default:
        Error("%sUnknown error");
 8005216:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_UART_ErrorCallback+0x20c>)
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800521a:	0019      	movs	r1, r3
 800521c:	2001      	movs	r0, #1
 800521e:	f00e fe39 	bl	8013e94 <CreateLine>
    }
    HAL_UART_Abort(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f018 fb47 	bl	801d8b8 <HAL_UART_Abort>
 800522a:	e000      	b.n	800522e <HAL_UART_ErrorCallback+0x1be>
      return;
 800522c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800522e:	46bd      	mov	sp, r7
 8005230:	b011      	add	sp, #68	@ 0x44
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	0802adc4 	.word	0x0802adc4
 8005238:	0802addc 	.word	0x0802addc
 800523c:	0802ade8 	.word	0x0802ade8
 8005240:	200004a4 	.word	0x200004a4
 8005244:	0802ace0 	.word	0x0802ace0
 8005248:	0802ab98 	.word	0x0802ab98
 800524c:	0802e128 	.word	0x0802e128
 8005250:	0802ad10 	.word	0x0802ad10
 8005254:	0802ad20 	.word	0x0802ad20
 8005258:	0802ad2c 	.word	0x0802ad2c
 800525c:	0802ad3c 	.word	0x0802ad3c
 8005260:	0802ad48 	.word	0x0802ad48
 8005264:	0802ad54 	.word	0x0802ad54
 8005268:	0802ad60 	.word	0x0802ad60
 800526c:	0802ad78 	.word	0x0802ad78
 8005270:	0802ad8c 	.word	0x0802ad8c
 8005274:	0802ad98 	.word	0x0802ad98
 8005278:	0802ada4 	.word	0x0802ada4
 800527c:	0802adb4 	.word	0x0802adb4

08005280 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF)) {
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b42      	cmp	r3, #66	@ 0x42
 8005292:	d905      	bls.n	80052a0 <isKeyValid+0x20>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2bff      	cmp	r3, #255	@ 0xff
 800529a:	d001      	beq.n	80052a0 <isKeyValid+0x20>
    return true;
 800529c:	2301      	movs	r3, #1
 800529e:	e015      	b.n	80052cc <isKeyValid+0x4c>
  }
  else {
    uint8ArrayToString(message, data);
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <isKeyValid+0x54>)
 80052a4:	0011      	movs	r1, r2
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 f81a 	bl	80052e0 <uint8ArrayToString>
    data[12] = '\0';
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	330c      	adds	r3, #12
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
    Error("Error key for %s has no stored key for %s: %s\r\n", sensormodel, sensortype, message);
 80052b4:	68b8      	ldr	r0, [r7, #8]
 80052b6:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <isKeyValid+0x58>)
 80052b8:	4908      	ldr	r1, [pc, #32]	@ (80052dc <isKeyValid+0x5c>)
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <isKeyValid+0x54>)
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	0003      	movs	r3, r0
 80052c4:	2001      	movs	r0, #1
 80052c6:	f00e fde5 	bl	8013e94 <CreateLine>
    if (usblog && Check_USB_PowerOn()) {
      printf_USB("\r\n");
    }
    printf("\r\n");
*/
    return false;
 80052ca:	2300      	movs	r3, #0
  }
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b004      	add	sp, #16
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	200005c4 	.word	0x200005c4
 80052d8:	0802adf8 	.word	0x0802adf8
 80052dc:	0802ab98 	.word	0x0802ab98

080052e0 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e010      	b.n	8005312 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	001a      	movs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1898      	adds	r0, r3, r2
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	001a      	movs	r2, r3
 8005304:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <uint8ArrayToString+0x44>)
 8005306:	0019      	movs	r1, r3
 8005308:	f021 f8e0 	bl	80264cc <siprintf>
  for (int i = 0; i < 12; i++) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b0b      	cmp	r3, #11
 8005316:	ddeb      	ble.n	80052f0 <uint8ArrayToString+0x10>
  }
}
 8005318:	46c0      	nop			@ (mov r8, r8)
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	0802ae28 	.word	0x0802ae28

08005328 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b087      	sub	sp, #28
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	000a      	movs	r2, r1
 8005332:	1cfb      	adds	r3, r7, #3
 8005334:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 8005336:	240e      	movs	r4, #14
 8005338:	193b      	adds	r3, r7, r4
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800533e:	4b41      	ldr	r3, [pc, #260]	@ (8005444 <CreateMailMessage+0x11c>)
 8005340:	4841      	ldr	r0, [pc, #260]	@ (8005448 <CreateMailMessage+0x120>)
 8005342:	2220      	movs	r2, #32
 8005344:	0019      	movs	r1, r3
 8005346:	f006 ff3b 	bl	800c1c0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 800534a:	4b40      	ldr	r3, [pc, #256]	@ (800544c <CreateMailMessage+0x124>)
 800534c:	4840      	ldr	r0, [pc, #256]	@ (8005450 <CreateMailMessage+0x128>)
 800534e:	2230      	movs	r2, #48	@ 0x30
 8005350:	0019      	movs	r1, r3
 8005352:	f006 ff35 	bl	800c1c0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 8005356:	4b3f      	ldr	r3, [pc, #252]	@ (8005454 <CreateMailMessage+0x12c>)
 8005358:	483f      	ldr	r0, [pc, #252]	@ (8005458 <CreateMailMessage+0x130>)
 800535a:	2230      	movs	r2, #48	@ 0x30
 800535c:	0019      	movs	r1, r3
 800535e:	f006 ff2f 	bl	800c1c0 <ReadUint8ArrayEEprom>
  sprintf(message, "{\r\n\"sender\": \"%s\",\r\n\"to\": [\r\n\"%s\"\r\n],\r\n\"subject\": \"Battery status\",\r\n", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 8005362:	4b3c      	ldr	r3, [pc, #240]	@ (8005454 <CreateMailMessage+0x12c>)
 8005364:	4a39      	ldr	r2, [pc, #228]	@ (800544c <CreateMailMessage+0x124>)
 8005366:	493d      	ldr	r1, [pc, #244]	@ (800545c <CreateMailMessage+0x134>)
 8005368:	483d      	ldr	r0, [pc, #244]	@ (8005460 <CreateMailMessage+0x138>)
 800536a:	f021 f8af 	bl	80264cc <siprintf>
  lngth = strlen(message);
 800536e:	4b3c      	ldr	r3, [pc, #240]	@ (8005460 <CreateMailMessage+0x138>)
 8005370:	0018      	movs	r0, r3
 8005372:	f7fa fefb 	bl	800016c <strlen>
 8005376:	0002      	movs	r2, r0
 8005378:	193b      	adds	r3, r7, r4
 800537a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800537c:	1cfb      	adds	r3, r7, #3
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d019      	beq.n	80053b8 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005384:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <CreateMailMessage+0x138>)
 8005386:	0018      	movs	r0, r3
 8005388:	f7fa fef0 	bl	800016c <strlen>
 800538c:	0003      	movs	r3, r0
 800538e:	b29a      	uxth	r2, r3
 8005390:	4b33      	ldr	r3, [pc, #204]	@ (8005460 <CreateMailMessage+0x138>)
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f7ff fd63 	bl	8004e60 <ESP_Send>
 800539a:	0003      	movs	r3, r0
 800539c:	001a      	movs	r2, r3
 800539e:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <CreateMailMessage+0x13c>)
 80053a0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053a2:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <CreateMailMessage+0x140>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	001a      	movs	r2, r3
 80053a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005464 <CreateMailMessage+0x13c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4013      	ands	r3, r2
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	4193      	sbcs	r3, r2
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005468 <CreateMailMessage+0x140>)
 80053b6:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV\"\r\n}\r\n", (char*)nameConfig, ReadBatteryVoltage());
 80053b8:	f004 fbdc 	bl	8009b74 <ReadBatteryVoltage>
 80053bc:	1c03      	adds	r3, r0, #0
 80053be:	1c18      	adds	r0, r3, #0
 80053c0:	f7fe fa68 	bl	8003894 <__aeabi_f2d>
 80053c4:	0002      	movs	r2, r0
 80053c6:	000b      	movs	r3, r1
 80053c8:	4c1e      	ldr	r4, [pc, #120]	@ (8005444 <CreateMailMessage+0x11c>)
 80053ca:	4928      	ldr	r1, [pc, #160]	@ (800546c <CreateMailMessage+0x144>)
 80053cc:	4824      	ldr	r0, [pc, #144]	@ (8005460 <CreateMailMessage+0x138>)
 80053ce:	9200      	str	r2, [sp, #0]
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	0022      	movs	r2, r4
 80053d4:	f021 f87a 	bl	80264cc <siprintf>
  lngth += strlen(message);
 80053d8:	4b21      	ldr	r3, [pc, #132]	@ (8005460 <CreateMailMessage+0x138>)
 80053da:	0018      	movs	r0, r3
 80053dc:	f7fa fec6 	bl	800016c <strlen>
 80053e0:	0003      	movs	r3, r0
 80053e2:	b299      	uxth	r1, r3
 80053e4:	220e      	movs	r2, #14
 80053e6:	18bb      	adds	r3, r7, r2
 80053e8:	18ba      	adds	r2, r7, r2
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	188a      	adds	r2, r1, r2
 80053ee:	801a      	strh	r2, [r3, #0]
  if (send) {
 80053f0:	1cfb      	adds	r3, r7, #3
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <CreateMailMessage+0x138>)
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7fa feb6 	bl	800016c <strlen>
 8005400:	0003      	movs	r3, r0
 8005402:	b29a      	uxth	r2, r3
 8005404:	4b16      	ldr	r3, [pc, #88]	@ (8005460 <CreateMailMessage+0x138>)
 8005406:	0011      	movs	r1, r2
 8005408:	0018      	movs	r0, r3
 800540a:	f7ff fd29 	bl	8004e60 <ESP_Send>
 800540e:	0003      	movs	r3, r0
 8005410:	001a      	movs	r2, r3
 8005412:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <CreateMailMessage+0x13c>)
 8005414:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005416:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <CreateMailMessage+0x140>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	001a      	movs	r2, r3
 800541c:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <CreateMailMessage+0x13c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	1e5a      	subs	r2, r3, #1
 8005424:	4193      	sbcs	r3, r2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	4b0f      	ldr	r3, [pc, #60]	@ (8005468 <CreateMailMessage+0x140>)
 800542a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800542c:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <CreateMailMessage+0x140>)
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	701a      	strb	r2, [r3, #0]
  return lngth;
 8005434:	230e      	movs	r3, #14
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	881b      	ldrh	r3, [r3, #0]
}
 800543a:	0018      	movs	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	b005      	add	sp, #20
 8005440:	bd90      	pop	{r4, r7, pc}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	20000790 	.word	0x20000790
 8005448:	08080090 	.word	0x08080090
 800544c:	200007b0 	.word	0x200007b0
 8005450:	08080260 	.word	0x08080260
 8005454:	200007e0 	.word	0x200007e0
 8005458:	08080290 	.word	0x08080290
 800545c:	0802ae30 	.word	0x0802ae30
 8005460:	200005c4 	.word	0x200005c4
 8005464:	20000810 	.word	0x20000810
 8005468:	20000031 	.word	0x20000031
 800546c:	0802ae78 	.word	0x0802ae78

08005470 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af02      	add	r7, sp, #8
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	000a      	movs	r2, r1
 800547a:	1cfb      	adds	r3, r7, #3
 800547c:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 800547e:	f7ff fa7d 	bl	800497c <checkName>
 8005482:	1e03      	subs	r3, r0, #0
 8005484:	d00a      	beq.n	800549c <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005486:	4b03      	ldr	r3, [pc, #12]	@ (8005494 <CreateMessage+0x24>)
 8005488:	4803      	ldr	r0, [pc, #12]	@ (8005498 <CreateMessage+0x28>)
 800548a:	2220      	movs	r2, #32
 800548c:	0019      	movs	r1, r3
 800548e:	f006 fe97 	bl	800c1c0 <ReadUint8ArrayEEprom>
 8005492:	e009      	b.n	80054a8 <CreateMessage+0x38>
 8005494:	20000814 	.word	0x20000814
 8005498:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 800549c:	4beb      	ldr	r3, [pc, #940]	@ (800584c <CreateMessage+0x3dc>)
 800549e:	4aec      	ldr	r2, [pc, #944]	@ (8005850 <CreateMessage+0x3e0>)
 80054a0:	6811      	ldr	r1, [r2, #0]
 80054a2:	6019      	str	r1, [r3, #0]
 80054a4:	7912      	ldrb	r2, [r2, #4]
 80054a6:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80054a8:	f7ff fa0e 	bl	80048c8 <setCharges>
  uint16_t index = 0;
 80054ac:	250e      	movs	r5, #14
 80054ae:	197b      	adds	r3, r7, r5
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80054b4:	197b      	adds	r3, r7, r5
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	4be6      	ldr	r3, [pc, #920]	@ (8005854 <CreateMessage+0x3e4>)
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	4ae6      	ldr	r2, [pc, #920]	@ (8005858 <CreateMessage+0x3e8>)
 80054be:	0011      	movs	r1, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	f021 f803 	bl	80264cc <siprintf>
#ifdef LONGDATAGRAM
  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80054c6:	4be5      	ldr	r3, [pc, #916]	@ (800585c <CreateMessage+0x3ec>)
 80054c8:	48e5      	ldr	r0, [pc, #916]	@ (8005860 <CreateMessage+0x3f0>)
 80054ca:	220c      	movs	r2, #12
 80054cc:	0019      	movs	r1, r3
 80054ce:	f006 fe77 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80054d2:	4ae2      	ldr	r2, [pc, #904]	@ (800585c <CreateMessage+0x3ec>)
 80054d4:	4be3      	ldr	r3, [pc, #908]	@ (8005864 <CreateMessage+0x3f4>)
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f7ff ff01 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 80054de:	4be2      	ldr	r3, [pc, #904]	@ (8005868 <CreateMessage+0x3f8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	1c18      	adds	r0, r3, #0
 80054e4:	f7fe f9d6 	bl	8003894 <__aeabi_f2d>
 80054e8:	0002      	movs	r2, r0
 80054ea:	000b      	movs	r3, r1
 80054ec:	4cdd      	ldr	r4, [pc, #884]	@ (8005864 <CreateMessage+0x3f4>)
 80054ee:	49df      	ldr	r1, [pc, #892]	@ (800586c <CreateMessage+0x3fc>)
 80054f0:	48df      	ldr	r0, [pc, #892]	@ (8005870 <CreateMessage+0x400>)
 80054f2:	9200      	str	r2, [sp, #0]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	0022      	movs	r2, r4
 80054f8:	f020 ffe8 	bl	80264cc <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 80054fc:	4bd5      	ldr	r3, [pc, #852]	@ (8005854 <CreateMessage+0x3e4>)
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fa fe34 	bl	800016c <strlen>
 8005504:	0002      	movs	r2, r0
 8005506:	197b      	adds	r3, r7, r5
 8005508:	801a      	strh	r2, [r3, #0]
  if (send) {
 800550a:	1cfb      	adds	r3, r7, #3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d019      	beq.n	8005546 <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005512:	4bd0      	ldr	r3, [pc, #832]	@ (8005854 <CreateMessage+0x3e4>)
 8005514:	0018      	movs	r0, r3
 8005516:	f7fa fe29 	bl	800016c <strlen>
 800551a:	0003      	movs	r3, r0
 800551c:	b29a      	uxth	r2, r3
 800551e:	4bcd      	ldr	r3, [pc, #820]	@ (8005854 <CreateMessage+0x3e4>)
 8005520:	0011      	movs	r1, r2
 8005522:	0018      	movs	r0, r3
 8005524:	f7ff fc9c 	bl	8004e60 <ESP_Send>
 8005528:	0003      	movs	r3, r0
 800552a:	001a      	movs	r2, r3
 800552c:	4bd1      	ldr	r3, [pc, #836]	@ (8005874 <CreateMessage+0x404>)
 800552e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005530:	4bd1      	ldr	r3, [pc, #836]	@ (8005878 <CreateMessage+0x408>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	001a      	movs	r2, r3
 8005536:	4bcf      	ldr	r3, [pc, #828]	@ (8005874 <CreateMessage+0x404>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	4013      	ands	r3, r2
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	4193      	sbcs	r3, r2
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4bcd      	ldr	r3, [pc, #820]	@ (8005878 <CreateMessage+0x408>)
 8005544:	701a      	strb	r2, [r3, #0]
  }
  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 8005546:	4bc5      	ldr	r3, [pc, #788]	@ (800585c <CreateMessage+0x3ec>)
 8005548:	48cc      	ldr	r0, [pc, #816]	@ (800587c <CreateMessage+0x40c>)
 800554a:	220c      	movs	r2, #12
 800554c:	0019      	movs	r1, r3
 800554e:	f006 fe37 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005552:	4ac2      	ldr	r2, [pc, #776]	@ (800585c <CreateMessage+0x3ec>)
 8005554:	4bc3      	ldr	r3, [pc, #780]	@ (8005864 <CreateMessage+0x3f4>)
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fec1 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 800555e:	4bc2      	ldr	r3, [pc, #776]	@ (8005868 <CreateMessage+0x3f8>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	1c18      	adds	r0, r3, #0
 8005564:	f7fe f996 	bl	8003894 <__aeabi_f2d>
 8005568:	0002      	movs	r2, r0
 800556a:	000b      	movs	r3, r1
 800556c:	4cbd      	ldr	r4, [pc, #756]	@ (8005864 <CreateMessage+0x3f4>)
 800556e:	49c4      	ldr	r1, [pc, #784]	@ (8005880 <CreateMessage+0x410>)
 8005570:	48b8      	ldr	r0, [pc, #736]	@ (8005854 <CreateMessage+0x3e4>)
 8005572:	9200      	str	r2, [sp, #0]
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	0022      	movs	r2, r4
 8005578:	f020 ffa8 	bl	80264cc <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 800557c:	4bb5      	ldr	r3, [pc, #724]	@ (8005854 <CreateMessage+0x3e4>)
 800557e:	0018      	movs	r0, r3
 8005580:	f7fa fdf4 	bl	800016c <strlen>
 8005584:	0003      	movs	r3, r0
 8005586:	b299      	uxth	r1, r3
 8005588:	220e      	movs	r2, #14
 800558a:	18bb      	adds	r3, r7, r2
 800558c:	18ba      	adds	r2, r7, r2
 800558e:	8812      	ldrh	r2, [r2, #0]
 8005590:	188a      	adds	r2, r1, r2
 8005592:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005594:	1cfb      	adds	r3, r7, #3
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d019      	beq.n	80055d0 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800559c:	4bad      	ldr	r3, [pc, #692]	@ (8005854 <CreateMessage+0x3e4>)
 800559e:	0018      	movs	r0, r3
 80055a0:	f7fa fde4 	bl	800016c <strlen>
 80055a4:	0003      	movs	r3, r0
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	4baa      	ldr	r3, [pc, #680]	@ (8005854 <CreateMessage+0x3e4>)
 80055aa:	0011      	movs	r1, r2
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7ff fc57 	bl	8004e60 <ESP_Send>
 80055b2:	0003      	movs	r3, r0
 80055b4:	001a      	movs	r2, r3
 80055b6:	4baf      	ldr	r3, [pc, #700]	@ (8005874 <CreateMessage+0x404>)
 80055b8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80055ba:	4baf      	ldr	r3, [pc, #700]	@ (8005878 <CreateMessage+0x408>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	001a      	movs	r2, r3
 80055c0:	4bac      	ldr	r3, [pc, #688]	@ (8005874 <CreateMessage+0x404>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4013      	ands	r3, r2
 80055c6:	1e5a      	subs	r2, r3, #1
 80055c8:	4193      	sbcs	r3, r2
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	4baa      	ldr	r3, [pc, #680]	@ (8005878 <CreateMessage+0x408>)
 80055ce:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80055d0:	4ba2      	ldr	r3, [pc, #648]	@ (800585c <CreateMessage+0x3ec>)
 80055d2:	48ac      	ldr	r0, [pc, #688]	@ (8005884 <CreateMessage+0x414>)
 80055d4:	220c      	movs	r2, #12
 80055d6:	0019      	movs	r1, r3
 80055d8:	f006 fdf2 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055dc:	4a9f      	ldr	r2, [pc, #636]	@ (800585c <CreateMessage+0x3ec>)
 80055de:	4ba1      	ldr	r3, [pc, #644]	@ (8005864 <CreateMessage+0x3f4>)
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7ff fe7c 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 80055e8:	4b9f      	ldr	r3, [pc, #636]	@ (8005868 <CreateMessage+0x3f8>)
 80055ea:	2248      	movs	r2, #72	@ 0x48
 80055ec:	5a9b      	ldrh	r3, [r3, r2]
 80055ee:	4a9d      	ldr	r2, [pc, #628]	@ (8005864 <CreateMessage+0x3f4>)
 80055f0:	49a5      	ldr	r1, [pc, #660]	@ (8005888 <CreateMessage+0x418>)
 80055f2:	4898      	ldr	r0, [pc, #608]	@ (8005854 <CreateMessage+0x3e4>)
 80055f4:	f020 ff6a 	bl	80264cc <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 80055f8:	4b96      	ldr	r3, [pc, #600]	@ (8005854 <CreateMessage+0x3e4>)
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fa fdb6 	bl	800016c <strlen>
 8005600:	0003      	movs	r3, r0
 8005602:	b299      	uxth	r1, r3
 8005604:	220e      	movs	r2, #14
 8005606:	18bb      	adds	r3, r7, r2
 8005608:	18ba      	adds	r2, r7, r2
 800560a:	8812      	ldrh	r2, [r2, #0]
 800560c:	188a      	adds	r2, r1, r2
 800560e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005610:	1cfb      	adds	r3, r7, #3
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005618:	4b8e      	ldr	r3, [pc, #568]	@ (8005854 <CreateMessage+0x3e4>)
 800561a:	0018      	movs	r0, r3
 800561c:	f7fa fda6 	bl	800016c <strlen>
 8005620:	0003      	movs	r3, r0
 8005622:	b29a      	uxth	r2, r3
 8005624:	4b8b      	ldr	r3, [pc, #556]	@ (8005854 <CreateMessage+0x3e4>)
 8005626:	0011      	movs	r1, r2
 8005628:	0018      	movs	r0, r3
 800562a:	f7ff fc19 	bl	8004e60 <ESP_Send>
 800562e:	0003      	movs	r3, r0
 8005630:	001a      	movs	r2, r3
 8005632:	4b90      	ldr	r3, [pc, #576]	@ (8005874 <CreateMessage+0x404>)
 8005634:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005636:	4b90      	ldr	r3, [pc, #576]	@ (8005878 <CreateMessage+0x408>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	001a      	movs	r2, r3
 800563c:	4b8d      	ldr	r3, [pc, #564]	@ (8005874 <CreateMessage+0x404>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	4013      	ands	r3, r2
 8005642:	1e5a      	subs	r2, r3, #1
 8005644:	4193      	sbcs	r3, r2
 8005646:	b2da      	uxtb	r2, r3
 8005648:	4b8b      	ldr	r3, [pc, #556]	@ (8005878 <CreateMessage+0x408>)
 800564a:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, keybuffer, IdSize);
 800564c:	4b83      	ldr	r3, [pc, #524]	@ (800585c <CreateMessage+0x3ec>)
 800564e:	488f      	ldr	r0, [pc, #572]	@ (800588c <CreateMessage+0x41c>)
 8005650:	220c      	movs	r2, #12
 8005652:	0019      	movs	r1, r3
 8005654:	f006 fdb4 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "ChargeStat", "true/false")) {
 8005658:	4a8d      	ldr	r2, [pc, #564]	@ (8005890 <CreateMessage+0x420>)
 800565a:	498e      	ldr	r1, [pc, #568]	@ (8005894 <CreateMessage+0x424>)
 800565c:	4b7f      	ldr	r3, [pc, #508]	@ (800585c <CreateMessage+0x3ec>)
 800565e:	0018      	movs	r0, r3
 8005660:	f7ff fe0e 	bl	8005280 <isKeyValid>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d036      	beq.n	80056d6 <CreateMessage+0x266>
    uint8ArrayToString(Buffer, keybuffer);
 8005668:	4a7c      	ldr	r2, [pc, #496]	@ (800585c <CreateMessage+0x3ec>)
 800566a:	4b7e      	ldr	r3, [pc, #504]	@ (8005864 <CreateMessage+0x3f4>)
 800566c:	0011      	movs	r1, r2
 800566e:	0018      	movs	r0, r3
 8005670:	f7ff fe36 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
 8005674:	4b88      	ldr	r3, [pc, #544]	@ (8005898 <CreateMessage+0x428>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4a7a      	ldr	r2, [pc, #488]	@ (8005864 <CreateMessage+0x3f4>)
 800567a:	4988      	ldr	r1, [pc, #544]	@ (800589c <CreateMessage+0x42c>)
 800567c:	4875      	ldr	r0, [pc, #468]	@ (8005854 <CreateMessage+0x3e4>)
 800567e:	f020 ff25 	bl	80264cc <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"charging\", \"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
#endif
    index += strlen(message);
 8005682:	4b74      	ldr	r3, [pc, #464]	@ (8005854 <CreateMessage+0x3e4>)
 8005684:	0018      	movs	r0, r3
 8005686:	f7fa fd71 	bl	800016c <strlen>
 800568a:	0003      	movs	r3, r0
 800568c:	b299      	uxth	r1, r3
 800568e:	220e      	movs	r2, #14
 8005690:	18bb      	adds	r3, r7, r2
 8005692:	18ba      	adds	r2, r7, r2
 8005694:	8812      	ldrh	r2, [r2, #0]
 8005696:	188a      	adds	r2, r1, r2
 8005698:	801a      	strh	r2, [r3, #0]
    if (send) {
 800569a:	1cfb      	adds	r3, r7, #3
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d019      	beq.n	80056d6 <CreateMessage+0x266>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80056a2:	4b6c      	ldr	r3, [pc, #432]	@ (8005854 <CreateMessage+0x3e4>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fa fd61 	bl	800016c <strlen>
 80056aa:	0003      	movs	r3, r0
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	4b69      	ldr	r3, [pc, #420]	@ (8005854 <CreateMessage+0x3e4>)
 80056b0:	0011      	movs	r1, r2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff fbd4 	bl	8004e60 <ESP_Send>
 80056b8:	0003      	movs	r3, r0
 80056ba:	001a      	movs	r2, r3
 80056bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005874 <CreateMessage+0x404>)
 80056be:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80056c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005878 <CreateMessage+0x408>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	001a      	movs	r2, r3
 80056c6:	4b6b      	ldr	r3, [pc, #428]	@ (8005874 <CreateMessage+0x404>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	4193      	sbcs	r3, r2
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b69      	ldr	r3, [pc, #420]	@ (8005878 <CreateMessage+0x408>)
 80056d4:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 80056d6:	4b61      	ldr	r3, [pc, #388]	@ (800585c <CreateMessage+0x3ec>)
 80056d8:	4871      	ldr	r0, [pc, #452]	@ (80058a0 <CreateMessage+0x430>)
 80056da:	220c      	movs	r2, #12
 80056dc:	0019      	movs	r1, r3
 80056de:	f006 fd6f 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 80056e2:	4a70      	ldr	r2, [pc, #448]	@ (80058a4 <CreateMessage+0x434>)
 80056e4:	4970      	ldr	r1, [pc, #448]	@ (80058a8 <CreateMessage+0x438>)
 80056e6:	4b5d      	ldr	r3, [pc, #372]	@ (800585c <CreateMessage+0x3ec>)
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fdc9 	bl	8005280 <isKeyValid>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d039      	beq.n	8005766 <CreateMessage+0x2f6>
    uint8ArrayToString(Buffer, keybuffer);
 80056f2:	4a5a      	ldr	r2, [pc, #360]	@ (800585c <CreateMessage+0x3ec>)
 80056f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005864 <CreateMessage+0x3f4>)
 80056f6:	0011      	movs	r1, r2
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff fdf1 	bl	80052e0 <uint8ArrayToString>
    getUptime(uptimeBuf);
 80056fe:	4b6b      	ldr	r3, [pc, #428]	@ (80058ac <CreateMessage+0x43c>)
 8005700:	0018      	movs	r0, r3
 8005702:	f004 fb89 	bl	8009e18 <getUptime>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 8005706:	4b69      	ldr	r3, [pc, #420]	@ (80058ac <CreateMessage+0x43c>)
 8005708:	4a56      	ldr	r2, [pc, #344]	@ (8005864 <CreateMessage+0x3f4>)
 800570a:	4969      	ldr	r1, [pc, #420]	@ (80058b0 <CreateMessage+0x440>)
 800570c:	4851      	ldr	r0, [pc, #324]	@ (8005854 <CreateMessage+0x3e4>)
 800570e:	f020 fedd 	bl	80264cc <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 8005712:	4b50      	ldr	r3, [pc, #320]	@ (8005854 <CreateMessage+0x3e4>)
 8005714:	0018      	movs	r0, r3
 8005716:	f7fa fd29 	bl	800016c <strlen>
 800571a:	0003      	movs	r3, r0
 800571c:	b299      	uxth	r1, r3
 800571e:	220e      	movs	r2, #14
 8005720:	18bb      	adds	r3, r7, r2
 8005722:	18ba      	adds	r2, r7, r2
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	188a      	adds	r2, r1, r2
 8005728:	801a      	strh	r2, [r3, #0]
    if (send) {
 800572a:	1cfb      	adds	r3, r7, #3
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <CreateMessage+0x2f6>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005732:	4b48      	ldr	r3, [pc, #288]	@ (8005854 <CreateMessage+0x3e4>)
 8005734:	0018      	movs	r0, r3
 8005736:	f7fa fd19 	bl	800016c <strlen>
 800573a:	0003      	movs	r3, r0
 800573c:	b29a      	uxth	r2, r3
 800573e:	4b45      	ldr	r3, [pc, #276]	@ (8005854 <CreateMessage+0x3e4>)
 8005740:	0011      	movs	r1, r2
 8005742:	0018      	movs	r0, r3
 8005744:	f7ff fb8c 	bl	8004e60 <ESP_Send>
 8005748:	0003      	movs	r3, r0
 800574a:	001a      	movs	r2, r3
 800574c:	4b49      	ldr	r3, [pc, #292]	@ (8005874 <CreateMessage+0x404>)
 800574e:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005750:	4b49      	ldr	r3, [pc, #292]	@ (8005878 <CreateMessage+0x408>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	001a      	movs	r2, r3
 8005756:	4b47      	ldr	r3, [pc, #284]	@ (8005874 <CreateMessage+0x404>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	1e5a      	subs	r2, r3, #1
 800575e:	4193      	sbcs	r3, r2
 8005760:	b2da      	uxtb	r2, r3
 8005762:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <CreateMessage+0x408>)
 8005764:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 8005766:	f007 fef3 	bl	800d550 <IsBMP280SensorPresent>
 800576a:	1e03      	subs	r3, r0, #0
 800576c:	d100      	bne.n	8005770 <CreateMessage+0x300>
 800576e:	e0e1      	b.n	8005934 <CreateMessage+0x4c4>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005770:	4b3a      	ldr	r3, [pc, #232]	@ (800585c <CreateMessage+0x3ec>)
 8005772:	4850      	ldr	r0, [pc, #320]	@ (80058b4 <CreateMessage+0x444>)
 8005774:	220c      	movs	r2, #12
 8005776:	0019      	movs	r1, r3
 8005778:	f006 fd22 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 800577c:	4a4e      	ldr	r2, [pc, #312]	@ (80058b8 <CreateMessage+0x448>)
 800577e:	494f      	ldr	r1, [pc, #316]	@ (80058bc <CreateMessage+0x44c>)
 8005780:	4b36      	ldr	r3, [pc, #216]	@ (800585c <CreateMessage+0x3ec>)
 8005782:	0018      	movs	r0, r3
 8005784:	f7ff fd7c 	bl	8005280 <isKeyValid>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d046      	beq.n	800581a <CreateMessage+0x3aa>
 800578c:	4b36      	ldr	r3, [pc, #216]	@ (8005868 <CreateMessage+0x3f8>)
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	2100      	movs	r1, #0
 8005792:	1c18      	adds	r0, r3, #0
 8005794:	f7fa fec6 	bl	8000524 <__aeabi_fcmpeq>
 8005798:	1e03      	subs	r3, r0, #0
 800579a:	d13e      	bne.n	800581a <CreateMessage+0x3aa>
      uint8ArrayToString(Buffer, keybuffer);
 800579c:	4a2f      	ldr	r2, [pc, #188]	@ (800585c <CreateMessage+0x3ec>)
 800579e:	4b31      	ldr	r3, [pc, #196]	@ (8005864 <CreateMessage+0x3f4>)
 80057a0:	0011      	movs	r1, r2
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7ff fd9c 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 80057a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005868 <CreateMessage+0x3f8>)
 80057aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ac:	1c18      	adds	r0, r3, #0
 80057ae:	f7fe f871 	bl	8003894 <__aeabi_f2d>
 80057b2:	0002      	movs	r2, r0
 80057b4:	000b      	movs	r3, r1
 80057b6:	4c2b      	ldr	r4, [pc, #172]	@ (8005864 <CreateMessage+0x3f4>)
 80057b8:	4931      	ldr	r1, [pc, #196]	@ (8005880 <CreateMessage+0x410>)
 80057ba:	4826      	ldr	r0, [pc, #152]	@ (8005854 <CreateMessage+0x3e4>)
 80057bc:	9200      	str	r2, [sp, #0]
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	0022      	movs	r2, r4
 80057c2:	f020 fe83 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80057c6:	4b23      	ldr	r3, [pc, #140]	@ (8005854 <CreateMessage+0x3e4>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7fa fccf 	bl	800016c <strlen>
 80057ce:	0003      	movs	r3, r0
 80057d0:	b299      	uxth	r1, r3
 80057d2:	220e      	movs	r2, #14
 80057d4:	18bb      	adds	r3, r7, r2
 80057d6:	18ba      	adds	r2, r7, r2
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	188a      	adds	r2, r1, r2
 80057dc:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057de:	1cfb      	adds	r3, r7, #3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <CreateMessage+0x3aa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005854 <CreateMessage+0x3e4>)
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7fa fcbf 	bl	800016c <strlen>
 80057ee:	0003      	movs	r3, r0
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <CreateMessage+0x3e4>)
 80057f4:	0011      	movs	r1, r2
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7ff fb32 	bl	8004e60 <ESP_Send>
 80057fc:	0003      	movs	r3, r0
 80057fe:	001a      	movs	r2, r3
 8005800:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <CreateMessage+0x404>)
 8005802:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005804:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <CreateMessage+0x408>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	001a      	movs	r2, r3
 800580a:	4b1a      	ldr	r3, [pc, #104]	@ (8005874 <CreateMessage+0x404>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4013      	ands	r3, r2
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	4193      	sbcs	r3, r2
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <CreateMessage+0x408>)
 8005818:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 800581a:	4b10      	ldr	r3, [pc, #64]	@ (800585c <CreateMessage+0x3ec>)
 800581c:	4828      	ldr	r0, [pc, #160]	@ (80058c0 <CreateMessage+0x450>)
 800581e:	220c      	movs	r2, #12
 8005820:	0019      	movs	r1, r3
 8005822:	f006 fccd 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005826:	4a27      	ldr	r2, [pc, #156]	@ (80058c4 <CreateMessage+0x454>)
 8005828:	4924      	ldr	r1, [pc, #144]	@ (80058bc <CreateMessage+0x44c>)
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <CreateMessage+0x3ec>)
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff fd27 	bl	8005280 <isKeyValid>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d100      	bne.n	8005838 <CreateMessage+0x3c8>
 8005836:	e07d      	b.n	8005934 <CreateMessage+0x4c4>
      uint8ArrayToString(Buffer, keybuffer);
 8005838:	4a08      	ldr	r2, [pc, #32]	@ (800585c <CreateMessage+0x3ec>)
 800583a:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <CreateMessage+0x3f4>)
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff fd4e 	bl	80052e0 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 8005844:	4b08      	ldr	r3, [pc, #32]	@ (8005868 <CreateMessage+0x3f8>)
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	1c18      	adds	r0, r3, #0
 800584a:	e03d      	b.n	80058c8 <CreateMessage+0x458>
 800584c:	20000814 	.word	0x20000814
 8005850:	0802e0f8 	.word	0x0802e0f8
 8005854:	200005c4 	.word	0x200005c4
 8005858:	0802aecc 	.word	0x0802aecc
 800585c:	20000834 	.word	0x20000834
 8005860:	0808000c 	.word	0x0808000c
 8005864:	20000840 	.word	0x20000840
 8005868:	20000704 	.word	0x20000704
 800586c:	0802aed0 	.word	0x0802aed0
 8005870:	200005c5 	.word	0x200005c5
 8005874:	20000859 	.word	0x20000859
 8005878:	20000032 	.word	0x20000032
 800587c:	08080018 	.word	0x08080018
 8005880:	0802aef0 	.word	0x0802aef0
 8005884:	08080030 	.word	0x08080030
 8005888:	0802af10 	.word	0x0802af10
 800588c:	08080084 	.word	0x08080084
 8005890:	0802af30 	.word	0x0802af30
 8005894:	0802af3c 	.word	0x0802af3c
 8005898:	2000215c 	.word	0x2000215c
 800589c:	0802af48 	.word	0x0802af48
 80058a0:	080801a0 	.word	0x080801a0
 80058a4:	0802af68 	.word	0x0802af68
 80058a8:	0802af70 	.word	0x0802af70
 80058ac:	2000085c 	.word	0x2000085c
 80058b0:	0802af78 	.word	0x0802af78
 80058b4:	08080188 	.word	0x08080188
 80058b8:	0802af98 	.word	0x0802af98
 80058bc:	0802af9c 	.word	0x0802af9c
 80058c0:	080800e0 	.word	0x080800e0
 80058c4:	0802afa4 	.word	0x0802afa4
 80058c8:	f7fd ffe4 	bl	8003894 <__aeabi_f2d>
 80058cc:	0002      	movs	r2, r0
 80058ce:	000b      	movs	r3, r1
 80058d0:	4ce3      	ldr	r4, [pc, #908]	@ (8005c60 <CreateMessage+0x7f0>)
 80058d2:	49e4      	ldr	r1, [pc, #912]	@ (8005c64 <CreateMessage+0x7f4>)
 80058d4:	48e4      	ldr	r0, [pc, #912]	@ (8005c68 <CreateMessage+0x7f8>)
 80058d6:	9200      	str	r2, [sp, #0]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	0022      	movs	r2, r4
 80058dc:	f020 fdf6 	bl	80264cc <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 80058e0:	4be1      	ldr	r3, [pc, #900]	@ (8005c68 <CreateMessage+0x7f8>)
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7fa fc42 	bl	800016c <strlen>
 80058e8:	0003      	movs	r3, r0
 80058ea:	b299      	uxth	r1, r3
 80058ec:	220e      	movs	r2, #14
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	18ba      	adds	r2, r7, r2
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	188a      	adds	r2, r1, r2
 80058f6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058f8:	1cfb      	adds	r3, r7, #3
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <CreateMessage+0x4c4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005900:	4bd9      	ldr	r3, [pc, #868]	@ (8005c68 <CreateMessage+0x7f8>)
 8005902:	0018      	movs	r0, r3
 8005904:	f7fa fc32 	bl	800016c <strlen>
 8005908:	0003      	movs	r3, r0
 800590a:	b29a      	uxth	r2, r3
 800590c:	4bd6      	ldr	r3, [pc, #856]	@ (8005c68 <CreateMessage+0x7f8>)
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff faa5 	bl	8004e60 <ESP_Send>
 8005916:	0003      	movs	r3, r0
 8005918:	001a      	movs	r2, r3
 800591a:	4bd4      	ldr	r3, [pc, #848]	@ (8005c6c <CreateMessage+0x7fc>)
 800591c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800591e:	4bd4      	ldr	r3, [pc, #848]	@ (8005c70 <CreateMessage+0x800>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	001a      	movs	r2, r3
 8005924:	4bd1      	ldr	r3, [pc, #836]	@ (8005c6c <CreateMessage+0x7fc>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	4013      	ands	r3, r2
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	4193      	sbcs	r3, r2
 800592e:	b2da      	uxtb	r2, r3
 8005930:	4bcf      	ldr	r3, [pc, #828]	@ (8005c70 <CreateMessage+0x800>)
 8005932:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005934:	4bcf      	ldr	r3, [pc, #828]	@ (8005c74 <CreateMessage+0x804>)
 8005936:	48d0      	ldr	r0, [pc, #832]	@ (8005c78 <CreateMessage+0x808>)
 8005938:	220c      	movs	r2, #12
 800593a:	0019      	movs	r1, r3
 800593c:	f006 fc40 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "MIC", "dBA")) {
 8005940:	4ace      	ldr	r2, [pc, #824]	@ (8005c7c <CreateMessage+0x80c>)
 8005942:	49cf      	ldr	r1, [pc, #828]	@ (8005c80 <CreateMessage+0x810>)
 8005944:	4bcb      	ldr	r3, [pc, #812]	@ (8005c74 <CreateMessage+0x804>)
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff fc9a 	bl	8005280 <isKeyValid>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d03e      	beq.n	80059ce <CreateMessage+0x55e>
    uint8ArrayToString(Buffer, keybuffer);
 8005950:	4ac8      	ldr	r2, [pc, #800]	@ (8005c74 <CreateMessage+0x804>)
 8005952:	4bc3      	ldr	r3, [pc, #780]	@ (8005c60 <CreateMessage+0x7f0>)
 8005954:	0011      	movs	r1, r2
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff fcc2 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 800595c:	4bc9      	ldr	r3, [pc, #804]	@ (8005c84 <CreateMessage+0x814>)
 800595e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005960:	1c18      	adds	r0, r3, #0
 8005962:	f7fd ff97 	bl	8003894 <__aeabi_f2d>
 8005966:	0002      	movs	r2, r0
 8005968:	000b      	movs	r3, r1
 800596a:	4cbd      	ldr	r4, [pc, #756]	@ (8005c60 <CreateMessage+0x7f0>)
 800596c:	49bd      	ldr	r1, [pc, #756]	@ (8005c64 <CreateMessage+0x7f4>)
 800596e:	48be      	ldr	r0, [pc, #760]	@ (8005c68 <CreateMessage+0x7f8>)
 8005970:	9200      	str	r2, [sp, #0]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	0022      	movs	r2, r4
 8005976:	f020 fda9 	bl	80264cc <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
    index += strlen(message);
 800597a:	4bbb      	ldr	r3, [pc, #748]	@ (8005c68 <CreateMessage+0x7f8>)
 800597c:	0018      	movs	r0, r3
 800597e:	f7fa fbf5 	bl	800016c <strlen>
 8005982:	0003      	movs	r3, r0
 8005984:	b299      	uxth	r1, r3
 8005986:	220e      	movs	r2, #14
 8005988:	18bb      	adds	r3, r7, r2
 800598a:	18ba      	adds	r2, r7, r2
 800598c:	8812      	ldrh	r2, [r2, #0]
 800598e:	188a      	adds	r2, r1, r2
 8005990:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005992:	1cfb      	adds	r3, r7, #3
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d019      	beq.n	80059ce <CreateMessage+0x55e>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800599a:	4bb3      	ldr	r3, [pc, #716]	@ (8005c68 <CreateMessage+0x7f8>)
 800599c:	0018      	movs	r0, r3
 800599e:	f7fa fbe5 	bl	800016c <strlen>
 80059a2:	0003      	movs	r3, r0
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	4bb0      	ldr	r3, [pc, #704]	@ (8005c68 <CreateMessage+0x7f8>)
 80059a8:	0011      	movs	r1, r2
 80059aa:	0018      	movs	r0, r3
 80059ac:	f7ff fa58 	bl	8004e60 <ESP_Send>
 80059b0:	0003      	movs	r3, r0
 80059b2:	001a      	movs	r2, r3
 80059b4:	4bad      	ldr	r3, [pc, #692]	@ (8005c6c <CreateMessage+0x7fc>)
 80059b6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80059b8:	4bad      	ldr	r3, [pc, #692]	@ (8005c70 <CreateMessage+0x800>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	001a      	movs	r2, r3
 80059be:	4bab      	ldr	r3, [pc, #684]	@ (8005c6c <CreateMessage+0x7fc>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4013      	ands	r3, r2
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	4193      	sbcs	r3, r2
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4ba9      	ldr	r3, [pc, #676]	@ (8005c70 <CreateMessage+0x800>)
 80059cc:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 80059ce:	4ba9      	ldr	r3, [pc, #676]	@ (8005c74 <CreateMessage+0x804>)
 80059d0:	48ad      	ldr	r0, [pc, #692]	@ (8005c88 <CreateMessage+0x818>)
 80059d2:	220c      	movs	r2, #12
 80059d4:	0019      	movs	r1, r3
 80059d6:	f006 fbf3 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Solar", "Volt")) {
 80059da:	4aac      	ldr	r2, [pc, #688]	@ (8005c8c <CreateMessage+0x81c>)
 80059dc:	49ac      	ldr	r1, [pc, #688]	@ (8005c90 <CreateMessage+0x820>)
 80059de:	4ba5      	ldr	r3, [pc, #660]	@ (8005c74 <CreateMessage+0x804>)
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fc4d 	bl	8005280 <isKeyValid>
 80059e6:	1e03      	subs	r3, r0, #0
 80059e8:	d03e      	beq.n	8005a68 <CreateMessage+0x5f8>
    uint8ArrayToString(Buffer, keybuffer);
 80059ea:	4aa2      	ldr	r2, [pc, #648]	@ (8005c74 <CreateMessage+0x804>)
 80059ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005c60 <CreateMessage+0x7f0>)
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7ff fc75 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 80059f6:	4ba7      	ldr	r3, [pc, #668]	@ (8005c94 <CreateMessage+0x824>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1c18      	adds	r0, r3, #0
 80059fc:	f7fd ff4a 	bl	8003894 <__aeabi_f2d>
 8005a00:	0002      	movs	r2, r0
 8005a02:	000b      	movs	r3, r1
 8005a04:	4c96      	ldr	r4, [pc, #600]	@ (8005c60 <CreateMessage+0x7f0>)
 8005a06:	4997      	ldr	r1, [pc, #604]	@ (8005c64 <CreateMessage+0x7f4>)
 8005a08:	4897      	ldr	r0, [pc, #604]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a0a:	9200      	str	r2, [sp, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	0022      	movs	r2, r4
 8005a10:	f020 fd5c 	bl	80264cc <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 8005a14:	4b94      	ldr	r3, [pc, #592]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fa fba8 	bl	800016c <strlen>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	b299      	uxth	r1, r3
 8005a20:	220e      	movs	r2, #14
 8005a22:	18bb      	adds	r3, r7, r2
 8005a24:	18ba      	adds	r2, r7, r2
 8005a26:	8812      	ldrh	r2, [r2, #0]
 8005a28:	188a      	adds	r2, r1, r2
 8005a2a:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005a2c:	1cfb      	adds	r3, r7, #3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d019      	beq.n	8005a68 <CreateMessage+0x5f8>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005a34:	4b8c      	ldr	r3, [pc, #560]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7fa fb98 	bl	800016c <strlen>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	4b89      	ldr	r3, [pc, #548]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff fa0b 	bl	8004e60 <ESP_Send>
 8005a4a:	0003      	movs	r3, r0
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	4b87      	ldr	r3, [pc, #540]	@ (8005c6c <CreateMessage+0x7fc>)
 8005a50:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005a52:	4b87      	ldr	r3, [pc, #540]	@ (8005c70 <CreateMessage+0x800>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	001a      	movs	r2, r3
 8005a58:	4b84      	ldr	r3, [pc, #528]	@ (8005c6c <CreateMessage+0x7fc>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	1e5a      	subs	r2, r3, #1
 8005a60:	4193      	sbcs	r3, r2
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	4b82      	ldr	r3, [pc, #520]	@ (8005c70 <CreateMessage+0x800>)
 8005a66:	701a      	strb	r2, [r3, #0]
    }
  }

  if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005a68:	4b8b      	ldr	r3, [pc, #556]	@ (8005c98 <CreateMessage+0x828>)
 8005a6a:	791b      	ldrb	r3, [r3, #4]
 8005a6c:	2b35      	cmp	r3, #53	@ 0x35
 8005a6e:	d149      	bne.n	8005b04 <CreateMessage+0x694>
 8005a70:	f004 f936 	bl	8009ce0 <Check_USB_PowerOn>
 8005a74:	1e03      	subs	r3, r0, #0
 8005a76:	d045      	beq.n	8005b04 <CreateMessage+0x694>
    ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005a78:	4b7e      	ldr	r3, [pc, #504]	@ (8005c74 <CreateMessage+0x804>)
 8005a7a:	4888      	ldr	r0, [pc, #544]	@ (8005c9c <CreateMessage+0x82c>)
 8005a7c:	220c      	movs	r2, #12
 8005a7e:	0019      	movs	r1, r3
 8005a80:	f006 fb9e 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "NOx", "NOxr")) {
 8005a84:	4a86      	ldr	r2, [pc, #536]	@ (8005ca0 <CreateMessage+0x830>)
 8005a86:	4987      	ldr	r1, [pc, #540]	@ (8005ca4 <CreateMessage+0x834>)
 8005a88:	4b7a      	ldr	r3, [pc, #488]	@ (8005c74 <CreateMessage+0x804>)
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7ff fbf8 	bl	8005280 <isKeyValid>
 8005a90:	1e03      	subs	r3, r0, #0
 8005a92:	d037      	beq.n	8005b04 <CreateMessage+0x694>
      uint8ArrayToString(Buffer, keybuffer);
 8005a94:	4a77      	ldr	r2, [pc, #476]	@ (8005c74 <CreateMessage+0x804>)
 8005a96:	4b72      	ldr	r3, [pc, #456]	@ (8005c60 <CreateMessage+0x7f0>)
 8005a98:	0011      	movs	r1, r2
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7ff fc20 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005aa0:	4b78      	ldr	r3, [pc, #480]	@ (8005c84 <CreateMessage+0x814>)
 8005aa2:	224e      	movs	r2, #78	@ 0x4e
 8005aa4:	5a9b      	ldrh	r3, [r3, r2]
 8005aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8005c60 <CreateMessage+0x7f0>)
 8005aa8:	497f      	ldr	r1, [pc, #508]	@ (8005ca8 <CreateMessage+0x838>)
 8005aaa:	486f      	ldr	r0, [pc, #444]	@ (8005c68 <CreateMessage+0x7f8>)
 8005aac:	f020 fd0e 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005ab0:	4b6d      	ldr	r3, [pc, #436]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7fa fb5a 	bl	800016c <strlen>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	b299      	uxth	r1, r3
 8005abc:	220e      	movs	r2, #14
 8005abe:	18bb      	adds	r3, r7, r2
 8005ac0:	18ba      	adds	r2, r7, r2
 8005ac2:	8812      	ldrh	r2, [r2, #0]
 8005ac4:	188a      	adds	r2, r1, r2
 8005ac6:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ac8:	1cfb      	adds	r3, r7, #3
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d019      	beq.n	8005b04 <CreateMessage+0x694>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ad0:	4b65      	ldr	r3, [pc, #404]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7fa fb4a 	bl	800016c <strlen>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	4b62      	ldr	r3, [pc, #392]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ade:	0011      	movs	r1, r2
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff f9bd 	bl	8004e60 <ESP_Send>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	001a      	movs	r2, r3
 8005aea:	4b60      	ldr	r3, [pc, #384]	@ (8005c6c <CreateMessage+0x7fc>)
 8005aec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005aee:	4b60      	ldr	r3, [pc, #384]	@ (8005c70 <CreateMessage+0x800>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	001a      	movs	r2, r3
 8005af4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c6c <CreateMessage+0x7fc>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4013      	ands	r3, r2
 8005afa:	1e5a      	subs	r2, r3, #1
 8005afc:	4193      	sbcs	r3, r2
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	4b5b      	ldr	r3, [pc, #364]	@ (8005c70 <CreateMessage+0x800>)
 8005b02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005b04:	4b5b      	ldr	r3, [pc, #364]	@ (8005c74 <CreateMessage+0x804>)
 8005b06:	4869      	ldr	r0, [pc, #420]	@ (8005cac <CreateMessage+0x83c>)
 8005b08:	220c      	movs	r2, #12
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	f006 fb58 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005b10:	4b61      	ldr	r3, [pc, #388]	@ (8005c98 <CreateMessage+0x828>)
 8005b12:	791b      	ldrb	r3, [r3, #4]
 8005b14:	2b34      	cmp	r3, #52	@ 0x34
 8005b16:	d003      	beq.n	8005b20 <CreateMessage+0x6b0>
 8005b18:	4b5f      	ldr	r3, [pc, #380]	@ (8005c98 <CreateMessage+0x828>)
 8005b1a:	791b      	ldrb	r3, [r3, #4]
 8005b1c:	2b35      	cmp	r3, #53	@ 0x35
 8005b1e:	d14e      	bne.n	8005bbe <CreateMessage+0x74e>
 8005b20:	4a63      	ldr	r2, [pc, #396]	@ (8005cb0 <CreateMessage+0x840>)
 8005b22:	4964      	ldr	r1, [pc, #400]	@ (8005cb4 <CreateMessage+0x844>)
 8005b24:	4b53      	ldr	r3, [pc, #332]	@ (8005c74 <CreateMessage+0x804>)
 8005b26:	0018      	movs	r0, r3
 8005b28:	f7ff fbaa 	bl	8005280 <isKeyValid>
 8005b2c:	1e03      	subs	r3, r0, #0
 8005b2e:	d046      	beq.n	8005bbe <CreateMessage+0x74e>
    uint8ArrayToString(Buffer, keybuffer);
 8005b30:	4a50      	ldr	r2, [pc, #320]	@ (8005c74 <CreateMessage+0x804>)
 8005b32:	4b4b      	ldr	r3, [pc, #300]	@ (8005c60 <CreateMessage+0x7f0>)
 8005b34:	0011      	movs	r1, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7ff fbd2 	bl	80052e0 <uint8ArrayToString>
    if (isKeyValid(keybuffer, "Sen5x", "temp")) {
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb8 <CreateMessage+0x848>)
 8005b3e:	495f      	ldr	r1, [pc, #380]	@ (8005cbc <CreateMessage+0x84c>)
 8005b40:	4b4c      	ldr	r3, [pc, #304]	@ (8005c74 <CreateMessage+0x804>)
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7ff fb9c 	bl	8005280 <isKeyValid>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d038      	beq.n	8005bbe <CreateMessage+0x74e>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c84 <CreateMessage+0x814>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	1c18      	adds	r0, r3, #0
 8005b52:	f7fd fe9f 	bl	8003894 <__aeabi_f2d>
 8005b56:	0002      	movs	r2, r0
 8005b58:	000b      	movs	r3, r1
 8005b5a:	4c41      	ldr	r4, [pc, #260]	@ (8005c60 <CreateMessage+0x7f0>)
 8005b5c:	4958      	ldr	r1, [pc, #352]	@ (8005cc0 <CreateMessage+0x850>)
 8005b5e:	4842      	ldr	r0, [pc, #264]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b60:	9200      	str	r2, [sp, #0]
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	0022      	movs	r2, r4
 8005b66:	f020 fcb1 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f7fa fafd 	bl	800016c <strlen>
 8005b72:	0003      	movs	r3, r0
 8005b74:	b299      	uxth	r1, r3
 8005b76:	220e      	movs	r2, #14
 8005b78:	18bb      	adds	r3, r7, r2
 8005b7a:	18ba      	adds	r2, r7, r2
 8005b7c:	8812      	ldrh	r2, [r2, #0]
 8005b7e:	188a      	adds	r2, r1, r2
 8005b80:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b82:	1cfb      	adds	r3, r7, #3
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d019      	beq.n	8005bbe <CreateMessage+0x74e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b8a:	4b37      	ldr	r3, [pc, #220]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7fa faed 	bl	800016c <strlen>
 8005b92:	0003      	movs	r3, r0
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	4b34      	ldr	r3, [pc, #208]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b98:	0011      	movs	r1, r2
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff f960 	bl	8004e60 <ESP_Send>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <CreateMessage+0x7fc>)
 8005ba6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ba8:	4b31      	ldr	r3, [pc, #196]	@ (8005c70 <CreateMessage+0x800>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	001a      	movs	r2, r3
 8005bae:	4b2f      	ldr	r3, [pc, #188]	@ (8005c6c <CreateMessage+0x7fc>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	1e5a      	subs	r2, r3, #1
 8005bb6:	4193      	sbcs	r3, r2
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <CreateMessage+0x800>)
 8005bbc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <CreateMessage+0x804>)
 8005bc0:	4840      	ldr	r0, [pc, #256]	@ (8005cc4 <CreateMessage+0x854>)
 8005bc2:	220c      	movs	r2, #12
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	f006 fafb 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005bca:	4b33      	ldr	r3, [pc, #204]	@ (8005c98 <CreateMessage+0x828>)
 8005bcc:	791b      	ldrb	r3, [r3, #4]
 8005bce:	2b34      	cmp	r3, #52	@ 0x34
 8005bd0:	d004      	beq.n	8005bdc <CreateMessage+0x76c>
 8005bd2:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <CreateMessage+0x828>)
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	2b35      	cmp	r3, #53	@ 0x35
 8005bd8:	d000      	beq.n	8005bdc <CreateMessage+0x76c>
 8005bda:	e088      	b.n	8005cee <CreateMessage+0x87e>
 8005bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8005cc8 <CreateMessage+0x858>)
 8005bde:	4935      	ldr	r1, [pc, #212]	@ (8005cb4 <CreateMessage+0x844>)
 8005be0:	4b24      	ldr	r3, [pc, #144]	@ (8005c74 <CreateMessage+0x804>)
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff fb4c 	bl	8005280 <isKeyValid>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d100      	bne.n	8005bee <CreateMessage+0x77e>
 8005bec:	e07f      	b.n	8005cee <CreateMessage+0x87e>
    uint8ArrayToString(Buffer, keybuffer);
 8005bee:	4a21      	ldr	r2, [pc, #132]	@ (8005c74 <CreateMessage+0x804>)
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <CreateMessage+0x7f0>)
 8005bf2:	0011      	movs	r1, r2
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff fb73 	bl	80052e0 <uint8ArrayToString>
    if (isKeyValid(keybuffer, "Sen5x", "hum")) {
 8005bfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <CreateMessage+0x85c>)
 8005bfc:	492f      	ldr	r1, [pc, #188]	@ (8005cbc <CreateMessage+0x84c>)
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <CreateMessage+0x804>)
 8005c00:	0018      	movs	r0, r3
 8005c02:	f7ff fb3d 	bl	8005280 <isKeyValid>
 8005c06:	1e03      	subs	r3, r0, #0
 8005c08:	d071      	beq.n	8005cee <CreateMessage+0x87e>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <CreateMessage+0x814>)
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	1c18      	adds	r0, r3, #0
 8005c10:	f7fd fe40 	bl	8003894 <__aeabi_f2d>
 8005c14:	0002      	movs	r2, r0
 8005c16:	000b      	movs	r3, r1
 8005c18:	4c11      	ldr	r4, [pc, #68]	@ (8005c60 <CreateMessage+0x7f0>)
 8005c1a:	4929      	ldr	r1, [pc, #164]	@ (8005cc0 <CreateMessage+0x850>)
 8005c1c:	4812      	ldr	r0, [pc, #72]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c1e:	9200      	str	r2, [sp, #0]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	0022      	movs	r2, r4
 8005c24:	f020 fc52 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005c28:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fa fa9e 	bl	800016c <strlen>
 8005c30:	0003      	movs	r3, r0
 8005c32:	b299      	uxth	r1, r3
 8005c34:	220e      	movs	r2, #14
 8005c36:	18bb      	adds	r3, r7, r2
 8005c38:	18ba      	adds	r2, r7, r2
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	188a      	adds	r2, r1, r2
 8005c3e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c40:	1cfb      	adds	r3, r7, #3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d052      	beq.n	8005cee <CreateMessage+0x87e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c48:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7fa fa8e 	bl	800016c <strlen>
 8005c50:	0003      	movs	r3, r0
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c56:	0011      	movs	r1, r2
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7ff f901 	bl	8004e60 <ESP_Send>
 8005c5e:	e037      	b.n	8005cd0 <CreateMessage+0x860>
 8005c60:	20000840 	.word	0x20000840
 8005c64:	0802aef0 	.word	0x0802aef0
 8005c68:	200005c4 	.word	0x200005c4
 8005c6c:	20000859 	.word	0x20000859
 8005c70:	20000032 	.word	0x20000032
 8005c74:	20000834 	.word	0x20000834
 8005c78:	08080048 	.word	0x08080048
 8005c7c:	0802afb0 	.word	0x0802afb0
 8005c80:	0802afb4 	.word	0x0802afb4
 8005c84:	20000704 	.word	0x20000704
 8005c88:	08080078 	.word	0x08080078
 8005c8c:	0802afb8 	.word	0x0802afb8
 8005c90:	0802afc0 	.word	0x0802afc0
 8005c94:	200005c0 	.word	0x200005c0
 8005c98:	200011c0 	.word	0x200011c0
 8005c9c:	08080024 	.word	0x08080024
 8005ca0:	0802afc8 	.word	0x0802afc8
 8005ca4:	0802afd0 	.word	0x0802afd0
 8005ca8:	0802af10 	.word	0x0802af10
 8005cac:	08080170 	.word	0x08080170
 8005cb0:	0802afd4 	.word	0x0802afd4
 8005cb4:	0802afe0 	.word	0x0802afe0
 8005cb8:	0802afe8 	.word	0x0802afe8
 8005cbc:	0802aff0 	.word	0x0802aff0
 8005cc0:	0802aff8 	.word	0x0802aff8
 8005cc4:	0808017c 	.word	0x0808017c
 8005cc8:	0802b018 	.word	0x0802b018
 8005ccc:	0802b024 	.word	0x0802b024
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	4be9      	ldr	r3, [pc, #932]	@ (800607c <CreateMessage+0xc0c>)
 8005cd6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cd8:	4be9      	ldr	r3, [pc, #932]	@ (8006080 <CreateMessage+0xc10>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	001a      	movs	r2, r3
 8005cde:	4be7      	ldr	r3, [pc, #924]	@ (800607c <CreateMessage+0xc0c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	4193      	sbcs	r3, r2
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4be5      	ldr	r3, [pc, #916]	@ (8006080 <CreateMessage+0xc10>)
 8005cec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (sen5x_Get_sen5x_enable_state() && (batteryStatus > BATTERY_LOW)) {
 8005cee:	f008 fca5 	bl	800e63c <sen5x_Get_sen5x_enable_state>
 8005cf2:	1e03      	subs	r3, r0, #0
 8005cf4:	d100      	bne.n	8005cf8 <CreateMessage+0x888>
 8005cf6:	e138      	b.n	8005f6a <CreateMessage+0xafa>
 8005cf8:	4be2      	ldr	r3, [pc, #904]	@ (8006084 <CreateMessage+0xc14>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d800      	bhi.n	8005d02 <CreateMessage+0x892>
 8005d00:	e133      	b.n	8005f6a <CreateMessage+0xafa>
    ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005d02:	4be1      	ldr	r3, [pc, #900]	@ (8006088 <CreateMessage+0xc18>)
 8005d04:	48e1      	ldr	r0, [pc, #900]	@ (800608c <CreateMessage+0xc1c>)
 8005d06:	220c      	movs	r2, #12
 8005d08:	0019      	movs	r1, r3
 8005d0a:	f006 fa59 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005d0e:	4ae0      	ldr	r2, [pc, #896]	@ (8006090 <CreateMessage+0xc20>)
 8005d10:	49e0      	ldr	r1, [pc, #896]	@ (8006094 <CreateMessage+0xc24>)
 8005d12:	4bdd      	ldr	r3, [pc, #884]	@ (8006088 <CreateMessage+0xc18>)
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fab3 	bl	8005280 <isKeyValid>
 8005d1a:	1e03      	subs	r3, r0, #0
 8005d1c:	d03e      	beq.n	8005d9c <CreateMessage+0x92c>
      uint8ArrayToString(Buffer, keybuffer);
 8005d1e:	4ada      	ldr	r2, [pc, #872]	@ (8006088 <CreateMessage+0xc18>)
 8005d20:	4bdd      	ldr	r3, [pc, #884]	@ (8006098 <CreateMessage+0xc28>)
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff fadb 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005d2a:	4bdc      	ldr	r3, [pc, #880]	@ (800609c <CreateMessage+0xc2c>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	1c18      	adds	r0, r3, #0
 8005d30:	f7fd fdb0 	bl	8003894 <__aeabi_f2d>
 8005d34:	0002      	movs	r2, r0
 8005d36:	000b      	movs	r3, r1
 8005d38:	4cd7      	ldr	r4, [pc, #860]	@ (8006098 <CreateMessage+0xc28>)
 8005d3a:	49d9      	ldr	r1, [pc, #868]	@ (80060a0 <CreateMessage+0xc30>)
 8005d3c:	48d9      	ldr	r0, [pc, #868]	@ (80060a4 <CreateMessage+0xc34>)
 8005d3e:	9200      	str	r2, [sp, #0]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	0022      	movs	r2, r4
 8005d44:	f020 fbc2 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
      index += strlen(message);
 8005d48:	4bd6      	ldr	r3, [pc, #856]	@ (80060a4 <CreateMessage+0xc34>)
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f7fa fa0e 	bl	800016c <strlen>
 8005d50:	0003      	movs	r3, r0
 8005d52:	b299      	uxth	r1, r3
 8005d54:	220e      	movs	r2, #14
 8005d56:	18bb      	adds	r3, r7, r2
 8005d58:	18ba      	adds	r2, r7, r2
 8005d5a:	8812      	ldrh	r2, [r2, #0]
 8005d5c:	188a      	adds	r2, r1, r2
 8005d5e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d60:	1cfb      	adds	r3, r7, #3
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d019      	beq.n	8005d9c <CreateMessage+0x92c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d68:	4bce      	ldr	r3, [pc, #824]	@ (80060a4 <CreateMessage+0xc34>)
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7fa f9fe 	bl	800016c <strlen>
 8005d70:	0003      	movs	r3, r0
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	4bcb      	ldr	r3, [pc, #812]	@ (80060a4 <CreateMessage+0xc34>)
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7ff f871 	bl	8004e60 <ESP_Send>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	001a      	movs	r2, r3
 8005d82:	4bbe      	ldr	r3, [pc, #760]	@ (800607c <CreateMessage+0xc0c>)
 8005d84:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d86:	4bbe      	ldr	r3, [pc, #760]	@ (8006080 <CreateMessage+0xc10>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	4bbb      	ldr	r3, [pc, #748]	@ (800607c <CreateMessage+0xc0c>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	4193      	sbcs	r3, r2
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4bb9      	ldr	r3, [pc, #740]	@ (8006080 <CreateMessage+0xc10>)
 8005d9a:	701a      	strb	r2, [r3, #0]
      }
    }
    ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005d9c:	4bba      	ldr	r3, [pc, #744]	@ (8006088 <CreateMessage+0xc18>)
 8005d9e:	48c2      	ldr	r0, [pc, #776]	@ (80060a8 <CreateMessage+0xc38>)
 8005da0:	220c      	movs	r2, #12
 8005da2:	0019      	movs	r1, r3
 8005da4:	f006 fa0c 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM2p5", "particle")) {
 8005da8:	4ab9      	ldr	r2, [pc, #740]	@ (8006090 <CreateMessage+0xc20>)
 8005daa:	49c0      	ldr	r1, [pc, #768]	@ (80060ac <CreateMessage+0xc3c>)
 8005dac:	4bb6      	ldr	r3, [pc, #728]	@ (8006088 <CreateMessage+0xc18>)
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7ff fa66 	bl	8005280 <isKeyValid>
 8005db4:	1e03      	subs	r3, r0, #0
 8005db6:	d03e      	beq.n	8005e36 <CreateMessage+0x9c6>
      uint8ArrayToString(Buffer, keybuffer);
 8005db8:	4ab3      	ldr	r2, [pc, #716]	@ (8006088 <CreateMessage+0xc18>)
 8005dba:	4bb7      	ldr	r3, [pc, #732]	@ (8006098 <CreateMessage+0xc28>)
 8005dbc:	0011      	movs	r1, r2
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7ff fa8e 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005dc4:	4bb5      	ldr	r3, [pc, #724]	@ (800609c <CreateMessage+0xc2c>)
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	1c18      	adds	r0, r3, #0
 8005dca:	f7fd fd63 	bl	8003894 <__aeabi_f2d>
 8005dce:	0002      	movs	r2, r0
 8005dd0:	000b      	movs	r3, r1
 8005dd2:	4cb1      	ldr	r4, [pc, #708]	@ (8006098 <CreateMessage+0xc28>)
 8005dd4:	49b2      	ldr	r1, [pc, #712]	@ (80060a0 <CreateMessage+0xc30>)
 8005dd6:	48b3      	ldr	r0, [pc, #716]	@ (80060a4 <CreateMessage+0xc34>)
 8005dd8:	9200      	str	r2, [sp, #0]
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	0022      	movs	r2, r4
 8005dde:	f020 fb75 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005de2:	4bb0      	ldr	r3, [pc, #704]	@ (80060a4 <CreateMessage+0xc34>)
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fa f9c1 	bl	800016c <strlen>
 8005dea:	0003      	movs	r3, r0
 8005dec:	b299      	uxth	r1, r3
 8005dee:	220e      	movs	r2, #14
 8005df0:	18bb      	adds	r3, r7, r2
 8005df2:	18ba      	adds	r2, r7, r2
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	188a      	adds	r2, r1, r2
 8005df8:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005dfa:	1cfb      	adds	r3, r7, #3
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d019      	beq.n	8005e36 <CreateMessage+0x9c6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e02:	4ba8      	ldr	r3, [pc, #672]	@ (80060a4 <CreateMessage+0xc34>)
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fa f9b1 	bl	800016c <strlen>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	4ba5      	ldr	r3, [pc, #660]	@ (80060a4 <CreateMessage+0xc34>)
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7ff f824 	bl	8004e60 <ESP_Send>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	4b97      	ldr	r3, [pc, #604]	@ (800607c <CreateMessage+0xc0c>)
 8005e1e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e20:	4b97      	ldr	r3, [pc, #604]	@ (8006080 <CreateMessage+0xc10>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	001a      	movs	r2, r3
 8005e26:	4b95      	ldr	r3, [pc, #596]	@ (800607c <CreateMessage+0xc0c>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	4193      	sbcs	r3, r2
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b93      	ldr	r3, [pc, #588]	@ (8006080 <CreateMessage+0xc10>)
 8005e34:	701a      	strb	r2, [r3, #0]
      }
    }
    ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005e36:	4b94      	ldr	r3, [pc, #592]	@ (8006088 <CreateMessage+0xc18>)
 8005e38:	489d      	ldr	r0, [pc, #628]	@ (80060b0 <CreateMessage+0xc40>)
 8005e3a:	220c      	movs	r2, #12
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	f006 f9bf 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005e42:	4a93      	ldr	r2, [pc, #588]	@ (8006090 <CreateMessage+0xc20>)
 8005e44:	499b      	ldr	r1, [pc, #620]	@ (80060b4 <CreateMessage+0xc44>)
 8005e46:	4b90      	ldr	r3, [pc, #576]	@ (8006088 <CreateMessage+0xc18>)
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7ff fa19 	bl	8005280 <isKeyValid>
 8005e4e:	1e03      	subs	r3, r0, #0
 8005e50:	d03e      	beq.n	8005ed0 <CreateMessage+0xa60>
      uint8ArrayToString(Buffer, keybuffer);
 8005e52:	4a8d      	ldr	r2, [pc, #564]	@ (8006088 <CreateMessage+0xc18>)
 8005e54:	4b90      	ldr	r3, [pc, #576]	@ (8006098 <CreateMessage+0xc28>)
 8005e56:	0011      	movs	r1, r2
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7ff fa41 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800609c <CreateMessage+0xc2c>)
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	1c18      	adds	r0, r3, #0
 8005e64:	f7fd fd16 	bl	8003894 <__aeabi_f2d>
 8005e68:	0002      	movs	r2, r0
 8005e6a:	000b      	movs	r3, r1
 8005e6c:	4c8a      	ldr	r4, [pc, #552]	@ (8006098 <CreateMessage+0xc28>)
 8005e6e:	498c      	ldr	r1, [pc, #560]	@ (80060a0 <CreateMessage+0xc30>)
 8005e70:	488c      	ldr	r0, [pc, #560]	@ (80060a4 <CreateMessage+0xc34>)
 8005e72:	9200      	str	r2, [sp, #0]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	0022      	movs	r2, r4
 8005e78:	f020 fb28 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
      index += strlen(message);
 8005e7c:	4b89      	ldr	r3, [pc, #548]	@ (80060a4 <CreateMessage+0xc34>)
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f7fa f974 	bl	800016c <strlen>
 8005e84:	0003      	movs	r3, r0
 8005e86:	b299      	uxth	r1, r3
 8005e88:	220e      	movs	r2, #14
 8005e8a:	18bb      	adds	r3, r7, r2
 8005e8c:	18ba      	adds	r2, r7, r2
 8005e8e:	8812      	ldrh	r2, [r2, #0]
 8005e90:	188a      	adds	r2, r1, r2
 8005e92:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e94:	1cfb      	adds	r3, r7, #3
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d019      	beq.n	8005ed0 <CreateMessage+0xa60>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e9c:	4b81      	ldr	r3, [pc, #516]	@ (80060a4 <CreateMessage+0xc34>)
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7fa f964 	bl	800016c <strlen>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80060a4 <CreateMessage+0xc34>)
 8005eaa:	0011      	movs	r1, r2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fe ffd7 	bl	8004e60 <ESP_Send>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	001a      	movs	r2, r3
 8005eb6:	4b71      	ldr	r3, [pc, #452]	@ (800607c <CreateMessage+0xc0c>)
 8005eb8:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005eba:	4b71      	ldr	r3, [pc, #452]	@ (8006080 <CreateMessage+0xc10>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	4b6e      	ldr	r3, [pc, #440]	@ (800607c <CreateMessage+0xc0c>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	4193      	sbcs	r3, r2
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8006080 <CreateMessage+0xc10>)
 8005ece:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8006088 <CreateMessage+0xc18>)
 8005ed2:	4879      	ldr	r0, [pc, #484]	@ (80060b8 <CreateMessage+0xc48>)
 8005ed4:	220c      	movs	r2, #12
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	f006 f972 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM10", "particle")) {
 8005edc:	4a6c      	ldr	r2, [pc, #432]	@ (8006090 <CreateMessage+0xc20>)
 8005ede:	4977      	ldr	r1, [pc, #476]	@ (80060bc <CreateMessage+0xc4c>)
 8005ee0:	4b69      	ldr	r3, [pc, #420]	@ (8006088 <CreateMessage+0xc18>)
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff f9cc 	bl	8005280 <isKeyValid>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d03e      	beq.n	8005f6a <CreateMessage+0xafa>
      uint8ArrayToString(Buffer, keybuffer);
 8005eec:	4a66      	ldr	r2, [pc, #408]	@ (8006088 <CreateMessage+0xc18>)
 8005eee:	4b6a      	ldr	r3, [pc, #424]	@ (8006098 <CreateMessage+0xc28>)
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff f9f4 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005ef8:	4b68      	ldr	r3, [pc, #416]	@ (800609c <CreateMessage+0xc2c>)
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	1c18      	adds	r0, r3, #0
 8005efe:	f7fd fcc9 	bl	8003894 <__aeabi_f2d>
 8005f02:	0002      	movs	r2, r0
 8005f04:	000b      	movs	r3, r1
 8005f06:	4c64      	ldr	r4, [pc, #400]	@ (8006098 <CreateMessage+0xc28>)
 8005f08:	4965      	ldr	r1, [pc, #404]	@ (80060a0 <CreateMessage+0xc30>)
 8005f0a:	4866      	ldr	r0, [pc, #408]	@ (80060a4 <CreateMessage+0xc34>)
 8005f0c:	9200      	str	r2, [sp, #0]
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	0022      	movs	r2, r4
 8005f12:	f020 fadb 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005f16:	4b63      	ldr	r3, [pc, #396]	@ (80060a4 <CreateMessage+0xc34>)
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fa f927 	bl	800016c <strlen>
 8005f1e:	0003      	movs	r3, r0
 8005f20:	b299      	uxth	r1, r3
 8005f22:	220e      	movs	r2, #14
 8005f24:	18bb      	adds	r3, r7, r2
 8005f26:	18ba      	adds	r2, r7, r2
 8005f28:	8812      	ldrh	r2, [r2, #0]
 8005f2a:	188a      	adds	r2, r1, r2
 8005f2c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f2e:	1cfb      	adds	r3, r7, #3
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d019      	beq.n	8005f6a <CreateMessage+0xafa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f36:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <CreateMessage+0xc34>)
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7fa f917 	bl	800016c <strlen>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	4b58      	ldr	r3, [pc, #352]	@ (80060a4 <CreateMessage+0xc34>)
 8005f44:	0011      	movs	r1, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7fe ff8a 	bl	8004e60 <ESP_Send>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	001a      	movs	r2, r3
 8005f50:	4b4a      	ldr	r3, [pc, #296]	@ (800607c <CreateMessage+0xc0c>)
 8005f52:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f54:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <CreateMessage+0xc10>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	001a      	movs	r2, r3
 8005f5a:	4b48      	ldr	r3, [pc, #288]	@ (800607c <CreateMessage+0xc0c>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	4193      	sbcs	r3, r2
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4b46      	ldr	r3, [pc, #280]	@ (8006080 <CreateMessage+0xc10>)
 8005f68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005f6a:	f007 fae7 	bl	800d53c <IsAHT20SensorPresent>
 8005f6e:	1e03      	subs	r3, r0, #0
 8005f70:	d100      	bne.n	8005f74 <CreateMessage+0xb04>
 8005f72:	e0c7      	b.n	8006104 <CreateMessage+0xc94>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005f74:	4b44      	ldr	r3, [pc, #272]	@ (8006088 <CreateMessage+0xc18>)
 8005f76:	4852      	ldr	r0, [pc, #328]	@ (80060c0 <CreateMessage+0xc50>)
 8005f78:	220c      	movs	r2, #12
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	f006 f920 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005f80:	4a50      	ldr	r2, [pc, #320]	@ (80060c4 <CreateMessage+0xc54>)
 8005f82:	4951      	ldr	r1, [pc, #324]	@ (80060c8 <CreateMessage+0xc58>)
 8005f84:	4b40      	ldr	r3, [pc, #256]	@ (8006088 <CreateMessage+0xc18>)
 8005f86:	0018      	movs	r0, r3
 8005f88:	f7ff f97a 	bl	8005280 <isKeyValid>
 8005f8c:	1e03      	subs	r3, r0, #0
 8005f8e:	d03e      	beq.n	800600e <CreateMessage+0xb9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005f90:	4a3d      	ldr	r2, [pc, #244]	@ (8006088 <CreateMessage+0xc18>)
 8005f92:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <CreateMessage+0xc28>)
 8005f94:	0011      	movs	r1, r2
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7ff f9a2 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800609c <CreateMessage+0xc2c>)
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	1c18      	adds	r0, r3, #0
 8005fa2:	f7fd fc77 	bl	8003894 <__aeabi_f2d>
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	000b      	movs	r3, r1
 8005faa:	4c3b      	ldr	r4, [pc, #236]	@ (8006098 <CreateMessage+0xc28>)
 8005fac:	493c      	ldr	r1, [pc, #240]	@ (80060a0 <CreateMessage+0xc30>)
 8005fae:	483d      	ldr	r0, [pc, #244]	@ (80060a4 <CreateMessage+0xc34>)
 8005fb0:	9200      	str	r2, [sp, #0]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	0022      	movs	r2, r4
 8005fb6:	f020 fa89 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 8005fba:	4b3a      	ldr	r3, [pc, #232]	@ (80060a4 <CreateMessage+0xc34>)
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7fa f8d5 	bl	800016c <strlen>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	b299      	uxth	r1, r3
 8005fc6:	220e      	movs	r2, #14
 8005fc8:	18bb      	adds	r3, r7, r2
 8005fca:	18ba      	adds	r2, r7, r2
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	188a      	adds	r2, r1, r2
 8005fd0:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fd2:	1cfb      	adds	r3, r7, #3
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d019      	beq.n	800600e <CreateMessage+0xb9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fda:	4b32      	ldr	r3, [pc, #200]	@ (80060a4 <CreateMessage+0xc34>)
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7fa f8c5 	bl	800016c <strlen>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80060a4 <CreateMessage+0xc34>)
 8005fe8:	0011      	movs	r1, r2
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7fe ff38 	bl	8004e60 <ESP_Send>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	4b21      	ldr	r3, [pc, #132]	@ (800607c <CreateMessage+0xc0c>)
 8005ff6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ff8:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <CreateMessage+0xc10>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <CreateMessage+0xc0c>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4013      	ands	r3, r2
 8006004:	1e5a      	subs	r2, r3, #1
 8006006:	4193      	sbcs	r3, r2
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b1d      	ldr	r3, [pc, #116]	@ (8006080 <CreateMessage+0xc10>)
 800600c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 800600e:	4b1e      	ldr	r3, [pc, #120]	@ (8006088 <CreateMessage+0xc18>)
 8006010:	482e      	ldr	r0, [pc, #184]	@ (80060cc <CreateMessage+0xc5c>)
 8006012:	220c      	movs	r2, #12
 8006014:	0019      	movs	r1, r3
 8006016:	f006 f8d3 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <CreateMessage+0xc60>)
 800601c:	492a      	ldr	r1, [pc, #168]	@ (80060c8 <CreateMessage+0xc58>)
 800601e:	4b1a      	ldr	r3, [pc, #104]	@ (8006088 <CreateMessage+0xc18>)
 8006020:	0018      	movs	r0, r3
 8006022:	f7ff f92d 	bl	8005280 <isKeyValid>
 8006026:	1e03      	subs	r3, r0, #0
 8006028:	d06c      	beq.n	8006104 <CreateMessage+0xc94>
      uint8ArrayToString(Buffer, keybuffer);
 800602a:	4a17      	ldr	r2, [pc, #92]	@ (8006088 <CreateMessage+0xc18>)
 800602c:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <CreateMessage+0xc28>)
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f7ff f955 	bl	80052e0 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 8006036:	4b19      	ldr	r3, [pc, #100]	@ (800609c <CreateMessage+0xc2c>)
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	1c18      	adds	r0, r3, #0
 800603c:	f7fd fc2a 	bl	8003894 <__aeabi_f2d>
 8006040:	0002      	movs	r2, r0
 8006042:	000b      	movs	r3, r1
 8006044:	4c14      	ldr	r4, [pc, #80]	@ (8006098 <CreateMessage+0xc28>)
 8006046:	4916      	ldr	r1, [pc, #88]	@ (80060a0 <CreateMessage+0xc30>)
 8006048:	4816      	ldr	r0, [pc, #88]	@ (80060a4 <CreateMessage+0xc34>)
 800604a:	9200      	str	r2, [sp, #0]
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	0022      	movs	r2, r4
 8006050:	f020 fa3c 	bl	80264cc <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 8006054:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <CreateMessage+0xc34>)
 8006056:	0018      	movs	r0, r3
 8006058:	f7fa f888 	bl	800016c <strlen>
 800605c:	0003      	movs	r3, r0
 800605e:	b299      	uxth	r1, r3
 8006060:	220e      	movs	r2, #14
 8006062:	18bb      	adds	r3, r7, r2
 8006064:	18ba      	adds	r2, r7, r2
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	188a      	adds	r2, r1, r2
 800606a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800606c:	1cfb      	adds	r3, r7, #3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d047      	beq.n	8006104 <CreateMessage+0xc94>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <CreateMessage+0xc34>)
 8006076:	0018      	movs	r0, r3
 8006078:	e02c      	b.n	80060d4 <CreateMessage+0xc64>
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	20000859 	.word	0x20000859
 8006080:	20000032 	.word	0x20000032
 8006084:	2000215d 	.word	0x2000215d
 8006088:	20000834 	.word	0x20000834
 800608c:	080800b0 	.word	0x080800b0
 8006090:	0802b028 	.word	0x0802b028
 8006094:	0802b034 	.word	0x0802b034
 8006098:	20000840 	.word	0x20000840
 800609c:	20000704 	.word	0x20000704
 80060a0:	0802aef0 	.word	0x0802aef0
 80060a4:	200005c4 	.word	0x200005c4
 80060a8:	08080054 	.word	0x08080054
 80060ac:	0802b038 	.word	0x0802b038
 80060b0:	080800bc 	.word	0x080800bc
 80060b4:	0802b040 	.word	0x0802b040
 80060b8:	08080060 	.word	0x08080060
 80060bc:	0802b044 	.word	0x0802b044
 80060c0:	080800c8 	.word	0x080800c8
 80060c4:	0802afd4 	.word	0x0802afd4
 80060c8:	0802b04c 	.word	0x0802b04c
 80060cc:	080800d4 	.word	0x080800d4
 80060d0:	0802b018 	.word	0x0802b018
 80060d4:	f7fa f84a 	bl	800016c <strlen>
 80060d8:	0003      	movs	r3, r0
 80060da:	b29a      	uxth	r2, r3
 80060dc:	4ba3      	ldr	r3, [pc, #652]	@ (800636c <CreateMessage+0xefc>)
 80060de:	0011      	movs	r1, r2
 80060e0:	0018      	movs	r0, r3
 80060e2:	f7fe febd 	bl	8004e60 <ESP_Send>
 80060e6:	0003      	movs	r3, r0
 80060e8:	001a      	movs	r2, r3
 80060ea:	4ba1      	ldr	r3, [pc, #644]	@ (8006370 <CreateMessage+0xf00>)
 80060ec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80060ee:	4ba1      	ldr	r3, [pc, #644]	@ (8006374 <CreateMessage+0xf04>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	001a      	movs	r2, r3
 80060f4:	4b9e      	ldr	r3, [pc, #632]	@ (8006370 <CreateMessage+0xf00>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	4013      	ands	r3, r2
 80060fa:	1e5a      	subs	r2, r3, #1
 80060fc:	4193      	sbcs	r3, r2
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	4b9c      	ldr	r3, [pc, #624]	@ (8006374 <CreateMessage+0xf04>)
 8006102:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8006104:	f007 fa2e 	bl	800d564 <IsENS160SensorPresent>
 8006108:	1e03      	subs	r3, r0, #0
 800610a:	d100      	bne.n	800610e <CreateMessage+0xc9e>
 800610c:	e0d1      	b.n	80062b2 <CreateMessage+0xe42>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 800610e:	4b9a      	ldr	r3, [pc, #616]	@ (8006378 <CreateMessage+0xf08>)
 8006110:	489a      	ldr	r0, [pc, #616]	@ (800637c <CreateMessage+0xf0c>)
 8006112:	220c      	movs	r2, #12
 8006114:	0019      	movs	r1, r3
 8006116:	f006 f853 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 800611a:	4a99      	ldr	r2, [pc, #612]	@ (8006380 <CreateMessage+0xf10>)
 800611c:	4999      	ldr	r1, [pc, #612]	@ (8006384 <CreateMessage+0xf14>)
 800611e:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <CreateMessage+0xf08>)
 8006120:	0018      	movs	r0, r3
 8006122:	f7ff f8ad 	bl	8005280 <isKeyValid>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d037      	beq.n	800619a <CreateMessage+0xd2a>
      uint8ArrayToString(Buffer, keybuffer);
 800612a:	4a93      	ldr	r2, [pc, #588]	@ (8006378 <CreateMessage+0xf08>)
 800612c:	4b96      	ldr	r3, [pc, #600]	@ (8006388 <CreateMessage+0xf18>)
 800612e:	0011      	movs	r1, r2
 8006130:	0018      	movs	r0, r3
 8006132:	f7ff f8d5 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 8006136:	4b95      	ldr	r3, [pc, #596]	@ (800638c <CreateMessage+0xf1c>)
 8006138:	2255      	movs	r2, #85	@ 0x55
 800613a:	5c9b      	ldrb	r3, [r3, r2]
 800613c:	4a92      	ldr	r2, [pc, #584]	@ (8006388 <CreateMessage+0xf18>)
 800613e:	4994      	ldr	r1, [pc, #592]	@ (8006390 <CreateMessage+0xf20>)
 8006140:	488a      	ldr	r0, [pc, #552]	@ (800636c <CreateMessage+0xefc>)
 8006142:	f020 f9c3 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 8006146:	4b89      	ldr	r3, [pc, #548]	@ (800636c <CreateMessage+0xefc>)
 8006148:	0018      	movs	r0, r3
 800614a:	f7fa f80f 	bl	800016c <strlen>
 800614e:	0003      	movs	r3, r0
 8006150:	b299      	uxth	r1, r3
 8006152:	220e      	movs	r2, #14
 8006154:	18bb      	adds	r3, r7, r2
 8006156:	18ba      	adds	r2, r7, r2
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	188a      	adds	r2, r1, r2
 800615c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800615e:	1cfb      	adds	r3, r7, #3
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d019      	beq.n	800619a <CreateMessage+0xd2a>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006166:	4b81      	ldr	r3, [pc, #516]	@ (800636c <CreateMessage+0xefc>)
 8006168:	0018      	movs	r0, r3
 800616a:	f7f9 ffff 	bl	800016c <strlen>
 800616e:	0003      	movs	r3, r0
 8006170:	b29a      	uxth	r2, r3
 8006172:	4b7e      	ldr	r3, [pc, #504]	@ (800636c <CreateMessage+0xefc>)
 8006174:	0011      	movs	r1, r2
 8006176:	0018      	movs	r0, r3
 8006178:	f7fe fe72 	bl	8004e60 <ESP_Send>
 800617c:	0003      	movs	r3, r0
 800617e:	001a      	movs	r2, r3
 8006180:	4b7b      	ldr	r3, [pc, #492]	@ (8006370 <CreateMessage+0xf00>)
 8006182:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006184:	4b7b      	ldr	r3, [pc, #492]	@ (8006374 <CreateMessage+0xf04>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	001a      	movs	r2, r3
 800618a:	4b79      	ldr	r3, [pc, #484]	@ (8006370 <CreateMessage+0xf00>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	4013      	ands	r3, r2
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	4193      	sbcs	r3, r2
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4b77      	ldr	r3, [pc, #476]	@ (8006374 <CreateMessage+0xf04>)
 8006198:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 800619a:	4b77      	ldr	r3, [pc, #476]	@ (8006378 <CreateMessage+0xf08>)
 800619c:	487d      	ldr	r0, [pc, #500]	@ (8006394 <CreateMessage+0xf24>)
 800619e:	220c      	movs	r2, #12
 80061a0:	0019      	movs	r1, r3
 80061a2:	f006 f80d 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 80061a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006398 <CreateMessage+0xf28>)
 80061a8:	4976      	ldr	r1, [pc, #472]	@ (8006384 <CreateMessage+0xf14>)
 80061aa:	4b73      	ldr	r3, [pc, #460]	@ (8006378 <CreateMessage+0xf08>)
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7ff f867 	bl	8005280 <isKeyValid>
 80061b2:	1e03      	subs	r3, r0, #0
 80061b4:	d037      	beq.n	8006226 <CreateMessage+0xdb6>
      uint8ArrayToString(Buffer, keybuffer);
 80061b6:	4a70      	ldr	r2, [pc, #448]	@ (8006378 <CreateMessage+0xf08>)
 80061b8:	4b73      	ldr	r3, [pc, #460]	@ (8006388 <CreateMessage+0xf18>)
 80061ba:	0011      	movs	r1, r2
 80061bc:	0018      	movs	r0, r3
 80061be:	f7ff f88f 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 80061c2:	4b72      	ldr	r3, [pc, #456]	@ (800638c <CreateMessage+0xf1c>)
 80061c4:	224a      	movs	r2, #74	@ 0x4a
 80061c6:	5a9b      	ldrh	r3, [r3, r2]
 80061c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006388 <CreateMessage+0xf18>)
 80061ca:	4971      	ldr	r1, [pc, #452]	@ (8006390 <CreateMessage+0xf20>)
 80061cc:	4867      	ldr	r0, [pc, #412]	@ (800636c <CreateMessage+0xefc>)
 80061ce:	f020 f97d 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 80061d2:	4b66      	ldr	r3, [pc, #408]	@ (800636c <CreateMessage+0xefc>)
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7f9 ffc9 	bl	800016c <strlen>
 80061da:	0003      	movs	r3, r0
 80061dc:	b299      	uxth	r1, r3
 80061de:	220e      	movs	r2, #14
 80061e0:	18bb      	adds	r3, r7, r2
 80061e2:	18ba      	adds	r2, r7, r2
 80061e4:	8812      	ldrh	r2, [r2, #0]
 80061e6:	188a      	adds	r2, r1, r2
 80061e8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80061ea:	1cfb      	adds	r3, r7, #3
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d019      	beq.n	8006226 <CreateMessage+0xdb6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80061f2:	4b5e      	ldr	r3, [pc, #376]	@ (800636c <CreateMessage+0xefc>)
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7f9 ffb9 	bl	800016c <strlen>
 80061fa:	0003      	movs	r3, r0
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	4b5b      	ldr	r3, [pc, #364]	@ (800636c <CreateMessage+0xefc>)
 8006200:	0011      	movs	r1, r2
 8006202:	0018      	movs	r0, r3
 8006204:	f7fe fe2c 	bl	8004e60 <ESP_Send>
 8006208:	0003      	movs	r3, r0
 800620a:	001a      	movs	r2, r3
 800620c:	4b58      	ldr	r3, [pc, #352]	@ (8006370 <CreateMessage+0xf00>)
 800620e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006210:	4b58      	ldr	r3, [pc, #352]	@ (8006374 <CreateMessage+0xf04>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	001a      	movs	r2, r3
 8006216:	4b56      	ldr	r3, [pc, #344]	@ (8006370 <CreateMessage+0xf00>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	4013      	ands	r3, r2
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	4193      	sbcs	r3, r2
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b54      	ldr	r3, [pc, #336]	@ (8006374 <CreateMessage+0xf04>)
 8006224:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8006226:	4b54      	ldr	r3, [pc, #336]	@ (8006378 <CreateMessage+0xf08>)
 8006228:	485c      	ldr	r0, [pc, #368]	@ (800639c <CreateMessage+0xf2c>)
 800622a:	220c      	movs	r2, #12
 800622c:	0019      	movs	r1, r3
 800622e:	f005 ffc7 	bl	800c1c0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8006232:	4a5b      	ldr	r2, [pc, #364]	@ (80063a0 <CreateMessage+0xf30>)
 8006234:	4953      	ldr	r1, [pc, #332]	@ (8006384 <CreateMessage+0xf14>)
 8006236:	4b50      	ldr	r3, [pc, #320]	@ (8006378 <CreateMessage+0xf08>)
 8006238:	0018      	movs	r0, r3
 800623a:	f7ff f821 	bl	8005280 <isKeyValid>
 800623e:	1e03      	subs	r3, r0, #0
 8006240:	d037      	beq.n	80062b2 <CreateMessage+0xe42>
      uint8ArrayToString(Buffer, keybuffer);
 8006242:	4a4d      	ldr	r2, [pc, #308]	@ (8006378 <CreateMessage+0xf08>)
 8006244:	4b50      	ldr	r3, [pc, #320]	@ (8006388 <CreateMessage+0xf18>)
 8006246:	0011      	movs	r1, r2
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff f849 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 800624e:	4b4f      	ldr	r3, [pc, #316]	@ (800638c <CreateMessage+0xf1c>)
 8006250:	2252      	movs	r2, #82	@ 0x52
 8006252:	5a9b      	ldrh	r3, [r3, r2]
 8006254:	4a4c      	ldr	r2, [pc, #304]	@ (8006388 <CreateMessage+0xf18>)
 8006256:	494e      	ldr	r1, [pc, #312]	@ (8006390 <CreateMessage+0xf20>)
 8006258:	4844      	ldr	r0, [pc, #272]	@ (800636c <CreateMessage+0xefc>)
 800625a:	f020 f937 	bl	80264cc <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 800625e:	4b43      	ldr	r3, [pc, #268]	@ (800636c <CreateMessage+0xefc>)
 8006260:	0018      	movs	r0, r3
 8006262:	f7f9 ff83 	bl	800016c <strlen>
 8006266:	0003      	movs	r3, r0
 8006268:	b299      	uxth	r1, r3
 800626a:	220e      	movs	r2, #14
 800626c:	18bb      	adds	r3, r7, r2
 800626e:	18ba      	adds	r2, r7, r2
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	188a      	adds	r2, r1, r2
 8006274:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006276:	1cfb      	adds	r3, r7, #3
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d019      	beq.n	80062b2 <CreateMessage+0xe42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800627e:	4b3b      	ldr	r3, [pc, #236]	@ (800636c <CreateMessage+0xefc>)
 8006280:	0018      	movs	r0, r3
 8006282:	f7f9 ff73 	bl	800016c <strlen>
 8006286:	0003      	movs	r3, r0
 8006288:	b29a      	uxth	r2, r3
 800628a:	4b38      	ldr	r3, [pc, #224]	@ (800636c <CreateMessage+0xefc>)
 800628c:	0011      	movs	r1, r2
 800628e:	0018      	movs	r0, r3
 8006290:	f7fe fde6 	bl	8004e60 <ESP_Send>
 8006294:	0003      	movs	r3, r0
 8006296:	001a      	movs	r2, r3
 8006298:	4b35      	ldr	r3, [pc, #212]	@ (8006370 <CreateMessage+0xf00>)
 800629a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800629c:	4b35      	ldr	r3, [pc, #212]	@ (8006374 <CreateMessage+0xf04>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	001a      	movs	r2, r3
 80062a2:	4b33      	ldr	r3, [pc, #204]	@ (8006370 <CreateMessage+0xf00>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	4013      	ands	r3, r2
 80062a8:	1e5a      	subs	r2, r3, #1
 80062aa:	4193      	sbcs	r3, r2
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4b31      	ldr	r3, [pc, #196]	@ (8006374 <CreateMessage+0xf04>)
 80062b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 80062b2:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <CreateMessage+0xf08>)
 80062b4:	483b      	ldr	r0, [pc, #236]	@ (80063a4 <CreateMessage+0xf34>)
 80062b6:	220c      	movs	r2, #12
 80062b8:	0019      	movs	r1, r3
 80062ba:	f005 ff81 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80062be:	4a2e      	ldr	r2, [pc, #184]	@ (8006378 <CreateMessage+0xf08>)
 80062c0:	4b31      	ldr	r3, [pc, #196]	@ (8006388 <CreateMessage+0xf18>)
 80062c2:	0011      	movs	r1, r2
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7ff f80b 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 80062ca:	4b37      	ldr	r3, [pc, #220]	@ (80063a8 <CreateMessage+0xf38>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1c18      	adds	r0, r3, #0
 80062d0:	f7fd fae0 	bl	8003894 <__aeabi_f2d>
 80062d4:	0002      	movs	r2, r0
 80062d6:	000b      	movs	r3, r1
 80062d8:	4c2b      	ldr	r4, [pc, #172]	@ (8006388 <CreateMessage+0xf18>)
 80062da:	4934      	ldr	r1, [pc, #208]	@ (80063ac <CreateMessage+0xf3c>)
 80062dc:	4823      	ldr	r0, [pc, #140]	@ (800636c <CreateMessage+0xefc>)
 80062de:	9200      	str	r2, [sp, #0]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	0022      	movs	r2, r4
 80062e4:	f020 f8f2 	bl	80264cc <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80062e8:	4b20      	ldr	r3, [pc, #128]	@ (800636c <CreateMessage+0xefc>)
 80062ea:	0018      	movs	r0, r3
 80062ec:	f7f9 ff3e 	bl	800016c <strlen>
 80062f0:	0002      	movs	r2, r0
 80062f2:	4b1e      	ldr	r3, [pc, #120]	@ (800636c <CreateMessage+0xefc>)
 80062f4:	18d3      	adds	r3, r2, r3
 80062f6:	4a2e      	ldr	r2, [pc, #184]	@ (80063b0 <CreateMessage+0xf40>)
 80062f8:	0011      	movs	r1, r2
 80062fa:	0018      	movs	r0, r3
 80062fc:	f020 f8e6 	bl	80264cc <siprintf>
  index += strlen(message);
 8006300:	4b1a      	ldr	r3, [pc, #104]	@ (800636c <CreateMessage+0xefc>)
 8006302:	0018      	movs	r0, r3
 8006304:	f7f9 ff32 	bl	800016c <strlen>
 8006308:	0003      	movs	r3, r0
 800630a:	b299      	uxth	r1, r3
 800630c:	220e      	movs	r2, #14
 800630e:	18bb      	adds	r3, r7, r2
 8006310:	18ba      	adds	r2, r7, r2
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	188a      	adds	r2, r1, r2
 8006316:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006318:	1cfb      	adds	r3, r7, #3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d019      	beq.n	8006354 <CreateMessage+0xee4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006320:	4b12      	ldr	r3, [pc, #72]	@ (800636c <CreateMessage+0xefc>)
 8006322:	0018      	movs	r0, r3
 8006324:	f7f9 ff22 	bl	800016c <strlen>
 8006328:	0003      	movs	r3, r0
 800632a:	b29a      	uxth	r2, r3
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <CreateMessage+0xefc>)
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f7fe fd95 	bl	8004e60 <ESP_Send>
 8006336:	0003      	movs	r3, r0
 8006338:	001a      	movs	r2, r3
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <CreateMessage+0xf00>)
 800633c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <CreateMessage+0xf04>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	001a      	movs	r2, r3
 8006344:	4b0a      	ldr	r3, [pc, #40]	@ (8006370 <CreateMessage+0xf00>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	4013      	ands	r3, r2
 800634a:	1e5a      	subs	r2, r3, #1
 800634c:	4193      	sbcs	r3, r2
 800634e:	b2da      	uxtb	r2, r3
 8006350:	4b08      	ldr	r3, [pc, #32]	@ (8006374 <CreateMessage+0xf04>)
 8006352:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8006354:	4b07      	ldr	r3, [pc, #28]	@ (8006374 <CreateMessage+0xf04>)
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	701a      	strb	r2, [r3, #0]
  return index;
 800635c:	230e      	movs	r3, #14
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	881b      	ldrh	r3, [r3, #0]
}
 8006362:	0018      	movs	r0, r3
 8006364:	46bd      	mov	sp, r7
 8006366:	b004      	add	sp, #16
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	200005c4 	.word	0x200005c4
 8006370:	20000859 	.word	0x20000859
 8006374:	20000032 	.word	0x20000032
 8006378:	20000834 	.word	0x20000834
 800637c:	080800ec 	.word	0x080800ec
 8006380:	0802b054 	.word	0x0802b054
 8006384:	0802b068 	.word	0x0802b068
 8006388:	20000840 	.word	0x20000840
 800638c:	20000704 	.word	0x20000704
 8006390:	0802af10 	.word	0x0802af10
 8006394:	080800f8 	.word	0x080800f8
 8006398:	0802b070 	.word	0x0802b070
 800639c:	08080104 	.word	0x08080104
 80063a0:	0802b078 	.word	0x0802b078
 80063a4:	0808006c 	.word	0x0808006c
 80063a8:	20002158 	.word	0x20002158
 80063ac:	0802aef0 	.word	0x0802aef0
 80063b0:	0802b080 	.word	0x0802b080

080063b4 <StartProg>:

void StartProg(){
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80063b8:	2064      	movs	r0, #100	@ 0x64
 80063ba:	f00e faf5 	bl	80149a8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80063be:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <StartProg+0x60>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	2101      	movs	r1, #1
 80063c4:	0018      	movs	r0, r3
 80063c6:	f00f fd4c 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80063ca:	2064      	movs	r0, #100	@ 0x64
 80063cc:	f00e faec 	bl	80149a8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80063d0:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <StartProg+0x60>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	2102      	movs	r1, #2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f00f fd43 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063dc:	23fa      	movs	r3, #250	@ 0xfa
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	0018      	movs	r0, r3
 80063e2:	f00e fae1 	bl	80149a8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80063e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <StartProg+0x60>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	2101      	movs	r1, #1
 80063ec:	0018      	movs	r0, r3
 80063ee:	f00f fd38 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063f2:	23fa      	movs	r3, #250	@ 0xfa
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	0018      	movs	r0, r3
 80063f8:	f00e fad6 	bl	80149a8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80063fc:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <StartProg+0x60>)
 80063fe:	2201      	movs	r2, #1
 8006400:	2102      	movs	r1, #2
 8006402:	0018      	movs	r0, r3
 8006404:	f00f fd2d 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006408:	2028      	movs	r0, #40	@ 0x28
 800640a:	f00e facd 	bl	80149a8 <HAL_Delay>
}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	50001c00 	.word	0x50001c00

08006418 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b0d9      	sub	sp, #356	@ 0x164
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	0008      	movs	r0, r1
 8006422:	0011      	movs	r1, r2
 8006424:	4bab      	ldr	r3, [pc, #684]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006426:	24b0      	movs	r4, #176	@ 0xb0
 8006428:	0064      	lsls	r4, r4, #1
 800642a:	191b      	adds	r3, r3, r4
 800642c:	19db      	adds	r3, r3, r7
 800642e:	1c02      	adds	r2, r0, #0
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	4ba9      	ldr	r3, [pc, #676]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006434:	191b      	adds	r3, r3, r4
 8006436:	19db      	adds	r3, r3, r7
 8006438:	1c0a      	adds	r2, r1, #0
 800643a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800643c:	2380      	movs	r3, #128	@ 0x80
 800643e:	005a      	lsls	r2, r3, #1
 8006440:	2348      	movs	r3, #72	@ 0x48
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	2100      	movs	r1, #0
 8006446:	0018      	movs	r0, r3
 8006448:	f020 f988 	bl	802675c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800644c:	2360      	movs	r3, #96	@ 0x60
 800644e:	33ff      	adds	r3, #255	@ 0xff
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2203      	movs	r2, #3
 8006454:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8006456:	23ae      	movs	r3, #174	@ 0xae
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	2200      	movs	r2, #0
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	e013      	b.n	800648a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8006462:	20ae      	movs	r0, #174	@ 0xae
 8006464:	0040      	lsls	r0, r0, #1
 8006466:	183b      	adds	r3, r7, r0
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	18d2      	adds	r2, r2, r3
 800646e:	183b      	adds	r3, r7, r0
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	7811      	ldrb	r1, [r2, #0]
 8006474:	4a99      	ldr	r2, [pc, #612]	@ (80066dc <ParseBuffer+0x2c4>)
 8006476:	24b0      	movs	r4, #176	@ 0xb0
 8006478:	0064      	lsls	r4, r4, #1
 800647a:	1912      	adds	r2, r2, r4
 800647c:	19d2      	adds	r2, r2, r7
 800647e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8006480:	183b      	adds	r3, r7, r0
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	183b      	adds	r3, r7, r0
 8006486:	3201      	adds	r2, #1
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	23ae      	movs	r3, #174	@ 0xae
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	18fa      	adds	r2, r7, r3
 8006490:	4b90      	ldr	r3, [pc, #576]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006492:	21b0      	movs	r1, #176	@ 0xb0
 8006494:	0049      	lsls	r1, r1, #1
 8006496:	185b      	adds	r3, r3, r1
 8006498:	19db      	adds	r3, r3, r7
 800649a:	8812      	ldrh	r2, [r2, #0]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3df      	bcc.n	8006462 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80064a2:	4b8c      	ldr	r3, [pc, #560]	@ (80066d4 <ParseBuffer+0x2bc>)
 80064a4:	185b      	adds	r3, r3, r1
 80064a6:	19db      	adds	r3, r3, r7
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	4a8c      	ldr	r2, [pc, #560]	@ (80066dc <ParseBuffer+0x2c4>)
 80064ac:	1852      	adds	r2, r2, r1
 80064ae:	19d2      	adds	r2, r2, r7
 80064b0:	2100      	movs	r1, #0
 80064b2:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80064b4:	f00d fd78 	bl	8013fa8 <GetVerboseLevel>
 80064b8:	0003      	movs	r3, r0
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d115      	bne.n	80064ea <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 80064be:	4b88      	ldr	r3, [pc, #544]	@ (80066e0 <ParseBuffer+0x2c8>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <ParseBuffer+0xc4>
 80064c6:	f003 fc0b 	bl	8009ce0 <Check_USB_PowerOn>
 80064ca:	1e03      	subs	r3, r0, #0
 80064cc:	d006      	beq.n	80064dc <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 80064ce:	2348      	movs	r3, #72	@ 0x48
 80064d0:	18fa      	adds	r2, r7, r3
 80064d2:	4b84      	ldr	r3, [pc, #528]	@ (80066e4 <ParseBuffer+0x2cc>)
 80064d4:	0011      	movs	r1, r2
 80064d6:	0018      	movs	r0, r3
 80064d8:	f002 fb06 	bl	8008ae8 <printf_USB>
  }
  printf("Receive ParseBuffer: %s\r\n", tempBuf );
 80064dc:	2348      	movs	r3, #72	@ 0x48
 80064de:	18fa      	adds	r2, r7, r3
 80064e0:	4b81      	ldr	r3, [pc, #516]	@ (80066e8 <ParseBuffer+0x2d0>)
 80064e2:	0011      	movs	r1, r2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f01f ff81 	bl	80263ec <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	26ac      	movs	r6, #172	@ 0xac
 80064ee:	0076      	lsls	r6, r6, #1
 80064f0:	19ba      	adds	r2, r7, r6
 80064f2:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80064f4:	4b7d      	ldr	r3, [pc, #500]	@ (80066ec <ParseBuffer+0x2d4>)
 80064f6:	25b0      	movs	r5, #176	@ 0xb0
 80064f8:	006d      	lsls	r5, r5, #1
 80064fa:	195b      	adds	r3, r3, r5
 80064fc:	19db      	adds	r3, r3, r7
 80064fe:	4a7c      	ldr	r2, [pc, #496]	@ (80066f0 <ParseBuffer+0x2d8>)
 8006500:	8811      	ldrh	r1, [r2, #0]
 8006502:	8019      	strh	r1, [r3, #0]
 8006504:	7892      	ldrb	r2, [r2, #2]
 8006506:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006508:	4b7a      	ldr	r3, [pc, #488]	@ (80066f4 <ParseBuffer+0x2dc>)
 800650a:	195b      	adds	r3, r3, r5
 800650c:	19db      	adds	r3, r3, r7
 800650e:	4a7a      	ldr	r2, [pc, #488]	@ (80066f8 <ParseBuffer+0x2e0>)
 8006510:	6811      	ldr	r1, [r2, #0]
 8006512:	6019      	str	r1, [r3, #0]
 8006514:	8892      	ldrh	r2, [r2, #4]
 8006516:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006518:	4b78      	ldr	r3, [pc, #480]	@ (80066fc <ParseBuffer+0x2e4>)
 800651a:	195b      	adds	r3, r3, r5
 800651c:	19db      	adds	r3, r3, r7
 800651e:	4a78      	ldr	r2, [pc, #480]	@ (8006700 <ParseBuffer+0x2e8>)
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006526:	4b77      	ldr	r3, [pc, #476]	@ (8006704 <ParseBuffer+0x2ec>)
 8006528:	195b      	adds	r3, r3, r5
 800652a:	19db      	adds	r3, r3, r7
 800652c:	4a76      	ldr	r2, [pc, #472]	@ (8006708 <ParseBuffer+0x2f0>)
 800652e:	6811      	ldr	r1, [r2, #0]
 8006530:	6019      	str	r1, [r3, #0]
 8006532:	8892      	ldrh	r2, [r2, #4]
 8006534:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006536:	4b75      	ldr	r3, [pc, #468]	@ (800670c <ParseBuffer+0x2f4>)
 8006538:	195b      	adds	r3, r3, r5
 800653a:	19db      	adds	r3, r3, r7
 800653c:	223e      	movs	r2, #62	@ 0x3e
 800653e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8006540:	4b73      	ldr	r3, [pc, #460]	@ (8006710 <ParseBuffer+0x2f8>)
 8006542:	195b      	adds	r3, r3, r5
 8006544:	19db      	adds	r3, r3, r7
 8006546:	4a73      	ldr	r2, [pc, #460]	@ (8006714 <ParseBuffer+0x2fc>)
 8006548:	ca13      	ldmia	r2!, {r0, r1, r4}
 800654a:	c313      	stmia	r3!, {r0, r1, r4}
 800654c:	8811      	ldrh	r1, [r2, #0]
 800654e:	8019      	strh	r1, [r3, #0]
 8006550:	7892      	ldrb	r2, [r2, #2]
 8006552:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006554:	4b70      	ldr	r3, [pc, #448]	@ (8006718 <ParseBuffer+0x300>)
 8006556:	195b      	adds	r3, r3, r5
 8006558:	19db      	adds	r3, r3, r7
 800655a:	4a70      	ldr	r2, [pc, #448]	@ (800671c <ParseBuffer+0x304>)
 800655c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800655e:	c313      	stmia	r3!, {r0, r1, r4}
 8006560:	8812      	ldrh	r2, [r2, #0]
 8006562:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8006564:	4b5c      	ldr	r3, [pc, #368]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006566:	195b      	adds	r3, r3, r5
 8006568:	19db      	adds	r3, r3, r7
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, OK);
 8006570:	2344      	movs	r3, #68	@ 0x44
 8006572:	18fa      	adds	r2, r7, r3
 8006574:	2348      	movs	r3, #72	@ 0x48
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	0011      	movs	r1, r2
 800657a:	0018      	movs	r0, r3
 800657c:	f020 f929 	bl	80267d2 <strstr>
 8006580:	0003      	movs	r3, r0
 8006582:	19ba      	adds	r2, r7, r6
 8006584:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8006586:	4b54      	ldr	r3, [pc, #336]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006588:	22b0      	movs	r2, #176	@ 0xb0
 800658a:	0052      	lsls	r2, r2, #1
 800658c:	189b      	adds	r3, r3, r2
 800658e:	19db      	adds	r3, r3, r7
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10c      	bne.n	80065b0 <ParseBuffer+0x198>
    ParsePoint = strstr(tempBuf, ready);
 8006596:	232c      	movs	r3, #44	@ 0x2c
 8006598:	18fa      	adds	r2, r7, r3
 800659a:	2348      	movs	r3, #72	@ 0x48
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f020 f916 	bl	80267d2 <strstr>
 80065a6:	0003      	movs	r3, r0
 80065a8:	22ac      	movs	r2, #172	@ 0xac
 80065aa:	0052      	lsls	r2, r2, #1
 80065ac:	18ba      	adds	r2, r7, r2
 80065ae:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80065b0:	4b49      	ldr	r3, [pc, #292]	@ (80066d8 <ParseBuffer+0x2c0>)
 80065b2:	22b0      	movs	r2, #176	@ 0xb0
 80065b4:	0052      	lsls	r2, r2, #1
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	19db      	adds	r3, r3, r7
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d10c      	bne.n	80065da <ParseBuffer+0x1c2>
    ParsePoint = strstr(tempBuf, start);
 80065c0:	2328      	movs	r3, #40	@ 0x28
 80065c2:	18fa      	adds	r2, r7, r3
 80065c4:	2348      	movs	r3, #72	@ 0x48
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f020 f901 	bl	80267d2 <strstr>
 80065d0:	0003      	movs	r3, r0
 80065d2:	22ac      	movs	r2, #172	@ 0xac
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	18ba      	adds	r2, r7, r2
 80065d8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80065da:	4b3f      	ldr	r3, [pc, #252]	@ (80066d8 <ParseBuffer+0x2c0>)
 80065dc:	22b0      	movs	r2, #176	@ 0xb0
 80065de:	0052      	lsls	r2, r2, #1
 80065e0:	189b      	adds	r3, r3, r2
 80065e2:	19db      	adds	r3, r3, r7
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d10c      	bne.n	8006604 <ParseBuffer+0x1ec>
    ParsePoint = strstr(tempBuf, TIME);
 80065ea:	2308      	movs	r3, #8
 80065ec:	18fa      	adds	r2, r7, r3
 80065ee:	2348      	movs	r3, #72	@ 0x48
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	0011      	movs	r1, r2
 80065f4:	0018      	movs	r0, r3
 80065f6:	f020 f8ec 	bl	80267d2 <strstr>
 80065fa:	0003      	movs	r3, r0
 80065fc:	22ac      	movs	r2, #172	@ 0xac
 80065fe:	0052      	lsls	r2, r2, #1
 8006600:	18ba      	adds	r2, r7, r2
 8006602:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006604:	233c      	movs	r3, #60	@ 0x3c
 8006606:	18fa      	adds	r2, r7, r3
 8006608:	2448      	movs	r4, #72	@ 0x48
 800660a:	193b      	adds	r3, r7, r4
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f020 f8df 	bl	80267d2 <strstr>
 8006614:	0003      	movs	r3, r0
 8006616:	22aa      	movs	r2, #170	@ 0xaa
 8006618:	0052      	lsls	r2, r2, #1
 800661a:	18ba      	adds	r2, r7, r2
 800661c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800661e:	2318      	movs	r3, #24
 8006620:	18fa      	adds	r2, r7, r3
 8006622:	193b      	adds	r3, r7, r4
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f020 f8d3 	bl	80267d2 <strstr>
 800662c:	0003      	movs	r3, r0
 800662e:	22a8      	movs	r2, #168	@ 0xa8
 8006630:	0052      	lsls	r2, r2, #1
 8006632:	18ba      	adds	r2, r7, r2
 8006634:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 8006636:	4a3a      	ldr	r2, [pc, #232]	@ (8006720 <ParseBuffer+0x308>)
 8006638:	193b      	adds	r3, r7, r4
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f020 f8c8 	bl	80267d2 <strstr>
 8006642:	0003      	movs	r3, r0
 8006644:	22a6      	movs	r2, #166	@ 0xa6
 8006646:	0052      	lsls	r2, r2, #1
 8006648:	18ba      	adds	r2, r7, r2
 800664a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800664c:	2334      	movs	r3, #52	@ 0x34
 800664e:	18fa      	adds	r2, r7, r3
 8006650:	193b      	adds	r3, r7, r4
 8006652:	0011      	movs	r1, r2
 8006654:	0018      	movs	r0, r3
 8006656:	f020 f8bc 	bl	80267d2 <strstr>
 800665a:	0003      	movs	r3, r0
 800665c:	22a4      	movs	r2, #164	@ 0xa4
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	18ba      	adds	r2, r7, r2
 8006662:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8006664:	4b1b      	ldr	r3, [pc, #108]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006666:	21b0      	movs	r1, #176	@ 0xb0
 8006668:	0049      	lsls	r1, r1, #1
 800666a:	185b      	adds	r3, r3, r1
 800666c:	19db      	adds	r3, r3, r7
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d800      	bhi.n	8006676 <ParseBuffer+0x25e>
 8006674:	e0b5      	b.n	80067e2 <ParseBuffer+0x3ca>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8006676:	22ac      	movs	r2, #172	@ 0xac
 8006678:	0052      	lsls	r2, r2, #1
 800667a:	18bb      	adds	r3, r7, r2
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d056      	beq.n	8006730 <ParseBuffer+0x318>
 8006682:	18bb      	adds	r3, r7, r2
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b4f      	cmp	r3, #79	@ 0x4f
 800668a:	d151      	bne.n	8006730 <ParseBuffer+0x318>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800668c:	2360      	movs	r3, #96	@ 0x60
 800668e:	33ff      	adds	r3, #255	@ 0xff
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8006696:	4b23      	ldr	r3, [pc, #140]	@ (8006724 <ParseBuffer+0x30c>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b12      	cmp	r3, #18
 800669c:	d148      	bne.n	8006730 <ParseBuffer+0x318>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800669e:	4b0d      	ldr	r3, [pc, #52]	@ (80066d4 <ParseBuffer+0x2bc>)
 80066a0:	185b      	adds	r3, r3, r1
 80066a2:	19db      	adds	r3, r3, r7
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80066a8:	d10b      	bne.n	80066c2 <ParseBuffer+0x2aa>
 80066aa:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <ParseBuffer+0x2c4>)
 80066ac:	185b      	adds	r3, r3, r1
 80066ae:	19db      	adds	r3, r3, r7
 80066b0:	2221      	movs	r2, #33	@ 0x21
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	2b32      	cmp	r3, #50	@ 0x32
 80066b6:	d104      	bne.n	80066c2 <ParseBuffer+0x2aa>
          ParseTime(tempBuf);
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	0018      	movs	r0, r3
 80066bc:	f003 fdbe 	bl	800a23c <ParseTime>
 80066c0:	e036      	b.n	8006730 <ParseBuffer+0x318>
        }
        else {
          Error("Error getting time");
 80066c2:	4a19      	ldr	r2, [pc, #100]	@ (8006728 <ParseBuffer+0x310>)
 80066c4:	4b19      	ldr	r3, [pc, #100]	@ (800672c <ParseBuffer+0x314>)
 80066c6:	0019      	movs	r1, r3
 80066c8:	2001      	movs	r0, #1
 80066ca:	f00d fbe3 	bl	8013e94 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80066ce:	2306      	movs	r3, #6
 80066d0:	e08b      	b.n	80067ea <ParseBuffer+0x3d2>
 80066d2:	46c0      	nop			@ (mov r8, r8)
 80066d4:	fffffea2 	.word	0xfffffea2
 80066d8:	fffffea1 	.word	0xfffffea1
 80066dc:	fffffee8 	.word	0xfffffee8
 80066e0:	200010f7 	.word	0x200010f7
 80066e4:	0802b084 	.word	0x0802b084
 80066e8:	0802b08c 	.word	0x0802b08c
 80066ec:	fffffee4 	.word	0xfffffee4
 80066f0:	0802b0bc 	.word	0x0802b0bc
 80066f4:	fffffedc 	.word	0xfffffedc
 80066f8:	0802b0c0 	.word	0x0802b0c0
 80066fc:	fffffed4 	.word	0xfffffed4
 8006700:	4c494146 	.word	0x4c494146
 8006704:	fffffecc 	.word	0xfffffecc
 8006708:	0802b0c8 	.word	0x0802b0c8
 800670c:	fffffec8 	.word	0xfffffec8
 8006710:	fffffeb8 	.word	0xfffffeb8
 8006714:	0802b0d0 	.word	0x0802b0d0
 8006718:	fffffea8 	.word	0xfffffea8
 800671c:	0802b0e0 	.word	0x0802b0e0
 8006720:	200006a0 	.word	0x200006a0
 8006724:	20000701 	.word	0x20000701
 8006728:	0802b0a8 	.word	0x0802b0a8
 800672c:	0802ab98 	.word	0x0802ab98
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006730:	22ac      	movs	r2, #172	@ 0xac
 8006732:	0052      	lsls	r2, r2, #1
 8006734:	18bb      	adds	r3, r7, r2
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <ParseBuffer+0x338>
 800673c:	18bb      	adds	r3, r7, r2
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b72      	cmp	r3, #114	@ 0x72
 8006744:	d104      	bne.n	8006750 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_READY;
 8006746:	2360      	movs	r3, #96	@ 0x60
 8006748:	33ff      	adds	r3, #255	@ 0xff
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	2202      	movs	r2, #2
 800674e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006750:	22ac      	movs	r2, #172	@ 0xac
 8006752:	0052      	lsls	r2, r2, #1
 8006754:	18bb      	adds	r3, r7, r2
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <ParseBuffer+0x358>
 800675c:	18bb      	adds	r3, r7, r2
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b3e      	cmp	r3, #62	@ 0x3e
 8006764:	d104      	bne.n	8006770 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_START;
 8006766:	2360      	movs	r3, #96	@ 0x60
 8006768:	33ff      	adds	r3, #255	@ 0xff
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	2205      	movs	r2, #5
 800676e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8006770:	22ac      	movs	r2, #172	@ 0xac
 8006772:	0052      	lsls	r2, r2, #1
 8006774:	18bb      	adds	r3, r7, r2
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <ParseBuffer+0x378>
 800677c:	18bb      	adds	r3, r7, r2
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b2b      	cmp	r3, #43	@ 0x2b
 8006784:	d104      	bne.n	8006790 <ParseBuffer+0x378>
      status = RECEIVE_STATUS_TIME;
 8006786:	2360      	movs	r3, #96	@ 0x60
 8006788:	33ff      	adds	r3, #255	@ 0xff
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	220b      	movs	r2, #11
 800678e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006790:	22aa      	movs	r2, #170	@ 0xaa
 8006792:	0052      	lsls	r2, r2, #1
 8006794:	18bb      	adds	r3, r7, r2
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <ParseBuffer+0x38e>
 800679c:	18bb      	adds	r3, r7, r2
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b45      	cmp	r3, #69	@ 0x45
 80067a4:	d00a      	beq.n	80067bc <ParseBuffer+0x3a4>
 80067a6:	22a4      	movs	r2, #164	@ 0xa4
 80067a8:	0052      	lsls	r2, r2, #1
 80067aa:	18bb      	adds	r3, r7, r2
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <ParseBuffer+0x3ae>
 80067b2:	18bb      	adds	r3, r7, r2
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b46      	cmp	r3, #70	@ 0x46
 80067ba:	d104      	bne.n	80067c6 <ParseBuffer+0x3ae>
      status = RECEIVE_STATUS_ERROR;
 80067bc:	2360      	movs	r3, #96	@ 0x60
 80067be:	33ff      	adds	r3, #255	@ 0xff
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80067c6:	22a8      	movs	r2, #168	@ 0xa8
 80067c8:	0052      	lsls	r2, r2, #1
 80067ca:	18bb      	adds	r3, r7, r2
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <ParseBuffer+0x3ca>
 80067d2:	18bb      	adds	r3, r7, r2
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b57      	cmp	r3, #87	@ 0x57
 80067da:	d102      	bne.n	80067e2 <ParseBuffer+0x3ca>
      ConnectionMade = true;
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <ParseBuffer+0x3dc>)
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
  }
  return(status);
 80067e2:	2360      	movs	r3, #96	@ 0x60
 80067e4:	33ff      	adds	r3, #255	@ 0xff
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	781b      	ldrb	r3, [r3, #0]

}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b059      	add	sp, #356	@ 0x164
 80067f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	200005b0 	.word	0x200005b0

080067f8 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <PollAwake+0x34>)
 8006800:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	f7f9 fcb1 	bl	800016c <strlen>
 800680a:	0003      	movs	r3, r0
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f7fe fb24 	bl	8004e60 <ESP_Send>
 8006818:	1e03      	subs	r3, r0, #0
 800681a:	d001      	beq.n	8006820 <PollAwake+0x28>
    return true;
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <PollAwake+0x2a>
  }
  else{
    return false;
 8006820:	2300      	movs	r3, #0
  }
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b002      	add	sp, #8
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	0802b0f0 	.word	0x0802b0f0

08006830 <RFPower>:

bool RFPower(){
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <RFPower+0x34>)
 8006838:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0018      	movs	r0, r3
 800683e:	f7f9 fc95 	bl	800016c <strlen>
 8006842:	0003      	movs	r3, r0
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0011      	movs	r1, r2
 800684a:	0018      	movs	r0, r3
 800684c:	f7fe fb08 	bl	8004e60 <ESP_Send>
 8006850:	1e03      	subs	r3, r0, #0
 8006852:	d001      	beq.n	8006858 <RFPower+0x28>
    return true;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <RFPower+0x2a>
  }
  else{
    return false;
 8006858:	2300      	movs	r3, #0
  }
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	0802b0f8 	.word	0x0802b0f8

08006868 <CheckRFPower>:

bool CheckRFPower(){
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <CheckRFPower+0x34>)
 8006870:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f7f9 fc79 	bl	800016c <strlen>
 800687a:	0003      	movs	r3, r0
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0011      	movs	r1, r2
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe faec 	bl	8004e60 <ESP_Send>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d001      	beq.n	8006890 <CheckRFPower+0x28>
    return true;
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006890:	2300      	movs	r3, #0
  }
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b002      	add	sp, #8
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	0802b108 	.word	0x0802b108

080068a0 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <ATRestore+0x34>)
 80068a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7f9 fc5d 	bl	800016c <strlen>
 80068b2:	0003      	movs	r3, r0
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fe fad0 	bl	8004e60 <ESP_Send>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d001      	beq.n	80068c8 <ATRestore+0x28>
    return true;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <ATRestore+0x2a>
  }
  else{
    return false;
 80068c8:	2300      	movs	r3, #0
  }
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b002      	add	sp, #8
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	0802b118 	.word	0x0802b118

080068d8 <CWINIT>:

bool CWINIT(){
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <CWINIT+0x34>)
 80068e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7f9 fc41 	bl	800016c <strlen>
 80068ea:	0003      	movs	r3, r0
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0011      	movs	r1, r2
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fab4 	bl	8004e60 <ESP_Send>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d001      	beq.n	8006900 <CWINIT+0x28>
    return true;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <CWINIT+0x2a>
  }
  else{
    return false;
 8006900:	2300      	movs	r3, #0
  }
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b002      	add	sp, #8
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	0802b128 	.word	0x0802b128

08006910 <CWMODE1>:

bool CWMODE1(){
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <CWMODE1+0x34>)
 8006918:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f7f9 fc25 	bl	800016c <strlen>
 8006922:	0003      	movs	r3, r0
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0011      	movs	r1, r2
 800692a:	0018      	movs	r0, r3
 800692c:	f7fe fa98 	bl	8004e60 <ESP_Send>
 8006930:	1e03      	subs	r3, r0, #0
 8006932:	d001      	beq.n	8006938 <CWMODE1+0x28>
    return true;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <CWMODE1+0x2a>
  }
  else{
    return false;
 8006938:	2300      	movs	r3, #0
  }
}
 800693a:	0018      	movs	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	b002      	add	sp, #8
 8006940:	bd80      	pop	{r7, pc}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	0802b138 	.word	0x0802b138

08006948 <CWMODE2>:

bool CWMODE2(){
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <CWMODE2+0x34>)
 8006950:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0018      	movs	r0, r3
 8006956:	f7f9 fc09 	bl	800016c <strlen>
 800695a:	0003      	movs	r3, r0
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0011      	movs	r1, r2
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe fa7c 	bl	8004e60 <ESP_Send>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d001      	beq.n	8006970 <CWMODE2+0x28>
    return true;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	0802b148 	.word	0x0802b148

08006980 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <CWAUTOCONN+0x34>)
 8006988:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0018      	movs	r0, r3
 800698e:	f7f9 fbed 	bl	800016c <strlen>
 8006992:	0003      	movs	r3, r0
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f7fe fa60 	bl	8004e60 <ESP_Send>
 80069a0:	1e03      	subs	r3, r0, #0
 80069a2:	d001      	beq.n	80069a8 <CWAUTOCONN+0x28>
    return true;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80069a8:	2300      	movs	r3, #0
  }
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b002      	add	sp, #8
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	0802b158 	.word	0x0802b158

080069b8 <CWJAP>:

bool CWJAP()
{
 80069b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ba:	46c6      	mov	lr, r8
 80069bc:	b500      	push	{lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	466b      	mov	r3, sp
 80069c4:	4698      	mov	r8, r3
  APtested = true;
 80069c6:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <CWJAP+0xe8>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 80069cc:	f7fd ff98 	bl	8004900 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 80069d0:	4b34      	ldr	r3, [pc, #208]	@ (8006aa4 <CWJAP+0xec>)
 80069d2:	2270      	movs	r2, #112	@ 0x70
 80069d4:	2100      	movs	r1, #0
 80069d6:	0018      	movs	r0, r3
 80069d8:	f01f fec0 	bl	802675c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 80069dc:	4b32      	ldr	r3, [pc, #200]	@ (8006aa8 <CWJAP+0xf0>)
 80069de:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <CWJAP+0xf4>)
 80069e0:	4933      	ldr	r1, [pc, #204]	@ (8006ab0 <CWJAP+0xf8>)
 80069e2:	4830      	ldr	r0, [pc, #192]	@ (8006aa4 <CWJAP+0xec>)
 80069e4:	f01f fd72 	bl	80264cc <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80069e8:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa4 <CWJAP+0xec>)
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7f9 fbbe 	bl	800016c <strlen>
 80069f0:	0002      	movs	r2, r0
 80069f2:	210f      	movs	r1, #15
 80069f4:	2018      	movs	r0, #24
 80069f6:	180b      	adds	r3, r1, r0
 80069f8:	19db      	adds	r3, r3, r7
 80069fa:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 80069fc:	180b      	adds	r3, r1, r0
 80069fe:	19db      	adds	r3, r3, r7
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	623a      	str	r2, [r7, #32]
 8006a08:	001a      	movs	r2, r3
 8006a0a:	60ba      	str	r2, [r7, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	60fa      	str	r2, [r7, #12]
 8006a10:	68b8      	ldr	r0, [r7, #8]
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	0002      	movs	r2, r0
 8006a16:	0f52      	lsrs	r2, r2, #29
 8006a18:	000e      	movs	r6, r1
 8006a1a:	00f6      	lsls	r6, r6, #3
 8006a1c:	617e      	str	r6, [r7, #20]
 8006a1e:	697e      	ldr	r6, [r7, #20]
 8006a20:	4316      	orrs	r6, r2
 8006a22:	617e      	str	r6, [r7, #20]
 8006a24:	0002      	movs	r2, r0
 8006a26:	00d2      	lsls	r2, r2, #3
 8006a28:	613a      	str	r2, [r7, #16]
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	603a      	str	r2, [r7, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	6838      	ldr	r0, [r7, #0]
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	0002      	movs	r2, r0
 8006a38:	0f52      	lsrs	r2, r2, #29
 8006a3a:	000e      	movs	r6, r1
 8006a3c:	00f5      	lsls	r5, r6, #3
 8006a3e:	4315      	orrs	r5, r2
 8006a40:	0002      	movs	r2, r0
 8006a42:	00d4      	lsls	r4, r2, #3
 8006a44:	3307      	adds	r3, #7
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	466a      	mov	r2, sp
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	469d      	mov	sp, r3
 8006a50:	466b      	mov	r3, sp
 8006a52:	3300      	adds	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 8006a56:	240f      	movs	r4, #15
 8006a58:	2518      	movs	r5, #24
 8006a5a:	1963      	adds	r3, r4, r5
 8006a5c:	19db      	adds	r3, r3, r7
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	001a      	movs	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2100      	movs	r1, #0
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f01f fe77 	bl	802675c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006a6e:	1963      	adds	r3, r4, r5
 8006a70:	19db      	adds	r3, r3, r7
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	490b      	ldr	r1, [pc, #44]	@ (8006aa4 <CWJAP+0xec>)
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f01f fe96 	bl	80267aa <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006a7e:	1963      	adds	r3, r4, r5
 8006a80:	19db      	adds	r3, r3, r7
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	0011      	movs	r1, r2
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7fe f9e8 	bl	8004e60 <ESP_Send>
 8006a90:	0003      	movs	r3, r0
 8006a92:	46c5      	mov	sp, r8
}
 8006a94:	0018      	movs	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b00a      	add	sp, #40	@ 0x28
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	46b8      	mov	r8, r7
 8006a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa0:	200005b1 	.word	0x200005b1
 8006aa4:	2000086c 	.word	0x2000086c
 8006aa8:	200006c0 	.word	0x200006c0
 8006aac:	200006a0 	.word	0x200006a0
 8006ab0:	0802b16c 	.word	0x0802b16c

08006ab4 <CWMODE3>:


bool CWMODE3(){
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006aba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae8 <CWMODE3+0x34>)
 8006abc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7f9 fb53 	bl	800016c <strlen>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	0011      	movs	r1, r2
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f7fe f9c6 	bl	8004e60 <ESP_Send>
 8006ad4:	1e03      	subs	r3, r0, #0
 8006ad6:	d001      	beq.n	8006adc <CWMODE3+0x28>
    return true;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <CWMODE3+0x2a>
  }
  else{
    return false;
 8006adc:	2300      	movs	r3, #0
  }
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b002      	add	sp, #8
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	0802b184 	.word	0x0802b184

08006aec <CWSTATE>:

bool CWSTATE(){
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <CWSTATE+0x34>)
 8006af4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7f9 fb37 	bl	800016c <strlen>
 8006afe:	0003      	movs	r3, r0
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0011      	movs	r1, r2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7fe f9aa 	bl	8004e60 <ESP_Send>
 8006b0c:	1e03      	subs	r3, r0, #0
 8006b0e:	d001      	beq.n	8006b14 <CWSTATE+0x28>
    return true;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006b14:	2300      	movs	r3, #0
  }
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	0802b194 	.word	0x0802b194

08006b24 <CWSAP>:

bool CWSAP(){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <CWSAP+0x34>)
 8006b2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7f9 fb1b 	bl	800016c <strlen>
 8006b36:	0003      	movs	r3, r0
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0011      	movs	r1, r2
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7fe f98e 	bl	8004e60 <ESP_Send>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d001      	beq.n	8006b4c <CWSAP+0x28>
    return true;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <CWSAP+0x2a>
  }
  else{
    return false;
 8006b4c:	2300      	movs	r3, #0
  }
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	0802b1a4 	.word	0x0802b1a4

08006b5c <CIPMUX>:

bool CIPMUX(){
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006b62:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <CIPMUX+0x34>)
 8006b64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7f9 faff 	bl	800016c <strlen>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fe f972 	bl	8004e60 <ESP_Send>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <CIPMUX+0x28>
    return true;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006b84:	2300      	movs	r3, #0
  }
}
 8006b86:	0018      	movs	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	0802b1c8 	.word	0x0802b1c8

08006b94 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <WEBSERVER+0x34>)
 8006b9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7f9 fae3 	bl	800016c <strlen>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	0011      	movs	r1, r2
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7fe f956 	bl	8004e60 <ESP_Send>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d001      	beq.n	8006bbc <WEBSERVER+0x28>
    return true;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006bbc:	2300      	movs	r3, #0
  }
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	0802b1d8 	.word	0x0802b1d8

08006bcc <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006bcc:	b5b0      	push	{r4, r5, r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006bd2:	1cfb      	adds	r3, r7, #3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006bd8:	1dbc      	adds	r4, r7, #6
 8006bda:	1cfb      	adds	r3, r7, #3
 8006bdc:	2100      	movs	r1, #0
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7fe fc46 	bl	8005470 <CreateMessage>
 8006be4:	0003      	movs	r3, r0
 8006be6:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006be8:	4b22      	ldr	r3, [pc, #136]	@ (8006c74 <HTTPCPOST+0xa8>)
 8006bea:	4823      	ldr	r0, [pc, #140]	@ (8006c78 <HTTPCPOST+0xac>)
 8006bec:	220c      	movs	r2, #12
 8006bee:	0019      	movs	r1, r3
 8006bf0:	f005 fae6 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c74 <HTTPCPOST+0xa8>)
 8006bf6:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HTTPCPOST+0xb0>)
 8006bf8:	0011      	movs	r1, r2
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f7fe fb70 	bl	80052e0 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006c00:	4b1f      	ldr	r3, [pc, #124]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c02:	4820      	ldr	r0, [pc, #128]	@ (8006c84 <HTTPCPOST+0xb8>)
 8006c04:	2230      	movs	r2, #48	@ 0x30
 8006c06:	0019      	movs	r1, r3
 8006c08:	f005 fada 	bl	800c1c0 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006c14:	4b1a      	ldr	r3, [pc, #104]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c16:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <HTTPCPOST+0xbc>)
 8006c18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c1a:	c313      	stmia	r3!, {r0, r1, r4}
 8006c1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c1e:	c313      	stmia	r3!, {r0, r1, r4}
 8006c20:	ca03      	ldmia	r2!, {r0, r1}
 8006c22:	c303      	stmia	r3!, {r0, r1}
 8006c24:	8811      	ldrh	r1, [r2, #0]
 8006c26:	8019      	strh	r1, [r3, #0]
 8006c28:	7892      	ldrb	r2, [r2, #2]
 8006c2a:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006c2c:	1dbb      	adds	r3, r7, #6
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	4d12      	ldr	r5, [pc, #72]	@ (8006c7c <HTTPCPOST+0xb0>)
 8006c32:	4c13      	ldr	r4, [pc, #76]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c34:	4915      	ldr	r1, [pc, #84]	@ (8006c8c <HTTPCPOST+0xc0>)
 8006c36:	4816      	ldr	r0, [pc, #88]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c38:	4a16      	ldr	r2, [pc, #88]	@ (8006c94 <HTTPCPOST+0xc8>)
 8006c3a:	9201      	str	r2, [sp, #4]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	002b      	movs	r3, r5
 8006c40:	0022      	movs	r2, r4
 8006c42:	f01f fc43 	bl	80264cc <siprintf>
  uint16_t len = strlen(message);
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7f9 fa8f 	bl	800016c <strlen>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	1d3b      	adds	r3, r7, #4
 8006c52:	801a      	strh	r2, [r3, #0]
//  Debug("ESP_send result of header: %d, transmitted data %d chars", txresult, len);
  if(ESP_Send((uint8_t*)message, len)){
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	881a      	ldrh	r2, [r3, #0]
 8006c58:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7fe f8ff 	bl	8004e60 <ESP_Send>
 8006c62:	1e03      	subs	r3, r0, #0
 8006c64:	d001      	beq.n	8006c6a <HTTPCPOST+0x9e>
    return true;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006c6a:	2300      	movs	r3, #0
  }
}
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b002      	add	sp, #8
 8006c72:	bdb0      	pop	{r4, r5, r7, pc}
 8006c74:	200008dc 	.word	0x200008dc
 8006c78:	08080000 	.word	0x08080000
 8006c7c:	200008e8 	.word	0x200008e8
 8006c80:	20000904 	.word	0x20000904
 8006c84:	08080110 	.word	0x08080110
 8006c88:	0802b1f0 	.word	0x0802b1f0
 8006c8c:	0802b214 	.word	0x0802b214
 8006c90:	200005c4 	.word	0x200005c4
 8006c94:	0802b238 	.word	0x0802b238

08006c98 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
  bool result = false;
 8006c9e:	1dfb      	adds	r3, r7, #7
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7fe fb3d 	bl	8005328 <CreateMailMessage>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <SENDMAIL+0x2c>)
 8006cb4:	801a      	strh	r2, [r3, #0]
//  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006cb6:	1dfb      	adds	r3, r7, #7
 8006cb8:	781b      	ldrb	r3, [r3, #0]
}
 8006cba:	0018      	movs	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b002      	add	sp, #8
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	200005bc 	.word	0x200005bc

08006cc8 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b090      	sub	sp, #64	@ 0x40
 8006ccc:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006cce:	2133      	movs	r1, #51	@ 0x33
 8006cd0:	187b      	adds	r3, r7, r1
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006cd6:	2536      	movs	r5, #54	@ 0x36
 8006cd8:	197c      	adds	r4, r7, r5
 8006cda:	187b      	adds	r3, r7, r1
 8006cdc:	2100      	movs	r1, #0
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7fe fb22 	bl	8005328 <CreateMailMessage>
 8006ce4:	0003      	movs	r3, r0
 8006ce6:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006ce8:	003b      	movs	r3, r7
 8006cea:	4814      	ldr	r0, [pc, #80]	@ (8006d3c <HTTPCPOST_MAILAPI+0x74>)
 8006cec:	2230      	movs	r2, #48	@ 0x30
 8006cee:	0019      	movs	r1, r3
 8006cf0:	f005 fa66 	bl	800c1c0 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006cf4:	197b      	adds	r3, r7, r5
 8006cf6:	881c      	ldrh	r4, [r3, #0]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	@ (8006d40 <HTTPCPOST_MAILAPI+0x78>)
 8006cfa:	4912      	ldr	r1, [pc, #72]	@ (8006d44 <HTTPCPOST_MAILAPI+0x7c>)
 8006cfc:	4812      	ldr	r0, [pc, #72]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006cfe:	003b      	movs	r3, r7
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	4b12      	ldr	r3, [pc, #72]	@ (8006d4c <HTTPCPOST_MAILAPI+0x84>)
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	0023      	movs	r3, r4
 8006d08:	f01f fbe0 	bl	80264cc <siprintf>
  uint16_t len = strlen(message);
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f7f9 fa2c 	bl	800016c <strlen>
 8006d14:	0002      	movs	r2, r0
 8006d16:	2134      	movs	r1, #52	@ 0x34
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006d1c:	187b      	adds	r3, r7, r1
 8006d1e:	881a      	ldrh	r2, [r3, #0]
 8006d20:	4b09      	ldr	r3, [pc, #36]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006d22:	0011      	movs	r1, r2
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7fe f89b 	bl	8004e60 <ESP_Send>
 8006d2a:	1e03      	subs	r3, r0, #0
 8006d2c:	d001      	beq.n	8006d32 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b00e      	add	sp, #56	@ 0x38
 8006d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d3c:	080802c0 	.word	0x080802c0
 8006d40:	0802e100 	.word	0x0802e100
 8006d44:	0802b25c 	.word	0x0802b25c
 8006d48:	200005c4 	.word	0x200005c4
 8006d4c:	0802b238 	.word	0x0802b238

08006d50 <SENDDATA>:
#endif

bool SENDDATA(){
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
  bool result = false;
 8006d56:	1dfb      	adds	r3, r7, #7
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006d5c:	1dfb      	adds	r3, r7, #7
 8006d5e:	2101      	movs	r1, #1
 8006d60:	0018      	movs	r0, r3
 8006d62:	f7fe fb85 	bl	8005470 <CreateMessage>
 8006d66:	0003      	movs	r3, r0
 8006d68:	001a      	movs	r2, r3
 8006d6a:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <SENDDATA+0x2c>)
 8006d6c:	801a      	strh	r2, [r3, #0]
//  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006d6e:	1dfb      	adds	r3, r7, #7
 8006d70:	781b      	ldrb	r3, [r3, #0]
}
 8006d72:	0018      	movs	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	b002      	add	sp, #8
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	200005bc 	.word	0x200005bc

08006d80 <SLEEP>:

bool SLEEP(){
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <SLEEP+0x34>)
 8006d88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7f9 f9ed 	bl	800016c <strlen>
 8006d92:	0003      	movs	r3, r0
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fe f860 	bl	8004e60 <ESP_Send>
 8006da0:	1e03      	subs	r3, r0, #0
 8006da2:	d001      	beq.n	8006da8 <SLEEP+0x28>
    return true;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <SLEEP+0x2a>
  }
  else{
    return false;
 8006da8:	2300      	movs	r3, #0
  }
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	0802b2ac 	.word	0x0802b2ac

08006db8 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <CIPSNTPCFG+0x3c>)
 8006dc0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7f9 f9d1 	bl	800016c <strlen>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f7fe f844 	bl	8004e60 <ESP_Send>
 8006dd8:	1e03      	subs	r3, r0, #0
 8006dda:	d006      	beq.n	8006dea <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006ddc:	23fa      	movs	r3, #250	@ 0xfa
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	0018      	movs	r0, r3
 8006de2:	f00d fde1 	bl	80149a8 <HAL_Delay>
    return true;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006dea:	2300      	movs	r3, #0
  }
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b002      	add	sp, #8
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	0802b2bc 	.word	0x0802b2bc

08006df8 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <CIPSNTPTIME+0x34>)
 8006e00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7f9 f9b1 	bl	800016c <strlen>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0011      	movs	r1, r2
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fe f824 	bl	8004e60 <ESP_Send>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d001      	beq.n	8006e20 <CIPSNTPTIME+0x28>
    return true;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006e20:	2300      	movs	r3, #0
  }
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	0802b30c 	.word	0x0802b30c

08006e30 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <CIPSNTPINTV+0x34>)
 8006e38:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7f9 f995 	bl	800016c <strlen>
 8006e42:	0003      	movs	r3, r0
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7fe f808 	bl	8004e60 <ESP_Send>
 8006e50:	1e03      	subs	r3, r0, #0
 8006e52:	d001      	beq.n	8006e58 <CIPSNTPINTV+0x28>
    return true;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006e58:	2300      	movs	r3, #0
  }
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b002      	add	sp, #8
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	0802b320 	.word	0x0802b320

08006e68 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	0002      	movs	r2, r0
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006e74:	4b6c      	ldr	r3, [pc, #432]	@ (8007028 <DMA_ProcessBuffer+0x1c0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	200e      	movs	r0, #14
 8006e7e:	183b      	adds	r3, r7, r0
 8006e80:	2180      	movs	r1, #128	@ 0x80
 8006e82:	0049      	lsls	r1, r1, #1
 8006e84:	1a8a      	subs	r2, r1, r2
 8006e86:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006e88:	230d      	movs	r3, #13
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d903      	bls.n	8006ea4 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006e9c:	183b      	adds	r3, r7, r0
 8006e9e:	2280      	movs	r2, #128	@ 0x80
 8006ea0:	0052      	lsls	r2, r2, #1
 8006ea2:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006ea4:	4b61      	ldr	r3, [pc, #388]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	001a      	movs	r2, r3
 8006eac:	230e      	movs	r3, #14
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d131      	bne.n	8006f1a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b14      	cmp	r3, #20
 8006ebc:	d91b      	bls.n	8006ef6 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <DMA_ProcessBuffer+0x74>
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <DMA_ProcessBuffer+0x1d0>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006ed4:	230d      	movs	r3, #13
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2207      	movs	r2, #7
 8006eda:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006edc:	4b55      	ldr	r3, [pc, #340]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d103      	bne.n	8006eec <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006ee4:	4b55      	ldr	r3, [pc, #340]	@ (800703c <DMA_ProcessBuffer+0x1d4>)
 8006ee6:	220b      	movs	r2, #11
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e016      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006eec:	230d      	movs	r3, #13
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	2206      	movs	r2, #6
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e011      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b4c      	ldr	r3, [pc, #304]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f00:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006f02:	f00d fd47 	bl	8014994 <HAL_GetTick>
 8006f06:	0003      	movs	r3, r0
 8006f08:	33f5      	adds	r3, #245	@ 0xf5
 8006f0a:	33ff      	adds	r3, #255	@ 0xff
 8006f0c:	001a      	movs	r2, r3
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <DMA_ProcessBuffer+0x1d8>)
 8006f10:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006f12:	230d      	movs	r3, #13
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2204      	movs	r2, #4
 8006f18:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006f1a:	4b44      	ldr	r3, [pc, #272]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	210e      	movs	r1, #14
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <DMA_ProcessBuffer+0xc6>
 8006f2c:	e075      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f2e:	4b40      	ldr	r3, [pc, #256]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006f34:	4b43      	ldr	r3, [pc, #268]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d109      	bne.n	8006f58 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f4c:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006f4e:	230d      	movs	r3, #13
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	220a      	movs	r2, #10
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e060      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006f58:	4b3a      	ldr	r3, [pc, #232]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	001a      	movs	r2, r3
 8006f60:	210e      	movs	r1, #14
 8006f62:	187b      	adds	r3, r7, r1
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b34      	ldr	r3, [pc, #208]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f72:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006f74:	230d      	movs	r3, #13
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	220a      	movs	r2, #10
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e04d      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	001a      	movs	r2, r3
 8006f86:	210e      	movs	r1, #14
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d917      	bls.n	8006fc0 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006f90:	4b26      	ldr	r3, [pc, #152]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	001a      	movs	r2, r3
 8006f98:	4b2b      	ldr	r3, [pc, #172]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006f9a:	18d0      	adds	r0, r2, r3
 8006f9c:	4b23      	ldr	r3, [pc, #140]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	001a      	movs	r2, r3
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	b299      	uxth	r1, r3
 8006fac:	230d      	movs	r3, #13
 8006fae:	18fc      	adds	r4, r7, r3
 8006fb0:	1dfb      	adds	r3, r7, #7
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	f7ff fa2f 	bl	8006418 <ParseBuffer>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	7023      	strb	r3, [r4, #0]
 8006fbe:	e026      	b.n	800700e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006fca:	18d0      	adds	r0, r2, r3
 8006fcc:	4b17      	ldr	r3, [pc, #92]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	b299      	uxth	r1, r3
 8006fdc:	250d      	movs	r5, #13
 8006fde:	197c      	adds	r4, r7, r5
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	001a      	movs	r2, r3
 8006fe6:	f7ff fa17 	bl	8006418 <ParseBuffer>
 8006fea:	0003      	movs	r3, r0
 8006fec:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006fee:	210e      	movs	r1, #14
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006ff8:	197c      	adds	r4, r7, r5
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	8819      	ldrh	r1, [r3, #0]
 8007002:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff fa07 	bl	8006418 <ParseBuffer>
 800700a:	0003      	movs	r3, r0
 800700c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800700e:	230e      	movs	r3, #14
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4b05      	ldr	r3, [pc, #20]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8007018:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800701a:	230d      	movs	r3, #13
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	781b      	ldrb	r3, [r3, #0]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b004      	add	sp, #16
 8007026:	bdb0      	pop	{r4, r5, r7, pc}
 8007028:	20002454 	.word	0x20002454
 800702c:	20000934 	.word	0x20000934
 8007030:	2000069c 	.word	0x2000069c
 8007034:	20000701 	.word	0x20000701
 8007038:	20000001 	.word	0x20000001
 800703c:	20000030 	.word	0x20000030
 8007040:	20000694 	.word	0x20000694
 8007044:	20000935 	.word	0x20000935
 8007048:	200004ac 	.word	0x200004ac

0800704c <clearDMABuffer>:

void clearDMABuffer(){
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	005a      	lsls	r2, r3, #1
 8007054:	4b03      	ldr	r3, [pc, #12]	@ (8007064 <clearDMABuffer+0x18>)
 8007056:	2100      	movs	r1, #0
 8007058:	0018      	movs	r0, r3
 800705a:	f01f fb7f 	bl	802675c <memset>
}
 800705e:	46c0      	nop			@ (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	200004ac 	.word	0x200004ac

08007068 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	0002      	movs	r2, r0
 8007070:	1dfb      	adds	r3, r7, #7
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	1dbb      	adds	r3, r7, #6
 8007076:	1c0a      	adds	r2, r1, #0
 8007078:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800707a:	210f      	movs	r1, #15
 800707c:	187b      	adds	r3, r7, r1
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8007082:	1dbb      	adds	r3, r7, #6
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800708a:	187b      	adds	r3, r7, r1
 800708c:	1dfa      	adds	r2, r7, #7
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	4251      	negs	r1, r2
 8007092:	414a      	adcs	r2, r1
 8007094:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8007096:	1dbb      	adds	r3, r7, #6
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800709e:	230f      	movs	r3, #15
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	1dfa      	adds	r2, r7, #7
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	3a02      	subs	r2, #2
 80070a8:	4251      	negs	r1, r2
 80070aa:	414a      	adcs	r2, r1
 80070ac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80070ae:	1dbb      	adds	r3, r7, #6
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d107      	bne.n	80070c6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80070b6:	230f      	movs	r3, #15
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	1dfa      	adds	r2, r7, #7
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	3a05      	subs	r2, #5
 80070c0:	4251      	negs	r1, r2
 80070c2:	414a      	adcs	r2, r1
 80070c4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 80070c6:	1dbb      	adds	r3, r7, #6
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d107      	bne.n	80070de <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	1dfa      	adds	r2, r7, #7
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	3a0b      	subs	r2, #11
 80070d8:	4251      	negs	r1, r2
 80070da:	414a      	adcs	r2, r1
 80070dc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80070de:	230f      	movs	r3, #15
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	781b      	ldrb	r3, [r3, #0]
}
 80070e4:	0018      	movs	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b004      	add	sp, #16
 80070ea:	bd80      	pop	{r7, pc}

080070ec <AT_Send>:

bool AT_Send(AT_Commands state){
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	0002      	movs	r2, r0
 80070f4:	1dfb      	adds	r3, r7, #7
 80070f6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80070f8:	230f      	movs	r3, #15
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007100:	1dfb      	adds	r3, r7, #7
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b16      	cmp	r3, #22
 8007106:	d900      	bls.n	800710a <AT_Send+0x1e>
 8007108:	e161      	b.n	80073ce <AT_Send+0x2e2>
 800710a:	009a      	lsls	r2, r3, #2
 800710c:	4bb3      	ldr	r3, [pc, #716]	@ (80073dc <AT_Send+0x2f0>)
 800710e:	18d3      	adds	r3, r2, r3
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8007114:	4bb2      	ldr	r3, [pc, #712]	@ (80073e0 <AT_Send+0x2f4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	0018      	movs	r0, r3
 800711a:	f00c fe65 	bl	8013de8 <TimestampIsReached>
 800711e:	1e03      	subs	r3, r0, #0
 8007120:	d100      	bne.n	8007124 <AT_Send+0x38>
 8007122:	e153      	b.n	80073cc <AT_Send+0x2e0>
    Debug("AT_WAKEUP");
 8007124:	4aaf      	ldr	r2, [pc, #700]	@ (80073e4 <AT_Send+0x2f8>)
 8007126:	4bb0      	ldr	r3, [pc, #704]	@ (80073e8 <AT_Send+0x2fc>)
 8007128:	0019      	movs	r1, r3
 800712a:	2003      	movs	r0, #3
 800712c:	f00c feb2 	bl	8013e94 <CreateLine>
    ATCommandSend = PollAwake();
 8007130:	230f      	movs	r3, #15
 8007132:	18fc      	adds	r4, r7, r3
 8007134:	f7ff fb60 	bl	80067f8 <PollAwake>
 8007138:	0003      	movs	r3, r0
 800713a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800713c:	f00d fc2a 	bl	8014994 <HAL_GetTick>
 8007140:	0003      	movs	r3, r0
 8007142:	3332      	adds	r3, #50	@ 0x32
 8007144:	001a      	movs	r2, r3
 8007146:	4ba6      	ldr	r3, [pc, #664]	@ (80073e0 <AT_Send+0x2f4>)
 8007148:	601a      	str	r2, [r3, #0]
  }
  break;
 800714a:	e13f      	b.n	80073cc <AT_Send+0x2e0>

  case AT_SET_RFPOWER:
//    Debug("Setting RF Power");
    ATCommandSend = RFPower();
 800714c:	230f      	movs	r3, #15
 800714e:	18fc      	adds	r4, r7, r3
 8007150:	f7ff fb6e 	bl	8006830 <RFPower>
 8007154:	0003      	movs	r3, r0
 8007156:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007158:	f00d fc1c 	bl	8014994 <HAL_GetTick>
 800715c:	0003      	movs	r3, r0
 800715e:	330a      	adds	r3, #10
 8007160:	001a      	movs	r2, r3
 8007162:	4b9f      	ldr	r3, [pc, #636]	@ (80073e0 <AT_Send+0x2f4>)
 8007164:	601a      	str	r2, [r3, #0]
    break;
 8007166:	e132      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CHECK_RFPOWER:
//    Debug("Checking RF Power");
    ATCommandSend = CheckRFPower();
 8007168:	230f      	movs	r3, #15
 800716a:	18fc      	adds	r4, r7, r3
 800716c:	f7ff fb7c 	bl	8006868 <CheckRFPower>
 8007170:	0003      	movs	r3, r0
 8007172:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007174:	f00d fc0e 	bl	8014994 <HAL_GetTick>
 8007178:	0003      	movs	r3, r0
 800717a:	330a      	adds	r3, #10
 800717c:	001a      	movs	r2, r3
 800717e:	4b98      	ldr	r3, [pc, #608]	@ (80073e0 <AT_Send+0x2f4>)
 8007180:	601a      	str	r2, [r3, #0]
    break;
 8007182:	e124      	b.n	80073ce <AT_Send+0x2e2>

  case AT_RESTORE:
//    Debug("Restoring ESP");
    ATCommandSend = ATRestore();
 8007184:	230f      	movs	r3, #15
 8007186:	18fc      	adds	r4, r7, r3
 8007188:	f7ff fb8a 	bl	80068a0 <ATRestore>
 800718c:	0003      	movs	r3, r0
 800718e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007190:	f00d fc00 	bl	8014994 <HAL_GetTick>
 8007194:	0003      	movs	r3, r0
 8007196:	3332      	adds	r3, #50	@ 0x32
 8007198:	001a      	movs	r2, r3
 800719a:	4b91      	ldr	r3, [pc, #580]	@ (80073e0 <AT_Send+0x2f4>)
 800719c:	601a      	str	r2, [r3, #0]
    break;
 800719e:	e116      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWINIT:
//    Debug("Initializing Wi-Fi");
    ATCommandSend = CWINIT();
 80071a0:	230f      	movs	r3, #15
 80071a2:	18fc      	adds	r4, r7, r3
 80071a4:	f7ff fb98 	bl	80068d8 <CWINIT>
 80071a8:	0003      	movs	r3, r0
 80071aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071ac:	f00d fbf2 	bl	8014994 <HAL_GetTick>
 80071b0:	0003      	movs	r3, r0
 80071b2:	33f5      	adds	r3, #245	@ 0xf5
 80071b4:	33ff      	adds	r3, #255	@ 0xff
 80071b6:	001a      	movs	r2, r3
 80071b8:	4b89      	ldr	r3, [pc, #548]	@ (80073e0 <AT_Send+0x2f4>)
 80071ba:	601a      	str	r2, [r3, #0]
    break;
 80071bc:	e107      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWSTATE:
//    Debug("Checking current SSID");
    ATCommandSend = CWSTATE();
 80071be:	230f      	movs	r3, #15
 80071c0:	18fc      	adds	r4, r7, r3
 80071c2:	f7ff fc93 	bl	8006aec <CWSTATE>
 80071c6:	0003      	movs	r3, r0
 80071c8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071ca:	f00d fbe3 	bl	8014994 <HAL_GetTick>
 80071ce:	0003      	movs	r3, r0
 80071d0:	33f5      	adds	r3, #245	@ 0xf5
 80071d2:	33ff      	adds	r3, #255	@ 0xff
 80071d4:	001a      	movs	r2, r3
 80071d6:	4b82      	ldr	r3, [pc, #520]	@ (80073e0 <AT_Send+0x2f4>)
 80071d8:	601a      	str	r2, [r3, #0]
    break;
 80071da:	e0f8      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE1:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE1();
 80071dc:	230f      	movs	r3, #15
 80071de:	18fc      	adds	r4, r7, r3
 80071e0:	f7ff fb96 	bl	8006910 <CWMODE1>
 80071e4:	0003      	movs	r3, r0
 80071e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071e8:	f00d fbd4 	bl	8014994 <HAL_GetTick>
 80071ec:	0003      	movs	r3, r0
 80071ee:	330a      	adds	r3, #10
 80071f0:	001a      	movs	r2, r3
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <AT_Send+0x2f4>)
 80071f4:	601a      	str	r2, [r3, #0]
    break;
 80071f6:	e0ea      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE2:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE2();
 80071f8:	230f      	movs	r3, #15
 80071fa:	18fc      	adds	r4, r7, r3
 80071fc:	f7ff fba4 	bl	8006948 <CWMODE2>
 8007200:	0003      	movs	r3, r0
 8007202:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007204:	f00d fbc6 	bl	8014994 <HAL_GetTick>
 8007208:	0003      	movs	r3, r0
 800720a:	330a      	adds	r3, #10
 800720c:	001a      	movs	r2, r3
 800720e:	4b74      	ldr	r3, [pc, #464]	@ (80073e0 <AT_Send+0x2f4>)
 8007210:	601a      	str	r2, [r3, #0]
    break;
 8007212:	e0dc      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWAUTOCONN:
//    Debug("Setting auto connect");
    ATCommandSend = CWAUTOCONN();
 8007214:	230f      	movs	r3, #15
 8007216:	18fc      	adds	r4, r7, r3
 8007218:	f7ff fbb2 	bl	8006980 <CWAUTOCONN>
 800721c:	0003      	movs	r3, r0
 800721e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007220:	f00d fbb8 	bl	8014994 <HAL_GetTick>
 8007224:	0003      	movs	r3, r0
 8007226:	330a      	adds	r3, #10
 8007228:	001a      	movs	r2, r3
 800722a:	4b6d      	ldr	r3, [pc, #436]	@ (80073e0 <AT_Send+0x2f4>)
 800722c:	601a      	str	r2, [r3, #0]
    break;
 800722e:	e0ce      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8007230:	4a6e      	ldr	r2, [pc, #440]	@ (80073ec <AT_Send+0x300>)
 8007232:	4b6d      	ldr	r3, [pc, #436]	@ (80073e8 <AT_Send+0x2fc>)
 8007234:	0019      	movs	r1, r3
 8007236:	2003      	movs	r0, #3
 8007238:	f00c fe2c 	bl	8013e94 <CreateLine>
    ATCommandSend = CWJAP();
 800723c:	230f      	movs	r3, #15
 800723e:	18fc      	adds	r4, r7, r3
 8007240:	f7ff fbba 	bl	80069b8 <CWJAP>
 8007244:	0003      	movs	r3, r0
 8007246:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007248:	f00d fba4 	bl	8014994 <HAL_GetTick>
 800724c:	0003      	movs	r3, r0
 800724e:	3332      	adds	r3, #50	@ 0x32
 8007250:	001a      	movs	r2, r3
 8007252:	4b63      	ldr	r3, [pc, #396]	@ (80073e0 <AT_Send+0x2f4>)
 8007254:	601a      	str	r2, [r3, #0]
    break;
 8007256:	e0ba      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE3:
//    Debug("SET in station/soft-ap mode");
    ATCommandSend = CWMODE3();
 8007258:	230f      	movs	r3, #15
 800725a:	18fc      	adds	r4, r7, r3
 800725c:	f7ff fc2a 	bl	8006ab4 <CWMODE3>
 8007260:	0003      	movs	r3, r0
 8007262:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007264:	f00d fb96 	bl	8014994 <HAL_GetTick>
 8007268:	0003      	movs	r3, r0
 800726a:	330a      	adds	r3, #10
 800726c:	001a      	movs	r2, r3
 800726e:	4b5c      	ldr	r3, [pc, #368]	@ (80073e0 <AT_Send+0x2f4>)
 8007270:	601a      	str	r2, [r3, #0]
    break;
 8007272:	e0ac      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWSAP:
//    Debug("SET soft AP mode parameters");
    ATCommandSend = CWSAP();
 8007274:	230f      	movs	r3, #15
 8007276:	18fc      	adds	r4, r7, r3
 8007278:	f7ff fc54 	bl	8006b24 <CWSAP>
 800727c:	0003      	movs	r3, r0
 800727e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007280:	f00d fb88 	bl	8014994 <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	330a      	adds	r3, #10
 8007288:	001a      	movs	r2, r3
 800728a:	4b55      	ldr	r3, [pc, #340]	@ (80073e0 <AT_Send+0x2f4>)
 800728c:	601a      	str	r2, [r3, #0]
    break;
 800728e:	e09e      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPMUX:
//    Debug("ATCommandSend = CIPMUX()");
    ATCommandSend = CIPMUX();
 8007290:	230f      	movs	r3, #15
 8007292:	18fc      	adds	r4, r7, r3
 8007294:	f7ff fc62 	bl	8006b5c <CIPMUX>
 8007298:	0003      	movs	r3, r0
 800729a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800729c:	f00d fb7a 	bl	8014994 <HAL_GetTick>
 80072a0:	0003      	movs	r3, r0
 80072a2:	330a      	adds	r3, #10
 80072a4:	001a      	movs	r2, r3
 80072a6:	4b4e      	ldr	r3, [pc, #312]	@ (80073e0 <AT_Send+0x2f4>)
 80072a8:	601a      	str	r2, [r3, #0]
    break;
 80072aa:	e090      	b.n	80073ce <AT_Send+0x2e2>

  case AT_WEBSERVER:
//    Debug("ATCommandSend = WEBSERVER()");
    ATCommandSend = WEBSERVER();
 80072ac:	230f      	movs	r3, #15
 80072ae:	18fc      	adds	r4, r7, r3
 80072b0:	f7ff fc70 	bl	8006b94 <WEBSERVER>
 80072b4:	0003      	movs	r3, r0
 80072b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072b8:	f00d fb6c 	bl	8014994 <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	330a      	adds	r3, #10
 80072c0:	001a      	movs	r2, r3
 80072c2:	4b47      	ldr	r3, [pc, #284]	@ (80073e0 <AT_Send+0x2f4>)
 80072c4:	601a      	str	r2, [r3, #0]
    break;
 80072c6:	e082      	b.n	80073ce <AT_Send+0x2e2>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80072c8:	230f      	movs	r3, #15
 80072ca:	18fc      	adds	r4, r7, r3
 80072cc:	f7ff fc7e 	bl	8006bcc <HTTPCPOST>
 80072d0:	0003      	movs	r3, r0
 80072d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80072d4:	f00d fb5e 	bl	8014994 <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	33f5      	adds	r3, #245	@ 0xf5
 80072dc:	33ff      	adds	r3, #255	@ 0xff
 80072de:	001a      	movs	r2, r3
 80072e0:	4b3f      	ldr	r3, [pc, #252]	@ (80073e0 <AT_Send+0x2f4>)
 80072e2:	601a      	str	r2, [r3, #0]
    break;
 80072e4:	e073      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SENDDATA:
//    Debug("Send the data");
    ATCommandSend = SENDDATA();
 80072e6:	230f      	movs	r3, #15
 80072e8:	18fc      	adds	r4, r7, r3
 80072ea:	f7ff fd31 	bl	8006d50 <SENDDATA>
 80072ee:	0003      	movs	r3, r0
 80072f0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80072f2:	f00d fb4f 	bl	8014994 <HAL_GetTick>
 80072f6:	0003      	movs	r3, r0
 80072f8:	33f5      	adds	r3, #245	@ 0xf5
 80072fa:	33ff      	adds	r3, #255	@ 0xff
 80072fc:	001a      	movs	r2, r3
 80072fe:	4b38      	ldr	r3, [pc, #224]	@ (80073e0 <AT_Send+0x2f4>)
 8007300:	601a      	str	r2, [r3, #0]
    break;
 8007302:	e064      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007304:	4a3a      	ldr	r2, [pc, #232]	@ (80073f0 <AT_Send+0x304>)
 8007306:	4b38      	ldr	r3, [pc, #224]	@ (80073e8 <AT_Send+0x2fc>)
 8007308:	0019      	movs	r1, r3
 800730a:	2003      	movs	r0, #3
 800730c:	f00c fdc2 	bl	8013e94 <CreateLine>
    ATCommandSend = SLEEP();
 8007310:	230f      	movs	r3, #15
 8007312:	18fc      	adds	r4, r7, r3
 8007314:	f7ff fd34 	bl	8006d80 <SLEEP>
 8007318:	0003      	movs	r3, r0
 800731a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800731c:	f00d fb3a 	bl	8014994 <HAL_GetTick>
 8007320:	0003      	movs	r3, r0
 8007322:	330a      	adds	r3, #10
 8007324:	001a      	movs	r2, r3
 8007326:	4b2e      	ldr	r3, [pc, #184]	@ (80073e0 <AT_Send+0x2f4>)
 8007328:	601a      	str	r2, [r3, #0]
    break;
 800732a:	e050      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPCFG:
//    Debug("Config SNTP client");
    ATCommandSend = CIPSNTPCFG();
 800732c:	230f      	movs	r3, #15
 800732e:	18fc      	adds	r4, r7, r3
 8007330:	f7ff fd42 	bl	8006db8 <CIPSNTPCFG>
 8007334:	0003      	movs	r3, r0
 8007336:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007338:	f00d fb2c 	bl	8014994 <HAL_GetTick>
 800733c:	0003      	movs	r3, r0
 800733e:	330a      	adds	r3, #10
 8007340:	001a      	movs	r2, r3
 8007342:	4b27      	ldr	r3, [pc, #156]	@ (80073e0 <AT_Send+0x2f4>)
 8007344:	601a      	str	r2, [r3, #0]
    break;
 8007346:	e042      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPTIME:
//    Debug("Get time from internet");
    ATCommandSend = CIPSNTPTIME();
 8007348:	230f      	movs	r3, #15
 800734a:	18fc      	adds	r4, r7, r3
 800734c:	f7ff fd54 	bl	8006df8 <CIPSNTPTIME>
 8007350:	0003      	movs	r3, r0
 8007352:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007354:	f00d fb1e 	bl	8014994 <HAL_GetTick>
 8007358:	0003      	movs	r3, r0
 800735a:	33f5      	adds	r3, #245	@ 0xf5
 800735c:	33ff      	adds	r3, #255	@ 0xff
 800735e:	001a      	movs	r2, r3
 8007360:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <AT_Send+0x2f4>)
 8007362:	601a      	str	r2, [r3, #0]
    break;
 8007364:	e033      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPINTV:
//    Debug("Set the interval to timesync");
    ATCommandSend = CIPSNTPINTV();
 8007366:	230f      	movs	r3, #15
 8007368:	18fc      	adds	r4, r7, r3
 800736a:	f7ff fd61 	bl	8006e30 <CIPSNTPINTV>
 800736e:	0003      	movs	r3, r0
 8007370:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007372:	f00d fb0f 	bl	8014994 <HAL_GetTick>
 8007376:	0003      	movs	r3, r0
 8007378:	330a      	adds	r3, #10
 800737a:	001a      	movs	r2, r3
 800737c:	4b18      	ldr	r3, [pc, #96]	@ (80073e0 <AT_Send+0x2f4>)
 800737e:	601a      	str	r2, [r3, #0]
    break;
 8007380:	e025      	b.n	80073ce <AT_Send+0x2e2>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL via API");
 8007382:	4a1c      	ldr	r2, [pc, #112]	@ (80073f4 <AT_Send+0x308>)
 8007384:	4b18      	ldr	r3, [pc, #96]	@ (80073e8 <AT_Send+0x2fc>)
 8007386:	0019      	movs	r1, r3
 8007388:	2003      	movs	r0, #3
 800738a:	f00c fd83 	bl	8013e94 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 800738e:	230f      	movs	r3, #15
 8007390:	18fc      	adds	r4, r7, r3
 8007392:	f7ff fc99 	bl	8006cc8 <HTTPCPOST_MAILAPI>
 8007396:	0003      	movs	r3, r0
 8007398:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800739a:	f00d fafb 	bl	8014994 <HAL_GetTick>
 800739e:	0003      	movs	r3, r0
 80073a0:	3332      	adds	r3, #50	@ 0x32
 80073a2:	001a      	movs	r2, r3
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <AT_Send+0x2f4>)
 80073a6:	601a      	str	r2, [r3, #0]
    break;
 80073a8:	e011      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SENDMAIL:
//    Debug("Send Email content");
    ATCommandSend = SENDMAIL();
 80073aa:	230f      	movs	r3, #15
 80073ac:	18fc      	adds	r4, r7, r3
 80073ae:	f7ff fc73 	bl	8006c98 <SENDMAIL>
 80073b2:	0003      	movs	r3, r0
 80073b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80073b6:	f00d faed 	bl	8014994 <HAL_GetTick>
 80073ba:	0003      	movs	r3, r0
 80073bc:	33f5      	adds	r3, #245	@ 0xf5
 80073be:	33ff      	adds	r3, #255	@ 0xff
 80073c0:	001a      	movs	r2, r3
 80073c2:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <AT_Send+0x2f4>)
 80073c4:	601a      	str	r2, [r3, #0]
    break;
 80073c6:	e002      	b.n	80073ce <AT_Send+0x2e2>
#endif

  case AT_END:
    break;
 80073c8:	46c0      	nop			@ (mov r8, r8)
 80073ca:	e000      	b.n	80073ce <AT_Send+0x2e2>
  break;
 80073cc:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80073ce:	230f      	movs	r3, #15
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	781b      	ldrb	r3, [r3, #0]
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b005      	add	sp, #20
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	0802e15c 	.word	0x0802e15c
 80073e0:	20000694 	.word	0x20000694
 80073e4:	0802b338 	.word	0x0802b338
 80073e8:	0802abfc 	.word	0x0802abfc
 80073ec:	0802b344 	.word	0x0802b344
 80073f0:	0802b358 	.word	0x0802b358
 80073f4:	0802b37c 	.word	0x0802b37c

080073f8 <is_OM_configured>:

bool is_OM_configured(void) {
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b08b      	sub	sp, #44	@ 0x2c
 80073fc:	af00      	add	r7, sp, #0
//bert
  uint8_t boxConfig[IdSize];
  char Buffer[1+(2*IdSize)];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80073fe:	241c      	movs	r4, #28
 8007400:	193b      	adds	r3, r7, r4
 8007402:	4814      	ldr	r0, [pc, #80]	@ (8007454 <is_OM_configured+0x5c>)
 8007404:	220c      	movs	r2, #12
 8007406:	0019      	movs	r1, r3
 8007408:	f004 feda 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 800740c:	193a      	adds	r2, r7, r4
 800740e:	003b      	movs	r3, r7
 8007410:	0011      	movs	r1, r2
 8007412:	0018      	movs	r0, r3
 8007414:	f7fd ff64 	bl	80052e0 <uint8ArrayToString>
  Buffer[12] = '\0';
 8007418:	003b      	movs	r3, r7
 800741a:	2200      	movs	r2, #0
 800741c:	731a      	strb	r2, [r3, #12]
  if (!isKeyValid(boxConfig, "box", "upload")) {
 800741e:	4a0e      	ldr	r2, [pc, #56]	@ (8007458 <is_OM_configured+0x60>)
 8007420:	490e      	ldr	r1, [pc, #56]	@ (800745c <is_OM_configured+0x64>)
 8007422:	193b      	adds	r3, r7, r4
 8007424:	0018      	movs	r0, r3
 8007426:	f7fd ff2b 	bl	8005280 <isKeyValid>
 800742a:	0003      	movs	r3, r0
 800742c:	001a      	movs	r2, r3
 800742e:	2301      	movs	r3, #1
 8007430:	4053      	eors	r3, r2
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <is_OM_configured+0x52>
    ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007438:	f00d faac 	bl	8014994 <HAL_GetTick>
 800743c:	0003      	movs	r3, r0
 800743e:	4a08      	ldr	r2, [pc, #32]	@ (8007460 <is_OM_configured+0x68>)
 8007440:	189a      	adds	r2, r3, r2
 8007442:	4b08      	ldr	r3, [pc, #32]	@ (8007464 <is_OM_configured+0x6c>)
 8007444:	601a      	str	r2, [r3, #0]
    return false;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <is_OM_configured+0x54>
  }
  return true;
 800744a:	2301      	movs	r3, #1
}
 800744c:	0018      	movs	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	b00b      	add	sp, #44	@ 0x2c
 8007452:	bd90      	pop	{r4, r7, pc}
 8007454:	08080000 	.word	0x08080000
 8007458:	0802b390 	.word	0x0802b390
 800745c:	0802b398 	.word	0x0802b398
 8007460:	0003a980 	.word	0x0003a980
 8007464:	20000694 	.word	0x20000694

08007468 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007474:	4b82      	ldr	r3, [pc, #520]	@ (8007680 <ESP_WakeTest+0x218>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d900      	bls.n	800747e <ESP_WakeTest+0x16>
 800747c:	e0e4      	b.n	8007648 <ESP_WakeTest+0x1e0>
 800747e:	009a      	lsls	r2, r3, #2
 8007480:	4b80      	ldr	r3, [pc, #512]	@ (8007684 <ESP_WakeTest+0x21c>)
 8007482:	18d3      	adds	r3, r2, r3
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007488:	4b7f      	ldr	r3, [pc, #508]	@ (8007688 <ESP_WakeTest+0x220>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	4053      	eors	r3, r2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d041      	beq.n	800751a <ESP_WakeTest+0xb2>
        EspTurnedOn = true;
 8007496:	4b7c      	ldr	r3, [pc, #496]	@ (8007688 <ESP_WakeTest+0x220>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	487a      	ldr	r0, [pc, #488]	@ (800768c <ESP_WakeTest+0x224>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	0019      	movs	r1, r3
 80074a6:	f00e fcdc 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80074aa:	2032      	movs	r0, #50	@ 0x32
 80074ac:	f00d fa7c 	bl	80149a8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074b0:	2380      	movs	r3, #128	@ 0x80
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4875      	ldr	r0, [pc, #468]	@ (800768c <ESP_WakeTest+0x224>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	0019      	movs	r1, r3
 80074ba:	f00e fcd2 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074be:	200a      	movs	r0, #10
 80074c0:	f00d fa72 	bl	80149a8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80074c4:	4b72      	ldr	r3, [pc, #456]	@ (8007690 <ESP_WakeTest+0x228>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	2101      	movs	r1, #1
 80074ca:	0018      	movs	r0, r3
 80074cc:	f00e fcc9 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074d0:	200a      	movs	r0, #10
 80074d2:	f00d fa69 	bl	80149a8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80074d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <ESP_WakeTest+0x228>)
 80074d8:	2201      	movs	r2, #1
 80074da:	2102      	movs	r1, #2
 80074dc:	0018      	movs	r0, r3
 80074de:	f00e fcc0 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(50); // wait for 5RC
 80074e2:	2032      	movs	r0, #50	@ 0x32
 80074e4:	f00d fa60 	bl	80149a8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074e8:	4b69      	ldr	r3, [pc, #420]	@ (8007690 <ESP_WakeTest+0x228>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	2101      	movs	r1, #1
 80074ee:	0018      	movs	r0, r3
 80074f0:	f00e fcb7 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80074f4:	2064      	movs	r0, #100	@ 0x64
 80074f6:	f00d fa57 	bl	80149a8 <HAL_Delay>
        batteryCharge = ReadBatteryVoltage();  // read voltage in loaded condition
 80074fa:	f002 fb3b 	bl	8009b74 <ReadBatteryVoltage>
 80074fe:	1c02      	adds	r2, r0, #0
 8007500:	4b64      	ldr	r3, [pc, #400]	@ (8007694 <ESP_WakeTest+0x22c>)
 8007502:	601a      	str	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007504:	f00d fa46 	bl	8014994 <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	22e1      	movs	r2, #225	@ 0xe1
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	189a      	adds	r2, r3, r2
 8007510:	4b61      	ldr	r3, [pc, #388]	@ (8007698 <ESP_WakeTest+0x230>)
 8007512:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007514:	4b5c      	ldr	r3, [pc, #368]	@ (8007688 <ESP_WakeTest+0x220>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	4b5f      	ldr	r3, [pc, #380]	@ (800769c <ESP_WakeTest+0x234>)
 8007520:	0011      	movs	r1, r2
 8007522:	0018      	movs	r0, r3
 8007524:	f7fd fcfe 	bl	8004f24 <ESP_Receive>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d100      	bne.n	800752e <ESP_WakeTest+0xc6>
 800752c:	e09f      	b.n	800766e <ESP_WakeTest+0x206>
        TestState = ESP_TEST_SEND;
 800752e:	4b54      	ldr	r3, [pc, #336]	@ (8007680 <ESP_WakeTest+0x218>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007534:	e09b      	b.n	800766e <ESP_WakeTest+0x206>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007536:	4b58      	ldr	r3, [pc, #352]	@ (8007698 <ESP_WakeTest+0x230>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	0018      	movs	r0, r3
 800753c:	f00c fc54 	bl	8013de8 <TimestampIsReached>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d100      	bne.n	8007546 <ESP_WakeTest+0xde>
 8007544:	e095      	b.n	8007672 <ESP_WakeTest+0x20a>
        ATSend = AT_Send(ATCommand);
 8007546:	4b56      	ldr	r3, [pc, #344]	@ (80076a0 <ESP_WakeTest+0x238>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	1dfc      	adds	r4, r7, #7
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff fdcd 	bl	80070ec <AT_Send>
 8007552:	0003      	movs	r3, r0
 8007554:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d100      	bne.n	8007560 <ESP_WakeTest+0xf8>
 800755e:	e088      	b.n	8007672 <ESP_WakeTest+0x20a>
          TestState = ESP_TEST_RECEIVE;
 8007560:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <ESP_WakeTest+0x218>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007566:	e084      	b.n	8007672 <ESP_WakeTest+0x20a>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8007568:	4b4b      	ldr	r3, [pc, #300]	@ (8007698 <ESP_WakeTest+0x230>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0018      	movs	r0, r3
 800756e:	f00c fc3b 	bl	8013de8 <TimestampIsReached>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d100      	bne.n	8007578 <ESP_WakeTest+0x110>
 8007576:	e07e      	b.n	8007676 <ESP_WakeTest+0x20e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007578:	4b4a      	ldr	r3, [pc, #296]	@ (80076a4 <ESP_WakeTest+0x23c>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	0018      	movs	r0, r3
 800757e:	f7ff fc73 	bl	8006e68 <DMA_ProcessBuffer>
 8007582:	0003      	movs	r3, r0
 8007584:	001a      	movs	r2, r3
 8007586:	4b48      	ldr	r3, [pc, #288]	@ (80076a8 <ESP_WakeTest+0x240>)
 8007588:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <ESP_WakeTest+0x240>)
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	4b45      	ldr	r3, [pc, #276]	@ (80076a4 <ESP_WakeTest+0x23c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	1dbc      	adds	r4, r7, #6
 8007594:	0019      	movs	r1, r3
 8007596:	0010      	movs	r0, r2
 8007598:	f7ff fd66 	bl	8007068 <ATCompare>
 800759c:	0003      	movs	r3, r0
 800759e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80075a0:	4b41      	ldr	r3, [pc, #260]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <ESP_WakeTest+0x146>
          TestState = ESP_TEST_SEND;
 80075a8:	4b35      	ldr	r3, [pc, #212]	@ (8007680 <ESP_WakeTest+0x218>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80075ae:	4b3e      	ldr	r3, [pc, #248]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b07      	cmp	r3, #7
 80075b4:	d104      	bne.n	80075c0 <ESP_WakeTest+0x158>
          StartProg();
 80075b6:	f7fe fefd 	bl	80063b4 <StartProg>
          TestState = ESP_TEST_BOOT;
 80075ba:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <ESP_WakeTest+0x218>)
 80075bc:	2205      	movs	r2, #5
 80075be:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80075c0:	4b39      	ldr	r3, [pc, #228]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d109      	bne.n	80075dc <ESP_WakeTest+0x174>
          ESPTimeStamp = HAL_GetTick() + 50;
 80075c8:	f00d f9e4 	bl	8014994 <HAL_GetTick>
 80075cc:	0003      	movs	r3, r0
 80075ce:	3332      	adds	r3, #50	@ 0x32
 80075d0:	001a      	movs	r2, r3
 80075d2:	4b31      	ldr	r3, [pc, #196]	@ (8007698 <ESP_WakeTest+0x230>)
 80075d4:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007680 <ESP_WakeTest+0x218>)
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d048      	beq.n	8007676 <ESP_WakeTest+0x20e>
          TestState = ESP_TEST_VALIDATE;
 80075e4:	4b26      	ldr	r3, [pc, #152]	@ (8007680 <ESP_WakeTest+0x218>)
 80075e6:	2203      	movs	r2, #3
 80075e8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075ea:	e044      	b.n	8007676 <ESP_WakeTest+0x20e>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80075ec:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <ESP_WakeTest+0x244>)
 80075ee:	22fa      	movs	r2, #250	@ 0xfa
 80075f0:	0112      	lsls	r2, r2, #4
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80075f4:	f00b f8e4 	bl	80127c0 <Calculate_LED_ON>
 80075f8:	0003      	movs	r3, r0
 80075fa:	001a      	movs	r2, r3
 80075fc:	4b2b      	ldr	r3, [pc, #172]	@ (80076ac <ESP_WakeTest+0x244>)
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007600:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <ESP_WakeTest+0x244>)
 8007602:	22fa      	movs	r2, #250	@ 0xfa
 8007604:	0112      	lsls	r2, r2, #4
 8007606:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <ESP_WakeTest+0x218>)
 800760a:	2204      	movs	r2, #4
 800760c:	701a      	strb	r2, [r3, #0]

      break;
 800760e:	e033      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007610:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <ESP_WakeTest+0x248>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <ESP_WakeTest+0x228>)
 8007618:	2200      	movs	r2, #0
 800761a:	2101      	movs	r1, #1
 800761c:	0018      	movs	r0, r3
 800761e:	f00e fc20 	bl	8015e62 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007622:	2380      	movs	r3, #128	@ 0x80
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4819      	ldr	r0, [pc, #100]	@ (800768c <ESP_WakeTest+0x224>)
 8007628:	2200      	movs	r2, #0
 800762a:	0019      	movs	r1, r3
 800762c:	f00e fc19 	bl	8015e62 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007630:	4b17      	ldr	r3, [pc, #92]	@ (8007690 <ESP_WakeTest+0x228>)
 8007632:	2200      	movs	r2, #0
 8007634:	2102      	movs	r1, #2
 8007636:	0018      	movs	r0, r3
 8007638:	f00e fc13 	bl	8015e62 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800763c:	f006 f800 	bl	800d640 <SetESPMeasurementDone>
      EspTurnedOn = false;
 8007640:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <ESP_WakeTest+0x220>)
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e017      	b.n	8007678 <ESP_WakeTest+0x210>

    default:
      TestState = ESP_TEST_INIT;
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <ESP_WakeTest+0x218>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e013      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <ESP_WakeTest+0x244>)
 8007652:	22fa      	movs	r2, #250	@ 0xfa
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8007658:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <ESP_WakeTest+0x244>)
 800765a:	22fa      	movs	r2, #250	@ 0xfa
 800765c:	0112      	lsls	r2, r2, #4
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007660:	f00b f8ae 	bl	80127c0 <Calculate_LED_ON>
 8007664:	0003      	movs	r3, r0
 8007666:	001a      	movs	r2, r3
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <ESP_WakeTest+0x244>)
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800766c:	e004      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	e002      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	e000      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007676:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b003      	add	sp, #12
 800767e:	bd90      	pop	{r4, r7, pc}
 8007680:	20000703 	.word	0x20000703
 8007684:	0802e1b8 	.word	0x0802e1b8
 8007688:	200005ac 	.word	0x200005ac
 800768c:	50000800 	.word	0x50000800
 8007690:	50001c00 	.word	0x50001c00
 8007694:	20002158 	.word	0x20002158
 8007698:	20000694 	.word	0x20000694
 800769c:	200004ac 	.word	0x200004ac
 80076a0:	20000701 	.word	0x20000701
 80076a4:	20000700 	.word	0x20000700
 80076a8:	20000033 	.word	0x20000033
 80076ac:	40000400 	.word	0x40000400
 80076b0:	20000001 	.word	0x20000001

080076b4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80076ba:	1dfb      	adds	r3, r7, #7
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
// Het lijkt er op dat ESP32  niet meer start indien de batterijspanning onder de 3,77 Volt daalt.
// Om uart fouten te voorkomen mogelijk ESP niet meer afhandelen.
  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80076c0:	4b6a      	ldr	r3, [pc, #424]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d028      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076cc:	f00c fc6c 	bl	8013fa8 <GetVerboseLevel>
 80076d0:	0003      	movs	r3, r0
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d123      	bne.n	800771e <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 80076d6:	4b65      	ldr	r3, [pc, #404]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	4b65      	ldr	r3, [pc, #404]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076dc:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 80076de:	4b64      	ldr	r3, [pc, #400]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d107      	bne.n	80076f6 <ESP_Upkeep+0x42>
 80076e6:	4b63      	ldr	r3, [pc, #396]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b0e      	cmp	r3, #14
 80076ec:	d017      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076ee:	4b61      	ldr	r3, [pc, #388]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b14      	cmp	r3, #20
 80076f4:	d013      	beq.n	800771e <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80076f6:	4b5e      	ldr	r3, [pc, #376]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	001d      	movs	r5, r3
 80076fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	0018      	movs	r0, r3
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <ESP_Upkeep+0x1c4>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	001c      	movs	r4, r3
 8007708:	4b5c      	ldr	r3, [pc, #368]	@ (800787c <ESP_Upkeep+0x1c8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4a5c      	ldr	r2, [pc, #368]	@ (8007880 <ESP_Upkeep+0x1cc>)
 800770e:	495d      	ldr	r1, [pc, #372]	@ (8007884 <ESP_Upkeep+0x1d0>)
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	9401      	str	r4, [sp, #4]
 8007714:	9000      	str	r0, [sp, #0]
 8007716:	002b      	movs	r3, r5
 8007718:	2003      	movs	r0, #3
 800771a:	f00c fbbb 	bl	8013e94 <CreateLine>
    }
  }
  switch (EspState) {
 800771e:	4b53      	ldr	r3, [pc, #332]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d901      	bls.n	800772a <ESP_Upkeep+0x76>
 8007726:	f000 fcfc 	bl	8008122 <ESP_Upkeep+0xa6e>
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	4b56      	ldr	r3, [pc, #344]	@ (8007888 <ESP_Upkeep+0x1d4>)
 800772e:	18d3      	adds	r3, r2, r3
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007734:	4b4d      	ldr	r3, [pc, #308]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	f000 fd0d 	bl	8008158 <ESP_Upkeep+0xaa4>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800773e:	4b53      	ldr	r3, [pc, #332]	@ (800788c <ESP_Upkeep+0x1d8>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007744:	f006 f9dc 	bl	800db00 <AllDevicesReady>
 8007748:	0003      	movs	r3, r0
 800774a:	001a      	movs	r2, r3
 800774c:	2301      	movs	r3, #1
 800774e:	4053      	eors	r3, r2
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <ESP_Upkeep+0xa6>
 8007756:	f000 fcf0 	bl	800813a <ESP_Upkeep+0xa86>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 800775a:	f00b f98b 	bl	8012a74 <SetESPIndicator>
      if(!EspTurnedOn){
 800775e:	4b4c      	ldr	r3, [pc, #304]	@ (8007890 <ESP_Upkeep+0x1dc>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	4053      	eors	r3, r2
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d044      	beq.n	80077f6 <ESP_Upkeep+0x142>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800776c:	2380      	movs	r3, #128	@ 0x80
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	4848      	ldr	r0, [pc, #288]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007772:	2200      	movs	r2, #0
 8007774:	0019      	movs	r1, r3
 8007776:	f00e fb74 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800777a:	200a      	movs	r0, #10
 800777c:	f00d f914 	bl	80149a8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4843      	ldr	r0, [pc, #268]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007786:	2201      	movs	r2, #1
 8007788:	0019      	movs	r1, r3
 800778a:	f00e fb6a 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800778e:	2032      	movs	r0, #50	@ 0x32
 8007790:	f00d f90a 	bl	80149a8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007794:	4b40      	ldr	r3, [pc, #256]	@ (8007898 <ESP_Upkeep+0x1e4>)
 8007796:	2200      	movs	r2, #0
 8007798:	2101      	movs	r1, #1
 800779a:	0018      	movs	r0, r3
 800779c:	f00e fb61 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80077a0:	200a      	movs	r0, #10
 80077a2:	f00d f901 	bl	80149a8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80077a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	2102      	movs	r1, #2
 80077ac:	0018      	movs	r0, r3
 80077ae:	f00e fb58 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077b2:	2032      	movs	r0, #50	@ 0x32
 80077b4:	f00d f8f8 	bl	80149a8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80077b8:	4b37      	ldr	r3, [pc, #220]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	2101      	movs	r1, #1
 80077be:	0018      	movs	r0, r3
 80077c0:	f00e fb4f 	bl	8015e62 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077c4:	2032      	movs	r0, #50	@ 0x32
 80077c6:	f00d f8ef 	bl	80149a8 <HAL_Delay>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80077ca:	f00d f8e3 	bl	8014994 <HAL_GetTick>
 80077ce:	0003      	movs	r3, r0
 80077d0:	22e1      	movs	r2, #225	@ 0xe1
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	189a      	adds	r2, r3, r2
 80077d6:	4b31      	ldr	r3, [pc, #196]	@ (800789c <ESP_Upkeep+0x1e8>)
 80077d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80077da:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <ESP_Upkeep+0x1dc>)
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 80077e0:	4a2f      	ldr	r2, [pc, #188]	@ (80078a0 <ESP_Upkeep+0x1ec>)
 80077e2:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <ESP_Upkeep+0x1d0>)
 80077e4:	0019      	movs	r1, r3
 80077e6:	2003      	movs	r0, #3
 80077e8:	f00c fb54 	bl	8013e94 <CreateLine>
        SetBatteryReadTimer(ESP_START_UP_TIME/2);  // read battery voltage during boot of ESP32
 80077ec:	23e1      	movs	r3, #225	@ 0xe1
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	0018      	movs	r0, r3
 80077f2:	f005 f9b5 	bl	800cb60 <SetBatteryReadTimer>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80077f6:	2380      	movs	r3, #128	@ 0x80
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	4b2a      	ldr	r3, [pc, #168]	@ (80078a4 <ESP_Upkeep+0x1f0>)
 80077fc:	0011      	movs	r1, r2
 80077fe:	0018      	movs	r0, r3
 8007800:	f7fd fb90 	bl	8004f24 <ESP_Receive>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d101      	bne.n	800780c <ESP_Upkeep+0x158>
 8007808:	f000 fc99 	bl	800813e <ESP_Upkeep+0xa8a>
        EspState = ESP_STATE_WAIT_AWAKE;
 800780c:	4b17      	ldr	r3, [pc, #92]	@ (800786c <ESP_Upkeep+0x1b8>)
 800780e:	220f      	movs	r2, #15
 8007810:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007812:	f00d f8bf 	bl	8014994 <HAL_GetTick>
 8007816:	0003      	movs	r3, r0
 8007818:	22fa      	movs	r2, #250	@ 0xfa
 800781a:	00d2      	lsls	r2, r2, #3
 800781c:	189a      	adds	r2, r3, r2
 800781e:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007820:	601a      	str	r2, [r3, #0]
      }
      break;
 8007822:	f000 fc8c 	bl	800813e <ESP_Upkeep+0xa8a>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8007826:	2001      	movs	r0, #1
 8007828:	f7ff fb1e 	bl	8006e68 <DMA_ProcessBuffer>
 800782c:	0003      	movs	r3, r0
 800782e:	001a      	movs	r2, r3
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007832:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007834:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	1dbc      	adds	r4, r7, #6
 800783a:	2101      	movs	r1, #1
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fc13 	bl	8007068 <ATCompare>
 8007842:	0003      	movs	r3, r0
 8007844:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	0018      	movs	r0, r3
 8007854:	f00c fac8 	bl	8013de8 <TimestampIsReached>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d101      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800785c:	f000 fc71 	bl	8008142 <ESP_Upkeep+0xa8e>
          EspState = ESP_STATE_MODE_SELECT;
 8007860:	4b02      	ldr	r3, [pc, #8]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007862:	220b      	movs	r2, #11
 8007864:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007866:	f000 fc6c 	bl	8008142 <ESP_Upkeep+0xa8e>
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	20000030 	.word	0x20000030
 8007870:	20000003 	.word	0x20000003
 8007874:	20000701 	.word	0x20000701
 8007878:	20000702 	.word	0x20000702
 800787c:	20000700 	.word	0x20000700
 8007880:	0802b39c 	.word	0x0802b39c
 8007884:	0802abfc 	.word	0x0802abfc
 8007888:	0802e1d0 	.word	0x0802e1d0
 800788c:	20001114 	.word	0x20001114
 8007890:	200005ac 	.word	0x200005ac
 8007894:	50000800 	.word	0x50000800
 8007898:	50001c00 	.word	0x50001c00
 800789c:	20000694 	.word	0x20000694
 80078a0:	0802b3c8 	.word	0x0802b3c8
 80078a4:	200004ac 	.word	0x200004ac
 80078a8:	20000938 	.word	0x20000938
 80078ac:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80078b0:	4bd6      	ldr	r3, [pc, #856]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078b2:	2209      	movs	r2, #9
 80078b4:	2116      	movs	r1, #22
 80078b6:	0018      	movs	r0, r3
 80078b8:	f01e ff50 	bl	802675c <memset>
      if(!InitIsDone || WifiReset){
 80078bc:	4bd4      	ldr	r3, [pc, #848]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	4053      	eors	r3, r2
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <ESP_Upkeep+0x21e>
 80078ca:	4bd2      	ldr	r3, [pc, #840]	@ (8007c14 <ESP_Upkeep+0x560>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d016      	beq.n	8007900 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_INIT, sizeof(AT_INIT));
 80078d2:	4bce      	ldr	r3, [pc, #824]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078d4:	4ad0      	ldr	r2, [pc, #832]	@ (8007c18 <ESP_Upkeep+0x564>)
 80078d6:	ca03      	ldmia	r2!, {r0, r1}
 80078d8:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 80078da:	4bd0      	ldr	r3, [pc, #832]	@ (8007c1c <ESP_Upkeep+0x568>)
 80078dc:	2204      	movs	r2, #4
 80078de:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078e0:	4bcf      	ldr	r3, [pc, #828]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80078e6:	4bcf      	ldr	r3, [pc, #828]	@ (8007c24 <ESP_Upkeep+0x570>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078ec:	4bcc      	ldr	r3, [pc, #816]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	001a      	movs	r2, r3
 80078f2:	4bc6      	ldr	r3, [pc, #792]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078f4:	5c9a      	ldrb	r2, [r3, r2]
 80078f6:	4bcc      	ldr	r3, [pc, #816]	@ (8007c28 <ESP_Upkeep+0x574>)
 80078f8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078fa:	4bcc      	ldr	r3, [pc, #816]	@ (8007c2c <ESP_Upkeep+0x578>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007900:	4bc3      	ldr	r3, [pc, #780]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01f      	beq.n	8007948 <ESP_Upkeep+0x294>
 8007908:	4bc9      	ldr	r3, [pc, #804]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	4053      	eors	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <ESP_Upkeep+0x294>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007916:	4bbd      	ldr	r3, [pc, #756]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007918:	4ac6      	ldr	r2, [pc, #792]	@ (8007c34 <ESP_Upkeep+0x580>)
 800791a:	6811      	ldr	r1, [r2, #0]
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	8892      	ldrh	r2, [r2, #4]
 8007920:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007922:	4bbe      	ldr	r3, [pc, #760]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007924:	2204      	movs	r2, #4
 8007926:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007928:	4bbd      	ldr	r3, [pc, #756]	@ (8007c20 <ESP_Upkeep+0x56c>)
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800792e:	4bbd      	ldr	r3, [pc, #756]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007934:	4bba      	ldr	r3, [pc, #744]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	001a      	movs	r2, r3
 800793a:	4bb4      	ldr	r3, [pc, #720]	@ (8007c0c <ESP_Upkeep+0x558>)
 800793c:	5c9a      	ldrb	r2, [r3, r2]
 800793e:	4bba      	ldr	r3, [pc, #744]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007940:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007942:	4bba      	ldr	r3, [pc, #744]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !APtested){
 8007948:	4bb1      	ldr	r3, [pc, #708]	@ (8007c10 <ESP_Upkeep+0x55c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d021      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007950:	4bb7      	ldr	r3, [pc, #732]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01d      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007958:	4bb7      	ldr	r3, [pc, #732]	@ (8007c38 <ESP_Upkeep+0x584>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2201      	movs	r2, #1
 800795e:	4053      	eors	r3, r2
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_TEST, 2);
 8007966:	4bb5      	ldr	r3, [pc, #724]	@ (8007c3c <ESP_Upkeep+0x588>)
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	4ba8      	ldr	r3, [pc, #672]	@ (8007c0c <ESP_Upkeep+0x558>)
 800796c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800796e:	4bab      	ldr	r3, [pc, #684]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007970:	2204      	movs	r2, #4
 8007972:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007974:	4baa      	ldr	r3, [pc, #680]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800797a:	4baa      	ldr	r3, [pc, #680]	@ (8007c24 <ESP_Upkeep+0x570>)
 800797c:	2204      	movs	r2, #4
 800797e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007980:	4ba7      	ldr	r3, [pc, #668]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	001a      	movs	r2, r3
 8007986:	4ba1      	ldr	r3, [pc, #644]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007988:	5c9a      	ldrb	r2, [r3, r2]
 800798a:	4ba7      	ldr	r3, [pc, #668]	@ (8007c28 <ESP_Upkeep+0x574>)
 800798c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800798e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007994:	4b9e      	ldr	r3, [pc, #632]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d024      	beq.n	80079e6 <ESP_Upkeep+0x332>
 800799c:	4ba4      	ldr	r3, [pc, #656]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d020      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079a4:	4ba4      	ldr	r3, [pc, #656]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01c      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079ac:	4ba4      	ldr	r3, [pc, #656]	@ (8007c40 <ESP_Upkeep+0x58c>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d118      	bne.n	80079e6 <ESP_Upkeep+0x332>
        memcpy(ATCommandArray, AT_MAIL, 3);
 80079b4:	4b95      	ldr	r3, [pc, #596]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079b6:	4aa3      	ldr	r2, [pc, #652]	@ (8007c44 <ESP_Upkeep+0x590>)
 80079b8:	8811      	ldrh	r1, [r2, #0]
 80079ba:	8019      	strh	r1, [r3, #0]
 80079bc:	7892      	ldrb	r2, [r2, #2]
 80079be:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80079c0:	4b96      	ldr	r3, [pc, #600]	@ (8007c1c <ESP_Upkeep+0x568>)
 80079c2:	2204      	movs	r2, #4
 80079c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079c6:	4b96      	ldr	r3, [pc, #600]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 80079cc:	4b95      	ldr	r3, [pc, #596]	@ (8007c24 <ESP_Upkeep+0x570>)
 80079ce:	2206      	movs	r2, #6
 80079d0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079d2:	4b93      	ldr	r3, [pc, #588]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	001a      	movs	r2, r3
 80079d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079da:	5c9a      	ldrb	r2, [r3, r2]
 80079dc:	4b92      	ldr	r3, [pc, #584]	@ (8007c28 <ESP_Upkeep+0x574>)
 80079de:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079e0:	4b92      	ldr	r3, [pc, #584]	@ (8007c2c <ESP_Upkeep+0x578>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      }
#endif
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 80079e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d030      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079ee:	4b90      	ldr	r3, [pc, #576]	@ (8007c30 <ESP_Upkeep+0x57c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02c      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079f6:	4b90      	ldr	r3, [pc, #576]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d028      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079fe:	4b92      	ldr	r3, [pc, #584]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2201      	movs	r2, #1
 8007a04:	4053      	eors	r3, r2
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d021      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 8007a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d01d      	beq.n	8007a50 <ESP_Upkeep+0x39c>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007a14:	4b7d      	ldr	r3, [pc, #500]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a16:	4a8d      	ldr	r2, [pc, #564]	@ (8007c4c <ESP_Upkeep+0x598>)
 8007a18:	8811      	ldrh	r1, [r2, #0]
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	7892      	ldrb	r2, [r2, #2]
 8007a1e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a22:	2204      	movs	r2, #4
 8007a24:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a26:	4b7e      	ldr	r3, [pc, #504]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a32:	f00c ffaf 	bl	8014994 <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	4b85      	ldr	r3, [pc, #532]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a3a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a3c:	4b78      	ldr	r3, [pc, #480]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	001a      	movs	r2, r3
 8007a42:	4b72      	ldr	r3, [pc, #456]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a44:	5c9a      	ldrb	r2, [r3, r2]
 8007a46:	4b78      	ldr	r3, [pc, #480]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007a48:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a4a:	4b78      	ldr	r3, [pc, #480]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a50:	4b6f      	ldr	r3, [pc, #444]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a58:	4b75      	ldr	r3, [pc, #468]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d027      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a60:	4b75      	ldr	r3, [pc, #468]	@ (8007c38 <ESP_Upkeep+0x584>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d023      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a68:	4b77      	ldr	r3, [pc, #476]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01f      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a70:	4b73      	ldr	r3, [pc, #460]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d01b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007a78:	4b76      	ldr	r3, [pc, #472]	@ (8007c54 <ESP_Upkeep+0x5a0>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b63      	ldr	r3, [pc, #396]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a7e:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a80:	4b66      	ldr	r3, [pc, #408]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a82:	2204      	movs	r2, #4
 8007a84:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a86:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007a8c:	4b65      	ldr	r3, [pc, #404]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a8e:	2205      	movs	r2, #5
 8007a90:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a92:	f00c ff7f 	bl	8014994 <HAL_GetTick>
 8007a96:	0002      	movs	r2, r0
 8007a98:	4b6d      	ldr	r3, [pc, #436]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a9a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a9c:	4b60      	ldr	r3, [pc, #384]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007aa4:	5c9a      	ldrb	r2, [r3, r2]
 8007aa6:	4b60      	ldr	r3, [pc, #384]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007aa8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007aaa:	4b60      	ldr	r3, [pc, #384]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007ab0:	4b69      	ldr	r3, [pc, #420]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d100      	bne.n	8007aba <ESP_Upkeep+0x406>
 8007ab8:	e345      	b.n	8008146 <ESP_Upkeep+0xa92>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007aba:	4b54      	ldr	r3, [pc, #336]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007abc:	4a67      	ldr	r2, [pc, #412]	@ (8007c5c <ESP_Upkeep+0x5a8>)
 8007abe:	6811      	ldr	r1, [r2, #0]
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	7912      	ldrb	r2, [r2, #4]
 8007ac4:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode for local wifi config selected");
 8007ac6:	4a66      	ldr	r2, [pc, #408]	@ (8007c60 <ESP_Upkeep+0x5ac>)
 8007ac8:	4b66      	ldr	r3, [pc, #408]	@ (8007c64 <ESP_Upkeep+0x5b0>)
 8007aca:	0019      	movs	r1, r3
 8007acc:	2003      	movs	r0, #3
 8007ace:	f00c f9e1 	bl	8013e94 <CreateLine>
        DisableConnectedDevices();
 8007ad2:	f006 f9bf 	bl	800de54 <DisableConnectedDevices>
        usblog = false;
 8007ad6:	4b64      	ldr	r3, [pc, #400]	@ (8007c68 <ESP_Upkeep+0x5b4>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007adc:	4b4f      	ldr	r3, [pc, #316]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007ade:	2204      	movs	r2, #4
 8007ae0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007aea:	2203      	movs	r2, #3
 8007aec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007aee:	4b4c      	ldr	r3, [pc, #304]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	4b45      	ldr	r3, [pc, #276]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007af6:	5c9a      	ldrb	r2, [r3, r2]
 8007af8:	4b4b      	ldr	r3, [pc, #300]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007afa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007afc:	4b4b      	ldr	r3, [pc, #300]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007b02:	e320      	b.n	8008146 <ESP_Upkeep+0xa92>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007b04:	4b48      	ldr	r3, [pc, #288]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	1dfc      	adds	r4, r7, #7
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff faee 	bl	80070ec <AT_Send>
 8007b10:	0003      	movs	r3, r0
 8007b12:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d100      	bne.n	8007b1e <ESP_Upkeep+0x46a>
 8007b1c:	e315      	b.n	800814a <ESP_Upkeep+0xa96>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b20:	2203      	movs	r2, #3
 8007b22:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007b24:	e311      	b.n	800814a <ESP_Upkeep+0xa96>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007b26:	4b4c      	ldr	r3, [pc, #304]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <ESP_Upkeep+0x48a>
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d003      	beq.n	8007b3e <ESP_Upkeep+0x48a>
        EspState = ESP_STATE_MODE_SELECT;
 8007b36:	4b39      	ldr	r3, [pc, #228]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b38:	220b      	movs	r2, #11
 8007b3a:	701a      	strb	r2, [r3, #0]
        break;
 8007b3c:	e30c      	b.n	8008158 <ESP_Upkeep+0xaa4>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f00c f950 	bl	8013de8 <TimestampIsReached>
 8007b48:	1e03      	subs	r3, r0, #0
 8007b4a:	d100      	bne.n	8007b4e <ESP_Upkeep+0x49a>
 8007b4c:	e2ff      	b.n	800814e <ESP_Upkeep+0xa9a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007b4e:	4b37      	ldr	r3, [pc, #220]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff f988 	bl	8006e68 <DMA_ProcessBuffer>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	4b44      	ldr	r3, [pc, #272]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b5e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007b60:	4b43      	ldr	r3, [pc, #268]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	1d7c      	adds	r4, r7, #5
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	0010      	movs	r0, r2
 8007b6e:	f7ff fa7b 	bl	8007068 <ATCompare>
 8007b72:	0003      	movs	r3, r0
 8007b74:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007b76:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d000      	beq.n	8007b80 <ESP_Upkeep+0x4cc>
 8007b7e:	e085      	b.n	8007c8c <ESP_Upkeep+0x5d8>
          if(ATCommand == AT_SENDDATA){
 8007b80:	4b29      	ldr	r3, [pc, #164]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d108      	bne.n	8007b9a <ESP_Upkeep+0x4e6>
            ATCommand = AT_HTTPCPOST;
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b8a:	220e      	movs	r2, #14
 8007b8c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b94:	4b22      	ldr	r3, [pc, #136]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand == AT_SENDMAIL){
 8007b9a:	4b23      	ldr	r3, [pc, #140]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d108      	bne.n	8007bb4 <ESP_Upkeep+0x500>
            ATCommand = AT_HTTPCPOST_MAILAPI;
 8007ba2:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007ba4:	2214      	movs	r2, #20
 8007ba6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ba8:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007bae:	4b1c      	ldr	r3, [pc, #112]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007bb4:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007bba:	4b2e      	ldr	r3, [pc, #184]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc4:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d95e      	bls.n	8007c8c <ESP_Upkeep+0x5d8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007bce:	f00c fee1 	bl	8014994 <HAL_GetTick>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	4a28      	ldr	r2, [pc, #160]	@ (8007c78 <ESP_Upkeep+0x5c4>)
 8007bd6:	189a      	adds	r2, r3, r2
 8007bd8:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007bda:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <ESP_Upkeep+0x5c8>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007be2:	f7ff fa33 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007be6:	f00c fed5 	bl	8014994 <HAL_GetTick>
 8007bea:	0002      	movs	r2, r0
 8007bec:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bee:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007bf0:	4b23      	ldr	r3, [pc, #140]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	4a22      	ldr	r2, [pc, #136]	@ (8007c84 <ESP_Upkeep+0x5d0>)
 8007bfc:	4922      	ldr	r1, [pc, #136]	@ (8007c88 <ESP_Upkeep+0x5d4>)
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f00c f948 	bl	8013e94 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007c06:	220d      	movs	r2, #13
 8007c08:	701a      	strb	r2, [r3, #0]
            break;
 8007c0a:	e2a5      	b.n	8008158 <ESP_Upkeep+0xaa4>
 8007c0c:	20000684 	.word	0x20000684
 8007c10:	200005ad 	.word	0x200005ad
 8007c14:	200005ae 	.word	0x200005ae
 8007c18:	20000004 	.word	0x20000004
 8007c1c:	20000030 	.word	0x20000030
 8007c20:	2000068e 	.word	0x2000068e
 8007c24:	20000702 	.word	0x20000702
 8007c28:	20000701 	.word	0x20000701
 8007c2c:	20000700 	.word	0x20000700
 8007c30:	200005b0 	.word	0x200005b0
 8007c34:	20000014 	.word	0x20000014
 8007c38:	200005b1 	.word	0x200005b1
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	200010f9 	.word	0x200010f9
 8007c44:	20000028 	.word	0x20000028
 8007c48:	20000002 	.word	0x20000002
 8007c4c:	2000000c 	.word	0x2000000c
 8007c50:	200005b4 	.word	0x200005b4
 8007c54:	20000024 	.word	0x20000024
 8007c58:	200005af 	.word	0x200005af
 8007c5c:	2000001c 	.word	0x2000001c
 8007c60:	0802b3d8 	.word	0x0802b3d8
 8007c64:	0802abfc 	.word	0x0802abfc
 8007c68:	200010f7 	.word	0x200010f7
 8007c6c:	20000694 	.word	0x20000694
 8007c70:	20000034 	.word	0x20000034
 8007c74:	2000068f 	.word	0x2000068f
 8007c78:	0003a980 	.word	0x0003a980
 8007c7c:	200005b3 	.word	0x200005b3
 8007c80:	200005b8 	.word	0x200005b8
 8007c84:	0802b408 	.word	0x0802b408
 8007c88:	0802ab98 	.word	0x0802ab98
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007c8c:	4bb3      	ldr	r3, [pc, #716]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d106      	bne.n	8007ca2 <ESP_Upkeep+0x5ee>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c94:	f00c fe7e 	bl	8014994 <HAL_GetTick>
 8007c98:	0003      	movs	r3, r0
 8007c9a:	330a      	adds	r3, #10
 8007c9c:	001a      	movs	r2, r3
 8007c9e:	4bb0      	ldr	r3, [pc, #704]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ca0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007ca2:	4bae      	ldr	r3, [pc, #696]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b0a      	cmp	r3, #10
 8007ca8:	d106      	bne.n	8007cb8 <ESP_Upkeep+0x604>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007caa:	f00c fe73 	bl	8014994 <HAL_GetTick>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	330a      	adds	r3, #10
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	4baa      	ldr	r3, [pc, #680]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cb6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007cb8:	4ba8      	ldr	r3, [pc, #672]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	d14b      	bne.n	8007d58 <ESP_Upkeep+0x6a4>
          timeoutcntr++;
 8007cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cca:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007ccc:	4aa6      	ldr	r2, [pc, #664]	@ (8007f68 <ESP_Upkeep+0x8b4>)
 8007cce:	4ba7      	ldr	r3, [pc, #668]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f00c f8de 	bl	8013e94 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007cd8:	4ba2      	ldr	r3, [pc, #648]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d924      	bls.n	8007d2a <ESP_Upkeep+0x676>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007ce0:	f00c fe58 	bl	8014994 <HAL_GetTick>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	4aa2      	ldr	r2, [pc, #648]	@ (8007f70 <ESP_Upkeep+0x8bc>)
 8007ce8:	189a      	adds	r2, r3, r2
 8007cea:	4b9d      	ldr	r3, [pc, #628]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cec:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007cee:	4ba1      	ldr	r3, [pc, #644]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007cf4:	f7ff f9aa 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007cf8:	f00c fe4c 	bl	8014994 <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d00:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007d02:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b9d      	ldr	r3, [pc, #628]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a9c      	ldr	r2, [pc, #624]	@ (8007f80 <ESP_Upkeep+0x8cc>)
 8007d0e:	4997      	ldr	r1, [pc, #604]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007d10:	2001      	movs	r0, #1
 8007d12:	f00c f8bf 	bl	8013e94 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007d16:	4b9b      	ldr	r3, [pc, #620]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d18:	220d      	movs	r2, #13
 8007d1a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d1e:	2216      	movs	r2, #22
 8007d20:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d22:	4b9a      	ldr	r3, [pc, #616]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
            break;
 8007d28:	e216      	b.n	8008158 <ESP_Upkeep+0xaa4>
          }
          if(ATCommand != AT_SENDDATA){
 8007d2a:	4b97      	ldr	r3, [pc, #604]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d003      	beq.n	8007d3a <ESP_Upkeep+0x686>
            EspState = ESP_STATE_SEND;
 8007d32:	4b94      	ldr	r3, [pc, #592]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d34:	2204      	movs	r2, #4
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e00e      	b.n	8007d58 <ESP_Upkeep+0x6a4>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007d3a:	4b93      	ldr	r3, [pc, #588]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d3c:	220e      	movs	r2, #14
 8007d3e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007d40:	4b93      	ldr	r3, [pc, #588]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4b91      	ldr	r3, [pc, #580]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d4a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d4e:	2202      	movs	r2, #2
 8007d50:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007d52:	4b8c      	ldr	r3, [pc, #560]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d54:	2204      	movs	r2, #4
 8007d56:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007d58:	1d7b      	adds	r3, r7, #5
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d100      	bne.n	8007d62 <ESP_Upkeep+0x6ae>
 8007d60:	e1f5      	b.n	800814e <ESP_Upkeep+0xa9a>
          EspState = ESP_STATE_NEXT_AT;
 8007d62:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d64:	2205      	movs	r2, #5
 8007d66:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d68:	e1f1      	b.n	800814e <ESP_Upkeep+0xa9a>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007d6a:	4b89      	ldr	r3, [pc, #548]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4b87      	ldr	r3, [pc, #540]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d74:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007d76:	4b86      	ldr	r3, [pc, #536]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <ESP_Upkeep+0x8e0>)
 8007d7e:	5c9a      	ldrb	r2, [r3, r2]
 8007d80:	4b81      	ldr	r3, [pc, #516]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d82:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007d84:	4b80      	ldr	r3, [pc, #512]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d102      	bne.n	8007d92 <ESP_Upkeep+0x6de>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007d92:	4b7d      	ldr	r3, [pc, #500]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b0e      	cmp	r3, #14
 8007d98:	d102      	bne.n	8007da0 <ESP_Upkeep+0x6ec>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007da0:	4b79      	ldr	r3, [pc, #484]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	d006      	beq.n	8007db6 <ESP_Upkeep+0x702>
 8007da8:	4b77      	ldr	r3, [pc, #476]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d002      	beq.n	8007db6 <ESP_Upkeep+0x702>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007db0:	4b76      	ldr	r3, [pc, #472]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007db6:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b11      	cmp	r3, #17
 8007dbc:	d102      	bne.n	8007dc4 <ESP_Upkeep+0x710>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007dbe:	4b73      	ldr	r3, [pc, #460]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007dc4:	4b70      	ldr	r3, [pc, #448]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b15      	cmp	r3, #21
 8007dca:	d102      	bne.n	8007dd2 <ESP_Upkeep+0x71e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b16      	cmp	r3, #22
 8007dde:	d000      	beq.n	8007de2 <ESP_Upkeep+0x72e>
 8007de0:	e1b7      	b.n	8008152 <ESP_Upkeep+0xa9e>
        if(Mode == AT_MODE_SEND){
 8007de2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d124      	bne.n	8007e34 <ESP_Upkeep+0x780>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007dea:	f00c fdd3 	bl	8014994 <HAL_GetTick>
 8007dee:	0003      	movs	r3, r0
 8007df0:	4a6a      	ldr	r2, [pc, #424]	@ (8007f9c <ESP_Upkeep+0x8e8>)
 8007df2:	189a      	adds	r2, r3, r2
 8007df4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007df6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007df8:	f7ff f928 	bl	800704c <clearDMABuffer>
          stop = HAL_GetTick();
 8007dfc:	f00c fdca 	bl	8014994 <HAL_GetTick>
 8007e00:	0002      	movs	r2, r0
 8007e02:	4b5d      	ldr	r3, [pc, #372]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e04:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007e06:	4b5c      	ldr	r3, [pc, #368]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	4a63      	ldr	r2, [pc, #396]	@ (8007fa0 <ESP_Upkeep+0x8ec>)
 8007e12:	4964      	ldr	r1, [pc, #400]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e14:	2002      	movs	r0, #2
 8007e16:	f00c f83d 	bl	8013e94 <CreateLine>
          ResetdBAmax();
 8007e1a:	f006 f8a3 	bl	800df64 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007e1e:	f7fc ffbf 	bl	8004da0 <resetMaxMeasurementValues>
          showTime();
 8007e22:	f002 f865 	bl	8009ef0 <showTime>
          ESPTransmitDone = true;
 8007e26:	4b53      	ldr	r3, [pc, #332]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007e2e:	220d      	movs	r2, #13
 8007e30:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007e32:	e18e      	b.n	8008152 <ESP_Upkeep+0xa9e>
        else if (Mode == AT_MODE_GETTIME) {
 8007e34:	4b58      	ldr	r3, [pc, #352]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d13a      	bne.n	8007eb2 <ESP_Upkeep+0x7fe>
            setTime = false;
 8007e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fa8 <ESP_Upkeep+0x8f4>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007e42:	f002 f8f7 	bl	800a034 <calculateNextNTPTime>
 8007e46:	0002      	movs	r2, r0
 8007e48:	4b58      	ldr	r3, [pc, #352]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4a:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007e4c:	4b57      	ldr	r3, [pc, #348]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a57      	ldr	r2, [pc, #348]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e52:	189a      	adds	r2, r3, r2
 8007e54:	4b55      	ldr	r3, [pc, #340]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e56:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007e58:	4b55      	ldr	r3, [pc, #340]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e5a:	4a56      	ldr	r2, [pc, #344]	@ (8007fb4 <ESP_Upkeep+0x900>)
 8007e5c:	4951      	ldr	r1, [pc, #324]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f00c f818 	bl	8013e94 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007e64:	4b54      	ldr	r3, [pc, #336]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b3d      	ldr	r3, [pc, #244]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007e6a:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007e6c:	f7ff f8ee 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007e70:	f00c fd90 	bl	8014994 <HAL_GetTick>
 8007e74:	0002      	movs	r2, r0
 8007e76:	4b40      	ldr	r3, [pc, #256]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e78:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	4a4d      	ldr	r2, [pc, #308]	@ (8007fbc <ESP_Upkeep+0x908>)
 8007e86:	4947      	ldr	r1, [pc, #284]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e88:	2002      	movs	r0, #2
 8007e8a:	f00c f803 	bl	8013e94 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007e8e:	f00c fd81 	bl	8014994 <HAL_GetTick>
 8007e92:	0003      	movs	r3, r0
 8007e94:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc0 <ESP_Upkeep+0x90c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d804      	bhi.n	8007ea4 <ESP_Upkeep+0x7f0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc4 <ESP_Upkeep+0x910>)
 8007e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc8 <ESP_Upkeep+0x914>)
 8007e9e:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007ea0:	f005 ff7a 	bl	800dd98 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007ea4:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ea6:	220d      	movs	r2, #13
 8007ea8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eac:	2202      	movs	r2, #2
 8007eae:	701a      	strb	r2, [r3, #0]
    break;
 8007eb0:	e14f      	b.n	8008152 <ESP_Upkeep+0xa9e>
        else if (Mode == AT_MODE_MAIL) {
 8007eb2:	4b39      	ldr	r3, [pc, #228]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d111      	bne.n	8007ede <ESP_Upkeep+0x82a>
            clearDMABuffer();
 8007eba:	f7ff f8c7 	bl	800704c <clearDMABuffer>
            ESPTimeStamp = savedESPTimeStamp;
 8007ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ec4:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007ec6:	4b41      	ldr	r3, [pc, #260]	@ (8007fcc <ESP_Upkeep+0x918>)
 8007ec8:	2202      	movs	r2, #2
 8007eca:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ece:	220d      	movs	r2, #13
 8007ed0:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007ed8:	f005 ff5e 	bl	800dd98 <EnabledConnectedDevices>
    break;
 8007edc:	e139      	b.n	8008152 <ESP_Upkeep+0xa9e>
          EspState = ESP_STATE_RESET;
 8007ede:	4b29      	ldr	r3, [pc, #164]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ee0:	2209      	movs	r2, #9
 8007ee2:	701a      	strb	r2, [r3, #0]
    break;
 8007ee4:	e135      	b.n	8008152 <ESP_Upkeep+0xa9e>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <ESP_Upkeep+0x91c>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007eec:	4b39      	ldr	r3, [pc, #228]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f00d ffb5 	bl	8015e62 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f00c fd55 	bl	80149a8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007efe:	2380      	movs	r3, #128	@ 0x80
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	4835      	ldr	r0, [pc, #212]	@ (8007fd8 <ESP_Upkeep+0x924>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	0019      	movs	r1, r3
 8007f08:	f00d ffab 	bl	8015e62 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	f00c fd4b 	bl	80149a8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007f12:	4b30      	ldr	r3, [pc, #192]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	2102      	movs	r1, #2
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f00d ffa2 	bl	8015e62 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007f1e:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007f20:	2209      	movs	r2, #9
 8007f22:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007f24:	2001      	movs	r0, #1
 8007f26:	f00c fd3f 	bl	80149a8 <HAL_Delay>
      ResetESPIndicator();
 8007f2a:	f00a fdb5 	bl	8012a98 <ResetESPIndicator>
      Debug("ESP powered off.");
 8007f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fdc <ESP_Upkeep+0x928>)
 8007f30:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe0 <ESP_Upkeep+0x92c>)
 8007f32:	0019      	movs	r1, r3
 8007f34:	2003      	movs	r0, #3
 8007f36:	f00b ffad 	bl	8013e94 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007f3a:	f001 fed1 	bl	8009ce0 <Check_USB_PowerOn>
 8007f3e:	1e03      	subs	r3, r0, #0
 8007f40:	d103      	bne.n	8007f4a <ESP_Upkeep+0x896>
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <ESP_Upkeep+0x930>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <ESP_Upkeep+0x89a>
        EnabledConnectedDevices();
 8007f4a:	f005 ff25 	bl	800dd98 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007f4e:	4b26      	ldr	r3, [pc, #152]	@ (8007fe8 <ESP_Upkeep+0x934>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007f54:	4b03      	ldr	r3, [pc, #12]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0fd      	b.n	8008158 <ESP_Upkeep+0xaa4>
 8007f5c:	20000034 	.word	0x20000034
 8007f60:	20000694 	.word	0x20000694
 8007f64:	20000690 	.word	0x20000690
 8007f68:	0802b43c 	.word	0x0802b43c
 8007f6c:	0802ab98 	.word	0x0802ab98
 8007f70:	0000c350 	.word	0x0000c350
 8007f74:	200005b3 	.word	0x200005b3
 8007f78:	200005b8 	.word	0x200005b8
 8007f7c:	200005b4 	.word	0x200005b4
 8007f80:	0802b478 	.word	0x0802b478
 8007f84:	20000030 	.word	0x20000030
 8007f88:	20000701 	.word	0x20000701
 8007f8c:	20000700 	.word	0x20000700
 8007f90:	2000068e 	.word	0x2000068e
 8007f94:	20000684 	.word	0x20000684
 8007f98:	20000702 	.word	0x20000702
 8007f9c:	0003a980 	.word	0x0003a980
 8007fa0:	0802b4a8 	.word	0x0802b4a8
 8007fa4:	0802abac 	.word	0x0802abac
 8007fa8:	20000002 	.word	0x20000002
 8007fac:	20000698 	.word	0x20000698
 8007fb0:	00012686 	.word	0x00012686
 8007fb4:	0802b4c0 	.word	0x0802b4c0
 8007fb8:	2000002c 	.word	0x2000002c
 8007fbc:	0802b504 	.word	0x0802b504
 8007fc0:	000061a7 	.word	0x000061a7
 8007fc4:	20001114 	.word	0x20001114
 8007fc8:	000061a8 	.word	0x000061a8
 8007fcc:	200010f9 	.word	0x200010f9
 8007fd0:	200005ac 	.word	0x200005ac
 8007fd4:	50001c00 	.word	0x50001c00
 8007fd8:	50000800 	.word	0x50000800
 8007fdc:	0802b524 	.word	0x0802b524
 8007fe0:	0802abfc 	.word	0x0802abfc
 8007fe4:	2000214e 	.word	0x2000214e
 8007fe8:	2000068f 	.word	0x2000068f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007fec:	4b5d      	ldr	r3, [pc, #372]	@ (8008164 <ESP_Upkeep+0xab0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f00b fef9 	bl	8013de8 <TimestampIsReached>
 8007ff6:	1e03      	subs	r3, r0, #0
 8007ff8:	d103      	bne.n	8008002 <ESP_Upkeep+0x94e>
 8007ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8008168 <ESP_Upkeep+0xab4>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d053      	beq.n	80080aa <ESP_Upkeep+0x9f6>
        ESPTransmitDone = false;
 8008002:	4b5a      	ldr	r3, [pc, #360]	@ (800816c <ESP_Upkeep+0xab8>)
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
        if((Mode == AT_MODE_INIT) && is_OM_configured()){
 8008008:	4b59      	ldr	r3, [pc, #356]	@ (8008170 <ESP_Upkeep+0xabc>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <ESP_Upkeep+0x970>
 8008010:	f7ff f9f2 	bl	80073f8 <is_OM_configured>
 8008014:	1e03      	subs	r3, r0, #0
 8008016:	d005      	beq.n	8008024 <ESP_Upkeep+0x970>
          InitIsDone = true;
 8008018:	4b56      	ldr	r3, [pc, #344]	@ (8008174 <ESP_Upkeep+0xac0>)
 800801a:	2201      	movs	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800801e:	4b56      	ldr	r3, [pc, #344]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008020:	220b      	movs	r2, #11
 8008022:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8008024:	4b52      	ldr	r3, [pc, #328]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d105      	bne.n	8008038 <ESP_Upkeep+0x984>
          ConnectionMade = true;
 800802c:	4b53      	ldr	r3, [pc, #332]	@ (800817c <ESP_Upkeep+0xac8>)
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8008032:	4b51      	ldr	r3, [pc, #324]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008034:	220b      	movs	r2, #11
 8008036:	701a      	strb	r2, [r3, #0]
        }
        if((Mode == AT_MODE_SEND) && is_OM_configured()) {
 8008038:	4b4d      	ldr	r3, [pc, #308]	@ (8008170 <ESP_Upkeep+0xabc>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d106      	bne.n	800804e <ESP_Upkeep+0x99a>
 8008040:	f7ff f9da 	bl	80073f8 <is_OM_configured>
 8008044:	1e03      	subs	r3, r0, #0
 8008046:	d002      	beq.n	800804e <ESP_Upkeep+0x99a>
          EspState = ESP_STATE_INIT;
 8008048:	4b4b      	ldr	r3, [pc, #300]	@ (8008178 <ESP_Upkeep+0xac4>)
 800804a:	2202      	movs	r2, #2
 800804c:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if((Mode == AT_MODE_MAIL) && is_OM_configured()){
 800804e:	4b48      	ldr	r3, [pc, #288]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b06      	cmp	r3, #6
 8008054:	d106      	bne.n	8008064 <ESP_Upkeep+0x9b0>
 8008056:	f7ff f9cf 	bl	80073f8 <is_OM_configured>
 800805a:	1e03      	subs	r3, r0, #0
 800805c:	d002      	beq.n	8008064 <ESP_Upkeep+0x9b0>
          EspState = ESP_STATE_CONFIG;
 800805e:	4b46      	ldr	r3, [pc, #280]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008060:	220e      	movs	r2, #14
 8008062:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 8008064:	4b42      	ldr	r3, [pc, #264]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d108      	bne.n	800807e <ESP_Upkeep+0x9ca>
          EspState = ESP_STATE_CONFIG;
 800806c:	4b42      	ldr	r3, [pc, #264]	@ (8008178 <ESP_Upkeep+0xac4>)
 800806e:	220e      	movs	r2, #14
 8008070:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8008072:	4a43      	ldr	r2, [pc, #268]	@ (8008180 <ESP_Upkeep+0xacc>)
 8008074:	4b43      	ldr	r3, [pc, #268]	@ (8008184 <ESP_Upkeep+0xad0>)
 8008076:	0019      	movs	r1, r3
 8008078:	2002      	movs	r0, #2
 800807a:	f00b ff0b 	bl	8013e94 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800807e:	4b3c      	ldr	r3, [pc, #240]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d105      	bne.n	8008092 <ESP_Upkeep+0x9de>
          EspState = ESP_STATE_MODE_SELECT;
 8008086:	4b3c      	ldr	r3, [pc, #240]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008088:	220b      	movs	r2, #11
 800808a:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 800808c:	4b3e      	ldr	r3, [pc, #248]	@ (8008188 <ESP_Upkeep+0xad4>)
 800808e:	2201      	movs	r2, #1
 8008090:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008092:	4b35      	ldr	r3, [pc, #212]	@ (8008168 <ESP_Upkeep+0xab4>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <ESP_Upkeep+0xa28>
 800809a:	4b35      	ldr	r3, [pc, #212]	@ (8008170 <ESP_Upkeep+0xabc>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d01c      	beq.n	80080dc <ESP_Upkeep+0xa28>
          EspState = ESP_STATE_INIT;
 80080a2:	4b35      	ldr	r3, [pc, #212]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080a4:	2202      	movs	r2, #2
 80080a6:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080a8:	e018      	b.n	80080dc <ESP_Upkeep+0xa28>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 80080aa:	f001 ffc3 	bl	800a034 <calculateNextNTPTime>
 80080ae:	0002      	movs	r2, r0
 80080b0:	4b36      	ldr	r3, [pc, #216]	@ (800818c <ESP_Upkeep+0xad8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d94e      	bls.n	8008156 <ESP_Upkeep+0xaa2>
        if(Mode == AT_MODE_SEND ) {
 80080b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008170 <ESP_Upkeep+0xabc>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d14a      	bne.n	8008156 <ESP_Upkeep+0xaa2>
           Mode = AT_MODE_GETTIME;
 80080c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008170 <ESP_Upkeep+0xabc>)
 80080c2:	2205      	movs	r2, #5
 80080c4:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 80080c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080c8:	2202      	movs	r2, #2
 80080ca:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 80080cc:	4b25      	ldr	r3, [pc, #148]	@ (8008164 <ESP_Upkeep+0xab0>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4b2f      	ldr	r3, [pc, #188]	@ (8008190 <ESP_Upkeep+0xadc>)
 80080d2:	601a      	str	r2, [r3, #0]
           setTime = true;
 80080d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008194 <ESP_Upkeep+0xae0>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80080da:	e03c      	b.n	8008156 <ESP_Upkeep+0xaa2>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080dc:	46c0      	nop			@ (mov r8, r8)
      break;
 80080de:	e03a      	b.n	8008156 <ESP_Upkeep+0xaa2>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80080e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008198 <ESP_Upkeep+0xae4>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2201      	movs	r2, #1
 80080e6:	4053      	eors	r3, r2
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d008      	beq.n	8008100 <ESP_Upkeep+0xa4c>
        Info("Do nothing until reset");
 80080ee:	4a24      	ldr	r2, [pc, #144]	@ (8008180 <ESP_Upkeep+0xacc>)
 80080f0:	4b24      	ldr	r3, [pc, #144]	@ (8008184 <ESP_Upkeep+0xad0>)
 80080f2:	0019      	movs	r1, r3
 80080f4:	2002      	movs	r0, #2
 80080f6:	f00b fecd 	bl	8013e94 <CreateLine>
        msgdone = true;
 80080fa:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <ESP_Upkeep+0xae4>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8008100:	f01b f906 	bl	8023310 <GetUsbRxPointer>
 8008104:	0003      	movs	r3, r0
 8008106:	0018      	movs	r0, r3
 8008108:	f000 f98c 	bl	8008424 <Process_PC_Config>
      break;
 800810c:	e024      	b.n	8008158 <ESP_Upkeep+0xaa4>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 800810e:	4a23      	ldr	r2, [pc, #140]	@ (800819c <ESP_Upkeep+0xae8>)
 8008110:	4b23      	ldr	r3, [pc, #140]	@ (80081a0 <ESP_Upkeep+0xaec>)
 8008112:	0019      	movs	r1, r3
 8008114:	2001      	movs	r0, #1
 8008116:	f00b febd 	bl	8013e94 <CreateLine>
      EspState = ESP_STATE_INIT;
 800811a:	4b17      	ldr	r3, [pc, #92]	@ (8008178 <ESP_Upkeep+0xac4>)
 800811c:	2202      	movs	r2, #2
 800811e:	701a      	strb	r2, [r3, #0]
      break;
 8008120:	e01a      	b.n	8008158 <ESP_Upkeep+0xaa4>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8008122:	4a20      	ldr	r2, [pc, #128]	@ (80081a4 <ESP_Upkeep+0xaf0>)
 8008124:	4b1e      	ldr	r3, [pc, #120]	@ (80081a0 <ESP_Upkeep+0xaec>)
 8008126:	0019      	movs	r1, r3
 8008128:	2001      	movs	r0, #1
 800812a:	f00b feb3 	bl	8013e94 <CreateLine>
      EspState = ESP_STATE_ERROR;
 800812e:	4b12      	ldr	r3, [pc, #72]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008130:	2207      	movs	r2, #7
 8008132:	701a      	strb	r2, [r3, #0]
      break;
 8008134:	e010      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	e00e      	b.n	8008158 <ESP_Upkeep+0xaa4>
        break;
 800813a:	46c0      	nop			@ (mov r8, r8)
 800813c:	e00c      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	e00a      	b.n	8008158 <ESP_Upkeep+0xaa4>
        break;
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	e008      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 8008146:	46c0      	nop			@ (mov r8, r8)
 8008148:	e006      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	e004      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 800814e:	46c0      	nop			@ (mov r8, r8)
 8008150:	e002      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	e000      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 8008156:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8008158:	4b07      	ldr	r3, [pc, #28]	@ (8008178 <ESP_Upkeep+0xac4>)
 800815a:	781b      	ldrb	r3, [r3, #0]
}
 800815c:	0018      	movs	r0, r3
 800815e:	46bd      	mov	sp, r7
 8008160:	b002      	add	sp, #8
 8008162:	bdb0      	pop	{r4, r5, r7, pc}
 8008164:	20000694 	.word	0x20000694
 8008168:	200005af 	.word	0x200005af
 800816c:	200005b3 	.word	0x200005b3
 8008170:	20000702 	.word	0x20000702
 8008174:	200005ad 	.word	0x200005ad
 8008178:	20000030 	.word	0x20000030
 800817c:	200005b0 	.word	0x200005b0
 8008180:	0802b538 	.word	0x0802b538
 8008184:	0802abac 	.word	0x0802abac
 8008188:	200005b1 	.word	0x200005b1
 800818c:	20000698 	.word	0x20000698
 8008190:	2000002c 	.word	0x2000002c
 8008194:	20000002 	.word	0x20000002
 8008198:	200005b2 	.word	0x200005b2
 800819c:	0802b550 	.word	0x0802b550
 80081a0:	0802ab98 	.word	0x0802ab98
 80081a4:	0802b564 	.word	0x0802b564

080081a8 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <I2CSensors_Init+0x54>)
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 80081b6:	4a12      	ldr	r2, [pc, #72]	@ (8008200 <I2CSensors_Init+0x58>)
 80081b8:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081ba:	0011      	movs	r1, r2
 80081bc:	0018      	movs	r0, r3
 80081be:	f00c f8a7 	bl	8014310 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 80081c2:	4a0f      	ldr	r2, [pc, #60]	@ (8008200 <I2CSensors_Init+0x58>)
 80081c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081c6:	0011      	movs	r1, r2
 80081c8:	0018      	movs	r0, r3
 80081ca:	f008 fe51 	bl	8010e70 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 80081ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008208 <I2CSensors_Init+0x60>)
 80081d0:	490b      	ldr	r1, [pc, #44]	@ (8008200 <I2CSensors_Init+0x58>)
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081d4:	0018      	movs	r0, r3
 80081d6:	f002 ff15 	bl	800b004 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 80081da:	4a0c      	ldr	r2, [pc, #48]	@ (800820c <I2CSensors_Init+0x64>)
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <I2CSensors_Init+0x68>)
 80081de:	0011      	movs	r1, r2
 80081e0:	0018      	movs	r0, r3
 80081e2:	f003 faeb 	bl	800b7bc <BMP_Init>
//    BMP_Init(ReadI2CDirect, WriteI2CDirect);
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80081e6:	4a09      	ldr	r2, [pc, #36]	@ (800820c <I2CSensors_Init+0x64>)
 80081e8:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <I2CSensors_Init+0x68>)
 80081ea:	0011      	movs	r1, r2
 80081ec:	0018      	movs	r0, r3
 80081ee:	f7fb fcc1 	bl	8003b74 <ENS_Init>
}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b002      	add	sp, #8
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	2000093c 	.word	0x2000093c
 8008200:	080082cd 	.word	0x080082cd
 8008204:	08008275 	.word	0x08008275
 8008208:	08008215 	.word	0x08008215
 800820c:	080083a5 	.word	0x080083a5
 8008210:	08008321 	.word	0x08008321

08008214 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008216:	b087      	sub	sp, #28
 8008218:	af02      	add	r7, sp, #8
 800821a:	6039      	str	r1, [r7, #0]
 800821c:	0011      	movs	r1, r2
 800821e:	1dfb      	adds	r3, r7, #7
 8008220:	1c02      	adds	r2, r0, #0
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	1c0a      	adds	r2, r1, #0
 8008228:	701a      	strb	r2, [r3, #0]
//  Debug("ReadI2CDirect address 0x%02X", address);
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, ((address << 1)+1), buffer, nrBytes, 1000);
 800822a:	4b11      	ldr	r3, [pc, #68]	@ (8008270 <ReadI2CDirect+0x5c>)
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	1dfb      	adds	r3, r7, #7
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	18db      	adds	r3, r3, r3
 8008236:	b29b      	uxth	r3, r3
 8008238:	3301      	adds	r3, #1
 800823a:	b299      	uxth	r1, r3
 800823c:	1dbb      	adds	r3, r7, #6
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b29d      	uxth	r5, r3
 8008242:	260f      	movs	r6, #15
 8008244:	19bc      	adds	r4, r7, r6
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	23fa      	movs	r3, #250	@ 0xfa
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	002b      	movs	r3, r5
 8008250:	f00d ffde 	bl	8016210 <HAL_I2C_Master_Receive>
 8008254:	0003      	movs	r3, r0
 8008256:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008258:	19bb      	adds	r3, r7, r6
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <ReadI2CDirect+0x50>
        return false;
 8008260:	2300      	movs	r3, #0
 8008262:	e000      	b.n	8008266 <ReadI2CDirect+0x52>
    }
    return true;
 8008264:	2301      	movs	r3, #1
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b005      	add	sp, #20
 800826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	2000093c 	.word	0x2000093c

08008274 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008274:	b5b0      	push	{r4, r5, r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6039      	str	r1, [r7, #0]
 800827c:	0011      	movs	r1, r2
 800827e:	1dfb      	adds	r3, r7, #7
 8008280:	1c02      	adds	r2, r0, #0
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	1c0a      	adds	r2, r1, #0
 8008288:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, ((address << 1)+1), buffer, nrBytes);
 800828a:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <ReadI2C+0x54>)
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	1dfb      	adds	r3, r7, #7
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	18db      	adds	r3, r3, r3
 8008296:	b29b      	uxth	r3, r3
 8008298:	3301      	adds	r3, #1
 800829a:	b299      	uxth	r1, r3
 800829c:	1dbb      	adds	r3, r7, #6
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	250f      	movs	r5, #15
 80082a4:	197c      	adds	r4, r7, r5
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f00e f9c0 	bl	801662c <HAL_I2C_Master_Receive_DMA>
 80082ac:	0003      	movs	r3, r0
 80082ae:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082b0:	197b      	adds	r3, r7, r5
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <ReadI2C+0x48>
        return false;
 80082b8:	2300      	movs	r3, #0
 80082ba:	e000      	b.n	80082be <ReadI2C+0x4a>
    }
    return true;
 80082bc:	2301      	movs	r3, #1
}
 80082be:	0018      	movs	r0, r3
 80082c0:	46bd      	mov	sp, r7
 80082c2:	b004      	add	sp, #16
 80082c4:	bdb0      	pop	{r4, r5, r7, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	2000093c 	.word	0x2000093c

080082cc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80082cc:	b5b0      	push	{r4, r5, r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6039      	str	r1, [r7, #0]
 80082d4:	0011      	movs	r1, r2
 80082d6:	1dfb      	adds	r3, r7, #7
 80082d8:	1c02      	adds	r2, r0, #0
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	1c0a      	adds	r2, r1, #0
 80082e0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80082e2:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <WriteI2C+0x50>)
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	1dfb      	adds	r3, r7, #7
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	18db      	adds	r3, r3, r3
 80082ee:	b299      	uxth	r1, r3
 80082f0:	1dbb      	adds	r3, r7, #6
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	250f      	movs	r5, #15
 80082f8:	197c      	adds	r4, r7, r5
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	f00e f890 	bl	8016420 <HAL_I2C_Master_Transmit_DMA>
 8008300:	0003      	movs	r3, r0
 8008302:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008304:	197b      	adds	r3, r7, r5
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <WriteI2C+0x44>
        return false;
 800830c:	2300      	movs	r3, #0
 800830e:	e000      	b.n	8008312 <WriteI2C+0x46>
    }
    return true;
 8008310:	2301      	movs	r3, #1
}
 8008312:	0018      	movs	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	b004      	add	sp, #16
 8008318:	bdb0      	pop	{r4, r5, r7, pc}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	2000093c 	.word	0x2000093c

08008320 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008322:	b08b      	sub	sp, #44	@ 0x2c
 8008324:	af04      	add	r7, sp, #16
 8008326:	0004      	movs	r4, r0
 8008328:	0008      	movs	r0, r1
 800832a:	0011      	movs	r1, r2
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	250f      	movs	r5, #15
 8008330:	197b      	adds	r3, r7, r5
 8008332:	1c22      	adds	r2, r4, #0
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	260c      	movs	r6, #12
 8008338:	19bb      	adds	r3, r7, r6
 800833a:	1c02      	adds	r2, r0, #0
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	230a      	movs	r3, #10
 8008340:	18fb      	adds	r3, r7, r3
 8008342:	1c0a      	adds	r2, r1, #0
 8008344:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, ((address << 1)+1), MemAddress, MemSize, buffer, nrBytes,1000);
 8008346:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <ReadI2CMem+0x80>)
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	197b      	adds	r3, r7, r5
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	18db      	adds	r3, r3, r3
 8008352:	b29b      	uxth	r3, r3
 8008354:	3301      	adds	r3, #1
 8008356:	b299      	uxth	r1, r3
 8008358:	2217      	movs	r2, #23
 800835a:	18bc      	adds	r4, r7, r2
 800835c:	230a      	movs	r3, #10
 800835e:	18fb      	adds	r3, r7, r3
 8008360:	881d      	ldrh	r5, [r3, #0]
 8008362:	19bb      	adds	r3, r7, r6
 8008364:	881a      	ldrh	r2, [r3, #0]
 8008366:	23fa      	movs	r3, #250	@ 0xfa
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	9302      	str	r3, [sp, #8]
 800836c:	2328      	movs	r3, #40	@ 0x28
 800836e:	2608      	movs	r6, #8
 8008370:	199b      	adds	r3, r3, r6
 8008372:	19db      	adds	r3, r3, r7
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	002b      	movs	r3, r5
 800837e:	f00e fb89 	bl	8016a94 <HAL_I2C_Mem_Read>
 8008382:	0003      	movs	r3, r0
 8008384:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008386:	2217      	movs	r2, #23
 8008388:	18bb      	adds	r3, r7, r2
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <ReadI2CMem+0x74>
     return false;
 8008390:	2300      	movs	r3, #0
 8008392:	e000      	b.n	8008396 <ReadI2CMem+0x76>
   }
   return true;
 8008394:	2301      	movs	r3, #1
}
 8008396:	0018      	movs	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	b007      	add	sp, #28
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	2000093c 	.word	0x2000093c

080083a4 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b08b      	sub	sp, #44	@ 0x2c
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	0004      	movs	r4, r0
 80083ac:	0008      	movs	r0, r1
 80083ae:	0011      	movs	r1, r2
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	250f      	movs	r5, #15
 80083b4:	197b      	adds	r3, r7, r5
 80083b6:	1c22      	adds	r2, r4, #0
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	260c      	movs	r6, #12
 80083bc:	19bb      	adds	r3, r7, r6
 80083be:	1c02      	adds	r2, r0, #0
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	230a      	movs	r3, #10
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	1c0a      	adds	r2, r1, #0
 80083c8:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,1000);  // de dma verwijderd 16-8-2025
 80083ca:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <WriteI2CMem+0x7c>)
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	197b      	adds	r3, r7, r5
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	18db      	adds	r3, r3, r3
 80083d6:	b299      	uxth	r1, r3
 80083d8:	2217      	movs	r2, #23
 80083da:	18bc      	adds	r4, r7, r2
 80083dc:	230a      	movs	r3, #10
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	881d      	ldrh	r5, [r3, #0]
 80083e2:	19bb      	adds	r3, r7, r6
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	23fa      	movs	r3, #250	@ 0xfa
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	2328      	movs	r3, #40	@ 0x28
 80083ee:	2608      	movs	r6, #8
 80083f0:	199b      	adds	r3, r3, r6
 80083f2:	19db      	adds	r3, r3, r7
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	002b      	movs	r3, r5
 80083fe:	f00e fa1b 	bl	8016838 <HAL_I2C_Mem_Write>
 8008402:	0003      	movs	r3, r0
 8008404:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008406:	2217      	movs	r2, #23
 8008408:	18bb      	adds	r3, r7, r2
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <WriteI2CMem+0x70>
     return false;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <WriteI2CMem+0x72>
   }
   return true;
 8008414:	2301      	movs	r3, #1
}
 8008416:	0018      	movs	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	b007      	add	sp, #28
 800841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	2000093c 	.word	0x2000093c

08008424 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b0c3      	sub	sp, #268	@ 0x10c
 8008428:	af3e      	add	r7, sp, #248	@ 0xf8
 800842a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800842c:	f01a ff90 	bl	8023350 <GetUsbRxDataSize>
 8008430:	0003      	movs	r3, r0
 8008432:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d972      	bls.n	8008520 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2123      	movs	r1, #35	@ 0x23
 800843e:	0018      	movs	r0, r3
 8008440:	f01e f994 	bl	802676c <strchr>
 8008444:	0003      	movs	r3, r0
 8008446:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d066      	beq.n	800851c <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	785a      	ldrb	r2, [r3, #1]
 8008452:	4b35      	ldr	r3, [pc, #212]	@ (8008528 <Process_PC_Config+0x104>)
 8008454:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	789a      	ldrb	r2, [r3, #2]
 800845a:	4b33      	ldr	r3, [pc, #204]	@ (8008528 <Process_PC_Config+0x104>)
 800845c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800845e:	4b32      	ldr	r3, [pc, #200]	@ (8008528 <Process_PC_Config+0x104>)
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	3305      	adds	r3, #5
 8008464:	001a      	movs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4293      	cmp	r3, r2
 800846a:	d352      	bcc.n	8008512 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	1cd9      	adds	r1, r3, #3
 8008470:	4b2d      	ldr	r3, [pc, #180]	@ (8008528 <Process_PC_Config+0x104>)
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	001a      	movs	r2, r3
 8008476:	4b2d      	ldr	r3, [pc, #180]	@ (800852c <Process_PC_Config+0x108>)
 8008478:	0018      	movs	r0, r3
 800847a:	f01e fa4b 	bl	8026914 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800847e:	4b2a      	ldr	r3, [pc, #168]	@ (8008528 <Process_PC_Config+0x104>)
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	3303      	adds	r3, #3
 8008484:	001a      	movs	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	189b      	adds	r3, r3, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b21b      	sxth	r3, r3
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	b21a      	sxth	r2, r3
 8008492:	4b25      	ldr	r3, [pc, #148]	@ (8008528 <Process_PC_Config+0x104>)
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	3304      	adds	r3, #4
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	18cb      	adds	r3, r1, r3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b21b      	sxth	r3, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b21b      	sxth	r3, r3
 80084a4:	b299      	uxth	r1, r3
 80084a6:	4a20      	ldr	r2, [pc, #128]	@ (8008528 <Process_PC_Config+0x104>)
 80084a8:	2381      	movs	r3, #129	@ 0x81
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80084ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008528 <Process_PC_Config+0x104>)
 80084b0:	2381      	movs	r3, #129	@ 0x81
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	5ad4      	ldrh	r4, [r2, r3]
 80084b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008528 <Process_PC_Config+0x104>)
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	3303      	adds	r3, #3
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	0011      	movs	r1, r2
 80084c2:	0018      	movs	r0, r3
 80084c4:	f000 fac4 	bl	8008a50 <CRC16_ARC>
 80084c8:	0003      	movs	r3, r0
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d007      	beq.n	80084de <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80084ce:	4b16      	ldr	r3, [pc, #88]	@ (8008528 <Process_PC_Config+0x104>)
 80084d0:	785a      	ldrb	r2, [r3, #1]
 80084d2:	4b16      	ldr	r3, [pc, #88]	@ (800852c <Process_PC_Config+0x108>)
 80084d4:	0019      	movs	r1, r3
 80084d6:	2001      	movs	r0, #1
 80084d8:	f000 fa68 	bl	80089ac <Create_Message>
 80084dc:	e016      	b.n	800850c <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80084de:	4c12      	ldr	r4, [pc, #72]	@ (8008528 <Process_PC_Config+0x104>)
 80084e0:	466b      	mov	r3, sp
 80084e2:	0018      	movs	r0, r3
 80084e4:	0023      	movs	r3, r4
 80084e6:	3310      	adds	r3, #16
 80084e8:	22f4      	movs	r2, #244	@ 0xf4
 80084ea:	0019      	movs	r1, r3
 80084ec:	f01e fa12 	bl	8026914 <memcpy>
 80084f0:	6820      	ldr	r0, [r4, #0]
 80084f2:	6861      	ldr	r1, [r4, #4]
 80084f4:	68a2      	ldr	r2, [r4, #8]
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	f000 f81a 	bl	8008530 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80084fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008528 <Process_PC_Config+0x104>)
 80084fe:	7818      	ldrb	r0, [r3, #0]
 8008500:	4b09      	ldr	r3, [pc, #36]	@ (8008528 <Process_PC_Config+0x104>)
 8008502:	785a      	ldrb	r2, [r3, #1]
 8008504:	4b09      	ldr	r3, [pc, #36]	@ (800852c <Process_PC_Config+0x108>)
 8008506:	0019      	movs	r1, r3
 8008508:	f000 fa50 	bl	80089ac <Create_Message>
                }
                ResetUsbRxDataSize();
 800850c:	f01a ff08 	bl	8023320 <ResetUsbRxDataSize>
                return;
 8008510:	e006      	b.n	8008520 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	0018      	movs	r0, r3
 8008516:	f01a ff25 	bl	8023364 <GetUsbRxNextChunk>
 800851a:	e001      	b.n	8008520 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 800851c:	f01a ff00 	bl	8023320 <ResetUsbRxDataSize>
        }
    }
}
 8008520:	46bd      	mov	sp, r7
 8008522:	b005      	add	sp, #20
 8008524:	bd90      	pop	{r4, r7, pc}
 8008526:	46c0      	nop			@ (mov r8, r8)
 8008528:	20000940 	.word	0x20000940
 800852c:	20000942 	.word	0x20000942

08008530 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008530:	b084      	sub	sp, #16
 8008532:	b5b0      	push	{r4, r5, r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	2518      	movs	r5, #24
 800853a:	197c      	adds	r4, r7, r5
 800853c:	6020      	str	r0, [r4, #0]
 800853e:	6061      	str	r1, [r4, #4]
 8008540:	60a2      	str	r2, [r4, #8]
 8008542:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 8008544:	197b      	adds	r3, r7, r5
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2bfe      	cmp	r3, #254	@ 0xfe
 800854a:	d900      	bls.n	800854e <ProcessCmd+0x1e>
 800854c:	e224      	b.n	8008998 <ProcessCmd+0x468>
 800854e:	009a      	lsls	r2, r3, #2
 8008550:	4bea      	ldr	r3, [pc, #936]	@ (80088fc <ProcessCmd+0x3cc>)
 8008552:	18d3      	adds	r3, r2, r3
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008558:	2118      	movs	r1, #24
 800855a:	187b      	adds	r3, r7, r1
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	001a      	movs	r2, r3
 8008560:	187b      	adds	r3, r7, r1
 8008562:	1c99      	adds	r1, r3, #2
 8008564:	48e6      	ldr	r0, [pc, #920]	@ (8008900 <ProcessCmd+0x3d0>)
 8008566:	230c      	movs	r3, #12
 8008568:	f003 fe0e 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 800856c:	e214      	b.n	8008998 <ProcessCmd+0x468>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800856e:	2118      	movs	r1, #24
 8008570:	187b      	adds	r3, r7, r1
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	001a      	movs	r2, r3
 8008576:	187b      	adds	r3, r7, r1
 8008578:	1c99      	adds	r1, r3, #2
 800857a:	48e2      	ldr	r0, [pc, #904]	@ (8008904 <ProcessCmd+0x3d4>)
 800857c:	230c      	movs	r3, #12
 800857e:	f003 fe03 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008582:	e209      	b.n	8008998 <ProcessCmd+0x468>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008584:	2118      	movs	r1, #24
 8008586:	187b      	adds	r3, r7, r1
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	001a      	movs	r2, r3
 800858c:	187b      	adds	r3, r7, r1
 800858e:	1c99      	adds	r1, r3, #2
 8008590:	48dd      	ldr	r0, [pc, #884]	@ (8008908 <ProcessCmd+0x3d8>)
 8008592:	230c      	movs	r3, #12
 8008594:	f003 fdf8 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008598:	e1fe      	b.n	8008998 <ProcessCmd+0x468>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800859a:	2118      	movs	r1, #24
 800859c:	187b      	adds	r3, r7, r1
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	001a      	movs	r2, r3
 80085a2:	187b      	adds	r3, r7, r1
 80085a4:	1c99      	adds	r1, r3, #2
 80085a6:	48d9      	ldr	r0, [pc, #868]	@ (800890c <ProcessCmd+0x3dc>)
 80085a8:	230c      	movs	r3, #12
 80085aa:	f003 fded 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80085ae:	e1f3      	b.n	8008998 <ProcessCmd+0x468>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085b0:	2118      	movs	r1, #24
 80085b2:	187b      	adds	r3, r7, r1
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	001a      	movs	r2, r3
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	1c99      	adds	r1, r3, #2
 80085bc:	48d4      	ldr	r0, [pc, #848]	@ (8008910 <ProcessCmd+0x3e0>)
 80085be:	230c      	movs	r3, #12
 80085c0:	f003 fde2 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80085c4:	e1e8      	b.n	8008998 <ProcessCmd+0x468>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085c6:	2118      	movs	r1, #24
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	001a      	movs	r2, r3
 80085ce:	187b      	adds	r3, r7, r1
 80085d0:	1c99      	adds	r1, r3, #2
 80085d2:	48d0      	ldr	r0, [pc, #832]	@ (8008914 <ProcessCmd+0x3e4>)
 80085d4:	230c      	movs	r3, #12
 80085d6:	f003 fdd7 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80085da:	e1dd      	b.n	8008998 <ProcessCmd+0x468>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085dc:	2118      	movs	r1, #24
 80085de:	187b      	adds	r3, r7, r1
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	001a      	movs	r2, r3
 80085e4:	187b      	adds	r3, r7, r1
 80085e6:	1c99      	adds	r1, r3, #2
 80085e8:	48cb      	ldr	r0, [pc, #812]	@ (8008918 <ProcessCmd+0x3e8>)
 80085ea:	230c      	movs	r3, #12
 80085ec:	f003 fdcc 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80085f0:	e1d2      	b.n	8008998 <ProcessCmd+0x468>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085f2:	2118      	movs	r1, #24
 80085f4:	187b      	adds	r3, r7, r1
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	001a      	movs	r2, r3
 80085fa:	187b      	adds	r3, r7, r1
 80085fc:	1c99      	adds	r1, r3, #2
 80085fe:	48c7      	ldr	r0, [pc, #796]	@ (800891c <ProcessCmd+0x3ec>)
 8008600:	230c      	movs	r3, #12
 8008602:	f003 fdc1 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008606:	e1c7      	b.n	8008998 <ProcessCmd+0x468>
        case PM10ConfigCmd:  // 8
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008608:	2118      	movs	r1, #24
 800860a:	187b      	adds	r3, r7, r1
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	001a      	movs	r2, r3
 8008610:	187b      	adds	r3, r7, r1
 8008612:	1c99      	adds	r1, r3, #2
 8008614:	48c2      	ldr	r0, [pc, #776]	@ (8008920 <ProcessCmd+0x3f0>)
 8008616:	230c      	movs	r3, #12
 8008618:	f003 fdb6 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 800861c:	e1bc      	b.n	8008998 <ProcessCmd+0x468>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800861e:	2118      	movs	r1, #24
 8008620:	187b      	adds	r3, r7, r1
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	001a      	movs	r2, r3
 8008626:	187b      	adds	r3, r7, r1
 8008628:	1c99      	adds	r1, r3, #2
 800862a:	48be      	ldr	r0, [pc, #760]	@ (8008924 <ProcessCmd+0x3f4>)
 800862c:	230c      	movs	r3, #12
 800862e:	f003 fdab 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008632:	e1b1      	b.n	8008998 <ProcessCmd+0x468>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008634:	2118      	movs	r1, #24
 8008636:	187b      	adds	r3, r7, r1
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	001a      	movs	r2, r3
 800863c:	187b      	adds	r3, r7, r1
 800863e:	1c99      	adds	r1, r3, #2
 8008640:	48b9      	ldr	r0, [pc, #740]	@ (8008928 <ProcessCmd+0x3f8>)
 8008642:	230c      	movs	r3, #12
 8008644:	f003 fda0 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008648:	e1a6      	b.n	8008998 <ProcessCmd+0x468>
        case ChargerStatConfigCmd:  // 11
            WriteUint8ArrayEepromSafe(ChargerStatConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800864a:	2118      	movs	r1, #24
 800864c:	187b      	adds	r3, r7, r1
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	001a      	movs	r2, r3
 8008652:	187b      	adds	r3, r7, r1
 8008654:	1c99      	adds	r1, r3, #2
 8008656:	48b5      	ldr	r0, [pc, #724]	@ (800892c <ProcessCmd+0x3fc>)
 8008658:	230c      	movs	r3, #12
 800865a:	f003 fd95 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 800865e:	e19b      	b.n	8008998 <ProcessCmd+0x468>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008660:	2118      	movs	r1, #24
 8008662:	187b      	adds	r3, r7, r1
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	001a      	movs	r2, r3
 8008668:	187b      	adds	r3, r7, r1
 800866a:	1c99      	adds	r1, r3, #2
 800866c:	48b0      	ldr	r0, [pc, #704]	@ (8008930 <ProcessCmd+0x400>)
 800866e:	2320      	movs	r3, #32
 8008670:	f003 fd8a 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008674:	e190      	b.n	8008998 <ProcessCmd+0x468>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 8008676:	4baf      	ldr	r3, [pc, #700]	@ (8008934 <ProcessCmd+0x404>)
 8008678:	2120      	movs	r1, #32
 800867a:	0018      	movs	r0, r3
 800867c:	f003 fdc9 	bl	800c212 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 8008680:	2118      	movs	r1, #24
 8008682:	187b      	adds	r3, r7, r1
 8008684:	785b      	ldrb	r3, [r3, #1]
 8008686:	001a      	movs	r2, r3
 8008688:	187b      	adds	r3, r7, r1
 800868a:	1c99      	adds	r1, r3, #2
 800868c:	48a9      	ldr	r0, [pc, #676]	@ (8008934 <ProcessCmd+0x404>)
 800868e:	2320      	movs	r3, #32
 8008690:	f003 fd7a 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008694:	e180      	b.n	8008998 <ProcessCmd+0x468>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 8008696:	4ba8      	ldr	r3, [pc, #672]	@ (8008938 <ProcessCmd+0x408>)
 8008698:	2140      	movs	r1, #64	@ 0x40
 800869a:	0018      	movs	r0, r3
 800869c:	f003 fdb9 	bl	800c212 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80086a0:	2218      	movs	r2, #24
 80086a2:	18bb      	adds	r3, r7, r2
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	0019      	movs	r1, r3
 80086a8:	18bb      	adds	r3, r7, r2
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	001c      	movs	r4, r3
 80086ae:	0015      	movs	r5, r2
 80086b0:	18bb      	adds	r3, r7, r2
 80086b2:	1c9a      	adds	r2, r3, #2
 80086b4:	48a1      	ldr	r0, [pc, #644]	@ (800893c <ProcessCmd+0x40c>)
 80086b6:	0023      	movs	r3, r4
 80086b8:	f000 fa16 	bl	8008ae8 <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 80086bc:	0029      	movs	r1, r5
 80086be:	187b      	adds	r3, r7, r1
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	001a      	movs	r2, r3
 80086c4:	187b      	adds	r3, r7, r1
 80086c6:	1c99      	adds	r1, r3, #2
 80086c8:	489b      	ldr	r0, [pc, #620]	@ (8008938 <ProcessCmd+0x408>)
 80086ca:	2340      	movs	r3, #64	@ 0x40
 80086cc:	f003 fd5c 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80086d0:	e162      	b.n	8008998 <ProcessCmd+0x468>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086d2:	2118      	movs	r1, #24
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	001a      	movs	r2, r3
 80086da:	187b      	adds	r3, r7, r1
 80086dc:	1c99      	adds	r1, r3, #2
 80086de:	4898      	ldr	r0, [pc, #608]	@ (8008940 <ProcessCmd+0x410>)
 80086e0:	230c      	movs	r3, #12
 80086e2:	f003 fd51 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80086e6:	e157      	b.n	8008998 <ProcessCmd+0x468>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086e8:	2118      	movs	r1, #24
 80086ea:	187b      	adds	r3, r7, r1
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	001a      	movs	r2, r3
 80086f0:	187b      	adds	r3, r7, r1
 80086f2:	1c99      	adds	r1, r3, #2
 80086f4:	4893      	ldr	r0, [pc, #588]	@ (8008944 <ProcessCmd+0x414>)
 80086f6:	230c      	movs	r3, #12
 80086f8:	f003 fd46 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80086fc:	e14c      	b.n	8008998 <ProcessCmd+0x468>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086fe:	2118      	movs	r1, #24
 8008700:	187b      	adds	r3, r7, r1
 8008702:	785b      	ldrb	r3, [r3, #1]
 8008704:	001a      	movs	r2, r3
 8008706:	187b      	adds	r3, r7, r1
 8008708:	1c99      	adds	r1, r3, #2
 800870a:	488f      	ldr	r0, [pc, #572]	@ (8008948 <ProcessCmd+0x418>)
 800870c:	230c      	movs	r3, #12
 800870e:	f003 fd3b 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008712:	e141      	b.n	8008998 <ProcessCmd+0x468>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008714:	2118      	movs	r1, #24
 8008716:	187b      	adds	r3, r7, r1
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	001a      	movs	r2, r3
 800871c:	187b      	adds	r3, r7, r1
 800871e:	1c99      	adds	r1, r3, #2
 8008720:	488a      	ldr	r0, [pc, #552]	@ (800894c <ProcessCmd+0x41c>)
 8008722:	230c      	movs	r3, #12
 8008724:	f003 fd30 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008728:	e136      	b.n	8008998 <ProcessCmd+0x468>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800872a:	2118      	movs	r1, #24
 800872c:	187b      	adds	r3, r7, r1
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	001a      	movs	r2, r3
 8008732:	187b      	adds	r3, r7, r1
 8008734:	1c99      	adds	r1, r3, #2
 8008736:	4886      	ldr	r0, [pc, #536]	@ (8008950 <ProcessCmd+0x420>)
 8008738:	230c      	movs	r3, #12
 800873a:	f003 fd25 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 800873e:	e12b      	b.n	8008998 <ProcessCmd+0x468>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008740:	2118      	movs	r1, #24
 8008742:	187b      	adds	r3, r7, r1
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	001a      	movs	r2, r3
 8008748:	187b      	adds	r3, r7, r1
 800874a:	1c99      	adds	r1, r3, #2
 800874c:	4881      	ldr	r0, [pc, #516]	@ (8008954 <ProcessCmd+0x424>)
 800874e:	230c      	movs	r3, #12
 8008750:	f003 fd1a 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008754:	e120      	b.n	8008998 <ProcessCmd+0x468>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008756:	2118      	movs	r1, #24
 8008758:	187b      	adds	r3, r7, r1
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	001a      	movs	r2, r3
 800875e:	187b      	adds	r3, r7, r1
 8008760:	1c99      	adds	r1, r3, #2
 8008762:	487d      	ldr	r0, [pc, #500]	@ (8008958 <ProcessCmd+0x428>)
 8008764:	230c      	movs	r3, #12
 8008766:	f003 fd0f 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 800876a:	e115      	b.n	8008998 <ProcessCmd+0x468>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800876c:	2118      	movs	r1, #24
 800876e:	187b      	adds	r3, r7, r1
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	001a      	movs	r2, r3
 8008774:	187b      	adds	r3, r7, r1
 8008776:	1c99      	adds	r1, r3, #2
 8008778:	4878      	ldr	r0, [pc, #480]	@ (800895c <ProcessCmd+0x42c>)
 800877a:	230c      	movs	r3, #12
 800877c:	f003 fd04 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008780:	e10a      	b.n	8008998 <ProcessCmd+0x468>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008782:	2118      	movs	r1, #24
 8008784:	187b      	adds	r3, r7, r1
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	001a      	movs	r2, r3
 800878a:	187b      	adds	r3, r7, r1
 800878c:	1c99      	adds	r1, r3, #2
 800878e:	4874      	ldr	r0, [pc, #464]	@ (8008960 <ProcessCmd+0x430>)
 8008790:	230c      	movs	r3, #12
 8008792:	f003 fcf9 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008796:	e0ff      	b.n	8008998 <ProcessCmd+0x468>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008798:	2118      	movs	r1, #24
 800879a:	187b      	adds	r3, r7, r1
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	001a      	movs	r2, r3
 80087a0:	187b      	adds	r3, r7, r1
 80087a2:	1c99      	adds	r1, r3, #2
 80087a4:	486f      	ldr	r0, [pc, #444]	@ (8008964 <ProcessCmd+0x434>)
 80087a6:	230c      	movs	r3, #12
 80087a8:	f003 fcee 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80087ac:	e0f4      	b.n	8008998 <ProcessCmd+0x468>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 80087ae:	4b6e      	ldr	r3, [pc, #440]	@ (8008968 <ProcessCmd+0x438>)
 80087b0:	2130      	movs	r1, #48	@ 0x30
 80087b2:	0018      	movs	r0, r3
 80087b4:	f003 fd2d 	bl	800c212 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 80087b8:	2118      	movs	r1, #24
 80087ba:	187b      	adds	r3, r7, r1
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	001a      	movs	r2, r3
 80087c0:	187b      	adds	r3, r7, r1
 80087c2:	1c99      	adds	r1, r3, #2
 80087c4:	4868      	ldr	r0, [pc, #416]	@ (8008968 <ProcessCmd+0x438>)
 80087c6:	2330      	movs	r3, #48	@ 0x30
 80087c8:	f003 fcde 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 80087cc:	e0e4      	b.n	8008998 <ProcessCmd+0x468>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 80087ce:	4b67      	ldr	r3, [pc, #412]	@ (800896c <ProcessCmd+0x43c>)
 80087d0:	2130      	movs	r1, #48	@ 0x30
 80087d2:	0018      	movs	r0, r3
 80087d4:	f003 fd1d 	bl	800c212 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80087d8:	2218      	movs	r2, #24
 80087da:	18bb      	adds	r3, r7, r2
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	0019      	movs	r1, r3
 80087e0:	18bb      	adds	r3, r7, r2
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	001c      	movs	r4, r3
 80087e6:	0015      	movs	r5, r2
 80087e8:	18bb      	adds	r3, r7, r2
 80087ea:	1c9a      	adds	r2, r3, #2
 80087ec:	4853      	ldr	r0, [pc, #332]	@ (800893c <ProcessCmd+0x40c>)
 80087ee:	0023      	movs	r3, r4
 80087f0:	f000 f97a 	bl	8008ae8 <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 80087f4:	0029      	movs	r1, r5
 80087f6:	187b      	adds	r3, r7, r1
 80087f8:	785b      	ldrb	r3, [r3, #1]
 80087fa:	001a      	movs	r2, r3
 80087fc:	187b      	adds	r3, r7, r1
 80087fe:	1c99      	adds	r1, r3, #2
 8008800:	485a      	ldr	r0, [pc, #360]	@ (800896c <ProcessCmd+0x43c>)
 8008802:	2330      	movs	r3, #48	@ 0x30
 8008804:	f003 fcc0 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008808:	e0c6      	b.n	8008998 <ProcessCmd+0x468>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 800880a:	4b59      	ldr	r3, [pc, #356]	@ (8008970 <ProcessCmd+0x440>)
 800880c:	2130      	movs	r1, #48	@ 0x30
 800880e:	0018      	movs	r0, r3
 8008810:	f003 fcff 	bl	800c212 <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 8008814:	2118      	movs	r1, #24
 8008816:	187b      	adds	r3, r7, r1
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	001a      	movs	r2, r3
 800881c:	187b      	adds	r3, r7, r1
 800881e:	1c99      	adds	r1, r3, #2
 8008820:	4853      	ldr	r0, [pc, #332]	@ (8008970 <ProcessCmd+0x440>)
 8008822:	2330      	movs	r3, #48	@ 0x30
 8008824:	f003 fcb0 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008828:	e0b6      	b.n	8008998 <ProcessCmd+0x468>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800882a:	2118      	movs	r1, #24
 800882c:	187b      	adds	r3, r7, r1
 800882e:	785b      	ldrb	r3, [r3, #1]
 8008830:	001a      	movs	r2, r3
 8008832:	187b      	adds	r3, r7, r1
 8008834:	1c99      	adds	r1, r3, #2
 8008836:	484f      	ldr	r0, [pc, #316]	@ (8008974 <ProcessCmd+0x444>)
 8008838:	230c      	movs	r3, #12
 800883a:	f003 fca5 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 800883e:	e0ab      	b.n	8008998 <ProcessCmd+0x468>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008840:	2118      	movs	r1, #24
 8008842:	187b      	adds	r3, r7, r1
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	001a      	movs	r2, r3
 8008848:	187b      	adds	r3, r7, r1
 800884a:	1c99      	adds	r1, r3, #2
 800884c:	484a      	ldr	r0, [pc, #296]	@ (8008978 <ProcessCmd+0x448>)
 800884e:	230c      	movs	r3, #12
 8008850:	f003 fc9a 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008854:	e0a0      	b.n	8008998 <ProcessCmd+0x468>
        case URLToUploadConfigCmd: // 30
          printf_USB("command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 8008856:	2218      	movs	r2, #24
 8008858:	18bb      	adds	r3, r7, r2
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	0019      	movs	r1, r3
 800885e:	18bb      	adds	r3, r7, r2
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	001c      	movs	r4, r3
 8008864:	0015      	movs	r5, r2
 8008866:	18bb      	adds	r3, r7, r2
 8008868:	1c9a      	adds	r2, r3, #2
 800886a:	4844      	ldr	r0, [pc, #272]	@ (800897c <ProcessCmd+0x44c>)
 800886c:	0023      	movs	r3, r4
 800886e:	f000 f93b 	bl	8008ae8 <printf_USB>
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 8008872:	0029      	movs	r1, r5
 8008874:	187b      	adds	r3, r7, r1
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	001a      	movs	r2, r3
 800887a:	187b      	adds	r3, r7, r1
 800887c:	1c99      	adds	r1, r3, #2
 800887e:	4840      	ldr	r0, [pc, #256]	@ (8008980 <ProcessCmd+0x450>)
 8008880:	2330      	movs	r3, #48	@ 0x30
 8008882:	f003 fc81 	bl	800c188 <WriteUint8ArrayEepromSafe>
        break;
 8008886:	e087      	b.n	8008998 <ProcessCmd+0x468>

        case ClearConfigCmd: // 253
          printf_USB("command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 8008888:	2218      	movs	r2, #24
 800888a:	18bb      	adds	r3, r7, r2
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	0019      	movs	r1, r3
 8008890:	18bb      	adds	r3, r7, r2
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	001c      	movs	r4, r3
 8008896:	18bb      	adds	r3, r7, r2
 8008898:	1c9a      	adds	r2, r3, #2
 800889a:	4838      	ldr	r0, [pc, #224]	@ (800897c <ProcessCmd+0x44c>)
 800889c:	0023      	movs	r3, r4
 800889e:	f000 f923 	bl	8008ae8 <printf_USB>
          printf_USB("CLEAR CONFIGURATION MEMORY!");
 80088a2:	4b38      	ldr	r3, [pc, #224]	@ (8008984 <ProcessCmd+0x454>)
 80088a4:	0018      	movs	r0, r3
 80088a6:	f000 f91f 	bl	8008ae8 <printf_USB>
          ClearEEprom(EEPromStartAddr, ConfigSize);
 80088aa:	23a2      	movs	r3, #162	@ 0xa2
 80088ac:	33ff      	adds	r3, #255	@ 0xff
 80088ae:	4a14      	ldr	r2, [pc, #80]	@ (8008900 <ProcessCmd+0x3d0>)
 80088b0:	0019      	movs	r1, r3
 80088b2:	0010      	movs	r0, r2
 80088b4:	f003 fcad 	bl	800c212 <ClearEEprom>
          ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 80088b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008934 <ProcessCmd+0x404>)
 80088ba:	21f0      	movs	r1, #240	@ 0xf0
 80088bc:	0018      	movs	r0, r3
 80088be:	f003 fca8 	bl	800c212 <ClearEEprom>
        break;
 80088c2:	e069      	b.n	8008998 <ProcessCmd+0x468>
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80088c4:	2118      	movs	r1, #24
 80088c6:	187b      	adds	r3, r7, r1
 80088c8:	789b      	ldrb	r3, [r3, #2]
 80088ca:	b21b      	sxth	r3, r3
 80088cc:	021b      	lsls	r3, r3, #8
 80088ce:	b21a      	sxth	r2, r3
 80088d0:	187b      	adds	r3, r7, r1
 80088d2:	78db      	ldrb	r3, [r3, #3]
 80088d4:	b21b      	sxth	r3, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	b21a      	sxth	r2, r3
 80088da:	1dbb      	adds	r3, r7, #6
 80088dc:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80088de:	1dbb      	adds	r3, r7, #6
 80088e0:	881a      	ldrh	r2, [r3, #0]
 80088e2:	23c0      	movs	r3, #192	@ 0xc0
 80088e4:	015b      	lsls	r3, r3, #5
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d24e      	bcs.n	8008988 <ProcessCmd+0x458>
            {
                ClearEEprom(EEPromStartAddr, size);
 80088ea:	1dbb      	adds	r3, r7, #6
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	4a04      	ldr	r2, [pc, #16]	@ (8008900 <ProcessCmd+0x3d0>)
 80088f0:	0019      	movs	r1, r3
 80088f2:	0010      	movs	r0, r2
 80088f4:	f003 fc8d 	bl	800c212 <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 80088f8:	e04d      	b.n	8008996 <ProcessCmd+0x466>
 80088fa:	46c0      	nop			@ (mov r8, r8)
 80088fc:	0802e210 	.word	0x0802e210
 8008900:	08080000 	.word	0x08080000
 8008904:	0808000c 	.word	0x0808000c
 8008908:	08080018 	.word	0x08080018
 800890c:	08080024 	.word	0x08080024
 8008910:	08080030 	.word	0x08080030
 8008914:	08080048 	.word	0x08080048
 8008918:	0808003c 	.word	0x0808003c
 800891c:	08080054 	.word	0x08080054
 8008920:	08080060 	.word	0x08080060
 8008924:	0808006c 	.word	0x0808006c
 8008928:	08080078 	.word	0x08080078
 800892c:	08080084 	.word	0x08080084
 8008930:	08080090 	.word	0x08080090
 8008934:	08080200 	.word	0x08080200
 8008938:	08080220 	.word	0x08080220
 800893c:	0802b594 	.word	0x0802b594
 8008940:	080800b0 	.word	0x080800b0
 8008944:	080800bc 	.word	0x080800bc
 8008948:	080800c8 	.word	0x080800c8
 800894c:	080800d4 	.word	0x080800d4
 8008950:	080800e0 	.word	0x080800e0
 8008954:	080800ec 	.word	0x080800ec
 8008958:	080800f8 	.word	0x080800f8
 800895c:	08080104 	.word	0x08080104
 8008960:	08080170 	.word	0x08080170
 8008964:	0808017c 	.word	0x0808017c
 8008968:	08080260 	.word	0x08080260
 800896c:	08080290 	.word	0x08080290
 8008970:	080802c0 	.word	0x080802c0
 8008974:	08080188 	.word	0x08080188
 8008978:	080801a0 	.word	0x080801a0
 800897c:	0802b5c8 	.word	0x0802b5c8
 8008980:	08080110 	.word	0x08080110
 8008984:	0802b5f8 	.word	0x0802b5f8
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8008988:	23c0      	movs	r3, #192	@ 0xc0
 800898a:	015b      	lsls	r3, r3, #5
 800898c:	4a06      	ldr	r2, [pc, #24]	@ (80089a8 <ProcessCmd+0x478>)
 800898e:	0019      	movs	r1, r3
 8008990:	0010      	movs	r0, r2
 8008992:	f003 fc3e 	bl	800c212 <ClearEEprom>
            break;
 8008996:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 8008998:	46c0      	nop			@ (mov r8, r8)
 800899a:	46bd      	mov	sp, r7
 800899c:	b002      	add	sp, #8
 800899e:	bcb0      	pop	{r4, r5, r7}
 80089a0:	bc08      	pop	{r3}
 80089a2:	b004      	add	sp, #16
 80089a4:	4718      	bx	r3
 80089a6:	46c0      	nop			@ (mov r8, r8)
 80089a8:	08080000 	.word	0x08080000

080089ac <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80089ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6039      	str	r1, [r7, #0]
 80089b4:	0011      	movs	r1, r2
 80089b6:	1dfb      	adds	r3, r7, #7
 80089b8:	1c02      	adds	r2, r0, #0
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	1dbb      	adds	r3, r7, #6
 80089be:	1c0a      	adds	r2, r1, #0
 80089c0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80089c2:	2223      	movs	r2, #35	@ 0x23
 80089c4:	4b20      	ldr	r3, [pc, #128]	@ (8008a48 <Create_Message+0x9c>)
 80089c6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80089c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008a48 <Create_Message+0x9c>)
 80089ca:	1dfa      	adds	r2, r7, #7
 80089cc:	7812      	ldrb	r2, [r2, #0]
 80089ce:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80089d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a48 <Create_Message+0x9c>)
 80089d2:	1dba      	adds	r2, r7, #6
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80089d8:	1dbb      	adds	r3, r7, #6
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	4b1b      	ldr	r3, [pc, #108]	@ (8008a4c <Create_Message+0xa0>)
 80089e0:	0018      	movs	r0, r3
 80089e2:	f01d ff97 	bl	8026914 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80089e6:	1dbb      	adds	r3, r7, #6
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	250e      	movs	r5, #14
 80089ee:	197b      	adds	r3, r7, r5
 80089f0:	3203      	adds	r2, #3
 80089f2:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80089f4:	260c      	movs	r6, #12
 80089f6:	19bc      	adds	r4, r7, r6
 80089f8:	197b      	adds	r3, r7, r5
 80089fa:	881a      	ldrh	r2, [r3, #0]
 80089fc:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <Create_Message+0x9c>)
 80089fe:	0011      	movs	r1, r2
 8008a00:	0018      	movs	r0, r3
 8008a02:	f000 f825 	bl	8008a50 <CRC16_ARC>
 8008a06:	0003      	movs	r3, r0
 8008a08:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8008a0a:	0030      	movs	r0, r6
 8008a0c:	183b      	adds	r3, r7, r0
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	0a1b      	lsrs	r3, r3, #8
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	197b      	adds	r3, r7, r5
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b2d1      	uxtb	r1, r2
 8008a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a48 <Create_Message+0x9c>)
 8008a1c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008a1e:	197b      	adds	r3, r7, r5
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	183a      	adds	r2, r7, r0
 8008a26:	8812      	ldrh	r2, [r2, #0]
 8008a28:	b2d1      	uxtb	r1, r2
 8008a2a:	4a07      	ldr	r2, [pc, #28]	@ (8008a48 <Create_Message+0x9c>)
 8008a2c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008a2e:	197b      	adds	r3, r7, r5
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	3302      	adds	r3, #2
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	4b04      	ldr	r3, [pc, #16]	@ (8008a48 <Create_Message+0x9c>)
 8008a38:	0011      	movs	r1, r2
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	f01a fc2e 	bl	802329c <CDC_Transmit_FS>
}
 8008a40:	46c0      	nop			@ (mov r8, r8)
 8008a42:	46bd      	mov	sp, r7
 8008a44:	b005      	add	sp, #20
 8008a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a48:	20000a4c 	.word	0x20000a4c
 8008a4c:	20000a4f 	.word	0x20000a4f

08008a50 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	000a      	movs	r2, r1
 8008a5a:	1cbb      	adds	r3, r7, #2
 8008a5c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008a5e:	2316      	movs	r3, #22
 8008a60:	18fb      	adds	r3, r7, r3
 8008a62:	2200      	movs	r2, #0
 8008a64:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008a66:	2300      	movs	r3, #0
 8008a68:	613b      	str	r3, [r7, #16]
 8008a6a:	e02e      	b.n	8008aca <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	18d3      	adds	r3, r2, r3
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	0019      	movs	r1, r3
 8008a76:	2216      	movs	r2, #22
 8008a78:	18bb      	adds	r3, r7, r2
 8008a7a:	18ba      	adds	r2, r7, r2
 8008a7c:	8812      	ldrh	r2, [r2, #0]
 8008a7e:	404a      	eors	r2, r1
 8008a80:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e01a      	b.n	8008abe <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008a88:	2116      	movs	r1, #22
 8008a8a:	187b      	adds	r3, r7, r1
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	4013      	ands	r3, r2
 8008a92:	d00b      	beq.n	8008aac <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008a94:	187b      	adds	r3, r7, r1
 8008a96:	187a      	adds	r2, r7, r1
 8008a98:	8812      	ldrh	r2, [r2, #0]
 8008a9a:	0852      	lsrs	r2, r2, #1
 8008a9c:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008a9e:	187b      	adds	r3, r7, r1
 8008aa0:	187a      	adds	r2, r7, r1
 8008aa2:	8812      	ldrh	r2, [r2, #0]
 8008aa4:	490f      	ldr	r1, [pc, #60]	@ (8008ae4 <CRC16_ARC+0x94>)
 8008aa6:	404a      	eors	r2, r1
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	e005      	b.n	8008ab8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008aac:	2216      	movs	r2, #22
 8008aae:	18bb      	adds	r3, r7, r2
 8008ab0:	18ba      	adds	r2, r7, r2
 8008ab2:	8812      	ldrh	r2, [r2, #0]
 8008ab4:	0852      	lsrs	r2, r2, #1
 8008ab6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b07      	cmp	r3, #7
 8008ac2:	dde1      	ble.n	8008a88 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	1cbb      	adds	r3, r7, #2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	dbcb      	blt.n	8008a6c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008ad4:	2316      	movs	r3, #22
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	881b      	ldrh	r3, [r3, #0]
}
 8008ada:	0018      	movs	r0, r3
 8008adc:	46bd      	mov	sp, r7
 8008ade:	b006      	add	sp, #24
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	46c0      	nop			@ (mov r8, r8)
 8008ae4:	ffffa001 	.word	0xffffa001

08008ae8 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008ae8:	b40f      	push	{r0, r1, r2, r3}
 8008aea:	b590      	push	{r4, r7, lr}
 8008aec:	b0a9      	sub	sp, #164	@ 0xa4
 8008aee:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008af0:	23ac      	movs	r3, #172	@ 0xac
 8008af2:	2108      	movs	r1, #8
 8008af4:	185b      	adds	r3, r3, r1
 8008af6:	19db      	adds	r3, r3, r7
 8008af8:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	22a8      	movs	r2, #168	@ 0xa8
 8008afe:	1852      	adds	r2, r2, r1
 8008b00:	19d2      	adds	r2, r2, r7
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	2408      	movs	r4, #8
 8008b06:	1938      	adds	r0, r7, r4
 8008b08:	2196      	movs	r1, #150	@ 0x96
 8008b0a:	f01d fd7b 	bl	8026604 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008b0e:	193b      	adds	r3, r7, r4
 8008b10:	0018      	movs	r0, r3
 8008b12:	f7f7 fb2b 	bl	800016c <strlen>
 8008b16:	0003      	movs	r3, r0
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	193b      	adds	r3, r7, r4
 8008b1c:	0011      	movs	r1, r2
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f01a fbbc 	bl	802329c <CDC_Transmit_FS>
}
 8008b24:	46c0      	nop			@ (mov r8, r8)
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b029      	add	sp, #164	@ 0xa4
 8008b2a:	bc90      	pop	{r4, r7}
 8008b2c:	bc08      	pop	{r3}
 8008b2e:	b004      	add	sp, #16
 8008b30:	4718      	bx	r3

08008b32 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	000a      	movs	r2, r1
 8008b3c:	1cfb      	adds	r3, r7, #3
 8008b3e:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008b40:	1cfb      	adds	r3, r7, #3
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d006      	beq.n	8008b56 <PC_selectout+0x24>
    printf_USB(msg);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7ff ffcc 	bl	8008ae8 <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008b50:	200a      	movs	r0, #10
 8008b52:	f00b ff29 	bl	80149a8 <HAL_Delay>
  }
//  else {
    printf(msg);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f01d fc47 	bl	80263ec <iprintf>
//  }
}
 8008b5e:	46c0      	nop			@ (mov r8, r8)
 8008b60:	46bd      	mov	sp, r7
 8008b62:	b002      	add	sp, #8
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <PC_show_Keys>:

void PC_show_Keys() {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008b6c:	f001 f8b8 	bl	8009ce0 <Check_USB_PowerOn>
 8008b70:	1e03      	subs	r3, r0, #0
 8008b72:	d005      	beq.n	8008b80 <PC_show_Keys+0x18>
    usb_out = true;
 8008b74:	4b01      	ldr	r3, [pc, #4]	@ (8008b7c <PC_show_Keys+0x14>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	701a      	strb	r2, [r3, #0]
 8008b7a:	e004      	b.n	8008b86 <PC_show_Keys+0x1e>
 8008b7c:	20000b51 	.word	0x20000b51
  }
  else {
    usb_out = false;
 8008b80:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f78 <PC_show_Keys+0x410>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008b86:	4afd      	ldr	r2, [pc, #1012]	@ (8008f7c <PC_show_Keys+0x414>)
 8008b88:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f80 <PC_show_Keys+0x418>)
 8008b8a:	0011      	movs	r1, r2
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f01d fc9d 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b92:	4bf9      	ldr	r3, [pc, #996]	@ (8008f78 <PC_show_Keys+0x410>)
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	4bfa      	ldr	r3, [pc, #1000]	@ (8008f80 <PC_show_Keys+0x418>)
 8008b98:	0011      	movs	r1, r2
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f7ff ffc9 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008ba0:	4bf8      	ldr	r3, [pc, #992]	@ (8008f84 <PC_show_Keys+0x41c>)
 8008ba2:	48f9      	ldr	r0, [pc, #996]	@ (8008f88 <PC_show_Keys+0x420>)
 8008ba4:	220c      	movs	r2, #12
 8008ba6:	0019      	movs	r1, r3
 8008ba8:	f003 fb0a 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008bac:	4af5      	ldr	r2, [pc, #980]	@ (8008f84 <PC_show_Keys+0x41c>)
 8008bae:	4bf7      	ldr	r3, [pc, #988]	@ (8008f8c <PC_show_Keys+0x424>)
 8008bb0:	0011      	movs	r1, r2
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f7fc fb94 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008bb8:	4bf4      	ldr	r3, [pc, #976]	@ (8008f8c <PC_show_Keys+0x424>)
 8008bba:	49f5      	ldr	r1, [pc, #980]	@ (8008f90 <PC_show_Keys+0x428>)
 8008bbc:	48f0      	ldr	r0, [pc, #960]	@ (8008f80 <PC_show_Keys+0x418>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f01d fc84 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bc4:	4bec      	ldr	r3, [pc, #944]	@ (8008f78 <PC_show_Keys+0x410>)
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	4bed      	ldr	r3, [pc, #948]	@ (8008f80 <PC_show_Keys+0x418>)
 8008bca:	0011      	movs	r1, r2
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7ff ffb0 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008bd2:	4bf0      	ldr	r3, [pc, #960]	@ (8008f94 <PC_show_Keys+0x42c>)
 8008bd4:	48f0      	ldr	r0, [pc, #960]	@ (8008f98 <PC_show_Keys+0x430>)
 8008bd6:	220c      	movs	r2, #12
 8008bd8:	0019      	movs	r1, r3
 8008bda:	f003 faf1 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008bde:	4aed      	ldr	r2, [pc, #948]	@ (8008f94 <PC_show_Keys+0x42c>)
 8008be0:	4bea      	ldr	r3, [pc, #936]	@ (8008f8c <PC_show_Keys+0x424>)
 8008be2:	0011      	movs	r1, r2
 8008be4:	0018      	movs	r0, r3
 8008be6:	f7fc fb7b 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008bea:	4be8      	ldr	r3, [pc, #928]	@ (8008f8c <PC_show_Keys+0x424>)
 8008bec:	49eb      	ldr	r1, [pc, #940]	@ (8008f9c <PC_show_Keys+0x434>)
 8008bee:	48e4      	ldr	r0, [pc, #912]	@ (8008f80 <PC_show_Keys+0x418>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f01d fc6b 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bf6:	4be0      	ldr	r3, [pc, #896]	@ (8008f78 <PC_show_Keys+0x410>)
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	4be1      	ldr	r3, [pc, #900]	@ (8008f80 <PC_show_Keys+0x418>)
 8008bfc:	0011      	movs	r1, r2
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f7ff ff97 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008c04:	4be6      	ldr	r3, [pc, #920]	@ (8008fa0 <PC_show_Keys+0x438>)
 8008c06:	48e7      	ldr	r0, [pc, #924]	@ (8008fa4 <PC_show_Keys+0x43c>)
 8008c08:	220c      	movs	r2, #12
 8008c0a:	0019      	movs	r1, r3
 8008c0c:	f003 fad8 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008c10:	4ae3      	ldr	r2, [pc, #908]	@ (8008fa0 <PC_show_Keys+0x438>)
 8008c12:	4bde      	ldr	r3, [pc, #888]	@ (8008f8c <PC_show_Keys+0x424>)
 8008c14:	0011      	movs	r1, r2
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7fc fb62 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008c1c:	4bdb      	ldr	r3, [pc, #876]	@ (8008f8c <PC_show_Keys+0x424>)
 8008c1e:	49e2      	ldr	r1, [pc, #904]	@ (8008fa8 <PC_show_Keys+0x440>)
 8008c20:	48d7      	ldr	r0, [pc, #860]	@ (8008f80 <PC_show_Keys+0x418>)
 8008c22:	2202      	movs	r2, #2
 8008c24:	f01d fc52 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c28:	4bd3      	ldr	r3, [pc, #844]	@ (8008f78 <PC_show_Keys+0x410>)
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	4bd4      	ldr	r3, [pc, #848]	@ (8008f80 <PC_show_Keys+0x418>)
 8008c2e:	0011      	movs	r1, r2
 8008c30:	0018      	movs	r0, r3
 8008c32:	f7ff ff7e 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008c36:	4bdd      	ldr	r3, [pc, #884]	@ (8008fac <PC_show_Keys+0x444>)
 8008c38:	48dd      	ldr	r0, [pc, #884]	@ (8008fb0 <PC_show_Keys+0x448>)
 8008c3a:	220c      	movs	r2, #12
 8008c3c:	0019      	movs	r1, r3
 8008c3e:	f003 fabf 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008c42:	4ada      	ldr	r2, [pc, #872]	@ (8008fac <PC_show_Keys+0x444>)
 8008c44:	4bd1      	ldr	r3, [pc, #836]	@ (8008f8c <PC_show_Keys+0x424>)
 8008c46:	0011      	movs	r1, r2
 8008c48:	0018      	movs	r0, r3
 8008c4a:	f7fc fb49 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008c4e:	4bcf      	ldr	r3, [pc, #828]	@ (8008f8c <PC_show_Keys+0x424>)
 8008c50:	49d8      	ldr	r1, [pc, #864]	@ (8008fb4 <PC_show_Keys+0x44c>)
 8008c52:	48cb      	ldr	r0, [pc, #812]	@ (8008f80 <PC_show_Keys+0x418>)
 8008c54:	2203      	movs	r2, #3
 8008c56:	f01d fc39 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c5a:	4bc7      	ldr	r3, [pc, #796]	@ (8008f78 <PC_show_Keys+0x410>)
 8008c5c:	781a      	ldrb	r2, [r3, #0]
 8008c5e:	4bc8      	ldr	r3, [pc, #800]	@ (8008f80 <PC_show_Keys+0x418>)
 8008c60:	0011      	movs	r1, r2
 8008c62:	0018      	movs	r0, r3
 8008c64:	f7ff ff65 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008c68:	4bd3      	ldr	r3, [pc, #844]	@ (8008fb8 <PC_show_Keys+0x450>)
 8008c6a:	48d4      	ldr	r0, [pc, #848]	@ (8008fbc <PC_show_Keys+0x454>)
 8008c6c:	220c      	movs	r2, #12
 8008c6e:	0019      	movs	r1, r3
 8008c70:	f003 faa6 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008c74:	4ad0      	ldr	r2, [pc, #832]	@ (8008fb8 <PC_show_Keys+0x450>)
 8008c76:	4bc5      	ldr	r3, [pc, #788]	@ (8008f8c <PC_show_Keys+0x424>)
 8008c78:	0011      	movs	r1, r2
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f7fc fb30 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008c80:	4bc2      	ldr	r3, [pc, #776]	@ (8008f8c <PC_show_Keys+0x424>)
 8008c82:	49cf      	ldr	r1, [pc, #828]	@ (8008fc0 <PC_show_Keys+0x458>)
 8008c84:	48be      	ldr	r0, [pc, #760]	@ (8008f80 <PC_show_Keys+0x418>)
 8008c86:	2204      	movs	r2, #4
 8008c88:	f01d fc20 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c8c:	4bba      	ldr	r3, [pc, #744]	@ (8008f78 <PC_show_Keys+0x410>)
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	4bbb      	ldr	r3, [pc, #748]	@ (8008f80 <PC_show_Keys+0x418>)
 8008c92:	0011      	movs	r1, r2
 8008c94:	0018      	movs	r0, r3
 8008c96:	f7ff ff4c 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008c9a:	4bca      	ldr	r3, [pc, #808]	@ (8008fc4 <PC_show_Keys+0x45c>)
 8008c9c:	48ca      	ldr	r0, [pc, #808]	@ (8008fc8 <PC_show_Keys+0x460>)
 8008c9e:	220c      	movs	r2, #12
 8008ca0:	0019      	movs	r1, r3
 8008ca2:	f003 fa8d 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008ca6:	4ac7      	ldr	r2, [pc, #796]	@ (8008fc4 <PC_show_Keys+0x45c>)
 8008ca8:	4bb8      	ldr	r3, [pc, #736]	@ (8008f8c <PC_show_Keys+0x424>)
 8008caa:	0011      	movs	r1, r2
 8008cac:	0018      	movs	r0, r3
 8008cae:	f7fc fb17 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008cb2:	4bb6      	ldr	r3, [pc, #728]	@ (8008f8c <PC_show_Keys+0x424>)
 8008cb4:	49c5      	ldr	r1, [pc, #788]	@ (8008fcc <PC_show_Keys+0x464>)
 8008cb6:	48b2      	ldr	r0, [pc, #712]	@ (8008f80 <PC_show_Keys+0x418>)
 8008cb8:	2205      	movs	r2, #5
 8008cba:	f01d fc07 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cbe:	4bae      	ldr	r3, [pc, #696]	@ (8008f78 <PC_show_Keys+0x410>)
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	4baf      	ldr	r3, [pc, #700]	@ (8008f80 <PC_show_Keys+0x418>)
 8008cc4:	0011      	movs	r1, r2
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f7ff ff33 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008ccc:	4bc0      	ldr	r3, [pc, #768]	@ (8008fd0 <PC_show_Keys+0x468>)
 8008cce:	48c1      	ldr	r0, [pc, #772]	@ (8008fd4 <PC_show_Keys+0x46c>)
 8008cd0:	220c      	movs	r2, #12
 8008cd2:	0019      	movs	r1, r3
 8008cd4:	f003 fa74 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008cd8:	4abd      	ldr	r2, [pc, #756]	@ (8008fd0 <PC_show_Keys+0x468>)
 8008cda:	4bac      	ldr	r3, [pc, #688]	@ (8008f8c <PC_show_Keys+0x424>)
 8008cdc:	0011      	movs	r1, r2
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f7fc fafe 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008ce4:	4ba9      	ldr	r3, [pc, #676]	@ (8008f8c <PC_show_Keys+0x424>)
 8008ce6:	49bc      	ldr	r1, [pc, #752]	@ (8008fd8 <PC_show_Keys+0x470>)
 8008ce8:	48a5      	ldr	r0, [pc, #660]	@ (8008f80 <PC_show_Keys+0x418>)
 8008cea:	2206      	movs	r2, #6
 8008cec:	f01d fbee 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cf0:	4ba1      	ldr	r3, [pc, #644]	@ (8008f78 <PC_show_Keys+0x410>)
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	4ba2      	ldr	r3, [pc, #648]	@ (8008f80 <PC_show_Keys+0x418>)
 8008cf6:	0011      	movs	r1, r2
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff ff1a 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008cfe:	4bb7      	ldr	r3, [pc, #732]	@ (8008fdc <PC_show_Keys+0x474>)
 8008d00:	48b7      	ldr	r0, [pc, #732]	@ (8008fe0 <PC_show_Keys+0x478>)
 8008d02:	220c      	movs	r2, #12
 8008d04:	0019      	movs	r1, r3
 8008d06:	f003 fa5b 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008d0a:	4ab4      	ldr	r2, [pc, #720]	@ (8008fdc <PC_show_Keys+0x474>)
 8008d0c:	4b9f      	ldr	r3, [pc, #636]	@ (8008f8c <PC_show_Keys+0x424>)
 8008d0e:	0011      	movs	r1, r2
 8008d10:	0018      	movs	r0, r3
 8008d12:	f7fc fae5 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008d16:	4b9d      	ldr	r3, [pc, #628]	@ (8008f8c <PC_show_Keys+0x424>)
 8008d18:	49b2      	ldr	r1, [pc, #712]	@ (8008fe4 <PC_show_Keys+0x47c>)
 8008d1a:	4899      	ldr	r0, [pc, #612]	@ (8008f80 <PC_show_Keys+0x418>)
 8008d1c:	2207      	movs	r2, #7
 8008d1e:	f01d fbd5 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d22:	4b95      	ldr	r3, [pc, #596]	@ (8008f78 <PC_show_Keys+0x410>)
 8008d24:	781a      	ldrb	r2, [r3, #0]
 8008d26:	4b96      	ldr	r3, [pc, #600]	@ (8008f80 <PC_show_Keys+0x418>)
 8008d28:	0011      	movs	r1, r2
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f7ff ff01 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008d30:	4bad      	ldr	r3, [pc, #692]	@ (8008fe8 <PC_show_Keys+0x480>)
 8008d32:	48ae      	ldr	r0, [pc, #696]	@ (8008fec <PC_show_Keys+0x484>)
 8008d34:	220c      	movs	r2, #12
 8008d36:	0019      	movs	r1, r3
 8008d38:	f003 fa42 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008d3c:	4aaa      	ldr	r2, [pc, #680]	@ (8008fe8 <PC_show_Keys+0x480>)
 8008d3e:	4b93      	ldr	r3, [pc, #588]	@ (8008f8c <PC_show_Keys+0x424>)
 8008d40:	0011      	movs	r1, r2
 8008d42:	0018      	movs	r0, r3
 8008d44:	f7fc facc 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008d48:	4b90      	ldr	r3, [pc, #576]	@ (8008f8c <PC_show_Keys+0x424>)
 8008d4a:	49a9      	ldr	r1, [pc, #676]	@ (8008ff0 <PC_show_Keys+0x488>)
 8008d4c:	488c      	ldr	r0, [pc, #560]	@ (8008f80 <PC_show_Keys+0x418>)
 8008d4e:	2208      	movs	r2, #8
 8008d50:	f01d fbbc 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d54:	4b88      	ldr	r3, [pc, #544]	@ (8008f78 <PC_show_Keys+0x410>)
 8008d56:	781a      	ldrb	r2, [r3, #0]
 8008d58:	4b89      	ldr	r3, [pc, #548]	@ (8008f80 <PC_show_Keys+0x418>)
 8008d5a:	0011      	movs	r1, r2
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f7ff fee8 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008d62:	4ba4      	ldr	r3, [pc, #656]	@ (8008ff4 <PC_show_Keys+0x48c>)
 8008d64:	48a4      	ldr	r0, [pc, #656]	@ (8008ff8 <PC_show_Keys+0x490>)
 8008d66:	220c      	movs	r2, #12
 8008d68:	0019      	movs	r1, r3
 8008d6a:	f003 fa29 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008d6e:	4aa1      	ldr	r2, [pc, #644]	@ (8008ff4 <PC_show_Keys+0x48c>)
 8008d70:	4b86      	ldr	r3, [pc, #536]	@ (8008f8c <PC_show_Keys+0x424>)
 8008d72:	0011      	movs	r1, r2
 8008d74:	0018      	movs	r0, r3
 8008d76:	f7fc fab3 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008d7a:	4b84      	ldr	r3, [pc, #528]	@ (8008f8c <PC_show_Keys+0x424>)
 8008d7c:	499f      	ldr	r1, [pc, #636]	@ (8008ffc <PC_show_Keys+0x494>)
 8008d7e:	4880      	ldr	r0, [pc, #512]	@ (8008f80 <PC_show_Keys+0x418>)
 8008d80:	2209      	movs	r2, #9
 8008d82:	f01d fba3 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d86:	4b7c      	ldr	r3, [pc, #496]	@ (8008f78 <PC_show_Keys+0x410>)
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8008f80 <PC_show_Keys+0x418>)
 8008d8c:	0011      	movs	r1, r2
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f7ff fecf 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008d94:	4b9a      	ldr	r3, [pc, #616]	@ (8009000 <PC_show_Keys+0x498>)
 8008d96:	489b      	ldr	r0, [pc, #620]	@ (8009004 <PC_show_Keys+0x49c>)
 8008d98:	220c      	movs	r2, #12
 8008d9a:	0019      	movs	r1, r3
 8008d9c:	f003 fa10 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008da0:	4a97      	ldr	r2, [pc, #604]	@ (8009000 <PC_show_Keys+0x498>)
 8008da2:	4b7a      	ldr	r3, [pc, #488]	@ (8008f8c <PC_show_Keys+0x424>)
 8008da4:	0011      	movs	r1, r2
 8008da6:	0018      	movs	r0, r3
 8008da8:	f7fc fa9a 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008dac:	4b77      	ldr	r3, [pc, #476]	@ (8008f8c <PC_show_Keys+0x424>)
 8008dae:	4996      	ldr	r1, [pc, #600]	@ (8009008 <PC_show_Keys+0x4a0>)
 8008db0:	4873      	ldr	r0, [pc, #460]	@ (8008f80 <PC_show_Keys+0x418>)
 8008db2:	220a      	movs	r2, #10
 8008db4:	f01d fb8a 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008db8:	4b6f      	ldr	r3, [pc, #444]	@ (8008f78 <PC_show_Keys+0x410>)
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	4b70      	ldr	r3, [pc, #448]	@ (8008f80 <PC_show_Keys+0x418>)
 8008dbe:	0011      	movs	r1, r2
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f7ff feb6 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008dc6:	4b91      	ldr	r3, [pc, #580]	@ (800900c <PC_show_Keys+0x4a4>)
 8008dc8:	4891      	ldr	r0, [pc, #580]	@ (8009010 <PC_show_Keys+0x4a8>)
 8008dca:	220c      	movs	r2, #12
 8008dcc:	0019      	movs	r1, r3
 8008dce:	f003 f9f7 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008dd2:	4a8e      	ldr	r2, [pc, #568]	@ (800900c <PC_show_Keys+0x4a4>)
 8008dd4:	4b6d      	ldr	r3, [pc, #436]	@ (8008f8c <PC_show_Keys+0x424>)
 8008dd6:	0011      	movs	r1, r2
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f7fc fa81 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status ----------------: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008dde:	4b6b      	ldr	r3, [pc, #428]	@ (8008f8c <PC_show_Keys+0x424>)
 8008de0:	498c      	ldr	r1, [pc, #560]	@ (8009014 <PC_show_Keys+0x4ac>)
 8008de2:	4867      	ldr	r0, [pc, #412]	@ (8008f80 <PC_show_Keys+0x418>)
 8008de4:	220b      	movs	r2, #11
 8008de6:	f01d fb71 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dea:	4b63      	ldr	r3, [pc, #396]	@ (8008f78 <PC_show_Keys+0x410>)
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	4b64      	ldr	r3, [pc, #400]	@ (8008f80 <PC_show_Keys+0x418>)
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7ff fe9d 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008df8:	4b87      	ldr	r3, [pc, #540]	@ (8009018 <PC_show_Keys+0x4b0>)
 8008dfa:	4888      	ldr	r0, [pc, #544]	@ (800901c <PC_show_Keys+0x4b4>)
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	0019      	movs	r1, r3
 8008e00:	f003 f9de 	bl	800c1c0 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ---max 12 char--------: ", CustomNameConfigCmd);
 8008e04:	4986      	ldr	r1, [pc, #536]	@ (8009020 <PC_show_Keys+0x4b8>)
 8008e06:	4b5e      	ldr	r3, [pc, #376]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e08:	220c      	movs	r2, #12
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f01d fb5e 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e10:	4b59      	ldr	r3, [pc, #356]	@ (8008f78 <PC_show_Keys+0x410>)
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	4b5a      	ldr	r3, [pc, #360]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e16:	0011      	movs	r1, r2
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f7ff fe8a 	bl	8008b32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8009018 <PC_show_Keys+0x4b0>)
 8008e20:	4980      	ldr	r1, [pc, #512]	@ (8009024 <PC_show_Keys+0x4bc>)
 8008e22:	4b57      	ldr	r3, [pc, #348]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e24:	0018      	movs	r0, r3
 8008e26:	f01d fb51 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e2a:	4b53      	ldr	r3, [pc, #332]	@ (8008f78 <PC_show_Keys+0x410>)
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	4b54      	ldr	r3, [pc, #336]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e30:	0011      	movs	r1, r2
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7ff fe7d 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008e38:	4b7b      	ldr	r3, [pc, #492]	@ (8009028 <PC_show_Keys+0x4c0>)
 8008e3a:	487c      	ldr	r0, [pc, #496]	@ (800902c <PC_show_Keys+0x4c4>)
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	0019      	movs	r1, r3
 8008e40:	f003 f9be 	bl	800c1c0 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, SSIDConfig);
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008e44:	497a      	ldr	r1, [pc, #488]	@ (8009030 <PC_show_Keys+0x4c8>)
 8008e46:	4b4e      	ldr	r3, [pc, #312]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e48:	220d      	movs	r2, #13
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f01d fb3e 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e50:	4b49      	ldr	r3, [pc, #292]	@ (8008f78 <PC_show_Keys+0x410>)
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	4b4a      	ldr	r3, [pc, #296]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e56:	0011      	movs	r1, r2
 8008e58:	0018      	movs	r0, r3
 8008e5a:	f7ff fe6a 	bl	8008b32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008e5e:	4a72      	ldr	r2, [pc, #456]	@ (8009028 <PC_show_Keys+0x4c0>)
 8008e60:	4970      	ldr	r1, [pc, #448]	@ (8009024 <PC_show_Keys+0x4bc>)
 8008e62:	4b47      	ldr	r3, [pc, #284]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e64:	0018      	movs	r0, r3
 8008e66:	f01d fb31 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e6a:	4b43      	ldr	r3, [pc, #268]	@ (8008f78 <PC_show_Keys+0x410>)
 8008e6c:	781a      	ldrb	r2, [r3, #0]
 8008e6e:	4b44      	ldr	r3, [pc, #272]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e70:	0011      	movs	r1, r2
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7ff fe5d 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008e78:	4b6e      	ldr	r3, [pc, #440]	@ (8009034 <PC_show_Keys+0x4cc>)
 8008e7a:	486f      	ldr	r0, [pc, #444]	@ (8009038 <PC_show_Keys+0x4d0>)
 8008e7c:	2240      	movs	r2, #64	@ 0x40
 8008e7e:	0019      	movs	r1, r3
 8008e80:	f003 f99e 	bl	800c1c0 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, pwdConfig);
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008e84:	496d      	ldr	r1, [pc, #436]	@ (800903c <PC_show_Keys+0x4d4>)
 8008e86:	4b3e      	ldr	r3, [pc, #248]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e88:	220e      	movs	r2, #14
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f01d fb1e 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e90:	4b39      	ldr	r3, [pc, #228]	@ (8008f78 <PC_show_Keys+0x410>)
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	4b3a      	ldr	r3, [pc, #232]	@ (8008f80 <PC_show_Keys+0x418>)
 8008e96:	0011      	movs	r1, r2
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7ff fe4a 	bl	8008b32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008e9e:	4a65      	ldr	r2, [pc, #404]	@ (8009034 <PC_show_Keys+0x4cc>)
 8008ea0:	4960      	ldr	r1, [pc, #384]	@ (8009024 <PC_show_Keys+0x4bc>)
 8008ea2:	4b37      	ldr	r3, [pc, #220]	@ (8008f80 <PC_show_Keys+0x418>)
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f01d fb11 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eaa:	4b33      	ldr	r3, [pc, #204]	@ (8008f78 <PC_show_Keys+0x410>)
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	4b34      	ldr	r3, [pc, #208]	@ (8008f80 <PC_show_Keys+0x418>)
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7ff fe3d 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008eb8:	4b61      	ldr	r3, [pc, #388]	@ (8009040 <PC_show_Keys+0x4d8>)
 8008eba:	4862      	ldr	r0, [pc, #392]	@ (8009044 <PC_show_Keys+0x4dc>)
 8008ebc:	220c      	movs	r2, #12
 8008ebe:	0019      	movs	r1, r3
 8008ec0:	f003 f97e 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8009040 <PC_show_Keys+0x4d8>)
 8008ec6:	4b31      	ldr	r3, [pc, #196]	@ (8008f8c <PC_show_Keys+0x424>)
 8008ec8:	0011      	movs	r1, r2
 8008eca:	0018      	movs	r0, r3
 8008ecc:	f7fc fa08 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8008f8c <PC_show_Keys+0x424>)
 8008ed2:	495d      	ldr	r1, [pc, #372]	@ (8009048 <PC_show_Keys+0x4e0>)
 8008ed4:	482a      	ldr	r0, [pc, #168]	@ (8008f80 <PC_show_Keys+0x418>)
 8008ed6:	220f      	movs	r2, #15
 8008ed8:	f01d faf8 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008edc:	4b26      	ldr	r3, [pc, #152]	@ (8008f78 <PC_show_Keys+0x410>)
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	4b27      	ldr	r3, [pc, #156]	@ (8008f80 <PC_show_Keys+0x418>)
 8008ee2:	0011      	movs	r1, r2
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f7ff fe24 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008eea:	4b58      	ldr	r3, [pc, #352]	@ (800904c <PC_show_Keys+0x4e4>)
 8008eec:	4858      	ldr	r0, [pc, #352]	@ (8009050 <PC_show_Keys+0x4e8>)
 8008eee:	220c      	movs	r2, #12
 8008ef0:	0019      	movs	r1, r3
 8008ef2:	f003 f965 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008ef6:	4a55      	ldr	r2, [pc, #340]	@ (800904c <PC_show_Keys+0x4e4>)
 8008ef8:	4b24      	ldr	r3, [pc, #144]	@ (8008f8c <PC_show_Keys+0x424>)
 8008efa:	0011      	movs	r1, r2
 8008efc:	0018      	movs	r0, r3
 8008efe:	f7fc f9ef 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008f02:	4b22      	ldr	r3, [pc, #136]	@ (8008f8c <PC_show_Keys+0x424>)
 8008f04:	4953      	ldr	r1, [pc, #332]	@ (8009054 <PC_show_Keys+0x4ec>)
 8008f06:	481e      	ldr	r0, [pc, #120]	@ (8008f80 <PC_show_Keys+0x418>)
 8008f08:	2210      	movs	r2, #16
 8008f0a:	f01d fadf 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <PC_show_Keys+0x410>)
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	4b1b      	ldr	r3, [pc, #108]	@ (8008f80 <PC_show_Keys+0x418>)
 8008f14:	0011      	movs	r1, r2
 8008f16:	0018      	movs	r0, r3
 8008f18:	f7ff fe0b 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8009058 <PC_show_Keys+0x4f0>)
 8008f1e:	484f      	ldr	r0, [pc, #316]	@ (800905c <PC_show_Keys+0x4f4>)
 8008f20:	220c      	movs	r2, #12
 8008f22:	0019      	movs	r1, r3
 8008f24:	f003 f94c 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008f28:	4a4b      	ldr	r2, [pc, #300]	@ (8009058 <PC_show_Keys+0x4f0>)
 8008f2a:	4b18      	ldr	r3, [pc, #96]	@ (8008f8c <PC_show_Keys+0x424>)
 8008f2c:	0011      	movs	r1, r2
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f7fc f9d6 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008f34:	4b15      	ldr	r3, [pc, #84]	@ (8008f8c <PC_show_Keys+0x424>)
 8008f36:	494a      	ldr	r1, [pc, #296]	@ (8009060 <PC_show_Keys+0x4f8>)
 8008f38:	4811      	ldr	r0, [pc, #68]	@ (8008f80 <PC_show_Keys+0x418>)
 8008f3a:	2211      	movs	r2, #17
 8008f3c:	f01d fac6 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f40:	4b0d      	ldr	r3, [pc, #52]	@ (8008f78 <PC_show_Keys+0x410>)
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	4b0e      	ldr	r3, [pc, #56]	@ (8008f80 <PC_show_Keys+0x418>)
 8008f46:	0011      	movs	r1, r2
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7ff fdf2 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008f4e:	4b45      	ldr	r3, [pc, #276]	@ (8009064 <PC_show_Keys+0x4fc>)
 8008f50:	4845      	ldr	r0, [pc, #276]	@ (8009068 <PC_show_Keys+0x500>)
 8008f52:	220c      	movs	r2, #12
 8008f54:	0019      	movs	r1, r3
 8008f56:	f003 f933 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008f5a:	4a42      	ldr	r2, [pc, #264]	@ (8009064 <PC_show_Keys+0x4fc>)
 8008f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f8c <PC_show_Keys+0x424>)
 8008f5e:	0011      	movs	r1, r2
 8008f60:	0018      	movs	r0, r3
 8008f62:	f7fc f9bd 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008f66:	4b09      	ldr	r3, [pc, #36]	@ (8008f8c <PC_show_Keys+0x424>)
 8008f68:	4940      	ldr	r1, [pc, #256]	@ (800906c <PC_show_Keys+0x504>)
 8008f6a:	4805      	ldr	r0, [pc, #20]	@ (8008f80 <PC_show_Keys+0x418>)
 8008f6c:	2212      	movs	r2, #18
 8008f6e:	f01d faad 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f72:	4b01      	ldr	r3, [pc, #4]	@ (8008f78 <PC_show_Keys+0x410>)
 8008f74:	781a      	ldrb	r2, [r3, #0]
 8008f76:	e07b      	b.n	8009070 <PC_show_Keys+0x508>
 8008f78:	20000b51 	.word	0x20000b51
 8008f7c:	0802b614 	.word	0x0802b614
 8008f80:	20000b54 	.word	0x20000b54
 8008f84:	20000b9c 	.word	0x20000b9c
 8008f88:	08080000 	.word	0x08080000
 8008f8c:	20000ba8 	.word	0x20000ba8
 8008f90:	0802b634 	.word	0x0802b634
 8008f94:	20000bc4 	.word	0x20000bc4
 8008f98:	0808000c 	.word	0x0808000c
 8008f9c:	0802b664 	.word	0x0802b664
 8008fa0:	20000bd0 	.word	0x20000bd0
 8008fa4:	08080018 	.word	0x08080018
 8008fa8:	0802b694 	.word	0x0802b694
 8008fac:	20000bdc 	.word	0x20000bdc
 8008fb0:	08080024 	.word	0x08080024
 8008fb4:	0802b6c4 	.word	0x0802b6c4
 8008fb8:	20000be8 	.word	0x20000be8
 8008fbc:	08080030 	.word	0x08080030
 8008fc0:	0802b6f4 	.word	0x0802b6f4
 8008fc4:	20000bf4 	.word	0x20000bf4
 8008fc8:	08080048 	.word	0x08080048
 8008fcc:	0802b724 	.word	0x0802b724
 8008fd0:	20000c00 	.word	0x20000c00
 8008fd4:	0808003c 	.word	0x0808003c
 8008fd8:	0802b754 	.word	0x0802b754
 8008fdc:	20000c0c 	.word	0x20000c0c
 8008fe0:	08080054 	.word	0x08080054
 8008fe4:	0802b784 	.word	0x0802b784
 8008fe8:	20000c18 	.word	0x20000c18
 8008fec:	08080060 	.word	0x08080060
 8008ff0:	0802b7b4 	.word	0x0802b7b4
 8008ff4:	20000c24 	.word	0x20000c24
 8008ff8:	0808006c 	.word	0x0808006c
 8008ffc:	0802b7e4 	.word	0x0802b7e4
 8009000:	20000c30 	.word	0x20000c30
 8009004:	08080078 	.word	0x08080078
 8009008:	0802b814 	.word	0x0802b814
 800900c:	20000c3c 	.word	0x20000c3c
 8009010:	08080084 	.word	0x08080084
 8009014:	0802b844 	.word	0x0802b844
 8009018:	20000c48 	.word	0x20000c48
 800901c:	08080090 	.word	0x08080090
 8009020:	0802b874 	.word	0x0802b874
 8009024:	0802b8a0 	.word	0x0802b8a0
 8009028:	20000c68 	.word	0x20000c68
 800902c:	08080200 	.word	0x08080200
 8009030:	0802b8a8 	.word	0x0802b8a8
 8009034:	20000c88 	.word	0x20000c88
 8009038:	08080220 	.word	0x08080220
 800903c:	0802b8d4 	.word	0x0802b8d4
 8009040:	20000cc8 	.word	0x20000cc8
 8009044:	080800c8 	.word	0x080800c8
 8009048:	0802b900 	.word	0x0802b900
 800904c:	20000cd4 	.word	0x20000cd4
 8009050:	080800d4 	.word	0x080800d4
 8009054:	0802b930 	.word	0x0802b930
 8009058:	20000ce0 	.word	0x20000ce0
 800905c:	080800e0 	.word	0x080800e0
 8009060:	0802b960 	.word	0x0802b960
 8009064:	20000cec 	.word	0x20000cec
 8009068:	080800ec 	.word	0x080800ec
 800906c:	0802b990 	.word	0x0802b990
 8009070:	4be2      	ldr	r3, [pc, #904]	@ (80093fc <PC_show_Keys+0x894>)
 8009072:	0011      	movs	r1, r2
 8009074:	0018      	movs	r0, r3
 8009076:	f7ff fd5c 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 800907a:	4be1      	ldr	r3, [pc, #900]	@ (8009400 <PC_show_Keys+0x898>)
 800907c:	48e1      	ldr	r0, [pc, #900]	@ (8009404 <PC_show_Keys+0x89c>)
 800907e:	220c      	movs	r2, #12
 8009080:	0019      	movs	r1, r3
 8009082:	f003 f89d 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8009086:	4ade      	ldr	r2, [pc, #888]	@ (8009400 <PC_show_Keys+0x898>)
 8009088:	4bdf      	ldr	r3, [pc, #892]	@ (8009408 <PC_show_Keys+0x8a0>)
 800908a:	0011      	movs	r1, r2
 800908c:	0018      	movs	r0, r3
 800908e:	f7fc f927 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 8009092:	4bdd      	ldr	r3, [pc, #884]	@ (8009408 <PC_show_Keys+0x8a0>)
 8009094:	49dd      	ldr	r1, [pc, #884]	@ (800940c <PC_show_Keys+0x8a4>)
 8009096:	48d9      	ldr	r0, [pc, #868]	@ (80093fc <PC_show_Keys+0x894>)
 8009098:	2213      	movs	r2, #19
 800909a:	f01d fa17 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 800909e:	4bdc      	ldr	r3, [pc, #880]	@ (8009410 <PC_show_Keys+0x8a8>)
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	4bd6      	ldr	r3, [pc, #856]	@ (80093fc <PC_show_Keys+0x894>)
 80090a4:	0011      	movs	r1, r2
 80090a6:	0018      	movs	r0, r3
 80090a8:	f7ff fd43 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 80090ac:	4bd9      	ldr	r3, [pc, #868]	@ (8009414 <PC_show_Keys+0x8ac>)
 80090ae:	48da      	ldr	r0, [pc, #872]	@ (8009418 <PC_show_Keys+0x8b0>)
 80090b0:	220c      	movs	r2, #12
 80090b2:	0019      	movs	r1, r3
 80090b4:	f003 f884 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 80090b8:	4ad6      	ldr	r2, [pc, #856]	@ (8009414 <PC_show_Keys+0x8ac>)
 80090ba:	4bd3      	ldr	r3, [pc, #844]	@ (8009408 <PC_show_Keys+0x8a0>)
 80090bc:	0011      	movs	r1, r2
 80090be:	0018      	movs	r0, r3
 80090c0:	f7fc f90e 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 80090c4:	4bd0      	ldr	r3, [pc, #832]	@ (8009408 <PC_show_Keys+0x8a0>)
 80090c6:	49d5      	ldr	r1, [pc, #852]	@ (800941c <PC_show_Keys+0x8b4>)
 80090c8:	48cc      	ldr	r0, [pc, #816]	@ (80093fc <PC_show_Keys+0x894>)
 80090ca:	2214      	movs	r2, #20
 80090cc:	f01d f9fe 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090d0:	4bcf      	ldr	r3, [pc, #828]	@ (8009410 <PC_show_Keys+0x8a8>)
 80090d2:	781a      	ldrb	r2, [r3, #0]
 80090d4:	4bc9      	ldr	r3, [pc, #804]	@ (80093fc <PC_show_Keys+0x894>)
 80090d6:	0011      	movs	r1, r2
 80090d8:	0018      	movs	r0, r3
 80090da:	f7ff fd2a 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 80090de:	4bd0      	ldr	r3, [pc, #832]	@ (8009420 <PC_show_Keys+0x8b8>)
 80090e0:	48d0      	ldr	r0, [pc, #832]	@ (8009424 <PC_show_Keys+0x8bc>)
 80090e2:	220c      	movs	r2, #12
 80090e4:	0019      	movs	r1, r3
 80090e6:	f003 f86b 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 80090ea:	4acd      	ldr	r2, [pc, #820]	@ (8009420 <PC_show_Keys+0x8b8>)
 80090ec:	4bc6      	ldr	r3, [pc, #792]	@ (8009408 <PC_show_Keys+0x8a0>)
 80090ee:	0011      	movs	r1, r2
 80090f0:	0018      	movs	r0, r3
 80090f2:	f7fc f8f5 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 80090f6:	4bc4      	ldr	r3, [pc, #784]	@ (8009408 <PC_show_Keys+0x8a0>)
 80090f8:	49cb      	ldr	r1, [pc, #812]	@ (8009428 <PC_show_Keys+0x8c0>)
 80090fa:	48c0      	ldr	r0, [pc, #768]	@ (80093fc <PC_show_Keys+0x894>)
 80090fc:	2215      	movs	r2, #21
 80090fe:	f01d f9e5 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009102:	4bc3      	ldr	r3, [pc, #780]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	4bbd      	ldr	r3, [pc, #756]	@ (80093fc <PC_show_Keys+0x894>)
 8009108:	0011      	movs	r1, r2
 800910a:	0018      	movs	r0, r3
 800910c:	f7ff fd11 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 8009110:	4bc6      	ldr	r3, [pc, #792]	@ (800942c <PC_show_Keys+0x8c4>)
 8009112:	48c7      	ldr	r0, [pc, #796]	@ (8009430 <PC_show_Keys+0x8c8>)
 8009114:	220c      	movs	r2, #12
 8009116:	0019      	movs	r1, r3
 8009118:	f003 f852 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 800911c:	4ac3      	ldr	r2, [pc, #780]	@ (800942c <PC_show_Keys+0x8c4>)
 800911e:	4bba      	ldr	r3, [pc, #744]	@ (8009408 <PC_show_Keys+0x8a0>)
 8009120:	0011      	movs	r1, r2
 8009122:	0018      	movs	r0, r3
 8009124:	f7fc f8dc 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 8009128:	4bb7      	ldr	r3, [pc, #732]	@ (8009408 <PC_show_Keys+0x8a0>)
 800912a:	49c2      	ldr	r1, [pc, #776]	@ (8009434 <PC_show_Keys+0x8cc>)
 800912c:	48b3      	ldr	r0, [pc, #716]	@ (80093fc <PC_show_Keys+0x894>)
 800912e:	2216      	movs	r2, #22
 8009130:	f01d f9cc 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009134:	4bb6      	ldr	r3, [pc, #728]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	4bb0      	ldr	r3, [pc, #704]	@ (80093fc <PC_show_Keys+0x894>)
 800913a:	0011      	movs	r1, r2
 800913c:	0018      	movs	r0, r3
 800913e:	f7ff fcf8 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8009142:	4bbd      	ldr	r3, [pc, #756]	@ (8009438 <PC_show_Keys+0x8d0>)
 8009144:	48bd      	ldr	r0, [pc, #756]	@ (800943c <PC_show_Keys+0x8d4>)
 8009146:	220c      	movs	r2, #12
 8009148:	0019      	movs	r1, r3
 800914a:	f003 f839 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 800914e:	4aba      	ldr	r2, [pc, #744]	@ (8009438 <PC_show_Keys+0x8d0>)
 8009150:	4bad      	ldr	r3, [pc, #692]	@ (8009408 <PC_show_Keys+0x8a0>)
 8009152:	0011      	movs	r1, r2
 8009154:	0018      	movs	r0, r3
 8009156:	f7fc f8c3 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 800915a:	4bab      	ldr	r3, [pc, #684]	@ (8009408 <PC_show_Keys+0x8a0>)
 800915c:	49b8      	ldr	r1, [pc, #736]	@ (8009440 <PC_show_Keys+0x8d8>)
 800915e:	48a7      	ldr	r0, [pc, #668]	@ (80093fc <PC_show_Keys+0x894>)
 8009160:	2217      	movs	r2, #23
 8009162:	f01d f9b3 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009166:	4baa      	ldr	r3, [pc, #680]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	4ba4      	ldr	r3, [pc, #656]	@ (80093fc <PC_show_Keys+0x894>)
 800916c:	0011      	movs	r1, r2
 800916e:	0018      	movs	r0, r3
 8009170:	f7ff fcdf 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8009174:	4bb3      	ldr	r3, [pc, #716]	@ (8009444 <PC_show_Keys+0x8dc>)
 8009176:	48b4      	ldr	r0, [pc, #720]	@ (8009448 <PC_show_Keys+0x8e0>)
 8009178:	220c      	movs	r2, #12
 800917a:	0019      	movs	r1, r3
 800917c:	f003 f820 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8009180:	4ab0      	ldr	r2, [pc, #704]	@ (8009444 <PC_show_Keys+0x8dc>)
 8009182:	4ba1      	ldr	r3, [pc, #644]	@ (8009408 <PC_show_Keys+0x8a0>)
 8009184:	0011      	movs	r1, r2
 8009186:	0018      	movs	r0, r3
 8009188:	f7fc f8aa 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 800918c:	4b9e      	ldr	r3, [pc, #632]	@ (8009408 <PC_show_Keys+0x8a0>)
 800918e:	49af      	ldr	r1, [pc, #700]	@ (800944c <PC_show_Keys+0x8e4>)
 8009190:	489a      	ldr	r0, [pc, #616]	@ (80093fc <PC_show_Keys+0x894>)
 8009192:	2218      	movs	r2, #24
 8009194:	f01d f99a 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009198:	4b9d      	ldr	r3, [pc, #628]	@ (8009410 <PC_show_Keys+0x8a8>)
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	4b97      	ldr	r3, [pc, #604]	@ (80093fc <PC_show_Keys+0x894>)
 800919e:	0011      	movs	r1, r2
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff fcc6 	bl	8008b32 <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 80091a6:	4baa      	ldr	r3, [pc, #680]	@ (8009450 <PC_show_Keys+0x8e8>)
 80091a8:	48aa      	ldr	r0, [pc, #680]	@ (8009454 <PC_show_Keys+0x8ec>)
 80091aa:	2230      	movs	r2, #48	@ 0x30
 80091ac:	0019      	movs	r1, r3
 80091ae:	f003 f807 	bl	800c1c0 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 80091b2:	49a9      	ldr	r1, [pc, #676]	@ (8009458 <PC_show_Keys+0x8f0>)
 80091b4:	4b91      	ldr	r3, [pc, #580]	@ (80093fc <PC_show_Keys+0x894>)
 80091b6:	2219      	movs	r2, #25
 80091b8:	0018      	movs	r0, r3
 80091ba:	f01d f987 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091be:	4b94      	ldr	r3, [pc, #592]	@ (8009410 <PC_show_Keys+0x8a8>)
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	4b8e      	ldr	r3, [pc, #568]	@ (80093fc <PC_show_Keys+0x894>)
 80091c4:	0011      	movs	r1, r2
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7ff fcb3 	bl	8008b32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 80091cc:	4aa0      	ldr	r2, [pc, #640]	@ (8009450 <PC_show_Keys+0x8e8>)
 80091ce:	49a3      	ldr	r1, [pc, #652]	@ (800945c <PC_show_Keys+0x8f4>)
 80091d0:	4b8a      	ldr	r3, [pc, #552]	@ (80093fc <PC_show_Keys+0x894>)
 80091d2:	0018      	movs	r0, r3
 80091d4:	f01d f97a 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091d8:	4b8d      	ldr	r3, [pc, #564]	@ (8009410 <PC_show_Keys+0x8a8>)
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	4b87      	ldr	r3, [pc, #540]	@ (80093fc <PC_show_Keys+0x894>)
 80091de:	0011      	movs	r1, r2
 80091e0:	0018      	movs	r0, r3
 80091e2:	f7ff fca6 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 80091e6:	4b9e      	ldr	r3, [pc, #632]	@ (8009460 <PC_show_Keys+0x8f8>)
 80091e8:	489e      	ldr	r0, [pc, #632]	@ (8009464 <PC_show_Keys+0x8fc>)
 80091ea:	2230      	movs	r2, #48	@ 0x30
 80091ec:	0019      	movs	r1, r3
 80091ee:	f002 ffe7 	bl	800c1c0 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 80091f2:	499d      	ldr	r1, [pc, #628]	@ (8009468 <PC_show_Keys+0x900>)
 80091f4:	4b81      	ldr	r3, [pc, #516]	@ (80093fc <PC_show_Keys+0x894>)
 80091f6:	221a      	movs	r2, #26
 80091f8:	0018      	movs	r0, r3
 80091fa:	f01d f967 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091fe:	4b84      	ldr	r3, [pc, #528]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009200:	781a      	ldrb	r2, [r3, #0]
 8009202:	4b7e      	ldr	r3, [pc, #504]	@ (80093fc <PC_show_Keys+0x894>)
 8009204:	0011      	movs	r1, r2
 8009206:	0018      	movs	r0, r3
 8009208:	f7ff fc93 	bl	8008b32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 800920c:	4a94      	ldr	r2, [pc, #592]	@ (8009460 <PC_show_Keys+0x8f8>)
 800920e:	4993      	ldr	r1, [pc, #588]	@ (800945c <PC_show_Keys+0x8f4>)
 8009210:	4b7a      	ldr	r3, [pc, #488]	@ (80093fc <PC_show_Keys+0x894>)
 8009212:	0018      	movs	r0, r3
 8009214:	f01d f95a 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009218:	4b7d      	ldr	r3, [pc, #500]	@ (8009410 <PC_show_Keys+0x8a8>)
 800921a:	781a      	ldrb	r2, [r3, #0]
 800921c:	4b77      	ldr	r3, [pc, #476]	@ (80093fc <PC_show_Keys+0x894>)
 800921e:	0011      	movs	r1, r2
 8009220:	0018      	movs	r0, r3
 8009222:	f7ff fc86 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8009226:	4b91      	ldr	r3, [pc, #580]	@ (800946c <PC_show_Keys+0x904>)
 8009228:	4891      	ldr	r0, [pc, #580]	@ (8009470 <PC_show_Keys+0x908>)
 800922a:	2230      	movs	r2, #48	@ 0x30
 800922c:	0019      	movs	r1, r3
 800922e:	f002 ffc7 	bl	800c1c0 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 8009232:	4990      	ldr	r1, [pc, #576]	@ (8009474 <PC_show_Keys+0x90c>)
 8009234:	4b71      	ldr	r3, [pc, #452]	@ (80093fc <PC_show_Keys+0x894>)
 8009236:	221b      	movs	r2, #27
 8009238:	0018      	movs	r0, r3
 800923a:	f01d f947 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 800923e:	4b74      	ldr	r3, [pc, #464]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	4b6e      	ldr	r3, [pc, #440]	@ (80093fc <PC_show_Keys+0x894>)
 8009244:	0011      	movs	r1, r2
 8009246:	0018      	movs	r0, r3
 8009248:	f7ff fc73 	bl	8008b32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 800924c:	4a87      	ldr	r2, [pc, #540]	@ (800946c <PC_show_Keys+0x904>)
 800924e:	4983      	ldr	r1, [pc, #524]	@ (800945c <PC_show_Keys+0x8f4>)
 8009250:	4b6a      	ldr	r3, [pc, #424]	@ (80093fc <PC_show_Keys+0x894>)
 8009252:	0018      	movs	r0, r3
 8009254:	f01d f93a 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009258:	4b6d      	ldr	r3, [pc, #436]	@ (8009410 <PC_show_Keys+0x8a8>)
 800925a:	781a      	ldrb	r2, [r3, #0]
 800925c:	4b67      	ldr	r3, [pc, #412]	@ (80093fc <PC_show_Keys+0x894>)
 800925e:	0011      	movs	r1, r2
 8009260:	0018      	movs	r0, r3
 8009262:	f7ff fc66 	bl	8008b32 <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8009266:	4b84      	ldr	r3, [pc, #528]	@ (8009478 <PC_show_Keys+0x910>)
 8009268:	4884      	ldr	r0, [pc, #528]	@ (800947c <PC_show_Keys+0x914>)
 800926a:	220c      	movs	r2, #12
 800926c:	0019      	movs	r1, r3
 800926e:	f002 ffa7 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 8009272:	4a81      	ldr	r2, [pc, #516]	@ (8009478 <PC_show_Keys+0x910>)
 8009274:	4b64      	ldr	r3, [pc, #400]	@ (8009408 <PC_show_Keys+0x8a0>)
 8009276:	0011      	movs	r1, r2
 8009278:	0018      	movs	r0, r3
 800927a:	f7fc f831 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Air pressure sensor id -: %s\r\n", hPaConfigCmd, Buffer);
 800927e:	4b62      	ldr	r3, [pc, #392]	@ (8009408 <PC_show_Keys+0x8a0>)
 8009280:	497f      	ldr	r1, [pc, #508]	@ (8009480 <PC_show_Keys+0x918>)
 8009282:	485e      	ldr	r0, [pc, #376]	@ (80093fc <PC_show_Keys+0x894>)
 8009284:	221c      	movs	r2, #28
 8009286:	f01d f921 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 800928a:	4b61      	ldr	r3, [pc, #388]	@ (8009410 <PC_show_Keys+0x8a8>)
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	4b5b      	ldr	r3, [pc, #364]	@ (80093fc <PC_show_Keys+0x894>)
 8009290:	0011      	movs	r1, r2
 8009292:	0018      	movs	r0, r3
 8009294:	f7ff fc4d 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 8009298:	4b7a      	ldr	r3, [pc, #488]	@ (8009484 <PC_show_Keys+0x91c>)
 800929a:	487b      	ldr	r0, [pc, #492]	@ (8009488 <PC_show_Keys+0x920>)
 800929c:	220c      	movs	r2, #12
 800929e:	0019      	movs	r1, r3
 80092a0:	f002 ff8e 	bl	800c1c0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 80092a4:	4a77      	ldr	r2, [pc, #476]	@ (8009484 <PC_show_Keys+0x91c>)
 80092a6:	4b58      	ldr	r3, [pc, #352]	@ (8009408 <PC_show_Keys+0x8a0>)
 80092a8:	0011      	movs	r1, r2
 80092aa:	0018      	movs	r0, r3
 80092ac:	f7fc f818 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 80092b0:	4b55      	ldr	r3, [pc, #340]	@ (8009408 <PC_show_Keys+0x8a0>)
 80092b2:	4976      	ldr	r1, [pc, #472]	@ (800948c <PC_show_Keys+0x924>)
 80092b4:	4851      	ldr	r0, [pc, #324]	@ (80093fc <PC_show_Keys+0x894>)
 80092b6:	221d      	movs	r2, #29
 80092b8:	f01d f908 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092bc:	4b54      	ldr	r3, [pc, #336]	@ (8009410 <PC_show_Keys+0x8a8>)
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	4b4e      	ldr	r3, [pc, #312]	@ (80093fc <PC_show_Keys+0x894>)
 80092c2:	0011      	movs	r1, r2
 80092c4:	0018      	movs	r0, r3
 80092c6:	f7ff fc34 	bl	8008b32 <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 80092ca:	4b71      	ldr	r3, [pc, #452]	@ (8009490 <PC_show_Keys+0x928>)
 80092cc:	4871      	ldr	r0, [pc, #452]	@ (8009494 <PC_show_Keys+0x92c>)
 80092ce:	2230      	movs	r2, #48	@ 0x30
 80092d0:	0019      	movs	r1, r3
 80092d2:	f002 ff75 	bl	800c1c0 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 80092d6:	4970      	ldr	r1, [pc, #448]	@ (8009498 <PC_show_Keys+0x930>)
 80092d8:	4b48      	ldr	r3, [pc, #288]	@ (80093fc <PC_show_Keys+0x894>)
 80092da:	221e      	movs	r2, #30
 80092dc:	0018      	movs	r0, r3
 80092de:	f01d f8f5 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009410 <PC_show_Keys+0x8a8>)
 80092e4:	781a      	ldrb	r2, [r3, #0]
 80092e6:	4b45      	ldr	r3, [pc, #276]	@ (80093fc <PC_show_Keys+0x894>)
 80092e8:	0011      	movs	r1, r2
 80092ea:	0018      	movs	r0, r3
 80092ec:	f7ff fc21 	bl	8008b32 <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 80092f0:	4b67      	ldr	r3, [pc, #412]	@ (8009490 <PC_show_Keys+0x928>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d11b      	bne.n	8009330 <PC_show_Keys+0x7c8>
    sprintf(msg, "Undefined, defaulted to ");
 80092f8:	4a68      	ldr	r2, [pc, #416]	@ (800949c <PC_show_Keys+0x934>)
 80092fa:	4b40      	ldr	r3, [pc, #256]	@ (80093fc <PC_show_Keys+0x894>)
 80092fc:	0011      	movs	r1, r2
 80092fe:	0018      	movs	r0, r3
 8009300:	f01d f8e4 	bl	80264cc <siprintf>
    PC_selectout(&msg[0], usb_out);
 8009304:	4b42      	ldr	r3, [pc, #264]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	4b3c      	ldr	r3, [pc, #240]	@ (80093fc <PC_show_Keys+0x894>)
 800930a:	0011      	movs	r1, r2
 800930c:	0018      	movs	r0, r3
 800930e:	f7ff fc10 	bl	8008b32 <PC_selectout>
    PC_selectout((char*)API, usb_out);
 8009312:	4b3f      	ldr	r3, [pc, #252]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	4b62      	ldr	r3, [pc, #392]	@ (80094a0 <PC_show_Keys+0x938>)
 8009318:	0011      	movs	r1, r2
 800931a:	0018      	movs	r0, r3
 800931c:	f7ff fc09 	bl	8008b32 <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 8009320:	4b3b      	ldr	r3, [pc, #236]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	4b5f      	ldr	r3, [pc, #380]	@ (80094a4 <PC_show_Keys+0x93c>)
 8009326:	0011      	movs	r1, r2
 8009328:	0018      	movs	r0, r3
 800932a:	f7ff fc02 	bl	8008b32 <PC_selectout>
 800932e:	e00c      	b.n	800934a <PC_show_Keys+0x7e2>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 8009330:	4a57      	ldr	r2, [pc, #348]	@ (8009490 <PC_show_Keys+0x928>)
 8009332:	494a      	ldr	r1, [pc, #296]	@ (800945c <PC_show_Keys+0x8f4>)
 8009334:	4b31      	ldr	r3, [pc, #196]	@ (80093fc <PC_show_Keys+0x894>)
 8009336:	0018      	movs	r0, r3
 8009338:	f01d f8c8 	bl	80264cc <siprintf>
    PC_selectout(&msg[0], usb_out);
 800933c:	4b34      	ldr	r3, [pc, #208]	@ (8009410 <PC_show_Keys+0x8a8>)
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	4b2e      	ldr	r3, [pc, #184]	@ (80093fc <PC_show_Keys+0x894>)
 8009342:	0011      	movs	r1, r2
 8009344:	0018      	movs	r0, r3
 8009346:	f7ff fbf4 	bl	8008b32 <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 800934a:	4957      	ldr	r1, [pc, #348]	@ (80094a8 <PC_show_Keys+0x940>)
 800934c:	4b2b      	ldr	r3, [pc, #172]	@ (80093fc <PC_show_Keys+0x894>)
 800934e:	221f      	movs	r2, #31
 8009350:	0018      	movs	r0, r3
 8009352:	f01d f8bb 	bl	80264cc <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009356:	4b2e      	ldr	r3, [pc, #184]	@ (8009410 <PC_show_Keys+0x8a8>)
 8009358:	781a      	ldrb	r2, [r3, #0]
 800935a:	4b28      	ldr	r3, [pc, #160]	@ (80093fc <PC_show_Keys+0x894>)
 800935c:	0011      	movs	r1, r2
 800935e:	0018      	movs	r0, r3
 8009360:	f7ff fbe7 	bl	8008b32 <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8009364:	4b51      	ldr	r3, [pc, #324]	@ (80094ac <PC_show_Keys+0x944>)
 8009366:	0018      	movs	r0, r3
 8009368:	f7ff fbbe 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 800936c:	200a      	movs	r0, #10
 800936e:	f00b fb1b 	bl	80149a8 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8009372:	4b4f      	ldr	r3, [pc, #316]	@ (80094b0 <PC_show_Keys+0x948>)
 8009374:	0018      	movs	r0, r3
 8009376:	f7ff fbb7 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 800937a:	200a      	movs	r0, #10
 800937c:	f00b fb14 	bl	80149a8 <HAL_Delay>
  printf_USB(" command example for air pressure => #28,6a\r\n");
 8009380:	4b4c      	ldr	r3, [pc, #304]	@ (80094b4 <PC_show_Keys+0x94c>)
 8009382:	0018      	movs	r0, r3
 8009384:	f7ff fbb0 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 8009388:	200a      	movs	r0, #10
 800938a:	f00b fb0d 	bl	80149a8 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 800938e:	4b4a      	ldr	r3, [pc, #296]	@ (80094b8 <PC_show_Keys+0x950>)
 8009390:	0018      	movs	r0, r3
 8009392:	f7ff fba9 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 8009396:	200a      	movs	r0, #10
 8009398:	f00b fb06 	bl	80149a8 <HAL_Delay>
  printf_USB(" from opensensemap.org in your account to this input.\r\n");
 800939c:	4b47      	ldr	r3, [pc, #284]	@ (80094bc <PC_show_Keys+0x954>)
 800939e:	0018      	movs	r0, r3
 80093a0:	f7ff fba2 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80093a4:	200a      	movs	r0, #10
 80093a6:	f00b faff 	bl	80149a8 <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 80093aa:	4b45      	ldr	r3, [pc, #276]	@ (80094c0 <PC_show_Keys+0x958>)
 80093ac:	0018      	movs	r0, r3
 80093ae:	f7ff fb9b 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80093b2:	200a      	movs	r0, #10
 80093b4:	f00b faf8 	bl	80149a8 <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 80093b8:	4b42      	ldr	r3, [pc, #264]	@ (80094c4 <PC_show_Keys+0x95c>)
 80093ba:	0018      	movs	r0, r3
 80093bc:	f7ff fb94 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80093c0:	200a      	movs	r0, #10
 80093c2:	f00b faf1 	bl	80149a8 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 80093c6:	4b40      	ldr	r3, [pc, #256]	@ (80094c8 <PC_show_Keys+0x960>)
 80093c8:	0018      	movs	r0, r3
 80093ca:	f7ff fb8d 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80093ce:	200a      	movs	r0, #10
 80093d0:	f00b faea 	bl	80149a8 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 80093d4:	4b3d      	ldr	r3, [pc, #244]	@ (80094cc <PC_show_Keys+0x964>)
 80093d6:	0018      	movs	r0, r3
 80093d8:	f7ff fb86 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80093dc:	200a      	movs	r0, #10
 80093de:	f00b fae3 	bl	80149a8 <HAL_Delay>
  printf_USB("To clear a string: $30,000000000000000000000000\r\n");
 80093e2:	4b3b      	ldr	r3, [pc, #236]	@ (80094d0 <PC_show_Keys+0x968>)
 80093e4:	0018      	movs	r0, r3
 80093e6:	f7ff fb7f 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80093ea:	200a      	movs	r0, #10
 80093ec:	f00b fadc 	bl	80149a8 <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 80093f0:	4b38      	ldr	r3, [pc, #224]	@ (80094d4 <PC_show_Keys+0x96c>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d071      	beq.n	80094dc <PC_show_Keys+0x974>
 80093f8:	4b37      	ldr	r3, [pc, #220]	@ (80094d8 <PC_show_Keys+0x970>)
 80093fa:	e070      	b.n	80094de <PC_show_Keys+0x976>
 80093fc:	20000b54 	.word	0x20000b54
 8009400:	20000cf8 	.word	0x20000cf8
 8009404:	080800f8 	.word	0x080800f8
 8009408:	20000ba8 	.word	0x20000ba8
 800940c:	0802b9c0 	.word	0x0802b9c0
 8009410:	20000b51 	.word	0x20000b51
 8009414:	20000d04 	.word	0x20000d04
 8009418:	08080104 	.word	0x08080104
 800941c:	0802b9f0 	.word	0x0802b9f0
 8009420:	20000d10 	.word	0x20000d10
 8009424:	080800b0 	.word	0x080800b0
 8009428:	0802ba20 	.word	0x0802ba20
 800942c:	20000d1c 	.word	0x20000d1c
 8009430:	080800bc 	.word	0x080800bc
 8009434:	0802ba50 	.word	0x0802ba50
 8009438:	20000d28 	.word	0x20000d28
 800943c:	08080170 	.word	0x08080170
 8009440:	0802ba80 	.word	0x0802ba80
 8009444:	20000d34 	.word	0x20000d34
 8009448:	0808017c 	.word	0x0808017c
 800944c:	0802bab0 	.word	0x0802bab0
 8009450:	20000d40 	.word	0x20000d40
 8009454:	08080260 	.word	0x08080260
 8009458:	0802bae0 	.word	0x0802bae0
 800945c:	0802b8a0 	.word	0x0802b8a0
 8009460:	20000d70 	.word	0x20000d70
 8009464:	08080290 	.word	0x08080290
 8009468:	0802bb0c 	.word	0x0802bb0c
 800946c:	20000da0 	.word	0x20000da0
 8009470:	080802c0 	.word	0x080802c0
 8009474:	0802bb38 	.word	0x0802bb38
 8009478:	20000dd0 	.word	0x20000dd0
 800947c:	08080188 	.word	0x08080188
 8009480:	0802bb64 	.word	0x0802bb64
 8009484:	20000ddc 	.word	0x20000ddc
 8009488:	080801a0 	.word	0x080801a0
 800948c:	0802bb94 	.word	0x0802bb94
 8009490:	20000de8 	.word	0x20000de8
 8009494:	08080110 	.word	0x08080110
 8009498:	0802bbc4 	.word	0x0802bbc4
 800949c:	0802bbf0 	.word	0x0802bbf0
 80094a0:	0802bc0c 	.word	0x0802bc0c
 80094a4:	0802bc30 	.word	0x0802bc30
 80094a8:	0802bc34 	.word	0x0802bc34
 80094ac:	0802bc60 	.word	0x0802bc60
 80094b0:	0802bc78 	.word	0x0802bc78
 80094b4:	0802bca4 	.word	0x0802bca4
 80094b8:	0802bcd4 	.word	0x0802bcd4
 80094bc:	0802bd10 	.word	0x0802bd10
 80094c0:	0802bd48 	.word	0x0802bd48
 80094c4:	0802bd7c 	.word	0x0802bd7c
 80094c8:	0802bd9c 	.word	0x0802bd9c
 80094cc:	0802bdd0 	.word	0x0802bdd0
 80094d0:	0802bdf4 	.word	0x0802bdf4
 80094d4:	200010f7 	.word	0x200010f7
 80094d8:	0802be28 	.word	0x0802be28
 80094dc:	4b12      	ldr	r3, [pc, #72]	@ (8009528 <PC_show_Keys+0x9c0>)
 80094de:	4a13      	ldr	r2, [pc, #76]	@ (800952c <PC_show_Keys+0x9c4>)
 80094e0:	0019      	movs	r1, r3
 80094e2:	0010      	movs	r0, r2
 80094e4:	f7ff fb00 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80094e8:	200a      	movs	r0, #10
 80094ea:	f00b fa5d 	bl	80149a8 <HAL_Delay>
  printf_USB("B - show build information\r\n");
 80094ee:	4b10      	ldr	r3, [pc, #64]	@ (8009530 <PC_show_Keys+0x9c8>)
 80094f0:	0018      	movs	r0, r3
 80094f2:	f7ff faf9 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 80094f6:	200a      	movs	r0, #10
 80094f8:	f00b fa56 	bl	80149a8 <HAL_Delay>
  printf_USB("E31, - Erase configuration memory\r\n");
 80094fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009534 <PC_show_Keys+0x9cc>)
 80094fe:	0018      	movs	r0, r3
 8009500:	f7ff faf2 	bl	8008ae8 <printf_USB>
  HAL_Delay(10);
 8009504:	200a      	movs	r0, #10
 8009506:	f00b fa4f 	bl	80149a8 <HAL_Delay>
  if (!usb_out) {
 800950a:	4b0b      	ldr	r3, [pc, #44]	@ (8009538 <PC_show_Keys+0x9d0>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2201      	movs	r2, #1
 8009510:	4053      	eors	r3, r2
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <PC_show_Keys+0x9b8>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 8009518:	4b08      	ldr	r3, [pc, #32]	@ (800953c <PC_show_Keys+0x9d4>)
 800951a:	0018      	movs	r0, r3
 800951c:	f01c ffcc 	bl	80264b8 <puts>
  }
}
 8009520:	46c0      	nop			@ (mov r8, r8)
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	46c0      	nop			@ (mov r8, r8)
 8009528:	0802be2c 	.word	0x0802be2c
 800952c:	0802be30 	.word	0x0802be30
 8009530:	0802be5c 	.word	0x0802be5c
 8009534:	0802be7c 	.word	0x0802be7c
 8009538:	20000b51 	.word	0x20000b51
 800953c:	0802bea0 	.word	0x0802bea0

08009540 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	4b20      	ldr	r3, [pc, #128]	@ (80095d0 <ascii_to_uint8+0x90>)
 8009550:	18d3      	adds	r3, r2, r3
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	001a      	movs	r2, r3
 8009556:	2304      	movs	r3, #4
 8009558:	4013      	ands	r3, r2
 800955a:	d00a      	beq.n	8009572 <ascii_to_uint8+0x32>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3301      	adds	r3, #1
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	4b1a      	ldr	r3, [pc, #104]	@ (80095d0 <ascii_to_uint8+0x90>)
 8009566:	18d3      	adds	r3, r2, r3
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	001a      	movs	r2, r3
 800956c:	2304      	movs	r3, #4
 800956e:	4013      	ands	r3, r2
 8009570:	d105      	bne.n	800957e <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8009572:	4b18      	ldr	r3, [pc, #96]	@ (80095d4 <ascii_to_uint8+0x94>)
 8009574:	0018      	movs	r0, r3
 8009576:	f7ff fab7 	bl	8008ae8 <printf_USB>
    return 100;
 800957a:	2364      	movs	r3, #100	@ 0x64
 800957c:	e024      	b.n	80095c8 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	1c1a      	adds	r2, r3, #0
 8009584:	0092      	lsls	r2, r2, #2
 8009586:	18d3      	adds	r3, r2, r3
 8009588:	18db      	adds	r3, r3, r3
 800958a:	b2da      	uxtb	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3301      	adds	r3, #1
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	18d3      	adds	r3, r2, r3
 8009594:	b2da      	uxtb	r2, r3
 8009596:	210f      	movs	r1, #15
 8009598:	187b      	adds	r3, r7, r1
 800959a:	3a10      	subs	r2, #16
 800959c:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 800959e:	187b      	adds	r3, r7, r1
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b1f      	cmp	r3, #31
 80095a4:	d905      	bls.n	80095b2 <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 80095a6:	4b0c      	ldr	r3, [pc, #48]	@ (80095d8 <ascii_to_uint8+0x98>)
 80095a8:	0018      	movs	r0, r3
 80095aa:	f7ff fa9d 	bl	8008ae8 <printf_USB>
    return 100;
 80095ae:	2364      	movs	r3, #100	@ 0x64
 80095b0:	e00a      	b.n	80095c8 <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 80095b2:	220f      	movs	r2, #15
 80095b4:	18bb      	adds	r3, r7, r2
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b1f      	cmp	r3, #31
 80095ba:	d102      	bne.n	80095c2 <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 80095bc:	18bb      	adds	r3, r7, r2
 80095be:	22fd      	movs	r2, #253	@ 0xfd
 80095c0:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 80095c2:	230f      	movs	r3, #15
 80095c4:	18fb      	adds	r3, r7, r3
 80095c6:	781b      	ldrb	r3, [r3, #0]
}
 80095c8:	0018      	movs	r0, r3
 80095ca:	46bd      	mov	sp, r7
 80095cc:	b004      	add	sp, #16
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	0802efd8 	.word	0x0802efd8
 80095d4:	0802bef4 	.word	0x0802bef4
 80095d8:	0802bf1c 	.word	0x0802bf1c

080095dc <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b0d9      	sub	sp, #356	@ 0x164
 80095e0:	af3e      	add	r7, sp, #248	@ 0xf8
 80095e2:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 80095e4:	f019 feb4 	bl	8023350 <GetUsbRxDataSize>
 80095e8:	0003      	movs	r3, r0
 80095ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 80095ec:	2367      	movs	r3, #103	@ 0x67
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 80095f4:	2366      	movs	r3, #102	@ 0x66
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2124      	movs	r1, #36	@ 0x24
 8009600:	0018      	movs	r0, r3
 8009602:	f01d f8b3 	bl	802676c <strchr>
 8009606:	0003      	movs	r3, r0
 8009608:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 800960a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800960c:	2b01      	cmp	r3, #1
 800960e:	d110      	bne.n	8009632 <Process_USB_input+0x56>
 8009610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00d      	beq.n	8009632 <Process_USB_input+0x56>
 8009616:	4bd9      	ldr	r3, [pc, #868]	@ (800997c <Process_USB_input+0x3a0>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b1c      	cmp	r3, #28
 800961c:	d009      	beq.n	8009632 <Process_USB_input+0x56>
      len = 28;
 800961e:	4bd7      	ldr	r3, [pc, #860]	@ (800997c <Process_USB_input+0x3a0>)
 8009620:	221c      	movs	r2, #28
 8009622:	601a      	str	r2, [r3, #0]
      printf_USB("len = %", len);
 8009624:	4bd5      	ldr	r3, [pc, #852]	@ (800997c <Process_USB_input+0x3a0>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	4bd5      	ldr	r3, [pc, #852]	@ (8009980 <Process_USB_input+0x3a4>)
 800962a:	0011      	movs	r1, r2
 800962c:	0018      	movs	r0, r3
 800962e:	f7ff fa5b 	bl	8008ae8 <printf_USB>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2153      	movs	r1, #83	@ 0x53
 8009636:	0018      	movs	r0, r3
 8009638:	f01d f898 	bl	802676c <strchr>
 800963c:	0003      	movs	r3, r0
 800963e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 8009640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009642:	2b01      	cmp	r3, #1
 8009644:	d110      	bne.n	8009668 <Process_USB_input+0x8c>
 8009646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00d      	beq.n	8009668 <Process_USB_input+0x8c>
 800964c:	4bcb      	ldr	r3, [pc, #812]	@ (800997c <Process_USB_input+0x3a0>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b40      	cmp	r3, #64	@ 0x40
 8009652:	d009      	beq.n	8009668 <Process_USB_input+0x8c>
      len = pwdMaxLength;
 8009654:	4bc9      	ldr	r3, [pc, #804]	@ (800997c <Process_USB_input+0x3a0>)
 8009656:	2240      	movs	r2, #64	@ 0x40
 8009658:	601a      	str	r2, [r3, #0]
      printf_USB("len = %", len);
 800965a:	4bc8      	ldr	r3, [pc, #800]	@ (800997c <Process_USB_input+0x3a0>)
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	4bc8      	ldr	r3, [pc, #800]	@ (8009980 <Process_USB_input+0x3a4>)
 8009660:	0011      	movs	r1, r2
 8009662:	0018      	movs	r0, r3
 8009664:	f7ff fa40 	bl	8008ae8 <printf_USB>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'L'to toggle USB logging
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	214c      	movs	r1, #76	@ 0x4c
 800966c:	0018      	movs	r0, r3
 800966e:	f01d f87d 	bl	802676c <strchr>
 8009672:	0003      	movs	r3, r0
 8009674:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d131      	bne.n	80096e0 <Process_USB_input+0x104>
 800967c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800967e:	2b00      	cmp	r3, #0
 8009680:	d02e      	beq.n	80096e0 <Process_USB_input+0x104>
    usblog = !usblog; // log info to usb too
 8009682:	4bc0      	ldr	r3, [pc, #768]	@ (8009984 <Process_USB_input+0x3a8>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	1e5a      	subs	r2, r3, #1
 8009688:	4193      	sbcs	r3, r2
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2201      	movs	r2, #1
 800968e:	4053      	eors	r3, r2
 8009690:	b2db      	uxtb	r3, r3
 8009692:	1c1a      	adds	r2, r3, #0
 8009694:	2301      	movs	r3, #1
 8009696:	4013      	ands	r3, r2
 8009698:	b2da      	uxtb	r2, r3
 800969a:	4bba      	ldr	r3, [pc, #744]	@ (8009984 <Process_USB_input+0x3a8>)
 800969c:	701a      	strb	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800969e:	f00c f985 	bl	80159ac <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, USBlogstatusConfigAddr, usblog);
 80096a2:	4bb8      	ldr	r3, [pc, #736]	@ (8009984 <Process_USB_input+0x3a8>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	001a      	movs	r2, r3
 80096a8:	4bb7      	ldr	r3, [pc, #732]	@ (8009988 <Process_USB_input+0x3ac>)
 80096aa:	0019      	movs	r1, r3
 80096ac:	2000      	movs	r0, #0
 80096ae:	f00c f9e5 	bl	8015a7c <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 80096b2:	f00c f9a9 	bl	8015a08 <HAL_FLASHEx_DATAEEPROM_Lock>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 80096b6:	4bb3      	ldr	r3, [pc, #716]	@ (8009984 <Process_USB_input+0x3a8>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <Process_USB_input+0xe6>
 80096be:	4bb3      	ldr	r3, [pc, #716]	@ (800998c <Process_USB_input+0x3b0>)
 80096c0:	e000      	b.n	80096c4 <Process_USB_input+0xe8>
 80096c2:	4bb3      	ldr	r3, [pc, #716]	@ (8009990 <Process_USB_input+0x3b4>)
 80096c4:	4ab3      	ldr	r2, [pc, #716]	@ (8009994 <Process_USB_input+0x3b8>)
 80096c6:	0019      	movs	r1, r3
 80096c8:	0010      	movs	r0, r2
 80096ca:	f7ff fa0d 	bl	8008ae8 <printf_USB>
    length = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 80096d8:	f019 fe22 	bl	8023320 <ResetUsbRxDataSize>
    return true;
 80096dc:	2301      	movs	r3, #1
 80096de:	e232      	b.n	8009b46 <Process_USB_input+0x56a>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2142      	movs	r1, #66	@ 0x42
 80096e4:	0018      	movs	r0, r3
 80096e6:	f01d f841 	bl	802676c <strchr>
 80096ea:	0003      	movs	r3, r0
 80096ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 80096ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d10f      	bne.n	8009714 <Process_USB_input+0x138>
 80096f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00c      	beq.n	8009714 <Process_USB_input+0x138>
    BinaryReleaseInfo();
 80096fa:	f00a fc5f 	bl	8013fbc <BinaryReleaseInfo>
    showUpTime();
 80096fe:	f000 fbb7 	bl	8009e70 <showUpTime>
    length = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 800970c:	f019 fe08 	bl	8023320 <ResetUsbRxDataSize>
    return true;
 8009710:	2301      	movs	r3, #1
 8009712:	e218      	b.n	8009b46 <Process_USB_input+0x56a>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 8009714:	4b99      	ldr	r3, [pc, #612]	@ (800997c <Process_USB_input+0x3a0>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800971a:	429a      	cmp	r2, r3
 800971c:	d207      	bcs.n	800972e <Process_USB_input+0x152>
 800971e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009720:	3b01      	subs	r3, #1
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	18d3      	adds	r3, r2, r3
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b0d      	cmp	r3, #13
 800972a:	d000      	beq.n	800972e <Process_USB_input+0x152>
 800972c:	e1f8      	b.n	8009b20 <Process_USB_input+0x544>
    // 'S' is for entering a ASCII string
    if (data[length-1] == 13) {
 800972e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009730:	3b01      	subs	r3, #1
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	18d3      	adds	r3, r2, r3
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b0d      	cmp	r3, #13
 800973a:	d109      	bne.n	8009750 <Process_USB_input+0x174>
      printf_USB("Inputstring detected, string terminated\r\n");
 800973c:	4b96      	ldr	r3, [pc, #600]	@ (8009998 <Process_USB_input+0x3bc>)
 800973e:	0018      	movs	r0, r3
 8009740:	f7ff f9d2 	bl	8008ae8 <printf_USB>
      data[length-1] = 0;
 8009744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009746:	3b01      	subs	r3, #1
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	18d3      	adds	r3, r2, r3
 800974c:	2200      	movs	r2, #0
 800974e:	701a      	strb	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b23      	cmp	r3, #35	@ 0x23
 8009756:	d00c      	beq.n	8009772 <Process_USB_input+0x196>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b24      	cmp	r3, #36	@ 0x24
 800975e:	d008      	beq.n	8009772 <Process_USB_input+0x196>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b53      	cmp	r3, #83	@ 0x53
 8009766:	d004      	beq.n	8009772 <Process_USB_input+0x196>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b45      	cmp	r3, #69	@ 0x45
 800976e:	d000      	beq.n	8009772 <Process_USB_input+0x196>
 8009770:	e1b8      	b.n	8009ae4 <Process_USB_input+0x508>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3301      	adds	r3, #1
 8009776:	0018      	movs	r0, r3
 8009778:	f7ff fee2 	bl	8009540 <ascii_to_uint8>
 800977c:	0003      	movs	r3, r0
 800977e:	001a      	movs	r2, r3
 8009780:	4b86      	ldr	r3, [pc, #536]	@ (800999c <Process_USB_input+0x3c0>)
 8009782:	701a      	strb	r2, [r3, #0]
      printf_USB("Command nr determined: %d", received.Command);
 8009784:	4b85      	ldr	r3, [pc, #532]	@ (800999c <Process_USB_input+0x3c0>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	001a      	movs	r2, r3
 800978a:	4b85      	ldr	r3, [pc, #532]	@ (80099a0 <Process_USB_input+0x3c4>)
 800978c:	0011      	movs	r1, r2
 800978e:	0018      	movs	r0, r3
 8009790:	f7ff f9aa 	bl	8008ae8 <printf_USB>
      if (received.Command == 100) {
 8009794:	4b81      	ldr	r3, [pc, #516]	@ (800999c <Process_USB_input+0x3c0>)
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b64      	cmp	r3, #100	@ 0x64
 800979a:	d11f      	bne.n	80097dc <Process_USB_input+0x200>
        printf_USB("\r\nCommandvalue out of range.\r\n");
 800979c:	4b81      	ldr	r3, [pc, #516]	@ (80099a4 <Process_USB_input+0x3c8>)
 800979e:	0018      	movs	r0, r3
 80097a0:	f7ff f9a2 	bl	8008ae8 <printf_USB>
        ResetUsbRxDataSize();
 80097a4:	f019 fdbc 	bl	8023320 <ResetUsbRxDataSize>
        PC_show_Keys();
 80097a8:	f7ff f9de 	bl	8008b68 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 80097ac:	2365      	movs	r3, #101	@ 0x65
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	2200      	movs	r2, #0
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e00b      	b.n	80097ce <Process_USB_input+0x1f2>
          data[i] = '\0';
 80097b6:	2165      	movs	r1, #101	@ 0x65
 80097b8:	187b      	adds	r3, r7, r1
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	18d3      	adds	r3, r2, r3
 80097c0:	2200      	movs	r2, #0
 80097c2:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 80097c4:	187b      	adds	r3, r7, r1
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	187b      	adds	r3, r7, r1
 80097ca:	3201      	adds	r2, #1
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	2365      	movs	r3, #101	@ 0x65
 80097d0:	18fb      	adds	r3, r7, r3
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b1f      	cmp	r3, #31
 80097d6:	d9ee      	bls.n	80097b6 <Process_USB_input+0x1da>
        }
        return false; // value out of range
 80097d8:	2300      	movs	r3, #0
 80097da:	e1b4      	b.n	8009b46 <Process_USB_input+0x56a>
      }
      if (data[3] == ',') {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3303      	adds	r3, #3
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	2b2c      	cmp	r3, #44	@ 0x2c
 80097e4:	d000      	beq.n	80097e8 <Process_USB_input+0x20c>
 80097e6:	e179      	b.n	8009adc <Process_USB_input+0x500>
        if ((data[0] == 'S') || (data[0] == 'E')) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b53      	cmp	r3, #83	@ 0x53
 80097ee:	d003      	beq.n	80097f8 <Process_USB_input+0x21c>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b45      	cmp	r3, #69	@ 0x45
 80097f6:	d10e      	bne.n	8009816 <Process_USB_input+0x23a>
          if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b45      	cmp	r3, #69	@ 0x45
 80097fe:	d10a      	bne.n	8009816 <Process_USB_input+0x23a>
 8009800:	4b66      	ldr	r3, [pc, #408]	@ (800999c <Process_USB_input+0x3c0>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b1f      	cmp	r3, #31
 8009806:	d106      	bne.n	8009816 <Process_USB_input+0x23a>
            printf_USB("\r\nClear EEPROM request\r\n");
 8009808:	4b67      	ldr	r3, [pc, #412]	@ (80099a8 <Process_USB_input+0x3cc>)
 800980a:	0018      	movs	r0, r3
 800980c:	f7ff f96c 	bl	8008ae8 <printf_USB>
            received.Command = ClearConfigCmd;
 8009810:	4b62      	ldr	r3, [pc, #392]	@ (800999c <Process_USB_input+0x3c0>)
 8009812:	22fd      	movs	r2, #253	@ 0xfd
 8009814:	701a      	strb	r2, [r3, #0]
          }
        }
        if ((data[0] == '$') || (data[0] == '#')) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b24      	cmp	r3, #36	@ 0x24
 800981c:	d004      	beq.n	8009828 <Process_USB_input+0x24c>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b23      	cmp	r3, #35	@ 0x23
 8009824:	d000      	beq.n	8009828 <Process_USB_input+0x24c>
 8009826:	e0d9      	b.n	80099dc <Process_USB_input+0x400>
          for (i=4; i < len; i++) {
 8009828:	2366      	movs	r3, #102	@ 0x66
 800982a:	18fb      	adds	r3, r7, r3
 800982c:	2204      	movs	r2, #4
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e0cc      	b.n	80099cc <Process_USB_input+0x3f0>
            HAL_Delay(10);
 8009832:	200a      	movs	r0, #10
 8009834:	f00b f8b8 	bl	80149a8 <HAL_Delay>
            if (isxdigit(data[i])) {
 8009838:	2166      	movs	r1, #102	@ 0x66
 800983a:	187b      	adds	r3, r7, r1
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	18d3      	adds	r3, r2, r3
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	4b59      	ldr	r3, [pc, #356]	@ (80099ac <Process_USB_input+0x3d0>)
 8009848:	18d3      	adds	r3, r2, r3
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	001a      	movs	r2, r3
 800984e:	2344      	movs	r3, #68	@ 0x44
 8009850:	4013      	ands	r3, r2
 8009852:	d070      	beq.n	8009936 <Process_USB_input+0x35a>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8009854:	4b56      	ldr	r3, [pc, #344]	@ (80099b0 <Process_USB_input+0x3d4>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	b25b      	sxtb	r3, r3
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	b25a      	sxtb	r2, r3
 800985e:	0008      	movs	r0, r1
 8009860:	187b      	adds	r3, r7, r1
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	18cb      	adds	r3, r1, r3
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	1c59      	adds	r1, r3, #1
 800986c:	4b4f      	ldr	r3, [pc, #316]	@ (80099ac <Process_USB_input+0x3d0>)
 800986e:	18cb      	adds	r3, r1, r3
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	0019      	movs	r1, r3
 8009874:	2304      	movs	r3, #4
 8009876:	400b      	ands	r3, r1
 8009878:	d008      	beq.n	800988c <Process_USB_input+0x2b0>
 800987a:	183b      	adds	r3, r7, r0
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	18cb      	adds	r3, r1, r3
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	3b30      	subs	r3, #48	@ 0x30
 8009886:	b2db      	uxtb	r3, r3
 8009888:	b25b      	sxtb	r3, r3
 800988a:	e01e      	b.n	80098ca <Process_USB_input+0x2ee>
 800988c:	2366      	movs	r3, #102	@ 0x66
 800988e:	18fb      	adds	r3, r7, r3
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	18c9      	adds	r1, r1, r3
 8009896:	2056      	movs	r0, #86	@ 0x56
 8009898:	183b      	adds	r3, r7, r0
 800989a:	7809      	ldrb	r1, [r1, #0]
 800989c:	7019      	strb	r1, [r3, #0]
 800989e:	183b      	adds	r3, r7, r0
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	1c59      	adds	r1, r3, #1
 80098a4:	4b41      	ldr	r3, [pc, #260]	@ (80099ac <Process_USB_input+0x3d0>)
 80098a6:	18cb      	adds	r3, r1, r3
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	0019      	movs	r1, r3
 80098ac:	2303      	movs	r3, #3
 80098ae:	400b      	ands	r3, r1
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d103      	bne.n	80098bc <Process_USB_input+0x2e0>
 80098b4:	183b      	adds	r3, r7, r0
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	3b20      	subs	r3, #32
 80098ba:	e002      	b.n	80098c2 <Process_USB_input+0x2e6>
 80098bc:	2356      	movs	r3, #86	@ 0x56
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	3b37      	subs	r3, #55	@ 0x37
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	b25b      	sxtb	r3, r3
 80098ca:	4313      	orrs	r3, r2
 80098cc:	b25b      	sxtb	r3, r3
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	4b37      	ldr	r3, [pc, #220]	@ (80099b0 <Process_USB_input+0x3d4>)
 80098d2:	701a      	strb	r2, [r3, #0]
              printf_USB("Result is 0x%02X\r\n", result);
 80098d4:	4b36      	ldr	r3, [pc, #216]	@ (80099b0 <Process_USB_input+0x3d4>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	001a      	movs	r2, r3
 80098da:	4b36      	ldr	r3, [pc, #216]	@ (80099b4 <Process_USB_input+0x3d8>)
 80098dc:	0011      	movs	r1, r2
 80098de:	0018      	movs	r0, r3
 80098e0:	f7ff f902 	bl	8008ae8 <printf_USB>
              HAL_Delay(10);
 80098e4:	200a      	movs	r0, #10
 80098e6:	f00b f85f 	bl	80149a8 <HAL_Delay>
              if (len == 28) {
 80098ea:	4b24      	ldr	r3, [pc, #144]	@ (800997c <Process_USB_input+0x3a0>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b1c      	cmp	r3, #28
 80098f0:	d166      	bne.n	80099c0 <Process_USB_input+0x3e4>
                if ((i % 2) == 1) {
 80098f2:	2366      	movs	r3, #102	@ 0x66
 80098f4:	18fb      	adds	r3, r7, r3
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2201      	movs	r2, #1
 80098fa:	4013      	ands	r3, r2
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d05e      	beq.n	80099c0 <Process_USB_input+0x3e4>
                  data[r] = result;
 8009902:	2467      	movs	r4, #103	@ 0x67
 8009904:	193b      	adds	r3, r7, r4
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	18d3      	adds	r3, r2, r3
 800990c:	4a28      	ldr	r2, [pc, #160]	@ (80099b0 <Process_USB_input+0x3d4>)
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	701a      	strb	r2, [r3, #0]
                  printf_USB("data[%d] = 0x%02X",r, data[r]);
 8009912:	193b      	adds	r3, r7, r4
 8009914:	7819      	ldrb	r1, [r3, #0]
 8009916:	193b      	adds	r3, r7, r4
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	18d3      	adds	r3, r2, r3
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	001a      	movs	r2, r3
 8009922:	4b25      	ldr	r3, [pc, #148]	@ (80099b8 <Process_USB_input+0x3dc>)
 8009924:	0018      	movs	r0, r3
 8009926:	f7ff f8df 	bl	8008ae8 <printf_USB>
                  r++;
 800992a:	193b      	adds	r3, r7, r4
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	193b      	adds	r3, r7, r4
 8009930:	3201      	adds	r2, #1
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e044      	b.n	80099c0 <Process_USB_input+0x3e4>
                }
              }
            }
            else {
              printf_USB("\r\nInvalid hexadecimal character: '%c at position %d\r\n", data[i], i);
 8009936:	2066      	movs	r0, #102	@ 0x66
 8009938:	183b      	adds	r3, r7, r0
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	18d3      	adds	r3, r2, r3
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	0019      	movs	r1, r3
 8009944:	183b      	adds	r3, r7, r0
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	4b1c      	ldr	r3, [pc, #112]	@ (80099bc <Process_USB_input+0x3e0>)
 800994a:	0018      	movs	r0, r3
 800994c:	f7ff f8cc 	bl	8008ae8 <printf_USB>
              ResetUsbRxDataSize();
 8009950:	f019 fce6 	bl	8023320 <ResetUsbRxDataSize>
              PC_show_Keys();
 8009954:	f7ff f908 	bl	8008b68 <PC_show_Keys>
              for (uint8_t i=0; i < length; i++) {
 8009958:	2157      	movs	r1, #87	@ 0x57
 800995a:	187b      	adds	r3, r7, r1
 800995c:	2200      	movs	r2, #0
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	46c0      	nop			@ (mov r8, r8)
 8009962:	187b      	adds	r3, r7, r1
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009968:	429a      	cmp	r2, r3
 800996a:	d929      	bls.n	80099c0 <Process_USB_input+0x3e4>
                data[i] = '\0';
 800996c:	187b      	adds	r3, r7, r1
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	18d3      	adds	r3, r2, r3
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
                return false; // Of een andere foutwaarde
 8009978:	2300      	movs	r3, #0
 800997a:	e0e4      	b.n	8009b46 <Process_USB_input+0x56a>
 800997c:	20000038 	.word	0x20000038
 8009980:	0802bf38 	.word	0x0802bf38
 8009984:	200010f7 	.word	0x200010f7
 8009988:	08080194 	.word	0x08080194
 800998c:	0802be28 	.word	0x0802be28
 8009990:	0802be2c 	.word	0x0802be2c
 8009994:	0802bf40 	.word	0x0802bf40
 8009998:	0802bf60 	.word	0x0802bf60
 800999c:	20000940 	.word	0x20000940
 80099a0:	0802bf8c 	.word	0x0802bf8c
 80099a4:	0802bfa8 	.word	0x0802bfa8
 80099a8:	0802bfc8 	.word	0x0802bfc8
 80099ac:	0802efd8 	.word	0x0802efd8
 80099b0:	20000a44 	.word	0x20000a44
 80099b4:	0802bfe4 	.word	0x0802bfe4
 80099b8:	0802bff8 	.word	0x0802bff8
 80099bc:	0802c00c 	.word	0x0802c00c
          for (i=4; i < len; i++) {
 80099c0:	2166      	movs	r1, #102	@ 0x66
 80099c2:	187b      	adds	r3, r7, r1
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	187b      	adds	r3, r7, r1
 80099c8:	3201      	adds	r2, #1
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	2366      	movs	r3, #102	@ 0x66
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	4b5f      	ldr	r3, [pc, #380]	@ (8009b50 <Process_USB_input+0x574>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d200      	bcs.n	80099dc <Process_USB_input+0x400>
 80099da:	e72a      	b.n	8009832 <Process_USB_input+0x256>
              }
            }
          }  // end for
//          printf_USB("\r\n");
        }
        if (len < pwdMaxLength) {
 80099dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009b50 <Process_USB_input+0x574>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80099e2:	d82c      	bhi.n	8009a3e <Process_USB_input+0x462>
          if (len == 6) {
 80099e4:	4b5a      	ldr	r3, [pc, #360]	@ (8009b50 <Process_USB_input+0x574>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b06      	cmp	r3, #6
 80099ea:	d11b      	bne.n	8009a24 <Process_USB_input+0x448>
            printf_USB("len = %, overwriting last byte", len);
 80099ec:	4b58      	ldr	r3, [pc, #352]	@ (8009b50 <Process_USB_input+0x574>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	4b58      	ldr	r3, [pc, #352]	@ (8009b54 <Process_USB_input+0x578>)
 80099f2:	0011      	movs	r1, r2
 80099f4:	0018      	movs	r0, r3
 80099f6:	f7ff f877 	bl	8008ae8 <printf_USB>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80099fa:	2448      	movs	r4, #72	@ 0x48
 80099fc:	193b      	adds	r3, r7, r4
 80099fe:	4856      	ldr	r0, [pc, #344]	@ (8009b58 <Process_USB_input+0x57c>)
 8009a00:	220c      	movs	r2, #12
 8009a02:	0019      	movs	r1, r3
 8009a04:	f002 fbdc 	bl	800c1c0 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 8009a08:	4b54      	ldr	r3, [pc, #336]	@ (8009b5c <Process_USB_input+0x580>)
 8009a0a:	781a      	ldrb	r2, [r3, #0]
 8009a0c:	0021      	movs	r1, r4
 8009a0e:	187b      	adds	r3, r7, r1
 8009a10:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 8009a12:	4b53      	ldr	r3, [pc, #332]	@ (8009b60 <Process_USB_input+0x584>)
 8009a14:	2202      	movs	r2, #2
 8009a16:	1879      	adds	r1, r7, r1
 8009a18:	189b      	adds	r3, r3, r2
 8009a1a:	220c      	movs	r2, #12
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f01c ff79 	bl	8026914 <memcpy>
 8009a22:	e005      	b.n	8009a30 <Process_USB_input+0x454>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 8009a24:	6879      	ldr	r1, [r7, #4]
 8009a26:	4b4f      	ldr	r3, [pc, #316]	@ (8009b64 <Process_USB_input+0x588>)
 8009a28:	220c      	movs	r2, #12
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f01c ff72 	bl	8026914 <memcpy>
          }
          received.Payload[12] = '\0';
 8009a30:	4b4b      	ldr	r3, [pc, #300]	@ (8009b60 <Process_USB_input+0x584>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 8009a36:	4b4a      	ldr	r3, [pc, #296]	@ (8009b60 <Process_USB_input+0x584>)
 8009a38:	220c      	movs	r2, #12
 8009a3a:	705a      	strb	r2, [r3, #1]
 8009a3c:	e005      	b.n	8009a4a <Process_USB_input+0x46e>
        }
        else {
          received.PayloadLength = length-4;  // The string terminator counts
 8009a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	3b04      	subs	r3, #4
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	4b46      	ldr	r3, [pc, #280]	@ (8009b60 <Process_USB_input+0x584>)
 8009a48:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 8009a4a:	4b41      	ldr	r3, [pc, #260]	@ (8009b50 <Process_USB_input+0x574>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009a50:	d80b      	bhi.n	8009a6a <Process_USB_input+0x48e>
 8009a52:	4b3f      	ldr	r3, [pc, #252]	@ (8009b50 <Process_USB_input+0x574>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b06      	cmp	r3, #6
 8009a58:	d007      	beq.n	8009a6a <Process_USB_input+0x48e>
          uint8ArrayToString(Buffer, received.Payload);
 8009a5a:	4a42      	ldr	r2, [pc, #264]	@ (8009b64 <Process_USB_input+0x588>)
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	18fb      	adds	r3, r7, r3
 8009a60:	0011      	movs	r1, r2
 8009a62:	0018      	movs	r0, r3
 8009a64:	f7fb fc3c 	bl	80052e0 <uint8ArrayToString>
 8009a68:	e00c      	b.n	8009a84 <Process_USB_input+0x4a8>
        }
        else if (len == pwdMaxLength) {
 8009a6a:	4b39      	ldr	r3, [pc, #228]	@ (8009b50 <Process_USB_input+0x574>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b40      	cmp	r3, #64	@ 0x40
 8009a70:	d108      	bne.n	8009a84 <Process_USB_input+0x4a8>
          memcpy(received.Payload, &data[4], received.PayloadLength);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	1d19      	adds	r1, r3, #4
 8009a76:	4b3a      	ldr	r3, [pc, #232]	@ (8009b60 <Process_USB_input+0x584>)
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	001a      	movs	r2, r3
 8009a7c:	4b39      	ldr	r3, [pc, #228]	@ (8009b64 <Process_USB_input+0x588>)
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f01c ff48 	bl	8026914 <memcpy>
        }
        ProcessCmd(received);
 8009a84:	4c36      	ldr	r4, [pc, #216]	@ (8009b60 <Process_USB_input+0x584>)
 8009a86:	466b      	mov	r3, sp
 8009a88:	0018      	movs	r0, r3
 8009a8a:	0023      	movs	r3, r4
 8009a8c:	3310      	adds	r3, #16
 8009a8e:	22f4      	movs	r2, #244	@ 0xf4
 8009a90:	0019      	movs	r1, r3
 8009a92:	f01c ff3f 	bl	8026914 <memcpy>
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	6861      	ldr	r1, [r4, #4]
 8009a9a:	68a2      	ldr	r2, [r4, #8]
 8009a9c:	68e3      	ldr	r3, [r4, #12]
 8009a9e:	f7fe fd47 	bl	8008530 <ProcessCmd>
        ResetUsbRxDataSize();
 8009aa2:	f019 fc3d 	bl	8023320 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009aa6:	f7ff f85f 	bl	8008b68 <PC_show_Keys>
        for (uint8_t i=0; i < length; i++) {
 8009aaa:	2364      	movs	r3, #100	@ 0x64
 8009aac:	18fb      	adds	r3, r7, r3
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
 8009ab2:	e00b      	b.n	8009acc <Process_USB_input+0x4f0>
          data[i] = '\0';
 8009ab4:	2164      	movs	r1, #100	@ 0x64
 8009ab6:	187b      	adds	r3, r7, r1
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	18d3      	adds	r3, r2, r3
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < length; i++) {
 8009ac2:	187b      	adds	r3, r7, r1
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	187b      	adds	r3, r7, r1
 8009ac8:	3201      	adds	r2, #1
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	2364      	movs	r3, #100	@ 0x64
 8009ace:	18fb      	adds	r3, r7, r3
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d8ed      	bhi.n	8009ab4 <Process_USB_input+0x4d8>
        }
        return true;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e034      	b.n	8009b46 <Process_USB_input+0x56a>
      }
      else {
        printf_USB("\r\nInvalid input; comma not found\r\n");
 8009adc:	4b22      	ldr	r3, [pc, #136]	@ (8009b68 <Process_USB_input+0x58c>)
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f7ff f802 	bl	8008ae8 <printf_USB>
//        for (uint8_t i=0; i < length; i++) {
//          data[i] = '\0';
//        }
      }
    }
    PC_show_Keys();
 8009ae4:	f7ff f840 	bl	8008b68 <PC_show_Keys>
    ResetUsbRxDataSize();
 8009ae8:	f019 fc1a 	bl	8023320 <ResetUsbRxDataSize>
    for (uint8_t i=0; i < length; i++) {
 8009aec:	2363      	movs	r3, #99	@ 0x63
 8009aee:	18fb      	adds	r3, r7, r3
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	e00b      	b.n	8009b0e <Process_USB_input+0x532>
      data[i] = '\0';
 8009af6:	2163      	movs	r1, #99	@ 0x63
 8009af8:	187b      	adds	r3, r7, r1
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	18d3      	adds	r3, r2, r3
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 8009b04:	187b      	adds	r3, r7, r1
 8009b06:	781a      	ldrb	r2, [r3, #0]
 8009b08:	187b      	adds	r3, r7, r1
 8009b0a:	3201      	adds	r2, #1
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	2363      	movs	r3, #99	@ 0x63
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d8ed      	bhi.n	8009af6 <Process_USB_input+0x51a>
    }
    len = 6;
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b50 <Process_USB_input+0x574>)
 8009b1c:	2206      	movs	r2, #6
 8009b1e:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 8009b20:	4b12      	ldr	r3, [pc, #72]	@ (8009b6c <Process_USB_input+0x590>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d008      	beq.n	8009b3c <Process_USB_input+0x560>
    printf_USB("USB input: %s\r", (const char*)data);
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	4b10      	ldr	r3, [pc, #64]	@ (8009b70 <Process_USB_input+0x594>)
 8009b2e:	0011      	movs	r1, r2
 8009b30:	0018      	movs	r0, r3
 8009b32:	f7fe ffd9 	bl	8008ae8 <printf_USB>
    formerlength = length;
 8009b36:	4b0d      	ldr	r3, [pc, #52]	@ (8009b6c <Process_USB_input+0x590>)
 8009b38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b3a:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f019 fc10 	bl	8023364 <GetUsbRxNextChunk>
  return false;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	0018      	movs	r0, r3
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	b01b      	add	sp, #108	@ 0x6c
 8009b4c:	bd90      	pop	{r4, r7, pc}
 8009b4e:	46c0      	nop			@ (mov r8, r8)
 8009b50:	20000038 	.word	0x20000038
 8009b54:	0802c044 	.word	0x0802c044
 8009b58:	08080000 	.word	0x08080000
 8009b5c:	20000a44 	.word	0x20000a44
 8009b60:	20000940 	.word	0x20000940
 8009b64:	20000942 	.word	0x20000942
 8009b68:	0802c064 	.word	0x0802c064
 8009b6c:	20000a48 	.word	0x20000a48
 8009b70:	0802c088 	.word	0x0802c088

08009b74 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009b78:	4b26      	ldr	r3, [pc, #152]	@ (8009c14 <ReadBatteryVoltage+0xa0>)
 8009b7a:	4a27      	ldr	r2, [pc, #156]	@ (8009c18 <ReadBatteryVoltage+0xa4>)
 8009b7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009b7e:	4b25      	ldr	r3, [pc, #148]	@ (8009c14 <ReadBatteryVoltage+0xa0>)
 8009b80:	2280      	movs	r2, #128	@ 0x80
 8009b82:	0152      	lsls	r2, r2, #5
 8009b84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b86:	4a23      	ldr	r2, [pc, #140]	@ (8009c14 <ReadBatteryVoltage+0xa0>)
 8009b88:	4b24      	ldr	r3, [pc, #144]	@ (8009c1c <ReadBatteryVoltage+0xa8>)
 8009b8a:	0011      	movs	r1, r2
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f00b f9bb 	bl	8014f08 <HAL_ADC_ConfigChannel>
 8009b92:	1e03      	subs	r3, r0, #0
 8009b94:	d001      	beq.n	8009b9a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009b96:	f003 fc6b 	bl	800d470 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009b9a:	4b20      	ldr	r3, [pc, #128]	@ (8009c1c <ReadBatteryVoltage+0xa8>)
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f00b f8b7 	bl	8014d10 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c1c <ReadBatteryVoltage+0xa8>)
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f00b f906 	bl	8014db8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009bac:	4b1b      	ldr	r3, [pc, #108]	@ (8009c1c <ReadBatteryVoltage+0xa8>)
 8009bae:	0018      	movs	r0, r3
 8009bb0:	f00b f99e 	bl	8014ef0 <HAL_ADC_GetValue>
 8009bb4:	0002      	movs	r2, r0
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009c20 <ReadBatteryVoltage+0xac>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4353      	muls	r3, r2
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	4919      	ldr	r1, [pc, #100]	@ (8009c24 <ReadBatteryVoltage+0xb0>)
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f7f6 faef 	bl	80001a4 <__udivsi3>
 8009bc6:	0003      	movs	r3, r0
 8009bc8:	001a      	movs	r2, r3
 8009bca:	4b17      	ldr	r3, [pc, #92]	@ (8009c28 <ReadBatteryVoltage+0xb4>)
 8009bcc:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009bce:	4b16      	ldr	r3, [pc, #88]	@ (8009c28 <ReadBatteryVoltage+0xb4>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f7f7 fe78 	bl	80018c8 <__aeabi_ui2f>
 8009bd8:	1c03      	adds	r3, r0, #0
 8009bda:	4914      	ldr	r1, [pc, #80]	@ (8009c2c <ReadBatteryVoltage+0xb8>)
 8009bdc:	1c18      	adds	r0, r3, #0
 8009bde:	f7f7 f861 	bl	8000ca4 <__aeabi_fdiv>
 8009be2:	1c03      	adds	r3, r0, #0
 8009be4:	1c1a      	adds	r2, r3, #0
 8009be6:	4b12      	ldr	r3, [pc, #72]	@ (8009c30 <ReadBatteryVoltage+0xbc>)
 8009be8:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009bea:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <ReadBatteryVoltage+0xa0>)
 8009bec:	4a0a      	ldr	r2, [pc, #40]	@ (8009c18 <ReadBatteryVoltage+0xa4>)
 8009bee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009bf0:	4b08      	ldr	r3, [pc, #32]	@ (8009c14 <ReadBatteryVoltage+0xa0>)
 8009bf2:	4a10      	ldr	r2, [pc, #64]	@ (8009c34 <ReadBatteryVoltage+0xc0>)
 8009bf4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009bf6:	4a07      	ldr	r2, [pc, #28]	@ (8009c14 <ReadBatteryVoltage+0xa0>)
 8009bf8:	4b08      	ldr	r3, [pc, #32]	@ (8009c1c <ReadBatteryVoltage+0xa8>)
 8009bfa:	0011      	movs	r1, r2
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f00b f983 	bl	8014f08 <HAL_ADC_ConfigChannel>
 8009c02:	1e03      	subs	r3, r0, #0
 8009c04:	d001      	beq.n	8009c0a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009c06:	f003 fc33 	bl	800d470 <Error_Handler>
  }
  return trueValue;
 8009c0a:	4b09      	ldr	r3, [pc, #36]	@ (8009c30 <ReadBatteryVoltage+0xbc>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 }
 8009c0e:	1c18      	adds	r0, r3, #0
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000e18 	.word	0x20000e18
 8009c18:	38004000 	.word	0x38004000
 8009c1c:	20000e84 	.word	0x20000e84
 8009c20:	2000003c 	.word	0x2000003c
 8009c24:	00000fff 	.word	0x00000fff
 8009c28:	20000e34 	.word	0x20000e34
 8009c2c:	447a0000 	.word	0x447a0000
 8009c30:	20000e38 	.word	0x20000e38
 8009c34:	00001001 	.word	0x00001001

08009c38 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009c3c:	4b21      	ldr	r3, [pc, #132]	@ (8009cc4 <ReadSolarVoltage+0x8c>)
 8009c3e:	4a22      	ldr	r2, [pc, #136]	@ (8009cc8 <ReadSolarVoltage+0x90>)
 8009c40:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009c42:	4b20      	ldr	r3, [pc, #128]	@ (8009cc4 <ReadSolarVoltage+0x8c>)
 8009c44:	2280      	movs	r2, #128	@ 0x80
 8009c46:	0152      	lsls	r2, r2, #5
 8009c48:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8009cc4 <ReadSolarVoltage+0x8c>)
 8009c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009ccc <ReadSolarVoltage+0x94>)
 8009c4e:	0011      	movs	r1, r2
 8009c50:	0018      	movs	r0, r3
 8009c52:	f00b f959 	bl	8014f08 <HAL_ADC_ConfigChannel>
 8009c56:	1e03      	subs	r3, r0, #0
 8009c58:	d001      	beq.n	8009c5e <ReadSolarVoltage+0x26>
    Error_Handler();
 8009c5a:	f003 fc09 	bl	800d470 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ccc <ReadSolarVoltage+0x94>)
 8009c60:	0018      	movs	r0, r3
 8009c62:	f00b f855 	bl	8014d10 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009c66:	4b19      	ldr	r3, [pc, #100]	@ (8009ccc <ReadSolarVoltage+0x94>)
 8009c68:	2101      	movs	r1, #1
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	f00b f8a4 	bl	8014db8 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009c70:	4b16      	ldr	r3, [pc, #88]	@ (8009ccc <ReadSolarVoltage+0x94>)
 8009c72:	0018      	movs	r0, r3
 8009c74:	f00b f93c 	bl	8014ef0 <HAL_ADC_GetValue>
 8009c78:	0002      	movs	r2, r0
 8009c7a:	4b15      	ldr	r3, [pc, #84]	@ (8009cd0 <ReadSolarVoltage+0x98>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	435a      	muls	r2, r3
 8009c80:	0013      	movs	r3, r2
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	189b      	adds	r3, r3, r2
 8009c86:	4913      	ldr	r1, [pc, #76]	@ (8009cd4 <ReadSolarVoltage+0x9c>)
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f7f6 fa8b 	bl	80001a4 <__udivsi3>
 8009c8e:	0003      	movs	r3, r0
 8009c90:	001a      	movs	r2, r3
 8009c92:	4b11      	ldr	r3, [pc, #68]	@ (8009cd8 <ReadSolarVoltage+0xa0>)
 8009c94:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009c96:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <ReadSolarVoltage+0x8c>)
 8009c98:	4a0b      	ldr	r2, [pc, #44]	@ (8009cc8 <ReadSolarVoltage+0x90>)
 8009c9a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009c9c:	4b09      	ldr	r3, [pc, #36]	@ (8009cc4 <ReadSolarVoltage+0x8c>)
 8009c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8009cdc <ReadSolarVoltage+0xa4>)
 8009ca0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009ca2:	4a08      	ldr	r2, [pc, #32]	@ (8009cc4 <ReadSolarVoltage+0x8c>)
 8009ca4:	4b09      	ldr	r3, [pc, #36]	@ (8009ccc <ReadSolarVoltage+0x94>)
 8009ca6:	0011      	movs	r1, r2
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f00b f92d 	bl	8014f08 <HAL_ADC_ConfigChannel>
 8009cae:	1e03      	subs	r3, r0, #0
 8009cb0:	d001      	beq.n	8009cb6 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009cb2:	f003 fbdd 	bl	800d470 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009cb6:	4b08      	ldr	r3, [pc, #32]	@ (8009cd8 <ReadSolarVoltage+0xa0>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	b29b      	uxth	r3, r3
 }
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	46c0      	nop			@ (mov r8, r8)
 8009cc4:	20000e18 	.word	0x20000e18
 8009cc8:	3c008000 	.word	0x3c008000
 8009ccc:	20000e84 	.word	0x20000e84
 8009cd0:	2000003c 	.word	0x2000003c
 8009cd4:	00000fff 	.word	0x00000fff
 8009cd8:	20000e3c 	.word	0x20000e3c
 8009cdc:	00001001 	.word	0x00001001

08009ce0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009ce4:	23a0      	movs	r3, #160	@ 0xa0
 8009ce6:	05db      	lsls	r3, r3, #23
 8009ce8:	2180      	movs	r1, #128	@ 0x80
 8009cea:	0018      	movs	r0, r3
 8009cec:	f00c f89c 	bl	8015e28 <HAL_GPIO_ReadPin>
 8009cf0:	1e03      	subs	r3, r0, #0
 8009cf2:	d00b      	beq.n	8009d0c <Check_USB_PowerOn+0x2c>
     if (sendpwremail == DONE) {
 8009cf4:	4b07      	ldr	r3, [pc, #28]	@ (8009d14 <Check_USB_PowerOn+0x34>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d105      	bne.n	8009d08 <Check_USB_PowerOn+0x28>
       sendpwremail = CLEAR;
 8009cfc:	4b05      	ldr	r3, [pc, #20]	@ (8009d14 <Check_USB_PowerOn+0x34>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	701a      	strb	r2, [r3, #0]
       sendpwrmaildate = 0;
 8009d02:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <Check_USB_PowerOn+0x38>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e000      	b.n	8009d0e <Check_USB_PowerOn+0x2e>
   }
   return false;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	0018      	movs	r0, r3
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	200010f9 	.word	0x200010f9
 8009d18:	20001110 	.word	0x20001110

08009d1c <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009d22:	1dfb      	adds	r3, r7, #7
 8009d24:	2201      	movs	r2, #1
 8009d26:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009d28:	1dbb      	adds	r3, r7, #6
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009d2e:	4b27      	ldr	r3, [pc, #156]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d30:	2280      	movs	r2, #128	@ 0x80
 8009d32:	0092      	lsls	r2, r2, #2
 8009d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d36:	4b25      	ldr	r3, [pc, #148]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009d3c:	4b23      	ldr	r3, [pc, #140]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d3e:	2201      	movs	r2, #1
 8009d40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009d42:	4b22      	ldr	r3, [pc, #136]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d44:	4a22      	ldr	r2, [pc, #136]	@ (8009dd0 <Read_Charge_Status+0xb4>)
 8009d46:	0019      	movs	r1, r3
 8009d48:	0010      	movs	r0, r2
 8009d4a:	f00b feef 	bl	8015b2c <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009d4e:	2380      	movs	r3, #128	@ 0x80
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4a1f      	ldr	r2, [pc, #124]	@ (8009dd0 <Read_Charge_Status+0xb4>)
 8009d54:	0019      	movs	r1, r3
 8009d56:	0010      	movs	r0, r2
 8009d58:	f00c f866 	bl	8015e28 <HAL_GPIO_ReadPin>
 8009d5c:	0003      	movs	r3, r0
 8009d5e:	001a      	movs	r2, r3
 8009d60:	1dfb      	adds	r3, r7, #7
 8009d62:	1e51      	subs	r1, r2, #1
 8009d64:	418a      	sbcs	r2, r1
 8009d66:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009d68:	4b18      	ldr	r3, [pc, #96]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d6a:	2280      	movs	r2, #128	@ 0x80
 8009d6c:	0092      	lsls	r2, r2, #2
 8009d6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d70:	4b16      	ldr	r3, [pc, #88]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009d76:	4b15      	ldr	r3, [pc, #84]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d78:	2202      	movs	r2, #2
 8009d7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009d7c:	4b13      	ldr	r3, [pc, #76]	@ (8009dcc <Read_Charge_Status+0xb0>)
 8009d7e:	4a14      	ldr	r2, [pc, #80]	@ (8009dd0 <Read_Charge_Status+0xb4>)
 8009d80:	0019      	movs	r1, r3
 8009d82:	0010      	movs	r0, r2
 8009d84:	f00b fed2 	bl	8015b2c <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009d88:	2380      	movs	r3, #128	@ 0x80
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4a10      	ldr	r2, [pc, #64]	@ (8009dd0 <Read_Charge_Status+0xb4>)
 8009d8e:	0019      	movs	r1, r3
 8009d90:	0010      	movs	r0, r2
 8009d92:	f00c f849 	bl	8015e28 <HAL_GPIO_ReadPin>
 8009d96:	0003      	movs	r3, r0
 8009d98:	001a      	movs	r2, r3
 8009d9a:	1dbb      	adds	r3, r7, #6
 8009d9c:	1e51      	subs	r1, r2, #1
 8009d9e:	418a      	sbcs	r2, r1
 8009da0:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009da2:	1dfb      	adds	r3, r7, #7
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2201      	movs	r2, #1
 8009da8:	4053      	eors	r3, r2
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e006      	b.n	8009dc2 <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009db4:	1dbb      	adds	r3, r7, #6
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e000      	b.n	8009dc2 <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	0018      	movs	r0, r3
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	b002      	add	sp, #8
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	20000e20 	.word	0x20000e20
 8009dd0:	50000800 	.word	0x50000800

08009dd4 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009dd8:	2380      	movs	r3, #128	@ 0x80
 8009dda:	021a      	lsls	r2, r3, #8
 8009ddc:	23a0      	movs	r3, #160	@ 0xa0
 8009dde:	05db      	lsls	r3, r3, #23
 8009de0:	0011      	movs	r1, r2
 8009de2:	0018      	movs	r0, r3
 8009de4:	f00c f820 	bl	8015e28 <HAL_GPIO_ReadPin>
 8009de8:	0003      	movs	r3, r0
 8009dea:	1e5a      	subs	r2, r3, #1
 8009dec:	4193      	sbcs	r3, r2
 8009dee:	b2db      	uxtb	r3, r3
}
 8009df0:	0018      	movs	r0, r3
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009dfc:	4b05      	ldr	r3, [pc, #20]	@ (8009e14 <UserButton_Pressed+0x1c>)
 8009dfe:	2104      	movs	r1, #4
 8009e00:	0018      	movs	r0, r3
 8009e02:	f00c f811 	bl	8015e28 <HAL_GPIO_ReadPin>
 8009e06:	0003      	movs	r3, r0
 8009e08:	425a      	negs	r2, r3
 8009e0a:	4153      	adcs	r3, r2
 8009e0c:	b2db      	uxtb	r3, r3
}
 8009e0e:	0018      	movs	r0, r3
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	50000c00 	.word	0x50000c00

08009e18 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009e18:	b590      	push	{r4, r7, lr}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009e20:	4b08      	ldr	r3, [pc, #32]	@ (8009e44 <getUptime+0x2c>)
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	001a      	movs	r2, r3
 8009e26:	4b07      	ldr	r3, [pc, #28]	@ (8009e44 <getUptime+0x2c>)
 8009e28:	789b      	ldrb	r3, [r3, #2]
 8009e2a:	001c      	movs	r4, r3
 8009e2c:	4b05      	ldr	r3, [pc, #20]	@ (8009e44 <getUptime+0x2c>)
 8009e2e:	78db      	ldrb	r3, [r3, #3]
 8009e30:	4905      	ldr	r1, [pc, #20]	@ (8009e48 <getUptime+0x30>)
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	0023      	movs	r3, r4
 8009e38:	f01c fb48 	bl	80264cc <siprintf>
}
 8009e3c:	46c0      	nop			@ (mov r8, r8)
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	b003      	add	sp, #12
 8009e42:	bd90      	pop	{r4, r7, pc}
 8009e44:	20000e48 	.word	0x20000e48
 8009e48:	0802c0e4 	.word	0x0802c0e4

08009e4c <getDate>:
#endif

uint8_t getDate() {
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009e50:	4a05      	ldr	r2, [pc, #20]	@ (8009e68 <getDate+0x1c>)
 8009e52:	4b06      	ldr	r3, [pc, #24]	@ (8009e6c <getDate+0x20>)
 8009e54:	0011      	movs	r1, r2
 8009e56:	0018      	movs	r0, r3
 8009e58:	f000 fb66 	bl	800a528 <RTC_GetTime>
  return currentDate.Date;
 8009e5c:	4b02      	ldr	r3, [pc, #8]	@ (8009e68 <getDate+0x1c>)
 8009e5e:	789b      	ldrb	r3, [r3, #2]
}
 8009e60:	0018      	movs	r0, r3
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	46c0      	nop			@ (mov r8, r8)
 8009e68:	20000e68 	.word	0x20000e68
 8009e6c:	20000e54 	.word	0x20000e54

08009e70 <showUpTime>:

void showUpTime() {
 8009e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e72:	46ce      	mov	lr, r9
 8009e74:	4647      	mov	r7, r8
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b087      	sub	sp, #28
 8009e7a:	af06      	add	r7, sp, #24
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e7c:	4b17      	ldr	r3, [pc, #92]	@ (8009edc <showUpTime+0x6c>)
 8009e7e:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009e80:	4698      	mov	r8, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e82:	4b16      	ldr	r3, [pc, #88]	@ (8009edc <showUpTime+0x6c>)
 8009e84:	785b      	ldrb	r3, [r3, #1]
 8009e86:	1e5a      	subs	r2, r3, #1
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009e88:	4b15      	ldr	r3, [pc, #84]	@ (8009ee0 <showUpTime+0x70>)
 8009e8a:	0092      	lsls	r2, r2, #2
 8009e8c:	58d2      	ldr	r2, [r2, r3]
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e8e:	4b13      	ldr	r3, [pc, #76]	@ (8009edc <showUpTime+0x6c>)
 8009e90:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009e92:	4699      	mov	r9, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e94:	4b13      	ldr	r3, [pc, #76]	@ (8009ee4 <showUpTime+0x74>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009e98:	0019      	movs	r1, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e9a:	4b12      	ldr	r3, [pc, #72]	@ (8009ee4 <showUpTime+0x74>)
 8009e9c:	785b      	ldrb	r3, [r3, #1]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009e9e:	001c      	movs	r4, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009ea0:	4b10      	ldr	r3, [pc, #64]	@ (8009ee4 <showUpTime+0x74>)
 8009ea2:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009ea4:	001d      	movs	r5, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009ea6:	4b10      	ldr	r3, [pc, #64]	@ (8009ee8 <showUpTime+0x78>)
 8009ea8:	881b      	ldrh	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009eaa:	001e      	movs	r6, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009eac:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee8 <showUpTime+0x78>)
 8009eae:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009eb0:	469c      	mov	ip, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee8 <showUpTime+0x78>)
 8009eb4:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009eb6:	480d      	ldr	r0, [pc, #52]	@ (8009eec <showUpTime+0x7c>)
 8009eb8:	9305      	str	r3, [sp, #20]
 8009eba:	4663      	mov	r3, ip
 8009ebc:	9304      	str	r3, [sp, #16]
 8009ebe:	9603      	str	r6, [sp, #12]
 8009ec0:	9502      	str	r5, [sp, #8]
 8009ec2:	9401      	str	r4, [sp, #4]
 8009ec4:	9100      	str	r1, [sp, #0]
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	4641      	mov	r1, r8
 8009eca:	f7fe fe0d 	bl	8008ae8 <printf_USB>
}
 8009ece:	46c0      	nop			@ (mov r8, r8)
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	b001      	add	sp, #4
 8009ed4:	bcc0      	pop	{r6, r7}
 8009ed6:	46b9      	mov	r9, r7
 8009ed8:	46b0      	mov	r8, r6
 8009eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009edc:	20000e68 	.word	0x20000e68
 8009ee0:	2000005c 	.word	0x2000005c
 8009ee4:	20000e54 	.word	0x20000e54
 8009ee8:	20000e48 	.word	0x20000e48
 8009eec:	0802c0f0 	.word	0x0802c0f0

08009ef0 <showTime>:

void showTime() {
 8009ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef2:	46de      	mov	lr, fp
 8009ef4:	4657      	mov	r7, sl
 8009ef6:	464e      	mov	r6, r9
 8009ef8:	4645      	mov	r5, r8
 8009efa:	b5e0      	push	{r5, r6, r7, lr}
 8009efc:	b08d      	sub	sp, #52	@ 0x34
 8009efe:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009f00:	4b41      	ldr	r3, [pc, #260]	@ (800a008 <showTime+0x118>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d100      	bne.n	8009f0a <showTime+0x1a>
 8009f08:	e075      	b.n	8009ff6 <showTime+0x106>
    return;
  }
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009f0a:	4a40      	ldr	r2, [pc, #256]	@ (800a00c <showTime+0x11c>)
 8009f0c:	4b40      	ldr	r3, [pc, #256]	@ (800a010 <showTime+0x120>)
 8009f0e:	0011      	movs	r1, r2
 8009f10:	0018      	movs	r0, r3
 8009f12:	f000 fb09 	bl	800a528 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009f16:	4b3e      	ldr	r3, [pc, #248]	@ (800a010 <showTime+0x120>)
 8009f18:	781a      	ldrb	r2, [r3, #0]
 8009f1a:	4b3e      	ldr	r3, [pc, #248]	@ (800a014 <showTime+0x124>)
 8009f1c:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800a00c <showTime+0x11c>)
 8009f20:	781a      	ldrb	r2, [r3, #0]
 8009f22:	4b3d      	ldr	r3, [pc, #244]	@ (800a018 <showTime+0x128>)
 8009f24:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009f26:	f000 f89b 	bl	800a060 <UpdateSystemUptime>
  if (lastminute != currentTime.Minutes) {
 8009f2a:	4b39      	ldr	r3, [pc, #228]	@ (800a010 <showTime+0x120>)
 8009f2c:	785a      	ldrb	r2, [r3, #1]
 8009f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800a01c <showTime+0x12c>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d039      	beq.n	8009faa <showTime+0xba>
    lastminute = currentTime.Minutes;
 8009f36:	4b36      	ldr	r3, [pc, #216]	@ (800a010 <showTime+0x120>)
 8009f38:	785a      	ldrb	r2, [r3, #1]
 8009f3a:	4b38      	ldr	r3, [pc, #224]	@ (800a01c <showTime+0x12c>)
 8009f3c:	701a      	strb	r2, [r3, #0]
    Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009f3e:	4b33      	ldr	r3, [pc, #204]	@ (800a00c <showTime+0x11c>)
 8009f40:	789b      	ldrb	r3, [r3, #2]
 8009f42:	469b      	mov	fp, r3
 8009f44:	4b31      	ldr	r3, [pc, #196]	@ (800a00c <showTime+0x11c>)
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	1e5a      	subs	r2, r3, #1
 8009f4a:	4b35      	ldr	r3, [pc, #212]	@ (800a020 <showTime+0x130>)
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	58d3      	ldr	r3, [r2, r3]
 8009f50:	607b      	str	r3, [r7, #4]
 8009f52:	4a2e      	ldr	r2, [pc, #184]	@ (800a00c <showTime+0x11c>)
 8009f54:	78d2      	ldrb	r2, [r2, #3]
 8009f56:	0010      	movs	r0, r2
 8009f58:	4a2d      	ldr	r2, [pc, #180]	@ (800a010 <showTime+0x120>)
 8009f5a:	7812      	ldrb	r2, [r2, #0]
 8009f5c:	0014      	movs	r4, r2
 8009f5e:	4a2c      	ldr	r2, [pc, #176]	@ (800a010 <showTime+0x120>)
 8009f60:	7852      	ldrb	r2, [r2, #1]
 8009f62:	0015      	movs	r5, r2
 8009f64:	4a2a      	ldr	r2, [pc, #168]	@ (800a010 <showTime+0x120>)
 8009f66:	7892      	ldrb	r2, [r2, #2]
 8009f68:	0016      	movs	r6, r2
 8009f6a:	4a2e      	ldr	r2, [pc, #184]	@ (800a024 <showTime+0x134>)
 8009f6c:	8812      	ldrh	r2, [r2, #0]
 8009f6e:	4694      	mov	ip, r2
 8009f70:	4a2c      	ldr	r2, [pc, #176]	@ (800a024 <showTime+0x134>)
 8009f72:	7892      	ldrb	r2, [r2, #2]
 8009f74:	4690      	mov	r8, r2
 8009f76:	4a2b      	ldr	r2, [pc, #172]	@ (800a024 <showTime+0x134>)
 8009f78:	78d2      	ldrb	r2, [r2, #3]
 8009f7a:	4691      	mov	r9, r2
 8009f7c:	4a29      	ldr	r2, [pc, #164]	@ (800a024 <showTime+0x134>)
 8009f7e:	7912      	ldrb	r2, [r2, #4]
 8009f80:	4692      	mov	sl, r2
 8009f82:	4a29      	ldr	r2, [pc, #164]	@ (800a028 <showTime+0x138>)
 8009f84:	4929      	ldr	r1, [pc, #164]	@ (800a02c <showTime+0x13c>)
 8009f86:	4653      	mov	r3, sl
 8009f88:	9308      	str	r3, [sp, #32]
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	9307      	str	r3, [sp, #28]
 8009f8e:	4643      	mov	r3, r8
 8009f90:	9306      	str	r3, [sp, #24]
 8009f92:	4663      	mov	r3, ip
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	9604      	str	r6, [sp, #16]
 8009f98:	9503      	str	r5, [sp, #12]
 8009f9a:	9402      	str	r4, [sp, #8]
 8009f9c:	9001      	str	r0, [sp, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	2002      	movs	r0, #2
 8009fa6:	f009 ff75 	bl	8013e94 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  }
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009faa:	4b1b      	ldr	r3, [pc, #108]	@ (800a018 <showTime+0x128>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2b07      	cmp	r3, #7
 8009fb0:	d122      	bne.n	8009ff8 <showTime+0x108>
 8009fb2:	4b18      	ldr	r3, [pc, #96]	@ (800a014 <showTime+0x124>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d11e      	bne.n	8009ff8 <showTime+0x108>
 8009fba:	4b15      	ldr	r3, [pc, #84]	@ (800a010 <showTime+0x120>)
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b10      	cmp	r3, #16
 8009fc0:	d81a      	bhi.n	8009ff8 <showTime+0x108>
 8009fc2:	4b1b      	ldr	r3, [pc, #108]	@ (800a030 <showTime+0x140>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4053      	eors	r3, r2
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d013      	beq.n	8009ff8 <showTime+0x108>
 8009fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800a00c <showTime+0x11c>)
 8009fd2:	789b      	ldrb	r3, [r3, #2]
 8009fd4:	2b18      	cmp	r3, #24
 8009fd6:	d90f      	bls.n	8009ff8 <showTime+0x108>
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800a00c <showTime+0x11c>)
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d003      	beq.n	8009fe8 <showTime+0xf8>
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800a00c <showTime+0x11c>)
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	2b0a      	cmp	r3, #10
 8009fe6:	d107      	bne.n	8009ff8 <showTime+0x108>
    dstchkd = true;
 8009fe8:	4b11      	ldr	r3, [pc, #68]	@ (800a030 <showTime+0x140>)
 8009fea:	2201      	movs	r2, #1
 8009fec:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f7fa fc58 	bl	80048a4 <setESPTimeStamp>
 8009ff4:	e000      	b.n	8009ff8 <showTime+0x108>
    return;
 8009ff6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b003      	add	sp, #12
 8009ffc:	bcf0      	pop	{r4, r5, r6, r7}
 8009ffe:	46bb      	mov	fp, r7
 800a000:	46b2      	mov	sl, r6
 800a002:	46a9      	mov	r9, r5
 800a004:	46a0      	mov	r8, r4
 800a006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a008:	20000e44 	.word	0x20000e44
 800a00c:	20000e68 	.word	0x20000e68
 800a010:	20000e54 	.word	0x20000e54
 800a014:	20000e42 	.word	0x20000e42
 800a018:	20000e43 	.word	0x20000e43
 800a01c:	20000e41 	.word	0x20000e41
 800a020:	2000005c 	.word	0x2000005c
 800a024:	20000e48 	.word	0x20000e48
 800a028:	0802c144 	.word	0x0802c144
 800a02c:	0802c19c 	.word	0x0802c19c
 800a030:	20000e40 	.word	0x20000e40

0800a034 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a038:	4a07      	ldr	r2, [pc, #28]	@ (800a058 <calculateNextNTPTime+0x24>)
 800a03a:	4b08      	ldr	r3, [pc, #32]	@ (800a05c <calculateNextNTPTime+0x28>)
 800a03c:	0011      	movs	r1, r2
 800a03e:	0018      	movs	r0, r3
 800a040:	f000 fa72 	bl	800a528 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a044:	4a05      	ldr	r2, [pc, #20]	@ (800a05c <calculateNextNTPTime+0x28>)
 800a046:	4b04      	ldr	r3, [pc, #16]	@ (800a058 <calculateNextNTPTime+0x24>)
 800a048:	0011      	movs	r1, r2
 800a04a:	0018      	movs	r0, r3
 800a04c:	f000 fc6c 	bl	800a928 <makeTime>
 800a050:	0003      	movs	r3, r0
}
 800a052:	0018      	movs	r0, r3
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	20000e68 	.word	0x20000e68
 800a05c:	20000e54 	.word	0x20000e54

0800a060 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800a066:	4a25      	ldr	r2, [pc, #148]	@ (800a0fc <UpdateSystemUptime+0x9c>)
 800a068:	4b25      	ldr	r3, [pc, #148]	@ (800a100 <UpdateSystemUptime+0xa0>)
 800a06a:	0011      	movs	r1, r2
 800a06c:	0018      	movs	r0, r3
 800a06e:	f000 fa5b 	bl	800a528 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800a072:	4a23      	ldr	r2, [pc, #140]	@ (800a100 <UpdateSystemUptime+0xa0>)
 800a074:	4b21      	ldr	r3, [pc, #132]	@ (800a0fc <UpdateSystemUptime+0x9c>)
 800a076:	0011      	movs	r1, r2
 800a078:	0018      	movs	r0, r3
 800a07a:	f000 fc55 	bl	800a928 <makeTime>
 800a07e:	0002      	movs	r2, r0
 800a080:	4b20      	ldr	r3, [pc, #128]	@ (800a104 <UpdateSystemUptime+0xa4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	607b      	str	r3, [r7, #4]
  time = uxUptime;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	603b      	str	r3, [r7, #0]
  myUpTime.Seconds = time % 60;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	213c      	movs	r1, #60	@ 0x3c
 800a090:	0018      	movs	r0, r3
 800a092:	f7f6 f90d 	bl	80002b0 <__aeabi_uidivmod>
 800a096:	000b      	movs	r3, r1
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	4b1b      	ldr	r3, [pc, #108]	@ (800a108 <UpdateSystemUptime+0xa8>)
 800a09c:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	213c      	movs	r1, #60	@ 0x3c
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f7f6 f87e 	bl	80001a4 <__udivsi3>
 800a0a8:	0003      	movs	r3, r0
 800a0aa:	603b      	str	r3, [r7, #0]
  myUpTime.Minutes = time % 60;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	213c      	movs	r1, #60	@ 0x3c
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f7f6 f8fd 	bl	80002b0 <__aeabi_uidivmod>
 800a0b6:	000b      	movs	r3, r1
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	4b13      	ldr	r3, [pc, #76]	@ (800a108 <UpdateSystemUptime+0xa8>)
 800a0bc:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	213c      	movs	r1, #60	@ 0x3c
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	f7f6 f86e 	bl	80001a4 <__udivsi3>
 800a0c8:	0003      	movs	r3, r0
 800a0ca:	603b      	str	r3, [r7, #0]
  myUpTime.Hour = time % 24;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2118      	movs	r1, #24
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f7f6 f8ed 	bl	80002b0 <__aeabi_uidivmod>
 800a0d6:	000b      	movs	r3, r1
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4b0b      	ldr	r3, [pc, #44]	@ (800a108 <UpdateSystemUptime+0xa8>)
 800a0dc:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2118      	movs	r1, #24
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7f6 f85e 	bl	80001a4 <__udivsi3>
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	603b      	str	r3, [r7, #0]
  myUpTime.Day = time; // now it is days
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	4b05      	ldr	r3, [pc, #20]	@ (800a108 <UpdateSystemUptime+0xa8>)
 800a0f2:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800a0f4:	46c0      	nop			@ (mov r8, r8)
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	b002      	add	sp, #8
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20000e68 	.word	0x20000e68
 800a100:	20000e54 	.word	0x20000e54
 800a104:	20000e44 	.word	0x20000e44
 800a108:	20000e48 	.word	0x20000e48

0800a10c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800a10c:	b590      	push	{r4, r7, lr}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	0008      	movs	r0, r1
 800a116:	0011      	movs	r1, r2
 800a118:	1cfb      	adds	r3, r7, #3
 800a11a:	1c02      	adds	r2, r0, #0
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	1cbb      	adds	r3, r7, #2
 800a120:	1c0a      	adds	r2, r1, #0
 800a122:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800a124:	230e      	movs	r3, #14
 800a126:	18fb      	adds	r3, r7, r3
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a12c:	230f      	movs	r3, #15
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	1cfa      	adds	r2, r7, #3
 800a132:	7812      	ldrb	r2, [r2, #0]
 800a134:	701a      	strb	r2, [r3, #0]
 800a136:	e015      	b.n	800a164 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800a138:	200f      	movs	r0, #15
 800a13a:	183b      	adds	r3, r7, r0
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	18d2      	adds	r2, r2, r3
 800a142:	240e      	movs	r4, #14
 800a144:	193b      	adds	r3, r7, r4
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	7811      	ldrb	r1, [r2, #0]
 800a14a:	2208      	movs	r2, #8
 800a14c:	18ba      	adds	r2, r7, r2
 800a14e:	54d1      	strb	r1, [r2, r3]
    pos++;
 800a150:	193b      	adds	r3, r7, r4
 800a152:	781a      	ldrb	r2, [r3, #0]
 800a154:	193b      	adds	r3, r7, r4
 800a156:	3201      	adds	r2, #1
 800a158:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a15a:	183b      	adds	r3, r7, r0
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	183b      	adds	r3, r7, r0
 800a160:	3201      	adds	r2, #1
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	200f      	movs	r0, #15
 800a166:	183a      	adds	r2, r7, r0
 800a168:	1cbb      	adds	r3, r7, #2
 800a16a:	7812      	ldrb	r2, [r2, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d9e2      	bls.n	800a138 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800a172:	230e      	movs	r3, #14
 800a174:	18fb      	adds	r3, r7, r3
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	2208      	movs	r2, #8
 800a17a:	18ba      	adds	r2, r7, r2
 800a17c:	2100      	movs	r1, #0
 800a17e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800a180:	1cfb      	adds	r3, r7, #3
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b13      	cmp	r3, #19
 800a186:	d849      	bhi.n	800a21c <aBuff2int+0x110>
    if (start == 17) { //month
 800a188:	1cfb      	adds	r3, r7, #3
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b11      	cmp	r3, #17
 800a18e:	d122      	bne.n	800a1d6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a190:	183b      	adds	r3, r7, r0
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	e018      	b.n	800a1ca <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a198:	240f      	movs	r4, #15
 800a19a:	193b      	adds	r3, r7, r4
 800a19c:	781a      	ldrb	r2, [r3, #0]
 800a19e:	4b25      	ldr	r3, [pc, #148]	@ (800a234 <aBuff2int+0x128>)
 800a1a0:	0092      	lsls	r2, r2, #2
 800a1a2:	58d2      	ldr	r2, [r2, r3]
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	18fb      	adds	r3, r7, r3
 800a1a8:	0011      	movs	r1, r2
 800a1aa:	0018      	movs	r0, r3
 800a1ac:	f7f5 ffd4 	bl	8000158 <strcmp>
 800a1b0:	1e03      	subs	r3, r0, #0
 800a1b2:	d104      	bne.n	800a1be <aBuff2int+0xb2>
          return i+1;
 800a1b4:	193b      	adds	r3, r7, r4
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	e035      	b.n	800a22a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a1be:	210f      	movs	r1, #15
 800a1c0:	187b      	adds	r3, r7, r1
 800a1c2:	781a      	ldrb	r2, [r3, #0]
 800a1c4:	187b      	adds	r3, r7, r1
 800a1c6:	3201      	adds	r2, #1
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	230f      	movs	r3, #15
 800a1cc:	18fb      	adds	r3, r7, r3
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b0b      	cmp	r3, #11
 800a1d2:	d9e1      	bls.n	800a198 <aBuff2int+0x8c>
 800a1d4:	e022      	b.n	800a21c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a1d6:	230f      	movs	r3, #15
 800a1d8:	18fb      	adds	r3, r7, r3
 800a1da:	2200      	movs	r2, #0
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	e018      	b.n	800a212 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a1e0:	240f      	movs	r4, #15
 800a1e2:	193b      	adds	r3, r7, r4
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	4b14      	ldr	r3, [pc, #80]	@ (800a238 <aBuff2int+0x12c>)
 800a1e8:	0092      	lsls	r2, r2, #2
 800a1ea:	58d2      	ldr	r2, [r2, r3]
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	0011      	movs	r1, r2
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f7f5 ffb0 	bl	8000158 <strcmp>
 800a1f8:	1e03      	subs	r3, r0, #0
 800a1fa:	d104      	bne.n	800a206 <aBuff2int+0xfa>
          return i+1;
 800a1fc:	193b      	adds	r3, r7, r4
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	b2db      	uxtb	r3, r3
 800a204:	e011      	b.n	800a22a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a206:	210f      	movs	r1, #15
 800a208:	187b      	adds	r3, r7, r1
 800a20a:	781a      	ldrb	r2, [r3, #0]
 800a20c:	187b      	adds	r3, r7, r1
 800a20e:	3201      	adds	r2, #1
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	230f      	movs	r3, #15
 800a214:	18fb      	adds	r3, r7, r3
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b06      	cmp	r3, #6
 800a21a:	d9e1      	bls.n	800a1e0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a21c:	2308      	movs	r3, #8
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	0018      	movs	r0, r3
 800a222:	f01a fcfe 	bl	8024c22 <atoi>
 800a226:	0003      	movs	r3, r0
 800a228:	b2db      	uxtb	r3, r3
}
 800a22a:	0018      	movs	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	b005      	add	sp, #20
 800a230:	bd90      	pop	{r4, r7, pc}
 800a232:	46c0      	nop			@ (mov r8, r8)
 800a234:	2000005c 	.word	0x2000005c
 800a238:	20000040 	.word	0x20000040

0800a23c <ParseTime>:

void ParseTime(char* buffer) {
 800a23c:	b590      	push	{r4, r7, lr}
 800a23e:	b087      	sub	sp, #28
 800a240:	af02      	add	r7, sp, #8
 800a242:	6078      	str	r0, [r7, #4]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a244:	4a7b      	ldr	r2, [pc, #492]	@ (800a434 <ParseTime+0x1f8>)
 800a246:	4b7c      	ldr	r3, [pc, #496]	@ (800a438 <ParseTime+0x1fc>)
 800a248:	0011      	movs	r1, r2
 800a24a:	0018      	movs	r0, r3
 800a24c:	f000 f96c 	bl	800a528 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2219      	movs	r2, #25
 800a254:	2118      	movs	r1, #24
 800a256:	0018      	movs	r0, r3
 800a258:	f7ff ff58 	bl	800a10c <aBuff2int>
 800a25c:	0003      	movs	r3, r0
 800a25e:	001a      	movs	r2, r3
 800a260:	4b75      	ldr	r3, [pc, #468]	@ (800a438 <ParseTime+0x1fc>)
 800a262:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	221c      	movs	r2, #28
 800a268:	211b      	movs	r1, #27
 800a26a:	0018      	movs	r0, r3
 800a26c:	f7ff ff4e 	bl	800a10c <aBuff2int>
 800a270:	0003      	movs	r3, r0
 800a272:	001a      	movs	r2, r3
 800a274:	4b70      	ldr	r3, [pc, #448]	@ (800a438 <ParseTime+0x1fc>)
 800a276:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	221f      	movs	r2, #31
 800a27c:	211e      	movs	r1, #30
 800a27e:	0018      	movs	r0, r3
 800a280:	f7ff ff44 	bl	800a10c <aBuff2int>
 800a284:	0003      	movs	r3, r0
 800a286:	001a      	movs	r2, r3
 800a288:	4b6b      	ldr	r3, [pc, #428]	@ (800a438 <ParseTime+0x1fc>)
 800a28a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2224      	movs	r2, #36	@ 0x24
 800a290:	2123      	movs	r1, #35	@ 0x23
 800a292:	0018      	movs	r0, r3
 800a294:	f7ff ff3a 	bl	800a10c <aBuff2int>
 800a298:	0003      	movs	r3, r0
 800a29a:	001a      	movs	r2, r3
 800a29c:	4b65      	ldr	r3, [pc, #404]	@ (800a434 <ParseTime+0x1f8>)
 800a29e:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2213      	movs	r2, #19
 800a2a4:	2111      	movs	r1, #17
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f7ff ff30 	bl	800a10c <aBuff2int>
 800a2ac:	0003      	movs	r3, r0
 800a2ae:	001a      	movs	r2, r3
 800a2b0:	4b60      	ldr	r3, [pc, #384]	@ (800a434 <ParseTime+0x1f8>)
 800a2b2:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2216      	movs	r2, #22
 800a2b8:	2115      	movs	r1, #21
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f7ff ff26 	bl	800a10c <aBuff2int>
 800a2c0:	0003      	movs	r3, r0
 800a2c2:	001a      	movs	r2, r3
 800a2c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a434 <ParseTime+0x1f8>)
 800a2c6:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	220f      	movs	r2, #15
 800a2cc:	210d      	movs	r1, #13
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f7ff ff1c 	bl	800a10c <aBuff2int>
 800a2d4:	0003      	movs	r3, r0
 800a2d6:	001a      	movs	r2, r3
 800a2d8:	4b56      	ldr	r3, [pc, #344]	@ (800a434 <ParseTime+0x1f8>)
 800a2da:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a2dc:	4b56      	ldr	r3, [pc, #344]	@ (800a438 <ParseTime+0x1fc>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	001c      	movs	r4, r3
 800a2e2:	4b55      	ldr	r3, [pc, #340]	@ (800a438 <ParseTime+0x1fc>)
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	4b53      	ldr	r3, [pc, #332]	@ (800a438 <ParseTime+0x1fc>)
 800a2ea:	789b      	ldrb	r3, [r3, #2]
 800a2ec:	4a53      	ldr	r2, [pc, #332]	@ (800a43c <ParseTime+0x200>)
 800a2ee:	4954      	ldr	r1, [pc, #336]	@ (800a440 <ParseTime+0x204>)
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	9000      	str	r0, [sp, #0]
 800a2f4:	0023      	movs	r3, r4
 800a2f6:	2003      	movs	r0, #3
 800a2f8:	f009 fdcc 	bl	8013e94 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a2fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a434 <ParseTime+0x1f8>)
 800a2fe:	789b      	ldrb	r3, [r3, #2]
 800a300:	001c      	movs	r4, r3
 800a302:	4b4c      	ldr	r3, [pc, #304]	@ (800a434 <ParseTime+0x1f8>)
 800a304:	785b      	ldrb	r3, [r3, #1]
 800a306:	0018      	movs	r0, r3
 800a308:	4b4a      	ldr	r3, [pc, #296]	@ (800a434 <ParseTime+0x1f8>)
 800a30a:	78db      	ldrb	r3, [r3, #3]
 800a30c:	4a4d      	ldr	r2, [pc, #308]	@ (800a444 <ParseTime+0x208>)
 800a30e:	494c      	ldr	r1, [pc, #304]	@ (800a440 <ParseTime+0x204>)
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	9000      	str	r0, [sp, #0]
 800a314:	0023      	movs	r3, r4
 800a316:	2003      	movs	r0, #3
 800a318:	f009 fdbc 	bl	8013e94 <CreateLine>
  RTC_SetTime(&currentTime);
 800a31c:	4b46      	ldr	r3, [pc, #280]	@ (800a438 <ParseTime+0x1fc>)
 800a31e:	0018      	movs	r0, r3
 800a320:	f000 f89e 	bl	800a460 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a324:	4b43      	ldr	r3, [pc, #268]	@ (800a434 <ParseTime+0x1f8>)
 800a326:	0018      	movs	r0, r3
 800a328:	f000 f8c0 	bl	800a4ac <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a32c:	230f      	movs	r3, #15
 800a32e:	18fb      	adds	r3, r7, r3
 800a330:	2200      	movs	r2, #0
 800a332:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a334:	4b3f      	ldr	r3, [pc, #252]	@ (800a434 <ParseTime+0x1f8>)
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	60bb      	str	r3, [r7, #8]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	dd04      	ble.n	800a34a <ParseTime+0x10e>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b0a      	cmp	r3, #10
 800a344:	dc01      	bgt.n	800a34a <ParseTime+0x10e>
 800a346:	2201      	movs	r2, #1
 800a348:	e000      	b.n	800a34c <ParseTime+0x110>
 800a34a:	2200      	movs	r2, #0
 800a34c:	200f      	movs	r0, #15
 800a34e:	183b      	adds	r3, r7, r0
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	781a      	ldrb	r2, [r3, #0]
 800a354:	2101      	movs	r1, #1
 800a356:	400a      	ands	r2, r1
 800a358:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a35a:	0002      	movs	r2, r0
 800a35c:	18bb      	adds	r3, r7, r2
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01d      	beq.n	800a3a0 <ParseTime+0x164>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b03      	cmp	r3, #3
 800a368:	d10b      	bne.n	800a382 <ParseTime+0x146>
 800a36a:	4b32      	ldr	r3, [pc, #200]	@ (800a434 <ParseTime+0x1f8>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	2b07      	cmp	r3, #7
 800a370:	d107      	bne.n	800a382 <ParseTime+0x146>
 800a372:	4b30      	ldr	r3, [pc, #192]	@ (800a434 <ParseTime+0x1f8>)
 800a374:	789b      	ldrb	r3, [r3, #2]
 800a376:	2b18      	cmp	r3, #24
 800a378:	d803      	bhi.n	800a382 <ParseTime+0x146>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a37a:	18bb      	adds	r3, r7, r2
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	e00e      	b.n	800a3a0 <ParseTime+0x164>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b0a      	cmp	r3, #10
 800a386:	d10b      	bne.n	800a3a0 <ParseTime+0x164>
 800a388:	4b2a      	ldr	r3, [pc, #168]	@ (800a434 <ParseTime+0x1f8>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b07      	cmp	r3, #7
 800a38e:	d107      	bne.n	800a3a0 <ParseTime+0x164>
 800a390:	4b28      	ldr	r3, [pc, #160]	@ (800a434 <ParseTime+0x1f8>)
 800a392:	789b      	ldrb	r3, [r3, #2]
 800a394:	2b18      	cmp	r3, #24
 800a396:	d803      	bhi.n	800a3a0 <ParseTime+0x164>
    {
        dst = false;
 800a398:	230f      	movs	r3, #15
 800a39a:	18fb      	adds	r3, r7, r3
 800a39c:	2200      	movs	r2, #0
 800a39e:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a3a0:	230f      	movs	r3, #15
 800a3a2:	18fb      	adds	r3, r7, r3
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d02a      	beq.n	800a400 <ParseTime+0x1c4>
    Info("Daylight Saving Time active");
 800a3aa:	4a27      	ldr	r2, [pc, #156]	@ (800a448 <ParseTime+0x20c>)
 800a3ac:	4b27      	ldr	r3, [pc, #156]	@ (800a44c <ParseTime+0x210>)
 800a3ae:	0019      	movs	r1, r3
 800a3b0:	2002      	movs	r0, #2
 800a3b2:	f009 fd6f 	bl	8013e94 <CreateLine>
    HAL_Delay(1000);
 800a3b6:	23fa      	movs	r3, #250	@ 0xfa
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f00a faf4 	bl	80149a8 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a3c0:	4b23      	ldr	r3, [pc, #140]	@ (800a450 <ParseTime+0x214>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f012 f975 	bl	801c6b4 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a3ca:	23fa      	movs	r3, #250	@ 0xfa
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f00a faea 	bl	80149a8 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a3d4:	4a17      	ldr	r2, [pc, #92]	@ (800a434 <ParseTime+0x1f8>)
 800a3d6:	4b18      	ldr	r3, [pc, #96]	@ (800a438 <ParseTime+0x1fc>)
 800a3d8:	0011      	movs	r1, r2
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f000 f8a4 	bl	800a528 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a3e0:	4b15      	ldr	r3, [pc, #84]	@ (800a438 <ParseTime+0x1fc>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	001c      	movs	r4, r3
 800a3e6:	4b14      	ldr	r3, [pc, #80]	@ (800a438 <ParseTime+0x1fc>)
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	4b12      	ldr	r3, [pc, #72]	@ (800a438 <ParseTime+0x1fc>)
 800a3ee:	789b      	ldrb	r3, [r3, #2]
 800a3f0:	4a18      	ldr	r2, [pc, #96]	@ (800a454 <ParseTime+0x218>)
 800a3f2:	4913      	ldr	r1, [pc, #76]	@ (800a440 <ParseTime+0x204>)
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	9000      	str	r0, [sp, #0]
 800a3f8:	0023      	movs	r3, r4
 800a3fa:	2003      	movs	r0, #3
 800a3fc:	f009 fd4a 	bl	8013e94 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a400:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <ParseTime+0x1f8>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d104      	bne.n	800a412 <ParseTime+0x1d6>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a408:	f004 fa0c 	bl	800e824 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a40c:	4b12      	ldr	r3, [pc, #72]	@ (800a458 <ParseTime+0x21c>)
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a412:	4b12      	ldr	r3, [pc, #72]	@ (800a45c <ParseTime+0x220>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <ParseTime+0x1f0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a41a:	4a07      	ldr	r2, [pc, #28]	@ (800a438 <ParseTime+0x1fc>)
 800a41c:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <ParseTime+0x1f8>)
 800a41e:	0011      	movs	r1, r2
 800a420:	0018      	movs	r0, r3
 800a422:	f000 fa81 	bl	800a928 <makeTime>
 800a426:	0002      	movs	r2, r0
 800a428:	4b0c      	ldr	r3, [pc, #48]	@ (800a45c <ParseTime+0x220>)
 800a42a:	601a      	str	r2, [r3, #0]
  }
}
 800a42c:	46c0      	nop			@ (mov r8, r8)
 800a42e:	46bd      	mov	sp, r7
 800a430:	b005      	add	sp, #20
 800a432:	bd90      	pop	{r4, r7, pc}
 800a434:	20000e68 	.word	0x20000e68
 800a438:	20000e54 	.word	0x20000e54
 800a43c:	0802c1a0 	.word	0x0802c1a0
 800a440:	0802c1d8 	.word	0x0802c1d8
 800a444:	0802c1dc 	.word	0x0802c1dc
 800a448:	0802c210 	.word	0x0802c210
 800a44c:	0802c19c 	.word	0x0802c19c
 800a450:	20000e50 	.word	0x20000e50
 800a454:	0802c22c 	.word	0x0802c22c
 800a458:	20000e40 	.word	0x20000e40
 800a45c:	20000e44 	.word	0x20000e44

0800a460 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a47a:	4b09      	ldr	r3, [pc, #36]	@ (800a4a0 <RTC_SetTime+0x40>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	0018      	movs	r0, r3
 800a484:	f011 ff02 	bl	801c28c <HAL_RTC_SetTime>
 800a488:	1e03      	subs	r3, r0, #0
 800a48a:	d005      	beq.n	800a498 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a48c:	4a05      	ldr	r2, [pc, #20]	@ (800a4a4 <RTC_SetTime+0x44>)
 800a48e:	4b06      	ldr	r3, [pc, #24]	@ (800a4a8 <RTC_SetTime+0x48>)
 800a490:	0019      	movs	r1, r3
 800a492:	2001      	movs	r0, #1
 800a494:	f009 fcfe 	bl	8013e94 <CreateLine>
    }
}
 800a498:	46c0      	nop			@ (mov r8, r8)
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b002      	add	sp, #8
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20000e50 	.word	0x20000e50
 800a4a4:	0802c260 	.word	0x0802c260
 800a4a8:	0802c27c 	.word	0x0802c27c

0800a4ac <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a4b4:	4b16      	ldr	r3, [pc, #88]	@ (800a510 <RTC_SetDate+0x64>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6879      	ldr	r1, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f011 ffed 	bl	801c49c <HAL_RTC_SetDate>
 800a4c2:	1e03      	subs	r3, r0, #0
 800a4c4:	d005      	beq.n	800a4d2 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a4c6:	4a13      	ldr	r2, [pc, #76]	@ (800a514 <RTC_SetDate+0x68>)
 800a4c8:	4b13      	ldr	r3, [pc, #76]	@ (800a518 <RTC_SetDate+0x6c>)
 800a4ca:	0019      	movs	r1, r3
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	f009 fce1 	bl	8013e94 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a510 <RTC_SetDate+0x64>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f012 fb43 	bl	801cb64 <HAL_RTCEx_BKUPRead>
 800a4de:	0003      	movs	r3, r0
 800a4e0:	4a0e      	ldr	r2, [pc, #56]	@ (800a51c <RTC_SetDate+0x70>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d010      	beq.n	800a508 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a4e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a520 <RTC_SetDate+0x74>)
 800a4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a524 <RTC_SetDate+0x78>)
 800a4ea:	0019      	movs	r1, r3
 800a4ec:	2003      	movs	r0, #3
 800a4ee:	f009 fcd1 	bl	8013e94 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a4f2:	f010 fe61 	bl	801b1b8 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a4f6:	4b06      	ldr	r3, [pc, #24]	@ (800a510 <RTC_SetDate+0x64>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a08      	ldr	r2, [pc, #32]	@ (800a51c <RTC_SetDate+0x70>)
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	0018      	movs	r0, r3
 800a500:	f012 fb18 	bl	801cb34 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a504:	f010 fe66 	bl	801b1d4 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a508:	46c0      	nop			@ (mov r8, r8)
 800a50a:	46bd      	mov	sp, r7
 800a50c:	b002      	add	sp, #8
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20000e50 	.word	0x20000e50
 800a514:	0802c280 	.word	0x0802c280
 800a518:	0802c27c 	.word	0x0802c27c
 800a51c:	0000bebe 	.word	0x0000bebe
 800a520:	0802c29c 	.word	0x0802c29c
 800a524:	0802c1d8 	.word	0x0802c1d8

0800a528 <RTC_GetTime>:

void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a528:	b590      	push	{r4, r7, lr}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a532:	240f      	movs	r4, #15
 800a534:	193b      	adds	r3, r7, r4
 800a536:	2201      	movs	r2, #1
 800a538:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a53a:	230e      	movs	r3, #14
 800a53c:	18fb      	adds	r3, r7, r3
 800a53e:	2200      	movs	r2, #0
 800a540:	701a      	strb	r2, [r3, #0]
// Battery_Status status;
//  status = powerCheck();
//  if ( status == BATTERY_CRITICAL) {
  if (batteryCharge  < 3.77) {
 800a542:	4b31      	ldr	r3, [pc, #196]	@ (800a608 <RTC_GetTime+0xe0>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	1c18      	adds	r0, r3, #0
 800a548:	f7f9 f9a4 	bl	8003894 <__aeabi_f2d>
 800a54c:	4a2f      	ldr	r2, [pc, #188]	@ (800a60c <RTC_GetTime+0xe4>)
 800a54e:	4b30      	ldr	r3, [pc, #192]	@ (800a610 <RTC_GetTime+0xe8>)
 800a550:	f7f5 ffb4 	bl	80004bc <__aeabi_dcmplt>
 800a554:	1e03      	subs	r3, r0, #0
 800a556:	d004      	beq.n	800a562 <RTC_GetTime+0x3a>
    //    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a558:	193b      	adds	r3, r7, r4
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	193b      	adds	r3, r7, r4
 800a55e:	3201      	adds	r2, #1
 800a560:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a562:	230d      	movs	r3, #13
 800a564:	18fb      	adds	r3, r7, r3
 800a566:	2200      	movs	r2, #0
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	e03f      	b.n	800a5ec <RTC_GetTime+0xc4>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a56c:	4b29      	ldr	r3, [pc, #164]	@ (800a614 <RTC_GetTime+0xec>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	0018      	movs	r0, r3
 800a576:	f011 ff33 	bl	801c3e0 <HAL_RTC_GetTime>
 800a57a:	1e03      	subs	r3, r0, #0
 800a57c:	d005      	beq.n	800a58a <RTC_GetTime+0x62>
      Error("Error getting time from RTC");
 800a57e:	4a26      	ldr	r2, [pc, #152]	@ (800a618 <RTC_GetTime+0xf0>)
 800a580:	4b26      	ldr	r3, [pc, #152]	@ (800a61c <RTC_GetTime+0xf4>)
 800a582:	0019      	movs	r1, r3
 800a584:	2001      	movs	r0, #1
 800a586:	f009 fc85 	bl	8013e94 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a58a:	4b22      	ldr	r3, [pc, #136]	@ (800a614 <RTC_GetTime+0xec>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	0018      	movs	r0, r3
 800a594:	f012 f816 	bl	801c5c4 <HAL_RTC_GetDate>
 800a598:	1e03      	subs	r3, r0, #0
 800a59a:	d005      	beq.n	800a5a8 <RTC_GetTime+0x80>
      Error("Error getting date from RTC");
 800a59c:	4a20      	ldr	r2, [pc, #128]	@ (800a620 <RTC_GetTime+0xf8>)
 800a59e:	4b1f      	ldr	r3, [pc, #124]	@ (800a61c <RTC_GetTime+0xf4>)
 800a5a0:	0019      	movs	r1, r3
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	f009 fc76 	bl	8013e94 <CreateLine>
    }
//    if ( status == BATTERY_CRITICAL) {
    if (batteryCharge  < 3.77) {
 800a5a8:	4b17      	ldr	r3, [pc, #92]	@ (800a608 <RTC_GetTime+0xe0>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	1c18      	adds	r0, r3, #0
 800a5ae:	f7f9 f971 	bl	8003894 <__aeabi_f2d>
 800a5b2:	4a16      	ldr	r2, [pc, #88]	@ (800a60c <RTC_GetTime+0xe4>)
 800a5b4:	4b16      	ldr	r3, [pc, #88]	@ (800a610 <RTC_GetTime+0xe8>)
 800a5b6:	f7f5 ff81 	bl	80004bc <__aeabi_dcmplt>
 800a5ba:	1e03      	subs	r3, r0, #0
 800a5bc:	d010      	beq.n	800a5e0 <RTC_GetTime+0xb8>
      if (prevValue != gTime->Hours) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	210e      	movs	r1, #14
 800a5c4:	187a      	adds	r2, r7, r1
 800a5c6:	7812      	ldrb	r2, [r2, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d018      	beq.n	800a5fe <RTC_GetTime+0xd6>
        prevValue = gTime->Hours;
 800a5cc:	187b      	adds	r3, r7, r1
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	7812      	ldrb	r2, [r2, #0]
 800a5d2:	701a      	strb	r2, [r3, #0]
        t++;
 800a5d4:	210f      	movs	r1, #15
 800a5d6:	187b      	adds	r3, r7, r1
 800a5d8:	781a      	ldrb	r2, [r3, #0]
 800a5da:	187b      	adds	r3, r7, r1
 800a5dc:	3201      	adds	r2, #1
 800a5de:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a5e0:	210d      	movs	r1, #13
 800a5e2:	187b      	adds	r3, r7, r1
 800a5e4:	781a      	ldrb	r2, [r3, #0]
 800a5e6:	187b      	adds	r3, r7, r1
 800a5e8:	3201      	adds	r2, #1
 800a5ea:	701a      	strb	r2, [r3, #0]
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	18fa      	adds	r2, r7, r3
 800a5f0:	230f      	movs	r3, #15
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d3b7      	bcc.n	800a56c <RTC_GetTime+0x44>
 800a5fc:	e000      	b.n	800a600 <RTC_GetTime+0xd8>
      }
      else {
        return;
 800a5fe:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a600:	46bd      	mov	sp, r7
 800a602:	b005      	add	sp, #20
 800a604:	bd90      	pop	{r4, r7, pc}
 800a606:	46c0      	nop			@ (mov r8, r8)
 800a608:	20002158 	.word	0x20002158
 800a60c:	c28f5c29 	.word	0xc28f5c29
 800a610:	400e28f5 	.word	0x400e28f5
 800a614:	20000e50 	.word	0x20000e50
 800a618:	0802c2b4 	.word	0x0802c2b4
 800a61c:	0802c27c 	.word	0x0802c27c
 800a620:	0802c2d0 	.word	0x0802c2d0

0800a624 <getPosixTime>:

// Functie om de tijd uit te lezen
uint32_t getPosixTime(void) {
 800a624:	b580      	push	{r7, lr}
 800a626:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a628:	4a07      	ldr	r2, [pc, #28]	@ (800a648 <getPosixTime+0x24>)
 800a62a:	4b08      	ldr	r3, [pc, #32]	@ (800a64c <getPosixTime+0x28>)
 800a62c:	0011      	movs	r1, r2
 800a62e:	0018      	movs	r0, r3
 800a630:	f7ff ff7a 	bl	800a528 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a634:	4a05      	ldr	r2, [pc, #20]	@ (800a64c <getPosixTime+0x28>)
 800a636:	4b04      	ldr	r3, [pc, #16]	@ (800a648 <getPosixTime+0x24>)
 800a638:	0011      	movs	r1, r2
 800a63a:	0018      	movs	r0, r3
 800a63c:	f000 f974 	bl	800a928 <makeTime>
 800a640:	0003      	movs	r3, r0
}
 800a642:	0018      	movs	r0, r3
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000e68 	.word	0x20000e68
 800a64c:	20000e54 	.word	0x20000e54

0800a650 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a652:	b087      	sub	sp, #28
 800a654:	af04      	add	r7, sp, #16
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a65a:	4a12      	ldr	r2, [pc, #72]	@ (800a6a4 <getUTCfromPosixTime+0x54>)
 800a65c:	4912      	ldr	r1, [pc, #72]	@ (800a6a8 <getUTCfromPosixTime+0x58>)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	0018      	movs	r0, r3
 800a662:	f000 fa2b 	bl	800aabc <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a666:	4b10      	ldr	r3, [pc, #64]	@ (800a6a8 <getUTCfromPosixTime+0x58>)
 800a668:	789b      	ldrb	r3, [r3, #2]
 800a66a:	001e      	movs	r6, r3
 800a66c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a8 <getUTCfromPosixTime+0x58>)
 800a66e:	785b      	ldrb	r3, [r3, #1]
 800a670:	469c      	mov	ip, r3
 800a672:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a8 <getUTCfromPosixTime+0x58>)
 800a674:	78db      	ldrb	r3, [r3, #3]
 800a676:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a678:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a4 <getUTCfromPosixTime+0x54>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a67c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a67e:	4b09      	ldr	r3, [pc, #36]	@ (800a6a4 <getUTCfromPosixTime+0x54>)
 800a680:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a682:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a684:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <getUTCfromPosixTime+0x54>)
 800a686:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a688:	4908      	ldr	r1, [pc, #32]	@ (800a6ac <getUTCfromPosixTime+0x5c>)
 800a68a:	6838      	ldr	r0, [r7, #0]
 800a68c:	9303      	str	r3, [sp, #12]
 800a68e:	9502      	str	r5, [sp, #8]
 800a690:	9401      	str	r4, [sp, #4]
 800a692:	9200      	str	r2, [sp, #0]
 800a694:	4663      	mov	r3, ip
 800a696:	0032      	movs	r2, r6
 800a698:	f01b ff18 	bl	80264cc <siprintf>
}
 800a69c:	46c0      	nop			@ (mov r8, r8)
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	b003      	add	sp, #12
 800a6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a4:	20000e54 	.word	0x20000e54
 800a6a8:	20000e68 	.word	0x20000e68
 800a6ac:	0802c2ec 	.word	0x0802c2ec

0800a6b0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a6b8:	4b10      	ldr	r3, [pc, #64]	@ (800a6fc <RTC_SetWakeUpTimer+0x4c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f012 f99d 	bl	801c9fc <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a6c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a6fc <RTC_SetWakeUpTimer+0x4c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	22ff      	movs	r2, #255	@ 0xff
 800a6cc:	401a      	ands	r2, r3
 800a6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a6fc <RTC_SetWakeUpTimer+0x4c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	490a      	ldr	r1, [pc, #40]	@ (800a700 <RTC_SetWakeUpTimer+0x50>)
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a6da:	4b0a      	ldr	r3, [pc, #40]	@ (800a704 <RTC_SetWakeUpTimer+0x54>)
 800a6dc:	2280      	movs	r2, #128	@ 0x80
 800a6de:	0352      	lsls	r2, r2, #13
 800a6e0:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a6e2:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <RTC_SetWakeUpTimer+0x4c>)
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	0019      	movs	r1, r3
 800a6ee:	f012 f8ad 	bl	801c84c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a6f2:	46c0      	nop			@ (mov r8, r8)
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	b002      	add	sp, #8
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	46c0      	nop			@ (mov r8, r8)
 800a6fc:	20000e50 	.word	0x20000e50
 800a700:	fffffb7f 	.word	0xfffffb7f
 800a704:	40010400 	.word	0x40010400

0800a708 <Enter_Stop_Mode_for_empty_battery>:
  HAL_PWR_EnterSTANDBYMode(); // Not such a good idea, the esp is powered when gpio is high impedance
}
*/

void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	0002      	movs	r2, r0
 800a710:	1dbb      	adds	r3, r7, #6
 800a712:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a714:	4b22      	ldr	r3, [pc, #136]	@ (800a7a0 <Enter_Stop_Mode_for_empty_battery+0x98>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a71c:	f004 f856 	bl	800e7cc <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a720:	4b20      	ldr	r3, [pc, #128]	@ (800a7a4 <Enter_Stop_Mode_for_empty_battery+0x9c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	1c18      	adds	r0, r3, #0
 800a726:	f7f9 f8b5 	bl	8003894 <__aeabi_f2d>
 800a72a:	0002      	movs	r2, r0
 800a72c:	000b      	movs	r3, r1
 800a72e:	481e      	ldr	r0, [pc, #120]	@ (800a7a8 <Enter_Stop_Mode_for_empty_battery+0xa0>)
 800a730:	491e      	ldr	r1, [pc, #120]	@ (800a7ac <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a732:	9200      	str	r2, [sp, #0]
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	0002      	movs	r2, r0
 800a738:	2002      	movs	r0, #2
 800a73a:	f009 fbab 	bl	8013e94 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a73e:	1dbb      	adds	r3, r7, #6
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	4a1b      	ldr	r2, [pc, #108]	@ (800a7b0 <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a744:	491b      	ldr	r1, [pc, #108]	@ (800a7b4 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a746:	2003      	movs	r0, #3
 800a748:	f009 fba4 	bl	8013e94 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a74c:	f7ff ff6a 	bl	800a624 <getPosixTime>
 800a750:	0002      	movs	r2, r0
 800a752:	1dbb      	adds	r3, r7, #6
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	18d3      	adds	r3, r2, r3
 800a758:	4a17      	ldr	r2, [pc, #92]	@ (800a7b8 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a75a:	0011      	movs	r1, r2
 800a75c:	0018      	movs	r0, r3
 800a75e:	f7ff ff77 	bl	800a650 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a762:	4b15      	ldr	r3, [pc, #84]	@ (800a7b8 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a764:	4a15      	ldr	r2, [pc, #84]	@ (800a7bc <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a766:	4911      	ldr	r1, [pc, #68]	@ (800a7ac <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a768:	2002      	movs	r0, #2
 800a76a:	f009 fb93 	bl	8013e94 <CreateLine>
  HAL_Delay(100);
 800a76e:	2064      	movs	r0, #100	@ 0x64
 800a770:	f00a f91a 	bl	80149a8 <HAL_Delay>
  HAL_SuspendTick();
 800a774:	f00a f93c 	bl	80149f0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a778:	1dbb      	adds	r3, r7, #6
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	0018      	movs	r0, r3
 800a77e:	f7ff ff97 	bl	800a6b0 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a782:	2101      	movs	r1, #1
 800a784:	2001      	movs	r0, #1
 800a786:	f010 fd35 	bl	801b1f4 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a78a:	f002 fd05 	bl	800d198 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a78e:	f00a f93d 	bl	8014a0c <HAL_ResumeTick>
  showTime();
 800a792:	f7ff fbad 	bl	8009ef0 <showTime>
}
 800a796:	46c0      	nop			@ (mov r8, r8)
 800a798:	46bd      	mov	sp, r7
 800a79a:	b002      	add	sp, #8
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	46c0      	nop			@ (mov r8, r8)
 800a7a0:	200011bd 	.word	0x200011bd
 800a7a4:	20002158 	.word	0x20002158
 800a7a8:	0802c340 	.word	0x0802c340
 800a7ac:	0802c19c 	.word	0x0802c19c
 800a7b0:	0802c358 	.word	0x0802c358
 800a7b4:	0802c1d8 	.word	0x0802c1d8
 800a7b8:	20000e6c 	.word	0x20000e6c
 800a7bc:	0802c37c 	.word	0x0802c37c

0800a7c0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	0002      	movs	r2, r0
 800a7c8:	1dbb      	adds	r3, r7, #6
 800a7ca:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a7cc:	4b45      	ldr	r3, [pc, #276]	@ (800a8e4 <Enter_Stop_Mode+0x124>)
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a7d4:	f003 fffa 	bl	800e7cc <sen5x_Power_Off>
  }
//  Info("Battery voltage %.02fV", batteryCharge);
  batteryChargeCheck();
 800a7d8:	f007 ff80 	bl	80126dc <batteryChargeCheck>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a7dc:	1dbb      	adds	r3, r7, #6
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	4a41      	ldr	r2, [pc, #260]	@ (800a8e8 <Enter_Stop_Mode+0x128>)
 800a7e2:	4942      	ldr	r1, [pc, #264]	@ (800a8ec <Enter_Stop_Mode+0x12c>)
 800a7e4:	2003      	movs	r0, #3
 800a7e6:	f009 fb55 	bl	8013e94 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a7ea:	f7ff ff1b 	bl	800a624 <getPosixTime>
 800a7ee:	0002      	movs	r2, r0
 800a7f0:	1dbb      	adds	r3, r7, #6
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	18d3      	adds	r3, r2, r3
 800a7f6:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f0 <Enter_Stop_Mode+0x130>)
 800a7f8:	0011      	movs	r1, r2
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	f7ff ff28 	bl	800a650 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a800:	4b3b      	ldr	r3, [pc, #236]	@ (800a8f0 <Enter_Stop_Mode+0x130>)
 800a802:	4a3c      	ldr	r2, [pc, #240]	@ (800a8f4 <Enter_Stop_Mode+0x134>)
 800a804:	493c      	ldr	r1, [pc, #240]	@ (800a8f8 <Enter_Stop_Mode+0x138>)
 800a806:	2002      	movs	r0, #2
 800a808:	f009 fb44 	bl	8013e94 <CreateLine>
  HAL_Delay(100);
 800a80c:	2064      	movs	r0, #100	@ 0x64
 800a80e:	f00a f8cb 	bl	80149a8 <HAL_Delay>
  HAL_SuspendTick();
 800a812:	f00a f8ed 	bl	80149f0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a816:	1dbb      	adds	r3, r7, #6
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	0018      	movs	r0, r3
 800a81c:	f7ff ff48 	bl	800a6b0 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a820:	2101      	movs	r1, #1
 800a822:	2001      	movs	r0, #1
 800a824:	f010 fce6 	bl	801b1f4 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a828:	f002 fcb6 	bl	800d198 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a82c:	f00a f8ee 	bl	8014a0c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a830:	1dbb      	adds	r3, r7, #6
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	0018      	movs	r0, r3
 800a836:	f003 ff3d 	bl	800e6b4 <sen5x_enable>
 800a83a:	1e03      	subs	r3, r0, #0
 800a83c:	d01e      	beq.n	800a87c <Enter_Stop_Mode+0xbc>
    showTime();
 800a83e:	f7ff fb57 	bl	8009ef0 <showTime>
    set_light_on_state();
 800a842:	f004 fc93 	bl	800f16c <set_light_on_state>
    if (!userToggle) {
 800a846:	4b2d      	ldr	r3, [pc, #180]	@ (800a8fc <Enter_Stop_Mode+0x13c>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2201      	movs	r2, #1
 800a84c:	4053      	eors	r3, r2
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d013      	beq.n	800a87c <Enter_Stop_Mode+0xbc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a854:	201c      	movs	r0, #28
 800a856:	f7ff ff2b 	bl	800a6b0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a85a:	4a23      	ldr	r2, [pc, #140]	@ (800a8e8 <Enter_Stop_Mode+0x128>)
 800a85c:	4923      	ldr	r1, [pc, #140]	@ (800a8ec <Enter_Stop_Mode+0x12c>)
 800a85e:	231c      	movs	r3, #28
 800a860:	2003      	movs	r0, #3
 800a862:	f009 fb17 	bl	8013e94 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a866:	2101      	movs	r1, #1
 800a868:	2001      	movs	r0, #1
 800a86a:	f010 fcc3 	bl	801b1f4 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a86e:	f002 fc93 	bl	800d198 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a872:	f00a f8cb 	bl	8014a0c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a876:	2000      	movs	r0, #0
 800a878:	f003 fefa 	bl	800e670 <setsen5xReadTimer>
    }
  }
  showTime();
 800a87c:	f7ff fb38 	bl	8009ef0 <showTime>
  EnabledConnectedDevices();
 800a880:	f003 fa8a 	bl	800dd98 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a884:	f003 fb8a 	bl	800df9c <ResetDBACalculator>
  ResetSGP40samplecounter();
 800a888:	f006 fae8 	bl	8010e5c <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a88c:	f7f9 f956 	bl	8003b3c <ResetENS160samplecounter>
  SetBatteryReadTimer(0);
 800a890:	2000      	movs	r0, #0
 800a892:	f002 f965 	bl	800cb60 <SetBatteryReadTimer>
  setsen5xSamplecounter(0);
 800a896:	2000      	movs	r0, #0
 800a898:	f003 fefc 	bl	800e694 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a89c:	4b18      	ldr	r3, [pc, #96]	@ (800a900 <Enter_Stop_Mode+0x140>)
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f7fa f800 	bl	80048a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a8a4:	201e      	movs	r0, #30
 800a8a6:	f006 fac7 	bl	8010e38 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a8aa:	205a      	movs	r0, #90	@ 0x5a
 800a8ac:	f009 fd90 	bl	80143d0 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a8b0:	203c      	movs	r0, #60	@ 0x3c
 800a8b2:	f000 fb95 	bl	800afe0 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a8b6:	205a      	movs	r0, #90	@ 0x5a
 800a8b8:	f000 ff6e 	bl	800b798 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a8bc:	2000      	movs	r0, #0
 800a8be:	f7f9 f947 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	f003 fb58 	bl	800df78 <setMICTimeStamp>
  ESPTransmitDone = false;
 800a8c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a904 <Enter_Stop_Mode+0x144>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a8ce:	f00a f861 	bl	8014994 <HAL_GetTick>
 800a8d2:	0003      	movs	r3, r0
 800a8d4:	4a0a      	ldr	r2, [pc, #40]	@ (800a900 <Enter_Stop_Mode+0x140>)
 800a8d6:	189a      	adds	r2, r3, r2
 800a8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a908 <Enter_Stop_Mode+0x148>)
 800a8da:	601a      	str	r2, [r3, #0]
}
 800a8dc:	46c0      	nop			@ (mov r8, r8)
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	b002      	add	sp, #8
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	200011bd 	.word	0x200011bd
 800a8e8:	0802c358 	.word	0x0802c358
 800a8ec:	0802c1d8 	.word	0x0802c1d8
 800a8f0:	20000e6c 	.word	0x20000e6c
 800a8f4:	0802c37c 	.word	0x0802c37c
 800a8f8:	0802c19c 	.word	0x0802c19c
 800a8fc:	2000214e 	.word	0x2000214e
 800a900:	00001194 	.word	0x00001194
 800a904:	200005b3 	.word	0x200005b3
 800a908:	20001114 	.word	0x20001114

0800a90c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a914:	4b03      	ldr	r3, [pc, #12]	@ (800a924 <InitClock+0x18>)
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	601a      	str	r2, [r3, #0]
}
 800a91a:	46c0      	nop			@ (mov r8, r8)
 800a91c:	46bd      	mov	sp, r7
 800a91e:	b002      	add	sp, #8
 800a920:	bd80      	pop	{r7, pc}
 800a922:	46c0      	nop			@ (mov r8, r8)
 800a924:	20000e50 	.word	0x20000e50

0800a928 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	78db      	ldrb	r3, [r3, #3]
 800a936:	001a      	movs	r2, r3
 800a938:	0013      	movs	r3, r2
 800a93a:	025b      	lsls	r3, r3, #9
 800a93c:	189b      	adds	r3, r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	189b      	adds	r3, r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	189b      	adds	r3, r3, r2
 800a946:	011a      	lsls	r2, r3, #4
 800a948:	1ad2      	subs	r2, r2, r3
 800a94a:	01d3      	lsls	r3, r2, #7
 800a94c:	001a      	movs	r2, r3
 800a94e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e028      	b.n	800a9a8 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4a53      	ldr	r2, [pc, #332]	@ (800aaa8 <makeTime+0x180>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	db21      	blt.n	800a9a2 <makeTime+0x7a>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4a52      	ldr	r2, [pc, #328]	@ (800aaac <makeTime+0x184>)
 800a962:	4694      	mov	ip, r2
 800a964:	4463      	add	r3, ip
 800a966:	001a      	movs	r2, r3
 800a968:	2303      	movs	r3, #3
 800a96a:	4013      	ands	r3, r2
 800a96c:	d119      	bne.n	800a9a2 <makeTime+0x7a>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4a4e      	ldr	r2, [pc, #312]	@ (800aaac <makeTime+0x184>)
 800a972:	4694      	mov	ip, r2
 800a974:	4463      	add	r3, ip
 800a976:	2164      	movs	r1, #100	@ 0x64
 800a978:	0018      	movs	r0, r3
 800a97a:	f7f5 fd83 	bl	8000484 <__aeabi_idivmod>
 800a97e:	1e0b      	subs	r3, r1, #0
 800a980:	d10a      	bne.n	800a998 <makeTime+0x70>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4a49      	ldr	r2, [pc, #292]	@ (800aaac <makeTime+0x184>)
 800a986:	4694      	mov	ip, r2
 800a988:	4463      	add	r3, ip
 800a98a:	22c8      	movs	r2, #200	@ 0xc8
 800a98c:	0051      	lsls	r1, r2, #1
 800a98e:	0018      	movs	r0, r3
 800a990:	f7f5 fd78 	bl	8000484 <__aeabi_idivmod>
 800a994:	1e0b      	subs	r3, r1, #0
 800a996:	d104      	bne.n	800a9a2 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	4a45      	ldr	r2, [pc, #276]	@ (800aab0 <makeTime+0x188>)
 800a99c:	4694      	mov	ip, r2
 800a99e:	4463      	add	r3, ip
 800a9a0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	78db      	ldrb	r3, [r3, #3]
 800a9ac:	001a      	movs	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	dbd0      	blt.n	800a956 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e03c      	b.n	800aa34 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d125      	bne.n	800aa0c <makeTime+0xe4>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	78db      	ldrb	r3, [r3, #3]
 800a9c4:	4a39      	ldr	r2, [pc, #228]	@ (800aaac <makeTime+0x184>)
 800a9c6:	4694      	mov	ip, r2
 800a9c8:	4463      	add	r3, ip
 800a9ca:	001a      	movs	r2, r3
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	d11c      	bne.n	800aa0c <makeTime+0xe4>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	78db      	ldrb	r3, [r3, #3]
 800a9d6:	4a35      	ldr	r2, [pc, #212]	@ (800aaac <makeTime+0x184>)
 800a9d8:	4694      	mov	ip, r2
 800a9da:	4463      	add	r3, ip
 800a9dc:	2164      	movs	r1, #100	@ 0x64
 800a9de:	0018      	movs	r0, r3
 800a9e0:	f7f5 fd50 	bl	8000484 <__aeabi_idivmod>
 800a9e4:	1e0b      	subs	r3, r1, #0
 800a9e6:	d10b      	bne.n	800aa00 <makeTime+0xd8>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	78db      	ldrb	r3, [r3, #3]
 800a9ec:	4a2f      	ldr	r2, [pc, #188]	@ (800aaac <makeTime+0x184>)
 800a9ee:	4694      	mov	ip, r2
 800a9f0:	4463      	add	r3, ip
 800a9f2:	22c8      	movs	r2, #200	@ 0xc8
 800a9f4:	0051      	lsls	r1, r2, #1
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	f7f5 fd44 	bl	8000484 <__aeabi_idivmod>
 800a9fc:	1e0b      	subs	r3, r1, #0
 800a9fe:	d105      	bne.n	800aa0c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	4a2c      	ldr	r2, [pc, #176]	@ (800aab4 <makeTime+0x18c>)
 800aa04:	4694      	mov	ip, r2
 800aa06:	4463      	add	r3, ip
 800aa08:	60bb      	str	r3, [r7, #8]
 800aa0a:	e010      	b.n	800aa2e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	4a29      	ldr	r2, [pc, #164]	@ (800aab8 <makeTime+0x190>)
 800aa12:	5cd3      	ldrb	r3, [r2, r3]
 800aa14:	001a      	movs	r2, r3
 800aa16:	0013      	movs	r3, r2
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	189b      	adds	r3, r3, r2
 800aa1c:	011a      	lsls	r2, r3, #4
 800aa1e:	1ad2      	subs	r2, r2, r3
 800aa20:	0113      	lsls	r3, r2, #4
 800aa22:	1a9b      	subs	r3, r3, r2
 800aa24:	01db      	lsls	r3, r3, #7
 800aa26:	001a      	movs	r2, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	189b      	adds	r3, r3, r2
 800aa2c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	785b      	ldrb	r3, [r3, #1]
 800aa38:	001a      	movs	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	dbbc      	blt.n	800a9ba <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	789b      	ldrb	r3, [r3, #2]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	001a      	movs	r2, r3
 800aa48:	0013      	movs	r3, r2
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	189b      	adds	r3, r3, r2
 800aa4e:	011a      	lsls	r2, r3, #4
 800aa50:	1ad2      	subs	r2, r2, r3
 800aa52:	0113      	lsls	r3, r2, #4
 800aa54:	1a9b      	subs	r3, r3, r2
 800aa56:	01db      	lsls	r3, r3, #7
 800aa58:	001a      	movs	r2, r3
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	189b      	adds	r3, r3, r2
 800aa5e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	001a      	movs	r2, r3
 800aa66:	0013      	movs	r3, r2
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	011a      	lsls	r2, r3, #4
 800aa6e:	1ad2      	subs	r2, r2, r3
 800aa70:	0113      	lsls	r3, r2, #4
 800aa72:	001a      	movs	r2, r3
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	189b      	adds	r3, r3, r2
 800aa78:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	785b      	ldrb	r3, [r3, #1]
 800aa7e:	001a      	movs	r2, r3
 800aa80:	0013      	movs	r3, r2
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	001a      	movs	r2, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	189b      	adds	r3, r3, r2
 800aa8e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	789b      	ldrb	r3, [r3, #2]
 800aa94:	001a      	movs	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	189b      	adds	r3, r3, r2
 800aa9a:	60bb      	str	r3, [r7, #8]
  return seconds;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
}
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	b004      	add	sp, #16
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	46c0      	nop			@ (mov r8, r8)
 800aaa8:	fffff84f 	.word	0xfffff84f
 800aaac:	000007b2 	.word	0x000007b2
 800aab0:	00015180 	.word	0x00015180
 800aab4:	00263b80 	.word	0x00263b80
 800aab8:	0802e60c 	.word	0x0802e60c

0800aabc <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b089      	sub	sp, #36	@ 0x24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	213c      	movs	r1, #60	@ 0x3c
 800aad0:	0018      	movs	r0, r3
 800aad2:	f7f5 fbed 	bl	80002b0 <__aeabi_uidivmod>
 800aad6:	000b      	movs	r3, r1
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	213c      	movs	r1, #60	@ 0x3c
 800aae2:	0018      	movs	r0, r3
 800aae4:	f7f5 fb5e 	bl	80001a4 <__udivsi3>
 800aae8:	0003      	movs	r3, r0
 800aaea:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	213c      	movs	r1, #60	@ 0x3c
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	f7f5 fbdd 	bl	80002b0 <__aeabi_uidivmod>
 800aaf6:	000b      	movs	r3, r1
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	213c      	movs	r1, #60	@ 0x3c
 800ab02:	0018      	movs	r0, r3
 800ab04:	f7f5 fb4e 	bl	80001a4 <__udivsi3>
 800ab08:	0003      	movs	r3, r0
 800ab0a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	2118      	movs	r1, #24
 800ab10:	0018      	movs	r0, r3
 800ab12:	f7f5 fbcd 	bl	80002b0 <__aeabi_uidivmod>
 800ab16:	000b      	movs	r3, r1
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2118      	movs	r1, #24
 800ab22:	0018      	movs	r0, r3
 800ab24:	f7f5 fb3e 	bl	80001a4 <__udivsi3>
 800ab28:	0003      	movs	r3, r0
 800ab2a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	2107      	movs	r1, #7
 800ab32:	0018      	movs	r0, r3
 800ab34:	f7f5 fbbc 	bl	80002b0 <__aeabi_uidivmod>
 800ab38:	000b      	movs	r3, r1
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	701a      	strb	r2, [r3, #0]
  year = 0;
 800ab44:	231f      	movs	r3, #31
 800ab46:	18fb      	adds	r3, r7, r3
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800ab50:	e005      	b.n	800ab5e <breakPosixTime+0xa2>
    year++;
 800ab52:	211f      	movs	r1, #31
 800ab54:	187b      	adds	r3, r7, r1
 800ab56:	781a      	ldrb	r2, [r3, #0]
 800ab58:	187b      	adds	r3, r7, r1
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800ab5e:	241f      	movs	r4, #31
 800ab60:	193b      	adds	r3, r7, r4
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	4a64      	ldr	r2, [pc, #400]	@ (800acf8 <breakPosixTime+0x23c>)
 800ab66:	4694      	mov	ip, r2
 800ab68:	4463      	add	r3, ip
 800ab6a:	001a      	movs	r2, r3
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	4013      	ands	r3, r2
 800ab70:	d119      	bne.n	800aba6 <breakPosixTime+0xea>
 800ab72:	193b      	adds	r3, r7, r4
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	4a60      	ldr	r2, [pc, #384]	@ (800acf8 <breakPosixTime+0x23c>)
 800ab78:	4694      	mov	ip, r2
 800ab7a:	4463      	add	r3, ip
 800ab7c:	2164      	movs	r1, #100	@ 0x64
 800ab7e:	0018      	movs	r0, r3
 800ab80:	f7f5 fc80 	bl	8000484 <__aeabi_idivmod>
 800ab84:	1e0b      	subs	r3, r1, #0
 800ab86:	d10b      	bne.n	800aba0 <breakPosixTime+0xe4>
 800ab88:	193b      	adds	r3, r7, r4
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	4a5a      	ldr	r2, [pc, #360]	@ (800acf8 <breakPosixTime+0x23c>)
 800ab8e:	4694      	mov	ip, r2
 800ab90:	4463      	add	r3, ip
 800ab92:	22c8      	movs	r2, #200	@ 0xc8
 800ab94:	0051      	lsls	r1, r2, #1
 800ab96:	0018      	movs	r0, r3
 800ab98:	f7f5 fc74 	bl	8000484 <__aeabi_idivmod>
 800ab9c:	1e0b      	subs	r3, r1, #0
 800ab9e:	d102      	bne.n	800aba6 <breakPosixTime+0xea>
 800aba0:	23b7      	movs	r3, #183	@ 0xb7
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	e001      	b.n	800abaa <breakPosixTime+0xee>
 800aba6:	236e      	movs	r3, #110	@ 0x6e
 800aba8:	33ff      	adds	r3, #255	@ 0xff
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	18d3      	adds	r3, r2, r3
 800abae:	617b      	str	r3, [r7, #20]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d9cc      	bls.n	800ab52 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	241f      	movs	r4, #31
 800abbc:	193a      	adds	r2, r7, r4
 800abbe:	7812      	ldrb	r2, [r2, #0]
 800abc0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800abc2:	193b      	adds	r3, r7, r4
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	4a4c      	ldr	r2, [pc, #304]	@ (800acf8 <breakPosixTime+0x23c>)
 800abc8:	4694      	mov	ip, r2
 800abca:	4463      	add	r3, ip
 800abcc:	001a      	movs	r2, r3
 800abce:	2303      	movs	r3, #3
 800abd0:	4013      	ands	r3, r2
 800abd2:	d119      	bne.n	800ac08 <breakPosixTime+0x14c>
 800abd4:	193b      	adds	r3, r7, r4
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	4a47      	ldr	r2, [pc, #284]	@ (800acf8 <breakPosixTime+0x23c>)
 800abda:	4694      	mov	ip, r2
 800abdc:	4463      	add	r3, ip
 800abde:	2164      	movs	r1, #100	@ 0x64
 800abe0:	0018      	movs	r0, r3
 800abe2:	f7f5 fc4f 	bl	8000484 <__aeabi_idivmod>
 800abe6:	1e0b      	subs	r3, r1, #0
 800abe8:	d10b      	bne.n	800ac02 <breakPosixTime+0x146>
 800abea:	193b      	adds	r3, r7, r4
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	4a42      	ldr	r2, [pc, #264]	@ (800acf8 <breakPosixTime+0x23c>)
 800abf0:	4694      	mov	ip, r2
 800abf2:	4463      	add	r3, ip
 800abf4:	22c8      	movs	r2, #200	@ 0xc8
 800abf6:	0051      	lsls	r1, r2, #1
 800abf8:	0018      	movs	r0, r3
 800abfa:	f7f5 fc43 	bl	8000484 <__aeabi_idivmod>
 800abfe:	1e0b      	subs	r3, r1, #0
 800ac00:	d102      	bne.n	800ac08 <breakPosixTime+0x14c>
 800ac02:	23b7      	movs	r3, #183	@ 0xb7
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	e001      	b.n	800ac0c <breakPosixTime+0x150>
 800ac08:	236e      	movs	r3, #110	@ 0x6e
 800ac0a:	33ff      	adds	r3, #255	@ 0xff
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800ac12:	69ba      	ldr	r2, [r7, #24]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	61bb      	str	r3, [r7, #24]

  days=0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
  month=0;
 800ac1e:	211e      	movs	r1, #30
 800ac20:	187b      	adds	r3, r7, r1
 800ac22:	2200      	movs	r2, #0
 800ac24:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800ac26:	231d      	movs	r3, #29
 800ac28:	18fb      	adds	r3, r7, r3
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800ac2e:	187b      	adds	r3, r7, r1
 800ac30:	2200      	movs	r2, #0
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	e048      	b.n	800acc8 <breakPosixTime+0x20c>
    if (month==1) { // february
 800ac36:	231e      	movs	r3, #30
 800ac38:	18fb      	adds	r3, r7, r3
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d12a      	bne.n	800ac96 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800ac40:	241f      	movs	r4, #31
 800ac42:	193b      	adds	r3, r7, r4
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	4a2c      	ldr	r2, [pc, #176]	@ (800acf8 <breakPosixTime+0x23c>)
 800ac48:	4694      	mov	ip, r2
 800ac4a:	4463      	add	r3, ip
 800ac4c:	001a      	movs	r2, r3
 800ac4e:	2303      	movs	r3, #3
 800ac50:	4013      	ands	r3, r2
 800ac52:	d11b      	bne.n	800ac8c <breakPosixTime+0x1d0>
 800ac54:	193b      	adds	r3, r7, r4
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	4a27      	ldr	r2, [pc, #156]	@ (800acf8 <breakPosixTime+0x23c>)
 800ac5a:	4694      	mov	ip, r2
 800ac5c:	4463      	add	r3, ip
 800ac5e:	2164      	movs	r1, #100	@ 0x64
 800ac60:	0018      	movs	r0, r3
 800ac62:	f7f5 fc0f 	bl	8000484 <__aeabi_idivmod>
 800ac66:	1e0b      	subs	r3, r1, #0
 800ac68:	d10b      	bne.n	800ac82 <breakPosixTime+0x1c6>
 800ac6a:	193b      	adds	r3, r7, r4
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	4a22      	ldr	r2, [pc, #136]	@ (800acf8 <breakPosixTime+0x23c>)
 800ac70:	4694      	mov	ip, r2
 800ac72:	4463      	add	r3, ip
 800ac74:	22c8      	movs	r2, #200	@ 0xc8
 800ac76:	0051      	lsls	r1, r2, #1
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f7f5 fc03 	bl	8000484 <__aeabi_idivmod>
 800ac7e:	1e0b      	subs	r3, r1, #0
 800ac80:	d104      	bne.n	800ac8c <breakPosixTime+0x1d0>
        monthLength=29;
 800ac82:	231d      	movs	r3, #29
 800ac84:	18fb      	adds	r3, r7, r3
 800ac86:	221d      	movs	r2, #29
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	e00c      	b.n	800aca6 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800ac8c:	231d      	movs	r3, #29
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	221c      	movs	r2, #28
 800ac92:	701a      	strb	r2, [r3, #0]
 800ac94:	e007      	b.n	800aca6 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800ac96:	231e      	movs	r3, #30
 800ac98:	18fb      	adds	r3, r7, r3
 800ac9a:	781a      	ldrb	r2, [r3, #0]
 800ac9c:	231d      	movs	r3, #29
 800ac9e:	18fb      	adds	r3, r7, r3
 800aca0:	4916      	ldr	r1, [pc, #88]	@ (800acfc <breakPosixTime+0x240>)
 800aca2:	5c8a      	ldrb	r2, [r1, r2]
 800aca4:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800aca6:	211d      	movs	r1, #29
 800aca8:	187b      	adds	r3, r7, r1
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d310      	bcc.n	800acd4 <breakPosixTime+0x218>
      time -= monthLength;
 800acb2:	187b      	adds	r3, r7, r1
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800acbc:	211e      	movs	r1, #30
 800acbe:	187b      	adds	r3, r7, r1
 800acc0:	781a      	ldrb	r2, [r3, #0]
 800acc2:	187b      	adds	r3, r7, r1
 800acc4:	3201      	adds	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	231e      	movs	r3, #30
 800acca:	18fb      	adds	r3, r7, r3
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b0b      	cmp	r3, #11
 800acd0:	d9b1      	bls.n	800ac36 <breakPosixTime+0x17a>
 800acd2:	e000      	b.n	800acd6 <breakPosixTime+0x21a>
    } else {
        break;
 800acd4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800acd6:	231e      	movs	r3, #30
 800acd8:	18fb      	adds	r3, r7, r3
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	3301      	adds	r3, #1
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	3301      	adds	r3, #1
 800acea:	b2da      	uxtb	r2, r3
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	709a      	strb	r2, [r3, #2]
}
 800acf0:	46c0      	nop			@ (mov r8, r8)
 800acf2:	46bd      	mov	sp, r7
 800acf4:	b009      	add	sp, #36	@ 0x24
 800acf6:	bd90      	pop	{r4, r7, pc}
 800acf8:	000007b2 	.word	0x000007b2
 800acfc:	0802e60c 	.word	0x0802e60c

0800ad00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ad06:	003b      	movs	r3, r7
 800ad08:	0018      	movs	r0, r3
 800ad0a:	2308      	movs	r3, #8
 800ad0c:	001a      	movs	r2, r3
 800ad0e:	2100      	movs	r1, #0
 800ad10:	f01b fd24 	bl	802675c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ad14:	4b30      	ldr	r3, [pc, #192]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad16:	4a31      	ldr	r2, [pc, #196]	@ (800addc <MX_ADC_Init+0xdc>)
 800ad18:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ad1a:	4b2f      	ldr	r3, [pc, #188]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ad20:	4b2d      	ldr	r3, [pc, #180]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad22:	22c0      	movs	r2, #192	@ 0xc0
 800ad24:	0612      	lsls	r2, r2, #24
 800ad26:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ad28:	4b2b      	ldr	r3, [pc, #172]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ad2e:	4b2a      	ldr	r3, [pc, #168]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ad34:	4b28      	ldr	r3, [pc, #160]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad36:	2201      	movs	r2, #1
 800ad38:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ad3a:	4b27      	ldr	r3, [pc, #156]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ad40:	4b25      	ldr	r3, [pc, #148]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad42:	2220      	movs	r2, #32
 800ad44:	2100      	movs	r1, #0
 800ad46:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800ad48:	4b23      	ldr	r3, [pc, #140]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad4a:	2221      	movs	r2, #33	@ 0x21
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ad50:	4b21      	ldr	r3, [pc, #132]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ad56:	4b20      	ldr	r3, [pc, #128]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad58:	22c2      	movs	r2, #194	@ 0xc2
 800ad5a:	32ff      	adds	r2, #255	@ 0xff
 800ad5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800ad5e:	4b1e      	ldr	r3, [pc, #120]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad60:	222c      	movs	r2, #44	@ 0x2c
 800ad62:	2100      	movs	r1, #0
 800ad64:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ad66:	4b1c      	ldr	r3, [pc, #112]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad68:	2204      	movs	r2, #4
 800ad6a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ad6c:	4b1a      	ldr	r3, [pc, #104]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800ad72:	4b19      	ldr	r3, [pc, #100]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800ad78:	4b17      	ldr	r3, [pc, #92]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800ad7e:	4b16      	ldr	r3, [pc, #88]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800ad84:	4b14      	ldr	r3, [pc, #80]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ad86:	0018      	movs	r0, r3
 800ad88:	f009 fe4e 	bl	8014a28 <HAL_ADC_Init>
 800ad8c:	1e03      	subs	r3, r0, #0
 800ad8e:	d001      	beq.n	800ad94 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800ad90:	f002 fb6e 	bl	800d470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ad94:	003b      	movs	r3, r7
 800ad96:	4a12      	ldr	r2, [pc, #72]	@ (800ade0 <MX_ADC_Init+0xe0>)
 800ad98:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ad9a:	003b      	movs	r3, r7
 800ad9c:	2280      	movs	r2, #128	@ 0x80
 800ad9e:	0152      	lsls	r2, r2, #5
 800ada0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800ada2:	003a      	movs	r2, r7
 800ada4:	4b0c      	ldr	r3, [pc, #48]	@ (800add8 <MX_ADC_Init+0xd8>)
 800ada6:	0011      	movs	r1, r2
 800ada8:	0018      	movs	r0, r3
 800adaa:	f00a f8ad 	bl	8014f08 <HAL_ADC_ConfigChannel>
 800adae:	1e03      	subs	r3, r0, #0
 800adb0:	d001      	beq.n	800adb6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800adb2:	f002 fb5d 	bl	800d470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800adb6:	003b      	movs	r3, r7
 800adb8:	4a0a      	ldr	r2, [pc, #40]	@ (800ade4 <MX_ADC_Init+0xe4>)
 800adba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800adbc:	003a      	movs	r2, r7
 800adbe:	4b06      	ldr	r3, [pc, #24]	@ (800add8 <MX_ADC_Init+0xd8>)
 800adc0:	0011      	movs	r1, r2
 800adc2:	0018      	movs	r0, r3
 800adc4:	f00a f8a0 	bl	8014f08 <HAL_ADC_ConfigChannel>
 800adc8:	1e03      	subs	r3, r0, #0
 800adca:	d001      	beq.n	800add0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800adcc:	f002 fb50 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800add0:	46c0      	nop			@ (mov r8, r8)
 800add2:	46bd      	mov	sp, r7
 800add4:	b002      	add	sp, #8
 800add6:	bd80      	pop	{r7, pc}
 800add8:	20000e84 	.word	0x20000e84
 800addc:	40012400 	.word	0x40012400
 800ade0:	38004000 	.word	0x38004000
 800ade4:	3c008000 	.word	0x3c008000

0800ade8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ade8:	b590      	push	{r4, r7, lr}
 800adea:	b089      	sub	sp, #36	@ 0x24
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adf0:	240c      	movs	r4, #12
 800adf2:	193b      	adds	r3, r7, r4
 800adf4:	0018      	movs	r0, r3
 800adf6:	2314      	movs	r3, #20
 800adf8:	001a      	movs	r2, r3
 800adfa:	2100      	movs	r1, #0
 800adfc:	f01b fcae 	bl	802675c <memset>
  if(adcHandle->Instance==ADC1)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a14      	ldr	r2, [pc, #80]	@ (800ae58 <HAL_ADC_MspInit+0x70>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d121      	bne.n	800ae4e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ae0a:	4b14      	ldr	r3, [pc, #80]	@ (800ae5c <HAL_ADC_MspInit+0x74>)
 800ae0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae0e:	4b13      	ldr	r3, [pc, #76]	@ (800ae5c <HAL_ADC_MspInit+0x74>)
 800ae10:	2180      	movs	r1, #128	@ 0x80
 800ae12:	0089      	lsls	r1, r1, #2
 800ae14:	430a      	orrs	r2, r1
 800ae16:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae18:	4b10      	ldr	r3, [pc, #64]	@ (800ae5c <HAL_ADC_MspInit+0x74>)
 800ae1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae5c <HAL_ADC_MspInit+0x74>)
 800ae1e:	2104      	movs	r1, #4
 800ae20:	430a      	orrs	r2, r1
 800ae22:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae24:	4b0d      	ldr	r3, [pc, #52]	@ (800ae5c <HAL_ADC_MspInit+0x74>)
 800ae26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae28:	2204      	movs	r2, #4
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	60bb      	str	r3, [r7, #8]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ae30:	193b      	adds	r3, r7, r4
 800ae32:	2230      	movs	r2, #48	@ 0x30
 800ae34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae36:	193b      	adds	r3, r7, r4
 800ae38:	2203      	movs	r2, #3
 800ae3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae3c:	193b      	adds	r3, r7, r4
 800ae3e:	2200      	movs	r2, #0
 800ae40:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae42:	193b      	adds	r3, r7, r4
 800ae44:	4a06      	ldr	r2, [pc, #24]	@ (800ae60 <HAL_ADC_MspInit+0x78>)
 800ae46:	0019      	movs	r1, r3
 800ae48:	0010      	movs	r0, r2
 800ae4a:	f00a fe6f 	bl	8015b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ae4e:	46c0      	nop			@ (mov r8, r8)
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b009      	add	sp, #36	@ 0x24
 800ae54:	bd90      	pop	{r4, r7, pc}
 800ae56:	46c0      	nop			@ (mov r8, r8)
 800ae58:	40012400 	.word	0x40012400
 800ae5c:	40021000 	.word	0x40021000
 800ae60:	50000800 	.word	0x50000800

0800ae64 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6039      	str	r1, [r7, #0]
 800ae6c:	0011      	movs	r1, r2
 800ae6e:	1dfb      	adds	r3, r7, #7
 800ae70:	1c02      	adds	r2, r0, #0
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	1dbb      	adds	r3, r7, #6
 800ae76:	1c0a      	adds	r2, r1, #0
 800ae78:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	@ (800aea4 <ReadDirRegister+0x40>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800ae82:	4b08      	ldr	r3, [pc, #32]	@ (800aea4 <ReadDirRegister+0x40>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	1dba      	adds	r2, r7, #6
 800ae88:	7814      	ldrb	r4, [r2, #0]
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	1dfa      	adds	r2, r7, #7
 800ae8e:	7810      	ldrb	r0, [r2, #0]
 800ae90:	0022      	movs	r2, r4
 800ae92:	4798      	blx	r3
 800ae94:	0003      	movs	r3, r0
 800ae96:	e000      	b.n	800ae9a <ReadDirRegister+0x36>
  }
  return false;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	b003      	add	sp, #12
 800aea0:	bd90      	pop	{r4, r7, pc}
 800aea2:	46c0      	nop			@ (mov r8, r8)
 800aea4:	20000ef0 	.word	0x20000ef0

0800aea8 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800aea8:	b590      	push	{r4, r7, lr}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6039      	str	r1, [r7, #0]
 800aeb0:	0011      	movs	r1, r2
 800aeb2:	1dfb      	adds	r3, r7, #7
 800aeb4:	1c02      	adds	r2, r0, #0
 800aeb6:	701a      	strb	r2, [r3, #0]
 800aeb8:	1dbb      	adds	r3, r7, #6
 800aeba:	1c0a      	adds	r2, r1, #0
 800aebc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800aebe:	4b0a      	ldr	r3, [pc, #40]	@ (800aee8 <ReadRegister+0x40>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800aec6:	4b08      	ldr	r3, [pc, #32]	@ (800aee8 <ReadRegister+0x40>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	1dba      	adds	r2, r7, #6
 800aecc:	7814      	ldrb	r4, [r2, #0]
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	1dfa      	adds	r2, r7, #7
 800aed2:	7810      	ldrb	r0, [r2, #0]
 800aed4:	0022      	movs	r2, r4
 800aed6:	4798      	blx	r3
 800aed8:	0003      	movs	r3, r0
 800aeda:	e000      	b.n	800aede <ReadRegister+0x36>
  }
  return false;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	0018      	movs	r0, r3
 800aee0:	46bd      	mov	sp, r7
 800aee2:	b003      	add	sp, #12
 800aee4:	bd90      	pop	{r4, r7, pc}
 800aee6:	46c0      	nop			@ (mov r8, r8)
 800aee8:	20000ee8 	.word	0x20000ee8

0800aeec <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6039      	str	r1, [r7, #0]
 800aef4:	0011      	movs	r1, r2
 800aef6:	1dfb      	adds	r3, r7, #7
 800aef8:	1c02      	adds	r2, r0, #0
 800aefa:	701a      	strb	r2, [r3, #0]
 800aefc:	1dbb      	adds	r3, r7, #6
 800aefe:	1c0a      	adds	r2, r1, #0
 800af00:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800af02:	4b0a      	ldr	r3, [pc, #40]	@ (800af2c <WriteRegister+0x40>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00a      	beq.n	800af20 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800af0a:	4b08      	ldr	r3, [pc, #32]	@ (800af2c <WriteRegister+0x40>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	1dba      	adds	r2, r7, #6
 800af10:	7814      	ldrb	r4, [r2, #0]
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	1dfa      	adds	r2, r7, #7
 800af16:	7810      	ldrb	r0, [r2, #0]
 800af18:	0022      	movs	r2, r4
 800af1a:	4798      	blx	r3
 800af1c:	0003      	movs	r3, r0
 800af1e:	e000      	b.n	800af22 <WriteRegister+0x36>
  }
  return false;
 800af20:	2300      	movs	r3, #0
}
 800af22:	0018      	movs	r0, r3
 800af24:	46bd      	mov	sp, r7
 800af26:	b003      	add	sp, #12
 800af28:	bd90      	pop	{r4, r7, pc}
 800af2a:	46c0      	nop			@ (mov r8, r8)
 800af2c:	20000eec 	.word	0x20000eec

0800af30 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	000a      	movs	r2, r1
 800af3a:	1cfb      	adds	r3, r7, #3
 800af3c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800af3e:	230f      	movs	r3, #15
 800af40:	18fb      	adds	r3, r7, r3
 800af42:	22ff      	movs	r2, #255	@ 0xff
 800af44:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800af46:	230e      	movs	r3, #14
 800af48:	18fb      	adds	r3, r7, r3
 800af4a:	2200      	movs	r2, #0
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e038      	b.n	800afc2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800af50:	230e      	movs	r3, #14
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	18d3      	adds	r3, r2, r3
 800af5a:	7819      	ldrb	r1, [r3, #0]
 800af5c:	220f      	movs	r2, #15
 800af5e:	18bb      	adds	r3, r7, r2
 800af60:	18ba      	adds	r2, r7, r2
 800af62:	7812      	ldrb	r2, [r2, #0]
 800af64:	404a      	eors	r2, r1
 800af66:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800af68:	230d      	movs	r3, #13
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	2200      	movs	r2, #0
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e01c      	b.n	800afac <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800af72:	210f      	movs	r1, #15
 800af74:	187b      	adds	r3, r7, r1
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	b25b      	sxtb	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	da0a      	bge.n	800af94 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800af7e:	187b      	adds	r3, r7, r1
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	b25b      	sxtb	r3, r3
 800af84:	18db      	adds	r3, r3, r3
 800af86:	b25b      	sxtb	r3, r3
 800af88:	2231      	movs	r2, #49	@ 0x31
 800af8a:	4053      	eors	r3, r2
 800af8c:	b25a      	sxtb	r2, r3
 800af8e:	187b      	adds	r3, r7, r1
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	e005      	b.n	800afa0 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800af94:	230f      	movs	r3, #15
 800af96:	18fa      	adds	r2, r7, r3
 800af98:	18fb      	adds	r3, r7, r3
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	18db      	adds	r3, r3, r3
 800af9e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800afa0:	210d      	movs	r1, #13
 800afa2:	187b      	adds	r3, r7, r1
 800afa4:	781a      	ldrb	r2, [r3, #0]
 800afa6:	187b      	adds	r3, r7, r1
 800afa8:	3201      	adds	r2, #1
 800afaa:	701a      	strb	r2, [r3, #0]
 800afac:	230d      	movs	r3, #13
 800afae:	18fb      	adds	r3, r7, r3
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	2b07      	cmp	r3, #7
 800afb4:	d9dd      	bls.n	800af72 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800afb6:	210e      	movs	r1, #14
 800afb8:	187b      	adds	r3, r7, r1
 800afba:	781a      	ldrb	r2, [r3, #0]
 800afbc:	187b      	adds	r3, r7, r1
 800afbe:	3201      	adds	r2, #1
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	230e      	movs	r3, #14
 800afc4:	18fa      	adds	r2, r7, r3
 800afc6:	1cfb      	adds	r3, r7, #3
 800afc8:	7812      	ldrb	r2, [r2, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d3bf      	bcc.n	800af50 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800afd0:	230f      	movs	r3, #15
 800afd2:	18fb      	adds	r3, r7, r3
 800afd4:	781b      	ldrb	r3, [r3, #0]
}
 800afd6:	0018      	movs	r0, r3
 800afd8:	46bd      	mov	sp, r7
 800afda:	b004      	add	sp, #16
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800afe8:	f009 fcd4 	bl	8014994 <HAL_GetTick>
 800afec:	0002      	movs	r2, r0
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	18d2      	adds	r2, r2, r3
 800aff2:	4b03      	ldr	r3, [pc, #12]	@ (800b000 <setAHT20TimeStamp+0x20>)
 800aff4:	601a      	str	r2, [r3, #0]
}
 800aff6:	46c0      	nop			@ (mov r8, r8)
 800aff8:	46bd      	mov	sp, r7
 800affa:	b002      	add	sp, #8
 800affc:	bd80      	pop	{r7, pc}
 800affe:	46c0      	nop			@ (mov r8, r8)
 800b000:	20000ee0 	.word	0x20000ee0

0800b004 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800b010:	4b06      	ldr	r3, [pc, #24]	@ (800b02c <AHT_Init+0x28>)
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800b016:	4b06      	ldr	r3, [pc, #24]	@ (800b030 <AHT_Init+0x2c>)
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b01c:	4b05      	ldr	r3, [pc, #20]	@ (800b034 <AHT_Init+0x30>)
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	601a      	str	r2, [r3, #0]
}
 800b022:	46c0      	nop			@ (mov r8, r8)
 800b024:	46bd      	mov	sp, r7
 800b026:	b004      	add	sp, #16
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	46c0      	nop			@ (mov r8, r8)
 800b02c:	20000ef0 	.word	0x20000ef0
 800b030:	20000ee8 	.word	0x20000ee8
 800b034:	20000eec 	.word	0x20000eec

0800b038 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	0002      	movs	r2, r0
 800b040:	1dfb      	adds	r3, r7, #7
 800b042:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800b044:	4b18      	ldr	r3, [pc, #96]	@ (800b0a8 <AHT20_register_reset+0x70>)
 800b046:	1dfa      	adds	r2, r7, #7
 800b048:	7812      	ldrb	r2, [r2, #0]
 800b04a:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800b04c:	4b16      	ldr	r3, [pc, #88]	@ (800b0a8 <AHT20_register_reset+0x70>)
 800b04e:	2203      	movs	r2, #3
 800b050:	0019      	movs	r1, r3
 800b052:	2038      	movs	r0, #56	@ 0x38
 800b054:	f7ff ff4a 	bl	800aeec <WriteRegister>
  HAL_Delay(15);
 800b058:	200f      	movs	r0, #15
 800b05a:	f009 fca5 	bl	80149a8 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800b05e:	4b13      	ldr	r3, [pc, #76]	@ (800b0ac <AHT20_register_reset+0x74>)
 800b060:	2203      	movs	r2, #3
 800b062:	0019      	movs	r1, r3
 800b064:	2038      	movs	r0, #56	@ 0x38
 800b066:	f7ff ff1f 	bl	800aea8 <ReadRegister>
  HAL_Delay(15);
 800b06a:	200f      	movs	r0, #15
 800b06c:	f009 fc9c 	bl	80149a8 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800b070:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <AHT20_register_reset+0x74>)
 800b072:	22b0      	movs	r2, #176	@ 0xb0
 800b074:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800b076:	4b0d      	ldr	r3, [pc, #52]	@ (800b0ac <AHT20_register_reset+0x74>)
 800b078:	789b      	ldrb	r3, [r3, #2]
 800b07a:	0018      	movs	r0, r3
 800b07c:	4b0b      	ldr	r3, [pc, #44]	@ (800b0ac <AHT20_register_reset+0x74>)
 800b07e:	78db      	ldrb	r3, [r3, #3]
 800b080:	4a0b      	ldr	r2, [pc, #44]	@ (800b0b0 <AHT20_register_reset+0x78>)
 800b082:	490c      	ldr	r1, [pc, #48]	@ (800b0b4 <AHT20_register_reset+0x7c>)
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	0003      	movs	r3, r0
 800b088:	2003      	movs	r0, #3
 800b08a:	f008 ff03 	bl	8013e94 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800b08e:	4b07      	ldr	r3, [pc, #28]	@ (800b0ac <AHT20_register_reset+0x74>)
 800b090:	2203      	movs	r2, #3
 800b092:	0019      	movs	r1, r3
 800b094:	2038      	movs	r0, #56	@ 0x38
 800b096:	f7ff ff29 	bl	800aeec <WriteRegister>
  HAL_Delay(15);
 800b09a:	200f      	movs	r0, #15
 800b09c:	f009 fc84 	bl	80149a8 <HAL_Delay>
}
 800b0a0:	46c0      	nop			@ (mov r8, r8)
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	2000009c 	.word	0x2000009c
 800b0ac:	20000ef4 	.word	0x20000ef4
 800b0b0:	0802c39c 	.word	0x0802c39c
 800b0b4:	0802c3dc 	.word	0x0802c3dc

0800b0b8 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800b0bc:	201b      	movs	r0, #27
 800b0be:	f7ff ffbb 	bl	800b038 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800b0c2:	201c      	movs	r0, #28
 800b0c4:	f7ff ffb8 	bl	800b038 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800b0c8:	201e      	movs	r0, #30
 800b0ca:	f7ff ffb5 	bl	800b038 <AHT20_register_reset>
}
 800b0ce:	46c0      	nop			@ (mov r8, r8)
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b10c <AHT20_read_status+0x38>)
 800b0da:	2201      	movs	r2, #1
 800b0dc:	0019      	movs	r1, r3
 800b0de:	2038      	movs	r0, #56	@ 0x38
 800b0e0:	f7ff ff04 	bl	800aeec <WriteRegister>
  HAL_Delay(10);
 800b0e4:	200a      	movs	r0, #10
 800b0e6:	f009 fc5f 	bl	80149a8 <HAL_Delay>
  airtemphumraw[0] = 0;
 800b0ea:	4b09      	ldr	r3, [pc, #36]	@ (800b110 <AHT20_read_status+0x3c>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800b0f0:	4b07      	ldr	r3, [pc, #28]	@ (800b110 <AHT20_read_status+0x3c>)
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	0019      	movs	r1, r3
 800b0f6:	2038      	movs	r0, #56	@ 0x38
 800b0f8:	f7ff fed6 	bl	800aea8 <ReadRegister>
  HAL_Delay(10);
 800b0fc:	200a      	movs	r0, #10
 800b0fe:	f009 fc53 	bl	80149a8 <HAL_Delay>
  return airtemphumraw[0];
 800b102:	4b03      	ldr	r3, [pc, #12]	@ (800b110 <AHT20_read_status+0x3c>)
 800b104:	781b      	ldrb	r3, [r3, #0]
}
 800b106:	0018      	movs	r0, r3
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20000098 	.word	0x20000098
 800b110:	20000ef4 	.word	0x20000ef4

0800b114 <AHT20_init>:

bool AHT20_init(void) {
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800b11a:	f009 fc3b 	bl	8014994 <HAL_GetTick>
 800b11e:	0003      	movs	r3, r0
 800b120:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b77      	cmp	r3, #119	@ 0x77
 800b126:	d805      	bhi.n	800b134 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2278      	movs	r2, #120	@ 0x78
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	0018      	movs	r0, r3
 800b130:	f009 fc3a 	bl	80149a8 <HAL_Delay>
  }
  AHT20_read_status();
 800b134:	f7ff ffce 	bl	800b0d4 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800b138:	4b0e      	ldr	r3, [pc, #56]	@ (800b174 <AHT20_init+0x60>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	4a0e      	ldr	r2, [pc, #56]	@ (800b178 <AHT20_init+0x64>)
 800b13e:	490f      	ldr	r1, [pc, #60]	@ (800b17c <AHT20_init+0x68>)
 800b140:	2003      	movs	r0, #3
 800b142:	f008 fea7 	bl	8013e94 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800b146:	4b0b      	ldr	r3, [pc, #44]	@ (800b174 <AHT20_init+0x60>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	001a      	movs	r2, r3
 800b14c:	2318      	movs	r3, #24
 800b14e:	4013      	ands	r3, r2
 800b150:	2b18      	cmp	r3, #24
 800b152:	d00a      	beq.n	800b16a <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800b154:	4b0a      	ldr	r3, [pc, #40]	@ (800b180 <AHT20_init+0x6c>)
 800b156:	2203      	movs	r2, #3
 800b158:	0019      	movs	r1, r3
 800b15a:	2038      	movs	r0, #56	@ 0x38
 800b15c:	f7ff fec6 	bl	800aeec <WriteRegister>
    HAL_Delay(10);
 800b160:	200a      	movs	r0, #10
 800b162:	f009 fc21 	bl	80149a8 <HAL_Delay>
    AHT20_Start_Init();
 800b166:	f7ff ffa7 	bl	800b0b8 <AHT20_Start_Init>
  }
  return true;
 800b16a:	2301      	movs	r3, #1
}
 800b16c:	0018      	movs	r0, r3
 800b16e:	46bd      	mov	sp, r7
 800b170:	b002      	add	sp, #8
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000ef4 	.word	0x20000ef4
 800b178:	0802c3e0 	.word	0x0802c3e0
 800b17c:	0802c3dc 	.word	0x0802c3dc
 800b180:	2000008c 	.word	0x2000008c

0800b184 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b184:	b590      	push	{r4, r7, lr}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b18a:	1dfc      	adds	r4, r7, #7
 800b18c:	4b10      	ldr	r3, [pc, #64]	@ (800b1d0 <AHT20_calibrate+0x4c>)
 800b18e:	2201      	movs	r2, #1
 800b190:	0019      	movs	r1, r3
 800b192:	2038      	movs	r0, #56	@ 0x38
 800b194:	f7ff feaa 	bl	800aeec <WriteRegister>
 800b198:	0003      	movs	r3, r0
 800b19a:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b19c:	1dfb      	adds	r3, r7, #7
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	4053      	eors	r3, r2
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d005      	beq.n	800b1b6 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b1aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b1d4 <AHT20_calibrate+0x50>)
 800b1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d8 <AHT20_calibrate+0x54>)
 800b1ae:	0019      	movs	r1, r3
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	f008 fe6f 	bl	8013e94 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b1b6:	f009 fbed 	bl	8014994 <HAL_GetTick>
 800b1ba:	0003      	movs	r3, r0
 800b1bc:	3332      	adds	r3, #50	@ 0x32
 800b1be:	001a      	movs	r2, r3
 800b1c0:	4b06      	ldr	r3, [pc, #24]	@ (800b1dc <AHT20_calibrate+0x58>)
 800b1c2:	601a      	str	r2, [r3, #0]
  return response;
 800b1c4:	1dfb      	adds	r3, r7, #7
 800b1c6:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	b003      	add	sp, #12
 800b1ce:	bd90      	pop	{r4, r7, pc}
 800b1d0:	20000098 	.word	0x20000098
 800b1d4:	0802c408 	.word	0x0802c408
 800b1d8:	0802c440 	.word	0x0802c440
 800b1dc:	20000ee0 	.word	0x20000ee0

0800b1e0 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b1e4:	4a0a      	ldr	r2, [pc, #40]	@ (800b210 <AHT20_DeviceConnected+0x30>)
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <AHT20_DeviceConnected+0x34>)
 800b1e8:	0019      	movs	r1, r3
 800b1ea:	2003      	movs	r0, #3
 800b1ec:	f008 fe52 	bl	8013e94 <CreateLine>
   AHT20_init();
 800b1f0:	f7ff ff90 	bl	800b114 <AHT20_init>
   HAL_Delay(10);
 800b1f4:	200a      	movs	r0, #10
 800b1f6:	f009 fbd7 	bl	80149a8 <HAL_Delay>
   AHT20_calibrate();
 800b1fa:	f7ff ffc3 	bl	800b184 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b1fe:	f7ff ff69 	bl	800b0d4 <AHT20_read_status>
 800b202:	0003      	movs	r3, r0
 800b204:	1e5a      	subs	r2, r3, #1
 800b206:	4193      	sbcs	r3, r2
 800b208:	b2db      	uxtb	r3, r3
 }
 800b20a:	0018      	movs	r0, r3
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	0802c444 	.word	0x0802c444
 800b214:	0802c3dc 	.word	0x0802c3dc

0800b218 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b218:	b590      	push	{r4, r7, lr}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b21e:	1dfc      	adds	r4, r7, #7
 800b220:	4b10      	ldr	r3, [pc, #64]	@ (800b264 <AHT20_StartMeasurement+0x4c>)
 800b222:	2203      	movs	r2, #3
 800b224:	0019      	movs	r1, r3
 800b226:	2038      	movs	r0, #56	@ 0x38
 800b228:	f7ff fe60 	bl	800aeec <WriteRegister>
 800b22c:	0003      	movs	r3, r0
 800b22e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b230:	1dfb      	adds	r3, r7, #7
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2201      	movs	r2, #1
 800b236:	4053      	eors	r3, r2
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b23e:	4a0a      	ldr	r2, [pc, #40]	@ (800b268 <AHT20_StartMeasurement+0x50>)
 800b240:	4b0a      	ldr	r3, [pc, #40]	@ (800b26c <AHT20_StartMeasurement+0x54>)
 800b242:	0019      	movs	r1, r3
 800b244:	2001      	movs	r0, #1
 800b246:	f008 fe25 	bl	8013e94 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b24a:	f009 fba3 	bl	8014994 <HAL_GetTick>
 800b24e:	0003      	movs	r3, r0
 800b250:	33fa      	adds	r3, #250	@ 0xfa
 800b252:	001a      	movs	r2, r3
 800b254:	4b06      	ldr	r3, [pc, #24]	@ (800b270 <AHT20_StartMeasurement+0x58>)
 800b256:	601a      	str	r2, [r3, #0]
  return response;
 800b258:	1dfb      	adds	r3, r7, #7
 800b25a:	781b      	ldrb	r3, [r3, #0]
}
 800b25c:	0018      	movs	r0, r3
 800b25e:	46bd      	mov	sp, r7
 800b260:	b003      	add	sp, #12
 800b262:	bd90      	pop	{r4, r7, pc}
 800b264:	20000094 	.word	0x20000094
 800b268:	0802c45c 	.word	0x0802c45c
 800b26c:	0802c440 	.word	0x0802c440
 800b270:	20000ee0 	.word	0x20000ee0

0800b274 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b274:	b590      	push	{r4, r7, lr}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b27a:	f009 fb8b 	bl	8014994 <HAL_GetTick>
 800b27e:	0003      	movs	r3, r0
 800b280:	22fa      	movs	r2, #250	@ 0xfa
 800b282:	0092      	lsls	r2, r2, #2
 800b284:	189a      	adds	r2, r3, r2
 800b286:	4b29      	ldr	r3, [pc, #164]	@ (800b32c <AHT20_GetMeasurementValues+0xb8>)
 800b288:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b28a:	e019      	b.n	800b2c0 <AHT20_GetMeasurementValues+0x4c>
//    Info("AHT20 Device busy, waiting for results");
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b28c:	4b27      	ldr	r3, [pc, #156]	@ (800b32c <AHT20_GetMeasurementValues+0xb8>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	0018      	movs	r0, r3
 800b292:	f008 fda9 	bl	8013de8 <TimestampIsReached>
 800b296:	1e03      	subs	r3, r0, #0
 800b298:	d00f      	beq.n	800b2ba <AHT20_GetMeasurementValues+0x46>
      Error("AHT2x timeout for getting values");
 800b29a:	4a25      	ldr	r2, [pc, #148]	@ (800b330 <AHT20_GetMeasurementValues+0xbc>)
 800b29c:	4b25      	ldr	r3, [pc, #148]	@ (800b334 <AHT20_GetMeasurementValues+0xc0>)
 800b29e:	0019      	movs	r1, r3
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	f008 fdf7 	bl	8013e94 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b2a6:	f009 fb75 	bl	8014994 <HAL_GetTick>
 800b2aa:	0003      	movs	r3, r0
 800b2ac:	22fa      	movs	r2, #250	@ 0xfa
 800b2ae:	00d2      	lsls	r2, r2, #3
 800b2b0:	189a      	adds	r2, r3, r2
 800b2b2:	4b1e      	ldr	r3, [pc, #120]	@ (800b32c <AHT20_GetMeasurementValues+0xb8>)
 800b2b4:	601a      	str	r2, [r3, #0]
      return false;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e034      	b.n	800b324 <AHT20_GetMeasurementValues+0xb0>
    }
    HAL_Delay(10);
 800b2ba:	200a      	movs	r0, #10
 800b2bc:	f009 fb74 	bl	80149a8 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b2c0:	f7ff ff08 	bl	800b0d4 <AHT20_read_status>
 800b2c4:	0003      	movs	r3, r0
 800b2c6:	001a      	movs	r2, r3
 800b2c8:	2380      	movs	r3, #128	@ 0x80
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	2b80      	cmp	r3, #128	@ 0x80
 800b2ce:	d0dd      	beq.n	800b28c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b2d0:	200a      	movs	r0, #10
 800b2d2:	f009 fb69 	bl	80149a8 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b2d6:	1dfb      	adds	r3, r7, #7
 800b2d8:	2200      	movs	r2, #0
 800b2da:	701a      	strb	r2, [r3, #0]
 800b2dc:	e009      	b.n	800b2f2 <AHT20_GetMeasurementValues+0x7e>
    airtemphumraw[g] = 0;
 800b2de:	1dfb      	adds	r3, r7, #7
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	4a15      	ldr	r2, [pc, #84]	@ (800b338 <AHT20_GetMeasurementValues+0xc4>)
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b2e8:	1dfb      	adds	r3, r7, #7
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	1dfb      	adds	r3, r7, #7
 800b2ee:	3201      	adds	r2, #1
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	1dfb      	adds	r3, r7, #7
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b06      	cmp	r3, #6
 800b2f8:	d9f1      	bls.n	800b2de <AHT20_GetMeasurementValues+0x6a>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b2fa:	1dbc      	adds	r4, r7, #6
 800b2fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b338 <AHT20_GetMeasurementValues+0xc4>)
 800b2fe:	2207      	movs	r2, #7
 800b300:	0019      	movs	r1, r3
 800b302:	2038      	movs	r0, #56	@ 0x38
 800b304:	f7ff fdae 	bl	800ae64 <ReadDirRegister>
 800b308:	0003      	movs	r3, r0
 800b30a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b30c:	200a      	movs	r0, #10
 800b30e:	f009 fb4b 	bl	80149a8 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b312:	f009 fb3f 	bl	8014994 <HAL_GetTick>
 800b316:	0003      	movs	r3, r0
 800b318:	3364      	adds	r3, #100	@ 0x64
 800b31a:	001a      	movs	r2, r3
 800b31c:	4b03      	ldr	r3, [pc, #12]	@ (800b32c <AHT20_GetMeasurementValues+0xb8>)
 800b31e:	601a      	str	r2, [r3, #0]
  return response;
 800b320:	1dbb      	adds	r3, r7, #6
 800b322:	781b      	ldrb	r3, [r3, #0]
}
 800b324:	0018      	movs	r0, r3
 800b326:	46bd      	mov	sp, r7
 800b328:	b003      	add	sp, #12
 800b32a:	bd90      	pop	{r4, r7, pc}
 800b32c:	20000ee0 	.word	0x20000ee0
 800b330:	0802c488 	.word	0x0802c488
 800b334:	0802c440 	.word	0x0802c440
 800b338:	20000ef4 	.word	0x20000ef4

0800b33c <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33e:	46c6      	mov	lr, r8
 800b340:	b500      	push	{lr}
 800b342:	b08a      	sub	sp, #40	@ 0x28
 800b344:	af06      	add	r7, sp, #24
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b34a:	4b5a      	ldr	r3, [pc, #360]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b34c:	799c      	ldrb	r4, [r3, #6]
 800b34e:	4b59      	ldr	r3, [pc, #356]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b350:	2106      	movs	r1, #6
 800b352:	0018      	movs	r0, r3
 800b354:	f7ff fdec 	bl	800af30 <CalculateCRC>
 800b358:	0003      	movs	r3, r0
 800b35a:	429c      	cmp	r4, r3
 800b35c:	d044      	beq.n	800b3e8 <AHT20_Calculate+0xac>
 800b35e:	4b55      	ldr	r3, [pc, #340]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b360:	799b      	ldrb	r3, [r3, #6]
 800b362:	2bff      	cmp	r3, #255	@ 0xff
 800b364:	d040      	beq.n	800b3e8 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b366:	4b53      	ldr	r3, [pc, #332]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	4698      	mov	r8, r3
 800b36c:	4b51      	ldr	r3, [pc, #324]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b36e:	785b      	ldrb	r3, [r3, #1]
 800b370:	0018      	movs	r0, r3
 800b372:	4b50      	ldr	r3, [pc, #320]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b374:	789b      	ldrb	r3, [r3, #2]
 800b376:	001c      	movs	r4, r3
 800b378:	4b4e      	ldr	r3, [pc, #312]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b37a:	78db      	ldrb	r3, [r3, #3]
 800b37c:	001d      	movs	r5, r3
 800b37e:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b380:	791b      	ldrb	r3, [r3, #4]
 800b382:	001e      	movs	r6, r3
 800b384:	4b4b      	ldr	r3, [pc, #300]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b386:	795b      	ldrb	r3, [r3, #5]
 800b388:	469c      	mov	ip, r3
 800b38a:	4b4a      	ldr	r3, [pc, #296]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b38c:	799b      	ldrb	r3, [r3, #6]
 800b38e:	4a4a      	ldr	r2, [pc, #296]	@ (800b4b8 <AHT20_Calculate+0x17c>)
 800b390:	494a      	ldr	r1, [pc, #296]	@ (800b4bc <AHT20_Calculate+0x180>)
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	4663      	mov	r3, ip
 800b396:	9304      	str	r3, [sp, #16]
 800b398:	9603      	str	r6, [sp, #12]
 800b39a:	9502      	str	r5, [sp, #8]
 800b39c:	9401      	str	r4, [sp, #4]
 800b39e:	9000      	str	r0, [sp, #0]
 800b3a0:	4643      	mov	r3, r8
 800b3a2:	2003      	movs	r0, #3
 800b3a4:	f008 fd76 	bl	8013e94 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b3a8:	4b42      	ldr	r3, [pc, #264]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b3aa:	799b      	ldrb	r3, [r3, #6]
 800b3ac:	001c      	movs	r4, r3
 800b3ae:	4b41      	ldr	r3, [pc, #260]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b3b0:	2106      	movs	r1, #6
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	f7ff fdbc 	bl	800af30 <CalculateCRC>
 800b3b8:	0003      	movs	r3, r0
 800b3ba:	4a41      	ldr	r2, [pc, #260]	@ (800b4c0 <AHT20_Calculate+0x184>)
 800b3bc:	4941      	ldr	r1, [pc, #260]	@ (800b4c4 <AHT20_Calculate+0x188>)
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	0023      	movs	r3, r4
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	f008 fd66 	bl	8013e94 <CreateLine>
    *airtemp = 0.0;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b3d4:	f009 fade 	bl	8014994 <HAL_GetTick>
 800b3d8:	0003      	movs	r3, r0
 800b3da:	22fa      	movs	r2, #250	@ 0xfa
 800b3dc:	00d2      	lsls	r2, r2, #3
 800b3de:	189a      	adds	r2, r3, r2
 800b3e0:	4b39      	ldr	r3, [pc, #228]	@ (800b4c8 <AHT20_Calculate+0x18c>)
 800b3e2:	601a      	str	r2, [r3, #0]
    return false;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	e05f      	b.n	800b4a8 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b3e8:	4b38      	ldr	r3, [pc, #224]	@ (800b4cc <AHT20_Calculate+0x190>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b3ee:	4b31      	ldr	r3, [pc, #196]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b3f0:	78db      	ldrb	r3, [r3, #3]
 800b3f2:	041a      	lsls	r2, r3, #16
 800b3f4:	23f0      	movs	r3, #240	@ 0xf0
 800b3f6:	031b      	lsls	r3, r3, #12
 800b3f8:	401a      	ands	r2, r3
 800b3fa:	4b2e      	ldr	r3, [pc, #184]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b3fc:	791b      	ldrb	r3, [r3, #4]
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	18d3      	adds	r3, r2, r3
 800b402:	4a2c      	ldr	r2, [pc, #176]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b404:	7952      	ldrb	r2, [r2, #5]
 800b406:	189b      	adds	r3, r3, r2
 800b408:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7f6 fa5c 	bl	80018c8 <__aeabi_ui2f>
 800b410:	1c03      	adds	r3, r0, #0
 800b412:	2193      	movs	r1, #147	@ 0x93
 800b414:	05c9      	lsls	r1, r1, #23
 800b416:	1c18      	adds	r0, r3, #0
 800b418:	f7f5 fc44 	bl	8000ca4 <__aeabi_fdiv>
 800b41c:	1c03      	adds	r3, r0, #0
 800b41e:	492c      	ldr	r1, [pc, #176]	@ (800b4d0 <AHT20_Calculate+0x194>)
 800b420:	1c18      	adds	r0, r3, #0
 800b422:	f7f5 fe0d 	bl	8001040 <__aeabi_fmul>
 800b426:	1c03      	adds	r3, r0, #0
 800b428:	492a      	ldr	r1, [pc, #168]	@ (800b4d4 <AHT20_Calculate+0x198>)
 800b42a:	1c18      	adds	r0, r3, #0
 800b42c:	f7f5 ff62 	bl	80012f4 <__aeabi_fsub>
 800b430:	1c03      	adds	r3, r0, #0
 800b432:	1c1a      	adds	r2, r3, #0
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b438:	4b1e      	ldr	r3, [pc, #120]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b43a:	785b      	ldrb	r3, [r3, #1]
 800b43c:	031a      	lsls	r2, r3, #12
 800b43e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b440:	789b      	ldrb	r3, [r3, #2]
 800b442:	011b      	lsls	r3, r3, #4
 800b444:	18d3      	adds	r3, r2, r3
 800b446:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b4 <AHT20_Calculate+0x178>)
 800b448:	78d2      	ldrb	r2, [r2, #3]
 800b44a:	0912      	lsrs	r2, r2, #4
 800b44c:	b2d2      	uxtb	r2, r2
 800b44e:	189b      	adds	r3, r3, r2
 800b450:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b452:	68b8      	ldr	r0, [r7, #8]
 800b454:	f7f6 fa38 	bl	80018c8 <__aeabi_ui2f>
 800b458:	1c03      	adds	r3, r0, #0
 800b45a:	2193      	movs	r1, #147	@ 0x93
 800b45c:	05c9      	lsls	r1, r1, #23
 800b45e:	1c18      	adds	r0, r3, #0
 800b460:	f7f5 fc20 	bl	8000ca4 <__aeabi_fdiv>
 800b464:	1c03      	adds	r3, r0, #0
 800b466:	491c      	ldr	r1, [pc, #112]	@ (800b4d8 <AHT20_Calculate+0x19c>)
 800b468:	1c18      	adds	r0, r3, #0
 800b46a:	f7f5 fde9 	bl	8001040 <__aeabi_fmul>
 800b46e:	1c03      	adds	r3, r0, #0
 800b470:	1c1a      	adds	r2, r3, #0
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	1c18      	adds	r0, r3, #0
 800b47c:	f7f8 fa0a 	bl	8003894 <__aeabi_f2d>
 800b480:	0004      	movs	r4, r0
 800b482:	000d      	movs	r5, r1
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	1c18      	adds	r0, r3, #0
 800b48a:	f7f8 fa03 	bl	8003894 <__aeabi_f2d>
 800b48e:	0002      	movs	r2, r0
 800b490:	000b      	movs	r3, r1
 800b492:	4812      	ldr	r0, [pc, #72]	@ (800b4dc <AHT20_Calculate+0x1a0>)
 800b494:	4912      	ldr	r1, [pc, #72]	@ (800b4e0 <AHT20_Calculate+0x1a4>)
 800b496:	9202      	str	r2, [sp, #8]
 800b498:	9303      	str	r3, [sp, #12]
 800b49a:	9400      	str	r4, [sp, #0]
 800b49c:	9501      	str	r5, [sp, #4]
 800b49e:	0002      	movs	r2, r0
 800b4a0:	2002      	movs	r0, #2
 800b4a2:	f008 fcf7 	bl	8013e94 <CreateLine>
  return true;
 800b4a6:	2301      	movs	r3, #1
}
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	b004      	add	sp, #16
 800b4ae:	bc80      	pop	{r7}
 800b4b0:	46b8      	mov	r8, r7
 800b4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b4:	20000ef4 	.word	0x20000ef4
 800b4b8:	0802c4ac 	.word	0x0802c4ac
 800b4bc:	0802c3dc 	.word	0x0802c3dc
 800b4c0:	0802c52c 	.word	0x0802c52c
 800b4c4:	0802c440 	.word	0x0802c440
 800b4c8:	20000ee0 	.word	0x20000ee0
 800b4cc:	20000efb 	.word	0x20000efb
 800b4d0:	43480000 	.word	0x43480000
 800b4d4:	42480000 	.word	0x42480000
 800b4d8:	42c80000 	.word	0x42c80000
 800b4dc:	0802c554 	.word	0x0802c554
 800b4e0:	0802c588 	.word	0x0802c588

0800b4e4 <AHT20_reset>:

bool AHT20_reset(void) {
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b4e8:	f009 fa54 	bl	8014994 <HAL_GetTick>
 800b4ec:	0003      	movs	r3, r0
 800b4ee:	3332      	adds	r3, #50	@ 0x32
 800b4f0:	001a      	movs	r2, r3
 800b4f2:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <AHT20_reset+0x2c>)
 800b4f4:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b4f6:	4b07      	ldr	r3, [pc, #28]	@ (800b514 <AHT20_reset+0x30>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b4fc:	4b06      	ldr	r3, [pc, #24]	@ (800b518 <AHT20_reset+0x34>)
 800b4fe:	2201      	movs	r2, #1
 800b500:	0019      	movs	r1, r3
 800b502:	2038      	movs	r0, #56	@ 0x38
 800b504:	f7ff fcf2 	bl	800aeec <WriteRegister>
 800b508:	0003      	movs	r3, r0
}
 800b50a:	0018      	movs	r0, r3
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20000ee0 	.word	0x20000ee0
 800b514:	20000ee4 	.word	0x20000ee4
 800b518:	20000090 	.word	0x20000090

0800b51c <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b522:	4b61      	ldr	r3, [pc, #388]	@ (800b6a8 <AHT_Upkeep+0x18c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	0018      	movs	r0, r3
 800b528:	f008 fc5e 	bl	8013de8 <TimestampIsReached>
 800b52c:	0003      	movs	r3, r0
 800b52e:	001a      	movs	r2, r3
 800b530:	2301      	movs	r3, #1
 800b532:	4053      	eors	r3, r2
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <AHT_Upkeep+0x24>
    return AHTState;
 800b53a:	4b5c      	ldr	r3, [pc, #368]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	e0ae      	b.n	800b69e <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b540:	4b5a      	ldr	r3, [pc, #360]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b05      	cmp	r3, #5
 800b546:	d900      	bls.n	800b54a <AHT_Upkeep+0x2e>
 800b548:	e07d      	b.n	800b646 <AHT_Upkeep+0x12a>
 800b54a:	009a      	lsls	r2, r3, #2
 800b54c:	4b58      	ldr	r3, [pc, #352]	@ (800b6b0 <AHT_Upkeep+0x194>)
 800b54e:	18d3      	adds	r3, r2, r3
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b554:	4a57      	ldr	r2, [pc, #348]	@ (800b6b4 <AHT_Upkeep+0x198>)
 800b556:	4b58      	ldr	r3, [pc, #352]	@ (800b6b8 <AHT_Upkeep+0x19c>)
 800b558:	0019      	movs	r1, r3
 800b55a:	2003      	movs	r0, #3
 800b55c:	f008 fc9a 	bl	8013e94 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b560:	f009 fa18 	bl	8014994 <HAL_GetTick>
 800b564:	0003      	movs	r3, r0
 800b566:	4a55      	ldr	r2, [pc, #340]	@ (800b6bc <AHT_Upkeep+0x1a0>)
 800b568:	189a      	adds	r2, r3, r2
 800b56a:	4b4f      	ldr	r3, [pc, #316]	@ (800b6a8 <AHT_Upkeep+0x18c>)
 800b56c:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b56e:	4b54      	ldr	r3, [pc, #336]	@ (800b6c0 <AHT_Upkeep+0x1a4>)
 800b570:	781a      	ldrb	r2, [r3, #0]
 800b572:	4b54      	ldr	r3, [pc, #336]	@ (800b6c4 <AHT_Upkeep+0x1a8>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	429a      	cmp	r2, r3
 800b578:	d100      	bne.n	800b57c <AHT_Upkeep+0x60>
 800b57a:	e087      	b.n	800b68c <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b57c:	4b4b      	ldr	r3, [pc, #300]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b57e:	2205      	movs	r2, #5
 800b580:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b582:	e083      	b.n	800b68c <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b584:	f002 fca0 	bl	800dec8 <getSensorLock>
 800b588:	1e03      	subs	r3, r0, #0
 800b58a:	d000      	beq.n	800b58e <AHT_Upkeep+0x72>
 800b58c:	e080      	b.n	800b690 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b58e:	2002      	movs	r0, #2
 800b590:	f002 fc86 	bl	800dea0 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b594:	f7ff fe40 	bl	800b218 <AHT20_StartMeasurement>
 800b598:	0003      	movs	r3, r0
 800b59a:	001a      	movs	r2, r3
 800b59c:	2301      	movs	r3, #1
 800b59e:	4053      	eors	r3, r2
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00c      	beq.n	800b5c0 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b5a6:	f7ff ff9d 	bl	800b4e4 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b5aa:	f009 f9f3 	bl	8014994 <HAL_GetTick>
 800b5ae:	0003      	movs	r3, r0
 800b5b0:	33c8      	adds	r3, #200	@ 0xc8
 800b5b2:	001a      	movs	r2, r3
 800b5b4:	4b3c      	ldr	r3, [pc, #240]	@ (800b6a8 <AHT_Upkeep+0x18c>)
 800b5b6:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b5b8:	4b3c      	ldr	r3, [pc, #240]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b5ba:	22ff      	movs	r2, #255	@ 0xff
 800b5bc:	701a      	strb	r2, [r3, #0]
 800b5be:	e002      	b.n	800b5c6 <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b5c0:	4b3a      	ldr	r3, [pc, #232]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b5c6:	200a      	movs	r0, #10
 800b5c8:	f009 f9ee 	bl	80149a8 <HAL_Delay>
    break;
 800b5cc:	e065      	b.n	800b69a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b5ce:	f7ff fe51 	bl	800b274 <AHT20_GetMeasurementValues>
 800b5d2:	1e03      	subs	r3, r0, #0
 800b5d4:	d05e      	beq.n	800b694 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b5d6:	200a      	movs	r0, #10
 800b5d8:	f009 f9e6 	bl	80149a8 <HAL_Delay>
      setSensorLock(FREE);
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f002 fc5f 	bl	800dea0 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b5e2:	4b32      	ldr	r3, [pc, #200]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b5e4:	2203      	movs	r2, #3
 800b5e6:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b5e8:	e054      	b.n	800b694 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b5ea:	003a      	movs	r2, r7
 800b5ec:	1d3b      	adds	r3, r7, #4
 800b5ee:	0011      	movs	r1, r2
 800b5f0:	0018      	movs	r0, r3
 800b5f2:	f7ff fea3 	bl	800b33c <AHT20_Calculate>
 800b5f6:	0003      	movs	r3, r0
 800b5f8:	001a      	movs	r2, r3
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	4053      	eors	r3, r2
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b604:	4b29      	ldr	r3, [pc, #164]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b606:	22ff      	movs	r2, #255	@ 0xff
 800b608:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b60a:	4b28      	ldr	r3, [pc, #160]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	e046      	b.n	800b69e <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	1c11      	adds	r1, r2, #0
 800b616:	1c18      	adds	r0, r3, #0
 800b618:	f7f9 fa5e 	bl	8004ad8 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	1c11      	adds	r1, r2, #0
 800b622:	1c18      	adds	r0, r3, #0
 800b624:	f7f8 fee4 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b628:	4b20      	ldr	r3, [pc, #128]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b62a:	2205      	movs	r2, #5
 800b62c:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b62e:	f009 f9b1 	bl	8014994 <HAL_GetTick>
 800b632:	0003      	movs	r3, r0
 800b634:	4a24      	ldr	r2, [pc, #144]	@ (800b6c8 <AHT_Upkeep+0x1ac>)
 800b636:	189a      	adds	r2, r3, r2
 800b638:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a8 <AHT_Upkeep+0x18c>)
 800b63a:	601a      	str	r2, [r3, #0]
    break;
 800b63c:	e02d      	b.n	800b69a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b63e:	4b1b      	ldr	r3, [pc, #108]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b640:	2201      	movs	r2, #1
 800b642:	701a      	strb	r2, [r3, #0]
  break;
 800b644:	e029      	b.n	800b69a <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b646:	4b19      	ldr	r3, [pc, #100]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b648:	2201      	movs	r2, #1
 800b64a:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b64c:	f002 fc3c 	bl	800dec8 <getSensorLock>
 800b650:	0003      	movs	r3, r0
 800b652:	2b02      	cmp	r3, #2
 800b654:	d102      	bne.n	800b65c <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b656:	2000      	movs	r0, #0
 800b658:	f002 fc22 	bl	800dea0 <setSensorLock>
    }
    AHTerrors++;
 800b65c:	4b1b      	ldr	r3, [pc, #108]	@ (800b6cc <AHT_Upkeep+0x1b0>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	3301      	adds	r3, #1
 800b662:	b2da      	uxtb	r2, r3
 800b664:	4b19      	ldr	r3, [pc, #100]	@ (800b6cc <AHT_Upkeep+0x1b0>)
 800b666:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b668:	4b18      	ldr	r3, [pc, #96]	@ (800b6cc <AHT_Upkeep+0x1b0>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b19      	cmp	r3, #25
 800b66e:	d913      	bls.n	800b698 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b670:	4a17      	ldr	r2, [pc, #92]	@ (800b6d0 <AHT_Upkeep+0x1b4>)
 800b672:	4b18      	ldr	r3, [pc, #96]	@ (800b6d4 <AHT_Upkeep+0x1b8>)
 800b674:	0019      	movs	r1, r3
 800b676:	2001      	movs	r0, #1
 800b678:	f008 fc0c 	bl	8013e94 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b67c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b67e:	2200      	movs	r2, #0
 800b680:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b682:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c0 <AHT_Upkeep+0x1a4>)
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c4 <AHT_Upkeep+0x1a8>)
 800b688:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b68a:	e005      	b.n	800b698 <AHT_Upkeep+0x17c>
    break;
 800b68c:	46c0      	nop			@ (mov r8, r8)
 800b68e:	e004      	b.n	800b69a <AHT_Upkeep+0x17e>
      break;
 800b690:	46c0      	nop			@ (mov r8, r8)
 800b692:	e002      	b.n	800b69a <AHT_Upkeep+0x17e>
    break;
 800b694:	46c0      	nop			@ (mov r8, r8)
 800b696:	e000      	b.n	800b69a <AHT_Upkeep+0x17e>
    break;
 800b698:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b69a:	4b04      	ldr	r3, [pc, #16]	@ (800b6ac <AHT_Upkeep+0x190>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
}
 800b69e:	0018      	movs	r0, r3
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	b002      	add	sp, #8
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	46c0      	nop			@ (mov r8, r8)
 800b6a8:	20000ee0 	.word	0x20000ee0
 800b6ac:	2000009f 	.word	0x2000009f
 800b6b0:	0802e618 	.word	0x0802e618
 800b6b4:	0802c58c 	.word	0x0802c58c
 800b6b8:	0802c3dc 	.word	0x0802c3dc
 800b6bc:	000dbba0 	.word	0x000dbba0
 800b6c0:	20000e43 	.word	0x20000e43
 800b6c4:	20000efc 	.word	0x20000efc
 800b6c8:	0000ea60 	.word	0x0000ea60
 800b6cc:	20000efb 	.word	0x20000efb
 800b6d0:	0802c5b4 	.word	0x0802c5b4
 800b6d4:	0802c440 	.word	0x0802c440

0800b6d8 <WriteMemRegister>:
static bool bmperror = false;
static uint8_t mode = BMP280_FORCED_MODE;
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	0004      	movs	r4, r0
 800b6e0:	0008      	movs	r0, r1
 800b6e2:	60ba      	str	r2, [r7, #8]
 800b6e4:	0019      	movs	r1, r3
 800b6e6:	260e      	movs	r6, #14
 800b6e8:	19bb      	adds	r3, r7, r6
 800b6ea:	1c22      	adds	r2, r4, #0
 800b6ec:	801a      	strh	r2, [r3, #0]
 800b6ee:	230c      	movs	r3, #12
 800b6f0:	18fb      	adds	r3, r7, r3
 800b6f2:	1c02      	adds	r2, r0, #0
 800b6f4:	801a      	strh	r2, [r3, #0]
 800b6f6:	1dbb      	adds	r3, r7, #6
 800b6f8:	1c0a      	adds	r2, r1, #0
 800b6fa:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b730 <WriteMemRegister+0x58>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d010      	beq.n	800b726 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b704:	4b0a      	ldr	r3, [pc, #40]	@ (800b730 <WriteMemRegister+0x58>)
 800b706:	681c      	ldr	r4, [r3, #0]
 800b708:	4b0a      	ldr	r3, [pc, #40]	@ (800b734 <WriteMemRegister+0x5c>)
 800b70a:	7818      	ldrb	r0, [r3, #0]
 800b70c:	68bd      	ldr	r5, [r7, #8]
 800b70e:	230c      	movs	r3, #12
 800b710:	18fb      	adds	r3, r7, r3
 800b712:	881a      	ldrh	r2, [r3, #0]
 800b714:	19bb      	adds	r3, r7, r6
 800b716:	8819      	ldrh	r1, [r3, #0]
 800b718:	1dbb      	adds	r3, r7, #6
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	002b      	movs	r3, r5
 800b720:	47a0      	blx	r4
 800b722:	0003      	movs	r3, r0
 800b724:	e000      	b.n	800b728 <WriteMemRegister+0x50>
  }
  return false;
 800b726:	2300      	movs	r3, #0
}
 800b728:	0018      	movs	r0, r3
 800b72a:	46bd      	mov	sp, r7
 800b72c:	b005      	add	sp, #20
 800b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b730:	20000f00 	.word	0x20000f00
 800b734:	200000a0 	.word	0x200000a0

0800b738 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af02      	add	r7, sp, #8
 800b73e:	0004      	movs	r4, r0
 800b740:	0008      	movs	r0, r1
 800b742:	60ba      	str	r2, [r7, #8]
 800b744:	0019      	movs	r1, r3
 800b746:	260e      	movs	r6, #14
 800b748:	19bb      	adds	r3, r7, r6
 800b74a:	1c22      	adds	r2, r4, #0
 800b74c:	801a      	strh	r2, [r3, #0]
 800b74e:	230c      	movs	r3, #12
 800b750:	18fb      	adds	r3, r7, r3
 800b752:	1c02      	adds	r2, r0, #0
 800b754:	801a      	strh	r2, [r3, #0]
 800b756:	1dbb      	adds	r3, r7, #6
 800b758:	1c0a      	adds	r2, r1, #0
 800b75a:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b75c:	4b0c      	ldr	r3, [pc, #48]	@ (800b790 <ReadMemRegister+0x58>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d010      	beq.n	800b786 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b764:	4b0a      	ldr	r3, [pc, #40]	@ (800b790 <ReadMemRegister+0x58>)
 800b766:	681c      	ldr	r4, [r3, #0]
 800b768:	4b0a      	ldr	r3, [pc, #40]	@ (800b794 <ReadMemRegister+0x5c>)
 800b76a:	7818      	ldrb	r0, [r3, #0]
 800b76c:	68bd      	ldr	r5, [r7, #8]
 800b76e:	230c      	movs	r3, #12
 800b770:	18fb      	adds	r3, r7, r3
 800b772:	881a      	ldrh	r2, [r3, #0]
 800b774:	19bb      	adds	r3, r7, r6
 800b776:	8819      	ldrh	r1, [r3, #0]
 800b778:	1dbb      	adds	r3, r7, #6
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	002b      	movs	r3, r5
 800b780:	47a0      	blx	r4
 800b782:	0003      	movs	r3, r0
 800b784:	e000      	b.n	800b788 <ReadMemRegister+0x50>
  }
  return false;
 800b786:	2300      	movs	r3, #0
}
 800b788:	0018      	movs	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b005      	add	sp, #20
 800b78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b790:	20000f04 	.word	0x20000f04
 800b794:	200000a0 	.word	0x200000a0

0800b798 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b7a0:	f009 f8f8 	bl	8014994 <HAL_GetTick>
 800b7a4:	0002      	movs	r2, r0
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	18d2      	adds	r2, r2, r3
 800b7aa:	4b03      	ldr	r3, [pc, #12]	@ (800b7b8 <setBMP280TimeStamp+0x20>)
 800b7ac:	601a      	str	r2, [r3, #0]
}
 800b7ae:	46c0      	nop			@ (mov r8, r8)
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b002      	add	sp, #8
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	20000f24 	.word	0x20000f24

0800b7bc <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b7c6:	4b05      	ldr	r3, [pc, #20]	@ (800b7dc <BMP_Init+0x20>)
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b7cc:	4b04      	ldr	r3, [pc, #16]	@ (800b7e0 <BMP_Init+0x24>)
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	601a      	str	r2, [r3, #0]
}
 800b7d2:	46c0      	nop			@ (mov r8, r8)
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b002      	add	sp, #8
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	46c0      	nop			@ (mov r8, r8)
 800b7dc:	20000f04 	.word	0x20000f04
 800b7e0:	20000f00 	.word	0x20000f00

0800b7e4 <BMP280_reset>:

static void BMP280_reset() {
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b7ea:	1dfb      	adds	r3, r7, #7
 800b7ec:	22b6      	movs	r2, #182	@ 0xb6
 800b7ee:	701a      	strb	r2, [r3, #0]
  bmperror = false;
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b81c <BMP280_reset+0x38>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b7f6:	1dfa      	adds	r2, r7, #7
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	20e0      	movs	r0, #224	@ 0xe0
 800b7fe:	f7ff ff6b 	bl	800b6d8 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b802:	4a07      	ldr	r2, [pc, #28]	@ (800b820 <BMP280_reset+0x3c>)
 800b804:	4b07      	ldr	r3, [pc, #28]	@ (800b824 <BMP280_reset+0x40>)
 800b806:	0019      	movs	r1, r3
 800b808:	2002      	movs	r0, #2
 800b80a:	f008 fb43 	bl	8013e94 <CreateLine>
  HAL_Delay(100);
 800b80e:	2064      	movs	r0, #100	@ 0x64
 800b810:	f009 f8ca 	bl	80149a8 <HAL_Delay>
}
 800b814:	46c0      	nop			@ (mov r8, r8)
 800b816:	46bd      	mov	sp, r7
 800b818:	b002      	add	sp, #8
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	20000f2a 	.word	0x20000f2a
 800b820:	0802c5f8 	.word	0x0802c5f8
 800b824:	0802c610 	.word	0x0802c610

0800b828 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b828:	b590      	push	{r4, r7, lr}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af02      	add	r7, sp, #8
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, (uint8_t *)&dig, sizeof(dig));
 800b82e:	4a30      	ldr	r2, [pc, #192]	@ (800b8f0 <BMP280_get_calibration+0xc8>)
 800b830:	2318      	movs	r3, #24
 800b832:	2101      	movs	r1, #1
 800b834:	2088      	movs	r0, #136	@ 0x88
 800b836:	f7ff ff7f 	bl	800b738 <ReadMemRegister>
  Debug("BMP280 calibration data:");
 800b83a:	4a2e      	ldr	r2, [pc, #184]	@ (800b8f4 <BMP280_get_calibration+0xcc>)
 800b83c:	4b2e      	ldr	r3, [pc, #184]	@ (800b8f8 <BMP280_get_calibration+0xd0>)
 800b83e:	0019      	movs	r1, r3
 800b840:	2003      	movs	r0, #3
 800b842:	f008 fb27 	bl	8013e94 <CreateLine>
  char stc = 'T';
 800b846:	1dfb      	adds	r3, r7, #7
 800b848:	2254      	movs	r2, #84	@ 0x54
 800b84a:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 1;
 800b84c:	1dbb      	adds	r3, r7, #6
 800b84e:	2201      	movs	r2, #1
 800b850:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b852:	1d7b      	adds	r3, r7, #5
 800b854:	2200      	movs	r2, #0
 800b856:	701a      	strb	r2, [r3, #0]
 800b858:	e041      	b.n	800b8de <BMP280_get_calibration+0xb6>
    if ((x == 0) || (x == 3)) {
 800b85a:	1d7b      	adds	r3, r7, #5
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <BMP280_get_calibration+0x42>
 800b862:	1d7b      	adds	r3, r7, #5
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	2b03      	cmp	r3, #3
 800b868:	d11d      	bne.n	800b8a6 <BMP280_get_calibration+0x7e>
      if (x==3) {
 800b86a:	1d7b      	adds	r3, r7, #5
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d105      	bne.n	800b87e <BMP280_get_calibration+0x56>
        idx = 1;
 800b872:	1dbb      	adds	r3, r7, #6
 800b874:	2201      	movs	r2, #1
 800b876:	701a      	strb	r2, [r3, #0]
        stc = 'P';
 800b878:	1dfb      	adds	r3, r7, #7
 800b87a:	2250      	movs	r2, #80	@ 0x50
 800b87c:	701a      	strb	r2, [r3, #0]
      }
      Debug("dig.%c%d: %d", stc, idx, (uint16_t)dig.calarray[x]);
 800b87e:	1dfb      	adds	r3, r7, #7
 800b880:	7818      	ldrb	r0, [r3, #0]
 800b882:	1dbb      	adds	r3, r7, #6
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	1d7a      	adds	r2, r7, #5
 800b888:	7811      	ldrb	r1, [r2, #0]
 800b88a:	4a19      	ldr	r2, [pc, #100]	@ (800b8f0 <BMP280_get_calibration+0xc8>)
 800b88c:	0049      	lsls	r1, r1, #1
 800b88e:	5e8a      	ldrsh	r2, [r1, r2]
 800b890:	b292      	uxth	r2, r2
 800b892:	0014      	movs	r4, r2
 800b894:	4a19      	ldr	r2, [pc, #100]	@ (800b8fc <BMP280_get_calibration+0xd4>)
 800b896:	4918      	ldr	r1, [pc, #96]	@ (800b8f8 <BMP280_get_calibration+0xd0>)
 800b898:	9401      	str	r4, [sp, #4]
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	0003      	movs	r3, r0
 800b89e:	2003      	movs	r0, #3
 800b8a0:	f008 faf8 	bl	8013e94 <CreateLine>
 800b8a4:	e011      	b.n	800b8ca <BMP280_get_calibration+0xa2>
    }
    else {
    Debug("dig.%c%d: %d", stc, idx, dig.calarray[x]);
 800b8a6:	1dfb      	adds	r3, r7, #7
 800b8a8:	7818      	ldrb	r0, [r3, #0]
 800b8aa:	1dbb      	adds	r3, r7, #6
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	1d7a      	adds	r2, r7, #5
 800b8b0:	7811      	ldrb	r1, [r2, #0]
 800b8b2:	4a0f      	ldr	r2, [pc, #60]	@ (800b8f0 <BMP280_get_calibration+0xc8>)
 800b8b4:	0049      	lsls	r1, r1, #1
 800b8b6:	5e8a      	ldrsh	r2, [r1, r2]
 800b8b8:	0014      	movs	r4, r2
 800b8ba:	4a10      	ldr	r2, [pc, #64]	@ (800b8fc <BMP280_get_calibration+0xd4>)
 800b8bc:	490e      	ldr	r1, [pc, #56]	@ (800b8f8 <BMP280_get_calibration+0xd0>)
 800b8be:	9401      	str	r4, [sp, #4]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	0003      	movs	r3, r0
 800b8c4:	2003      	movs	r0, #3
 800b8c6:	f008 fae5 	bl	8013e94 <CreateLine>
    }
    idx++;
 800b8ca:	1dbb      	adds	r3, r7, #6
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	1dbb      	adds	r3, r7, #6
 800b8d0:	3201      	adds	r2, #1
 800b8d2:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b8d4:	1d7b      	adds	r3, r7, #5
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	1d7b      	adds	r3, r7, #5
 800b8da:	3201      	adds	r2, #1
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	1d7b      	adds	r3, r7, #5
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b0b      	cmp	r3, #11
 800b8e4:	d9b9      	bls.n	800b85a <BMP280_get_calibration+0x32>
  }
}
 800b8e6:	46c0      	nop			@ (mov r8, r8)
 800b8e8:	46c0      	nop			@ (mov r8, r8)
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	b003      	add	sp, #12
 800b8ee:	bd90      	pop	{r4, r7, pc}
 800b8f0:	20000f08 	.word	0x20000f08
 800b8f4:	0802c614 	.word	0x0802c614
 800b8f8:	0802c630 	.word	0x0802c630
 800b8fc:	0802c634 	.word	0x0802c634

0800b900 <BMP280_set_config>:

void BMP280_set_config() {
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_16 | BMP280_SPI_OFF);
 800b906:	1dfb      	adds	r3, r7, #7
 800b908:	2290      	movs	r2, #144	@ 0x90
 800b90a:	701a      	strb	r2, [r3, #0]
  if (!WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1)) {
 800b90c:	1dfa      	adds	r2, r7, #7
 800b90e:	2301      	movs	r3, #1
 800b910:	2101      	movs	r1, #1
 800b912:	20f5      	movs	r0, #245	@ 0xf5
 800b914:	f7ff fee0 	bl	800b6d8 <WriteMemRegister>
 800b918:	0003      	movs	r3, r0
 800b91a:	001a      	movs	r2, r3
 800b91c:	2301      	movs	r3, #1
 800b91e:	4053      	eors	r3, r2
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d005      	beq.n	800b932 <BMP280_set_config+0x32>
    Error("BMP280 writing to BMP280_REG_CONFIG");
 800b926:	4a0b      	ldr	r2, [pc, #44]	@ (800b954 <BMP280_set_config+0x54>)
 800b928:	4b0b      	ldr	r3, [pc, #44]	@ (800b958 <BMP280_set_config+0x58>)
 800b92a:	0019      	movs	r1, r3
 800b92c:	2001      	movs	r0, #1
 800b92e:	f008 fab1 	bl	8013e94 <CreateLine>
  }
  ReadMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b932:	1dfa      	adds	r2, r7, #7
 800b934:	2301      	movs	r3, #1
 800b936:	2101      	movs	r1, #1
 800b938:	20f5      	movs	r0, #245	@ 0xf5
 800b93a:	f7ff fefd 	bl	800b738 <ReadMemRegister>
  Debug("BMP280_REG_CONFIG: 0x%02X", data);
 800b93e:	1dfb      	adds	r3, r7, #7
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	4a06      	ldr	r2, [pc, #24]	@ (800b95c <BMP280_set_config+0x5c>)
 800b944:	4906      	ldr	r1, [pc, #24]	@ (800b960 <BMP280_set_config+0x60>)
 800b946:	2003      	movs	r0, #3
 800b948:	f008 faa4 	bl	8013e94 <CreateLine>
}
 800b94c:	46c0      	nop			@ (mov r8, r8)
 800b94e:	46bd      	mov	sp, r7
 800b950:	b002      	add	sp, #8
 800b952:	bd80      	pop	{r7, pc}
 800b954:	0802c644 	.word	0x0802c644
 800b958:	0802c668 	.word	0x0802c668
 800b95c:	0802c66c 	.word	0x0802c66c
 800b960:	0802c630 	.word	0x0802c630

0800b964 <BMP280_DeviceConnected>:

 bool BMP280_DeviceConnected() {
 800b964:	b590      	push	{r4, r7, lr}
 800b966:	b085      	sub	sp, #20
 800b968:	af02      	add	r7, sp, #8
   bool rslt = false;
 800b96a:	1dfb      	adds	r3, r7, #7
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
    uint8_t bmpData;
    // Read the chip-id of bmp280 sensor
    bmp280I2Caddr = BMP280_ADDRESS;
 800b970:	4b28      	ldr	r3, [pc, #160]	@ (800ba14 <BMP280_DeviceConnected+0xb0>)
 800b972:	2276      	movs	r2, #118	@ 0x76
 800b974:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b976:	1dfc      	adds	r4, r7, #7
 800b978:	1dba      	adds	r2, r7, #6
 800b97a:	2301      	movs	r3, #1
 800b97c:	2101      	movs	r1, #1
 800b97e:	20d0      	movs	r0, #208	@ 0xd0
 800b980:	f7ff feda 	bl	800b738 <ReadMemRegister>
 800b984:	0003      	movs	r3, r0
 800b986:	7023      	strb	r3, [r4, #0]
    if (bmpData != BMP280_CHIP_ID) {
 800b988:	1dbb      	adds	r3, r7, #6
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b58      	cmp	r3, #88	@ 0x58
 800b98e:	d00e      	beq.n	800b9ae <BMP280_DeviceConnected+0x4a>
      bmp280I2Caddr++;
 800b990:	4b20      	ldr	r3, [pc, #128]	@ (800ba14 <BMP280_DeviceConnected+0xb0>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	3301      	adds	r3, #1
 800b996:	b2da      	uxtb	r2, r3
 800b998:	4b1e      	ldr	r3, [pc, #120]	@ (800ba14 <BMP280_DeviceConnected+0xb0>)
 800b99a:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b99c:	1dfc      	adds	r4, r7, #7
 800b99e:	1dba      	adds	r2, r7, #6
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	20d0      	movs	r0, #208	@ 0xd0
 800b9a6:	f7ff fec7 	bl	800b738 <ReadMemRegister>
 800b9aa:	0003      	movs	r3, r0
 800b9ac:	7023      	strb	r3, [r4, #0]
    }
    if (rslt && (bmpData == BMP280_CHIP_ID)) {
 800b9ae:	1dfb      	adds	r3, r7, #7
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d01b      	beq.n	800b9ee <BMP280_DeviceConnected+0x8a>
 800b9b6:	1dbb      	adds	r3, r7, #6
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2b58      	cmp	r3, #88	@ 0x58
 800b9bc:	d117      	bne.n	800b9ee <BMP280_DeviceConnected+0x8a>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b9be:	1dbb      	adds	r3, r7, #6
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	4b13      	ldr	r3, [pc, #76]	@ (800ba14 <BMP280_DeviceConnected+0xb0>)
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	4a13      	ldr	r2, [pc, #76]	@ (800ba18 <BMP280_DeviceConnected+0xb4>)
 800b9ca:	4914      	ldr	r1, [pc, #80]	@ (800ba1c <BMP280_DeviceConnected+0xb8>)
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	0003      	movs	r3, r0
 800b9d0:	2002      	movs	r0, #2
 800b9d2:	f008 fa5f 	bl	8013e94 <CreateLine>
      BMP280_reset(); // get an initial state
 800b9d6:	f7ff ff05 	bl	800b7e4 <BMP280_reset>
      HAL_Delay(3);
 800b9da:	2003      	movs	r0, #3
 800b9dc:	f008 ffe4 	bl	80149a8 <HAL_Delay>
      BMP280_get_calibration();
 800b9e0:	f7ff ff22 	bl	800b828 <BMP280_get_calibration>
      BMP280_set_config();
 800b9e4:	f7ff ff8c 	bl	800b900 <BMP280_set_config>
      BMP280_set_mode();
 800b9e8:	f000 f8f6 	bl	800bbd8 <BMP280_set_mode>
 800b9ec:	e008      	b.n	800ba00 <BMP280_DeviceConnected+0x9c>
    }
    else {
      bmp280I2Caddr = 0;
 800b9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ba14 <BMP280_DeviceConnected+0xb0>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800b9f4:	4a0a      	ldr	r2, [pc, #40]	@ (800ba20 <BMP280_DeviceConnected+0xbc>)
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba24 <BMP280_DeviceConnected+0xc0>)
 800b9f8:	0019      	movs	r1, r3
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	f008 fa4a 	bl	8013e94 <CreateLine>
    }
    return bmp280I2Caddr;
 800ba00:	4b04      	ldr	r3, [pc, #16]	@ (800ba14 <BMP280_DeviceConnected+0xb0>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	1e5a      	subs	r2, r3, #1
 800ba06:	4193      	sbcs	r3, r2
 800ba08:	b2db      	uxtb	r3, r3
}
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	b003      	add	sp, #12
 800ba10:	bd90      	pop	{r4, r7, pc}
 800ba12:	46c0      	nop			@ (mov r8, r8)
 800ba14:	200000a0 	.word	0x200000a0
 800ba18:	0802c688 	.word	0x0802c688
 800ba1c:	0802c610 	.word	0x0802c610
 800ba20:	0802c6c0 	.word	0x0802c6c0
 800ba24:	0802c668 	.word	0x0802c668

0800ba28 <BMP280_get_measurement_values>:

static bool BMP280_get_measurement_values() {
 800ba28:	b5b0      	push	{r4, r5, r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af04      	add	r7, sp, #16
  int8_t rslt = 1;
 800ba2e:	1dfb      	adds	r3, r7, #7
 800ba30:	2201      	movs	r2, #1
 800ba32:	701a      	strb	r2, [r3, #0]
  uint8_t bmpData[6];
  HAL_Delay(9);
 800ba34:	2009      	movs	r0, #9
 800ba36:	f008 ffb7 	bl	80149a8 <HAL_Delay>
  BMP280TimeStamp = HAL_GetTick() + 1500;  // time for local loop
 800ba3a:	f008 ffab 	bl	8014994 <HAL_GetTick>
 800ba3e:	0003      	movs	r3, r0
 800ba40:	4a49      	ldr	r2, [pc, #292]	@ (800bb68 <BMP280_get_measurement_values+0x140>)
 800ba42:	189a      	adds	r2, r3, r2
 800ba44:	4b49      	ldr	r3, [pc, #292]	@ (800bb6c <BMP280_get_measurement_values+0x144>)
 800ba46:	601a      	str	r2, [r3, #0]
  do {
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData[0], 1); // store at start address of array
 800ba48:	003a      	movs	r2, r7
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	20f3      	movs	r0, #243	@ 0xf3
 800ba50:	f7ff fe72 	bl	800b738 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)) {
 800ba54:	4b45      	ldr	r3, [pc, #276]	@ (800bb6c <BMP280_get_measurement_values+0x144>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	0018      	movs	r0, r3
 800ba5a:	f008 f9c5 	bl	8013de8 <TimestampIsReached>
 800ba5e:	1e03      	subs	r3, r0, #0
 800ba60:	d007      	beq.n	800ba72 <BMP280_get_measurement_values+0x4a>
      Error("BMP280 timeout while waiting for ready.");
 800ba62:	4a43      	ldr	r2, [pc, #268]	@ (800bb70 <BMP280_get_measurement_values+0x148>)
 800ba64:	4b43      	ldr	r3, [pc, #268]	@ (800bb74 <BMP280_get_measurement_values+0x14c>)
 800ba66:	0019      	movs	r1, r3
 800ba68:	2001      	movs	r0, #1
 800ba6a:	f008 fa13 	bl	8013e94 <CreateLine>
      return false;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e076      	b.n	800bb60 <BMP280_get_measurement_values+0x138>
    }
    HAL_Delay(10);
 800ba72:	200a      	movs	r0, #10
 800ba74:	f008 ff98 	bl	80149a8 <HAL_Delay>
  } while ((bmpData[0] & (BMP280_NVM_RDY | BMP280_MEAS_RDY)) != 0);
 800ba78:	003b      	movs	r3, r7
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	001a      	movs	r2, r3
 800ba7e:	2309      	movs	r3, #9
 800ba80:	4013      	ands	r3, r2
 800ba82:	d1e1      	bne.n	800ba48 <BMP280_get_measurement_values+0x20>
  //  } while (((bmpData[0] & BMP280_NVM_RDY) == BMP280_NVM_RDY) || ((bmpData[0] & BMP280_MEAS_RDY) == BMP280_MEAS_RDY));
  rslt = ReadMemRegister(BMP280_REG_PRESS_MSB, 1, &bmpData[0], 6);
 800ba84:	003a      	movs	r2, r7
 800ba86:	2306      	movs	r3, #6
 800ba88:	2101      	movs	r1, #1
 800ba8a:	20f7      	movs	r0, #247	@ 0xf7
 800ba8c:	f7ff fe54 	bl	800b738 <ReadMemRegister>
 800ba90:	0003      	movs	r3, r0
 800ba92:	001a      	movs	r2, r3
 800ba94:	1dfb      	adds	r3, r7, #7
 800ba96:	701a      	strb	r2, [r3, #0]
  raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800ba98:	003b      	movs	r3, r7
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	031a      	lsls	r2, r3, #12
 800ba9e:	003b      	movs	r3, r7
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	011b      	lsls	r3, r3, #4
 800baa4:	18d3      	adds	r3, r2, r3
 800baa6:	003a      	movs	r2, r7
 800baa8:	7892      	ldrb	r2, [r2, #2]
 800baaa:	0912      	lsrs	r2, r2, #4
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	189b      	adds	r3, r3, r2
 800bab0:	001a      	movs	r2, r3
 800bab2:	4b31      	ldr	r3, [pc, #196]	@ (800bb78 <BMP280_get_measurement_values+0x150>)
 800bab4:	601a      	str	r2, [r3, #0]
  if (bmpData[0] == 0x80) {
 800bab6:	003b      	movs	r3, r7
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b80      	cmp	r3, #128	@ 0x80
 800babc:	d11b      	bne.n	800baf6 <BMP280_get_measurement_values+0xce>
    Error("BMP280 Invalid read of barometric pressure.");
 800babe:	4a2f      	ldr	r2, [pc, #188]	@ (800bb7c <BMP280_get_measurement_values+0x154>)
 800bac0:	4b2c      	ldr	r3, [pc, #176]	@ (800bb74 <BMP280_get_measurement_values+0x14c>)
 800bac2:	0019      	movs	r1, r3
 800bac4:	2001      	movs	r0, #1
 800bac6:	f008 f9e5 	bl	8013e94 <CreateLine>
    Debug("Data[0]: 0x%02X, Data[1]: 0x%02X, Data[2]: 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800baca:	003b      	movs	r3, r7
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	001d      	movs	r5, r3
 800bad0:	003b      	movs	r3, r7
 800bad2:	785b      	ldrb	r3, [r3, #1]
 800bad4:	0018      	movs	r0, r3
 800bad6:	003b      	movs	r3, r7
 800bad8:	789b      	ldrb	r3, [r3, #2]
 800bada:	001c      	movs	r4, r3
 800badc:	4b26      	ldr	r3, [pc, #152]	@ (800bb78 <BMP280_get_measurement_values+0x150>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a27      	ldr	r2, [pc, #156]	@ (800bb80 <BMP280_get_measurement_values+0x158>)
 800bae2:	4928      	ldr	r1, [pc, #160]	@ (800bb84 <BMP280_get_measurement_values+0x15c>)
 800bae4:	9302      	str	r3, [sp, #8]
 800bae6:	9401      	str	r4, [sp, #4]
 800bae8:	9000      	str	r0, [sp, #0]
 800baea:	002b      	movs	r3, r5
 800baec:	2003      	movs	r0, #3
 800baee:	f008 f9d1 	bl	8013e94 <CreateLine>
    SetAllBlueLED();
 800baf2:	f007 f8db 	bl	8012cac <SetAllBlueLED>
  }
  raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800baf6:	003b      	movs	r3, r7
 800baf8:	78db      	ldrb	r3, [r3, #3]
 800bafa:	031a      	lsls	r2, r3, #12
 800bafc:	003b      	movs	r3, r7
 800bafe:	791b      	ldrb	r3, [r3, #4]
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	18d3      	adds	r3, r2, r3
 800bb04:	003a      	movs	r2, r7
 800bb06:	7952      	ldrb	r2, [r2, #5]
 800bb08:	0912      	lsrs	r2, r2, #4
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	189b      	adds	r3, r3, r2
 800bb0e:	001a      	movs	r2, r3
 800bb10:	4b1d      	ldr	r3, [pc, #116]	@ (800bb88 <BMP280_get_measurement_values+0x160>)
 800bb12:	601a      	str	r2, [r3, #0]
  if (bmpData[3] == 0x80) {
 800bb14:	003b      	movs	r3, r7
 800bb16:	78db      	ldrb	r3, [r3, #3]
 800bb18:	2b80      	cmp	r3, #128	@ 0x80
 800bb1a:	d11b      	bne.n	800bb54 <BMP280_get_measurement_values+0x12c>
    Error("BMP280 Invalid read of temperature.");
 800bb1c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb8c <BMP280_get_measurement_values+0x164>)
 800bb1e:	4b15      	ldr	r3, [pc, #84]	@ (800bb74 <BMP280_get_measurement_values+0x14c>)
 800bb20:	0019      	movs	r1, r3
 800bb22:	2001      	movs	r0, #1
 800bb24:	f008 f9b6 	bl	8013e94 <CreateLine>
    Debug("Data[3]: 0x%02X, Data[4]: 0x%02X, Data[5]: 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800bb28:	003b      	movs	r3, r7
 800bb2a:	78db      	ldrb	r3, [r3, #3]
 800bb2c:	001d      	movs	r5, r3
 800bb2e:	003b      	movs	r3, r7
 800bb30:	791b      	ldrb	r3, [r3, #4]
 800bb32:	0018      	movs	r0, r3
 800bb34:	003b      	movs	r3, r7
 800bb36:	795b      	ldrb	r3, [r3, #5]
 800bb38:	001c      	movs	r4, r3
 800bb3a:	4b13      	ldr	r3, [pc, #76]	@ (800bb88 <BMP280_get_measurement_values+0x160>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a14      	ldr	r2, [pc, #80]	@ (800bb90 <BMP280_get_measurement_values+0x168>)
 800bb40:	4910      	ldr	r1, [pc, #64]	@ (800bb84 <BMP280_get_measurement_values+0x15c>)
 800bb42:	9302      	str	r3, [sp, #8]
 800bb44:	9401      	str	r4, [sp, #4]
 800bb46:	9000      	str	r0, [sp, #0]
 800bb48:	002b      	movs	r3, r5
 800bb4a:	2003      	movs	r0, #3
 800bb4c:	f008 f9a2 	bl	8013e94 <CreateLine>
    SetAllBlueLED();
 800bb50:	f007 f8ac 	bl	8012cac <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld, rslt: %s", raw_mpa, raw_temp, rslt?"success":"fail");
  return rslt;
 800bb54:	1dfb      	adds	r3, r7, #7
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	b25b      	sxtb	r3, r3
 800bb5a:	1e5a      	subs	r2, r3, #1
 800bb5c:	4193      	sbcs	r3, r2
 800bb5e:	b2db      	uxtb	r3, r3
}
 800bb60:	0018      	movs	r0, r3
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b002      	add	sp, #8
 800bb66:	bdb0      	pop	{r4, r5, r7, pc}
 800bb68:	000005dc 	.word	0x000005dc
 800bb6c:	20000f24 	.word	0x20000f24
 800bb70:	0802c6d4 	.word	0x0802c6d4
 800bb74:	0802c668 	.word	0x0802c668
 800bb78:	20000f30 	.word	0x20000f30
 800bb7c:	0802c6fc 	.word	0x0802c6fc
 800bb80:	0802c728 	.word	0x0802c728
 800bb84:	0802c630 	.word	0x0802c630
 800bb88:	20000f2c 	.word	0x20000f2c
 800bb8c:	0802c768 	.word	0x0802c768
 800bb90:	0802c78c 	.word	0x0802c78c

0800bb94 <BMP280_get_mode>:

static uint8_t BMP280_get_mode() {
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800bb9a:	1dba      	adds	r2, r7, #6
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	2101      	movs	r1, #1
 800bba0:	20f4      	movs	r0, #244	@ 0xf4
 800bba2:	f7ff fdc9 	bl	800b738 <ReadMemRegister>
 800bba6:	0003      	movs	r3, r0
 800bba8:	001a      	movs	r2, r3
 800bbaa:	1dfb      	adds	r3, r7, #7
 800bbac:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800bbae:	1dbb      	adds	r3, r7, #6
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2203      	movs	r2, #3
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	1dbb      	adds	r3, r7, #6
 800bbba:	701a      	strb	r2, [r3, #0]
  if (rslt == 0) {
 800bbbc:	1dfb      	adds	r3, r7, #7
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	b25b      	sxtb	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <BMP280_get_mode+0x38>
    bmpData = 255;
 800bbc6:	1dbb      	adds	r3, r7, #6
 800bbc8:	22ff      	movs	r2, #255	@ 0xff
 800bbca:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bbcc:	1dbb      	adds	r3, r7, #6
 800bbce:	781b      	ldrb	r3, [r3, #0]
}
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	b002      	add	sp, #8
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <BMP280_set_mode>:

static bool BMP280_set_mode() {
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_16 | mode);
 800bbde:	4b1a      	ldr	r3, [pc, #104]	@ (800bc48 <BMP280_set_mode+0x70>)
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2254      	movs	r2, #84	@ 0x54
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	1dfb      	adds	r3, r7, #7
 800bbea:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800bbec:	1dfa      	adds	r2, r7, #7
 800bbee:	2301      	movs	r3, #1
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	20f4      	movs	r0, #244	@ 0xf4
 800bbf4:	f7ff fd70 	bl	800b6d8 <WriteMemRegister>
  HAL_Delay(10);
 800bbf8:	200a      	movs	r0, #10
 800bbfa:	f008 fed5 	bl	80149a8 <HAL_Delay>
  data = BMP280_get_mode();
 800bbfe:	f7ff ffc9 	bl	800bb94 <BMP280_get_mode>
 800bc02:	0003      	movs	r3, r0
 800bc04:	001a      	movs	r2, r3
 800bc06:	1dfb      	adds	r3, r7, #7
 800bc08:	701a      	strb	r2, [r3, #0]
  data &= BMP280_NORMAL_MODE;
 800bc0a:	1dfb      	adds	r3, r7, #7
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2203      	movs	r2, #3
 800bc10:	4013      	ands	r3, r2
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	1dfb      	adds	r3, r7, #7
 800bc16:	701a      	strb	r2, [r3, #0]
  Debug("BMP280 Operation mode: %s", data==0?"sleep":data==3?"normal":"forced");
 800bc18:	1dfb      	adds	r3, r7, #7
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d007      	beq.n	800bc30 <BMP280_set_mode+0x58>
 800bc20:	1dfb      	adds	r3, r7, #7
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d101      	bne.n	800bc2c <BMP280_set_mode+0x54>
 800bc28:	4b08      	ldr	r3, [pc, #32]	@ (800bc4c <BMP280_set_mode+0x74>)
 800bc2a:	e002      	b.n	800bc32 <BMP280_set_mode+0x5a>
 800bc2c:	4b08      	ldr	r3, [pc, #32]	@ (800bc50 <BMP280_set_mode+0x78>)
 800bc2e:	e000      	b.n	800bc32 <BMP280_set_mode+0x5a>
 800bc30:	4b08      	ldr	r3, [pc, #32]	@ (800bc54 <BMP280_set_mode+0x7c>)
 800bc32:	4a09      	ldr	r2, [pc, #36]	@ (800bc58 <BMP280_set_mode+0x80>)
 800bc34:	4909      	ldr	r1, [pc, #36]	@ (800bc5c <BMP280_set_mode+0x84>)
 800bc36:	2003      	movs	r0, #3
 800bc38:	f008 f92c 	bl	8013e94 <CreateLine>
  return true;
 800bc3c:	2301      	movs	r3, #1
}
 800bc3e:	0018      	movs	r0, r3
 800bc40:	46bd      	mov	sp, r7
 800bc42:	b002      	add	sp, #8
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	46c0      	nop			@ (mov r8, r8)
 800bc48:	200000a1 	.word	0x200000a1
 800bc4c:	0802c7cc 	.word	0x0802c7cc
 800bc50:	0802c7d4 	.word	0x0802c7d4
 800bc54:	0802c7dc 	.word	0x0802c7dc
 800bc58:	0802c7e4 	.word	0x0802c7e4
 800bc5c:	0802c630 	.word	0x0802c630

0800bc60 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade
// copied from datasheet
static float BMP280_calc_temperature() {
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bc66:	4b1e      	ldr	r3, [pc, #120]	@ (800bce0 <BMP280_calc_temperature+0x80>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	10da      	asrs	r2, r3, #3
 800bc70:	4b1c      	ldr	r3, [pc, #112]	@ (800bce4 <BMP280_calc_temperature+0x84>)
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	4a1a      	ldr	r2, [pc, #104]	@ (800bce4 <BMP280_calc_temperature+0x84>)
 800bc7a:	2102      	movs	r1, #2
 800bc7c:	5e52      	ldrsh	r2, [r2, r1]
 800bc7e:	4353      	muls	r3, r2
 800bc80:	12db      	asrs	r3, r3, #11
 800bc82:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	111b      	asrs	r3, r3, #4
 800bc88:	4a16      	ldr	r2, [pc, #88]	@ (800bce4 <BMP280_calc_temperature+0x84>)
 800bc8a:	8812      	ldrh	r2, [r2, #0]
 800bc8c:	1a9b      	subs	r3, r3, r2
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	1112      	asrs	r2, r2, #4
 800bc92:	4914      	ldr	r1, [pc, #80]	@ (800bce4 <BMP280_calc_temperature+0x84>)
 800bc94:	8809      	ldrh	r1, [r1, #0]
 800bc96:	1a52      	subs	r2, r2, r1
 800bc98:	4353      	muls	r3, r2
 800bc9a:	131b      	asrs	r3, r3, #12
 800bc9c:	4a11      	ldr	r2, [pc, #68]	@ (800bce4 <BMP280_calc_temperature+0x84>)
 800bc9e:	2104      	movs	r1, #4
 800bca0:	5e52      	ldrsh	r2, [r2, r1]
 800bca2:	4353      	muls	r3, r2
 800bca4:	139b      	asrs	r3, r3, #14
 800bca6:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	18d2      	adds	r2, r2, r3
 800bcae:	4b0e      	ldr	r3, [pc, #56]	@ (800bce8 <BMP280_calc_temperature+0x88>)
 800bcb0:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bcb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bce8 <BMP280_calc_temperature+0x88>)
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	0013      	movs	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	189b      	adds	r3, r3, r2
 800bcbc:	3380      	adds	r3, #128	@ 0x80
 800bcbe:	121b      	asrs	r3, r3, #8
 800bcc0:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bcc2:	68b8      	ldr	r0, [r7, #8]
 800bcc4:	f7f5 fdb0 	bl	8001828 <__aeabi_i2f>
 800bcc8:	1c03      	adds	r3, r0, #0
 800bcca:	4908      	ldr	r1, [pc, #32]	@ (800bcec <BMP280_calc_temperature+0x8c>)
 800bccc:	1c18      	adds	r0, r3, #0
 800bcce:	f7f4 ffe9 	bl	8000ca4 <__aeabi_fdiv>
 800bcd2:	1c03      	adds	r3, r0, #0
 800bcd4:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bcd6:	687b      	ldr	r3, [r7, #4]
}
 800bcd8:	1c18      	adds	r0, r3, #0
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	b006      	add	sp, #24
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20000f2c 	.word	0x20000f2c
 800bce4:	20000f08 	.word	0x20000f08
 800bce8:	20000f20 	.word	0x20000f20
 800bcec:	42c80000 	.word	0x42c80000

0800bcf0 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bcf6:	4b4e      	ldr	r3, [pc, #312]	@ (800be30 <BMP280_calc_pressure+0x140>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bcfc:	4b4d      	ldr	r3, [pc, #308]	@ (800be34 <BMP280_calc_pressure+0x144>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	105b      	asrs	r3, r3, #1
 800bd02:	4a4d      	ldr	r2, [pc, #308]	@ (800be38 <BMP280_calc_pressure+0x148>)
 800bd04:	4694      	mov	ip, r2
 800bd06:	4463      	add	r3, ip
 800bd08:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	109b      	asrs	r3, r3, #2
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	1092      	asrs	r2, r2, #2
 800bd12:	4353      	muls	r3, r2
 800bd14:	12db      	asrs	r3, r3, #11
 800bd16:	4a49      	ldr	r2, [pc, #292]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bd18:	2110      	movs	r1, #16
 800bd1a:	5e52      	ldrsh	r2, [r2, r1]
 800bd1c:	4353      	muls	r3, r2
 800bd1e:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bd20:	4b46      	ldr	r3, [pc, #280]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bd22:	220e      	movs	r2, #14
 800bd24:	5e9b      	ldrsh	r3, [r3, r2]
 800bd26:	001a      	movs	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4353      	muls	r3, r2
 800bd2c:	005b      	lsls	r3, r3, #1
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	18d3      	adds	r3, r2, r3
 800bd32:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	109a      	asrs	r2, r3, #2
 800bd38:	4b40      	ldr	r3, [pc, #256]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bd3a:	210c      	movs	r1, #12
 800bd3c:	5e5b      	ldrsh	r3, [r3, r1]
 800bd3e:	041b      	lsls	r3, r3, #16
 800bd40:	18d3      	adds	r3, r2, r3
 800bd42:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bd44:	4b3d      	ldr	r3, [pc, #244]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bd46:	220a      	movs	r2, #10
 800bd48:	5e9b      	ldrsh	r3, [r3, r2]
 800bd4a:	0019      	movs	r1, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	109b      	asrs	r3, r3, #2
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	1092      	asrs	r2, r2, #2
 800bd54:	4353      	muls	r3, r2
 800bd56:	135b      	asrs	r3, r3, #13
 800bd58:	434b      	muls	r3, r1
 800bd5a:	10da      	asrs	r2, r3, #3
 800bd5c:	4b37      	ldr	r3, [pc, #220]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bd5e:	2108      	movs	r1, #8
 800bd60:	5e5b      	ldrsh	r3, [r3, r1]
 800bd62:	0019      	movs	r1, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	434b      	muls	r3, r1
 800bd68:	105b      	asrs	r3, r3, #1
 800bd6a:	18d3      	adds	r3, r2, r3
 800bd6c:	149b      	asrs	r3, r3, #18
 800bd6e:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2280      	movs	r2, #128	@ 0x80
 800bd74:	0212      	lsls	r2, r2, #8
 800bd76:	4694      	mov	ip, r2
 800bd78:	4463      	add	r3, ip
 800bd7a:	4a30      	ldr	r2, [pc, #192]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bd7c:	88d2      	ldrh	r2, [r2, #6]
 800bd7e:	4353      	muls	r3, r2
 800bd80:	13db      	asrs	r3, r3, #15
 800bd82:	60fb      	str	r3, [r7, #12]

  // Avoid exception caused by division with zero
  if (var1 == 0) {
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <BMP280_calc_pressure+0x9e>
    return 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e04b      	b.n	800be26 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2280      	movs	r2, #128	@ 0x80
 800bd92:	0352      	lsls	r2, r2, #13
 800bd94:	1ad2      	subs	r2, r2, r3
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	131b      	asrs	r3, r3, #12
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	001a      	movs	r2, r3
 800bd9e:	4b28      	ldr	r3, [pc, #160]	@ (800be40 <BMP280_calc_pressure+0x150>)
 800bda0:	4353      	muls	r3, r2
 800bda2:	617b      	str	r3, [r7, #20]

    // Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1
  if (p < 0x80000000)
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	db09      	blt.n	800bdbe <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	0011      	movs	r1, r2
 800bdb2:	0018      	movs	r0, r3
 800bdb4:	f7f4 f9f6 	bl	80001a4 <__udivsi3>
 800bdb8:	0003      	movs	r3, r0
 800bdba:	617b      	str	r3, [r7, #20]
 800bdbc:	e007      	b.n	800bdce <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	0019      	movs	r1, r3
 800bdc2:	6978      	ldr	r0, [r7, #20]
 800bdc4:	f7f4 f9ee 	bl	80001a4 <__udivsi3>
 800bdc8:	0003      	movs	r3, r0
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800bdce:	4b1b      	ldr	r3, [pc, #108]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bdd0:	2216      	movs	r2, #22
 800bdd2:	5e9b      	ldrsh	r3, [r3, r2]
 800bdd4:	0019      	movs	r1, r3
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	08db      	lsrs	r3, r3, #3
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	08d2      	lsrs	r2, r2, #3
 800bdde:	4353      	muls	r3, r2
 800bde0:	0b5b      	lsrs	r3, r3, #13
 800bde2:	434b      	muls	r3, r1
 800bde4:	131b      	asrs	r3, r3, #12
 800bde6:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	089b      	lsrs	r3, r3, #2
 800bdec:	001a      	movs	r2, r3
 800bdee:	4b13      	ldr	r3, [pc, #76]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800bdf0:	2114      	movs	r1, #20
 800bdf2:	5e5b      	ldrsh	r3, [r3, r1]
 800bdf4:	4353      	muls	r3, r2
 800bdf6:	135b      	asrs	r3, r3, #13
 800bdf8:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	18d3      	adds	r3, r2, r3
 800be00:	4a0e      	ldr	r2, [pc, #56]	@ (800be3c <BMP280_calc_pressure+0x14c>)
 800be02:	2112      	movs	r1, #18
 800be04:	5e52      	ldrsh	r2, [r2, r1]
 800be06:	189b      	adds	r3, r3, r2
 800be08:	111a      	asrs	r2, r3, #4
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	18d3      	adds	r3, r2, r3
 800be0e:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800be10:	6978      	ldr	r0, [r7, #20]
 800be12:	f7f5 fd59 	bl	80018c8 <__aeabi_ui2f>
 800be16:	1c03      	adds	r3, r0, #0
 800be18:	490a      	ldr	r1, [pc, #40]	@ (800be44 <BMP280_calc_pressure+0x154>)
 800be1a:	1c18      	adds	r0, r3, #0
 800be1c:	f7f4 ff42 	bl	8000ca4 <__aeabi_fdiv>
 800be20:	1c03      	adds	r3, r0, #0
 800be22:	607b      	str	r3, [r7, #4]
  return airhPa;
 800be24:	687b      	ldr	r3, [r7, #4]
}
 800be26:	1c18      	adds	r0, r3, #0
 800be28:	46bd      	mov	sp, r7
 800be2a:	b006      	add	sp, #24
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	46c0      	nop			@ (mov r8, r8)
 800be30:	20000f30 	.word	0x20000f30
 800be34:	20000f20 	.word	0x20000f20
 800be38:	ffff0600 	.word	0xffff0600
 800be3c:	20000f08 	.word	0x20000f08
 800be40:	00000c35 	.word	0x00000c35
 800be44:	42c80000 	.word	0x42c80000

0800be48 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800be48:	b5b0      	push	{r4, r5, r7, lr}
 800be4a:	b088      	sub	sp, #32
 800be4c:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800be4e:	4b8e      	ldr	r3, [pc, #568]	@ (800c088 <BMP_Upkeep+0x240>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	0018      	movs	r0, r3
 800be54:	f007 ffc8 	bl	8013de8 <TimestampIsReached>
 800be58:	0003      	movs	r3, r0
 800be5a:	001a      	movs	r2, r3
 800be5c:	2301      	movs	r3, #1
 800be5e:	4053      	eors	r3, r2
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <BMP_Upkeep+0x24>
    return BMPState;
 800be66:	4b89      	ldr	r3, [pc, #548]	@ (800c08c <BMP_Upkeep+0x244>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	e109      	b.n	800c080 <BMP_Upkeep+0x238>
  }
  switch(BMPState) {
 800be6c:	4b87      	ldr	r3, [pc, #540]	@ (800c08c <BMP_Upkeep+0x244>)
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b02      	cmp	r3, #2
 800be72:	d100      	bne.n	800be76 <BMP_Upkeep+0x2e>
 800be74:	e0f2      	b.n	800c05c <BMP_Upkeep+0x214>
 800be76:	dd00      	ble.n	800be7a <BMP_Upkeep+0x32>
 800be78:	e0f4      	b.n	800c064 <BMP_Upkeep+0x21c>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <BMP_Upkeep+0x3e>
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d100      	bne.n	800be84 <BMP_Upkeep+0x3c>
 800be82:	e092      	b.n	800bfaa <BMP_Upkeep+0x162>
 800be84:	e0ee      	b.n	800c064 <BMP_Upkeep+0x21c>
  case BMP_MODE_SELECT:
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800be86:	f002 f81f 	bl	800dec8 <getSensorLock>
 800be8a:	1e03      	subs	r3, r0, #0
 800be8c:	d005      	beq.n	800be9a <BMP_Upkeep+0x52>
 800be8e:	f002 f81b 	bl	800dec8 <getSensorLock>
 800be92:	0003      	movs	r3, r0
 800be94:	2b03      	cmp	r3, #3
 800be96:	d000      	beq.n	800be9a <BMP_Upkeep+0x52>
 800be98:	e07f      	b.n	800bf9a <BMP_Upkeep+0x152>
      if (getSensorLock() == FREE) {
 800be9a:	f002 f815 	bl	800dec8 <getSensorLock>
 800be9e:	1e03      	subs	r3, r0, #0
 800bea0:	d102      	bne.n	800bea8 <BMP_Upkeep+0x60>
        setSensorLock(BMP280);
 800bea2:	2003      	movs	r0, #3
 800bea4:	f001 fffc 	bl	800dea0 <setSensorLock>
      }
      bmperror = false;
 800bea8:	4b79      	ldr	r3, [pc, #484]	@ (800c090 <BMP_Upkeep+0x248>)
 800beaa:	2200      	movs	r2, #0
 800beac:	701a      	strb	r2, [r3, #0]
      bool changed = false;
 800beae:	240f      	movs	r4, #15
 800beb0:	193b      	adds	r3, r7, r4
 800beb2:	2200      	movs	r2, #0
 800beb4:	701a      	strb	r2, [r3, #0]
      mode = BMP280_get_mode();
 800beb6:	f7ff fe6d 	bl	800bb94 <BMP280_get_mode>
 800beba:	0003      	movs	r3, r0
 800bebc:	001a      	movs	r2, r3
 800bebe:	4b75      	ldr	r3, [pc, #468]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bec0:	701a      	strb	r2, [r3, #0]
      mode &= BMP280_NORMAL_MODE;
 800bec2:	4b74      	ldr	r3, [pc, #464]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2203      	movs	r2, #3
 800bec8:	4013      	ands	r3, r2
 800beca:	b2da      	uxtb	r2, r3
 800becc:	4b71      	ldr	r3, [pc, #452]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bece:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bed0:	f7fd ff06 	bl	8009ce0 <Check_USB_PowerOn>
 800bed4:	1e03      	subs	r3, r0, #0
 800bed6:	d010      	beq.n	800befa <BMP_Upkeep+0xb2>
        if (mode != BMP280_NORMAL_MODE) {
 800bed8:	4b6e      	ldr	r3, [pc, #440]	@ (800c094 <BMP_Upkeep+0x24c>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b03      	cmp	r3, #3
 800bede:	d02d      	beq.n	800bf3c <BMP_Upkeep+0xf4>
          mode =BMP280_NORMAL_MODE;
 800bee0:	4b6c      	ldr	r3, [pc, #432]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bee2:	2203      	movs	r2, #3
 800bee4:	701a      	strb	r2, [r3, #0]
          changed = true;
 800bee6:	193b      	adds	r3, r7, r4
 800bee8:	2201      	movs	r2, #1
 800beea:	701a      	strb	r2, [r3, #0]
          Info("BMP280 modus changed to normal");
 800beec:	4a6a      	ldr	r2, [pc, #424]	@ (800c098 <BMP_Upkeep+0x250>)
 800beee:	4b6b      	ldr	r3, [pc, #428]	@ (800c09c <BMP_Upkeep+0x254>)
 800bef0:	0019      	movs	r1, r3
 800bef2:	2002      	movs	r0, #2
 800bef4:	f007 ffce 	bl	8013e94 <CreateLine>
 800bef8:	e020      	b.n	800bf3c <BMP_Upkeep+0xf4>
        }
      }
      else {
        if ((mode == BMP280_NORMAL_MODE) || (mode == BMP280_SLEEP_MODE) || (mode == 255)) {
 800befa:	4b66      	ldr	r3, [pc, #408]	@ (800c094 <BMP_Upkeep+0x24c>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b03      	cmp	r3, #3
 800bf00:	d007      	beq.n	800bf12 <BMP_Upkeep+0xca>
 800bf02:	4b64      	ldr	r3, [pc, #400]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <BMP_Upkeep+0xca>
 800bf0a:	4b62      	ldr	r3, [pc, #392]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2bff      	cmp	r3, #255	@ 0xff
 800bf10:	d114      	bne.n	800bf3c <BMP_Upkeep+0xf4>
          changed = true;
 800bf12:	230f      	movs	r3, #15
 800bf14:	18fb      	adds	r3, r7, r3
 800bf16:	2201      	movs	r2, #1
 800bf18:	701a      	strb	r2, [r3, #0]
          mode = BMP280_FORCED_MODE;
 800bf1a:	4b5e      	ldr	r3, [pc, #376]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	701a      	strb	r2, [r3, #0]
          if ((mode == BMP280_NORMAL_MODE)|| (mode == 255)) {
 800bf20:	4b5c      	ldr	r3, [pc, #368]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d003      	beq.n	800bf30 <BMP_Upkeep+0xe8>
 800bf28:	4b5a      	ldr	r3, [pc, #360]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2bff      	cmp	r3, #255	@ 0xff
 800bf2e:	d105      	bne.n	800bf3c <BMP_Upkeep+0xf4>
           Info("BMP280 modus changed to forced");
 800bf30:	4a5b      	ldr	r2, [pc, #364]	@ (800c0a0 <BMP_Upkeep+0x258>)
 800bf32:	4b5a      	ldr	r3, [pc, #360]	@ (800c09c <BMP_Upkeep+0x254>)
 800bf34:	0019      	movs	r1, r3
 800bf36:	2002      	movs	r0, #2
 800bf38:	f007 ffac 	bl	8013e94 <CreateLine>
          }
        }
      }
      if (changed || (mode == BMP280_FORCED_MODE)) {
 800bf3c:	230f      	movs	r3, #15
 800bf3e:	18fb      	adds	r3, r7, r3
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d103      	bne.n	800bf4e <BMP_Upkeep+0x106>
 800bf46:	4b53      	ldr	r3, [pc, #332]	@ (800c094 <BMP_Upkeep+0x24c>)
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d105      	bne.n	800bf5a <BMP_Upkeep+0x112>
        BMP280_set_mode();
 800bf4e:	f7ff fe43 	bl	800bbd8 <BMP280_set_mode>
        changed = false;
 800bf52:	230f      	movs	r3, #15
 800bf54:	18fb      	adds	r3, r7, r3
 800bf56:	2200      	movs	r2, #0
 800bf58:	701a      	strb	r2, [r3, #0]
      }
      if (BMP280_get_measurement_values()) {
 800bf5a:	f7ff fd65 	bl	800ba28 <BMP280_get_measurement_values>
 800bf5e:	1e03      	subs	r3, r0, #0
 800bf60:	d003      	beq.n	800bf6a <BMP_Upkeep+0x122>
        BMPState = BMP_STATE_PROCESS_RESULTS;
 800bf62:	4b4a      	ldr	r3, [pc, #296]	@ (800c08c <BMP_Upkeep+0x244>)
 800bf64:	2201      	movs	r2, #1
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	e012      	b.n	800bf90 <BMP_Upkeep+0x148>
      }
      else {
        Error("BMP280 Error during reading measurement results array");
 800bf6a:	4a4e      	ldr	r2, [pc, #312]	@ (800c0a4 <BMP_Upkeep+0x25c>)
 800bf6c:	4b4e      	ldr	r3, [pc, #312]	@ (800c0a8 <BMP_Upkeep+0x260>)
 800bf6e:	0019      	movs	r1, r3
 800bf70:	2001      	movs	r0, #1
 800bf72:	f007 ff8f 	bl	8013e94 <CreateLine>
        bmperror = true;
 800bf76:	4b46      	ldr	r3, [pc, #280]	@ (800c090 <BMP_Upkeep+0x248>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	701a      	strb	r2, [r3, #0]
        BMP280TimeStamp = HAL_GetTick() + 5000;
 800bf7c:	f008 fd0a 	bl	8014994 <HAL_GetTick>
 800bf80:	0003      	movs	r3, r0
 800bf82:	4a4a      	ldr	r2, [pc, #296]	@ (800c0ac <BMP_Upkeep+0x264>)
 800bf84:	189a      	adds	r2, r3, r2
 800bf86:	4b40      	ldr	r3, [pc, #256]	@ (800c088 <BMP_Upkeep+0x240>)
 800bf88:	601a      	str	r2, [r3, #0]
        BMPState = BMP_STATE_WAIT ;
 800bf8a:	4b40      	ldr	r3, [pc, #256]	@ (800c08c <BMP_Upkeep+0x244>)
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 800bf90:	2000      	movs	r0, #0
 800bf92:	f001 ff85 	bl	800dea0 <setSensorLock>
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bf96:	46c0      	nop			@ (mov r8, r8)
//      uint8_t locktype = getSensorLock();
//      Debug("Lock is not from BMP280, but from %s",
//        locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
    }
    break;
 800bf98:	e070      	b.n	800c07c <BMP_Upkeep+0x234>
      BMP280TimeStamp = HAL_GetTick() + 97;
 800bf9a:	f008 fcfb 	bl	8014994 <HAL_GetTick>
 800bf9e:	0003      	movs	r3, r0
 800bfa0:	3361      	adds	r3, #97	@ 0x61
 800bfa2:	001a      	movs	r2, r3
 800bfa4:	4b38      	ldr	r3, [pc, #224]	@ (800c088 <BMP_Upkeep+0x240>)
 800bfa6:	601a      	str	r2, [r3, #0]
    break;
 800bfa8:	e068      	b.n	800c07c <BMP_Upkeep+0x234>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800bfaa:	f7ff fe59 	bl	800bc60 <BMP280_calc_temperature>
 800bfae:	1c03      	adds	r3, r0, #0
 800bfb0:	60bb      	str	r3, [r7, #8]
    airhpa = BMP280_calc_pressure();
 800bfb2:	f7ff fe9d 	bl	800bcf0 <BMP280_calc_pressure>
 800bfb6:	1c03      	adds	r3, r0, #0
 800bfb8:	607b      	str	r3, [r7, #4]
    Info("BMP280 barometric value: %.2fhPa, airtemperature: %2.2fC", airhpa, airtemp);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7f7 fc6a 	bl	8003894 <__aeabi_f2d>
 800bfc0:	0004      	movs	r4, r0
 800bfc2:	000d      	movs	r5, r1
 800bfc4:	68b8      	ldr	r0, [r7, #8]
 800bfc6:	f7f7 fc65 	bl	8003894 <__aeabi_f2d>
 800bfca:	0002      	movs	r2, r0
 800bfcc:	000b      	movs	r3, r1
 800bfce:	4838      	ldr	r0, [pc, #224]	@ (800c0b0 <BMP_Upkeep+0x268>)
 800bfd0:	4932      	ldr	r1, [pc, #200]	@ (800c09c <BMP_Upkeep+0x254>)
 800bfd2:	9202      	str	r2, [sp, #8]
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	9400      	str	r4, [sp, #0]
 800bfd8:	9501      	str	r5, [sp, #4]
 800bfda:	0002      	movs	r2, r0
 800bfdc:	2002      	movs	r0, #2
 800bfde:	f007 ff59 	bl	8013e94 <CreateLine>

    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800bfe2:	4934      	ldr	r1, [pc, #208]	@ (800c0b4 <BMP_Upkeep+0x26c>)
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7f4 fab7 	bl	8000558 <__aeabi_fcmpgt>
 800bfea:	1e03      	subs	r3, r0, #0
 800bfec:	d022      	beq.n	800c034 <BMP_Upkeep+0x1ec>
 800bfee:	4932      	ldr	r1, [pc, #200]	@ (800c0b8 <BMP_Upkeep+0x270>)
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7f4 fa9d 	bl	8000530 <__aeabi_fcmplt>
 800bff6:	1e03      	subs	r3, r0, #0
 800bff8:	d01c      	beq.n	800c034 <BMP_Upkeep+0x1ec>
      setBMP280(airtemp, airhpa);
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	1c11      	adds	r1, r2, #0
 800c000:	1c18      	adds	r0, r3, #0
 800c002:	f7f8 fd7b 	bl	8004afc <setBMP280>
      if (Check_USB_PowerOn()) {
 800c006:	f7fd fe6b 	bl	8009ce0 <Check_USB_PowerOn>
 800c00a:	1e03      	subs	r3, r0, #0
 800c00c:	d00a      	beq.n	800c024 <BMP_Upkeep+0x1dc>
        BMP280TimeStamp = HAL_GetTick() + 28000;
 800c00e:	f008 fcc1 	bl	8014994 <HAL_GetTick>
 800c012:	0003      	movs	r3, r0
 800c014:	4a29      	ldr	r2, [pc, #164]	@ (800c0bc <BMP_Upkeep+0x274>)
 800c016:	189a      	adds	r2, r3, r2
 800c018:	4b1b      	ldr	r3, [pc, #108]	@ (800c088 <BMP_Upkeep+0x240>)
 800c01a:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800c01c:	4b28      	ldr	r3, [pc, #160]	@ (800c0c0 <BMP_Upkeep+0x278>)
 800c01e:	2201      	movs	r2, #1
 800c020:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c022:	e017      	b.n	800c054 <BMP_Upkeep+0x20c>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 10000;
 800c024:	f008 fcb6 	bl	8014994 <HAL_GetTick>
 800c028:	0003      	movs	r3, r0
 800c02a:	4a26      	ldr	r2, [pc, #152]	@ (800c0c4 <BMP_Upkeep+0x27c>)
 800c02c:	189a      	adds	r2, r3, r2
 800c02e:	4b16      	ldr	r3, [pc, #88]	@ (800c088 <BMP_Upkeep+0x240>)
 800c030:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c032:	e00f      	b.n	800c054 <BMP_Upkeep+0x20c>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800c034:	4a24      	ldr	r2, [pc, #144]	@ (800c0c8 <BMP_Upkeep+0x280>)
 800c036:	4b1c      	ldr	r3, [pc, #112]	@ (800c0a8 <BMP_Upkeep+0x260>)
 800c038:	0019      	movs	r1, r3
 800c03a:	2001      	movs	r0, #1
 800c03c:	f007 ff2a 	bl	8013e94 <CreateLine>
      bmperror = true;
 800c040:	4b13      	ldr	r3, [pc, #76]	@ (800c090 <BMP_Upkeep+0x248>)
 800c042:	2201      	movs	r2, #1
 800c044:	701a      	strb	r2, [r3, #0]
      BMP280TimeStamp = HAL_GetTick() + 5000;
 800c046:	f008 fca5 	bl	8014994 <HAL_GetTick>
 800c04a:	0003      	movs	r3, r0
 800c04c:	4a17      	ldr	r2, [pc, #92]	@ (800c0ac <BMP_Upkeep+0x264>)
 800c04e:	189a      	adds	r2, r3, r2
 800c050:	4b0d      	ldr	r3, [pc, #52]	@ (800c088 <BMP_Upkeep+0x240>)
 800c052:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800c054:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <BMP_Upkeep+0x244>)
 800c056:	2202      	movs	r2, #2
 800c058:	701a      	strb	r2, [r3, #0]
    break;
 800c05a:	e00f      	b.n	800c07c <BMP_Upkeep+0x234>

  case BMP_STATE_WAIT:
      BMPState = BMP_MODE_SELECT;
 800c05c:	4b0b      	ldr	r3, [pc, #44]	@ (800c08c <BMP_Upkeep+0x244>)
 800c05e:	2200      	movs	r2, #0
 800c060:	701a      	strb	r2, [r3, #0]
    break;
 800c062:	e00b      	b.n	800c07c <BMP_Upkeep+0x234>


  default:
    // Handle unexpected state
    BMPState = BMP_MODE_SELECT;
 800c064:	4b09      	ldr	r3, [pc, #36]	@ (800c08c <BMP_Upkeep+0x244>)
 800c066:	2200      	movs	r2, #0
 800c068:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800c06a:	f001 ff2d 	bl	800dec8 <getSensorLock>
 800c06e:	0003      	movs	r3, r0
 800c070:	2b03      	cmp	r3, #3
 800c072:	d102      	bne.n	800c07a <BMP_Upkeep+0x232>
      setSensorLock(FREE);
 800c074:	2000      	movs	r0, #0
 800c076:	f001 ff13 	bl	800dea0 <setSensorLock>
    }
    break;
 800c07a:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800c07c:	4b03      	ldr	r3, [pc, #12]	@ (800c08c <BMP_Upkeep+0x244>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
}
 800c080:	0018      	movs	r0, r3
 800c082:	46bd      	mov	sp, r7
 800c084:	b004      	add	sp, #16
 800c086:	bdb0      	pop	{r4, r5, r7, pc}
 800c088:	20000f24 	.word	0x20000f24
 800c08c:	20000f29 	.word	0x20000f29
 800c090:	20000f2a 	.word	0x20000f2a
 800c094:	200000a1 	.word	0x200000a1
 800c098:	0802c800 	.word	0x0802c800
 800c09c:	0802c610 	.word	0x0802c610
 800c0a0:	0802c820 	.word	0x0802c820
 800c0a4:	0802c840 	.word	0x0802c840
 800c0a8:	0802c668 	.word	0x0802c668
 800c0ac:	00001388 	.word	0x00001388
 800c0b0:	0802c878 	.word	0x0802c878
 800c0b4:	44548000 	.word	0x44548000
 800c0b8:	44898000 	.word	0x44898000
 800c0bc:	00006d60 	.word	0x00006d60
 800c0c0:	20000f28 	.word	0x20000f28
 800c0c4:	00002710 	.word	0x00002710
 800c0c8:	0802c8b4 	.word	0x0802c8b4

0800c0cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c0d2:	4b10      	ldr	r3, [pc, #64]	@ (800c114 <MX_DMA_Init+0x48>)
 800c0d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c114 <MX_DMA_Init+0x48>)
 800c0d8:	2101      	movs	r1, #1
 800c0da:	430a      	orrs	r2, r1
 800c0dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c0de:	4b0d      	ldr	r3, [pc, #52]	@ (800c114 <MX_DMA_Init+0x48>)
 800c0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	607b      	str	r3, [r7, #4]
 800c0e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	200a      	movs	r0, #10
 800c0f0:	f009 f8c4 	bl	801527c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800c0f4:	200a      	movs	r0, #10
 800c0f6:	f009 f8d6 	bl	80152a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2103      	movs	r1, #3
 800c0fe:	200b      	movs	r0, #11
 800c100:	f009 f8bc 	bl	801527c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c104:	200b      	movs	r0, #11
 800c106:	f009 f8ce 	bl	80152a6 <HAL_NVIC_EnableIRQ>

}
 800c10a:	46c0      	nop			@ (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b002      	add	sp, #8
 800c110:	bd80      	pop	{r7, pc}
 800c112:	46c0      	nop			@ (mov r8, r8)
 800c114:	40021000 	.word	0x40021000

0800c118 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c118:	b590      	push	{r4, r7, lr}
 800c11a:	b087      	sub	sp, #28
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	1dbb      	adds	r3, r7, #6
 800c124:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c126:	4b17      	ldr	r3, [pc, #92]	@ (800c184 <WriteUint8ArrayEeprom+0x6c>)
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c12c:	f009 fc3e 	bl	80159ac <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800c130:	2316      	movs	r3, #22
 800c132:	18fb      	adds	r3, r7, r3
 800c134:	2200      	movs	r2, #0
 800c136:	801a      	strh	r2, [r3, #0]
 800c138:	e015      	b.n	800c166 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c13a:	4b12      	ldr	r3, [pc, #72]	@ (800c184 <WriteUint8ArrayEeprom+0x6c>)
 800c13c:	6819      	ldr	r1, [r3, #0]
 800c13e:	2416      	movs	r4, #22
 800c140:	193b      	adds	r3, r7, r4
 800c142:	881b      	ldrh	r3, [r3, #0]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	18d3      	adds	r3, r2, r3
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	001a      	movs	r2, r3
 800c14c:	2000      	movs	r0, #0
 800c14e:	f009 fc95 	bl	8015a7c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c152:	4b0c      	ldr	r3, [pc, #48]	@ (800c184 <WriteUint8ArrayEeprom+0x6c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	4b0a      	ldr	r3, [pc, #40]	@ (800c184 <WriteUint8ArrayEeprom+0x6c>)
 800c15a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c15c:	193b      	adds	r3, r7, r4
 800c15e:	881a      	ldrh	r2, [r3, #0]
 800c160:	193b      	adds	r3, r7, r4
 800c162:	3201      	adds	r2, #1
 800c164:	801a      	strh	r2, [r3, #0]
 800c166:	2316      	movs	r3, #22
 800c168:	18fa      	adds	r2, r7, r3
 800c16a:	1dbb      	adds	r3, r7, #6
 800c16c:	8812      	ldrh	r2, [r2, #0]
 800c16e:	881b      	ldrh	r3, [r3, #0]
 800c170:	429a      	cmp	r2, r3
 800c172:	d3e2      	bcc.n	800c13a <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c174:	f009 fc48 	bl	8015a08 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c178:	4b02      	ldr	r3, [pc, #8]	@ (800c184 <WriteUint8ArrayEeprom+0x6c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
}
 800c17c:	0018      	movs	r0, r3
 800c17e:	46bd      	mov	sp, r7
 800c180:	b007      	add	sp, #28
 800c182:	bd90      	pop	{r4, r7, pc}
 800c184:	20000f34 	.word	0x20000f34

0800c188 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	0019      	movs	r1, r3
 800c194:	1dbb      	adds	r3, r7, #6
 800c196:	801a      	strh	r2, [r3, #0]
 800c198:	1d3b      	adds	r3, r7, #4
 800c19a:	1c0a      	adds	r2, r1, #0
 800c19c:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c19e:	1dba      	adds	r2, r7, #6
 800c1a0:	1d3b      	adds	r3, r7, #4
 800c1a2:	8812      	ldrh	r2, [r2, #0]
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d806      	bhi.n	800c1b8 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c1aa:	1dbb      	adds	r3, r7, #6
 800c1ac:	881a      	ldrh	r2, [r3, #0]
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	0018      	movs	r0, r3
 800c1b4:	f7ff ffb0 	bl	800c118 <WriteUint8ArrayEeprom>
    }
}
 800c1b8:	46c0      	nop			@ (mov r8, r8)
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	b004      	add	sp, #16
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	1dbb      	adds	r3, r7, #6
 800c1cc:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c1ce:	2316      	movs	r3, #22
 800c1d0:	18fb      	adds	r3, r7, r3
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	801a      	strh	r2, [r3, #0]
 800c1d6:	e010      	b.n	800c1fa <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c1d8:	2016      	movs	r0, #22
 800c1da:	183b      	adds	r3, r7, r0
 800c1dc:	881a      	ldrh	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	18d3      	adds	r3, r2, r3
 800c1e2:	0019      	movs	r1, r3
 800c1e4:	183b      	adds	r3, r7, r0
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	18d3      	adds	r3, r2, r3
 800c1ec:	780a      	ldrb	r2, [r1, #0]
 800c1ee:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c1f0:	183b      	adds	r3, r7, r0
 800c1f2:	881a      	ldrh	r2, [r3, #0]
 800c1f4:	183b      	adds	r3, r7, r0
 800c1f6:	3201      	adds	r2, #1
 800c1f8:	801a      	strh	r2, [r3, #0]
 800c1fa:	2316      	movs	r3, #22
 800c1fc:	18fa      	adds	r2, r7, r3
 800c1fe:	1dbb      	adds	r3, r7, #6
 800c200:	8812      	ldrh	r2, [r2, #0]
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	d3e7      	bcc.n	800c1d8 <ReadUint8ArrayEEprom+0x18>
    }
}
 800c208:	46c0      	nop			@ (mov r8, r8)
 800c20a:	46c0      	nop			@ (mov r8, r8)
 800c20c:	46bd      	mov	sp, r7
 800c20e:	b006      	add	sp, #24
 800c210:	bd80      	pop	{r7, pc}

0800c212 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c212:	b590      	push	{r4, r7, lr}
 800c214:	b085      	sub	sp, #20
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	000a      	movs	r2, r1
 800c21c:	1cbb      	adds	r3, r7, #2
 800c21e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c220:	f009 fbc4 	bl	80159ac <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c224:	230e      	movs	r3, #14
 800c226:	18fb      	adds	r3, r7, r3
 800c228:	2200      	movs	r2, #0
 800c22a:	801a      	strh	r2, [r3, #0]
 800c22c:	e00c      	b.n	800c248 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c22e:	240e      	movs	r4, #14
 800c230:	193b      	adds	r3, r7, r4
 800c232:	881a      	ldrh	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	18d3      	adds	r3, r2, r3
 800c238:	0018      	movs	r0, r3
 800c23a:	f009 fbf3 	bl	8015a24 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c23e:	193b      	adds	r3, r7, r4
 800c240:	193a      	adds	r2, r7, r4
 800c242:	8812      	ldrh	r2, [r2, #0]
 800c244:	3204      	adds	r2, #4
 800c246:	801a      	strh	r2, [r3, #0]
 800c248:	230e      	movs	r3, #14
 800c24a:	18fa      	adds	r2, r7, r3
 800c24c:	1cbb      	adds	r3, r7, #2
 800c24e:	8812      	ldrh	r2, [r2, #0]
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	429a      	cmp	r2, r3
 800c254:	d3eb      	bcc.n	800c22e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c256:	f009 fbd7 	bl	8015a08 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c25a:	46c0      	nop			@ (mov r8, r8)
 800c25c:	46bd      	mov	sp, r7
 800c25e:	b005      	add	sp, #20
 800c260:	bd90      	pop	{r4, r7, pc}
	...

0800c264 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2b7f      	cmp	r3, #127	@ 0x7f
 800c274:	d901      	bls.n	800c27a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c276:	237f      	movs	r3, #127	@ 0x7f
 800c278:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c27a:	2017      	movs	r0, #23
 800c27c:	183b      	adds	r3, r7, r0
 800c27e:	490d      	ldr	r1, [pc, #52]	@ (800c2b4 <accessLUT10log10+0x50>)
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	188a      	adds	r2, r1, r2
 800c284:	7812      	ldrb	r2, [r2, #0]
 800c286:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c288:	0001      	movs	r1, r0
 800c28a:	187b      	adds	r3, r7, r1
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	2206      	movs	r2, #6
 800c290:	4113      	asrs	r3, r2
 800c292:	001a      	movs	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c298:	187b      	adds	r3, r7, r1
 800c29a:	781a      	ldrb	r2, [r3, #0]
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2106      	movs	r1, #6
 800c2a2:	408b      	lsls	r3, r1
 800c2a4:	1ad2      	subs	r2, r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	601a      	str	r2, [r3, #0]
}
 800c2aa:	46c0      	nop			@ (mov r8, r8)
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	b006      	add	sp, #24
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	46c0      	nop			@ (mov r8, r8)
 800c2b4:	0802e630 	.word	0x0802e630

0800c2b8 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c2b8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ba:	b090      	sub	sp, #64	@ 0x40
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6138      	str	r0, [r7, #16]
 800c2c0:	6179      	str	r1, [r7, #20]
 800c2c2:	60fa      	str	r2, [r7, #12]
 800c2c4:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c2c6:	2308      	movs	r3, #8
 800c2c8:	001a      	movs	r2, r3
 800c2ca:	3a20      	subs	r2, #32
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	db03      	blt.n	800c2d8 <efficient10log10+0x20>
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	4091      	lsls	r1, r2
 800c2d4:	000d      	movs	r5, r1
 800c2d6:	e008      	b.n	800c2ea <efficient10log10+0x32>
 800c2d8:	2220      	movs	r2, #32
 800c2da:	1ad2      	subs	r2, r2, r3
 800c2dc:	2101      	movs	r1, #1
 800c2de:	40d1      	lsrs	r1, r2
 800c2e0:	000a      	movs	r2, r1
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	4099      	lsls	r1, r3
 800c2e6:	000d      	movs	r5, r1
 800c2e8:	4315      	orrs	r5, r2
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	409a      	lsls	r2, r3
 800c2ee:	0014      	movs	r4, r2
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	4252      	negs	r2, r2
 800c2f4:	17d3      	asrs	r3, r2, #31
 800c2f6:	1912      	adds	r2, r2, r4
 800c2f8:	416b      	adcs	r3, r5
 800c2fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800c2fc:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c2fe:	2336      	movs	r3, #54	@ 0x36
 800c300:	2208      	movs	r2, #8
 800c302:	189b      	adds	r3, r3, r2
 800c304:	19db      	adds	r3, r3, r7
 800c306:	2200      	movs	r2, #0
 800c308:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c30a:	e017      	b.n	800c33c <efficient10log10+0x84>
    {
        P = P >> 1;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	07db      	lsls	r3, r3, #31
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	0852      	lsrs	r2, r2, #1
 800c314:	603a      	str	r2, [r7, #0]
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	431a      	orrs	r2, r3
 800c31a:	603a      	str	r2, [r7, #0]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	085b      	lsrs	r3, r3, #1
 800c320:	607b      	str	r3, [r7, #4]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	687c      	ldr	r4, [r7, #4]
 800c326:	613b      	str	r3, [r7, #16]
 800c328:	617c      	str	r4, [r7, #20]
        bShift++;
 800c32a:	2136      	movs	r1, #54	@ 0x36
 800c32c:	2008      	movs	r0, #8
 800c32e:	180b      	adds	r3, r1, r0
 800c330:	19db      	adds	r3, r3, r7
 800c332:	881a      	ldrh	r2, [r3, #0]
 800c334:	180b      	adds	r3, r1, r0
 800c336:	19db      	adds	r3, r3, r7
 800c338:	3201      	adds	r2, #1
 800c33a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c340:	429a      	cmp	r2, r3
 800c342:	d8e3      	bhi.n	800c30c <efficient10log10+0x54>
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c348:	429a      	cmp	r2, r3
 800c34a:	d103      	bne.n	800c354 <efficient10log10+0x9c>
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c350:	429a      	cmp	r2, r3
 800c352:	d8db      	bhi.n	800c30c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	2308      	movs	r3, #8
 800c358:	3b01      	subs	r3, #1
 800c35a:	2101      	movs	r1, #1
 800c35c:	4099      	lsls	r1, r3
 800c35e:	000b      	movs	r3, r1
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c36c:	231c      	movs	r3, #28
 800c36e:	2408      	movs	r4, #8
 800c370:	191b      	adds	r3, r3, r4
 800c372:	19da      	adds	r2, r3, r7
 800c374:	2320      	movs	r3, #32
 800c376:	191b      	adds	r3, r3, r4
 800c378:	19d9      	adds	r1, r3, r7
 800c37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37c:	0018      	movs	r0, r3
 800c37e:	f7ff ff71 	bl	800c264 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c382:	2215      	movs	r2, #21
 800c384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c386:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c388:	2036      	movs	r0, #54	@ 0x36
 800c38a:	1902      	adds	r2, r0, r4
 800c38c:	19d2      	adds	r2, r2, r7
 800c38e:	8812      	ldrh	r2, [r2, #0]
 800c390:	2103      	movs	r1, #3
 800c392:	434a      	muls	r2, r1
 800c394:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c396:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c398:	0021      	movs	r1, r4
 800c39a:	1843      	adds	r3, r0, r1
 800c39c:	19db      	adds	r3, r3, r7
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	4353      	muls	r3, r2
 800c3a4:	2203      	movs	r2, #3
 800c3a6:	4113      	asrs	r3, r2
 800c3a8:	001a      	movs	r2, r3
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ac:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c3ae:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c3b0:	2314      	movs	r3, #20
 800c3b2:	185b      	adds	r3, r3, r1
 800c3b4:	19da      	adds	r2, r3, r7
 800c3b6:	2318      	movs	r3, #24
 800c3b8:	185b      	adds	r3, r3, r1
 800c3ba:	19db      	adds	r3, r3, r7
 800c3bc:	0011      	movs	r1, r2
 800c3be:	0018      	movs	r0, r3
 800c3c0:	f000 f80a 	bl	800c3d8 <correctIntFracNumber>
    integerPart[0] = intPart;
 800c3c4:	6a3a      	ldr	r2, [r7, #32]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	601a      	str	r2, [r3, #0]
}
 800c3d0:	46c0      	nop			@ (mov r8, r8)
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	b010      	add	sp, #64	@ 0x40
 800c3d6:	bdb0      	pop	{r4, r5, r7, pc}

0800c3d8 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c3e2:	e00a      	b.n	800c3fa <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3b0a      	subs	r3, #10
 800c3f4:	001a      	movs	r2, r3
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b09      	cmp	r3, #9
 800c400:	dcf0      	bgt.n	800c3e4 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c402:	e00a      	b.n	800c41a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	1e5a      	subs	r2, r3, #1
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	330a      	adds	r3, #10
 800c414:	001a      	movs	r2, r3
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3309      	adds	r3, #9
 800c420:	dbf0      	blt.n	800c404 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	da0f      	bge.n	800c44a <correctIntFracNumber+0x72>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dd0b      	ble.n	800c44a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3b0a      	subs	r3, #10
 800c442:	001a      	movs	r2, r3
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c448:	e012      	b.n	800c470 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	dd0e      	ble.n	800c470 <correctIntFracNumber+0x98>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	da0a      	bge.n	800c470 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	1e5a      	subs	r2, r3, #1
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	330a      	adds	r3, #10
 800c46a:	001a      	movs	r2, r3
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	601a      	str	r2, [r3, #0]
}
 800c470:	46c0      	nop			@ (mov r8, r8)
 800c472:	46bd      	mov	sp, r7
 800c474:	b002      	add	sp, #8
 800c476:	bd80      	pop	{r7, pc}

0800c478 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c478:	b590      	push	{r4, r7, lr}
 800c47a:	b08b      	sub	sp, #44	@ 0x2c
 800c47c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c47e:	2414      	movs	r4, #20
 800c480:	193b      	adds	r3, r7, r4
 800c482:	0018      	movs	r0, r3
 800c484:	2314      	movs	r3, #20
 800c486:	001a      	movs	r2, r3
 800c488:	2100      	movs	r1, #0
 800c48a:	f01a f967 	bl	802675c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c48e:	4b8a      	ldr	r3, [pc, #552]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c492:	4b89      	ldr	r3, [pc, #548]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c494:	2104      	movs	r1, #4
 800c496:	430a      	orrs	r2, r1
 800c498:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c49a:	4b87      	ldr	r3, [pc, #540]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49e:	2204      	movs	r2, #4
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	613b      	str	r3, [r7, #16]
 800c4a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c4a6:	4b84      	ldr	r3, [pc, #528]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4aa:	4b83      	ldr	r3, [pc, #524]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4ac:	2180      	movs	r1, #128	@ 0x80
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4b2:	4b81      	ldr	r3, [pc, #516]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b6:	2280      	movs	r2, #128	@ 0x80
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4be:	4b7e      	ldr	r3, [pc, #504]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c2:	4b7d      	ldr	r3, [pc, #500]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4c4:	2101      	movs	r1, #1
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4ca:	4b7b      	ldr	r3, [pc, #492]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	60bb      	str	r3, [r7, #8]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c4d6:	4b78      	ldr	r3, [pc, #480]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4da:	4b77      	ldr	r3, [pc, #476]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4dc:	2102      	movs	r1, #2
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4e2:	4b75      	ldr	r3, [pc, #468]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	607b      	str	r3, [r7, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4ee:	4b72      	ldr	r3, [pc, #456]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4f2:	4b71      	ldr	r3, [pc, #452]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4f4:	2108      	movs	r1, #8
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4fa:	4b6f      	ldr	r3, [pc, #444]	@ (800c6b8 <MX_GPIO_Init+0x240>)
 800c4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4fe:	2208      	movs	r2, #8
 800c500:	4013      	ands	r3, r2
 800c502:	603b      	str	r3, [r7, #0]
 800c504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c506:	4b6d      	ldr	r3, [pc, #436]	@ (800c6bc <MX_GPIO_Init+0x244>)
 800c508:	2201      	movs	r2, #1
 800c50a:	2101      	movs	r1, #1
 800c50c:	0018      	movs	r0, r3
 800c50e:	f009 fca8 	bl	8015e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c512:	4b6a      	ldr	r3, [pc, #424]	@ (800c6bc <MX_GPIO_Init+0x244>)
 800c514:	2200      	movs	r2, #0
 800c516:	2102      	movs	r1, #2
 800c518:	0018      	movs	r0, r3
 800c51a:	f009 fca2 	bl	8015e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c51e:	4968      	ldr	r1, [pc, #416]	@ (800c6c0 <MX_GPIO_Init+0x248>)
 800c520:	4b68      	ldr	r3, [pc, #416]	@ (800c6c4 <MX_GPIO_Init+0x24c>)
 800c522:	2201      	movs	r2, #1
 800c524:	0018      	movs	r0, r3
 800c526:	f009 fc9c 	bl	8015e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c52a:	2380      	movs	r3, #128	@ 0x80
 800c52c:	011b      	lsls	r3, r3, #4
 800c52e:	4866      	ldr	r0, [pc, #408]	@ (800c6c8 <MX_GPIO_Init+0x250>)
 800c530:	2201      	movs	r2, #1
 800c532:	0019      	movs	r1, r3
 800c534:	f009 fc95 	bl	8015e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c538:	2380      	movs	r3, #128	@ 0x80
 800c53a:	015b      	lsls	r3, r3, #5
 800c53c:	4862      	ldr	r0, [pc, #392]	@ (800c6c8 <MX_GPIO_Init+0x250>)
 800c53e:	2200      	movs	r2, #0
 800c540:	0019      	movs	r1, r3
 800c542:	f009 fc8e 	bl	8015e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c546:	193b      	adds	r3, r7, r4
 800c548:	4a60      	ldr	r2, [pc, #384]	@ (800c6cc <MX_GPIO_Init+0x254>)
 800c54a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c54c:	193b      	adds	r3, r7, r4
 800c54e:	2203      	movs	r2, #3
 800c550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c552:	193b      	adds	r3, r7, r4
 800c554:	2200      	movs	r2, #0
 800c556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c558:	193b      	adds	r3, r7, r4
 800c55a:	4a5b      	ldr	r2, [pc, #364]	@ (800c6c8 <MX_GPIO_Init+0x250>)
 800c55c:	0019      	movs	r1, r3
 800c55e:	0010      	movs	r0, r2
 800c560:	f009 fae4 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c564:	193b      	adds	r3, r7, r4
 800c566:	2203      	movs	r2, #3
 800c568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c56a:	193b      	adds	r3, r7, r4
 800c56c:	2201      	movs	r2, #1
 800c56e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c570:	193b      	adds	r3, r7, r4
 800c572:	2200      	movs	r2, #0
 800c574:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c576:	193b      	adds	r3, r7, r4
 800c578:	2200      	movs	r2, #0
 800c57a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c57c:	193b      	adds	r3, r7, r4
 800c57e:	4a4f      	ldr	r2, [pc, #316]	@ (800c6bc <MX_GPIO_Init+0x244>)
 800c580:	0019      	movs	r1, r3
 800c582:	0010      	movs	r0, r2
 800c584:	f009 fad2 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c588:	193b      	adds	r3, r7, r4
 800c58a:	2270      	movs	r2, #112	@ 0x70
 800c58c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c58e:	193b      	adds	r3, r7, r4
 800c590:	2203      	movs	r2, #3
 800c592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c594:	193b      	adds	r3, r7, r4
 800c596:	2200      	movs	r2, #0
 800c598:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c59a:	193a      	adds	r2, r7, r4
 800c59c:	23a0      	movs	r3, #160	@ 0xa0
 800c59e:	05db      	lsls	r3, r3, #23
 800c5a0:	0011      	movs	r1, r2
 800c5a2:	0018      	movs	r0, r3
 800c5a4:	f009 fac2 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c5a8:	193b      	adds	r3, r7, r4
 800c5aa:	22c0      	movs	r2, #192	@ 0xc0
 800c5ac:	0052      	lsls	r2, r2, #1
 800c5ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5b0:	193b      	adds	r3, r7, r4
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b6:	193b      	adds	r3, r7, r4
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5bc:	193a      	adds	r2, r7, r4
 800c5be:	23a0      	movs	r3, #160	@ 0xa0
 800c5c0:	05db      	lsls	r3, r3, #23
 800c5c2:	0011      	movs	r1, r2
 800c5c4:	0018      	movs	r0, r3
 800c5c6:	f009 fab1 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c5ca:	193b      	adds	r3, r7, r4
 800c5cc:	4a3c      	ldr	r2, [pc, #240]	@ (800c6c0 <MX_GPIO_Init+0x248>)
 800c5ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c5d0:	193b      	adds	r3, r7, r4
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5d6:	193b      	adds	r3, r7, r4
 800c5d8:	2200      	movs	r2, #0
 800c5da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5dc:	193b      	adds	r3, r7, r4
 800c5de:	2200      	movs	r2, #0
 800c5e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c5e2:	193b      	adds	r3, r7, r4
 800c5e4:	4a37      	ldr	r2, [pc, #220]	@ (800c6c4 <MX_GPIO_Init+0x24c>)
 800c5e6:	0019      	movs	r1, r3
 800c5e8:	0010      	movs	r0, r2
 800c5ea:	f009 fa9f 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c5ee:	193b      	adds	r3, r7, r4
 800c5f0:	4a37      	ldr	r2, [pc, #220]	@ (800c6d0 <MX_GPIO_Init+0x258>)
 800c5f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5f4:	193b      	adds	r3, r7, r4
 800c5f6:	2203      	movs	r2, #3
 800c5f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5fa:	193b      	adds	r3, r7, r4
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c600:	193b      	adds	r3, r7, r4
 800c602:	4a30      	ldr	r2, [pc, #192]	@ (800c6c4 <MX_GPIO_Init+0x24c>)
 800c604:	0019      	movs	r1, r3
 800c606:	0010      	movs	r0, r2
 800c608:	f009 fa90 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c60c:	0021      	movs	r1, r4
 800c60e:	187b      	adds	r3, r7, r1
 800c610:	2280      	movs	r2, #128	@ 0x80
 800c612:	0092      	lsls	r2, r2, #2
 800c614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c616:	000c      	movs	r4, r1
 800c618:	193b      	adds	r3, r7, r4
 800c61a:	2200      	movs	r2, #0
 800c61c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c61e:	193b      	adds	r3, r7, r4
 800c620:	2200      	movs	r2, #0
 800c622:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c624:	193b      	adds	r3, r7, r4
 800c626:	4a28      	ldr	r2, [pc, #160]	@ (800c6c8 <MX_GPIO_Init+0x250>)
 800c628:	0019      	movs	r1, r3
 800c62a:	0010      	movs	r0, r2
 800c62c:	f009 fa7e 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c630:	193b      	adds	r3, r7, r4
 800c632:	2280      	movs	r2, #128	@ 0x80
 800c634:	0212      	lsls	r2, r2, #8
 800c636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c638:	193b      	adds	r3, r7, r4
 800c63a:	2288      	movs	r2, #136	@ 0x88
 800c63c:	0352      	lsls	r2, r2, #13
 800c63e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c640:	193b      	adds	r3, r7, r4
 800c642:	2200      	movs	r2, #0
 800c644:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c646:	193a      	adds	r2, r7, r4
 800c648:	23a0      	movs	r3, #160	@ 0xa0
 800c64a:	05db      	lsls	r3, r3, #23
 800c64c:	0011      	movs	r1, r2
 800c64e:	0018      	movs	r0, r3
 800c650:	f009 fa6c 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c654:	0021      	movs	r1, r4
 800c656:	187b      	adds	r3, r7, r1
 800c658:	22c0      	movs	r2, #192	@ 0xc0
 800c65a:	0152      	lsls	r2, r2, #5
 800c65c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c65e:	000c      	movs	r4, r1
 800c660:	193b      	adds	r3, r7, r4
 800c662:	2201      	movs	r2, #1
 800c664:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c666:	193b      	adds	r3, r7, r4
 800c668:	2200      	movs	r2, #0
 800c66a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c66c:	193b      	adds	r3, r7, r4
 800c66e:	2200      	movs	r2, #0
 800c670:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c672:	193b      	adds	r3, r7, r4
 800c674:	4a14      	ldr	r2, [pc, #80]	@ (800c6c8 <MX_GPIO_Init+0x250>)
 800c676:	0019      	movs	r1, r3
 800c678:	0010      	movs	r0, r2
 800c67a:	f009 fa57 	bl	8015b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c67e:	0021      	movs	r1, r4
 800c680:	187b      	adds	r3, r7, r1
 800c682:	2204      	movs	r2, #4
 800c684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c686:	187b      	adds	r3, r7, r1
 800c688:	2200      	movs	r2, #0
 800c68a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c68c:	187b      	adds	r3, r7, r1
 800c68e:	2201      	movs	r2, #1
 800c690:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c692:	187b      	adds	r3, r7, r1
 800c694:	4a0f      	ldr	r2, [pc, #60]	@ (800c6d4 <MX_GPIO_Init+0x25c>)
 800c696:	0019      	movs	r1, r3
 800c698:	0010      	movs	r0, r2
 800c69a:	f009 fa47 	bl	8015b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	2007      	movs	r0, #7
 800c6a4:	f008 fdea 	bl	801527c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c6a8:	2007      	movs	r0, #7
 800c6aa:	f008 fdfc 	bl	80152a6 <HAL_NVIC_EnableIRQ>

}
 800c6ae:	46c0      	nop			@ (mov r8, r8)
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	b00b      	add	sp, #44	@ 0x2c
 800c6b4:	bd90      	pop	{r4, r7, pc}
 800c6b6:	46c0      	nop			@ (mov r8, r8)
 800c6b8:	40021000 	.word	0x40021000
 800c6bc:	50001c00 	.word	0x50001c00
 800c6c0:	00000301 	.word	0x00000301
 800c6c4:	50000400 	.word	0x50000400
 800c6c8:	50000800 	.word	0x50000800
 800c6cc:	0000200c 	.word	0x0000200c
 800c6d0:	0000403e 	.word	0x0000403e
 800c6d4:	50000c00 	.word	0x50000c00

0800c6d8 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	0018      	movs	r0, r3
 800c6e8:	f010 fb3a 	bl	801cd60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2108      	movs	r1, #8
 800c6f0:	0018      	movs	r0, r3
 800c6f2:	f010 fb35 	bl	801cd60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	210c      	movs	r1, #12
 800c6fa:	0018      	movs	r0, r3
 800c6fc:	f010 fb30 	bl	801cd60 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c700:	2380      	movs	r3, #128	@ 0x80
 800c702:	05db      	lsls	r3, r3, #23
 800c704:	22fa      	movs	r2, #250	@ 0xfa
 800c706:	0112      	lsls	r2, r2, #4
 800c708:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c70a:	2380      	movs	r3, #128	@ 0x80
 800c70c:	05db      	lsls	r3, r3, #23
 800c70e:	22fa      	movs	r2, #250	@ 0xfa
 800c710:	0112      	lsls	r2, r2, #4
 800c712:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c714:	2380      	movs	r3, #128	@ 0x80
 800c716:	05db      	lsls	r3, r3, #23
 800c718:	22fa      	movs	r2, #250	@ 0xfa
 800c71a:	0112      	lsls	r2, r2, #4
 800c71c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c71e:	2380      	movs	r3, #128	@ 0x80
 800c720:	05db      	lsls	r3, r3, #23
 800c722:	22fa      	movs	r2, #250	@ 0xfa
 800c724:	0112      	lsls	r2, r2, #4
 800c726:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2100      	movs	r1, #0
 800c72c:	0018      	movs	r0, r3
 800c72e:	f010 fb17 	bl	801cd60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	2104      	movs	r1, #4
 800c736:	0018      	movs	r0, r3
 800c738:	f010 fb12 	bl	801cd60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2108      	movs	r1, #8
 800c740:	0018      	movs	r0, r3
 800c742:	f010 fb0d 	bl	801cd60 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c746:	4b0a      	ldr	r3, [pc, #40]	@ (800c770 <GPIO_InitPWMLEDs+0x98>)
 800c748:	22fa      	movs	r2, #250	@ 0xfa
 800c74a:	0112      	lsls	r2, r2, #4
 800c74c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c74e:	4b08      	ldr	r3, [pc, #32]	@ (800c770 <GPIO_InitPWMLEDs+0x98>)
 800c750:	22fa      	movs	r2, #250	@ 0xfa
 800c752:	0112      	lsls	r2, r2, #4
 800c754:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c756:	4b06      	ldr	r3, [pc, #24]	@ (800c770 <GPIO_InitPWMLEDs+0x98>)
 800c758:	22fa      	movs	r2, #250	@ 0xfa
 800c75a:	0112      	lsls	r2, r2, #4
 800c75c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c75e:	4b04      	ldr	r3, [pc, #16]	@ (800c770 <GPIO_InitPWMLEDs+0x98>)
 800c760:	22fa      	movs	r2, #250	@ 0xfa
 800c762:	0112      	lsls	r2, r2, #4
 800c764:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c766:	46c0      	nop			@ (mov r8, r8)
 800c768:	46bd      	mov	sp, r7
 800c76a:	b002      	add	sp, #8
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	46c0      	nop			@ (mov r8, r8)
 800c770:	40000400 	.word	0x40000400

0800c774 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c778:	4b1b      	ldr	r3, [pc, #108]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c77a:	4a1c      	ldr	r2, [pc, #112]	@ (800c7ec <MX_I2C1_Init+0x78>)
 800c77c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c77e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c780:	4a1b      	ldr	r2, [pc, #108]	@ (800c7f0 <MX_I2C1_Init+0x7c>)
 800c782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c784:	4b18      	ldr	r3, [pc, #96]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c786:	2200      	movs	r2, #0
 800c788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c78a:	4b17      	ldr	r3, [pc, #92]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c78c:	2201      	movs	r2, #1
 800c78e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c790:	4b15      	ldr	r3, [pc, #84]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c792:	2200      	movs	r2, #0
 800c794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c796:	4b14      	ldr	r3, [pc, #80]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c798:	2200      	movs	r2, #0
 800c79a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c79c:	4b12      	ldr	r3, [pc, #72]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c7a2:	4b11      	ldr	r3, [pc, #68]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c7b0:	0018      	movs	r0, r3
 800c7b2:	f009 fb8f 	bl	8015ed4 <HAL_I2C_Init>
 800c7b6:	1e03      	subs	r3, r0, #0
 800c7b8:	d001      	beq.n	800c7be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c7ba:	f000 fe59 	bl	800d470 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c7be:	4b0a      	ldr	r3, [pc, #40]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f00c fafc 	bl	8018dc0 <HAL_I2CEx_ConfigAnalogFilter>
 800c7c8:	1e03      	subs	r3, r0, #0
 800c7ca:	d001      	beq.n	800c7d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c7cc:	f000 fe50 	bl	800d470 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c7d0:	4b05      	ldr	r3, [pc, #20]	@ (800c7e8 <MX_I2C1_Init+0x74>)
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	0018      	movs	r0, r3
 800c7d6:	f00c fb3f 	bl	8018e58 <HAL_I2CEx_ConfigDigitalFilter>
 800c7da:	1e03      	subs	r3, r0, #0
 800c7dc:	d001      	beq.n	800c7e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c7de:	f000 fe47 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c7e2:	46c0      	nop			@ (mov r8, r8)
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20000f38 	.word	0x20000f38
 800c7ec:	40005400 	.word	0x40005400
 800c7f0:	00503d58 	.word	0x00503d58

0800c7f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c7fa:	4a1c      	ldr	r2, [pc, #112]	@ (800c86c <MX_I2C2_Init+0x78>)
 800c7fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c800:	4a1b      	ldr	r2, [pc, #108]	@ (800c870 <MX_I2C2_Init+0x7c>)
 800c802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c804:	4b18      	ldr	r3, [pc, #96]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c806:	2200      	movs	r2, #0
 800c808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c80a:	4b17      	ldr	r3, [pc, #92]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c810:	4b15      	ldr	r3, [pc, #84]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c812:	2200      	movs	r2, #0
 800c814:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c816:	4b14      	ldr	r3, [pc, #80]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c818:	2200      	movs	r2, #0
 800c81a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c81c:	4b12      	ldr	r3, [pc, #72]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c81e:	2200      	movs	r2, #0
 800c820:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c822:	4b11      	ldr	r3, [pc, #68]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c824:	2200      	movs	r2, #0
 800c826:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c828:	4b0f      	ldr	r3, [pc, #60]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c82e:	4b0e      	ldr	r3, [pc, #56]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c830:	0018      	movs	r0, r3
 800c832:	f009 fb4f 	bl	8015ed4 <HAL_I2C_Init>
 800c836:	1e03      	subs	r3, r0, #0
 800c838:	d001      	beq.n	800c83e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c83a:	f000 fe19 	bl	800d470 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c83e:	4b0a      	ldr	r3, [pc, #40]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c840:	2100      	movs	r1, #0
 800c842:	0018      	movs	r0, r3
 800c844:	f00c fabc 	bl	8018dc0 <HAL_I2CEx_ConfigAnalogFilter>
 800c848:	1e03      	subs	r3, r0, #0
 800c84a:	d001      	beq.n	800c850 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c84c:	f000 fe10 	bl	800d470 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c850:	4b05      	ldr	r3, [pc, #20]	@ (800c868 <MX_I2C2_Init+0x74>)
 800c852:	2100      	movs	r1, #0
 800c854:	0018      	movs	r0, r3
 800c856:	f00c faff 	bl	8018e58 <HAL_I2CEx_ConfigDigitalFilter>
 800c85a:	1e03      	subs	r3, r0, #0
 800c85c:	d001      	beq.n	800c862 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c85e:	f000 fe07 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c862:	46c0      	nop			@ (mov r8, r8)
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20000f8c 	.word	0x20000f8c
 800c86c:	40005800 	.word	0x40005800
 800c870:	00503d58 	.word	0x00503d58

0800c874 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c874:	b590      	push	{r4, r7, lr}
 800c876:	b08b      	sub	sp, #44	@ 0x2c
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c87c:	2414      	movs	r4, #20
 800c87e:	193b      	adds	r3, r7, r4
 800c880:	0018      	movs	r0, r3
 800c882:	2314      	movs	r3, #20
 800c884:	001a      	movs	r2, r3
 800c886:	2100      	movs	r1, #0
 800c888:	f019 ff68 	bl	802675c <memset>
  if(i2cHandle->Instance==I2C1)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a5d      	ldr	r2, [pc, #372]	@ (800ca08 <HAL_I2C_MspInit+0x194>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d000      	beq.n	800c898 <HAL_I2C_MspInit+0x24>
 800c896:	e083      	b.n	800c9a0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c898:	4b5c      	ldr	r3, [pc, #368]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c89c:	4b5b      	ldr	r3, [pc, #364]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c89e:	2102      	movs	r1, #2
 800c8a0:	430a      	orrs	r2, r1
 800c8a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8a4:	4b59      	ldr	r3, [pc, #356]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	613b      	str	r3, [r7, #16]
 800c8ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c8b0:	0021      	movs	r1, r4
 800c8b2:	187b      	adds	r3, r7, r1
 800c8b4:	22c0      	movs	r2, #192	@ 0xc0
 800c8b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c8b8:	187b      	adds	r3, r7, r1
 800c8ba:	2212      	movs	r2, #18
 800c8bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8be:	187b      	adds	r3, r7, r1
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8c4:	187b      	adds	r3, r7, r1
 800c8c6:	2203      	movs	r2, #3
 800c8c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c8ca:	187b      	adds	r3, r7, r1
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8d0:	187b      	adds	r3, r7, r1
 800c8d2:	4a4f      	ldr	r2, [pc, #316]	@ (800ca10 <HAL_I2C_MspInit+0x19c>)
 800c8d4:	0019      	movs	r1, r3
 800c8d6:	0010      	movs	r0, r2
 800c8d8:	f009 f928 	bl	8015b2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c8dc:	4b4b      	ldr	r3, [pc, #300]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c8de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8e0:	4b4a      	ldr	r3, [pc, #296]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c8e2:	2180      	movs	r1, #128	@ 0x80
 800c8e4:	0389      	lsls	r1, r1, #14
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c8ea:	4b4a      	ldr	r3, [pc, #296]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c8ec:	4a4a      	ldr	r2, [pc, #296]	@ (800ca18 <HAL_I2C_MspInit+0x1a4>)
 800c8ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c8f0:	4b48      	ldr	r3, [pc, #288]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c8f2:	2206      	movs	r2, #6
 800c8f4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c8f6:	4b47      	ldr	r3, [pc, #284]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c8fc:	4b45      	ldr	r3, [pc, #276]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c902:	4b44      	ldr	r3, [pc, #272]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c904:	2280      	movs	r2, #128	@ 0x80
 800c906:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c908:	4b42      	ldr	r3, [pc, #264]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c90e:	4b41      	ldr	r3, [pc, #260]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c910:	2200      	movs	r2, #0
 800c912:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c914:	4b3f      	ldr	r3, [pc, #252]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c916:	2200      	movs	r2, #0
 800c918:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c91a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c920:	4b3c      	ldr	r3, [pc, #240]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c922:	0018      	movs	r0, r3
 800c924:	f008 fcdc 	bl	80152e0 <HAL_DMA_Init>
 800c928:	1e03      	subs	r3, r0, #0
 800c92a:	d001      	beq.n	800c930 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c92c:	f000 fda0 	bl	800d470 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a38      	ldr	r2, [pc, #224]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c934:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c936:	4b37      	ldr	r3, [pc, #220]	@ (800ca14 <HAL_I2C_MspInit+0x1a0>)
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c93c:	4b37      	ldr	r3, [pc, #220]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c93e:	4a38      	ldr	r2, [pc, #224]	@ (800ca20 <HAL_I2C_MspInit+0x1ac>)
 800c940:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c942:	4b36      	ldr	r3, [pc, #216]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c944:	2206      	movs	r2, #6
 800c946:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c948:	4b34      	ldr	r3, [pc, #208]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c94a:	2210      	movs	r2, #16
 800c94c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c94e:	4b33      	ldr	r3, [pc, #204]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c950:	2200      	movs	r2, #0
 800c952:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c954:	4b31      	ldr	r3, [pc, #196]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c956:	2280      	movs	r2, #128	@ 0x80
 800c958:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c95a:	4b30      	ldr	r3, [pc, #192]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c960:	4b2e      	ldr	r3, [pc, #184]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c962:	2200      	movs	r2, #0
 800c964:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c966:	4b2d      	ldr	r3, [pc, #180]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c968:	2200      	movs	r2, #0
 800c96a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c96c:	4b2b      	ldr	r3, [pc, #172]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c96e:	2200      	movs	r2, #0
 800c970:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c972:	4b2a      	ldr	r3, [pc, #168]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c974:	0018      	movs	r0, r3
 800c976:	f008 fcb3 	bl	80152e0 <HAL_DMA_Init>
 800c97a:	1e03      	subs	r3, r0, #0
 800c97c:	d001      	beq.n	800c982 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c97e:	f000 fd77 	bl	800d470 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a25      	ldr	r2, [pc, #148]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c986:	639a      	str	r2, [r3, #56]	@ 0x38
 800c988:	4b24      	ldr	r3, [pc, #144]	@ (800ca1c <HAL_I2C_MspInit+0x1a8>)
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c98e:	2200      	movs	r2, #0
 800c990:	2100      	movs	r1, #0
 800c992:	2017      	movs	r0, #23
 800c994:	f008 fc72 	bl	801527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c998:	2017      	movs	r0, #23
 800c99a:	f008 fc84 	bl	80152a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c99e:	e02e      	b.n	800c9fe <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a1f      	ldr	r2, [pc, #124]	@ (800ca24 <HAL_I2C_MspInit+0x1b0>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d129      	bne.n	800c9fe <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9aa:	4b18      	ldr	r3, [pc, #96]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c9ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ae:	4b17      	ldr	r3, [pc, #92]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c9b0:	2102      	movs	r1, #2
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	4013      	ands	r3, r2
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c9c2:	2114      	movs	r1, #20
 800c9c4:	187b      	adds	r3, r7, r1
 800c9c6:	22c0      	movs	r2, #192	@ 0xc0
 800c9c8:	0112      	lsls	r2, r2, #4
 800c9ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c9cc:	187b      	adds	r3, r7, r1
 800c9ce:	2212      	movs	r2, #18
 800c9d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9d2:	187b      	adds	r3, r7, r1
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9d8:	187b      	adds	r3, r7, r1
 800c9da:	2203      	movs	r2, #3
 800c9dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c9de:	187b      	adds	r3, r7, r1
 800c9e0:	2206      	movs	r2, #6
 800c9e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9e4:	187b      	adds	r3, r7, r1
 800c9e6:	4a0a      	ldr	r2, [pc, #40]	@ (800ca10 <HAL_I2C_MspInit+0x19c>)
 800c9e8:	0019      	movs	r1, r3
 800c9ea:	0010      	movs	r0, r2
 800c9ec:	f009 f89e 	bl	8015b2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c9f0:	4b06      	ldr	r3, [pc, #24]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c9f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9f4:	4b05      	ldr	r3, [pc, #20]	@ (800ca0c <HAL_I2C_MspInit+0x198>)
 800c9f6:	2180      	movs	r1, #128	@ 0x80
 800c9f8:	03c9      	lsls	r1, r1, #15
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c9fe:	46c0      	nop			@ (mov r8, r8)
 800ca00:	46bd      	mov	sp, r7
 800ca02:	b00b      	add	sp, #44	@ 0x2c
 800ca04:	bd90      	pop	{r4, r7, pc}
 800ca06:	46c0      	nop			@ (mov r8, r8)
 800ca08:	40005400 	.word	0x40005400
 800ca0c:	40021000 	.word	0x40021000
 800ca10:	50000400 	.word	0x50000400
 800ca14:	20000fe0 	.word	0x20000fe0
 800ca18:	40020030 	.word	0x40020030
 800ca1c:	20001028 	.word	0x20001028
 800ca20:	4002001c 	.word	0x4002001c
 800ca24:	40005800 	.word	0x40005800

0800ca28 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800ca2c:	4b10      	ldr	r3, [pc, #64]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca2e:	4a11      	ldr	r2, [pc, #68]	@ (800ca74 <MX_I2S2_Init+0x4c>)
 800ca30:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800ca32:	4b0f      	ldr	r3, [pc, #60]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca34:	22c0      	movs	r2, #192	@ 0xc0
 800ca36:	0092      	lsls	r2, r2, #2
 800ca38:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800ca3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800ca40:	4b0b      	ldr	r3, [pc, #44]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca42:	2203      	movs	r2, #3
 800ca44:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800ca46:	4b0a      	ldr	r3, [pc, #40]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800ca4c:	4b08      	ldr	r3, [pc, #32]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca4e:	22fa      	movs	r2, #250	@ 0xfa
 800ca50:	0192      	lsls	r2, r2, #6
 800ca52:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800ca54:	4b06      	ldr	r3, [pc, #24]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800ca5a:	4b05      	ldr	r3, [pc, #20]	@ (800ca70 <MX_I2S2_Init+0x48>)
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	f00c fa47 	bl	8018ef0 <HAL_I2S_Init>
 800ca62:	1e03      	subs	r3, r0, #0
 800ca64:	d001      	beq.n	800ca6a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800ca66:	f000 fd03 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800ca6a:	46c0      	nop			@ (mov r8, r8)
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	20001070 	.word	0x20001070
 800ca74:	40003800 	.word	0x40003800

0800ca78 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b089      	sub	sp, #36	@ 0x24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca80:	240c      	movs	r4, #12
 800ca82:	193b      	adds	r3, r7, r4
 800ca84:	0018      	movs	r0, r3
 800ca86:	2314      	movs	r3, #20
 800ca88:	001a      	movs	r2, r3
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	f019 fe66 	bl	802675c <memset>
  if(i2sHandle->Instance==SPI2)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a2d      	ldr	r2, [pc, #180]	@ (800cb4c <HAL_I2S_MspInit+0xd4>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d154      	bne.n	800cb44 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ca9a:	4b2d      	ldr	r3, [pc, #180]	@ (800cb50 <HAL_I2S_MspInit+0xd8>)
 800ca9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca9e:	4b2c      	ldr	r3, [pc, #176]	@ (800cb50 <HAL_I2S_MspInit+0xd8>)
 800caa0:	2180      	movs	r1, #128	@ 0x80
 800caa2:	01c9      	lsls	r1, r1, #7
 800caa4:	430a      	orrs	r2, r1
 800caa6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800caa8:	4b29      	ldr	r3, [pc, #164]	@ (800cb50 <HAL_I2S_MspInit+0xd8>)
 800caaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caac:	4b28      	ldr	r3, [pc, #160]	@ (800cb50 <HAL_I2S_MspInit+0xd8>)
 800caae:	2102      	movs	r1, #2
 800cab0:	430a      	orrs	r2, r1
 800cab2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cab4:	4b26      	ldr	r3, [pc, #152]	@ (800cb50 <HAL_I2S_MspInit+0xd8>)
 800cab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab8:	2202      	movs	r2, #2
 800caba:	4013      	ands	r3, r2
 800cabc:	60bb      	str	r3, [r7, #8]
 800cabe:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800cac0:	193b      	adds	r3, r7, r4
 800cac2:	22b0      	movs	r2, #176	@ 0xb0
 800cac4:	0212      	lsls	r2, r2, #8
 800cac6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cac8:	0021      	movs	r1, r4
 800caca:	187b      	adds	r3, r7, r1
 800cacc:	2202      	movs	r2, #2
 800cace:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad0:	187b      	adds	r3, r7, r1
 800cad2:	2200      	movs	r2, #0
 800cad4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cad6:	187b      	adds	r3, r7, r1
 800cad8:	2200      	movs	r2, #0
 800cada:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800cadc:	187b      	adds	r3, r7, r1
 800cade:	2200      	movs	r2, #0
 800cae0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cae2:	187b      	adds	r3, r7, r1
 800cae4:	4a1b      	ldr	r2, [pc, #108]	@ (800cb54 <HAL_I2S_MspInit+0xdc>)
 800cae6:	0019      	movs	r1, r3
 800cae8:	0010      	movs	r0, r2
 800caea:	f009 f81f 	bl	8015b2c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800caee:	4b1a      	ldr	r3, [pc, #104]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800caf0:	4a1a      	ldr	r2, [pc, #104]	@ (800cb5c <HAL_I2S_MspInit+0xe4>)
 800caf2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800caf4:	4b18      	ldr	r3, [pc, #96]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800caf6:	2202      	movs	r2, #2
 800caf8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cafa:	4b17      	ldr	r3, [pc, #92]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb00:	4b15      	ldr	r3, [pc, #84]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cb06:	4b14      	ldr	r3, [pc, #80]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb08:	2280      	movs	r2, #128	@ 0x80
 800cb0a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cb0c:	4b12      	ldr	r3, [pc, #72]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb0e:	2280      	movs	r2, #128	@ 0x80
 800cb10:	0052      	lsls	r2, r2, #1
 800cb12:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cb14:	4b10      	ldr	r3, [pc, #64]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb16:	2280      	movs	r2, #128	@ 0x80
 800cb18:	00d2      	lsls	r2, r2, #3
 800cb1a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800cb1c:	4b0e      	ldr	r3, [pc, #56]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb1e:	2220      	movs	r2, #32
 800cb20:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cb22:	4b0d      	ldr	r3, [pc, #52]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800cb28:	4b0b      	ldr	r3, [pc, #44]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	f008 fbd8 	bl	80152e0 <HAL_DMA_Init>
 800cb30:	1e03      	subs	r3, r0, #0
 800cb32:	d001      	beq.n	800cb38 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800cb34:	f000 fc9c 	bl	800d470 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a07      	ldr	r2, [pc, #28]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb3c:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb3e:	4b06      	ldr	r3, [pc, #24]	@ (800cb58 <HAL_I2S_MspInit+0xe0>)
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800cb44:	46c0      	nop			@ (mov r8, r8)
 800cb46:	46bd      	mov	sp, r7
 800cb48:	b009      	add	sp, #36	@ 0x24
 800cb4a:	bd90      	pop	{r4, r7, pc}
 800cb4c:	40003800 	.word	0x40003800
 800cb50:	40021000 	.word	0x40021000
 800cb54:	50000400 	.word	0x50000400
 800cb58:	200010ac 	.word	0x200010ac
 800cb5c:	40020044 	.word	0x40020044

0800cb60 <SetBatteryReadTimer>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetBatteryReadTimer(uint32_t ticks) {
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  batteryReadTimer  = HAL_GetTick() + ticks;
 800cb68:	f007 ff14 	bl	8014994 <HAL_GetTick>
 800cb6c:	0002      	movs	r2, r0
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	18d2      	adds	r2, r2, r3
 800cb72:	4b03      	ldr	r3, [pc, #12]	@ (800cb80 <SetBatteryReadTimer+0x20>)
 800cb74:	601a      	str	r2, [r3, #0]
}
 800cb76:	46c0      	nop			@ (mov r8, r8)
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	b002      	add	sp, #8
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	46c0      	nop			@ (mov r8, r8)
 800cb80:	200000a4 	.word	0x200000a4

0800cb84 <SetTestDone>:

void SetTestDone(){
 800cb84:	b580      	push	{r7, lr}
 800cb86:	af00      	add	r7, sp, #0
  testDone = true;
 800cb88:	4b12      	ldr	r3, [pc, #72]	@ (800cbd4 <SetTestDone+0x50>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(250);
 800cb8e:	20fa      	movs	r0, #250	@ 0xfa
 800cb90:	f007 ff0a 	bl	80149a8 <HAL_Delay>
  SetDBLED(false, false, true);
 800cb94:	2201      	movs	r2, #1
 800cb96:	2100      	movs	r1, #0
 800cb98:	2000      	movs	r0, #0
 800cb9a:	f005 fe87 	bl	80128ac <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800cb9e:	4a0e      	ldr	r2, [pc, #56]	@ (800cbd8 <SetTestDone+0x54>)
 800cba0:	23fa      	movs	r3, #250	@ 0xfa
 800cba2:	0119      	lsls	r1, r3, #4
 800cba4:	23fa      	movs	r3, #250	@ 0xfa
 800cba6:	011b      	lsls	r3, r3, #4
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f005 fe51 	bl	8012850 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cbae:	4a0a      	ldr	r2, [pc, #40]	@ (800cbd8 <SetTestDone+0x54>)
 800cbb0:	23fa      	movs	r3, #250	@ 0xfa
 800cbb2:	0119      	lsls	r1, r3, #4
 800cbb4:	23fa      	movs	r3, #250	@ 0xfa
 800cbb6:	011b      	lsls	r3, r3, #4
 800cbb8:	0018      	movs	r0, r3
 800cbba:	f005 febb 	bl	8012934 <SetVocLED>
  HAL_Delay(250);
 800cbbe:	20fa      	movs	r0, #250	@ 0xfa
 800cbc0:	f007 fef2 	bl	80149a8 <HAL_Delay>
  SetLEDsOff();
 800cbc4:	f005 ffb2 	bl	8012b2c <SetLEDsOff>
  InitDone();
 800cbc8:	f005 fd7e 	bl	80126c8 <InitDone>
}
 800cbcc:	46c0      	nop			@ (mov r8, r8)
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	46c0      	nop			@ (mov r8, r8)
 800cbd4:	200010f4 	.word	0x200010f4
 800cbd8:	00000bb8 	.word	0x00000bb8

0800cbdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cbdc:	b5b0      	push	{r4, r5, r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cbe2:	f007 fe71 	bl	80148c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cbe6:	f000 fad7 	bl	800d198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cbea:	f7ff fc45 	bl	800c478 <MX_GPIO_Init>
  MX_DMA_Init();
 800cbee:	f7ff fa6d 	bl	800c0cc <MX_DMA_Init>
  MX_I2C1_Init();
 800cbf2:	f7ff fdbf 	bl	800c774 <MX_I2C1_Init>
  MX_I2S2_Init();
 800cbf6:	f7ff ff17 	bl	800ca28 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cbfa:	f006 ff39 	bl	8013a70 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cbfe:	f7ff fdf9 	bl	800c7f4 <MX_I2C2_Init>
  MX_TIM2_Init();
 800cc02:	f006 fd2d 	bl	8013660 <MX_TIM2_Init>
  MX_TIM3_Init();
 800cc06:	f006 fd9f 	bl	8013748 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cc0a:	f006 ff61 	bl	8013ad0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cc0e:	f7fe f877 	bl	800ad00 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cc12:	f016 fa97 	bl	8023144 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800cc16:	f001 fc83 	bl	800e520 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cc1a:	f006 fef3 	bl	8013a04 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cc1e:	f006 fe11 	bl	8013844 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cc22:	f7fd f85d 	bl	8009ce0 <Check_USB_PowerOn>
 800cc26:	1e03      	subs	r3, r0, #0
 800cc28:	d006      	beq.n	800cc38 <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cc2a:	46c0      	nop			@ (mov r8, r8)
 800cc2c:	f007 feb2 	bl	8014994 <HAL_GetTick>
 800cc30:	0003      	movs	r3, r0
 800cc32:	4ac1      	ldr	r2, [pc, #772]	@ (800cf38 <main+0x35c>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d9f9      	bls.n	800cc2c <main+0x50>
	/*
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800cc38:	4ac0      	ldr	r2, [pc, #768]	@ (800cf3c <main+0x360>)
 800cc3a:	4bc1      	ldr	r3, [pc, #772]	@ (800cf40 <main+0x364>)
 800cc3c:	0011      	movs	r1, r2
 800cc3e:	0018      	movs	r0, r3
 800cc40:	f7ff fd4a 	bl	800c6d8 <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cc44:	4abf      	ldr	r2, [pc, #764]	@ (800cf44 <main+0x368>)
 800cc46:	4bc0      	ldr	r3, [pc, #768]	@ (800cf48 <main+0x36c>)
 800cc48:	0019      	movs	r1, r3
 800cc4a:	2002      	movs	r0, #2
 800cc4c:	f007 f922 	bl	8013e94 <CreateLine>
  BinaryReleaseInfo();
 800cc50:	f007 f9b4 	bl	8013fbc <BinaryReleaseInfo>
  usblog = *(bool*)(USBlogstatusConfigAddr);
 800cc54:	4bbd      	ldr	r3, [pc, #756]	@ (800cf4c <main+0x370>)
 800cc56:	781a      	ldrb	r2, [r3, #0]
 800cc58:	4bbd      	ldr	r3, [pc, #756]	@ (800cf50 <main+0x374>)
 800cc5a:	701a      	strb	r2, [r3, #0]
  if(UserButton_Pressed()){
 800cc5c:	f7fd f8cc 	bl	8009df8 <UserButton_Pressed>
 800cc60:	1e03      	subs	r3, r0, #0
 800cc62:	d005      	beq.n	800cc70 <main+0x94>
    EnableESPProg();
 800cc64:	f016 fb4a 	bl	80232fc <EnableESPProg>
    ESP_Programming = true;
 800cc68:	4bba      	ldr	r3, [pc, #744]	@ (800cf54 <main+0x378>)
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	701a      	strb	r2, [r3, #0]
 800cc6e:	e037      	b.n	800cce0 <main+0x104>
  }
  else {
    batteryChargeCheck();
 800cc70:	f005 fd34 	bl	80126dc <batteryChargeCheck>
//    batteryCharge = ReadBatteryVoltage();
    Error("Battery voltage is: %.02fV", batteryCharge);
 800cc74:	4bb8      	ldr	r3, [pc, #736]	@ (800cf58 <main+0x37c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	1c18      	adds	r0, r3, #0
 800cc7a:	f7f6 fe0b 	bl	8003894 <__aeabi_f2d>
 800cc7e:	0002      	movs	r2, r0
 800cc80:	000b      	movs	r3, r1
 800cc82:	48b6      	ldr	r0, [pc, #728]	@ (800cf5c <main+0x380>)
 800cc84:	49b6      	ldr	r1, [pc, #728]	@ (800cf60 <main+0x384>)
 800cc86:	9200      	str	r2, [sp, #0]
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	0002      	movs	r2, r0
 800cc8c:	2001      	movs	r0, #1
 800cc8e:	f007 f901 	bl	8013e94 <CreateLine>
#ifdef LARGEBATTERY
    if(batteryCharge <= 3.58) {
#else
    if(batteryCharge <= 3.68) {
 800cc92:	4bb1      	ldr	r3, [pc, #708]	@ (800cf58 <main+0x37c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	1c18      	adds	r0, r3, #0
 800cc98:	f7f6 fdfc 	bl	8003894 <__aeabi_f2d>
 800cc9c:	4ab1      	ldr	r2, [pc, #708]	@ (800cf64 <main+0x388>)
 800cc9e:	4bb2      	ldr	r3, [pc, #712]	@ (800cf68 <main+0x38c>)
 800cca0:	f7f3 fc16 	bl	80004d0 <__aeabi_dcmple>
 800cca4:	1e03      	subs	r3, r0, #0
 800cca6:	d01b      	beq.n	800cce0 <main+0x104>
#endif
      SetAllREDLED();
 800cca8:	f005 ff5c 	bl	8012b64 <SetAllREDLED>
      Error("Battery voltage is critical: %.02fV, going in deep sleep. Waking for LED indication %s seconds", batteryCharge, DEEP_SLEEP);
 800ccac:	4baa      	ldr	r3, [pc, #680]	@ (800cf58 <main+0x37c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	1c18      	adds	r0, r3, #0
 800ccb2:	f7f6 fdef 	bl	8003894 <__aeabi_f2d>
 800ccb6:	0002      	movs	r2, r0
 800ccb8:	000b      	movs	r3, r1
 800ccba:	4cac      	ldr	r4, [pc, #688]	@ (800cf6c <main+0x390>)
 800ccbc:	48a8      	ldr	r0, [pc, #672]	@ (800cf60 <main+0x384>)
 800ccbe:	21e1      	movs	r1, #225	@ 0xe1
 800ccc0:	0109      	lsls	r1, r1, #4
 800ccc2:	9102      	str	r1, [sp, #8]
 800ccc4:	9200      	str	r2, [sp, #0]
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	0022      	movs	r2, r4
 800ccca:	0001      	movs	r1, r0
 800cccc:	2001      	movs	r0, #1
 800ccce:	f007 f8e1 	bl	8013e94 <CreateLine>
      WalkAllRedLED();
 800ccd2:	f005 ff95 	bl	8012c00 <WalkAllRedLED>
#ifndef STLINK_V3PWR
      Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP);
 800ccd6:	23e1      	movs	r3, #225	@ 0xe1
 800ccd8:	011b      	lsls	r3, r3, #4
 800ccda:	0018      	movs	r0, r3
 800ccdc:	f7fd fd14 	bl	800a708 <Enter_Stop_Mode_for_empty_battery>
#endif
      }

  }
  SetVerboseLevel(VERBOSE_ALL);
 800cce0:	2003      	movs	r0, #3
 800cce2:	f007 f951 	bl	8013f88 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cce6:	49a2      	ldr	r1, [pc, #648]	@ (800cf70 <main+0x394>)
 800cce8:	4ba2      	ldr	r3, [pc, #648]	@ (800cf74 <main+0x398>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	0018      	movs	r0, r3
 800ccee:	f010 fc97 	bl	801d620 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800ccf2:	4ba1      	ldr	r3, [pc, #644]	@ (800cf78 <main+0x39c>)
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	f7fd fe09 	bl	800a90c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800ccfa:	4aa0      	ldr	r2, [pc, #640]	@ (800cf7c <main+0x3a0>)
 800ccfc:	49a0      	ldr	r1, [pc, #640]	@ (800cf80 <main+0x3a4>)
 800ccfe:	48a1      	ldr	r0, [pc, #644]	@ (800cf84 <main+0x3a8>)
 800cd00:	230b      	movs	r3, #11
 800cd02:	f004 fe5b 	bl	80119bc <soundInit>
 800cd06:	0003      	movs	r3, r0
 800cd08:	001a      	movs	r2, r3
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	4053      	eors	r3, r2
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <main+0x148>
    errorHandler(__func__, __LINE__, __FILE__);
 800cd14:	4a9c      	ldr	r2, [pc, #624]	@ (800cf88 <main+0x3ac>)
 800cd16:	2304      	movs	r3, #4
 800cd18:	33ff      	adds	r3, #255	@ 0xff
 800cd1a:	0019      	movs	r1, r3
 800cd1c:	4b9b      	ldr	r3, [pc, #620]	@ (800cf8c <main+0x3b0>)
 800cd1e:	0018      	movs	r0, r3
 800cd20:	f007 f9a8 	bl	8014074 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800cd24:	4b9a      	ldr	r3, [pc, #616]	@ (800cf90 <main+0x3b4>)
 800cd26:	4a9b      	ldr	r2, [pc, #620]	@ (800cf94 <main+0x3b8>)
 800cd28:	4995      	ldr	r1, [pc, #596]	@ (800cf80 <main+0x3a4>)
 800cd2a:	489b      	ldr	r0, [pc, #620]	@ (800cf98 <main+0x3bc>)
 800cd2c:	f000 fc92 	bl	800d654 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cd30:	f007 fe30 	bl	8014994 <HAL_GetTick>
 800cd34:	0003      	movs	r3, r0
 800cd36:	4a99      	ldr	r2, [pc, #612]	@ (800cf9c <main+0x3c0>)
 800cd38:	189a      	adds	r2, r3, r2
 800cd3a:	4b99      	ldr	r3, [pc, #612]	@ (800cfa0 <main+0x3c4>)
 800cd3c:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cd3e:	f7fc ffcf 	bl	8009ce0 <Check_USB_PowerOn>
 800cd42:	0003      	movs	r3, r0
 800cd44:	1e5a      	subs	r2, r3, #1
 800cd46:	4193      	sbcs	r3, r2
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	4053      	eors	r3, r2
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	1c1a      	adds	r2, r3, #0
 800cd52:	2301      	movs	r3, #1
 800cd54:	4013      	ands	r3, r2
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	4b92      	ldr	r3, [pc, #584]	@ (800cfa4 <main+0x3c8>)
 800cd5a:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cd5c:	f7fc ffc0 	bl	8009ce0 <Check_USB_PowerOn>
 800cd60:	1e03      	subs	r3, r0, #0
 800cd62:	d003      	beq.n	800cd6c <main+0x190>
    printf_USB("Input command followed by Enter or type Helpme\r\n");
 800cd64:	4b90      	ldr	r3, [pc, #576]	@ (800cfa8 <main+0x3cc>)
 800cd66:	0018      	movs	r0, r3
 800cd68:	f7fb febe 	bl	8008ae8 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cd6c:	4b8f      	ldr	r3, [pc, #572]	@ (800cfac <main+0x3d0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	0018      	movs	r0, r3
 800cd72:	f007 f839 	bl	8013de8 <TimestampIsReached>
 800cd76:	1e03      	subs	r3, r0, #0
 800cd78:	d00a      	beq.n	800cd90 <main+0x1b4>
      Battery_Upkeep();
 800cd7a:	f006 faff 	bl	801337c <Battery_Upkeep>
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800cd7e:	f007 fe09 	bl	8014994 <HAL_GetTick>
 800cd82:	0003      	movs	r3, r0
 800cd84:	4a8a      	ldr	r2, [pc, #552]	@ (800cfb0 <main+0x3d4>)
 800cd86:	189a      	adds	r2, r3, r2
 800cd88:	4b88      	ldr	r3, [pc, #544]	@ (800cfac <main+0x3d0>)
 800cd8a:	601a      	str	r2, [r3, #0]
      showTime();
 800cd8c:	f7fd f8b0 	bl	8009ef0 <showTime>
    }
    configCheck();
 800cd90:	f006 f954 	bl	801303c <configCheck>
    if ((batteryStatus == BATTERY_LOW || batteryStatus == BATTERY_CRITICAL)  && !EspTurnedOn){
 800cd94:	4b87      	ldr	r3, [pc, #540]	@ (800cfb4 <main+0x3d8>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d003      	beq.n	800cda4 <main+0x1c8>
 800cd9c:	4b85      	ldr	r3, [pc, #532]	@ (800cfb4 <main+0x3d8>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d137      	bne.n	800ce14 <main+0x238>
 800cda4:	4b84      	ldr	r3, [pc, #528]	@ (800cfb8 <main+0x3dc>)
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	4053      	eors	r3, r2
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d030      	beq.n	800ce14 <main+0x238>
      WalkAllRedLED();
 800cdb2:	f005 ff25 	bl	8012c00 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800cdb6:	4b81      	ldr	r3, [pc, #516]	@ (800cfbc <main+0x3e0>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      pwrmailTodaySend();
 800cdbc:	f7f7 fe54 	bl	8004a68 <pwrmailTodaySend>
      if (((batteryStatus == BATTERY_LOW)  || (batteryStatus == BATTERY_CRITICAL)) && (sendpwremail == CLEAR) && !Check_USB_PowerOn()) {
 800cdc0:	4b7c      	ldr	r3, [pc, #496]	@ (800cfb4 <main+0x3d8>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d003      	beq.n	800cdd0 <main+0x1f4>
 800cdc8:	4b7a      	ldr	r3, [pc, #488]	@ (800cfb4 <main+0x3d8>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d121      	bne.n	800ce14 <main+0x238>
 800cdd0:	4b7b      	ldr	r3, [pc, #492]	@ (800cfc0 <main+0x3e4>)
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d11d      	bne.n	800ce14 <main+0x238>
 800cdd8:	f7fc ff82 	bl	8009ce0 <Check_USB_PowerOn>
 800cddc:	0003      	movs	r3, r0
 800cdde:	001a      	movs	r2, r3
 800cde0:	2301      	movs	r3, #1
 800cde2:	4053      	eors	r3, r2
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d014      	beq.n	800ce14 <main+0x238>
        Debug("charge: %d, sendpwrmail: %d Check_USB_PowerOn(): %d", batteryStatus, sendpwremail, Check_USB_PowerOn());
 800cdea:	4b72      	ldr	r3, [pc, #456]	@ (800cfb4 <main+0x3d8>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	001d      	movs	r5, r3
 800cdf0:	4b73      	ldr	r3, [pc, #460]	@ (800cfc0 <main+0x3e4>)
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	001c      	movs	r4, r3
 800cdf6:	f7fc ff73 	bl	8009ce0 <Check_USB_PowerOn>
 800cdfa:	0003      	movs	r3, r0
 800cdfc:	4a71      	ldr	r2, [pc, #452]	@ (800cfc4 <main+0x3e8>)
 800cdfe:	4972      	ldr	r1, [pc, #456]	@ (800cfc8 <main+0x3ec>)
 800ce00:	9301      	str	r3, [sp, #4]
 800ce02:	9400      	str	r4, [sp, #0]
 800ce04:	002b      	movs	r3, r5
 800ce06:	2003      	movs	r0, #3
 800ce08:	f007 f844 	bl	8013e94 <CreateLine>
        setModePowerMail();
 800ce0c:	f7f7 fdec 	bl	80049e8 <setModePowerMail>
        ESP_Upkeep();
 800ce10:	f7fa fc50 	bl	80076b4 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800ce14:	4b6d      	ldr	r3, [pc, #436]	@ (800cfcc <main+0x3f0>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	701a      	strb	r2, [r3, #0]
    if (batteryStatus == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800ce1a:	4b66      	ldr	r3, [pc, #408]	@ (800cfb4 <main+0x3d8>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10c      	bne.n	800ce3c <main+0x260>
 800ce22:	4b6b      	ldr	r3, [pc, #428]	@ (800cfd0 <main+0x3f4>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	2b09      	cmp	r3, #9
 800ce28:	d108      	bne.n	800ce3c <main+0x260>
       batteryEmpty = true;
 800ce2a:	4b6a      	ldr	r3, [pc, #424]	@ (800cfd4 <main+0x3f8>)
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP); // light up the leds every hour
 800ce30:	23e1      	movs	r3, #225	@ 0xe1
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	0018      	movs	r0, r3
 800ce36:	f7fd fc67 	bl	800a708 <Enter_Stop_Mode_for_empty_battery>
 800ce3a:	e002      	b.n	800ce42 <main+0x266>
    }
    else{
      batteryEmpty = false;
 800ce3c:	4b65      	ldr	r3, [pc, #404]	@ (800cfd4 <main+0x3f8>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800ce42:	4b65      	ldr	r3, [pc, #404]	@ (800cfd8 <main+0x3fc>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d100      	bne.n	800ce4c <main+0x270>
 800ce4a:	e10b      	b.n	800d064 <main+0x488>
 800ce4c:	4b41      	ldr	r3, [pc, #260]	@ (800cf54 <main+0x378>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2201      	movs	r2, #1
 800ce52:	4053      	eors	r3, r2
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d100      	bne.n	800ce5c <main+0x280>
 800ce5a:	e103      	b.n	800d064 <main+0x488>
 800ce5c:	4b5d      	ldr	r3, [pc, #372]	@ (800cfd4 <main+0x3f8>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2201      	movs	r2, #1
 800ce62:	4053      	eors	r3, r2
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d100      	bne.n	800ce6c <main+0x290>
 800ce6a:	e0fb      	b.n	800d064 <main+0x488>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800ce6c:	4b4d      	ldr	r3, [pc, #308]	@ (800cfa4 <main+0x3c8>)
 800ce6e:	781a      	ldrb	r2, [r3, #0]
 800ce70:	4b5a      	ldr	r3, [pc, #360]	@ (800cfdc <main+0x400>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d034      	beq.n	800cee2 <main+0x306>
        if (IsSGPPresent() && !usbPluggedIn) {
 800ce78:	f000 fb7e 	bl	800d578 <IsSGPPresent>
 800ce7c:	1e03      	subs	r3, r0, #0
 800ce7e:	d009      	beq.n	800ce94 <main+0x2b8>
 800ce80:	4b56      	ldr	r3, [pc, #344]	@ (800cfdc <main+0x400>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2201      	movs	r2, #1
 800ce86:	4053      	eors	r3, r2
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d002      	beq.n	800ce94 <main+0x2b8>
          SetVOCSensorDIS_ENA(true);
 800ce8e:	2001      	movs	r0, #1
 800ce90:	f000 fb7c 	bl	800d58c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800ce94:	4b52      	ldr	r3, [pc, #328]	@ (800cfe0 <main+0x404>)
 800ce96:	791b      	ldrb	r3, [r3, #4]
 800ce98:	2b34      	cmp	r3, #52	@ 0x34
 800ce9a:	d003      	beq.n	800cea4 <main+0x2c8>
 800ce9c:	4b50      	ldr	r3, [pc, #320]	@ (800cfe0 <main+0x404>)
 800ce9e:	791b      	ldrb	r3, [r3, #4]
 800cea0:	2b35      	cmp	r3, #53	@ 0x35
 800cea2:	d106      	bne.n	800ceb2 <main+0x2d6>
 800cea4:	4b4d      	ldr	r3, [pc, #308]	@ (800cfdc <main+0x400>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <main+0x2d6>
          SetVOCSensorDIS_ENA(false);
 800ceac:	2000      	movs	r0, #0
 800ceae:	f000 fb6d 	bl	800d58c <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800ceb2:	4b4a      	ldr	r3, [pc, #296]	@ (800cfdc <main+0x400>)
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	4053      	eors	r3, r2
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00c      	beq.n	800ceda <main+0x2fe>
 800cec0:	f007 fd68 	bl	8014994 <HAL_GetTick>
 800cec4:	0003      	movs	r3, r0
 800cec6:	4a35      	ldr	r2, [pc, #212]	@ (800cf9c <main+0x3c0>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d906      	bls.n	800ceda <main+0x2fe>
//          Debug("Device time out set in main due to powerstatus shift");
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800cecc:	f007 fd62 	bl	8014994 <HAL_GetTick>
 800ced0:	0003      	movs	r3, r0
 800ced2:	4a44      	ldr	r2, [pc, #272]	@ (800cfe4 <main+0x408>)
 800ced4:	189a      	adds	r2, r3, r2
 800ced6:	4b32      	ldr	r3, [pc, #200]	@ (800cfa0 <main+0x3c4>)
 800ced8:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800ceda:	4b40      	ldr	r3, [pc, #256]	@ (800cfdc <main+0x400>)
 800cedc:	781a      	ldrb	r2, [r3, #0]
 800cede:	4b31      	ldr	r3, [pc, #196]	@ (800cfa4 <main+0x3c8>)
 800cee0:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800cee2:	f000 fffb 	bl	800dedc <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800cee6:	4b35      	ldr	r3, [pc, #212]	@ (800cfbc <main+0x3e0>)
 800cee8:	78db      	ldrb	r3, [r3, #3]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d005      	beq.n	800cefa <main+0x31e>
        MICstate = Mic_Upkeep();
 800ceee:	f001 fa05 	bl	800e2fc <Mic_Upkeep>
 800cef2:	0003      	movs	r3, r0
 800cef4:	001a      	movs	r2, r3
 800cef6:	4b3c      	ldr	r3, [pc, #240]	@ (800cfe8 <main+0x40c>)
 800cef8:	701a      	strb	r2, [r3, #0]
      }
      if ( ((batteryStatus >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800cefa:	4b2e      	ldr	r3, [pc, #184]	@ (800cfb4 <main+0x3d8>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d803      	bhi.n	800cf0a <main+0x32e>
 800cf02:	4b32      	ldr	r3, [pc, #200]	@ (800cfcc <main+0x3f0>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d070      	beq.n	800cfec <main+0x410>
 800cf0a:	4b2c      	ldr	r3, [pc, #176]	@ (800cfbc <main+0x3e0>)
 800cf0c:	789b      	ldrb	r3, [r3, #2]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d06c      	beq.n	800cfec <main+0x410>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800cf12:	f001 fb93 	bl	800e63c <sen5x_Get_sen5x_enable_state>
 800cf16:	0003      	movs	r3, r0
 800cf18:	001a      	movs	r2, r3
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4053      	eors	r3, r2
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d006      	beq.n	800cf32 <main+0x356>
 800cf24:	4b2d      	ldr	r3, [pc, #180]	@ (800cfdc <main+0x400>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <main+0x356>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	f001 fbc1 	bl	800e6b4 <sen5x_enable>
        }
        sen5x_statemachine();
 800cf32:	f002 f959 	bl	800f1e8 <sen5x_statemachine>
 800cf36:	e07a      	b.n	800d02e <main+0x452>
 800cf38:	00000289 	.word	0x00000289
 800cf3c:	200021ac 	.word	0x200021ac
 800cf40:	2000216c 	.word	0x2000216c
 800cf44:	0802c8e8 	.word	0x0802c8e8
 800cf48:	0802c914 	.word	0x0802c914
 800cf4c:	08080194 	.word	0x08080194
 800cf50:	200010f7 	.word	0x200010f7
 800cf54:	200010f5 	.word	0x200010f5
 800cf58:	20002158 	.word	0x20002158
 800cf5c:	0802c918 	.word	0x0802c918
 800cf60:	0802c934 	.word	0x0802c934
 800cf64:	d70a3d71 	.word	0xd70a3d71
 800cf68:	400d70a3 	.word	0x400d70a3
 800cf6c:	0802c938 	.word	0x0802c938
 800cf70:	20001100 	.word	0x20001100
 800cf74:	200022e4 	.word	0x200022e4
 800cf78:	20001198 	.word	0x20001198
 800cf7c:	200021ec 	.word	0x200021ec
 800cf80:	20001070 	.word	0x20001070
 800cf84:	200010ac 	.word	0x200010ac
 800cf88:	0802c998 	.word	0x0802c998
 800cf8c:	0802e708 	.word	0x0802e708
 800cf90:	2000239c 	.word	0x2000239c
 800cf94:	20000e84 	.word	0x20000e84
 800cf98:	20000f38 	.word	0x20000f38
 800cf9c:	000061a8 	.word	0x000061a8
 800cfa0:	20001114 	.word	0x20001114
 800cfa4:	200010fa 	.word	0x200010fa
 800cfa8:	0802c9ac 	.word	0x0802c9ac
 800cfac:	200000a4 	.word	0x200000a4
 800cfb0:	0000c350 	.word	0x0000c350
 800cfb4:	2000215d 	.word	0x2000215d
 800cfb8:	200005ac 	.word	0x200005ac
 800cfbc:	20001118 	.word	0x20001118
 800cfc0:	200010f9 	.word	0x200010f9
 800cfc4:	0802c9e0 	.word	0x0802c9e0
 800cfc8:	0802ca14 	.word	0x0802ca14
 800cfcc:	200000a2 	.word	0x200000a2
 800cfd0:	200010fc 	.word	0x200010fc
 800cfd4:	200010f6 	.word	0x200010f6
 800cfd8:	200010f4 	.word	0x200010f4
 800cfdc:	2000214d 	.word	0x2000214d
 800cfe0:	200011c0 	.word	0x200011c0
 800cfe4:	00001194 	.word	0x00001194
 800cfe8:	200010fb 	.word	0x200010fb
      }
      else if ((batteryStatus <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800cfec:	4b52      	ldr	r3, [pc, #328]	@ (800d138 <main+0x55c>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d81c      	bhi.n	800d02e <main+0x452>
 800cff4:	4b51      	ldr	r3, [pc, #324]	@ (800d13c <main+0x560>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2201      	movs	r2, #1
 800cffa:	4053      	eors	r3, r2
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d015      	beq.n	800d02e <main+0x452>
 800d002:	4b4f      	ldr	r3, [pc, #316]	@ (800d140 <main+0x564>)
 800d004:	789b      	ldrb	r3, [r3, #2]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d011      	beq.n	800d02e <main+0x452>
        Info("Battery level insufficient for sen5x operation");
 800d00a:	4a4e      	ldr	r2, [pc, #312]	@ (800d144 <main+0x568>)
 800d00c:	4b4e      	ldr	r3, [pc, #312]	@ (800d148 <main+0x56c>)
 800d00e:	0019      	movs	r1, r3
 800d010:	2002      	movs	r0, #2
 800d012:	f006 ff3f 	bl	8013e94 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800d016:	4b4a      	ldr	r3, [pc, #296]	@ (800d140 <main+0x564>)
 800d018:	2200      	movs	r2, #0
 800d01a:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800d01c:	4b4b      	ldr	r3, [pc, #300]	@ (800d14c <main+0x570>)
 800d01e:	2200      	movs	r2, #0
 800d020:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800d022:	4b4b      	ldr	r3, [pc, #300]	@ (800d150 <main+0x574>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <main+0x452>
          sen5x_Power_Off();
 800d02a:	f001 fbcf 	bl	800e7cc <sen5x_Power_Off>
        }
      }
      if (SensorProbe.ESP_Present && !espfailshown) {
 800d02e:	4b49      	ldr	r3, [pc, #292]	@ (800d154 <main+0x578>)
 800d030:	79db      	ldrb	r3, [r3, #7]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00d      	beq.n	800d052 <main+0x476>
 800d036:	4b48      	ldr	r3, [pc, #288]	@ (800d158 <main+0x57c>)
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2201      	movs	r2, #1
 800d03c:	4053      	eors	r3, r2
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d006      	beq.n	800d052 <main+0x476>
        ESPstate = ESP_Upkeep();
 800d044:	f7fa fb36 	bl	80076b4 <ESP_Upkeep>
 800d048:	0003      	movs	r3, r0
 800d04a:	001a      	movs	r2, r3
 800d04c:	4b43      	ldr	r3, [pc, #268]	@ (800d15c <main+0x580>)
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	e008      	b.n	800d064 <main+0x488>
      }
      else {
        Error("ESP failed during init");
 800d052:	4a43      	ldr	r2, [pc, #268]	@ (800d160 <main+0x584>)
 800d054:	4b43      	ldr	r3, [pc, #268]	@ (800d164 <main+0x588>)
 800d056:	0019      	movs	r1, r3
 800d058:	2001      	movs	r0, #1
 800d05a:	f006 ff1b 	bl	8013e94 <CreateLine>
        espfailshown = true;
 800d05e:	4b3e      	ldr	r3, [pc, #248]	@ (800d158 <main+0x57c>)
 800d060:	2201      	movs	r2, #1
 800d062:	701a      	strb	r2, [r3, #0]
      }
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800d064:	4b40      	ldr	r3, [pc, #256]	@ (800d168 <main+0x58c>)
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2201      	movs	r2, #1
 800d06a:	4053      	eors	r3, r2
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00f      	beq.n	800d092 <main+0x4b6>
 800d072:	4b3e      	ldr	r3, [pc, #248]	@ (800d16c <main+0x590>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	2201      	movs	r2, #1
 800d078:	4053      	eors	r3, r2
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d008      	beq.n	800d092 <main+0x4b6>
 800d080:	4b3b      	ldr	r3, [pc, #236]	@ (800d170 <main+0x594>)
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2201      	movs	r2, #1
 800d086:	4053      	eors	r3, r2
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <main+0x4b6>
      Device_Test();  // for device with startup time
 800d08e:	f000 fcb9 	bl	800da04 <Device_Test>
    }
    if (!usbPluggedIn) {
 800d092:	4b38      	ldr	r3, [pc, #224]	@ (800d174 <main+0x598>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2201      	movs	r2, #1
 800d098:	4053      	eors	r3, r2
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d030      	beq.n	800d102 <main+0x526>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800d0a0:	4b35      	ldr	r3, [pc, #212]	@ (800d178 <main+0x59c>)
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	4053      	eors	r3, r2
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d029      	beq.n	800d102 <main+0x526>
 800d0ae:	f000 fd27 	bl	800db00 <AllDevicesReady>
 800d0b2:	1e03      	subs	r3, r0, #0
 800d0b4:	d025      	beq.n	800d102 <main+0x526>
 800d0b6:	4b31      	ldr	r3, [pc, #196]	@ (800d17c <main+0x5a0>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d021      	beq.n	800d102 <main+0x526>
        EnabledConnectedDevices();
 800d0be:	f000 fe6b 	bl	800dd98 <EnabledConnectedDevices>
        Enter_Stop_Mode((batteryCharge<3.90)?SensorProbe.PM_Present?WAIT_WITH_PM+900:WAIT_WITHOUT_PM+900:SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800d0c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d180 <main+0x5a4>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	1c18      	adds	r0, r3, #0
 800d0c8:	f7f6 fbe4 	bl	8003894 <__aeabi_f2d>
 800d0cc:	4a2d      	ldr	r2, [pc, #180]	@ (800d184 <main+0x5a8>)
 800d0ce:	4b2e      	ldr	r3, [pc, #184]	@ (800d188 <main+0x5ac>)
 800d0d0:	f7f3 f9f4 	bl	80004bc <__aeabi_dcmplt>
 800d0d4:	1e03      	subs	r3, r0, #0
 800d0d6:	d008      	beq.n	800d0ea <main+0x50e>
 800d0d8:	4b1e      	ldr	r3, [pc, #120]	@ (800d154 <main+0x578>)
 800d0da:	795b      	ldrb	r3, [r3, #5]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <main+0x50a>
 800d0e0:	23dc      	movs	r3, #220	@ 0xdc
 800d0e2:	00db      	lsls	r3, r3, #3
 800d0e4:	e00a      	b.n	800d0fc <main+0x520>
 800d0e6:	4b29      	ldr	r3, [pc, #164]	@ (800d18c <main+0x5b0>)
 800d0e8:	e008      	b.n	800d0fc <main+0x520>
 800d0ea:	4b1a      	ldr	r3, [pc, #104]	@ (800d154 <main+0x578>)
 800d0ec:	795b      	ldrb	r3, [r3, #5]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d002      	beq.n	800d0f8 <main+0x51c>
 800d0f2:	23d7      	movs	r3, #215	@ 0xd7
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	e001      	b.n	800d0fc <main+0x520>
 800d0f8:	23dc      	movs	r3, #220	@ 0xdc
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f7fd fb5f 	bl	800a7c0 <Enter_Stop_Mode>
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d102:	4b23      	ldr	r3, [pc, #140]	@ (800d190 <main+0x5b4>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <main+0x532>
      check_cli_command();
 800d10a:	f000 f8cf 	bl	800d2ac <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d10e:	f7fc fde7 	bl	8009ce0 <Check_USB_PowerOn>
 800d112:	1e03      	subs	r3, r0, #0
 800d114:	d100      	bne.n	800d118 <main+0x53c>
 800d116:	e629      	b.n	800cd6c <main+0x190>
 800d118:	4b1e      	ldr	r3, [pc, #120]	@ (800d194 <main+0x5b8>)
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2201      	movs	r2, #1
 800d11e:	4053      	eors	r3, r2
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d100      	bne.n	800d128 <main+0x54c>
 800d126:	e621      	b.n	800cd6c <main+0x190>
      Process_USB_input(GetUsbRxPointer());
 800d128:	f016 f8f2 	bl	8023310 <GetUsbRxPointer>
 800d12c:	0003      	movs	r3, r0
 800d12e:	0018      	movs	r0, r3
 800d130:	f7fc fa54 	bl	80095dc <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d134:	e61a      	b.n	800cd6c <main+0x190>
 800d136:	46c0      	nop			@ (mov r8, r8)
 800d138:	2000215d 	.word	0x2000215d
 800d13c:	200000a2 	.word	0x200000a2
 800d140:	20001118 	.word	0x20001118
 800d144:	0802ca18 	.word	0x0802ca18
 800d148:	0802c914 	.word	0x0802c914
 800d14c:	200011be 	.word	0x200011be
 800d150:	200011bd 	.word	0x200011bd
 800d154:	20001120 	.word	0x20001120
 800d158:	200010f8 	.word	0x200010f8
 800d15c:	200010fc 	.word	0x200010fc
 800d160:	0802ca48 	.word	0x0802ca48
 800d164:	0802c934 	.word	0x0802c934
 800d168:	200010f4 	.word	0x200010f4
 800d16c:	200010f5 	.word	0x200010f5
 800d170:	200010f6 	.word	0x200010f6
 800d174:	2000214d 	.word	0x2000214d
 800d178:	2000214e 	.word	0x2000214e
 800d17c:	200005b3 	.word	0x200005b3
 800d180:	20002158 	.word	0x20002158
 800d184:	33333333 	.word	0x33333333
 800d188:	400f3333 	.word	0x400f3333
 800d18c:	000006f4 	.word	0x000006f4
 800d190:	20001100 	.word	0x20001100
 800d194:	200005af 	.word	0x200005af

0800d198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d198:	b590      	push	{r4, r7, lr}
 800d19a:	b09d      	sub	sp, #116	@ 0x74
 800d19c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d19e:	2438      	movs	r4, #56	@ 0x38
 800d1a0:	193b      	adds	r3, r7, r4
 800d1a2:	0018      	movs	r0, r3
 800d1a4:	2338      	movs	r3, #56	@ 0x38
 800d1a6:	001a      	movs	r2, r3
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	f019 fad7 	bl	802675c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d1ae:	2324      	movs	r3, #36	@ 0x24
 800d1b0:	18fb      	adds	r3, r7, r3
 800d1b2:	0018      	movs	r0, r3
 800d1b4:	2314      	movs	r3, #20
 800d1b6:	001a      	movs	r2, r3
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	f019 facf 	bl	802675c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d1be:	003b      	movs	r3, r7
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	2324      	movs	r3, #36	@ 0x24
 800d1c4:	001a      	movs	r2, r3
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	f019 fac8 	bl	802675c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d1cc:	4b34      	ldr	r3, [pc, #208]	@ (800d2a0 <SystemClock_Config+0x108>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a34      	ldr	r2, [pc, #208]	@ (800d2a4 <SystemClock_Config+0x10c>)
 800d1d2:	401a      	ands	r2, r3
 800d1d4:	4b32      	ldr	r3, [pc, #200]	@ (800d2a0 <SystemClock_Config+0x108>)
 800d1d6:	2180      	movs	r1, #128	@ 0x80
 800d1d8:	0109      	lsls	r1, r1, #4
 800d1da:	430a      	orrs	r2, r1
 800d1dc:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d1de:	f00d ffeb 	bl	801b1b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d1e2:	4b31      	ldr	r3, [pc, #196]	@ (800d2a8 <SystemClock_Config+0x110>)
 800d1e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1e6:	4a2f      	ldr	r2, [pc, #188]	@ (800d2a4 <SystemClock_Config+0x10c>)
 800d1e8:	401a      	ands	r2, r3
 800d1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d2a8 <SystemClock_Config+0x110>)
 800d1ec:	2180      	movs	r1, #128	@ 0x80
 800d1ee:	0149      	lsls	r1, r1, #5
 800d1f0:	430a      	orrs	r2, r1
 800d1f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d1f4:	193b      	adds	r3, r7, r4
 800d1f6:	2226      	movs	r2, #38	@ 0x26
 800d1f8:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d1fa:	193b      	adds	r3, r7, r4
 800d1fc:	2280      	movs	r2, #128	@ 0x80
 800d1fe:	0052      	lsls	r2, r2, #1
 800d200:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d202:	0021      	movs	r1, r4
 800d204:	187b      	adds	r3, r7, r1
 800d206:	2201      	movs	r2, #1
 800d208:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d20a:	187b      	adds	r3, r7, r1
 800d20c:	2210      	movs	r2, #16
 800d20e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d210:	187b      	adds	r3, r7, r1
 800d212:	2201      	movs	r2, #1
 800d214:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d216:	187b      	adds	r3, r7, r1
 800d218:	2200      	movs	r2, #0
 800d21a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d21c:	187b      	adds	r3, r7, r1
 800d21e:	0018      	movs	r0, r3
 800d220:	f00e f844 	bl	801b2ac <HAL_RCC_OscConfig>
 800d224:	1e03      	subs	r3, r0, #0
 800d226:	d001      	beq.n	800d22c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d228:	f000 f922 	bl	800d470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d22c:	2124      	movs	r1, #36	@ 0x24
 800d22e:	187b      	adds	r3, r7, r1
 800d230:	220f      	movs	r2, #15
 800d232:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d234:	187b      	adds	r3, r7, r1
 800d236:	2201      	movs	r2, #1
 800d238:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d23a:	187b      	adds	r3, r7, r1
 800d23c:	2200      	movs	r2, #0
 800d23e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d240:	187b      	adds	r3, r7, r1
 800d242:	2200      	movs	r2, #0
 800d244:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d246:	187b      	adds	r3, r7, r1
 800d248:	2200      	movs	r2, #0
 800d24a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d24c:	187b      	adds	r3, r7, r1
 800d24e:	2100      	movs	r1, #0
 800d250:	0018      	movs	r0, r3
 800d252:	f00e fbff 	bl	801ba54 <HAL_RCC_ClockConfig>
 800d256:	1e03      	subs	r3, r0, #0
 800d258:	d001      	beq.n	800d25e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d25a:	f000 f909 	bl	800d470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d25e:	003b      	movs	r3, r7
 800d260:	226d      	movs	r2, #109	@ 0x6d
 800d262:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d264:	003b      	movs	r3, r7
 800d266:	2200      	movs	r2, #0
 800d268:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d26a:	003b      	movs	r3, r7
 800d26c:	2200      	movs	r2, #0
 800d26e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d270:	003b      	movs	r3, r7
 800d272:	2200      	movs	r2, #0
 800d274:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d276:	003b      	movs	r3, r7
 800d278:	2280      	movs	r2, #128	@ 0x80
 800d27a:	0252      	lsls	r2, r2, #9
 800d27c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d27e:	003b      	movs	r3, r7
 800d280:	2280      	movs	r2, #128	@ 0x80
 800d282:	04d2      	lsls	r2, r2, #19
 800d284:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d286:	003b      	movs	r3, r7
 800d288:	0018      	movs	r0, r3
 800d28a:	f00e fe07 	bl	801be9c <HAL_RCCEx_PeriphCLKConfig>
 800d28e:	1e03      	subs	r3, r0, #0
 800d290:	d001      	beq.n	800d296 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d292:	f000 f8ed 	bl	800d470 <Error_Handler>
  }
}
 800d296:	46c0      	nop			@ (mov r8, r8)
 800d298:	46bd      	mov	sp, r7
 800d29a:	b01d      	add	sp, #116	@ 0x74
 800d29c:	bd90      	pop	{r4, r7, pc}
 800d29e:	46c0      	nop			@ (mov r8, r8)
 800d2a0:	40007000 	.word	0x40007000
 800d2a4:	ffffe7ff 	.word	0xffffe7ff
 800d2a8:	40021000 	.word	0x40021000

0800d2ac <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d2b0:	4b40      	ldr	r3, [pc, #256]	@ (800d3b4 <check_cli_command+0x108>)
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	3b61      	subs	r3, #97	@ 0x61
 800d2b6:	2b15      	cmp	r3, #21
 800d2b8:	d845      	bhi.n	800d346 <check_cli_command+0x9a>
 800d2ba:	009a      	lsls	r2, r3, #2
 800d2bc:	4b3e      	ldr	r3, [pc, #248]	@ (800d3b8 <check_cli_command+0x10c>)
 800d2be:	18d3      	adds	r3, r2, r3
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d2c4:	4b3d      	ldr	r3, [pc, #244]	@ (800d3bc <check_cli_command+0x110>)
 800d2c6:	0018      	movs	r0, r3
 800d2c8:	f019 f8f6 	bl	80264b8 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d2cc:	2003      	movs	r0, #3
 800d2ce:	f006 fe5b 	bl	8013f88 <SetVerboseLevel>
      break;
 800d2d2:	e069      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d2d4:	f7fb fc48 	bl	8008b68 <PC_show_Keys>
    break;
 800d2d8:	e066      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d2da:	f7f7 fad9 	bl	8004890 <forceNTPupdate>
    break;
 800d2de:	e063      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d2e0:	4b37      	ldr	r3, [pc, #220]	@ (800d3c0 <check_cli_command+0x114>)
 800d2e2:	0018      	movs	r0, r3
 800d2e4:	f019 f8e8 	bl	80264b8 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d2e8:	2002      	movs	r0, #2
 800d2ea:	f006 fe4d 	bl	8013f88 <SetVerboseLevel>
      break;
 800d2ee:	e05b      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d2f0:	4b34      	ldr	r3, [pc, #208]	@ (800d3c4 <check_cli_command+0x118>)
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f019 f8e0 	bl	80264b8 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d2f8:	2001      	movs	r0, #1
 800d2fa:	f006 fe45 	bl	8013f88 <SetVerboseLevel>
      break;
 800d2fe:	e053      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d300:	4b31      	ldr	r3, [pc, #196]	@ (800d3c8 <check_cli_command+0x11c>)
 800d302:	0018      	movs	r0, r3
 800d304:	f019 f8d8 	bl	80264b8 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d308:	2000      	movs	r0, #0
 800d30a:	f006 fe3d 	bl	8013f88 <SetVerboseLevel>
      break;
 800d30e:	e04b      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d310:	f007 fb40 	bl	8014994 <HAL_GetTick>
 800d314:	0002      	movs	r2, r0
 800d316:	4b2d      	ldr	r3, [pc, #180]	@ (800d3cc <check_cli_command+0x120>)
 800d318:	601a      	str	r2, [r3, #0]
      break;
 800d31a:	e045      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d31c:	f7fc fde8 	bl	8009ef0 <showTime>
      break;
 800d320:	e042      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d322:	4b2b      	ldr	r3, [pc, #172]	@ (800d3d0 <check_cli_command+0x124>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	1e5a      	subs	r2, r3, #1
 800d328:	4193      	sbcs	r3, r2
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	2201      	movs	r2, #1
 800d32e:	4053      	eors	r3, r2
 800d330:	b2db      	uxtb	r3, r3
 800d332:	1c1a      	adds	r2, r3, #0
 800d334:	2301      	movs	r3, #1
 800d336:	4013      	ands	r3, r2
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	4b25      	ldr	r3, [pc, #148]	@ (800d3d0 <check_cli_command+0x124>)
 800d33c:	701a      	strb	r2, [r3, #0]
      break;
 800d33e:	e033      	b.n	800d3a8 <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d340:	f006 fe3c 	bl	8013fbc <BinaryReleaseInfo>
      break;
 800d344:	e030      	b.n	800d3a8 <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d346:	4b23      	ldr	r3, [pc, #140]	@ (800d3d4 <check_cli_command+0x128>)
 800d348:	0018      	movs	r0, r3
 800d34a:	f019 f8b5 	bl	80264b8 <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d34e:	4b22      	ldr	r3, [pc, #136]	@ (800d3d8 <check_cli_command+0x12c>)
 800d350:	0018      	movs	r0, r3
 800d352:	f019 f8b1 	bl	80264b8 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d356:	4b21      	ldr	r3, [pc, #132]	@ (800d3dc <check_cli_command+0x130>)
 800d358:	0018      	movs	r0, r3
 800d35a:	f019 f8ad 	bl	80264b8 <puts>
      printf("e - show EEPROM\r\n");
 800d35e:	4b20      	ldr	r3, [pc, #128]	@ (800d3e0 <check_cli_command+0x134>)
 800d360:	0018      	movs	r0, r3
 800d362:	f019 f8a9 	bl	80264b8 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d366:	4b1f      	ldr	r3, [pc, #124]	@ (800d3e4 <check_cli_command+0x138>)
 800d368:	0018      	movs	r0, r3
 800d36a:	f019 f8a5 	bl	80264b8 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d36e:	4b1e      	ldr	r3, [pc, #120]	@ (800d3e8 <check_cli_command+0x13c>)
 800d370:	0018      	movs	r0, r3
 800d372:	f019 f8a1 	bl	80264b8 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d376:	4b1d      	ldr	r3, [pc, #116]	@ (800d3ec <check_cli_command+0x140>)
 800d378:	0018      	movs	r0, r3
 800d37a:	f019 f89d 	bl	80264b8 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d37e:	4b1c      	ldr	r3, [pc, #112]	@ (800d3f0 <check_cli_command+0x144>)
 800d380:	0018      	movs	r0, r3
 800d382:	f019 f899 	bl	80264b8 <puts>
      printf("s - Start particle measurement\r\n");
 800d386:	4b1b      	ldr	r3, [pc, #108]	@ (800d3f4 <check_cli_command+0x148>)
 800d388:	0018      	movs	r0, r3
 800d38a:	f019 f895 	bl	80264b8 <puts>
      printf("t - Show actual system time\r\n");
 800d38e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f8 <check_cli_command+0x14c>)
 800d390:	0018      	movs	r0, r3
 800d392:	f019 f891 	bl	80264b8 <puts>
      printf("u - USB logging toggle\r\n");
 800d396:	4b19      	ldr	r3, [pc, #100]	@ (800d3fc <check_cli_command+0x150>)
 800d398:	0018      	movs	r0, r3
 800d39a:	f019 f88d 	bl	80264b8 <puts>
      printf("v - Show system version\r\n");
 800d39e:	4b18      	ldr	r3, [pc, #96]	@ (800d400 <check_cli_command+0x154>)
 800d3a0:	0018      	movs	r0, r3
 800d3a2:	f019 f889 	bl	80264b8 <puts>
  break;
 800d3a6:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d3a8:	4b02      	ldr	r3, [pc, #8]	@ (800d3b4 <check_cli_command+0x108>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	701a      	strb	r2, [r3, #0]
}
 800d3ae:	46c0      	nop			@ (mov r8, r8)
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20001100 	.word	0x20001100
 800d3b8:	0802e6b0 	.word	0x0802e6b0
 800d3bc:	0802ca60 	.word	0x0802ca60
 800d3c0:	0802ca7c 	.word	0x0802ca7c
 800d3c4:	0802ca98 	.word	0x0802ca98
 800d3c8:	0802cab8 	.word	0x0802cab8
 800d3cc:	200011cc 	.word	0x200011cc
 800d3d0:	200010f7 	.word	0x200010f7
 800d3d4:	0802cad4 	.word	0x0802cad4
 800d3d8:	0802cb04 	.word	0x0802cb04
 800d3dc:	0802cb20 	.word	0x0802cb20
 800d3e0:	0802cb40 	.word	0x0802cb40
 800d3e4:	0802cb54 	.word	0x0802cb54
 800d3e8:	0802cb78 	.word	0x0802cb78
 800d3ec:	0802cb98 	.word	0x0802cb98
 800d3f0:	0802cbbc 	.word	0x0802cbbc
 800d3f4:	0802cbdc 	.word	0x0802cbdc
 800d3f8:	0802cbfc 	.word	0x0802cbfc
 800d3fc:	0802cc1c 	.word	0x0802cc1c
 800d400:	0802cc34 	.word	0x0802cc34

0800d404 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d40c:	4907      	ldr	r1, [pc, #28]	@ (800d42c <HAL_UART_RxCpltCallback+0x28>)
 800d40e:	4b08      	ldr	r3, [pc, #32]	@ (800d430 <HAL_UART_RxCpltCallback+0x2c>)
 800d410:	2201      	movs	r2, #1
 800d412:	0018      	movs	r0, r3
 800d414:	f010 f904 	bl	801d620 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d418:	4904      	ldr	r1, [pc, #16]	@ (800d42c <HAL_UART_RxCpltCallback+0x28>)
 800d41a:	4b05      	ldr	r3, [pc, #20]	@ (800d430 <HAL_UART_RxCpltCallback+0x2c>)
 800d41c:	2201      	movs	r2, #1
 800d41e:	0018      	movs	r0, r3
 800d420:	f010 f8fe 	bl	801d620 <HAL_UART_Receive_IT>
}
 800d424:	46c0      	nop			@ (mov r8, r8)
 800d426:	46bd      	mov	sp, r7
 800d428:	b002      	add	sp, #8
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20001100 	.word	0x20001100
 800d430:	200022e4 	.word	0x200022e4

0800d434 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	0002      	movs	r2, r0
 800d43c:	1dbb      	adds	r3, r7, #6
 800d43e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d440:	1dbb      	adds	r3, r7, #6
 800d442:	881a      	ldrh	r2, [r3, #0]
 800d444:	2380      	movs	r3, #128	@ 0x80
 800d446:	021b      	lsls	r3, r3, #8
 800d448:	429a      	cmp	r2, r3
 800d44a:	d10b      	bne.n	800d464 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d44c:	f005 ffa0 	bl	8013390 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d450:	f000 f860 	bl	800d514 <GetPMSensorPresence>
 800d454:	1e03      	subs	r3, r0, #0
 800d456:	d005      	beq.n	800d464 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d458:	4b04      	ldr	r3, [pc, #16]	@ (800d46c <HAL_GPIO_EXTI_Callback+0x38>)
 800d45a:	2201      	movs	r2, #1
 800d45c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d45e:	2000      	movs	r0, #0
 800d460:	f001 f8f6 	bl	800e650 <sen5x_Set_sen5x_state>
    }
  }
}
 800d464:	46c0      	nop			@ (mov r8, r8)
 800d466:	46bd      	mov	sp, r7
 800d468:	b002      	add	sp, #8
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20001118 	.word	0x20001118

0800d470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d474:	f005 fb76 	bl	8012b64 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d478:	b672      	cpsid	i
}
 800d47a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d47c:	4a05      	ldr	r2, [pc, #20]	@ (800d494 <Error_Handler+0x24>)
 800d47e:	4b06      	ldr	r3, [pc, #24]	@ (800d498 <Error_Handler+0x28>)
 800d480:	0019      	movs	r1, r3
 800d482:	2001      	movs	r0, #1
 800d484:	f006 fd06 	bl	8013e94 <CreateLine>

    HAL_Delay(2500);
 800d488:	4b04      	ldr	r3, [pc, #16]	@ (800d49c <Error_Handler+0x2c>)
 800d48a:	0018      	movs	r0, r3
 800d48c:	f007 fa8c 	bl	80149a8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d490:	46c0      	nop			@ (mov r8, r8)
 800d492:	e7f3      	b.n	800d47c <Error_Handler+0xc>
 800d494:	0802cc50 	.word	0x0802cc50
 800d498:	0802c934 	.word	0x0802c934
 800d49c:	000009c4 	.word	0x000009c4

0800d4a0 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d4a4:	4b19      	ldr	r3, [pc, #100]	@ (800d50c <testInit+0x6c>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d4aa:	4b18      	ldr	r3, [pc, #96]	@ (800d50c <testInit+0x6c>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d4b0:	4b16      	ldr	r3, [pc, #88]	@ (800d50c <testInit+0x6c>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d4b6:	4b15      	ldr	r3, [pc, #84]	@ (800d50c <testInit+0x6c>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d4bc:	4b13      	ldr	r3, [pc, #76]	@ (800d50c <testInit+0x6c>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d4c2:	4b12      	ldr	r3, [pc, #72]	@ (800d50c <testInit+0x6c>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d4c8:	4b10      	ldr	r3, [pc, #64]	@ (800d50c <testInit+0x6c>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d50c <testInit+0x6c>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d50c <testInit+0x6c>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d4da:	4b0d      	ldr	r3, [pc, #52]	@ (800d510 <testInit+0x70>)
 800d4dc:	2201      	movs	r2, #1
 800d4de:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d510 <testInit+0x70>)
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800d510 <testInit+0x70>)
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d4ec:	4b08      	ldr	r3, [pc, #32]	@ (800d510 <testInit+0x70>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d4f2:	4b07      	ldr	r3, [pc, #28]	@ (800d510 <testInit+0x70>)
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d4f8:	4b05      	ldr	r3, [pc, #20]	@ (800d510 <testInit+0x70>)
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d4fe:	4b04      	ldr	r3, [pc, #16]	@ (800d510 <testInit+0x70>)
 800d500:	2201      	movs	r2, #1
 800d502:	719a      	strb	r2, [r3, #6]
}
 800d504:	46c0      	nop			@ (mov r8, r8)
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	46c0      	nop			@ (mov r8, r8)
 800d50c:	20001120 	.word	0x20001120
 800d510:	20001118 	.word	0x20001118

0800d514 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d514:	b580      	push	{r7, lr}
 800d516:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d518:	4b02      	ldr	r3, [pc, #8]	@ (800d524 <GetPMSensorPresence+0x10>)
 800d51a:	795b      	ldrb	r3, [r3, #5]
}
 800d51c:	0018      	movs	r0, r3
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	46c0      	nop			@ (mov r8, r8)
 800d524:	20001120 	.word	0x20001120

0800d528 <DisablePMSensor>:

void DisablePMSensor() {
 800d528:	b580      	push	{r7, lr}
 800d52a:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d52c:	4b02      	ldr	r3, [pc, #8]	@ (800d538 <DisablePMSensor+0x10>)
 800d52e:	2200      	movs	r2, #0
 800d530:	715a      	strb	r2, [r3, #5]
}
 800d532:	46c0      	nop			@ (mov r8, r8)
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	20001120 	.word	0x20001120

0800d53c <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d540:	4b02      	ldr	r3, [pc, #8]	@ (800d54c <IsAHT20SensorPresent+0x10>)
 800d542:	789b      	ldrb	r3, [r3, #2]
}
 800d544:	0018      	movs	r0, r3
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	46c0      	nop			@ (mov r8, r8)
 800d54c:	20001120 	.word	0x20001120

0800d550 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d554:	4b02      	ldr	r3, [pc, #8]	@ (800d560 <IsBMP280SensorPresent+0x10>)
 800d556:	791b      	ldrb	r3, [r3, #4]
}
 800d558:	0018      	movs	r0, r3
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	46c0      	nop			@ (mov r8, r8)
 800d560:	20001120 	.word	0x20001120

0800d564 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d564:	b580      	push	{r7, lr}
 800d566:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d568:	4b02      	ldr	r3, [pc, #8]	@ (800d574 <IsENS160SensorPresent+0x10>)
 800d56a:	78db      	ldrb	r3, [r3, #3]
}
 800d56c:	0018      	movs	r0, r3
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	46c0      	nop			@ (mov r8, r8)
 800d574:	20001120 	.word	0x20001120

0800d578 <IsSGPPresent>:

bool IsSGPPresent() {
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d57c:	4b02      	ldr	r3, [pc, #8]	@ (800d588 <IsSGPPresent+0x10>)
 800d57e:	785b      	ldrb	r3, [r3, #1]
}
 800d580:	0018      	movs	r0, r3
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	46c0      	nop			@ (mov r8, r8)
 800d588:	20001120 	.word	0x20001120

0800d58c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	0002      	movs	r2, r0
 800d594:	1dfb      	adds	r3, r7, #7
 800d596:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d598:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c8 <SetVOCSensorDIS_ENA+0x3c>)
 800d59a:	1dfa      	adds	r2, r7, #7
 800d59c:	7812      	ldrb	r2, [r2, #0]
 800d59e:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5cc <SetVOCSensorDIS_ENA+0x40>)
 800d5a2:	1dfa      	adds	r2, r7, #7
 800d5a4:	7812      	ldrb	r2, [r2, #0]
 800d5a6:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d5a8:	1dfb      	adds	r3, r7, #7
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <SetVOCSensorDIS_ENA+0x28>
 800d5b0:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <SetVOCSensorDIS_ENA+0x44>)
 800d5b2:	e000      	b.n	800d5b6 <SetVOCSensorDIS_ENA+0x2a>
 800d5b4:	4b07      	ldr	r3, [pc, #28]	@ (800d5d4 <SetVOCSensorDIS_ENA+0x48>)
 800d5b6:	4a08      	ldr	r2, [pc, #32]	@ (800d5d8 <SetVOCSensorDIS_ENA+0x4c>)
 800d5b8:	4908      	ldr	r1, [pc, #32]	@ (800d5dc <SetVOCSensorDIS_ENA+0x50>)
 800d5ba:	2003      	movs	r0, #3
 800d5bc:	f006 fc6a 	bl	8013e94 <CreateLine>
}
 800d5c0:	46c0      	nop			@ (mov r8, r8)
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	b002      	add	sp, #8
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20001120 	.word	0x20001120
 800d5cc:	20001118 	.word	0x20001118
 800d5d0:	0802cc7c 	.word	0x0802cc7c
 800d5d4:	0802cc84 	.word	0x0802cc84
 800d5d8:	0802cc90 	.word	0x0802cc90
 800d5dc:	0802cca4 	.word	0x0802cca4

0800d5e0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d5e4:	4b02      	ldr	r3, [pc, #8]	@ (800d5f0 <IsPMSensorEnabled+0x10>)
 800d5e6:	789b      	ldrb	r3, [r3, #2]
}
 800d5e8:	0018      	movs	r0, r3
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	46c0      	nop			@ (mov r8, r8)
 800d5f0:	20001118 	.word	0x20001118

0800d5f4 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	0002      	movs	r2, r0
 800d5fc:	1dfb      	adds	r3, r7, #7
 800d5fe:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d600:	4b05      	ldr	r3, [pc, #20]	@ (800d618 <SetVOCSensorStatus+0x24>)
 800d602:	7a1b      	ldrb	r3, [r3, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d003      	beq.n	800d610 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d608:	4b04      	ldr	r3, [pc, #16]	@ (800d61c <SetVOCSensorStatus+0x28>)
 800d60a:	1dfa      	adds	r2, r7, #7
 800d60c:	7812      	ldrb	r2, [r2, #0]
 800d60e:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d610:	46c0      	nop			@ (mov r8, r8)
 800d612:	46bd      	mov	sp, r7
 800d614:	b002      	add	sp, #8
 800d616:	bd80      	pop	{r7, pc}
 800d618:	20001120 	.word	0x20001120
 800d61c:	20001118 	.word	0x20001118

0800d620 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	0002      	movs	r2, r0
 800d628:	1dfb      	adds	r3, r7, #7
 800d62a:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d62c:	4b03      	ldr	r3, [pc, #12]	@ (800d63c <SetPMSensorStatus+0x1c>)
 800d62e:	1dfa      	adds	r2, r7, #7
 800d630:	7812      	ldrb	r2, [r2, #0]
 800d632:	709a      	strb	r2, [r3, #2]
}
 800d634:	46c0      	nop			@ (mov r8, r8)
 800d636:	46bd      	mov	sp, r7
 800d638:	b002      	add	sp, #8
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20001118 	.word	0x20001118

0800d640 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d644:	4b02      	ldr	r3, [pc, #8]	@ (800d650 <SetESPMeasurementDone+0x10>)
 800d646:	2201      	movs	r2, #1
 800d648:	71da      	strb	r2, [r3, #7]
}
 800d64a:	46c0      	nop			@ (mov r8, r8)
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	20001120 	.word	0x20001120

0800d654 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]
  testInit();
 800d662:	f7ff ff1d 	bl	800d4a0 <testInit>
  I2CSensors_Init(sensorI2C);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	0018      	movs	r0, r3
 800d66a:	f7fa fd9d 	bl	80081a8 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d66e:	f006 ff1d 	bl	80144ac <HIDS_DeviceConnected>
 800d672:	0003      	movs	r3, r0
 800d674:	001a      	movs	r2, r3
 800d676:	2301      	movs	r3, #1
 800d678:	4053      	eors	r3, r2
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00c      	beq.n	800d69a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d680:	4abf      	ldr	r2, [pc, #764]	@ (800d980 <Device_Init+0x32c>)
 800d682:	4bc0      	ldr	r3, [pc, #768]	@ (800d984 <Device_Init+0x330>)
 800d684:	0019      	movs	r1, r3
 800d686:	2001      	movs	r0, #1
 800d688:	f006 fc04 	bl	8013e94 <CreateLine>
     SensorProbe.HT_Present = false;
 800d68c:	4bbe      	ldr	r3, [pc, #760]	@ (800d988 <Device_Init+0x334>)
 800d68e:	2200      	movs	r2, #0
 800d690:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d692:	4bbe      	ldr	r3, [pc, #760]	@ (800d98c <Device_Init+0x338>)
 800d694:	2200      	movs	r2, #0
 800d696:	701a      	strb	r2, [r3, #0]
 800d698:	e008      	b.n	800d6ac <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d69a:	4bbb      	ldr	r3, [pc, #748]	@ (800d988 <Device_Init+0x334>)
 800d69c:	2201      	movs	r2, #1
 800d69e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d6a0:	4abb      	ldr	r2, [pc, #748]	@ (800d990 <Device_Init+0x33c>)
 800d6a2:	4bbc      	ldr	r3, [pc, #752]	@ (800d994 <Device_Init+0x340>)
 800d6a4:	0019      	movs	r1, r3
 800d6a6:	2003      	movs	r0, #3
 800d6a8:	f006 fbf4 	bl	8013e94 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d6ac:	f7fe f95a 	bl	800b964 <BMP280_DeviceConnected>
 800d6b0:	0003      	movs	r3, r0
 800d6b2:	001a      	movs	r2, r3
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	4053      	eors	r3, r2
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00c      	beq.n	800d6d8 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d6be:	4ab6      	ldr	r2, [pc, #728]	@ (800d998 <Device_Init+0x344>)
 800d6c0:	4bb0      	ldr	r3, [pc, #704]	@ (800d984 <Device_Init+0x330>)
 800d6c2:	0019      	movs	r1, r3
 800d6c4:	2001      	movs	r0, #1
 800d6c6:	f006 fbe5 	bl	8013e94 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d6ca:	4baf      	ldr	r3, [pc, #700]	@ (800d988 <Device_Init+0x334>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d6d0:	4bae      	ldr	r3, [pc, #696]	@ (800d98c <Device_Init+0x338>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	715a      	strb	r2, [r3, #5]
 800d6d6:	e008      	b.n	800d6ea <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d6d8:	4bab      	ldr	r3, [pc, #684]	@ (800d988 <Device_Init+0x334>)
 800d6da:	2201      	movs	r2, #1
 800d6dc:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d6de:	4aaf      	ldr	r2, [pc, #700]	@ (800d99c <Device_Init+0x348>)
 800d6e0:	4bac      	ldr	r3, [pc, #688]	@ (800d994 <Device_Init+0x340>)
 800d6e2:	0019      	movs	r1, r3
 800d6e4:	2003      	movs	r0, #3
 800d6e6:	f006 fbd5 	bl	8013e94 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d6ea:	f003 fd99 	bl	8011220 <SGP_DeviceConnected>
 800d6ee:	0003      	movs	r3, r0
 800d6f0:	001a      	movs	r2, r3
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	4053      	eors	r3, r2
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00c      	beq.n	800d716 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d6fc:	4ba2      	ldr	r3, [pc, #648]	@ (800d988 <Device_Init+0x334>)
 800d6fe:	2200      	movs	r2, #0
 800d700:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d702:	4aa7      	ldr	r2, [pc, #668]	@ (800d9a0 <Device_Init+0x34c>)
 800d704:	4b9f      	ldr	r3, [pc, #636]	@ (800d984 <Device_Init+0x330>)
 800d706:	0019      	movs	r1, r3
 800d708:	2001      	movs	r0, #1
 800d70a:	f006 fbc3 	bl	8013e94 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d70e:	4b9f      	ldr	r3, [pc, #636]	@ (800d98c <Device_Init+0x338>)
 800d710:	2200      	movs	r2, #0
 800d712:	705a      	strb	r2, [r3, #1]
 800d714:	e00b      	b.n	800d72e <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d716:	4b9c      	ldr	r3, [pc, #624]	@ (800d988 <Device_Init+0x334>)
 800d718:	2201      	movs	r2, #1
 800d71a:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d71c:	4b9a      	ldr	r3, [pc, #616]	@ (800d988 <Device_Init+0x334>)
 800d71e:	2201      	movs	r2, #1
 800d720:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d722:	4aa0      	ldr	r2, [pc, #640]	@ (800d9a4 <Device_Init+0x350>)
 800d724:	4b9b      	ldr	r3, [pc, #620]	@ (800d994 <Device_Init+0x340>)
 800d726:	0019      	movs	r1, r3
 800d728:	2003      	movs	r0, #3
 800d72a:	f006 fbb3 	bl	8013e94 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d72e:	f7f6 fb9b 	bl	8003e68 <ENS_DeviceConnected>
 800d732:	0003      	movs	r3, r0
 800d734:	001a      	movs	r2, r3
 800d736:	2301      	movs	r3, #1
 800d738:	4053      	eors	r3, r2
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00c      	beq.n	800d75a <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d740:	4b91      	ldr	r3, [pc, #580]	@ (800d988 <Device_Init+0x334>)
 800d742:	2200      	movs	r2, #0
 800d744:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d746:	4a98      	ldr	r2, [pc, #608]	@ (800d9a8 <Device_Init+0x354>)
 800d748:	4b8e      	ldr	r3, [pc, #568]	@ (800d984 <Device_Init+0x330>)
 800d74a:	0019      	movs	r1, r3
 800d74c:	2001      	movs	r0, #1
 800d74e:	f006 fba1 	bl	8013e94 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d752:	4b8e      	ldr	r3, [pc, #568]	@ (800d98c <Device_Init+0x338>)
 800d754:	2200      	movs	r2, #0
 800d756:	719a      	strb	r2, [r3, #6]
 800d758:	e008      	b.n	800d76c <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d75a:	4b8b      	ldr	r3, [pc, #556]	@ (800d988 <Device_Init+0x334>)
 800d75c:	2201      	movs	r2, #1
 800d75e:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d760:	4a92      	ldr	r2, [pc, #584]	@ (800d9ac <Device_Init+0x358>)
 800d762:	4b8c      	ldr	r3, [pc, #560]	@ (800d994 <Device_Init+0x340>)
 800d764:	0019      	movs	r1, r3
 800d766:	2003      	movs	r0, #3
 800d768:	f006 fb94 	bl	8013e94 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d76c:	f7fd fd38 	bl	800b1e0 <AHT20_DeviceConnected>
 800d770:	0003      	movs	r3, r0
 800d772:	001a      	movs	r2, r3
 800d774:	2301      	movs	r3, #1
 800d776:	4053      	eors	r3, r2
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00c      	beq.n	800d798 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d77e:	4a8c      	ldr	r2, [pc, #560]	@ (800d9b0 <Device_Init+0x35c>)
 800d780:	4b80      	ldr	r3, [pc, #512]	@ (800d984 <Device_Init+0x330>)
 800d782:	0019      	movs	r1, r3
 800d784:	2001      	movs	r0, #1
 800d786:	f006 fb85 	bl	8013e94 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d78a:	4b7f      	ldr	r3, [pc, #508]	@ (800d988 <Device_Init+0x334>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d790:	4b7e      	ldr	r3, [pc, #504]	@ (800d98c <Device_Init+0x338>)
 800d792:	2200      	movs	r2, #0
 800d794:	711a      	strb	r2, [r3, #4]
 800d796:	e008      	b.n	800d7aa <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d798:	4b7b      	ldr	r3, [pc, #492]	@ (800d988 <Device_Init+0x334>)
 800d79a:	2201      	movs	r2, #1
 800d79c:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d79e:	4a85      	ldr	r2, [pc, #532]	@ (800d9b4 <Device_Init+0x360>)
 800d7a0:	4b7c      	ldr	r3, [pc, #496]	@ (800d994 <Device_Init+0x340>)
 800d7a2:	0019      	movs	r1, r3
 800d7a4:	2003      	movs	r0, #3
 800d7a6:	f006 fb75 	bl	8013e94 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d7aa:	4b77      	ldr	r3, [pc, #476]	@ (800d988 <Device_Init+0x334>)
 800d7ac:	785b      	ldrb	r3, [r3, #1]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d009      	beq.n	800d7c6 <Device_Init+0x172>
 800d7b2:	4b75      	ldr	r3, [pc, #468]	@ (800d988 <Device_Init+0x334>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d005      	beq.n	800d7c6 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2101      	movs	r1, #1
 800d7be:	2000      	movs	r0, #0
 800d7c0:	f005 f874 	bl	80128ac <SetDBLED>
 800d7c4:	e018      	b.n	800d7f8 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	2001      	movs	r0, #1
 800d7cc:	f005 f86e 	bl	80128ac <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d7d0:	4b79      	ldr	r3, [pc, #484]	@ (800d9b8 <Device_Init+0x364>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	0018      	movs	r0, r3
 800d7d8:	f008 fb43 	bl	8015e62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d7dc:	2380      	movs	r3, #128	@ 0x80
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	4875      	ldr	r0, [pc, #468]	@ (800d9b8 <Device_Init+0x364>)
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	0019      	movs	r1, r3
 800d7e6:	f008 fb3c 	bl	8015e62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d7ea:	2380      	movs	r3, #128	@ 0x80
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4872      	ldr	r0, [pc, #456]	@ (800d9b8 <Device_Init+0x364>)
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	0019      	movs	r1, r3
 800d7f4:	f008 fb35 	bl	8015e62 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d7f8:	4b64      	ldr	r3, [pc, #400]	@ (800d98c <Device_Init+0x338>)
 800d7fa:	78db      	ldrb	r3, [r3, #3]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d028      	beq.n	800d852 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d800:	4a6e      	ldr	r2, [pc, #440]	@ (800d9bc <Device_Init+0x368>)
 800d802:	4b6f      	ldr	r3, [pc, #444]	@ (800d9c0 <Device_Init+0x36c>)
 800d804:	0019      	movs	r1, r3
 800d806:	2002      	movs	r0, #2
 800d808:	f006 fb44 	bl	8013e94 <CreateLine>
    if (!enableMicrophone(true)) {
 800d80c:	2001      	movs	r0, #1
 800d80e:	f004 f937 	bl	8011a80 <enableMicrophone>
 800d812:	0003      	movs	r3, r0
 800d814:	001a      	movs	r2, r3
 800d816:	2301      	movs	r3, #1
 800d818:	4053      	eors	r3, r2
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00c      	beq.n	800d83a <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d820:	4a68      	ldr	r2, [pc, #416]	@ (800d9c4 <Device_Init+0x370>)
 800d822:	4b58      	ldr	r3, [pc, #352]	@ (800d984 <Device_Init+0x330>)
 800d824:	0019      	movs	r1, r3
 800d826:	2001      	movs	r0, #1
 800d828:	f006 fb34 	bl	8013e94 <CreateLine>
      SensorProbe.MIC_Present = false;
 800d82c:	4b56      	ldr	r3, [pc, #344]	@ (800d988 <Device_Init+0x334>)
 800d82e:	2200      	movs	r2, #0
 800d830:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d832:	4b56      	ldr	r3, [pc, #344]	@ (800d98c <Device_Init+0x338>)
 800d834:	2200      	movs	r2, #0
 800d836:	70da      	strb	r2, [r3, #3]
 800d838:	e00b      	b.n	800d852 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d83a:	4b53      	ldr	r3, [pc, #332]	@ (800d988 <Device_Init+0x334>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d840:	4b52      	ldr	r3, [pc, #328]	@ (800d98c <Device_Init+0x338>)
 800d842:	2201      	movs	r2, #1
 800d844:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d846:	4a60      	ldr	r2, [pc, #384]	@ (800d9c8 <Device_Init+0x374>)
 800d848:	4b52      	ldr	r3, [pc, #328]	@ (800d994 <Device_Init+0x340>)
 800d84a:	0019      	movs	r1, r3
 800d84c:	2003      	movs	r0, #3
 800d84e:	f006 fb21 	bl	8013e94 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d852:	f000 fff1 	bl	800e838 <probe_sen5x>
 800d856:	1e03      	subs	r3, r0, #0
 800d858:	d122      	bne.n	800d8a0 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d85a:	4a5c      	ldr	r2, [pc, #368]	@ (800d9cc <Device_Init+0x378>)
 800d85c:	4b4d      	ldr	r3, [pc, #308]	@ (800d994 <Device_Init+0x340>)
 800d85e:	0019      	movs	r1, r3
 800d860:	2003      	movs	r0, #3
 800d862:	f006 fb17 	bl	8013e94 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d866:	4b48      	ldr	r3, [pc, #288]	@ (800d988 <Device_Init+0x334>)
 800d868:	2201      	movs	r2, #1
 800d86a:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d86c:	4b47      	ldr	r3, [pc, #284]	@ (800d98c <Device_Init+0x338>)
 800d86e:	2201      	movs	r2, #1
 800d870:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d872:	4b57      	ldr	r3, [pc, #348]	@ (800d9d0 <Device_Init+0x37c>)
 800d874:	791b      	ldrb	r3, [r3, #4]
 800d876:	2b34      	cmp	r3, #52	@ 0x34
 800d878:	d003      	beq.n	800d882 <Device_Init+0x22e>
 800d87a:	4b55      	ldr	r3, [pc, #340]	@ (800d9d0 <Device_Init+0x37c>)
 800d87c:	791b      	ldrb	r3, [r3, #4]
 800d87e:	2b35      	cmp	r3, #53	@ 0x35
 800d880:	d11c      	bne.n	800d8bc <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d882:	4a54      	ldr	r2, [pc, #336]	@ (800d9d4 <Device_Init+0x380>)
 800d884:	4b4e      	ldr	r3, [pc, #312]	@ (800d9c0 <Device_Init+0x36c>)
 800d886:	0019      	movs	r1, r3
 800d888:	2002      	movs	r0, #2
 800d88a:	f006 fb03 	bl	8013e94 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d88e:	4b3f      	ldr	r3, [pc, #252]	@ (800d98c <Device_Init+0x338>)
 800d890:	2200      	movs	r2, #0
 800d892:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d894:	4b3c      	ldr	r3, [pc, #240]	@ (800d988 <Device_Init+0x334>)
 800d896:	2200      	movs	r2, #0
 800d898:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d89a:	f003 fea7 	bl	80115ec <SGP_SoftReset>
 800d89e:	e00d      	b.n	800d8bc <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d8a0:	f000 ff94 	bl	800e7cc <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d8a4:	4a4c      	ldr	r2, [pc, #304]	@ (800d9d8 <Device_Init+0x384>)
 800d8a6:	4b3b      	ldr	r3, [pc, #236]	@ (800d994 <Device_Init+0x340>)
 800d8a8:	0019      	movs	r1, r3
 800d8aa:	2003      	movs	r0, #3
 800d8ac:	f006 faf2 	bl	8013e94 <CreateLine>
    SensorProbe.PM_Present = false;
 800d8b0:	4b35      	ldr	r3, [pc, #212]	@ (800d988 <Device_Init+0x334>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d8b6:	4b35      	ldr	r3, [pc, #212]	@ (800d98c <Device_Init+0x338>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d8bc:	4b32      	ldr	r3, [pc, #200]	@ (800d988 <Device_Init+0x334>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <Device_Init+0x274>
 800d8c4:	4b45      	ldr	r3, [pc, #276]	@ (800d9dc <Device_Init+0x388>)
 800d8c6:	e000      	b.n	800d8ca <Device_Init+0x276>
 800d8c8:	4b45      	ldr	r3, [pc, #276]	@ (800d9e0 <Device_Init+0x38c>)
 800d8ca:	4a46      	ldr	r2, [pc, #280]	@ (800d9e4 <Device_Init+0x390>)
 800d8cc:	493c      	ldr	r1, [pc, #240]	@ (800d9c0 <Device_Init+0x36c>)
 800d8ce:	2002      	movs	r0, #2
 800d8d0:	f006 fae0 	bl	8013e94 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d8d4:	4b2c      	ldr	r3, [pc, #176]	@ (800d988 <Device_Init+0x334>)
 800d8d6:	785b      	ldrb	r3, [r3, #1]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <Device_Init+0x28c>
 800d8dc:	4b3f      	ldr	r3, [pc, #252]	@ (800d9dc <Device_Init+0x388>)
 800d8de:	e000      	b.n	800d8e2 <Device_Init+0x28e>
 800d8e0:	4b3f      	ldr	r3, [pc, #252]	@ (800d9e0 <Device_Init+0x38c>)
 800d8e2:	4a41      	ldr	r2, [pc, #260]	@ (800d9e8 <Device_Init+0x394>)
 800d8e4:	4936      	ldr	r1, [pc, #216]	@ (800d9c0 <Device_Init+0x36c>)
 800d8e6:	2002      	movs	r0, #2
 800d8e8:	f006 fad4 	bl	8013e94 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d8ec:	4b26      	ldr	r3, [pc, #152]	@ (800d988 <Device_Init+0x334>)
 800d8ee:	789b      	ldrb	r3, [r3, #2]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <Device_Init+0x2a4>
 800d8f4:	4b39      	ldr	r3, [pc, #228]	@ (800d9dc <Device_Init+0x388>)
 800d8f6:	e000      	b.n	800d8fa <Device_Init+0x2a6>
 800d8f8:	4b39      	ldr	r3, [pc, #228]	@ (800d9e0 <Device_Init+0x38c>)
 800d8fa:	4a3c      	ldr	r2, [pc, #240]	@ (800d9ec <Device_Init+0x398>)
 800d8fc:	4930      	ldr	r1, [pc, #192]	@ (800d9c0 <Device_Init+0x36c>)
 800d8fe:	2002      	movs	r0, #2
 800d900:	f006 fac8 	bl	8013e94 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d904:	4b20      	ldr	r3, [pc, #128]	@ (800d988 <Device_Init+0x334>)
 800d906:	791b      	ldrb	r3, [r3, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d001      	beq.n	800d910 <Device_Init+0x2bc>
 800d90c:	4b33      	ldr	r3, [pc, #204]	@ (800d9dc <Device_Init+0x388>)
 800d90e:	e000      	b.n	800d912 <Device_Init+0x2be>
 800d910:	4b33      	ldr	r3, [pc, #204]	@ (800d9e0 <Device_Init+0x38c>)
 800d912:	4a37      	ldr	r2, [pc, #220]	@ (800d9f0 <Device_Init+0x39c>)
 800d914:	492a      	ldr	r1, [pc, #168]	@ (800d9c0 <Device_Init+0x36c>)
 800d916:	2002      	movs	r0, #2
 800d918:	f006 fabc 	bl	8013e94 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d91c:	4b1a      	ldr	r3, [pc, #104]	@ (800d988 <Device_Init+0x334>)
 800d91e:	78db      	ldrb	r3, [r3, #3]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <Device_Init+0x2d4>
 800d924:	4b2d      	ldr	r3, [pc, #180]	@ (800d9dc <Device_Init+0x388>)
 800d926:	e000      	b.n	800d92a <Device_Init+0x2d6>
 800d928:	4b2d      	ldr	r3, [pc, #180]	@ (800d9e0 <Device_Init+0x38c>)
 800d92a:	4a32      	ldr	r2, [pc, #200]	@ (800d9f4 <Device_Init+0x3a0>)
 800d92c:	4924      	ldr	r1, [pc, #144]	@ (800d9c0 <Device_Init+0x36c>)
 800d92e:	2002      	movs	r0, #2
 800d930:	f006 fab0 	bl	8013e94 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d934:	4b14      	ldr	r3, [pc, #80]	@ (800d988 <Device_Init+0x334>)
 800d936:	795b      	ldrb	r3, [r3, #5]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <Device_Init+0x2ec>
 800d93c:	4b27      	ldr	r3, [pc, #156]	@ (800d9dc <Device_Init+0x388>)
 800d93e:	e000      	b.n	800d942 <Device_Init+0x2ee>
 800d940:	4b27      	ldr	r3, [pc, #156]	@ (800d9e0 <Device_Init+0x38c>)
 800d942:	4a2d      	ldr	r2, [pc, #180]	@ (800d9f8 <Device_Init+0x3a4>)
 800d944:	491e      	ldr	r1, [pc, #120]	@ (800d9c0 <Device_Init+0x36c>)
 800d946:	2002      	movs	r0, #2
 800d948:	f006 faa4 	bl	8013e94 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d94c:	4b0e      	ldr	r3, [pc, #56]	@ (800d988 <Device_Init+0x334>)
 800d94e:	799b      	ldrb	r3, [r3, #6]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <Device_Init+0x304>
 800d954:	4b21      	ldr	r3, [pc, #132]	@ (800d9dc <Device_Init+0x388>)
 800d956:	e000      	b.n	800d95a <Device_Init+0x306>
 800d958:	4b21      	ldr	r3, [pc, #132]	@ (800d9e0 <Device_Init+0x38c>)
 800d95a:	4a28      	ldr	r2, [pc, #160]	@ (800d9fc <Device_Init+0x3a8>)
 800d95c:	4918      	ldr	r1, [pc, #96]	@ (800d9c0 <Device_Init+0x36c>)
 800d95e:	2002      	movs	r0, #2
 800d960:	f006 fa98 	bl	8013e94 <CreateLine>
  Debug("Sensors initialized, probing ESP.");
 800d964:	4a26      	ldr	r2, [pc, #152]	@ (800da00 <Device_Init+0x3ac>)
 800d966:	4b0b      	ldr	r3, [pc, #44]	@ (800d994 <Device_Init+0x340>)
 800d968:	0019      	movs	r1, r3
 800d96a:	2003      	movs	r0, #3
 800d96c:	f006 fa92 	bl	8013e94 <CreateLine>
  ESP_Init(espUart);
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	0018      	movs	r0, r3
 800d974:	f7f7 fa62 	bl	8004e3c <ESP_Init>
}
 800d978:	46c0      	nop			@ (mov r8, r8)
 800d97a:	46bd      	mov	sp, r7
 800d97c:	b004      	add	sp, #16
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	0802cca8 	.word	0x0802cca8
 800d984:	0802ccd8 	.word	0x0802ccd8
 800d988:	20001120 	.word	0x20001120
 800d98c:	20001118 	.word	0x20001118
 800d990:	0802ccdc 	.word	0x0802ccdc
 800d994:	0802cca4 	.word	0x0802cca4
 800d998:	0802cd08 	.word	0x0802cd08
 800d99c:	0802cd3c 	.word	0x0802cd3c
 800d9a0:	0802cd6c 	.word	0x0802cd6c
 800d9a4:	0802cd88 	.word	0x0802cd88
 800d9a8:	0802cda0 	.word	0x0802cda0
 800d9ac:	0802cdbc 	.word	0x0802cdbc
 800d9b0:	0802cdd4 	.word	0x0802cdd4
 800d9b4:	0802ce08 	.word	0x0802ce08
 800d9b8:	50000400 	.word	0x50000400
 800d9bc:	0802ce3c 	.word	0x0802ce3c
 800d9c0:	0802ce60 	.word	0x0802ce60
 800d9c4:	0802ce64 	.word	0x0802ce64
 800d9c8:	0802ce90 	.word	0x0802ce90
 800d9cc:	0802cebc 	.word	0x0802cebc
 800d9d0:	200011c0 	.word	0x200011c0
 800d9d4:	0802ced4 	.word	0x0802ced4
 800d9d8:	0802cf24 	.word	0x0802cf24
 800d9dc:	0802cf48 	.word	0x0802cf48
 800d9e0:	0802cf4c 	.word	0x0802cf4c
 800d9e4:	0802cf50 	.word	0x0802cf50
 800d9e8:	0802cf6c 	.word	0x0802cf6c
 800d9ec:	0802cf88 	.word	0x0802cf88
 800d9f0:	0802cfa8 	.word	0x0802cfa8
 800d9f4:	0802cfc8 	.word	0x0802cfc8
 800d9f8:	0802cfe8 	.word	0x0802cfe8
 800d9fc:	0802d004 	.word	0x0802d004
 800da00:	0802d020 	.word	0x0802d020

0800da04 <Device_Test>:

void Device_Test(){
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800da08:	4b34      	ldr	r3, [pc, #208]	@ (800dadc <Device_Test+0xd8>)
 800da0a:	799b      	ldrb	r3, [r3, #6]
 800da0c:	2201      	movs	r2, #1
 800da0e:	4053      	eors	r3, r2
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d027      	beq.n	800da66 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800da16:	f000 fc41 	bl	800e29c <MIC_TestMeasurementDone>
 800da1a:	1e03      	subs	r3, r0, #0
 800da1c:	d011      	beq.n	800da42 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800da1e:	4b2f      	ldr	r3, [pc, #188]	@ (800dadc <Device_Test+0xd8>)
 800da20:	2201      	movs	r2, #1
 800da22:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800da24:	4b2e      	ldr	r3, [pc, #184]	@ (800dae0 <Device_Test+0xdc>)
 800da26:	2201      	movs	r2, #1
 800da28:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800da2a:	f004 fec9 	bl	80127c0 <Calculate_LED_ON>
 800da2e:	0003      	movs	r3, r0
 800da30:	0019      	movs	r1, r3
 800da32:	23fa      	movs	r3, #250	@ 0xfa
 800da34:	011a      	lsls	r2, r3, #4
 800da36:	23fa      	movs	r3, #250	@ 0xfa
 800da38:	011b      	lsls	r3, r3, #4
 800da3a:	0018      	movs	r0, r3
 800da3c:	f004 ff08 	bl	8012850 <SetStatusLED>
 800da40:	e011      	b.n	800da66 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800da42:	f003 fff9 	bl	8011a38 <micSettlingComplete>
 800da46:	1e03      	subs	r3, r0, #0
 800da48:	d00d      	beq.n	800da66 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800da4a:	4b25      	ldr	r3, [pc, #148]	@ (800dae0 <Device_Test+0xdc>)
 800da4c:	2201      	movs	r2, #1
 800da4e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800da50:	f004 feb6 	bl	80127c0 <Calculate_LED_ON>
 800da54:	0003      	movs	r3, r0
 800da56:	0018      	movs	r0, r3
 800da58:	23fa      	movs	r3, #250	@ 0xfa
 800da5a:	011a      	lsls	r2, r3, #4
 800da5c:	23fa      	movs	r3, #250	@ 0xfa
 800da5e:	011b      	lsls	r3, r3, #4
 800da60:	0019      	movs	r1, r3
 800da62:	f004 fef5 	bl	8012850 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800da66:	4b1d      	ldr	r3, [pc, #116]	@ (800dadc <Device_Test+0xd8>)
 800da68:	79db      	ldrb	r3, [r3, #7]
 800da6a:	2201      	movs	r2, #1
 800da6c:	4053      	eors	r3, r2
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800da74:	f7f9 fcf8 	bl	8007468 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800da78:	4b18      	ldr	r3, [pc, #96]	@ (800dadc <Device_Test+0xd8>)
 800da7a:	79db      	ldrb	r3, [r3, #7]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d003      	beq.n	800da88 <Device_Test+0x84>
 800da80:	4b16      	ldr	r3, [pc, #88]	@ (800dadc <Device_Test+0xd8>)
 800da82:	799b      	ldrb	r3, [r3, #6]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <Device_Test+0x92>
 800da88:	4b16      	ldr	r3, [pc, #88]	@ (800dae4 <Device_Test+0xe0>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	0018      	movs	r0, r3
 800da8e:	f006 f9ab 	bl	8013de8 <TimestampIsReached>
 800da92:	1e03      	subs	r3, r0, #0
 800da94:	d01f      	beq.n	800dad6 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800da96:	4b11      	ldr	r3, [pc, #68]	@ (800dadc <Device_Test+0xd8>)
 800da98:	79db      	ldrb	r3, [r3, #7]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d001      	beq.n	800daa2 <Device_Test+0x9e>
 800da9e:	4b12      	ldr	r3, [pc, #72]	@ (800dae8 <Device_Test+0xe4>)
 800daa0:	e000      	b.n	800daa4 <Device_Test+0xa0>
 800daa2:	4b12      	ldr	r3, [pc, #72]	@ (800daec <Device_Test+0xe8>)
 800daa4:	4a12      	ldr	r2, [pc, #72]	@ (800daf0 <Device_Test+0xec>)
 800daa6:	4913      	ldr	r1, [pc, #76]	@ (800daf4 <Device_Test+0xf0>)
 800daa8:	2002      	movs	r0, #2
 800daaa:	f006 f9f3 	bl	8013e94 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800daae:	4b0b      	ldr	r3, [pc, #44]	@ (800dadc <Device_Test+0xd8>)
 800dab0:	799b      	ldrb	r3, [r3, #6]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <Device_Test+0xb6>
 800dab6:	4b0c      	ldr	r3, [pc, #48]	@ (800dae8 <Device_Test+0xe4>)
 800dab8:	e000      	b.n	800dabc <Device_Test+0xb8>
 800daba:	4b0c      	ldr	r3, [pc, #48]	@ (800daec <Device_Test+0xe8>)
 800dabc:	4a0e      	ldr	r2, [pc, #56]	@ (800daf8 <Device_Test+0xf4>)
 800dabe:	490d      	ldr	r1, [pc, #52]	@ (800daf4 <Device_Test+0xf0>)
 800dac0:	2002      	movs	r0, #2
 800dac2:	f006 f9e7 	bl	8013e94 <CreateLine>
    Info("Test completed");
 800dac6:	4a0d      	ldr	r2, [pc, #52]	@ (800dafc <Device_Test+0xf8>)
 800dac8:	4b0a      	ldr	r3, [pc, #40]	@ (800daf4 <Device_Test+0xf0>)
 800daca:	0019      	movs	r1, r3
 800dacc:	2002      	movs	r0, #2
 800dace:	f006 f9e1 	bl	8013e94 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800dad2:	f7ff f857 	bl	800cb84 <SetTestDone>
  }
}
 800dad6:	46c0      	nop			@ (mov r8, r8)
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20001120 	.word	0x20001120
 800dae0:	20001118 	.word	0x20001118
 800dae4:	20001114 	.word	0x20001114
 800dae8:	0802d044 	.word	0x0802d044
 800daec:	0802d04c 	.word	0x0802d04c
 800daf0:	0802d054 	.word	0x0802d054
 800daf4:	0802ce60 	.word	0x0802ce60
 800daf8:	0802d068 	.word	0x0802d068
 800dafc:	0802d07c 	.word	0x0802d07c

0800db00 <AllDevicesReady>:

bool AllDevicesReady() {
 800db00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db02:	46de      	mov	lr, fp
 800db04:	4657      	mov	r7, sl
 800db06:	464e      	mov	r6, r9
 800db08:	4645      	mov	r5, r8
 800db0a:	b5e0      	push	{r5, r6, r7, lr}
 800db0c:	b08b      	sub	sp, #44	@ 0x2c
 800db0e:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  static uint8_t iminute = 0;
  if (TimestampIsReached(deviceTimeOut)) {
 800db10:	4b8a      	ldr	r3, [pc, #552]	@ (800dd3c <AllDevicesReady+0x23c>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	0018      	movs	r0, r3
 800db16:	f006 f967 	bl	8013de8 <TimestampIsReached>
 800db1a:	1e03      	subs	r3, r0, #0
 800db1c:	d100      	bne.n	800db20 <AllDevicesReady+0x20>
 800db1e:	e103      	b.n	800dd28 <AllDevicesReady+0x228>
    if (!sensorsdisablereq) {
 800db20:	4b87      	ldr	r3, [pc, #540]	@ (800dd40 <AllDevicesReady+0x240>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2201      	movs	r2, #1
 800db26:	4053      	eors	r3, r2
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d008      	beq.n	800db40 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800db2e:	4a85      	ldr	r2, [pc, #532]	@ (800dd44 <AllDevicesReady+0x244>)
 800db30:	4b85      	ldr	r3, [pc, #532]	@ (800dd48 <AllDevicesReady+0x248>)
 800db32:	0019      	movs	r1, r3
 800db34:	2003      	movs	r0, #3
 800db36:	f006 f9ad 	bl	8013e94 <CreateLine>
      sensorsdisablereq = true;
 800db3a:	4b81      	ldr	r3, [pc, #516]	@ (800dd40 <AllDevicesReady+0x240>)
 800db3c:	2201      	movs	r2, #1
 800db3e:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800db40:	4b82      	ldr	r3, [pc, #520]	@ (800dd4c <AllDevicesReady+0x24c>)
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b06      	cmp	r3, #6
 800db46:	d102      	bne.n	800db4e <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800db48:	4b81      	ldr	r3, [pc, #516]	@ (800dd50 <AllDevicesReady+0x250>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800db4e:	4b81      	ldr	r3, [pc, #516]	@ (800dd54 <AllDevicesReady+0x254>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b05      	cmp	r3, #5
 800db54:	d006      	beq.n	800db64 <AllDevicesReady+0x64>
 800db56:	4b80      	ldr	r3, [pc, #512]	@ (800dd58 <AllDevicesReady+0x258>)
 800db58:	789b      	ldrb	r3, [r3, #2]
 800db5a:	2201      	movs	r2, #1
 800db5c:	4053      	eors	r3, r2
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800db64:	4b7a      	ldr	r3, [pc, #488]	@ (800dd50 <AllDevicesReady+0x250>)
 800db66:	2200      	movs	r2, #0
 800db68:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800db6a:	4b7c      	ldr	r3, [pc, #496]	@ (800dd5c <AllDevicesReady+0x25c>)
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d006      	beq.n	800db80 <AllDevicesReady+0x80>
 800db72:	4b79      	ldr	r3, [pc, #484]	@ (800dd58 <AllDevicesReady+0x258>)
 800db74:	791b      	ldrb	r3, [r3, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	4053      	eors	r3, r2
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d002      	beq.n	800db86 <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800db80:	4b73      	ldr	r3, [pc, #460]	@ (800dd50 <AllDevicesReady+0x250>)
 800db82:	2200      	movs	r2, #0
 800db84:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800db86:	4b76      	ldr	r3, [pc, #472]	@ (800dd60 <AllDevicesReady+0x260>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b08      	cmp	r3, #8
 800db8c:	d006      	beq.n	800db9c <AllDevicesReady+0x9c>
 800db8e:	4b72      	ldr	r3, [pc, #456]	@ (800dd58 <AllDevicesReady+0x258>)
 800db90:	78db      	ldrb	r3, [r3, #3]
 800db92:	2201      	movs	r2, #1
 800db94:	4053      	eors	r3, r2
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800db9c:	4b6c      	ldr	r3, [pc, #432]	@ (800dd50 <AllDevicesReady+0x250>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800dba2:	4b70      	ldr	r3, [pc, #448]	@ (800dd64 <AllDevicesReady+0x264>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2b07      	cmp	r3, #7
 800dba8:	d006      	beq.n	800dbb8 <AllDevicesReady+0xb8>
 800dbaa:	4b6b      	ldr	r3, [pc, #428]	@ (800dd58 <AllDevicesReady+0x258>)
 800dbac:	7a1b      	ldrb	r3, [r3, #8]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	4053      	eors	r3, r2
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d002      	beq.n	800dbbe <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800dbb8:	4b65      	ldr	r3, [pc, #404]	@ (800dd50 <AllDevicesReady+0x250>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X) || (PMsamplesState == S5X_DISABLED)) {
 800dbbe:	4b6a      	ldr	r3, [pc, #424]	@ (800dd68 <AllDevicesReady+0x268>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d007      	beq.n	800dbd6 <AllDevicesReady+0xd6>
 800dbc6:	4b68      	ldr	r3, [pc, #416]	@ (800dd68 <AllDevicesReady+0x268>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	d003      	beq.n	800dbd6 <AllDevicesReady+0xd6>
 800dbce:	4b66      	ldr	r3, [pc, #408]	@ (800dd68 <AllDevicesReady+0x268>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d102      	bne.n	800dbdc <AllDevicesReady+0xdc>
      Sensor.PM_measurementEnabled = false;
 800dbd6:	4b5e      	ldr	r3, [pc, #376]	@ (800dd50 <AllDevicesReady+0x250>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800dbdc:	4b63      	ldr	r3, [pc, #396]	@ (800dd6c <AllDevicesReady+0x26c>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d102      	bne.n	800dbea <AllDevicesReady+0xea>
      Sensor.MIC_measurementEnabled = false;
 800dbe4:	4b5a      	ldr	r3, [pc, #360]	@ (800dd50 <AllDevicesReady+0x250>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800dbea:	4b61      	ldr	r3, [pc, #388]	@ (800dd70 <AllDevicesReady+0x270>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b09      	cmp	r3, #9
 800dbf0:	d004      	beq.n	800dbfc <AllDevicesReady+0xfc>
 800dbf2:	4b5f      	ldr	r3, [pc, #380]	@ (800dd70 <AllDevicesReady+0x270>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d000      	beq.n	800dbfc <AllDevicesReady+0xfc>
 800dbfa:	e095      	b.n	800dd28 <AllDevicesReady+0x228>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dbfc:	4b54      	ldr	r3, [pc, #336]	@ (800dd50 <AllDevicesReady+0x250>)
 800dbfe:	781a      	ldrb	r2, [r3, #0]
 800dc00:	4b53      	ldr	r3, [pc, #332]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc02:	785b      	ldrb	r3, [r3, #1]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	4b51      	ldr	r3, [pc, #324]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc0a:	791b      	ldrb	r3, [r3, #4]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	4b4f      	ldr	r3, [pc, #316]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc12:	795b      	ldrb	r3, [r3, #5]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dc18:	4b4d      	ldr	r3, [pc, #308]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc1a:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dc20:	4b4b      	ldr	r3, [pc, #300]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc22:	789b      	ldrb	r3, [r3, #2]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	4b49      	ldr	r3, [pc, #292]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc2a:	78db      	ldrb	r3, [r3, #3]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	1e5a      	subs	r2, r3, #1
 800dc32:	4193      	sbcs	r3, r2
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2201      	movs	r2, #1
 800dc38:	4053      	eors	r3, r2
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dc3e:	1dfb      	adds	r3, r7, #7
 800dc40:	701a      	strb	r2, [r3, #0]
 800dc42:	781a      	ldrb	r2, [r3, #0]
 800dc44:	2101      	movs	r1, #1
 800dc46:	400a      	ands	r2, r1
 800dc48:	701a      	strb	r2, [r3, #0]
      if (!status && ((prevstatus != status) || (iminute != lastminute))) {
 800dc4a:	1dfb      	adds	r3, r7, #7
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	4053      	eors	r3, r2
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d03e      	beq.n	800dcd6 <AllDevicesReady+0x1d6>
 800dc58:	4b46      	ldr	r3, [pc, #280]	@ (800dd74 <AllDevicesReady+0x274>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	1dfa      	adds	r2, r7, #7
 800dc5e:	7812      	ldrb	r2, [r2, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d105      	bne.n	800dc70 <AllDevicesReady+0x170>
 800dc64:	4b44      	ldr	r3, [pc, #272]	@ (800dd78 <AllDevicesReady+0x278>)
 800dc66:	781a      	ldrb	r2, [r3, #0]
 800dc68:	4b44      	ldr	r3, [pc, #272]	@ (800dd7c <AllDevicesReady+0x27c>)
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d032      	beq.n	800dcd6 <AllDevicesReady+0x1d6>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800dc70:	4b37      	ldr	r3, [pc, #220]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	469b      	mov	fp, r3
 800dc76:	4b36      	ldr	r3, [pc, #216]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc78:	791b      	ldrb	r3, [r3, #4]
 800dc7a:	001c      	movs	r4, r3
 800dc7c:	4b34      	ldr	r3, [pc, #208]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc7e:	795b      	ldrb	r3, [r3, #5]
 800dc80:	001d      	movs	r5, r3
 800dc82:	4b33      	ldr	r3, [pc, #204]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc84:	799b      	ldrb	r3, [r3, #6]
 800dc86:	001e      	movs	r6, r3
 800dc88:	4b31      	ldr	r3, [pc, #196]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	4698      	mov	r8, r3
 800dc8e:	4b30      	ldr	r3, [pc, #192]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc90:	789b      	ldrb	r3, [r3, #2]
 800dc92:	4699      	mov	r9, r3
 800dc94:	4b2e      	ldr	r3, [pc, #184]	@ (800dd50 <AllDevicesReady+0x250>)
 800dc96:	78db      	ldrb	r3, [r3, #3]
 800dc98:	469a      	mov	sl, r3
 800dc9a:	f000 f915 	bl	800dec8 <getSensorLock>
 800dc9e:	0003      	movs	r3, r0
 800dca0:	4a37      	ldr	r2, [pc, #220]	@ (800dd80 <AllDevicesReady+0x280>)
 800dca2:	4929      	ldr	r1, [pc, #164]	@ (800dd48 <AllDevicesReady+0x248>)
 800dca4:	9306      	str	r3, [sp, #24]
 800dca6:	4653      	mov	r3, sl
 800dca8:	9305      	str	r3, [sp, #20]
 800dcaa:	464b      	mov	r3, r9
 800dcac:	9304      	str	r3, [sp, #16]
 800dcae:	4643      	mov	r3, r8
 800dcb0:	9303      	str	r3, [sp, #12]
 800dcb2:	9602      	str	r6, [sp, #8]
 800dcb4:	9501      	str	r5, [sp, #4]
 800dcb6:	9400      	str	r4, [sp, #0]
 800dcb8:	465b      	mov	r3, fp
 800dcba:	2003      	movs	r0, #3
 800dcbc:	f006 f8ea 	bl	8013e94 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800dcc0:	4b2c      	ldr	r3, [pc, #176]	@ (800dd74 <AllDevicesReady+0x274>)
 800dcc2:	1dfa      	adds	r2, r7, #7
 800dcc4:	7812      	ldrb	r2, [r2, #0]
 800dcc6:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800dcc8:	4b2e      	ldr	r3, [pc, #184]	@ (800dd84 <AllDevicesReady+0x284>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	701a      	strb	r2, [r3, #0]
        iminute = lastminute;
 800dcce:	4b2b      	ldr	r3, [pc, #172]	@ (800dd7c <AllDevicesReady+0x27c>)
 800dcd0:	781a      	ldrb	r2, [r3, #0]
 800dcd2:	4b29      	ldr	r3, [pc, #164]	@ (800dd78 <AllDevicesReady+0x278>)
 800dcd4:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800dcd6:	1dfb      	adds	r3, r7, #7
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d021      	beq.n	800dd22 <AllDevicesReady+0x222>
 800dcde:	4b29      	ldr	r3, [pc, #164]	@ (800dd84 <AllDevicesReady+0x284>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	2201      	movs	r2, #1
 800dce4:	4053      	eors	r3, r2
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d01a      	beq.n	800dd22 <AllDevicesReady+0x222>
        Debug("All sensors in wait");
 800dcec:	4a26      	ldr	r2, [pc, #152]	@ (800dd88 <AllDevicesReady+0x288>)
 800dcee:	4b16      	ldr	r3, [pc, #88]	@ (800dd48 <AllDevicesReady+0x248>)
 800dcf0:	0019      	movs	r1, r3
 800dcf2:	2003      	movs	r0, #3
 800dcf4:	f006 f8ce 	bl	8013e94 <CreateLine>
        prevstatus = status;
 800dcf8:	4b1e      	ldr	r3, [pc, #120]	@ (800dd74 <AllDevicesReady+0x274>)
 800dcfa:	1dfa      	adds	r2, r7, #7
 800dcfc:	7812      	ldrb	r2, [r2, #0]
 800dcfe:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dd00:	4b20      	ldr	r3, [pc, #128]	@ (800dd84 <AllDevicesReady+0x284>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	701a      	strb	r2, [r3, #0]
        if (sendpwrmaildate == getDate()) {
 800dd06:	f7fc f8a1 	bl	8009e4c <getDate>
 800dd0a:	0003      	movs	r3, r0
 800dd0c:	001a      	movs	r2, r3
 800dd0e:	4b1f      	ldr	r3, [pc, #124]	@ (800dd8c <AllDevicesReady+0x28c>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d105      	bne.n	800dd22 <AllDevicesReady+0x222>
          Info("Battery empty mail already send today");
 800dd16:	4a1e      	ldr	r2, [pc, #120]	@ (800dd90 <AllDevicesReady+0x290>)
 800dd18:	4b1e      	ldr	r3, [pc, #120]	@ (800dd94 <AllDevicesReady+0x294>)
 800dd1a:	0019      	movs	r1, r3
 800dd1c:	2002      	movs	r0, #2
 800dd1e:	f006 f8b9 	bl	8013e94 <CreateLine>
        }

      }
      return status;
 800dd22:	1dfb      	adds	r3, r7, #7
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	e000      	b.n	800dd2a <AllDevicesReady+0x22a>
    }
  }
  return false;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	0018      	movs	r0, r3
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	b003      	add	sp, #12
 800dd30:	bcf0      	pop	{r4, r5, r6, r7}
 800dd32:	46bb      	mov	fp, r7
 800dd34:	46b2      	mov	sl, r6
 800dd36:	46a9      	mov	r9, r5
 800dd38:	46a0      	mov	r8, r4
 800dd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd3c:	20001114 	.word	0x20001114
 800dd40:	2000112f 	.word	0x2000112f
 800dd44:	0802d08c 	.word	0x0802d08c
 800dd48:	0802cca4 	.word	0x0802cca4
 800dd4c:	2000112b 	.word	0x2000112b
 800dd50:	20001118 	.word	0x20001118
 800dd54:	2000112c 	.word	0x2000112c
 800dd58:	20001120 	.word	0x20001120
 800dd5c:	2000112d 	.word	0x2000112d
 800dd60:	2000112e 	.word	0x2000112e
 800dd64:	2000112a 	.word	0x2000112a
 800dd68:	200000aa 	.word	0x200000aa
 800dd6c:	200010fb 	.word	0x200010fb
 800dd70:	200010fc 	.word	0x200010fc
 800dd74:	200000a8 	.word	0x200000a8
 800dd78:	20001130 	.word	0x20001130
 800dd7c:	20000e41 	.word	0x20000e41
 800dd80:	0802d0ac 	.word	0x0802d0ac
 800dd84:	20001131 	.word	0x20001131
 800dd88:	0802d110 	.word	0x0802d110
 800dd8c:	20001110 	.word	0x20001110
 800dd90:	0802d124 	.word	0x0802d124
 800dd94:	0802ce60 	.word	0x0802ce60

0800dd98 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800dd9c:	4b25      	ldr	r3, [pc, #148]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800dda4:	4b24      	ldr	r3, [pc, #144]	@ (800de38 <EnabledConnectedDevices+0xa0>)
 800dda6:	2201      	movs	r2, #1
 800dda8:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800ddaa:	4b22      	ldr	r3, [pc, #136]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800ddac:	789b      	ldrb	r3, [r3, #2]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d006      	beq.n	800ddc0 <EnabledConnectedDevices+0x28>
 800ddb2:	4b22      	ldr	r3, [pc, #136]	@ (800de3c <EnabledConnectedDevices+0xa4>)
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800ddba:	4b1f      	ldr	r3, [pc, #124]	@ (800de38 <EnabledConnectedDevices+0xa0>)
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	711a      	strb	r2, [r3, #4]
  }
//  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
//    Info("AHT2x sensor is disabled");
//  }
  if (SensorProbe.BMP280_Present) {
 800ddc0:	4b1c      	ldr	r3, [pc, #112]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800ddc2:	791b      	ldrb	r3, [r3, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <EnabledConnectedDevices+0x36>
    Sensor.BMP_measurementEnabled = true;
 800ddc8:	4b1b      	ldr	r3, [pc, #108]	@ (800de38 <EnabledConnectedDevices+0xa0>)
 800ddca:	2201      	movs	r2, #1
 800ddcc:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800ddce:	4b19      	ldr	r3, [pc, #100]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800ddd0:	78db      	ldrb	r3, [r3, #3]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <EnabledConnectedDevices+0x44>
    Sensor.ENS_measurementEnabled = true;
 800ddd6:	4b18      	ldr	r3, [pc, #96]	@ (800de38 <EnabledConnectedDevices+0xa0>)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800dddc:	4b15      	ldr	r3, [pc, #84]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d006      	beq.n	800ddf2 <EnabledConnectedDevices+0x5a>
 800dde4:	4b13      	ldr	r3, [pc, #76]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800dde6:	7a1b      	ldrb	r3, [r3, #8]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <EnabledConnectedDevices+0x5a>
    Sensor.VOC_measurementEnabled = true;
 800ddec:	4b12      	ldr	r3, [pc, #72]	@ (800de38 <EnabledConnectedDevices+0xa0>)
 800ddee:	2201      	movs	r2, #1
 800ddf0:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800ddf2:	4b10      	ldr	r3, [pc, #64]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800ddf4:	795b      	ldrb	r3, [r3, #5]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <EnabledConnectedDevices+0x68>
    Sensor.PM_measurementEnabled = true;
 800ddfa:	4b0f      	ldr	r3, [pc, #60]	@ (800de38 <EnabledConnectedDevices+0xa0>)
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800de00:	4b0c      	ldr	r3, [pc, #48]	@ (800de34 <EnabledConnectedDevices+0x9c>)
 800de02:	799b      	ldrb	r3, [r3, #6]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <EnabledConnectedDevices+0x76>
    Sensor.MIC_measurementEnabled = true;
 800de08:	4b0b      	ldr	r3, [pc, #44]	@ (800de38 <EnabledConnectedDevices+0xa0>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800de0e:	f006 fdc1 	bl	8014994 <HAL_GetTick>
 800de12:	0003      	movs	r3, r0
 800de14:	4a0a      	ldr	r2, [pc, #40]	@ (800de40 <EnabledConnectedDevices+0xa8>)
 800de16:	189a      	adds	r2, r3, r2
 800de18:	4b0a      	ldr	r3, [pc, #40]	@ (800de44 <EnabledConnectedDevices+0xac>)
 800de1a:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800de1c:	4b0a      	ldr	r3, [pc, #40]	@ (800de48 <EnabledConnectedDevices+0xb0>)
 800de1e:	2200      	movs	r2, #0
 800de20:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800de22:	4a0a      	ldr	r2, [pc, #40]	@ (800de4c <EnabledConnectedDevices+0xb4>)
 800de24:	4b0a      	ldr	r3, [pc, #40]	@ (800de50 <EnabledConnectedDevices+0xb8>)
 800de26:	0019      	movs	r1, r3
 800de28:	2003      	movs	r0, #3
 800de2a:	f006 f833 	bl	8013e94 <CreateLine>
}
 800de2e:	46c0      	nop			@ (mov r8, r8)
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20001120 	.word	0x20001120
 800de38:	20001118 	.word	0x20001118
 800de3c:	2000009f 	.word	0x2000009f
 800de40:	00124f80 	.word	0x00124f80
 800de44:	20001114 	.word	0x20001114
 800de48:	2000112f 	.word	0x2000112f
 800de4c:	0802d14c 	.word	0x0802d14c
 800de50:	0802cca4 	.word	0x0802cca4

0800de54 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800de54:	b580      	push	{r7, lr}
 800de56:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800de58:	4b0e      	ldr	r3, [pc, #56]	@ (800de94 <DisableConnectedDevices+0x40>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800de5e:	4b0d      	ldr	r3, [pc, #52]	@ (800de94 <DisableConnectedDevices+0x40>)
 800de60:	2200      	movs	r2, #0
 800de62:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800de64:	4b0b      	ldr	r3, [pc, #44]	@ (800de94 <DisableConnectedDevices+0x40>)
 800de66:	2200      	movs	r2, #0
 800de68:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800de6a:	4b0a      	ldr	r3, [pc, #40]	@ (800de94 <DisableConnectedDevices+0x40>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800de70:	4b08      	ldr	r3, [pc, #32]	@ (800de94 <DisableConnectedDevices+0x40>)
 800de72:	2200      	movs	r2, #0
 800de74:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800de76:	4b07      	ldr	r3, [pc, #28]	@ (800de94 <DisableConnectedDevices+0x40>)
 800de78:	2200      	movs	r2, #0
 800de7a:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800de7c:	4b05      	ldr	r3, [pc, #20]	@ (800de94 <DisableConnectedDevices+0x40>)
 800de7e:	2200      	movs	r2, #0
 800de80:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800de82:	4a05      	ldr	r2, [pc, #20]	@ (800de98 <DisableConnectedDevices+0x44>)
 800de84:	4b05      	ldr	r3, [pc, #20]	@ (800de9c <DisableConnectedDevices+0x48>)
 800de86:	0019      	movs	r1, r3
 800de88:	2003      	movs	r0, #3
 800de8a:	f006 f803 	bl	8013e94 <CreateLine>
}
 800de8e:	46c0      	nop			@ (mov r8, r8)
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20001118 	.word	0x20001118
 800de98:	0802d15c 	.word	0x0802d15c
 800de9c:	0802cca4 	.word	0x0802cca4

0800dea0 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	0002      	movs	r2, r0
 800dea8:	1dfb      	adds	r3, r7, #7
 800deaa:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800deac:	4b05      	ldr	r3, [pc, #20]	@ (800dec4 <setSensorLock+0x24>)
 800deae:	1dfa      	adds	r2, r7, #7
 800deb0:	7812      	ldrb	r2, [r2, #0]
 800deb2:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800deb4:	200a      	movs	r0, #10
 800deb6:	f006 fd77 	bl	80149a8 <HAL_Delay>
}
 800deba:	46c0      	nop			@ (mov r8, r8)
 800debc:	46bd      	mov	sp, r7
 800debe:	b002      	add	sp, #8
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	46c0      	nop			@ (mov r8, r8)
 800dec4:	20001129 	.word	0x20001129

0800dec8 <getSensorLock>:

uint8_t getSensorLock() {
 800dec8:	b580      	push	{r7, lr}
 800deca:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800decc:	4b02      	ldr	r3, [pc, #8]	@ (800ded8 <getSensorLock+0x10>)
 800dece:	781b      	ldrb	r3, [r3, #0]
}
 800ded0:	0018      	movs	r0, r3
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	46c0      	nop			@ (mov r8, r8)
 800ded8:	20001129 	.word	0x20001129

0800dedc <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800dedc:	b580      	push	{r7, lr}
 800dede:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800dee0:	4b1a      	ldr	r3, [pc, #104]	@ (800df4c <UpkeepI2Csensors+0x70>)
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d005      	beq.n	800def4 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800dee8:	f006 fbd2 	bl	8014690 <HIDS_Upkeep>
 800deec:	0003      	movs	r3, r0
 800deee:	001a      	movs	r2, r3
 800def0:	4b17      	ldr	r3, [pc, #92]	@ (800df50 <UpkeepI2Csensors+0x74>)
 800def2:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800def4:	4b15      	ldr	r3, [pc, #84]	@ (800df4c <UpkeepI2Csensors+0x70>)
 800def6:	785b      	ldrb	r3, [r3, #1]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d005      	beq.n	800df08 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800defc:	f003 fb9c 	bl	8011638 <SGP_Upkeep>
 800df00:	0003      	movs	r3, r0
 800df02:	001a      	movs	r2, r3
 800df04:	4b13      	ldr	r3, [pc, #76]	@ (800df54 <UpkeepI2Csensors+0x78>)
 800df06:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800df08:	4b10      	ldr	r3, [pc, #64]	@ (800df4c <UpkeepI2Csensors+0x70>)
 800df0a:	791b      	ldrb	r3, [r3, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d005      	beq.n	800df1c <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800df10:	f7fd fb04 	bl	800b51c <AHT_Upkeep>
 800df14:	0003      	movs	r3, r0
 800df16:	001a      	movs	r2, r3
 800df18:	4b0f      	ldr	r3, [pc, #60]	@ (800df58 <UpkeepI2Csensors+0x7c>)
 800df1a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800df1c:	4b0b      	ldr	r3, [pc, #44]	@ (800df4c <UpkeepI2Csensors+0x70>)
 800df1e:	795b      	ldrb	r3, [r3, #5]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d005      	beq.n	800df30 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800df24:	f7fd ff90 	bl	800be48 <BMP_Upkeep>
 800df28:	0003      	movs	r3, r0
 800df2a:	001a      	movs	r2, r3
 800df2c:	4b0b      	ldr	r3, [pc, #44]	@ (800df5c <UpkeepI2Csensors+0x80>)
 800df2e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800df30:	4b06      	ldr	r3, [pc, #24]	@ (800df4c <UpkeepI2Csensors+0x70>)
 800df32:	799b      	ldrb	r3, [r3, #6]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800df38:	f7f6 fa8e 	bl	8004458 <ENS_Upkeep>
 800df3c:	0003      	movs	r3, r0
 800df3e:	001a      	movs	r2, r3
 800df40:	4b07      	ldr	r3, [pc, #28]	@ (800df60 <UpkeepI2Csensors+0x84>)
 800df42:	701a      	strb	r2, [r3, #0]
  }
}
 800df44:	46c0      	nop			@ (mov r8, r8)
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	46c0      	nop			@ (mov r8, r8)
 800df4c:	20001118 	.word	0x20001118
 800df50:	2000112b 	.word	0x2000112b
 800df54:	2000112a 	.word	0x2000112a
 800df58:	2000112c 	.word	0x2000112c
 800df5c:	2000112d 	.word	0x2000112d
 800df60:	2000112e 	.word	0x2000112e

0800df64 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800df64:	b580      	push	{r7, lr}
 800df66:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800df68:	4b02      	ldr	r3, [pc, #8]	@ (800df74 <ResetdBAmax+0x10>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	601a      	str	r2, [r3, #0]
}
 800df6e:	46c0      	nop			@ (mov r8, r8)
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	20001178 	.word	0x20001178

0800df78 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800df80:	f006 fd08 	bl	8014994 <HAL_GetTick>
 800df84:	0002      	movs	r2, r0
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	18d2      	adds	r2, r2, r3
 800df8a:	4b03      	ldr	r3, [pc, #12]	@ (800df98 <setMICTimeStamp+0x20>)
 800df8c:	601a      	str	r2, [r3, #0]
}
 800df8e:	46c0      	nop			@ (mov r8, r8)
 800df90:	46bd      	mov	sp, r7
 800df92:	b002      	add	sp, #8
 800df94:	bd80      	pop	{r7, pc}
 800df96:	46c0      	nop			@ (mov r8, r8)
 800df98:	20001180 	.word	0x20001180

0800df9c <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	af00      	add	r7, sp, #0
  counter = 0;
 800dfa0:	4b05      	ldr	r3, [pc, #20]	@ (800dfb8 <ResetDBACalculator+0x1c>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800dfa6:	4b05      	ldr	r3, [pc, #20]	@ (800dfbc <ResetDBACalculator+0x20>)
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800dfac:	4b04      	ldr	r3, [pc, #16]	@ (800dfc0 <ResetDBACalculator+0x24>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	701a      	strb	r2, [r3, #0]
}
 800dfb2:	46c0      	nop			@ (mov r8, r8)
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	2000117c 	.word	0x2000117c
 800dfbc:	200000a9 	.word	0x200000a9
 800dfc0:	2000117d 	.word	0x2000117d

0800dfc4 <MIC_Print>:

void MIC_Print(void) {
 800dfc4:	b5b0      	push	{r4, r5, r7, lr}
 800dfc6:	b08c      	sub	sp, #48	@ 0x30
 800dfc8:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800dfca:	4ba1      	ldr	r3, [pc, #644]	@ (800e250 <MIC_Print+0x28c>)
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	4ba1      	ldr	r3, [pc, #644]	@ (800e254 <MIC_Print+0x290>)
 800dfd0:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800dfd2:	4ba1      	ldr	r3, [pc, #644]	@ (800e258 <MIC_Print+0x294>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	001a      	movs	r2, r3
 800dfd8:	4b9e      	ldr	r3, [pc, #632]	@ (800e254 <MIC_Print+0x290>)
 800dfda:	6819      	ldr	r1, [r3, #0]
 800dfdc:	4b9f      	ldr	r3, [pc, #636]	@ (800e25c <MIC_Print+0x298>)
 800dfde:	0092      	lsls	r2, r2, #2
 800dfe0:	50d1      	str	r1, [r2, r3]
  counter++;
 800dfe2:	4b9d      	ldr	r3, [pc, #628]	@ (800e258 <MIC_Print+0x294>)
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	4b9b      	ldr	r3, [pc, #620]	@ (800e258 <MIC_Print+0x294>)
 800dfec:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800dfee:	4b9a      	ldr	r3, [pc, #616]	@ (800e258 <MIC_Print+0x294>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	2b09      	cmp	r3, #9
 800dff4:	d80b      	bhi.n	800e00e <MIC_Print+0x4a>
 800dff6:	4b9a      	ldr	r3, [pc, #616]	@ (800e260 <MIC_Print+0x29c>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	2201      	movs	r2, #1
 800dffc:	4053      	eors	r3, r2
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	2b00      	cmp	r3, #0
 800e002:	d004      	beq.n	800e00e <MIC_Print+0x4a>
    denominator = counter;
 800e004:	4b94      	ldr	r3, [pc, #592]	@ (800e258 <MIC_Print+0x294>)
 800e006:	781a      	ldrb	r2, [r3, #0]
 800e008:	4b96      	ldr	r3, [pc, #600]	@ (800e264 <MIC_Print+0x2a0>)
 800e00a:	701a      	strb	r2, [r3, #0]
 800e00c:	e005      	b.n	800e01a <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800e00e:	4b95      	ldr	r3, [pc, #596]	@ (800e264 <MIC_Print+0x2a0>)
 800e010:	220a      	movs	r2, #10
 800e012:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800e014:	4b92      	ldr	r3, [pc, #584]	@ (800e260 <MIC_Print+0x29c>)
 800e016:	2201      	movs	r2, #1
 800e018:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800e01a:	4b93      	ldr	r3, [pc, #588]	@ (800e268 <MIC_Print+0x2a4>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800e020:	230f      	movs	r3, #15
 800e022:	18fb      	adds	r3, r7, r3
 800e024:	2200      	movs	r2, #0
 800e026:	701a      	strb	r2, [r3, #0]
 800e028:	e042      	b.n	800e0b0 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800e02a:	240f      	movs	r4, #15
 800e02c:	193b      	adds	r3, r7, r4
 800e02e:	781a      	ldrb	r2, [r3, #0]
 800e030:	4b8a      	ldr	r3, [pc, #552]	@ (800e25c <MIC_Print+0x298>)
 800e032:	0092      	lsls	r2, r2, #2
 800e034:	58d2      	ldr	r2, [r2, r3]
 800e036:	4b8c      	ldr	r3, [pc, #560]	@ (800e268 <MIC_Print+0x2a4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	1c19      	adds	r1, r3, #0
 800e03c:	1c10      	adds	r0, r2, #0
 800e03e:	f7f2 fc3f 	bl	80008c0 <__aeabi_fadd>
 800e042:	1c03      	adds	r3, r0, #0
 800e044:	1c1a      	adds	r2, r3, #0
 800e046:	4b88      	ldr	r3, [pc, #544]	@ (800e268 <MIC_Print+0x2a4>)
 800e048:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800e04a:	193b      	adds	r3, r7, r4
 800e04c:	781a      	ldrb	r2, [r3, #0]
 800e04e:	4b83      	ldr	r3, [pc, #524]	@ (800e25c <MIC_Print+0x298>)
 800e050:	0092      	lsls	r2, r2, #2
 800e052:	58d2      	ldr	r2, [r2, r3]
 800e054:	4b85      	ldr	r3, [pc, #532]	@ (800e26c <MIC_Print+0x2a8>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	1c19      	adds	r1, r3, #0
 800e05a:	1c10      	adds	r0, r2, #0
 800e05c:	f7f2 fa7c 	bl	8000558 <__aeabi_fcmpgt>
 800e060:	1e03      	subs	r3, r0, #0
 800e062:	d006      	beq.n	800e072 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800e064:	193b      	adds	r3, r7, r4
 800e066:	781a      	ldrb	r2, [r3, #0]
 800e068:	4b7c      	ldr	r3, [pc, #496]	@ (800e25c <MIC_Print+0x298>)
 800e06a:	0092      	lsls	r2, r2, #2
 800e06c:	58d2      	ldr	r2, [r2, r3]
 800e06e:	4b7f      	ldr	r3, [pc, #508]	@ (800e26c <MIC_Print+0x2a8>)
 800e070:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800e072:	4b7d      	ldr	r3, [pc, #500]	@ (800e268 <MIC_Print+0x2a4>)
 800e074:	681c      	ldr	r4, [r3, #0]
 800e076:	4b7b      	ldr	r3, [pc, #492]	@ (800e264 <MIC_Print+0x2a0>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	0018      	movs	r0, r3
 800e07c:	f7f3 fc24 	bl	80018c8 <__aeabi_ui2f>
 800e080:	1c03      	adds	r3, r0, #0
 800e082:	1c19      	adds	r1, r3, #0
 800e084:	1c20      	adds	r0, r4, #0
 800e086:	f7f2 fe0d 	bl	8000ca4 <__aeabi_fdiv>
 800e08a:	1c03      	adds	r3, r0, #0
 800e08c:	1c1a      	adds	r2, r3, #0
 800e08e:	4b78      	ldr	r3, [pc, #480]	@ (800e270 <MIC_Print+0x2ac>)
 800e090:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800e092:	4b70      	ldr	r3, [pc, #448]	@ (800e254 <MIC_Print+0x290>)
 800e094:	6818      	ldr	r0, [r3, #0]
 800e096:	4b75      	ldr	r3, [pc, #468]	@ (800e26c <MIC_Print+0x2a8>)
 800e098:	6819      	ldr	r1, [r3, #0]
 800e09a:	4b75      	ldr	r3, [pc, #468]	@ (800e270 <MIC_Print+0x2ac>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	1c1a      	adds	r2, r3, #0
 800e0a0:	f7f6 fd7a 	bl	8004b98 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800e0a4:	210f      	movs	r1, #15
 800e0a6:	187b      	adds	r3, r7, r1
 800e0a8:	781a      	ldrb	r2, [r3, #0]
 800e0aa:	187b      	adds	r3, r7, r1
 800e0ac:	3201      	adds	r2, #1
 800e0ae:	701a      	strb	r2, [r3, #0]
 800e0b0:	4b6c      	ldr	r3, [pc, #432]	@ (800e264 <MIC_Print+0x2a0>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	220f      	movs	r2, #15
 800e0b6:	18ba      	adds	r2, r7, r2
 800e0b8:	7812      	ldrb	r2, [r2, #0]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d3b5      	bcc.n	800e02a <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800e0be:	4b65      	ldr	r3, [pc, #404]	@ (800e254 <MIC_Print+0x290>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	1c18      	adds	r0, r3, #0
 800e0c4:	f7f5 fbe6 	bl	8003894 <__aeabi_f2d>
 800e0c8:	0004      	movs	r4, r0
 800e0ca:	000d      	movs	r5, r1
 800e0cc:	4b67      	ldr	r3, [pc, #412]	@ (800e26c <MIC_Print+0x2a8>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	1c18      	adds	r0, r3, #0
 800e0d2:	f7f5 fbdf 	bl	8003894 <__aeabi_f2d>
 800e0d6:	6038      	str	r0, [r7, #0]
 800e0d8:	6079      	str	r1, [r7, #4]
 800e0da:	4b65      	ldr	r3, [pc, #404]	@ (800e270 <MIC_Print+0x2ac>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	1c18      	adds	r0, r3, #0
 800e0e0:	f7f5 fbd8 	bl	8003894 <__aeabi_f2d>
 800e0e4:	0002      	movs	r2, r0
 800e0e6:	000b      	movs	r3, r1
 800e0e8:	4862      	ldr	r0, [pc, #392]	@ (800e274 <MIC_Print+0x2b0>)
 800e0ea:	4963      	ldr	r1, [pc, #396]	@ (800e278 <MIC_Print+0x2b4>)
 800e0ec:	9206      	str	r2, [sp, #24]
 800e0ee:	9307      	str	r3, [sp, #28]
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	9204      	str	r2, [sp, #16]
 800e0f6:	9305      	str	r3, [sp, #20]
 800e0f8:	4b60      	ldr	r3, [pc, #384]	@ (800e27c <MIC_Print+0x2b8>)
 800e0fa:	9302      	str	r3, [sp, #8]
 800e0fc:	9400      	str	r4, [sp, #0]
 800e0fe:	9501      	str	r5, [sp, #4]
 800e100:	0002      	movs	r2, r0
 800e102:	2002      	movs	r0, #2
 800e104:	f005 fec6 	bl	8013e94 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e108:	4b53      	ldr	r3, [pc, #332]	@ (800e258 <MIC_Print+0x294>)
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	2b0a      	cmp	r3, #10
 800e10e:	d902      	bls.n	800e116 <MIC_Print+0x152>
    counter = 0;
 800e110:	4b51      	ldr	r3, [pc, #324]	@ (800e258 <MIC_Print+0x294>)
 800e112:	2200      	movs	r2, #0
 800e114:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e116:	4b4f      	ldr	r3, [pc, #316]	@ (800e254 <MIC_Print+0x290>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4959      	ldr	r1, [pc, #356]	@ (800e280 <MIC_Print+0x2bc>)
 800e11c:	1c18      	adds	r0, r3, #0
 800e11e:	f7f2 fa25 	bl	800056c <__aeabi_fcmpge>
 800e122:	1e03      	subs	r3, r0, #0
 800e124:	d004      	beq.n	800e130 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e126:	2201      	movs	r2, #1
 800e128:	2101      	movs	r1, #1
 800e12a:	2001      	movs	r0, #1
 800e12c:	f004 fbbe 	bl	80128ac <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e130:	4b48      	ldr	r3, [pc, #288]	@ (800e254 <MIC_Print+0x290>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4953      	ldr	r1, [pc, #332]	@ (800e284 <MIC_Print+0x2c0>)
 800e136:	1c18      	adds	r0, r3, #0
 800e138:	f7f2 fa18 	bl	800056c <__aeabi_fcmpge>
 800e13c:	1e03      	subs	r3, r0, #0
 800e13e:	d00c      	beq.n	800e15a <MIC_Print+0x196>
 800e140:	4b44      	ldr	r3, [pc, #272]	@ (800e254 <MIC_Print+0x290>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	494e      	ldr	r1, [pc, #312]	@ (800e280 <MIC_Print+0x2bc>)
 800e146:	1c18      	adds	r0, r3, #0
 800e148:	f7f2 f9f2 	bl	8000530 <__aeabi_fcmplt>
 800e14c:	1e03      	subs	r3, r0, #0
 800e14e:	d004      	beq.n	800e15a <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e150:	2200      	movs	r2, #0
 800e152:	2100      	movs	r1, #0
 800e154:	2001      	movs	r0, #1
 800e156:	f004 fba9 	bl	80128ac <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e15a:	4b3e      	ldr	r3, [pc, #248]	@ (800e254 <MIC_Print+0x290>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	494a      	ldr	r1, [pc, #296]	@ (800e288 <MIC_Print+0x2c4>)
 800e160:	1c18      	adds	r0, r3, #0
 800e162:	f7f2 fa03 	bl	800056c <__aeabi_fcmpge>
 800e166:	1e03      	subs	r3, r0, #0
 800e168:	d00c      	beq.n	800e184 <MIC_Print+0x1c0>
 800e16a:	4b3a      	ldr	r3, [pc, #232]	@ (800e254 <MIC_Print+0x290>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4945      	ldr	r1, [pc, #276]	@ (800e284 <MIC_Print+0x2c0>)
 800e170:	1c18      	adds	r0, r3, #0
 800e172:	f7f2 f9dd 	bl	8000530 <__aeabi_fcmplt>
 800e176:	1e03      	subs	r3, r0, #0
 800e178:	d004      	beq.n	800e184 <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e17a:	2200      	movs	r2, #0
 800e17c:	2101      	movs	r1, #1
 800e17e:	2001      	movs	r0, #1
 800e180:	f004 fb94 	bl	80128ac <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e184:	4b33      	ldr	r3, [pc, #204]	@ (800e254 <MIC_Print+0x290>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4940      	ldr	r1, [pc, #256]	@ (800e28c <MIC_Print+0x2c8>)
 800e18a:	1c18      	adds	r0, r3, #0
 800e18c:	f7f2 f9ee 	bl	800056c <__aeabi_fcmpge>
 800e190:	1e03      	subs	r3, r0, #0
 800e192:	d00c      	beq.n	800e1ae <MIC_Print+0x1ea>
 800e194:	4b2f      	ldr	r3, [pc, #188]	@ (800e254 <MIC_Print+0x290>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	493b      	ldr	r1, [pc, #236]	@ (800e288 <MIC_Print+0x2c4>)
 800e19a:	1c18      	adds	r0, r3, #0
 800e19c:	f7f2 f9c8 	bl	8000530 <__aeabi_fcmplt>
 800e1a0:	1e03      	subs	r3, r0, #0
 800e1a2:	d004      	beq.n	800e1ae <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	2101      	movs	r1, #1
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	f004 fb7f 	bl	80128ac <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e1ae:	4b29      	ldr	r3, [pc, #164]	@ (800e254 <MIC_Print+0x290>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4937      	ldr	r1, [pc, #220]	@ (800e290 <MIC_Print+0x2cc>)
 800e1b4:	1c18      	adds	r0, r3, #0
 800e1b6:	f7f2 f9d9 	bl	800056c <__aeabi_fcmpge>
 800e1ba:	1e03      	subs	r3, r0, #0
 800e1bc:	d00c      	beq.n	800e1d8 <MIC_Print+0x214>
 800e1be:	4b25      	ldr	r3, [pc, #148]	@ (800e254 <MIC_Print+0x290>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4932      	ldr	r1, [pc, #200]	@ (800e28c <MIC_Print+0x2c8>)
 800e1c4:	1c18      	adds	r0, r3, #0
 800e1c6:	f7f2 f9b3 	bl	8000530 <__aeabi_fcmplt>
 800e1ca:	1e03      	subs	r3, r0, #0
 800e1cc:	d004      	beq.n	800e1d8 <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	f004 fb6a 	bl	80128ac <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e1d8:	4b1e      	ldr	r3, [pc, #120]	@ (800e254 <MIC_Print+0x290>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	492d      	ldr	r1, [pc, #180]	@ (800e294 <MIC_Print+0x2d0>)
 800e1de:	1c18      	adds	r0, r3, #0
 800e1e0:	f7f2 f9c4 	bl	800056c <__aeabi_fcmpge>
 800e1e4:	1e03      	subs	r3, r0, #0
 800e1e6:	d00c      	beq.n	800e202 <MIC_Print+0x23e>
 800e1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800e254 <MIC_Print+0x290>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4928      	ldr	r1, [pc, #160]	@ (800e290 <MIC_Print+0x2cc>)
 800e1ee:	1c18      	adds	r0, r3, #0
 800e1f0:	f7f2 f99e 	bl	8000530 <__aeabi_fcmplt>
 800e1f4:	1e03      	subs	r3, r0, #0
 800e1f6:	d004      	beq.n	800e202 <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	f004 fb55 	bl	80128ac <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e202:	4b14      	ldr	r3, [pc, #80]	@ (800e254 <MIC_Print+0x290>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4924      	ldr	r1, [pc, #144]	@ (800e298 <MIC_Print+0x2d4>)
 800e208:	1c18      	adds	r0, r3, #0
 800e20a:	f7f2 f9af 	bl	800056c <__aeabi_fcmpge>
 800e20e:	1e03      	subs	r3, r0, #0
 800e210:	d00c      	beq.n	800e22c <MIC_Print+0x268>
 800e212:	4b10      	ldr	r3, [pc, #64]	@ (800e254 <MIC_Print+0x290>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	491f      	ldr	r1, [pc, #124]	@ (800e294 <MIC_Print+0x2d0>)
 800e218:	1c18      	adds	r0, r3, #0
 800e21a:	f7f2 f989 	bl	8000530 <__aeabi_fcmplt>
 800e21e:	1e03      	subs	r3, r0, #0
 800e220:	d004      	beq.n	800e22c <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e222:	2201      	movs	r2, #1
 800e224:	2100      	movs	r1, #0
 800e226:	2001      	movs	r0, #1
 800e228:	f004 fb40 	bl	80128ac <SetDBLED>
  }
  if(dBA < 35){//off
 800e22c:	4b09      	ldr	r3, [pc, #36]	@ (800e254 <MIC_Print+0x290>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4919      	ldr	r1, [pc, #100]	@ (800e298 <MIC_Print+0x2d4>)
 800e232:	1c18      	adds	r0, r3, #0
 800e234:	f7f2 f97c 	bl	8000530 <__aeabi_fcmplt>
 800e238:	1e03      	subs	r3, r0, #0
 800e23a:	d100      	bne.n	800e23e <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e23c:	e004      	b.n	800e248 <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e23e:	2200      	movs	r2, #0
 800e240:	2100      	movs	r1, #0
 800e242:	2000      	movs	r0, #0
 800e244:	f004 fb32 	bl	80128ac <SetDBLED>
}
 800e248:	46c0      	nop			@ (mov r8, r8)
 800e24a:	46bd      	mov	sp, r7
 800e24c:	b004      	add	sp, #16
 800e24e:	bdb0      	pop	{r4, r5, r7, pc}
 800e250:	20001174 	.word	0x20001174
 800e254:	20001140 	.word	0x20001140
 800e258:	2000117c 	.word	0x2000117c
 800e25c:	20001144 	.word	0x20001144
 800e260:	2000117d 	.word	0x2000117d
 800e264:	200000a9 	.word	0x200000a9
 800e268:	20001170 	.word	0x20001170
 800e26c:	20001178 	.word	0x20001178
 800e270:	2000116c 	.word	0x2000116c
 800e274:	0802d170 	.word	0x0802d170
 800e278:	0802d1b4 	.word	0x0802d1b4
 800e27c:	20001134 	.word	0x20001134
 800e280:	42b40000 	.word	0x42b40000
 800e284:	42a00000 	.word	0x42a00000
 800e288:	428c0000 	.word	0x428c0000
 800e28c:	42700000 	.word	0x42700000
 800e290:	42480000 	.word	0x42480000
 800e294:	42200000 	.word	0x42200000
 800e298:	420c0000 	.word	0x420c0000

0800e29c <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e2a2:	4b11      	ldr	r3, [pc, #68]	@ (800e2e8 <MIC_TestMeasurementDone+0x4c>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	4a10      	ldr	r2, [pc, #64]	@ (800e2ec <MIC_TestMeasurementDone+0x50>)
 800e2aa:	4911      	ldr	r1, [pc, #68]	@ (800e2f0 <MIC_TestMeasurementDone+0x54>)
 800e2ac:	2002      	movs	r0, #2
 800e2ae:	f005 fdf1 	bl	8013e94 <CreateLine>
  if(DataReady) {
 800e2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e8 <MIC_TestMeasurementDone+0x4c>)
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d010      	beq.n	800e2de <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e2bc:	1dfb      	adds	r3, r7, #7
 800e2be:	4a0d      	ldr	r2, [pc, #52]	@ (800e2f4 <MIC_TestMeasurementDone+0x58>)
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f4 <MIC_TestMeasurementDone+0x58>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	4a0b      	ldr	r2, [pc, #44]	@ (800e2f8 <MIC_TestMeasurementDone+0x5c>)
 800e2cc:	4908      	ldr	r1, [pc, #32]	@ (800e2f0 <MIC_TestMeasurementDone+0x54>)
 800e2ce:	2002      	movs	r0, #2
 800e2d0:	f005 fde0 	bl	8013e94 <CreateLine>
    ResetChargeIndicator();
 800e2d4:	f004 fbbe 	bl	8012a54 <ResetChargeIndicator>
    return Check;
 800e2d8:	1dfb      	adds	r3, r7, #7
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	e000      	b.n	800e2e0 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	0018      	movs	r0, r3
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	b002      	add	sp, #8
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	200012b1 	.word	0x200012b1
 800e2ec:	0802d1b8 	.word	0x0802d1b8
 800e2f0:	0802d1b4 	.word	0x0802d1b4
 800e2f4:	200012b2 	.word	0x200012b2
 800e2f8:	0802d1e4 	.word	0x0802d1e4

0800e2fc <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e302:	4b78      	ldr	r3, [pc, #480]	@ (800e4e4 <Mic_Upkeep+0x1e8>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b03      	cmp	r3, #3
 800e308:	d100      	bne.n	800e30c <Mic_Upkeep+0x10>
 800e30a:	e0b9      	b.n	800e480 <Mic_Upkeep+0x184>
 800e30c:	dd00      	ble.n	800e310 <Mic_Upkeep+0x14>
 800e30e:	e0d4      	b.n	800e4ba <Mic_Upkeep+0x1be>
 800e310:	2b02      	cmp	r3, #2
 800e312:	d037      	beq.n	800e384 <Mic_Upkeep+0x88>
 800e314:	dd00      	ble.n	800e318 <Mic_Upkeep+0x1c>
 800e316:	e0d0      	b.n	800e4ba <Mic_Upkeep+0x1be>
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <Mic_Upkeep+0x26>
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d014      	beq.n	800e34a <Mic_Upkeep+0x4e>
 800e320:	e0cb      	b.n	800e4ba <Mic_Upkeep+0x1be>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e322:	2001      	movs	r0, #1
 800e324:	f003 fbac 	bl	8011a80 <enableMicrophone>
 800e328:	0003      	movs	r3, r0
 800e32a:	001a      	movs	r2, r3
 800e32c:	2301      	movs	r3, #1
 800e32e:	4053      	eors	r3, r2
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d005      	beq.n	800e342 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e336:	4a6c      	ldr	r2, [pc, #432]	@ (800e4e8 <Mic_Upkeep+0x1ec>)
 800e338:	4b6c      	ldr	r3, [pc, #432]	@ (800e4ec <Mic_Upkeep+0x1f0>)
 800e33a:	217f      	movs	r1, #127	@ 0x7f
 800e33c:	0018      	movs	r0, r3
 800e33e:	f005 fe99 	bl	8014074 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e342:	4b68      	ldr	r3, [pc, #416]	@ (800e4e4 <Mic_Upkeep+0x1e8>)
 800e344:	2201      	movs	r2, #1
 800e346:	701a      	strb	r2, [r3, #0]
    break;
 800e348:	e0c6      	b.n	800e4d8 <Mic_Upkeep+0x1dc>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e34a:	f003 fb75 	bl	8011a38 <micSettlingComplete>
 800e34e:	1e03      	subs	r3, r0, #0
 800e350:	d105      	bne.n	800e35e <Mic_Upkeep+0x62>
 800e352:	4b67      	ldr	r3, [pc, #412]	@ (800e4f0 <Mic_Upkeep+0x1f4>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	b2db      	uxtb	r3, r3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d100      	bne.n	800e35e <Mic_Upkeep+0x62>
 800e35c:	e0b7      	b.n	800e4ce <Mic_Upkeep+0x1d2>
      if (!startSPLcalculation())
 800e35e:	f003 fbf9 	bl	8011b54 <startSPLcalculation>
 800e362:	0003      	movs	r3, r0
 800e364:	001a      	movs	r2, r3
 800e366:	2301      	movs	r3, #1
 800e368:	4053      	eors	r3, r2
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d005      	beq.n	800e37c <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e370:	4a5d      	ldr	r2, [pc, #372]	@ (800e4e8 <Mic_Upkeep+0x1ec>)
 800e372:	4b5e      	ldr	r3, [pc, #376]	@ (800e4ec <Mic_Upkeep+0x1f0>)
 800e374:	2188      	movs	r1, #136	@ 0x88
 800e376:	0018      	movs	r0, r3
 800e378:	f005 fe7c 	bl	8014074 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e37c:	4b59      	ldr	r3, [pc, #356]	@ (800e4e4 <Mic_Upkeep+0x1e8>)
 800e37e:	2202      	movs	r2, #2
 800e380:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e382:	e0a4      	b.n	800e4ce <Mic_Upkeep+0x1d2>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e384:	4b5b      	ldr	r3, [pc, #364]	@ (800e4f4 <Mic_Upkeep+0x1f8>)
 800e386:	2201      	movs	r2, #1
 800e388:	2101      	movs	r1, #1
 800e38a:	0018      	movs	r0, r3
 800e38c:	f003 fa3c 	bl	8011808 <getSoundData>
 800e390:	1e03      	subs	r3, r0, #0
 800e392:	d100      	bne.n	800e396 <Mic_Upkeep+0x9a>
 800e394:	e09d      	b.n	800e4d2 <Mic_Upkeep+0x1d6>
      clearMaximumAmplitude();
 800e396:	f003 fb2f 	bl	80119f8 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e39a:	4b56      	ldr	r3, [pc, #344]	@ (800e4f4 <Mic_Upkeep+0x1f8>)
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	001a      	movs	r2, r3
 800e3a0:	4b54      	ldr	r3, [pc, #336]	@ (800e4f4 <Mic_Upkeep+0x1f8>)
 800e3a2:	785b      	ldrb	r3, [r3, #1]
 800e3a4:	4954      	ldr	r1, [pc, #336]	@ (800e4f8 <Mic_Upkeep+0x1fc>)
 800e3a6:	0038      	movs	r0, r7
 800e3a8:	f018 f890 	bl	80264cc <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e3ac:	4b51      	ldr	r3, [pc, #324]	@ (800e4f4 <Mic_Upkeep+0x1f8>)
 800e3ae:	89db      	ldrh	r3, [r3, #14]
 800e3b0:	001a      	movs	r2, r3
 800e3b2:	4b50      	ldr	r3, [pc, #320]	@ (800e4f4 <Mic_Upkeep+0x1f8>)
 800e3b4:	7c1b      	ldrb	r3, [r3, #16]
 800e3b6:	4951      	ldr	r1, [pc, #324]	@ (800e4fc <Mic_Upkeep+0x200>)
 800e3b8:	4851      	ldr	r0, [pc, #324]	@ (800e500 <Mic_Upkeep+0x204>)
 800e3ba:	f018 f887 	bl	80264cc <siprintf>
      dBValue = atof(dBbuffer);
 800e3be:	003b      	movs	r3, r7
 800e3c0:	0018      	movs	r0, r3
 800e3c2:	f016 fc29 	bl	8024c18 <atof>
 800e3c6:	0002      	movs	r2, r0
 800e3c8:	000b      	movs	r3, r1
 800e3ca:	0010      	movs	r0, r2
 800e3cc:	0019      	movs	r1, r3
 800e3ce:	f7f5 faa9 	bl	8003924 <__aeabi_d2f>
 800e3d2:	1c02      	adds	r2, r0, #0
 800e3d4:	4b4b      	ldr	r3, [pc, #300]	@ (800e504 <Mic_Upkeep+0x208>)
 800e3d6:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e3d8:	4b4a      	ldr	r3, [pc, #296]	@ (800e504 <Mic_Upkeep+0x208>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	494a      	ldr	r1, [pc, #296]	@ (800e508 <Mic_Upkeep+0x20c>)
 800e3de:	1c18      	adds	r0, r3, #0
 800e3e0:	f7f2 fe2e 	bl	8001040 <__aeabi_fmul>
 800e3e4:	1c03      	adds	r3, r0, #0
 800e3e6:	1c18      	adds	r0, r3, #0
 800e3e8:	f7f5 fa54 	bl	8003894 <__aeabi_f2d>
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	4b47      	ldr	r3, [pc, #284]	@ (800e50c <Mic_Upkeep+0x210>)
 800e3f0:	f7f3 fab0 	bl	8001954 <__aeabi_dadd>
 800e3f4:	0002      	movs	r2, r0
 800e3f6:	000b      	movs	r3, r1
 800e3f8:	0010      	movs	r0, r2
 800e3fa:	0019      	movs	r1, r3
 800e3fc:	f7f5 f9bc 	bl	8003778 <__aeabi_d2iz>
 800e400:	0003      	movs	r3, r0
 800e402:	0018      	movs	r0, r3
 800e404:	f7f5 f9f4 	bl	80037f0 <__aeabi_i2d>
 800e408:	2200      	movs	r2, #0
 800e40a:	4b41      	ldr	r3, [pc, #260]	@ (800e510 <Mic_Upkeep+0x214>)
 800e40c:	f7f3 fe68 	bl	80020e0 <__aeabi_ddiv>
 800e410:	0002      	movs	r2, r0
 800e412:	000b      	movs	r3, r1
 800e414:	0010      	movs	r0, r2
 800e416:	0019      	movs	r1, r3
 800e418:	f7f5 fa84 	bl	8003924 <__aeabi_d2f>
 800e41c:	1c02      	adds	r2, r0, #0
 800e41e:	4b39      	ldr	r3, [pc, #228]	@ (800e504 <Mic_Upkeep+0x208>)
 800e420:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e422:	f7ff fdcf 	bl	800dfc4 <MIC_Print>
      if (!startSPLcalculation()) {
 800e426:	f003 fb95 	bl	8011b54 <startSPLcalculation>
 800e42a:	0003      	movs	r3, r0
 800e42c:	001a      	movs	r2, r3
 800e42e:	2301      	movs	r3, #1
 800e430:	4053      	eors	r3, r2
 800e432:	b2db      	uxtb	r3, r3
 800e434:	2b00      	cmp	r3, #0
 800e436:	d005      	beq.n	800e444 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e438:	4a2b      	ldr	r2, [pc, #172]	@ (800e4e8 <Mic_Upkeep+0x1ec>)
 800e43a:	4b2c      	ldr	r3, [pc, #176]	@ (800e4ec <Mic_Upkeep+0x1f0>)
 800e43c:	2198      	movs	r1, #152	@ 0x98
 800e43e:	0018      	movs	r0, r3
 800e440:	f005 fe18 	bl	8014074 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e444:	2000      	movs	r0, #0
 800e446:	f003 fb1b 	bl	8011a80 <enableMicrophone>
 800e44a:	0003      	movs	r3, r0
 800e44c:	001a      	movs	r2, r3
 800e44e:	2301      	movs	r3, #1
 800e450:	4053      	eors	r3, r2
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b00      	cmp	r3, #0
 800e456:	d005      	beq.n	800e464 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e458:	4a23      	ldr	r2, [pc, #140]	@ (800e4e8 <Mic_Upkeep+0x1ec>)
 800e45a:	4b24      	ldr	r3, [pc, #144]	@ (800e4ec <Mic_Upkeep+0x1f0>)
 800e45c:	219b      	movs	r1, #155	@ 0x9b
 800e45e:	0018      	movs	r0, r3
 800e460:	f005 fe08 	bl	8014074 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 430;  // about twice second
 800e464:	f006 fa96 	bl	8014994 <HAL_GetTick>
 800e468:	0003      	movs	r3, r0
 800e46a:	33af      	adds	r3, #175	@ 0xaf
 800e46c:	33ff      	adds	r3, #255	@ 0xff
 800e46e:	001a      	movs	r2, r3
 800e470:	4b28      	ldr	r3, [pc, #160]	@ (800e514 <Mic_Upkeep+0x218>)
 800e472:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e474:	4b1b      	ldr	r3, [pc, #108]	@ (800e4e4 <Mic_Upkeep+0x1e8>)
 800e476:	2203      	movs	r2, #3
 800e478:	701a      	strb	r2, [r3, #0]
      ResetChargeIndicator();
 800e47a:	f004 faeb 	bl	8012a54 <ResetChargeIndicator>
    }
    break;
 800e47e:	e028      	b.n	800e4d2 <Mic_Upkeep+0x1d6>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e480:	4b24      	ldr	r3, [pc, #144]	@ (800e514 <Mic_Upkeep+0x218>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	0018      	movs	r0, r3
 800e486:	f005 fcaf 	bl	8013de8 <TimestampIsReached>
 800e48a:	1e03      	subs	r3, r0, #0
 800e48c:	d023      	beq.n	800e4d6 <Mic_Upkeep+0x1da>
      if (!enableMicrophone(true)) {
 800e48e:	2001      	movs	r0, #1
 800e490:	f003 faf6 	bl	8011a80 <enableMicrophone>
 800e494:	0003      	movs	r3, r0
 800e496:	001a      	movs	r2, r3
 800e498:	2301      	movs	r3, #1
 800e49a:	4053      	eors	r3, r2
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d005      	beq.n	800e4ae <Mic_Upkeep+0x1b2>
        errorHandler(__func__, __LINE__, __FILE__);
 800e4a2:	4a11      	ldr	r2, [pc, #68]	@ (800e4e8 <Mic_Upkeep+0x1ec>)
 800e4a4:	4b11      	ldr	r3, [pc, #68]	@ (800e4ec <Mic_Upkeep+0x1f0>)
 800e4a6:	21a6      	movs	r1, #166	@ 0xa6
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f005 fde3 	bl	8014074 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e4e4 <Mic_Upkeep+0x1e8>)
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	701a      	strb	r2, [r3, #0]
      SetChargeIndicator();
 800e4b4:	f004 fa8e 	bl	80129d4 <SetChargeIndicator>
    }
    break;
 800e4b8:	e00d      	b.n	800e4d6 <Mic_Upkeep+0x1da>

  default:
    Debug("Unexpected occurrence happened");
 800e4ba:	4a17      	ldr	r2, [pc, #92]	@ (800e518 <Mic_Upkeep+0x21c>)
 800e4bc:	4b17      	ldr	r3, [pc, #92]	@ (800e51c <Mic_Upkeep+0x220>)
 800e4be:	0019      	movs	r1, r3
 800e4c0:	2003      	movs	r0, #3
 800e4c2:	f005 fce7 	bl	8013e94 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e4c6:	4b07      	ldr	r3, [pc, #28]	@ (800e4e4 <Mic_Upkeep+0x1e8>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	701a      	strb	r2, [r3, #0]
    break;
 800e4cc:	e004      	b.n	800e4d8 <Mic_Upkeep+0x1dc>
    break;
 800e4ce:	46c0      	nop			@ (mov r8, r8)
 800e4d0:	e002      	b.n	800e4d8 <Mic_Upkeep+0x1dc>
    break;
 800e4d2:	46c0      	nop			@ (mov r8, r8)
 800e4d4:	e000      	b.n	800e4d8 <Mic_Upkeep+0x1dc>
    break;
 800e4d6:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e4d8:	4b02      	ldr	r3, [pc, #8]	@ (800e4e4 <Mic_Upkeep+0x1e8>)
 800e4da:	781b      	ldrb	r3, [r3, #0]
}
 800e4dc:	0018      	movs	r0, r3
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	b002      	add	sp, #8
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	20001196 	.word	0x20001196
 800e4e8:	0802d1fc 	.word	0x0802d1fc
 800e4ec:	0802e710 	.word	0x0802e710
 800e4f0:	200012b1 	.word	0x200012b1
 800e4f4:	20001184 	.word	0x20001184
 800e4f8:	0802d218 	.word	0x0802d218
 800e4fc:	0802d220 	.word	0x0802d220
 800e500:	20001134 	.word	0x20001134
 800e504:	20001174 	.word	0x20001174
 800e508:	42c80000 	.word	0x42c80000
 800e50c:	3fe00000 	.word	0x3fe00000
 800e510:	40590000 	.word	0x40590000
 800e514:	20001180 	.word	0x20001180
 800e518:	0802d228 	.word	0x0802d228
 800e51c:	0802d248 	.word	0x0802d248

0800e520 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e526:	1d3b      	adds	r3, r7, #4
 800e528:	0018      	movs	r0, r3
 800e52a:	2314      	movs	r3, #20
 800e52c:	001a      	movs	r2, r3
 800e52e:	2100      	movs	r1, #0
 800e530:	f018 f914 	bl	802675c <memset>
  RTC_DateTypeDef sDate = {0};
 800e534:	003b      	movs	r3, r7
 800e536:	2200      	movs	r2, #0
 800e538:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e53a:	4b2e      	ldr	r3, [pc, #184]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e53c:	4a2e      	ldr	r2, [pc, #184]	@ (800e5f8 <MX_RTC_Init+0xd8>)
 800e53e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e540:	4b2c      	ldr	r3, [pc, #176]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e542:	2200      	movs	r2, #0
 800e544:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e546:	4b2b      	ldr	r3, [pc, #172]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e548:	227f      	movs	r2, #127	@ 0x7f
 800e54a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e54c:	4b29      	ldr	r3, [pc, #164]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e54e:	22ff      	movs	r2, #255	@ 0xff
 800e550:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e552:	4b28      	ldr	r3, [pc, #160]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e554:	2200      	movs	r2, #0
 800e556:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e558:	4b26      	ldr	r3, [pc, #152]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e55e:	4b25      	ldr	r3, [pc, #148]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e560:	2200      	movs	r2, #0
 800e562:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e564:	4b23      	ldr	r3, [pc, #140]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e566:	2200      	movs	r2, #0
 800e568:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e56a:	4b22      	ldr	r3, [pc, #136]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e56c:	0018      	movs	r0, r3
 800e56e:	f00d fdf1 	bl	801c154 <HAL_RTC_Init>
 800e572:	1e03      	subs	r3, r0, #0
 800e574:	d001      	beq.n	800e57a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e576:	f7fe ff7b 	bl	800d470 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e57a:	1d3b      	adds	r3, r7, #4
 800e57c:	220d      	movs	r2, #13
 800e57e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e580:	1d3b      	adds	r3, r7, #4
 800e582:	2200      	movs	r2, #0
 800e584:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e586:	1d3b      	adds	r3, r7, #4
 800e588:	2200      	movs	r2, #0
 800e58a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e58c:	1d3b      	adds	r3, r7, #4
 800e58e:	2200      	movs	r2, #0
 800e590:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e592:	1d3b      	adds	r3, r7, #4
 800e594:	2200      	movs	r2, #0
 800e596:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e598:	1d39      	adds	r1, r7, #4
 800e59a:	4b16      	ldr	r3, [pc, #88]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	0018      	movs	r0, r3
 800e5a0:	f00d fe74 	bl	801c28c <HAL_RTC_SetTime>
 800e5a4:	1e03      	subs	r3, r0, #0
 800e5a6:	d001      	beq.n	800e5ac <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e5a8:	f7fe ff62 	bl	800d470 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e5ac:	003b      	movs	r3, r7
 800e5ae:	2206      	movs	r2, #6
 800e5b0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e5b2:	003b      	movs	r3, r7
 800e5b4:	2211      	movs	r2, #17
 800e5b6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e5b8:	003b      	movs	r3, r7
 800e5ba:	2217      	movs	r2, #23
 800e5bc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e5be:	003b      	movs	r3, r7
 800e5c0:	2218      	movs	r2, #24
 800e5c2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e5c4:	0039      	movs	r1, r7
 800e5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	0018      	movs	r0, r3
 800e5cc:	f00d ff66 	bl	801c49c <HAL_RTC_SetDate>
 800e5d0:	1e03      	subs	r3, r0, #0
 800e5d2:	d001      	beq.n	800e5d8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e5d4:	f7fe ff4c 	bl	800d470 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e5d8:	4b06      	ldr	r3, [pc, #24]	@ (800e5f4 <MX_RTC_Init+0xd4>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	2100      	movs	r1, #0
 800e5de:	0018      	movs	r0, r3
 800e5e0:	f00e f934 	bl	801c84c <HAL_RTCEx_SetWakeUpTimer_IT>
 800e5e4:	1e03      	subs	r3, r0, #0
 800e5e6:	d001      	beq.n	800e5ec <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e5e8:	f7fe ff42 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e5ec:	46c0      	nop			@ (mov r8, r8)
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	b006      	add	sp, #24
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20001198 	.word	0x20001198
 800e5f8:	40002800 	.word	0x40002800

0800e5fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a0a      	ldr	r2, [pc, #40]	@ (800e634 <HAL_RTC_MspInit+0x38>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d10e      	bne.n	800e62c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e60e:	4b0a      	ldr	r3, [pc, #40]	@ (800e638 <HAL_RTC_MspInit+0x3c>)
 800e610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e612:	4b09      	ldr	r3, [pc, #36]	@ (800e638 <HAL_RTC_MspInit+0x3c>)
 800e614:	2180      	movs	r1, #128	@ 0x80
 800e616:	02c9      	lsls	r1, r1, #11
 800e618:	430a      	orrs	r2, r1
 800e61a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e61c:	2200      	movs	r2, #0
 800e61e:	2100      	movs	r1, #0
 800e620:	2002      	movs	r0, #2
 800e622:	f006 fe2b 	bl	801527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e626:	2002      	movs	r0, #2
 800e628:	f006 fe3d 	bl	80152a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e62c:	46c0      	nop			@ (mov r8, r8)
 800e62e:	46bd      	mov	sp, r7
 800e630:	b002      	add	sp, #8
 800e632:	bd80      	pop	{r7, pc}
 800e634:	40002800 	.word	0x40002800
 800e638:	40021000 	.word	0x40021000

0800e63c <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e63c:	b580      	push	{r7, lr}
 800e63e:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e640:	4b02      	ldr	r3, [pc, #8]	@ (800e64c <sen5x_Get_sen5x_enable_state+0x10>)
 800e642:	781b      	ldrb	r3, [r3, #0]
}
 800e644:	0018      	movs	r0, r3
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	46c0      	nop			@ (mov r8, r8)
 800e64c:	200011bf 	.word	0x200011bf

0800e650 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	0002      	movs	r2, r0
 800e658:	1dfb      	adds	r3, r7, #7
 800e65a:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e65c:	4b03      	ldr	r3, [pc, #12]	@ (800e66c <sen5x_Set_sen5x_state+0x1c>)
 800e65e:	1dfa      	adds	r2, r7, #7
 800e660:	7812      	ldrb	r2, [r2, #0]
 800e662:	701a      	strb	r2, [r3, #0]
}
 800e664:	46c0      	nop			@ (mov r8, r8)
 800e666:	46bd      	mov	sp, r7
 800e668:	b002      	add	sp, #8
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	200011bf 	.word	0x200011bf

0800e670 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e678:	f006 f98c 	bl	8014994 <HAL_GetTick>
 800e67c:	0002      	movs	r2, r0
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	18d2      	adds	r2, r2, r3
 800e682:	4b03      	ldr	r3, [pc, #12]	@ (800e690 <setsen5xReadTimer+0x20>)
 800e684:	601a      	str	r2, [r3, #0]
}
 800e686:	46c0      	nop			@ (mov r8, r8)
 800e688:	46bd      	mov	sp, r7
 800e68a:	b002      	add	sp, #8
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	46c0      	nop			@ (mov r8, r8)
 800e690:	200011cc 	.word	0x200011cc

0800e694 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	0002      	movs	r2, r0
 800e69c:	1dfb      	adds	r3, r7, #7
 800e69e:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e6a0:	4b03      	ldr	r3, [pc, #12]	@ (800e6b0 <setsen5xSamplecounter+0x1c>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	701a      	strb	r2, [r3, #0]
}
 800e6a6:	46c0      	nop			@ (mov r8, r8)
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	b002      	add	sp, #8
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	46c0      	nop			@ (mov r8, r8)
 800e6b0:	200011c8 	.word	0x200011c8

0800e6b4 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e6bc:	f7fe ff90 	bl	800d5e0 <IsPMSensorEnabled>
 800e6c0:	1e03      	subs	r3, r0, #0
 800e6c2:	d034      	beq.n	800e72e <sen5x_enable+0x7a>
    if (batteryStatus == BATTERY_FULL) {
 800e6c4:	4b21      	ldr	r3, [pc, #132]	@ (800e74c <sen5x_enable+0x98>)
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	d103      	bne.n	800e6d4 <sen5x_enable+0x20>
      sen5x_Enable = true;
 800e6cc:	4b20      	ldr	r3, [pc, #128]	@ (800e750 <sen5x_enable+0x9c>)
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	701a      	strb	r2, [r3, #0]
 800e6d2:	e00d      	b.n	800e6f0 <sen5x_enable+0x3c>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e6d4:	4b1e      	ldr	r3, [pc, #120]	@ (800e750 <sen5x_enable+0x9c>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	1e5a      	subs	r2, r3, #1
 800e6da:	4193      	sbcs	r3, r2
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2201      	movs	r2, #1
 800e6e0:	4053      	eors	r3, r2
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	1c1a      	adds	r2, r3, #0
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	4b18      	ldr	r3, [pc, #96]	@ (800e750 <sen5x_enable+0x9c>)
 800e6ee:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e6f0:	4b17      	ldr	r3, [pc, #92]	@ (800e750 <sen5x_enable+0x9c>)
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d003      	beq.n	800e700 <sen5x_enable+0x4c>
      setsen5xReadTimer(0);
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	f7ff ffb9 	bl	800e670 <setsen5xReadTimer>
 800e6fe:	e009      	b.n	800e714 <sen5x_enable+0x60>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e700:	f006 f948 	bl	8014994 <HAL_GetTick>
 800e704:	0002      	movs	r2, r0
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2164      	movs	r1, #100	@ 0x64
 800e70a:	434b      	muls	r3, r1
 800e70c:	18d3      	adds	r3, r2, r3
 800e70e:	0018      	movs	r0, r3
 800e710:	f7ff ffae 	bl	800e670 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e714:	4b0e      	ldr	r3, [pc, #56]	@ (800e750 <sen5x_enable+0x9c>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <sen5x_enable+0x6c>
 800e71c:	4b0d      	ldr	r3, [pc, #52]	@ (800e754 <sen5x_enable+0xa0>)
 800e71e:	e000      	b.n	800e722 <sen5x_enable+0x6e>
 800e720:	4b0d      	ldr	r3, [pc, #52]	@ (800e758 <sen5x_enable+0xa4>)
 800e722:	4a0e      	ldr	r2, [pc, #56]	@ (800e75c <sen5x_enable+0xa8>)
 800e724:	490e      	ldr	r1, [pc, #56]	@ (800e760 <sen5x_enable+0xac>)
 800e726:	2002      	movs	r0, #2
 800e728:	f005 fbb4 	bl	8013e94 <CreateLine>
 800e72c:	e005      	b.n	800e73a <sen5x_enable+0x86>
  }
  else {
    Info("sen5x measurement is disabled");
 800e72e:	4a0d      	ldr	r2, [pc, #52]	@ (800e764 <sen5x_enable+0xb0>)
 800e730:	4b0b      	ldr	r3, [pc, #44]	@ (800e760 <sen5x_enable+0xac>)
 800e732:	0019      	movs	r1, r3
 800e734:	2002      	movs	r0, #2
 800e736:	f005 fbad 	bl	8013e94 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e73a:	4b0b      	ldr	r3, [pc, #44]	@ (800e768 <sen5x_enable+0xb4>)
 800e73c:	2201      	movs	r2, #1
 800e73e:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e740:	4b03      	ldr	r3, [pc, #12]	@ (800e750 <sen5x_enable+0x9c>)
 800e742:	781b      	ldrb	r3, [r3, #0]
}
 800e744:	0018      	movs	r0, r3
 800e746:	46bd      	mov	sp, r7
 800e748:	b002      	add	sp, #8
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	2000215d 	.word	0x2000215d
 800e750:	200011bf 	.word	0x200011bf
 800e754:	0802d24c 	.word	0x0802d24c
 800e758:	0802d254 	.word	0x0802d254
 800e75c:	0802d260 	.word	0x0802d260
 800e760:	0802d27c 	.word	0x0802d27c
 800e764:	0802d280 	.word	0x0802d280
 800e768:	200000aa 	.word	0x200000aa

0800e76c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e76c:	b580      	push	{r7, lr}
 800e76e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e770:	2380      	movs	r3, #128	@ 0x80
 800e772:	015b      	lsls	r3, r3, #5
 800e774:	480f      	ldr	r0, [pc, #60]	@ (800e7b4 <sen5x_Power_On+0x48>)
 800e776:	2201      	movs	r2, #1
 800e778:	0019      	movs	r1, r3
 800e77a:	f007 fb72 	bl	8015e62 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e77e:	4a0e      	ldr	r2, [pc, #56]	@ (800e7b8 <sen5x_Power_On+0x4c>)
 800e780:	4b0e      	ldr	r3, [pc, #56]	@ (800e7bc <sen5x_Power_On+0x50>)
 800e782:	0019      	movs	r1, r3
 800e784:	2003      	movs	r0, #3
 800e786:	f005 fb85 	bl	8013e94 <CreateLine>
  HAL_Delay(150);
 800e78a:	2096      	movs	r0, #150	@ 0x96
 800e78c:	f006 f90c 	bl	80149a8 <HAL_Delay>
  if (sen5x_device_reset()) {
 800e790:	f001 f9f6 	bl	800fb80 <sen5x_device_reset>
 800e794:	1e03      	subs	r3, r0, #0
 800e796:	d006      	beq.n	800e7a6 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e798:	4a09      	ldr	r2, [pc, #36]	@ (800e7c0 <sen5x_Power_On+0x54>)
 800e79a:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c4 <sen5x_Power_On+0x58>)
 800e79c:	0019      	movs	r1, r3
 800e79e:	2001      	movs	r0, #1
 800e7a0:	f005 fb78 	bl	8013e94 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e7a4:	e002      	b.n	800e7ac <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e7a6:	4b08      	ldr	r3, [pc, #32]	@ (800e7c8 <sen5x_Power_On+0x5c>)
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	701a      	strb	r2, [r3, #0]
}
 800e7ac:	46c0      	nop			@ (mov r8, r8)
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	46c0      	nop			@ (mov r8, r8)
 800e7b4:	50000800 	.word	0x50000800
 800e7b8:	0802d2a0 	.word	0x0802d2a0
 800e7bc:	0802d2bc 	.word	0x0802d2bc
 800e7c0:	0802d2c0 	.word	0x0802d2c0
 800e7c4:	0802d2e8 	.word	0x0802d2e8
 800e7c8:	200011bd 	.word	0x200011bd

0800e7cc <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e7d0:	4b0e      	ldr	r3, [pc, #56]	@ (800e80c <sen5x_Power_Off+0x40>)
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d006      	beq.n	800e7e6 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e7d8:	4a0d      	ldr	r2, [pc, #52]	@ (800e810 <sen5x_Power_Off+0x44>)
 800e7da:	4b0e      	ldr	r3, [pc, #56]	@ (800e814 <sen5x_Power_Off+0x48>)
 800e7dc:	0019      	movs	r1, r3
 800e7de:	2003      	movs	r0, #3
 800e7e0:	f005 fb58 	bl	8013e94 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e7e4:	e00f      	b.n	800e806 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e7e6:	4a0c      	ldr	r2, [pc, #48]	@ (800e818 <sen5x_Power_Off+0x4c>)
 800e7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e814 <sen5x_Power_Off+0x48>)
 800e7ea:	0019      	movs	r1, r3
 800e7ec:	2003      	movs	r0, #3
 800e7ee:	f005 fb51 	bl	8013e94 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e7f2:	2380      	movs	r3, #128	@ 0x80
 800e7f4:	015b      	lsls	r3, r3, #5
 800e7f6:	4809      	ldr	r0, [pc, #36]	@ (800e81c <sen5x_Power_Off+0x50>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	0019      	movs	r1, r3
 800e7fc:	f007 fb31 	bl	8015e62 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e800:	4b07      	ldr	r3, [pc, #28]	@ (800e820 <sen5x_Power_Off+0x54>)
 800e802:	2200      	movs	r2, #0
 800e804:	701a      	strb	r2, [r3, #0]
}
 800e806:	46c0      	nop			@ (mov r8, r8)
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	200011be 	.word	0x200011be
 800e810:	0802d2ec 	.word	0x0802d2ec
 800e814:	0802d2bc 	.word	0x0802d2bc
 800e818:	0802d31c 	.word	0x0802d31c
 800e81c:	50000800 	.word	0x50000800
 800e820:	200011bd 	.word	0x200011bd

0800e824 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e828:	4b02      	ldr	r3, [pc, #8]	@ (800e834 <reset_fanCleaningDone+0x10>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	701a      	strb	r2, [r3, #0]
}
 800e82e:	46c0      	nop			@ (mov r8, r8)
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	200011bc 	.word	0x200011bc

0800e838 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e83a:	b093      	sub	sp, #76	@ 0x4c
 800e83c:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e83e:	2436      	movs	r4, #54	@ 0x36
 800e840:	193b      	adds	r3, r7, r4
 800e842:	2200      	movs	r2, #0
 800e844:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e846:	2335      	movs	r3, #53	@ 0x35
 800e848:	18fb      	adds	r3, r7, r3
 800e84a:	2220      	movs	r2, #32
 800e84c:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e84e:	2334      	movs	r3, #52	@ 0x34
 800e850:	18fb      	adds	r3, r7, r3
 800e852:	2220      	movs	r2, #32
 800e854:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e856:	f7ff ff89 	bl	800e76c <sen5x_Power_On>
  error = sen5x_device_reset();
 800e85a:	0025      	movs	r5, r4
 800e85c:	193c      	adds	r4, r7, r4
 800e85e:	f001 f98f 	bl	800fb80 <sen5x_device_reset>
 800e862:	0003      	movs	r3, r0
 800e864:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e866:	002c      	movs	r4, r5
 800e868:	193b      	adds	r3, r7, r4
 800e86a:	2200      	movs	r2, #0
 800e86c:	5e9b      	ldrsh	r3, [r3, r2]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00b      	beq.n	800e88a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e872:	193b      	adds	r3, r7, r4
 800e874:	2200      	movs	r2, #0
 800e876:	5e9b      	ldrsh	r3, [r3, r2]
 800e878:	4a77      	ldr	r2, [pc, #476]	@ (800ea58 <probe_sen5x+0x220>)
 800e87a:	4978      	ldr	r1, [pc, #480]	@ (800ea5c <probe_sen5x+0x224>)
 800e87c:	2001      	movs	r0, #1
 800e87e:	f005 fb09 	bl	8013e94 <CreateLine>
      return error;
 800e882:	193b      	adds	r3, r7, r4
 800e884:	2200      	movs	r2, #0
 800e886:	5e9b      	ldrsh	r3, [r3, r2]
 800e888:	e0e2      	b.n	800ea50 <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e88a:	2536      	movs	r5, #54	@ 0x36
 800e88c:	197c      	adds	r4, r7, r5
 800e88e:	2335      	movs	r3, #53	@ 0x35
 800e890:	18fb      	adds	r3, r7, r3
 800e892:	781a      	ldrb	r2, [r3, #0]
 800e894:	230c      	movs	r3, #12
 800e896:	18fb      	adds	r3, r7, r3
 800e898:	0011      	movs	r1, r2
 800e89a:	0018      	movs	r0, r3
 800e89c:	f001 f85c 	bl	800f958 <sen5x_get_serial_number>
 800e8a0:	0003      	movs	r3, r0
 800e8a2:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e8a4:	197b      	adds	r3, r7, r5
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	5e9b      	ldrsh	r3, [r3, r2]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00b      	beq.n	800e8c6 <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800e8ae:	197b      	adds	r3, r7, r5
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	5e9b      	ldrsh	r3, [r3, r2]
 800e8b4:	4a6a      	ldr	r2, [pc, #424]	@ (800ea60 <probe_sen5x+0x228>)
 800e8b6:	4969      	ldr	r1, [pc, #420]	@ (800ea5c <probe_sen5x+0x224>)
 800e8b8:	2001      	movs	r0, #1
 800e8ba:	f005 faeb 	bl	8013e94 <CreateLine>
      return error;
 800e8be:	197b      	adds	r3, r7, r5
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	5e9b      	ldrsh	r3, [r3, r2]
 800e8c4:	e0c4      	b.n	800ea50 <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800e8c6:	230c      	movs	r3, #12
 800e8c8:	18fb      	adds	r3, r7, r3
 800e8ca:	4a66      	ldr	r2, [pc, #408]	@ (800ea64 <probe_sen5x+0x22c>)
 800e8cc:	4966      	ldr	r1, [pc, #408]	@ (800ea68 <probe_sen5x+0x230>)
 800e8ce:	2002      	movs	r0, #2
 800e8d0:	f005 fae0 	bl	8013e94 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e8d4:	2536      	movs	r5, #54	@ 0x36
 800e8d6:	197c      	adds	r4, r7, r5
 800e8d8:	2334      	movs	r3, #52	@ 0x34
 800e8da:	18fb      	adds	r3, r7, r3
 800e8dc:	781a      	ldrb	r2, [r3, #0]
 800e8de:	4b63      	ldr	r3, [pc, #396]	@ (800ea6c <probe_sen5x+0x234>)
 800e8e0:	0011      	movs	r1, r2
 800e8e2:	0018      	movs	r0, r3
 800e8e4:	f000 ffe2 	bl	800f8ac <sen5x_get_product_name>
 800e8e8:	0003      	movs	r3, r0
 800e8ea:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e8ec:	197b      	adds	r3, r7, r5
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	5e9b      	ldrsh	r3, [r3, r2]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00b      	beq.n	800e90e <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800e8f6:	197b      	adds	r3, r7, r5
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	5e9b      	ldrsh	r3, [r3, r2]
 800e8fc:	4a5c      	ldr	r2, [pc, #368]	@ (800ea70 <probe_sen5x+0x238>)
 800e8fe:	4957      	ldr	r1, [pc, #348]	@ (800ea5c <probe_sen5x+0x224>)
 800e900:	2001      	movs	r0, #1
 800e902:	f005 fac7 	bl	8013e94 <CreateLine>
      return error;
 800e906:	197b      	adds	r3, r7, r5
 800e908:	2200      	movs	r2, #0
 800e90a:	5e9b      	ldrsh	r3, [r3, r2]
 800e90c:	e0a0      	b.n	800ea50 <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800e90e:	4b57      	ldr	r3, [pc, #348]	@ (800ea6c <probe_sen5x+0x234>)
 800e910:	4a58      	ldr	r2, [pc, #352]	@ (800ea74 <probe_sen5x+0x23c>)
 800e912:	4955      	ldr	r1, [pc, #340]	@ (800ea68 <probe_sen5x+0x230>)
 800e914:	2002      	movs	r0, #2
 800e916:	f005 fabd 	bl	8013e94 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e91a:	2636      	movs	r6, #54	@ 0x36
 800e91c:	19bc      	adds	r4, r7, r6
 800e91e:	2308      	movs	r3, #8
 800e920:	18fd      	adds	r5, r7, r3
 800e922:	2309      	movs	r3, #9
 800e924:	18fa      	adds	r2, r7, r3
 800e926:	230a      	movs	r3, #10
 800e928:	18f9      	adds	r1, r7, r3
 800e92a:	230b      	movs	r3, #11
 800e92c:	18f8      	adds	r0, r7, r3
 800e92e:	1d7b      	adds	r3, r7, #5
 800e930:	9302      	str	r3, [sp, #8]
 800e932:	1dbb      	adds	r3, r7, #6
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	1dfb      	adds	r3, r7, #7
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	002b      	movs	r3, r5
 800e93c:	f001 f862 	bl	800fa04 <sen5x_get_version>
 800e940:	0003      	movs	r3, r0
 800e942:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e944:	19bb      	adds	r3, r7, r6
 800e946:	2200      	movs	r2, #0
 800e948:	5e9b      	ldrsh	r3, [r3, r2]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00b      	beq.n	800e966 <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800e94e:	19bb      	adds	r3, r7, r6
 800e950:	2200      	movs	r2, #0
 800e952:	5e9b      	ldrsh	r3, [r3, r2]
 800e954:	4a48      	ldr	r2, [pc, #288]	@ (800ea78 <probe_sen5x+0x240>)
 800e956:	4941      	ldr	r1, [pc, #260]	@ (800ea5c <probe_sen5x+0x224>)
 800e958:	2001      	movs	r0, #1
 800e95a:	f005 fa9b 	bl	8013e94 <CreateLine>
      return error;
 800e95e:	19bb      	adds	r3, r7, r6
 800e960:	2200      	movs	r2, #0
 800e962:	5e9b      	ldrsh	r3, [r3, r2]
 800e964:	e074      	b.n	800ea50 <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800e966:	230b      	movs	r3, #11
 800e968:	18fb      	adds	r3, r7, r3
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	001d      	movs	r5, r3
 800e96e:	230a      	movs	r3, #10
 800e970:	18fb      	adds	r3, r7, r3
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	0018      	movs	r0, r3
 800e976:	2308      	movs	r3, #8
 800e978:	18fb      	adds	r3, r7, r3
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	001c      	movs	r4, r3
 800e97e:	1dfb      	adds	r3, r7, #7
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	4a3e      	ldr	r2, [pc, #248]	@ (800ea7c <probe_sen5x+0x244>)
 800e984:	4938      	ldr	r1, [pc, #224]	@ (800ea68 <probe_sen5x+0x230>)
 800e986:	9302      	str	r3, [sp, #8]
 800e988:	9401      	str	r4, [sp, #4]
 800e98a:	9000      	str	r0, [sp, #0]
 800e98c:	002b      	movs	r3, r5
 800e98e:	2002      	movs	r0, #2
 800e990:	f005 fa80 	bl	8013e94 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e994:	2300      	movs	r3, #0
 800e996:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e998:	262e      	movs	r6, #46	@ 0x2e
 800e99a:	19bb      	adds	r3, r7, r6
 800e99c:	2200      	movs	r2, #0
 800e99e:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e9a0:	232c      	movs	r3, #44	@ 0x2c
 800e9a2:	18fb      	adds	r3, r7, r3
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e9a8:	4935      	ldr	r1, [pc, #212]	@ (800ea80 <probe_sen5x+0x248>)
 800e9aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9ac:	f7f2 fb48 	bl	8001040 <__aeabi_fmul>
 800e9b0:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e9b2:	1c18      	adds	r0, r3, #0
 800e9b4:	f7f2 ff18 	bl	80017e8 <__aeabi_f2iz>
 800e9b8:	0003      	movs	r3, r0
 800e9ba:	b218      	sxth	r0, r3
 800e9bc:	2536      	movs	r5, #54	@ 0x36
 800e9be:	197c      	adds	r4, r7, r5
 800e9c0:	232c      	movs	r3, #44	@ 0x2c
 800e9c2:	18fb      	adds	r3, r7, r3
 800e9c4:	881a      	ldrh	r2, [r3, #0]
 800e9c6:	19bb      	adds	r3, r7, r6
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	5e5b      	ldrsh	r3, [r3, r1]
 800e9cc:	0019      	movs	r1, r3
 800e9ce:	f000 ff09 	bl	800f7e4 <sen5x_set_temperature_offset_parameters>
 800e9d2:	0003      	movs	r3, r0
 800e9d4:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e9d6:	197b      	adds	r3, r7, r5
 800e9d8:	2200      	movs	r2, #0
 800e9da:	5e9b      	ldrsh	r3, [r3, r2]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00b      	beq.n	800e9f8 <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e9e0:	197b      	adds	r3, r7, r5
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	5e9b      	ldrsh	r3, [r3, r2]
 800e9e6:	4a27      	ldr	r2, [pc, #156]	@ (800ea84 <probe_sen5x+0x24c>)
 800e9e8:	491c      	ldr	r1, [pc, #112]	@ (800ea5c <probe_sen5x+0x224>)
 800e9ea:	2001      	movs	r0, #1
 800e9ec:	f005 fa52 	bl	8013e94 <CreateLine>
      return error;
 800e9f0:	197b      	adds	r3, r7, r5
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	5e9b      	ldrsh	r3, [r3, r2]
 800e9f6:	e02b      	b.n	800ea50 <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e9f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9fa:	f7f4 ff4b 	bl	8003894 <__aeabi_f2d>
 800e9fe:	0002      	movs	r2, r0
 800ea00:	000b      	movs	r3, r1
 800ea02:	4821      	ldr	r0, [pc, #132]	@ (800ea88 <probe_sen5x+0x250>)
 800ea04:	4918      	ldr	r1, [pc, #96]	@ (800ea68 <probe_sen5x+0x230>)
 800ea06:	9200      	str	r2, [sp, #0]
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	0002      	movs	r2, r0
 800ea0c:	2002      	movs	r0, #2
 800ea0e:	f005 fa41 	bl	8013e94 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800ea12:	f7fb f965 	bl	8009ce0 <Check_USB_PowerOn>
 800ea16:	0003      	movs	r3, r0
 800ea18:	001a      	movs	r2, r3
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	4053      	eors	r3, r2
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00a      	beq.n	800ea3a <probe_sen5x+0x202>
    sen5x_Power_Off();
 800ea24:	f7ff fed2 	bl	800e7cc <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800ea28:	f005 ffb4 	bl	8014994 <HAL_GetTick>
 800ea2c:	0003      	movs	r3, r0
 800ea2e:	22fa      	movs	r2, #250	@ 0xfa
 800ea30:	00d2      	lsls	r2, r2, #3
 800ea32:	189a      	adds	r2, r3, r2
 800ea34:	4b15      	ldr	r3, [pc, #84]	@ (800ea8c <probe_sen5x+0x254>)
 800ea36:	601a      	str	r2, [r3, #0]
 800ea38:	e006      	b.n	800ea48 <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800ea3a:	f005 ffab 	bl	8014994 <HAL_GetTick>
 800ea3e:	0003      	movs	r3, r0
 800ea40:	4a13      	ldr	r2, [pc, #76]	@ (800ea90 <probe_sen5x+0x258>)
 800ea42:	189a      	adds	r2, r3, r2
 800ea44:	4b11      	ldr	r3, [pc, #68]	@ (800ea8c <probe_sen5x+0x254>)
 800ea46:	601a      	str	r2, [r3, #0]
  }
  return error;
 800ea48:	2336      	movs	r3, #54	@ 0x36
 800ea4a:	18fb      	adds	r3, r7, r3
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ea50:	0018      	movs	r0, r3
 800ea52:	46bd      	mov	sp, r7
 800ea54:	b00f      	add	sp, #60	@ 0x3c
 800ea56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea58:	0802d338 	.word	0x0802d338
 800ea5c:	0802d2e8 	.word	0x0802d2e8
 800ea60:	0802d364 	.word	0x0802d364
 800ea64:	0802d394 	.word	0x0802d394
 800ea68:	0802d27c 	.word	0x0802d27c
 800ea6c:	200011c0 	.word	0x200011c0
 800ea70:	0802d3a8 	.word	0x0802d3a8
 800ea74:	0802d3d8 	.word	0x0802d3d8
 800ea78:	0802d3ec 	.word	0x0802d3ec
 800ea7c:	0802d414 	.word	0x0802d414
 800ea80:	43480000 	.word	0x43480000
 800ea84:	0802d438 	.word	0x0802d438
 800ea88:	0802d478 	.word	0x0802d478
 800ea8c:	200011cc 	.word	0x200011cc
 800ea90:	00006d60 	.word	0x00006d60

0800ea94 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800ea94:	b590      	push	{r4, r7, lr}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800ea9a:	1dbb      	adds	r3, r7, #6
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800eaa0:	4b1b      	ldr	r3, [pc, #108]	@ (800eb10 <sen5x_lightup_measurement+0x7c>)
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00b      	beq.n	800eac0 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800eaa8:	4a1a      	ldr	r2, [pc, #104]	@ (800eb14 <sen5x_lightup_measurement+0x80>)
 800eaaa:	4b1b      	ldr	r3, [pc, #108]	@ (800eb18 <sen5x_lightup_measurement+0x84>)
 800eaac:	0019      	movs	r1, r3
 800eaae:	2002      	movs	r0, #2
 800eab0:	f005 f9f0 	bl	8013e94 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800eab4:	1dbc      	adds	r4, r7, #6
 800eab6:	f000 fd21 	bl	800f4fc <sen5x_start_measurement_without_pm>
 800eaba:	0003      	movs	r3, r0
 800eabc:	8023      	strh	r3, [r4, #0]
 800eabe:	e00a      	b.n	800ead6 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800eac0:	4a16      	ldr	r2, [pc, #88]	@ (800eb1c <sen5x_lightup_measurement+0x88>)
 800eac2:	4b15      	ldr	r3, [pc, #84]	@ (800eb18 <sen5x_lightup_measurement+0x84>)
 800eac4:	0019      	movs	r1, r3
 800eac6:	2002      	movs	r0, #2
 800eac8:	f005 f9e4 	bl	8013e94 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800eacc:	1dbc      	adds	r4, r7, #6
 800eace:	f000 fce7 	bl	800f4a0 <sen5x_start_measurement>
 800ead2:	0003      	movs	r3, r0
 800ead4:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800ead6:	1dbb      	adds	r3, r7, #6
 800ead8:	2200      	movs	r2, #0
 800eada:	5e9b      	ldrsh	r3, [r3, r2]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d008      	beq.n	800eaf2 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800eae0:	1dbb      	adds	r3, r7, #6
 800eae2:	2200      	movs	r2, #0
 800eae4:	5e9b      	ldrsh	r3, [r3, r2]
 800eae6:	4a0e      	ldr	r2, [pc, #56]	@ (800eb20 <sen5x_lightup_measurement+0x8c>)
 800eae8:	490e      	ldr	r1, [pc, #56]	@ (800eb24 <sen5x_lightup_measurement+0x90>)
 800eaea:	2001      	movs	r0, #1
 800eaec:	f005 f9d2 	bl	8013e94 <CreateLine>
 800eaf0:	e007      	b.n	800eb02 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800eaf2:	f7fb f9fd 	bl	8009ef0 <showTime>
    Info("sen5x_start_measurement executed");
 800eaf6:	4a0c      	ldr	r2, [pc, #48]	@ (800eb28 <sen5x_lightup_measurement+0x94>)
 800eaf8:	4b07      	ldr	r3, [pc, #28]	@ (800eb18 <sen5x_lightup_measurement+0x84>)
 800eafa:	0019      	movs	r1, r3
 800eafc:	2002      	movs	r0, #2
 800eafe:	f005 f9c9 	bl	8013e94 <CreateLine>
  }
  return error;
 800eb02:	1dbb      	adds	r3, r7, #6
 800eb04:	2200      	movs	r2, #0
 800eb06:	5e9b      	ldrsh	r3, [r3, r2]
}
 800eb08:	0018      	movs	r0, r3
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	b003      	add	sp, #12
 800eb0e:	bd90      	pop	{r4, r7, pc}
 800eb10:	200011be 	.word	0x200011be
 800eb14:	0802d4b0 	.word	0x0802d4b0
 800eb18:	0802d27c 	.word	0x0802d27c
 800eb1c:	0802d4dc 	.word	0x0802d4dc
 800eb20:	0802d4fc 	.word	0x0802d4fc
 800eb24:	0802d2e8 	.word	0x0802d2e8
 800eb28:	0802d52c 	.word	0x0802d52c

0800eb2c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800eb2c:	b590      	push	{r4, r7, lr}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800eb32:	1dbb      	adds	r3, r7, #6
 800eb34:	2200      	movs	r2, #0
 800eb36:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800eb38:	4b21      	ldr	r3, [pc, #132]	@ (800ebc0 <sen5x_extinguish_measurement+0x94>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d01e      	beq.n	800eb7e <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800eb40:	4a20      	ldr	r2, [pc, #128]	@ (800ebc4 <sen5x_extinguish_measurement+0x98>)
 800eb42:	4b21      	ldr	r3, [pc, #132]	@ (800ebc8 <sen5x_extinguish_measurement+0x9c>)
 800eb44:	0019      	movs	r1, r3
 800eb46:	2002      	movs	r0, #2
 800eb48:	f005 f9a4 	bl	8013e94 <CreateLine>
    Info("PM measurement is disabled");
 800eb4c:	4a1f      	ldr	r2, [pc, #124]	@ (800ebcc <sen5x_extinguish_measurement+0xa0>)
 800eb4e:	4b1e      	ldr	r3, [pc, #120]	@ (800ebc8 <sen5x_extinguish_measurement+0x9c>)
 800eb50:	0019      	movs	r1, r3
 800eb52:	2002      	movs	r0, #2
 800eb54:	f005 f99e 	bl	8013e94 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800eb58:	1dbc      	adds	r4, r7, #6
 800eb5a:	f000 fccf 	bl	800f4fc <sen5x_start_measurement_without_pm>
 800eb5e:	0003      	movs	r3, r0
 800eb60:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb62:	1dbb      	adds	r3, r7, #6
 800eb64:	2200      	movs	r2, #0
 800eb66:	5e9b      	ldrsh	r3, [r3, r2]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d022      	beq.n	800ebb2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800eb6c:	1dbb      	adds	r3, r7, #6
 800eb6e:	2200      	movs	r2, #0
 800eb70:	5e9b      	ldrsh	r3, [r3, r2]
 800eb72:	4a17      	ldr	r2, [pc, #92]	@ (800ebd0 <sen5x_extinguish_measurement+0xa4>)
 800eb74:	4917      	ldr	r1, [pc, #92]	@ (800ebd4 <sen5x_extinguish_measurement+0xa8>)
 800eb76:	2001      	movs	r0, #1
 800eb78:	f005 f98c 	bl	8013e94 <CreateLine>
 800eb7c:	e019      	b.n	800ebb2 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800eb7e:	1dbc      	adds	r4, r7, #6
 800eb80:	f000 fcea 	bl	800f558 <sen5x_stop_measurement>
 800eb84:	0003      	movs	r3, r0
 800eb86:	8023      	strh	r3, [r4, #0]
    showTime();
 800eb88:	f7fb f9b2 	bl	8009ef0 <showTime>
    Info("sen5x_stop_measurement executed");
 800eb8c:	4a12      	ldr	r2, [pc, #72]	@ (800ebd8 <sen5x_extinguish_measurement+0xac>)
 800eb8e:	4b0e      	ldr	r3, [pc, #56]	@ (800ebc8 <sen5x_extinguish_measurement+0x9c>)
 800eb90:	0019      	movs	r1, r3
 800eb92:	2002      	movs	r0, #2
 800eb94:	f005 f97e 	bl	8013e94 <CreateLine>
    if (error) {
 800eb98:	1dbb      	adds	r3, r7, #6
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	5e9b      	ldrsh	r3, [r3, r2]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d007      	beq.n	800ebb2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800eba2:	1dbb      	adds	r3, r7, #6
 800eba4:	2200      	movs	r2, #0
 800eba6:	5e9b      	ldrsh	r3, [r3, r2]
 800eba8:	4a0c      	ldr	r2, [pc, #48]	@ (800ebdc <sen5x_extinguish_measurement+0xb0>)
 800ebaa:	490a      	ldr	r1, [pc, #40]	@ (800ebd4 <sen5x_extinguish_measurement+0xa8>)
 800ebac:	2001      	movs	r0, #1
 800ebae:	f005 f971 	bl	8013e94 <CreateLine>
    }
  }
  return error;
 800ebb2:	1dbb      	adds	r3, r7, #6
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ebb8:	0018      	movs	r0, r3
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	b003      	add	sp, #12
 800ebbe:	bd90      	pop	{r4, r7, pc}
 800ebc0:	200011be 	.word	0x200011be
 800ebc4:	0802d550 	.word	0x0802d550
 800ebc8:	0802d27c 	.word	0x0802d27c
 800ebcc:	0802d588 	.word	0x0802d588
 800ebd0:	0802d5a4 	.word	0x0802d5a4
 800ebd4:	0802d2e8 	.word	0x0802d2e8
 800ebd8:	0802d5e4 	.word	0x0802d5e4
 800ebdc:	0802d604 	.word	0x0802d604

0800ebe0 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800ebe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebe2:	b08d      	sub	sp, #52	@ 0x34
 800ebe4:	af04      	add	r7, sp, #16
 800ebe6:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800ebe8:	261e      	movs	r6, #30
 800ebea:	19bb      	adds	r3, r7, r6
 800ebec:	2200      	movs	r2, #0
 800ebee:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800ebf0:	19bc      	adds	r4, r7, r6
 800ebf2:	2316      	movs	r3, #22
 800ebf4:	18fd      	adds	r5, r7, r3
 800ebf6:	2318      	movs	r3, #24
 800ebf8:	18fa      	adds	r2, r7, r3
 800ebfa:	231a      	movs	r3, #26
 800ebfc:	18f9      	adds	r1, r7, r3
 800ebfe:	231c      	movs	r3, #28
 800ec00:	18f8      	adds	r0, r7, r3
 800ec02:	230e      	movs	r3, #14
 800ec04:	18fb      	adds	r3, r7, r3
 800ec06:	9303      	str	r3, [sp, #12]
 800ec08:	2310      	movs	r3, #16
 800ec0a:	18fb      	adds	r3, r7, r3
 800ec0c:	9302      	str	r3, [sp, #8]
 800ec0e:	2312      	movs	r3, #18
 800ec10:	18fb      	adds	r3, r7, r3
 800ec12:	9301      	str	r3, [sp, #4]
 800ec14:	2314      	movs	r3, #20
 800ec16:	18fb      	adds	r3, r7, r3
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	002b      	movs	r3, r5
 800ec1c:	f000 fd1e 	bl	800f65c <sen5x_read_measured_values>
 800ec20:	0003      	movs	r3, r0
 800ec22:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800ec24:	19bb      	adds	r3, r7, r6
 800ec26:	2200      	movs	r2, #0
 800ec28:	5e9b      	ldrsh	r3, [r3, r2]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d003      	beq.n	800ec36 <sen5x_read_measurement+0x56>
    return error;
 800ec2e:	19bb      	adds	r3, r7, r6
 800ec30:	2200      	movs	r2, #0
 800ec32:	5e9b      	ldrsh	r3, [r3, r2]
 800ec34:	e02c      	b.n	800ec90 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800ec36:	231c      	movs	r3, #28
 800ec38:	18fb      	adds	r3, r7, r3
 800ec3a:	881a      	ldrh	r2, [r3, #0]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800ec40:	231a      	movs	r3, #26
 800ec42:	18fb      	adds	r3, r7, r3
 800ec44:	881a      	ldrh	r2, [r3, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800ec4a:	2318      	movs	r3, #24
 800ec4c:	18fb      	adds	r3, r7, r3
 800ec4e:	881a      	ldrh	r2, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800ec54:	2316      	movs	r3, #22
 800ec56:	18fb      	adds	r3, r7, r3
 800ec58:	881a      	ldrh	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800ec5e:	2314      	movs	r3, #20
 800ec60:	18fb      	adds	r3, r7, r3
 800ec62:	2200      	movs	r2, #0
 800ec64:	5e9a      	ldrsh	r2, [r3, r2]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800ec6a:	2312      	movs	r3, #18
 800ec6c:	18fb      	adds	r3, r7, r3
 800ec6e:	2200      	movs	r2, #0
 800ec70:	5e9a      	ldrsh	r2, [r3, r2]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800ec76:	2310      	movs	r3, #16
 800ec78:	18fb      	adds	r3, r7, r3
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	5e9a      	ldrsh	r2, [r3, r2]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800ec82:	230e      	movs	r3, #14
 800ec84:	18fb      	adds	r3, r7, r3
 800ec86:	2200      	movs	r2, #0
 800ec88:	5e9a      	ldrsh	r2, [r3, r2]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	81da      	strh	r2, [r3, #14]
  return 0;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	0018      	movs	r0, r3
 800ec92:	46bd      	mov	sp, r7
 800ec94:	b009      	add	sp, #36	@ 0x24
 800ec96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec98 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ec9e:	4b6e      	ldr	r3, [pc, #440]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	4a6e      	ldr	r2, [pc, #440]	@ (800ee5c <sen5x_printvalues+0x1c4>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d017      	beq.n	800ecd8 <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800eca8:	4b6b      	ldr	r3, [pc, #428]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ecaa:	881b      	ldrh	r3, [r3, #0]
 800ecac:	0018      	movs	r0, r3
 800ecae:	f7f2 fdbb 	bl	8001828 <__aeabi_i2f>
 800ecb2:	1c03      	adds	r3, r0, #0
 800ecb4:	496a      	ldr	r1, [pc, #424]	@ (800ee60 <sen5x_printvalues+0x1c8>)
 800ecb6:	1c18      	adds	r0, r3, #0
 800ecb8:	f7f1 fff4 	bl	8000ca4 <__aeabi_fdiv>
 800ecbc:	1c03      	adds	r3, r0, #0
 800ecbe:	1c18      	adds	r0, r3, #0
 800ecc0:	f7f4 fde8 	bl	8003894 <__aeabi_f2d>
 800ecc4:	0002      	movs	r2, r0
 800ecc6:	000b      	movs	r3, r1
 800ecc8:	4866      	ldr	r0, [pc, #408]	@ (800ee64 <sen5x_printvalues+0x1cc>)
 800ecca:	4967      	ldr	r1, [pc, #412]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800eccc:	9200      	str	r2, [sp, #0]
 800ecce:	9301      	str	r3, [sp, #4]
 800ecd0:	0002      	movs	r2, r0
 800ecd2:	2002      	movs	r0, #2
 800ecd4:	f005 f8de 	bl	8013e94 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ecd8:	4b5f      	ldr	r3, [pc, #380]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ecda:	885b      	ldrh	r3, [r3, #2]
 800ecdc:	4a5f      	ldr	r2, [pc, #380]	@ (800ee5c <sen5x_printvalues+0x1c4>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d017      	beq.n	800ed12 <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ece2:	4b5d      	ldr	r3, [pc, #372]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ece4:	885b      	ldrh	r3, [r3, #2]
 800ece6:	0018      	movs	r0, r3
 800ece8:	f7f2 fd9e 	bl	8001828 <__aeabi_i2f>
 800ecec:	1c03      	adds	r3, r0, #0
 800ecee:	495c      	ldr	r1, [pc, #368]	@ (800ee60 <sen5x_printvalues+0x1c8>)
 800ecf0:	1c18      	adds	r0, r3, #0
 800ecf2:	f7f1 ffd7 	bl	8000ca4 <__aeabi_fdiv>
 800ecf6:	1c03      	adds	r3, r0, #0
 800ecf8:	1c18      	adds	r0, r3, #0
 800ecfa:	f7f4 fdcb 	bl	8003894 <__aeabi_f2d>
 800ecfe:	0002      	movs	r2, r0
 800ed00:	000b      	movs	r3, r1
 800ed02:	485a      	ldr	r0, [pc, #360]	@ (800ee6c <sen5x_printvalues+0x1d4>)
 800ed04:	4958      	ldr	r1, [pc, #352]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800ed06:	9200      	str	r2, [sp, #0]
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	0002      	movs	r2, r0
 800ed0c:	2002      	movs	r0, #2
 800ed0e:	f005 f8c1 	bl	8013e94 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ed12:	4b51      	ldr	r3, [pc, #324]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ed14:	889b      	ldrh	r3, [r3, #4]
 800ed16:	4a51      	ldr	r2, [pc, #324]	@ (800ee5c <sen5x_printvalues+0x1c4>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d017      	beq.n	800ed4c <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ed1c:	4b4e      	ldr	r3, [pc, #312]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ed1e:	889b      	ldrh	r3, [r3, #4]
 800ed20:	0018      	movs	r0, r3
 800ed22:	f7f2 fd81 	bl	8001828 <__aeabi_i2f>
 800ed26:	1c03      	adds	r3, r0, #0
 800ed28:	494d      	ldr	r1, [pc, #308]	@ (800ee60 <sen5x_printvalues+0x1c8>)
 800ed2a:	1c18      	adds	r0, r3, #0
 800ed2c:	f7f1 ffba 	bl	8000ca4 <__aeabi_fdiv>
 800ed30:	1c03      	adds	r3, r0, #0
 800ed32:	1c18      	adds	r0, r3, #0
 800ed34:	f7f4 fdae 	bl	8003894 <__aeabi_f2d>
 800ed38:	0002      	movs	r2, r0
 800ed3a:	000b      	movs	r3, r1
 800ed3c:	484c      	ldr	r0, [pc, #304]	@ (800ee70 <sen5x_printvalues+0x1d8>)
 800ed3e:	494a      	ldr	r1, [pc, #296]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800ed40:	9200      	str	r2, [sp, #0]
 800ed42:	9301      	str	r3, [sp, #4]
 800ed44:	0002      	movs	r2, r0
 800ed46:	2002      	movs	r0, #2
 800ed48:	f005 f8a4 	bl	8013e94 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ed4c:	4b42      	ldr	r3, [pc, #264]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ed4e:	88db      	ldrh	r3, [r3, #6]
 800ed50:	4a42      	ldr	r2, [pc, #264]	@ (800ee5c <sen5x_printvalues+0x1c4>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d017      	beq.n	800ed86 <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800ed56:	4b40      	ldr	r3, [pc, #256]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ed58:	88db      	ldrh	r3, [r3, #6]
 800ed5a:	0018      	movs	r0, r3
 800ed5c:	f7f2 fd64 	bl	8001828 <__aeabi_i2f>
 800ed60:	1c03      	adds	r3, r0, #0
 800ed62:	493f      	ldr	r1, [pc, #252]	@ (800ee60 <sen5x_printvalues+0x1c8>)
 800ed64:	1c18      	adds	r0, r3, #0
 800ed66:	f7f1 ff9d 	bl	8000ca4 <__aeabi_fdiv>
 800ed6a:	1c03      	adds	r3, r0, #0
 800ed6c:	1c18      	adds	r0, r3, #0
 800ed6e:	f7f4 fd91 	bl	8003894 <__aeabi_f2d>
 800ed72:	0002      	movs	r2, r0
 800ed74:	000b      	movs	r3, r1
 800ed76:	483f      	ldr	r0, [pc, #252]	@ (800ee74 <sen5x_printvalues+0x1dc>)
 800ed78:	493b      	ldr	r1, [pc, #236]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800ed7a:	9200      	str	r2, [sp, #0]
 800ed7c:	9301      	str	r3, [sp, #4]
 800ed7e:	0002      	movs	r2, r0
 800ed80:	2002      	movs	r0, #2
 800ed82:	f005 f887 	bl	8013e94 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800ed86:	4b34      	ldr	r3, [pc, #208]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ed88:	2208      	movs	r2, #8
 800ed8a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed8c:	4a3a      	ldr	r2, [pc, #232]	@ (800ee78 <sen5x_printvalues+0x1e0>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d018      	beq.n	800edc4 <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800ed92:	4b31      	ldr	r3, [pc, #196]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ed94:	2208      	movs	r2, #8
 800ed96:	5e9b      	ldrsh	r3, [r3, r2]
 800ed98:	0018      	movs	r0, r3
 800ed9a:	f7f2 fd45 	bl	8001828 <__aeabi_i2f>
 800ed9e:	1c03      	adds	r3, r0, #0
 800eda0:	4936      	ldr	r1, [pc, #216]	@ (800ee7c <sen5x_printvalues+0x1e4>)
 800eda2:	1c18      	adds	r0, r3, #0
 800eda4:	f7f1 ff7e 	bl	8000ca4 <__aeabi_fdiv>
 800eda8:	1c03      	adds	r3, r0, #0
 800edaa:	1c18      	adds	r0, r3, #0
 800edac:	f7f4 fd72 	bl	8003894 <__aeabi_f2d>
 800edb0:	0002      	movs	r2, r0
 800edb2:	000b      	movs	r3, r1
 800edb4:	4832      	ldr	r0, [pc, #200]	@ (800ee80 <sen5x_printvalues+0x1e8>)
 800edb6:	492c      	ldr	r1, [pc, #176]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800edb8:	9200      	str	r2, [sp, #0]
 800edba:	9301      	str	r3, [sp, #4]
 800edbc:	0002      	movs	r2, r0
 800edbe:	2002      	movs	r0, #2
 800edc0:	f005 f868 	bl	8013e94 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800edc4:	4b24      	ldr	r3, [pc, #144]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800edc6:	220a      	movs	r2, #10
 800edc8:	5e9b      	ldrsh	r3, [r3, r2]
 800edca:	4a2b      	ldr	r2, [pc, #172]	@ (800ee78 <sen5x_printvalues+0x1e0>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d018      	beq.n	800ee02 <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800edd0:	4b21      	ldr	r3, [pc, #132]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800edd2:	220a      	movs	r2, #10
 800edd4:	5e9b      	ldrsh	r3, [r3, r2]
 800edd6:	0018      	movs	r0, r3
 800edd8:	f7f2 fd26 	bl	8001828 <__aeabi_i2f>
 800eddc:	1c03      	adds	r3, r0, #0
 800edde:	4929      	ldr	r1, [pc, #164]	@ (800ee84 <sen5x_printvalues+0x1ec>)
 800ede0:	1c18      	adds	r0, r3, #0
 800ede2:	f7f1 ff5f 	bl	8000ca4 <__aeabi_fdiv>
 800ede6:	1c03      	adds	r3, r0, #0
 800ede8:	1c18      	adds	r0, r3, #0
 800edea:	f7f4 fd53 	bl	8003894 <__aeabi_f2d>
 800edee:	0002      	movs	r2, r0
 800edf0:	000b      	movs	r3, r1
 800edf2:	4825      	ldr	r0, [pc, #148]	@ (800ee88 <sen5x_printvalues+0x1f0>)
 800edf4:	491c      	ldr	r1, [pc, #112]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800edf6:	9200      	str	r2, [sp, #0]
 800edf8:	9301      	str	r3, [sp, #4]
 800edfa:	0002      	movs	r2, r0
 800edfc:	2002      	movs	r0, #2
 800edfe:	f005 f849 	bl	8013e94 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ee02:	4b15      	ldr	r3, [pc, #84]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ee04:	220c      	movs	r2, #12
 800ee06:	5e9b      	ldrsh	r3, [r3, r2]
 800ee08:	4a1b      	ldr	r2, [pc, #108]	@ (800ee78 <sen5x_printvalues+0x1e0>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d00d      	beq.n	800ee2a <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ee0e:	4b12      	ldr	r3, [pc, #72]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ee10:	220c      	movs	r2, #12
 800ee12:	5e9b      	ldrsh	r3, [r3, r2]
 800ee14:	210a      	movs	r1, #10
 800ee16:	0018      	movs	r0, r3
 800ee18:	f7f1 fa4e 	bl	80002b8 <__divsi3>
 800ee1c:	0003      	movs	r3, r0
 800ee1e:	b21b      	sxth	r3, r3
 800ee20:	4a1a      	ldr	r2, [pc, #104]	@ (800ee8c <sen5x_printvalues+0x1f4>)
 800ee22:	4911      	ldr	r1, [pc, #68]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800ee24:	2002      	movs	r0, #2
 800ee26:	f005 f835 	bl	8013e94 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ee2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ee2c:	220e      	movs	r2, #14
 800ee2e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee30:	4a11      	ldr	r2, [pc, #68]	@ (800ee78 <sen5x_printvalues+0x1e0>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d00d      	beq.n	800ee52 <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ee36:	4b08      	ldr	r3, [pc, #32]	@ (800ee58 <sen5x_printvalues+0x1c0>)
 800ee38:	220e      	movs	r2, #14
 800ee3a:	5e9b      	ldrsh	r3, [r3, r2]
 800ee3c:	210a      	movs	r1, #10
 800ee3e:	0018      	movs	r0, r3
 800ee40:	f7f1 fa3a 	bl	80002b8 <__divsi3>
 800ee44:	0003      	movs	r3, r0
 800ee46:	b21b      	sxth	r3, r3
 800ee48:	4a11      	ldr	r2, [pc, #68]	@ (800ee90 <sen5x_printvalues+0x1f8>)
 800ee4a:	4907      	ldr	r1, [pc, #28]	@ (800ee68 <sen5x_printvalues+0x1d0>)
 800ee4c:	2002      	movs	r0, #2
 800ee4e:	f005 f821 	bl	8013e94 <CreateLine>
  }
}
 800ee52:	46c0      	nop			@ (mov r8, r8)
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	200011d0 	.word	0x200011d0
 800ee5c:	0000ffff 	.word	0x0000ffff
 800ee60:	41200000 	.word	0x41200000
 800ee64:	0802d634 	.word	0x0802d634
 800ee68:	0802d27c 	.word	0x0802d27c
 800ee6c:	0802d65c 	.word	0x0802d65c
 800ee70:	0802d684 	.word	0x0802d684
 800ee74:	0802d6ac 	.word	0x0802d6ac
 800ee78:	00007fff 	.word	0x00007fff
 800ee7c:	42c80000 	.word	0x42c80000
 800ee80:	0802d6d4 	.word	0x0802d6d4
 800ee84:	43480000 	.word	0x43480000
 800ee88:	0802d6f8 	.word	0x0802d6f8
 800ee8c:	0802d71c 	.word	0x0802d71c
 800ee90:	0802d730 	.word	0x0802d730

0800ee94 <sen5xStore>:

void sen5xStore() {
 800ee94:	b5b0      	push	{r4, r5, r7, lr}
 800ee96:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ee98:	4b41      	ldr	r3, [pc, #260]	@ (800efa0 <sen5xStore+0x10c>)
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	4a41      	ldr	r2, [pc, #260]	@ (800efa4 <sen5xStore+0x110>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d004      	beq.n	800eeac <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800eea2:	4b3f      	ldr	r3, [pc, #252]	@ (800efa0 <sen5xStore+0x10c>)
 800eea4:	881b      	ldrh	r3, [r3, #0]
 800eea6:	0018      	movs	r0, r3
 800eea8:	f7f5 fe8c 	bl	8004bc4 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800eeac:	4b3c      	ldr	r3, [pc, #240]	@ (800efa0 <sen5xStore+0x10c>)
 800eeae:	885b      	ldrh	r3, [r3, #2]
 800eeb0:	4a3c      	ldr	r2, [pc, #240]	@ (800efa4 <sen5xStore+0x110>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d004      	beq.n	800eec0 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800eeb6:	4b3a      	ldr	r3, [pc, #232]	@ (800efa0 <sen5xStore+0x10c>)
 800eeb8:	885b      	ldrh	r3, [r3, #2]
 800eeba:	0018      	movs	r0, r3
 800eebc:	f7f5 feae 	bl	8004c1c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800eec0:	4b37      	ldr	r3, [pc, #220]	@ (800efa0 <sen5xStore+0x10c>)
 800eec2:	889b      	ldrh	r3, [r3, #4]
 800eec4:	4a37      	ldr	r2, [pc, #220]	@ (800efa4 <sen5xStore+0x110>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d004      	beq.n	800eed4 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800eeca:	4b35      	ldr	r3, [pc, #212]	@ (800efa0 <sen5xStore+0x10c>)
 800eecc:	889b      	ldrh	r3, [r3, #4]
 800eece:	0018      	movs	r0, r3
 800eed0:	f7f5 fed0 	bl	8004c74 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800eed4:	4b32      	ldr	r3, [pc, #200]	@ (800efa0 <sen5xStore+0x10c>)
 800eed6:	88db      	ldrh	r3, [r3, #6]
 800eed8:	4a32      	ldr	r2, [pc, #200]	@ (800efa4 <sen5xStore+0x110>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d004      	beq.n	800eee8 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800eede:	4b30      	ldr	r3, [pc, #192]	@ (800efa0 <sen5xStore+0x10c>)
 800eee0:	88db      	ldrh	r3, [r3, #6]
 800eee2:	0018      	movs	r0, r3
 800eee4:	f7f5 fef2 	bl	8004ccc <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800eee8:	4b2f      	ldr	r3, [pc, #188]	@ (800efa8 <sen5xStore+0x114>)
 800eeea:	791b      	ldrb	r3, [r3, #4]
 800eeec:	2b34      	cmp	r3, #52	@ 0x34
 800eeee:	d003      	beq.n	800eef8 <sen5xStore+0x64>
 800eef0:	4b2d      	ldr	r3, [pc, #180]	@ (800efa8 <sen5xStore+0x114>)
 800eef2:	791b      	ldrb	r3, [r3, #4]
 800eef4:	2b35      	cmp	r3, #53	@ 0x35
 800eef6:	d14f      	bne.n	800ef98 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800eef8:	4b29      	ldr	r3, [pc, #164]	@ (800efa0 <sen5xStore+0x10c>)
 800eefa:	220a      	movs	r2, #10
 800eefc:	5e9b      	ldrsh	r3, [r3, r2]
 800eefe:	0018      	movs	r0, r3
 800ef00:	f7f2 fc92 	bl	8001828 <__aeabi_i2f>
 800ef04:	1c04      	adds	r4, r0, #0
 800ef06:	4b26      	ldr	r3, [pc, #152]	@ (800efa0 <sen5xStore+0x10c>)
 800ef08:	2208      	movs	r2, #8
 800ef0a:	5e9b      	ldrsh	r3, [r3, r2]
 800ef0c:	0018      	movs	r0, r3
 800ef0e:	f7f2 fc8b 	bl	8001828 <__aeabi_i2f>
 800ef12:	1c03      	adds	r3, r0, #0
 800ef14:	1c19      	adds	r1, r3, #0
 800ef16:	1c20      	adds	r0, r4, #0
 800ef18:	f7f5 ff22 	bl	8004d60 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800ef1c:	4b23      	ldr	r3, [pc, #140]	@ (800efac <sen5xStore+0x118>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2201      	movs	r2, #1
 800ef22:	4053      	eors	r3, r2
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d103      	bne.n	800ef32 <sen5xStore+0x9e>
 800ef2a:	4b21      	ldr	r3, [pc, #132]	@ (800efb0 <sen5xStore+0x11c>)
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d032      	beq.n	800ef98 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800ef32:	4b1b      	ldr	r3, [pc, #108]	@ (800efa0 <sen5xStore+0x10c>)
 800ef34:	220c      	movs	r2, #12
 800ef36:	5e9b      	ldrsh	r3, [r3, r2]
 800ef38:	4a1e      	ldr	r2, [pc, #120]	@ (800efb4 <sen5xStore+0x120>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d019      	beq.n	800ef72 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ef3e:	4b18      	ldr	r3, [pc, #96]	@ (800efa0 <sen5xStore+0x10c>)
 800ef40:	220c      	movs	r2, #12
 800ef42:	5e9b      	ldrsh	r3, [r3, r2]
 800ef44:	210a      	movs	r1, #10
 800ef46:	0018      	movs	r0, r3
 800ef48:	f7f1 f9b6 	bl	80002b8 <__divsi3>
 800ef4c:	0003      	movs	r3, r0
 800ef4e:	b21b      	sxth	r3, r3
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	0018      	movs	r0, r3
 800ef54:	f003 ff02 	bl	8012d5c <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ef58:	4b11      	ldr	r3, [pc, #68]	@ (800efa0 <sen5xStore+0x10c>)
 800ef5a:	220c      	movs	r2, #12
 800ef5c:	5e9b      	ldrsh	r3, [r3, r2]
 800ef5e:	210a      	movs	r1, #10
 800ef60:	0018      	movs	r0, r3
 800ef62:	f7f1 f9a9 	bl	80002b8 <__divsi3>
 800ef66:	0003      	movs	r3, r0
 800ef68:	b21b      	sxth	r3, r3
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	0018      	movs	r0, r3
 800ef6e:	f7f5 fda1 	bl	8004ab4 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800ef72:	4b0b      	ldr	r3, [pc, #44]	@ (800efa0 <sen5xStore+0x10c>)
 800ef74:	220e      	movs	r2, #14
 800ef76:	5e9b      	ldrsh	r3, [r3, r2]
 800ef78:	4a0e      	ldr	r2, [pc, #56]	@ (800efb4 <sen5xStore+0x120>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d00c      	beq.n	800ef98 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800ef7e:	4b08      	ldr	r3, [pc, #32]	@ (800efa0 <sen5xStore+0x10c>)
 800ef80:	220e      	movs	r2, #14
 800ef82:	5e9b      	ldrsh	r3, [r3, r2]
 800ef84:	210a      	movs	r1, #10
 800ef86:	0018      	movs	r0, r3
 800ef88:	f7f1 f996 	bl	80002b8 <__divsi3>
 800ef8c:	0003      	movs	r3, r0
 800ef8e:	b21b      	sxth	r3, r3
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	0018      	movs	r0, r3
 800ef94:	f7f5 fec6 	bl	8004d24 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800ef98:	46c0      	nop			@ (mov r8, r8)
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ef9e:	46c0      	nop			@ (mov r8, r8)
 800efa0:	200011d0 	.word	0x200011d0
 800efa4:	0000ffff 	.word	0x0000ffff
 800efa8:	200011c0 	.word	0x200011c0
 800efac:	200011be 	.word	0x200011be
 800efb0:	2000214d 	.word	0x2000214d
 800efb4:	00007fff 	.word	0x00007fff

0800efb8 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800efb8:	b590      	push	{r4, r7, lr}
 800efba:	b085      	sub	sp, #20
 800efbc:	af02      	add	r7, sp, #8
 800efbe:	6039      	str	r1, [r7, #0]
 800efc0:	0011      	movs	r1, r2
 800efc2:	1dfb      	adds	r3, r7, #7
 800efc4:	1c02      	adds	r2, r0, #0
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	1d3b      	adds	r3, r7, #4
 800efca:	1c0a      	adds	r2, r1, #0
 800efcc:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800efce:	1dfb      	adds	r3, r7, #7
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	18db      	adds	r3, r3, r3
 800efd6:	b299      	uxth	r1, r3
 800efd8:	1d3b      	adds	r3, r7, #4
 800efda:	881b      	ldrh	r3, [r3, #0]
 800efdc:	683a      	ldr	r2, [r7, #0]
 800efde:	4805      	ldr	r0, [pc, #20]	@ (800eff4 <sensirion_i2c_hal_read+0x3c>)
 800efe0:	2464      	movs	r4, #100	@ 0x64
 800efe2:	9400      	str	r4, [sp, #0]
 800efe4:	f007 f914 	bl	8016210 <HAL_I2C_Master_Receive>
 800efe8:	0003      	movs	r3, r0
 800efea:	b25b      	sxtb	r3, r3
}
 800efec:	0018      	movs	r0, r3
 800efee:	46bd      	mov	sp, r7
 800eff0:	b003      	add	sp, #12
 800eff2:	bd90      	pop	{r4, r7, pc}
 800eff4:	20000f8c 	.word	0x20000f8c

0800eff8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800eff8:	b590      	push	{r4, r7, lr}
 800effa:	b085      	sub	sp, #20
 800effc:	af02      	add	r7, sp, #8
 800effe:	6039      	str	r1, [r7, #0]
 800f000:	0011      	movs	r1, r2
 800f002:	1dfb      	adds	r3, r7, #7
 800f004:	1c02      	adds	r2, r0, #0
 800f006:	701a      	strb	r2, [r3, #0]
 800f008:	1d3b      	adds	r3, r7, #4
 800f00a:	1c0a      	adds	r2, r1, #0
 800f00c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800f00e:	1dfb      	adds	r3, r7, #7
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	b29b      	uxth	r3, r3
 800f014:	18db      	adds	r3, r3, r3
 800f016:	b299      	uxth	r1, r3
 800f018:	1d3b      	adds	r3, r7, #4
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	4805      	ldr	r0, [pc, #20]	@ (800f034 <sensirion_i2c_hal_write+0x3c>)
 800f020:	2464      	movs	r4, #100	@ 0x64
 800f022:	9400      	str	r4, [sp, #0]
 800f024:	f006 ffec 	bl	8016000 <HAL_I2C_Master_Transmit>
 800f028:	0003      	movs	r3, r0
 800f02a:	b25b      	sxtb	r3, r3
}
 800f02c:	0018      	movs	r0, r3
 800f02e:	46bd      	mov	sp, r7
 800f030:	b003      	add	sp, #12
 800f032:	bd90      	pop	{r4, r7, pc}
 800f034:	20000f8c 	.word	0x20000f8c

0800f038 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	22fa      	movs	r2, #250	@ 0xfa
 800f044:	0091      	lsls	r1, r2, #2
 800f046:	0018      	movs	r0, r3
 800f048:	f7f1 f8ac 	bl	80001a4 <__udivsi3>
 800f04c:	0003      	movs	r3, r0
 800f04e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	22fa      	movs	r2, #250	@ 0xfa
 800f054:	0091      	lsls	r1, r2, #2
 800f056:	0018      	movs	r0, r3
 800f058:	f7f1 f92a 	bl	80002b0 <__aeabi_uidivmod>
 800f05c:	1e0b      	subs	r3, r1, #0
 800f05e:	d002      	beq.n	800f066 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	3301      	adds	r3, #1
 800f064:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	0018      	movs	r0, r3
 800f06a:	f005 fc9d 	bl	80149a8 <HAL_Delay>
}
 800f06e:	46c0      	nop			@ (mov r8, r8)
 800f070:	46bd      	mov	sp, r7
 800f072:	b004      	add	sp, #16
 800f074:	bd80      	pop	{r7, pc}
	...

0800f078 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800f07e:	1d3b      	adds	r3, r7, #4
 800f080:	0018      	movs	r0, r3
 800f082:	f000 fd2b 	bl	800fadc <sen5x_read_device_status>
 800f086:	0003      	movs	r3, r0
 800f088:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a2c      	ldr	r2, [pc, #176]	@ (800f140 <sen5x_check_for_errors+0xc8>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d107      	bne.n	800f0a2 <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800f092:	4a2c      	ldr	r2, [pc, #176]	@ (800f144 <sen5x_check_for_errors+0xcc>)
 800f094:	4b2c      	ldr	r3, [pc, #176]	@ (800f148 <sen5x_check_for_errors+0xd0>)
 800f096:	0019      	movs	r1, r3
 800f098:	2001      	movs	r0, #1
 800f09a:	f004 fefb 	bl	8013e94 <CreateLine>
    return true;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e049      	b.n	800f136 <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <sen5x_check_for_errors+0x34>
    return false;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e044      	b.n	800f136 <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	2380      	movs	r3, #128	@ 0x80
 800f0b0:	039b      	lsls	r3, r3, #14
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	d005      	beq.n	800f0c2 <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800f0b6:	4a25      	ldr	r2, [pc, #148]	@ (800f14c <sen5x_check_for_errors+0xd4>)
 800f0b8:	4b25      	ldr	r3, [pc, #148]	@ (800f150 <sen5x_check_for_errors+0xd8>)
 800f0ba:	0019      	movs	r1, r3
 800f0bc:	2003      	movs	r0, #3
 800f0be:	f004 fee9 	bl	8013e94 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	2380      	movs	r3, #128	@ 0x80
 800f0c6:	031b      	lsls	r3, r3, #12
 800f0c8:	4013      	ands	r3, r2
 800f0ca:	d005      	beq.n	800f0d8 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800f0cc:	4a21      	ldr	r2, [pc, #132]	@ (800f154 <sen5x_check_for_errors+0xdc>)
 800f0ce:	4b20      	ldr	r3, [pc, #128]	@ (800f150 <sen5x_check_for_errors+0xd8>)
 800f0d0:	0019      	movs	r1, r3
 800f0d2:	2003      	movs	r0, #3
 800f0d4:	f004 fede 	bl	8013e94 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2280      	movs	r2, #128	@ 0x80
 800f0dc:	4013      	ands	r3, r2
 800f0de:	d005      	beq.n	800f0ec <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800f0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f158 <sen5x_check_for_errors+0xe0>)
 800f0e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f150 <sen5x_check_for_errors+0xd8>)
 800f0e4:	0019      	movs	r1, r3
 800f0e6:	2003      	movs	r0, #3
 800f0e8:	f004 fed4 	bl	8013e94 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2240      	movs	r2, #64	@ 0x40
 800f0f0:	4013      	ands	r3, r2
 800f0f2:	d005      	beq.n	800f100 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f0f4:	4a19      	ldr	r2, [pc, #100]	@ (800f15c <sen5x_check_for_errors+0xe4>)
 800f0f6:	4b16      	ldr	r3, [pc, #88]	@ (800f150 <sen5x_check_for_errors+0xd8>)
 800f0f8:	0019      	movs	r1, r3
 800f0fa:	2003      	movs	r0, #3
 800f0fc:	f004 feca 	bl	8013e94 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2220      	movs	r2, #32
 800f104:	4013      	ands	r3, r2
 800f106:	d005      	beq.n	800f114 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f108:	4a15      	ldr	r2, [pc, #84]	@ (800f160 <sen5x_check_for_errors+0xe8>)
 800f10a:	4b11      	ldr	r3, [pc, #68]	@ (800f150 <sen5x_check_for_errors+0xd8>)
 800f10c:	0019      	movs	r1, r3
 800f10e:	2003      	movs	r0, #3
 800f110:	f004 fec0 	bl	8013e94 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2210      	movs	r2, #16
 800f118:	4013      	ands	r3, r2
 800f11a:	d005      	beq.n	800f128 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f11c:	4a11      	ldr	r2, [pc, #68]	@ (800f164 <sen5x_check_for_errors+0xec>)
 800f11e:	4b0c      	ldr	r3, [pc, #48]	@ (800f150 <sen5x_check_for_errors+0xd8>)
 800f120:	0019      	movs	r1, r3
 800f122:	2003      	movs	r0, #3
 800f124:	f004 feb6 	bl	8013e94 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4a0f      	ldr	r2, [pc, #60]	@ (800f168 <sen5x_check_for_errors+0xf0>)
 800f12c:	4908      	ldr	r1, [pc, #32]	@ (800f150 <sen5x_check_for_errors+0xd8>)
 800f12e:	2003      	movs	r0, #3
 800f130:	f004 feb0 	bl	8013e94 <CreateLine>
  return true;
 800f134:	2301      	movs	r3, #1
}
 800f136:	0018      	movs	r0, r3
 800f138:	46bd      	mov	sp, r7
 800f13a:	b002      	add	sp, #8
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	46c0      	nop			@ (mov r8, r8)
 800f140:	0000d206 	.word	0x0000d206
 800f144:	0802d744 	.word	0x0802d744
 800f148:	0802d2e8 	.word	0x0802d2e8
 800f14c:	0802d784 	.word	0x0802d784
 800f150:	0802d2bc 	.word	0x0802d2bc
 800f154:	0802d7a4 	.word	0x0802d7a4
 800f158:	0802d7c0 	.word	0x0802d7c0
 800f15c:	0802d7e4 	.word	0x0802d7e4
 800f160:	0802d804 	.word	0x0802d804
 800f164:	0802d818 	.word	0x0802d818
 800f168:	0802d854 	.word	0x0802d854

0800f16c <set_light_on_state>:

void set_light_on_state(void) {
 800f16c:	b580      	push	{r7, lr}
 800f16e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f170:	4b15      	ldr	r3, [pc, #84]	@ (800f1c8 <set_light_on_state+0x5c>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	2201      	movs	r2, #1
 800f176:	4053      	eors	r3, r2
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d008      	beq.n	800f190 <set_light_on_state+0x24>
    sen5x_Power_On();
 800f17e:	f7ff faf5 	bl	800e76c <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f182:	4a12      	ldr	r2, [pc, #72]	@ (800f1cc <set_light_on_state+0x60>)
 800f184:	4b12      	ldr	r3, [pc, #72]	@ (800f1d0 <set_light_on_state+0x64>)
 800f186:	0019      	movs	r1, r3
 800f188:	2003      	movs	r0, #3
 800f18a:	f004 fe83 	bl	8013e94 <CreateLine>
 800f18e:	e00a      	b.n	800f1a6 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f190:	f005 fc00 	bl	8014994 <HAL_GetTick>
 800f194:	0002      	movs	r2, r0
 800f196:	4b0f      	ldr	r3, [pc, #60]	@ (800f1d4 <set_light_on_state+0x68>)
 800f198:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f19a:	4a0f      	ldr	r2, [pc, #60]	@ (800f1d8 <set_light_on_state+0x6c>)
 800f19c:	4b0c      	ldr	r3, [pc, #48]	@ (800f1d0 <set_light_on_state+0x64>)
 800f19e:	0019      	movs	r1, r3
 800f1a0:	2003      	movs	r0, #3
 800f1a2:	f004 fe77 	bl	8013e94 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f1a6:	f7ff fc75 	bl	800ea94 <sen5x_lightup_measurement>
 800f1aa:	1e03      	subs	r3, r0, #0
 800f1ac:	d005      	beq.n	800f1ba <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f1ae:	4a0b      	ldr	r2, [pc, #44]	@ (800f1dc <set_light_on_state+0x70>)
 800f1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f1e0 <set_light_on_state+0x74>)
 800f1b2:	0019      	movs	r1, r3
 800f1b4:	2001      	movs	r0, #1
 800f1b6:	f004 fe6d 	bl	8013e94 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f1ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f1e4 <set_light_on_state+0x78>)
 800f1bc:	2203      	movs	r2, #3
 800f1be:	701a      	strb	r2, [r3, #0]
}
 800f1c0:	46c0      	nop			@ (mov r8, r8)
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	46c0      	nop			@ (mov r8, r8)
 800f1c8:	200011bd 	.word	0x200011bd
 800f1cc:	0802d884 	.word	0x0802d884
 800f1d0:	0802d2bc 	.word	0x0802d2bc
 800f1d4:	200011cc 	.word	0x200011cc
 800f1d8:	0802d8a4 	.word	0x0802d8a4
 800f1dc:	0802d8bc 	.word	0x0802d8bc
 800f1e0:	0802d2e8 	.word	0x0802d2e8
 800f1e4:	200000aa 	.word	0x200000aa

0800f1e8 <sen5x_statemachine>:

void sen5x_statemachine() {
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f1ee:	1dfb      	adds	r3, r7, #7
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f1f4:	4b92      	ldr	r3, [pc, #584]	@ (800f440 <sen5x_statemachine+0x258>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	f004 fdf5 	bl	8013de8 <TimestampIsReached>
 800f1fe:	1e03      	subs	r3, r0, #0
 800f200:	d100      	bne.n	800f204 <sen5x_statemachine+0x1c>
 800f202:	e118      	b.n	800f436 <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f204:	4b8f      	ldr	r3, [pc, #572]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	2b05      	cmp	r3, #5
 800f20a:	d900      	bls.n	800f20e <sen5x_statemachine+0x26>
 800f20c:	e113      	b.n	800f436 <sen5x_statemachine+0x24e>
 800f20e:	009a      	lsls	r2, r3, #2
 800f210:	4b8d      	ldr	r3, [pc, #564]	@ (800f448 <sen5x_statemachine+0x260>)
 800f212:	18d3      	adds	r3, r2, r3
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f218:	4a8c      	ldr	r2, [pc, #560]	@ (800f44c <sen5x_statemachine+0x264>)
 800f21a:	4b8d      	ldr	r3, [pc, #564]	@ (800f450 <sen5x_statemachine+0x268>)
 800f21c:	0019      	movs	r1, r3
 800f21e:	2001      	movs	r0, #1
 800f220:	f004 fe38 	bl	8013e94 <CreateLine>
      SetPMSensorStatus(false);
 800f224:	2000      	movs	r0, #0
 800f226:	f7fe f9fb 	bl	800d620 <SetPMSensorStatus>
      DisablePMSensor();
 800f22a:	f7fe f97d 	bl	800d528 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then ten minutes a message when continue operated.
 800f22e:	f005 fbb1 	bl	8014994 <HAL_GetTick>
 800f232:	0003      	movs	r3, r0
 800f234:	4a87      	ldr	r2, [pc, #540]	@ (800f454 <sen5x_statemachine+0x26c>)
 800f236:	189a      	adds	r2, r3, r2
 800f238:	4b81      	ldr	r3, [pc, #516]	@ (800f440 <sen5x_statemachine+0x258>)
 800f23a:	601a      	str	r2, [r3, #0]
      break;
 800f23c:	e0fb      	b.n	800f436 <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f23e:	f005 fba9 	bl	8014994 <HAL_GetTick>
 800f242:	0003      	movs	r3, r0
 800f244:	4a84      	ldr	r2, [pc, #528]	@ (800f458 <sen5x_statemachine+0x270>)
 800f246:	189a      	adds	r2, r3, r2
 800f248:	4b7d      	ldr	r3, [pc, #500]	@ (800f440 <sen5x_statemachine+0x258>)
 800f24a:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f24c:	f7ff ff8e 	bl	800f16c <set_light_on_state>
      break;
 800f250:	e0f1      	b.n	800f436 <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f252:	4b7c      	ldr	r3, [pc, #496]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f254:	2202      	movs	r2, #2
 800f256:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f258:	4b80      	ldr	r3, [pc, #512]	@ (800f45c <sen5x_statemachine+0x274>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	2b05      	cmp	r3, #5
 800f25e:	d905      	bls.n	800f26c <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f260:	4b78      	ldr	r3, [pc, #480]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f262:	2200      	movs	r2, #0
 800f264:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f266:	f7ff fab1 	bl	800e7cc <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f26a:	e0e1      	b.n	800f430 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f26c:	f7ff ff04 	bl	800f078 <sen5x_check_for_errors>
 800f270:	1e03      	subs	r3, r0, #0
 800f272:	d028      	beq.n	800f2c6 <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f274:	f000 fc84 	bl	800fb80 <sen5x_device_reset>
 800f278:	1e03      	subs	r3, r0, #0
 800f27a:	d018      	beq.n	800f2ae <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f27c:	4a78      	ldr	r2, [pc, #480]	@ (800f460 <sen5x_statemachine+0x278>)
 800f27e:	4b74      	ldr	r3, [pc, #464]	@ (800f450 <sen5x_statemachine+0x268>)
 800f280:	0019      	movs	r1, r3
 800f282:	2001      	movs	r0, #1
 800f284:	f004 fe06 	bl	8013e94 <CreateLine>
            sen5xErrors++;
 800f288:	4b74      	ldr	r3, [pc, #464]	@ (800f45c <sen5x_statemachine+0x274>)
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	3301      	adds	r3, #1
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	4b72      	ldr	r3, [pc, #456]	@ (800f45c <sen5x_statemachine+0x274>)
 800f292:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f294:	f7ff fa9a 	bl	800e7cc <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f298:	f005 fb7c 	bl	8014994 <HAL_GetTick>
 800f29c:	0003      	movs	r3, r0
 800f29e:	4a6e      	ldr	r2, [pc, #440]	@ (800f458 <sen5x_statemachine+0x270>)
 800f2a0:	189a      	adds	r2, r3, r2
 800f2a2:	4b67      	ldr	r3, [pc, #412]	@ (800f440 <sen5x_statemachine+0x258>)
 800f2a4:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f2a6:	4b67      	ldr	r3, [pc, #412]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f2a8:	2205      	movs	r2, #5
 800f2aa:	701a      	strb	r2, [r3, #0]
 800f2ac:	e005      	b.n	800f2ba <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f2ae:	4a6d      	ldr	r2, [pc, #436]	@ (800f464 <sen5x_statemachine+0x27c>)
 800f2b0:	4b6d      	ldr	r3, [pc, #436]	@ (800f468 <sen5x_statemachine+0x280>)
 800f2b2:	0019      	movs	r1, r3
 800f2b4:	2002      	movs	r0, #2
 800f2b6:	f004 fded 	bl	8013e94 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f2ba:	f005 fb6b 	bl	8014994 <HAL_GetTick>
 800f2be:	0002      	movs	r2, r0
 800f2c0:	4b5f      	ldr	r3, [pc, #380]	@ (800f440 <sen5x_statemachine+0x258>)
 800f2c2:	601a      	str	r2, [r3, #0]
      break;
 800f2c4:	e0b4      	b.n	800f430 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f2c6:	4b65      	ldr	r3, [pc, #404]	@ (800f45c <sen5x_statemachine+0x274>)
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d100      	bne.n	800f2d0 <sen5x_statemachine+0xe8>
 800f2ce:	e0af      	b.n	800f430 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f2d0:	4b62      	ldr	r3, [pc, #392]	@ (800f45c <sen5x_statemachine+0x274>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f2d6:	4a65      	ldr	r2, [pc, #404]	@ (800f46c <sen5x_statemachine+0x284>)
 800f2d8:	4b65      	ldr	r3, [pc, #404]	@ (800f470 <sen5x_statemachine+0x288>)
 800f2da:	0019      	movs	r1, r3
 800f2dc:	2003      	movs	r0, #3
 800f2de:	f004 fdd9 	bl	8013e94 <CreateLine>
      break;
 800f2e2:	e0a5      	b.n	800f430 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f2e4:	1dfb      	adds	r3, r7, #7
 800f2e6:	0018      	movs	r0, r3
 800f2e8:	f000 f966 	bl	800f5b8 <sen5x_read_data_ready>
      if (data_ready) {
 800f2ec:	1dfb      	adds	r3, r7, #7
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d038      	beq.n	800f366 <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f2f4:	f003 fbe0 	bl	8012ab8 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f2f8:	4b5e      	ldr	r3, [pc, #376]	@ (800f474 <sen5x_statemachine+0x28c>)
 800f2fa:	0018      	movs	r0, r3
 800f2fc:	f7ff fc70 	bl	800ebe0 <sen5x_read_measurement>
 800f300:	1e03      	subs	r3, r0, #0
 800f302:	d017      	beq.n	800f334 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f304:	4a5c      	ldr	r2, [pc, #368]	@ (800f478 <sen5x_statemachine+0x290>)
 800f306:	4b52      	ldr	r3, [pc, #328]	@ (800f450 <sen5x_statemachine+0x268>)
 800f308:	0019      	movs	r1, r3
 800f30a:	2001      	movs	r0, #1
 800f30c:	f004 fdc2 	bl	8013e94 <CreateLine>
          sen5xErrors++;
 800f310:	4b52      	ldr	r3, [pc, #328]	@ (800f45c <sen5x_statemachine+0x274>)
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	3301      	adds	r3, #1
 800f316:	b2da      	uxtb	r2, r3
 800f318:	4b50      	ldr	r3, [pc, #320]	@ (800f45c <sen5x_statemachine+0x274>)
 800f31a:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f31c:	f7ff fa56 	bl	800e7cc <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f320:	f005 fb38 	bl	8014994 <HAL_GetTick>
 800f324:	0003      	movs	r3, r0
 800f326:	4a4c      	ldr	r2, [pc, #304]	@ (800f458 <sen5x_statemachine+0x270>)
 800f328:	189a      	adds	r2, r3, r2
 800f32a:	4b45      	ldr	r3, [pc, #276]	@ (800f440 <sen5x_statemachine+0x258>)
 800f32c:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f32e:	4b45      	ldr	r3, [pc, #276]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f330:	2205      	movs	r2, #5
 800f332:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f334:	4b51      	ldr	r3, [pc, #324]	@ (800f47c <sen5x_statemachine+0x294>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	3301      	adds	r3, #1
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	4b4f      	ldr	r3, [pc, #316]	@ (800f47c <sen5x_statemachine+0x294>)
 800f33e:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f340:	4b4e      	ldr	r3, [pc, #312]	@ (800f47c <sen5x_statemachine+0x294>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	2b1f      	cmp	r3, #31
 800f346:	d102      	bne.n	800f34e <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f348:	4b4c      	ldr	r3, [pc, #304]	@ (800f47c <sen5x_statemachine+0x294>)
 800f34a:	2200      	movs	r2, #0
 800f34c:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f34e:	4b4b      	ldr	r3, [pc, #300]	@ (800f47c <sen5x_statemachine+0x294>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	2b01      	cmp	r3, #1
 800f354:	d901      	bls.n	800f35a <sen5x_statemachine+0x172>
          sen5xStore();
 800f356:	f7ff fd9d 	bl	800ee94 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f35a:	4b48      	ldr	r3, [pc, #288]	@ (800f47c <sen5x_statemachine+0x294>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	2b02      	cmp	r3, #2
 800f360:	d101      	bne.n	800f366 <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f362:	f7ff fc99 	bl	800ec98 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f366:	4b46      	ldr	r3, [pc, #280]	@ (800f480 <sen5x_statemachine+0x298>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d103      	bne.n	800f376 <sen5x_statemachine+0x18e>
 800f36e:	4b43      	ldr	r3, [pc, #268]	@ (800f47c <sen5x_statemachine+0x294>)
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b01      	cmp	r3, #1
 800f374:	d95e      	bls.n	800f434 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f376:	4b33      	ldr	r3, [pc, #204]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f378:	2204      	movs	r2, #4
 800f37a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f37c:	e05a      	b.n	800f434 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f37e:	4b41      	ldr	r3, [pc, #260]	@ (800f484 <sen5x_statemachine+0x29c>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	2b01      	cmp	r3, #1
 800f384:	d11e      	bne.n	800f3c4 <sen5x_statemachine+0x1dc>
 800f386:	4b40      	ldr	r3, [pc, #256]	@ (800f488 <sen5x_statemachine+0x2a0>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d11a      	bne.n	800f3c4 <sen5x_statemachine+0x1dc>
 800f38e:	4b3f      	ldr	r3, [pc, #252]	@ (800f48c <sen5x_statemachine+0x2a4>)
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	2201      	movs	r2, #1
 800f394:	4053      	eors	r3, r2
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d013      	beq.n	800f3c4 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f39c:	f000 f9f2 	bl	800f784 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f3a0:	4a3b      	ldr	r2, [pc, #236]	@ (800f490 <sen5x_statemachine+0x2a8>)
 800f3a2:	4b31      	ldr	r3, [pc, #196]	@ (800f468 <sen5x_statemachine+0x280>)
 800f3a4:	0019      	movs	r1, r3
 800f3a6:	2002      	movs	r0, #2
 800f3a8:	f004 fd74 	bl	8013e94 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f3ac:	f005 faf2 	bl	8014994 <HAL_GetTick>
 800f3b0:	0003      	movs	r3, r0
 800f3b2:	4a38      	ldr	r2, [pc, #224]	@ (800f494 <sen5x_statemachine+0x2ac>)
 800f3b4:	189a      	adds	r2, r3, r2
 800f3b6:	4b22      	ldr	r3, [pc, #136]	@ (800f440 <sen5x_statemachine+0x258>)
 800f3b8:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f3ba:	4b34      	ldr	r3, [pc, #208]	@ (800f48c <sen5x_statemachine+0x2a4>)
 800f3bc:	2201      	movs	r2, #1
 800f3be:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f3c0:	f7ff fb68 	bl	800ea94 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f3c4:	4b1f      	ldr	r3, [pc, #124]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f3c6:	2205      	movs	r2, #5
 800f3c8:	701a      	strb	r2, [r3, #0]
      break;
 800f3ca:	e034      	b.n	800f436 <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f3cc:	4b2c      	ldr	r3, [pc, #176]	@ (800f480 <sen5x_statemachine+0x298>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	4053      	eors	r3, r2
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d01c      	beq.n	800f414 <sen5x_statemachine+0x22c>
 800f3da:	4b2f      	ldr	r3, [pc, #188]	@ (800f498 <sen5x_statemachine+0x2b0>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	4053      	eors	r3, r2
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d015      	beq.n	800f414 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f3e8:	f7ff fba0 	bl	800eb2c <sen5x_extinguish_measurement>
 800f3ec:	1e03      	subs	r3, r0, #0
 800f3ee:	d005      	beq.n	800f3fc <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f3f0:	4a2a      	ldr	r2, [pc, #168]	@ (800f49c <sen5x_statemachine+0x2b4>)
 800f3f2:	4b17      	ldr	r3, [pc, #92]	@ (800f450 <sen5x_statemachine+0x268>)
 800f3f4:	0019      	movs	r1, r3
 800f3f6:	2001      	movs	r0, #1
 800f3f8:	f004 fd4c 	bl	8013e94 <CreateLine>
        }
        sen5xSamples = 0;
 800f3fc:	4b1f      	ldr	r3, [pc, #124]	@ (800f47c <sen5x_statemachine+0x294>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f402:	f7ff f9e3 	bl	800e7cc <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f406:	2000      	movs	r0, #0
 800f408:	f7fe f90a 	bl	800d620 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f40c:	4b0d      	ldr	r3, [pc, #52]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f40e:	2201      	movs	r2, #1
 800f410:	701a      	strb	r2, [r3, #0]
 800f412:	e002      	b.n	800f41a <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f414:	4b0b      	ldr	r3, [pc, #44]	@ (800f444 <sen5x_statemachine+0x25c>)
 800f416:	2203      	movs	r2, #3
 800f418:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f41a:	f003 fb6d 	bl	8012af8 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f41e:	f005 fab9 	bl	8014994 <HAL_GetTick>
 800f422:	0003      	movs	r3, r0
 800f424:	22fa      	movs	r2, #250	@ 0xfa
 800f426:	0092      	lsls	r2, r2, #2
 800f428:	189a      	adds	r2, r3, r2
 800f42a:	4b05      	ldr	r3, [pc, #20]	@ (800f440 <sen5x_statemachine+0x258>)
 800f42c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f42e:	e002      	b.n	800f436 <sen5x_statemachine+0x24e>
      break;
 800f430:	46c0      	nop			@ (mov r8, r8)
 800f432:	e000      	b.n	800f436 <sen5x_statemachine+0x24e>
      break;
 800f434:	46c0      	nop			@ (mov r8, r8)
}
 800f436:	46c0      	nop			@ (mov r8, r8)
 800f438:	46bd      	mov	sp, r7
 800f43a:	b002      	add	sp, #8
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	46c0      	nop			@ (mov r8, r8)
 800f440:	200011cc 	.word	0x200011cc
 800f444:	200000aa 	.word	0x200000aa
 800f448:	0802e71c 	.word	0x0802e71c
 800f44c:	0802d8e8 	.word	0x0802d8e8
 800f450:	0802d2e8 	.word	0x0802d2e8
 800f454:	0004cb2f 	.word	0x0004cb2f
 800f458:	00005910 	.word	0x00005910
 800f45c:	200011c9 	.word	0x200011c9
 800f460:	0802d918 	.word	0x0802d918
 800f464:	0802d930 	.word	0x0802d930
 800f468:	0802d27c 	.word	0x0802d27c
 800f46c:	0802d948 	.word	0x0802d948
 800f470:	0802d2bc 	.word	0x0802d2bc
 800f474:	200011d0 	.word	0x200011d0
 800f478:	0802d95c 	.word	0x0802d95c
 800f47c:	200011c8 	.word	0x200011c8
 800f480:	2000214d 	.word	0x2000214d
 800f484:	20000e43 	.word	0x20000e43
 800f488:	20000e42 	.word	0x20000e42
 800f48c:	200011bc 	.word	0x200011bc
 800f490:	0802d98c 	.word	0x0802d98c
 800f494:	00002710 	.word	0x00002710
 800f498:	2000214e 	.word	0x2000214e
 800f49c:	0802d9a4 	.word	0x0802d9a4

0800f4a0 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f4a0:	b590      	push	{r4, r7, lr}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f4a6:	1dbb      	adds	r3, r7, #6
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f4ac:	1dbc      	adds	r4, r7, #6
 800f4ae:	1dbb      	adds	r3, r7, #6
 800f4b0:	8819      	ldrh	r1, [r3, #0]
 800f4b2:	003b      	movs	r3, r7
 800f4b4:	2221      	movs	r2, #33	@ 0x21
 800f4b6:	0018      	movs	r0, r3
 800f4b8:	f001 fb57 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f4bc:	0003      	movs	r3, r0
 800f4be:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4c0:	1d3c      	adds	r4, r7, #4
 800f4c2:	1dbb      	adds	r3, r7, #6
 800f4c4:	881a      	ldrh	r2, [r3, #0]
 800f4c6:	003b      	movs	r3, r7
 800f4c8:	0019      	movs	r1, r3
 800f4ca:	2069      	movs	r0, #105	@ 0x69
 800f4cc:	f001 fbd1 	bl	8010c72 <sensirion_i2c_write_data>
 800f4d0:	0003      	movs	r3, r0
 800f4d2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4d4:	1d3b      	adds	r3, r7, #4
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	5e9b      	ldrsh	r3, [r3, r2]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d003      	beq.n	800f4e6 <sen5x_start_measurement+0x46>
        return error;
 800f4de:	1d3b      	adds	r3, r7, #4
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	5e9b      	ldrsh	r3, [r3, r2]
 800f4e4:	e004      	b.n	800f4f0 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f4e6:	4b04      	ldr	r3, [pc, #16]	@ (800f4f8 <sen5x_start_measurement+0x58>)
 800f4e8:	0018      	movs	r0, r3
 800f4ea:	f7ff fda5 	bl	800f038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	0018      	movs	r0, r3
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	b003      	add	sp, #12
 800f4f6:	bd90      	pop	{r4, r7, pc}
 800f4f8:	0000c350 	.word	0x0000c350

0800f4fc <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f4fc:	b590      	push	{r4, r7, lr}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f502:	1dbb      	adds	r3, r7, #6
 800f504:	2200      	movs	r2, #0
 800f506:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f508:	1dbc      	adds	r4, r7, #6
 800f50a:	1dbb      	adds	r3, r7, #6
 800f50c:	8819      	ldrh	r1, [r3, #0]
 800f50e:	003b      	movs	r3, r7
 800f510:	2237      	movs	r2, #55	@ 0x37
 800f512:	0018      	movs	r0, r3
 800f514:	f001 fb29 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f518:	0003      	movs	r3, r0
 800f51a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f51c:	1d3c      	adds	r4, r7, #4
 800f51e:	1dbb      	adds	r3, r7, #6
 800f520:	881a      	ldrh	r2, [r3, #0]
 800f522:	003b      	movs	r3, r7
 800f524:	0019      	movs	r1, r3
 800f526:	2069      	movs	r0, #105	@ 0x69
 800f528:	f001 fba3 	bl	8010c72 <sensirion_i2c_write_data>
 800f52c:	0003      	movs	r3, r0
 800f52e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f530:	1d3b      	adds	r3, r7, #4
 800f532:	2200      	movs	r2, #0
 800f534:	5e9b      	ldrsh	r3, [r3, r2]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d003      	beq.n	800f542 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f53a:	1d3b      	adds	r3, r7, #4
 800f53c:	2200      	movs	r2, #0
 800f53e:	5e9b      	ldrsh	r3, [r3, r2]
 800f540:	e004      	b.n	800f54c <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f542:	4b04      	ldr	r3, [pc, #16]	@ (800f554 <sen5x_start_measurement_without_pm+0x58>)
 800f544:	0018      	movs	r0, r3
 800f546:	f7ff fd77 	bl	800f038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	0018      	movs	r0, r3
 800f54e:	46bd      	mov	sp, r7
 800f550:	b003      	add	sp, #12
 800f552:	bd90      	pop	{r4, r7, pc}
 800f554:	0000c350 	.word	0x0000c350

0800f558 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f558:	b590      	push	{r4, r7, lr}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f55e:	1dbb      	adds	r3, r7, #6
 800f560:	2200      	movs	r2, #0
 800f562:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f564:	1dbc      	adds	r4, r7, #6
 800f566:	2382      	movs	r3, #130	@ 0x82
 800f568:	005a      	lsls	r2, r3, #1
 800f56a:	1dbb      	adds	r3, r7, #6
 800f56c:	8819      	ldrh	r1, [r3, #0]
 800f56e:	003b      	movs	r3, r7
 800f570:	0018      	movs	r0, r3
 800f572:	f001 fafa 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f576:	0003      	movs	r3, r0
 800f578:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f57a:	1d3c      	adds	r4, r7, #4
 800f57c:	1dbb      	adds	r3, r7, #6
 800f57e:	881a      	ldrh	r2, [r3, #0]
 800f580:	003b      	movs	r3, r7
 800f582:	0019      	movs	r1, r3
 800f584:	2069      	movs	r0, #105	@ 0x69
 800f586:	f001 fb74 	bl	8010c72 <sensirion_i2c_write_data>
 800f58a:	0003      	movs	r3, r0
 800f58c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f58e:	1d3b      	adds	r3, r7, #4
 800f590:	2200      	movs	r2, #0
 800f592:	5e9b      	ldrsh	r3, [r3, r2]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d003      	beq.n	800f5a0 <sen5x_stop_measurement+0x48>
        return error;
 800f598:	1d3b      	adds	r3, r7, #4
 800f59a:	2200      	movs	r2, #0
 800f59c:	5e9b      	ldrsh	r3, [r3, r2]
 800f59e:	e004      	b.n	800f5aa <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f5a0:	4b04      	ldr	r3, [pc, #16]	@ (800f5b4 <sen5x_stop_measurement+0x5c>)
 800f5a2:	0018      	movs	r0, r3
 800f5a4:	f7ff fd48 	bl	800f038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	0018      	movs	r0, r3
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	b003      	add	sp, #12
 800f5b0:	bd90      	pop	{r4, r7, pc}
 800f5b2:	46c0      	nop			@ (mov r8, r8)
 800f5b4:	00030d40 	.word	0x00030d40

0800f5b8 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f5c0:	250e      	movs	r5, #14
 800f5c2:	197b      	adds	r3, r7, r5
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f5c8:	197c      	adds	r4, r7, r5
 800f5ca:	4a22      	ldr	r2, [pc, #136]	@ (800f654 <sen5x_read_data_ready+0x9c>)
 800f5cc:	197b      	adds	r3, r7, r5
 800f5ce:	8819      	ldrh	r1, [r3, #0]
 800f5d0:	2308      	movs	r3, #8
 800f5d2:	18fb      	adds	r3, r7, r3
 800f5d4:	0018      	movs	r0, r3
 800f5d6:	f001 fac8 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f5da:	0003      	movs	r3, r0
 800f5dc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f5de:	260c      	movs	r6, #12
 800f5e0:	19bc      	adds	r4, r7, r6
 800f5e2:	197b      	adds	r3, r7, r5
 800f5e4:	881a      	ldrh	r2, [r3, #0]
 800f5e6:	2308      	movs	r3, #8
 800f5e8:	18fb      	adds	r3, r7, r3
 800f5ea:	0019      	movs	r1, r3
 800f5ec:	2069      	movs	r0, #105	@ 0x69
 800f5ee:	f001 fb40 	bl	8010c72 <sensirion_i2c_write_data>
 800f5f2:	0003      	movs	r3, r0
 800f5f4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5f6:	19bb      	adds	r3, r7, r6
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	5e9b      	ldrsh	r3, [r3, r2]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d003      	beq.n	800f608 <sen5x_read_data_ready+0x50>
        return error;
 800f600:	19bb      	adds	r3, r7, r6
 800f602:	2200      	movs	r2, #0
 800f604:	5e9b      	ldrsh	r3, [r3, r2]
 800f606:	e020      	b.n	800f64a <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f608:	4b13      	ldr	r3, [pc, #76]	@ (800f658 <sen5x_read_data_ready+0xa0>)
 800f60a:	0018      	movs	r0, r3
 800f60c:	f7ff fd14 	bl	800f038 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f610:	250c      	movs	r5, #12
 800f612:	197c      	adds	r4, r7, r5
 800f614:	2308      	movs	r3, #8
 800f616:	18fb      	adds	r3, r7, r3
 800f618:	2202      	movs	r2, #2
 800f61a:	0019      	movs	r1, r3
 800f61c:	2069      	movs	r0, #105	@ 0x69
 800f61e:	f001 fb40 	bl	8010ca2 <sensirion_i2c_read_data_inplace>
 800f622:	0003      	movs	r3, r0
 800f624:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f626:	197b      	adds	r3, r7, r5
 800f628:	2200      	movs	r2, #0
 800f62a:	5e9b      	ldrsh	r3, [r3, r2]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d003      	beq.n	800f638 <sen5x_read_data_ready+0x80>
        return error;
 800f630:	197b      	adds	r3, r7, r5
 800f632:	2200      	movs	r2, #0
 800f634:	5e9b      	ldrsh	r3, [r3, r2]
 800f636:	e008      	b.n	800f64a <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f638:	2308      	movs	r3, #8
 800f63a:	18fb      	adds	r3, r7, r3
 800f63c:	785b      	ldrb	r3, [r3, #1]
 800f63e:	1e5a      	subs	r2, r3, #1
 800f640:	4193      	sbcs	r3, r2
 800f642:	b2da      	uxtb	r2, r3
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f648:	2300      	movs	r3, #0
}
 800f64a:	0018      	movs	r0, r3
 800f64c:	46bd      	mov	sp, r7
 800f64e:	b005      	add	sp, #20
 800f650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f652:	46c0      	nop			@ (mov r8, r8)
 800f654:	00000202 	.word	0x00000202
 800f658:	00004e20 	.word	0x00004e20

0800f65c <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65e:	b08d      	sub	sp, #52	@ 0x34
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f66a:	252e      	movs	r5, #46	@ 0x2e
 800f66c:	197b      	adds	r3, r7, r5
 800f66e:	2200      	movs	r2, #0
 800f670:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f672:	197c      	adds	r4, r7, r5
 800f674:	23f1      	movs	r3, #241	@ 0xf1
 800f676:	009a      	lsls	r2, r3, #2
 800f678:	197b      	adds	r3, r7, r5
 800f67a:	8819      	ldrh	r1, [r3, #0]
 800f67c:	2314      	movs	r3, #20
 800f67e:	18fb      	adds	r3, r7, r3
 800f680:	0018      	movs	r0, r3
 800f682:	f001 fa72 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f686:	0003      	movs	r3, r0
 800f688:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f68a:	262c      	movs	r6, #44	@ 0x2c
 800f68c:	19bc      	adds	r4, r7, r6
 800f68e:	197b      	adds	r3, r7, r5
 800f690:	881a      	ldrh	r2, [r3, #0]
 800f692:	2314      	movs	r3, #20
 800f694:	18fb      	adds	r3, r7, r3
 800f696:	0019      	movs	r1, r3
 800f698:	2069      	movs	r0, #105	@ 0x69
 800f69a:	f001 faea 	bl	8010c72 <sensirion_i2c_write_data>
 800f69e:	0003      	movs	r3, r0
 800f6a0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6a2:	19bb      	adds	r3, r7, r6
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	5e9b      	ldrsh	r3, [r3, r2]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d003      	beq.n	800f6b4 <sen5x_read_measured_values+0x58>
        return error;
 800f6ac:	19bb      	adds	r3, r7, r6
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	5e9b      	ldrsh	r3, [r3, r2]
 800f6b2:	e060      	b.n	800f776 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f6b4:	4b32      	ldr	r3, [pc, #200]	@ (800f780 <sen5x_read_measured_values+0x124>)
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	f7ff fcbe 	bl	800f038 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f6bc:	252c      	movs	r5, #44	@ 0x2c
 800f6be:	197c      	adds	r4, r7, r5
 800f6c0:	2314      	movs	r3, #20
 800f6c2:	18fb      	adds	r3, r7, r3
 800f6c4:	2210      	movs	r2, #16
 800f6c6:	0019      	movs	r1, r3
 800f6c8:	2069      	movs	r0, #105	@ 0x69
 800f6ca:	f001 faea 	bl	8010ca2 <sensirion_i2c_read_data_inplace>
 800f6ce:	0003      	movs	r3, r0
 800f6d0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6d2:	197b      	adds	r3, r7, r5
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	5e9b      	ldrsh	r3, [r3, r2]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d003      	beq.n	800f6e4 <sen5x_read_measured_values+0x88>
        return error;
 800f6dc:	197b      	adds	r3, r7, r5
 800f6de:	2200      	movs	r2, #0
 800f6e0:	5e9b      	ldrsh	r3, [r3, r2]
 800f6e2:	e048      	b.n	800f776 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f6e4:	2414      	movs	r4, #20
 800f6e6:	193b      	adds	r3, r7, r4
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	f000 fa79 	bl	800fbe0 <sensirion_common_bytes_to_uint16_t>
 800f6ee:	0003      	movs	r3, r0
 800f6f0:	001a      	movs	r2, r3
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f6f6:	193b      	adds	r3, r7, r4
 800f6f8:	3302      	adds	r3, #2
 800f6fa:	0018      	movs	r0, r3
 800f6fc:	f000 fa70 	bl	800fbe0 <sensirion_common_bytes_to_uint16_t>
 800f700:	0003      	movs	r3, r0
 800f702:	001a      	movs	r2, r3
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f708:	193b      	adds	r3, r7, r4
 800f70a:	3304      	adds	r3, #4
 800f70c:	0018      	movs	r0, r3
 800f70e:	f000 fa67 	bl	800fbe0 <sensirion_common_bytes_to_uint16_t>
 800f712:	0003      	movs	r3, r0
 800f714:	001a      	movs	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f71a:	193b      	adds	r3, r7, r4
 800f71c:	3306      	adds	r3, #6
 800f71e:	0018      	movs	r0, r3
 800f720:	f000 fa5e 	bl	800fbe0 <sensirion_common_bytes_to_uint16_t>
 800f724:	0003      	movs	r3, r0
 800f726:	001a      	movs	r2, r3
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f72c:	193b      	adds	r3, r7, r4
 800f72e:	3308      	adds	r3, #8
 800f730:	0018      	movs	r0, r3
 800f732:	f000 fa82 	bl	800fc3a <sensirion_common_bytes_to_int16_t>
 800f736:	0003      	movs	r3, r0
 800f738:	001a      	movs	r2, r3
 800f73a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f73c:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f73e:	193b      	adds	r3, r7, r4
 800f740:	330a      	adds	r3, #10
 800f742:	0018      	movs	r0, r3
 800f744:	f000 fa79 	bl	800fc3a <sensirion_common_bytes_to_int16_t>
 800f748:	0003      	movs	r3, r0
 800f74a:	001a      	movs	r2, r3
 800f74c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f74e:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f750:	193b      	adds	r3, r7, r4
 800f752:	330c      	adds	r3, #12
 800f754:	0018      	movs	r0, r3
 800f756:	f000 fa70 	bl	800fc3a <sensirion_common_bytes_to_int16_t>
 800f75a:	0003      	movs	r3, r0
 800f75c:	001a      	movs	r2, r3
 800f75e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f760:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f762:	193b      	adds	r3, r7, r4
 800f764:	330e      	adds	r3, #14
 800f766:	0018      	movs	r0, r3
 800f768:	f000 fa67 	bl	800fc3a <sensirion_common_bytes_to_int16_t>
 800f76c:	0003      	movs	r3, r0
 800f76e:	001a      	movs	r2, r3
 800f770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f772:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f774:	2300      	movs	r3, #0
}
 800f776:	0018      	movs	r0, r3
 800f778:	46bd      	mov	sp, r7
 800f77a:	b00d      	add	sp, #52	@ 0x34
 800f77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f77e:	46c0      	nop			@ (mov r8, r8)
 800f780:	00004e20 	.word	0x00004e20

0800f784 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f784:	b590      	push	{r4, r7, lr}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f78a:	1dbb      	adds	r3, r7, #6
 800f78c:	2200      	movs	r2, #0
 800f78e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f790:	1dbc      	adds	r4, r7, #6
 800f792:	4a12      	ldr	r2, [pc, #72]	@ (800f7dc <sen5x_start_fan_cleaning+0x58>)
 800f794:	1dbb      	adds	r3, r7, #6
 800f796:	8819      	ldrh	r1, [r3, #0]
 800f798:	003b      	movs	r3, r7
 800f79a:	0018      	movs	r0, r3
 800f79c:	f001 f9e5 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f7a0:	0003      	movs	r3, r0
 800f7a2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f7a4:	1d3c      	adds	r4, r7, #4
 800f7a6:	1dbb      	adds	r3, r7, #6
 800f7a8:	881a      	ldrh	r2, [r3, #0]
 800f7aa:	003b      	movs	r3, r7
 800f7ac:	0019      	movs	r1, r3
 800f7ae:	2069      	movs	r0, #105	@ 0x69
 800f7b0:	f001 fa5f 	bl	8010c72 <sensirion_i2c_write_data>
 800f7b4:	0003      	movs	r3, r0
 800f7b6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7b8:	1d3b      	adds	r3, r7, #4
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	5e9b      	ldrsh	r3, [r3, r2]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d003      	beq.n	800f7ca <sen5x_start_fan_cleaning+0x46>
        return error;
 800f7c2:	1d3b      	adds	r3, r7, #4
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	5e9b      	ldrsh	r3, [r3, r2]
 800f7c8:	e004      	b.n	800f7d4 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f7ca:	4b05      	ldr	r3, [pc, #20]	@ (800f7e0 <sen5x_start_fan_cleaning+0x5c>)
 800f7cc:	0018      	movs	r0, r3
 800f7ce:	f7ff fc33 	bl	800f038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	b003      	add	sp, #12
 800f7da:	bd90      	pop	{r4, r7, pc}
 800f7dc:	00005607 	.word	0x00005607
 800f7e0:	00004e20 	.word	0x00004e20

0800f7e4 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7e6:	b087      	sub	sp, #28
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	0004      	movs	r4, r0
 800f7ec:	0008      	movs	r0, r1
 800f7ee:	0011      	movs	r1, r2
 800f7f0:	1dbb      	adds	r3, r7, #6
 800f7f2:	1c22      	adds	r2, r4, #0
 800f7f4:	801a      	strh	r2, [r3, #0]
 800f7f6:	1d3b      	adds	r3, r7, #4
 800f7f8:	1c02      	adds	r2, r0, #0
 800f7fa:	801a      	strh	r2, [r3, #0]
 800f7fc:	1cbb      	adds	r3, r7, #2
 800f7fe:	1c0a      	adds	r2, r1, #0
 800f800:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f802:	2516      	movs	r5, #22
 800f804:	197b      	adds	r3, r7, r5
 800f806:	2200      	movs	r2, #0
 800f808:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f80a:	197c      	adds	r4, r7, r5
 800f80c:	4a25      	ldr	r2, [pc, #148]	@ (800f8a4 <sen5x_set_temperature_offset_parameters+0xc0>)
 800f80e:	197b      	adds	r3, r7, r5
 800f810:	8819      	ldrh	r1, [r3, #0]
 800f812:	2608      	movs	r6, #8
 800f814:	19bb      	adds	r3, r7, r6
 800f816:	0018      	movs	r0, r3
 800f818:	f001 f9a7 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f81c:	0003      	movs	r3, r0
 800f81e:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f820:	197c      	adds	r4, r7, r5
 800f822:	1dbb      	adds	r3, r7, #6
 800f824:	2200      	movs	r2, #0
 800f826:	5e9a      	ldrsh	r2, [r3, r2]
 800f828:	197b      	adds	r3, r7, r5
 800f82a:	8819      	ldrh	r1, [r3, #0]
 800f82c:	19bb      	adds	r3, r7, r6
 800f82e:	0018      	movs	r0, r3
 800f830:	f001 fa06 	bl	8010c40 <sensirion_i2c_add_int16_t_to_buffer>
 800f834:	0003      	movs	r3, r0
 800f836:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f838:	197c      	adds	r4, r7, r5
 800f83a:	1d3b      	adds	r3, r7, #4
 800f83c:	2200      	movs	r2, #0
 800f83e:	5e9a      	ldrsh	r2, [r3, r2]
 800f840:	197b      	adds	r3, r7, r5
 800f842:	8819      	ldrh	r1, [r3, #0]
 800f844:	19bb      	adds	r3, r7, r6
 800f846:	0018      	movs	r0, r3
 800f848:	f001 f9fa 	bl	8010c40 <sensirion_i2c_add_int16_t_to_buffer>
 800f84c:	0003      	movs	r3, r0
 800f84e:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f850:	197c      	adds	r4, r7, r5
 800f852:	1cbb      	adds	r3, r7, #2
 800f854:	881a      	ldrh	r2, [r3, #0]
 800f856:	197b      	adds	r3, r7, r5
 800f858:	8819      	ldrh	r1, [r3, #0]
 800f85a:	19bb      	adds	r3, r7, r6
 800f85c:	0018      	movs	r0, r3
 800f85e:	f001 f9b0 	bl	8010bc2 <sensirion_i2c_add_uint16_t_to_buffer>
 800f862:	0003      	movs	r3, r0
 800f864:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f866:	2214      	movs	r2, #20
 800f868:	18bc      	adds	r4, r7, r2
 800f86a:	197b      	adds	r3, r7, r5
 800f86c:	881a      	ldrh	r2, [r3, #0]
 800f86e:	19bb      	adds	r3, r7, r6
 800f870:	0019      	movs	r1, r3
 800f872:	2069      	movs	r0, #105	@ 0x69
 800f874:	f001 f9fd 	bl	8010c72 <sensirion_i2c_write_data>
 800f878:	0003      	movs	r3, r0
 800f87a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f87c:	2214      	movs	r2, #20
 800f87e:	18bb      	adds	r3, r7, r2
 800f880:	2100      	movs	r1, #0
 800f882:	5e5b      	ldrsh	r3, [r3, r1]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d003      	beq.n	800f890 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f888:	18bb      	adds	r3, r7, r2
 800f88a:	2200      	movs	r2, #0
 800f88c:	5e9b      	ldrsh	r3, [r3, r2]
 800f88e:	e004      	b.n	800f89a <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f890:	4b05      	ldr	r3, [pc, #20]	@ (800f8a8 <sen5x_set_temperature_offset_parameters+0xc4>)
 800f892:	0018      	movs	r0, r3
 800f894:	f7ff fbd0 	bl	800f038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	0018      	movs	r0, r3
 800f89c:	46bd      	mov	sp, r7
 800f89e:	b007      	add	sp, #28
 800f8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8a2:	46c0      	nop			@ (mov r8, r8)
 800f8a4:	000060b2 	.word	0x000060b2
 800f8a8:	00004e20 	.word	0x00004e20

0800f8ac <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ae:	b091      	sub	sp, #68	@ 0x44
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	000a      	movs	r2, r1
 800f8b6:	1cfb      	adds	r3, r7, #3
 800f8b8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f8ba:	253e      	movs	r5, #62	@ 0x3e
 800f8bc:	197b      	adds	r3, r7, r5
 800f8be:	2200      	movs	r2, #0
 800f8c0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f8c2:	197c      	adds	r4, r7, r5
 800f8c4:	4a22      	ldr	r2, [pc, #136]	@ (800f950 <sen5x_get_product_name+0xa4>)
 800f8c6:	197b      	adds	r3, r7, r5
 800f8c8:	8819      	ldrh	r1, [r3, #0]
 800f8ca:	230c      	movs	r3, #12
 800f8cc:	18fb      	adds	r3, r7, r3
 800f8ce:	0018      	movs	r0, r3
 800f8d0:	f001 f94b 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f8d4:	0003      	movs	r3, r0
 800f8d6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f8d8:	263c      	movs	r6, #60	@ 0x3c
 800f8da:	19bc      	adds	r4, r7, r6
 800f8dc:	197b      	adds	r3, r7, r5
 800f8de:	881a      	ldrh	r2, [r3, #0]
 800f8e0:	230c      	movs	r3, #12
 800f8e2:	18fb      	adds	r3, r7, r3
 800f8e4:	0019      	movs	r1, r3
 800f8e6:	2069      	movs	r0, #105	@ 0x69
 800f8e8:	f001 f9c3 	bl	8010c72 <sensirion_i2c_write_data>
 800f8ec:	0003      	movs	r3, r0
 800f8ee:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8f0:	19bb      	adds	r3, r7, r6
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	5e9b      	ldrsh	r3, [r3, r2]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d003      	beq.n	800f902 <sen5x_get_product_name+0x56>
        return error;
 800f8fa:	19bb      	adds	r3, r7, r6
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	5e9b      	ldrsh	r3, [r3, r2]
 800f900:	e021      	b.n	800f946 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f902:	4b14      	ldr	r3, [pc, #80]	@ (800f954 <sen5x_get_product_name+0xa8>)
 800f904:	0018      	movs	r0, r3
 800f906:	f7ff fb97 	bl	800f038 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f90a:	253c      	movs	r5, #60	@ 0x3c
 800f90c:	197c      	adds	r4, r7, r5
 800f90e:	230c      	movs	r3, #12
 800f910:	18fb      	adds	r3, r7, r3
 800f912:	2220      	movs	r2, #32
 800f914:	0019      	movs	r1, r3
 800f916:	2069      	movs	r0, #105	@ 0x69
 800f918:	f001 f9c3 	bl	8010ca2 <sensirion_i2c_read_data_inplace>
 800f91c:	0003      	movs	r3, r0
 800f91e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f920:	197b      	adds	r3, r7, r5
 800f922:	2200      	movs	r2, #0
 800f924:	5e9b      	ldrsh	r3, [r3, r2]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d003      	beq.n	800f932 <sen5x_get_product_name+0x86>
        return error;
 800f92a:	197b      	adds	r3, r7, r5
 800f92c:	2200      	movs	r2, #0
 800f92e:	5e9b      	ldrsh	r3, [r3, r2]
 800f930:	e009      	b.n	800f946 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f932:	1cfb      	adds	r3, r7, #3
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	b29a      	uxth	r2, r3
 800f938:	6879      	ldr	r1, [r7, #4]
 800f93a:	230c      	movs	r3, #12
 800f93c:	18fb      	adds	r3, r7, r3
 800f93e:	0018      	movs	r0, r3
 800f940:	f000 f989 	bl	800fc56 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f944:	2300      	movs	r3, #0
}
 800f946:	0018      	movs	r0, r3
 800f948:	46bd      	mov	sp, r7
 800f94a:	b011      	add	sp, #68	@ 0x44
 800f94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f94e:	46c0      	nop			@ (mov r8, r8)
 800f950:	0000d014 	.word	0x0000d014
 800f954:	0000c350 	.word	0x0000c350

0800f958 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f95a:	b091      	sub	sp, #68	@ 0x44
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	000a      	movs	r2, r1
 800f962:	1cfb      	adds	r3, r7, #3
 800f964:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f966:	253e      	movs	r5, #62	@ 0x3e
 800f968:	197b      	adds	r3, r7, r5
 800f96a:	2200      	movs	r2, #0
 800f96c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f96e:	197c      	adds	r4, r7, r5
 800f970:	4a22      	ldr	r2, [pc, #136]	@ (800f9fc <sen5x_get_serial_number+0xa4>)
 800f972:	197b      	adds	r3, r7, r5
 800f974:	8819      	ldrh	r1, [r3, #0]
 800f976:	230c      	movs	r3, #12
 800f978:	18fb      	adds	r3, r7, r3
 800f97a:	0018      	movs	r0, r3
 800f97c:	f001 f8f5 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800f980:	0003      	movs	r3, r0
 800f982:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f984:	263c      	movs	r6, #60	@ 0x3c
 800f986:	19bc      	adds	r4, r7, r6
 800f988:	197b      	adds	r3, r7, r5
 800f98a:	881a      	ldrh	r2, [r3, #0]
 800f98c:	230c      	movs	r3, #12
 800f98e:	18fb      	adds	r3, r7, r3
 800f990:	0019      	movs	r1, r3
 800f992:	2069      	movs	r0, #105	@ 0x69
 800f994:	f001 f96d 	bl	8010c72 <sensirion_i2c_write_data>
 800f998:	0003      	movs	r3, r0
 800f99a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f99c:	19bb      	adds	r3, r7, r6
 800f99e:	2200      	movs	r2, #0
 800f9a0:	5e9b      	ldrsh	r3, [r3, r2]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d003      	beq.n	800f9ae <sen5x_get_serial_number+0x56>
        return error;
 800f9a6:	19bb      	adds	r3, r7, r6
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	5e9b      	ldrsh	r3, [r3, r2]
 800f9ac:	e021      	b.n	800f9f2 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f9ae:	4b14      	ldr	r3, [pc, #80]	@ (800fa00 <sen5x_get_serial_number+0xa8>)
 800f9b0:	0018      	movs	r0, r3
 800f9b2:	f7ff fb41 	bl	800f038 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f9b6:	253c      	movs	r5, #60	@ 0x3c
 800f9b8:	197c      	adds	r4, r7, r5
 800f9ba:	230c      	movs	r3, #12
 800f9bc:	18fb      	adds	r3, r7, r3
 800f9be:	2220      	movs	r2, #32
 800f9c0:	0019      	movs	r1, r3
 800f9c2:	2069      	movs	r0, #105	@ 0x69
 800f9c4:	f001 f96d 	bl	8010ca2 <sensirion_i2c_read_data_inplace>
 800f9c8:	0003      	movs	r3, r0
 800f9ca:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9cc:	197b      	adds	r3, r7, r5
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	5e9b      	ldrsh	r3, [r3, r2]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d003      	beq.n	800f9de <sen5x_get_serial_number+0x86>
        return error;
 800f9d6:	197b      	adds	r3, r7, r5
 800f9d8:	2200      	movs	r2, #0
 800f9da:	5e9b      	ldrsh	r3, [r3, r2]
 800f9dc:	e009      	b.n	800f9f2 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f9de:	1cfb      	adds	r3, r7, #3
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	6879      	ldr	r1, [r7, #4]
 800f9e6:	230c      	movs	r3, #12
 800f9e8:	18fb      	adds	r3, r7, r3
 800f9ea:	0018      	movs	r0, r3
 800f9ec:	f000 f933 	bl	800fc56 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	0018      	movs	r0, r3
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	b011      	add	sp, #68	@ 0x44
 800f9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9fa:	46c0      	nop			@ (mov r8, r8)
 800f9fc:	0000d033 	.word	0x0000d033
 800fa00:	0000c350 	.word	0x0000c350

0800fa04 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800fa04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa06:	b089      	sub	sp, #36	@ 0x24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	607a      	str	r2, [r7, #4]
 800fa10:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800fa12:	251e      	movs	r5, #30
 800fa14:	197b      	adds	r3, r7, r5
 800fa16:	2200      	movs	r2, #0
 800fa18:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800fa1a:	197c      	adds	r4, r7, r5
 800fa1c:	23d1      	movs	r3, #209	@ 0xd1
 800fa1e:	021a      	lsls	r2, r3, #8
 800fa20:	197b      	adds	r3, r7, r5
 800fa22:	8819      	ldrh	r1, [r3, #0]
 800fa24:	2310      	movs	r3, #16
 800fa26:	18fb      	adds	r3, r7, r3
 800fa28:	0018      	movs	r0, r3
 800fa2a:	f001 f89e 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800fa2e:	0003      	movs	r3, r0
 800fa30:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa32:	261c      	movs	r6, #28
 800fa34:	19bc      	adds	r4, r7, r6
 800fa36:	197b      	adds	r3, r7, r5
 800fa38:	881a      	ldrh	r2, [r3, #0]
 800fa3a:	2310      	movs	r3, #16
 800fa3c:	18fb      	adds	r3, r7, r3
 800fa3e:	0019      	movs	r1, r3
 800fa40:	2069      	movs	r0, #105	@ 0x69
 800fa42:	f001 f916 	bl	8010c72 <sensirion_i2c_write_data>
 800fa46:	0003      	movs	r3, r0
 800fa48:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa4a:	19bb      	adds	r3, r7, r6
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	5e9b      	ldrsh	r3, [r3, r2]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d003      	beq.n	800fa5c <sen5x_get_version+0x58>
        return error;
 800fa54:	19bb      	adds	r3, r7, r6
 800fa56:	2200      	movs	r2, #0
 800fa58:	5e9b      	ldrsh	r3, [r3, r2]
 800fa5a:	e038      	b.n	800face <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fa5c:	4b1e      	ldr	r3, [pc, #120]	@ (800fad8 <sen5x_get_version+0xd4>)
 800fa5e:	0018      	movs	r0, r3
 800fa60:	f7ff faea 	bl	800f038 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800fa64:	251c      	movs	r5, #28
 800fa66:	197c      	adds	r4, r7, r5
 800fa68:	2310      	movs	r3, #16
 800fa6a:	18fb      	adds	r3, r7, r3
 800fa6c:	2208      	movs	r2, #8
 800fa6e:	0019      	movs	r1, r3
 800fa70:	2069      	movs	r0, #105	@ 0x69
 800fa72:	f001 f916 	bl	8010ca2 <sensirion_i2c_read_data_inplace>
 800fa76:	0003      	movs	r3, r0
 800fa78:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa7a:	197b      	adds	r3, r7, r5
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	5e9b      	ldrsh	r3, [r3, r2]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d003      	beq.n	800fa8c <sen5x_get_version+0x88>
        return error;
 800fa84:	197b      	adds	r3, r7, r5
 800fa86:	2200      	movs	r2, #0
 800fa88:	5e9b      	ldrsh	r3, [r3, r2]
 800fa8a:	e020      	b.n	800face <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800fa8c:	2110      	movs	r1, #16
 800fa8e:	187b      	adds	r3, r7, r1
 800fa90:	781a      	ldrb	r2, [r3, #0]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800fa96:	187b      	adds	r3, r7, r1
 800fa98:	785a      	ldrb	r2, [r3, #1]
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800fa9e:	187b      	adds	r3, r7, r1
 800faa0:	789b      	ldrb	r3, [r3, #2]
 800faa2:	1e5a      	subs	r2, r3, #1
 800faa4:	4193      	sbcs	r3, r2
 800faa6:	b2da      	uxtb	r2, r3
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800faac:	187b      	adds	r3, r7, r1
 800faae:	78da      	ldrb	r2, [r3, #3]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800fab4:	187b      	adds	r3, r7, r1
 800fab6:	791a      	ldrb	r2, [r3, #4]
 800fab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faba:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800fabc:	187b      	adds	r3, r7, r1
 800fabe:	795a      	ldrb	r2, [r3, #5]
 800fac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fac2:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800fac4:	187b      	adds	r3, r7, r1
 800fac6:	799a      	ldrb	r2, [r3, #6]
 800fac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faca:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800facc:	2300      	movs	r3, #0
}
 800face:	0018      	movs	r0, r3
 800fad0:	46bd      	mov	sp, r7
 800fad2:	b009      	add	sp, #36	@ 0x24
 800fad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad6:	46c0      	nop			@ (mov r8, r8)
 800fad8:	00004e20 	.word	0x00004e20

0800fadc <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800fadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fade:	b087      	sub	sp, #28
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800fae4:	2516      	movs	r5, #22
 800fae6:	197b      	adds	r3, r7, r5
 800fae8:	2200      	movs	r2, #0
 800faea:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800faec:	197c      	adds	r4, r7, r5
 800faee:	4a21      	ldr	r2, [pc, #132]	@ (800fb74 <sen5x_read_device_status+0x98>)
 800faf0:	197b      	adds	r3, r7, r5
 800faf2:	8819      	ldrh	r1, [r3, #0]
 800faf4:	260c      	movs	r6, #12
 800faf6:	19bb      	adds	r3, r7, r6
 800faf8:	0018      	movs	r0, r3
 800fafa:	f001 f836 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800fafe:	0003      	movs	r3, r0
 800fb00:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fb02:	2314      	movs	r3, #20
 800fb04:	18fc      	adds	r4, r7, r3
 800fb06:	197b      	adds	r3, r7, r5
 800fb08:	881a      	ldrh	r2, [r3, #0]
 800fb0a:	19bb      	adds	r3, r7, r6
 800fb0c:	0019      	movs	r1, r3
 800fb0e:	2069      	movs	r0, #105	@ 0x69
 800fb10:	f001 f8af 	bl	8010c72 <sensirion_i2c_write_data>
 800fb14:	0003      	movs	r3, r0
 800fb16:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fb18:	2314      	movs	r3, #20
 800fb1a:	18fb      	adds	r3, r7, r3
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	5e9b      	ldrsh	r3, [r3, r2]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d001      	beq.n	800fb28 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fb24:	4b14      	ldr	r3, [pc, #80]	@ (800fb78 <sen5x_read_device_status+0x9c>)
 800fb26:	e020      	b.n	800fb6a <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fb28:	4b14      	ldr	r3, [pc, #80]	@ (800fb7c <sen5x_read_device_status+0xa0>)
 800fb2a:	0018      	movs	r0, r3
 800fb2c:	f7ff fa84 	bl	800f038 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fb30:	2514      	movs	r5, #20
 800fb32:	197c      	adds	r4, r7, r5
 800fb34:	230c      	movs	r3, #12
 800fb36:	18fb      	adds	r3, r7, r3
 800fb38:	2204      	movs	r2, #4
 800fb3a:	0019      	movs	r1, r3
 800fb3c:	2069      	movs	r0, #105	@ 0x69
 800fb3e:	f001 f8b0 	bl	8010ca2 <sensirion_i2c_read_data_inplace>
 800fb42:	0003      	movs	r3, r0
 800fb44:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fb46:	197b      	adds	r3, r7, r5
 800fb48:	2200      	movs	r2, #0
 800fb4a:	5e9b      	ldrsh	r3, [r3, r2]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d003      	beq.n	800fb58 <sen5x_read_device_status+0x7c>
        return error;
 800fb50:	197b      	adds	r3, r7, r5
 800fb52:	2200      	movs	r2, #0
 800fb54:	5e9b      	ldrsh	r3, [r3, r2]
 800fb56:	e008      	b.n	800fb6a <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fb58:	230c      	movs	r3, #12
 800fb5a:	18fb      	adds	r3, r7, r3
 800fb5c:	0018      	movs	r0, r3
 800fb5e:	f000 f853 	bl	800fc08 <sensirion_common_bytes_to_uint32_t>
 800fb62:	0002      	movs	r2, r0
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	b007      	add	sp, #28
 800fb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb72:	46c0      	nop			@ (mov r8, r8)
 800fb74:	0000d206 	.word	0x0000d206
 800fb78:	ffffd206 	.word	0xffffd206
 800fb7c:	00004e20 	.word	0x00004e20

0800fb80 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fb80:	b590      	push	{r4, r7, lr}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fb86:	1dbb      	adds	r3, r7, #6
 800fb88:	2200      	movs	r2, #0
 800fb8a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fb8c:	1dbc      	adds	r4, r7, #6
 800fb8e:	4a12      	ldr	r2, [pc, #72]	@ (800fbd8 <sen5x_device_reset+0x58>)
 800fb90:	1dbb      	adds	r3, r7, #6
 800fb92:	8819      	ldrh	r1, [r3, #0]
 800fb94:	003b      	movs	r3, r7
 800fb96:	0018      	movs	r0, r3
 800fb98:	f000 ffe7 	bl	8010b6a <sensirion_i2c_add_command_to_buffer>
 800fb9c:	0003      	movs	r3, r0
 800fb9e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fba0:	1d3c      	adds	r4, r7, #4
 800fba2:	1dbb      	adds	r3, r7, #6
 800fba4:	881a      	ldrh	r2, [r3, #0]
 800fba6:	003b      	movs	r3, r7
 800fba8:	0019      	movs	r1, r3
 800fbaa:	2069      	movs	r0, #105	@ 0x69
 800fbac:	f001 f861 	bl	8010c72 <sensirion_i2c_write_data>
 800fbb0:	0003      	movs	r3, r0
 800fbb2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fbb4:	1d3b      	adds	r3, r7, #4
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	5e9b      	ldrsh	r3, [r3, r2]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d003      	beq.n	800fbc6 <sen5x_device_reset+0x46>
        return error;
 800fbbe:	1d3b      	adds	r3, r7, #4
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	5e9b      	ldrsh	r3, [r3, r2]
 800fbc4:	e004      	b.n	800fbd0 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800fbc6:	4b05      	ldr	r3, [pc, #20]	@ (800fbdc <sen5x_device_reset+0x5c>)
 800fbc8:	0018      	movs	r0, r3
 800fbca:	f7ff fa35 	bl	800f038 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	0018      	movs	r0, r3
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	b003      	add	sp, #12
 800fbd6:	bd90      	pop	{r4, r7, pc}
 800fbd8:	0000d304 	.word	0x0000d304
 800fbdc:	00030d40 	.word	0x00030d40

0800fbe0 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	b21b      	sxth	r3, r3
 800fbee:	021b      	lsls	r3, r3, #8
 800fbf0:	b21a      	sxth	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	b21b      	sxth	r3, r3
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	b21b      	sxth	r3, r3
 800fbfe:	b29b      	uxth	r3, r3
}
 800fc00:	0018      	movs	r0, r3
 800fc02:	46bd      	mov	sp, r7
 800fc04:	b002      	add	sp, #8
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	061a      	lsls	r2, r3, #24
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	041b      	lsls	r3, r3, #16
 800fc1e:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3302      	adds	r3, #2
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fc28:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	3203      	adds	r2, #3
 800fc2e:	7812      	ldrb	r2, [r2, #0]
 800fc30:	4313      	orrs	r3, r2
}
 800fc32:	0018      	movs	r0, r3
 800fc34:	46bd      	mov	sp, r7
 800fc36:	b002      	add	sp, #8
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b082      	sub	sp, #8
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	0018      	movs	r0, r3
 800fc46:	f7ff ffcb 	bl	800fbe0 <sensirion_common_bytes_to_uint16_t>
 800fc4a:	0003      	movs	r3, r0
 800fc4c:	b21b      	sxth	r3, r3
}
 800fc4e:	0018      	movs	r0, r3
 800fc50:	46bd      	mov	sp, r7
 800fc52:	b002      	add	sp, #8
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b086      	sub	sp, #24
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	60f8      	str	r0, [r7, #12]
 800fc5e:	60b9      	str	r1, [r7, #8]
 800fc60:	1dbb      	adds	r3, r7, #6
 800fc62:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fc64:	2316      	movs	r3, #22
 800fc66:	18fb      	adds	r3, r7, r3
 800fc68:	2200      	movs	r2, #0
 800fc6a:	801a      	strh	r2, [r3, #0]
 800fc6c:	e00f      	b.n	800fc8e <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fc6e:	2016      	movs	r0, #22
 800fc70:	183b      	adds	r3, r7, r0
 800fc72:	881b      	ldrh	r3, [r3, #0]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	18d2      	adds	r2, r2, r3
 800fc78:	183b      	adds	r3, r7, r0
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	68b9      	ldr	r1, [r7, #8]
 800fc7e:	18cb      	adds	r3, r1, r3
 800fc80:	7812      	ldrb	r2, [r2, #0]
 800fc82:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fc84:	183b      	adds	r3, r7, r0
 800fc86:	881a      	ldrh	r2, [r3, #0]
 800fc88:	183b      	adds	r3, r7, r0
 800fc8a:	3201      	adds	r2, #1
 800fc8c:	801a      	strh	r2, [r3, #0]
 800fc8e:	2316      	movs	r3, #22
 800fc90:	18fa      	adds	r2, r7, r3
 800fc92:	1dbb      	adds	r3, r7, #6
 800fc94:	8812      	ldrh	r2, [r2, #0]
 800fc96:	881b      	ldrh	r3, [r3, #0]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d3e8      	bcc.n	800fc6e <sensirion_common_copy_bytes+0x18>
    }
}
 800fc9c:	46c0      	nop			@ (mov r8, r8)
 800fc9e:	46c0      	nop			@ (mov r8, r8)
 800fca0:	46bd      	mov	sp, r7
 800fca2:	b006      	add	sp, #24
 800fca4:	bd80      	pop	{r7, pc}
	...

0800fca8 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d113      	bne.n	800fcee <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	22fe      	movs	r2, #254	@ 0xfe
 800fcca:	0592      	lsls	r2, r2, #22
 800fccc:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	4a1a      	ldr	r2, [pc, #104]	@ (800fd3c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fcd2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	4a1a      	ldr	r2, [pc, #104]	@ (800fd40 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fcd8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	4a19      	ldr	r2, [pc, #100]	@ (800fd44 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fcde:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	4a19      	ldr	r2, [pc, #100]	@ (800fd48 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fce4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	4a18      	ldr	r2, [pc, #96]	@ (800fd4c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fcea:	61da      	str	r2, [r3, #28]
 800fcec:	e011      	b.n	800fd12 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	4a17      	ldr	r2, [pc, #92]	@ (800fd50 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fcf2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4a17      	ldr	r2, [pc, #92]	@ (800fd54 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fcf8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4a16      	ldr	r2, [pc, #88]	@ (800fd58 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fcfe:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	4a16      	ldr	r2, [pc, #88]	@ (800fd5c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fd04:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	4a15      	ldr	r2, [pc, #84]	@ (800fd60 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fd0a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	4a15      	ldr	r2, [pc, #84]	@ (800fd64 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fd10:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4a14      	ldr	r2, [pc, #80]	@ (800fd68 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fd16:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4a14      	ldr	r2, [pc, #80]	@ (800fd6c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fd1c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	4a12      	ldr	r2, [pc, #72]	@ (800fd6c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fd22:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4a12      	ldr	r2, [pc, #72]	@ (800fd70 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fd28:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	0018      	movs	r0, r3
 800fd2e:	f000 f831 	bl	800fd94 <GasIndexAlgorithm_reset>
}
 800fd32:	46c0      	nop			@ (mov r8, r8)
 800fd34:	46bd      	mov	sp, r7
 800fd36:	b004      	add	sp, #16
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	46c0      	nop			@ (mov r8, r8)
 800fd3c:	00002710 	.word	0x00002710
 800fd40:	44340000 	.word	0x44340000
 800fd44:	46859800 	.word	0x46859800
 800fd48:	46a05000 	.word	0x46a05000
 800fd4c:	41f00000 	.word	0x41f00000
 800fd50:	42c80000 	.word	0x42c80000
 800fd54:	00004e20 	.word	0x00004e20
 800fd58:	43340000 	.word	0x43340000
 800fd5c:	4528c000 	.word	0x4528c000
 800fd60:	45a32000 	.word	0x45a32000
 800fd64:	43aa0000 	.word	0x43aa0000
 800fd68:	43660000 	.word	0x43660000
 800fd6c:	41400000 	.word	0x41400000
 800fd70:	42480000 	.word	0x42480000

0800fd74 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800fd7e:	22fe      	movs	r2, #254	@ 0xfe
 800fd80:	0592      	lsls	r2, r2, #22
 800fd82:	6839      	ldr	r1, [r7, #0]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	0018      	movs	r0, r3
 800fd88:	f7ff ff8e 	bl	800fca8 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fd8c:	46c0      	nop			@ (mov r8, r8)
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	b002      	add	sp, #8
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	0018      	movs	r0, r3
 800fdb2:	f000 f805 	bl	800fdc0 <GasIndexAlgorithm__init_instances>
}
 800fdb6:	46c0      	nop			@ (mov r8, r8)
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	b002      	add	sp, #8
 800fdbc:	bd80      	pop	{r7, pc}
	...

0800fdc0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800fdc0:	b590      	push	{r4, r7, lr}
 800fdc2:	b083      	sub	sp, #12
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	0018      	movs	r0, r3
 800fdcc:	f000 f8e8 	bl	800ffa0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	0018      	movs	r0, r3
 800fdd4:	f000 f9a6 	bl	8010124 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fdd8:	1c04      	adds	r4, r0, #0
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	0018      	movs	r0, r3
 800fdde:	f000 f9ab 	bl	8010138 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fde2:	1c02      	adds	r2, r0, #0
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	1c21      	adds	r1, r4, #0
 800fde8:	0018      	movs	r0, r3
 800fdea:	f000 fc3b 	bl	8010664 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d107      	bne.n	800fe06 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fdf6:	23fe      	movs	r3, #254	@ 0xfe
 800fdf8:	059b      	lsls	r3, r3, #22
 800fdfa:	4a0a      	ldr	r2, [pc, #40]	@ (800fe24 <GasIndexAlgorithm__init_instances+0x64>)
 800fdfc:	490a      	ldr	r1, [pc, #40]	@ (800fe28 <GasIndexAlgorithm__init_instances+0x68>)
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fc86 	bl	8010710 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800fe04:	e005      	b.n	800fe12 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fe06:	4b09      	ldr	r3, [pc, #36]	@ (800fe2c <GasIndexAlgorithm__init_instances+0x6c>)
 800fe08:	4a09      	ldr	r2, [pc, #36]	@ (800fe30 <GasIndexAlgorithm__init_instances+0x70>)
 800fe0a:	490a      	ldr	r1, [pc, #40]	@ (800fe34 <GasIndexAlgorithm__init_instances+0x74>)
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 fc7f 	bl	8010710 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	0018      	movs	r0, r3
 800fe16:	f000 fd35 	bl	8010884 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800fe1a:	46c0      	nop			@ (mov r8, r8)
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	b003      	add	sp, #12
 800fe20:	bd90      	pop	{r4, r7, pc}
 800fe22:	46c0      	nop			@ (mov r8, r8)
 800fe24:	bc257a78 	.word	0xbc257a78
 800fe28:	44198000 	.word	0x44198000
 800fe2c:	42c80000 	.word	0x42c80000
 800fe30:	bbd4fdf4 	.word	0xbbd4fdf4
 800fe34:	43550000 	.word	0x43550000

0800fe38 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fe38:	b590      	push	{r4, r7, lr}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe48:	4952      	ldr	r1, [pc, #328]	@ (800ff94 <GasIndexAlgorithm_process+0x15c>)
 800fe4a:	1c18      	adds	r0, r3, #0
 800fe4c:	f7f0 fb7a 	bl	8000544 <__aeabi_fcmple>
 800fe50:	1e03      	subs	r3, r0, #0
 800fe52:	d00c      	beq.n	800fe6e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	1c19      	adds	r1, r3, #0
 800fe5e:	1c10      	adds	r0, r2, #0
 800fe60:	f7f0 fd2e 	bl	80008c0 <__aeabi_fadd>
 800fe64:	1c03      	adds	r3, r0, #0
 800fe66:	1c1a      	adds	r2, r3, #0
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe6c:	e080      	b.n	800ff70 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	dd25      	ble.n	800fec0 <GasIndexAlgorithm_process+0x88>
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	4a48      	ldr	r2, [pc, #288]	@ (800ff98 <GasIndexAlgorithm_process+0x160>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	dc21      	bgt.n	800fec0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	68ba      	ldr	r2, [r7, #8]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	dc04      	bgt.n	800fe90 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	60bb      	str	r3, [r7, #8]
 800fe8e:	e00d      	b.n	800feac <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	4a41      	ldr	r2, [pc, #260]	@ (800ff9c <GasIndexAlgorithm_process+0x164>)
 800fe96:	4694      	mov	ip, r2
 800fe98:	4463      	add	r3, ip
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	dd05      	ble.n	800feac <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	4a3d      	ldr	r2, [pc, #244]	@ (800ff9c <GasIndexAlgorithm_process+0x164>)
 800fea6:	4694      	mov	ip, r2
 800fea8:	4463      	add	r3, ip
 800feaa:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	68ba      	ldr	r2, [r7, #8]
 800feb2:	1ad3      	subs	r3, r2, r3
 800feb4:	0018      	movs	r0, r3
 800feb6:	f7f1 fcb7 	bl	8001828 <__aeabi_i2f>
 800feba:	1c02      	adds	r2, r0, #0
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d005      	beq.n	800fed4 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	0018      	movs	r0, r3
 800fecc:	f000 f945 	bl	801015a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800fed0:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800fed2:	d014      	beq.n	800fefe <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	1c11      	adds	r1, r2, #0
 800fedc:	0018      	movs	r0, r3
 800fede:	f000 fbd1 	bl	8010684 <GasIndexAlgorithm__mox_model__process>
 800fee2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	1c11      	adds	r1, r2, #0
 800fef0:	0018      	movs	r0, r3
 800fef2:	f000 fc25 	bl	8010740 <GasIndexAlgorithm__sigmoid_scaled__process>
 800fef6:	1c02      	adds	r2, r0, #0
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	639a      	str	r2, [r3, #56]	@ 0x38
 800fefc:	e003      	b.n	800ff06 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	689a      	ldr	r2, [r3, #8]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	1c11      	adds	r1, r2, #0
 800ff0e:	0018      	movs	r0, r3
 800ff10:	f000 fcec 	bl	80108ec <GasIndexAlgorithm__adaptive_lowpass__process>
 800ff14:	1c02      	adds	r2, r0, #0
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff1e:	21fc      	movs	r1, #252	@ 0xfc
 800ff20:	0589      	lsls	r1, r1, #22
 800ff22:	1c18      	adds	r0, r3, #0
 800ff24:	f7f0 fb04 	bl	8000530 <__aeabi_fcmplt>
 800ff28:	1e03      	subs	r3, r0, #0
 800ff2a:	d003      	beq.n	800ff34 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	22fc      	movs	r2, #252	@ 0xfc
 800ff30:	0592      	lsls	r2, r2, #22
 800ff32:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff38:	2100      	movs	r1, #0
 800ff3a:	1c18      	adds	r0, r3, #0
 800ff3c:	f7f0 fb0c 	bl	8000558 <__aeabi_fcmpgt>
 800ff40:	1e03      	subs	r3, r0, #0
 800ff42:	d015      	beq.n	800ff70 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	1c11      	adds	r1, r2, #0
 800ff4c:	0018      	movs	r0, r3
 800ff4e:	f000 fa4f 	bl	80103f0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	0018      	movs	r0, r3
 800ff56:	f000 f8e5 	bl	8010124 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ff5a:	1c04      	adds	r4, r0, #0
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	0018      	movs	r0, r3
 800ff60:	f000 f8ea 	bl	8010138 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ff64:	1c02      	adds	r2, r0, #0
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	1c21      	adds	r1, r4, #0
 800ff6a:	0018      	movs	r0, r3
 800ff6c:	f000 fb7a 	bl	8010664 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff74:	21fc      	movs	r1, #252	@ 0xfc
 800ff76:	0589      	lsls	r1, r1, #22
 800ff78:	1c18      	adds	r0, r3, #0
 800ff7a:	f7f0 fca1 	bl	80008c0 <__aeabi_fadd>
 800ff7e:	1c03      	adds	r3, r0, #0
 800ff80:	1c18      	adds	r0, r3, #0
 800ff82:	f7f1 fc31 	bl	80017e8 <__aeabi_f2iz>
 800ff86:	0002      	movs	r2, r0
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	601a      	str	r2, [r3, #0]
    return;
 800ff8c:	46c0      	nop			@ (mov r8, r8)
}
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	b005      	add	sp, #20
 800ff92:	bd90      	pop	{r4, r7, pc}
 800ff94:	42340000 	.word	0x42340000
 800ff98:	0000fde7 	.word	0x0000fde7
 800ff9c:	00007fff 	.word	0x00007fff

0800ffa0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ffa0:	b5b0      	push	{r4, r5, r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	223c      	movs	r2, #60	@ 0x3c
 800ffac:	2100      	movs	r1, #0
 800ffae:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	4952      	ldr	r1, [pc, #328]	@ (8010114 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ffca:	1c18      	adds	r0, r3, #0
 800ffcc:	f7f0 fe6a 	bl	8000ca4 <__aeabi_fdiv>
 800ffd0:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ffd2:	2188      	movs	r1, #136	@ 0x88
 800ffd4:	05c9      	lsls	r1, r1, #23
 800ffd6:	1c18      	adds	r0, r3, #0
 800ffd8:	f7f1 f832 	bl	8001040 <__aeabi_fmul>
 800ffdc:	1c03      	adds	r3, r0, #0
 800ffde:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	494a      	ldr	r1, [pc, #296]	@ (8010114 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ffea:	1c18      	adds	r0, r3, #0
 800ffec:	f7f0 fe5a 	bl	8000ca4 <__aeabi_fdiv>
 800fff0:	1c03      	adds	r3, r0, #0
 800fff2:	1c19      	adds	r1, r3, #0
 800fff4:	1c20      	adds	r0, r4, #0
 800fff6:	f7f0 fc63 	bl	80008c0 <__aeabi_fadd>
 800fffa:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800fffc:	1c19      	adds	r1, r3, #0
 800fffe:	1c28      	adds	r0, r5, #0
 8010000:	f7f0 fe50 	bl	8000ca4 <__aeabi_fdiv>
 8010004:	1c03      	adds	r3, r0, #0
 8010006:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	4940      	ldr	r1, [pc, #256]	@ (8010114 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8010012:	1c18      	adds	r0, r3, #0
 8010014:	f7f0 fe46 	bl	8000ca4 <__aeabi_fdiv>
 8010018:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 801001a:	2185      	movs	r1, #133	@ 0x85
 801001c:	05c9      	lsls	r1, r1, #23
 801001e:	1c18      	adds	r0, r3, #0
 8010020:	f7f1 f80e 	bl	8001040 <__aeabi_fmul>
 8010024:	1c03      	adds	r3, r0, #0
 8010026:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	4938      	ldr	r1, [pc, #224]	@ (8010114 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8010032:	1c18      	adds	r0, r3, #0
 8010034:	f7f0 fe36 	bl	8000ca4 <__aeabi_fdiv>
 8010038:	1c03      	adds	r3, r0, #0
 801003a:	1c19      	adds	r1, r3, #0
 801003c:	1c20      	adds	r0, r4, #0
 801003e:	f7f0 fc3f 	bl	80008c0 <__aeabi_fadd>
 8010042:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8010044:	1c19      	adds	r1, r3, #0
 8010046:	1c28      	adds	r0, r5, #0
 8010048:	f7f0 fe2c 	bl	8000ca4 <__aeabi_fdiv>
 801004c:	1c03      	adds	r3, r0, #0
 801004e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b01      	cmp	r3, #1
 801005a:	d118      	bne.n	801008e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8010060:	2188      	movs	r1, #136	@ 0x88
 8010062:	05c9      	lsls	r1, r1, #23
 8010064:	1c18      	adds	r0, r3, #0
 8010066:	f7f0 ffeb 	bl	8001040 <__aeabi_fmul>
 801006a:	1c03      	adds	r3, r0, #0
 801006c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8010072:	4929      	ldr	r1, [pc, #164]	@ (8010118 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8010074:	1c18      	adds	r0, r3, #0
 8010076:	f7f0 fc23 	bl	80008c0 <__aeabi_fadd>
 801007a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 801007c:	1c19      	adds	r1, r3, #0
 801007e:	1c20      	adds	r0, r4, #0
 8010080:	f7f0 fe10 	bl	8000ca4 <__aeabi_fdiv>
 8010084:	1c03      	adds	r3, r0, #0
 8010086:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	655a      	str	r2, [r3, #84]	@ 0x54
 801008c:	e017      	b.n	80100be <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8010092:	2188      	movs	r1, #136	@ 0x88
 8010094:	05c9      	lsls	r1, r1, #23
 8010096:	1c18      	adds	r0, r3, #0
 8010098:	f7f0 ffd2 	bl	8001040 <__aeabi_fmul>
 801009c:	1c03      	adds	r3, r0, #0
 801009e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80100a4:	491d      	ldr	r1, [pc, #116]	@ (801011c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80100a6:	1c18      	adds	r0, r3, #0
 80100a8:	f7f0 fc0a 	bl	80008c0 <__aeabi_fadd>
 80100ac:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80100ae:	1c19      	adds	r1, r3, #0
 80100b0:	1c20      	adds	r0, r4, #0
 80100b2:	f7f0 fdf7 	bl	8000ca4 <__aeabi_fdiv>
 80100b6:	1c03      	adds	r3, r0, #0
 80100b8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80100c2:	2185      	movs	r1, #133	@ 0x85
 80100c4:	05c9      	lsls	r1, r1, #23
 80100c6:	1c18      	adds	r0, r3, #0
 80100c8:	f7f0 ffba 	bl	8001040 <__aeabi_fmul>
 80100cc:	1c03      	adds	r3, r0, #0
 80100ce:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	4912      	ldr	r1, [pc, #72]	@ (8010120 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80100d6:	1c18      	adds	r0, r3, #0
 80100d8:	f7f0 fbf2 	bl	80008c0 <__aeabi_fadd>
 80100dc:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80100de:	1c19      	adds	r1, r3, #0
 80100e0:	1c20      	adds	r0, r4, #0
 80100e2:	f7f0 fddf 	bl	8000ca4 <__aeabi_fdiv>
 80100e6:	1c03      	adds	r3, r0, #0
 80100e8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 801010c:	46c0      	nop			@ (mov r8, r8)
 801010e:	46bd      	mov	sp, r7
 8010110:	b002      	add	sp, #8
 8010112:	bdb0      	pop	{r4, r5, r7, pc}
 8010114:	45610000 	.word	0x45610000
 8010118:	44960000 	.word	0x44960000
 801011c:	41a00000 	.word	0x41a00000
 8010120:	451c4000 	.word	0x451c4000

08010124 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8010130:	1c18      	adds	r0, r3, #0
 8010132:	46bd      	mov	sp, r7
 8010134:	b002      	add	sp, #8
 8010136:	bd80      	pop	{r7, pc}

08010138 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8010148:	1c19      	adds	r1, r3, #0
 801014a:	1c10      	adds	r0, r2, #0
 801014c:	f7f0 fbb8 	bl	80008c0 <__aeabi_fadd>
 8010150:	1c03      	adds	r3, r0, #0
}
 8010152:	1c18      	adds	r0, r3, #0
 8010154:	46bd      	mov	sp, r7
 8010156:	b002      	add	sp, #8
 8010158:	bd80      	pop	{r7, pc}

0801015a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	223c      	movs	r2, #60	@ 0x3c
 8010166:	5c9b      	ldrb	r3, [r3, r2]
}
 8010168:	0018      	movs	r0, r3
 801016a:	46bd      	mov	sp, r7
 801016c:	b002      	add	sp, #8
 801016e:	bd80      	pop	{r7, pc}

08010170 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8010170:	b5b0      	push	{r4, r5, r7, lr}
 8010172:	b08c      	sub	sp, #48	@ 0x30
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 801017c:	1c19      	adds	r1, r3, #0
 801017e:	4895      	ldr	r0, [pc, #596]	@ (80103d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8010180:	f7f1 f8b8 	bl	80012f4 <__aeabi_fsub>
 8010184:	1c03      	adds	r3, r0, #0
 8010186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801018c:	1c19      	adds	r1, r3, #0
 801018e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010190:	f7f0 f9e2 	bl	8000558 <__aeabi_fcmpgt>
 8010194:	1e03      	subs	r3, r0, #0
 8010196:	d00b      	beq.n	80101b0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80101a0:	1c19      	adds	r1, r3, #0
 80101a2:	1c10      	adds	r0, r2, #0
 80101a4:	f7f0 fb8c 	bl	80008c0 <__aeabi_fadd>
 80101a8:	1c03      	adds	r3, r0, #0
 80101aa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101b4:	1c19      	adds	r1, r3, #0
 80101b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101b8:	f7f0 f9ce 	bl	8000558 <__aeabi_fcmpgt>
 80101bc:	1e03      	subs	r3, r0, #0
 80101be:	d00b      	beq.n	80101d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80101c8:	1c19      	adds	r1, r3, #0
 80101ca:	1c10      	adds	r0, r2, #0
 80101cc:	f7f0 fb78 	bl	80008c0 <__aeabi_fadd>
 80101d0:	1c03      	adds	r3, r0, #0
 80101d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6959      	ldr	r1, [r3, #20]
 80101dc:	4a7e      	ldr	r2, [pc, #504]	@ (80103d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	0018      	movs	r0, r3
 80101e2:	f000 f9f1 	bl	80105c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	1c11      	adds	r1, r2, #0
 80101ee:	0018      	movs	r0, r3
 80101f0:	f000 f9fa 	bl	80105e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101f4:	1c03      	adds	r3, r0, #0
 80101f6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010204:	1c19      	adds	r1, r3, #0
 8010206:	1c10      	adds	r0, r2, #0
 8010208:	f7f1 f874 	bl	80012f4 <__aeabi_fsub>
 801020c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 801020e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010210:	1c18      	adds	r0, r3, #0
 8010212:	f7f0 ff15 	bl	8001040 <__aeabi_fmul>
 8010216:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010218:	1c19      	adds	r1, r3, #0
 801021a:	1c20      	adds	r0, r4, #0
 801021c:	f7f0 fb50 	bl	80008c0 <__aeabi_fadd>
 8010220:	1c03      	adds	r3, r0, #0
 8010222:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 801022c:	1c19      	adds	r1, r3, #0
 801022e:	486b      	ldr	r0, [pc, #428]	@ (80103dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010230:	f7f1 f860 	bl	80012f4 <__aeabi_fsub>
 8010234:	1c03      	adds	r3, r0, #0
 8010236:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	1c11      	adds	r1, r2, #0
 8010240:	0018      	movs	r0, r3
 8010242:	f000 f9d1 	bl	80105e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010246:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010248:	1c19      	adds	r1, r3, #0
 801024a:	1c28      	adds	r0, r5, #0
 801024c:	f7f0 fef8 	bl	8001040 <__aeabi_fmul>
 8010250:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8010252:	1c19      	adds	r1, r3, #0
 8010254:	1c20      	adds	r0, r4, #0
 8010256:	f7f0 fb33 	bl	80008c0 <__aeabi_fadd>
 801025a:	1c03      	adds	r3, r0, #0
 801025c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801025e:	4a60      	ldr	r2, [pc, #384]	@ (80103e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010260:	6a39      	ldr	r1, [r7, #32]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	0018      	movs	r0, r3
 8010266:	f000 f9af 	bl	80105c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	1c11      	adds	r1, r2, #0
 8010272:	0018      	movs	r0, r3
 8010274:	f000 f9b8 	bl	80105e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010278:	1c03      	adds	r3, r0, #0
 801027a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 801027c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801027e:	69f8      	ldr	r0, [r7, #28]
 8010280:	f7f0 fede 	bl	8001040 <__aeabi_fmul>
 8010284:	1c03      	adds	r3, r0, #0
 8010286:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6999      	ldr	r1, [r3, #24]
 8010290:	4a51      	ldr	r2, [pc, #324]	@ (80103d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	0018      	movs	r0, r3
 8010296:	f000 f997 	bl	80105c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	1c11      	adds	r1, r2, #0
 80102a2:	0018      	movs	r0, r3
 80102a4:	f000 f9a0 	bl	80105e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80102a8:	1c03      	adds	r3, r0, #0
 80102aa:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80102b8:	1c19      	adds	r1, r3, #0
 80102ba:	1c10      	adds	r0, r2, #0
 80102bc:	f7f1 f81a 	bl	80012f4 <__aeabi_fsub>
 80102c0:	1c03      	adds	r3, r0, #0
 80102c2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80102c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102c6:	69b8      	ldr	r0, [r7, #24]
 80102c8:	f7f1 f814 	bl	80012f4 <__aeabi_fsub>
 80102cc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80102ce:	1c19      	adds	r1, r3, #0
 80102d0:	1c28      	adds	r0, r5, #0
 80102d2:	f7f0 feb5 	bl	8001040 <__aeabi_fmul>
 80102d6:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80102d8:	1c19      	adds	r1, r3, #0
 80102da:	1c20      	adds	r0, r4, #0
 80102dc:	f7f0 faf0 	bl	80008c0 <__aeabi_fadd>
 80102e0:	1c03      	adds	r3, r0, #0
 80102e2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80102ec:	1c19      	adds	r1, r3, #0
 80102ee:	483b      	ldr	r0, [pc, #236]	@ (80103dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80102f0:	f7f1 f800 	bl	80012f4 <__aeabi_fsub>
 80102f4:	1c03      	adds	r3, r0, #0
 80102f6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	1c11      	adds	r1, r2, #0
 8010300:	0018      	movs	r0, r3
 8010302:	f000 f971 	bl	80105e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010306:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010308:	1c19      	adds	r1, r3, #0
 801030a:	1c28      	adds	r0, r5, #0
 801030c:	f7f0 fe98 	bl	8001040 <__aeabi_fmul>
 8010310:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8010312:	1c19      	adds	r1, r3, #0
 8010314:	1c20      	adds	r0, r4, #0
 8010316:	f7f0 fad3 	bl	80008c0 <__aeabi_fadd>
 801031a:	1c03      	adds	r3, r0, #0
 801031c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801031e:	4a30      	ldr	r2, [pc, #192]	@ (80103e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010320:	6939      	ldr	r1, [r7, #16]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	0018      	movs	r0, r3
 8010326:	f000 f94f 	bl	80105c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	1c11      	adds	r1, r2, #0
 8010332:	0018      	movs	r0, r3
 8010334:	f000 f958 	bl	80105e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010338:	1c03      	adds	r3, r0, #0
 801033a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 801033c:	6979      	ldr	r1, [r7, #20]
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7f0 fe7e 	bl	8001040 <__aeabi_fmul>
 8010344:	1c03      	adds	r3, r0, #0
 8010346:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	4923      	ldr	r1, [pc, #140]	@ (80103e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8010356:	1c18      	adds	r0, r3, #0
 8010358:	f7f0 fca4 	bl	8000ca4 <__aeabi_fdiv>
 801035c:	1c03      	adds	r3, r0, #0
 801035e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8010360:	69f9      	ldr	r1, [r7, #28]
 8010362:	20fe      	movs	r0, #254	@ 0xfe
 8010364:	0580      	lsls	r0, r0, #22
 8010366:	f7f0 ffc5 	bl	80012f4 <__aeabi_fsub>
 801036a:	1c03      	adds	r3, r0, #0
 801036c:	491e      	ldr	r1, [pc, #120]	@ (80103e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 801036e:	1c18      	adds	r0, r3, #0
 8010370:	f7f0 fe66 	bl	8001040 <__aeabi_fmul>
 8010374:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8010376:	491d      	ldr	r1, [pc, #116]	@ (80103ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8010378:	1c18      	adds	r0, r3, #0
 801037a:	f7f0 ffbb 	bl	80012f4 <__aeabi_fsub>
 801037e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8010380:	1c19      	adds	r1, r3, #0
 8010382:	1c28      	adds	r0, r5, #0
 8010384:	f7f0 fe5c 	bl	8001040 <__aeabi_fmul>
 8010388:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 801038a:	1c19      	adds	r1, r3, #0
 801038c:	1c20      	adds	r0, r4, #0
 801038e:	f7f0 fa97 	bl	80008c0 <__aeabi_fadd>
 8010392:	1c03      	adds	r3, r0, #0
 8010394:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801039e:	2100      	movs	r1, #0
 80103a0:	1c18      	adds	r0, r3, #0
 80103a2:	f7f0 f8c5 	bl	8000530 <__aeabi_fcmplt>
 80103a6:	1e03      	subs	r3, r0, #0
 80103a8:	d002      	beq.n	80103b0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2200      	movs	r2, #0
 80103ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80103b8:	1c19      	adds	r1, r3, #0
 80103ba:	1c10      	adds	r0, r2, #0
 80103bc:	f7f0 f8cc 	bl	8000558 <__aeabi_fcmpgt>
 80103c0:	1e03      	subs	r3, r0, #0
 80103c2:	d100      	bne.n	80103c6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80103c4:	e002      	b.n	80103cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80103cc:	46c0      	nop			@ (mov r8, r8)
 80103ce:	46bd      	mov	sp, r7
 80103d0:	b00c      	add	sp, #48	@ 0x30
 80103d2:	bdb0      	pop	{r4, r5, r7, pc}
 80103d4:	46fffe00 	.word	0x46fffe00
 80103d8:	3c23d70a 	.word	0x3c23d70a
 80103dc:	43ff0000 	.word	0x43ff0000
 80103e0:	3db851ec 	.word	0x3db851ec
 80103e4:	42700000 	.word	0x42700000
 80103e8:	3fa66666 	.word	0x3fa66666
 80103ec:	3e99999a 	.word	0x3e99999a

080103f0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80103f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103f2:	b087      	sub	sp, #28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	223c      	movs	r2, #60	@ 0x3c
 80103fe:	5c9b      	ldrb	r3, [r3, r2]
 8010400:	2201      	movs	r2, #1
 8010402:	4053      	eors	r3, r2
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00a      	beq.n	8010420 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	223c      	movs	r2, #60	@ 0x3c
 801040e:	2101      	movs	r1, #1
 8010410:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	683a      	ldr	r2, [r7, #0]
 8010416:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2200      	movs	r2, #0
 801041c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 801041e:	e0c8      	b.n	80105b2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010424:	4965      	ldr	r1, [pc, #404]	@ (80105bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8010426:	1c18      	adds	r0, r3, #0
 8010428:	f7f0 f8a0 	bl	800056c <__aeabi_fcmpge>
 801042c:	1e03      	subs	r3, r0, #0
 801042e:	d107      	bne.n	8010440 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010434:	4962      	ldr	r1, [pc, #392]	@ (80105c0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8010436:	1c18      	adds	r0, r3, #0
 8010438:	f7f0 f884 	bl	8000544 <__aeabi_fcmple>
 801043c:	1e03      	subs	r3, r0, #0
 801043e:	d00e      	beq.n	801045e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010448:	1c19      	adds	r1, r3, #0
 801044a:	1c10      	adds	r0, r2, #0
 801044c:	f7f0 fa38 	bl	80008c0 <__aeabi_fadd>
 8010450:	1c03      	adds	r3, r0, #0
 8010452:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010462:	1c19      	adds	r1, r3, #0
 8010464:	6838      	ldr	r0, [r7, #0]
 8010466:	f7f0 ff45 	bl	80012f4 <__aeabi_fsub>
 801046a:	1c03      	adds	r3, r0, #0
 801046c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	0018      	movs	r0, r3
 8010472:	f7ff fe7d 	bl	8010170 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801047a:	1c19      	adds	r1, r3, #0
 801047c:	6838      	ldr	r0, [r7, #0]
 801047e:	f7f0 ff39 	bl	80012f4 <__aeabi_fsub>
 8010482:	1c03      	adds	r3, r0, #0
 8010484:	2185      	movs	r1, #133	@ 0x85
 8010486:	05c9      	lsls	r1, r1, #23
 8010488:	1c18      	adds	r0, r3, #0
 801048a:	f7f0 fc0b 	bl	8000ca4 <__aeabi_fdiv>
 801048e:	1c03      	adds	r3, r0, #0
 8010490:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8010492:	2100      	movs	r1, #0
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f7f0 f84b 	bl	8000530 <__aeabi_fcmplt>
 801049a:	1e03      	subs	r3, r0, #0
 801049c:	d008      	beq.n	80104b0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104a2:	68f9      	ldr	r1, [r7, #12]
 80104a4:	1c18      	adds	r0, r3, #0
 80104a6:	f7f0 ff25 	bl	80012f4 <__aeabi_fsub>
 80104aa:	1c03      	adds	r3, r0, #0
 80104ac:	617b      	str	r3, [r7, #20]
 80104ae:	e007      	b.n	80104c0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104b4:	1c19      	adds	r1, r3, #0
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	f7f0 fa02 	bl	80008c0 <__aeabi_fadd>
 80104bc:	1c03      	adds	r3, r0, #0
 80104be:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80104c0:	23fe      	movs	r3, #254	@ 0xfe
 80104c2:	059b      	lsls	r3, r3, #22
 80104c4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80104c6:	493f      	ldr	r1, [pc, #252]	@ (80105c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80104c8:	6978      	ldr	r0, [r7, #20]
 80104ca:	f7f0 f845 	bl	8000558 <__aeabi_fcmpgt>
 80104ce:	1e03      	subs	r3, r0, #0
 80104d0:	d010      	beq.n	80104f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80104d2:	493c      	ldr	r1, [pc, #240]	@ (80105c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80104d4:	6978      	ldr	r0, [r7, #20]
 80104d6:	f7f0 fbe5 	bl	8000ca4 <__aeabi_fdiv>
 80104da:	1c03      	adds	r3, r0, #0
 80104dc:	1c1c      	adds	r4, r3, #0
 80104de:	4939      	ldr	r1, [pc, #228]	@ (80105c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80104e0:	6978      	ldr	r0, [r7, #20]
 80104e2:	f7f0 fbdf 	bl	8000ca4 <__aeabi_fdiv>
 80104e6:	1c03      	adds	r3, r0, #0
 80104e8:	1c19      	adds	r1, r3, #0
 80104ea:	1c20      	adds	r0, r4, #0
 80104ec:	f7f0 fda8 	bl	8001040 <__aeabi_fmul>
 80104f0:	1c03      	adds	r3, r0, #0
 80104f2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80104f8:	1c19      	adds	r1, r3, #0
 80104fa:	2085      	movs	r0, #133	@ 0x85
 80104fc:	05c0      	lsls	r0, r0, #23
 80104fe:	f7f0 fef9 	bl	80012f4 <__aeabi_fsub>
 8010502:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8010504:	6939      	ldr	r1, [r7, #16]
 8010506:	1c18      	adds	r0, r3, #0
 8010508:	f7f0 fd9a 	bl	8001040 <__aeabi_fmul>
 801050c:	1c03      	adds	r3, r0, #0
 801050e:	1c18      	adds	r0, r3, #0
 8010510:	f018 ff80 	bl	8029414 <sqrtf>
 8010514:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 801051e:	2185      	movs	r1, #133	@ 0x85
 8010520:	05c9      	lsls	r1, r1, #23
 8010522:	6938      	ldr	r0, [r7, #16]
 8010524:	f7f0 fd8c 	bl	8001040 <__aeabi_fmul>
 8010528:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 801052a:	1c19      	adds	r1, r3, #0
 801052c:	1c28      	adds	r0, r5, #0
 801052e:	f7f0 fbb9 	bl	8000ca4 <__aeabi_fdiv>
 8010532:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010534:	1c19      	adds	r1, r3, #0
 8010536:	1c20      	adds	r0, r4, #0
 8010538:	f7f0 fd82 	bl	8001040 <__aeabi_fmul>
 801053c:	1c03      	adds	r3, r0, #0
 801053e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010544:	68f9      	ldr	r1, [r7, #12]
 8010546:	1c18      	adds	r0, r3, #0
 8010548:	f7f0 fd7a 	bl	8001040 <__aeabi_fmul>
 801054c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 801054e:	6939      	ldr	r1, [r7, #16]
 8010550:	1c18      	adds	r0, r3, #0
 8010552:	f7f0 fba7 	bl	8000ca4 <__aeabi_fdiv>
 8010556:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8010558:	68f9      	ldr	r1, [r7, #12]
 801055a:	1c18      	adds	r0, r3, #0
 801055c:	f7f0 fd70 	bl	8001040 <__aeabi_fmul>
 8010560:	1c03      	adds	r3, r0, #0
             sqrtf(
 8010562:	1c19      	adds	r1, r3, #0
 8010564:	1c20      	adds	r0, r4, #0
 8010566:	f7f0 f9ab 	bl	80008c0 <__aeabi_fadd>
 801056a:	1c03      	adds	r3, r0, #0
 801056c:	1c18      	adds	r0, r3, #0
 801056e:	f018 ff51 	bl	8029414 <sqrtf>
 8010572:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010574:	1c19      	adds	r1, r3, #0
 8010576:	1c30      	adds	r0, r6, #0
 8010578:	f7f0 fd62 	bl	8001040 <__aeabi_fmul>
 801057c:	1c03      	adds	r3, r0, #0
 801057e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801058c:	68f9      	ldr	r1, [r7, #12]
 801058e:	1c18      	adds	r0, r3, #0
 8010590:	f7f0 fd56 	bl	8001040 <__aeabi_fmul>
 8010594:	1c03      	adds	r3, r0, #0
 8010596:	2182      	movs	r1, #130	@ 0x82
 8010598:	05c9      	lsls	r1, r1, #23
 801059a:	1c18      	adds	r0, r3, #0
 801059c:	f7f0 fb82 	bl	8000ca4 <__aeabi_fdiv>
 80105a0:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80105a2:	1c19      	adds	r1, r3, #0
 80105a4:	1c20      	adds	r0, r4, #0
 80105a6:	f7f0 f98b 	bl	80008c0 <__aeabi_fadd>
 80105aa:	1c03      	adds	r3, r0, #0
 80105ac:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80105b2:	46c0      	nop			@ (mov r8, r8)
 80105b4:	46bd      	mov	sp, r7
 80105b6:	b007      	add	sp, #28
 80105b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ba:	46c0      	nop			@ (mov r8, r8)
 80105bc:	42c80000 	.word	0x42c80000
 80105c0:	c2c80000 	.word	0xc2c80000
 80105c4:	44b40000 	.word	0x44b40000

080105c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	68ba      	ldr	r2, [r7, #8]
 80105de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80105e0:	46c0      	nop			@ (mov r8, r8)
 80105e2:	46bd      	mov	sp, r7
 80105e4:	b004      	add	sp, #16
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80105e8:	b590      	push	{r4, r7, lr}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105fa:	1c19      	adds	r1, r3, #0
 80105fc:	6838      	ldr	r0, [r7, #0]
 80105fe:	f7f0 fe79 	bl	80012f4 <__aeabi_fsub>
 8010602:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8010604:	1c19      	adds	r1, r3, #0
 8010606:	1c20      	adds	r0, r4, #0
 8010608:	f7f0 fd1a 	bl	8001040 <__aeabi_fmul>
 801060c:	1c03      	adds	r3, r0, #0
 801060e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8010610:	4912      	ldr	r1, [pc, #72]	@ (801065c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f7ef ff8c 	bl	8000530 <__aeabi_fcmplt>
 8010618:	1e03      	subs	r3, r0, #0
 801061a:	d002      	beq.n	8010622 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 801061c:	23fe      	movs	r3, #254	@ 0xfe
 801061e:	059b      	lsls	r3, r3, #22
 8010620:	e018      	b.n	8010654 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8010622:	490f      	ldr	r1, [pc, #60]	@ (8010660 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	f7ef ff97 	bl	8000558 <__aeabi_fcmpgt>
 801062a:	1e03      	subs	r3, r0, #0
 801062c:	d001      	beq.n	8010632 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 801062e:	2300      	movs	r3, #0
 8010630:	e010      	b.n	8010654 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	1c18      	adds	r0, r3, #0
 8010636:	f018 fec5 	bl	80293c4 <expf>
 801063a:	1c03      	adds	r3, r0, #0
 801063c:	21fe      	movs	r1, #254	@ 0xfe
 801063e:	0589      	lsls	r1, r1, #22
 8010640:	1c18      	adds	r0, r3, #0
 8010642:	f7f0 f93d 	bl	80008c0 <__aeabi_fadd>
 8010646:	1c03      	adds	r3, r0, #0
 8010648:	1c19      	adds	r1, r3, #0
 801064a:	20fe      	movs	r0, #254	@ 0xfe
 801064c:	0580      	lsls	r0, r0, #22
 801064e:	f7f0 fb29 	bl	8000ca4 <__aeabi_fdiv>
 8010652:	1c03      	adds	r3, r0, #0
    }
}
 8010654:	1c18      	adds	r0, r3, #0
 8010656:	46bd      	mov	sp, r7
 8010658:	b005      	add	sp, #20
 801065a:	bd90      	pop	{r4, r7, pc}
 801065c:	c2480000 	.word	0xc2480000
 8010660:	42480000 	.word	0x42480000

08010664 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801067c:	46c0      	nop			@ (mov r8, r8)
 801067e:	46bd      	mov	sp, r7
 8010680:	b004      	add	sp, #16
 8010682:	bd80      	pop	{r7, pc}

08010684 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8010684:	b590      	push	{r4, r7, lr}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2b01      	cmp	r3, #1
 8010694:	d114      	bne.n	80106c0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801069a:	1c19      	adds	r1, r3, #0
 801069c:	6838      	ldr	r0, [r7, #0]
 801069e:	f7f0 fe29 	bl	80012f4 <__aeabi_fsub>
 80106a2:	1c03      	adds	r3, r0, #0
 80106a4:	4918      	ldr	r1, [pc, #96]	@ (8010708 <GasIndexAlgorithm__mox_model__process+0x84>)
 80106a6:	1c18      	adds	r0, r3, #0
 80106a8:	f7f0 fafc 	bl	8000ca4 <__aeabi_fdiv>
 80106ac:	1c03      	adds	r3, r0, #0
 80106ae:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80106b4:	1c19      	adds	r1, r3, #0
 80106b6:	1c10      	adds	r0, r2, #0
 80106b8:	f7f0 fcc2 	bl	8001040 <__aeabi_fmul>
 80106bc:	1c03      	adds	r3, r0, #0
 80106be:	e01f      	b.n	8010700 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106c4:	1c19      	adds	r1, r3, #0
 80106c6:	6838      	ldr	r0, [r7, #0]
 80106c8:	f7f0 fe14 	bl	80012f4 <__aeabi_fsub>
 80106cc:	1c03      	adds	r3, r0, #0
 80106ce:	1c1a      	adds	r2, r3, #0
 80106d0:	2380      	movs	r3, #128	@ 0x80
 80106d2:	061b      	lsls	r3, r3, #24
 80106d4:	4053      	eors	r3, r2
 80106d6:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106dc:	490b      	ldr	r1, [pc, #44]	@ (801070c <GasIndexAlgorithm__mox_model__process+0x88>)
 80106de:	1c18      	adds	r0, r3, #0
 80106e0:	f7f0 f8ee 	bl	80008c0 <__aeabi_fadd>
 80106e4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80106e6:	1c19      	adds	r1, r3, #0
 80106e8:	1c20      	adds	r0, r4, #0
 80106ea:	f7f0 fadb 	bl	8000ca4 <__aeabi_fdiv>
 80106ee:	1c03      	adds	r3, r0, #0
 80106f0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80106f6:	1c19      	adds	r1, r3, #0
 80106f8:	1c10      	adds	r0, r2, #0
 80106fa:	f7f0 fca1 	bl	8001040 <__aeabi_fmul>
 80106fe:	1c03      	adds	r3, r0, #0
    }
}
 8010700:	1c18      	adds	r0, r3, #0
 8010702:	46bd      	mov	sp, r7
 8010704:	b003      	add	sp, #12
 8010706:	bd90      	pop	{r4, r7, pc}
 8010708:	44fa0000 	.word	0x44fa0000
 801070c:	435c0000 	.word	0x435c0000

08010710 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2180      	movs	r1, #128	@ 0x80
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2184      	movs	r1, #132	@ 0x84
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2188      	movs	r1, #136	@ 0x88
 8010732:	683a      	ldr	r2, [r7, #0]
 8010734:	505a      	str	r2, [r3, r1]
}
 8010736:	46c0      	nop			@ (mov r8, r8)
 8010738:	46bd      	mov	sp, r7
 801073a:	b004      	add	sp, #16
 801073c:	bd80      	pop	{r7, pc}
	...

08010740 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010740:	b590      	push	{r4, r7, lr}
 8010742:	b085      	sub	sp, #20
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2280      	movs	r2, #128	@ 0x80
 801074e:	589c      	ldr	r4, [r3, r2]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2284      	movs	r2, #132	@ 0x84
 8010754:	589b      	ldr	r3, [r3, r2]
 8010756:	1c19      	adds	r1, r3, #0
 8010758:	6838      	ldr	r0, [r7, #0]
 801075a:	f7f0 fdcb 	bl	80012f4 <__aeabi_fsub>
 801075e:	1c03      	adds	r3, r0, #0
 8010760:	1c19      	adds	r1, r3, #0
 8010762:	1c20      	adds	r0, r4, #0
 8010764:	f7f0 fc6c 	bl	8001040 <__aeabi_fmul>
 8010768:	1c03      	adds	r3, r0, #0
 801076a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 801076c:	4940      	ldr	r1, [pc, #256]	@ (8010870 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 801076e:	68b8      	ldr	r0, [r7, #8]
 8010770:	f7ef fede 	bl	8000530 <__aeabi_fcmplt>
 8010774:	1e03      	subs	r3, r0, #0
 8010776:	d001      	beq.n	801077c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8010778:	4b3e      	ldr	r3, [pc, #248]	@ (8010874 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801077a:	e075      	b.n	8010868 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 801077c:	493e      	ldr	r1, [pc, #248]	@ (8010878 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 801077e:	68b8      	ldr	r0, [r7, #8]
 8010780:	f7ef feea 	bl	8000558 <__aeabi_fcmpgt>
 8010784:	1e03      	subs	r3, r0, #0
 8010786:	d001      	beq.n	801078c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8010788:	2300      	movs	r3, #0
 801078a:	e06d      	b.n	8010868 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 801078c:	2100      	movs	r1, #0
 801078e:	6838      	ldr	r0, [r7, #0]
 8010790:	f7ef feec 	bl	800056c <__aeabi_fcmpge>
 8010794:	1e03      	subs	r3, r0, #0
 8010796:	d047      	beq.n	8010828 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2288      	movs	r2, #136	@ 0x88
 801079c:	589b      	ldr	r3, [r3, r2]
 801079e:	21fe      	movs	r1, #254	@ 0xfe
 80107a0:	0589      	lsls	r1, r1, #22
 80107a2:	1c18      	adds	r0, r3, #0
 80107a4:	f7ef febe 	bl	8000524 <__aeabi_fcmpeq>
 80107a8:	1e03      	subs	r3, r0, #0
 80107aa:	d00e      	beq.n	80107ca <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	689b      	ldr	r3, [r3, #8]
 80107b0:	1c19      	adds	r1, r3, #0
 80107b2:	20fe      	movs	r0, #254	@ 0xfe
 80107b4:	0580      	lsls	r0, r0, #22
 80107b6:	f7f0 fd9d 	bl	80012f4 <__aeabi_fsub>
 80107ba:	1c03      	adds	r3, r0, #0
 80107bc:	492f      	ldr	r1, [pc, #188]	@ (801087c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80107be:	1c18      	adds	r0, r3, #0
 80107c0:	f7f0 fc3e 	bl	8001040 <__aeabi_fmul>
 80107c4:	1c03      	adds	r3, r0, #0
 80107c6:	60fb      	str	r3, [r7, #12]
 80107c8:	e012      	b.n	80107f0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	492c      	ldr	r1, [pc, #176]	@ (8010880 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80107d0:	1c18      	adds	r0, r3, #0
 80107d2:	f7f0 fc35 	bl	8001040 <__aeabi_fmul>
 80107d6:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80107d8:	1c19      	adds	r1, r3, #0
 80107da:	4826      	ldr	r0, [pc, #152]	@ (8010874 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80107dc:	f7f0 fd8a 	bl	80012f4 <__aeabi_fsub>
 80107e0:	1c03      	adds	r3, r0, #0
 80107e2:	2181      	movs	r1, #129	@ 0x81
 80107e4:	05c9      	lsls	r1, r1, #23
 80107e6:	1c18      	adds	r0, r3, #0
 80107e8:	f7f0 fa5c 	bl	8000ca4 <__aeabi_fdiv>
 80107ec:	1c03      	adds	r3, r0, #0
 80107ee:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80107f0:	4920      	ldr	r1, [pc, #128]	@ (8010874 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f7f0 f864 	bl	80008c0 <__aeabi_fadd>
 80107f8:	1c03      	adds	r3, r0, #0
 80107fa:	1c1c      	adds	r4, r3, #0
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	1c18      	adds	r0, r3, #0
 8010800:	f018 fde0 	bl	80293c4 <expf>
 8010804:	1c03      	adds	r3, r0, #0
 8010806:	21fe      	movs	r1, #254	@ 0xfe
 8010808:	0589      	lsls	r1, r1, #22
 801080a:	1c18      	adds	r0, r3, #0
 801080c:	f7f0 f858 	bl	80008c0 <__aeabi_fadd>
 8010810:	1c03      	adds	r3, r0, #0
 8010812:	1c19      	adds	r1, r3, #0
 8010814:	1c20      	adds	r0, r4, #0
 8010816:	f7f0 fa45 	bl	8000ca4 <__aeabi_fdiv>
 801081a:	1c03      	adds	r3, r0, #0
 801081c:	68f9      	ldr	r1, [r7, #12]
 801081e:	1c18      	adds	r0, r3, #0
 8010820:	f7f0 fd68 	bl	80012f4 <__aeabi_fsub>
 8010824:	1c03      	adds	r3, r0, #0
 8010826:	e01f      	b.n	8010868 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2188      	movs	r1, #136	@ 0x88
 8010830:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8010832:	1c19      	adds	r1, r3, #0
 8010834:	1c10      	adds	r0, r2, #0
 8010836:	f7f0 fa35 	bl	8000ca4 <__aeabi_fdiv>
 801083a:	1c03      	adds	r3, r0, #0
 801083c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	1c18      	adds	r0, r3, #0
 8010842:	f018 fdbf 	bl	80293c4 <expf>
 8010846:	1c03      	adds	r3, r0, #0
 8010848:	21fe      	movs	r1, #254	@ 0xfe
 801084a:	0589      	lsls	r1, r1, #22
 801084c:	1c18      	adds	r0, r3, #0
 801084e:	f7f0 f837 	bl	80008c0 <__aeabi_fadd>
 8010852:	1c03      	adds	r3, r0, #0
 8010854:	1c19      	adds	r1, r3, #0
 8010856:	4807      	ldr	r0, [pc, #28]	@ (8010874 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010858:	f7f0 fa24 	bl	8000ca4 <__aeabi_fdiv>
 801085c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 801085e:	1c19      	adds	r1, r3, #0
 8010860:	1c20      	adds	r0, r4, #0
 8010862:	f7f0 fbed 	bl	8001040 <__aeabi_fmul>
 8010866:	1c03      	adds	r3, r0, #0
        }
    }
}
 8010868:	1c18      	adds	r0, r3, #0
 801086a:	46bd      	mov	sp, r7
 801086c:	b005      	add	sp, #20
 801086e:	bd90      	pop	{r4, r7, pc}
 8010870:	c2480000 	.word	0xc2480000
 8010874:	43fa0000 	.word	0x43fa0000
 8010878:	42480000 	.word	0x42480000
 801087c:	3f8041ab 	.word	0x3f8041ab
 8010880:	40a00000 	.word	0x40a00000

08010884 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	4913      	ldr	r1, [pc, #76]	@ (80108e4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8010896:	1c18      	adds	r0, r3, #0
 8010898:	f7f0 f812 	bl	80008c0 <__aeabi_fadd>
 801089c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 801089e:	1c19      	adds	r1, r3, #0
 80108a0:	1c20      	adds	r0, r4, #0
 80108a2:	f7f0 f9ff 	bl	8000ca4 <__aeabi_fdiv>
 80108a6:	1c03      	adds	r3, r0, #0
 80108a8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	228c      	movs	r2, #140	@ 0x8c
 80108ae:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	490b      	ldr	r1, [pc, #44]	@ (80108e8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80108ba:	1c18      	adds	r0, r3, #0
 80108bc:	f7f0 f800 	bl	80008c0 <__aeabi_fadd>
 80108c0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80108c2:	1c19      	adds	r1, r3, #0
 80108c4:	1c20      	adds	r0, r4, #0
 80108c6:	f7f0 f9ed 	bl	8000ca4 <__aeabi_fdiv>
 80108ca:	1c03      	adds	r3, r0, #0
 80108cc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2290      	movs	r2, #144	@ 0x90
 80108d2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2294      	movs	r2, #148	@ 0x94
 80108d8:	2100      	movs	r1, #0
 80108da:	5499      	strb	r1, [r3, r2]
}
 80108dc:	46c0      	nop			@ (mov r8, r8)
 80108de:	46bd      	mov	sp, r7
 80108e0:	b003      	add	sp, #12
 80108e2:	bd90      	pop	{r4, r7, pc}
 80108e4:	41a00000 	.word	0x41a00000
 80108e8:	43fa0000 	.word	0x43fa0000

080108ec <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2294      	movs	r2, #148	@ 0x94
 80108fa:	5c9b      	ldrb	r3, [r3, r2]
 80108fc:	2201      	movs	r2, #1
 80108fe:	4053      	eors	r3, r2
 8010900:	b2db      	uxtb	r3, r3
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00f      	beq.n	8010926 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2198      	movs	r1, #152	@ 0x98
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	219c      	movs	r1, #156	@ 0x9c
 8010912:	683a      	ldr	r2, [r7, #0]
 8010914:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	21a0      	movs	r1, #160	@ 0xa0
 801091a:	683a      	ldr	r2, [r7, #0]
 801091c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2294      	movs	r2, #148	@ 0x94
 8010922:	2101      	movs	r1, #1
 8010924:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	228c      	movs	r2, #140	@ 0x8c
 801092a:	589b      	ldr	r3, [r3, r2]
 801092c:	1c19      	adds	r1, r3, #0
 801092e:	20fe      	movs	r0, #254	@ 0xfe
 8010930:	0580      	lsls	r0, r0, #22
 8010932:	f7f0 fcdf 	bl	80012f4 <__aeabi_fsub>
 8010936:	1c03      	adds	r3, r0, #0
 8010938:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2298      	movs	r2, #152	@ 0x98
 801093e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010940:	1c19      	adds	r1, r3, #0
 8010942:	f7f0 fb7d 	bl	8001040 <__aeabi_fmul>
 8010946:	1c03      	adds	r3, r0, #0
 8010948:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	228c      	movs	r2, #140	@ 0x8c
 801094e:	589b      	ldr	r3, [r3, r2]
 8010950:	6839      	ldr	r1, [r7, #0]
 8010952:	1c18      	adds	r0, r3, #0
 8010954:	f7f0 fb74 	bl	8001040 <__aeabi_fmul>
 8010958:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 801095a:	1c19      	adds	r1, r3, #0
 801095c:	1c20      	adds	r0, r4, #0
 801095e:	f7ef ffaf 	bl	80008c0 <__aeabi_fadd>
 8010962:	1c03      	adds	r3, r0, #0
 8010964:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2298      	movs	r2, #152	@ 0x98
 801096a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2290      	movs	r2, #144	@ 0x90
 8010970:	589b      	ldr	r3, [r3, r2]
 8010972:	1c19      	adds	r1, r3, #0
 8010974:	20fe      	movs	r0, #254	@ 0xfe
 8010976:	0580      	lsls	r0, r0, #22
 8010978:	f7f0 fcbc 	bl	80012f4 <__aeabi_fsub>
 801097c:	1c03      	adds	r3, r0, #0
 801097e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	229c      	movs	r2, #156	@ 0x9c
 8010984:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010986:	1c19      	adds	r1, r3, #0
 8010988:	f7f0 fb5a 	bl	8001040 <__aeabi_fmul>
 801098c:	1c03      	adds	r3, r0, #0
 801098e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2290      	movs	r2, #144	@ 0x90
 8010994:	589b      	ldr	r3, [r3, r2]
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	1c18      	adds	r0, r3, #0
 801099a:	f7f0 fb51 	bl	8001040 <__aeabi_fmul>
 801099e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80109a0:	1c19      	adds	r1, r3, #0
 80109a2:	1c20      	adds	r0, r4, #0
 80109a4:	f7ef ff8c 	bl	80008c0 <__aeabi_fadd>
 80109a8:	1c03      	adds	r3, r0, #0
 80109aa:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	229c      	movs	r2, #156	@ 0x9c
 80109b0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2298      	movs	r2, #152	@ 0x98
 80109b6:	589a      	ldr	r2, [r3, r2]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	219c      	movs	r1, #156	@ 0x9c
 80109bc:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80109be:	1c19      	adds	r1, r3, #0
 80109c0:	1c10      	adds	r0, r2, #0
 80109c2:	f7f0 fc97 	bl	80012f4 <__aeabi_fsub>
 80109c6:	1c03      	adds	r3, r0, #0
 80109c8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80109ca:	2100      	movs	r1, #0
 80109cc:	6978      	ldr	r0, [r7, #20]
 80109ce:	f7ef fdaf 	bl	8000530 <__aeabi_fcmplt>
 80109d2:	1e03      	subs	r3, r0, #0
 80109d4:	d004      	beq.n	80109e0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	2280      	movs	r2, #128	@ 0x80
 80109da:	0612      	lsls	r2, r2, #24
 80109dc:	4053      	eors	r3, r2
 80109de:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80109e0:	4923      	ldr	r1, [pc, #140]	@ (8010a70 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80109e2:	6978      	ldr	r0, [r7, #20]
 80109e4:	f7f0 fb2c 	bl	8001040 <__aeabi_fmul>
 80109e8:	1c03      	adds	r3, r0, #0
 80109ea:	1c18      	adds	r0, r3, #0
 80109ec:	f018 fcea 	bl	80293c4 <expf>
 80109f0:	1c03      	adds	r3, r0, #0
 80109f2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80109f4:	491f      	ldr	r1, [pc, #124]	@ (8010a74 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80109f6:	6938      	ldr	r0, [r7, #16]
 80109f8:	f7f0 fb22 	bl	8001040 <__aeabi_fmul>
 80109fc:	1c03      	adds	r3, r0, #0
 80109fe:	491e      	ldr	r1, [pc, #120]	@ (8010a78 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010a00:	1c18      	adds	r0, r3, #0
 8010a02:	f7ef ff5d 	bl	80008c0 <__aeabi_fadd>
 8010a06:	1c03      	adds	r3, r0, #0
 8010a08:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	685c      	ldr	r4, [r3, #4]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	68f9      	ldr	r1, [r7, #12]
 8010a14:	1c18      	adds	r0, r3, #0
 8010a16:	f7ef ff53 	bl	80008c0 <__aeabi_fadd>
 8010a1a:	1c03      	adds	r3, r0, #0
 8010a1c:	1c19      	adds	r1, r3, #0
 8010a1e:	1c20      	adds	r0, r4, #0
 8010a20:	f7f0 f940 	bl	8000ca4 <__aeabi_fdiv>
 8010a24:	1c03      	adds	r3, r0, #0
 8010a26:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010a28:	68b9      	ldr	r1, [r7, #8]
 8010a2a:	20fe      	movs	r0, #254	@ 0xfe
 8010a2c:	0580      	lsls	r0, r0, #22
 8010a2e:	f7f0 fc61 	bl	80012f4 <__aeabi_fsub>
 8010a32:	1c03      	adds	r3, r0, #0
 8010a34:	1c18      	adds	r0, r3, #0
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	22a0      	movs	r2, #160	@ 0xa0
 8010a3a:	589b      	ldr	r3, [r3, r2]
 8010a3c:	1c19      	adds	r1, r3, #0
 8010a3e:	f7f0 faff 	bl	8001040 <__aeabi_fmul>
 8010a42:	1c03      	adds	r3, r0, #0
 8010a44:	1c1c      	adds	r4, r3, #0
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	68b8      	ldr	r0, [r7, #8]
 8010a4a:	f7f0 faf9 	bl	8001040 <__aeabi_fmul>
 8010a4e:	1c03      	adds	r3, r0, #0
 8010a50:	1c19      	adds	r1, r3, #0
 8010a52:	1c20      	adds	r0, r4, #0
 8010a54:	f7ef ff34 	bl	80008c0 <__aeabi_fadd>
 8010a58:	1c03      	adds	r3, r0, #0
 8010a5a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	22a0      	movs	r2, #160	@ 0xa0
 8010a60:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	22a0      	movs	r2, #160	@ 0xa0
 8010a66:	589b      	ldr	r3, [r3, r2]
}
 8010a68:	1c18      	adds	r0, r3, #0
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	b007      	add	sp, #28
 8010a6e:	bd90      	pop	{r4, r7, pc}
 8010a70:	be4ccccd 	.word	0xbe4ccccd
 8010a74:	43f00000 	.word	0x43f00000
 8010a78:	41a00000 	.word	0x41a00000

08010a7c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	000a      	movs	r2, r1
 8010a86:	1cbb      	adds	r3, r7, #2
 8010a88:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8010a8a:	230d      	movs	r3, #13
 8010a8c:	18fb      	adds	r3, r7, r3
 8010a8e:	22ff      	movs	r2, #255	@ 0xff
 8010a90:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010a92:	230e      	movs	r3, #14
 8010a94:	18fb      	adds	r3, r7, r3
 8010a96:	2200      	movs	r2, #0
 8010a98:	801a      	strh	r2, [r3, #0]
 8010a9a:	e038      	b.n	8010b0e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8010a9c:	230e      	movs	r3, #14
 8010a9e:	18fb      	adds	r3, r7, r3
 8010aa0:	881b      	ldrh	r3, [r3, #0]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	18d3      	adds	r3, r2, r3
 8010aa6:	7819      	ldrb	r1, [r3, #0]
 8010aa8:	220d      	movs	r2, #13
 8010aaa:	18bb      	adds	r3, r7, r2
 8010aac:	18ba      	adds	r2, r7, r2
 8010aae:	7812      	ldrb	r2, [r2, #0]
 8010ab0:	404a      	eors	r2, r1
 8010ab2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010ab4:	230c      	movs	r3, #12
 8010ab6:	18fb      	adds	r3, r7, r3
 8010ab8:	2208      	movs	r2, #8
 8010aba:	701a      	strb	r2, [r3, #0]
 8010abc:	e01c      	b.n	8010af8 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8010abe:	210d      	movs	r1, #13
 8010ac0:	187b      	adds	r3, r7, r1
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	b25b      	sxtb	r3, r3
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	da0a      	bge.n	8010ae0 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010aca:	187b      	adds	r3, r7, r1
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	b25b      	sxtb	r3, r3
 8010ad0:	18db      	adds	r3, r3, r3
 8010ad2:	b25b      	sxtb	r3, r3
 8010ad4:	2231      	movs	r2, #49	@ 0x31
 8010ad6:	4053      	eors	r3, r2
 8010ad8:	b25a      	sxtb	r2, r3
 8010ada:	187b      	adds	r3, r7, r1
 8010adc:	701a      	strb	r2, [r3, #0]
 8010ade:	e005      	b.n	8010aec <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010ae0:	230d      	movs	r3, #13
 8010ae2:	18fa      	adds	r2, r7, r3
 8010ae4:	18fb      	adds	r3, r7, r3
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	18db      	adds	r3, r3, r3
 8010aea:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010aec:	220c      	movs	r2, #12
 8010aee:	18bb      	adds	r3, r7, r2
 8010af0:	18ba      	adds	r2, r7, r2
 8010af2:	7812      	ldrb	r2, [r2, #0]
 8010af4:	3a01      	subs	r2, #1
 8010af6:	701a      	strb	r2, [r3, #0]
 8010af8:	230c      	movs	r3, #12
 8010afa:	18fb      	adds	r3, r7, r3
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1dd      	bne.n	8010abe <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010b02:	220e      	movs	r2, #14
 8010b04:	18bb      	adds	r3, r7, r2
 8010b06:	18ba      	adds	r2, r7, r2
 8010b08:	8812      	ldrh	r2, [r2, #0]
 8010b0a:	3201      	adds	r2, #1
 8010b0c:	801a      	strh	r2, [r3, #0]
 8010b0e:	230e      	movs	r3, #14
 8010b10:	18fa      	adds	r2, r7, r3
 8010b12:	1cbb      	adds	r3, r7, #2
 8010b14:	8812      	ldrh	r2, [r2, #0]
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d3bf      	bcc.n	8010a9c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010b1c:	230d      	movs	r3, #13
 8010b1e:	18fb      	adds	r3, r7, r3
 8010b20:	781b      	ldrb	r3, [r3, #0]
}
 8010b22:	0018      	movs	r0, r3
 8010b24:	46bd      	mov	sp, r7
 8010b26:	b004      	add	sp, #16
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b082      	sub	sp, #8
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	0008      	movs	r0, r1
 8010b34:	0011      	movs	r1, r2
 8010b36:	1cbb      	adds	r3, r7, #2
 8010b38:	1c02      	adds	r2, r0, #0
 8010b3a:	801a      	strh	r2, [r3, #0]
 8010b3c:	1c7b      	adds	r3, r7, #1
 8010b3e:	1c0a      	adds	r2, r1, #0
 8010b40:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010b42:	1cbb      	adds	r3, r7, #2
 8010b44:	881a      	ldrh	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	0011      	movs	r1, r2
 8010b4a:	0018      	movs	r0, r3
 8010b4c:	f7ff ff96 	bl	8010a7c <sensirion_i2c_generate_crc>
 8010b50:	0003      	movs	r3, r0
 8010b52:	001a      	movs	r2, r3
 8010b54:	1c7b      	adds	r3, r7, #1
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d001      	beq.n	8010b60 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e000      	b.n	8010b62 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	0018      	movs	r0, r3
 8010b64:	46bd      	mov	sp, r7
 8010b66:	b002      	add	sp, #8
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b082      	sub	sp, #8
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
 8010b72:	0008      	movs	r0, r1
 8010b74:	0011      	movs	r1, r2
 8010b76:	1cbb      	adds	r3, r7, #2
 8010b78:	1c02      	adds	r2, r0, #0
 8010b7a:	801a      	strh	r2, [r3, #0]
 8010b7c:	003b      	movs	r3, r7
 8010b7e:	1c0a      	adds	r2, r1, #0
 8010b80:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010b82:	003b      	movs	r3, r7
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	0a1b      	lsrs	r3, r3, #8
 8010b88:	b299      	uxth	r1, r3
 8010b8a:	1cbb      	adds	r3, r7, #2
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	1cba      	adds	r2, r7, #2
 8010b90:	1c58      	adds	r0, r3, #1
 8010b92:	8010      	strh	r0, [r2, #0]
 8010b94:	001a      	movs	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	189b      	adds	r3, r3, r2
 8010b9a:	b2ca      	uxtb	r2, r1
 8010b9c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010b9e:	1cbb      	adds	r3, r7, #2
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	1cba      	adds	r2, r7, #2
 8010ba4:	1c59      	adds	r1, r3, #1
 8010ba6:	8011      	strh	r1, [r2, #0]
 8010ba8:	001a      	movs	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	189b      	adds	r3, r3, r2
 8010bae:	003a      	movs	r2, r7
 8010bb0:	8812      	ldrh	r2, [r2, #0]
 8010bb2:	b2d2      	uxtb	r2, r2
 8010bb4:	701a      	strb	r2, [r3, #0]
    return offset;
 8010bb6:	1cbb      	adds	r3, r7, #2
 8010bb8:	881b      	ldrh	r3, [r3, #0]
}
 8010bba:	0018      	movs	r0, r3
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	b002      	add	sp, #8
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010bc2:	b590      	push	{r4, r7, lr}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	0008      	movs	r0, r1
 8010bcc:	0011      	movs	r1, r2
 8010bce:	1cbb      	adds	r3, r7, #2
 8010bd0:	1c02      	adds	r2, r0, #0
 8010bd2:	801a      	strh	r2, [r3, #0]
 8010bd4:	003b      	movs	r3, r7
 8010bd6:	1c0a      	adds	r2, r1, #0
 8010bd8:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010bda:	003b      	movs	r3, r7
 8010bdc:	881b      	ldrh	r3, [r3, #0]
 8010bde:	0a1b      	lsrs	r3, r3, #8
 8010be0:	b299      	uxth	r1, r3
 8010be2:	1cbb      	adds	r3, r7, #2
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	1cba      	adds	r2, r7, #2
 8010be8:	1c58      	adds	r0, r3, #1
 8010bea:	8010      	strh	r0, [r2, #0]
 8010bec:	001a      	movs	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	189b      	adds	r3, r3, r2
 8010bf2:	b2ca      	uxtb	r2, r1
 8010bf4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010bf6:	1cbb      	adds	r3, r7, #2
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	1cba      	adds	r2, r7, #2
 8010bfc:	1c59      	adds	r1, r3, #1
 8010bfe:	8011      	strh	r1, [r2, #0]
 8010c00:	001a      	movs	r2, r3
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	189b      	adds	r3, r3, r2
 8010c06:	003a      	movs	r2, r7
 8010c08:	8812      	ldrh	r2, [r2, #0]
 8010c0a:	b2d2      	uxtb	r2, r2
 8010c0c:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010c0e:	1cbb      	adds	r3, r7, #2
 8010c10:	881b      	ldrh	r3, [r3, #0]
 8010c12:	3b02      	subs	r3, #2
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010c18:	1cbb      	adds	r3, r7, #2
 8010c1a:	881b      	ldrh	r3, [r3, #0]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	18d4      	adds	r4, r2, r3
 8010c20:	2102      	movs	r1, #2
 8010c22:	f7ff ff2b 	bl	8010a7c <sensirion_i2c_generate_crc>
 8010c26:	0003      	movs	r3, r0
 8010c28:	7023      	strb	r3, [r4, #0]
    offset++;
 8010c2a:	1cbb      	adds	r3, r7, #2
 8010c2c:	881a      	ldrh	r2, [r3, #0]
 8010c2e:	1cbb      	adds	r3, r7, #2
 8010c30:	3201      	adds	r2, #1
 8010c32:	801a      	strh	r2, [r3, #0]

    return offset;
 8010c34:	1cbb      	adds	r3, r7, #2
 8010c36:	881b      	ldrh	r3, [r3, #0]
}
 8010c38:	0018      	movs	r0, r3
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	b003      	add	sp, #12
 8010c3e:	bd90      	pop	{r4, r7, pc}

08010c40 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	0008      	movs	r0, r1
 8010c4a:	0011      	movs	r1, r2
 8010c4c:	1cbb      	adds	r3, r7, #2
 8010c4e:	1c02      	adds	r2, r0, #0
 8010c50:	801a      	strh	r2, [r3, #0]
 8010c52:	003b      	movs	r3, r7
 8010c54:	1c0a      	adds	r2, r1, #0
 8010c56:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010c58:	003b      	movs	r3, r7
 8010c5a:	881a      	ldrh	r2, [r3, #0]
 8010c5c:	1cbb      	adds	r3, r7, #2
 8010c5e:	8819      	ldrh	r1, [r3, #0]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	0018      	movs	r0, r3
 8010c64:	f7ff ffad 	bl	8010bc2 <sensirion_i2c_add_uint16_t_to_buffer>
 8010c68:	0003      	movs	r3, r0
}
 8010c6a:	0018      	movs	r0, r3
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	b002      	add	sp, #8
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b082      	sub	sp, #8
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6039      	str	r1, [r7, #0]
 8010c7a:	0011      	movs	r1, r2
 8010c7c:	1dfb      	adds	r3, r7, #7
 8010c7e:	1c02      	adds	r2, r0, #0
 8010c80:	701a      	strb	r2, [r3, #0]
 8010c82:	1d3b      	adds	r3, r7, #4
 8010c84:	1c0a      	adds	r2, r1, #0
 8010c86:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010c88:	1d3b      	adds	r3, r7, #4
 8010c8a:	881a      	ldrh	r2, [r3, #0]
 8010c8c:	6839      	ldr	r1, [r7, #0]
 8010c8e:	1dfb      	adds	r3, r7, #7
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	0018      	movs	r0, r3
 8010c94:	f7fe f9b0 	bl	800eff8 <sensirion_i2c_hal_write>
 8010c98:	0003      	movs	r3, r0
}
 8010c9a:	0018      	movs	r0, r3
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	b002      	add	sp, #8
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010ca2:	b5b0      	push	{r4, r5, r7, lr}
 8010ca4:	b084      	sub	sp, #16
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6039      	str	r1, [r7, #0]
 8010caa:	0011      	movs	r1, r2
 8010cac:	1dfb      	adds	r3, r7, #7
 8010cae:	1c02      	adds	r2, r0, #0
 8010cb0:	701a      	strb	r2, [r3, #0]
 8010cb2:	1d3b      	adds	r3, r7, #4
 8010cb4:	1c0a      	adds	r2, r1, #0
 8010cb6:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010cb8:	1d3b      	adds	r3, r7, #4
 8010cba:	881b      	ldrh	r3, [r3, #0]
 8010cbc:	085b      	lsrs	r3, r3, #1
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	220a      	movs	r2, #10
 8010cc2:	18ba      	adds	r2, r7, r2
 8010cc4:	1c19      	adds	r1, r3, #0
 8010cc6:	1c0b      	adds	r3, r1, #0
 8010cc8:	18db      	adds	r3, r3, r3
 8010cca:	185b      	adds	r3, r3, r1
 8010ccc:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010cce:	1d3b      	adds	r3, r7, #4
 8010cd0:	881b      	ldrh	r3, [r3, #0]
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	4013      	ands	r3, r2
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010cdc:	2304      	movs	r3, #4
 8010cde:	e06b      	b.n	8010db8 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010ce0:	230a      	movs	r3, #10
 8010ce2:	18fb      	adds	r3, r7, r3
 8010ce4:	881a      	ldrh	r2, [r3, #0]
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	1dfb      	adds	r3, r7, #7
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	0018      	movs	r0, r3
 8010cee:	f7fe f963 	bl	800efb8 <sensirion_i2c_hal_read>
 8010cf2:	0003      	movs	r3, r0
 8010cf4:	001a      	movs	r2, r3
 8010cf6:	2108      	movs	r1, #8
 8010cf8:	187b      	adds	r3, r7, r1
 8010cfa:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010cfc:	000a      	movs	r2, r1
 8010cfe:	18bb      	adds	r3, r7, r2
 8010d00:	2100      	movs	r1, #0
 8010d02:	5e5b      	ldrsh	r3, [r3, r1]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d003      	beq.n	8010d10 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010d08:	18bb      	adds	r3, r7, r2
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	5e9b      	ldrsh	r3, [r3, r2]
 8010d0e:	e053      	b.n	8010db8 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010d10:	230e      	movs	r3, #14
 8010d12:	18fb      	adds	r3, r7, r3
 8010d14:	2200      	movs	r2, #0
 8010d16:	801a      	strh	r2, [r3, #0]
 8010d18:	230c      	movs	r3, #12
 8010d1a:	18fb      	adds	r3, r7, r3
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	801a      	strh	r2, [r3, #0]
 8010d20:	e041      	b.n	8010da6 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010d22:	210e      	movs	r1, #14
 8010d24:	187b      	adds	r3, r7, r1
 8010d26:	881b      	ldrh	r3, [r3, #0]
 8010d28:	683a      	ldr	r2, [r7, #0]
 8010d2a:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010d2c:	187b      	adds	r3, r7, r1
 8010d2e:	881b      	ldrh	r3, [r3, #0]
 8010d30:	3302      	adds	r3, #2
 8010d32:	683a      	ldr	r2, [r7, #0]
 8010d34:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	001a      	movs	r2, r3
 8010d3a:	2102      	movs	r1, #2
 8010d3c:	f7ff fef5 	bl	8010b2a <sensirion_i2c_check_crc>
 8010d40:	0003      	movs	r3, r0
 8010d42:	001a      	movs	r2, r3
 8010d44:	2108      	movs	r1, #8
 8010d46:	187b      	adds	r3, r7, r1
 8010d48:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010d4a:	000a      	movs	r2, r1
 8010d4c:	18bb      	adds	r3, r7, r2
 8010d4e:	2100      	movs	r1, #0
 8010d50:	5e5b      	ldrsh	r3, [r3, r1]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d003      	beq.n	8010d5e <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010d56:	18bb      	adds	r3, r7, r2
 8010d58:	2200      	movs	r2, #0
 8010d5a:	5e9b      	ldrsh	r3, [r3, r2]
 8010d5c:	e02c      	b.n	8010db8 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010d5e:	240e      	movs	r4, #14
 8010d60:	193b      	adds	r3, r7, r4
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	683a      	ldr	r2, [r7, #0]
 8010d66:	18d2      	adds	r2, r2, r3
 8010d68:	250c      	movs	r5, #12
 8010d6a:	197b      	adds	r3, r7, r5
 8010d6c:	881b      	ldrh	r3, [r3, #0]
 8010d6e:	1979      	adds	r1, r7, r5
 8010d70:	1c58      	adds	r0, r3, #1
 8010d72:	8008      	strh	r0, [r1, #0]
 8010d74:	0019      	movs	r1, r3
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	185b      	adds	r3, r3, r1
 8010d7a:	7812      	ldrb	r2, [r2, #0]
 8010d7c:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010d7e:	193b      	adds	r3, r7, r4
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	3301      	adds	r3, #1
 8010d84:	683a      	ldr	r2, [r7, #0]
 8010d86:	18d2      	adds	r2, r2, r3
 8010d88:	197b      	adds	r3, r7, r5
 8010d8a:	881b      	ldrh	r3, [r3, #0]
 8010d8c:	1979      	adds	r1, r7, r5
 8010d8e:	1c58      	adds	r0, r3, #1
 8010d90:	8008      	strh	r0, [r1, #0]
 8010d92:	0019      	movs	r1, r3
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	185b      	adds	r3, r3, r1
 8010d98:	7812      	ldrb	r2, [r2, #0]
 8010d9a:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010d9c:	193b      	adds	r3, r7, r4
 8010d9e:	193a      	adds	r2, r7, r4
 8010da0:	8812      	ldrh	r2, [r2, #0]
 8010da2:	3203      	adds	r2, #3
 8010da4:	801a      	strh	r2, [r3, #0]
 8010da6:	230e      	movs	r3, #14
 8010da8:	18fa      	adds	r2, r7, r3
 8010daa:	230a      	movs	r3, #10
 8010dac:	18fb      	adds	r3, r7, r3
 8010dae:	8812      	ldrh	r2, [r2, #0]
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d3b5      	bcc.n	8010d22 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	0018      	movs	r0, r3
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	b004      	add	sp, #16
 8010dbe:	bdb0      	pop	{r4, r5, r7, pc}

08010dc0 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010dc0:	b590      	push	{r4, r7, lr}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6039      	str	r1, [r7, #0]
 8010dc8:	0011      	movs	r1, r2
 8010dca:	1dfb      	adds	r3, r7, #7
 8010dcc:	1c02      	adds	r2, r0, #0
 8010dce:	701a      	strb	r2, [r3, #0]
 8010dd0:	1dbb      	adds	r3, r7, #6
 8010dd2:	1c0a      	adds	r2, r1, #0
 8010dd4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010dd6:	4b08      	ldr	r3, [pc, #32]	@ (8010df8 <ReadRegister+0x38>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d008      	beq.n	8010df0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010dde:	4b06      	ldr	r3, [pc, #24]	@ (8010df8 <ReadRegister+0x38>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	1dba      	adds	r2, r7, #6
 8010de4:	7814      	ldrb	r4, [r2, #0]
 8010de6:	6839      	ldr	r1, [r7, #0]
 8010de8:	1dfa      	adds	r2, r7, #7
 8010dea:	7810      	ldrb	r0, [r2, #0]
 8010dec:	0022      	movs	r2, r4
 8010dee:	4798      	blx	r3
  }
}
 8010df0:	46c0      	nop			@ (mov r8, r8)
 8010df2:	46bd      	mov	sp, r7
 8010df4:	b003      	add	sp, #12
 8010df6:	bd90      	pop	{r4, r7, pc}
 8010df8:	200011e4 	.word	0x200011e4

08010dfc <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010dfc:	b590      	push	{r4, r7, lr}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6039      	str	r1, [r7, #0]
 8010e04:	0011      	movs	r1, r2
 8010e06:	1dfb      	adds	r3, r7, #7
 8010e08:	1c02      	adds	r2, r0, #0
 8010e0a:	701a      	strb	r2, [r3, #0]
 8010e0c:	1dbb      	adds	r3, r7, #6
 8010e0e:	1c0a      	adds	r2, r1, #0
 8010e10:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010e12:	4b08      	ldr	r3, [pc, #32]	@ (8010e34 <WriteRegister+0x38>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d008      	beq.n	8010e2c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010e1a:	4b06      	ldr	r3, [pc, #24]	@ (8010e34 <WriteRegister+0x38>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	1dba      	adds	r2, r7, #6
 8010e20:	7814      	ldrb	r4, [r2, #0]
 8010e22:	6839      	ldr	r1, [r7, #0]
 8010e24:	1dfa      	adds	r2, r7, #7
 8010e26:	7810      	ldrb	r0, [r2, #0]
 8010e28:	0022      	movs	r2, r4
 8010e2a:	4798      	blx	r3
  }
}
 8010e2c:	46c0      	nop			@ (mov r8, r8)
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	b003      	add	sp, #12
 8010e32:	bd90      	pop	{r4, r7, pc}
 8010e34:	200011e8 	.word	0x200011e8

08010e38 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010e40:	f003 fda8 	bl	8014994 <HAL_GetTick>
 8010e44:	0002      	movs	r2, r0
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	18d2      	adds	r2, r2, r3
 8010e4a:	4b03      	ldr	r3, [pc, #12]	@ (8010e58 <setSGP40TimeStamp+0x20>)
 8010e4c:	601a      	str	r2, [r3, #0]
}
 8010e4e:	46c0      	nop			@ (mov r8, r8)
 8010e50:	46bd      	mov	sp, r7
 8010e52:	b002      	add	sp, #8
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	46c0      	nop			@ (mov r8, r8)
 8010e58:	200011f8 	.word	0x200011f8

08010e5c <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010e60:	4b02      	ldr	r3, [pc, #8]	@ (8010e6c <ResetSGP40samplecounter+0x10>)
 8010e62:	2200      	movs	r2, #0
 8010e64:	701a      	strb	r2, [r3, #0]
}
 8010e66:	46c0      	nop			@ (mov r8, r8)
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	200011f6 	.word	0x200011f6

08010e70 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010e7a:	4b07      	ldr	r3, [pc, #28]	@ (8010e98 <SGP_Init+0x28>)
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010e80:	4b06      	ldr	r3, [pc, #24]	@ (8010e9c <SGP_Init+0x2c>)
 8010e82:	683a      	ldr	r2, [r7, #0]
 8010e84:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010e86:	4b06      	ldr	r3, [pc, #24]	@ (8010ea0 <SGP_Init+0x30>)
 8010e88:	2100      	movs	r1, #0
 8010e8a:	0018      	movs	r0, r3
 8010e8c:	f7fe ff72 	bl	800fd74 <GasIndexAlgorithm_init>
}
 8010e90:	46c0      	nop			@ (mov r8, r8)
 8010e92:	46bd      	mov	sp, r7
 8010e94:	b002      	add	sp, #8
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	200011e4 	.word	0x200011e4
 8010e9c:	200011e8 	.word	0x200011e8
 8010ea0:	20001200 	.word	0x20001200

08010ea4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010ea8:	4b07      	ldr	r3, [pc, #28]	@ (8010ec8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010eb0:	4b06      	ldr	r3, [pc, #24]	@ (8010ecc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010eb2:	22fe      	movs	r2, #254	@ 0xfe
 8010eb4:	0592      	lsls	r2, r2, #22
 8010eb6:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010eb8:	e002      	b.n	8010ec0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010eba:	4b04      	ldr	r3, [pc, #16]	@ (8010ecc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010ebc:	4a04      	ldr	r2, [pc, #16]	@ (8010ed0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010ebe:	605a      	str	r2, [r3, #4]
}
 8010ec0:	46c0      	nop			@ (mov r8, r8)
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	46c0      	nop			@ (mov r8, r8)
 8010ec8:	2000214d 	.word	0x2000214d
 8010ecc:	20001200 	.word	0x20001200
 8010ed0:	44610000 	.word	0x44610000

08010ed4 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010ed8:	4b13      	ldr	r3, [pc, #76]	@ (8010f28 <SGP_StartMeasurement+0x54>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00d      	beq.n	8010efc <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010ee0:	4b12      	ldr	r3, [pc, #72]	@ (8010f2c <SGP_StartMeasurement+0x58>)
 8010ee2:	2208      	movs	r2, #8
 8010ee4:	0019      	movs	r1, r3
 8010ee6:	2059      	movs	r0, #89	@ 0x59
 8010ee8:	f7ff ff88 	bl	8010dfc <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010eec:	f003 fd52 	bl	8014994 <HAL_GetTick>
 8010ef0:	0003      	movs	r3, r0
 8010ef2:	331e      	adds	r3, #30
 8010ef4:	001a      	movs	r2, r3
 8010ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8010f30 <SGP_StartMeasurement+0x5c>)
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	e00c      	b.n	8010f16 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010efc:	4b0d      	ldr	r3, [pc, #52]	@ (8010f34 <SGP_StartMeasurement+0x60>)
 8010efe:	2208      	movs	r2, #8
 8010f00:	0019      	movs	r1, r3
 8010f02:	2059      	movs	r0, #89	@ 0x59
 8010f04:	f7ff ff7a 	bl	8010dfc <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010f08:	f003 fd44 	bl	8014994 <HAL_GetTick>
 8010f0c:	0003      	movs	r3, r0
 8010f0e:	33aa      	adds	r3, #170	@ 0xaa
 8010f10:	001a      	movs	r2, r3
 8010f12:	4b09      	ldr	r3, [pc, #36]	@ (8010f38 <SGP_StartMeasurement+0x64>)
 8010f14:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010f16:	4b09      	ldr	r3, [pc, #36]	@ (8010f3c <SGP_StartMeasurement+0x68>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010f1c:	4b08      	ldr	r3, [pc, #32]	@ (8010f40 <SGP_StartMeasurement+0x6c>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	701a      	strb	r2, [r3, #0]
}
 8010f22:	46c0      	nop			@ (mov r8, r8)
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	200012a8 	.word	0x200012a8
 8010f2c:	200000bc 	.word	0x200000bc
 8010f30:	200000d0 	.word	0x200000d0
 8010f34:	200000b4 	.word	0x200000b4
 8010f38:	200000c8 	.word	0x200000c8
 8010f3c:	200011fc 	.word	0x200011fc
 8010f40:	200011fd 	.word	0x200011fd

08010f44 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010f44:	b580      	push	{r7, lr}
 8010f46:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010f48:	4b04      	ldr	r3, [pc, #16]	@ (8010f5c <SGP_HeatedUp+0x18>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	0018      	movs	r0, r3
 8010f4e:	f002 ff4b 	bl	8013de8 <TimestampIsReached>
 8010f52:	0003      	movs	r3, r0
}
 8010f54:	0018      	movs	r0, r3
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	46c0      	nop			@ (mov r8, r8)
 8010f5c:	200000c8 	.word	0x200000c8

08010f60 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010f60:	b580      	push	{r7, lr}
 8010f62:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010f64:	4b04      	ldr	r3, [pc, #16]	@ (8010f78 <SGP_MeasurementReady+0x18>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	0018      	movs	r0, r3
 8010f6a:	f002 ff3d 	bl	8013de8 <TimestampIsReached>
 8010f6e:	0003      	movs	r3, r0
}
 8010f70:	0018      	movs	r0, r3
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	46c0      	nop			@ (mov r8, r8)
 8010f78:	200000d0 	.word	0x200000d0

08010f7c <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010f80:	4b04      	ldr	r3, [pc, #16]	@ (8010f94 <SGP_MeasurementDone+0x18>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	0018      	movs	r0, r3
 8010f86:	f002 ff2f 	bl	8013de8 <TimestampIsReached>
 8010f8a:	0003      	movs	r3, r0
}
 8010f8c:	0018      	movs	r0, r3
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	46c0      	nop			@ (mov r8, r8)
 8010f94:	200000cc 	.word	0x200000cc

08010f98 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010f9c:	4b04      	ldr	r3, [pc, #16]	@ (8010fb0 <SGP_TurnHeaterOff+0x18>)
 8010f9e:	2202      	movs	r2, #2
 8010fa0:	0019      	movs	r1, r3
 8010fa2:	2059      	movs	r0, #89	@ 0x59
 8010fa4:	f7ff ff2a 	bl	8010dfc <WriteRegister>
}
 8010fa8:	46c0      	nop			@ (mov r8, r8)
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	46c0      	nop			@ (mov r8, r8)
 8010fb0:	200000ac 	.word	0x200000ac

08010fb4 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010fb4:	b590      	push	{r4, r7, lr}
 8010fb6:	b087      	sub	sp, #28
 8010fb8:	af02      	add	r7, sp, #8
 8010fba:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010fbc:	f7ff ffc2 	bl	8010f44 <SGP_HeatedUp>
 8010fc0:	1e03      	subs	r3, r0, #0
 8010fc2:	d032      	beq.n	801102a <SGP_GetMeasurementValues+0x76>
 8010fc4:	4b80      	ldr	r3, [pc, #512]	@ (80111c8 <SGP_GetMeasurementValues+0x214>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	4053      	eors	r3, r2
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d02b      	beq.n	801102a <SGP_GetMeasurementValues+0x76>
 8010fd2:	4b7e      	ldr	r3, [pc, #504]	@ (80111cc <SGP_GetMeasurementValues+0x218>)
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	4053      	eors	r3, r2
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d024      	beq.n	801102a <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010fe0:	4b79      	ldr	r3, [pc, #484]	@ (80111c8 <SGP_GetMeasurementValues+0x214>)
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80111d0 <SGP_GetMeasurementValues+0x21c>)
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00d      	beq.n	801100a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010fee:	4b79      	ldr	r3, [pc, #484]	@ (80111d4 <SGP_GetMeasurementValues+0x220>)
 8010ff0:	2208      	movs	r2, #8
 8010ff2:	0019      	movs	r1, r3
 8010ff4:	2059      	movs	r0, #89	@ 0x59
 8010ff6:	f7ff ff01 	bl	8010dfc <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010ffa:	f003 fccb 	bl	8014994 <HAL_GetTick>
 8010ffe:	0003      	movs	r3, r0
 8011000:	331e      	adds	r3, #30
 8011002:	001a      	movs	r2, r3
 8011004:	4b74      	ldr	r3, [pc, #464]	@ (80111d8 <SGP_GetMeasurementValues+0x224>)
 8011006:	601a      	str	r2, [r3, #0]
 8011008:	e00c      	b.n	8011024 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801100a:	4b74      	ldr	r3, [pc, #464]	@ (80111dc <SGP_GetMeasurementValues+0x228>)
 801100c:	2208      	movs	r2, #8
 801100e:	0019      	movs	r1, r3
 8011010:	2059      	movs	r0, #89	@ 0x59
 8011012:	f7ff fef3 	bl	8010dfc <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8011016:	f003 fcbd 	bl	8014994 <HAL_GetTick>
 801101a:	0003      	movs	r3, r0
 801101c:	331e      	adds	r3, #30
 801101e:	001a      	movs	r2, r3
 8011020:	4b6d      	ldr	r3, [pc, #436]	@ (80111d8 <SGP_GetMeasurementValues+0x224>)
 8011022:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8011024:	4b69      	ldr	r3, [pc, #420]	@ (80111cc <SGP_GetMeasurementValues+0x218>)
 8011026:	2201      	movs	r2, #1
 8011028:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 801102a:	4b67      	ldr	r3, [pc, #412]	@ (80111c8 <SGP_GetMeasurementValues+0x214>)
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d100      	bne.n	8011034 <SGP_GetMeasurementValues+0x80>
 8011032:	e0ac      	b.n	801118e <SGP_GetMeasurementValues+0x1da>
 8011034:	f7ff ff94 	bl	8010f60 <SGP_MeasurementReady>
 8011038:	1e03      	subs	r3, r0, #0
 801103a:	d100      	bne.n	801103e <SGP_GetMeasurementValues+0x8a>
 801103c:	e0a7      	b.n	801118e <SGP_GetMeasurementValues+0x1da>
 801103e:	4b68      	ldr	r3, [pc, #416]	@ (80111e0 <SGP_GetMeasurementValues+0x22c>)
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	2201      	movs	r2, #1
 8011044:	4053      	eors	r3, r2
 8011046:	b2db      	uxtb	r3, r3
 8011048:	2b00      	cmp	r3, #0
 801104a:	d100      	bne.n	801104e <SGP_GetMeasurementValues+0x9a>
 801104c:	e09f      	b.n	801118e <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 801104e:	4b64      	ldr	r3, [pc, #400]	@ (80111e0 <SGP_GetMeasurementValues+0x22c>)
 8011050:	2201      	movs	r2, #1
 8011052:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8011054:	4b63      	ldr	r3, [pc, #396]	@ (80111e4 <SGP_GetMeasurementValues+0x230>)
 8011056:	2203      	movs	r2, #3
 8011058:	0019      	movs	r1, r3
 801105a:	2059      	movs	r0, #89	@ 0x59
 801105c:	f7ff feb0 	bl	8010dc0 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8011060:	4b60      	ldr	r3, [pc, #384]	@ (80111e4 <SGP_GetMeasurementValues+0x230>)
 8011062:	2203      	movs	r2, #3
 8011064:	2103      	movs	r1, #3
 8011066:	0018      	movs	r0, r3
 8011068:	f000 f91a 	bl	80112a0 <CheckCRC>
 801106c:	0003      	movs	r3, r0
 801106e:	001a      	movs	r2, r3
 8011070:	2301      	movs	r3, #1
 8011072:	4053      	eors	r3, r2
 8011074:	b2db      	uxtb	r3, r3
 8011076:	2b00      	cmp	r3, #0
 8011078:	d02a      	beq.n	80110d0 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 801107a:	4a5b      	ldr	r2, [pc, #364]	@ (80111e8 <SGP_GetMeasurementValues+0x234>)
 801107c:	4b5b      	ldr	r3, [pc, #364]	@ (80111ec <SGP_GetMeasurementValues+0x238>)
 801107e:	0019      	movs	r1, r3
 8011080:	2001      	movs	r0, #1
 8011082:	f002 ff07 	bl	8013e94 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8011086:	4a5a      	ldr	r2, [pc, #360]	@ (80111f0 <SGP_GetMeasurementValues+0x23c>)
 8011088:	4b5a      	ldr	r3, [pc, #360]	@ (80111f4 <SGP_GetMeasurementValues+0x240>)
 801108a:	0019      	movs	r1, r3
 801108c:	2002      	movs	r0, #2
 801108e:	f002 ff01 	bl	8013e94 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8011092:	230f      	movs	r3, #15
 8011094:	18fb      	adds	r3, r7, r3
 8011096:	2200      	movs	r2, #0
 8011098:	701a      	strb	r2, [r3, #0]
 801109a:	e012      	b.n	80110c2 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 801109c:	240f      	movs	r4, #15
 801109e:	193b      	adds	r3, r7, r4
 80110a0:	7818      	ldrb	r0, [r3, #0]
 80110a2:	193b      	adds	r3, r7, r4
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	4a4f      	ldr	r2, [pc, #316]	@ (80111e4 <SGP_GetMeasurementValues+0x230>)
 80110a8:	5cd3      	ldrb	r3, [r2, r3]
 80110aa:	4a53      	ldr	r2, [pc, #332]	@ (80111f8 <SGP_GetMeasurementValues+0x244>)
 80110ac:	4953      	ldr	r1, [pc, #332]	@ (80111fc <SGP_GetMeasurementValues+0x248>)
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	0003      	movs	r3, r0
 80110b2:	2003      	movs	r0, #3
 80110b4:	f002 feee 	bl	8013e94 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80110b8:	193b      	adds	r3, r7, r4
 80110ba:	781a      	ldrb	r2, [r3, #0]
 80110bc:	193b      	adds	r3, r7, r4
 80110be:	3201      	adds	r2, #1
 80110c0:	701a      	strb	r2, [r3, #0]
 80110c2:	230f      	movs	r3, #15
 80110c4:	18fb      	adds	r3, r7, r3
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d9e7      	bls.n	801109c <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 80110cc:	2300      	movs	r3, #0
 80110ce:	e076      	b.n	80111be <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 80110d0:	f003 fc60 	bl	8014994 <HAL_GetTick>
 80110d4:	0003      	movs	r3, r0
 80110d6:	22fa      	movs	r2, #250	@ 0xfa
 80110d8:	0092      	lsls	r2, r2, #2
 80110da:	189a      	adds	r2, r3, r2
 80110dc:	4b48      	ldr	r3, [pc, #288]	@ (8011200 <SGP_GetMeasurementValues+0x24c>)
 80110de:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80110e0:	f7ff ff5a 	bl	8010f98 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 80110e4:	4b47      	ldr	r3, [pc, #284]	@ (8011204 <SGP_GetMeasurementValues+0x250>)
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	3301      	adds	r3, #1
 80110ea:	b2da      	uxtb	r2, r3
 80110ec:	4b45      	ldr	r3, [pc, #276]	@ (8011204 <SGP_GetMeasurementValues+0x250>)
 80110ee:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80110f0:	4b44      	ldr	r3, [pc, #272]	@ (8011204 <SGP_GetMeasurementValues+0x250>)
 80110f2:	781a      	ldrb	r2, [r3, #0]
 80110f4:	4b44      	ldr	r3, [pc, #272]	@ (8011208 <SGP_GetMeasurementValues+0x254>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d348      	bcc.n	801118e <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80110fc:	4b39      	ldr	r3, [pc, #228]	@ (80111e4 <SGP_GetMeasurementValues+0x230>)
 80110fe:	785b      	ldrb	r3, [r3, #1]
 8011100:	b21b      	sxth	r3, r3
 8011102:	021b      	lsls	r3, r3, #8
 8011104:	b21a      	sxth	r2, r3
 8011106:	4b37      	ldr	r3, [pc, #220]	@ (80111e4 <SGP_GetMeasurementValues+0x230>)
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	b21b      	sxth	r3, r3
 801110c:	4313      	orrs	r3, r2
 801110e:	b21a      	sxth	r2, r3
 8011110:	240c      	movs	r4, #12
 8011112:	193b      	adds	r3, r7, r4
 8011114:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 8011116:	2300      	movs	r3, #0
 8011118:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 801111a:	193b      	adds	r3, r7, r4
 801111c:	8819      	ldrh	r1, [r3, #0]
 801111e:	2308      	movs	r3, #8
 8011120:	18fa      	adds	r2, r7, r3
 8011122:	4b3a      	ldr	r3, [pc, #232]	@ (801120c <SGP_GetMeasurementValues+0x258>)
 8011124:	0018      	movs	r0, r3
 8011126:	f7fe fe87 	bl	800fe38 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 801112a:	68ba      	ldr	r2, [r7, #8]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8011130:	4b37      	ldr	r3, [pc, #220]	@ (8011210 <SGP_GetMeasurementValues+0x25c>)
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	3301      	adds	r3, #1
 8011136:	b2da      	uxtb	r2, r3
 8011138:	4b35      	ldr	r3, [pc, #212]	@ (8011210 <SGP_GetMeasurementValues+0x25c>)
 801113a:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 801113c:	4b34      	ldr	r3, [pc, #208]	@ (8011210 <SGP_GetMeasurementValues+0x25c>)
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	2b01      	cmp	r3, #1
 8011142:	d10d      	bne.n	8011160 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8011144:	193b      	adds	r3, r7, r4
 8011146:	881b      	ldrh	r3, [r3, #0]
 8011148:	4a32      	ldr	r2, [pc, #200]	@ (8011214 <SGP_GetMeasurementValues+0x260>)
 801114a:	492c      	ldr	r1, [pc, #176]	@ (80111fc <SGP_GetMeasurementValues+0x248>)
 801114c:	2003      	movs	r0, #3
 801114e:	f002 fea1 	bl	8013e94 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	4a30      	ldr	r2, [pc, #192]	@ (8011218 <SGP_GetMeasurementValues+0x264>)
 8011156:	4929      	ldr	r1, [pc, #164]	@ (80111fc <SGP_GetMeasurementValues+0x248>)
 8011158:	2003      	movs	r0, #3
 801115a:	f002 fe9b 	bl	8013e94 <CreateLine>
 801115e:	e006      	b.n	801116e <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8011160:	4b2b      	ldr	r3, [pc, #172]	@ (8011210 <SGP_GetMeasurementValues+0x25c>)
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	2b0b      	cmp	r3, #11
 8011166:	d102      	bne.n	801116e <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8011168:	4b29      	ldr	r3, [pc, #164]	@ (8011210 <SGP_GetMeasurementValues+0x25c>)
 801116a:	2200      	movs	r2, #0
 801116c:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	b29b      	uxth	r3, r3
 8011172:	0018      	movs	r0, r3
 8011174:	f001 fdf2 	bl	8012d5c <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 8011178:	4b22      	ldr	r3, [pc, #136]	@ (8011204 <SGP_GetMeasurementValues+0x250>)
 801117a:	2200      	movs	r2, #0
 801117c:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 801117e:	4b14      	ldr	r3, [pc, #80]	@ (80111d0 <SGP_GetMeasurementValues+0x21c>)
 8011180:	2200      	movs	r2, #0
 8011182:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8011184:	4b11      	ldr	r3, [pc, #68]	@ (80111cc <SGP_GetMeasurementValues+0x218>)
 8011186:	2200      	movs	r2, #0
 8011188:	701a      	strb	r2, [r3, #0]
      return true;
 801118a:	2301      	movs	r3, #1
 801118c:	e017      	b.n	80111be <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 801118e:	f7ff fef5 	bl	8010f7c <SGP_MeasurementDone>
 8011192:	1e03      	subs	r3, r0, #0
 8011194:	d012      	beq.n	80111bc <SGP_GetMeasurementValues+0x208>
 8011196:	4b0c      	ldr	r3, [pc, #48]	@ (80111c8 <SGP_GetMeasurementValues+0x214>)
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d00e      	beq.n	80111bc <SGP_GetMeasurementValues+0x208>
 801119e:	4b10      	ldr	r3, [pc, #64]	@ (80111e0 <SGP_GetMeasurementValues+0x22c>)
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00a      	beq.n	80111bc <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80111a6:	4a1d      	ldr	r2, [pc, #116]	@ (801121c <SGP_GetMeasurementValues+0x268>)
 80111a8:	4b14      	ldr	r3, [pc, #80]	@ (80111fc <SGP_GetMeasurementValues+0x248>)
 80111aa:	0019      	movs	r1, r3
 80111ac:	2003      	movs	r0, #3
 80111ae:	f002 fe71 	bl	8013e94 <CreateLine>
    SGP_StartMeasurement();
 80111b2:	f7ff fe8f 	bl	8010ed4 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80111b6:	4b05      	ldr	r3, [pc, #20]	@ (80111cc <SGP_GetMeasurementValues+0x218>)
 80111b8:	2200      	movs	r2, #0
 80111ba:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	0018      	movs	r0, r3
 80111c0:	46bd      	mov	sp, r7
 80111c2:	b005      	add	sp, #20
 80111c4:	bd90      	pop	{r4, r7, pc}
 80111c6:	46c0      	nop			@ (mov r8, r8)
 80111c8:	200011fc 	.word	0x200011fc
 80111cc:	200012a9 	.word	0x200012a9
 80111d0:	200012a8 	.word	0x200012a8
 80111d4:	200000bc 	.word	0x200000bc
 80111d8:	200000d0 	.word	0x200000d0
 80111dc:	200000b4 	.word	0x200000b4
 80111e0:	200011fd 	.word	0x200011fd
 80111e4:	200011ec 	.word	0x200011ec
 80111e8:	0802d9d4 	.word	0x0802d9d4
 80111ec:	0802d9fc 	.word	0x0802d9fc
 80111f0:	0802da00 	.word	0x0802da00
 80111f4:	0802da20 	.word	0x0802da20
 80111f8:	0802da24 	.word	0x0802da24
 80111fc:	0802da44 	.word	0x0802da44
 8011200:	200000cc 	.word	0x200000cc
 8011204:	200011f5 	.word	0x200011f5
 8011208:	200000c6 	.word	0x200000c6
 801120c:	20001200 	.word	0x20001200
 8011210:	200011f6 	.word	0x200011f6
 8011214:	0802da48 	.word	0x0802da48
 8011218:	0802da64 	.word	0x0802da64
 801121c:	0802da80 	.word	0x0802da80

08011220 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011226:	4b1a      	ldr	r3, [pc, #104]	@ (8011290 <SGP_DeviceConnected+0x70>)
 8011228:	2202      	movs	r2, #2
 801122a:	0019      	movs	r1, r3
 801122c:	2059      	movs	r0, #89	@ 0x59
 801122e:	f7ff fde5 	bl	8010dfc <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8011232:	2001      	movs	r0, #1
 8011234:	f003 fbb8 	bl	80149a8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8011238:	4b16      	ldr	r3, [pc, #88]	@ (8011294 <SGP_DeviceConnected+0x74>)
 801123a:	2209      	movs	r2, #9
 801123c:	0019      	movs	r1, r3
 801123e:	2059      	movs	r0, #89	@ 0x59
 8011240:	f7ff fdbe 	bl	8010dc0 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011244:	1dfb      	adds	r3, r7, #7
 8011246:	2200      	movs	r2, #0
 8011248:	701a      	strb	r2, [r3, #0]
 801124a:	e011      	b.n	8011270 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 801124c:	1dfb      	adds	r3, r7, #7
 801124e:	7818      	ldrb	r0, [r3, #0]
 8011250:	1dfb      	adds	r3, r7, #7
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	4a0f      	ldr	r2, [pc, #60]	@ (8011294 <SGP_DeviceConnected+0x74>)
 8011256:	5cd3      	ldrb	r3, [r2, r3]
 8011258:	4a0f      	ldr	r2, [pc, #60]	@ (8011298 <SGP_DeviceConnected+0x78>)
 801125a:	4910      	ldr	r1, [pc, #64]	@ (801129c <SGP_DeviceConnected+0x7c>)
 801125c:	9300      	str	r3, [sp, #0]
 801125e:	0003      	movs	r3, r0
 8011260:	2002      	movs	r0, #2
 8011262:	f002 fe17 	bl	8013e94 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011266:	1dfb      	adds	r3, r7, #7
 8011268:	781a      	ldrb	r2, [r3, #0]
 801126a:	1dfb      	adds	r3, r7, #7
 801126c:	3201      	adds	r2, #1
 801126e:	701a      	strb	r2, [r3, #0]
 8011270:	1dfb      	adds	r3, r7, #7
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	2b08      	cmp	r3, #8
 8011276:	d9e9      	bls.n	801124c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8011278:	4b06      	ldr	r3, [pc, #24]	@ (8011294 <SGP_DeviceConnected+0x74>)
 801127a:	2203      	movs	r2, #3
 801127c:	2109      	movs	r1, #9
 801127e:	0018      	movs	r0, r3
 8011280:	f000 f80e 	bl	80112a0 <CheckCRC>
 8011284:	0003      	movs	r3, r0
}
 8011286:	0018      	movs	r0, r3
 8011288:	46bd      	mov	sp, r7
 801128a:	b002      	add	sp, #8
 801128c:	bd80      	pop	{r7, pc}
 801128e:	46c0      	nop			@ (mov r8, r8)
 8011290:	200000b0 	.word	0x200000b0
 8011294:	200011ec 	.word	0x200011ec
 8011298:	0802daa0 	.word	0x0802daa0
 801129c:	0802da20 	.word	0x0802da20

080112a0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80112a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112a2:	b08f      	sub	sp, #60	@ 0x3c
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6278      	str	r0, [r7, #36]	@ 0x24
 80112a8:	0008      	movs	r0, r1
 80112aa:	0011      	movs	r1, r2
 80112ac:	2323      	movs	r3, #35	@ 0x23
 80112ae:	18fb      	adds	r3, r7, r3
 80112b0:	1c02      	adds	r2, r0, #0
 80112b2:	701a      	strb	r2, [r3, #0]
 80112b4:	2322      	movs	r3, #34	@ 0x22
 80112b6:	18fb      	adds	r3, r7, r3
 80112b8:	1c0a      	adds	r2, r1, #0
 80112ba:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80112bc:	2317      	movs	r3, #23
 80112be:	2220      	movs	r2, #32
 80112c0:	189b      	adds	r3, r3, r2
 80112c2:	19db      	adds	r3, r3, r7
 80112c4:	2200      	movs	r2, #0
 80112c6:	701a      	strb	r2, [r3, #0]
 80112c8:	e09f      	b.n	801140a <CheckCRC+0x16a>
 80112ca:	466b      	mov	r3, sp
 80112cc:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80112ce:	2322      	movs	r3, #34	@ 0x22
 80112d0:	18fb      	adds	r3, r7, r3
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	001a      	movs	r2, r3
 80112d6:	3a01      	subs	r2, #1
 80112d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80112da:	60bb      	str	r3, [r7, #8]
 80112dc:	2200      	movs	r2, #0
 80112de:	60fa      	str	r2, [r7, #12]
 80112e0:	68b8      	ldr	r0, [r7, #8]
 80112e2:	68f9      	ldr	r1, [r7, #12]
 80112e4:	0002      	movs	r2, r0
 80112e6:	0f52      	lsrs	r2, r2, #29
 80112e8:	000c      	movs	r4, r1
 80112ea:	00e4      	lsls	r4, r4, #3
 80112ec:	61fc      	str	r4, [r7, #28]
 80112ee:	69fc      	ldr	r4, [r7, #28]
 80112f0:	4314      	orrs	r4, r2
 80112f2:	61fc      	str	r4, [r7, #28]
 80112f4:	0002      	movs	r2, r0
 80112f6:	00d2      	lsls	r2, r2, #3
 80112f8:	61ba      	str	r2, [r7, #24]
 80112fa:	603b      	str	r3, [r7, #0]
 80112fc:	2200      	movs	r2, #0
 80112fe:	607a      	str	r2, [r7, #4]
 8011300:	6838      	ldr	r0, [r7, #0]
 8011302:	6879      	ldr	r1, [r7, #4]
 8011304:	0002      	movs	r2, r0
 8011306:	0f52      	lsrs	r2, r2, #29
 8011308:	000c      	movs	r4, r1
 801130a:	00e4      	lsls	r4, r4, #3
 801130c:	617c      	str	r4, [r7, #20]
 801130e:	697c      	ldr	r4, [r7, #20]
 8011310:	4314      	orrs	r4, r2
 8011312:	617c      	str	r4, [r7, #20]
 8011314:	0002      	movs	r2, r0
 8011316:	00d2      	lsls	r2, r2, #3
 8011318:	613a      	str	r2, [r7, #16]
 801131a:	3307      	adds	r3, #7
 801131c:	08db      	lsrs	r3, r3, #3
 801131e:	00db      	lsls	r3, r3, #3
 8011320:	466a      	mov	r2, sp
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	469d      	mov	sp, r3
 8011326:	466b      	mov	r3, sp
 8011328:	3300      	adds	r3, #0
 801132a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 801132c:	2316      	movs	r3, #22
 801132e:	2220      	movs	r2, #32
 8011330:	189b      	adds	r3, r3, r2
 8011332:	19db      	adds	r3, r3, r7
 8011334:	2200      	movs	r2, #0
 8011336:	701a      	strb	r2, [r3, #0]
 8011338:	e01e      	b.n	8011378 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 801133a:	2317      	movs	r3, #23
 801133c:	2220      	movs	r2, #32
 801133e:	189b      	adds	r3, r3, r2
 8011340:	19db      	adds	r3, r3, r7
 8011342:	781a      	ldrb	r2, [r3, #0]
 8011344:	2116      	movs	r1, #22
 8011346:	2320      	movs	r3, #32
 8011348:	18cb      	adds	r3, r1, r3
 801134a:	19db      	adds	r3, r3, r7
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	18d3      	adds	r3, r2, r3
 8011350:	001a      	movs	r2, r3
 8011352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011354:	189a      	adds	r2, r3, r2
 8011356:	0008      	movs	r0, r1
 8011358:	2320      	movs	r3, #32
 801135a:	18cb      	adds	r3, r1, r3
 801135c:	19db      	adds	r3, r3, r7
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	7811      	ldrb	r1, [r2, #0]
 8011362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011364:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8011366:	2320      	movs	r3, #32
 8011368:	18c3      	adds	r3, r0, r3
 801136a:	19db      	adds	r3, r3, r7
 801136c:	781a      	ldrb	r2, [r3, #0]
 801136e:	2320      	movs	r3, #32
 8011370:	18c3      	adds	r3, r0, r3
 8011372:	19db      	adds	r3, r3, r7
 8011374:	3201      	adds	r2, #1
 8011376:	701a      	strb	r2, [r3, #0]
 8011378:	2316      	movs	r3, #22
 801137a:	2220      	movs	r2, #32
 801137c:	189b      	adds	r3, r3, r2
 801137e:	19da      	adds	r2, r3, r7
 8011380:	2322      	movs	r3, #34	@ 0x22
 8011382:	18fb      	adds	r3, r7, r3
 8011384:	7812      	ldrb	r2, [r2, #0]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	429a      	cmp	r2, r3
 801138a:	d3d6      	bcc.n	801133a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 801138c:	2417      	movs	r4, #23
 801138e:	2320      	movs	r3, #32
 8011390:	18e3      	adds	r3, r4, r3
 8011392:	19db      	adds	r3, r3, r7
 8011394:	781a      	ldrb	r2, [r3, #0]
 8011396:	2322      	movs	r3, #34	@ 0x22
 8011398:	18fb      	adds	r3, r7, r3
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	18d3      	adds	r3, r2, r3
 801139e:	3b01      	subs	r3, #1
 80113a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113a2:	18d2      	adds	r2, r2, r3
 80113a4:	250b      	movs	r5, #11
 80113a6:	2320      	movs	r3, #32
 80113a8:	18eb      	adds	r3, r5, r3
 80113aa:	19db      	adds	r3, r3, r7
 80113ac:	7812      	ldrb	r2, [r2, #0]
 80113ae:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80113b0:	2322      	movs	r3, #34	@ 0x22
 80113b2:	18fb      	adds	r3, r7, r3
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	3b01      	subs	r3, #1
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113bc:	0011      	movs	r1, r2
 80113be:	0018      	movs	r0, r3
 80113c0:	f000 f838 	bl	8011434 <CalculateCRC>
 80113c4:	0003      	movs	r3, r0
 80113c6:	001a      	movs	r2, r3
 80113c8:	2320      	movs	r3, #32
 80113ca:	18eb      	adds	r3, r5, r3
 80113cc:	19db      	adds	r3, r3, r7
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d00c      	beq.n	80113ee <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80113d4:	2320      	movs	r3, #32
 80113d6:	18e3      	adds	r3, r4, r3
 80113d8:	19db      	adds	r3, r3, r7
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	3301      	adds	r3, #1
 80113de:	4a13      	ldr	r2, [pc, #76]	@ (801142c <CheckCRC+0x18c>)
 80113e0:	4913      	ldr	r1, [pc, #76]	@ (8011430 <CheckCRC+0x190>)
 80113e2:	2001      	movs	r0, #1
 80113e4:	f002 fd56 	bl	8013e94 <CreateLine>
      return false;
 80113e8:	2300      	movs	r3, #0
 80113ea:	46b5      	mov	sp, r6
 80113ec:	e019      	b.n	8011422 <CheckCRC+0x182>
 80113ee:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80113f0:	2217      	movs	r2, #23
 80113f2:	2320      	movs	r3, #32
 80113f4:	18d3      	adds	r3, r2, r3
 80113f6:	19db      	adds	r3, r3, r7
 80113f8:	2120      	movs	r1, #32
 80113fa:	1852      	adds	r2, r2, r1
 80113fc:	19d1      	adds	r1, r2, r7
 80113fe:	2222      	movs	r2, #34	@ 0x22
 8011400:	18ba      	adds	r2, r7, r2
 8011402:	7809      	ldrb	r1, [r1, #0]
 8011404:	7812      	ldrb	r2, [r2, #0]
 8011406:	188a      	adds	r2, r1, r2
 8011408:	701a      	strb	r2, [r3, #0]
 801140a:	2317      	movs	r3, #23
 801140c:	2220      	movs	r2, #32
 801140e:	189b      	adds	r3, r3, r2
 8011410:	19da      	adds	r2, r3, r7
 8011412:	2323      	movs	r3, #35	@ 0x23
 8011414:	18fb      	adds	r3, r7, r3
 8011416:	7812      	ldrb	r2, [r2, #0]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	429a      	cmp	r2, r3
 801141c:	d200      	bcs.n	8011420 <CheckCRC+0x180>
 801141e:	e754      	b.n	80112ca <CheckCRC+0x2a>
    }
  }
  return true;
 8011420:	2301      	movs	r3, #1
}
 8011422:	0018      	movs	r0, r3
 8011424:	46bd      	mov	sp, r7
 8011426:	b00f      	add	sp, #60	@ 0x3c
 8011428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801142a:	46c0      	nop			@ (mov r8, r8)
 801142c:	0802dac0 	.word	0x0802dac0
 8011430:	0802d9fc 	.word	0x0802d9fc

08011434 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	000a      	movs	r2, r1
 801143e:	1cfb      	adds	r3, r7, #3
 8011440:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8011442:	230f      	movs	r3, #15
 8011444:	18fb      	adds	r3, r7, r3
 8011446:	22ff      	movs	r2, #255	@ 0xff
 8011448:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801144a:	230e      	movs	r3, #14
 801144c:	18fb      	adds	r3, r7, r3
 801144e:	2200      	movs	r2, #0
 8011450:	701a      	strb	r2, [r3, #0]
 8011452:	e038      	b.n	80114c6 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011454:	230e      	movs	r3, #14
 8011456:	18fb      	adds	r3, r7, r3
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	18d3      	adds	r3, r2, r3
 801145e:	7819      	ldrb	r1, [r3, #0]
 8011460:	220f      	movs	r2, #15
 8011462:	18bb      	adds	r3, r7, r2
 8011464:	18ba      	adds	r2, r7, r2
 8011466:	7812      	ldrb	r2, [r2, #0]
 8011468:	404a      	eors	r2, r1
 801146a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 801146c:	230d      	movs	r3, #13
 801146e:	18fb      	adds	r3, r7, r3
 8011470:	2200      	movs	r2, #0
 8011472:	701a      	strb	r2, [r3, #0]
 8011474:	e01c      	b.n	80114b0 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8011476:	210f      	movs	r1, #15
 8011478:	187b      	adds	r3, r7, r1
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	b25b      	sxtb	r3, r3
 801147e:	2b00      	cmp	r3, #0
 8011480:	da0a      	bge.n	8011498 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8011482:	187b      	adds	r3, r7, r1
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	b25b      	sxtb	r3, r3
 8011488:	18db      	adds	r3, r3, r3
 801148a:	b25b      	sxtb	r3, r3
 801148c:	2231      	movs	r2, #49	@ 0x31
 801148e:	4053      	eors	r3, r2
 8011490:	b25a      	sxtb	r2, r3
 8011492:	187b      	adds	r3, r7, r1
 8011494:	701a      	strb	r2, [r3, #0]
 8011496:	e005      	b.n	80114a4 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 8011498:	230f      	movs	r3, #15
 801149a:	18fa      	adds	r2, r7, r3
 801149c:	18fb      	adds	r3, r7, r3
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	18db      	adds	r3, r3, r3
 80114a2:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80114a4:	210d      	movs	r1, #13
 80114a6:	187b      	adds	r3, r7, r1
 80114a8:	781a      	ldrb	r2, [r3, #0]
 80114aa:	187b      	adds	r3, r7, r1
 80114ac:	3201      	adds	r2, #1
 80114ae:	701a      	strb	r2, [r3, #0]
 80114b0:	230d      	movs	r3, #13
 80114b2:	18fb      	adds	r3, r7, r3
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	2b07      	cmp	r3, #7
 80114b8:	d9dd      	bls.n	8011476 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80114ba:	210e      	movs	r1, #14
 80114bc:	187b      	adds	r3, r7, r1
 80114be:	781a      	ldrb	r2, [r3, #0]
 80114c0:	187b      	adds	r3, r7, r1
 80114c2:	3201      	adds	r2, #1
 80114c4:	701a      	strb	r2, [r3, #0]
 80114c6:	230e      	movs	r3, #14
 80114c8:	18fa      	adds	r2, r7, r3
 80114ca:	1cfb      	adds	r3, r7, #3
 80114cc:	7812      	ldrb	r2, [r2, #0]
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d3bf      	bcc.n	8011454 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80114d4:	230f      	movs	r3, #15
 80114d6:	18fb      	adds	r3, r7, r3
 80114d8:	781b      	ldrb	r3, [r3, #0]
}
 80114da:	0018      	movs	r0, r3
 80114dc:	46bd      	mov	sp, r7
 80114de:	b004      	add	sp, #16
 80114e0:	bd80      	pop	{r7, pc}
	...

080114e4 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4936      	ldr	r1, [pc, #216]	@ (80115cc <SGP_SetHT+0xe8>)
 80114f4:	1c18      	adds	r0, r3, #0
 80114f6:	f7ef f9e3 	bl	80008c0 <__aeabi_fadd>
 80114fa:	1c03      	adds	r3, r0, #0
 80114fc:	4934      	ldr	r1, [pc, #208]	@ (80115d0 <SGP_SetHT+0xec>)
 80114fe:	1c18      	adds	r0, r3, #0
 8011500:	f7ef fbd0 	bl	8000ca4 <__aeabi_fdiv>
 8011504:	1c03      	adds	r3, r0, #0
 8011506:	4933      	ldr	r1, [pc, #204]	@ (80115d4 <SGP_SetHT+0xf0>)
 8011508:	1c18      	adds	r0, r3, #0
 801150a:	f7ef fd99 	bl	8001040 <__aeabi_fmul>
 801150e:	1c03      	adds	r3, r0, #0
 8011510:	1c18      	adds	r0, r3, #0
 8011512:	f7ef f883 	bl	800061c <__aeabi_f2uiz>
 8011516:	0003      	movs	r3, r0
 8011518:	b29a      	uxth	r2, r3
 801151a:	4b2f      	ldr	r3, [pc, #188]	@ (80115d8 <SGP_SetHT+0xf4>)
 801151c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	492e      	ldr	r1, [pc, #184]	@ (80115dc <SGP_SetHT+0xf8>)
 8011524:	1c18      	adds	r0, r3, #0
 8011526:	f7ef fbbd 	bl	8000ca4 <__aeabi_fdiv>
 801152a:	1c03      	adds	r3, r0, #0
 801152c:	4929      	ldr	r1, [pc, #164]	@ (80115d4 <SGP_SetHT+0xf0>)
 801152e:	1c18      	adds	r0, r3, #0
 8011530:	f7ef fd86 	bl	8001040 <__aeabi_fmul>
 8011534:	1c03      	adds	r3, r0, #0
 8011536:	1c18      	adds	r0, r3, #0
 8011538:	f7ef f870 	bl	800061c <__aeabi_f2uiz>
 801153c:	0003      	movs	r3, r0
 801153e:	b29a      	uxth	r2, r3
 8011540:	4b27      	ldr	r3, [pc, #156]	@ (80115e0 <SGP_SetHT+0xfc>)
 8011542:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8011544:	4b26      	ldr	r3, [pc, #152]	@ (80115e0 <SGP_SetHT+0xfc>)
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	0a1b      	lsrs	r3, r3, #8
 801154a:	b29b      	uxth	r3, r3
 801154c:	b2da      	uxtb	r2, r3
 801154e:	4b25      	ldr	r3, [pc, #148]	@ (80115e4 <SGP_SetHT+0x100>)
 8011550:	709a      	strb	r2, [r3, #2]
 8011552:	4b24      	ldr	r3, [pc, #144]	@ (80115e4 <SGP_SetHT+0x100>)
 8011554:	789a      	ldrb	r2, [r3, #2]
 8011556:	210c      	movs	r1, #12
 8011558:	187b      	adds	r3, r7, r1
 801155a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 801155c:	4b20      	ldr	r3, [pc, #128]	@ (80115e0 <SGP_SetHT+0xfc>)
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	b2da      	uxtb	r2, r3
 8011562:	4b20      	ldr	r3, [pc, #128]	@ (80115e4 <SGP_SetHT+0x100>)
 8011564:	70da      	strb	r2, [r3, #3]
 8011566:	4b1f      	ldr	r3, [pc, #124]	@ (80115e4 <SGP_SetHT+0x100>)
 8011568:	78da      	ldrb	r2, [r3, #3]
 801156a:	187b      	adds	r3, r7, r1
 801156c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 801156e:	187b      	adds	r3, r7, r1
 8011570:	2102      	movs	r1, #2
 8011572:	0018      	movs	r0, r3
 8011574:	f7ff ff5e 	bl	8011434 <CalculateCRC>
 8011578:	0003      	movs	r3, r0
 801157a:	001a      	movs	r2, r3
 801157c:	4b19      	ldr	r3, [pc, #100]	@ (80115e4 <SGP_SetHT+0x100>)
 801157e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8011580:	4b15      	ldr	r3, [pc, #84]	@ (80115d8 <SGP_SetHT+0xf4>)
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	0a1b      	lsrs	r3, r3, #8
 8011586:	b29b      	uxth	r3, r3
 8011588:	b2da      	uxtb	r2, r3
 801158a:	4b16      	ldr	r3, [pc, #88]	@ (80115e4 <SGP_SetHT+0x100>)
 801158c:	715a      	strb	r2, [r3, #5]
 801158e:	4b15      	ldr	r3, [pc, #84]	@ (80115e4 <SGP_SetHT+0x100>)
 8011590:	795a      	ldrb	r2, [r3, #5]
 8011592:	2108      	movs	r1, #8
 8011594:	187b      	adds	r3, r7, r1
 8011596:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8011598:	4b0f      	ldr	r3, [pc, #60]	@ (80115d8 <SGP_SetHT+0xf4>)
 801159a:	881b      	ldrh	r3, [r3, #0]
 801159c:	b2da      	uxtb	r2, r3
 801159e:	4b11      	ldr	r3, [pc, #68]	@ (80115e4 <SGP_SetHT+0x100>)
 80115a0:	719a      	strb	r2, [r3, #6]
 80115a2:	4b10      	ldr	r3, [pc, #64]	@ (80115e4 <SGP_SetHT+0x100>)
 80115a4:	799a      	ldrb	r2, [r3, #6]
 80115a6:	187b      	adds	r3, r7, r1
 80115a8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80115aa:	187b      	adds	r3, r7, r1
 80115ac:	2102      	movs	r1, #2
 80115ae:	0018      	movs	r0, r3
 80115b0:	f7ff ff40 	bl	8011434 <CalculateCRC>
 80115b4:	0003      	movs	r3, r0
 80115b6:	001a      	movs	r2, r3
 80115b8:	4b0a      	ldr	r3, [pc, #40]	@ (80115e4 <SGP_SetHT+0x100>)
 80115ba:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80115bc:	4b0a      	ldr	r3, [pc, #40]	@ (80115e8 <SGP_SetHT+0x104>)
 80115be:	2201      	movs	r2, #1
 80115c0:	701a      	strb	r2, [r3, #0]
}
 80115c2:	46c0      	nop			@ (mov r8, r8)
 80115c4:	46bd      	mov	sp, r7
 80115c6:	b004      	add	sp, #16
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	46c0      	nop			@ (mov r8, r8)
 80115cc:	42340000 	.word	0x42340000
 80115d0:	432f0000 	.word	0x432f0000
 80115d4:	477fff00 	.word	0x477fff00
 80115d8:	200012a6 	.word	0x200012a6
 80115dc:	42c80000 	.word	0x42c80000
 80115e0:	200012a4 	.word	0x200012a4
 80115e4:	200000bc 	.word	0x200000bc
 80115e8:	200012a8 	.word	0x200012a8

080115ec <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 80115ec:	b580      	push	{r7, lr}
 80115ee:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 80115f0:	4a09      	ldr	r2, [pc, #36]	@ (8011618 <SGP_SoftReset+0x2c>)
 80115f2:	4b0a      	ldr	r3, [pc, #40]	@ (801161c <SGP_SoftReset+0x30>)
 80115f4:	0019      	movs	r1, r3
 80115f6:	2003      	movs	r0, #3
 80115f8:	f002 fc4c 	bl	8013e94 <CreateLine>
  SGP_TurnHeaterOff();
 80115fc:	f7ff fccc 	bl	8010f98 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8011600:	200a      	movs	r0, #10
 8011602:	f003 f9d1 	bl	80149a8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011606:	4b06      	ldr	r3, [pc, #24]	@ (8011620 <SGP_SoftReset+0x34>)
 8011608:	2202      	movs	r2, #2
 801160a:	0019      	movs	r1, r3
 801160c:	2059      	movs	r0, #89	@ 0x59
 801160e:	f7ff fbf5 	bl	8010dfc <WriteRegister>
}
 8011612:	46c0      	nop			@ (mov r8, r8)
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	0802db68 	.word	0x0802db68
 801161c:	0802da44 	.word	0x0802da44
 8011620:	200000c4 	.word	0x200000c4

08011624 <ResetVOCresult>:

void ResetVOCresult(void) {
 8011624:	b580      	push	{r7, lr}
 8011626:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8011628:	4b02      	ldr	r3, [pc, #8]	@ (8011634 <ResetVOCresult+0x10>)
 801162a:	2200      	movs	r2, #0
 801162c:	601a      	str	r2, [r3, #0]
}
 801162e:	46c0      	nop			@ (mov r8, r8)
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	200012ac 	.word	0x200012ac

08011638 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8011638:	b580      	push	{r7, lr}
 801163a:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 801163c:	4b4b      	ldr	r3, [pc, #300]	@ (801176c <SGP_Upkeep+0x134>)
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	2b07      	cmp	r3, #7
 8011642:	d900      	bls.n	8011646 <SGP_Upkeep+0xe>
 8011644:	e07a      	b.n	801173c <SGP_Upkeep+0x104>
 8011646:	009a      	lsls	r2, r3, #2
 8011648:	4b49      	ldr	r3, [pc, #292]	@ (8011770 <SGP_Upkeep+0x138>)
 801164a:	18d3      	adds	r3, r2, r3
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8011650:	4a48      	ldr	r2, [pc, #288]	@ (8011774 <SGP_Upkeep+0x13c>)
 8011652:	4b49      	ldr	r3, [pc, #292]	@ (8011778 <SGP_Upkeep+0x140>)
 8011654:	0019      	movs	r1, r3
 8011656:	2003      	movs	r0, #3
 8011658:	f002 fc1c 	bl	8013e94 <CreateLine>
    break;
 801165c:	e081      	b.n	8011762 <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 801165e:	f7ff ffe1 	bl	8011624 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8011662:	4b42      	ldr	r3, [pc, #264]	@ (801176c <SGP_Upkeep+0x134>)
 8011664:	2201      	movs	r2, #1
 8011666:	701a      	strb	r2, [r3, #0]
    break;
 8011668:	e07b      	b.n	8011762 <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 801166a:	f7fc fc2d 	bl	800dec8 <getSensorLock>
 801166e:	1e03      	subs	r3, r0, #0
 8011670:	d000      	beq.n	8011674 <SGP_Upkeep+0x3c>
 8011672:	e06f      	b.n	8011754 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8011674:	2005      	movs	r0, #5
 8011676:	f7fc fc13 	bl	800dea0 <setSensorLock>
    SetMeasurementIndicator();
 801167a:	f001 f989 	bl	8012990 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 801167e:	f7ff fc29 	bl	8010ed4 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 8011682:	200a      	movs	r0, #10
 8011684:	f003 f990 	bl	80149a8 <HAL_Delay>
    setSensorLock(FREE);
 8011688:	2000      	movs	r0, #0
 801168a:	f7fc fc09 	bl	800dea0 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 801168e:	4b37      	ldr	r3, [pc, #220]	@ (801176c <SGP_Upkeep+0x134>)
 8011690:	2202      	movs	r2, #2
 8011692:	701a      	strb	r2, [r3, #0]
    break;
 8011694:	e065      	b.n	8011762 <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 8011696:	f7fc fc17 	bl	800dec8 <getSensorLock>
 801169a:	1e03      	subs	r3, r0, #0
 801169c:	d15c      	bne.n	8011758 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 801169e:	2005      	movs	r0, #5
 80116a0:	f7fc fbfe 	bl	800dea0 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80116a4:	4b35      	ldr	r3, [pc, #212]	@ (801177c <SGP_Upkeep+0x144>)
 80116a6:	0018      	movs	r0, r3
 80116a8:	f7ff fc84 	bl	8010fb4 <SGP_GetMeasurementValues>
 80116ac:	1e03      	subs	r3, r0, #0
 80116ae:	d002      	beq.n	80116b6 <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80116b0:	4b2e      	ldr	r3, [pc, #184]	@ (801176c <SGP_Upkeep+0x134>)
 80116b2:	2203      	movs	r2, #3
 80116b4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80116b6:	200a      	movs	r0, #10
 80116b8:	f003 f976 	bl	80149a8 <HAL_Delay>
    setSensorLock(FREE);
 80116bc:	2000      	movs	r0, #0
 80116be:	f7fc fbef 	bl	800dea0 <setSensorLock>
    break;
 80116c2:	e04e      	b.n	8011762 <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80116c4:	4b2d      	ldr	r3, [pc, #180]	@ (801177c <SGP_Upkeep+0x144>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	0018      	movs	r0, r3
 80116cc:	f7f3 f9f2 	bl	8004ab4 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80116d0:	4b26      	ldr	r3, [pc, #152]	@ (801176c <SGP_Upkeep+0x134>)
 80116d2:	2206      	movs	r2, #6
 80116d4:	701a      	strb	r2, [r3, #0]
    break;
 80116d6:	e044      	b.n	8011762 <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 80116d8:	4b24      	ldr	r3, [pc, #144]	@ (801176c <SGP_Upkeep+0x134>)
 80116da:	2207      	movs	r2, #7
 80116dc:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 80116de:	4b28      	ldr	r3, [pc, #160]	@ (8011780 <SGP_Upkeep+0x148>)
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	2b03      	cmp	r3, #3
 80116e4:	d912      	bls.n	801170c <SGP_Upkeep+0xd4>
 80116e6:	4b27      	ldr	r3, [pc, #156]	@ (8011784 <SGP_Upkeep+0x14c>)
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	2201      	movs	r2, #1
 80116ec:	4053      	eors	r3, r2
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00b      	beq.n	801170c <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 80116f4:	4b24      	ldr	r3, [pc, #144]	@ (8011788 <SGP_Upkeep+0x150>)
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d004      	beq.n	8011706 <SGP_Upkeep+0xce>
        SGP_SoftReset();
 80116fc:	f7ff ff76 	bl	80115ec <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8011700:	2000      	movs	r0, #0
 8011702:	f7fb ff77 	bl	800d5f4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8011706:	4b20      	ldr	r3, [pc, #128]	@ (8011788 <SGP_Upkeep+0x150>)
 8011708:	2201      	movs	r2, #1
 801170a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 801170c:	f003 f942 	bl	8014994 <HAL_GetTick>
 8011710:	0003      	movs	r3, r0
 8011712:	22c8      	movs	r2, #200	@ 0xc8
 8011714:	0092      	lsls	r2, r2, #2
 8011716:	189a      	adds	r2, r3, r2
 8011718:	4b1c      	ldr	r3, [pc, #112]	@ (801178c <SGP_Upkeep+0x154>)
 801171a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 801171c:	f001 f94a 	bl	80129b4 <ResetMeasurementIndicator>
  break;
 8011720:	e01f      	b.n	8011762 <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8011722:	4b1a      	ldr	r3, [pc, #104]	@ (801178c <SGP_Upkeep+0x154>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	0018      	movs	r0, r3
 8011728:	f002 fb5e 	bl	8013de8 <TimestampIsReached>
 801172c:	1e03      	subs	r3, r0, #0
 801172e:	d015      	beq.n	801175c <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011730:	f7ff fbb8 	bl	8010ea4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011734:	4b0d      	ldr	r3, [pc, #52]	@ (801176c <SGP_Upkeep+0x134>)
 8011736:	2200      	movs	r2, #0
 8011738:	701a      	strb	r2, [r3, #0]
    }
    break;
 801173a:	e00f      	b.n	801175c <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 801173c:	4b0b      	ldr	r3, [pc, #44]	@ (801176c <SGP_Upkeep+0x134>)
 801173e:	2200      	movs	r2, #0
 8011740:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8011742:	f7fc fbc1 	bl	800dec8 <getSensorLock>
 8011746:	0003      	movs	r3, r0
 8011748:	2b05      	cmp	r3, #5
 801174a:	d109      	bne.n	8011760 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 801174c:	2000      	movs	r0, #0
 801174e:	f7fc fba7 	bl	800dea0 <setSensorLock>
    }
    break;
 8011752:	e005      	b.n	8011760 <SGP_Upkeep+0x128>
      break;
 8011754:	46c0      	nop			@ (mov r8, r8)
 8011756:	e004      	b.n	8011762 <SGP_Upkeep+0x12a>
      break;
 8011758:	46c0      	nop			@ (mov r8, r8)
 801175a:	e002      	b.n	8011762 <SGP_Upkeep+0x12a>
    break;
 801175c:	46c0      	nop			@ (mov r8, r8)
 801175e:	e000      	b.n	8011762 <SGP_Upkeep+0x12a>
    break;
 8011760:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8011762:	4b02      	ldr	r3, [pc, #8]	@ (801176c <SGP_Upkeep+0x134>)
 8011764:	781b      	ldrb	r3, [r3, #0]
}
 8011766:	0018      	movs	r0, r3
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}
 801176c:	200012b0 	.word	0x200012b0
 8011770:	0802e734 	.word	0x0802e734
 8011774:	0802db80 	.word	0x0802db80
 8011778:	0802da44 	.word	0x0802da44
 801177c:	200012ac 	.word	0x200012ac
 8011780:	200011f6 	.word	0x200011f6
 8011784:	2000214d 	.word	0x2000214d
 8011788:	200011e0 	.word	0x200011e0
 801178c:	200011f8 	.word	0x200011f8

08011790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	0002      	movs	r2, r0
 8011798:	1dfb      	adds	r3, r7, #7
 801179a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801179c:	1dfb      	adds	r3, r7, #7
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80117a2:	d809      	bhi.n	80117b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117a4:	1dfb      	adds	r3, r7, #7
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	001a      	movs	r2, r3
 80117aa:	231f      	movs	r3, #31
 80117ac:	401a      	ands	r2, r3
 80117ae:	4b04      	ldr	r3, [pc, #16]	@ (80117c0 <__NVIC_EnableIRQ+0x30>)
 80117b0:	2101      	movs	r1, #1
 80117b2:	4091      	lsls	r1, r2
 80117b4:	000a      	movs	r2, r1
 80117b6:	601a      	str	r2, [r3, #0]
  }
}
 80117b8:	46c0      	nop			@ (mov r8, r8)
 80117ba:	46bd      	mov	sp, r7
 80117bc:	b002      	add	sp, #8
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	e000e100 	.word	0xe000e100

080117c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	0002      	movs	r2, r0
 80117cc:	1dfb      	adds	r3, r7, #7
 80117ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80117d0:	1dfb      	adds	r3, r7, #7
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80117d6:	d810      	bhi.n	80117fa <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117d8:	1dfb      	adds	r3, r7, #7
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	001a      	movs	r2, r3
 80117de:	231f      	movs	r3, #31
 80117e0:	4013      	ands	r3, r2
 80117e2:	4908      	ldr	r1, [pc, #32]	@ (8011804 <__NVIC_DisableIRQ+0x40>)
 80117e4:	2201      	movs	r2, #1
 80117e6:	409a      	lsls	r2, r3
 80117e8:	0013      	movs	r3, r2
 80117ea:	2280      	movs	r2, #128	@ 0x80
 80117ec:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80117ee:	f3bf 8f4f 	dsb	sy
}
 80117f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80117f4:	f3bf 8f6f 	isb	sy
}
 80117f8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80117fa:	46c0      	nop			@ (mov r8, r8)
 80117fc:	46bd      	mov	sp, r7
 80117fe:	b002      	add	sp, #8
 8011800:	bd80      	pop	{r7, pc}
 8011802:	46c0      	nop			@ (mov r8, r8)
 8011804:	e000e100 	.word	0xe000e100

08011808 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8011808:	b5b0      	push	{r4, r5, r7, lr}
 801180a:	b088      	sub	sp, #32
 801180c:	af02      	add	r7, sp, #8
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	0008      	movs	r0, r1
 8011812:	0011      	movs	r1, r2
 8011814:	1cfb      	adds	r3, r7, #3
 8011816:	1c02      	adds	r2, r0, #0
 8011818:	701a      	strb	r2, [r3, #0]
 801181a:	1cbb      	adds	r3, r7, #2
 801181c:	1c0a      	adds	r2, r1, #0
 801181e:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8011820:	4b5b      	ldr	r3, [pc, #364]	@ (8011990 <getSoundData+0x188>)
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	b2db      	uxtb	r3, r3
 8011826:	2201      	movs	r2, #1
 8011828:	4053      	eors	r3, r2
 801182a:	b2db      	uxtb	r3, r3
 801182c:	2b00      	cmp	r3, #0
 801182e:	d107      	bne.n	8011840 <getSoundData+0x38>
 8011830:	4b58      	ldr	r3, [pc, #352]	@ (8011994 <getSoundData+0x18c>)
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	b2db      	uxtb	r3, r3
 8011836:	2201      	movs	r2, #1
 8011838:	4053      	eors	r3, r2
 801183a:	b2db      	uxtb	r3, r3
 801183c:	2b00      	cmp	r3, #0
 801183e:	d001      	beq.n	8011844 <getSoundData+0x3c>
    {
        return false;
 8011840:	2300      	movs	r3, #0
 8011842:	e0a0      	b.n	8011986 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8011844:	4b54      	ldr	r3, [pc, #336]	@ (8011998 <getSoundData+0x190>)
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b00      	cmp	r3, #0
 801184c:	d005      	beq.n	801185a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801184e:	4b53      	ldr	r3, [pc, #332]	@ (801199c <getSoundData+0x194>)
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	b25b      	sxtb	r3, r3
 8011854:	0018      	movs	r0, r3
 8011856:	f7ff ffb5 	bl	80117c4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801185a:	f3bf 8f4f 	dsb	sy
}
 801185e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011860:	f3bf 8f6f 	isb	sy
}
 8011864:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8011866:	1cfb      	adds	r3, r7, #3
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d04c      	beq.n	8011908 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 801186e:	4b4c      	ldr	r3, [pc, #304]	@ (80119a0 <getSoundData+0x198>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d11b      	bne.n	80118ae <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2200      	movs	r2, #0
 801187a:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2200      	movs	r2, #0
 8011880:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011882:	2300      	movs	r3, #0
 8011884:	617b      	str	r3, [r7, #20]
 8011886:	e00e      	b.n	80118a6 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	18d3      	adds	r3, r2, r3
 801188e:	3302      	adds	r3, #2
 8011890:	2200      	movs	r2, #0
 8011892:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	18d3      	adds	r3, r2, r3
 801189a:	3308      	adds	r3, #8
 801189c:	2200      	movs	r2, #0
 801189e:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	3301      	adds	r3, #1
 80118a4:	617b      	str	r3, [r7, #20]
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	2b05      	cmp	r3, #5
 80118aa:	d9ed      	bls.n	8011888 <getSoundData+0x80>
 80118ac:	e02c      	b.n	8011908 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	1c59      	adds	r1, r3, #1
 80118b4:	4b3b      	ldr	r3, [pc, #236]	@ (80119a4 <getSoundData+0x19c>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	4b3b      	ldr	r3, [pc, #236]	@ (80119a8 <getSoundData+0x1a0>)
 80118ba:	681c      	ldr	r4, [r3, #0]
 80118bc:	4b38      	ldr	r3, [pc, #224]	@ (80119a0 <getSoundData+0x198>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	9300      	str	r3, [sp, #0]
 80118c2:	0023      	movs	r3, r4
 80118c4:	f000 fde4 	bl	8012490 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80118c8:	2300      	movs	r3, #0
 80118ca:	613b      	str	r3, [r7, #16]
 80118cc:	e019      	b.n	8011902 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	18d3      	adds	r3, r2, r3
 80118d4:	1c98      	adds	r0, r3, #2
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	3308      	adds	r3, #8
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 80118de:	4b33      	ldr	r3, [pc, #204]	@ (80119ac <getSoundData+0x1a4>)
 80118e0:	693a      	ldr	r2, [r7, #16]
 80118e2:	0092      	lsls	r2, r2, #2
 80118e4:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 80118e6:	4b32      	ldr	r3, [pc, #200]	@ (80119b0 <getSoundData+0x1a8>)
 80118e8:	693a      	ldr	r2, [r7, #16]
 80118ea:	0092      	lsls	r2, r2, #2
 80118ec:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80118ee:	4b2c      	ldr	r3, [pc, #176]	@ (80119a0 <getSoundData+0x198>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	0013      	movs	r3, r2
 80118f6:	0022      	movs	r2, r4
 80118f8:	f000 fdca 	bl	8012490 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	3301      	adds	r3, #1
 8011900:	613b      	str	r3, [r7, #16]
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	2b05      	cmp	r3, #5
 8011906:	d9e2      	bls.n	80118ce <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8011908:	1cbb      	adds	r3, r7, #2
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d028      	beq.n	8011962 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8011910:	240e      	movs	r4, #14
 8011912:	193b      	adds	r3, r7, r4
 8011914:	2200      	movs	r2, #0
 8011916:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8011918:	250d      	movs	r5, #13
 801191a:	197b      	adds	r3, r7, r5
 801191c:	2200      	movs	r2, #0
 801191e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011920:	4b24      	ldr	r3, [pc, #144]	@ (80119b4 <getSoundData+0x1ac>)
 8011922:	6818      	ldr	r0, [r3, #0]
 8011924:	4924      	ldr	r1, [pc, #144]	@ (80119b8 <getSoundData+0x1b0>)
 8011926:	197b      	adds	r3, r7, r5
 8011928:	193a      	adds	r2, r7, r4
 801192a:	f000 fe55 	bl	80125d8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 801192e:	193b      	adds	r3, r7, r4
 8011930:	881a      	ldrh	r2, [r3, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	21ff      	movs	r1, #255	@ 0xff
 8011936:	4011      	ands	r1, r2
 8011938:	000c      	movs	r4, r1
 801193a:	7b99      	ldrb	r1, [r3, #14]
 801193c:	2000      	movs	r0, #0
 801193e:	4001      	ands	r1, r0
 8011940:	1c08      	adds	r0, r1, #0
 8011942:	1c21      	adds	r1, r4, #0
 8011944:	4301      	orrs	r1, r0
 8011946:	7399      	strb	r1, [r3, #14]
 8011948:	0a12      	lsrs	r2, r2, #8
 801194a:	b290      	uxth	r0, r2
 801194c:	7bda      	ldrb	r2, [r3, #15]
 801194e:	2100      	movs	r1, #0
 8011950:	400a      	ands	r2, r1
 8011952:	1c11      	adds	r1, r2, #0
 8011954:	1c02      	adds	r2, r0, #0
 8011956:	430a      	orrs	r2, r1
 8011958:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 801195a:	197b      	adds	r3, r7, r5
 801195c:	781a      	ldrb	r2, [r3, #0]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8011962:	f000 f869 	bl	8011a38 <micSettlingComplete>
 8011966:	0003      	movs	r3, r0
 8011968:	001a      	movs	r2, r3
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 801196e:	4b0a      	ldr	r3, [pc, #40]	@ (8011998 <getSoundData+0x190>)
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	b2db      	uxtb	r3, r3
 8011974:	2b00      	cmp	r3, #0
 8011976:	d005      	beq.n	8011984 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011978:	4b08      	ldr	r3, [pc, #32]	@ (801199c <getSoundData+0x194>)
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	b25b      	sxtb	r3, r3
 801197e:	0018      	movs	r0, r3
 8011980:	f7ff ff06 	bl	8011790 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8011984:	2301      	movs	r3, #1
}
 8011986:	0018      	movs	r0, r3
 8011988:	46bd      	mov	sp, r7
 801198a:	b006      	add	sp, #24
 801198c:	bdb0      	pop	{r4, r5, r7, pc}
 801198e:	46c0      	nop			@ (mov r8, r8)
 8011990:	200012b2 	.word	0x200012b2
 8011994:	200012b5 	.word	0x200012b5
 8011998:	200012b4 	.word	0x200012b4
 801199c:	20001d04 	.word	0x20001d04
 80119a0:	20001d40 	.word	0x20001d40
 80119a4:	20001d08 	.word	0x20001d08
 80119a8:	20001d0c 	.word	0x20001d0c
 80119ac:	20001d10 	.word	0x20001d10
 80119b0:	20001d28 	.word	0x20001d28
 80119b4:	200012bc 	.word	0x200012bc
 80119b8:	3b5c7333 	.word	0x3b5c7333

080119bc <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	607a      	str	r2, [r7, #4]
 80119c8:	001a      	movs	r2, r3
 80119ca:	1cfb      	adds	r3, r7, #3
 80119cc:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 80119ce:	4b07      	ldr	r3, [pc, #28]	@ (80119ec <soundInit+0x30>)
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80119d4:	4b06      	ldr	r3, [pc, #24]	@ (80119f0 <soundInit+0x34>)
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80119da:	4b06      	ldr	r3, [pc, #24]	@ (80119f4 <soundInit+0x38>)
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	601a      	str	r2, [r3, #0]
//    DMA_Channel_IRQn = DMAChIRQn;
    return true;
 80119e0:	2301      	movs	r3, #1
}
 80119e2:	0018      	movs	r0, r3
 80119e4:	46bd      	mov	sp, r7
 80119e6:	b004      	add	sp, #16
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	46c0      	nop			@ (mov r8, r8)
 80119ec:	20001cfc 	.word	0x20001cfc
 80119f0:	20001cf8 	.word	0x20001cf8
 80119f4:	20001d00 	.word	0x20001d00

080119f8 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 80119fc:	4b02      	ldr	r3, [pc, #8]	@ (8011a08 <clearMaximumAmplitude+0x10>)
 80119fe:	2200      	movs	r2, #0
 8011a00:	601a      	str	r2, [r3, #0]
}
 8011a02:	46c0      	nop			@ (mov r8, r8)
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	200012bc 	.word	0x200012bc

08011a0c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011a10:	4b08      	ldr	r3, [pc, #32]	@ (8011a34 <startMicSettlingPeriod+0x28>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2200      	movs	r2, #0
 8011a18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011a1a:	4b06      	ldr	r3, [pc, #24]	@ (8011a34 <startMicSettlingPeriod+0x28>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	0018      	movs	r0, r3
 8011a20:	f00b f8f6 	bl	801cc10 <HAL_TIM_Base_Start>
 8011a24:	1e03      	subs	r3, r0, #0
 8011a26:	d001      	beq.n	8011a2c <startMicSettlingPeriod+0x20>
    {
        return false;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	e000      	b.n	8011a2e <startMicSettlingPeriod+0x22>
    }
    return true;
 8011a2c:	2301      	movs	r3, #1
}
 8011a2e:	0018      	movs	r0, r3
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}
 8011a34:	20001cf8 	.word	0x20001cf8

08011a38 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8011a78 <micSettlingComplete+0x40>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	691b      	ldr	r3, [r3, #16]
 8011a46:	2201      	movs	r2, #1
 8011a48:	401a      	ands	r2, r3
 8011a4a:	1dfb      	adds	r3, r7, #7
 8011a4c:	3a01      	subs	r2, #1
 8011a4e:	4251      	negs	r1, r2
 8011a50:	414a      	adcs	r2, r1
 8011a52:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011a54:	1dfb      	adds	r3, r7, #7
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d007      	beq.n	8011a6c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011a5c:	4b06      	ldr	r3, [pc, #24]	@ (8011a78 <micSettlingComplete+0x40>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	0018      	movs	r0, r3
 8011a62:	f00b f91f 	bl	801cca4 <HAL_TIM_Base_Stop>
      DataReady = true;
 8011a66:	4b05      	ldr	r3, [pc, #20]	@ (8011a7c <micSettlingComplete+0x44>)
 8011a68:	2201      	movs	r2, #1
 8011a6a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8011a6c:	1dfb      	adds	r3, r7, #7
 8011a6e:	781b      	ldrb	r3, [r3, #0]
}
 8011a70:	0018      	movs	r0, r3
 8011a72:	46bd      	mov	sp, r7
 8011a74:	b002      	add	sp, #8
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	20001cf8 	.word	0x20001cf8
 8011a7c:	200012b1 	.word	0x200012b1

08011a80 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	0002      	movs	r2, r0
 8011a88:	1dfb      	adds	r3, r7, #7
 8011a8a:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8011a8c:	4b29      	ldr	r3, [pc, #164]	@ (8011b34 <enableMicrophone+0xb4>)
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	1dfa      	adds	r2, r7, #7
 8011a94:	7812      	ldrb	r2, [r2, #0]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d101      	bne.n	8011a9e <enableMicrophone+0x1e>
    {
        return true;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e045      	b.n	8011b2a <enableMicrophone+0xaa>
    }
    if (bEnable)
 8011a9e:	1dfb      	adds	r3, r7, #7
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d025      	beq.n	8011af2 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8011aa6:	f7ff ffb1 	bl	8011a0c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8011aaa:	4b23      	ldr	r3, [pc, #140]	@ (8011b38 <enableMicrophone+0xb8>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	2280      	movs	r2, #128	@ 0x80
 8011ab0:	0092      	lsls	r2, r2, #2
 8011ab2:	4922      	ldr	r1, [pc, #136]	@ (8011b3c <enableMicrophone+0xbc>)
 8011ab4:	0018      	movs	r0, r3
 8011ab6:	f007 fb0d 	bl	80190d4 <HAL_I2S_Receive_DMA>
 8011aba:	1e03      	subs	r3, r0, #0
 8011abc:	d001      	beq.n	8011ac2 <enableMicrophone+0x42>
        {
            return false;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	e033      	b.n	8011b2a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8011ac2:	f7ff ff99 	bl	80119f8 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8011ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8011b40 <enableMicrophone+0xc0>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011acc:	4b1d      	ldr	r3, [pc, #116]	@ (8011b44 <enableMicrophone+0xc4>)
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	b25b      	sxtb	r3, r3
 8011ad2:	0018      	movs	r0, r3
 8011ad4:	f7ff fe5c 	bl	8011790 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8011b48 <enableMicrophone+0xc8>)
 8011ada:	2201      	movs	r2, #1
 8011adc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8011ade:	4b15      	ldr	r3, [pc, #84]	@ (8011b34 <enableMicrophone+0xb4>)
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011ae4:	4b19      	ldr	r3, [pc, #100]	@ (8011b4c <enableMicrophone+0xcc>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011aea:	4b19      	ldr	r3, [pc, #100]	@ (8011b50 <enableMicrophone+0xd0>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	701a      	strb	r2, [r3, #0]
 8011af0:	e01a      	b.n	8011b28 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011af2:	4b14      	ldr	r3, [pc, #80]	@ (8011b44 <enableMicrophone+0xc4>)
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	b25b      	sxtb	r3, r3
 8011af8:	0018      	movs	r0, r3
 8011afa:	f7ff fe63 	bl	80117c4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011afe:	4b12      	ldr	r3, [pc, #72]	@ (8011b48 <enableMicrophone+0xc8>)
 8011b00:	2200      	movs	r2, #0
 8011b02:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011b04:	4b11      	ldr	r3, [pc, #68]	@ (8011b4c <enableMicrophone+0xcc>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011b0a:	4b11      	ldr	r3, [pc, #68]	@ (8011b50 <enableMicrophone+0xd0>)
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011b10:	4b09      	ldr	r3, [pc, #36]	@ (8011b38 <enableMicrophone+0xb8>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	0018      	movs	r0, r3
 8011b16:	f007 fb9f 	bl	8019258 <HAL_I2S_DMAStop>
 8011b1a:	1e03      	subs	r3, r0, #0
 8011b1c:	d001      	beq.n	8011b22 <enableMicrophone+0xa2>
        {
            return false;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e003      	b.n	8011b2a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011b22:	4b04      	ldr	r3, [pc, #16]	@ (8011b34 <enableMicrophone+0xb4>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011b28:	2301      	movs	r3, #1
}
 8011b2a:	0018      	movs	r0, r3
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	b002      	add	sp, #8
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	46c0      	nop			@ (mov r8, r8)
 8011b34:	200012b2 	.word	0x200012b2
 8011b38:	20001cfc 	.word	0x20001cfc
 8011b3c:	200012f8 	.word	0x200012f8
 8011b40:	200012b8 	.word	0x200012b8
 8011b44:	20001d04 	.word	0x20001d04
 8011b48:	200012b4 	.word	0x200012b4
 8011b4c:	200012b3 	.word	0x200012b3
 8011b50:	200012b5 	.word	0x200012b5

08011b54 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011b58:	4b0c      	ldr	r3, [pc, #48]	@ (8011b8c <startSPLcalculation+0x38>)
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2201      	movs	r2, #1
 8011b60:	4053      	eors	r3, r2
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d001      	beq.n	8011b6c <startSPLcalculation+0x18>
    {
        return false;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	e00c      	b.n	8011b86 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011b6c:	4b08      	ldr	r3, [pc, #32]	@ (8011b90 <startSPLcalculation+0x3c>)
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d001      	beq.n	8011b7a <startSPLcalculation+0x26>
    {
        return true;
 8011b76:	2301      	movs	r3, #1
 8011b78:	e005      	b.n	8011b86 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011b7a:	f000 fb65 	bl	8012248 <resetSPLstate>
    SPLcalcEnabled = true;
 8011b7e:	4b04      	ldr	r3, [pc, #16]	@ (8011b90 <startSPLcalculation+0x3c>)
 8011b80:	2201      	movs	r2, #1
 8011b82:	701a      	strb	r2, [r3, #0]
    return true;
 8011b84:	2301      	movs	r3, #1
}
 8011b86:	0018      	movs	r0, r3
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	200012b2 	.word	0x200012b2
 8011b90:	200012b3 	.word	0x200012b3

08011b94 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011b9c:	4b05      	ldr	r3, [pc, #20]	@ (8011bb4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d102      	bne.n	8011bac <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	f000 f81a 	bl	8011be0 <processHalfDMAbuffer>
  }
}
 8011bac:	46c0      	nop			@ (mov r8, r8)
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	b002      	add	sp, #8
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	20001cfc 	.word	0x20001cfc

08011bb8 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011bc0:	4b06      	ldr	r3, [pc, #24]	@ (8011bdc <HAL_I2S_RxCpltCallback+0x24>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d104      	bne.n	8011bd4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011bca:	2380      	movs	r3, #128	@ 0x80
 8011bcc:	009b      	lsls	r3, r3, #2
 8011bce:	0018      	movs	r0, r3
 8011bd0:	f000 f806 	bl	8011be0 <processHalfDMAbuffer>
  }
}
 8011bd4:	46c0      	nop			@ (mov r8, r8)
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	b002      	add	sp, #8
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	20001cfc 	.word	0x20001cfc

08011be0 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	005a      	lsls	r2, r3, #1
 8011bec:	4b15      	ldr	r3, [pc, #84]	@ (8011c44 <processHalfDMAbuffer+0x64>)
 8011bee:	18d3      	adds	r3, r2, r3
 8011bf0:	4a15      	ldr	r2, [pc, #84]	@ (8011c48 <processHalfDMAbuffer+0x68>)
 8011bf2:	2180      	movs	r1, #128	@ 0x80
 8011bf4:	0089      	lsls	r1, r1, #2
 8011bf6:	0018      	movs	r0, r3
 8011bf8:	f000 fd37 	bl	801266a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011bfc:	4b13      	ldr	r3, [pc, #76]	@ (8011c4c <processHalfDMAbuffer+0x6c>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	425a      	negs	r2, r3
 8011c02:	4153      	adcs	r3, r2
 8011c04:	b2da      	uxtb	r2, r3
 8011c06:	4b11      	ldr	r3, [pc, #68]	@ (8011c4c <processHalfDMAbuffer+0x6c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2109      	movs	r1, #9
 8011c0c:	4299      	cmp	r1, r3
 8011c0e:	419b      	sbcs	r3, r3
 8011c10:	425b      	negs	r3, r3
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	480c      	ldr	r0, [pc, #48]	@ (8011c48 <processHalfDMAbuffer+0x68>)
 8011c16:	2180      	movs	r1, #128	@ 0x80
 8011c18:	f000 fb48 	bl	80122ac <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8011c4c <processHalfDMAbuffer+0x6c>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b09      	cmp	r3, #9
 8011c22:	d804      	bhi.n	8011c2e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011c24:	4b09      	ldr	r3, [pc, #36]	@ (8011c4c <processHalfDMAbuffer+0x6c>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	1c5a      	adds	r2, r3, #1
 8011c2a:	4b08      	ldr	r3, [pc, #32]	@ (8011c4c <processHalfDMAbuffer+0x6c>)
 8011c2c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011c2e:	4b08      	ldr	r3, [pc, #32]	@ (8011c50 <processHalfDMAbuffer+0x70>)
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d001      	beq.n	8011c3c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011c38:	f000 f828 	bl	8011c8c <calculateSPLQ31>
    }
}
 8011c3c:	46c0      	nop			@ (mov r8, r8)
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	b002      	add	sp, #8
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	200012f8 	.word	0x200012f8
 8011c48:	20001af8 	.word	0x20001af8
 8011c4c:	200012b8 	.word	0x200012b8
 8011c50:	200012b3 	.word	0x200012b3

08011c54 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011c5c:	4b08      	ldr	r3, [pc, #32]	@ (8011c80 <HAL_I2S_ErrorCallback+0x2c>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d107      	bne.n	8011c76 <HAL_I2S_ErrorCallback+0x22>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011c66:	4a07      	ldr	r2, [pc, #28]	@ (8011c84 <HAL_I2S_ErrorCallback+0x30>)
 8011c68:	233c      	movs	r3, #60	@ 0x3c
 8011c6a:	33ff      	adds	r3, #255	@ 0xff
 8011c6c:	0019      	movs	r1, r3
 8011c6e:	4b06      	ldr	r3, [pc, #24]	@ (8011c88 <HAL_I2S_ErrorCallback+0x34>)
 8011c70:	0018      	movs	r0, r3
 8011c72:	f002 f9ff 	bl	8014074 <errorHandler>
  }
}
 8011c76:	46c0      	nop			@ (mov r8, r8)
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	b002      	add	sp, #8
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	46c0      	nop			@ (mov r8, r8)
 8011c80:	20001cfc 	.word	0x20001cfc
 8011c84:	0802dba8 	.word	0x0802dba8
 8011c88:	0802e824 	.word	0x0802e824

08011c8c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c8e:	b0b3      	sub	sp, #204	@ 0xcc
 8011c90:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011c92:	4ae2      	ldr	r2, [pc, #904]	@ (801201c <calculateSPLQ31+0x390>)
 8011c94:	2338      	movs	r3, #56	@ 0x38
 8011c96:	2030      	movs	r0, #48	@ 0x30
 8011c98:	181b      	adds	r3, r3, r0
 8011c9a:	19d9      	adds	r1, r3, r7
 8011c9c:	2334      	movs	r3, #52	@ 0x34
 8011c9e:	181b      	adds	r3, r3, r0
 8011ca0:	19d8      	adds	r0, r3, r7
 8011ca2:	2380      	movs	r3, #128	@ 0x80
 8011ca4:	f000 fc36 	bl	8012514 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	da00      	bge.n	8011cb0 <calculateSPLQ31+0x24>
 8011cae:	3301      	adds	r3, #1
 8011cb0:	105b      	asrs	r3, r3, #1
 8011cb2:	001a      	movs	r2, r3
 8011cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	da00      	bge.n	8011cbc <calculateSPLQ31+0x30>
 8011cba:	3301      	adds	r3, #1
 8011cbc:	105b      	asrs	r3, r3, #1
 8011cbe:	18d3      	adds	r3, r2, r3
 8011cc0:	2188      	movs	r1, #136	@ 0x88
 8011cc2:	187a      	adds	r2, r7, r1
 8011cc4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011cc6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011cc8:	187b      	adds	r3, r7, r1
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	3304      	adds	r3, #4
 8011cd0:	2284      	movs	r2, #132	@ 0x84
 8011cd2:	18b9      	adds	r1, r7, r2
 8011cd4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011cd6:	18bb      	adds	r3, r7, r2
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	4ad1      	ldr	r2, [pc, #836]	@ (8012020 <calculateSPLQ31+0x394>)
 8011cdc:	0019      	movs	r1, r3
 8011cde:	0010      	movs	r0, r2
 8011ce0:	f000 fc58 	bl	8012594 <getPo2factor>
 8011ce4:	0003      	movs	r3, r0
 8011ce6:	2280      	movs	r2, #128	@ 0x80
 8011ce8:	18ba      	adds	r2, r7, r2
 8011cea:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011cec:	2300      	movs	r3, #0
 8011cee:	2284      	movs	r2, #132	@ 0x84
 8011cf0:	2130      	movs	r1, #48	@ 0x30
 8011cf2:	1852      	adds	r2, r2, r1
 8011cf4:	19d2      	adds	r2, r2, r7
 8011cf6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	2280      	movs	r2, #128	@ 0x80
 8011cfc:	1852      	adds	r2, r2, r1
 8011cfe:	19d2      	adds	r2, r2, r7
 8011d00:	6013      	str	r3, [r2, #0]
 8011d02:	e032      	b.n	8011d6a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011d04:	4ac5      	ldr	r2, [pc, #788]	@ (801201c <calculateSPLQ31+0x390>)
 8011d06:	2680      	movs	r6, #128	@ 0x80
 8011d08:	2330      	movs	r3, #48	@ 0x30
 8011d0a:	18f1      	adds	r1, r6, r3
 8011d0c:	19cb      	adds	r3, r1, r7
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	589a      	ldr	r2, [r3, r2]
 8011d14:	2188      	movs	r1, #136	@ 0x88
 8011d16:	1879      	adds	r1, r7, r1
 8011d18:	680b      	ldr	r3, [r1, #0]
 8011d1a:	1ad2      	subs	r2, r2, r3
 8011d1c:	2180      	movs	r1, #128	@ 0x80
 8011d1e:	1879      	adds	r1, r7, r1
 8011d20:	680b      	ldr	r3, [r1, #0]
 8011d22:	409a      	lsls	r2, r3
 8011d24:	0011      	movs	r1, r2
 8011d26:	4abf      	ldr	r2, [pc, #764]	@ (8012024 <calculateSPLQ31+0x398>)
 8011d28:	2084      	movs	r0, #132	@ 0x84
 8011d2a:	2330      	movs	r3, #48	@ 0x30
 8011d2c:	18c3      	adds	r3, r0, r3
 8011d2e:	19db      	adds	r3, r3, r7
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011d36:	2230      	movs	r2, #48	@ 0x30
 8011d38:	1883      	adds	r3, r0, r2
 8011d3a:	19db      	adds	r3, r3, r7
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	49b8      	ldr	r1, [pc, #736]	@ (8012024 <calculateSPLQ31+0x398>)
 8011d42:	009a      	lsls	r2, r3, #2
 8011d44:	2300      	movs	r3, #0
 8011d46:	5053      	str	r3, [r2, r1]
        count += 2;
 8011d48:	2230      	movs	r2, #48	@ 0x30
 8011d4a:	1883      	adds	r3, r0, r2
 8011d4c:	19db      	adds	r3, r3, r7
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	3302      	adds	r3, #2
 8011d52:	0011      	movs	r1, r2
 8011d54:	1882      	adds	r2, r0, r2
 8011d56:	19d2      	adds	r2, r2, r7
 8011d58:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011d5a:	000a      	movs	r2, r1
 8011d5c:	18b3      	adds	r3, r6, r2
 8011d5e:	19db      	adds	r3, r3, r7
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	3301      	adds	r3, #1
 8011d64:	18b2      	adds	r2, r6, r2
 8011d66:	19d2      	adds	r2, r2, r7
 8011d68:	6013      	str	r3, [r2, #0]
 8011d6a:	2380      	movs	r3, #128	@ 0x80
 8011d6c:	2630      	movs	r6, #48	@ 0x30
 8011d6e:	199b      	adds	r3, r3, r6
 8011d70:	19db      	adds	r3, r3, r7
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d76:	d9c5      	bls.n	8011d04 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011d78:	4bab      	ldr	r3, [pc, #684]	@ (8012028 <calculateSPLQ31+0x39c>)
 8011d7a:	6818      	ldr	r0, [r3, #0]
 8011d7c:	49a9      	ldr	r1, [pc, #676]	@ (8012024 <calculateSPLQ31+0x398>)
 8011d7e:	2301      	movs	r3, #1
 8011d80:	2200      	movs	r2, #0
 8011d82:	f012 f90f 	bl	8023fa4 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011d86:	4aa9      	ldr	r2, [pc, #676]	@ (801202c <calculateSPLQ31+0x3a0>)
 8011d88:	2338      	movs	r3, #56	@ 0x38
 8011d8a:	199b      	adds	r3, r3, r6
 8011d8c:	19d9      	adds	r1, r3, r7
 8011d8e:	2334      	movs	r3, #52	@ 0x34
 8011d90:	199b      	adds	r3, r3, r6
 8011d92:	19d8      	adds	r0, r3, r7
 8011d94:	237e      	movs	r3, #126	@ 0x7e
 8011d96:	f000 fbbd 	bl	8012514 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011d9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011d9c:	2380      	movs	r3, #128	@ 0x80
 8011d9e:	061b      	lsls	r3, r3, #24
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d101      	bne.n	8011da8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011da4:	4b9e      	ldr	r3, [pc, #632]	@ (8012020 <calculateSPLQ31+0x394>)
 8011da6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011da8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011daa:	2380      	movs	r3, #128	@ 0x80
 8011dac:	061b      	lsls	r3, r3, #24
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d101      	bne.n	8011db6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011db2:	4b9b      	ldr	r3, [pc, #620]	@ (8012020 <calculateSPLQ31+0x394>)
 8011db4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011db8:	17da      	asrs	r2, r3, #31
 8011dba:	189b      	adds	r3, r3, r2
 8011dbc:	4053      	eors	r3, r2
 8011dbe:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011dc2:	17da      	asrs	r2, r3, #31
 8011dc4:	189b      	adds	r3, r3, r2
 8011dc6:	4053      	eors	r3, r2
 8011dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011dca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011dcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	dd01      	ble.n	8011dd6 <calculateSPLQ31+0x14a>
    {
        max = min;
 8011dd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011dd8:	3304      	adds	r3, #4
 8011dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011ddc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011dde:	4a90      	ldr	r2, [pc, #576]	@ (8012020 <calculateSPLQ31+0x394>)
 8011de0:	0019      	movs	r1, r3
 8011de2:	0010      	movs	r0, r2
 8011de4:	f000 fbd6 	bl	8012594 <getPo2factor>
 8011de8:	0003      	movs	r3, r0
 8011dea:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011dec:	2302      	movs	r3, #2
 8011dee:	22ac      	movs	r2, #172	@ 0xac
 8011df0:	18ba      	adds	r2, r7, r2
 8011df2:	6013      	str	r3, [r2, #0]
 8011df4:	e012      	b.n	8011e1c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011df6:	4a8b      	ldr	r2, [pc, #556]	@ (8012024 <calculateSPLQ31+0x398>)
 8011df8:	20ac      	movs	r0, #172	@ 0xac
 8011dfa:	183b      	adds	r3, r7, r0
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	589a      	ldr	r2, [r3, r2]
 8011e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e04:	409a      	lsls	r2, r3
 8011e06:	0011      	movs	r1, r2
 8011e08:	4a86      	ldr	r2, [pc, #536]	@ (8012024 <calculateSPLQ31+0x398>)
 8011e0a:	183b      	adds	r3, r7, r0
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011e12:	183b      	adds	r3, r7, r0
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	3301      	adds	r3, #1
 8011e18:	183a      	adds	r2, r7, r0
 8011e1a:	6013      	str	r3, [r2, #0]
 8011e1c:	23ac      	movs	r3, #172	@ 0xac
 8011e1e:	18fb      	adds	r3, r7, r3
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	2b7f      	cmp	r3, #127	@ 0x7f
 8011e24:	d9e7      	bls.n	8011df6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011e26:	4b7d      	ldr	r3, [pc, #500]	@ (801201c <calculateSPLQ31+0x390>)
 8011e28:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011e2a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011e2c:	4b7d      	ldr	r3, [pc, #500]	@ (8012024 <calculateSPLQ31+0x398>)
 8011e2e:	2240      	movs	r2, #64	@ 0x40
 8011e30:	0018      	movs	r0, r3
 8011e32:	f012 fe61 	bl	8024af8 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011e36:	2330      	movs	r3, #48	@ 0x30
 8011e38:	18fb      	adds	r3, r7, r3
 8011e3a:	0018      	movs	r0, r3
 8011e3c:	2330      	movs	r3, #48	@ 0x30
 8011e3e:	001a      	movs	r2, r3
 8011e40:	2100      	movs	r1, #0
 8011e42:	f014 fc8b 	bl	802675c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011e46:	2200      	movs	r2, #0
 8011e48:	2300      	movs	r3, #0
 8011e4a:	21a0      	movs	r1, #160	@ 0xa0
 8011e4c:	1879      	adds	r1, r7, r1
 8011e4e:	600a      	str	r2, [r1, #0]
 8011e50:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011e52:	2301      	movs	r3, #1
 8011e54:	229c      	movs	r2, #156	@ 0x9c
 8011e56:	18ba      	adds	r2, r7, r2
 8011e58:	6013      	str	r3, [r2, #0]
 8011e5a:	e05b      	b.n	8011f14 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011e5c:	269c      	movs	r6, #156	@ 0x9c
 8011e5e:	19bb      	adds	r3, r7, r6
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	009a      	lsls	r2, r3, #2
 8011e64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011e66:	189b      	adds	r3, r3, r2
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	613b      	str	r3, [r7, #16]
 8011e6c:	17db      	asrs	r3, r3, #31
 8011e6e:	617b      	str	r3, [r7, #20]
 8011e70:	4b6f      	ldr	r3, [pc, #444]	@ (8012030 <calculateSPLQ31+0x3a4>)
 8011e72:	681a      	ldr	r2, [r3, #0]
 8011e74:	19bb      	adds	r3, r7, r6
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	18d3      	adds	r3, r2, r3
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	60bb      	str	r3, [r7, #8]
 8011e80:	2300      	movs	r3, #0
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	68ba      	ldr	r2, [r7, #8]
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	6938      	ldr	r0, [r7, #16]
 8011e8a:	6979      	ldr	r1, [r7, #20]
 8011e8c:	f7ee fb98 	bl	80005c0 <__aeabi_lmul>
 8011e90:	0002      	movs	r2, r0
 8011e92:	000b      	movs	r3, r1
 8011e94:	0010      	movs	r0, r2
 8011e96:	0019      	movs	r1, r3
 8011e98:	23a0      	movs	r3, #160	@ 0xa0
 8011e9a:	18fa      	adds	r2, r7, r3
 8011e9c:	6853      	ldr	r3, [r2, #4]
 8011e9e:	6812      	ldr	r2, [r2, #0]
 8011ea0:	1812      	adds	r2, r2, r0
 8011ea2:	414b      	adcs	r3, r1
 8011ea4:	21a0      	movs	r1, #160	@ 0xa0
 8011ea6:	1879      	adds	r1, r7, r1
 8011ea8:	600a      	str	r2, [r1, #0]
 8011eaa:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011eac:	4b61      	ldr	r3, [pc, #388]	@ (8012034 <calculateSPLQ31+0x3a8>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	19bb      	adds	r3, r7, r6
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	18d3      	adds	r3, r2, r3
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	2b06      	cmp	r3, #6
 8011eba:	d025      	beq.n	8011f08 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8012034 <calculateSPLQ31+0x3a8>)
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	19bb      	adds	r3, r7, r6
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	18d3      	adds	r3, r2, r3
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	2230      	movs	r2, #48	@ 0x30
 8011eca:	18ba      	adds	r2, r7, r2
 8011ecc:	00db      	lsls	r3, r3, #3
 8011ece:	18d3      	adds	r3, r2, r3
 8011ed0:	6818      	ldr	r0, [r3, #0]
 8011ed2:	6859      	ldr	r1, [r3, #4]
 8011ed4:	19bb      	adds	r3, r7, r6
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	009a      	lsls	r2, r3, #2
 8011eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011edc:	189b      	adds	r3, r3, r2
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	603b      	str	r3, [r7, #0]
 8011ee2:	17db      	asrs	r3, r3, #31
 8011ee4:	607b      	str	r3, [r7, #4]
 8011ee6:	4b53      	ldr	r3, [pc, #332]	@ (8012034 <calculateSPLQ31+0x3a8>)
 8011ee8:	681a      	ldr	r2, [r3, #0]
 8011eea:	19be      	adds	r6, r7, r6
 8011eec:	6833      	ldr	r3, [r6, #0]
 8011eee:	18d3      	adds	r3, r2, r3
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	001e      	movs	r6, r3
 8011ef4:	683a      	ldr	r2, [r7, #0]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	1880      	adds	r0, r0, r2
 8011efa:	4159      	adcs	r1, r3
 8011efc:	2330      	movs	r3, #48	@ 0x30
 8011efe:	18fa      	adds	r2, r7, r3
 8011f00:	00f3      	lsls	r3, r6, #3
 8011f02:	18d3      	adds	r3, r2, r3
 8011f04:	6018      	str	r0, [r3, #0]
 8011f06:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011f08:	229c      	movs	r2, #156	@ 0x9c
 8011f0a:	18bb      	adds	r3, r7, r2
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	18ba      	adds	r2, r7, r2
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	239c      	movs	r3, #156	@ 0x9c
 8011f16:	18fb      	adds	r3, r7, r3
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8011f1c:	d99e      	bls.n	8011e5c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011f1e:	2380      	movs	r3, #128	@ 0x80
 8011f20:	18fb      	adds	r3, r7, r3
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	001a      	movs	r2, r3
 8011f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f2a:	005b      	lsls	r3, r3, #1
 8011f2c:	18d3      	adds	r3, r2, r3
 8011f2e:	3b22      	subs	r3, #34	@ 0x22
 8011f30:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f34:	17da      	asrs	r2, r3, #31
 8011f36:	189b      	adds	r3, r3, r2
 8011f38:	4053      	eors	r3, r2
 8011f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011f3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	da62      	bge.n	8012008 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f44:	3b20      	subs	r3, #32
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	db05      	blt.n	8011f56 <calculateSPLQ31+0x2ca>
 8011f4a:	22a0      	movs	r2, #160	@ 0xa0
 8011f4c:	18ba      	adds	r2, r7, r2
 8011f4e:	6812      	ldr	r2, [r2, #0]
 8011f50:	409a      	lsls	r2, r3
 8011f52:	627a      	str	r2, [r7, #36]	@ 0x24
 8011f54:	e010      	b.n	8011f78 <calculateSPLQ31+0x2ec>
 8011f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f58:	2220      	movs	r2, #32
 8011f5a:	1ad3      	subs	r3, r2, r3
 8011f5c:	22a0      	movs	r2, #160	@ 0xa0
 8011f5e:	18ba      	adds	r2, r7, r2
 8011f60:	6812      	ldr	r2, [r2, #0]
 8011f62:	40da      	lsrs	r2, r3
 8011f64:	0013      	movs	r3, r2
 8011f66:	22a4      	movs	r2, #164	@ 0xa4
 8011f68:	18ba      	adds	r2, r7, r2
 8011f6a:	6811      	ldr	r1, [r2, #0]
 8011f6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f6e:	4091      	lsls	r1, r2
 8011f70:	6279      	str	r1, [r7, #36]	@ 0x24
 8011f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f74:	431a      	orrs	r2, r3
 8011f76:	627a      	str	r2, [r7, #36]	@ 0x24
 8011f78:	21a0      	movs	r1, #160	@ 0xa0
 8011f7a:	187b      	adds	r3, r7, r1
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f80:	409a      	lsls	r2, r3
 8011f82:	623a      	str	r2, [r7, #32]
 8011f84:	6a3b      	ldr	r3, [r7, #32]
 8011f86:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011f88:	187a      	adds	r2, r7, r1
 8011f8a:	6013      	str	r3, [r2, #0]
 8011f8c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011f8e:	2300      	movs	r3, #0
 8011f90:	2298      	movs	r2, #152	@ 0x98
 8011f92:	18ba      	adds	r2, r7, r2
 8011f94:	6013      	str	r3, [r2, #0]
 8011f96:	e031      	b.n	8011ffc <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011f98:	2330      	movs	r3, #48	@ 0x30
 8011f9a:	18fa      	adds	r2, r7, r3
 8011f9c:	2398      	movs	r3, #152	@ 0x98
 8011f9e:	18fb      	adds	r3, r7, r3
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	00db      	lsls	r3, r3, #3
 8011fa4:	18d3      	adds	r3, r2, r3
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fac:	3920      	subs	r1, #32
 8011fae:	2900      	cmp	r1, #0
 8011fb0:	db03      	blt.n	8011fba <calculateSPLQ31+0x32e>
 8011fb2:	0010      	movs	r0, r2
 8011fb4:	4088      	lsls	r0, r1
 8011fb6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011fb8:	e00c      	b.n	8011fd4 <calculateSPLQ31+0x348>
 8011fba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fbc:	2020      	movs	r0, #32
 8011fbe:	1a41      	subs	r1, r0, r1
 8011fc0:	0010      	movs	r0, r2
 8011fc2:	40c8      	lsrs	r0, r1
 8011fc4:	0001      	movs	r1, r0
 8011fc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011fc8:	001c      	movs	r4, r3
 8011fca:	4084      	lsls	r4, r0
 8011fcc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011fce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011fd0:	4308      	orrs	r0, r1
 8011fd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011fd4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fd6:	0013      	movs	r3, r2
 8011fd8:	408b      	lsls	r3, r1
 8011fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011fdc:	2330      	movs	r3, #48	@ 0x30
 8011fde:	18fa      	adds	r2, r7, r3
 8011fe0:	2098      	movs	r0, #152	@ 0x98
 8011fe2:	183b      	adds	r3, r7, r0
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	00db      	lsls	r3, r3, #3
 8011fe8:	18d3      	adds	r3, r2, r3
 8011fea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011fec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011fee:	6019      	str	r1, [r3, #0]
 8011ff0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011ff2:	183b      	adds	r3, r7, r0
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	183a      	adds	r2, r7, r0
 8011ffa:	6013      	str	r3, [r2, #0]
 8011ffc:	2398      	movs	r3, #152	@ 0x98
 8011ffe:	18fb      	adds	r3, r7, r3
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b05      	cmp	r3, #5
 8012004:	d9c8      	bls.n	8011f98 <calculateSPLQ31+0x30c>
 8012006:	e06b      	b.n	80120e0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8012008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801200a:	3b20      	subs	r3, #32
 801200c:	2b00      	cmp	r3, #0
 801200e:	db13      	blt.n	8012038 <calculateSPLQ31+0x3ac>
 8012010:	22a4      	movs	r2, #164	@ 0xa4
 8012012:	18ba      	adds	r2, r7, r2
 8012014:	6812      	ldr	r2, [r2, #0]
 8012016:	40da      	lsrs	r2, r3
 8012018:	61ba      	str	r2, [r7, #24]
 801201a:	e01e      	b.n	801205a <calculateSPLQ31+0x3ce>
 801201c:	20001af8 	.word	0x20001af8
 8012020:	7fffffff 	.word	0x7fffffff
 8012024:	20001d44 	.word	0x20001d44
 8012028:	200000d4 	.word	0x200000d4
 801202c:	20001d4c 	.word	0x20001d4c
 8012030:	200000d8 	.word	0x200000d8
 8012034:	200000e4 	.word	0x200000e4
 8012038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801203a:	2220      	movs	r2, #32
 801203c:	1ad3      	subs	r3, r2, r3
 801203e:	22a4      	movs	r2, #164	@ 0xa4
 8012040:	18ba      	adds	r2, r7, r2
 8012042:	6812      	ldr	r2, [r2, #0]
 8012044:	409a      	lsls	r2, r3
 8012046:	0013      	movs	r3, r2
 8012048:	22a0      	movs	r2, #160	@ 0xa0
 801204a:	18ba      	adds	r2, r7, r2
 801204c:	6811      	ldr	r1, [r2, #0]
 801204e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012050:	40d1      	lsrs	r1, r2
 8012052:	61b9      	str	r1, [r7, #24]
 8012054:	69ba      	ldr	r2, [r7, #24]
 8012056:	431a      	orrs	r2, r3
 8012058:	61ba      	str	r2, [r7, #24]
 801205a:	23a4      	movs	r3, #164	@ 0xa4
 801205c:	18fb      	adds	r3, r7, r3
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012062:	40da      	lsrs	r2, r3
 8012064:	61fa      	str	r2, [r7, #28]
 8012066:	69ba      	ldr	r2, [r7, #24]
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	21a0      	movs	r1, #160	@ 0xa0
 801206c:	1879      	adds	r1, r7, r1
 801206e:	600a      	str	r2, [r1, #0]
 8012070:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012072:	2300      	movs	r3, #0
 8012074:	2294      	movs	r2, #148	@ 0x94
 8012076:	18ba      	adds	r2, r7, r2
 8012078:	6013      	str	r3, [r2, #0]
 801207a:	e02c      	b.n	80120d6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 801207c:	2330      	movs	r3, #48	@ 0x30
 801207e:	18fa      	adds	r2, r7, r3
 8012080:	2394      	movs	r3, #148	@ 0x94
 8012082:	18fb      	adds	r3, r7, r3
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	18d3      	adds	r3, r2, r3
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012090:	3920      	subs	r1, #32
 8012092:	2900      	cmp	r1, #0
 8012094:	db03      	blt.n	801209e <calculateSPLQ31+0x412>
 8012096:	0018      	movs	r0, r3
 8012098:	40c8      	lsrs	r0, r1
 801209a:	0004      	movs	r4, r0
 801209c:	e00a      	b.n	80120b4 <calculateSPLQ31+0x428>
 801209e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80120a0:	2020      	movs	r0, #32
 80120a2:	1a41      	subs	r1, r0, r1
 80120a4:	0018      	movs	r0, r3
 80120a6:	4088      	lsls	r0, r1
 80120a8:	0001      	movs	r1, r0
 80120aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80120ac:	0016      	movs	r6, r2
 80120ae:	40c6      	lsrs	r6, r0
 80120b0:	0034      	movs	r4, r6
 80120b2:	430c      	orrs	r4, r1
 80120b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80120b6:	40cb      	lsrs	r3, r1
 80120b8:	001d      	movs	r5, r3
 80120ba:	2330      	movs	r3, #48	@ 0x30
 80120bc:	18fa      	adds	r2, r7, r3
 80120be:	2194      	movs	r1, #148	@ 0x94
 80120c0:	187b      	adds	r3, r7, r1
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	00db      	lsls	r3, r3, #3
 80120c6:	18d3      	adds	r3, r2, r3
 80120c8:	601c      	str	r4, [r3, #0]
 80120ca:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120cc:	187b      	adds	r3, r7, r1
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	3301      	adds	r3, #1
 80120d2:	187a      	adds	r2, r7, r1
 80120d4:	6013      	str	r3, [r2, #0]
 80120d6:	2394      	movs	r3, #148	@ 0x94
 80120d8:	18fb      	adds	r3, r7, r3
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b05      	cmp	r3, #5
 80120de:	d9cd      	bls.n	801207c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 80120e0:	230f      	movs	r3, #15
 80120e2:	425d      	negs	r5, r3
 80120e4:	2305      	movs	r3, #5
 80120e6:	425e      	negs	r6, r3
 80120e8:	4b4a      	ldr	r3, [pc, #296]	@ (8012214 <calculateSPLQ31+0x588>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	4b4a      	ldr	r3, [pc, #296]	@ (8012218 <calculateSPLQ31+0x58c>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	21a0      	movs	r1, #160	@ 0xa0
 80120f6:	1879      	adds	r1, r7, r1
 80120f8:	6808      	ldr	r0, [r1, #0]
 80120fa:	6849      	ldr	r1, [r1, #4]
 80120fc:	4c47      	ldr	r4, [pc, #284]	@ (801221c <calculateSPLQ31+0x590>)
 80120fe:	9403      	str	r4, [sp, #12]
 8012100:	4c47      	ldr	r4, [pc, #284]	@ (8012220 <calculateSPLQ31+0x594>)
 8012102:	9402      	str	r4, [sp, #8]
 8012104:	9301      	str	r3, [sp, #4]
 8012106:	9200      	str	r2, [sp, #0]
 8012108:	0033      	movs	r3, r6
 801210a:	002a      	movs	r2, r5
 801210c:	f000 fa86 	bl	801261c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012110:	2300      	movs	r3, #0
 8012112:	2290      	movs	r2, #144	@ 0x90
 8012114:	18ba      	adds	r2, r7, r2
 8012116:	6013      	str	r3, [r2, #0]
 8012118:	e026      	b.n	8012168 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801211a:	2330      	movs	r3, #48	@ 0x30
 801211c:	18fa      	adds	r2, r7, r3
 801211e:	2490      	movs	r4, #144	@ 0x90
 8012120:	193b      	adds	r3, r7, r4
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	18d3      	adds	r3, r2, r3
 8012128:	6818      	ldr	r0, [r3, #0]
 801212a:	6859      	ldr	r1, [r3, #4]
 801212c:	230f      	movs	r3, #15
 801212e:	425d      	negs	r5, r3
 8012130:	2305      	movs	r3, #5
 8012132:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8012134:	193b      	adds	r3, r7, r4
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	009a      	lsls	r2, r3, #2
 801213a:	4b3a      	ldr	r3, [pc, #232]	@ (8012224 <calculateSPLQ31+0x598>)
 801213c:	18d3      	adds	r3, r2, r3
 801213e:	193a      	adds	r2, r7, r4
 8012140:	6812      	ldr	r2, [r2, #0]
 8012142:	0094      	lsls	r4, r2, #2
 8012144:	4a38      	ldr	r2, [pc, #224]	@ (8012228 <calculateSPLQ31+0x59c>)
 8012146:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8012148:	9203      	str	r2, [sp, #12]
 801214a:	9302      	str	r3, [sp, #8]
 801214c:	2300      	movs	r3, #0
 801214e:	9301      	str	r3, [sp, #4]
 8012150:	2300      	movs	r3, #0
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	0033      	movs	r3, r6
 8012156:	002a      	movs	r2, r5
 8012158:	f000 fa60 	bl	801261c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801215c:	2490      	movs	r4, #144	@ 0x90
 801215e:	193b      	adds	r3, r7, r4
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	3301      	adds	r3, #1
 8012164:	193a      	adds	r2, r7, r4
 8012166:	6013      	str	r3, [r2, #0]
 8012168:	2390      	movs	r3, #144	@ 0x90
 801216a:	18fb      	adds	r3, r7, r3
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b05      	cmp	r3, #5
 8012170:	d9d3      	bls.n	801211a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8012172:	4b2b      	ldr	r3, [pc, #172]	@ (8012220 <calculateSPLQ31+0x594>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	4b2d      	ldr	r3, [pc, #180]	@ (801222c <calculateSPLQ31+0x5a0>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	18d2      	adds	r2, r2, r3
 801217c:	4b2b      	ldr	r3, [pc, #172]	@ (801222c <calculateSPLQ31+0x5a0>)
 801217e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8012180:	4b26      	ldr	r3, [pc, #152]	@ (801221c <calculateSPLQ31+0x590>)
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	4b2a      	ldr	r3, [pc, #168]	@ (8012230 <calculateSPLQ31+0x5a4>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	18d2      	adds	r2, r2, r3
 801218a:	4b29      	ldr	r3, [pc, #164]	@ (8012230 <calculateSPLQ31+0x5a4>)
 801218c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801218e:	2300      	movs	r3, #0
 8012190:	228c      	movs	r2, #140	@ 0x8c
 8012192:	18ba      	adds	r2, r7, r2
 8012194:	6013      	str	r3, [r2, #0]
 8012196:	e025      	b.n	80121e4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8012198:	4b22      	ldr	r3, [pc, #136]	@ (8012224 <calculateSPLQ31+0x598>)
 801219a:	208c      	movs	r0, #140	@ 0x8c
 801219c:	183a      	adds	r2, r7, r0
 801219e:	6812      	ldr	r2, [r2, #0]
 80121a0:	0092      	lsls	r2, r2, #2
 80121a2:	58d2      	ldr	r2, [r2, r3]
 80121a4:	4b23      	ldr	r3, [pc, #140]	@ (8012234 <calculateSPLQ31+0x5a8>)
 80121a6:	1839      	adds	r1, r7, r0
 80121a8:	6809      	ldr	r1, [r1, #0]
 80121aa:	0089      	lsls	r1, r1, #2
 80121ac:	58cb      	ldr	r3, [r1, r3]
 80121ae:	18d1      	adds	r1, r2, r3
 80121b0:	4b20      	ldr	r3, [pc, #128]	@ (8012234 <calculateSPLQ31+0x5a8>)
 80121b2:	183a      	adds	r2, r7, r0
 80121b4:	6812      	ldr	r2, [r2, #0]
 80121b6:	0092      	lsls	r2, r2, #2
 80121b8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80121ba:	4b1b      	ldr	r3, [pc, #108]	@ (8012228 <calculateSPLQ31+0x59c>)
 80121bc:	183a      	adds	r2, r7, r0
 80121be:	6812      	ldr	r2, [r2, #0]
 80121c0:	0092      	lsls	r2, r2, #2
 80121c2:	58d2      	ldr	r2, [r2, r3]
 80121c4:	4b1c      	ldr	r3, [pc, #112]	@ (8012238 <calculateSPLQ31+0x5ac>)
 80121c6:	1839      	adds	r1, r7, r0
 80121c8:	6809      	ldr	r1, [r1, #0]
 80121ca:	0089      	lsls	r1, r1, #2
 80121cc:	58cb      	ldr	r3, [r1, r3]
 80121ce:	18d1      	adds	r1, r2, r3
 80121d0:	4b19      	ldr	r3, [pc, #100]	@ (8012238 <calculateSPLQ31+0x5ac>)
 80121d2:	183a      	adds	r2, r7, r0
 80121d4:	6812      	ldr	r2, [r2, #0]
 80121d6:	0092      	lsls	r2, r2, #2
 80121d8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80121da:	183b      	adds	r3, r7, r0
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	3301      	adds	r3, #1
 80121e0:	183a      	adds	r2, r7, r0
 80121e2:	6013      	str	r3, [r2, #0]
 80121e4:	238c      	movs	r3, #140	@ 0x8c
 80121e6:	18fb      	adds	r3, r7, r3
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b05      	cmp	r3, #5
 80121ec:	d9d4      	bls.n	8012198 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 80121ee:	4b13      	ldr	r3, [pc, #76]	@ (801223c <calculateSPLQ31+0x5b0>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	1c5a      	adds	r2, r3, #1
 80121f4:	4b11      	ldr	r3, [pc, #68]	@ (801223c <calculateSPLQ31+0x5b0>)
 80121f6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 80121f8:	4b10      	ldr	r3, [pc, #64]	@ (801223c <calculateSPLQ31+0x5b0>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	2b0f      	cmp	r3, #15
 80121fe:	d905      	bls.n	801220c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8012200:	4b0f      	ldr	r3, [pc, #60]	@ (8012240 <calculateSPLQ31+0x5b4>)
 8012202:	2201      	movs	r2, #1
 8012204:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8012206:	4b0f      	ldr	r3, [pc, #60]	@ (8012244 <calculateSPLQ31+0x5b8>)
 8012208:	2200      	movs	r2, #0
 801220a:	701a      	strb	r2, [r3, #0]
    }
}
 801220c:	46c0      	nop			@ (mov r8, r8)
 801220e:	46bd      	mov	sp, r7
 8012210:	b02f      	add	sp, #188	@ 0xbc
 8012212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012214:	200000dc 	.word	0x200000dc
 8012218:	200000e0 	.word	0x200000e0
 801221c:	200012c4 	.word	0x200012c4
 8012220:	200012c0 	.word	0x200012c0
 8012224:	200012c8 	.word	0x200012c8
 8012228:	200012e0 	.word	0x200012e0
 801222c:	20001d08 	.word	0x20001d08
 8012230:	20001d0c 	.word	0x20001d0c
 8012234:	20001d10 	.word	0x20001d10
 8012238:	20001d28 	.word	0x20001d28
 801223c:	20001d40 	.word	0x20001d40
 8012240:	200012b5 	.word	0x200012b5
 8012244:	200012b3 	.word	0x200012b3

08012248 <resetSPLstate>:

static void resetSPLstate(void)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 801224e:	4b11      	ldr	r3, [pc, #68]	@ (8012294 <resetSPLstate+0x4c>)
 8012250:	2200      	movs	r2, #0
 8012252:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8012254:	4b10      	ldr	r3, [pc, #64]	@ (8012298 <resetSPLstate+0x50>)
 8012256:	2200      	movs	r2, #0
 8012258:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801225a:	4b10      	ldr	r3, [pc, #64]	@ (801229c <resetSPLstate+0x54>)
 801225c:	2200      	movs	r2, #0
 801225e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012260:	2300      	movs	r3, #0
 8012262:	607b      	str	r3, [r7, #4]
 8012264:	e00c      	b.n	8012280 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8012266:	4b0e      	ldr	r3, [pc, #56]	@ (80122a0 <resetSPLstate+0x58>)
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	0092      	lsls	r2, r2, #2
 801226c:	2100      	movs	r1, #0
 801226e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8012270:	4b0c      	ldr	r3, [pc, #48]	@ (80122a4 <resetSPLstate+0x5c>)
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	0092      	lsls	r2, r2, #2
 8012276:	2100      	movs	r1, #0
 8012278:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	3301      	adds	r3, #1
 801227e:	607b      	str	r3, [r7, #4]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b05      	cmp	r3, #5
 8012284:	d9ef      	bls.n	8012266 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 8012286:	4b08      	ldr	r3, [pc, #32]	@ (80122a8 <resetSPLstate+0x60>)
 8012288:	2200      	movs	r2, #0
 801228a:	701a      	strb	r2, [r3, #0]
}
 801228c:	46c0      	nop			@ (mov r8, r8)
 801228e:	46bd      	mov	sp, r7
 8012290:	b002      	add	sp, #8
 8012292:	bd80      	pop	{r7, pc}
 8012294:	20001d08 	.word	0x20001d08
 8012298:	20001d0c 	.word	0x20001d0c
 801229c:	20001d40 	.word	0x20001d40
 80122a0:	20001d10 	.word	0x20001d10
 80122a4:	20001d28 	.word	0x20001d28
 80122a8:	200012b5 	.word	0x200012b5

080122ac <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80122ac:	b5b0      	push	{r4, r5, r7, lr}
 80122ae:	b090      	sub	sp, #64	@ 0x40
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60f8      	str	r0, [r7, #12]
 80122b4:	60b9      	str	r1, [r7, #8]
 80122b6:	0019      	movs	r1, r3
 80122b8:	1dfb      	adds	r3, r7, #7
 80122ba:	701a      	strb	r2, [r3, #0]
 80122bc:	1dbb      	adds	r3, r7, #6
 80122be:	1c0a      	adds	r2, r1, #0
 80122c0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80122c2:	1dfb      	adds	r3, r7, #7
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d005      	beq.n	80122d6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80122ca:	4b3b      	ldr	r3, [pc, #236]	@ (80123b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 80122cc:	2200      	movs	r2, #0
 80122ce:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80122d0:	4b3a      	ldr	r3, [pc, #232]	@ (80123bc <getFilteredMaxAmplitudeQ31+0x110>)
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80122d6:	2300      	movs	r3, #0
 80122d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80122da:	2300      	movs	r3, #0
 80122dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80122de:	2305      	movs	r3, #5
 80122e0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80122e2:	2300      	movs	r3, #0
 80122e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80122e6:	e040      	b.n	801236a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 80122e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122ea:	009b      	lsls	r3, r3, #2
 80122ec:	68fa      	ldr	r2, [r7, #12]
 80122ee:	18d3      	adds	r3, r2, r3
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f4:	409a      	lsls	r2, r3
 80122f6:	0013      	movs	r3, r2
 80122f8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 80122fa:	4b30      	ldr	r3, [pc, #192]	@ (80123bc <getFilteredMaxAmplitudeQ31+0x110>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	425a      	negs	r2, r3
 8012300:	4b2e      	ldr	r3, [pc, #184]	@ (80123bc <getFilteredMaxAmplitudeQ31+0x110>)
 8012302:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8012304:	2418      	movs	r4, #24
 8012306:	193a      	adds	r2, r7, r4
 8012308:	492c      	ldr	r1, [pc, #176]	@ (80123bc <getFilteredMaxAmplitudeQ31+0x110>)
 801230a:	231c      	movs	r3, #28
 801230c:	18f8      	adds	r0, r7, r3
 801230e:	2301      	movs	r3, #1
 8012310:	f012 fc4a 	bl	8024ba8 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8012314:	2514      	movs	r5, #20
 8012316:	197a      	adds	r2, r7, r5
 8012318:	1939      	adds	r1, r7, r4
 801231a:	4829      	ldr	r0, [pc, #164]	@ (80123c0 <getFilteredMaxAmplitudeQ31+0x114>)
 801231c:	2301      	movs	r3, #1
 801231e:	f012 fc11 	bl	8024b44 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8012322:	2410      	movs	r4, #16
 8012324:	193a      	adds	r2, r7, r4
 8012326:	4924      	ldr	r1, [pc, #144]	@ (80123b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012328:	4826      	ldr	r0, [pc, #152]	@ (80123c4 <getFilteredMaxAmplitudeQ31+0x118>)
 801232a:	2301      	movs	r3, #1
 801232c:	f012 fc0a 	bl	8024b44 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012330:	4a21      	ldr	r2, [pc, #132]	@ (80123b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012332:	1939      	adds	r1, r7, r4
 8012334:	1978      	adds	r0, r7, r5
 8012336:	2301      	movs	r3, #1
 8012338:	f012 fc36 	bl	8024ba8 <arm_add_q31>

        lastData = fx;
 801233c:	69fa      	ldr	r2, [r7, #28]
 801233e:	4b1f      	ldr	r3, [pc, #124]	@ (80123bc <getFilteredMaxAmplitudeQ31+0x110>)
 8012340:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8012342:	4b1d      	ldr	r3, [pc, #116]	@ (80123b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012348:	429a      	cmp	r2, r3
 801234a:	da03      	bge.n	8012354 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 801234c:	4b1a      	ldr	r3, [pc, #104]	@ (80123b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012352:	e007      	b.n	8012364 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8012354:	4b18      	ldr	r3, [pc, #96]	@ (80123b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801235a:	429a      	cmp	r2, r3
 801235c:	dd02      	ble.n	8012364 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 801235e:	4b16      	ldr	r3, [pc, #88]	@ (80123b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8012364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012366:	3301      	adds	r3, #1
 8012368:	637b      	str	r3, [r7, #52]	@ 0x34
 801236a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	429a      	cmp	r2, r3
 8012370:	d3ba      	bcc.n	80122e8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8012372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012374:	17da      	asrs	r2, r3, #31
 8012376:	189b      	adds	r3, r3, r2
 8012378:	4053      	eors	r3, r2
 801237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 801237c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801237e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8012380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012384:	4293      	cmp	r3, r2
 8012386:	d200      	bcs.n	801238a <getFilteredMaxAmplitudeQ31+0xde>
 8012388:	0013      	movs	r3, r2
 801238a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 801238c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012390:	40da      	lsrs	r2, r3
 8012392:	0013      	movs	r3, r2
 8012394:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8012396:	1dbb      	adds	r3, r7, #6
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d007      	beq.n	80123ae <getFilteredMaxAmplitudeQ31+0x102>
 801239e:	4b0a      	ldr	r3, [pc, #40]	@ (80123c8 <getFilteredMaxAmplitudeQ31+0x11c>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	6a3a      	ldr	r2, [r7, #32]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d902      	bls.n	80123ae <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80123a8:	4b07      	ldr	r3, [pc, #28]	@ (80123c8 <getFilteredMaxAmplitudeQ31+0x11c>)
 80123aa:	6a3a      	ldr	r2, [r7, #32]
 80123ac:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80123ae:	6a3b      	ldr	r3, [r7, #32]
}
 80123b0:	0018      	movs	r0, r3
 80123b2:	46bd      	mov	sp, r7
 80123b4:	b010      	add	sp, #64	@ 0x40
 80123b6:	bdb0      	pop	{r4, r5, r7, pc}
 80123b8:	20002144 	.word	0x20002144
 80123bc:	20002148 	.word	0x20002148
 80123c0:	0802e81c 	.word	0x0802e81c
 80123c4:	0802e820 	.word	0x0802e820
 80123c8:	200012bc 	.word	0x200012bc

080123cc <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b086      	sub	sp, #24
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	60f8      	str	r0, [r7, #12]
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80123d8:	4913      	ldr	r1, [pc, #76]	@ (8012428 <floatToIntAndFrac2dp+0x5c>)
 80123da:	68f8      	ldr	r0, [r7, #12]
 80123dc:	f7ee fe30 	bl	8001040 <__aeabi_fmul>
 80123e0:	1c03      	adds	r3, r0, #0
 80123e2:	1c18      	adds	r0, r3, #0
 80123e4:	f017 f8b8 	bl	8029558 <roundf>
 80123e8:	1c03      	adds	r3, r0, #0
 80123ea:	1c18      	adds	r0, r3, #0
 80123ec:	f7ee f916 	bl	800061c <__aeabi_f2uiz>
 80123f0:	0003      	movs	r3, r0
 80123f2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	2164      	movs	r1, #100	@ 0x64
 80123f8:	0018      	movs	r0, r3
 80123fa:	f7ed fed3 	bl	80001a4 <__udivsi3>
 80123fe:	0003      	movs	r3, r0
 8012400:	001a      	movs	r2, r3
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	b2da      	uxtb	r2, r3
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	b2db      	uxtb	r3, r3
 8012410:	2164      	movs	r1, #100	@ 0x64
 8012412:	434b      	muls	r3, r1
 8012414:	b2db      	uxtb	r3, r3
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	b2da      	uxtb	r2, r3
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	701a      	strb	r2, [r3, #0]
}
 801241e:	46c0      	nop			@ (mov r8, r8)
 8012420:	46bd      	mov	sp, r7
 8012422:	b006      	add	sp, #24
 8012424:	bd80      	pop	{r7, pc}
 8012426:	46c0      	nop			@ (mov r8, r8)
 8012428:	42c80000 	.word	0x42c80000

0801242c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b086      	sub	sp, #24
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8012438:	4914      	ldr	r1, [pc, #80]	@ (801248c <floatToIntAndFrac1dp+0x60>)
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	f7ee fe00 	bl	8001040 <__aeabi_fmul>
 8012440:	1c03      	adds	r3, r0, #0
 8012442:	1c18      	adds	r0, r3, #0
 8012444:	f017 f888 	bl	8029558 <roundf>
 8012448:	1c03      	adds	r3, r0, #0
 801244a:	1c18      	adds	r0, r3, #0
 801244c:	f7ee f8e6 	bl	800061c <__aeabi_f2uiz>
 8012450:	0003      	movs	r3, r0
 8012452:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	210a      	movs	r1, #10
 8012458:	0018      	movs	r0, r3
 801245a:	f7ed fea3 	bl	80001a4 <__udivsi3>
 801245e:	0003      	movs	r3, r0
 8012460:	001a      	movs	r2, r3
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	b2da      	uxtb	r2, r3
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	b2db      	uxtb	r3, r3
 8012470:	1c19      	adds	r1, r3, #0
 8012472:	0089      	lsls	r1, r1, #2
 8012474:	18cb      	adds	r3, r1, r3
 8012476:	18db      	adds	r3, r3, r3
 8012478:	b2db      	uxtb	r3, r3
 801247a:	1ad3      	subs	r3, r2, r3
 801247c:	b2da      	uxtb	r2, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	701a      	strb	r2, [r3, #0]
}
 8012482:	46c0      	nop			@ (mov r8, r8)
 8012484:	46bd      	mov	sp, r7
 8012486:	b006      	add	sp, #24
 8012488:	bd80      	pop	{r7, pc}
 801248a:	46c0      	nop			@ (mov r8, r8)
 801248c:	41200000 	.word	0x41200000

08012490 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8012490:	b590      	push	{r4, r7, lr}
 8012492:	b087      	sub	sp, #28
 8012494:	af00      	add	r7, sp, #0
 8012496:	60f8      	str	r0, [r7, #12]
 8012498:	60b9      	str	r1, [r7, #8]
 801249a:	607a      	str	r2, [r7, #4]
 801249c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ef f9c2 	bl	8001828 <__aeabi_i2f>
 80124a4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80124a6:	6838      	ldr	r0, [r7, #0]
 80124a8:	f7ef f9be 	bl	8001828 <__aeabi_i2f>
 80124ac:	1c03      	adds	r3, r0, #0
 80124ae:	4918      	ldr	r1, [pc, #96]	@ (8012510 <sumToIntAverage+0x80>)
 80124b0:	1c18      	adds	r0, r3, #0
 80124b2:	f7ee fbf7 	bl	8000ca4 <__aeabi_fdiv>
 80124b6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80124b8:	1c19      	adds	r1, r3, #0
 80124ba:	1c20      	adds	r0, r4, #0
 80124bc:	f7ee fa00 	bl	80008c0 <__aeabi_fadd>
 80124c0:	1c03      	adds	r3, r0, #0
 80124c2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80124c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80124c6:	f7ef f9ff 	bl	80018c8 <__aeabi_ui2f>
 80124ca:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80124cc:	1c19      	adds	r1, r3, #0
 80124ce:	1c20      	adds	r0, r4, #0
 80124d0:	f7ee fbe8 	bl	8000ca4 <__aeabi_fdiv>
 80124d4:	1c03      	adds	r3, r0, #0
 80124d6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80124d8:	2300      	movs	r3, #0
 80124da:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	2310      	movs	r3, #16
 80124e0:	18f9      	adds	r1, r7, r3
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	1c18      	adds	r0, r3, #0
 80124e6:	f7ff ffa1 	bl	801242c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	2bff      	cmp	r3, #255	@ 0xff
 80124ee:	d906      	bls.n	80124fe <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	22ff      	movs	r2, #255	@ 0xff
 80124f4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	2209      	movs	r2, #9
 80124fa:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 80124fc:	e003      	b.n	8012506 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	b2da      	uxtb	r2, r3
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	701a      	strb	r2, [r3, #0]
}
 8012506:	46c0      	nop			@ (mov r8, r8)
 8012508:	46bd      	mov	sp, r7
 801250a:	b007      	add	sp, #28
 801250c:	bd90      	pop	{r4, r7, pc}
 801250e:	46c0      	nop			@ (mov r8, r8)
 8012510:	41200000 	.word	0x41200000

08012514 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b086      	sub	sp, #24
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	2280      	movs	r2, #128	@ 0x80
 8012526:	0612      	lsls	r2, r2, #24
 8012528:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	4a18      	ldr	r2, [pc, #96]	@ (8012590 <findMinMax+0x7c>)
 801252e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012530:	2300      	movs	r3, #0
 8012532:	617b      	str	r3, [r7, #20]
 8012534:	e022      	b.n	801257c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	18d3      	adds	r3, r2, r3
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	429a      	cmp	r2, r3
 8012546:	da06      	bge.n	8012556 <findMinMax+0x42>
        {
            min[0] = array[i];
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	009b      	lsls	r3, r3, #2
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	18d3      	adds	r3, r2, r3
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	18d3      	adds	r3, r2, r3
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	429a      	cmp	r2, r3
 8012566:	dd06      	ble.n	8012576 <findMinMax+0x62>
        {
            max[0] = array[i];
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	009b      	lsls	r3, r3, #2
 801256c:	687a      	ldr	r2, [r7, #4]
 801256e:	18d3      	adds	r3, r2, r3
 8012570:	681a      	ldr	r2, [r3, #0]
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	3301      	adds	r3, #1
 801257a:	617b      	str	r3, [r7, #20]
 801257c:	697a      	ldr	r2, [r7, #20]
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	429a      	cmp	r2, r3
 8012582:	d3d8      	bcc.n	8012536 <findMinMax+0x22>
        }
    }
}
 8012584:	46c0      	nop			@ (mov r8, r8)
 8012586:	46c0      	nop			@ (mov r8, r8)
 8012588:	46bd      	mov	sp, r7
 801258a:	b006      	add	sp, #24
 801258c:	bd80      	pop	{r7, pc}
 801258e:	46c0      	nop			@ (mov r8, r8)
 8012590:	7fffffff 	.word	0x7fffffff

08012594 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 801259e:	2300      	movs	r3, #0
 80125a0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d302      	bcc.n	80125b0 <getPo2factor+0x1c>
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d107      	bne.n	80125c0 <getPo2factor+0x2c>
    {
        return 0;
 80125b0:	2300      	movs	r3, #0
 80125b2:	e00d      	b.n	80125d0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	085b      	lsrs	r3, r3, #1
 80125b8:	607b      	str	r3, [r7, #4]
        bitShift++;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	3301      	adds	r3, #1
 80125be:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d2f5      	bcs.n	80125b4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	3b01      	subs	r3, #1
 80125cc:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80125ce:	68fb      	ldr	r3, [r7, #12]
}
 80125d0:	0018      	movs	r0, r3
 80125d2:	46bd      	mov	sp, r7
 80125d4:	b004      	add	sp, #16
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b086      	sub	sp, #24
 80125dc:	af00      	add	r7, sp, #0
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	60b9      	str	r1, [r7, #8]
 80125e2:	607a      	str	r2, [r7, #4]
 80125e4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f7ef f96e 	bl	80018c8 <__aeabi_ui2f>
 80125ec:	1c03      	adds	r3, r0, #0
 80125ee:	1c19      	adds	r1, r3, #0
 80125f0:	68b8      	ldr	r0, [r7, #8]
 80125f2:	f7ee fd25 	bl	8001040 <__aeabi_fmul>
 80125f6:	1c03      	adds	r3, r0, #0
 80125f8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80125fa:	2300      	movs	r3, #0
 80125fc:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80125fe:	683a      	ldr	r2, [r7, #0]
 8012600:	2310      	movs	r3, #16
 8012602:	18f9      	adds	r1, r7, r3
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	1c18      	adds	r0, r3, #0
 8012608:	f7ff fee0 	bl	80123cc <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	b29a      	uxth	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	801a      	strh	r2, [r3, #0]
}
 8012614:	46c0      	nop			@ (mov r8, r8)
 8012616:	46bd      	mov	sp, r7
 8012618:	b006      	add	sp, #24
 801261a:	bd80      	pop	{r7, pc}

0801261c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	60b8      	str	r0, [r7, #8]
 8012624:	60f9      	str	r1, [r7, #12]
 8012626:	607a      	str	r2, [r7, #4]
 8012628:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801262c:	6a3a      	ldr	r2, [r7, #32]
 801262e:	68b8      	ldr	r0, [r7, #8]
 8012630:	68f9      	ldr	r1, [r7, #12]
 8012632:	f7f9 fe41 	bl	800c2b8 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8012636:	6a3b      	ldr	r3, [r7, #32]
 8012638:	681a      	ldr	r2, [r3, #0]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	18d2      	adds	r2, r2, r3
 801263e:	69bb      	ldr	r3, [r7, #24]
 8012640:	18d2      	adds	r2, r2, r3
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8012646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012648:	681a      	ldr	r2, [r3, #0]
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	18d2      	adds	r2, r2, r3
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	18d2      	adds	r2, r2, r3
 8012652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012654:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8012656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012658:	6a3b      	ldr	r3, [r7, #32]
 801265a:	0011      	movs	r1, r2
 801265c:	0018      	movs	r0, r3
 801265e:	f7f9 febb 	bl	800c3d8 <correctIntFracNumber>
}
 8012662:	46c0      	nop			@ (mov r8, r8)
 8012664:	46bd      	mov	sp, r7
 8012666:	b004      	add	sp, #16
 8012668:	bd80      	pop	{r7, pc}

0801266a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 801266a:	b580      	push	{r7, lr}
 801266c:	b086      	sub	sp, #24
 801266e:	af00      	add	r7, sp, #0
 8012670:	60f8      	str	r0, [r7, #12]
 8012672:	60b9      	str	r1, [r7, #8]
 8012674:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8012676:	2300      	movs	r3, #0
 8012678:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801267a:	2300      	movs	r3, #0
 801267c:	613b      	str	r3, [r7, #16]
 801267e:	e019      	b.n	80126b4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	68fa      	ldr	r2, [r7, #12]
 8012686:	18d3      	adds	r3, r2, r3
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 801268c:	693a      	ldr	r2, [r7, #16]
 801268e:	3201      	adds	r2, #1
 8012690:	0052      	lsls	r2, r2, #1
 8012692:	68f9      	ldr	r1, [r7, #12]
 8012694:	188a      	adds	r2, r1, r2
 8012696:	8812      	ldrh	r2, [r2, #0]
 8012698:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801269a:	0019      	movs	r1, r3
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	009b      	lsls	r3, r3, #2
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80126a4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80126a6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	3301      	adds	r3, #1
 80126ac:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	3304      	adds	r3, #4
 80126b2:	613b      	str	r3, [r7, #16]
 80126b4:	693a      	ldr	r2, [r7, #16]
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d3e1      	bcc.n	8012680 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80126bc:	46c0      	nop			@ (mov r8, r8)
 80126be:	46c0      	nop			@ (mov r8, r8)
 80126c0:	46bd      	mov	sp, r7
 80126c2:	b006      	add	sp, #24
 80126c4:	bd80      	pop	{r7, pc}
	...

080126c8 <InitDone>:
float batteryCharge = 0.0;
uint8_t batteryChargeMode;
Battery_Status batteryStatus;


void InitDone(){
 80126c8:	b580      	push	{r7, lr}
 80126ca:	af00      	add	r7, sp, #0
  init = false;
 80126cc:	4b02      	ldr	r3, [pc, #8]	@ (80126d8 <InitDone+0x10>)
 80126ce:	2200      	movs	r2, #0
 80126d0:	701a      	strb	r2, [r3, #0]
}
 80126d2:	46c0      	nop			@ (mov r8, r8)
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	200000e8 	.word	0x200000e8

080126dc <batteryChargeCheck>:
  "De Omgevingsmonitor" will refuse to upload data to openSenseMap.org if the battery voltage under load drops below 3.77V with SEN5x attached.
  Without a SEN5x attached the Omgevingsmonitor stops sending to OpenSenseMap at 3.75V
  Above values with standard battery
 */

void batteryChargeCheck(){
 80126dc:	b5b0      	push	{r4, r5, r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af04      	add	r7, sp, #16
  batteryCharge = ReadBatteryVoltage();
 80126e2:	f7f7 fa47 	bl	8009b74 <ReadBatteryVoltage>
 80126e6:	1c02      	adds	r2, r0, #0
 80126e8:	4b2e      	ldr	r3, [pc, #184]	@ (80127a4 <batteryChargeCheck+0xc8>)
 80126ea:	601a      	str	r2, [r3, #0]
  Debug("battery: %.02fV, solar: %dmV", batteryCharge, ReadSolarVoltage());
 80126ec:	4b2d      	ldr	r3, [pc, #180]	@ (80127a4 <batteryChargeCheck+0xc8>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	1c18      	adds	r0, r3, #0
 80126f2:	f7f1 f8cf 	bl	8003894 <__aeabi_f2d>
 80126f6:	0004      	movs	r4, r0
 80126f8:	000d      	movs	r5, r1
 80126fa:	f7f7 fa9d 	bl	8009c38 <ReadSolarVoltage>
 80126fe:	0003      	movs	r3, r0
 8012700:	0019      	movs	r1, r3
 8012702:	4a29      	ldr	r2, [pc, #164]	@ (80127a8 <batteryChargeCheck+0xcc>)
 8012704:	4b29      	ldr	r3, [pc, #164]	@ (80127ac <batteryChargeCheck+0xd0>)
 8012706:	9102      	str	r1, [sp, #8]
 8012708:	9400      	str	r4, [sp, #0]
 801270a:	9501      	str	r5, [sp, #4]
 801270c:	0019      	movs	r1, r3
 801270e:	2003      	movs	r0, #3
 8012710:	f001 fbc0 	bl	8013e94 <CreateLine>
#ifdef LARGEBATTERY
  if (batteryCharge < 3.50) {
#else
  if (batteryCharge < 3.75) {
 8012714:	4b23      	ldr	r3, [pc, #140]	@ (80127a4 <batteryChargeCheck+0xc8>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	4925      	ldr	r1, [pc, #148]	@ (80127b0 <batteryChargeCheck+0xd4>)
 801271a:	1c18      	adds	r0, r3, #0
 801271c:	f7ed ff08 	bl	8000530 <__aeabi_fcmplt>
 8012720:	1e03      	subs	r3, r0, #0
 8012722:	d002      	beq.n	801272a <batteryChargeCheck+0x4e>
#endif
    batteryStatus = BATTERY_CRITICAL;
 8012724:	4b23      	ldr	r3, [pc, #140]	@ (80127b4 <batteryChargeCheck+0xd8>)
 8012726:	2200      	movs	r2, #0
 8012728:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.50 && batteryCharge < 3.69) {
#else
  if (batteryCharge >= 3.75 && batteryCharge < 3.85) {
 801272a:	4b1e      	ldr	r3, [pc, #120]	@ (80127a4 <batteryChargeCheck+0xc8>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4920      	ldr	r1, [pc, #128]	@ (80127b0 <batteryChargeCheck+0xd4>)
 8012730:	1c18      	adds	r0, r3, #0
 8012732:	f7ed ff1b 	bl	800056c <__aeabi_fcmpge>
 8012736:	1e03      	subs	r3, r0, #0
 8012738:	d00d      	beq.n	8012756 <batteryChargeCheck+0x7a>
 801273a:	4b1a      	ldr	r3, [pc, #104]	@ (80127a4 <batteryChargeCheck+0xc8>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	1c18      	adds	r0, r3, #0
 8012740:	f7f1 f8a8 	bl	8003894 <__aeabi_f2d>
 8012744:	4a1c      	ldr	r2, [pc, #112]	@ (80127b8 <batteryChargeCheck+0xdc>)
 8012746:	4b1d      	ldr	r3, [pc, #116]	@ (80127bc <batteryChargeCheck+0xe0>)
 8012748:	f7ed feb8 	bl	80004bc <__aeabi_dcmplt>
 801274c:	1e03      	subs	r3, r0, #0
 801274e:	d002      	beq.n	8012756 <batteryChargeCheck+0x7a>
#endif
    batteryStatus = BATTERY_LOW;
 8012750:	4b18      	ldr	r3, [pc, #96]	@ (80127b4 <batteryChargeCheck+0xd8>)
 8012752:	2201      	movs	r2, #1
 8012754:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.69 && batteryCharge < 3.98) {
#else
    if (batteryCharge >= 3.85 && batteryCharge < 4.00) {
 8012756:	4b13      	ldr	r3, [pc, #76]	@ (80127a4 <batteryChargeCheck+0xc8>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	1c18      	adds	r0, r3, #0
 801275c:	f7f1 f89a 	bl	8003894 <__aeabi_f2d>
 8012760:	4a15      	ldr	r2, [pc, #84]	@ (80127b8 <batteryChargeCheck+0xdc>)
 8012762:	4b16      	ldr	r3, [pc, #88]	@ (80127bc <batteryChargeCheck+0xe0>)
 8012764:	f7ed fec8 	bl	80004f8 <__aeabi_dcmpge>
 8012768:	1e03      	subs	r3, r0, #0
 801276a:	d00b      	beq.n	8012784 <batteryChargeCheck+0xa8>
 801276c:	4b0d      	ldr	r3, [pc, #52]	@ (80127a4 <batteryChargeCheck+0xc8>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2181      	movs	r1, #129	@ 0x81
 8012772:	05c9      	lsls	r1, r1, #23
 8012774:	1c18      	adds	r0, r3, #0
 8012776:	f7ed fedb 	bl	8000530 <__aeabi_fcmplt>
 801277a:	1e03      	subs	r3, r0, #0
 801277c:	d002      	beq.n	8012784 <batteryChargeCheck+0xa8>
#endif
    batteryStatus = BATTERY_GOOD;
 801277e:	4b0d      	ldr	r3, [pc, #52]	@ (80127b4 <batteryChargeCheck+0xd8>)
 8012780:	2202      	movs	r2, #2
 8012782:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.98) {
#else
  if (batteryCharge >= 4.00) {
 8012784:	4b07      	ldr	r3, [pc, #28]	@ (80127a4 <batteryChargeCheck+0xc8>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	2181      	movs	r1, #129	@ 0x81
 801278a:	05c9      	lsls	r1, r1, #23
 801278c:	1c18      	adds	r0, r3, #0
 801278e:	f7ed feed 	bl	800056c <__aeabi_fcmpge>
 8012792:	1e03      	subs	r3, r0, #0
 8012794:	d100      	bne.n	8012798 <batteryChargeCheck+0xbc>
#endif
    batteryStatus = BATTERY_FULL;
  }
}
 8012796:	e002      	b.n	801279e <batteryChargeCheck+0xc2>
    batteryStatus = BATTERY_FULL;
 8012798:	4b06      	ldr	r3, [pc, #24]	@ (80127b4 <batteryChargeCheck+0xd8>)
 801279a:	2203      	movs	r2, #3
 801279c:	701a      	strb	r2, [r3, #0]
}
 801279e:	46c0      	nop			@ (mov r8, r8)
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bdb0      	pop	{r4, r5, r7, pc}
 80127a4:	20002158 	.word	0x20002158
 80127a8:	0802dbc8 	.word	0x0802dbc8
 80127ac:	0802dbe8 	.word	0x0802dbe8
 80127b0:	40700000 	.word	0x40700000
 80127b4:	2000215d 	.word	0x2000215d
 80127b8:	cccccccd 	.word	0xcccccccd
 80127bc:	400ecccc 	.word	0x400ecccc

080127c0 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80127c0:	b5b0      	push	{r4, r5, r7, lr}
 80127c2:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80127c4:	f7f7 fa38 	bl	8009c38 <ReadSolarVoltage>
 80127c8:	0003      	movs	r3, r0
 80127ca:	001a      	movs	r2, r3
 80127cc:	4b1a      	ldr	r3, [pc, #104]	@ (8012838 <Calculate_LED_ON+0x78>)
 80127ce:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 80127d0:	4b19      	ldr	r3, [pc, #100]	@ (8012838 <Calculate_LED_ON+0x78>)
 80127d2:	881b      	ldrh	r3, [r3, #0]
 80127d4:	4a19      	ldr	r2, [pc, #100]	@ (801283c <Calculate_LED_ON+0x7c>)
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d802      	bhi.n	80127e0 <Calculate_LED_ON+0x20>
    solmV = 2900;
 80127da:	4b17      	ldr	r3, [pc, #92]	@ (8012838 <Calculate_LED_ON+0x78>)
 80127dc:	4a18      	ldr	r2, [pc, #96]	@ (8012840 <Calculate_LED_ON+0x80>)
 80127de:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 80127e0:	4b15      	ldr	r3, [pc, #84]	@ (8012838 <Calculate_LED_ON+0x78>)
 80127e2:	881b      	ldrh	r3, [r3, #0]
 80127e4:	4a17      	ldr	r2, [pc, #92]	@ (8012844 <Calculate_LED_ON+0x84>)
 80127e6:	4293      	cmp	r3, r2
 80127e8:	d902      	bls.n	80127f0 <Calculate_LED_ON+0x30>
    solmV = 4700;
 80127ea:	4b13      	ldr	r3, [pc, #76]	@ (8012838 <Calculate_LED_ON+0x78>)
 80127ec:	4a15      	ldr	r2, [pc, #84]	@ (8012844 <Calculate_LED_ON+0x84>)
 80127ee:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 80127f0:	4b11      	ldr	r3, [pc, #68]	@ (8012838 <Calculate_LED_ON+0x78>)
 80127f2:	881b      	ldrh	r3, [r3, #0]
 80127f4:	0018      	movs	r0, r3
 80127f6:	f7f0 fffb 	bl	80037f0 <__aeabi_i2d>
 80127fa:	0004      	movs	r4, r0
 80127fc:	000d      	movs	r5, r1
 80127fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012838 <Calculate_LED_ON+0x78>)
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	001a      	movs	r2, r3
 8012804:	4b10      	ldr	r3, [pc, #64]	@ (8012848 <Calculate_LED_ON+0x88>)
 8012806:	1a9b      	subs	r3, r3, r2
 8012808:	0018      	movs	r0, r3
 801280a:	f7f0 fff1 	bl	80037f0 <__aeabi_i2d>
 801280e:	2200      	movs	r2, #0
 8012810:	4b0e      	ldr	r3, [pc, #56]	@ (801284c <Calculate_LED_ON+0x8c>)
 8012812:	f7f0 f89f 	bl	8002954 <__aeabi_dmul>
 8012816:	0002      	movs	r2, r0
 8012818:	000b      	movs	r3, r1
 801281a:	0020      	movs	r0, r4
 801281c:	0029      	movs	r1, r5
 801281e:	f7ef f899 	bl	8001954 <__aeabi_dadd>
 8012822:	0002      	movs	r2, r0
 8012824:	000b      	movs	r3, r1
 8012826:	0010      	movs	r0, r2
 8012828:	0019      	movs	r1, r3
 801282a:	f7ed ff0f 	bl	800064c <__aeabi_d2uiz>
 801282e:	0003      	movs	r3, r0
 8012830:	b29b      	uxth	r3, r3
}
 8012832:	0018      	movs	r0, r3
 8012834:	46bd      	mov	sp, r7
 8012836:	bdb0      	pop	{r4, r5, r7, pc}
 8012838:	2000215e 	.word	0x2000215e
 801283c:	00000b53 	.word	0x00000b53
 8012840:	00000b54 	.word	0x00000b54
 8012844:	0000125c 	.word	0x0000125c
 8012848:	00000dee 	.word	0x00000dee
 801284c:	3ff80000 	.word	0x3ff80000

08012850 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012850:	b590      	push	{r4, r7, lr}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	0004      	movs	r4, r0
 8012858:	0008      	movs	r0, r1
 801285a:	0011      	movs	r1, r2
 801285c:	1dbb      	adds	r3, r7, #6
 801285e:	1c22      	adds	r2, r4, #0
 8012860:	801a      	strh	r2, [r3, #0]
 8012862:	1d3b      	adds	r3, r7, #4
 8012864:	1c02      	adds	r2, r0, #0
 8012866:	801a      	strh	r2, [r3, #0]
 8012868:	1cbb      	adds	r3, r7, #2
 801286a:	1c0a      	adds	r2, r1, #0
 801286c:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 801286e:	4b0d      	ldr	r3, [pc, #52]	@ (80128a4 <SetStatusLED+0x54>)
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d103      	bne.n	801287e <SetStatusLED+0x2e>
 8012876:	4b0c      	ldr	r3, [pc, #48]	@ (80128a8 <SetStatusLED+0x58>)
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d00e      	beq.n	801289c <SetStatusLED+0x4c>
    TIM2 -> CCR1 = red;
 801287e:	2380      	movs	r3, #128	@ 0x80
 8012880:	05db      	lsls	r3, r3, #23
 8012882:	1dba      	adds	r2, r7, #6
 8012884:	8812      	ldrh	r2, [r2, #0]
 8012886:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8012888:	2380      	movs	r3, #128	@ 0x80
 801288a:	05db      	lsls	r3, r3, #23
 801288c:	1d3a      	adds	r2, r7, #4
 801288e:	8812      	ldrh	r2, [r2, #0]
 8012890:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8012892:	2380      	movs	r3, #128	@ 0x80
 8012894:	05db      	lsls	r3, r3, #23
 8012896:	1cba      	adds	r2, r7, #2
 8012898:	8812      	ldrh	r2, [r2, #0]
 801289a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801289c:	46c0      	nop			@ (mov r8, r8)
 801289e:	46bd      	mov	sp, r7
 80128a0:	b003      	add	sp, #12
 80128a2:	bd90      	pop	{r4, r7, pc}
 80128a4:	200000e8 	.word	0x200000e8
 80128a8:	2000214e 	.word	0x2000214e

080128ac <SetDBLED>:

// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80128ac:	b590      	push	{r4, r7, lr}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	0004      	movs	r4, r0
 80128b4:	0008      	movs	r0, r1
 80128b6:	0011      	movs	r1, r2
 80128b8:	1dfb      	adds	r3, r7, #7
 80128ba:	1c22      	adds	r2, r4, #0
 80128bc:	701a      	strb	r2, [r3, #0]
 80128be:	1dbb      	adds	r3, r7, #6
 80128c0:	1c02      	adds	r2, r0, #0
 80128c2:	701a      	strb	r2, [r3, #0]
 80128c4:	1d7b      	adds	r3, r7, #5
 80128c6:	1c0a      	adds	r2, r1, #0
 80128c8:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(init || userToggle){
 80128ca:	4b17      	ldr	r3, [pc, #92]	@ (8012928 <SetDBLED+0x7c>)
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d103      	bne.n	80128da <SetDBLED+0x2e>
 80128d2:	4b16      	ldr	r3, [pc, #88]	@ (801292c <SetDBLED+0x80>)
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d022      	beq.n	8012920 <SetDBLED+0x74>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80128da:	1dfb      	adds	r3, r7, #7
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	2201      	movs	r2, #1
 80128e0:	4053      	eors	r3, r2
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	001a      	movs	r2, r3
 80128e6:	4b12      	ldr	r3, [pc, #72]	@ (8012930 <SetDBLED+0x84>)
 80128e8:	2101      	movs	r1, #1
 80128ea:	0018      	movs	r0, r3
 80128ec:	f003 fab9 	bl	8015e62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 80128f0:	1dbb      	adds	r3, r7, #6
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2201      	movs	r2, #1
 80128f6:	4053      	eors	r3, r2
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	001a      	movs	r2, r3
 80128fc:	2380      	movs	r3, #128	@ 0x80
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	480b      	ldr	r0, [pc, #44]	@ (8012930 <SetDBLED+0x84>)
 8012902:	0019      	movs	r1, r3
 8012904:	f003 faad 	bl	8015e62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8012908:	1d7b      	adds	r3, r7, #5
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2201      	movs	r2, #1
 801290e:	4053      	eors	r3, r2
 8012910:	b2db      	uxtb	r3, r3
 8012912:	001a      	movs	r2, r3
 8012914:	2380      	movs	r3, #128	@ 0x80
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4805      	ldr	r0, [pc, #20]	@ (8012930 <SetDBLED+0x84>)
 801291a:	0019      	movs	r1, r3
 801291c:	f003 faa1 	bl	8015e62 <HAL_GPIO_WritePin>
  }
}
 8012920:	46c0      	nop			@ (mov r8, r8)
 8012922:	46bd      	mov	sp, r7
 8012924:	b003      	add	sp, #12
 8012926:	bd90      	pop	{r4, r7, pc}
 8012928:	200000e8 	.word	0x200000e8
 801292c:	2000214e 	.word	0x2000214e
 8012930:	50000400 	.word	0x50000400

08012934 <SetVocLED>:

// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012934:	b590      	push	{r4, r7, lr}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
 801293a:	0004      	movs	r4, r0
 801293c:	0008      	movs	r0, r1
 801293e:	0011      	movs	r1, r2
 8012940:	1dbb      	adds	r3, r7, #6
 8012942:	1c22      	adds	r2, r4, #0
 8012944:	801a      	strh	r2, [r3, #0]
 8012946:	1d3b      	adds	r3, r7, #4
 8012948:	1c02      	adds	r2, r0, #0
 801294a:	801a      	strh	r2, [r3, #0]
 801294c:	1cbb      	adds	r3, r7, #2
 801294e:	1c0a      	adds	r2, r1, #0
 8012950:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 8012952:	4b0c      	ldr	r3, [pc, #48]	@ (8012984 <SetVocLED+0x50>)
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d103      	bne.n	8012962 <SetVocLED+0x2e>
 801295a:	4b0b      	ldr	r3, [pc, #44]	@ (8012988 <SetVocLED+0x54>)
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d00b      	beq.n	801297a <SetVocLED+0x46>
    TIM3 -> CCR1 = red;
 8012962:	4b0a      	ldr	r3, [pc, #40]	@ (801298c <SetVocLED+0x58>)
 8012964:	1dba      	adds	r2, r7, #6
 8012966:	8812      	ldrh	r2, [r2, #0]
 8012968:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 801296a:	4b08      	ldr	r3, [pc, #32]	@ (801298c <SetVocLED+0x58>)
 801296c:	1d3a      	adds	r2, r7, #4
 801296e:	8812      	ldrh	r2, [r2, #0]
 8012970:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8012972:	4b06      	ldr	r3, [pc, #24]	@ (801298c <SetVocLED+0x58>)
 8012974:	1cba      	adds	r2, r7, #2
 8012976:	8812      	ldrh	r2, [r2, #0]
 8012978:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801297a:	46c0      	nop			@ (mov r8, r8)
 801297c:	46bd      	mov	sp, r7
 801297e:	b003      	add	sp, #12
 8012980:	bd90      	pop	{r4, r7, pc}
 8012982:	46c0      	nop			@ (mov r8, r8)
 8012984:	200000e8 	.word	0x200000e8
 8012988:	2000214e 	.word	0x2000214e
 801298c:	40000400 	.word	0x40000400

08012990 <SetMeasurementIndicator>:

void SetMeasurementIndicator(){
 8012990:	b580      	push	{r7, lr}
 8012992:	af00      	add	r7, sp, #0
  if(userToggle){
 8012994:	4b06      	ldr	r3, [pc, #24]	@ (80129b0 <SetMeasurementIndicator+0x20>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d006      	beq.n	80129aa <SetMeasurementIndicator+0x1a>
    TIM2 -> CCR3 = Calculate_LED_ON();
 801299c:	f7ff ff10 	bl	80127c0 <Calculate_LED_ON>
 80129a0:	0003      	movs	r3, r0
 80129a2:	001a      	movs	r2, r3
 80129a4:	2380      	movs	r3, #128	@ 0x80
 80129a6:	05db      	lsls	r3, r3, #23
 80129a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80129aa:	46c0      	nop			@ (mov r8, r8)
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	2000214e 	.word	0x2000214e

080129b4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80129b4:	b580      	push	{r7, lr}
 80129b6:	af00      	add	r7, sp, #0
  if(userToggle){
 80129b8:	4b05      	ldr	r3, [pc, #20]	@ (80129d0 <ResetMeasurementIndicator+0x1c>)
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d004      	beq.n	80129ca <ResetMeasurementIndicator+0x16>
    TIM2 -> CCR3 = LED_OFF;
 80129c0:	2380      	movs	r3, #128	@ 0x80
 80129c2:	05db      	lsls	r3, r3, #23
 80129c4:	22fa      	movs	r2, #250	@ 0xfa
 80129c6:	0112      	lsls	r2, r2, #4
 80129c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80129ca:	46c0      	nop			@ (mov r8, r8)
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	2000214e 	.word	0x2000214e

080129d4 <SetChargeIndicator>:

void SetChargeIndicator(){
 80129d4:	b580      	push	{r7, lr}
 80129d6:	af00      	add	r7, sp, #0
  if(usbPluggedIn){
 80129d8:	4b19      	ldr	r3, [pc, #100]	@ (8012a40 <SetChargeIndicator+0x6c>)
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d011      	beq.n	8012a04 <SetChargeIndicator+0x30>
    if (batteryChargeMode == CHARGING_ON) {
 80129e0:	4b18      	ldr	r3, [pc, #96]	@ (8012a44 <SetChargeIndicator+0x70>)
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d10d      	bne.n	8012a04 <SetChargeIndicator+0x30>
      TIM2 -> CCR1 = Calculate_LED_ON();  // red
 80129e8:	f7ff feea 	bl	80127c0 <Calculate_LED_ON>
 80129ec:	0003      	movs	r3, r0
 80129ee:	001a      	movs	r2, r3
 80129f0:	2380      	movs	r3, #128	@ 0x80
 80129f2:	05db      	lsls	r3, r3, #23
 80129f4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = Calculate_LED_ON();  //green, create yellow statusled
 80129f6:	f7ff fee3 	bl	80127c0 <Calculate_LED_ON>
 80129fa:	0003      	movs	r3, r0
 80129fc:	001a      	movs	r2, r3
 80129fe:	2380      	movs	r3, #128	@ 0x80
 8012a00:	05db      	lsls	r3, r3, #23
 8012a02:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }
  // in case of not charging or full only one color is active.
  if (batteryCharge > 3.7) {
 8012a04:	4b10      	ldr	r3, [pc, #64]	@ (8012a48 <SetChargeIndicator+0x74>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	1c18      	adds	r0, r3, #0
 8012a0a:	f7f0 ff43 	bl	8003894 <__aeabi_f2d>
 8012a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8012a4c <SetChargeIndicator+0x78>)
 8012a10:	4b0f      	ldr	r3, [pc, #60]	@ (8012a50 <SetChargeIndicator+0x7c>)
 8012a12:	f7ed fd67 	bl	80004e4 <__aeabi_dcmpgt>
 8012a16:	1e03      	subs	r3, r0, #0
 8012a18:	d007      	beq.n	8012a2a <SetChargeIndicator+0x56>
    TIM2 -> CCR3 = Calculate_LED_ON();  // green
 8012a1a:	f7ff fed1 	bl	80127c0 <Calculate_LED_ON>
 8012a1e:	0003      	movs	r3, r0
 8012a20:	001a      	movs	r2, r3
 8012a22:	2380      	movs	r3, #128	@ 0x80
 8012a24:	05db      	lsls	r3, r3, #23
 8012a26:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  else {
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
  }
}
 8012a28:	e006      	b.n	8012a38 <SetChargeIndicator+0x64>
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
 8012a2a:	f7ff fec9 	bl	80127c0 <Calculate_LED_ON>
 8012a2e:	0003      	movs	r3, r0
 8012a30:	001a      	movs	r2, r3
 8012a32:	2380      	movs	r3, #128	@ 0x80
 8012a34:	05db      	lsls	r3, r3, #23
 8012a36:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012a38:	46c0      	nop			@ (mov r8, r8)
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	46c0      	nop			@ (mov r8, r8)
 8012a40:	2000214d 	.word	0x2000214d
 8012a44:	2000215c 	.word	0x2000215c
 8012a48:	20002158 	.word	0x20002158
 8012a4c:	9999999a 	.word	0x9999999a
 8012a50:	400d9999 	.word	0x400d9999

08012a54 <ResetChargeIndicator>:

void ResetChargeIndicator(){
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
      TIM2 -> CCR3 = LED_OFF;
 8012a58:	2380      	movs	r3, #128	@ 0x80
 8012a5a:	05db      	lsls	r3, r3, #23
 8012a5c:	22fa      	movs	r2, #250	@ 0xfa
 8012a5e:	0112      	lsls	r2, r2, #4
 8012a60:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR1 = LED_OFF;
 8012a62:	2380      	movs	r3, #128	@ 0x80
 8012a64:	05db      	lsls	r3, r3, #23
 8012a66:	22fa      	movs	r2, #250	@ 0xfa
 8012a68:	0112      	lsls	r2, r2, #4
 8012a6a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012a6c:	46c0      	nop			@ (mov r8, r8)
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
	...

08012a74 <SetESPIndicator>:

void SetESPIndicator(){
 8012a74:	b580      	push	{r7, lr}
 8012a76:	af00      	add	r7, sp, #0
  if(userToggle){
 8012a78:	4b06      	ldr	r3, [pc, #24]	@ (8012a94 <SetESPIndicator+0x20>)
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d006      	beq.n	8012a8e <SetESPIndicator+0x1a>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012a80:	f7ff fe9e 	bl	80127c0 <Calculate_LED_ON>
 8012a84:	0003      	movs	r3, r0
 8012a86:	001a      	movs	r2, r3
 8012a88:	2380      	movs	r3, #128	@ 0x80
 8012a8a:	05db      	lsls	r3, r3, #23
 8012a8c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012a8e:	46c0      	nop			@ (mov r8, r8)
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	2000214e 	.word	0x2000214e

08012a98 <ResetESPIndicator>:
void ResetESPIndicator(){
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	af00      	add	r7, sp, #0
  if(userToggle){
 8012a9c:	4b05      	ldr	r3, [pc, #20]	@ (8012ab4 <ResetESPIndicator+0x1c>)
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d004      	beq.n	8012aae <ResetESPIndicator+0x16>
    TIM2 -> CCR4 = LED_OFF;
 8012aa4:	2380      	movs	r3, #128	@ 0x80
 8012aa6:	05db      	lsls	r3, r3, #23
 8012aa8:	22fa      	movs	r2, #250	@ 0xfa
 8012aaa:	0112      	lsls	r2, r2, #4
 8012aac:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012aae:	46c0      	nop			@ (mov r8, r8)
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	2000214e 	.word	0x2000214e

08012ab8 <SetPMIndicator>:

void SetPMIndicator() {
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	af00      	add	r7, sp, #0
  if(userToggle){
 8012abc:	4b0d      	ldr	r3, [pc, #52]	@ (8012af4 <SetPMIndicator+0x3c>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d014      	beq.n	8012aee <SetPMIndicator+0x36>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012ac4:	f7ff fe7c 	bl	80127c0 <Calculate_LED_ON>
 8012ac8:	0003      	movs	r3, r0
 8012aca:	001a      	movs	r2, r3
 8012acc:	2380      	movs	r3, #128	@ 0x80
 8012ace:	05db      	lsls	r3, r3, #23
 8012ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012ad2:	f7ff fe75 	bl	80127c0 <Calculate_LED_ON>
 8012ad6:	0003      	movs	r3, r0
 8012ad8:	001a      	movs	r2, r3
 8012ada:	2380      	movs	r3, #128	@ 0x80
 8012adc:	05db      	lsls	r3, r3, #23
 8012ade:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012ae0:	f7ff fe6e 	bl	80127c0 <Calculate_LED_ON>
 8012ae4:	0003      	movs	r3, r0
 8012ae6:	001a      	movs	r2, r3
 8012ae8:	2380      	movs	r3, #128	@ 0x80
 8012aea:	05db      	lsls	r3, r3, #23
 8012aec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012aee:	46c0      	nop			@ (mov r8, r8)
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	2000214e 	.word	0x2000214e

08012af8 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012af8:	b580      	push	{r7, lr}
 8012afa:	af00      	add	r7, sp, #0
  if(userToggle){
 8012afc:	4b0a      	ldr	r3, [pc, #40]	@ (8012b28 <ResetPMIndicator+0x30>)
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d00e      	beq.n	8012b22 <ResetPMIndicator+0x2a>
    TIM2 -> CCR4 = LED_OFF;
 8012b04:	2380      	movs	r3, #128	@ 0x80
 8012b06:	05db      	lsls	r3, r3, #23
 8012b08:	22fa      	movs	r2, #250	@ 0xfa
 8012b0a:	0112      	lsls	r2, r2, #4
 8012b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012b0e:	2380      	movs	r3, #128	@ 0x80
 8012b10:	05db      	lsls	r3, r3, #23
 8012b12:	22fa      	movs	r2, #250	@ 0xfa
 8012b14:	0112      	lsls	r2, r2, #4
 8012b16:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012b18:	2380      	movs	r3, #128	@ 0x80
 8012b1a:	05db      	lsls	r3, r3, #23
 8012b1c:	22fa      	movs	r2, #250	@ 0xfa
 8012b1e:	0112      	lsls	r2, r2, #4
 8012b20:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012b22:	46c0      	nop			@ (mov r8, r8)
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	2000214e 	.word	0x2000214e

08012b2c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff() {
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012b30:	23fa      	movs	r3, #250	@ 0xfa
 8012b32:	011a      	lsls	r2, r3, #4
 8012b34:	23fa      	movs	r3, #250	@ 0xfa
 8012b36:	0119      	lsls	r1, r3, #4
 8012b38:	23fa      	movs	r3, #250	@ 0xfa
 8012b3a:	011b      	lsls	r3, r3, #4
 8012b3c:	0018      	movs	r0, r3
 8012b3e:	f7ff fe87 	bl	8012850 <SetStatusLED>
  SetDBLED(false,false,false);
 8012b42:	2200      	movs	r2, #0
 8012b44:	2100      	movs	r1, #0
 8012b46:	2000      	movs	r0, #0
 8012b48:	f7ff feb0 	bl	80128ac <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012b4c:	23fa      	movs	r3, #250	@ 0xfa
 8012b4e:	011a      	lsls	r2, r3, #4
 8012b50:	23fa      	movs	r3, #250	@ 0xfa
 8012b52:	0119      	lsls	r1, r3, #4
 8012b54:	23fa      	movs	r3, #250	@ 0xfa
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	0018      	movs	r0, r3
 8012b5a:	f7ff feeb 	bl	8012934 <SetVocLED>
return;
 8012b5e:	46c0      	nop			@ (mov r8, r8)
}
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}

08012b64 <SetAllREDLED>:

void SetAllREDLED() {
 8012b64:	b580      	push	{r7, lr}
 8012b66:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012b68:	f7ff ffe0 	bl	8012b2c <SetLEDsOff>
  TIM2 -> CCR1 = LED_ON;
 8012b6c:	2380      	movs	r3, #128	@ 0x80
 8012b6e:	05db      	lsls	r3, r3, #23
 8012b70:	4a20      	ldr	r2, [pc, #128]	@ (8012bf4 <SetAllREDLED+0x90>)
 8012b72:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012b74:	2380      	movs	r3, #128	@ 0x80
 8012b76:	05db      	lsls	r3, r3, #23
 8012b78:	22fa      	movs	r2, #250	@ 0xfa
 8012b7a:	0112      	lsls	r2, r2, #4
 8012b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012b7e:	2380      	movs	r3, #128	@ 0x80
 8012b80:	05db      	lsls	r3, r3, #23
 8012b82:	22fa      	movs	r2, #250	@ 0xfa
 8012b84:	0112      	lsls	r2, r2, #4
 8012b86:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012b88:	4b1b      	ldr	r3, [pc, #108]	@ (8012bf8 <SetAllREDLED+0x94>)
 8012b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8012bf4 <SetAllREDLED+0x90>)
 8012b8c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8012bf8 <SetAllREDLED+0x94>)
 8012b90:	22fa      	movs	r2, #250	@ 0xfa
 8012b92:	0112      	lsls	r2, r2, #4
 8012b94:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012b96:	4b18      	ldr	r3, [pc, #96]	@ (8012bf8 <SetAllREDLED+0x94>)
 8012b98:	22fa      	movs	r2, #250	@ 0xfa
 8012b9a:	0112      	lsls	r2, r2, #4
 8012b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012b9e:	4b17      	ldr	r3, [pc, #92]	@ (8012bfc <SetAllREDLED+0x98>)
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	2101      	movs	r1, #1
 8012ba4:	0018      	movs	r0, r3
 8012ba6:	f003 f95c 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012baa:	2380      	movs	r3, #128	@ 0x80
 8012bac:	005b      	lsls	r3, r3, #1
 8012bae:	4813      	ldr	r0, [pc, #76]	@ (8012bfc <SetAllREDLED+0x98>)
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	0019      	movs	r1, r3
 8012bb4:	f003 f955 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012bb8:	2380      	movs	r3, #128	@ 0x80
 8012bba:	009b      	lsls	r3, r3, #2
 8012bbc:	480f      	ldr	r0, [pc, #60]	@ (8012bfc <SetAllREDLED+0x98>)
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	0019      	movs	r1, r3
 8012bc2:	f003 f94e 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012bc6:	23fa      	movs	r3, #250	@ 0xfa
 8012bc8:	005b      	lsls	r3, r3, #1
 8012bca:	0018      	movs	r0, r3
 8012bcc:	f001 feec 	bl	80149a8 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012bd0:	2380      	movs	r3, #128	@ 0x80
 8012bd2:	05db      	lsls	r3, r3, #23
 8012bd4:	22fa      	movs	r2, #250	@ 0xfa
 8012bd6:	0112      	lsls	r2, r2, #4
 8012bd8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR1 = LED_OFF;
 8012bda:	4b07      	ldr	r3, [pc, #28]	@ (8012bf8 <SetAllREDLED+0x94>)
 8012bdc:	22fa      	movs	r2, #250	@ 0xfa
 8012bde:	0112      	lsls	r2, r2, #4
 8012be0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012be2:	4b06      	ldr	r3, [pc, #24]	@ (8012bfc <SetAllREDLED+0x98>)
 8012be4:	2201      	movs	r2, #1
 8012be6:	2101      	movs	r1, #1
 8012be8:	0018      	movs	r0, r3
 8012bea:	f003 f93a 	bl	8015e62 <HAL_GPIO_WritePin>
}
 8012bee:	46c0      	nop			@ (mov r8, r8)
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	00000bb8 	.word	0x00000bb8
 8012bf8:	40000400 	.word	0x40000400
 8012bfc:	50000400 	.word	0x50000400

08012c00 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012c04:	f7ff ff92 	bl	8012b2c <SetLEDsOff>
  HAL_Delay(100);
 8012c08:	2064      	movs	r0, #100	@ 0x64
 8012c0a:	f001 fecd 	bl	80149a8 <HAL_Delay>

  TIM3 -> CCR1 = LED_ON;
 8012c0e:	4b24      	ldr	r3, [pc, #144]	@ (8012ca0 <WalkAllRedLED+0xa0>)
 8012c10:	4a24      	ldr	r2, [pc, #144]	@ (8012ca4 <WalkAllRedLED+0xa4>)
 8012c12:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012c14:	4b22      	ldr	r3, [pc, #136]	@ (8012ca0 <WalkAllRedLED+0xa0>)
 8012c16:	22fa      	movs	r2, #250	@ 0xfa
 8012c18:	0112      	lsls	r2, r2, #4
 8012c1a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012c1c:	4b20      	ldr	r3, [pc, #128]	@ (8012ca0 <WalkAllRedLED+0xa0>)
 8012c1e:	22fa      	movs	r2, #250	@ 0xfa
 8012c20:	0112      	lsls	r2, r2, #4
 8012c22:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 8012c24:	2064      	movs	r0, #100	@ 0x64
 8012c26:	f001 febf 	bl	80149a8 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8012ca0 <WalkAllRedLED+0xa0>)
 8012c2c:	22fa      	movs	r2, #250	@ 0xfa
 8012c2e:	0112      	lsls	r2, r2, #4
 8012c30:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012c32:	4b1d      	ldr	r3, [pc, #116]	@ (8012ca8 <WalkAllRedLED+0xa8>)
 8012c34:	2200      	movs	r2, #0
 8012c36:	2101      	movs	r1, #1
 8012c38:	0018      	movs	r0, r3
 8012c3a:	f003 f912 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012c3e:	2380      	movs	r3, #128	@ 0x80
 8012c40:	005b      	lsls	r3, r3, #1
 8012c42:	4819      	ldr	r0, [pc, #100]	@ (8012ca8 <WalkAllRedLED+0xa8>)
 8012c44:	2201      	movs	r2, #1
 8012c46:	0019      	movs	r1, r3
 8012c48:	f003 f90b 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012c4c:	2380      	movs	r3, #128	@ 0x80
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	4815      	ldr	r0, [pc, #84]	@ (8012ca8 <WalkAllRedLED+0xa8>)
 8012c52:	2201      	movs	r2, #1
 8012c54:	0019      	movs	r1, r3
 8012c56:	f003 f904 	bl	8015e62 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8012c5a:	2064      	movs	r0, #100	@ 0x64
 8012c5c:	f001 fea4 	bl	80149a8 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012c60:	4b11      	ldr	r3, [pc, #68]	@ (8012ca8 <WalkAllRedLED+0xa8>)
 8012c62:	2201      	movs	r2, #1
 8012c64:	2101      	movs	r1, #1
 8012c66:	0018      	movs	r0, r3
 8012c68:	f003 f8fb 	bl	8015e62 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = LED_ON;
 8012c6c:	2380      	movs	r3, #128	@ 0x80
 8012c6e:	05db      	lsls	r3, r3, #23
 8012c70:	4a0c      	ldr	r2, [pc, #48]	@ (8012ca4 <WalkAllRedLED+0xa4>)
 8012c72:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012c74:	2380      	movs	r3, #128	@ 0x80
 8012c76:	05db      	lsls	r3, r3, #23
 8012c78:	22fa      	movs	r2, #250	@ 0xfa
 8012c7a:	0112      	lsls	r2, r2, #4
 8012c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012c7e:	2380      	movs	r3, #128	@ 0x80
 8012c80:	05db      	lsls	r3, r3, #23
 8012c82:	22fa      	movs	r2, #250	@ 0xfa
 8012c84:	0112      	lsls	r2, r2, #4
 8012c86:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8012c88:	2064      	movs	r0, #100	@ 0x64
 8012c8a:	f001 fe8d 	bl	80149a8 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012c8e:	2380      	movs	r3, #128	@ 0x80
 8012c90:	05db      	lsls	r3, r3, #23
 8012c92:	22fa      	movs	r2, #250	@ 0xfa
 8012c94:	0112      	lsls	r2, r2, #4
 8012c96:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012c98:	46c0      	nop			@ (mov r8, r8)
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	46c0      	nop			@ (mov r8, r8)
 8012ca0:	40000400 	.word	0x40000400
 8012ca4:	00000bb8 	.word	0x00000bb8
 8012ca8:	50000400 	.word	0x50000400

08012cac <SetAllBlueLED>:

void SetAllBlueLED() {
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012cb2:	1dfb      	adds	r3, r7, #7
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	701a      	strb	r2, [r3, #0]
 8012cb8:	e040      	b.n	8012d3c <SetAllBlueLED+0x90>
    TIM2 -> CCR1 = LED_OFF;
 8012cba:	2380      	movs	r3, #128	@ 0x80
 8012cbc:	05db      	lsls	r3, r3, #23
 8012cbe:	22fa      	movs	r2, #250	@ 0xfa
 8012cc0:	0112      	lsls	r2, r2, #4
 8012cc2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012cc4:	2380      	movs	r3, #128	@ 0x80
 8012cc6:	05db      	lsls	r3, r3, #23
 8012cc8:	22fa      	movs	r2, #250	@ 0xfa
 8012cca:	0112      	lsls	r2, r2, #4
 8012ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012cce:	2380      	movs	r3, #128	@ 0x80
 8012cd0:	05db      	lsls	r3, r3, #23
 8012cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8012d50 <SetAllBlueLED+0xa4>)
 8012cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8012d54 <SetAllBlueLED+0xa8>)
 8012cd8:	22fa      	movs	r2, #250	@ 0xfa
 8012cda:	0112      	lsls	r2, r2, #4
 8012cdc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012cde:	4b1d      	ldr	r3, [pc, #116]	@ (8012d54 <SetAllBlueLED+0xa8>)
 8012ce0:	22fa      	movs	r2, #250	@ 0xfa
 8012ce2:	0112      	lsls	r2, r2, #4
 8012ce4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8012d54 <SetAllBlueLED+0xa8>)
 8012ce8:	4a19      	ldr	r2, [pc, #100]	@ (8012d50 <SetAllBlueLED+0xa4>)
 8012cea:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012cec:	4b1a      	ldr	r3, [pc, #104]	@ (8012d58 <SetAllBlueLED+0xac>)
 8012cee:	2201      	movs	r2, #1
 8012cf0:	2101      	movs	r1, #1
 8012cf2:	0018      	movs	r0, r3
 8012cf4:	f003 f8b5 	bl	8015e62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012cf8:	2380      	movs	r3, #128	@ 0x80
 8012cfa:	005b      	lsls	r3, r3, #1
 8012cfc:	4816      	ldr	r0, [pc, #88]	@ (8012d58 <SetAllBlueLED+0xac>)
 8012cfe:	2201      	movs	r2, #1
 8012d00:	0019      	movs	r1, r3
 8012d02:	f003 f8ae 	bl	8015e62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012d06:	2380      	movs	r3, #128	@ 0x80
 8012d08:	009b      	lsls	r3, r3, #2
 8012d0a:	4813      	ldr	r0, [pc, #76]	@ (8012d58 <SetAllBlueLED+0xac>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	0019      	movs	r1, r3
 8012d10:	f003 f8a7 	bl	8015e62 <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8012d14:	20fa      	movs	r0, #250	@ 0xfa
 8012d16:	f001 fe47 	bl	80149a8 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012d1a:	2380      	movs	r3, #128	@ 0x80
 8012d1c:	05db      	lsls	r3, r3, #23
 8012d1e:	22fa      	movs	r2, #250	@ 0xfa
 8012d20:	0112      	lsls	r2, r2, #4
 8012d22:	641a      	str	r2, [r3, #64]	@ 0x40
//    TIM3 -> CCR3 = LED_OFF;  // do not switch off blue VOC led
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012d24:	2380      	movs	r3, #128	@ 0x80
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	480b      	ldr	r0, [pc, #44]	@ (8012d58 <SetAllBlueLED+0xac>)
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	0019      	movs	r1, r3
 8012d2e:	f003 f898 	bl	8015e62 <HAL_GPIO_WritePin>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012d32:	1dfb      	adds	r3, r7, #7
 8012d34:	781a      	ldrb	r2, [r3, #0]
 8012d36:	1dfb      	adds	r3, r7, #7
 8012d38:	3201      	adds	r2, #1
 8012d3a:	701a      	strb	r2, [r3, #0]
 8012d3c:	1dfb      	adds	r3, r7, #7
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	2b02      	cmp	r3, #2
 8012d42:	d9ba      	bls.n	8012cba <SetAllBlueLED+0xe>
  }
}
 8012d44:	46c0      	nop			@ (mov r8, r8)
 8012d46:	46c0      	nop			@ (mov r8, r8)
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	b002      	add	sp, #8
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	46c0      	nop			@ (mov r8, r8)
 8012d50:	00000bb8 	.word	0x00000bb8
 8012d54:	40000400 	.word	0x40000400
 8012d58:	50000400 	.word	0x50000400

08012d5c <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012d5c:	b5b0      	push	{r4, r5, r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	0002      	movs	r2, r0
 8012d64:	1dbb      	adds	r3, r7, #6
 8012d66:	801a      	strh	r2, [r3, #0]
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012d68:	1dbb      	adds	r3, r7, #6
 8012d6a:	881b      	ldrh	r3, [r3, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d05a      	beq.n	8012e26 <SetVOCindicator+0xca>
 8012d70:	1dbb      	adds	r3, r7, #6
 8012d72:	881b      	ldrh	r3, [r3, #0]
 8012d74:	2b64      	cmp	r3, #100	@ 0x64
 8012d76:	d856      	bhi.n	8012e26 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012d78:	1dbb      	adds	r3, r7, #6
 8012d7a:	881b      	ldrh	r3, [r3, #0]
 8012d7c:	0018      	movs	r0, r3
 8012d7e:	f7f0 fd37 	bl	80037f0 <__aeabi_i2d>
 8012d82:	2200      	movs	r2, #0
 8012d84:	4b5f      	ldr	r3, [pc, #380]	@ (8012f04 <SetVOCindicator+0x1a8>)
 8012d86:	f7ef f9ab 	bl	80020e0 <__aeabi_ddiv>
 8012d8a:	0002      	movs	r2, r0
 8012d8c:	000b      	movs	r3, r1
 8012d8e:	2000      	movs	r0, #0
 8012d90:	495d      	ldr	r1, [pc, #372]	@ (8012f08 <SetVOCindicator+0x1ac>)
 8012d92:	f7f0 f8c5 	bl	8002f20 <__aeabi_dsub>
 8012d96:	0002      	movs	r2, r0
 8012d98:	000b      	movs	r3, r1
 8012d9a:	0014      	movs	r4, r2
 8012d9c:	001d      	movs	r5, r3
 8012d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8012f0c <SetVOCindicator+0x1b0>)
 8012da0:	881b      	ldrh	r3, [r3, #0]
 8012da2:	0018      	movs	r0, r3
 8012da4:	f7f0 fd24 	bl	80037f0 <__aeabi_i2d>
 8012da8:	0002      	movs	r2, r0
 8012daa:	000b      	movs	r3, r1
 8012dac:	0020      	movs	r0, r4
 8012dae:	0029      	movs	r1, r5
 8012db0:	f7ef fdd0 	bl	8002954 <__aeabi_dmul>
 8012db4:	0002      	movs	r2, r0
 8012db6:	000b      	movs	r3, r1
 8012db8:	0010      	movs	r0, r2
 8012dba:	0019      	movs	r1, r3
 8012dbc:	f7ed fc46 	bl	800064c <__aeabi_d2uiz>
 8012dc0:	0003      	movs	r3, r0
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	4b52      	ldr	r3, [pc, #328]	@ (8012f10 <SetVOCindicator+0x1b4>)
 8012dc6:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012dc8:	1dbb      	adds	r3, r7, #6
 8012dca:	881b      	ldrh	r3, [r3, #0]
 8012dcc:	0018      	movs	r0, r3
 8012dce:	f7f0 fd0f 	bl	80037f0 <__aeabi_i2d>
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8012f04 <SetVOCindicator+0x1a8>)
 8012dd6:	f7ef f983 	bl	80020e0 <__aeabi_ddiv>
 8012dda:	0002      	movs	r2, r0
 8012ddc:	000b      	movs	r3, r1
 8012dde:	0014      	movs	r4, r2
 8012de0:	001d      	movs	r5, r3
 8012de2:	4b4a      	ldr	r3, [pc, #296]	@ (8012f0c <SetVOCindicator+0x1b0>)
 8012de4:	881b      	ldrh	r3, [r3, #0]
 8012de6:	0018      	movs	r0, r3
 8012de8:	f7f0 fd02 	bl	80037f0 <__aeabi_i2d>
 8012dec:	0002      	movs	r2, r0
 8012dee:	000b      	movs	r3, r1
 8012df0:	0020      	movs	r0, r4
 8012df2:	0029      	movs	r1, r5
 8012df4:	f7ef fdae 	bl	8002954 <__aeabi_dmul>
 8012df8:	0002      	movs	r2, r0
 8012dfa:	000b      	movs	r3, r1
 8012dfc:	0010      	movs	r0, r2
 8012dfe:	0019      	movs	r1, r3
 8012e00:	f7ed fc24 	bl	800064c <__aeabi_d2uiz>
 8012e04:	0003      	movs	r3, r0
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	4b42      	ldr	r3, [pc, #264]	@ (8012f14 <SetVOCindicator+0x1b8>)
 8012e0a:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8012f0c <SetVOCindicator+0x1b0>)
 8012e0e:	881a      	ldrh	r2, [r3, #0]
 8012e10:	4b41      	ldr	r3, [pc, #260]	@ (8012f18 <SetVOCindicator+0x1bc>)
 8012e12:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012e14:	4b40      	ldr	r3, [pc, #256]	@ (8012f18 <SetVOCindicator+0x1bc>)
 8012e16:	8818      	ldrh	r0, [r3, #0]
 8012e18:	4b3d      	ldr	r3, [pc, #244]	@ (8012f10 <SetVOCindicator+0x1b4>)
 8012e1a:	8819      	ldrh	r1, [r3, #0]
 8012e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8012f14 <SetVOCindicator+0x1b8>)
 8012e1e:	881b      	ldrh	r3, [r3, #0]
 8012e20:	001a      	movs	r2, r3
 8012e22:	f7ff fd87 	bl	8012934 <SetVocLED>
  }
  if(VOCi > 100){
 8012e26:	1dbb      	adds	r3, r7, #6
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	2b64      	cmp	r3, #100	@ 0x64
 8012e2c:	d966      	bls.n	8012efc <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012e2e:	1dbb      	adds	r3, r7, #6
 8012e30:	881b      	ldrh	r3, [r3, #0]
 8012e32:	0018      	movs	r0, r3
 8012e34:	f7f0 fcdc 	bl	80037f0 <__aeabi_i2d>
 8012e38:	2200      	movs	r2, #0
 8012e3a:	4b32      	ldr	r3, [pc, #200]	@ (8012f04 <SetVOCindicator+0x1a8>)
 8012e3c:	f7f0 f870 	bl	8002f20 <__aeabi_dsub>
 8012e40:	0002      	movs	r2, r0
 8012e42:	000b      	movs	r3, r1
 8012e44:	0010      	movs	r0, r2
 8012e46:	0019      	movs	r1, r3
 8012e48:	2200      	movs	r2, #0
 8012e4a:	4b34      	ldr	r3, [pc, #208]	@ (8012f1c <SetVOCindicator+0x1c0>)
 8012e4c:	f7ef f948 	bl	80020e0 <__aeabi_ddiv>
 8012e50:	0002      	movs	r2, r0
 8012e52:	000b      	movs	r3, r1
 8012e54:	0014      	movs	r4, r2
 8012e56:	001d      	movs	r5, r3
 8012e58:	4b2c      	ldr	r3, [pc, #176]	@ (8012f0c <SetVOCindicator+0x1b0>)
 8012e5a:	881b      	ldrh	r3, [r3, #0]
 8012e5c:	0018      	movs	r0, r3
 8012e5e:	f7f0 fcc7 	bl	80037f0 <__aeabi_i2d>
 8012e62:	0002      	movs	r2, r0
 8012e64:	000b      	movs	r3, r1
 8012e66:	0020      	movs	r0, r4
 8012e68:	0029      	movs	r1, r5
 8012e6a:	f7ef fd73 	bl	8002954 <__aeabi_dmul>
 8012e6e:	0002      	movs	r2, r0
 8012e70:	000b      	movs	r3, r1
 8012e72:	0010      	movs	r0, r2
 8012e74:	0019      	movs	r1, r3
 8012e76:	f7ed fbe9 	bl	800064c <__aeabi_d2uiz>
 8012e7a:	0003      	movs	r3, r0
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	4b24      	ldr	r3, [pc, #144]	@ (8012f10 <SetVOCindicator+0x1b4>)
 8012e80:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012e82:	1dbb      	adds	r3, r7, #6
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	0018      	movs	r0, r3
 8012e88:	f7f0 fcb2 	bl	80037f0 <__aeabi_i2d>
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8012f04 <SetVOCindicator+0x1a8>)
 8012e90:	f7f0 f846 	bl	8002f20 <__aeabi_dsub>
 8012e94:	0002      	movs	r2, r0
 8012e96:	000b      	movs	r3, r1
 8012e98:	0010      	movs	r0, r2
 8012e9a:	0019      	movs	r1, r3
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8012f1c <SetVOCindicator+0x1c0>)
 8012ea0:	f7ef f91e 	bl	80020e0 <__aeabi_ddiv>
 8012ea4:	0002      	movs	r2, r0
 8012ea6:	000b      	movs	r3, r1
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	4917      	ldr	r1, [pc, #92]	@ (8012f08 <SetVOCindicator+0x1ac>)
 8012eac:	f7f0 f838 	bl	8002f20 <__aeabi_dsub>
 8012eb0:	0002      	movs	r2, r0
 8012eb2:	000b      	movs	r3, r1
 8012eb4:	0014      	movs	r4, r2
 8012eb6:	001d      	movs	r5, r3
 8012eb8:	4b14      	ldr	r3, [pc, #80]	@ (8012f0c <SetVOCindicator+0x1b0>)
 8012eba:	881b      	ldrh	r3, [r3, #0]
 8012ebc:	0018      	movs	r0, r3
 8012ebe:	f7f0 fc97 	bl	80037f0 <__aeabi_i2d>
 8012ec2:	0002      	movs	r2, r0
 8012ec4:	000b      	movs	r3, r1
 8012ec6:	0020      	movs	r0, r4
 8012ec8:	0029      	movs	r1, r5
 8012eca:	f7ef fd43 	bl	8002954 <__aeabi_dmul>
 8012ece:	0002      	movs	r2, r0
 8012ed0:	000b      	movs	r3, r1
 8012ed2:	0010      	movs	r0, r2
 8012ed4:	0019      	movs	r1, r3
 8012ed6:	f7ed fbb9 	bl	800064c <__aeabi_d2uiz>
 8012eda:	0003      	movs	r3, r0
 8012edc:	b29a      	uxth	r2, r3
 8012ede:	4b0e      	ldr	r3, [pc, #56]	@ (8012f18 <SetVOCindicator+0x1bc>)
 8012ee0:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8012f0c <SetVOCindicator+0x1b0>)
 8012ee4:	881a      	ldrh	r2, [r3, #0]
 8012ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8012f14 <SetVOCindicator+0x1b8>)
 8012ee8:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012eea:	4b0b      	ldr	r3, [pc, #44]	@ (8012f18 <SetVOCindicator+0x1bc>)
 8012eec:	8818      	ldrh	r0, [r3, #0]
 8012eee:	4b08      	ldr	r3, [pc, #32]	@ (8012f10 <SetVOCindicator+0x1b4>)
 8012ef0:	8819      	ldrh	r1, [r3, #0]
 8012ef2:	4b08      	ldr	r3, [pc, #32]	@ (8012f14 <SetVOCindicator+0x1b8>)
 8012ef4:	881b      	ldrh	r3, [r3, #0]
 8012ef6:	001a      	movs	r2, r3
 8012ef8:	f7ff fd1c 	bl	8012934 <SetVocLED>
  }

}
 8012efc:	46c0      	nop			@ (mov r8, r8)
 8012efe:	46bd      	mov	sp, r7
 8012f00:	b002      	add	sp, #8
 8012f02:	bdb0      	pop	{r4, r5, r7, pc}
 8012f04:	40590000 	.word	0x40590000
 8012f08:	3ff00000 	.word	0x3ff00000
 8012f0c:	200000ea 	.word	0x200000ea
 8012f10:	20002160 	.word	0x20002160
 8012f14:	20002162 	.word	0x20002162
 8012f18:	20002164 	.word	0x20002164
 8012f1c:	40790000 	.word	0x40790000

08012f20 <powerCheck>:

void powerCheck(){
 8012f20:	b580      	push	{r7, lr}
 8012f22:	af00      	add	r7, sp, #0
  batteryChargeCheck();
 8012f24:	f7ff fbda 	bl	80126dc <batteryChargeCheck>
  if(Check_USB_PowerOn()){
 8012f28:	f7f6 feda 	bl	8009ce0 <Check_USB_PowerOn>
 8012f2c:	1e03      	subs	r3, r0, #0
 8012f2e:	d002      	beq.n	8012f36 <powerCheck+0x16>
    batteryStatus = USB_PLUGGED_IN;
 8012f30:	4b02      	ldr	r3, [pc, #8]	@ (8012f3c <powerCheck+0x1c>)
 8012f32:	2204      	movs	r2, #4
 8012f34:	701a      	strb	r2, [r3, #0]
  }
}
 8012f36:	46c0      	nop			@ (mov r8, r8)
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	2000215d 	.word	0x2000215d

08012f40 <powerDisplay>:

void powerDisplay(){
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af02      	add	r7, sp, #8
  if(batteryStatus == USB_PLUGGED_IN){
 8012f46:	4b32      	ldr	r3, [pc, #200]	@ (8013010 <powerDisplay+0xd0>)
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	2b04      	cmp	r3, #4
 8012f4c:	d10f      	bne.n	8012f6e <powerDisplay+0x2e>
    Debug("USB power detected, battery: %.03fV", ReadBatteryVoltage());
 8012f4e:	f7f6 fe11 	bl	8009b74 <ReadBatteryVoltage>
 8012f52:	1c03      	adds	r3, r0, #0
 8012f54:	1c18      	adds	r0, r3, #0
 8012f56:	f7f0 fc9d 	bl	8003894 <__aeabi_f2d>
 8012f5a:	0002      	movs	r2, r0
 8012f5c:	000b      	movs	r3, r1
 8012f5e:	482d      	ldr	r0, [pc, #180]	@ (8013014 <powerDisplay+0xd4>)
 8012f60:	492d      	ldr	r1, [pc, #180]	@ (8013018 <powerDisplay+0xd8>)
 8012f62:	9200      	str	r2, [sp, #0]
 8012f64:	9301      	str	r3, [sp, #4]
 8012f66:	0002      	movs	r2, r0
 8012f68:	2003      	movs	r0, #3
 8012f6a:	f000 ff93 	bl	8013e94 <CreateLine>
  }
  if(batteryStatus == BATTERY_FULL){
 8012f6e:	4b28      	ldr	r3, [pc, #160]	@ (8013010 <powerDisplay+0xd0>)
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	2b03      	cmp	r3, #3
 8012f74:	d105      	bne.n	8012f82 <powerDisplay+0x42>
    Debug("Battery fully charged");
 8012f76:	4a29      	ldr	r2, [pc, #164]	@ (801301c <powerDisplay+0xdc>)
 8012f78:	4b27      	ldr	r3, [pc, #156]	@ (8013018 <powerDisplay+0xd8>)
 8012f7a:	0019      	movs	r1, r3
 8012f7c:	2003      	movs	r0, #3
 8012f7e:	f000 ff89 	bl	8013e94 <CreateLine>
  }
  if(batteryStatus == BATTERY_GOOD){
 8012f82:	4b23      	ldr	r3, [pc, #140]	@ (8013010 <powerDisplay+0xd0>)
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d105      	bne.n	8012f96 <powerDisplay+0x56>
    Debug("Battery status good");
 8012f8a:	4a25      	ldr	r2, [pc, #148]	@ (8013020 <powerDisplay+0xe0>)
 8012f8c:	4b22      	ldr	r3, [pc, #136]	@ (8013018 <powerDisplay+0xd8>)
 8012f8e:	0019      	movs	r1, r3
 8012f90:	2003      	movs	r0, #3
 8012f92:	f000 ff7f 	bl	8013e94 <CreateLine>
  }
  if(batteryStatus == BATTERY_LOW){
 8012f96:	4b1e      	ldr	r3, [pc, #120]	@ (8013010 <powerDisplay+0xd0>)
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d105      	bne.n	8012faa <powerDisplay+0x6a>
    Debug("Battery status low");
 8012f9e:	4a21      	ldr	r2, [pc, #132]	@ (8013024 <powerDisplay+0xe4>)
 8012fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8013018 <powerDisplay+0xd8>)
 8012fa2:	0019      	movs	r1, r3
 8012fa4:	2003      	movs	r0, #3
 8012fa6:	f000 ff75 	bl	8013e94 <CreateLine>
  }
  if(batteryStatus == BATTERY_CRITICAL){
 8012faa:	4b19      	ldr	r3, [pc, #100]	@ (8013010 <powerDisplay+0xd0>)
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d105      	bne.n	8012fbe <powerDisplay+0x7e>
    Debug("Battery is critical, stop processes");
 8012fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8013028 <powerDisplay+0xe8>)
 8012fb4:	4b18      	ldr	r3, [pc, #96]	@ (8013018 <powerDisplay+0xd8>)
 8012fb6:	0019      	movs	r1, r3
 8012fb8:	2003      	movs	r0, #3
 8012fba:	f000 ff6b 	bl	8013e94 <CreateLine>
  }
  batteryChargeMode = Read_Charge_Status();
 8012fbe:	f7f6 fead 	bl	8009d1c <Read_Charge_Status>
 8012fc2:	0003      	movs	r3, r0
 8012fc4:	001a      	movs	r2, r3
 8012fc6:	4b19      	ldr	r3, [pc, #100]	@ (801302c <powerDisplay+0xec>)
 8012fc8:	701a      	strb	r2, [r3, #0]
  switch (batteryChargeMode) {
 8012fca:	4b18      	ldr	r3, [pc, #96]	@ (801302c <powerDisplay+0xec>)
 8012fcc:	781b      	ldrb	r3, [r3, #0]
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	d013      	beq.n	8012ffa <powerDisplay+0xba>
 8012fd2:	dc19      	bgt.n	8013008 <powerDisplay+0xc8>
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d002      	beq.n	8012fde <powerDisplay+0x9e>
 8012fd8:	2b01      	cmp	r3, #1
 8012fda:	d007      	beq.n	8012fec <powerDisplay+0xac>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8012fdc:	e014      	b.n	8013008 <powerDisplay+0xc8>
    Debug("Battery charging off");
 8012fde:	4a14      	ldr	r2, [pc, #80]	@ (8013030 <powerDisplay+0xf0>)
 8012fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8013018 <powerDisplay+0xd8>)
 8012fe2:	0019      	movs	r1, r3
 8012fe4:	2003      	movs	r0, #3
 8012fe6:	f000 ff55 	bl	8013e94 <CreateLine>
    break;
 8012fea:	e00d      	b.n	8013008 <powerDisplay+0xc8>
    Debug("Battery is charging");
 8012fec:	4a11      	ldr	r2, [pc, #68]	@ (8013034 <powerDisplay+0xf4>)
 8012fee:	4b0a      	ldr	r3, [pc, #40]	@ (8013018 <powerDisplay+0xd8>)
 8012ff0:	0019      	movs	r1, r3
 8012ff2:	2003      	movs	r0, #3
 8012ff4:	f000 ff4e 	bl	8013e94 <CreateLine>
    break;
 8012ff8:	e006      	b.n	8013008 <powerDisplay+0xc8>
    Debug("Battery full, charging off");
 8012ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8013038 <powerDisplay+0xf8>)
 8012ffc:	4b06      	ldr	r3, [pc, #24]	@ (8013018 <powerDisplay+0xd8>)
 8012ffe:	0019      	movs	r1, r3
 8013000:	2003      	movs	r0, #3
 8013002:	f000 ff47 	bl	8013e94 <CreateLine>
    break;
 8013006:	46c0      	nop			@ (mov r8, r8)
}
 8013008:	46c0      	nop			@ (mov r8, r8)
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	46c0      	nop			@ (mov r8, r8)
 8013010:	2000215d 	.word	0x2000215d
 8013014:	0802dbec 	.word	0x0802dbec
 8013018:	0802dbe8 	.word	0x0802dbe8
 801301c:	0802dc10 	.word	0x0802dc10
 8013020:	0802dc28 	.word	0x0802dc28
 8013024:	0802dc3c 	.word	0x0802dc3c
 8013028:	0802dc50 	.word	0x0802dc50
 801302c:	2000215c 	.word	0x2000215c
 8013030:	0802dc74 	.word	0x0802dc74
 8013034:	0802dc8c 	.word	0x0802dc8c
 8013038:	0802dca0 	.word	0x0802dca0

0801303c <configCheck>:

void configCheck(){
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8013042:	f7f6 fec7 	bl	8009dd4 <BootButton_Pressed>
 8013046:	1e03      	subs	r3, r0, #0
 8013048:	d007      	beq.n	801305a <configCheck+0x1e>
 801304a:	f7f6 fed5 	bl	8009df8 <UserButton_Pressed>
 801304e:	1e03      	subs	r3, r0, #0
 8013050:	d003      	beq.n	801305a <configCheck+0x1e>
    configSet = true;
 8013052:	4bb5      	ldr	r3, [pc, #724]	@ (8013328 <configCheck+0x2ec>)
 8013054:	2201      	movs	r2, #1
 8013056:	701a      	strb	r2, [r3, #0]
 8013058:	e00a      	b.n	8013070 <configCheck+0x34>
  }
  else{
    configSet = false;
 801305a:	4bb3      	ldr	r3, [pc, #716]	@ (8013328 <configCheck+0x2ec>)
 801305c:	2200      	movs	r2, #0
 801305e:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8013060:	f001 fc98 	bl	8014994 <HAL_GetTick>
 8013064:	0003      	movs	r3, r0
 8013066:	22fa      	movs	r2, #250	@ 0xfa
 8013068:	00d2      	lsls	r2, r2, #3
 801306a:	189a      	adds	r2, r3, r2
 801306c:	4baf      	ldr	r3, [pc, #700]	@ (801332c <configCheck+0x2f0>)
 801306e:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8013070:	4bad      	ldr	r3, [pc, #692]	@ (8013328 <configCheck+0x2ec>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d00d      	beq.n	8013094 <configCheck+0x58>
 8013078:	4bac      	ldr	r3, [pc, #688]	@ (801332c <configCheck+0x2f0>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	0018      	movs	r0, r3
 801307e:	f000 feb3 	bl	8013de8 <TimestampIsReached>
 8013082:	1e03      	subs	r3, r0, #0
 8013084:	d006      	beq.n	8013094 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8013086:	f7f1 feaf 	bl	8004de8 <SetConfigMode>
    SetDBLED(true, true, true);
 801308a:	2201      	movs	r2, #1
 801308c:	2101      	movs	r1, #1
 801308e:	2001      	movs	r0, #1
 8013090:	f7ff fc0c 	bl	80128ac <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8013094:	f7f6 fe9e 	bl	8009dd4 <BootButton_Pressed>
 8013098:	0003      	movs	r3, r0
 801309a:	001a      	movs	r2, r3
 801309c:	2301      	movs	r3, #1
 801309e:	4053      	eors	r3, r2
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d05a      	beq.n	801315c <configCheck+0x120>
 80130a6:	f7f6 fea7 	bl	8009df8 <UserButton_Pressed>
 80130aa:	1e03      	subs	r3, r0, #0
 80130ac:	d056      	beq.n	801315c <configCheck+0x120>
 80130ae:	4ba0      	ldr	r3, [pc, #640]	@ (8013330 <configCheck+0x2f4>)
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	2201      	movs	r2, #1
 80130b4:	4053      	eors	r3, r2
 80130b6:	b2db      	uxtb	r3, r3
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d04f      	beq.n	801315c <configCheck+0x120>
 80130bc:	f7f1 feb4 	bl	8004e28 <GetReconfigMode>
 80130c0:	0003      	movs	r3, r0
 80130c2:	001a      	movs	r2, r3
 80130c4:	2301      	movs	r3, #1
 80130c6:	4053      	eors	r3, r2
 80130c8:	b2db      	uxtb	r3, r3
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d046      	beq.n	801315c <configCheck+0x120>
    SetLEDsOff();
 80130ce:	f7ff fd2d 	bl	8012b2c <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 80130d2:	4a98      	ldr	r2, [pc, #608]	@ (8013334 <configCheck+0x2f8>)
 80130d4:	4997      	ldr	r1, [pc, #604]	@ (8013334 <configCheck+0x2f8>)
 80130d6:	4b97      	ldr	r3, [pc, #604]	@ (8013334 <configCheck+0x2f8>)
 80130d8:	0018      	movs	r0, r3
 80130da:	f7ff fc2b 	bl	8012934 <SetVocLED>
    HAL_Delay(1500);
 80130de:	4b96      	ldr	r3, [pc, #600]	@ (8013338 <configCheck+0x2fc>)
 80130e0:	0018      	movs	r0, r3
 80130e2:	f001 fc61 	bl	80149a8 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 80130e6:	23fa      	movs	r3, #250	@ 0xfa
 80130e8:	011a      	lsls	r2, r3, #4
 80130ea:	23fa      	movs	r3, #250	@ 0xfa
 80130ec:	0119      	lsls	r1, r3, #4
 80130ee:	23fa      	movs	r3, #250	@ 0xfa
 80130f0:	011b      	lsls	r3, r3, #4
 80130f2:	0018      	movs	r0, r3
 80130f4:	f7ff fc1e 	bl	8012934 <SetVocLED>
    userToggle = !userToggle;
 80130f8:	4b90      	ldr	r3, [pc, #576]	@ (801333c <configCheck+0x300>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	1e5a      	subs	r2, r3, #1
 80130fe:	4193      	sbcs	r3, r2
 8013100:	b2db      	uxtb	r3, r3
 8013102:	2201      	movs	r2, #1
 8013104:	4053      	eors	r3, r2
 8013106:	b2db      	uxtb	r3, r3
 8013108:	1c1a      	adds	r2, r3, #0
 801310a:	2301      	movs	r3, #1
 801310c:	4013      	ands	r3, r2
 801310e:	b2da      	uxtb	r2, r3
 8013110:	4b8a      	ldr	r3, [pc, #552]	@ (801333c <configCheck+0x300>)
 8013112:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8013114:	4b89      	ldr	r3, [pc, #548]	@ (801333c <configCheck+0x300>)
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d002      	beq.n	8013122 <configCheck+0xe6>
      EnabledConnectedDevices();
 801311c:	f7fa fe3c 	bl	800dd98 <EnabledConnectedDevices>
 8013120:	e004      	b.n	801312c <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8013122:	f001 fc37 	bl	8014994 <HAL_GetTick>
 8013126:	0002      	movs	r2, r0
 8013128:	4b85      	ldr	r3, [pc, #532]	@ (8013340 <configCheck+0x304>)
 801312a:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 801312c:	4b83      	ldr	r3, [pc, #524]	@ (801333c <configCheck+0x300>)
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d001      	beq.n	8013138 <configCheck+0xfc>
 8013134:	4b83      	ldr	r3, [pc, #524]	@ (8013344 <configCheck+0x308>)
 8013136:	e000      	b.n	801313a <configCheck+0xfe>
 8013138:	4b83      	ldr	r3, [pc, #524]	@ (8013348 <configCheck+0x30c>)
 801313a:	4a84      	ldr	r2, [pc, #528]	@ (801334c <configCheck+0x310>)
 801313c:	4984      	ldr	r1, [pc, #528]	@ (8013350 <configCheck+0x314>)
 801313e:	2003      	movs	r0, #3
 8013140:	f000 fea8 	bl	8013e94 <CreateLine>
    userbuttonHeld = true;
 8013144:	4b7a      	ldr	r3, [pc, #488]	@ (8013330 <configCheck+0x2f4>)
 8013146:	2201      	movs	r2, #1
 8013148:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 801314a:	f001 fc23 	bl	8014994 <HAL_GetTick>
 801314e:	0003      	movs	r3, r0
 8013150:	22fa      	movs	r2, #250	@ 0xfa
 8013152:	00d2      	lsls	r2, r2, #3
 8013154:	189a      	adds	r2, r3, r2
 8013156:	4b7f      	ldr	r3, [pc, #508]	@ (8013354 <configCheck+0x318>)
 8013158:	601a      	str	r2, [r3, #0]
 801315a:	e002      	b.n	8013162 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 801315c:	4b74      	ldr	r3, [pc, #464]	@ (8013330 <configCheck+0x2f4>)
 801315e:	2200      	movs	r2, #0
 8013160:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8013162:	f7f6 fe37 	bl	8009dd4 <BootButton_Pressed>
 8013166:	0003      	movs	r3, r0
 8013168:	001a      	movs	r2, r3
 801316a:	2301      	movs	r3, #1
 801316c:	4053      	eors	r3, r2
 801316e:	b2db      	uxtb	r3, r3
 8013170:	2b00      	cmp	r3, #0
 8013172:	d100      	bne.n	8013176 <configCheck+0x13a>
 8013174:	e0a4      	b.n	80132c0 <configCheck+0x284>
 8013176:	4b6e      	ldr	r3, [pc, #440]	@ (8013330 <configCheck+0x2f4>)
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d100      	bne.n	8013180 <configCheck+0x144>
 801317e:	e09f      	b.n	80132c0 <configCheck+0x284>
 8013180:	4b74      	ldr	r3, [pc, #464]	@ (8013354 <configCheck+0x318>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	0018      	movs	r0, r3
 8013186:	f000 fe2f 	bl	8013de8 <TimestampIsReached>
 801318a:	1e03      	subs	r3, r0, #0
 801318c:	d100      	bne.n	8013190 <configCheck+0x154>
 801318e:	e097      	b.n	80132c0 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013190:	f7fa f9c0 	bl	800d514 <GetPMSensorPresence>
 8013194:	1e03      	subs	r3, r0, #0
 8013196:	d100      	bne.n	801319a <configCheck+0x15e>
 8013198:	e082      	b.n	80132a0 <configCheck+0x264>
 801319a:	4b6f      	ldr	r3, [pc, #444]	@ (8013358 <configCheck+0x31c>)
 801319c:	791b      	ldrb	r3, [r3, #4]
 801319e:	2b34      	cmp	r3, #52	@ 0x34
 80131a0:	d004      	beq.n	80131ac <configCheck+0x170>
 80131a2:	4b6d      	ldr	r3, [pc, #436]	@ (8013358 <configCheck+0x31c>)
 80131a4:	791b      	ldrb	r3, [r3, #4]
 80131a6:	2b35      	cmp	r3, #53	@ 0x35
 80131a8:	d000      	beq.n	80131ac <configCheck+0x170>
 80131aa:	e079      	b.n	80132a0 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80131ac:	4b6b      	ldr	r3, [pc, #428]	@ (801335c <configCheck+0x320>)
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	1e5a      	subs	r2, r3, #1
 80131b2:	4193      	sbcs	r3, r2
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	2201      	movs	r2, #1
 80131b8:	4053      	eors	r3, r2
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	1c1a      	adds	r2, r3, #0
 80131be:	2301      	movs	r3, #1
 80131c0:	4013      	ands	r3, r2
 80131c2:	b2da      	uxtb	r2, r3
 80131c4:	4b65      	ldr	r3, [pc, #404]	@ (801335c <configCheck+0x320>)
 80131c6:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80131c8:	4b64      	ldr	r3, [pc, #400]	@ (801335c <configCheck+0x320>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d005      	beq.n	80131dc <configCheck+0x1a0>
 80131d0:	1dbc      	adds	r4, r7, #6
 80131d2:	f7ff faf5 	bl	80127c0 <Calculate_LED_ON>
 80131d6:	0003      	movs	r3, r0
 80131d8:	8023      	strh	r3, [r4, #0]
 80131da:	e003      	b.n	80131e4 <configCheck+0x1a8>
        else color = 4000;
 80131dc:	1dbb      	adds	r3, r7, #6
 80131de:	22fa      	movs	r2, #250	@ 0xfa
 80131e0:	0112      	lsls	r2, r2, #4
 80131e2:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %sabled", VOCNOx?"en":"dis");
 80131e4:	4b5d      	ldr	r3, [pc, #372]	@ (801335c <configCheck+0x320>)
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d001      	beq.n	80131f0 <configCheck+0x1b4>
 80131ec:	4b55      	ldr	r3, [pc, #340]	@ (8013344 <configCheck+0x308>)
 80131ee:	e000      	b.n	80131f2 <configCheck+0x1b6>
 80131f0:	4b55      	ldr	r3, [pc, #340]	@ (8013348 <configCheck+0x30c>)
 80131f2:	4a5b      	ldr	r2, [pc, #364]	@ (8013360 <configCheck+0x324>)
 80131f4:	495b      	ldr	r1, [pc, #364]	@ (8013364 <configCheck+0x328>)
 80131f6:	2002      	movs	r0, #2
 80131f8:	f000 fe4c 	bl	8013e94 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 80131fc:	1d7b      	adds	r3, r7, #5
 80131fe:	2200      	movs	r2, #0
 8013200:	701a      	strb	r2, [r3, #0]
 8013202:	e028      	b.n	8013256 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8013204:	f7ff fadc 	bl	80127c0 <Calculate_LED_ON>
 8013208:	0003      	movs	r3, r0
 801320a:	001a      	movs	r2, r3
 801320c:	4b56      	ldr	r3, [pc, #344]	@ (8013368 <configCheck+0x32c>)
 801320e:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013210:	4b55      	ldr	r3, [pc, #340]	@ (8013368 <configCheck+0x32c>)
 8013212:	1dba      	adds	r2, r7, #6
 8013214:	8812      	ldrh	r2, [r2, #0]
 8013216:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8013218:	4b53      	ldr	r3, [pc, #332]	@ (8013368 <configCheck+0x32c>)
 801321a:	1dba      	adds	r2, r7, #6
 801321c:	8812      	ldrh	r2, [r2, #0]
 801321e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013220:	23c8      	movs	r3, #200	@ 0xc8
 8013222:	005b      	lsls	r3, r3, #1
 8013224:	0018      	movs	r0, r3
 8013226:	f001 fbbf 	bl	80149a8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 801322a:	4b4f      	ldr	r3, [pc, #316]	@ (8013368 <configCheck+0x32c>)
 801322c:	22fa      	movs	r2, #250	@ 0xfa
 801322e:	0112      	lsls	r2, r2, #4
 8013230:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8013232:	4b4d      	ldr	r3, [pc, #308]	@ (8013368 <configCheck+0x32c>)
 8013234:	22fa      	movs	r2, #250	@ 0xfa
 8013236:	0112      	lsls	r2, r2, #4
 8013238:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 801323a:	4b4b      	ldr	r3, [pc, #300]	@ (8013368 <configCheck+0x32c>)
 801323c:	22fa      	movs	r2, #250	@ 0xfa
 801323e:	0112      	lsls	r2, r2, #4
 8013240:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013242:	23c8      	movs	r3, #200	@ 0xc8
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	0018      	movs	r0, r3
 8013248:	f001 fbae 	bl	80149a8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 801324c:	1d7b      	adds	r3, r7, #5
 801324e:	781a      	ldrb	r2, [r3, #0]
 8013250:	1d7b      	adds	r3, r7, #5
 8013252:	3201      	adds	r2, #1
 8013254:	701a      	strb	r2, [r3, #0]
 8013256:	1d7b      	adds	r3, r7, #5
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	2b01      	cmp	r3, #1
 801325c:	d9d2      	bls.n	8013204 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 801325e:	4b37      	ldr	r3, [pc, #220]	@ (801333c <configCheck+0x300>)
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	1e5a      	subs	r2, r3, #1
 8013264:	4193      	sbcs	r3, r2
 8013266:	b2db      	uxtb	r3, r3
 8013268:	2201      	movs	r2, #1
 801326a:	4053      	eors	r3, r2
 801326c:	b2db      	uxtb	r3, r3
 801326e:	1c1a      	adds	r2, r3, #0
 8013270:	2301      	movs	r3, #1
 8013272:	4013      	ands	r3, r2
 8013274:	b2da      	uxtb	r2, r3
 8013276:	4b31      	ldr	r3, [pc, #196]	@ (801333c <configCheck+0x300>)
 8013278:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %sabled", userToggle?"en":"dis");
 801327a:	4b30      	ldr	r3, [pc, #192]	@ (801333c <configCheck+0x300>)
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d001      	beq.n	8013286 <configCheck+0x24a>
 8013282:	4b30      	ldr	r3, [pc, #192]	@ (8013344 <configCheck+0x308>)
 8013284:	e000      	b.n	8013288 <configCheck+0x24c>
 8013286:	4b30      	ldr	r3, [pc, #192]	@ (8013348 <configCheck+0x30c>)
 8013288:	4a38      	ldr	r2, [pc, #224]	@ (801336c <configCheck+0x330>)
 801328a:	4936      	ldr	r1, [pc, #216]	@ (8013364 <configCheck+0x328>)
 801328c:	2002      	movs	r0, #2
 801328e:	f000 fe01 	bl	8013e94 <CreateLine>
      if (usbPluggedIn) {
 8013292:	4b37      	ldr	r3, [pc, #220]	@ (8013370 <configCheck+0x334>)
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d009      	beq.n	80132ae <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 801329a:	f7fb ff67 	bl	800f16c <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801329e:	e006      	b.n	80132ae <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 80132a0:	4a34      	ldr	r2, [pc, #208]	@ (8013374 <configCheck+0x338>)
 80132a2:	4b30      	ldr	r3, [pc, #192]	@ (8013364 <configCheck+0x328>)
 80132a4:	0019      	movs	r1, r3
 80132a6:	2002      	movs	r0, #2
 80132a8:	f000 fdf4 	bl	8013e94 <CreateLine>
 80132ac:	e000      	b.n	80132b0 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80132ae:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80132b0:	46c0      	nop			@ (mov r8, r8)
 80132b2:	f7f6 fda1 	bl	8009df8 <UserButton_Pressed>
 80132b6:	1e03      	subs	r3, r0, #0
 80132b8:	d1fb      	bne.n	80132b2 <configCheck+0x276>
    }
    userbuttonHeld = false;
 80132ba:	4b1d      	ldr	r3, [pc, #116]	@ (8013330 <configCheck+0x2f4>)
 80132bc:	2200      	movs	r2, #0
 80132be:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80132c0:	f7f6 fd88 	bl	8009dd4 <BootButton_Pressed>
 80132c4:	0003      	movs	r3, r0
 80132c6:	001a      	movs	r2, r3
 80132c8:	2301      	movs	r3, #1
 80132ca:	4053      	eors	r3, r2
 80132cc:	b2db      	uxtb	r3, r3
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d00b      	beq.n	80132ea <configCheck+0x2ae>
 80132d2:	f7f6 fd91 	bl	8009df8 <UserButton_Pressed>
 80132d6:	0003      	movs	r3, r0
 80132d8:	001a      	movs	r2, r3
 80132da:	2301      	movs	r3, #1
 80132dc:	4053      	eors	r3, r2
 80132de:	b2db      	uxtb	r3, r3
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d002      	beq.n	80132ea <configCheck+0x2ae>
    userbuttonHeld = false;
 80132e4:	4b12      	ldr	r3, [pc, #72]	@ (8013330 <configCheck+0x2f4>)
 80132e6:	2200      	movs	r2, #0
 80132e8:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80132ea:	f7f6 fcf9 	bl	8009ce0 <Check_USB_PowerOn>
 80132ee:	1e03      	subs	r3, r0, #0
 80132f0:	d003      	beq.n	80132fa <configCheck+0x2be>
    usbPluggedIn = true;
 80132f2:	4b1f      	ldr	r3, [pc, #124]	@ (8013370 <configCheck+0x334>)
 80132f4:	2201      	movs	r2, #1
 80132f6:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 80132f8:	e012      	b.n	8013320 <configCheck+0x2e4>
    if(!userToggle && !init){
 80132fa:	4b10      	ldr	r3, [pc, #64]	@ (801333c <configCheck+0x300>)
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	2201      	movs	r2, #1
 8013300:	4053      	eors	r3, r2
 8013302:	b2db      	uxtb	r3, r3
 8013304:	2b00      	cmp	r3, #0
 8013306:	d008      	beq.n	801331a <configCheck+0x2de>
 8013308:	4b1b      	ldr	r3, [pc, #108]	@ (8013378 <configCheck+0x33c>)
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	2201      	movs	r2, #1
 801330e:	4053      	eors	r3, r2
 8013310:	b2db      	uxtb	r3, r3
 8013312:	2b00      	cmp	r3, #0
 8013314:	d001      	beq.n	801331a <configCheck+0x2de>
      SetLEDsOff();
 8013316:	f7ff fc09 	bl	8012b2c <SetLEDsOff>
    usbPluggedIn = false;
 801331a:	4b15      	ldr	r3, [pc, #84]	@ (8013370 <configCheck+0x334>)
 801331c:	2200      	movs	r2, #0
 801331e:	701a      	strb	r2, [r3, #0]
}
 8013320:	46c0      	nop			@ (mov r8, r8)
 8013322:	46bd      	mov	sp, r7
 8013324:	b003      	add	sp, #12
 8013326:	bd90      	pop	{r4, r7, pc}
 8013328:	2000214c 	.word	0x2000214c
 801332c:	20002150 	.word	0x20002150
 8013330:	2000214f 	.word	0x2000214f
 8013334:	00000bb8 	.word	0x00000bb8
 8013338:	000005dc 	.word	0x000005dc
 801333c:	2000214e 	.word	0x2000214e
 8013340:	20001114 	.word	0x20001114
 8013344:	0802dcbc 	.word	0x0802dcbc
 8013348:	0802dcc0 	.word	0x0802dcc0
 801334c:	0802dcc4 	.word	0x0802dcc4
 8013350:	0802dbe8 	.word	0x0802dbe8
 8013354:	20002154 	.word	0x20002154
 8013358:	200011c0 	.word	0x200011c0
 801335c:	200011be 	.word	0x200011be
 8013360:	0802dce4 	.word	0x0802dce4
 8013364:	0802dd0c 	.word	0x0802dd0c
 8013368:	40000400 	.word	0x40000400
 801336c:	0802dd10 	.word	0x0802dd10
 8013370:	2000214d 	.word	0x2000214d
 8013374:	0802dd30 	.word	0x0802dd30
 8013378:	200000e8 	.word	0x200000e8

0801337c <Battery_Upkeep>:

void Battery_Upkeep(){
 801337c:	b580      	push	{r7, lr}
 801337e:	af00      	add	r7, sp, #0
  powerCheck();
 8013380:	f7ff fdce 	bl	8012f20 <powerCheck>
  powerDisplay();  // output LEDs are okay
 8013384:	f7ff fddc 	bl	8012f40 <powerDisplay>
}
 8013388:	46c0      	nop			@ (mov r8, r8)
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
	...

08013390 <setuserToggle>:

void setuserToggle(void) {
 8013390:	b580      	push	{r7, lr}
 8013392:	af00      	add	r7, sp, #0
  if (!Check_USB_PowerOn()) { //operate only in battery operation mode
 8013394:	f7f6 fca4 	bl	8009ce0 <Check_USB_PowerOn>
 8013398:	0003      	movs	r3, r0
 801339a:	001a      	movs	r2, r3
 801339c:	2301      	movs	r3, #1
 801339e:	4053      	eors	r3, r2
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d004      	beq.n	80133b0 <setuserToggle+0x20>
    userToggle = true;
 80133a6:	4b04      	ldr	r3, [pc, #16]	@ (80133b8 <setuserToggle+0x28>)
 80133a8:	2201      	movs	r2, #1
 80133aa:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80133ac:	f7fa fcf4 	bl	800dd98 <EnabledConnectedDevices>
  }
}
 80133b0:	46c0      	nop			@ (mov r8, r8)
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	46c0      	nop			@ (mov r8, r8)
 80133b8:	2000214e 	.word	0x2000214e

080133bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80133c0:	4b07      	ldr	r3, [pc, #28]	@ (80133e0 <HAL_MspInit+0x24>)
 80133c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133c4:	4b06      	ldr	r3, [pc, #24]	@ (80133e0 <HAL_MspInit+0x24>)
 80133c6:	2101      	movs	r1, #1
 80133c8:	430a      	orrs	r2, r1
 80133ca:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80133cc:	4b04      	ldr	r3, [pc, #16]	@ (80133e0 <HAL_MspInit+0x24>)
 80133ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133d0:	4b03      	ldr	r3, [pc, #12]	@ (80133e0 <HAL_MspInit+0x24>)
 80133d2:	2180      	movs	r1, #128	@ 0x80
 80133d4:	0549      	lsls	r1, r1, #21
 80133d6:	430a      	orrs	r2, r1
 80133d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80133da:	46c0      	nop			@ (mov r8, r8)
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	40021000 	.word	0x40021000

080133e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80133e8:	46c0      	nop			@ (mov r8, r8)
 80133ea:	e7fd      	b.n	80133e8 <NMI_Handler+0x4>

080133ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80133f0:	46c0      	nop			@ (mov r8, r8)
 80133f2:	e7fd      	b.n	80133f0 <HardFault_Handler+0x4>

080133f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80133f8:	46c0      	nop			@ (mov r8, r8)
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}

080133fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80133fe:	b580      	push	{r7, lr}
 8013400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013402:	46c0      	nop			@ (mov r8, r8)
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}

08013408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801340c:	f001 fab0 	bl	8014970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8013410:	46c0      	nop			@ (mov r8, r8)
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
	...

08013418 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 801341c:	4b03      	ldr	r3, [pc, #12]	@ (801342c <RTC_IRQHandler+0x14>)
 801341e:	0018      	movs	r0, r3
 8013420:	f009 fb50 	bl	801cac4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8013424:	46c0      	nop			@ (mov r8, r8)
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	46c0      	nop			@ (mov r8, r8)
 801342c:	20001198 	.word	0x20001198

08013430 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8013434:	2380      	movs	r3, #128	@ 0x80
 8013436:	021b      	lsls	r3, r3, #8
 8013438:	0018      	movs	r0, r3
 801343a:	f002 fd2f 	bl	8015e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 801343e:	46c0      	nop			@ (mov r8, r8)
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8013448:	4b05      	ldr	r3, [pc, #20]	@ (8013460 <DMA1_Channel2_3_IRQHandler+0x1c>)
 801344a:	0018      	movs	r0, r3
 801344c:	f002 f8ad 	bl	80155aa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013450:	4b04      	ldr	r3, [pc, #16]	@ (8013464 <DMA1_Channel2_3_IRQHandler+0x20>)
 8013452:	0018      	movs	r0, r3
 8013454:	f002 f8a9 	bl	80155aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8013458:	46c0      	nop			@ (mov r8, r8)
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	46c0      	nop			@ (mov r8, r8)
 8013460:	20001028 	.word	0x20001028
 8013464:	20000fe0 	.word	0x20000fe0

08013468 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 801346c:	4b07      	ldr	r3, [pc, #28]	@ (801348c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 801346e:	0018      	movs	r0, r3
 8013470:	f002 f89b 	bl	80155aa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8013474:	4b06      	ldr	r3, [pc, #24]	@ (8013490 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8013476:	0018      	movs	r0, r3
 8013478:	f002 f897 	bl	80155aa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 801347c:	4b05      	ldr	r3, [pc, #20]	@ (8013494 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 801347e:	0018      	movs	r0, r3
 8013480:	f002 f893 	bl	80155aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8013484:	46c0      	nop			@ (mov r8, r8)
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	46c0      	nop			@ (mov r8, r8)
 801348c:	200010ac 	.word	0x200010ac
 8013490:	20002454 	.word	0x20002454
 8013494:	2000249c 	.word	0x2000249c

08013498 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 801349c:	4b03      	ldr	r3, [pc, #12]	@ (80134ac <USART4_5_IRQHandler+0x14>)
 801349e:	0018      	movs	r0, r3
 80134a0:	f00a fb00 	bl	801daa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80134a4:	46c0      	nop			@ (mov r8, r8)
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	46c0      	nop			@ (mov r8, r8)
 80134ac:	2000239c 	.word	0x2000239c

080134b0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80134b4:	4b09      	ldr	r3, [pc, #36]	@ (80134dc <I2C1_IRQHandler+0x2c>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	699a      	ldr	r2, [r3, #24]
 80134ba:	23e0      	movs	r3, #224	@ 0xe0
 80134bc:	00db      	lsls	r3, r3, #3
 80134be:	4013      	ands	r3, r2
 80134c0:	d004      	beq.n	80134cc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80134c2:	4b06      	ldr	r3, [pc, #24]	@ (80134dc <I2C1_IRQHandler+0x2c>)
 80134c4:	0018      	movs	r0, r3
 80134c6:	f003 fc33 	bl	8016d30 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80134ca:	e003      	b.n	80134d4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80134cc:	4b03      	ldr	r3, [pc, #12]	@ (80134dc <I2C1_IRQHandler+0x2c>)
 80134ce:	0018      	movs	r0, r3
 80134d0:	f003 fc14 	bl	8016cfc <HAL_I2C_EV_IRQHandler>
}
 80134d4:	46c0      	nop			@ (mov r8, r8)
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	46c0      	nop			@ (mov r8, r8)
 80134dc:	20000f38 	.word	0x20000f38

080134e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80134e4:	4b03      	ldr	r3, [pc, #12]	@ (80134f4 <USART1_IRQHandler+0x14>)
 80134e6:	0018      	movs	r0, r3
 80134e8:	f00a fadc 	bl	801daa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80134ec:	46c0      	nop			@ (mov r8, r8)
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	46c0      	nop			@ (mov r8, r8)
 80134f4:	200022e4 	.word	0x200022e4

080134f8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80134fc:	4b03      	ldr	r3, [pc, #12]	@ (801350c <USB_IRQHandler+0x14>)
 80134fe:	0018      	movs	r0, r3
 8013500:	f006 f92e 	bl	8019760 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8013504:	46c0      	nop			@ (mov r8, r8)
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	46c0      	nop			@ (mov r8, r8)
 801350c:	200032b8 	.word	0x200032b8

08013510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	af00      	add	r7, sp, #0
  return 1;
 8013514:	2301      	movs	r3, #1
}
 8013516:	0018      	movs	r0, r3
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <_kill>:

int _kill(int pid, int sig)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8013526:	f013 f9bd 	bl	80268a4 <__errno>
 801352a:	0003      	movs	r3, r0
 801352c:	2216      	movs	r2, #22
 801352e:	601a      	str	r2, [r3, #0]
  return -1;
 8013530:	2301      	movs	r3, #1
 8013532:	425b      	negs	r3, r3
}
 8013534:	0018      	movs	r0, r3
 8013536:	46bd      	mov	sp, r7
 8013538:	b002      	add	sp, #8
 801353a:	bd80      	pop	{r7, pc}

0801353c <_exit>:

void _exit (int status)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013544:	2301      	movs	r3, #1
 8013546:	425a      	negs	r2, r3
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	0011      	movs	r1, r2
 801354c:	0018      	movs	r0, r3
 801354e:	f7ff ffe5 	bl	801351c <_kill>
  while (1) {}    /* Make sure we hang here */
 8013552:	46c0      	nop			@ (mov r8, r8)
 8013554:	e7fd      	b.n	8013552 <_exit+0x16>

08013556 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b086      	sub	sp, #24
 801355a:	af00      	add	r7, sp, #0
 801355c:	60f8      	str	r0, [r7, #12]
 801355e:	60b9      	str	r1, [r7, #8]
 8013560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013562:	2300      	movs	r3, #0
 8013564:	617b      	str	r3, [r7, #20]
 8013566:	e00a      	b.n	801357e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013568:	e000      	b.n	801356c <_read+0x16>
 801356a:	bf00      	nop
 801356c:	0001      	movs	r1, r0
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	1c5a      	adds	r2, r3, #1
 8013572:	60ba      	str	r2, [r7, #8]
 8013574:	b2ca      	uxtb	r2, r1
 8013576:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	3301      	adds	r3, #1
 801357c:	617b      	str	r3, [r7, #20]
 801357e:	697a      	ldr	r2, [r7, #20]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	429a      	cmp	r2, r3
 8013584:	dbf0      	blt.n	8013568 <_read+0x12>
  }

  return len;
 8013586:	687b      	ldr	r3, [r7, #4]
}
 8013588:	0018      	movs	r0, r3
 801358a:	46bd      	mov	sp, r7
 801358c:	b006      	add	sp, #24
 801358e:	bd80      	pop	{r7, pc}

08013590 <_close>:
  }
  return len;
}

int _close(int file)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013598:	2301      	movs	r3, #1
 801359a:	425b      	negs	r3, r3
}
 801359c:	0018      	movs	r0, r3
 801359e:	46bd      	mov	sp, r7
 80135a0:	b002      	add	sp, #8
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	2280      	movs	r2, #128	@ 0x80
 80135b2:	0192      	lsls	r2, r2, #6
 80135b4:	605a      	str	r2, [r3, #4]
  return 0;
 80135b6:	2300      	movs	r3, #0
}
 80135b8:	0018      	movs	r0, r3
 80135ba:	46bd      	mov	sp, r7
 80135bc:	b002      	add	sp, #8
 80135be:	bd80      	pop	{r7, pc}

080135c0 <_isatty>:

int _isatty(int file)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80135c8:	2301      	movs	r3, #1
}
 80135ca:	0018      	movs	r0, r3
 80135cc:	46bd      	mov	sp, r7
 80135ce:	b002      	add	sp, #8
 80135d0:	bd80      	pop	{r7, pc}

080135d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b084      	sub	sp, #16
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	60f8      	str	r0, [r7, #12]
 80135da:	60b9      	str	r1, [r7, #8]
 80135dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80135de:	2300      	movs	r3, #0
}
 80135e0:	0018      	movs	r0, r3
 80135e2:	46bd      	mov	sp, r7
 80135e4:	b004      	add	sp, #16
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b086      	sub	sp, #24
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80135f0:	4a14      	ldr	r2, [pc, #80]	@ (8013644 <_sbrk+0x5c>)
 80135f2:	4b15      	ldr	r3, [pc, #84]	@ (8013648 <_sbrk+0x60>)
 80135f4:	1ad3      	subs	r3, r2, r3
 80135f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80135fc:	4b13      	ldr	r3, [pc, #76]	@ (801364c <_sbrk+0x64>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d102      	bne.n	801360a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013604:	4b11      	ldr	r3, [pc, #68]	@ (801364c <_sbrk+0x64>)
 8013606:	4a12      	ldr	r2, [pc, #72]	@ (8013650 <_sbrk+0x68>)
 8013608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801360a:	4b10      	ldr	r3, [pc, #64]	@ (801364c <_sbrk+0x64>)
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	18d3      	adds	r3, r2, r3
 8013612:	693a      	ldr	r2, [r7, #16]
 8013614:	429a      	cmp	r2, r3
 8013616:	d207      	bcs.n	8013628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013618:	f013 f944 	bl	80268a4 <__errno>
 801361c:	0003      	movs	r3, r0
 801361e:	220c      	movs	r2, #12
 8013620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013622:	2301      	movs	r3, #1
 8013624:	425b      	negs	r3, r3
 8013626:	e009      	b.n	801363c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013628:	4b08      	ldr	r3, [pc, #32]	@ (801364c <_sbrk+0x64>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801362e:	4b07      	ldr	r3, [pc, #28]	@ (801364c <_sbrk+0x64>)
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	18d2      	adds	r2, r2, r3
 8013636:	4b05      	ldr	r3, [pc, #20]	@ (801364c <_sbrk+0x64>)
 8013638:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 801363a:	68fb      	ldr	r3, [r7, #12]
}
 801363c:	0018      	movs	r0, r3
 801363e:	46bd      	mov	sp, r7
 8013640:	b006      	add	sp, #24
 8013642:	bd80      	pop	{r7, pc}
 8013644:	20005000 	.word	0x20005000
 8013648:	00000400 	.word	0x00000400
 801364c:	20002168 	.word	0x20002168
 8013650:	20003918 	.word	0x20003918

08013654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013658:	46c0      	nop			@ (mov r8, r8)
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
	...

08013660 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b086      	sub	sp, #24
 8013664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013666:	2310      	movs	r3, #16
 8013668:	18fb      	adds	r3, r7, r3
 801366a:	0018      	movs	r0, r3
 801366c:	2308      	movs	r3, #8
 801366e:	001a      	movs	r2, r3
 8013670:	2100      	movs	r1, #0
 8013672:	f013 f873 	bl	802675c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013676:	003b      	movs	r3, r7
 8013678:	0018      	movs	r0, r3
 801367a:	2310      	movs	r3, #16
 801367c:	001a      	movs	r2, r3
 801367e:	2100      	movs	r1, #0
 8013680:	f013 f86c 	bl	802675c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013684:	4b2e      	ldr	r3, [pc, #184]	@ (8013740 <MX_TIM2_Init+0xe0>)
 8013686:	2280      	movs	r2, #128	@ 0x80
 8013688:	05d2      	lsls	r2, r2, #23
 801368a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801368c:	4b2c      	ldr	r3, [pc, #176]	@ (8013740 <MX_TIM2_Init+0xe0>)
 801368e:	2200      	movs	r2, #0
 8013690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013692:	4b2b      	ldr	r3, [pc, #172]	@ (8013740 <MX_TIM2_Init+0xe0>)
 8013694:	2200      	movs	r2, #0
 8013696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8013698:	4b29      	ldr	r3, [pc, #164]	@ (8013740 <MX_TIM2_Init+0xe0>)
 801369a:	4a2a      	ldr	r2, [pc, #168]	@ (8013744 <MX_TIM2_Init+0xe4>)
 801369c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801369e:	4b28      	ldr	r3, [pc, #160]	@ (8013740 <MX_TIM2_Init+0xe0>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80136a4:	4b26      	ldr	r3, [pc, #152]	@ (8013740 <MX_TIM2_Init+0xe0>)
 80136a6:	2200      	movs	r2, #0
 80136a8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80136aa:	4b25      	ldr	r3, [pc, #148]	@ (8013740 <MX_TIM2_Init+0xe0>)
 80136ac:	0018      	movs	r0, r3
 80136ae:	f009 fb17 	bl	801cce0 <HAL_TIM_PWM_Init>
 80136b2:	1e03      	subs	r3, r0, #0
 80136b4:	d001      	beq.n	80136ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80136b6:	f7f9 fedb 	bl	800d470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80136ba:	2110      	movs	r1, #16
 80136bc:	187b      	adds	r3, r7, r1
 80136be:	2200      	movs	r2, #0
 80136c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80136c2:	187b      	adds	r3, r7, r1
 80136c4:	2200      	movs	r2, #0
 80136c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80136c8:	187a      	adds	r2, r7, r1
 80136ca:	4b1d      	ldr	r3, [pc, #116]	@ (8013740 <MX_TIM2_Init+0xe0>)
 80136cc:	0011      	movs	r1, r2
 80136ce:	0018      	movs	r0, r3
 80136d0:	f009 fe24 	bl	801d31c <HAL_TIMEx_MasterConfigSynchronization>
 80136d4:	1e03      	subs	r3, r0, #0
 80136d6:	d001      	beq.n	80136dc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80136d8:	f7f9 feca 	bl	800d470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80136dc:	003b      	movs	r3, r7
 80136de:	2260      	movs	r2, #96	@ 0x60
 80136e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80136e2:	003b      	movs	r3, r7
 80136e4:	2200      	movs	r2, #0
 80136e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80136e8:	003b      	movs	r3, r7
 80136ea:	2200      	movs	r2, #0
 80136ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80136ee:	003b      	movs	r3, r7
 80136f0:	2200      	movs	r2, #0
 80136f2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80136f4:	0039      	movs	r1, r7
 80136f6:	4b12      	ldr	r3, [pc, #72]	@ (8013740 <MX_TIM2_Init+0xe0>)
 80136f8:	2200      	movs	r2, #0
 80136fa:	0018      	movs	r0, r3
 80136fc:	f009 fbc2 	bl	801ce84 <HAL_TIM_PWM_ConfigChannel>
 8013700:	1e03      	subs	r3, r0, #0
 8013702:	d001      	beq.n	8013708 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8013704:	f7f9 feb4 	bl	800d470 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013708:	0039      	movs	r1, r7
 801370a:	4b0d      	ldr	r3, [pc, #52]	@ (8013740 <MX_TIM2_Init+0xe0>)
 801370c:	2208      	movs	r2, #8
 801370e:	0018      	movs	r0, r3
 8013710:	f009 fbb8 	bl	801ce84 <HAL_TIM_PWM_ConfigChannel>
 8013714:	1e03      	subs	r3, r0, #0
 8013716:	d001      	beq.n	801371c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8013718:	f7f9 feaa 	bl	800d470 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801371c:	0039      	movs	r1, r7
 801371e:	4b08      	ldr	r3, [pc, #32]	@ (8013740 <MX_TIM2_Init+0xe0>)
 8013720:	220c      	movs	r2, #12
 8013722:	0018      	movs	r0, r3
 8013724:	f009 fbae 	bl	801ce84 <HAL_TIM_PWM_ConfigChannel>
 8013728:	1e03      	subs	r3, r0, #0
 801372a:	d001      	beq.n	8013730 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 801372c:	f7f9 fea0 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013730:	4b03      	ldr	r3, [pc, #12]	@ (8013740 <MX_TIM2_Init+0xe0>)
 8013732:	0018      	movs	r0, r3
 8013734:	f000 f8fe 	bl	8013934 <HAL_TIM_MspPostInit>

}
 8013738:	46c0      	nop			@ (mov r8, r8)
 801373a:	46bd      	mov	sp, r7
 801373c:	b006      	add	sp, #24
 801373e:	bd80      	pop	{r7, pc}
 8013740:	2000216c 	.word	0x2000216c
 8013744:	0000ffff 	.word	0x0000ffff

08013748 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b086      	sub	sp, #24
 801374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801374e:	2310      	movs	r3, #16
 8013750:	18fb      	adds	r3, r7, r3
 8013752:	0018      	movs	r0, r3
 8013754:	2308      	movs	r3, #8
 8013756:	001a      	movs	r2, r3
 8013758:	2100      	movs	r1, #0
 801375a:	f012 ffff 	bl	802675c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801375e:	003b      	movs	r3, r7
 8013760:	0018      	movs	r0, r3
 8013762:	2310      	movs	r3, #16
 8013764:	001a      	movs	r2, r3
 8013766:	2100      	movs	r1, #0
 8013768:	f012 fff8 	bl	802675c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801376c:	4b32      	ldr	r3, [pc, #200]	@ (8013838 <MX_TIM3_Init+0xf0>)
 801376e:	4a33      	ldr	r2, [pc, #204]	@ (801383c <MX_TIM3_Init+0xf4>)
 8013770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8013772:	4b31      	ldr	r3, [pc, #196]	@ (8013838 <MX_TIM3_Init+0xf0>)
 8013774:	2200      	movs	r2, #0
 8013776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013778:	4b2f      	ldr	r3, [pc, #188]	@ (8013838 <MX_TIM3_Init+0xf0>)
 801377a:	2200      	movs	r2, #0
 801377c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801377e:	4b2e      	ldr	r3, [pc, #184]	@ (8013838 <MX_TIM3_Init+0xf0>)
 8013780:	4a2f      	ldr	r2, [pc, #188]	@ (8013840 <MX_TIM3_Init+0xf8>)
 8013782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013784:	4b2c      	ldr	r3, [pc, #176]	@ (8013838 <MX_TIM3_Init+0xf0>)
 8013786:	2200      	movs	r2, #0
 8013788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801378a:	4b2b      	ldr	r3, [pc, #172]	@ (8013838 <MX_TIM3_Init+0xf0>)
 801378c:	2200      	movs	r2, #0
 801378e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013790:	4b29      	ldr	r3, [pc, #164]	@ (8013838 <MX_TIM3_Init+0xf0>)
 8013792:	0018      	movs	r0, r3
 8013794:	f009 faa4 	bl	801cce0 <HAL_TIM_PWM_Init>
 8013798:	1e03      	subs	r3, r0, #0
 801379a:	d001      	beq.n	80137a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 801379c:	f7f9 fe68 	bl	800d470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80137a0:	2110      	movs	r1, #16
 80137a2:	187b      	adds	r3, r7, r1
 80137a4:	2200      	movs	r2, #0
 80137a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80137a8:	187b      	adds	r3, r7, r1
 80137aa:	2200      	movs	r2, #0
 80137ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80137ae:	187a      	adds	r2, r7, r1
 80137b0:	4b21      	ldr	r3, [pc, #132]	@ (8013838 <MX_TIM3_Init+0xf0>)
 80137b2:	0011      	movs	r1, r2
 80137b4:	0018      	movs	r0, r3
 80137b6:	f009 fdb1 	bl	801d31c <HAL_TIMEx_MasterConfigSynchronization>
 80137ba:	1e03      	subs	r3, r0, #0
 80137bc:	d001      	beq.n	80137c2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80137be:	f7f9 fe57 	bl	800d470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80137c2:	003b      	movs	r3, r7
 80137c4:	2260      	movs	r2, #96	@ 0x60
 80137c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80137c8:	003b      	movs	r3, r7
 80137ca:	2200      	movs	r2, #0
 80137cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80137ce:	003b      	movs	r3, r7
 80137d0:	2200      	movs	r2, #0
 80137d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80137d4:	003b      	movs	r3, r7
 80137d6:	2200      	movs	r2, #0
 80137d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80137da:	0039      	movs	r1, r7
 80137dc:	4b16      	ldr	r3, [pc, #88]	@ (8013838 <MX_TIM3_Init+0xf0>)
 80137de:	2200      	movs	r2, #0
 80137e0:	0018      	movs	r0, r3
 80137e2:	f009 fb4f 	bl	801ce84 <HAL_TIM_PWM_ConfigChannel>
 80137e6:	1e03      	subs	r3, r0, #0
 80137e8:	d001      	beq.n	80137ee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80137ea:	f7f9 fe41 	bl	800d470 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80137ee:	4b12      	ldr	r3, [pc, #72]	@ (8013838 <MX_TIM3_Init+0xf0>)
 80137f0:	2104      	movs	r1, #4
 80137f2:	0018      	movs	r0, r3
 80137f4:	f009 fdf0 	bl	801d3d8 <HAL_TIMEx_RemapConfig>
 80137f8:	1e03      	subs	r3, r0, #0
 80137fa:	d001      	beq.n	8013800 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80137fc:	f7f9 fe38 	bl	800d470 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013800:	0039      	movs	r1, r7
 8013802:	4b0d      	ldr	r3, [pc, #52]	@ (8013838 <MX_TIM3_Init+0xf0>)
 8013804:	2204      	movs	r2, #4
 8013806:	0018      	movs	r0, r3
 8013808:	f009 fb3c 	bl	801ce84 <HAL_TIM_PWM_ConfigChannel>
 801380c:	1e03      	subs	r3, r0, #0
 801380e:	d001      	beq.n	8013814 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013810:	f7f9 fe2e 	bl	800d470 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013814:	0039      	movs	r1, r7
 8013816:	4b08      	ldr	r3, [pc, #32]	@ (8013838 <MX_TIM3_Init+0xf0>)
 8013818:	2208      	movs	r2, #8
 801381a:	0018      	movs	r0, r3
 801381c:	f009 fb32 	bl	801ce84 <HAL_TIM_PWM_ConfigChannel>
 8013820:	1e03      	subs	r3, r0, #0
 8013822:	d001      	beq.n	8013828 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8013824:	f7f9 fe24 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013828:	4b03      	ldr	r3, [pc, #12]	@ (8013838 <MX_TIM3_Init+0xf0>)
 801382a:	0018      	movs	r0, r3
 801382c:	f000 f882 	bl	8013934 <HAL_TIM_MspPostInit>

}
 8013830:	46c0      	nop			@ (mov r8, r8)
 8013832:	46bd      	mov	sp, r7
 8013834:	b006      	add	sp, #24
 8013836:	bd80      	pop	{r7, pc}
 8013838:	200021ac 	.word	0x200021ac
 801383c:	40000400 	.word	0x40000400
 8013840:	0000ffff 	.word	0x0000ffff

08013844 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801384a:	003b      	movs	r3, r7
 801384c:	0018      	movs	r0, r3
 801384e:	2308      	movs	r3, #8
 8013850:	001a      	movs	r2, r3
 8013852:	2100      	movs	r1, #0
 8013854:	f012 ff82 	bl	802675c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8013858:	4b15      	ldr	r3, [pc, #84]	@ (80138b0 <MX_TIM6_Init+0x6c>)
 801385a:	4a16      	ldr	r2, [pc, #88]	@ (80138b4 <MX_TIM6_Init+0x70>)
 801385c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 801385e:	4b14      	ldr	r3, [pc, #80]	@ (80138b0 <MX_TIM6_Init+0x6c>)
 8013860:	220a      	movs	r2, #10
 8013862:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013864:	4b12      	ldr	r3, [pc, #72]	@ (80138b0 <MX_TIM6_Init+0x6c>)
 8013866:	2200      	movs	r2, #0
 8013868:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801386a:	4b11      	ldr	r3, [pc, #68]	@ (80138b0 <MX_TIM6_Init+0x6c>)
 801386c:	4a12      	ldr	r2, [pc, #72]	@ (80138b8 <MX_TIM6_Init+0x74>)
 801386e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013870:	4b0f      	ldr	r3, [pc, #60]	@ (80138b0 <MX_TIM6_Init+0x6c>)
 8013872:	2200      	movs	r2, #0
 8013874:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8013876:	4b0e      	ldr	r3, [pc, #56]	@ (80138b0 <MX_TIM6_Init+0x6c>)
 8013878:	0018      	movs	r0, r3
 801387a:	f009 f989 	bl	801cb90 <HAL_TIM_Base_Init>
 801387e:	1e03      	subs	r3, r0, #0
 8013880:	d001      	beq.n	8013886 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8013882:	f7f9 fdf5 	bl	800d470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013886:	003b      	movs	r3, r7
 8013888:	2200      	movs	r2, #0
 801388a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801388c:	003b      	movs	r3, r7
 801388e:	2200      	movs	r2, #0
 8013890:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8013892:	003a      	movs	r2, r7
 8013894:	4b06      	ldr	r3, [pc, #24]	@ (80138b0 <MX_TIM6_Init+0x6c>)
 8013896:	0011      	movs	r1, r2
 8013898:	0018      	movs	r0, r3
 801389a:	f009 fd3f 	bl	801d31c <HAL_TIMEx_MasterConfigSynchronization>
 801389e:	1e03      	subs	r3, r0, #0
 80138a0:	d001      	beq.n	80138a6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80138a2:	f7f9 fde5 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80138a6:	46c0      	nop			@ (mov r8, r8)
 80138a8:	46bd      	mov	sp, r7
 80138aa:	b002      	add	sp, #8
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	46c0      	nop			@ (mov r8, r8)
 80138b0:	200021ec 	.word	0x200021ec
 80138b4:	40001000 	.word	0x40001000
 80138b8:	0000ffff 	.word	0x0000ffff

080138bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681a      	ldr	r2, [r3, #0]
 80138c8:	2380      	movs	r3, #128	@ 0x80
 80138ca:	05db      	lsls	r3, r3, #23
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d106      	bne.n	80138de <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80138d0:	4b0a      	ldr	r3, [pc, #40]	@ (80138fc <HAL_TIM_PWM_MspInit+0x40>)
 80138d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138d4:	4b09      	ldr	r3, [pc, #36]	@ (80138fc <HAL_TIM_PWM_MspInit+0x40>)
 80138d6:	2101      	movs	r1, #1
 80138d8:	430a      	orrs	r2, r1
 80138da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80138dc:	e00a      	b.n	80138f4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	4a07      	ldr	r2, [pc, #28]	@ (8013900 <HAL_TIM_PWM_MspInit+0x44>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d105      	bne.n	80138f4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80138e8:	4b04      	ldr	r3, [pc, #16]	@ (80138fc <HAL_TIM_PWM_MspInit+0x40>)
 80138ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138ec:	4b03      	ldr	r3, [pc, #12]	@ (80138fc <HAL_TIM_PWM_MspInit+0x40>)
 80138ee:	2102      	movs	r1, #2
 80138f0:	430a      	orrs	r2, r1
 80138f2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80138f4:	46c0      	nop			@ (mov r8, r8)
 80138f6:	46bd      	mov	sp, r7
 80138f8:	b002      	add	sp, #8
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	40021000 	.word	0x40021000
 8013900:	40000400 	.word	0x40000400

08013904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	4a06      	ldr	r2, [pc, #24]	@ (801392c <HAL_TIM_Base_MspInit+0x28>)
 8013912:	4293      	cmp	r3, r2
 8013914:	d105      	bne.n	8013922 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013916:	4b06      	ldr	r3, [pc, #24]	@ (8013930 <HAL_TIM_Base_MspInit+0x2c>)
 8013918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801391a:	4b05      	ldr	r3, [pc, #20]	@ (8013930 <HAL_TIM_Base_MspInit+0x2c>)
 801391c:	2110      	movs	r1, #16
 801391e:	430a      	orrs	r2, r1
 8013920:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8013922:	46c0      	nop			@ (mov r8, r8)
 8013924:	46bd      	mov	sp, r7
 8013926:	b002      	add	sp, #8
 8013928:	bd80      	pop	{r7, pc}
 801392a:	46c0      	nop			@ (mov r8, r8)
 801392c:	40001000 	.word	0x40001000
 8013930:	40021000 	.word	0x40021000

08013934 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013934:	b590      	push	{r4, r7, lr}
 8013936:	b08b      	sub	sp, #44	@ 0x2c
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801393c:	2414      	movs	r4, #20
 801393e:	193b      	adds	r3, r7, r4
 8013940:	0018      	movs	r0, r3
 8013942:	2314      	movs	r3, #20
 8013944:	001a      	movs	r2, r3
 8013946:	2100      	movs	r1, #0
 8013948:	f012 ff08 	bl	802675c <memset>
  if(timHandle->Instance==TIM2)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	2380      	movs	r3, #128	@ 0x80
 8013952:	05db      	lsls	r3, r3, #23
 8013954:	429a      	cmp	r2, r3
 8013956:	d123      	bne.n	80139a0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013958:	4b27      	ldr	r3, [pc, #156]	@ (80139f8 <HAL_TIM_MspPostInit+0xc4>)
 801395a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801395c:	4b26      	ldr	r3, [pc, #152]	@ (80139f8 <HAL_TIM_MspPostInit+0xc4>)
 801395e:	2101      	movs	r1, #1
 8013960:	430a      	orrs	r2, r1
 8013962:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013964:	4b24      	ldr	r3, [pc, #144]	@ (80139f8 <HAL_TIM_MspPostInit+0xc4>)
 8013966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013968:	2201      	movs	r2, #1
 801396a:	4013      	ands	r3, r2
 801396c:	613b      	str	r3, [r7, #16]
 801396e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8013970:	0021      	movs	r1, r4
 8013972:	187b      	adds	r3, r7, r1
 8013974:	220d      	movs	r2, #13
 8013976:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013978:	187b      	adds	r3, r7, r1
 801397a:	2202      	movs	r2, #2
 801397c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801397e:	187b      	adds	r3, r7, r1
 8013980:	2200      	movs	r2, #0
 8013982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013984:	187b      	adds	r3, r7, r1
 8013986:	2200      	movs	r2, #0
 8013988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801398a:	187b      	adds	r3, r7, r1
 801398c:	2202      	movs	r2, #2
 801398e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013990:	187a      	adds	r2, r7, r1
 8013992:	23a0      	movs	r3, #160	@ 0xa0
 8013994:	05db      	lsls	r3, r3, #23
 8013996:	0011      	movs	r1, r2
 8013998:	0018      	movs	r0, r3
 801399a:	f002 f8c7 	bl	8015b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801399e:	e027      	b.n	80139f0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	4a15      	ldr	r2, [pc, #84]	@ (80139fc <HAL_TIM_MspPostInit+0xc8>)
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d122      	bne.n	80139f0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80139aa:	4b13      	ldr	r3, [pc, #76]	@ (80139f8 <HAL_TIM_MspPostInit+0xc4>)
 80139ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139ae:	4b12      	ldr	r3, [pc, #72]	@ (80139f8 <HAL_TIM_MspPostInit+0xc4>)
 80139b0:	2104      	movs	r1, #4
 80139b2:	430a      	orrs	r2, r1
 80139b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80139b6:	4b10      	ldr	r3, [pc, #64]	@ (80139f8 <HAL_TIM_MspPostInit+0xc4>)
 80139b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139ba:	2204      	movs	r2, #4
 80139bc:	4013      	ands	r3, r2
 80139be:	60fb      	str	r3, [r7, #12]
 80139c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80139c2:	2114      	movs	r1, #20
 80139c4:	187b      	adds	r3, r7, r1
 80139c6:	22e0      	movs	r2, #224	@ 0xe0
 80139c8:	0052      	lsls	r2, r2, #1
 80139ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139cc:	187b      	adds	r3, r7, r1
 80139ce:	2202      	movs	r2, #2
 80139d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139d2:	187b      	adds	r3, r7, r1
 80139d4:	2200      	movs	r2, #0
 80139d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80139d8:	187b      	adds	r3, r7, r1
 80139da:	2200      	movs	r2, #0
 80139dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80139de:	187b      	adds	r3, r7, r1
 80139e0:	2202      	movs	r2, #2
 80139e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80139e4:	187b      	adds	r3, r7, r1
 80139e6:	4a06      	ldr	r2, [pc, #24]	@ (8013a00 <HAL_TIM_MspPostInit+0xcc>)
 80139e8:	0019      	movs	r1, r3
 80139ea:	0010      	movs	r0, r2
 80139ec:	f002 f89e 	bl	8015b2c <HAL_GPIO_Init>
}
 80139f0:	46c0      	nop			@ (mov r8, r8)
 80139f2:	46bd      	mov	sp, r7
 80139f4:	b00b      	add	sp, #44	@ 0x2c
 80139f6:	bd90      	pop	{r4, r7, pc}
 80139f8:	40021000 	.word	0x40021000
 80139fc:	40000400 	.word	0x40000400
 8013a00:	50000800 	.word	0x50000800

08013a04 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8013a08:	4b17      	ldr	r3, [pc, #92]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a0a:	4a18      	ldr	r2, [pc, #96]	@ (8013a6c <MX_LPUART1_UART_Init+0x68>)
 8013a0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013a0e:	4b16      	ldr	r3, [pc, #88]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a10:	22e1      	movs	r2, #225	@ 0xe1
 8013a12:	0252      	lsls	r2, r2, #9
 8013a14:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a16:	4b14      	ldr	r3, [pc, #80]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013a1c:	4b12      	ldr	r3, [pc, #72]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a1e:	2200      	movs	r2, #0
 8013a20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8013a22:	4b11      	ldr	r3, [pc, #68]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a24:	2200      	movs	r2, #0
 8013a26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8013a28:	4b0f      	ldr	r3, [pc, #60]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a2a:	220c      	movs	r2, #12
 8013a2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a34:	4b0c      	ldr	r3, [pc, #48]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8013a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a3c:	2218      	movs	r2, #24
 8013a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013a40:	4b09      	ldr	r3, [pc, #36]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a42:	2280      	movs	r2, #128	@ 0x80
 8013a44:	0212      	lsls	r2, r2, #8
 8013a46:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8013a48:	4b07      	ldr	r3, [pc, #28]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a4a:	2280      	movs	r2, #128	@ 0x80
 8013a4c:	0152      	lsls	r2, r2, #5
 8013a4e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013a50:	4b05      	ldr	r3, [pc, #20]	@ (8013a68 <MX_LPUART1_UART_Init+0x64>)
 8013a52:	0018      	movs	r0, r3
 8013a54:	f009 fcde 	bl	801d414 <HAL_UART_Init>
 8013a58:	1e03      	subs	r3, r0, #0
 8013a5a:	d001      	beq.n	8013a60 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013a5c:	f7f9 fd08 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013a60:	46c0      	nop			@ (mov r8, r8)
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	46c0      	nop			@ (mov r8, r8)
 8013a68:	2000222c 	.word	0x2000222c
 8013a6c:	40004800 	.word	0x40004800

08013a70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013a74:	4b14      	ldr	r3, [pc, #80]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013a76:	4a15      	ldr	r2, [pc, #84]	@ (8013acc <MX_USART1_UART_Init+0x5c>)
 8013a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013a7a:	4b13      	ldr	r3, [pc, #76]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013a7c:	22e1      	movs	r2, #225	@ 0xe1
 8013a7e:	0252      	lsls	r2, r2, #9
 8013a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a82:	4b11      	ldr	r3, [pc, #68]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013a84:	2200      	movs	r2, #0
 8013a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013a88:	4b0f      	ldr	r3, [pc, #60]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013a90:	2200      	movs	r2, #0
 8013a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013a94:	4b0c      	ldr	r3, [pc, #48]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013a96:	220c      	movs	r2, #12
 8013a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013aa0:	4b09      	ldr	r3, [pc, #36]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013aa6:	4b08      	ldr	r3, [pc, #32]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013aac:	4b06      	ldr	r3, [pc, #24]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013aae:	2200      	movs	r2, #0
 8013ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013ab2:	4b05      	ldr	r3, [pc, #20]	@ (8013ac8 <MX_USART1_UART_Init+0x58>)
 8013ab4:	0018      	movs	r0, r3
 8013ab6:	f009 fcad 	bl	801d414 <HAL_UART_Init>
 8013aba:	1e03      	subs	r3, r0, #0
 8013abc:	d001      	beq.n	8013ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013abe:	f7f9 fcd7 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013ac2:	46c0      	nop			@ (mov r8, r8)
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	200022e4 	.word	0x200022e4
 8013acc:	40013800 	.word	0x40013800

08013ad0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_Init 0 */

  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PCE);
 8013ad4:	4b24      	ldr	r3, [pc, #144]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	681a      	ldr	r2, [r3, #0]
 8013ada:	4b23      	ldr	r3, [pc, #140]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	4923      	ldr	r1, [pc, #140]	@ (8013b6c <MX_USART4_UART_Init+0x9c>)
 8013ae0:	400a      	ands	r2, r1
 8013ae2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PEIE);
 8013ae4:	4b20      	ldr	r3, [pc, #128]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	4b1f      	ldr	r3, [pc, #124]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	4920      	ldr	r1, [pc, #128]	@ (8013b70 <MX_USART4_UART_Init+0xa0>)
 8013af0:	400a      	ands	r2, r1
 8013af2:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013af4:	4b1c      	ldr	r3, [pc, #112]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013af6:	4a1f      	ldr	r2, [pc, #124]	@ (8013b74 <MX_USART4_UART_Init+0xa4>)
 8013af8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013afa:	4b1b      	ldr	r3, [pc, #108]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013afc:	22e1      	movs	r2, #225	@ 0xe1
 8013afe:	0252      	lsls	r2, r2, #9
 8013b00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013b02:	4b19      	ldr	r3, [pc, #100]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b04:	2200      	movs	r2, #0
 8013b06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013b08:	4b17      	ldr	r3, [pc, #92]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013b0e:	4b16      	ldr	r3, [pc, #88]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b10:	2200      	movs	r2, #0
 8013b12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013b14:	4b14      	ldr	r3, [pc, #80]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b16:	220c      	movs	r2, #12
 8013b18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013b1a:	4b13      	ldr	r3, [pc, #76]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013b20:	4b11      	ldr	r3, [pc, #68]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013b26:	4b10      	ldr	r3, [pc, #64]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PCE);
 8013b32:	4b0d      	ldr	r3, [pc, #52]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	681a      	ldr	r2, [r3, #0]
 8013b38:	4b0b      	ldr	r3, [pc, #44]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	490b      	ldr	r1, [pc, #44]	@ (8013b6c <MX_USART4_UART_Init+0x9c>)
 8013b3e:	400a      	ands	r2, r1
 8013b40:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PEIE);
 8013b42:	4b09      	ldr	r3, [pc, #36]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	681a      	ldr	r2, [r3, #0]
 8013b48:	4b07      	ldr	r3, [pc, #28]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	4908      	ldr	r1, [pc, #32]	@ (8013b70 <MX_USART4_UART_Init+0xa0>)
 8013b4e:	400a      	ands	r2, r1
 8013b50:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013b52:	4b05      	ldr	r3, [pc, #20]	@ (8013b68 <MX_USART4_UART_Init+0x98>)
 8013b54:	0018      	movs	r0, r3
 8013b56:	f009 fc5d 	bl	801d414 <HAL_UART_Init>
 8013b5a:	1e03      	subs	r3, r0, #0
 8013b5c:	d001      	beq.n	8013b62 <MX_USART4_UART_Init+0x92>
  {
    Error_Handler();
 8013b5e:	f7f9 fc87 	bl	800d470 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013b62:	46c0      	nop			@ (mov r8, r8)
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}
 8013b68:	2000239c 	.word	0x2000239c
 8013b6c:	fffffbff 	.word	0xfffffbff
 8013b70:	fffffeff 	.word	0xfffffeff
 8013b74:	40004c00 	.word	0x40004c00

08013b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013b78:	b590      	push	{r4, r7, lr}
 8013b7a:	b08d      	sub	sp, #52	@ 0x34
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b80:	241c      	movs	r4, #28
 8013b82:	193b      	adds	r3, r7, r4
 8013b84:	0018      	movs	r0, r3
 8013b86:	2314      	movs	r3, #20
 8013b88:	001a      	movs	r2, r3
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	f012 fde6 	bl	802675c <memset>
  if(uartHandle->Instance==LPUART1)
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	4a8b      	ldr	r2, [pc, #556]	@ (8013dc4 <HAL_UART_MspInit+0x24c>)
 8013b96:	4293      	cmp	r3, r2
 8013b98:	d129      	bne.n	8013bee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b9e:	4b8a      	ldr	r3, [pc, #552]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013ba0:	2180      	movs	r1, #128	@ 0x80
 8013ba2:	02c9      	lsls	r1, r1, #11
 8013ba4:	430a      	orrs	r2, r1
 8013ba6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013ba8:	4b87      	ldr	r3, [pc, #540]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bac:	4b86      	ldr	r3, [pc, #536]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013bae:	2104      	movs	r1, #4
 8013bb0:	430a      	orrs	r2, r1
 8013bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bb4:	4b84      	ldr	r3, [pc, #528]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb8:	2204      	movs	r2, #4
 8013bba:	4013      	ands	r3, r2
 8013bbc:	61bb      	str	r3, [r7, #24]
 8013bbe:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013bc0:	0021      	movs	r1, r4
 8013bc2:	187b      	adds	r3, r7, r1
 8013bc4:	2203      	movs	r2, #3
 8013bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bc8:	187b      	adds	r3, r7, r1
 8013bca:	2202      	movs	r2, #2
 8013bcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bce:	187b      	adds	r3, r7, r1
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bd4:	187b      	adds	r3, r7, r1
 8013bd6:	2203      	movs	r2, #3
 8013bd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013bda:	187b      	adds	r3, r7, r1
 8013bdc:	2206      	movs	r2, #6
 8013bde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013be0:	187b      	adds	r3, r7, r1
 8013be2:	4a7a      	ldr	r2, [pc, #488]	@ (8013dcc <HAL_UART_MspInit+0x254>)
 8013be4:	0019      	movs	r1, r3
 8013be6:	0010      	movs	r0, r2
 8013be8:	f001 ffa0 	bl	8015b2c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013bec:	e0e5      	b.n	8013dba <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	4a77      	ldr	r2, [pc, #476]	@ (8013dd0 <HAL_UART_MspInit+0x258>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d133      	bne.n	8013c60 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013bf8:	4b73      	ldr	r3, [pc, #460]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013bfc:	4b72      	ldr	r3, [pc, #456]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013bfe:	2180      	movs	r1, #128	@ 0x80
 8013c00:	01c9      	lsls	r1, r1, #7
 8013c02:	430a      	orrs	r2, r1
 8013c04:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c06:	4b70      	ldr	r3, [pc, #448]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c0c:	2101      	movs	r1, #1
 8013c0e:	430a      	orrs	r2, r1
 8013c10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c12:	4b6d      	ldr	r3, [pc, #436]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c16:	2201      	movs	r2, #1
 8013c18:	4013      	ands	r3, r2
 8013c1a:	617b      	str	r3, [r7, #20]
 8013c1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013c1e:	211c      	movs	r1, #28
 8013c20:	187b      	adds	r3, r7, r1
 8013c22:	22c0      	movs	r2, #192	@ 0xc0
 8013c24:	00d2      	lsls	r2, r2, #3
 8013c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c28:	187b      	adds	r3, r7, r1
 8013c2a:	2202      	movs	r2, #2
 8013c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c2e:	187b      	adds	r3, r7, r1
 8013c30:	2200      	movs	r2, #0
 8013c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c34:	187b      	adds	r3, r7, r1
 8013c36:	2203      	movs	r2, #3
 8013c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013c3a:	187b      	adds	r3, r7, r1
 8013c3c:	2204      	movs	r2, #4
 8013c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c40:	187a      	adds	r2, r7, r1
 8013c42:	23a0      	movs	r3, #160	@ 0xa0
 8013c44:	05db      	lsls	r3, r3, #23
 8013c46:	0011      	movs	r1, r2
 8013c48:	0018      	movs	r0, r3
 8013c4a:	f001 ff6f 	bl	8015b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013c4e:	2200      	movs	r2, #0
 8013c50:	2100      	movs	r1, #0
 8013c52:	201b      	movs	r0, #27
 8013c54:	f001 fb12 	bl	801527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013c58:	201b      	movs	r0, #27
 8013c5a:	f001 fb24 	bl	80152a6 <HAL_NVIC_EnableIRQ>
}
 8013c5e:	e0ac      	b.n	8013dba <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a5b      	ldr	r2, [pc, #364]	@ (8013dd4 <HAL_UART_MspInit+0x25c>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d000      	beq.n	8013c6c <HAL_UART_MspInit+0xf4>
 8013c6a:	e0a6      	b.n	8013dba <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013c6c:	4b56      	ldr	r3, [pc, #344]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c70:	4b55      	ldr	r3, [pc, #340]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c72:	2180      	movs	r1, #128	@ 0x80
 8013c74:	0309      	lsls	r1, r1, #12
 8013c76:	430a      	orrs	r2, r1
 8013c78:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c7a:	4b53      	ldr	r3, [pc, #332]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c7e:	4b52      	ldr	r3, [pc, #328]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c80:	2101      	movs	r1, #1
 8013c82:	430a      	orrs	r2, r1
 8013c84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c86:	4b50      	ldr	r3, [pc, #320]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	613b      	str	r3, [r7, #16]
 8013c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013c92:	4b4d      	ldr	r3, [pc, #308]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c96:	4b4c      	ldr	r3, [pc, #304]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013c98:	2104      	movs	r1, #4
 8013c9a:	430a      	orrs	r2, r1
 8013c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8013dc8 <HAL_UART_MspInit+0x250>)
 8013ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ca2:	2204      	movs	r2, #4
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	60fb      	str	r3, [r7, #12]
 8013ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013caa:	241c      	movs	r4, #28
 8013cac:	193b      	adds	r3, r7, r4
 8013cae:	2202      	movs	r2, #2
 8013cb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cb2:	193b      	adds	r3, r7, r4
 8013cb4:	2202      	movs	r2, #2
 8013cb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cb8:	193b      	adds	r3, r7, r4
 8013cba:	2200      	movs	r2, #0
 8013cbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013cbe:	193b      	adds	r3, r7, r4
 8013cc0:	2203      	movs	r2, #3
 8013cc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013cc4:	193b      	adds	r3, r7, r4
 8013cc6:	2206      	movs	r2, #6
 8013cc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013cca:	193a      	adds	r2, r7, r4
 8013ccc:	23a0      	movs	r3, #160	@ 0xa0
 8013cce:	05db      	lsls	r3, r3, #23
 8013cd0:	0011      	movs	r1, r2
 8013cd2:	0018      	movs	r0, r3
 8013cd4:	f001 ff2a 	bl	8015b2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013cd8:	0021      	movs	r1, r4
 8013cda:	187b      	adds	r3, r7, r1
 8013cdc:	2280      	movs	r2, #128	@ 0x80
 8013cde:	00d2      	lsls	r2, r2, #3
 8013ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ce2:	187b      	adds	r3, r7, r1
 8013ce4:	2202      	movs	r2, #2
 8013ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ce8:	187b      	adds	r3, r7, r1
 8013cea:	2200      	movs	r2, #0
 8013cec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013cee:	187b      	adds	r3, r7, r1
 8013cf0:	2203      	movs	r2, #3
 8013cf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013cf4:	187b      	adds	r3, r7, r1
 8013cf6:	2206      	movs	r2, #6
 8013cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013cfa:	187b      	adds	r3, r7, r1
 8013cfc:	4a33      	ldr	r2, [pc, #204]	@ (8013dcc <HAL_UART_MspInit+0x254>)
 8013cfe:	0019      	movs	r1, r3
 8013d00:	0010      	movs	r0, r2
 8013d02:	f001 ff13 	bl	8015b2c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013d06:	4b34      	ldr	r3, [pc, #208]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d08:	4a34      	ldr	r2, [pc, #208]	@ (8013ddc <HAL_UART_MspInit+0x264>)
 8013d0a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013d0c:	4b32      	ldr	r3, [pc, #200]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d0e:	220c      	movs	r2, #12
 8013d10:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013d12:	4b31      	ldr	r3, [pc, #196]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d14:	2200      	movs	r2, #0
 8013d16:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013d18:	4b2f      	ldr	r3, [pc, #188]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d20:	2280      	movs	r2, #128	@ 0x80
 8013d22:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013d24:	4b2c      	ldr	r3, [pc, #176]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d26:	2200      	movs	r2, #0
 8013d28:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013d30:	4b29      	ldr	r3, [pc, #164]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d32:	2220      	movs	r2, #32
 8013d34:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013d36:	4b28      	ldr	r3, [pc, #160]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d38:	2200      	movs	r2, #0
 8013d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013d3c:	4b26      	ldr	r3, [pc, #152]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d3e:	0018      	movs	r0, r3
 8013d40:	f001 face 	bl	80152e0 <HAL_DMA_Init>
 8013d44:	1e03      	subs	r3, r0, #0
 8013d46:	d001      	beq.n	8013d4c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013d48:	f7f9 fb92 	bl	800d470 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	4a22      	ldr	r2, [pc, #136]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d50:	675a      	str	r2, [r3, #116]	@ 0x74
 8013d52:	4b21      	ldr	r3, [pc, #132]	@ (8013dd8 <HAL_UART_MspInit+0x260>)
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013d58:	4b21      	ldr	r3, [pc, #132]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d5a:	4a22      	ldr	r2, [pc, #136]	@ (8013de4 <HAL_UART_MspInit+0x26c>)
 8013d5c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013d5e:	4b20      	ldr	r3, [pc, #128]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d60:	220c      	movs	r2, #12
 8013d62:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013d64:	4b1e      	ldr	r3, [pc, #120]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d66:	2210      	movs	r2, #16
 8013d68:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013d70:	4b1b      	ldr	r3, [pc, #108]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d72:	2280      	movs	r2, #128	@ 0x80
 8013d74:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013d76:	4b1a      	ldr	r3, [pc, #104]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d78:	2200      	movs	r2, #0
 8013d7a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013d7c:	4b18      	ldr	r3, [pc, #96]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d7e:	2200      	movs	r2, #0
 8013d80:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013d82:	4b17      	ldr	r3, [pc, #92]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d84:	2200      	movs	r2, #0
 8013d86:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013d88:	4b15      	ldr	r3, [pc, #84]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013d8e:	4b14      	ldr	r3, [pc, #80]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013d90:	0018      	movs	r0, r3
 8013d92:	f001 faa5 	bl	80152e0 <HAL_DMA_Init>
 8013d96:	1e03      	subs	r3, r0, #0
 8013d98:	d001      	beq.n	8013d9e <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013d9a:	f7f9 fb69 	bl	800d470 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	4a0f      	ldr	r2, [pc, #60]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013da2:	671a      	str	r2, [r3, #112]	@ 0x70
 8013da4:	4b0e      	ldr	r3, [pc, #56]	@ (8013de0 <HAL_UART_MspInit+0x268>)
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013daa:	2200      	movs	r2, #0
 8013dac:	2100      	movs	r1, #0
 8013dae:	200e      	movs	r0, #14
 8013db0:	f001 fa64 	bl	801527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013db4:	200e      	movs	r0, #14
 8013db6:	f001 fa76 	bl	80152a6 <HAL_NVIC_EnableIRQ>
}
 8013dba:	46c0      	nop			@ (mov r8, r8)
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	b00d      	add	sp, #52	@ 0x34
 8013dc0:	bd90      	pop	{r4, r7, pc}
 8013dc2:	46c0      	nop			@ (mov r8, r8)
 8013dc4:	40004800 	.word	0x40004800
 8013dc8:	40021000 	.word	0x40021000
 8013dcc:	50000800 	.word	0x50000800
 8013dd0:	40013800 	.word	0x40013800
 8013dd4:	40004c00 	.word	0x40004c00
 8013dd8:	20002454 	.word	0x20002454
 8013ddc:	4002006c 	.word	0x4002006c
 8013de0:	2000249c 	.word	0x2000249c
 8013de4:	40020080 	.word	0x40020080

08013de8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b086      	sub	sp, #24
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013df0:	f000 fdd0 	bl	8014994 <HAL_GetTick>
 8013df4:	0003      	movs	r3, r0
 8013df6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013df8:	4b1c      	ldr	r3, [pc, #112]	@ (8013e6c <TimestampIsReached+0x84>)
 8013dfa:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013dfc:	697a      	ldr	r2, [r7, #20]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d307      	bcc.n	8013e14 <TimestampIsReached+0x2c>
 8013e04:	697a      	ldr	r2, [r7, #20]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	1ad3      	subs	r3, r2, r3
 8013e0a:	693a      	ldr	r2, [r7, #16]
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d901      	bls.n	8013e14 <TimestampIsReached+0x2c>
 8013e10:	2201      	movs	r2, #1
 8013e12:	e000      	b.n	8013e16 <TimestampIsReached+0x2e>
 8013e14:	2200      	movs	r2, #0
 8013e16:	230f      	movs	r3, #15
 8013e18:	18fb      	adds	r3, r7, r3
 8013e1a:	701a      	strb	r2, [r3, #0]
 8013e1c:	781a      	ldrb	r2, [r3, #0]
 8013e1e:	2101      	movs	r1, #1
 8013e20:	400a      	ands	r2, r1
 8013e22:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013e24:	697a      	ldr	r2, [r7, #20]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d207      	bcs.n	8013e3c <TimestampIsReached+0x54>
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	693a      	ldr	r2, [r7, #16]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d201      	bcs.n	8013e3c <TimestampIsReached+0x54>
 8013e38:	2201      	movs	r2, #1
 8013e3a:	e000      	b.n	8013e3e <TimestampIsReached+0x56>
 8013e3c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013e3e:	200e      	movs	r0, #14
 8013e40:	183b      	adds	r3, r7, r0
 8013e42:	701a      	strb	r2, [r3, #0]
 8013e44:	781a      	ldrb	r2, [r3, #0]
 8013e46:	2101      	movs	r1, #1
 8013e48:	400a      	ands	r2, r1
 8013e4a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013e4c:	230f      	movs	r3, #15
 8013e4e:	18fb      	adds	r3, r7, r3
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d103      	bne.n	8013e5e <TimestampIsReached+0x76>
 8013e56:	183b      	adds	r3, r7, r0
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d001      	beq.n	8013e62 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013e5e:	2301      	movs	r3, #1
 8013e60:	e000      	b.n	8013e64 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013e62:	2300      	movs	r3, #0
}
 8013e64:	0018      	movs	r0, r3
 8013e66:	46bd      	mov	sp, r7
 8013e68:	b006      	add	sp, #24
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	7fffffff 	.word	0x7fffffff

08013e70 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013e78:	f000 fd8c 	bl	8014994 <HAL_GetTick>
 8013e7c:	0002      	movs	r2, r0
 8013e7e:	4904      	ldr	r1, [pc, #16]	@ (8013e90 <AddTimestamp+0x20>)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	0018      	movs	r0, r3
 8013e84:	f012 fb22 	bl	80264cc <siprintf>
}
 8013e88:	46c0      	nop			@ (mov r8, r8)
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	b002      	add	sp, #8
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	0802dd64 	.word	0x0802dd64

08013e94 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013e94:	b40c      	push	{r2, r3}
 8013e96:	b5b0      	push	{r4, r5, r7, lr}
 8013e98:	b0b4      	sub	sp, #208	@ 0xd0
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	0002      	movs	r2, r0
 8013e9e:	6039      	str	r1, [r7, #0]
 8013ea0:	1dfb      	adds	r3, r7, #7
 8013ea2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8013f50 <CreateLine+0xbc>)
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	1dfa      	adds	r2, r7, #7
 8013eaa:	7812      	ldrb	r2, [r2, #0]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d848      	bhi.n	8013f42 <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013eb0:	683a      	ldr	r2, [r7, #0]
 8013eb2:	4928      	ldr	r1, [pc, #160]	@ (8013f54 <CreateLine+0xc0>)
 8013eb4:	240c      	movs	r4, #12
 8013eb6:	193b      	adds	r3, r7, r4
 8013eb8:	0018      	movs	r0, r3
 8013eba:	f012 fb07 	bl	80264cc <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013ebe:	4b24      	ldr	r3, [pc, #144]	@ (8013f50 <CreateLine+0xbc>)
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d909      	bls.n	8013eda <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013ec6:	193b      	adds	r3, r7, r4
 8013ec8:	0018      	movs	r0, r3
 8013eca:	f7ec f94f 	bl	800016c <strlen>
 8013ece:	0002      	movs	r2, r0
 8013ed0:	193b      	adds	r3, r7, r4
 8013ed2:	189b      	adds	r3, r3, r2
 8013ed4:	0018      	movs	r0, r3
 8013ed6:	f7ff ffcb 	bl	8013e70 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013eda:	240c      	movs	r4, #12
 8013edc:	193b      	adds	r3, r7, r4
 8013ede:	0018      	movs	r0, r3
 8013ee0:	f7ec f944 	bl	800016c <strlen>
 8013ee4:	0003      	movs	r3, r0
 8013ee6:	21cc      	movs	r1, #204	@ 0xcc
 8013ee8:	187a      	adds	r2, r7, r1
 8013eea:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013eec:	23dc      	movs	r3, #220	@ 0xdc
 8013eee:	2508      	movs	r5, #8
 8013ef0:	195b      	adds	r3, r3, r5
 8013ef2:	19db      	adds	r3, r3, r7
 8013ef4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8013ef6:	193a      	adds	r2, r7, r4
 8013ef8:	187b      	adds	r3, r7, r1
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	18d0      	adds	r0, r2, r3
 8013efe:	187b      	adds	r3, r7, r1
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	22be      	movs	r2, #190	@ 0xbe
 8013f04:	1ad3      	subs	r3, r2, r3
 8013f06:	0019      	movs	r1, r3
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	22d8      	movs	r2, #216	@ 0xd8
 8013f0c:	1952      	adds	r2, r2, r5
 8013f0e:	19d2      	adds	r2, r2, r7
 8013f10:	6812      	ldr	r2, [r2, #0]
 8013f12:	f012 fb77 	bl	8026604 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8013f16:	4b10      	ldr	r3, [pc, #64]	@ (8013f58 <CreateLine+0xc4>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d009      	beq.n	8013f32 <CreateLine+0x9e>
 8013f1e:	f7f5 fedf 	bl	8009ce0 <Check_USB_PowerOn>
 8013f22:	1e03      	subs	r3, r0, #0
 8013f24:	d005      	beq.n	8013f32 <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8013f26:	193a      	adds	r2, r7, r4
 8013f28:	4b0c      	ldr	r3, [pc, #48]	@ (8013f5c <CreateLine+0xc8>)
 8013f2a:	0011      	movs	r1, r2
 8013f2c:	0018      	movs	r0, r3
 8013f2e:	f7f4 fddb 	bl	8008ae8 <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8013f32:	230c      	movs	r3, #12
 8013f34:	18fa      	adds	r2, r7, r3
 8013f36:	4b09      	ldr	r3, [pc, #36]	@ (8013f5c <CreateLine+0xc8>)
 8013f38:	0011      	movs	r1, r2
 8013f3a:	0018      	movs	r0, r3
 8013f3c:	f012 fa56 	bl	80263ec <iprintf>
 8013f40:	e000      	b.n	8013f44 <CreateLine+0xb0>
    return;
 8013f42:	46c0      	nop			@ (mov r8, r8)
}
 8013f44:	46bd      	mov	sp, r7
 8013f46:	b034      	add	sp, #208	@ 0xd0
 8013f48:	bcb0      	pop	{r4, r5, r7}
 8013f4a:	bc08      	pop	{r3}
 8013f4c:	b002      	add	sp, #8
 8013f4e:	4718      	bx	r3
 8013f50:	200000f0 	.word	0x200000f0
 8013f54:	0802dd70 	.word	0x0802dd70
 8013f58:	200010f7 	.word	0x200010f7
 8013f5c:	0802dd74 	.word	0x0802dd74

08013f60 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b084      	sub	sp, #16
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	68b9      	ldr	r1, [r7, #8]
 8013f72:	4804      	ldr	r0, [pc, #16]	@ (8013f84 <_write+0x24>)
 8013f74:	2364      	movs	r3, #100	@ 0x64
 8013f76:	f009 fab3 	bl	801d4e0 <HAL_UART_Transmit>
  return count;
 8013f7a:	687b      	ldr	r3, [r7, #4]
}
 8013f7c:	0018      	movs	r0, r3
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	b004      	add	sp, #16
 8013f82:	bd80      	pop	{r7, pc}
 8013f84:	200022e4 	.word	0x200022e4

08013f88 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	0002      	movs	r2, r0
 8013f90:	1dfb      	adds	r3, r7, #7
 8013f92:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013f94:	4b03      	ldr	r3, [pc, #12]	@ (8013fa4 <SetVerboseLevel+0x1c>)
 8013f96:	1dfa      	adds	r2, r7, #7
 8013f98:	7812      	ldrb	r2, [r2, #0]
 8013f9a:	701a      	strb	r2, [r3, #0]
}
 8013f9c:	46c0      	nop			@ (mov r8, r8)
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	b002      	add	sp, #8
 8013fa2:	bd80      	pop	{r7, pc}
 8013fa4:	200000f0 	.word	0x200000f0

08013fa8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013fac:	4b02      	ldr	r3, [pc, #8]	@ (8013fb8 <GetVerboseLevel+0x10>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	0018      	movs	r0, r3
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	46c0      	nop			@ (mov r8, r8)
 8013fb8:	200000f0 	.word	0x200000f0

08013fbc <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b08c      	sub	sp, #48	@ 0x30
 8013fc0:	af00      	add	r7, sp, #0
#else
  char msgout[56];
#endif
#ifdef DEBUG
  #ifndef LARGEBATTERY
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8013fc2:	4a21      	ldr	r2, [pc, #132]	@ (8014048 <BinaryReleaseInfo+0x8c>)
 8013fc4:	4921      	ldr	r1, [pc, #132]	@ (801404c <BinaryReleaseInfo+0x90>)
 8013fc6:	1d3b      	adds	r3, r7, #4
 8013fc8:	0018      	movs	r0, r3
 8013fca:	f012 fa7f 	bl	80264cc <siprintf>
  #else
  sprintf(msgout,"Software version: %s Large Battery, Release build", SRC_VERSION);
  #endif
#endif
#ifdef IGNORE_PARITY_ERRORS
  sprintf(msgout,"Build ignores parity errors from ESP32");
 8013fce:	4a20      	ldr	r2, [pc, #128]	@ (8014050 <BinaryReleaseInfo+0x94>)
 8013fd0:	1d3b      	adds	r3, r7, #4
 8013fd2:	0011      	movs	r1, r2
 8013fd4:	0018      	movs	r0, r3
 8013fd6:	f012 fa79 	bl	80264cc <siprintf>
#endif
  if (!usblog) {
 8013fda:	4b1e      	ldr	r3, [pc, #120]	@ (8014054 <BinaryReleaseInfo+0x98>)
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	2201      	movs	r2, #1
 8013fe0:	4053      	eors	r3, r2
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d005      	beq.n	8013ff4 <BinaryReleaseInfo+0x38>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013fe8:	1d3a      	adds	r2, r7, #4
 8013fea:	4b1b      	ldr	r3, [pc, #108]	@ (8014058 <BinaryReleaseInfo+0x9c>)
 8013fec:	0011      	movs	r1, r2
 8013fee:	0018      	movs	r0, r3
 8013ff0:	f7f4 fd7a 	bl	8008ae8 <printf_USB>
  }
  Info(msgout);
 8013ff4:	1d3a      	adds	r2, r7, #4
 8013ff6:	4b19      	ldr	r3, [pc, #100]	@ (801405c <BinaryReleaseInfo+0xa0>)
 8013ff8:	0019      	movs	r1, r3
 8013ffa:	2002      	movs	r0, #2
 8013ffc:	f7ff ff4a 	bl	8013e94 <CreateLine>
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8014000:	4b17      	ldr	r3, [pc, #92]	@ (8014060 <BinaryReleaseInfo+0xa4>)
 8014002:	4a18      	ldr	r2, [pc, #96]	@ (8014064 <BinaryReleaseInfo+0xa8>)
 8014004:	4918      	ldr	r1, [pc, #96]	@ (8014068 <BinaryReleaseInfo+0xac>)
 8014006:	1d38      	adds	r0, r7, #4
 8014008:	f012 fa60 	bl	80264cc <siprintf>
  if (!usblog) {
 801400c:	4b11      	ldr	r3, [pc, #68]	@ (8014054 <BinaryReleaseInfo+0x98>)
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	2201      	movs	r2, #1
 8014012:	4053      	eors	r3, r2
 8014014:	b2db      	uxtb	r3, r3
 8014016:	2b00      	cmp	r3, #0
 8014018:	d005      	beq.n	8014026 <BinaryReleaseInfo+0x6a>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 801401a:	1d3a      	adds	r2, r7, #4
 801401c:	4b0e      	ldr	r3, [pc, #56]	@ (8014058 <BinaryReleaseInfo+0x9c>)
 801401e:	0011      	movs	r1, r2
 8014020:	0018      	movs	r0, r3
 8014022:	f7f4 fd61 	bl	8008ae8 <printf_USB>
  }
  Info(msgout);
 8014026:	1d3a      	adds	r2, r7, #4
 8014028:	4b0c      	ldr	r3, [pc, #48]	@ (801405c <BinaryReleaseInfo+0xa0>)
 801402a:	0019      	movs	r1, r3
 801402c:	2002      	movs	r0, #2
 801402e:	f7ff ff31 	bl	8013e94 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8014032:	4b0e      	ldr	r3, [pc, #56]	@ (801406c <BinaryReleaseInfo+0xb0>)
 8014034:	4a0e      	ldr	r2, [pc, #56]	@ (8014070 <BinaryReleaseInfo+0xb4>)
 8014036:	4909      	ldr	r1, [pc, #36]	@ (801405c <BinaryReleaseInfo+0xa0>)
 8014038:	2002      	movs	r0, #2
 801403a:	f7ff ff2b 	bl	8013e94 <CreateLine>
}
 801403e:	46c0      	nop			@ (mov r8, r8)
 8014040:	46bd      	mov	sp, r7
 8014042:	b00c      	add	sp, #48	@ 0x30
 8014044:	bd80      	pop	{r7, pc}
 8014046:	46c0      	nop			@ (mov r8, r8)
 8014048:	0802dd7c 	.word	0x0802dd7c
 801404c:	0802dd84 	.word	0x0802dd84
 8014050:	0802dda8 	.word	0x0802dda8
 8014054:	200010f7 	.word	0x200010f7
 8014058:	0802dd74 	.word	0x0802dd74
 801405c:	0802ddd0 	.word	0x0802ddd0
 8014060:	0802ddd4 	.word	0x0802ddd4
 8014064:	0802dde0 	.word	0x0802dde0
 8014068:	0802ddec 	.word	0x0802ddec
 801406c:	0802de00 	.word	0x0802de00
 8014070:	0802de0c 	.word	0x0802de0c

08014074 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af02      	add	r7, sp, #8
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	4a07      	ldr	r2, [pc, #28]	@ (80140a0 <errorHandler+0x2c>)
 8014084:	4907      	ldr	r1, [pc, #28]	@ (80140a4 <errorHandler+0x30>)
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	9301      	str	r3, [sp, #4]
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	0003      	movs	r3, r0
 8014090:	2001      	movs	r0, #1
 8014092:	f7ff feff 	bl	8013e94 <CreateLine>
//    while (true)
//    {
//    }
}
 8014096:	46c0      	nop			@ (mov r8, r8)
 8014098:	46bd      	mov	sp, r7
 801409a:	b004      	add	sp, #16
 801409c:	bd80      	pop	{r7, pc}
 801409e:	46c0      	nop			@ (mov r8, r8)
 80140a0:	0802de14 	.word	0x0802de14
 80140a4:	0802de3c 	.word	0x0802de3c

080140a8 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80140a8:	b590      	push	{r4, r7, lr}
 80140aa:	b083      	sub	sp, #12
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6039      	str	r1, [r7, #0]
 80140b0:	0011      	movs	r1, r2
 80140b2:	1dfb      	adds	r3, r7, #7
 80140b4:	1c02      	adds	r2, r0, #0
 80140b6:	701a      	strb	r2, [r3, #0]
 80140b8:	1dbb      	adds	r3, r7, #6
 80140ba:	1c0a      	adds	r2, r1, #0
 80140bc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80140be:	4b0a      	ldr	r3, [pc, #40]	@ (80140e8 <ReadRegister+0x40>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d00a      	beq.n	80140dc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80140c6:	4b08      	ldr	r3, [pc, #32]	@ (80140e8 <ReadRegister+0x40>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	1dba      	adds	r2, r7, #6
 80140cc:	7814      	ldrb	r4, [r2, #0]
 80140ce:	6839      	ldr	r1, [r7, #0]
 80140d0:	1dfa      	adds	r2, r7, #7
 80140d2:	7810      	ldrb	r0, [r2, #0]
 80140d4:	0022      	movs	r2, r4
 80140d6:	4798      	blx	r3
 80140d8:	0003      	movs	r3, r0
 80140da:	e000      	b.n	80140de <ReadRegister+0x36>
	}
	return false;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	0018      	movs	r0, r3
 80140e0:	46bd      	mov	sp, r7
 80140e2:	b003      	add	sp, #12
 80140e4:	bd90      	pop	{r4, r7, pc}
 80140e6:	46c0      	nop			@ (mov r8, r8)
 80140e8:	200024ec 	.word	0x200024ec

080140ec <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80140ec:	b590      	push	{r4, r7, lr}
 80140ee:	b083      	sub	sp, #12
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6039      	str	r1, [r7, #0]
 80140f4:	0011      	movs	r1, r2
 80140f6:	1dfb      	adds	r3, r7, #7
 80140f8:	1c02      	adds	r2, r0, #0
 80140fa:	701a      	strb	r2, [r3, #0]
 80140fc:	1dbb      	adds	r3, r7, #6
 80140fe:	1c0a      	adds	r2, r1, #0
 8014100:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8014102:	4b0a      	ldr	r3, [pc, #40]	@ (801412c <WriteRegister+0x40>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d00a      	beq.n	8014120 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 801410a:	4b08      	ldr	r3, [pc, #32]	@ (801412c <WriteRegister+0x40>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	1dba      	adds	r2, r7, #6
 8014110:	7814      	ldrb	r4, [r2, #0]
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	1dfa      	adds	r2, r7, #7
 8014116:	7810      	ldrb	r0, [r2, #0]
 8014118:	0022      	movs	r2, r4
 801411a:	4798      	blx	r3
 801411c:	0003      	movs	r3, r0
 801411e:	e000      	b.n	8014122 <WriteRegister+0x36>
  }
  return false;
 8014120:	2300      	movs	r3, #0
}
 8014122:	0018      	movs	r0, r3
 8014124:	46bd      	mov	sp, r7
 8014126:	b003      	add	sp, #12
 8014128:	bd90      	pop	{r4, r7, pc}
 801412a:	46c0      	nop			@ (mov r8, r8)
 801412c:	200024f0 	.word	0x200024f0

08014130 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	000a      	movs	r2, r1
 801413a:	1cfb      	adds	r3, r7, #3
 801413c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 801413e:	230f      	movs	r3, #15
 8014140:	18fb      	adds	r3, r7, r3
 8014142:	22ff      	movs	r2, #255	@ 0xff
 8014144:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8014146:	230e      	movs	r3, #14
 8014148:	18fb      	adds	r3, r7, r3
 801414a:	2200      	movs	r2, #0
 801414c:	701a      	strb	r2, [r3, #0]
 801414e:	e038      	b.n	80141c2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8014150:	230e      	movs	r3, #14
 8014152:	18fb      	adds	r3, r7, r3
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	18d3      	adds	r3, r2, r3
 801415a:	7819      	ldrb	r1, [r3, #0]
 801415c:	220f      	movs	r2, #15
 801415e:	18bb      	adds	r3, r7, r2
 8014160:	18ba      	adds	r2, r7, r2
 8014162:	7812      	ldrb	r2, [r2, #0]
 8014164:	404a      	eors	r2, r1
 8014166:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8014168:	230d      	movs	r3, #13
 801416a:	18fb      	adds	r3, r7, r3
 801416c:	2200      	movs	r2, #0
 801416e:	701a      	strb	r2, [r3, #0]
 8014170:	e01c      	b.n	80141ac <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8014172:	210f      	movs	r1, #15
 8014174:	187b      	adds	r3, r7, r1
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	b25b      	sxtb	r3, r3
 801417a:	2b00      	cmp	r3, #0
 801417c:	da0a      	bge.n	8014194 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 801417e:	187b      	adds	r3, r7, r1
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	b25b      	sxtb	r3, r3
 8014184:	18db      	adds	r3, r3, r3
 8014186:	b25b      	sxtb	r3, r3
 8014188:	2231      	movs	r2, #49	@ 0x31
 801418a:	4053      	eors	r3, r2
 801418c:	b25a      	sxtb	r2, r3
 801418e:	187b      	adds	r3, r7, r1
 8014190:	701a      	strb	r2, [r3, #0]
 8014192:	e005      	b.n	80141a0 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8014194:	230f      	movs	r3, #15
 8014196:	18fa      	adds	r2, r7, r3
 8014198:	18fb      	adds	r3, r7, r3
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	18db      	adds	r3, r3, r3
 801419e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80141a0:	210d      	movs	r1, #13
 80141a2:	187b      	adds	r3, r7, r1
 80141a4:	781a      	ldrb	r2, [r3, #0]
 80141a6:	187b      	adds	r3, r7, r1
 80141a8:	3201      	adds	r2, #1
 80141aa:	701a      	strb	r2, [r3, #0]
 80141ac:	230d      	movs	r3, #13
 80141ae:	18fb      	adds	r3, r7, r3
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	2b07      	cmp	r3, #7
 80141b4:	d9dd      	bls.n	8014172 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80141b6:	210e      	movs	r1, #14
 80141b8:	187b      	adds	r3, r7, r1
 80141ba:	781a      	ldrb	r2, [r3, #0]
 80141bc:	187b      	adds	r3, r7, r1
 80141be:	3201      	adds	r2, #1
 80141c0:	701a      	strb	r2, [r3, #0]
 80141c2:	230e      	movs	r3, #14
 80141c4:	18fa      	adds	r2, r7, r3
 80141c6:	1cfb      	adds	r3, r7, #3
 80141c8:	7812      	ldrb	r2, [r2, #0]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d3bf      	bcc.n	8014150 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80141d0:	230f      	movs	r3, #15
 80141d2:	18fb      	adds	r3, r7, r3
 80141d4:	781b      	ldrb	r3, [r3, #0]
}
 80141d6:	0018      	movs	r0, r3
 80141d8:	46bd      	mov	sp, r7
 80141da:	b004      	add	sp, #16
 80141dc:	bd80      	pop	{r7, pc}
	...

080141e0 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 80141e0:	b5b0      	push	{r4, r5, r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	1c18      	adds	r0, r3, #0
 80141f0:	f7ef fb50 	bl	8003894 <__aeabi_f2d>
 80141f4:	4a2e      	ldr	r2, [pc, #184]	@ (80142b0 <HIDS_DewPointCalculation+0xd0>)
 80141f6:	4b2f      	ldr	r3, [pc, #188]	@ (80142b4 <HIDS_DewPointCalculation+0xd4>)
 80141f8:	f7ee fbac 	bl	8002954 <__aeabi_dmul>
 80141fc:	0002      	movs	r2, r0
 80141fe:	000b      	movs	r3, r1
 8014200:	0014      	movs	r4, r2
 8014202:	001d      	movs	r5, r3
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	1c18      	adds	r0, r3, #0
 801420a:	f7ef fb43 	bl	8003894 <__aeabi_f2d>
 801420e:	4a2a      	ldr	r2, [pc, #168]	@ (80142b8 <HIDS_DewPointCalculation+0xd8>)
 8014210:	4b2a      	ldr	r3, [pc, #168]	@ (80142bc <HIDS_DewPointCalculation+0xdc>)
 8014212:	f7ed fb9f 	bl	8001954 <__aeabi_dadd>
 8014216:	0002      	movs	r2, r0
 8014218:	000b      	movs	r3, r1
 801421a:	0020      	movs	r0, r4
 801421c:	0029      	movs	r1, r5
 801421e:	f7ed ff5f 	bl	80020e0 <__aeabi_ddiv>
 8014222:	0002      	movs	r2, r0
 8014224:	000b      	movs	r3, r1
 8014226:	0014      	movs	r4, r2
 8014228:	001d      	movs	r5, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	1c18      	adds	r0, r3, #0
 8014230:	f7ef fb30 	bl	8003894 <__aeabi_f2d>
 8014234:	2200      	movs	r2, #0
 8014236:	4b22      	ldr	r3, [pc, #136]	@ (80142c0 <HIDS_DewPointCalculation+0xe0>)
 8014238:	f7ed ff52 	bl	80020e0 <__aeabi_ddiv>
 801423c:	0002      	movs	r2, r0
 801423e:	000b      	movs	r3, r1
 8014240:	0010      	movs	r0, r2
 8014242:	0019      	movs	r1, r3
 8014244:	f015 f81a 	bl	802927c <log>
 8014248:	0002      	movs	r2, r0
 801424a:	000b      	movs	r3, r1
 801424c:	0020      	movs	r0, r4
 801424e:	0029      	movs	r1, r5
 8014250:	f7ed fb80 	bl	8001954 <__aeabi_dadd>
 8014254:	0002      	movs	r2, r0
 8014256:	000b      	movs	r3, r1
 8014258:	0010      	movs	r0, r2
 801425a:	0019      	movs	r1, r3
 801425c:	f7ef fb62 	bl	8003924 <__aeabi_d2f>
 8014260:	1c03      	adds	r3, r0, #0
 8014262:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f7ef fb15 	bl	8003894 <__aeabi_f2d>
 801426a:	4a13      	ldr	r2, [pc, #76]	@ (80142b8 <HIDS_DewPointCalculation+0xd8>)
 801426c:	4b13      	ldr	r3, [pc, #76]	@ (80142bc <HIDS_DewPointCalculation+0xdc>)
 801426e:	f7ee fb71 	bl	8002954 <__aeabi_dmul>
 8014272:	0002      	movs	r2, r0
 8014274:	000b      	movs	r3, r1
 8014276:	0014      	movs	r4, r2
 8014278:	001d      	movs	r5, r3
 801427a:	68f8      	ldr	r0, [r7, #12]
 801427c:	f7ef fb0a 	bl	8003894 <__aeabi_f2d>
 8014280:	0002      	movs	r2, r0
 8014282:	000b      	movs	r3, r1
 8014284:	480a      	ldr	r0, [pc, #40]	@ (80142b0 <HIDS_DewPointCalculation+0xd0>)
 8014286:	490b      	ldr	r1, [pc, #44]	@ (80142b4 <HIDS_DewPointCalculation+0xd4>)
 8014288:	f7ee fe4a 	bl	8002f20 <__aeabi_dsub>
 801428c:	0002      	movs	r2, r0
 801428e:	000b      	movs	r3, r1
 8014290:	0020      	movs	r0, r4
 8014292:	0029      	movs	r1, r5
 8014294:	f7ed ff24 	bl	80020e0 <__aeabi_ddiv>
 8014298:	0002      	movs	r2, r0
 801429a:	000b      	movs	r3, r1
 801429c:	0010      	movs	r0, r2
 801429e:	0019      	movs	r1, r3
 80142a0:	f7ef fb40 	bl	8003924 <__aeabi_d2f>
 80142a4:	1c03      	adds	r3, r0, #0
}
 80142a6:	1c18      	adds	r0, r3, #0
 80142a8:	46bd      	mov	sp, r7
 80142aa:	b004      	add	sp, #16
 80142ac:	bdb0      	pop	{r4, r5, r7, pc}
 80142ae:	46c0      	nop			@ (mov r8, r8)
 80142b0:	b851eb85 	.word	0xb851eb85
 80142b4:	4031451e 	.word	0x4031451e
 80142b8:	66666666 	.word	0x66666666
 80142bc:	406db666 	.word	0x406db666
 80142c0:	40590000 	.word	0x40590000

080142c4 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 80142ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014300 <HIDS_EnableHeater+0x3c>)
 80142cc:	781a      	ldrb	r2, [r3, #0]
 80142ce:	1dfb      	adds	r3, r7, #7
 80142d0:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 80142d2:	1dfb      	adds	r3, r7, #7
 80142d4:	2201      	movs	r2, #1
 80142d6:	0019      	movs	r1, r3
 80142d8:	2044      	movs	r0, #68	@ 0x44
 80142da:	f7ff ff07 	bl	80140ec <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 80142de:	1dfb      	adds	r3, r7, #7
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	4a08      	ldr	r2, [pc, #32]	@ (8014304 <HIDS_EnableHeater+0x40>)
 80142e4:	4908      	ldr	r1, [pc, #32]	@ (8014308 <HIDS_EnableHeater+0x44>)
 80142e6:	2002      	movs	r0, #2
 80142e8:	f7ff fdd4 	bl	8013e94 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 80142ec:	f7f6 f99a 	bl	800a624 <getPosixTime>
 80142f0:	0002      	movs	r2, r0
 80142f2:	4b06      	ldr	r3, [pc, #24]	@ (801430c <HIDS_EnableHeater+0x48>)
 80142f4:	601a      	str	r2, [r3, #0]
}
 80142f6:	46c0      	nop			@ (mov r8, r8)
 80142f8:	46bd      	mov	sp, r7
 80142fa:	b002      	add	sp, #8
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	46c0      	nop			@ (mov r8, r8)
 8014300:	200000f1 	.word	0x200000f1
 8014304:	0802de40 	.word	0x0802de40
 8014308:	0802de60 	.word	0x0802de60
 801430c:	20002504 	.word	0x20002504

08014310 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8014310:	b580      	push	{r7, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801431a:	4b0a      	ldr	r3, [pc, #40]	@ (8014344 <HIDS_Init+0x34>)
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8014320:	4b09      	ldr	r3, [pc, #36]	@ (8014348 <HIDS_Init+0x38>)
 8014322:	683a      	ldr	r2, [r7, #0]
 8014324:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8014326:	4b09      	ldr	r3, [pc, #36]	@ (801434c <HIDS_Init+0x3c>)
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	0018      	movs	r0, r3
 801432c:	f000 f840 	bl	80143b0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8014330:	4b07      	ldr	r3, [pc, #28]	@ (8014350 <HIDS_Init+0x40>)
 8014332:	781b      	ldrb	r3, [r3, #0]
 8014334:	0018      	movs	r0, r3
 8014336:	f000 f82b 	bl	8014390 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801433a:	46c0      	nop			@ (mov r8, r8)
 801433c:	46bd      	mov	sp, r7
 801433e:	b002      	add	sp, #8
 8014340:	bd80      	pop	{r7, pc}
 8014342:	46c0      	nop			@ (mov r8, r8)
 8014344:	200024ec 	.word	0x200024ec
 8014348:	200024f0 	.word	0x200024f0
 801434c:	200000f2 	.word	0x200000f2
 8014350:	200000f1 	.word	0x200000f1

08014354 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8014354:	b580      	push	{r7, lr}
 8014356:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8014358:	f000 fb1c 	bl	8014994 <HAL_GetTick>
 801435c:	0002      	movs	r2, r0
 801435e:	4b08      	ldr	r3, [pc, #32]	@ (8014380 <HIDS_StartMeasurement+0x2c>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	18d2      	adds	r2, r2, r3
 8014364:	4b07      	ldr	r3, [pc, #28]	@ (8014384 <HIDS_StartMeasurement+0x30>)
 8014366:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8014368:	4b07      	ldr	r3, [pc, #28]	@ (8014388 <HIDS_StartMeasurement+0x34>)
 801436a:	2201      	movs	r2, #1
 801436c:	0019      	movs	r1, r3
 801436e:	2044      	movs	r0, #68	@ 0x44
 8014370:	f7ff febc 	bl	80140ec <WriteRegister>
  MeasurementDone = false;
 8014374:	4b05      	ldr	r3, [pc, #20]	@ (801438c <HIDS_StartMeasurement+0x38>)
 8014376:	2200      	movs	r2, #0
 8014378:	701a      	strb	r2, [r3, #0]
}
 801437a:	46c0      	nop			@ (mov r8, r8)
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	200000f8 	.word	0x200000f8
 8014384:	200000f4 	.word	0x200000f4
 8014388:	200000f2 	.word	0x200000f2
 801438c:	20002508 	.word	0x20002508

08014390 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	0002      	movs	r2, r0
 8014398:	1dfb      	adds	r3, r7, #7
 801439a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 801439c:	4b03      	ldr	r3, [pc, #12]	@ (80143ac <HIDS_SetHeaterMode+0x1c>)
 801439e:	1dfa      	adds	r2, r7, #7
 80143a0:	7812      	ldrb	r2, [r2, #0]
 80143a2:	701a      	strb	r2, [r3, #0]
}
 80143a4:	46c0      	nop			@ (mov r8, r8)
 80143a6:	46bd      	mov	sp, r7
 80143a8:	b002      	add	sp, #8
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	200000f1 	.word	0x200000f1

080143b0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	0002      	movs	r2, r0
 80143b8:	1dfb      	adds	r3, r7, #7
 80143ba:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80143bc:	4b03      	ldr	r3, [pc, #12]	@ (80143cc <HIDS_SetMeasurementMode+0x1c>)
 80143be:	1dfa      	adds	r2, r7, #7
 80143c0:	7812      	ldrb	r2, [r2, #0]
 80143c2:	701a      	strb	r2, [r3, #0]
}
 80143c4:	46c0      	nop			@ (mov r8, r8)
 80143c6:	46bd      	mov	sp, r7
 80143c8:	b002      	add	sp, #8
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	200000f2 	.word	0x200000f2

080143d0 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 80143d8:	f000 fadc 	bl	8014994 <HAL_GetTick>
 80143dc:	0002      	movs	r2, r0
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	18d2      	adds	r2, r2, r3
 80143e2:	4b03      	ldr	r3, [pc, #12]	@ (80143f0 <setHIDSTimeStamp+0x20>)
 80143e4:	601a      	str	r2, [r3, #0]
}
 80143e6:	46c0      	nop			@ (mov r8, r8)
 80143e8:	46bd      	mov	sp, r7
 80143ea:	b002      	add	sp, #8
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	46c0      	nop			@ (mov r8, r8)
 80143f0:	2000250c 	.word	0x2000250c

080143f4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80143f4:	b590      	push	{r4, r7, lr}
 80143f6:	b085      	sub	sp, #20
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	781a      	ldrb	r2, [r3, #0]
 8014400:	210c      	movs	r1, #12
 8014402:	187b      	adds	r3, r7, r1
 8014404:	701a      	strb	r2, [r3, #0]
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	785a      	ldrb	r2, [r3, #1]
 801440a:	187b      	adds	r3, r7, r1
 801440c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 801440e:	240f      	movs	r4, #15
 8014410:	193b      	adds	r3, r7, r4
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	7892      	ldrb	r2, [r2, #2]
 8014416:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8014418:	187b      	adds	r3, r7, r1
 801441a:	2102      	movs	r1, #2
 801441c:	0018      	movs	r0, r3
 801441e:	f7ff fe87 	bl	8014130 <CalculateCRC>
 8014422:	0003      	movs	r3, r0
 8014424:	001a      	movs	r2, r3
 8014426:	193b      	adds	r3, r7, r4
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	4293      	cmp	r3, r2
 801442c:	d007      	beq.n	801443e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 801442e:	4a1a      	ldr	r2, [pc, #104]	@ (8014498 <CheckCRC+0xa4>)
 8014430:	4b1a      	ldr	r3, [pc, #104]	@ (801449c <CheckCRC+0xa8>)
 8014432:	0019      	movs	r1, r3
 8014434:	2001      	movs	r0, #1
 8014436:	f7ff fd2d 	bl	8013e94 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 801443a:	2300      	movs	r3, #0
 801443c:	e027      	b.n	801448e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	78da      	ldrb	r2, [r3, #3]
 8014442:	2108      	movs	r1, #8
 8014444:	187b      	adds	r3, r7, r1
 8014446:	701a      	strb	r2, [r3, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	791a      	ldrb	r2, [r3, #4]
 801444c:	187b      	adds	r3, r7, r1
 801444e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8014450:	240e      	movs	r4, #14
 8014452:	193b      	adds	r3, r7, r4
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	7952      	ldrb	r2, [r2, #5]
 8014458:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801445a:	187b      	adds	r3, r7, r1
 801445c:	2102      	movs	r1, #2
 801445e:	0018      	movs	r0, r3
 8014460:	f7ff fe66 	bl	8014130 <CalculateCRC>
 8014464:	0003      	movs	r3, r0
 8014466:	001a      	movs	r2, r3
 8014468:	193b      	adds	r3, r7, r4
 801446a:	781b      	ldrb	r3, [r3, #0]
 801446c:	4293      	cmp	r3, r2
 801446e:	d00d      	beq.n	801448c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8014470:	4a0b      	ldr	r2, [pc, #44]	@ (80144a0 <CheckCRC+0xac>)
 8014472:	4b0a      	ldr	r3, [pc, #40]	@ (801449c <CheckCRC+0xa8>)
 8014474:	0019      	movs	r1, r3
 8014476:	2001      	movs	r0, #1
 8014478:	f7ff fd0c 	bl	8013e94 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 801447c:	4a09      	ldr	r2, [pc, #36]	@ (80144a4 <CheckCRC+0xb0>)
 801447e:	4b0a      	ldr	r3, [pc, #40]	@ (80144a8 <CheckCRC+0xb4>)
 8014480:	2185      	movs	r1, #133	@ 0x85
 8014482:	0018      	movs	r0, r3
 8014484:	f7ff fdf6 	bl	8014074 <errorHandler>
		return false;
 8014488:	2300      	movs	r3, #0
 801448a:	e000      	b.n	801448e <CheckCRC+0x9a>
	}
	return true;
 801448c:	2301      	movs	r3, #1
}
 801448e:	0018      	movs	r0, r3
 8014490:	46bd      	mov	sp, r7
 8014492:	b005      	add	sp, #20
 8014494:	bd90      	pop	{r4, r7, pc}
 8014496:	46c0      	nop			@ (mov r8, r8)
 8014498:	0802de64 	.word	0x0802de64
 801449c:	0802de8c 	.word	0x0802de8c
 80144a0:	0802de90 	.word	0x0802de90
 80144a4:	0802debc 	.word	0x0802debc
 80144a8:	0802e87c 	.word	0x0802e87c

080144ac <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80144b2:	1dbb      	adds	r3, r7, #6
 80144b4:	2289      	movs	r2, #137	@ 0x89
 80144b6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80144b8:	1dbb      	adds	r3, r7, #6
 80144ba:	2201      	movs	r2, #1
 80144bc:	0019      	movs	r1, r3
 80144be:	2044      	movs	r0, #68	@ 0x44
 80144c0:	f7ff fe14 	bl	80140ec <WriteRegister>
	HAL_Delay(30);
 80144c4:	201e      	movs	r0, #30
 80144c6:	f000 fa6f 	bl	80149a8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80144ca:	4b14      	ldr	r3, [pc, #80]	@ (801451c <HIDS_DeviceConnected+0x70>)
 80144cc:	2206      	movs	r2, #6
 80144ce:	0019      	movs	r1, r3
 80144d0:	2044      	movs	r0, #68	@ 0x44
 80144d2:	f7ff fde9 	bl	80140a8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80144d6:	1dfb      	adds	r3, r7, #7
 80144d8:	2200      	movs	r2, #0
 80144da:	701a      	strb	r2, [r3, #0]
 80144dc:	e011      	b.n	8014502 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80144de:	1dfb      	adds	r3, r7, #7
 80144e0:	7818      	ldrb	r0, [r3, #0]
 80144e2:	1dfb      	adds	r3, r7, #7
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	4a0d      	ldr	r2, [pc, #52]	@ (801451c <HIDS_DeviceConnected+0x70>)
 80144e8:	5cd3      	ldrb	r3, [r2, r3]
 80144ea:	4a0d      	ldr	r2, [pc, #52]	@ (8014520 <HIDS_DeviceConnected+0x74>)
 80144ec:	490d      	ldr	r1, [pc, #52]	@ (8014524 <HIDS_DeviceConnected+0x78>)
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	0003      	movs	r3, r0
 80144f2:	2002      	movs	r0, #2
 80144f4:	f7ff fcce 	bl	8013e94 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80144f8:	1dfb      	adds	r3, r7, #7
 80144fa:	781a      	ldrb	r2, [r3, #0]
 80144fc:	1dfb      	adds	r3, r7, #7
 80144fe:	3201      	adds	r2, #1
 8014500:	701a      	strb	r2, [r3, #0]
 8014502:	1dfb      	adds	r3, r7, #7
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	2b05      	cmp	r3, #5
 8014508:	d9e9      	bls.n	80144de <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801450a:	4b04      	ldr	r3, [pc, #16]	@ (801451c <HIDS_DeviceConnected+0x70>)
 801450c:	0018      	movs	r0, r3
 801450e:	f7ff ff71 	bl	80143f4 <CheckCRC>
 8014512:	0003      	movs	r3, r0
}
 8014514:	0018      	movs	r0, r3
 8014516:	46bd      	mov	sp, r7
 8014518:	b002      	add	sp, #8
 801451a:	bd80      	pop	{r7, pc}
 801451c:	200024f4 	.word	0x200024f4
 8014520:	0802ded4 	.word	0x0802ded4
 8014524:	0802de60 	.word	0x0802de60

08014528 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8014528:	b580      	push	{r7, lr}
 801452a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 801452c:	4b04      	ldr	r3, [pc, #16]	@ (8014540 <HIDS_MeasurementReady+0x18>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	0018      	movs	r0, r3
 8014532:	f7ff fc59 	bl	8013de8 <TimestampIsReached>
 8014536:	0003      	movs	r3, r0
}
 8014538:	0018      	movs	r0, r3
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	46c0      	nop			@ (mov r8, r8)
 8014540:	200000f4 	.word	0x200000f4

08014544 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8014544:	b580      	push	{r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 801454e:	4b41      	ldr	r3, [pc, #260]	@ (8014654 <HIDS_GetMeasurementValues+0x110>)
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d001      	beq.n	801455a <HIDS_GetMeasurementValues+0x16>
 8014556:	2301      	movs	r3, #1
 8014558:	e077      	b.n	801464a <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 801455a:	f7ff ffe5 	bl	8014528 <HIDS_MeasurementReady>
 801455e:	0003      	movs	r3, r0
 8014560:	001a      	movs	r2, r3
 8014562:	2301      	movs	r3, #1
 8014564:	4053      	eors	r3, r2
 8014566:	b2db      	uxtb	r3, r3
 8014568:	2b00      	cmp	r3, #0
 801456a:	d001      	beq.n	8014570 <HIDS_GetMeasurementValues+0x2c>
 801456c:	2300      	movs	r3, #0
 801456e:	e06c      	b.n	801464a <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8014570:	4b39      	ldr	r3, [pc, #228]	@ (8014658 <HIDS_GetMeasurementValues+0x114>)
 8014572:	2206      	movs	r2, #6
 8014574:	0019      	movs	r1, r3
 8014576:	2044      	movs	r0, #68	@ 0x44
 8014578:	f7ff fd96 	bl	80140a8 <ReadRegister>
 801457c:	0003      	movs	r3, r0
 801457e:	001a      	movs	r2, r3
 8014580:	2301      	movs	r3, #1
 8014582:	4053      	eors	r3, r2
 8014584:	b2db      	uxtb	r3, r3
 8014586:	2b00      	cmp	r3, #0
 8014588:	d005      	beq.n	8014596 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 801458a:	4a34      	ldr	r2, [pc, #208]	@ (801465c <HIDS_GetMeasurementValues+0x118>)
 801458c:	4b34      	ldr	r3, [pc, #208]	@ (8014660 <HIDS_GetMeasurementValues+0x11c>)
 801458e:	0019      	movs	r1, r3
 8014590:	2001      	movs	r0, #1
 8014592:	f7ff fc7f 	bl	8013e94 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8014596:	4b30      	ldr	r3, [pc, #192]	@ (8014658 <HIDS_GetMeasurementValues+0x114>)
 8014598:	0018      	movs	r0, r3
 801459a:	f7ff ff2b 	bl	80143f4 <CheckCRC>
 801459e:	0003      	movs	r3, r0
 80145a0:	001a      	movs	r2, r3
 80145a2:	2301      	movs	r3, #1
 80145a4:	4053      	eors	r3, r2
 80145a6:	b2db      	uxtb	r3, r3
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d001      	beq.n	80145b0 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80145ac:	2300      	movs	r3, #0
 80145ae:	e04c      	b.n	801464a <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80145b0:	4b29      	ldr	r3, [pc, #164]	@ (8014658 <HIDS_GetMeasurementValues+0x114>)
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	021b      	lsls	r3, r3, #8
 80145b6:	4a28      	ldr	r2, [pc, #160]	@ (8014658 <HIDS_GetMeasurementValues+0x114>)
 80145b8:	7852      	ldrb	r2, [r2, #1]
 80145ba:	4313      	orrs	r3, r2
 80145bc:	22af      	movs	r2, #175	@ 0xaf
 80145be:	4353      	muls	r3, r2
 80145c0:	0018      	movs	r0, r3
 80145c2:	f7ef f915 	bl	80037f0 <__aeabi_i2d>
 80145c6:	2200      	movs	r2, #0
 80145c8:	4b26      	ldr	r3, [pc, #152]	@ (8014664 <HIDS_GetMeasurementValues+0x120>)
 80145ca:	f7ed fd89 	bl	80020e0 <__aeabi_ddiv>
 80145ce:	0002      	movs	r2, r0
 80145d0:	000b      	movs	r3, r1
 80145d2:	0010      	movs	r0, r2
 80145d4:	0019      	movs	r1, r3
 80145d6:	f7ef f9a5 	bl	8003924 <__aeabi_d2f>
 80145da:	1c03      	adds	r3, r0, #0
 80145dc:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 80145de:	4922      	ldr	r1, [pc, #136]	@ (8014668 <HIDS_GetMeasurementValues+0x124>)
 80145e0:	68f8      	ldr	r0, [r7, #12]
 80145e2:	f7ec fe87 	bl	80012f4 <__aeabi_fsub>
 80145e6:	1c03      	adds	r3, r0, #0
 80145e8:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80145ea:	4b1b      	ldr	r3, [pc, #108]	@ (8014658 <HIDS_GetMeasurementValues+0x114>)
 80145ec:	78db      	ldrb	r3, [r3, #3]
 80145ee:	021b      	lsls	r3, r3, #8
 80145f0:	4a19      	ldr	r2, [pc, #100]	@ (8014658 <HIDS_GetMeasurementValues+0x114>)
 80145f2:	7912      	ldrb	r2, [r2, #4]
 80145f4:	431a      	orrs	r2, r3
 80145f6:	0013      	movs	r3, r2
 80145f8:	015b      	lsls	r3, r3, #5
 80145fa:	1a9b      	subs	r3, r3, r2
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	189b      	adds	r3, r3, r2
 8014600:	0018      	movs	r0, r3
 8014602:	f7ef f8f5 	bl	80037f0 <__aeabi_i2d>
 8014606:	2200      	movs	r2, #0
 8014608:	4b16      	ldr	r3, [pc, #88]	@ (8014664 <HIDS_GetMeasurementValues+0x120>)
 801460a:	f7ed fd69 	bl	80020e0 <__aeabi_ddiv>
 801460e:	0002      	movs	r2, r0
 8014610:	000b      	movs	r3, r1
 8014612:	0010      	movs	r0, r2
 8014614:	0019      	movs	r1, r3
 8014616:	f7ef f985 	bl	8003924 <__aeabi_d2f>
 801461a:	1c03      	adds	r3, r0, #0
 801461c:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 801461e:	4913      	ldr	r1, [pc, #76]	@ (801466c <HIDS_GetMeasurementValues+0x128>)
 8014620:	68b8      	ldr	r0, [r7, #8]
 8014622:	f7ec fe67 	bl	80012f4 <__aeabi_fsub>
 8014626:	1c03      	adds	r3, r0, #0
 8014628:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	68fa      	ldr	r2, [r7, #12]
 801462e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	68ba      	ldr	r2, [r7, #8]
 8014634:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	0011      	movs	r1, r2
 801463c:	0018      	movs	r0, r3
 801463e:	f7fc ff51 	bl	80114e4 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8014642:	4b04      	ldr	r3, [pc, #16]	@ (8014654 <HIDS_GetMeasurementValues+0x110>)
 8014644:	2201      	movs	r2, #1
 8014646:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8014648:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 801464a:	0018      	movs	r0, r3
 801464c:	46bd      	mov	sp, r7
 801464e:	b004      	add	sp, #16
 8014650:	bd80      	pop	{r7, pc}
 8014652:	46c0      	nop			@ (mov r8, r8)
 8014654:	20002508 	.word	0x20002508
 8014658:	200024fc 	.word	0x200024fc
 801465c:	0802def4 	.word	0x0802def4
 8014660:	0802de8c 	.word	0x0802de8c
 8014664:	40efffe0 	.word	0x40efffe0
 8014668:	42340000 	.word	0x42340000
 801466c:	40c00000 	.word	0x40c00000

08014670 <ResetHIDSresults>:

void ResetHIDSresults() {
 8014670:	b580      	push	{r7, lr}
 8014672:	af00      	add	r7, sp, #0
  humid = 0.0;
 8014674:	4b04      	ldr	r3, [pc, #16]	@ (8014688 <ResetHIDSresults+0x18>)
 8014676:	2200      	movs	r2, #0
 8014678:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 801467a:	4b04      	ldr	r3, [pc, #16]	@ (801468c <ResetHIDSresults+0x1c>)
 801467c:	2200      	movs	r2, #0
 801467e:	601a      	str	r2, [r3, #0]
}
 8014680:	46c0      	nop			@ (mov r8, r8)
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	46c0      	nop			@ (mov r8, r8)
 8014688:	200024e4 	.word	0x200024e4
 801468c:	200024e8 	.word	0x200024e8

08014690 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8014690:	b5b0      	push	{r4, r5, r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8014696:	4b69      	ldr	r3, [pc, #420]	@ (801483c <HIDS_Upkeep+0x1ac>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b06      	cmp	r3, #6
 801469c:	d900      	bls.n	80146a0 <HIDS_Upkeep+0x10>
 801469e:	e0bd      	b.n	801481c <HIDS_Upkeep+0x18c>
 80146a0:	009a      	lsls	r2, r3, #2
 80146a2:	4b67      	ldr	r3, [pc, #412]	@ (8014840 <HIDS_Upkeep+0x1b0>)
 80146a4:	18d3      	adds	r3, r2, r3
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 80146aa:	4a66      	ldr	r2, [pc, #408]	@ (8014844 <HIDS_Upkeep+0x1b4>)
 80146ac:	4b66      	ldr	r3, [pc, #408]	@ (8014848 <HIDS_Upkeep+0x1b8>)
 80146ae:	0019      	movs	r1, r3
 80146b0:	2003      	movs	r0, #3
 80146b2:	f7ff fbef 	bl	8013e94 <CreateLine>
      break;
 80146b6:	e0bc      	b.n	8014832 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 80146b8:	f7ff ffda 	bl	8014670 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 80146bc:	4b5f      	ldr	r3, [pc, #380]	@ (801483c <HIDS_Upkeep+0x1ac>)
 80146be:	2201      	movs	r2, #1
 80146c0:	701a      	strb	r2, [r3, #0]
      break;
 80146c2:	e0b6      	b.n	8014832 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 80146c4:	f7f9 fc00 	bl	800dec8 <getSensorLock>
 80146c8:	1e03      	subs	r3, r0, #0
 80146ca:	d000      	beq.n	80146ce <HIDS_Upkeep+0x3e>
 80146cc:	e0aa      	b.n	8014824 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 80146ce:	2001      	movs	r0, #1
 80146d0:	f7f9 fbe6 	bl	800dea0 <setSensorLock>
      SetMeasurementIndicator();
 80146d4:	f7fe f95c 	bl	8012990 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 80146d8:	f7ff fe3c 	bl	8014354 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 80146dc:	200a      	movs	r0, #10
 80146de:	f000 f963 	bl	80149a8 <HAL_Delay>
      setSensorLock(FREE);
 80146e2:	2000      	movs	r0, #0
 80146e4:	f7f9 fbdc 	bl	800dea0 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 80146e8:	4b54      	ldr	r3, [pc, #336]	@ (801483c <HIDS_Upkeep+0x1ac>)
 80146ea:	2202      	movs	r2, #2
 80146ec:	701a      	strb	r2, [r3, #0]
      break;
 80146ee:	e0a0      	b.n	8014832 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 80146f0:	f7f9 fbea 	bl	800dec8 <getSensorLock>
 80146f4:	1e03      	subs	r3, r0, #0
 80146f6:	d000      	beq.n	80146fa <HIDS_Upkeep+0x6a>
 80146f8:	e096      	b.n	8014828 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 80146fa:	2001      	movs	r0, #1
 80146fc:	f7f9 fbd0 	bl	800dea0 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8014700:	4a52      	ldr	r2, [pc, #328]	@ (801484c <HIDS_Upkeep+0x1bc>)
 8014702:	4b53      	ldr	r3, [pc, #332]	@ (8014850 <HIDS_Upkeep+0x1c0>)
 8014704:	0011      	movs	r1, r2
 8014706:	0018      	movs	r0, r3
 8014708:	f7ff ff1c 	bl	8014544 <HIDS_GetMeasurementValues>
 801470c:	1e03      	subs	r3, r0, #0
 801470e:	d002      	beq.n	8014716 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8014710:	4b4a      	ldr	r3, [pc, #296]	@ (801483c <HIDS_Upkeep+0x1ac>)
 8014712:	2203      	movs	r2, #3
 8014714:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8014716:	200a      	movs	r0, #10
 8014718:	f000 f946 	bl	80149a8 <HAL_Delay>
      setSensorLock(FREE);
 801471c:	2000      	movs	r0, #0
 801471e:	f7f9 fbbf 	bl	800dea0 <setSensorLock>
      break;
 8014722:	e086      	b.n	8014832 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8014724:	4b4a      	ldr	r3, [pc, #296]	@ (8014850 <HIDS_Upkeep+0x1c0>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	1c18      	adds	r0, r3, #0
 801472a:	f7ef f8b3 	bl	8003894 <__aeabi_f2d>
 801472e:	0004      	movs	r4, r0
 8014730:	000d      	movs	r5, r1
 8014732:	4b46      	ldr	r3, [pc, #280]	@ (801484c <HIDS_Upkeep+0x1bc>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	1c18      	adds	r0, r3, #0
 8014738:	f7ef f8ac 	bl	8003894 <__aeabi_f2d>
 801473c:	0002      	movs	r2, r0
 801473e:	000b      	movs	r3, r1
 8014740:	4844      	ldr	r0, [pc, #272]	@ (8014854 <HIDS_Upkeep+0x1c4>)
 8014742:	4945      	ldr	r1, [pc, #276]	@ (8014858 <HIDS_Upkeep+0x1c8>)
 8014744:	9202      	str	r2, [sp, #8]
 8014746:	9303      	str	r3, [sp, #12]
 8014748:	9400      	str	r4, [sp, #0]
 801474a:	9501      	str	r5, [sp, #4]
 801474c:	0002      	movs	r2, r0
 801474e:	2002      	movs	r0, #2
 8014750:	f7ff fba0 	bl	8013e94 <CreateLine>
      setHIDS(temp, humid);
 8014754:	4b3d      	ldr	r3, [pc, #244]	@ (801484c <HIDS_Upkeep+0x1bc>)
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	4b3d      	ldr	r3, [pc, #244]	@ (8014850 <HIDS_Upkeep+0x1c0>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	1c19      	adds	r1, r3, #0
 801475e:	1c10      	adds	r0, r2, #0
 8014760:	f7f0 f996 	bl	8004a90 <setHIDS>
      ResetMeasurementIndicator();
 8014764:	f7fe f926 	bl	80129b4 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014768:	4b38      	ldr	r3, [pc, #224]	@ (801484c <HIDS_Upkeep+0x1bc>)
 801476a:	681c      	ldr	r4, [r3, #0]
 801476c:	4a37      	ldr	r2, [pc, #220]	@ (801484c <HIDS_Upkeep+0x1bc>)
 801476e:	4b38      	ldr	r3, [pc, #224]	@ (8014850 <HIDS_Upkeep+0x1c0>)
 8014770:	0011      	movs	r1, r2
 8014772:	0018      	movs	r0, r3
 8014774:	f7ff fd34 	bl	80141e0 <HIDS_DewPointCalculation>
 8014778:	1c03      	adds	r3, r0, #0
 801477a:	1c19      	adds	r1, r3, #0
 801477c:	1c20      	adds	r0, r4, #0
 801477e:	f7ec fdb9 	bl	80012f4 <__aeabi_fsub>
 8014782:	1c03      	adds	r3, r0, #0
 8014784:	21fe      	movs	r1, #254	@ 0xfe
 8014786:	0589      	lsls	r1, r1, #22
 8014788:	1c18      	adds	r0, r3, #0
 801478a:	f7eb fed1 	bl	8000530 <__aeabi_fcmplt>
 801478e:	1e03      	subs	r3, r0, #0
 8014790:	d023      	beq.n	80147da <HIDS_Upkeep+0x14a>
 8014792:	f7f5 ff47 	bl	800a624 <getPosixTime>
 8014796:	0002      	movs	r2, r0
 8014798:	4b30      	ldr	r3, [pc, #192]	@ (801485c <HIDS_Upkeep+0x1cc>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	1ad2      	subs	r2, r2, r3
 801479e:	23e1      	movs	r3, #225	@ 0xe1
 80147a0:	009b      	lsls	r3, r3, #2
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d919      	bls.n	80147da <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 80147a6:	4a2e      	ldr	r2, [pc, #184]	@ (8014860 <HIDS_Upkeep+0x1d0>)
 80147a8:	4b2b      	ldr	r3, [pc, #172]	@ (8014858 <HIDS_Upkeep+0x1c8>)
 80147aa:	0019      	movs	r1, r3
 80147ac:	2002      	movs	r0, #2
 80147ae:	f7ff fb71 	bl	8013e94 <CreateLine>
        if (getSensorLock() != FREE) {
 80147b2:	f7f9 fb89 	bl	800dec8 <getSensorLock>
 80147b6:	1e03      	subs	r3, r0, #0
 80147b8:	d138      	bne.n	801482c <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 80147ba:	f7ff fd83 	bl	80142c4 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 80147be:	200a      	movs	r0, #10
 80147c0:	f000 f8f2 	bl	80149a8 <HAL_Delay>
        setSensorLock(FREE);
 80147c4:	2000      	movs	r0, #0
 80147c6:	f7f9 fb6b 	bl	800dea0 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 80147ca:	f000 f8e3 	bl	8014994 <HAL_GetTick>
 80147ce:	0003      	movs	r3, r0
 80147d0:	4a24      	ldr	r2, [pc, #144]	@ (8014864 <HIDS_Upkeep+0x1d4>)
 80147d2:	189a      	adds	r2, r3, r2
 80147d4:	4b24      	ldr	r3, [pc, #144]	@ (8014868 <HIDS_Upkeep+0x1d8>)
 80147d6:	601a      	str	r2, [r3, #0]
 80147d8:	e011      	b.n	80147fe <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 80147da:	f000 f8db 	bl	8014994 <HAL_GetTick>
 80147de:	0004      	movs	r4, r0
 80147e0:	f7f5 fa7e 	bl	8009ce0 <Check_USB_PowerOn>
 80147e4:	1e03      	subs	r3, r0, #0
 80147e6:	d103      	bne.n	80147f0 <HIDS_Upkeep+0x160>
 80147e8:	4b20      	ldr	r3, [pc, #128]	@ (801486c <HIDS_Upkeep+0x1dc>)
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d001      	beq.n	80147f4 <HIDS_Upkeep+0x164>
 80147f0:	4b1f      	ldr	r3, [pc, #124]	@ (8014870 <HIDS_Upkeep+0x1e0>)
 80147f2:	e001      	b.n	80147f8 <HIDS_Upkeep+0x168>
 80147f4:	23fa      	movs	r3, #250	@ 0xfa
 80147f6:	009b      	lsls	r3, r3, #2
 80147f8:	191a      	adds	r2, r3, r4
 80147fa:	4b1b      	ldr	r3, [pc, #108]	@ (8014868 <HIDS_Upkeep+0x1d8>)
 80147fc:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 80147fe:	4b0f      	ldr	r3, [pc, #60]	@ (801483c <HIDS_Upkeep+0x1ac>)
 8014800:	2206      	movs	r2, #6
 8014802:	701a      	strb	r2, [r3, #0]
      break;
 8014804:	e015      	b.n	8014832 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8014806:	4b18      	ldr	r3, [pc, #96]	@ (8014868 <HIDS_Upkeep+0x1d8>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	0018      	movs	r0, r3
 801480c:	f7ff faec 	bl	8013de8 <TimestampIsReached>
 8014810:	1e03      	subs	r3, r0, #0
 8014812:	d00d      	beq.n	8014830 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8014814:	4b09      	ldr	r3, [pc, #36]	@ (801483c <HIDS_Upkeep+0x1ac>)
 8014816:	2200      	movs	r2, #0
 8014818:	701a      	strb	r2, [r3, #0]
      }
      break;
 801481a:	e009      	b.n	8014830 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 801481c:	4b07      	ldr	r3, [pc, #28]	@ (801483c <HIDS_Upkeep+0x1ac>)
 801481e:	2200      	movs	r2, #0
 8014820:	701a      	strb	r2, [r3, #0]
      break;
 8014822:	e006      	b.n	8014832 <HIDS_Upkeep+0x1a2>
        break;
 8014824:	46c0      	nop			@ (mov r8, r8)
 8014826:	e004      	b.n	8014832 <HIDS_Upkeep+0x1a2>
        break;
 8014828:	46c0      	nop			@ (mov r8, r8)
 801482a:	e002      	b.n	8014832 <HIDS_Upkeep+0x1a2>
          break;
 801482c:	46c0      	nop			@ (mov r8, r8)
 801482e:	e000      	b.n	8014832 <HIDS_Upkeep+0x1a2>
      break;
 8014830:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8014832:	4b02      	ldr	r3, [pc, #8]	@ (801483c <HIDS_Upkeep+0x1ac>)
 8014834:	781b      	ldrb	r3, [r3, #0]
}
 8014836:	0018      	movs	r0, r3
 8014838:	46bd      	mov	sp, r7
 801483a:	bdb0      	pop	{r4, r5, r7, pc}
 801483c:	20002510 	.word	0x20002510
 8014840:	0802e860 	.word	0x0802e860
 8014844:	0802df28 	.word	0x0802df28
 8014848:	0802df5c 	.word	0x0802df5c
 801484c:	200024e8 	.word	0x200024e8
 8014850:	200024e4 	.word	0x200024e4
 8014854:	0802df60 	.word	0x0802df60
 8014858:	0802de60 	.word	0x0802de60
 801485c:	20002504 	.word	0x20002504
 8014860:	0802df94 	.word	0x0802df94
 8014864:	00002ee0 	.word	0x00002ee0
 8014868:	2000250c 	.word	0x2000250c
 801486c:	2000214e 	.word	0x2000214e
 8014870:	00002710 	.word	0x00002710

08014874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8014874:	480d      	ldr	r0, [pc, #52]	@ (80148ac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8014876:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8014878:	f7fe feec 	bl	8013654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801487c:	480c      	ldr	r0, [pc, #48]	@ (80148b0 <LoopForever+0x6>)
  ldr r1, =_edata
 801487e:	490d      	ldr	r1, [pc, #52]	@ (80148b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014880:	4a0d      	ldr	r2, [pc, #52]	@ (80148b8 <LoopForever+0xe>)
  movs r3, #0
 8014882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014884:	e002      	b.n	801488c <LoopCopyDataInit>

08014886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801488a:	3304      	adds	r3, #4

0801488c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801488c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801488e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014890:	d3f9      	bcc.n	8014886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014892:	4a0a      	ldr	r2, [pc, #40]	@ (80148bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8014894:	4c0a      	ldr	r4, [pc, #40]	@ (80148c0 <LoopForever+0x16>)
  movs r3, #0
 8014896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014898:	e001      	b.n	801489e <LoopFillZerobss>

0801489a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801489a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801489c:	3204      	adds	r2, #4

0801489e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801489e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80148a0:	d3fb      	bcc.n	801489a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80148a2:	f012 f805 	bl	80268b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80148a6:	f7f8 f999 	bl	800cbdc <main>

080148aa <LoopForever>:

LoopForever:
    b LoopForever
 80148aa:	e7fe      	b.n	80148aa <LoopForever>
   ldr   r0, =_estack
 80148ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80148b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80148b4:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80148b8:	0802f248 	.word	0x0802f248
  ldr r2, =_sbss
 80148bc:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 80148c0:	20003918 	.word	0x20003918

080148c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80148c4:	e7fe      	b.n	80148c4 <ADC1_COMP_IRQHandler>
	...

080148c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80148ce:	1dfb      	adds	r3, r7, #7
 80148d0:	2200      	movs	r2, #0
 80148d2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80148d4:	4b0b      	ldr	r3, [pc, #44]	@ (8014904 <HAL_Init+0x3c>)
 80148d6:	681a      	ldr	r2, [r3, #0]
 80148d8:	4b0a      	ldr	r3, [pc, #40]	@ (8014904 <HAL_Init+0x3c>)
 80148da:	2140      	movs	r1, #64	@ 0x40
 80148dc:	430a      	orrs	r2, r1
 80148de:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80148e0:	2003      	movs	r0, #3
 80148e2:	f000 f811 	bl	8014908 <HAL_InitTick>
 80148e6:	1e03      	subs	r3, r0, #0
 80148e8:	d003      	beq.n	80148f2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80148ea:	1dfb      	adds	r3, r7, #7
 80148ec:	2201      	movs	r2, #1
 80148ee:	701a      	strb	r2, [r3, #0]
 80148f0:	e001      	b.n	80148f6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80148f2:	f7fe fd63 	bl	80133bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80148f6:	1dfb      	adds	r3, r7, #7
 80148f8:	781b      	ldrb	r3, [r3, #0]
}
 80148fa:	0018      	movs	r0, r3
 80148fc:	46bd      	mov	sp, r7
 80148fe:	b002      	add	sp, #8
 8014900:	bd80      	pop	{r7, pc}
 8014902:	46c0      	nop			@ (mov r8, r8)
 8014904:	40022000 	.word	0x40022000

08014908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014908:	b590      	push	{r4, r7, lr}
 801490a:	b083      	sub	sp, #12
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8014910:	4b14      	ldr	r3, [pc, #80]	@ (8014964 <HAL_InitTick+0x5c>)
 8014912:	681c      	ldr	r4, [r3, #0]
 8014914:	4b14      	ldr	r3, [pc, #80]	@ (8014968 <HAL_InitTick+0x60>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	0019      	movs	r1, r3
 801491a:	23fa      	movs	r3, #250	@ 0xfa
 801491c:	0098      	lsls	r0, r3, #2
 801491e:	f7eb fc41 	bl	80001a4 <__udivsi3>
 8014922:	0003      	movs	r3, r0
 8014924:	0019      	movs	r1, r3
 8014926:	0020      	movs	r0, r4
 8014928:	f7eb fc3c 	bl	80001a4 <__udivsi3>
 801492c:	0003      	movs	r3, r0
 801492e:	0018      	movs	r0, r3
 8014930:	f000 fcc9 	bl	80152c6 <HAL_SYSTICK_Config>
 8014934:	1e03      	subs	r3, r0, #0
 8014936:	d001      	beq.n	801493c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8014938:	2301      	movs	r3, #1
 801493a:	e00f      	b.n	801495c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2b03      	cmp	r3, #3
 8014940:	d80b      	bhi.n	801495a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014942:	6879      	ldr	r1, [r7, #4]
 8014944:	2301      	movs	r3, #1
 8014946:	425b      	negs	r3, r3
 8014948:	2200      	movs	r2, #0
 801494a:	0018      	movs	r0, r3
 801494c:	f000 fc96 	bl	801527c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014950:	4b06      	ldr	r3, [pc, #24]	@ (801496c <HAL_InitTick+0x64>)
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8014956:	2300      	movs	r3, #0
 8014958:	e000      	b.n	801495c <HAL_InitTick+0x54>
    return HAL_ERROR;
 801495a:	2301      	movs	r3, #1
}
 801495c:	0018      	movs	r0, r3
 801495e:	46bd      	mov	sp, r7
 8014960:	b003      	add	sp, #12
 8014962:	bd90      	pop	{r4, r7, pc}
 8014964:	200000ec 	.word	0x200000ec
 8014968:	20000100 	.word	0x20000100
 801496c:	200000fc 	.word	0x200000fc

08014970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014974:	4b05      	ldr	r3, [pc, #20]	@ (801498c <HAL_IncTick+0x1c>)
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	001a      	movs	r2, r3
 801497a:	4b05      	ldr	r3, [pc, #20]	@ (8014990 <HAL_IncTick+0x20>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	18d2      	adds	r2, r2, r3
 8014980:	4b03      	ldr	r3, [pc, #12]	@ (8014990 <HAL_IncTick+0x20>)
 8014982:	601a      	str	r2, [r3, #0]
}
 8014984:	46c0      	nop			@ (mov r8, r8)
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}
 801498a:	46c0      	nop			@ (mov r8, r8)
 801498c:	20000100 	.word	0x20000100
 8014990:	20002514 	.word	0x20002514

08014994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	af00      	add	r7, sp, #0
  return uwTick;
 8014998:	4b02      	ldr	r3, [pc, #8]	@ (80149a4 <HAL_GetTick+0x10>)
 801499a:	681b      	ldr	r3, [r3, #0]
}
 801499c:	0018      	movs	r0, r3
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	46c0      	nop			@ (mov r8, r8)
 80149a4:	20002514 	.word	0x20002514

080149a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b084      	sub	sp, #16
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80149b0:	f7ff fff0 	bl	8014994 <HAL_GetTick>
 80149b4:	0003      	movs	r3, r0
 80149b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3301      	adds	r3, #1
 80149c0:	d005      	beq.n	80149ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80149c2:	4b0a      	ldr	r3, [pc, #40]	@ (80149ec <HAL_Delay+0x44>)
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	001a      	movs	r2, r3
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	189b      	adds	r3, r3, r2
 80149cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80149ce:	46c0      	nop			@ (mov r8, r8)
 80149d0:	f7ff ffe0 	bl	8014994 <HAL_GetTick>
 80149d4:	0002      	movs	r2, r0
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	68fa      	ldr	r2, [r7, #12]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d8f7      	bhi.n	80149d0 <HAL_Delay+0x28>
  {
  }
}
 80149e0:	46c0      	nop			@ (mov r8, r8)
 80149e2:	46c0      	nop			@ (mov r8, r8)
 80149e4:	46bd      	mov	sp, r7
 80149e6:	b004      	add	sp, #16
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	46c0      	nop			@ (mov r8, r8)
 80149ec:	20000100 	.word	0x20000100

080149f0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80149f4:	4b04      	ldr	r3, [pc, #16]	@ (8014a08 <HAL_SuspendTick+0x18>)
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	4b03      	ldr	r3, [pc, #12]	@ (8014a08 <HAL_SuspendTick+0x18>)
 80149fa:	2102      	movs	r1, #2
 80149fc:	438a      	bics	r2, r1
 80149fe:	601a      	str	r2, [r3, #0]
}
 8014a00:	46c0      	nop			@ (mov r8, r8)
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	46c0      	nop			@ (mov r8, r8)
 8014a08:	e000e010 	.word	0xe000e010

08014a0c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8014a10:	4b04      	ldr	r3, [pc, #16]	@ (8014a24 <HAL_ResumeTick+0x18>)
 8014a12:	681a      	ldr	r2, [r3, #0]
 8014a14:	4b03      	ldr	r3, [pc, #12]	@ (8014a24 <HAL_ResumeTick+0x18>)
 8014a16:	2102      	movs	r1, #2
 8014a18:	430a      	orrs	r2, r1
 8014a1a:	601a      	str	r2, [r3, #0]
}
 8014a1c:	46c0      	nop			@ (mov r8, r8)
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	46c0      	nop			@ (mov r8, r8)
 8014a24:	e000e010 	.word	0xe000e010

08014a28 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d101      	bne.n	8014a3a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014a36:	2301      	movs	r3, #1
 8014a38:	e159      	b.n	8014cee <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d10a      	bne.n	8014a58 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2200      	movs	r2, #0
 8014a46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2250      	movs	r2, #80	@ 0x50
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	0018      	movs	r0, r3
 8014a54:	f7f6 f9c8 	bl	800ade8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a5c:	2210      	movs	r2, #16
 8014a5e:	4013      	ands	r3, r2
 8014a60:	2b10      	cmp	r3, #16
 8014a62:	d005      	beq.n	8014a70 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	689b      	ldr	r3, [r3, #8]
 8014a6a:	2204      	movs	r2, #4
 8014a6c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014a6e:	d00b      	beq.n	8014a88 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a74:	2210      	movs	r2, #16
 8014a76:	431a      	orrs	r2, r3
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2250      	movs	r2, #80	@ 0x50
 8014a80:	2100      	movs	r1, #0
 8014a82:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014a84:	2301      	movs	r3, #1
 8014a86:	e132      	b.n	8014cee <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a8c:	4a9a      	ldr	r2, [pc, #616]	@ (8014cf8 <HAL_ADC_Init+0x2d0>)
 8014a8e:	4013      	ands	r3, r2
 8014a90:	2202      	movs	r2, #2
 8014a92:	431a      	orrs	r2, r3
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	2203      	movs	r2, #3
 8014aa0:	4013      	ands	r3, r2
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d108      	bne.n	8014ab8 <HAL_ADC_Init+0x90>
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2201      	movs	r2, #1
 8014aae:	4013      	ands	r3, r2
 8014ab0:	2b01      	cmp	r3, #1
 8014ab2:	d101      	bne.n	8014ab8 <HAL_ADC_Init+0x90>
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	e000      	b.n	8014aba <HAL_ADC_Init+0x92>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d149      	bne.n	8014b52 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	685a      	ldr	r2, [r3, #4]
 8014ac2:	23c0      	movs	r3, #192	@ 0xc0
 8014ac4:	061b      	lsls	r3, r3, #24
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d00b      	beq.n	8014ae2 <HAL_ADC_Init+0xba>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	685a      	ldr	r2, [r3, #4]
 8014ace:	2380      	movs	r3, #128	@ 0x80
 8014ad0:	05db      	lsls	r3, r3, #23
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d005      	beq.n	8014ae2 <HAL_ADC_Init+0xba>
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	685a      	ldr	r2, [r3, #4]
 8014ada:	2380      	movs	r3, #128	@ 0x80
 8014adc:	061b      	lsls	r3, r3, #24
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d111      	bne.n	8014b06 <HAL_ADC_Init+0xde>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	691a      	ldr	r2, [r3, #16]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	0092      	lsls	r2, r2, #2
 8014aee:	0892      	lsrs	r2, r2, #2
 8014af0:	611a      	str	r2, [r3, #16]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	6919      	ldr	r1, [r3, #16]
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	685a      	ldr	r2, [r3, #4]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	430a      	orrs	r2, r1
 8014b02:	611a      	str	r2, [r3, #16]
 8014b04:	e014      	b.n	8014b30 <HAL_ADC_Init+0x108>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	691a      	ldr	r2, [r3, #16]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	0092      	lsls	r2, r2, #2
 8014b12:	0892      	lsrs	r2, r2, #2
 8014b14:	611a      	str	r2, [r3, #16]
 8014b16:	4b79      	ldr	r3, [pc, #484]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	4b78      	ldr	r3, [pc, #480]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b1c:	4978      	ldr	r1, [pc, #480]	@ (8014d00 <HAL_ADC_Init+0x2d8>)
 8014b1e:	400a      	ands	r2, r1
 8014b20:	601a      	str	r2, [r3, #0]
 8014b22:	4b76      	ldr	r3, [pc, #472]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b24:	6819      	ldr	r1, [r3, #0]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	685a      	ldr	r2, [r3, #4]
 8014b2a:	4b74      	ldr	r3, [pc, #464]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b2c:	430a      	orrs	r2, r1
 8014b2e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	68da      	ldr	r2, [r3, #12]
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	2118      	movs	r1, #24
 8014b3c:	438a      	bics	r2, r1
 8014b3e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	68d9      	ldr	r1, [r3, #12]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	689a      	ldr	r2, [r3, #8]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	430a      	orrs	r2, r1
 8014b50:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014b52:	4b6a      	ldr	r3, [pc, #424]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b54:	681a      	ldr	r2, [r3, #0]
 8014b56:	4b69      	ldr	r3, [pc, #420]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b58:	496a      	ldr	r1, [pc, #424]	@ (8014d04 <HAL_ADC_Init+0x2dc>)
 8014b5a:	400a      	ands	r2, r1
 8014b5c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014b5e:	4b67      	ldr	r3, [pc, #412]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b60:	6819      	ldr	r1, [r3, #0]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b66:	065a      	lsls	r2, r3, #25
 8014b68:	4b64      	ldr	r3, [pc, #400]	@ (8014cfc <HAL_ADC_Init+0x2d4>)
 8014b6a:	430a      	orrs	r2, r1
 8014b6c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	689a      	ldr	r2, [r3, #8]
 8014b74:	2380      	movs	r3, #128	@ 0x80
 8014b76:	055b      	lsls	r3, r3, #21
 8014b78:	4013      	ands	r3, r2
 8014b7a:	d108      	bne.n	8014b8e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	689a      	ldr	r2, [r3, #8]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2180      	movs	r1, #128	@ 0x80
 8014b88:	0549      	lsls	r1, r1, #21
 8014b8a:	430a      	orrs	r2, r1
 8014b8c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	68da      	ldr	r2, [r3, #12]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	495b      	ldr	r1, [pc, #364]	@ (8014d08 <HAL_ADC_Init+0x2e0>)
 8014b9a:	400a      	ands	r2, r1
 8014b9c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	68d9      	ldr	r1, [r3, #12]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	691b      	ldr	r3, [r3, #16]
 8014bac:	2b02      	cmp	r3, #2
 8014bae:	d101      	bne.n	8014bb4 <HAL_ADC_Init+0x18c>
 8014bb0:	2304      	movs	r3, #4
 8014bb2:	e000      	b.n	8014bb6 <HAL_ADC_Init+0x18e>
 8014bb4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014bb6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2020      	movs	r0, #32
 8014bbc:	5c1b      	ldrb	r3, [r3, r0]
 8014bbe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014bc0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	202c      	movs	r0, #44	@ 0x2c
 8014bc6:	5c1b      	ldrb	r3, [r3, r0]
 8014bc8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014bca:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014bd0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	699b      	ldr	r3, [r3, #24]
 8014bd6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014bd8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	69db      	ldr	r3, [r3, #28]
 8014bde:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014be0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	430a      	orrs	r2, r1
 8014be8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014bee:	23c2      	movs	r3, #194	@ 0xc2
 8014bf0:	33ff      	adds	r3, #255	@ 0xff
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d00b      	beq.n	8014c0e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	68d9      	ldr	r1, [r3, #12]
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014c04:	431a      	orrs	r2, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	430a      	orrs	r2, r1
 8014c0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2221      	movs	r2, #33	@ 0x21
 8014c12:	5c9b      	ldrb	r3, [r3, r2]
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d11a      	bne.n	8014c4e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2220      	movs	r2, #32
 8014c1c:	5c9b      	ldrb	r3, [r3, r2]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d109      	bne.n	8014c36 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	68da      	ldr	r2, [r3, #12]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2180      	movs	r1, #128	@ 0x80
 8014c2e:	0249      	lsls	r1, r1, #9
 8014c30:	430a      	orrs	r2, r1
 8014c32:	60da      	str	r2, [r3, #12]
 8014c34:	e00b      	b.n	8014c4e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c3a:	2220      	movs	r2, #32
 8014c3c:	431a      	orrs	r2, r3
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c46:	2201      	movs	r2, #1
 8014c48:	431a      	orrs	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d11f      	bne.n	8014c96 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	691a      	ldr	r2, [r3, #16]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	492a      	ldr	r1, [pc, #168]	@ (8014d0c <HAL_ADC_Init+0x2e4>)
 8014c62:	400a      	ands	r2, r1
 8014c64:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	6919      	ldr	r1, [r3, #16]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c74:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014c7a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	430a      	orrs	r2, r1
 8014c82:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	691a      	ldr	r2, [r3, #16]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2101      	movs	r1, #1
 8014c90:	430a      	orrs	r2, r1
 8014c92:	611a      	str	r2, [r3, #16]
 8014c94:	e00e      	b.n	8014cb4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	691b      	ldr	r3, [r3, #16]
 8014c9c:	2201      	movs	r2, #1
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	2b01      	cmp	r3, #1
 8014ca2:	d107      	bne.n	8014cb4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	691a      	ldr	r2, [r3, #16]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	2101      	movs	r1, #1
 8014cb0:	438a      	bics	r2, r1
 8014cb2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	695a      	ldr	r2, [r3, #20]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	2107      	movs	r1, #7
 8014cc0:	438a      	bics	r2, r1
 8014cc2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	6959      	ldr	r1, [r3, #20]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	430a      	orrs	r2, r1
 8014cd4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ce0:	2203      	movs	r2, #3
 8014ce2:	4393      	bics	r3, r2
 8014ce4:	2201      	movs	r2, #1
 8014ce6:	431a      	orrs	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014cec:	2300      	movs	r3, #0
}
 8014cee:	0018      	movs	r0, r3
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	b002      	add	sp, #8
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	46c0      	nop			@ (mov r8, r8)
 8014cf8:	fffffefd 	.word	0xfffffefd
 8014cfc:	40012708 	.word	0x40012708
 8014d00:	ffc3ffff 	.word	0xffc3ffff
 8014d04:	fdffffff 	.word	0xfdffffff
 8014d08:	fffe0219 	.word	0xfffe0219
 8014d0c:	fffffc03 	.word	0xfffffc03

08014d10 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014d10:	b590      	push	{r4, r7, lr}
 8014d12:	b085      	sub	sp, #20
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014d18:	230f      	movs	r3, #15
 8014d1a:	18fb      	adds	r3, r7, r3
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	689b      	ldr	r3, [r3, #8]
 8014d26:	2204      	movs	r2, #4
 8014d28:	4013      	ands	r3, r2
 8014d2a:	d138      	bne.n	8014d9e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2250      	movs	r2, #80	@ 0x50
 8014d30:	5c9b      	ldrb	r3, [r3, r2]
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d101      	bne.n	8014d3a <HAL_ADC_Start+0x2a>
 8014d36:	2302      	movs	r3, #2
 8014d38:	e038      	b.n	8014dac <HAL_ADC_Start+0x9c>
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2250      	movs	r2, #80	@ 0x50
 8014d3e:	2101      	movs	r1, #1
 8014d40:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	69db      	ldr	r3, [r3, #28]
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	d007      	beq.n	8014d5a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014d4a:	230f      	movs	r3, #15
 8014d4c:	18fc      	adds	r4, r7, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	0018      	movs	r0, r3
 8014d52:	f000 f95f 	bl	8015014 <ADC_Enable>
 8014d56:	0003      	movs	r3, r0
 8014d58:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014d5a:	230f      	movs	r3, #15
 8014d5c:	18fb      	adds	r3, r7, r3
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d120      	bne.n	8014da6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d68:	4a12      	ldr	r2, [pc, #72]	@ (8014db4 <HAL_ADC_Start+0xa4>)
 8014d6a:	4013      	ands	r3, r2
 8014d6c:	2280      	movs	r2, #128	@ 0x80
 8014d6e:	0052      	lsls	r2, r2, #1
 8014d70:	431a      	orrs	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2250      	movs	r2, #80	@ 0x50
 8014d80:	2100      	movs	r1, #0
 8014d82:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	221c      	movs	r2, #28
 8014d8a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	689a      	ldr	r2, [r3, #8]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2104      	movs	r1, #4
 8014d98:	430a      	orrs	r2, r1
 8014d9a:	609a      	str	r2, [r3, #8]
 8014d9c:	e003      	b.n	8014da6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014d9e:	230f      	movs	r3, #15
 8014da0:	18fb      	adds	r3, r7, r3
 8014da2:	2202      	movs	r2, #2
 8014da4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014da6:	230f      	movs	r3, #15
 8014da8:	18fb      	adds	r3, r7, r3
 8014daa:	781b      	ldrb	r3, [r3, #0]
}
 8014dac:	0018      	movs	r0, r3
 8014dae:	46bd      	mov	sp, r7
 8014db0:	b005      	add	sp, #20
 8014db2:	bd90      	pop	{r4, r7, pc}
 8014db4:	fffff0fe 	.word	0xfffff0fe

08014db8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b084      	sub	sp, #16
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	695b      	ldr	r3, [r3, #20]
 8014dce:	2b08      	cmp	r3, #8
 8014dd0:	d102      	bne.n	8014dd8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014dd2:	2308      	movs	r3, #8
 8014dd4:	60fb      	str	r3, [r7, #12]
 8014dd6:	e014      	b.n	8014e02 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	68db      	ldr	r3, [r3, #12]
 8014dde:	2201      	movs	r2, #1
 8014de0:	4013      	ands	r3, r2
 8014de2:	2b01      	cmp	r3, #1
 8014de4:	d10b      	bne.n	8014dfe <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dea:	2220      	movs	r2, #32
 8014dec:	431a      	orrs	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2250      	movs	r2, #80	@ 0x50
 8014df6:	2100      	movs	r1, #0
 8014df8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	e072      	b.n	8014ee4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014dfe:	230c      	movs	r3, #12
 8014e00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014e02:	f7ff fdc7 	bl	8014994 <HAL_GetTick>
 8014e06:	0003      	movs	r3, r0
 8014e08:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014e0a:	e01f      	b.n	8014e4c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	d01c      	beq.n	8014e4c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d007      	beq.n	8014e28 <HAL_ADC_PollForConversion+0x70>
 8014e18:	f7ff fdbc 	bl	8014994 <HAL_GetTick>
 8014e1c:	0002      	movs	r2, r0
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	1ad3      	subs	r3, r2, r3
 8014e22:	683a      	ldr	r2, [r7, #0]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d211      	bcs.n	8014e4c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	4013      	ands	r3, r2
 8014e32:	d10b      	bne.n	8014e4c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e38:	2204      	movs	r2, #4
 8014e3a:	431a      	orrs	r2, r3
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2250      	movs	r2, #80	@ 0x50
 8014e44:	2100      	movs	r1, #0
 8014e46:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014e48:	2303      	movs	r3, #3
 8014e4a:	e04b      	b.n	8014ee4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	68fa      	ldr	r2, [r7, #12]
 8014e54:	4013      	ands	r3, r2
 8014e56:	d0d9      	beq.n	8014e0c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e5c:	2280      	movs	r2, #128	@ 0x80
 8014e5e:	0092      	lsls	r2, r2, #2
 8014e60:	431a      	orrs	r2, r3
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	68da      	ldr	r2, [r3, #12]
 8014e6c:	23c0      	movs	r3, #192	@ 0xc0
 8014e6e:	011b      	lsls	r3, r3, #4
 8014e70:	4013      	ands	r3, r2
 8014e72:	d12e      	bne.n	8014ed2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2220      	movs	r2, #32
 8014e78:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d129      	bne.n	8014ed2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2208      	movs	r2, #8
 8014e86:	4013      	ands	r3, r2
 8014e88:	2b08      	cmp	r3, #8
 8014e8a:	d122      	bne.n	8014ed2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	689b      	ldr	r3, [r3, #8]
 8014e92:	2204      	movs	r2, #4
 8014e94:	4013      	ands	r3, r2
 8014e96:	d110      	bne.n	8014eba <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	685a      	ldr	r2, [r3, #4]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	210c      	movs	r1, #12
 8014ea4:	438a      	bics	r2, r1
 8014ea6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014eac:	4a0f      	ldr	r2, [pc, #60]	@ (8014eec <HAL_ADC_PollForConversion+0x134>)
 8014eae:	4013      	ands	r3, r2
 8014eb0:	2201      	movs	r2, #1
 8014eb2:	431a      	orrs	r2, r3
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	655a      	str	r2, [r3, #84]	@ 0x54
 8014eb8:	e00b      	b.n	8014ed2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ebe:	2220      	movs	r2, #32
 8014ec0:	431a      	orrs	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014eca:	2201      	movs	r2, #1
 8014ecc:	431a      	orrs	r2, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	699b      	ldr	r3, [r3, #24]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d103      	bne.n	8014ee2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	220c      	movs	r2, #12
 8014ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014ee2:	2300      	movs	r3, #0
}
 8014ee4:	0018      	movs	r0, r3
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	b004      	add	sp, #16
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	fffffefe 	.word	0xfffffefe

08014ef0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014efe:	0018      	movs	r0, r3
 8014f00:	46bd      	mov	sp, r7
 8014f02:	b002      	add	sp, #8
 8014f04:	bd80      	pop	{r7, pc}
	...

08014f08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2250      	movs	r2, #80	@ 0x50
 8014f16:	5c9b      	ldrb	r3, [r3, r2]
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d101      	bne.n	8014f20 <HAL_ADC_ConfigChannel+0x18>
 8014f1c:	2302      	movs	r3, #2
 8014f1e:	e06c      	b.n	8014ffa <HAL_ADC_ConfigChannel+0xf2>
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2250      	movs	r2, #80	@ 0x50
 8014f24:	2101      	movs	r1, #1
 8014f26:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	689b      	ldr	r3, [r3, #8]
 8014f2e:	2204      	movs	r2, #4
 8014f30:	4013      	ands	r3, r2
 8014f32:	d00b      	beq.n	8014f4c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f38:	2220      	movs	r2, #32
 8014f3a:	431a      	orrs	r2, r3
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2250      	movs	r2, #80	@ 0x50
 8014f44:	2100      	movs	r1, #0
 8014f46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014f48:	2301      	movs	r3, #1
 8014f4a:	e056      	b.n	8014ffa <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	4a2c      	ldr	r2, [pc, #176]	@ (8015004 <HAL_ADC_ConfigChannel+0xfc>)
 8014f52:	4293      	cmp	r3, r2
 8014f54:	d028      	beq.n	8014fa8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	035b      	lsls	r3, r3, #13
 8014f62:	0b5a      	lsrs	r2, r3, #13
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	430a      	orrs	r2, r1
 8014f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	681a      	ldr	r2, [r3, #0]
 8014f70:	2380      	movs	r3, #128	@ 0x80
 8014f72:	02db      	lsls	r3, r3, #11
 8014f74:	4013      	ands	r3, r2
 8014f76:	d009      	beq.n	8014f8c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014f78:	4b23      	ldr	r3, [pc, #140]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	4b22      	ldr	r3, [pc, #136]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014f7e:	2180      	movs	r1, #128	@ 0x80
 8014f80:	0409      	lsls	r1, r1, #16
 8014f82:	430a      	orrs	r2, r1
 8014f84:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014f86:	200a      	movs	r0, #10
 8014f88:	f000 f8ac 	bl	80150e4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	2380      	movs	r3, #128	@ 0x80
 8014f92:	029b      	lsls	r3, r3, #10
 8014f94:	4013      	ands	r3, r2
 8014f96:	d02b      	beq.n	8014ff0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014f98:	4b1b      	ldr	r3, [pc, #108]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014f9e:	2180      	movs	r1, #128	@ 0x80
 8014fa0:	03c9      	lsls	r1, r1, #15
 8014fa2:	430a      	orrs	r2, r1
 8014fa4:	601a      	str	r2, [r3, #0]
 8014fa6:	e023      	b.n	8014ff0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	035b      	lsls	r3, r3, #13
 8014fb4:	0b5b      	lsrs	r3, r3, #13
 8014fb6:	43d9      	mvns	r1, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	400a      	ands	r2, r1
 8014fbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	681a      	ldr	r2, [r3, #0]
 8014fc4:	2380      	movs	r3, #128	@ 0x80
 8014fc6:	02db      	lsls	r3, r3, #11
 8014fc8:	4013      	ands	r3, r2
 8014fca:	d005      	beq.n	8014fd8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014fd2:	490e      	ldr	r1, [pc, #56]	@ (801500c <HAL_ADC_ConfigChannel+0x104>)
 8014fd4:	400a      	ands	r2, r1
 8014fd6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	2380      	movs	r3, #128	@ 0x80
 8014fde:	029b      	lsls	r3, r3, #10
 8014fe0:	4013      	ands	r3, r2
 8014fe2:	d005      	beq.n	8014ff0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014fe4:	4b08      	ldr	r3, [pc, #32]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	4b07      	ldr	r3, [pc, #28]	@ (8015008 <HAL_ADC_ConfigChannel+0x100>)
 8014fea:	4909      	ldr	r1, [pc, #36]	@ (8015010 <HAL_ADC_ConfigChannel+0x108>)
 8014fec:	400a      	ands	r2, r1
 8014fee:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2250      	movs	r2, #80	@ 0x50
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014ff8:	2300      	movs	r3, #0
}
 8014ffa:	0018      	movs	r0, r3
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	b002      	add	sp, #8
 8015000:	bd80      	pop	{r7, pc}
 8015002:	46c0      	nop			@ (mov r8, r8)
 8015004:	00001001 	.word	0x00001001
 8015008:	40012708 	.word	0x40012708
 801500c:	ff7fffff 	.word	0xff7fffff
 8015010:	ffbfffff 	.word	0xffbfffff

08015014 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801501c:	2300      	movs	r3, #0
 801501e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	689b      	ldr	r3, [r3, #8]
 8015026:	2203      	movs	r2, #3
 8015028:	4013      	ands	r3, r2
 801502a:	2b01      	cmp	r3, #1
 801502c:	d108      	bne.n	8015040 <ADC_Enable+0x2c>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2201      	movs	r2, #1
 8015036:	4013      	ands	r3, r2
 8015038:	2b01      	cmp	r3, #1
 801503a:	d101      	bne.n	8015040 <ADC_Enable+0x2c>
 801503c:	2301      	movs	r3, #1
 801503e:	e000      	b.n	8015042 <ADC_Enable+0x2e>
 8015040:	2300      	movs	r3, #0
 8015042:	2b00      	cmp	r3, #0
 8015044:	d146      	bne.n	80150d4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	689b      	ldr	r3, [r3, #8]
 801504c:	4a24      	ldr	r2, [pc, #144]	@ (80150e0 <ADC_Enable+0xcc>)
 801504e:	4013      	ands	r3, r2
 8015050:	d00d      	beq.n	801506e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015056:	2210      	movs	r2, #16
 8015058:	431a      	orrs	r2, r3
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015062:	2201      	movs	r2, #1
 8015064:	431a      	orrs	r2, r3
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801506a:	2301      	movs	r3, #1
 801506c:	e033      	b.n	80150d6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	689a      	ldr	r2, [r3, #8]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	2101      	movs	r1, #1
 801507a:	430a      	orrs	r2, r1
 801507c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 801507e:	2001      	movs	r0, #1
 8015080:	f000 f830 	bl	80150e4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8015084:	f7ff fc86 	bl	8014994 <HAL_GetTick>
 8015088:	0003      	movs	r3, r0
 801508a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801508c:	e01b      	b.n	80150c6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801508e:	f7ff fc81 	bl	8014994 <HAL_GetTick>
 8015092:	0002      	movs	r2, r0
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	1ad3      	subs	r3, r2, r3
 8015098:	2b0a      	cmp	r3, #10
 801509a:	d914      	bls.n	80150c6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	2201      	movs	r2, #1
 80150a4:	4013      	ands	r3, r2
 80150a6:	2b01      	cmp	r3, #1
 80150a8:	d00d      	beq.n	80150c6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150ae:	2210      	movs	r2, #16
 80150b0:	431a      	orrs	r2, r3
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80150ba:	2201      	movs	r2, #1
 80150bc:	431a      	orrs	r2, r3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
 80150c4:	e007      	b.n	80150d6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2201      	movs	r2, #1
 80150ce:	4013      	ands	r3, r2
 80150d0:	2b01      	cmp	r3, #1
 80150d2:	d1dc      	bne.n	801508e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80150d4:	2300      	movs	r3, #0
}
 80150d6:	0018      	movs	r0, r3
 80150d8:	46bd      	mov	sp, r7
 80150da:	b004      	add	sp, #16
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	46c0      	nop			@ (mov r8, r8)
 80150e0:	80000017 	.word	0x80000017

080150e4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80150ec:	4b0b      	ldr	r3, [pc, #44]	@ (801511c <ADC_DelayMicroSecond+0x38>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	490b      	ldr	r1, [pc, #44]	@ (8015120 <ADC_DelayMicroSecond+0x3c>)
 80150f2:	0018      	movs	r0, r3
 80150f4:	f7eb f856 	bl	80001a4 <__udivsi3>
 80150f8:	0003      	movs	r3, r0
 80150fa:	001a      	movs	r2, r3
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	4353      	muls	r3, r2
 8015100:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8015102:	e002      	b.n	801510a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	3b01      	subs	r3, #1
 8015108:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1f9      	bne.n	8015104 <ADC_DelayMicroSecond+0x20>
  }
}
 8015110:	46c0      	nop			@ (mov r8, r8)
 8015112:	46c0      	nop			@ (mov r8, r8)
 8015114:	46bd      	mov	sp, r7
 8015116:	b004      	add	sp, #16
 8015118:	bd80      	pop	{r7, pc}
 801511a:	46c0      	nop			@ (mov r8, r8)
 801511c:	200000ec 	.word	0x200000ec
 8015120:	000f4240 	.word	0x000f4240

08015124 <__NVIC_EnableIRQ>:
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	0002      	movs	r2, r0
 801512c:	1dfb      	adds	r3, r7, #7
 801512e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015130:	1dfb      	adds	r3, r7, #7
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	2b7f      	cmp	r3, #127	@ 0x7f
 8015136:	d809      	bhi.n	801514c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015138:	1dfb      	adds	r3, r7, #7
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	001a      	movs	r2, r3
 801513e:	231f      	movs	r3, #31
 8015140:	401a      	ands	r2, r3
 8015142:	4b04      	ldr	r3, [pc, #16]	@ (8015154 <__NVIC_EnableIRQ+0x30>)
 8015144:	2101      	movs	r1, #1
 8015146:	4091      	lsls	r1, r2
 8015148:	000a      	movs	r2, r1
 801514a:	601a      	str	r2, [r3, #0]
}
 801514c:	46c0      	nop			@ (mov r8, r8)
 801514e:	46bd      	mov	sp, r7
 8015150:	b002      	add	sp, #8
 8015152:	bd80      	pop	{r7, pc}
 8015154:	e000e100 	.word	0xe000e100

08015158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015158:	b590      	push	{r4, r7, lr}
 801515a:	b083      	sub	sp, #12
 801515c:	af00      	add	r7, sp, #0
 801515e:	0002      	movs	r2, r0
 8015160:	6039      	str	r1, [r7, #0]
 8015162:	1dfb      	adds	r3, r7, #7
 8015164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015166:	1dfb      	adds	r3, r7, #7
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	2b7f      	cmp	r3, #127	@ 0x7f
 801516c:	d828      	bhi.n	80151c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801516e:	4a2f      	ldr	r2, [pc, #188]	@ (801522c <__NVIC_SetPriority+0xd4>)
 8015170:	1dfb      	adds	r3, r7, #7
 8015172:	781b      	ldrb	r3, [r3, #0]
 8015174:	b25b      	sxtb	r3, r3
 8015176:	089b      	lsrs	r3, r3, #2
 8015178:	33c0      	adds	r3, #192	@ 0xc0
 801517a:	009b      	lsls	r3, r3, #2
 801517c:	589b      	ldr	r3, [r3, r2]
 801517e:	1dfa      	adds	r2, r7, #7
 8015180:	7812      	ldrb	r2, [r2, #0]
 8015182:	0011      	movs	r1, r2
 8015184:	2203      	movs	r2, #3
 8015186:	400a      	ands	r2, r1
 8015188:	00d2      	lsls	r2, r2, #3
 801518a:	21ff      	movs	r1, #255	@ 0xff
 801518c:	4091      	lsls	r1, r2
 801518e:	000a      	movs	r2, r1
 8015190:	43d2      	mvns	r2, r2
 8015192:	401a      	ands	r2, r3
 8015194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	019b      	lsls	r3, r3, #6
 801519a:	22ff      	movs	r2, #255	@ 0xff
 801519c:	401a      	ands	r2, r3
 801519e:	1dfb      	adds	r3, r7, #7
 80151a0:	781b      	ldrb	r3, [r3, #0]
 80151a2:	0018      	movs	r0, r3
 80151a4:	2303      	movs	r3, #3
 80151a6:	4003      	ands	r3, r0
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80151ac:	481f      	ldr	r0, [pc, #124]	@ (801522c <__NVIC_SetPriority+0xd4>)
 80151ae:	1dfb      	adds	r3, r7, #7
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	b25b      	sxtb	r3, r3
 80151b4:	089b      	lsrs	r3, r3, #2
 80151b6:	430a      	orrs	r2, r1
 80151b8:	33c0      	adds	r3, #192	@ 0xc0
 80151ba:	009b      	lsls	r3, r3, #2
 80151bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80151be:	e031      	b.n	8015224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80151c0:	4a1b      	ldr	r2, [pc, #108]	@ (8015230 <__NVIC_SetPriority+0xd8>)
 80151c2:	1dfb      	adds	r3, r7, #7
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	0019      	movs	r1, r3
 80151c8:	230f      	movs	r3, #15
 80151ca:	400b      	ands	r3, r1
 80151cc:	3b08      	subs	r3, #8
 80151ce:	089b      	lsrs	r3, r3, #2
 80151d0:	3306      	adds	r3, #6
 80151d2:	009b      	lsls	r3, r3, #2
 80151d4:	18d3      	adds	r3, r2, r3
 80151d6:	3304      	adds	r3, #4
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	1dfa      	adds	r2, r7, #7
 80151dc:	7812      	ldrb	r2, [r2, #0]
 80151de:	0011      	movs	r1, r2
 80151e0:	2203      	movs	r2, #3
 80151e2:	400a      	ands	r2, r1
 80151e4:	00d2      	lsls	r2, r2, #3
 80151e6:	21ff      	movs	r1, #255	@ 0xff
 80151e8:	4091      	lsls	r1, r2
 80151ea:	000a      	movs	r2, r1
 80151ec:	43d2      	mvns	r2, r2
 80151ee:	401a      	ands	r2, r3
 80151f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	019b      	lsls	r3, r3, #6
 80151f6:	22ff      	movs	r2, #255	@ 0xff
 80151f8:	401a      	ands	r2, r3
 80151fa:	1dfb      	adds	r3, r7, #7
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	0018      	movs	r0, r3
 8015200:	2303      	movs	r3, #3
 8015202:	4003      	ands	r3, r0
 8015204:	00db      	lsls	r3, r3, #3
 8015206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015208:	4809      	ldr	r0, [pc, #36]	@ (8015230 <__NVIC_SetPriority+0xd8>)
 801520a:	1dfb      	adds	r3, r7, #7
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	001c      	movs	r4, r3
 8015210:	230f      	movs	r3, #15
 8015212:	4023      	ands	r3, r4
 8015214:	3b08      	subs	r3, #8
 8015216:	089b      	lsrs	r3, r3, #2
 8015218:	430a      	orrs	r2, r1
 801521a:	3306      	adds	r3, #6
 801521c:	009b      	lsls	r3, r3, #2
 801521e:	18c3      	adds	r3, r0, r3
 8015220:	3304      	adds	r3, #4
 8015222:	601a      	str	r2, [r3, #0]
}
 8015224:	46c0      	nop			@ (mov r8, r8)
 8015226:	46bd      	mov	sp, r7
 8015228:	b003      	add	sp, #12
 801522a:	bd90      	pop	{r4, r7, pc}
 801522c:	e000e100 	.word	0xe000e100
 8015230:	e000ed00 	.word	0xe000ed00

08015234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	1e5a      	subs	r2, r3, #1
 8015240:	2380      	movs	r3, #128	@ 0x80
 8015242:	045b      	lsls	r3, r3, #17
 8015244:	429a      	cmp	r2, r3
 8015246:	d301      	bcc.n	801524c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015248:	2301      	movs	r3, #1
 801524a:	e010      	b.n	801526e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801524c:	4b0a      	ldr	r3, [pc, #40]	@ (8015278 <SysTick_Config+0x44>)
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	3a01      	subs	r2, #1
 8015252:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015254:	2301      	movs	r3, #1
 8015256:	425b      	negs	r3, r3
 8015258:	2103      	movs	r1, #3
 801525a:	0018      	movs	r0, r3
 801525c:	f7ff ff7c 	bl	8015158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015260:	4b05      	ldr	r3, [pc, #20]	@ (8015278 <SysTick_Config+0x44>)
 8015262:	2200      	movs	r2, #0
 8015264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015266:	4b04      	ldr	r3, [pc, #16]	@ (8015278 <SysTick_Config+0x44>)
 8015268:	2207      	movs	r2, #7
 801526a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801526c:	2300      	movs	r3, #0
}
 801526e:	0018      	movs	r0, r3
 8015270:	46bd      	mov	sp, r7
 8015272:	b002      	add	sp, #8
 8015274:	bd80      	pop	{r7, pc}
 8015276:	46c0      	nop			@ (mov r8, r8)
 8015278:	e000e010 	.word	0xe000e010

0801527c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801527c:	b580      	push	{r7, lr}
 801527e:	b084      	sub	sp, #16
 8015280:	af00      	add	r7, sp, #0
 8015282:	60b9      	str	r1, [r7, #8]
 8015284:	607a      	str	r2, [r7, #4]
 8015286:	210f      	movs	r1, #15
 8015288:	187b      	adds	r3, r7, r1
 801528a:	1c02      	adds	r2, r0, #0
 801528c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801528e:	68ba      	ldr	r2, [r7, #8]
 8015290:	187b      	adds	r3, r7, r1
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	b25b      	sxtb	r3, r3
 8015296:	0011      	movs	r1, r2
 8015298:	0018      	movs	r0, r3
 801529a:	f7ff ff5d 	bl	8015158 <__NVIC_SetPriority>
}
 801529e:	46c0      	nop			@ (mov r8, r8)
 80152a0:	46bd      	mov	sp, r7
 80152a2:	b004      	add	sp, #16
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b082      	sub	sp, #8
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	0002      	movs	r2, r0
 80152ae:	1dfb      	adds	r3, r7, #7
 80152b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80152b2:	1dfb      	adds	r3, r7, #7
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	b25b      	sxtb	r3, r3
 80152b8:	0018      	movs	r0, r3
 80152ba:	f7ff ff33 	bl	8015124 <__NVIC_EnableIRQ>
}
 80152be:	46c0      	nop			@ (mov r8, r8)
 80152c0:	46bd      	mov	sp, r7
 80152c2:	b002      	add	sp, #8
 80152c4:	bd80      	pop	{r7, pc}

080152c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80152c6:	b580      	push	{r7, lr}
 80152c8:	b082      	sub	sp, #8
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	0018      	movs	r0, r3
 80152d2:	f7ff ffaf 	bl	8015234 <SysTick_Config>
 80152d6:	0003      	movs	r3, r0
}
 80152d8:	0018      	movs	r0, r3
 80152da:	46bd      	mov	sp, r7
 80152dc:	b002      	add	sp, #8
 80152de:	bd80      	pop	{r7, pc}

080152e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d101      	bne.n	80152f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80152ee:	2301      	movs	r3, #1
 80152f0:	e061      	b.n	80153b6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	4a32      	ldr	r2, [pc, #200]	@ (80153c0 <HAL_DMA_Init+0xe0>)
 80152f8:	4694      	mov	ip, r2
 80152fa:	4463      	add	r3, ip
 80152fc:	2114      	movs	r1, #20
 80152fe:	0018      	movs	r0, r3
 8015300:	f7ea ff50 	bl	80001a4 <__udivsi3>
 8015304:	0003      	movs	r3, r0
 8015306:	009a      	lsls	r2, r3, #2
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	4a2d      	ldr	r2, [pc, #180]	@ (80153c4 <HAL_DMA_Init+0xe4>)
 8015310:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	2225      	movs	r2, #37	@ 0x25
 8015316:	2102      	movs	r1, #2
 8015318:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	4a28      	ldr	r2, [pc, #160]	@ (80153c8 <HAL_DMA_Init+0xe8>)
 8015326:	4013      	ands	r3, r2
 8015328:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8015332:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	691b      	ldr	r3, [r3, #16]
 8015338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801533e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	699b      	ldr	r3, [r3, #24]
 8015344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801534a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	6a1b      	ldr	r3, [r3, #32]
 8015350:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	4313      	orrs	r3, r2
 8015356:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	68fa      	ldr	r2, [r7, #12]
 801535e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	689a      	ldr	r2, [r3, #8]
 8015364:	2380      	movs	r3, #128	@ 0x80
 8015366:	01db      	lsls	r3, r3, #7
 8015368:	429a      	cmp	r2, r3
 801536a:	d018      	beq.n	801539e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 801536c:	4b17      	ldr	r3, [pc, #92]	@ (80153cc <HAL_DMA_Init+0xec>)
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015374:	211c      	movs	r1, #28
 8015376:	400b      	ands	r3, r1
 8015378:	210f      	movs	r1, #15
 801537a:	4099      	lsls	r1, r3
 801537c:	000b      	movs	r3, r1
 801537e:	43d9      	mvns	r1, r3
 8015380:	4b12      	ldr	r3, [pc, #72]	@ (80153cc <HAL_DMA_Init+0xec>)
 8015382:	400a      	ands	r2, r1
 8015384:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8015386:	4b11      	ldr	r3, [pc, #68]	@ (80153cc <HAL_DMA_Init+0xec>)
 8015388:	6819      	ldr	r1, [r3, #0]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	685a      	ldr	r2, [r3, #4]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015392:	201c      	movs	r0, #28
 8015394:	4003      	ands	r3, r0
 8015396:	409a      	lsls	r2, r3
 8015398:	4b0c      	ldr	r3, [pc, #48]	@ (80153cc <HAL_DMA_Init+0xec>)
 801539a:	430a      	orrs	r2, r1
 801539c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2200      	movs	r2, #0
 80153a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2225      	movs	r2, #37	@ 0x25
 80153a8:	2101      	movs	r1, #1
 80153aa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2224      	movs	r2, #36	@ 0x24
 80153b0:	2100      	movs	r1, #0
 80153b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	0018      	movs	r0, r3
 80153b8:	46bd      	mov	sp, r7
 80153ba:	b004      	add	sp, #16
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	46c0      	nop			@ (mov r8, r8)
 80153c0:	bffdfff8 	.word	0xbffdfff8
 80153c4:	40020000 	.word	0x40020000
 80153c8:	ffff800f 	.word	0xffff800f
 80153cc:	400200a8 	.word	0x400200a8

080153d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b086      	sub	sp, #24
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	60f8      	str	r0, [r7, #12]
 80153d8:	60b9      	str	r1, [r7, #8]
 80153da:	607a      	str	r2, [r7, #4]
 80153dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80153de:	2317      	movs	r3, #23
 80153e0:	18fb      	adds	r3, r7, r3
 80153e2:	2200      	movs	r2, #0
 80153e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2224      	movs	r2, #36	@ 0x24
 80153ea:	5c9b      	ldrb	r3, [r3, r2]
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d101      	bne.n	80153f4 <HAL_DMA_Start_IT+0x24>
 80153f0:	2302      	movs	r3, #2
 80153f2:	e04f      	b.n	8015494 <HAL_DMA_Start_IT+0xc4>
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2224      	movs	r2, #36	@ 0x24
 80153f8:	2101      	movs	r1, #1
 80153fa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2225      	movs	r2, #37	@ 0x25
 8015400:	5c9b      	ldrb	r3, [r3, r2]
 8015402:	b2db      	uxtb	r3, r3
 8015404:	2b01      	cmp	r3, #1
 8015406:	d13a      	bne.n	801547e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	2225      	movs	r2, #37	@ 0x25
 801540c:	2102      	movs	r1, #2
 801540e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2200      	movs	r2, #0
 8015414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	681a      	ldr	r2, [r3, #0]
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	2101      	movs	r1, #1
 8015422:	438a      	bics	r2, r1
 8015424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	687a      	ldr	r2, [r7, #4]
 801542a:	68b9      	ldr	r1, [r7, #8]
 801542c:	68f8      	ldr	r0, [r7, #12]
 801542e:	f000 f980 	bl	8015732 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015436:	2b00      	cmp	r3, #0
 8015438:	d008      	beq.n	801544c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	681a      	ldr	r2, [r3, #0]
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	210e      	movs	r1, #14
 8015446:	430a      	orrs	r2, r1
 8015448:	601a      	str	r2, [r3, #0]
 801544a:	e00f      	b.n	801546c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	2104      	movs	r1, #4
 8015458:	438a      	bics	r2, r1
 801545a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	210a      	movs	r1, #10
 8015468:	430a      	orrs	r2, r1
 801546a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	681a      	ldr	r2, [r3, #0]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	2101      	movs	r1, #1
 8015478:	430a      	orrs	r2, r1
 801547a:	601a      	str	r2, [r3, #0]
 801547c:	e007      	b.n	801548e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	2224      	movs	r2, #36	@ 0x24
 8015482:	2100      	movs	r1, #0
 8015484:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8015486:	2317      	movs	r3, #23
 8015488:	18fb      	adds	r3, r7, r3
 801548a:	2202      	movs	r2, #2
 801548c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 801548e:	2317      	movs	r3, #23
 8015490:	18fb      	adds	r3, r7, r3
 8015492:	781b      	ldrb	r3, [r3, #0]
}
 8015494:	0018      	movs	r0, r3
 8015496:	46bd      	mov	sp, r7
 8015498:	b006      	add	sp, #24
 801549a:	bd80      	pop	{r7, pc}

0801549c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b084      	sub	sp, #16
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80154a4:	230f      	movs	r3, #15
 80154a6:	18fb      	adds	r3, r7, r3
 80154a8:	2200      	movs	r2, #0
 80154aa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2225      	movs	r2, #37	@ 0x25
 80154b0:	5c9b      	ldrb	r3, [r3, r2]
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	2b02      	cmp	r3, #2
 80154b6:	d008      	beq.n	80154ca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2204      	movs	r2, #4
 80154bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	2224      	movs	r2, #36	@ 0x24
 80154c2:	2100      	movs	r1, #0
 80154c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80154c6:	2301      	movs	r3, #1
 80154c8:	e024      	b.n	8015514 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	681a      	ldr	r2, [r3, #0]
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	210e      	movs	r1, #14
 80154d6:	438a      	bics	r2, r1
 80154d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	681a      	ldr	r2, [r3, #0]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	2101      	movs	r1, #1
 80154e6:	438a      	bics	r2, r1
 80154e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154ee:	221c      	movs	r2, #28
 80154f0:	401a      	ands	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154f6:	2101      	movs	r1, #1
 80154f8:	4091      	lsls	r1, r2
 80154fa:	000a      	movs	r2, r1
 80154fc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2225      	movs	r2, #37	@ 0x25
 8015502:	2101      	movs	r1, #1
 8015504:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2224      	movs	r2, #36	@ 0x24
 801550a:	2100      	movs	r1, #0
 801550c:	5499      	strb	r1, [r3, r2]

    return status;
 801550e:	230f      	movs	r3, #15
 8015510:	18fb      	adds	r3, r7, r3
 8015512:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015514:	0018      	movs	r0, r3
 8015516:	46bd      	mov	sp, r7
 8015518:	b004      	add	sp, #16
 801551a:	bd80      	pop	{r7, pc}

0801551c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015524:	210f      	movs	r1, #15
 8015526:	187b      	adds	r3, r7, r1
 8015528:	2200      	movs	r2, #0
 801552a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2225      	movs	r2, #37	@ 0x25
 8015530:	5c9b      	ldrb	r3, [r3, r2]
 8015532:	b2db      	uxtb	r3, r3
 8015534:	2b02      	cmp	r3, #2
 8015536:	d006      	beq.n	8015546 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2204      	movs	r2, #4
 801553c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801553e:	187b      	adds	r3, r7, r1
 8015540:	2201      	movs	r2, #1
 8015542:	701a      	strb	r2, [r3, #0]
 8015544:	e02a      	b.n	801559c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	210e      	movs	r1, #14
 8015552:	438a      	bics	r2, r1
 8015554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	681a      	ldr	r2, [r3, #0]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2101      	movs	r1, #1
 8015562:	438a      	bics	r2, r1
 8015564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801556a:	221c      	movs	r2, #28
 801556c:	401a      	ands	r2, r3
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015572:	2101      	movs	r1, #1
 8015574:	4091      	lsls	r1, r2
 8015576:	000a      	movs	r2, r1
 8015578:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2225      	movs	r2, #37	@ 0x25
 801557e:	2101      	movs	r1, #1
 8015580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2224      	movs	r2, #36	@ 0x24
 8015586:	2100      	movs	r1, #0
 8015588:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801558e:	2b00      	cmp	r3, #0
 8015590:	d004      	beq.n	801559c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015596:	687a      	ldr	r2, [r7, #4]
 8015598:	0010      	movs	r0, r2
 801559a:	4798      	blx	r3
    }
  }
  return status;
 801559c:	230f      	movs	r3, #15
 801559e:	18fb      	adds	r3, r7, r3
 80155a0:	781b      	ldrb	r3, [r3, #0]
}
 80155a2:	0018      	movs	r0, r3
 80155a4:	46bd      	mov	sp, r7
 80155a6:	b004      	add	sp, #16
 80155a8:	bd80      	pop	{r7, pc}

080155aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b084      	sub	sp, #16
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155c6:	221c      	movs	r2, #28
 80155c8:	4013      	ands	r3, r2
 80155ca:	2204      	movs	r2, #4
 80155cc:	409a      	lsls	r2, r3
 80155ce:	0013      	movs	r3, r2
 80155d0:	68fa      	ldr	r2, [r7, #12]
 80155d2:	4013      	ands	r3, r2
 80155d4:	d026      	beq.n	8015624 <HAL_DMA_IRQHandler+0x7a>
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	2204      	movs	r2, #4
 80155da:	4013      	ands	r3, r2
 80155dc:	d022      	beq.n	8015624 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	2220      	movs	r2, #32
 80155e6:	4013      	ands	r3, r2
 80155e8:	d107      	bne.n	80155fa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	681a      	ldr	r2, [r3, #0]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2104      	movs	r1, #4
 80155f6:	438a      	bics	r2, r1
 80155f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155fe:	221c      	movs	r2, #28
 8015600:	401a      	ands	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015606:	2104      	movs	r1, #4
 8015608:	4091      	lsls	r1, r2
 801560a:	000a      	movs	r2, r1
 801560c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015612:	2b00      	cmp	r3, #0
 8015614:	d100      	bne.n	8015618 <HAL_DMA_IRQHandler+0x6e>
 8015616:	e071      	b.n	80156fc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801561c:	687a      	ldr	r2, [r7, #4]
 801561e:	0010      	movs	r0, r2
 8015620:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8015622:	e06b      	b.n	80156fc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015628:	221c      	movs	r2, #28
 801562a:	4013      	ands	r3, r2
 801562c:	2202      	movs	r2, #2
 801562e:	409a      	lsls	r2, r3
 8015630:	0013      	movs	r3, r2
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	4013      	ands	r3, r2
 8015636:	d02d      	beq.n	8015694 <HAL_DMA_IRQHandler+0xea>
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	2202      	movs	r2, #2
 801563c:	4013      	ands	r3, r2
 801563e:	d029      	beq.n	8015694 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	2220      	movs	r2, #32
 8015648:	4013      	ands	r3, r2
 801564a:	d10b      	bne.n	8015664 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	210a      	movs	r1, #10
 8015658:	438a      	bics	r2, r1
 801565a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2225      	movs	r2, #37	@ 0x25
 8015660:	2101      	movs	r1, #1
 8015662:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015668:	221c      	movs	r2, #28
 801566a:	401a      	ands	r2, r3
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015670:	2102      	movs	r1, #2
 8015672:	4091      	lsls	r1, r2
 8015674:	000a      	movs	r2, r1
 8015676:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2224      	movs	r2, #36	@ 0x24
 801567c:	2100      	movs	r1, #0
 801567e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015684:	2b00      	cmp	r3, #0
 8015686:	d039      	beq.n	80156fc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801568c:	687a      	ldr	r2, [r7, #4]
 801568e:	0010      	movs	r0, r2
 8015690:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8015692:	e033      	b.n	80156fc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015698:	221c      	movs	r2, #28
 801569a:	4013      	ands	r3, r2
 801569c:	2208      	movs	r2, #8
 801569e:	409a      	lsls	r2, r3
 80156a0:	0013      	movs	r3, r2
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	4013      	ands	r3, r2
 80156a6:	d02a      	beq.n	80156fe <HAL_DMA_IRQHandler+0x154>
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	2208      	movs	r2, #8
 80156ac:	4013      	ands	r3, r2
 80156ae:	d026      	beq.n	80156fe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	210e      	movs	r1, #14
 80156bc:	438a      	bics	r2, r1
 80156be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156c4:	221c      	movs	r2, #28
 80156c6:	401a      	ands	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156cc:	2101      	movs	r1, #1
 80156ce:	4091      	lsls	r1, r2
 80156d0:	000a      	movs	r2, r1
 80156d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2201      	movs	r2, #1
 80156d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2225      	movs	r2, #37	@ 0x25
 80156de:	2101      	movs	r1, #1
 80156e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2224      	movs	r2, #36	@ 0x24
 80156e6:	2100      	movs	r1, #0
 80156e8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d005      	beq.n	80156fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	0010      	movs	r0, r2
 80156fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80156fc:	46c0      	nop			@ (mov r8, r8)
 80156fe:	46c0      	nop			@ (mov r8, r8)
}
 8015700:	46bd      	mov	sp, r7
 8015702:	b004      	add	sp, #16
 8015704:	bd80      	pop	{r7, pc}

08015706 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015706:	b580      	push	{r7, lr}
 8015708:	b082      	sub	sp, #8
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2225      	movs	r2, #37	@ 0x25
 8015712:	5c9b      	ldrb	r3, [r3, r2]
 8015714:	b2db      	uxtb	r3, r3
}
 8015716:	0018      	movs	r0, r3
 8015718:	46bd      	mov	sp, r7
 801571a:	b002      	add	sp, #8
 801571c:	bd80      	pop	{r7, pc}

0801571e <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801571e:	b580      	push	{r7, lr}
 8015720:	b082      	sub	sp, #8
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 801572a:	0018      	movs	r0, r3
 801572c:	46bd      	mov	sp, r7
 801572e:	b002      	add	sp, #8
 8015730:	bd80      	pop	{r7, pc}

08015732 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015732:	b580      	push	{r7, lr}
 8015734:	b084      	sub	sp, #16
 8015736:	af00      	add	r7, sp, #0
 8015738:	60f8      	str	r0, [r7, #12]
 801573a:	60b9      	str	r1, [r7, #8]
 801573c:	607a      	str	r2, [r7, #4]
 801573e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015744:	221c      	movs	r2, #28
 8015746:	401a      	ands	r2, r3
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801574c:	2101      	movs	r1, #1
 801574e:	4091      	lsls	r1, r2
 8015750:	000a      	movs	r2, r1
 8015752:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	683a      	ldr	r2, [r7, #0]
 801575a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	689b      	ldr	r3, [r3, #8]
 8015760:	2b10      	cmp	r3, #16
 8015762:	d108      	bne.n	8015776 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	687a      	ldr	r2, [r7, #4]
 801576a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	68ba      	ldr	r2, [r7, #8]
 8015772:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8015774:	e007      	b.n	8015786 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	68ba      	ldr	r2, [r7, #8]
 801577c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	60da      	str	r2, [r3, #12]
}
 8015786:	46c0      	nop			@ (mov r8, r8)
 8015788:	46bd      	mov	sp, r7
 801578a:	b004      	add	sp, #16
 801578c:	bd80      	pop	{r7, pc}
	...

08015790 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b084      	sub	sp, #16
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8015798:	f7ff f8fc 	bl	8014994 <HAL_GetTick>
 801579c:	0003      	movs	r3, r0
 801579e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80157a0:	e00f      	b.n	80157c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	3301      	adds	r3, #1
 80157a6:	d00c      	beq.n	80157c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d007      	beq.n	80157be <FLASH_WaitForLastOperation+0x2e>
 80157ae:	f7ff f8f1 	bl	8014994 <HAL_GetTick>
 80157b2:	0002      	movs	r2, r0
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d201      	bcs.n	80157c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80157be:	2303      	movs	r3, #3
 80157c0:	e052      	b.n	8015868 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80157c2:	4b2b      	ldr	r3, [pc, #172]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 80157c4:	699b      	ldr	r3, [r3, #24]
 80157c6:	2201      	movs	r2, #1
 80157c8:	4013      	ands	r3, r2
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d0e9      	beq.n	80157a2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80157ce:	4b28      	ldr	r3, [pc, #160]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 80157d0:	699b      	ldr	r3, [r3, #24]
 80157d2:	2202      	movs	r2, #2
 80157d4:	4013      	ands	r3, r2
 80157d6:	2b02      	cmp	r3, #2
 80157d8:	d102      	bne.n	80157e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80157da:	4b25      	ldr	r3, [pc, #148]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 80157dc:	2202      	movs	r2, #2
 80157de:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80157e0:	4b23      	ldr	r3, [pc, #140]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 80157e2:	699a      	ldr	r2, [r3, #24]
 80157e4:	2380      	movs	r3, #128	@ 0x80
 80157e6:	005b      	lsls	r3, r3, #1
 80157e8:	401a      	ands	r2, r3
 80157ea:	2380      	movs	r3, #128	@ 0x80
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d035      	beq.n	801585e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80157f2:	4b1f      	ldr	r3, [pc, #124]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 80157f4:	699a      	ldr	r2, [r3, #24]
 80157f6:	2380      	movs	r3, #128	@ 0x80
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80157fc:	2380      	movs	r3, #128	@ 0x80
 80157fe:	009b      	lsls	r3, r3, #2
 8015800:	429a      	cmp	r2, r3
 8015802:	d02c      	beq.n	801585e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015804:	4b1a      	ldr	r3, [pc, #104]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 8015806:	699a      	ldr	r2, [r3, #24]
 8015808:	2380      	movs	r3, #128	@ 0x80
 801580a:	00db      	lsls	r3, r3, #3
 801580c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801580e:	2380      	movs	r3, #128	@ 0x80
 8015810:	00db      	lsls	r3, r3, #3
 8015812:	429a      	cmp	r2, r3
 8015814:	d023      	beq.n	801585e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015816:	4b16      	ldr	r3, [pc, #88]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 8015818:	699a      	ldr	r2, [r3, #24]
 801581a:	2380      	movs	r3, #128	@ 0x80
 801581c:	011b      	lsls	r3, r3, #4
 801581e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015820:	2380      	movs	r3, #128	@ 0x80
 8015822:	011b      	lsls	r3, r3, #4
 8015824:	429a      	cmp	r2, r3
 8015826:	d01a      	beq.n	801585e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015828:	4b11      	ldr	r3, [pc, #68]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 801582a:	699a      	ldr	r2, [r3, #24]
 801582c:	2380      	movs	r3, #128	@ 0x80
 801582e:	019b      	lsls	r3, r3, #6
 8015830:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015832:	2380      	movs	r3, #128	@ 0x80
 8015834:	019b      	lsls	r3, r3, #6
 8015836:	429a      	cmp	r2, r3
 8015838:	d011      	beq.n	801585e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801583a:	4b0d      	ldr	r3, [pc, #52]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 801583c:	699a      	ldr	r2, [r3, #24]
 801583e:	2380      	movs	r3, #128	@ 0x80
 8015840:	029b      	lsls	r3, r3, #10
 8015842:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015844:	2380      	movs	r3, #128	@ 0x80
 8015846:	029b      	lsls	r3, r3, #10
 8015848:	429a      	cmp	r2, r3
 801584a:	d008      	beq.n	801585e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 801584c:	4b08      	ldr	r3, [pc, #32]	@ (8015870 <FLASH_WaitForLastOperation+0xe0>)
 801584e:	699a      	ldr	r2, [r3, #24]
 8015850:	2380      	movs	r3, #128	@ 0x80
 8015852:	025b      	lsls	r3, r3, #9
 8015854:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015856:	2380      	movs	r3, #128	@ 0x80
 8015858:	025b      	lsls	r3, r3, #9
 801585a:	429a      	cmp	r2, r3
 801585c:	d103      	bne.n	8015866 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801585e:	f000 f809 	bl	8015874 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8015862:	2301      	movs	r3, #1
 8015864:	e000      	b.n	8015868 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8015866:	2300      	movs	r3, #0
}
 8015868:	0018      	movs	r0, r3
 801586a:	46bd      	mov	sp, r7
 801586c:	b004      	add	sp, #16
 801586e:	bd80      	pop	{r7, pc}
 8015870:	40022000 	.word	0x40022000

08015874 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 801587a:	2300      	movs	r3, #0
 801587c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801587e:	4b49      	ldr	r3, [pc, #292]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 8015880:	699a      	ldr	r2, [r3, #24]
 8015882:	2380      	movs	r3, #128	@ 0x80
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	401a      	ands	r2, r3
 8015888:	2380      	movs	r3, #128	@ 0x80
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	429a      	cmp	r2, r3
 801588e:	d10a      	bne.n	80158a6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8015890:	4b45      	ldr	r3, [pc, #276]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 8015892:	695b      	ldr	r3, [r3, #20]
 8015894:	2202      	movs	r2, #2
 8015896:	431a      	orrs	r2, r3
 8015898:	4b43      	ldr	r3, [pc, #268]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 801589a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2280      	movs	r2, #128	@ 0x80
 80158a0:	0052      	lsls	r2, r2, #1
 80158a2:	4313      	orrs	r3, r2
 80158a4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80158a6:	4b3f      	ldr	r3, [pc, #252]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 80158a8:	699a      	ldr	r2, [r3, #24]
 80158aa:	2380      	movs	r3, #128	@ 0x80
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	401a      	ands	r2, r3
 80158b0:	2380      	movs	r3, #128	@ 0x80
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d10a      	bne.n	80158ce <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80158b8:	4b3b      	ldr	r3, [pc, #236]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 80158ba:	695b      	ldr	r3, [r3, #20]
 80158bc:	2201      	movs	r2, #1
 80158be:	431a      	orrs	r2, r3
 80158c0:	4b39      	ldr	r3, [pc, #228]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 80158c2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2280      	movs	r2, #128	@ 0x80
 80158c8:	0092      	lsls	r2, r2, #2
 80158ca:	4313      	orrs	r3, r2
 80158cc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80158ce:	4b35      	ldr	r3, [pc, #212]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 80158d0:	699a      	ldr	r2, [r3, #24]
 80158d2:	2380      	movs	r3, #128	@ 0x80
 80158d4:	00db      	lsls	r3, r3, #3
 80158d6:	401a      	ands	r2, r3
 80158d8:	2380      	movs	r3, #128	@ 0x80
 80158da:	00db      	lsls	r3, r3, #3
 80158dc:	429a      	cmp	r2, r3
 80158de:	d10a      	bne.n	80158f6 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80158e0:	4b31      	ldr	r3, [pc, #196]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 80158e2:	695b      	ldr	r3, [r3, #20]
 80158e4:	2208      	movs	r2, #8
 80158e6:	431a      	orrs	r2, r3
 80158e8:	4b2f      	ldr	r3, [pc, #188]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 80158ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2280      	movs	r2, #128	@ 0x80
 80158f0:	00d2      	lsls	r2, r2, #3
 80158f2:	4313      	orrs	r3, r2
 80158f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80158f6:	4b2b      	ldr	r3, [pc, #172]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 80158f8:	699a      	ldr	r2, [r3, #24]
 80158fa:	2380      	movs	r3, #128	@ 0x80
 80158fc:	011b      	lsls	r3, r3, #4
 80158fe:	401a      	ands	r2, r3
 8015900:	2380      	movs	r3, #128	@ 0x80
 8015902:	011b      	lsls	r3, r3, #4
 8015904:	429a      	cmp	r2, r3
 8015906:	d10a      	bne.n	801591e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8015908:	4b27      	ldr	r3, [pc, #156]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 801590a:	695b      	ldr	r3, [r3, #20]
 801590c:	2204      	movs	r2, #4
 801590e:	431a      	orrs	r2, r3
 8015910:	4b25      	ldr	r3, [pc, #148]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 8015912:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2280      	movs	r2, #128	@ 0x80
 8015918:	0112      	lsls	r2, r2, #4
 801591a:	4313      	orrs	r3, r2
 801591c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 801591e:	4b21      	ldr	r3, [pc, #132]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 8015920:	699a      	ldr	r2, [r3, #24]
 8015922:	2380      	movs	r3, #128	@ 0x80
 8015924:	019b      	lsls	r3, r3, #6
 8015926:	401a      	ands	r2, r3
 8015928:	2380      	movs	r3, #128	@ 0x80
 801592a:	019b      	lsls	r3, r3, #6
 801592c:	429a      	cmp	r2, r3
 801592e:	d10a      	bne.n	8015946 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8015930:	4b1d      	ldr	r3, [pc, #116]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 8015932:	695b      	ldr	r3, [r3, #20]
 8015934:	2210      	movs	r2, #16
 8015936:	431a      	orrs	r2, r3
 8015938:	4b1b      	ldr	r3, [pc, #108]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 801593a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2280      	movs	r2, #128	@ 0x80
 8015940:	0192      	lsls	r2, r2, #6
 8015942:	4313      	orrs	r3, r2
 8015944:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8015946:	4b17      	ldr	r3, [pc, #92]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 8015948:	699a      	ldr	r2, [r3, #24]
 801594a:	2380      	movs	r3, #128	@ 0x80
 801594c:	029b      	lsls	r3, r3, #10
 801594e:	401a      	ands	r2, r3
 8015950:	2380      	movs	r3, #128	@ 0x80
 8015952:	029b      	lsls	r3, r3, #10
 8015954:	429a      	cmp	r2, r3
 8015956:	d109      	bne.n	801596c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8015958:	4b13      	ldr	r3, [pc, #76]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 801595a:	695b      	ldr	r3, [r3, #20]
 801595c:	2220      	movs	r2, #32
 801595e:	431a      	orrs	r2, r3
 8015960:	4b11      	ldr	r3, [pc, #68]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 8015962:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2220      	movs	r2, #32
 8015968:	4313      	orrs	r3, r2
 801596a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 801596c:	4b0d      	ldr	r3, [pc, #52]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 801596e:	699a      	ldr	r2, [r3, #24]
 8015970:	2380      	movs	r3, #128	@ 0x80
 8015972:	025b      	lsls	r3, r3, #9
 8015974:	401a      	ands	r2, r3
 8015976:	2380      	movs	r3, #128	@ 0x80
 8015978:	025b      	lsls	r3, r3, #9
 801597a:	429a      	cmp	r2, r3
 801597c:	d10a      	bne.n	8015994 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801597e:	4b0a      	ldr	r3, [pc, #40]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 8015980:	695b      	ldr	r3, [r3, #20]
 8015982:	2240      	movs	r2, #64	@ 0x40
 8015984:	431a      	orrs	r2, r3
 8015986:	4b08      	ldr	r3, [pc, #32]	@ (80159a8 <FLASH_SetErrorCode+0x134>)
 8015988:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	2280      	movs	r2, #128	@ 0x80
 801598e:	0252      	lsls	r2, r2, #9
 8015990:	4313      	orrs	r3, r2
 8015992:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8015994:	4b03      	ldr	r3, [pc, #12]	@ (80159a4 <FLASH_SetErrorCode+0x130>)
 8015996:	687a      	ldr	r2, [r7, #4]
 8015998:	619a      	str	r2, [r3, #24]
}  
 801599a:	46c0      	nop			@ (mov r8, r8)
 801599c:	46bd      	mov	sp, r7
 801599e:	b002      	add	sp, #8
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	46c0      	nop			@ (mov r8, r8)
 80159a4:	40022000 	.word	0x40022000
 80159a8:	20002518 	.word	0x20002518

080159ac <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80159b2:	4b12      	ldr	r3, [pc, #72]	@ (80159fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	2201      	movs	r2, #1
 80159b8:	4013      	ands	r3, r2
 80159ba:	d019      	beq.n	80159f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80159bc:	f3ef 8310 	mrs	r3, PRIMASK
 80159c0:	607b      	str	r3, [r7, #4]
  return(result);
 80159c2:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80159c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80159c6:	b672      	cpsid	i
}
 80159c8:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80159ca:	4b0c      	ldr	r3, [pc, #48]	@ (80159fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80159cc:	4a0c      	ldr	r2, [pc, #48]	@ (8015a00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80159ce:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80159d0:	4b0a      	ldr	r3, [pc, #40]	@ (80159fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80159d2:	4a0c      	ldr	r2, [pc, #48]	@ (8015a04 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80159d4:	60da      	str	r2, [r3, #12]
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	f383 8810 	msr	PRIMASK, r3
}
 80159e0:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80159e2:	4b06      	ldr	r3, [pc, #24]	@ (80159fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	2201      	movs	r2, #1
 80159e8:	4013      	ands	r3, r2
 80159ea:	d001      	beq.n	80159f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80159ec:	2301      	movs	r3, #1
 80159ee:	e000      	b.n	80159f2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80159f0:	2300      	movs	r3, #0
}
 80159f2:	0018      	movs	r0, r3
 80159f4:	46bd      	mov	sp, r7
 80159f6:	b004      	add	sp, #16
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	46c0      	nop			@ (mov r8, r8)
 80159fc:	40022000 	.word	0x40022000
 8015a00:	89abcdef 	.word	0x89abcdef
 8015a04:	02030405 	.word	0x02030405

08015a08 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015a0c:	4b04      	ldr	r3, [pc, #16]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015a0e:	685a      	ldr	r2, [r3, #4]
 8015a10:	4b03      	ldr	r3, [pc, #12]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015a12:	2101      	movs	r1, #1
 8015a14:	430a      	orrs	r2, r1
 8015a16:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8015a18:	2300      	movs	r3, #0
}
 8015a1a:	0018      	movs	r0, r3
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	40022000 	.word	0x40022000

08015a24 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015a24:	b5b0      	push	{r4, r5, r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015a2c:	250f      	movs	r5, #15
 8015a2e:	197b      	adds	r3, r7, r5
 8015a30:	2200      	movs	r2, #0
 8015a32:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a34:	197c      	adds	r4, r7, r5
 8015a36:	4b0f      	ldr	r3, [pc, #60]	@ (8015a74 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015a38:	0018      	movs	r0, r3
 8015a3a:	f7ff fea9 	bl	8015790 <FLASH_WaitForLastOperation>
 8015a3e:	0003      	movs	r3, r0
 8015a40:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015a42:	0029      	movs	r1, r5
 8015a44:	187b      	adds	r3, r7, r1
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d10c      	bne.n	8015a66 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8015a78 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8015a4e:	2200      	movs	r2, #0
 8015a50:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2200      	movs	r2, #0
 8015a56:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a58:	187c      	adds	r4, r7, r1
 8015a5a:	4b06      	ldr	r3, [pc, #24]	@ (8015a74 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015a5c:	0018      	movs	r0, r3
 8015a5e:	f7ff fe97 	bl	8015790 <FLASH_WaitForLastOperation>
 8015a62:	0003      	movs	r3, r0
 8015a64:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015a66:	230f      	movs	r3, #15
 8015a68:	18fb      	adds	r3, r7, r3
 8015a6a:	781b      	ldrb	r3, [r3, #0]
}  
 8015a6c:	0018      	movs	r0, r3
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	b004      	add	sp, #16
 8015a72:	bdb0      	pop	{r4, r5, r7, pc}
 8015a74:	0000c350 	.word	0x0000c350
 8015a78:	20002518 	.word	0x20002518

08015a7c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015a7c:	b5b0      	push	{r4, r5, r7, lr}
 8015a7e:	b086      	sub	sp, #24
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015a88:	2317      	movs	r3, #23
 8015a8a:	18fb      	adds	r3, r7, r3
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015a90:	4b24      	ldr	r3, [pc, #144]	@ (8015b24 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a92:	7c1b      	ldrb	r3, [r3, #16]
 8015a94:	2b01      	cmp	r3, #1
 8015a96:	d101      	bne.n	8015a9c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8015a98:	2302      	movs	r3, #2
 8015a9a:	e03e      	b.n	8015b1a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8015a9c:	4b21      	ldr	r3, [pc, #132]	@ (8015b24 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015aa2:	2517      	movs	r5, #23
 8015aa4:	197c      	adds	r4, r7, r5
 8015aa6:	4b20      	ldr	r3, [pc, #128]	@ (8015b28 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015aa8:	0018      	movs	r0, r3
 8015aaa:	f7ff fe71 	bl	8015790 <FLASH_WaitForLastOperation>
 8015aae:	0003      	movs	r3, r0
 8015ab0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015ab2:	197b      	adds	r3, r7, r5
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d129      	bne.n	8015b0e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015aba:	4b1a      	ldr	r3, [pc, #104]	@ (8015b24 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015abc:	2200      	movs	r2, #0
 8015abe:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	2b02      	cmp	r3, #2
 8015ac4:	d103      	bne.n	8015ace <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	601a      	str	r2, [r3, #0]
 8015acc:	e013      	b.n	8015af6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	2b01      	cmp	r3, #1
 8015ad2:	d104      	bne.n	8015ade <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	b292      	uxth	r2, r2
 8015ada:	801a      	strh	r2, [r3, #0]
 8015adc:	e00b      	b.n	8015af6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d104      	bne.n	8015aee <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	b2d2      	uxtb	r2, r2
 8015aea:	701a      	strb	r2, [r3, #0]
 8015aec:	e003      	b.n	8015af6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015aee:	2317      	movs	r3, #23
 8015af0:	18fb      	adds	r3, r7, r3
 8015af2:	2201      	movs	r2, #1
 8015af4:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015af6:	2217      	movs	r2, #23
 8015af8:	18bb      	adds	r3, r7, r2
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d106      	bne.n	8015b0e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015b00:	18bc      	adds	r4, r7, r2
 8015b02:	4b09      	ldr	r3, [pc, #36]	@ (8015b28 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015b04:	0018      	movs	r0, r3
 8015b06:	f7ff fe43 	bl	8015790 <FLASH_WaitForLastOperation>
 8015b0a:	0003      	movs	r3, r0
 8015b0c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015b0e:	4b05      	ldr	r3, [pc, #20]	@ (8015b24 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015b10:	2200      	movs	r2, #0
 8015b12:	741a      	strb	r2, [r3, #16]

  return status;
 8015b14:	2317      	movs	r3, #23
 8015b16:	18fb      	adds	r3, r7, r3
 8015b18:	781b      	ldrb	r3, [r3, #0]
}
 8015b1a:	0018      	movs	r0, r3
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	b006      	add	sp, #24
 8015b20:	bdb0      	pop	{r4, r5, r7, pc}
 8015b22:	46c0      	nop			@ (mov r8, r8)
 8015b24:	20002518 	.word	0x20002518
 8015b28:	0000c350 	.word	0x0000c350

08015b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b086      	sub	sp, #24
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015b36:	2300      	movs	r3, #0
 8015b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015b42:	e155      	b.n	8015df0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2101      	movs	r1, #1
 8015b4a:	697a      	ldr	r2, [r7, #20]
 8015b4c:	4091      	lsls	r1, r2
 8015b4e:	000a      	movs	r2, r1
 8015b50:	4013      	ands	r3, r2
 8015b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d100      	bne.n	8015b5c <HAL_GPIO_Init+0x30>
 8015b5a:	e146      	b.n	8015dea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	2203      	movs	r2, #3
 8015b62:	4013      	ands	r3, r2
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d005      	beq.n	8015b74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	2203      	movs	r2, #3
 8015b6e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015b70:	2b02      	cmp	r3, #2
 8015b72:	d130      	bne.n	8015bd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	689b      	ldr	r3, [r3, #8]
 8015b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	005b      	lsls	r3, r3, #1
 8015b7e:	2203      	movs	r2, #3
 8015b80:	409a      	lsls	r2, r3
 8015b82:	0013      	movs	r3, r2
 8015b84:	43da      	mvns	r2, r3
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	4013      	ands	r3, r2
 8015b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	68da      	ldr	r2, [r3, #12]
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	005b      	lsls	r3, r3, #1
 8015b94:	409a      	lsls	r2, r3
 8015b96:	0013      	movs	r3, r2
 8015b98:	693a      	ldr	r2, [r7, #16]
 8015b9a:	4313      	orrs	r3, r2
 8015b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	693a      	ldr	r2, [r7, #16]
 8015ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	685b      	ldr	r3, [r3, #4]
 8015ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015baa:	2201      	movs	r2, #1
 8015bac:	697b      	ldr	r3, [r7, #20]
 8015bae:	409a      	lsls	r2, r3
 8015bb0:	0013      	movs	r3, r2
 8015bb2:	43da      	mvns	r2, r3
 8015bb4:	693b      	ldr	r3, [r7, #16]
 8015bb6:	4013      	ands	r3, r2
 8015bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	091b      	lsrs	r3, r3, #4
 8015bc0:	2201      	movs	r2, #1
 8015bc2:	401a      	ands	r2, r3
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	409a      	lsls	r2, r3
 8015bc8:	0013      	movs	r3, r2
 8015bca:	693a      	ldr	r2, [r7, #16]
 8015bcc:	4313      	orrs	r3, r2
 8015bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	693a      	ldr	r2, [r7, #16]
 8015bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	2203      	movs	r2, #3
 8015bdc:	4013      	ands	r3, r2
 8015bde:	2b03      	cmp	r3, #3
 8015be0:	d017      	beq.n	8015c12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	68db      	ldr	r3, [r3, #12]
 8015be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	005b      	lsls	r3, r3, #1
 8015bec:	2203      	movs	r2, #3
 8015bee:	409a      	lsls	r2, r3
 8015bf0:	0013      	movs	r3, r2
 8015bf2:	43da      	mvns	r2, r3
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	4013      	ands	r3, r2
 8015bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	689a      	ldr	r2, [r3, #8]
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	005b      	lsls	r3, r3, #1
 8015c02:	409a      	lsls	r2, r3
 8015c04:	0013      	movs	r3, r2
 8015c06:	693a      	ldr	r2, [r7, #16]
 8015c08:	4313      	orrs	r3, r2
 8015c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	693a      	ldr	r2, [r7, #16]
 8015c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	2203      	movs	r2, #3
 8015c18:	4013      	ands	r3, r2
 8015c1a:	2b02      	cmp	r3, #2
 8015c1c:	d123      	bne.n	8015c66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015c1e:	697b      	ldr	r3, [r7, #20]
 8015c20:	08da      	lsrs	r2, r3, #3
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	3208      	adds	r2, #8
 8015c26:	0092      	lsls	r2, r2, #2
 8015c28:	58d3      	ldr	r3, [r2, r3]
 8015c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	2207      	movs	r2, #7
 8015c30:	4013      	ands	r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	220f      	movs	r2, #15
 8015c36:	409a      	lsls	r2, r3
 8015c38:	0013      	movs	r3, r2
 8015c3a:	43da      	mvns	r2, r3
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	4013      	ands	r3, r2
 8015c40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	691a      	ldr	r2, [r3, #16]
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	2107      	movs	r1, #7
 8015c4a:	400b      	ands	r3, r1
 8015c4c:	009b      	lsls	r3, r3, #2
 8015c4e:	409a      	lsls	r2, r3
 8015c50:	0013      	movs	r3, r2
 8015c52:	693a      	ldr	r2, [r7, #16]
 8015c54:	4313      	orrs	r3, r2
 8015c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	08da      	lsrs	r2, r3, #3
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	3208      	adds	r2, #8
 8015c60:	0092      	lsls	r2, r2, #2
 8015c62:	6939      	ldr	r1, [r7, #16]
 8015c64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	005b      	lsls	r3, r3, #1
 8015c70:	2203      	movs	r2, #3
 8015c72:	409a      	lsls	r2, r3
 8015c74:	0013      	movs	r3, r2
 8015c76:	43da      	mvns	r2, r3
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	685b      	ldr	r3, [r3, #4]
 8015c82:	2203      	movs	r2, #3
 8015c84:	401a      	ands	r2, r3
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	005b      	lsls	r3, r3, #1
 8015c8a:	409a      	lsls	r2, r3
 8015c8c:	0013      	movs	r3, r2
 8015c8e:	693a      	ldr	r2, [r7, #16]
 8015c90:	4313      	orrs	r3, r2
 8015c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	693a      	ldr	r2, [r7, #16]
 8015c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	685a      	ldr	r2, [r3, #4]
 8015c9e:	23c0      	movs	r3, #192	@ 0xc0
 8015ca0:	029b      	lsls	r3, r3, #10
 8015ca2:	4013      	ands	r3, r2
 8015ca4:	d100      	bne.n	8015ca8 <HAL_GPIO_Init+0x17c>
 8015ca6:	e0a0      	b.n	8015dea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015ca8:	4b57      	ldr	r3, [pc, #348]	@ (8015e08 <HAL_GPIO_Init+0x2dc>)
 8015caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015cac:	4b56      	ldr	r3, [pc, #344]	@ (8015e08 <HAL_GPIO_Init+0x2dc>)
 8015cae:	2101      	movs	r1, #1
 8015cb0:	430a      	orrs	r2, r1
 8015cb2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015cb4:	4a55      	ldr	r2, [pc, #340]	@ (8015e0c <HAL_GPIO_Init+0x2e0>)
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	089b      	lsrs	r3, r3, #2
 8015cba:	3302      	adds	r3, #2
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	589b      	ldr	r3, [r3, r2]
 8015cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	2203      	movs	r2, #3
 8015cc6:	4013      	ands	r3, r2
 8015cc8:	009b      	lsls	r3, r3, #2
 8015cca:	220f      	movs	r2, #15
 8015ccc:	409a      	lsls	r2, r3
 8015cce:	0013      	movs	r3, r2
 8015cd0:	43da      	mvns	r2, r3
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	4013      	ands	r3, r2
 8015cd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015cd8:	687a      	ldr	r2, [r7, #4]
 8015cda:	23a0      	movs	r3, #160	@ 0xa0
 8015cdc:	05db      	lsls	r3, r3, #23
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d01f      	beq.n	8015d22 <HAL_GPIO_Init+0x1f6>
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8015e10 <HAL_GPIO_Init+0x2e4>)
 8015ce6:	4293      	cmp	r3, r2
 8015ce8:	d019      	beq.n	8015d1e <HAL_GPIO_Init+0x1f2>
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	4a49      	ldr	r2, [pc, #292]	@ (8015e14 <HAL_GPIO_Init+0x2e8>)
 8015cee:	4293      	cmp	r3, r2
 8015cf0:	d013      	beq.n	8015d1a <HAL_GPIO_Init+0x1ee>
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	4a48      	ldr	r2, [pc, #288]	@ (8015e18 <HAL_GPIO_Init+0x2ec>)
 8015cf6:	4293      	cmp	r3, r2
 8015cf8:	d00d      	beq.n	8015d16 <HAL_GPIO_Init+0x1ea>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	4a47      	ldr	r2, [pc, #284]	@ (8015e1c <HAL_GPIO_Init+0x2f0>)
 8015cfe:	4293      	cmp	r3, r2
 8015d00:	d007      	beq.n	8015d12 <HAL_GPIO_Init+0x1e6>
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	4a46      	ldr	r2, [pc, #280]	@ (8015e20 <HAL_GPIO_Init+0x2f4>)
 8015d06:	4293      	cmp	r3, r2
 8015d08:	d101      	bne.n	8015d0e <HAL_GPIO_Init+0x1e2>
 8015d0a:	2305      	movs	r3, #5
 8015d0c:	e00a      	b.n	8015d24 <HAL_GPIO_Init+0x1f8>
 8015d0e:	2306      	movs	r3, #6
 8015d10:	e008      	b.n	8015d24 <HAL_GPIO_Init+0x1f8>
 8015d12:	2304      	movs	r3, #4
 8015d14:	e006      	b.n	8015d24 <HAL_GPIO_Init+0x1f8>
 8015d16:	2303      	movs	r3, #3
 8015d18:	e004      	b.n	8015d24 <HAL_GPIO_Init+0x1f8>
 8015d1a:	2302      	movs	r3, #2
 8015d1c:	e002      	b.n	8015d24 <HAL_GPIO_Init+0x1f8>
 8015d1e:	2301      	movs	r3, #1
 8015d20:	e000      	b.n	8015d24 <HAL_GPIO_Init+0x1f8>
 8015d22:	2300      	movs	r3, #0
 8015d24:	697a      	ldr	r2, [r7, #20]
 8015d26:	2103      	movs	r1, #3
 8015d28:	400a      	ands	r2, r1
 8015d2a:	0092      	lsls	r2, r2, #2
 8015d2c:	4093      	lsls	r3, r2
 8015d2e:	693a      	ldr	r2, [r7, #16]
 8015d30:	4313      	orrs	r3, r2
 8015d32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015d34:	4935      	ldr	r1, [pc, #212]	@ (8015e0c <HAL_GPIO_Init+0x2e0>)
 8015d36:	697b      	ldr	r3, [r7, #20]
 8015d38:	089b      	lsrs	r3, r3, #2
 8015d3a:	3302      	adds	r3, #2
 8015d3c:	009b      	lsls	r3, r3, #2
 8015d3e:	693a      	ldr	r2, [r7, #16]
 8015d40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015d42:	4b38      	ldr	r3, [pc, #224]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015d44:	689b      	ldr	r3, [r3, #8]
 8015d46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	43da      	mvns	r2, r3
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	4013      	ands	r3, r2
 8015d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	685a      	ldr	r2, [r3, #4]
 8015d56:	2380      	movs	r3, #128	@ 0x80
 8015d58:	035b      	lsls	r3, r3, #13
 8015d5a:	4013      	ands	r3, r2
 8015d5c:	d003      	beq.n	8015d66 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015d5e:	693a      	ldr	r2, [r7, #16]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	4313      	orrs	r3, r2
 8015d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015d66:	4b2f      	ldr	r3, [pc, #188]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015d68:	693a      	ldr	r2, [r7, #16]
 8015d6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015d6e:	68db      	ldr	r3, [r3, #12]
 8015d70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	43da      	mvns	r2, r3
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	4013      	ands	r3, r2
 8015d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	685a      	ldr	r2, [r3, #4]
 8015d80:	2380      	movs	r3, #128	@ 0x80
 8015d82:	039b      	lsls	r3, r3, #14
 8015d84:	4013      	ands	r3, r2
 8015d86:	d003      	beq.n	8015d90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015d88:	693a      	ldr	r2, [r7, #16]
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	4313      	orrs	r3, r2
 8015d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015d90:	4b24      	ldr	r3, [pc, #144]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015d92:	693a      	ldr	r2, [r7, #16]
 8015d94:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015d96:	4b23      	ldr	r3, [pc, #140]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	43da      	mvns	r2, r3
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	4013      	ands	r3, r2
 8015da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	685a      	ldr	r2, [r3, #4]
 8015daa:	2380      	movs	r3, #128	@ 0x80
 8015dac:	029b      	lsls	r3, r3, #10
 8015dae:	4013      	ands	r3, r2
 8015db0:	d003      	beq.n	8015dba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015db2:	693a      	ldr	r2, [r7, #16]
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	4313      	orrs	r3, r2
 8015db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015dba:	4b1a      	ldr	r3, [pc, #104]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015dbc:	693a      	ldr	r2, [r7, #16]
 8015dbe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015dc0:	4b18      	ldr	r3, [pc, #96]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	43da      	mvns	r2, r3
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	4013      	ands	r3, r2
 8015dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	685a      	ldr	r2, [r3, #4]
 8015dd4:	2380      	movs	r3, #128	@ 0x80
 8015dd6:	025b      	lsls	r3, r3, #9
 8015dd8:	4013      	ands	r3, r2
 8015dda:	d003      	beq.n	8015de4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015ddc:	693a      	ldr	r2, [r7, #16]
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	4313      	orrs	r3, r2
 8015de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015de4:	4b0f      	ldr	r3, [pc, #60]	@ (8015e24 <HAL_GPIO_Init+0x2f8>)
 8015de6:	693a      	ldr	r2, [r7, #16]
 8015de8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	3301      	adds	r3, #1
 8015dee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	681a      	ldr	r2, [r3, #0]
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	40da      	lsrs	r2, r3
 8015df8:	1e13      	subs	r3, r2, #0
 8015dfa:	d000      	beq.n	8015dfe <HAL_GPIO_Init+0x2d2>
 8015dfc:	e6a2      	b.n	8015b44 <HAL_GPIO_Init+0x18>
  }
}
 8015dfe:	46c0      	nop			@ (mov r8, r8)
 8015e00:	46c0      	nop			@ (mov r8, r8)
 8015e02:	46bd      	mov	sp, r7
 8015e04:	b006      	add	sp, #24
 8015e06:	bd80      	pop	{r7, pc}
 8015e08:	40021000 	.word	0x40021000
 8015e0c:	40010000 	.word	0x40010000
 8015e10:	50000400 	.word	0x50000400
 8015e14:	50000800 	.word	0x50000800
 8015e18:	50000c00 	.word	0x50000c00
 8015e1c:	50001000 	.word	0x50001000
 8015e20:	50001c00 	.word	0x50001c00
 8015e24:	40010400 	.word	0x40010400

08015e28 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b084      	sub	sp, #16
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	000a      	movs	r2, r1
 8015e32:	1cbb      	adds	r3, r7, #2
 8015e34:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	691b      	ldr	r3, [r3, #16]
 8015e3a:	1cba      	adds	r2, r7, #2
 8015e3c:	8812      	ldrh	r2, [r2, #0]
 8015e3e:	4013      	ands	r3, r2
 8015e40:	d004      	beq.n	8015e4c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015e42:	230f      	movs	r3, #15
 8015e44:	18fb      	adds	r3, r7, r3
 8015e46:	2201      	movs	r2, #1
 8015e48:	701a      	strb	r2, [r3, #0]
 8015e4a:	e003      	b.n	8015e54 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015e4c:	230f      	movs	r3, #15
 8015e4e:	18fb      	adds	r3, r7, r3
 8015e50:	2200      	movs	r2, #0
 8015e52:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015e54:	230f      	movs	r3, #15
 8015e56:	18fb      	adds	r3, r7, r3
 8015e58:	781b      	ldrb	r3, [r3, #0]
}
 8015e5a:	0018      	movs	r0, r3
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	b004      	add	sp, #16
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b082      	sub	sp, #8
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
 8015e6a:	0008      	movs	r0, r1
 8015e6c:	0011      	movs	r1, r2
 8015e6e:	1cbb      	adds	r3, r7, #2
 8015e70:	1c02      	adds	r2, r0, #0
 8015e72:	801a      	strh	r2, [r3, #0]
 8015e74:	1c7b      	adds	r3, r7, #1
 8015e76:	1c0a      	adds	r2, r1, #0
 8015e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015e7a:	1c7b      	adds	r3, r7, #1
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d004      	beq.n	8015e8c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015e82:	1cbb      	adds	r3, r7, #2
 8015e84:	881a      	ldrh	r2, [r3, #0]
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015e8a:	e003      	b.n	8015e94 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015e8c:	1cbb      	adds	r3, r7, #2
 8015e8e:	881a      	ldrh	r2, [r3, #0]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015e94:	46c0      	nop			@ (mov r8, r8)
 8015e96:	46bd      	mov	sp, r7
 8015e98:	b002      	add	sp, #8
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	0002      	movs	r2, r0
 8015ea4:	1dbb      	adds	r3, r7, #6
 8015ea6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015ea8:	4b09      	ldr	r3, [pc, #36]	@ (8015ed0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015eaa:	695b      	ldr	r3, [r3, #20]
 8015eac:	1dba      	adds	r2, r7, #6
 8015eae:	8812      	ldrh	r2, [r2, #0]
 8015eb0:	4013      	ands	r3, r2
 8015eb2:	d008      	beq.n	8015ec6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015eb4:	4b06      	ldr	r3, [pc, #24]	@ (8015ed0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015eb6:	1dba      	adds	r2, r7, #6
 8015eb8:	8812      	ldrh	r2, [r2, #0]
 8015eba:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015ebc:	1dbb      	adds	r3, r7, #6
 8015ebe:	881b      	ldrh	r3, [r3, #0]
 8015ec0:	0018      	movs	r0, r3
 8015ec2:	f7f7 fab7 	bl	800d434 <HAL_GPIO_EXTI_Callback>
  }
}
 8015ec6:	46c0      	nop			@ (mov r8, r8)
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	b002      	add	sp, #8
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	46c0      	nop			@ (mov r8, r8)
 8015ed0:	40010400 	.word	0x40010400

08015ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d101      	bne.n	8015ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	e082      	b.n	8015fec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2241      	movs	r2, #65	@ 0x41
 8015eea:	5c9b      	ldrb	r3, [r3, r2]
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d107      	bne.n	8015f02 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	2240      	movs	r2, #64	@ 0x40
 8015ef6:	2100      	movs	r1, #0
 8015ef8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	0018      	movs	r0, r3
 8015efe:	f7f6 fcb9 	bl	800c874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2241      	movs	r2, #65	@ 0x41
 8015f06:	2124      	movs	r1, #36	@ 0x24
 8015f08:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	681a      	ldr	r2, [r3, #0]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	2101      	movs	r1, #1
 8015f16:	438a      	bics	r2, r1
 8015f18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	685a      	ldr	r2, [r3, #4]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4934      	ldr	r1, [pc, #208]	@ (8015ff4 <HAL_I2C_Init+0x120>)
 8015f24:	400a      	ands	r2, r1
 8015f26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	689a      	ldr	r2, [r3, #8]
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	4931      	ldr	r1, [pc, #196]	@ (8015ff8 <HAL_I2C_Init+0x124>)
 8015f34:	400a      	ands	r2, r1
 8015f36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	68db      	ldr	r3, [r3, #12]
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d108      	bne.n	8015f52 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	689a      	ldr	r2, [r3, #8]
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2180      	movs	r1, #128	@ 0x80
 8015f4a:	0209      	lsls	r1, r1, #8
 8015f4c:	430a      	orrs	r2, r1
 8015f4e:	609a      	str	r2, [r3, #8]
 8015f50:	e007      	b.n	8015f62 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	689a      	ldr	r2, [r3, #8]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2184      	movs	r1, #132	@ 0x84
 8015f5c:	0209      	lsls	r1, r1, #8
 8015f5e:	430a      	orrs	r2, r1
 8015f60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	2b02      	cmp	r3, #2
 8015f68:	d104      	bne.n	8015f74 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	2280      	movs	r2, #128	@ 0x80
 8015f70:	0112      	lsls	r2, r2, #4
 8015f72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	685a      	ldr	r2, [r3, #4]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	491f      	ldr	r1, [pc, #124]	@ (8015ffc <HAL_I2C_Init+0x128>)
 8015f80:	430a      	orrs	r2, r1
 8015f82:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	68da      	ldr	r2, [r3, #12]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	491a      	ldr	r1, [pc, #104]	@ (8015ff8 <HAL_I2C_Init+0x124>)
 8015f90:	400a      	ands	r2, r1
 8015f92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	691a      	ldr	r2, [r3, #16]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	695b      	ldr	r3, [r3, #20]
 8015f9c:	431a      	orrs	r2, r3
 8015f9e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	699b      	ldr	r3, [r3, #24]
 8015fa4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	430a      	orrs	r2, r1
 8015fac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	69d9      	ldr	r1, [r3, #28]
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6a1a      	ldr	r2, [r3, #32]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	430a      	orrs	r2, r1
 8015fbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	681a      	ldr	r2, [r3, #0]
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2101      	movs	r1, #1
 8015fca:	430a      	orrs	r2, r1
 8015fcc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2241      	movs	r2, #65	@ 0x41
 8015fd8:	2120      	movs	r1, #32
 8015fda:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2242      	movs	r2, #66	@ 0x42
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015fea:	2300      	movs	r3, #0
}
 8015fec:	0018      	movs	r0, r3
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	b002      	add	sp, #8
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	f0ffffff 	.word	0xf0ffffff
 8015ff8:	ffff7fff 	.word	0xffff7fff
 8015ffc:	02008000 	.word	0x02008000

08016000 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016000:	b590      	push	{r4, r7, lr}
 8016002:	b089      	sub	sp, #36	@ 0x24
 8016004:	af02      	add	r7, sp, #8
 8016006:	60f8      	str	r0, [r7, #12]
 8016008:	0008      	movs	r0, r1
 801600a:	607a      	str	r2, [r7, #4]
 801600c:	0019      	movs	r1, r3
 801600e:	230a      	movs	r3, #10
 8016010:	18fb      	adds	r3, r7, r3
 8016012:	1c02      	adds	r2, r0, #0
 8016014:	801a      	strh	r2, [r3, #0]
 8016016:	2308      	movs	r3, #8
 8016018:	18fb      	adds	r3, r7, r3
 801601a:	1c0a      	adds	r2, r1, #0
 801601c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	2241      	movs	r2, #65	@ 0x41
 8016022:	5c9b      	ldrb	r3, [r3, r2]
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b20      	cmp	r3, #32
 8016028:	d000      	beq.n	801602c <HAL_I2C_Master_Transmit+0x2c>
 801602a:	e0e7      	b.n	80161fc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	2240      	movs	r2, #64	@ 0x40
 8016030:	5c9b      	ldrb	r3, [r3, r2]
 8016032:	2b01      	cmp	r3, #1
 8016034:	d101      	bne.n	801603a <HAL_I2C_Master_Transmit+0x3a>
 8016036:	2302      	movs	r3, #2
 8016038:	e0e1      	b.n	80161fe <HAL_I2C_Master_Transmit+0x1fe>
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	2240      	movs	r2, #64	@ 0x40
 801603e:	2101      	movs	r1, #1
 8016040:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016042:	f7fe fca7 	bl	8014994 <HAL_GetTick>
 8016046:	0003      	movs	r3, r0
 8016048:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801604a:	2380      	movs	r3, #128	@ 0x80
 801604c:	0219      	lsls	r1, r3, #8
 801604e:	68f8      	ldr	r0, [r7, #12]
 8016050:	697b      	ldr	r3, [r7, #20]
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	2319      	movs	r3, #25
 8016056:	2201      	movs	r2, #1
 8016058:	f002 fb34 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 801605c:	1e03      	subs	r3, r0, #0
 801605e:	d001      	beq.n	8016064 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8016060:	2301      	movs	r3, #1
 8016062:	e0cc      	b.n	80161fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	2241      	movs	r2, #65	@ 0x41
 8016068:	2121      	movs	r1, #33	@ 0x21
 801606a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2242      	movs	r2, #66	@ 0x42
 8016070:	2110      	movs	r1, #16
 8016072:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2200      	movs	r2, #0
 8016078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	687a      	ldr	r2, [r7, #4]
 801607e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	2208      	movs	r2, #8
 8016084:	18ba      	adds	r2, r7, r2
 8016086:	8812      	ldrh	r2, [r2, #0]
 8016088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2200      	movs	r2, #0
 801608e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016094:	b29b      	uxth	r3, r3
 8016096:	2bff      	cmp	r3, #255	@ 0xff
 8016098:	d911      	bls.n	80160be <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	22ff      	movs	r2, #255	@ 0xff
 801609e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160a4:	b2da      	uxtb	r2, r3
 80160a6:	2380      	movs	r3, #128	@ 0x80
 80160a8:	045c      	lsls	r4, r3, #17
 80160aa:	230a      	movs	r3, #10
 80160ac:	18fb      	adds	r3, r7, r3
 80160ae:	8819      	ldrh	r1, [r3, #0]
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	4b55      	ldr	r3, [pc, #340]	@ (8016208 <HAL_I2C_Master_Transmit+0x208>)
 80160b4:	9300      	str	r3, [sp, #0]
 80160b6:	0023      	movs	r3, r4
 80160b8:	f002 fd56 	bl	8018b68 <I2C_TransferConfig>
 80160bc:	e075      	b.n	80161aa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160cc:	b2da      	uxtb	r2, r3
 80160ce:	2380      	movs	r3, #128	@ 0x80
 80160d0:	049c      	lsls	r4, r3, #18
 80160d2:	230a      	movs	r3, #10
 80160d4:	18fb      	adds	r3, r7, r3
 80160d6:	8819      	ldrh	r1, [r3, #0]
 80160d8:	68f8      	ldr	r0, [r7, #12]
 80160da:	4b4b      	ldr	r3, [pc, #300]	@ (8016208 <HAL_I2C_Master_Transmit+0x208>)
 80160dc:	9300      	str	r3, [sp, #0]
 80160de:	0023      	movs	r3, r4
 80160e0:	f002 fd42 	bl	8018b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80160e4:	e061      	b.n	80161aa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80160e6:	697a      	ldr	r2, [r7, #20]
 80160e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	0018      	movs	r0, r3
 80160ee:	f002 fb37 	bl	8018760 <I2C_WaitOnTXISFlagUntilTimeout>
 80160f2:	1e03      	subs	r3, r0, #0
 80160f4:	d001      	beq.n	80160fa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80160f6:	2301      	movs	r3, #1
 80160f8:	e081      	b.n	80161fe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160fe:	781a      	ldrb	r2, [r3, #0]
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801610a:	1c5a      	adds	r2, r3, #1
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016114:	b29b      	uxth	r3, r3
 8016116:	3b01      	subs	r3, #1
 8016118:	b29a      	uxth	r2, r3
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016122:	3b01      	subs	r3, #1
 8016124:	b29a      	uxth	r2, r3
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801612e:	b29b      	uxth	r3, r3
 8016130:	2b00      	cmp	r3, #0
 8016132:	d03a      	beq.n	80161aa <HAL_I2C_Master_Transmit+0x1aa>
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016138:	2b00      	cmp	r3, #0
 801613a:	d136      	bne.n	80161aa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801613c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801613e:	68f8      	ldr	r0, [r7, #12]
 8016140:	697b      	ldr	r3, [r7, #20]
 8016142:	9300      	str	r3, [sp, #0]
 8016144:	0013      	movs	r3, r2
 8016146:	2200      	movs	r2, #0
 8016148:	2180      	movs	r1, #128	@ 0x80
 801614a:	f002 fabb 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 801614e:	1e03      	subs	r3, r0, #0
 8016150:	d001      	beq.n	8016156 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8016152:	2301      	movs	r3, #1
 8016154:	e053      	b.n	80161fe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801615a:	b29b      	uxth	r3, r3
 801615c:	2bff      	cmp	r3, #255	@ 0xff
 801615e:	d911      	bls.n	8016184 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	22ff      	movs	r2, #255	@ 0xff
 8016164:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801616a:	b2da      	uxtb	r2, r3
 801616c:	2380      	movs	r3, #128	@ 0x80
 801616e:	045c      	lsls	r4, r3, #17
 8016170:	230a      	movs	r3, #10
 8016172:	18fb      	adds	r3, r7, r3
 8016174:	8819      	ldrh	r1, [r3, #0]
 8016176:	68f8      	ldr	r0, [r7, #12]
 8016178:	2300      	movs	r3, #0
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	0023      	movs	r3, r4
 801617e:	f002 fcf3 	bl	8018b68 <I2C_TransferConfig>
 8016182:	e012      	b.n	80161aa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016188:	b29a      	uxth	r2, r3
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016192:	b2da      	uxtb	r2, r3
 8016194:	2380      	movs	r3, #128	@ 0x80
 8016196:	049c      	lsls	r4, r3, #18
 8016198:	230a      	movs	r3, #10
 801619a:	18fb      	adds	r3, r7, r3
 801619c:	8819      	ldrh	r1, [r3, #0]
 801619e:	68f8      	ldr	r0, [r7, #12]
 80161a0:	2300      	movs	r3, #0
 80161a2:	9300      	str	r3, [sp, #0]
 80161a4:	0023      	movs	r3, r4
 80161a6:	f002 fcdf 	bl	8018b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d198      	bne.n	80160e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80161b4:	697a      	ldr	r2, [r7, #20]
 80161b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	0018      	movs	r0, r3
 80161bc:	f002 fb16 	bl	80187ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80161c0:	1e03      	subs	r3, r0, #0
 80161c2:	d001      	beq.n	80161c8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80161c4:	2301      	movs	r3, #1
 80161c6:	e01a      	b.n	80161fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	2220      	movs	r2, #32
 80161ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	685a      	ldr	r2, [r3, #4]
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	490c      	ldr	r1, [pc, #48]	@ (801620c <HAL_I2C_Master_Transmit+0x20c>)
 80161dc:	400a      	ands	r2, r1
 80161de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2241      	movs	r2, #65	@ 0x41
 80161e4:	2120      	movs	r1, #32
 80161e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	2242      	movs	r2, #66	@ 0x42
 80161ec:	2100      	movs	r1, #0
 80161ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2240      	movs	r2, #64	@ 0x40
 80161f4:	2100      	movs	r1, #0
 80161f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80161f8:	2300      	movs	r3, #0
 80161fa:	e000      	b.n	80161fe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80161fc:	2302      	movs	r3, #2
  }
}
 80161fe:	0018      	movs	r0, r3
 8016200:	46bd      	mov	sp, r7
 8016202:	b007      	add	sp, #28
 8016204:	bd90      	pop	{r4, r7, pc}
 8016206:	46c0      	nop			@ (mov r8, r8)
 8016208:	80002000 	.word	0x80002000
 801620c:	fe00e800 	.word	0xfe00e800

08016210 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016210:	b590      	push	{r4, r7, lr}
 8016212:	b089      	sub	sp, #36	@ 0x24
 8016214:	af02      	add	r7, sp, #8
 8016216:	60f8      	str	r0, [r7, #12]
 8016218:	0008      	movs	r0, r1
 801621a:	607a      	str	r2, [r7, #4]
 801621c:	0019      	movs	r1, r3
 801621e:	230a      	movs	r3, #10
 8016220:	18fb      	adds	r3, r7, r3
 8016222:	1c02      	adds	r2, r0, #0
 8016224:	801a      	strh	r2, [r3, #0]
 8016226:	2308      	movs	r3, #8
 8016228:	18fb      	adds	r3, r7, r3
 801622a:	1c0a      	adds	r2, r1, #0
 801622c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2241      	movs	r2, #65	@ 0x41
 8016232:	5c9b      	ldrb	r3, [r3, r2]
 8016234:	b2db      	uxtb	r3, r3
 8016236:	2b20      	cmp	r3, #32
 8016238:	d000      	beq.n	801623c <HAL_I2C_Master_Receive+0x2c>
 801623a:	e0e8      	b.n	801640e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	2240      	movs	r2, #64	@ 0x40
 8016240:	5c9b      	ldrb	r3, [r3, r2]
 8016242:	2b01      	cmp	r3, #1
 8016244:	d101      	bne.n	801624a <HAL_I2C_Master_Receive+0x3a>
 8016246:	2302      	movs	r3, #2
 8016248:	e0e2      	b.n	8016410 <HAL_I2C_Master_Receive+0x200>
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2240      	movs	r2, #64	@ 0x40
 801624e:	2101      	movs	r1, #1
 8016250:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016252:	f7fe fb9f 	bl	8014994 <HAL_GetTick>
 8016256:	0003      	movs	r3, r0
 8016258:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801625a:	2380      	movs	r3, #128	@ 0x80
 801625c:	0219      	lsls	r1, r3, #8
 801625e:	68f8      	ldr	r0, [r7, #12]
 8016260:	697b      	ldr	r3, [r7, #20]
 8016262:	9300      	str	r3, [sp, #0]
 8016264:	2319      	movs	r3, #25
 8016266:	2201      	movs	r2, #1
 8016268:	f002 fa2c 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 801626c:	1e03      	subs	r3, r0, #0
 801626e:	d001      	beq.n	8016274 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8016270:	2301      	movs	r3, #1
 8016272:	e0cd      	b.n	8016410 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2241      	movs	r2, #65	@ 0x41
 8016278:	2122      	movs	r1, #34	@ 0x22
 801627a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	2242      	movs	r2, #66	@ 0x42
 8016280:	2110      	movs	r1, #16
 8016282:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2200      	movs	r2, #0
 8016288:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	687a      	ldr	r2, [r7, #4]
 801628e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	2208      	movs	r2, #8
 8016294:	18ba      	adds	r2, r7, r2
 8016296:	8812      	ldrh	r2, [r2, #0]
 8016298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	2200      	movs	r2, #0
 801629e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162a4:	b29b      	uxth	r3, r3
 80162a6:	2bff      	cmp	r3, #255	@ 0xff
 80162a8:	d911      	bls.n	80162ce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	22ff      	movs	r2, #255	@ 0xff
 80162ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162b4:	b2da      	uxtb	r2, r3
 80162b6:	2380      	movs	r3, #128	@ 0x80
 80162b8:	045c      	lsls	r4, r3, #17
 80162ba:	230a      	movs	r3, #10
 80162bc:	18fb      	adds	r3, r7, r3
 80162be:	8819      	ldrh	r1, [r3, #0]
 80162c0:	68f8      	ldr	r0, [r7, #12]
 80162c2:	4b55      	ldr	r3, [pc, #340]	@ (8016418 <HAL_I2C_Master_Receive+0x208>)
 80162c4:	9300      	str	r3, [sp, #0]
 80162c6:	0023      	movs	r3, r4
 80162c8:	f002 fc4e 	bl	8018b68 <I2C_TransferConfig>
 80162cc:	e076      	b.n	80163bc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162d2:	b29a      	uxth	r2, r3
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162dc:	b2da      	uxtb	r2, r3
 80162de:	2380      	movs	r3, #128	@ 0x80
 80162e0:	049c      	lsls	r4, r3, #18
 80162e2:	230a      	movs	r3, #10
 80162e4:	18fb      	adds	r3, r7, r3
 80162e6:	8819      	ldrh	r1, [r3, #0]
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	4b4b      	ldr	r3, [pc, #300]	@ (8016418 <HAL_I2C_Master_Receive+0x208>)
 80162ec:	9300      	str	r3, [sp, #0]
 80162ee:	0023      	movs	r3, r4
 80162f0:	f002 fc3a 	bl	8018b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80162f4:	e062      	b.n	80163bc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80162f6:	697a      	ldr	r2, [r7, #20]
 80162f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	0018      	movs	r0, r3
 80162fe:	f002 fab9 	bl	8018874 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016302:	1e03      	subs	r3, r0, #0
 8016304:	d001      	beq.n	801630a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8016306:	2301      	movs	r3, #1
 8016308:	e082      	b.n	8016410 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016314:	b2d2      	uxtb	r2, r2
 8016316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801631c:	1c5a      	adds	r2, r3, #1
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016326:	3b01      	subs	r3, #1
 8016328:	b29a      	uxth	r2, r3
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016332:	b29b      	uxth	r3, r3
 8016334:	3b01      	subs	r3, #1
 8016336:	b29a      	uxth	r2, r3
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016340:	b29b      	uxth	r3, r3
 8016342:	2b00      	cmp	r3, #0
 8016344:	d03a      	beq.n	80163bc <HAL_I2C_Master_Receive+0x1ac>
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801634a:	2b00      	cmp	r3, #0
 801634c:	d136      	bne.n	80163bc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801634e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016350:	68f8      	ldr	r0, [r7, #12]
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	9300      	str	r3, [sp, #0]
 8016356:	0013      	movs	r3, r2
 8016358:	2200      	movs	r2, #0
 801635a:	2180      	movs	r1, #128	@ 0x80
 801635c:	f002 f9b2 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 8016360:	1e03      	subs	r3, r0, #0
 8016362:	d001      	beq.n	8016368 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8016364:	2301      	movs	r3, #1
 8016366:	e053      	b.n	8016410 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801636c:	b29b      	uxth	r3, r3
 801636e:	2bff      	cmp	r3, #255	@ 0xff
 8016370:	d911      	bls.n	8016396 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	22ff      	movs	r2, #255	@ 0xff
 8016376:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801637c:	b2da      	uxtb	r2, r3
 801637e:	2380      	movs	r3, #128	@ 0x80
 8016380:	045c      	lsls	r4, r3, #17
 8016382:	230a      	movs	r3, #10
 8016384:	18fb      	adds	r3, r7, r3
 8016386:	8819      	ldrh	r1, [r3, #0]
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	2300      	movs	r3, #0
 801638c:	9300      	str	r3, [sp, #0]
 801638e:	0023      	movs	r3, r4
 8016390:	f002 fbea 	bl	8018b68 <I2C_TransferConfig>
 8016394:	e012      	b.n	80163bc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801639a:	b29a      	uxth	r2, r3
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163a4:	b2da      	uxtb	r2, r3
 80163a6:	2380      	movs	r3, #128	@ 0x80
 80163a8:	049c      	lsls	r4, r3, #18
 80163aa:	230a      	movs	r3, #10
 80163ac:	18fb      	adds	r3, r7, r3
 80163ae:	8819      	ldrh	r1, [r3, #0]
 80163b0:	68f8      	ldr	r0, [r7, #12]
 80163b2:	2300      	movs	r3, #0
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	0023      	movs	r3, r4
 80163b8:	f002 fbd6 	bl	8018b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d197      	bne.n	80162f6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80163c6:	697a      	ldr	r2, [r7, #20]
 80163c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	0018      	movs	r0, r3
 80163ce:	f002 fa0d 	bl	80187ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80163d2:	1e03      	subs	r3, r0, #0
 80163d4:	d001      	beq.n	80163da <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80163d6:	2301      	movs	r3, #1
 80163d8:	e01a      	b.n	8016410 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	2220      	movs	r2, #32
 80163e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	685a      	ldr	r2, [r3, #4]
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	490b      	ldr	r1, [pc, #44]	@ (801641c <HAL_I2C_Master_Receive+0x20c>)
 80163ee:	400a      	ands	r2, r1
 80163f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	2241      	movs	r2, #65	@ 0x41
 80163f6:	2120      	movs	r1, #32
 80163f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	2242      	movs	r2, #66	@ 0x42
 80163fe:	2100      	movs	r1, #0
 8016400:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	2240      	movs	r2, #64	@ 0x40
 8016406:	2100      	movs	r1, #0
 8016408:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801640a:	2300      	movs	r3, #0
 801640c:	e000      	b.n	8016410 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801640e:	2302      	movs	r3, #2
  }
}
 8016410:	0018      	movs	r0, r3
 8016412:	46bd      	mov	sp, r7
 8016414:	b007      	add	sp, #28
 8016416:	bd90      	pop	{r4, r7, pc}
 8016418:	80002400 	.word	0x80002400
 801641c:	fe00e800 	.word	0xfe00e800

08016420 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8016420:	b5b0      	push	{r4, r5, r7, lr}
 8016422:	b088      	sub	sp, #32
 8016424:	af02      	add	r7, sp, #8
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	0008      	movs	r0, r1
 801642a:	607a      	str	r2, [r7, #4]
 801642c:	0019      	movs	r1, r3
 801642e:	230a      	movs	r3, #10
 8016430:	18fb      	adds	r3, r7, r3
 8016432:	1c02      	adds	r2, r0, #0
 8016434:	801a      	strh	r2, [r3, #0]
 8016436:	2308      	movs	r3, #8
 8016438:	18fb      	adds	r3, r7, r3
 801643a:	1c0a      	adds	r2, r1, #0
 801643c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	2241      	movs	r2, #65	@ 0x41
 8016442:	5c9b      	ldrb	r3, [r3, r2]
 8016444:	b2db      	uxtb	r3, r3
 8016446:	2b20      	cmp	r3, #32
 8016448:	d000      	beq.n	801644c <HAL_I2C_Master_Transmit_DMA+0x2c>
 801644a:	e0dd      	b.n	8016608 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	699a      	ldr	r2, [r3, #24]
 8016452:	2380      	movs	r3, #128	@ 0x80
 8016454:	021b      	lsls	r3, r3, #8
 8016456:	401a      	ands	r2, r3
 8016458:	2380      	movs	r3, #128	@ 0x80
 801645a:	021b      	lsls	r3, r3, #8
 801645c:	429a      	cmp	r2, r3
 801645e:	d101      	bne.n	8016464 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8016460:	2302      	movs	r3, #2
 8016462:	e0d2      	b.n	801660a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2240      	movs	r2, #64	@ 0x40
 8016468:	5c9b      	ldrb	r3, [r3, r2]
 801646a:	2b01      	cmp	r3, #1
 801646c:	d101      	bne.n	8016472 <HAL_I2C_Master_Transmit_DMA+0x52>
 801646e:	2302      	movs	r3, #2
 8016470:	e0cb      	b.n	801660a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2240      	movs	r2, #64	@ 0x40
 8016476:	2101      	movs	r1, #1
 8016478:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	2241      	movs	r2, #65	@ 0x41
 801647e:	2121      	movs	r1, #33	@ 0x21
 8016480:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	2242      	movs	r2, #66	@ 0x42
 8016486:	2110      	movs	r1, #16
 8016488:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	2200      	movs	r2, #0
 801648e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	687a      	ldr	r2, [r7, #4]
 8016494:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	2208      	movs	r2, #8
 801649a:	18ba      	adds	r2, r7, r2
 801649c:	8812      	ldrh	r2, [r2, #0]
 801649e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	4a5c      	ldr	r2, [pc, #368]	@ (8016614 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80164a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	4a5b      	ldr	r2, [pc, #364]	@ (8016618 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80164aa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164b0:	b29b      	uxth	r3, r3
 80164b2:	2bff      	cmp	r3, #255	@ 0xff
 80164b4:	d906      	bls.n	80164c4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	22ff      	movs	r2, #255	@ 0xff
 80164ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80164bc:	2380      	movs	r3, #128	@ 0x80
 80164be:	045b      	lsls	r3, r3, #17
 80164c0:	617b      	str	r3, [r7, #20]
 80164c2:	e007      	b.n	80164d4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164c8:	b29a      	uxth	r2, r3
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80164ce:	2380      	movs	r3, #128	@ 0x80
 80164d0:	049b      	lsls	r3, r3, #18
 80164d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d100      	bne.n	80164de <HAL_I2C_Master_Transmit_DMA+0xbe>
 80164dc:	e078      	b.n	80165d0 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d023      	beq.n	801652e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164ea:	4a4c      	ldr	r2, [pc, #304]	@ (801661c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80164ec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164f2:	4a4b      	ldr	r2, [pc, #300]	@ (8016620 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80164f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164fa:	2200      	movs	r2, #0
 80164fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016502:	2200      	movs	r2, #0
 8016504:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801650a:	6879      	ldr	r1, [r7, #4]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	3328      	adds	r3, #40	@ 0x28
 8016512:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016518:	2513      	movs	r5, #19
 801651a:	197c      	adds	r4, r7, r5
 801651c:	f7fe ff58 	bl	80153d0 <HAL_DMA_Start_IT>
 8016520:	0003      	movs	r3, r0
 8016522:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016524:	197b      	adds	r3, r7, r5
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d13d      	bne.n	80165a8 <HAL_I2C_Master_Transmit_DMA+0x188>
 801652c:	e013      	b.n	8016556 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	2241      	movs	r2, #65	@ 0x41
 8016532:	2120      	movs	r1, #32
 8016534:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2242      	movs	r2, #66	@ 0x42
 801653a:	2100      	movs	r1, #0
 801653c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016542:	2280      	movs	r2, #128	@ 0x80
 8016544:	431a      	orrs	r2, r3
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	2240      	movs	r2, #64	@ 0x40
 801654e:	2100      	movs	r1, #0
 8016550:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016552:	2301      	movs	r3, #1
 8016554:	e059      	b.n	801660a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801655a:	b2da      	uxtb	r2, r3
 801655c:	697c      	ldr	r4, [r7, #20]
 801655e:	230a      	movs	r3, #10
 8016560:	18fb      	adds	r3, r7, r3
 8016562:	8819      	ldrh	r1, [r3, #0]
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	4b2f      	ldr	r3, [pc, #188]	@ (8016624 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	0023      	movs	r3, r4
 801656c:	f002 fafc 	bl	8018b68 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016574:	b29a      	uxth	r2, r3
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801657a:	1ad3      	subs	r3, r2, r3
 801657c:	b29a      	uxth	r2, r3
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	2240      	movs	r2, #64	@ 0x40
 8016586:	2100      	movs	r1, #0
 8016588:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2110      	movs	r1, #16
 801658e:	0018      	movs	r0, r3
 8016590:	f002 fb24 	bl	8018bdc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	681a      	ldr	r2, [r3, #0]
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	2180      	movs	r1, #128	@ 0x80
 80165a0:	01c9      	lsls	r1, r1, #7
 80165a2:	430a      	orrs	r2, r1
 80165a4:	601a      	str	r2, [r3, #0]
 80165a6:	e02d      	b.n	8016604 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	2241      	movs	r2, #65	@ 0x41
 80165ac:	2120      	movs	r1, #32
 80165ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	2242      	movs	r2, #66	@ 0x42
 80165b4:	2100      	movs	r1, #0
 80165b6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165bc:	2210      	movs	r2, #16
 80165be:	431a      	orrs	r2, r3
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2240      	movs	r2, #64	@ 0x40
 80165c8:	2100      	movs	r1, #0
 80165ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80165cc:	2301      	movs	r3, #1
 80165ce:	e01c      	b.n	801660a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	4a15      	ldr	r2, [pc, #84]	@ (8016628 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80165d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165da:	b2da      	uxtb	r2, r3
 80165dc:	2380      	movs	r3, #128	@ 0x80
 80165de:	049c      	lsls	r4, r3, #18
 80165e0:	230a      	movs	r3, #10
 80165e2:	18fb      	adds	r3, r7, r3
 80165e4:	8819      	ldrh	r1, [r3, #0]
 80165e6:	68f8      	ldr	r0, [r7, #12]
 80165e8:	4b0e      	ldr	r3, [pc, #56]	@ (8016624 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80165ea:	9300      	str	r3, [sp, #0]
 80165ec:	0023      	movs	r3, r4
 80165ee:	f002 fabb 	bl	8018b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	2240      	movs	r2, #64	@ 0x40
 80165f6:	2100      	movs	r1, #0
 80165f8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	2101      	movs	r1, #1
 80165fe:	0018      	movs	r0, r3
 8016600:	f002 faec 	bl	8018bdc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016604:	2300      	movs	r3, #0
 8016606:	e000      	b.n	801660a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016608:	2302      	movs	r3, #2
  }
}
 801660a:	0018      	movs	r0, r3
 801660c:	46bd      	mov	sp, r7
 801660e:	b006      	add	sp, #24
 8016610:	bdb0      	pop	{r4, r5, r7, pc}
 8016612:	46c0      	nop			@ (mov r8, r8)
 8016614:	ffff0000 	.word	0xffff0000
 8016618:	08017351 	.word	0x08017351
 801661c:	08018515 	.word	0x08018515
 8016620:	08018655 	.word	0x08018655
 8016624:	80002000 	.word	0x80002000
 8016628:	08016ea5 	.word	0x08016ea5

0801662c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 801662c:	b5b0      	push	{r4, r5, r7, lr}
 801662e:	b088      	sub	sp, #32
 8016630:	af02      	add	r7, sp, #8
 8016632:	60f8      	str	r0, [r7, #12]
 8016634:	0008      	movs	r0, r1
 8016636:	607a      	str	r2, [r7, #4]
 8016638:	0019      	movs	r1, r3
 801663a:	230a      	movs	r3, #10
 801663c:	18fb      	adds	r3, r7, r3
 801663e:	1c02      	adds	r2, r0, #0
 8016640:	801a      	strh	r2, [r3, #0]
 8016642:	2308      	movs	r3, #8
 8016644:	18fb      	adds	r3, r7, r3
 8016646:	1c0a      	adds	r2, r1, #0
 8016648:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	2241      	movs	r2, #65	@ 0x41
 801664e:	5c9b      	ldrb	r3, [r3, r2]
 8016650:	b2db      	uxtb	r3, r3
 8016652:	2b20      	cmp	r3, #32
 8016654:	d000      	beq.n	8016658 <HAL_I2C_Master_Receive_DMA+0x2c>
 8016656:	e0dd      	b.n	8016814 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	699a      	ldr	r2, [r3, #24]
 801665e:	2380      	movs	r3, #128	@ 0x80
 8016660:	021b      	lsls	r3, r3, #8
 8016662:	401a      	ands	r2, r3
 8016664:	2380      	movs	r3, #128	@ 0x80
 8016666:	021b      	lsls	r3, r3, #8
 8016668:	429a      	cmp	r2, r3
 801666a:	d101      	bne.n	8016670 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 801666c:	2302      	movs	r3, #2
 801666e:	e0d2      	b.n	8016816 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	2240      	movs	r2, #64	@ 0x40
 8016674:	5c9b      	ldrb	r3, [r3, r2]
 8016676:	2b01      	cmp	r3, #1
 8016678:	d101      	bne.n	801667e <HAL_I2C_Master_Receive_DMA+0x52>
 801667a:	2302      	movs	r3, #2
 801667c:	e0cb      	b.n	8016816 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	2240      	movs	r2, #64	@ 0x40
 8016682:	2101      	movs	r1, #1
 8016684:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2241      	movs	r2, #65	@ 0x41
 801668a:	2122      	movs	r1, #34	@ 0x22
 801668c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	2242      	movs	r2, #66	@ 0x42
 8016692:	2110      	movs	r1, #16
 8016694:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	2200      	movs	r2, #0
 801669a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	2208      	movs	r2, #8
 80166a6:	18ba      	adds	r2, r7, r2
 80166a8:	8812      	ldrh	r2, [r2, #0]
 80166aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	4a5c      	ldr	r2, [pc, #368]	@ (8016820 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80166b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	4a5b      	ldr	r2, [pc, #364]	@ (8016824 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80166b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166bc:	b29b      	uxth	r3, r3
 80166be:	2bff      	cmp	r3, #255	@ 0xff
 80166c0:	d906      	bls.n	80166d0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	22ff      	movs	r2, #255	@ 0xff
 80166c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80166c8:	2380      	movs	r3, #128	@ 0x80
 80166ca:	045b      	lsls	r3, r3, #17
 80166cc:	617b      	str	r3, [r7, #20]
 80166ce:	e007      	b.n	80166e0 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166d4:	b29a      	uxth	r2, r3
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80166da:	2380      	movs	r3, #128	@ 0x80
 80166dc:	049b      	lsls	r3, r3, #18
 80166de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d100      	bne.n	80166ea <HAL_I2C_Master_Receive_DMA+0xbe>
 80166e8:	e078      	b.n	80167dc <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d023      	beq.n	801673a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166f6:	4a4c      	ldr	r2, [pc, #304]	@ (8016828 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80166f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166fe:	4a4b      	ldr	r2, [pc, #300]	@ (801682c <HAL_I2C_Master_Receive_DMA+0x200>)
 8016700:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016706:	2200      	movs	r2, #0
 8016708:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801670e:	2200      	movs	r2, #0
 8016710:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	3324      	adds	r3, #36	@ 0x24
 801671c:	0019      	movs	r1, r3
 801671e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016724:	2513      	movs	r5, #19
 8016726:	197c      	adds	r4, r7, r5
 8016728:	f7fe fe52 	bl	80153d0 <HAL_DMA_Start_IT>
 801672c:	0003      	movs	r3, r0
 801672e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016730:	197b      	adds	r3, r7, r5
 8016732:	781b      	ldrb	r3, [r3, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d13d      	bne.n	80167b4 <HAL_I2C_Master_Receive_DMA+0x188>
 8016738:	e013      	b.n	8016762 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	2241      	movs	r2, #65	@ 0x41
 801673e:	2120      	movs	r1, #32
 8016740:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	2242      	movs	r2, #66	@ 0x42
 8016746:	2100      	movs	r1, #0
 8016748:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801674e:	2280      	movs	r2, #128	@ 0x80
 8016750:	431a      	orrs	r2, r3
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	2240      	movs	r2, #64	@ 0x40
 801675a:	2100      	movs	r1, #0
 801675c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801675e:	2301      	movs	r3, #1
 8016760:	e059      	b.n	8016816 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016766:	b2da      	uxtb	r2, r3
 8016768:	697c      	ldr	r4, [r7, #20]
 801676a:	230a      	movs	r3, #10
 801676c:	18fb      	adds	r3, r7, r3
 801676e:	8819      	ldrh	r1, [r3, #0]
 8016770:	68f8      	ldr	r0, [r7, #12]
 8016772:	4b2f      	ldr	r3, [pc, #188]	@ (8016830 <HAL_I2C_Master_Receive_DMA+0x204>)
 8016774:	9300      	str	r3, [sp, #0]
 8016776:	0023      	movs	r3, r4
 8016778:	f002 f9f6 	bl	8018b68 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016780:	b29a      	uxth	r2, r3
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016786:	1ad3      	subs	r3, r2, r3
 8016788:	b29a      	uxth	r2, r3
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	2240      	movs	r2, #64	@ 0x40
 8016792:	2100      	movs	r1, #0
 8016794:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	2110      	movs	r1, #16
 801679a:	0018      	movs	r0, r3
 801679c:	f002 fa1e 	bl	8018bdc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	2180      	movs	r1, #128	@ 0x80
 80167ac:	0209      	lsls	r1, r1, #8
 80167ae:	430a      	orrs	r2, r1
 80167b0:	601a      	str	r2, [r3, #0]
 80167b2:	e02d      	b.n	8016810 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2241      	movs	r2, #65	@ 0x41
 80167b8:	2120      	movs	r1, #32
 80167ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2242      	movs	r2, #66	@ 0x42
 80167c0:	2100      	movs	r1, #0
 80167c2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167c8:	2210      	movs	r2, #16
 80167ca:	431a      	orrs	r2, r3
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	2240      	movs	r2, #64	@ 0x40
 80167d4:	2100      	movs	r1, #0
 80167d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80167d8:	2301      	movs	r3, #1
 80167da:	e01c      	b.n	8016816 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	4a15      	ldr	r2, [pc, #84]	@ (8016834 <HAL_I2C_Master_Receive_DMA+0x208>)
 80167e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167e6:	b2da      	uxtb	r2, r3
 80167e8:	2380      	movs	r3, #128	@ 0x80
 80167ea:	049c      	lsls	r4, r3, #18
 80167ec:	230a      	movs	r3, #10
 80167ee:	18fb      	adds	r3, r7, r3
 80167f0:	8819      	ldrh	r1, [r3, #0]
 80167f2:	68f8      	ldr	r0, [r7, #12]
 80167f4:	4b0e      	ldr	r3, [pc, #56]	@ (8016830 <HAL_I2C_Master_Receive_DMA+0x204>)
 80167f6:	9300      	str	r3, [sp, #0]
 80167f8:	0023      	movs	r3, r4
 80167fa:	f002 f9b5 	bl	8018b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	2240      	movs	r2, #64	@ 0x40
 8016802:	2100      	movs	r1, #0
 8016804:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2101      	movs	r1, #1
 801680a:	0018      	movs	r0, r3
 801680c:	f002 f9e6 	bl	8018bdc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016810:	2300      	movs	r3, #0
 8016812:	e000      	b.n	8016816 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016814:	2302      	movs	r3, #2
  }
}
 8016816:	0018      	movs	r0, r3
 8016818:	46bd      	mov	sp, r7
 801681a:	b006      	add	sp, #24
 801681c:	bdb0      	pop	{r4, r5, r7, pc}
 801681e:	46c0      	nop			@ (mov r8, r8)
 8016820:	ffff0000 	.word	0xffff0000
 8016824:	08017351 	.word	0x08017351
 8016828:	080185b5 	.word	0x080185b5
 801682c:	08018655 	.word	0x08018655
 8016830:	80002400 	.word	0x80002400
 8016834:	08016ea5 	.word	0x08016ea5

08016838 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016838:	b590      	push	{r4, r7, lr}
 801683a:	b089      	sub	sp, #36	@ 0x24
 801683c:	af02      	add	r7, sp, #8
 801683e:	60f8      	str	r0, [r7, #12]
 8016840:	000c      	movs	r4, r1
 8016842:	0010      	movs	r0, r2
 8016844:	0019      	movs	r1, r3
 8016846:	230a      	movs	r3, #10
 8016848:	18fb      	adds	r3, r7, r3
 801684a:	1c22      	adds	r2, r4, #0
 801684c:	801a      	strh	r2, [r3, #0]
 801684e:	2308      	movs	r3, #8
 8016850:	18fb      	adds	r3, r7, r3
 8016852:	1c02      	adds	r2, r0, #0
 8016854:	801a      	strh	r2, [r3, #0]
 8016856:	1dbb      	adds	r3, r7, #6
 8016858:	1c0a      	adds	r2, r1, #0
 801685a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	2241      	movs	r2, #65	@ 0x41
 8016860:	5c9b      	ldrb	r3, [r3, r2]
 8016862:	b2db      	uxtb	r3, r3
 8016864:	2b20      	cmp	r3, #32
 8016866:	d000      	beq.n	801686a <HAL_I2C_Mem_Write+0x32>
 8016868:	e10c      	b.n	8016a84 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 801686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801686c:	2b00      	cmp	r3, #0
 801686e:	d004      	beq.n	801687a <HAL_I2C_Mem_Write+0x42>
 8016870:	232c      	movs	r3, #44	@ 0x2c
 8016872:	18fb      	adds	r3, r7, r3
 8016874:	881b      	ldrh	r3, [r3, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d105      	bne.n	8016886 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	2280      	movs	r2, #128	@ 0x80
 801687e:	0092      	lsls	r2, r2, #2
 8016880:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016882:	2301      	movs	r3, #1
 8016884:	e0ff      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	2240      	movs	r2, #64	@ 0x40
 801688a:	5c9b      	ldrb	r3, [r3, r2]
 801688c:	2b01      	cmp	r3, #1
 801688e:	d101      	bne.n	8016894 <HAL_I2C_Mem_Write+0x5c>
 8016890:	2302      	movs	r3, #2
 8016892:	e0f8      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	2240      	movs	r2, #64	@ 0x40
 8016898:	2101      	movs	r1, #1
 801689a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801689c:	f7fe f87a 	bl	8014994 <HAL_GetTick>
 80168a0:	0003      	movs	r3, r0
 80168a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80168a4:	2380      	movs	r3, #128	@ 0x80
 80168a6:	0219      	lsls	r1, r3, #8
 80168a8:	68f8      	ldr	r0, [r7, #12]
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	9300      	str	r3, [sp, #0]
 80168ae:	2319      	movs	r3, #25
 80168b0:	2201      	movs	r2, #1
 80168b2:	f001 ff07 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 80168b6:	1e03      	subs	r3, r0, #0
 80168b8:	d001      	beq.n	80168be <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80168ba:	2301      	movs	r3, #1
 80168bc:	e0e3      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2241      	movs	r2, #65	@ 0x41
 80168c2:	2121      	movs	r1, #33	@ 0x21
 80168c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2242      	movs	r2, #66	@ 0x42
 80168ca:	2140      	movs	r1, #64	@ 0x40
 80168cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2200      	movs	r2, #0
 80168d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80168d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	222c      	movs	r2, #44	@ 0x2c
 80168de:	18ba      	adds	r2, r7, r2
 80168e0:	8812      	ldrh	r2, [r2, #0]
 80168e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	2200      	movs	r2, #0
 80168e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80168ea:	1dbb      	adds	r3, r7, #6
 80168ec:	881c      	ldrh	r4, [r3, #0]
 80168ee:	2308      	movs	r3, #8
 80168f0:	18fb      	adds	r3, r7, r3
 80168f2:	881a      	ldrh	r2, [r3, #0]
 80168f4:	230a      	movs	r3, #10
 80168f6:	18fb      	adds	r3, r7, r3
 80168f8:	8819      	ldrh	r1, [r3, #0]
 80168fa:	68f8      	ldr	r0, [r7, #12]
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	9301      	str	r3, [sp, #4]
 8016900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	0023      	movs	r3, r4
 8016906:	f001 f855 	bl	80179b4 <I2C_RequestMemoryWrite>
 801690a:	1e03      	subs	r3, r0, #0
 801690c:	d005      	beq.n	801691a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	2240      	movs	r2, #64	@ 0x40
 8016912:	2100      	movs	r1, #0
 8016914:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016916:	2301      	movs	r3, #1
 8016918:	e0b5      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801691e:	b29b      	uxth	r3, r3
 8016920:	2bff      	cmp	r3, #255	@ 0xff
 8016922:	d911      	bls.n	8016948 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	22ff      	movs	r2, #255	@ 0xff
 8016928:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801692e:	b2da      	uxtb	r2, r3
 8016930:	2380      	movs	r3, #128	@ 0x80
 8016932:	045c      	lsls	r4, r3, #17
 8016934:	230a      	movs	r3, #10
 8016936:	18fb      	adds	r3, r7, r3
 8016938:	8819      	ldrh	r1, [r3, #0]
 801693a:	68f8      	ldr	r0, [r7, #12]
 801693c:	2300      	movs	r3, #0
 801693e:	9300      	str	r3, [sp, #0]
 8016940:	0023      	movs	r3, r4
 8016942:	f002 f911 	bl	8018b68 <I2C_TransferConfig>
 8016946:	e012      	b.n	801696e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801694c:	b29a      	uxth	r2, r3
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016956:	b2da      	uxtb	r2, r3
 8016958:	2380      	movs	r3, #128	@ 0x80
 801695a:	049c      	lsls	r4, r3, #18
 801695c:	230a      	movs	r3, #10
 801695e:	18fb      	adds	r3, r7, r3
 8016960:	8819      	ldrh	r1, [r3, #0]
 8016962:	68f8      	ldr	r0, [r7, #12]
 8016964:	2300      	movs	r3, #0
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	0023      	movs	r3, r4
 801696a:	f002 f8fd 	bl	8018b68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801696e:	697a      	ldr	r2, [r7, #20]
 8016970:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	0018      	movs	r0, r3
 8016976:	f001 fef3 	bl	8018760 <I2C_WaitOnTXISFlagUntilTimeout>
 801697a:	1e03      	subs	r3, r0, #0
 801697c:	d001      	beq.n	8016982 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 801697e:	2301      	movs	r3, #1
 8016980:	e081      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016986:	781a      	ldrb	r2, [r3, #0]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016992:	1c5a      	adds	r2, r3, #1
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801699c:	b29b      	uxth	r3, r3
 801699e:	3b01      	subs	r3, #1
 80169a0:	b29a      	uxth	r2, r3
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169aa:	3b01      	subs	r3, #1
 80169ac:	b29a      	uxth	r2, r3
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d03a      	beq.n	8016a32 <HAL_I2C_Mem_Write+0x1fa>
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d136      	bne.n	8016a32 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80169c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80169c6:	68f8      	ldr	r0, [r7, #12]
 80169c8:	697b      	ldr	r3, [r7, #20]
 80169ca:	9300      	str	r3, [sp, #0]
 80169cc:	0013      	movs	r3, r2
 80169ce:	2200      	movs	r2, #0
 80169d0:	2180      	movs	r1, #128	@ 0x80
 80169d2:	f001 fe77 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 80169d6:	1e03      	subs	r3, r0, #0
 80169d8:	d001      	beq.n	80169de <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80169da:	2301      	movs	r3, #1
 80169dc:	e053      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	2bff      	cmp	r3, #255	@ 0xff
 80169e6:	d911      	bls.n	8016a0c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	22ff      	movs	r2, #255	@ 0xff
 80169ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169f2:	b2da      	uxtb	r2, r3
 80169f4:	2380      	movs	r3, #128	@ 0x80
 80169f6:	045c      	lsls	r4, r3, #17
 80169f8:	230a      	movs	r3, #10
 80169fa:	18fb      	adds	r3, r7, r3
 80169fc:	8819      	ldrh	r1, [r3, #0]
 80169fe:	68f8      	ldr	r0, [r7, #12]
 8016a00:	2300      	movs	r3, #0
 8016a02:	9300      	str	r3, [sp, #0]
 8016a04:	0023      	movs	r3, r4
 8016a06:	f002 f8af 	bl	8018b68 <I2C_TransferConfig>
 8016a0a:	e012      	b.n	8016a32 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a1a:	b2da      	uxtb	r2, r3
 8016a1c:	2380      	movs	r3, #128	@ 0x80
 8016a1e:	049c      	lsls	r4, r3, #18
 8016a20:	230a      	movs	r3, #10
 8016a22:	18fb      	adds	r3, r7, r3
 8016a24:	8819      	ldrh	r1, [r3, #0]
 8016a26:	68f8      	ldr	r0, [r7, #12]
 8016a28:	2300      	movs	r3, #0
 8016a2a:	9300      	str	r3, [sp, #0]
 8016a2c:	0023      	movs	r3, r4
 8016a2e:	f002 f89b 	bl	8018b68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a36:	b29b      	uxth	r3, r3
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d198      	bne.n	801696e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016a3c:	697a      	ldr	r2, [r7, #20]
 8016a3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	0018      	movs	r0, r3
 8016a44:	f001 fed2 	bl	80187ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8016a48:	1e03      	subs	r3, r0, #0
 8016a4a:	d001      	beq.n	8016a50 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8016a4c:	2301      	movs	r3, #1
 8016a4e:	e01a      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	2220      	movs	r2, #32
 8016a56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	685a      	ldr	r2, [r3, #4]
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	490b      	ldr	r1, [pc, #44]	@ (8016a90 <HAL_I2C_Mem_Write+0x258>)
 8016a64:	400a      	ands	r2, r1
 8016a66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2241      	movs	r2, #65	@ 0x41
 8016a6c:	2120      	movs	r1, #32
 8016a6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	2242      	movs	r2, #66	@ 0x42
 8016a74:	2100      	movs	r1, #0
 8016a76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2240      	movs	r2, #64	@ 0x40
 8016a7c:	2100      	movs	r1, #0
 8016a7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016a80:	2300      	movs	r3, #0
 8016a82:	e000      	b.n	8016a86 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8016a84:	2302      	movs	r3, #2
  }
}
 8016a86:	0018      	movs	r0, r3
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	b007      	add	sp, #28
 8016a8c:	bd90      	pop	{r4, r7, pc}
 8016a8e:	46c0      	nop			@ (mov r8, r8)
 8016a90:	fe00e800 	.word	0xfe00e800

08016a94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a94:	b590      	push	{r4, r7, lr}
 8016a96:	b089      	sub	sp, #36	@ 0x24
 8016a98:	af02      	add	r7, sp, #8
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	000c      	movs	r4, r1
 8016a9e:	0010      	movs	r0, r2
 8016aa0:	0019      	movs	r1, r3
 8016aa2:	230a      	movs	r3, #10
 8016aa4:	18fb      	adds	r3, r7, r3
 8016aa6:	1c22      	adds	r2, r4, #0
 8016aa8:	801a      	strh	r2, [r3, #0]
 8016aaa:	2308      	movs	r3, #8
 8016aac:	18fb      	adds	r3, r7, r3
 8016aae:	1c02      	adds	r2, r0, #0
 8016ab0:	801a      	strh	r2, [r3, #0]
 8016ab2:	1dbb      	adds	r3, r7, #6
 8016ab4:	1c0a      	adds	r2, r1, #0
 8016ab6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	2241      	movs	r2, #65	@ 0x41
 8016abc:	5c9b      	ldrb	r3, [r3, r2]
 8016abe:	b2db      	uxtb	r3, r3
 8016ac0:	2b20      	cmp	r3, #32
 8016ac2:	d000      	beq.n	8016ac6 <HAL_I2C_Mem_Read+0x32>
 8016ac4:	e110      	b.n	8016ce8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d004      	beq.n	8016ad6 <HAL_I2C_Mem_Read+0x42>
 8016acc:	232c      	movs	r3, #44	@ 0x2c
 8016ace:	18fb      	adds	r3, r7, r3
 8016ad0:	881b      	ldrh	r3, [r3, #0]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d105      	bne.n	8016ae2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	2280      	movs	r2, #128	@ 0x80
 8016ada:	0092      	lsls	r2, r2, #2
 8016adc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016ade:	2301      	movs	r3, #1
 8016ae0:	e103      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	2240      	movs	r2, #64	@ 0x40
 8016ae6:	5c9b      	ldrb	r3, [r3, r2]
 8016ae8:	2b01      	cmp	r3, #1
 8016aea:	d101      	bne.n	8016af0 <HAL_I2C_Mem_Read+0x5c>
 8016aec:	2302      	movs	r3, #2
 8016aee:	e0fc      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	2240      	movs	r2, #64	@ 0x40
 8016af4:	2101      	movs	r1, #1
 8016af6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016af8:	f7fd ff4c 	bl	8014994 <HAL_GetTick>
 8016afc:	0003      	movs	r3, r0
 8016afe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016b00:	2380      	movs	r3, #128	@ 0x80
 8016b02:	0219      	lsls	r1, r3, #8
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	9300      	str	r3, [sp, #0]
 8016b0a:	2319      	movs	r3, #25
 8016b0c:	2201      	movs	r2, #1
 8016b0e:	f001 fdd9 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 8016b12:	1e03      	subs	r3, r0, #0
 8016b14:	d001      	beq.n	8016b1a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016b16:	2301      	movs	r3, #1
 8016b18:	e0e7      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2241      	movs	r2, #65	@ 0x41
 8016b1e:	2122      	movs	r1, #34	@ 0x22
 8016b20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	2242      	movs	r2, #66	@ 0x42
 8016b26:	2140      	movs	r1, #64	@ 0x40
 8016b28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	222c      	movs	r2, #44	@ 0x2c
 8016b3a:	18ba      	adds	r2, r7, r2
 8016b3c:	8812      	ldrh	r2, [r2, #0]
 8016b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	2200      	movs	r2, #0
 8016b44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016b46:	1dbb      	adds	r3, r7, #6
 8016b48:	881c      	ldrh	r4, [r3, #0]
 8016b4a:	2308      	movs	r3, #8
 8016b4c:	18fb      	adds	r3, r7, r3
 8016b4e:	881a      	ldrh	r2, [r3, #0]
 8016b50:	230a      	movs	r3, #10
 8016b52:	18fb      	adds	r3, r7, r3
 8016b54:	8819      	ldrh	r1, [r3, #0]
 8016b56:	68f8      	ldr	r0, [r7, #12]
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	9301      	str	r3, [sp, #4]
 8016b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	0023      	movs	r3, r4
 8016b62:	f000 ff8b 	bl	8017a7c <I2C_RequestMemoryRead>
 8016b66:	1e03      	subs	r3, r0, #0
 8016b68:	d005      	beq.n	8016b76 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	2240      	movs	r2, #64	@ 0x40
 8016b6e:	2100      	movs	r1, #0
 8016b70:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016b72:	2301      	movs	r3, #1
 8016b74:	e0b9      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b7a:	b29b      	uxth	r3, r3
 8016b7c:	2bff      	cmp	r3, #255	@ 0xff
 8016b7e:	d911      	bls.n	8016ba4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	22ff      	movs	r2, #255	@ 0xff
 8016b84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b8a:	b2da      	uxtb	r2, r3
 8016b8c:	2380      	movs	r3, #128	@ 0x80
 8016b8e:	045c      	lsls	r4, r3, #17
 8016b90:	230a      	movs	r3, #10
 8016b92:	18fb      	adds	r3, r7, r3
 8016b94:	8819      	ldrh	r1, [r3, #0]
 8016b96:	68f8      	ldr	r0, [r7, #12]
 8016b98:	4b56      	ldr	r3, [pc, #344]	@ (8016cf4 <HAL_I2C_Mem_Read+0x260>)
 8016b9a:	9300      	str	r3, [sp, #0]
 8016b9c:	0023      	movs	r3, r4
 8016b9e:	f001 ffe3 	bl	8018b68 <I2C_TransferConfig>
 8016ba2:	e012      	b.n	8016bca <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bb2:	b2da      	uxtb	r2, r3
 8016bb4:	2380      	movs	r3, #128	@ 0x80
 8016bb6:	049c      	lsls	r4, r3, #18
 8016bb8:	230a      	movs	r3, #10
 8016bba:	18fb      	adds	r3, r7, r3
 8016bbc:	8819      	ldrh	r1, [r3, #0]
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8016cf4 <HAL_I2C_Mem_Read+0x260>)
 8016bc2:	9300      	str	r3, [sp, #0]
 8016bc4:	0023      	movs	r3, r4
 8016bc6:	f001 ffcf 	bl	8018b68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	9300      	str	r3, [sp, #0]
 8016bd2:	0013      	movs	r3, r2
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	2104      	movs	r1, #4
 8016bd8:	f001 fd74 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 8016bdc:	1e03      	subs	r3, r0, #0
 8016bde:	d001      	beq.n	8016be4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016be0:	2301      	movs	r3, #1
 8016be2:	e082      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bee:	b2d2      	uxtb	r2, r2
 8016bf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bf6:	1c5a      	adds	r2, r3, #1
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c00:	3b01      	subs	r3, #1
 8016c02:	b29a      	uxth	r2, r3
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c0c:	b29b      	uxth	r3, r3
 8016c0e:	3b01      	subs	r3, #1
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d03a      	beq.n	8016c96 <HAL_I2C_Mem_Read+0x202>
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d136      	bne.n	8016c96 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c2a:	68f8      	ldr	r0, [r7, #12]
 8016c2c:	697b      	ldr	r3, [r7, #20]
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	0013      	movs	r3, r2
 8016c32:	2200      	movs	r2, #0
 8016c34:	2180      	movs	r1, #128	@ 0x80
 8016c36:	f001 fd45 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 8016c3a:	1e03      	subs	r3, r0, #0
 8016c3c:	d001      	beq.n	8016c42 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	e053      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c46:	b29b      	uxth	r3, r3
 8016c48:	2bff      	cmp	r3, #255	@ 0xff
 8016c4a:	d911      	bls.n	8016c70 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	22ff      	movs	r2, #255	@ 0xff
 8016c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c56:	b2da      	uxtb	r2, r3
 8016c58:	2380      	movs	r3, #128	@ 0x80
 8016c5a:	045c      	lsls	r4, r3, #17
 8016c5c:	230a      	movs	r3, #10
 8016c5e:	18fb      	adds	r3, r7, r3
 8016c60:	8819      	ldrh	r1, [r3, #0]
 8016c62:	68f8      	ldr	r0, [r7, #12]
 8016c64:	2300      	movs	r3, #0
 8016c66:	9300      	str	r3, [sp, #0]
 8016c68:	0023      	movs	r3, r4
 8016c6a:	f001 ff7d 	bl	8018b68 <I2C_TransferConfig>
 8016c6e:	e012      	b.n	8016c96 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c74:	b29a      	uxth	r2, r3
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c7e:	b2da      	uxtb	r2, r3
 8016c80:	2380      	movs	r3, #128	@ 0x80
 8016c82:	049c      	lsls	r4, r3, #18
 8016c84:	230a      	movs	r3, #10
 8016c86:	18fb      	adds	r3, r7, r3
 8016c88:	8819      	ldrh	r1, [r3, #0]
 8016c8a:	68f8      	ldr	r0, [r7, #12]
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	0023      	movs	r3, r4
 8016c92:	f001 ff69 	bl	8018b68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c9a:	b29b      	uxth	r3, r3
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d194      	bne.n	8016bca <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016ca0:	697a      	ldr	r2, [r7, #20]
 8016ca2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	0018      	movs	r0, r3
 8016ca8:	f001 fda0 	bl	80187ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8016cac:	1e03      	subs	r3, r0, #0
 8016cae:	d001      	beq.n	8016cb4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	e01a      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2220      	movs	r2, #32
 8016cba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	685a      	ldr	r2, [r3, #4]
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	490c      	ldr	r1, [pc, #48]	@ (8016cf8 <HAL_I2C_Mem_Read+0x264>)
 8016cc8:	400a      	ands	r2, r1
 8016cca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	2241      	movs	r2, #65	@ 0x41
 8016cd0:	2120      	movs	r1, #32
 8016cd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	2242      	movs	r2, #66	@ 0x42
 8016cd8:	2100      	movs	r1, #0
 8016cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2240      	movs	r2, #64	@ 0x40
 8016ce0:	2100      	movs	r1, #0
 8016ce2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	e000      	b.n	8016cea <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016ce8:	2302      	movs	r3, #2
  }
}
 8016cea:	0018      	movs	r0, r3
 8016cec:	46bd      	mov	sp, r7
 8016cee:	b007      	add	sp, #28
 8016cf0:	bd90      	pop	{r4, r7, pc}
 8016cf2:	46c0      	nop			@ (mov r8, r8)
 8016cf4:	80002400 	.word	0x80002400
 8016cf8:	fe00e800 	.word	0xfe00e800

08016cfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	699b      	ldr	r3, [r3, #24]
 8016d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d005      	beq.n	8016d28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d20:	68ba      	ldr	r2, [r7, #8]
 8016d22:	68f9      	ldr	r1, [r7, #12]
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	4798      	blx	r3
  }
}
 8016d28:	46c0      	nop			@ (mov r8, r8)
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	b004      	add	sp, #16
 8016d2e:	bd80      	pop	{r7, pc}

08016d30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b086      	sub	sp, #24
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	699b      	ldr	r3, [r3, #24]
 8016d3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016d48:	697b      	ldr	r3, [r7, #20]
 8016d4a:	0a1b      	lsrs	r3, r3, #8
 8016d4c:	001a      	movs	r2, r3
 8016d4e:	2301      	movs	r3, #1
 8016d50:	4013      	ands	r3, r2
 8016d52:	d010      	beq.n	8016d76 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	09db      	lsrs	r3, r3, #7
 8016d58:	001a      	movs	r2, r3
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016d5e:	d00a      	beq.n	8016d76 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d64:	2201      	movs	r2, #1
 8016d66:	431a      	orrs	r2, r3
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	2280      	movs	r2, #128	@ 0x80
 8016d72:	0052      	lsls	r2, r2, #1
 8016d74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	0a9b      	lsrs	r3, r3, #10
 8016d7a:	001a      	movs	r2, r3
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	4013      	ands	r3, r2
 8016d80:	d010      	beq.n	8016da4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	09db      	lsrs	r3, r3, #7
 8016d86:	001a      	movs	r2, r3
 8016d88:	2301      	movs	r3, #1
 8016d8a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d8c:	d00a      	beq.n	8016da4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d92:	2208      	movs	r2, #8
 8016d94:	431a      	orrs	r2, r3
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	2280      	movs	r2, #128	@ 0x80
 8016da0:	00d2      	lsls	r2, r2, #3
 8016da2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016da4:	697b      	ldr	r3, [r7, #20]
 8016da6:	0a5b      	lsrs	r3, r3, #9
 8016da8:	001a      	movs	r2, r3
 8016daa:	2301      	movs	r3, #1
 8016dac:	4013      	ands	r3, r2
 8016dae:	d010      	beq.n	8016dd2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016db0:	693b      	ldr	r3, [r7, #16]
 8016db2:	09db      	lsrs	r3, r3, #7
 8016db4:	001a      	movs	r2, r3
 8016db6:	2301      	movs	r3, #1
 8016db8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016dba:	d00a      	beq.n	8016dd2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016dc0:	2202      	movs	r2, #2
 8016dc2:	431a      	orrs	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	2280      	movs	r2, #128	@ 0x80
 8016dce:	0092      	lsls	r2, r2, #2
 8016dd0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016dd6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	220b      	movs	r2, #11
 8016ddc:	4013      	ands	r3, r2
 8016dde:	d005      	beq.n	8016dec <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016de0:	68fa      	ldr	r2, [r7, #12]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	0011      	movs	r1, r2
 8016de6:	0018      	movs	r0, r3
 8016de8:	f001 fa46 	bl	8018278 <I2C_ITError>
  }
}
 8016dec:	46c0      	nop			@ (mov r8, r8)
 8016dee:	46bd      	mov	sp, r7
 8016df0:	b006      	add	sp, #24
 8016df2:	bd80      	pop	{r7, pc}

08016df4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016dfc:	46c0      	nop			@ (mov r8, r8)
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	b002      	add	sp, #8
 8016e02:	bd80      	pop	{r7, pc}

08016e04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016e0c:	46c0      	nop			@ (mov r8, r8)
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	b002      	add	sp, #8
 8016e12:	bd80      	pop	{r7, pc}

08016e14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016e1c:	46c0      	nop			@ (mov r8, r8)
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	b002      	add	sp, #8
 8016e22:	bd80      	pop	{r7, pc}

08016e24 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b082      	sub	sp, #8
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016e2c:	46c0      	nop			@ (mov r8, r8)
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	b002      	add	sp, #8
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	0008      	movs	r0, r1
 8016e3e:	0011      	movs	r1, r2
 8016e40:	1cfb      	adds	r3, r7, #3
 8016e42:	1c02      	adds	r2, r0, #0
 8016e44:	701a      	strb	r2, [r3, #0]
 8016e46:	003b      	movs	r3, r7
 8016e48:	1c0a      	adds	r2, r1, #0
 8016e4a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016e4c:	46c0      	nop			@ (mov r8, r8)
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	b002      	add	sp, #8
 8016e52:	bd80      	pop	{r7, pc}

08016e54 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b082      	sub	sp, #8
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016e5c:	46c0      	nop			@ (mov r8, r8)
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	b002      	add	sp, #8
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b082      	sub	sp, #8
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016e6c:	46c0      	nop			@ (mov r8, r8)
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	b002      	add	sp, #8
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016e7c:	46c0      	nop			@ (mov r8, r8)
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	b002      	add	sp, #8
 8016e82:	bd80      	pop	{r7, pc}

08016e84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b082      	sub	sp, #8
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016e8c:	46c0      	nop			@ (mov r8, r8)
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	b002      	add	sp, #8
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016e9c:	46c0      	nop			@ (mov r8, r8)
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	b002      	add	sp, #8
 8016ea2:	bd80      	pop	{r7, pc}

08016ea4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016ea4:	b590      	push	{r4, r7, lr}
 8016ea6:	b089      	sub	sp, #36	@ 0x24
 8016ea8:	af02      	add	r7, sp, #8
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	60b9      	str	r1, [r7, #8]
 8016eae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	2240      	movs	r2, #64	@ 0x40
 8016eb8:	5c9b      	ldrb	r3, [r3, r2]
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d101      	bne.n	8016ec2 <I2C_Master_ISR_IT+0x1e>
 8016ebe:	2302      	movs	r3, #2
 8016ec0:	e12b      	b.n	801711a <I2C_Master_ISR_IT+0x276>
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	2240      	movs	r2, #64	@ 0x40
 8016ec6:	2101      	movs	r1, #1
 8016ec8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016eca:	697b      	ldr	r3, [r7, #20]
 8016ecc:	091b      	lsrs	r3, r3, #4
 8016ece:	001a      	movs	r2, r3
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	4013      	ands	r3, r2
 8016ed4:	d014      	beq.n	8016f00 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	091b      	lsrs	r3, r3, #4
 8016eda:	001a      	movs	r2, r3
 8016edc:	2301      	movs	r3, #1
 8016ede:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016ee0:	d00e      	beq.n	8016f00 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	2210      	movs	r2, #16
 8016ee8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016eee:	2204      	movs	r2, #4
 8016ef0:	431a      	orrs	r2, r3
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	0018      	movs	r0, r3
 8016efa:	f001 fae8 	bl	80184ce <I2C_Flush_TXDR>
 8016efe:	e0f5      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	089b      	lsrs	r3, r3, #2
 8016f04:	001a      	movs	r2, r3
 8016f06:	2301      	movs	r3, #1
 8016f08:	4013      	ands	r3, r2
 8016f0a:	d023      	beq.n	8016f54 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	089b      	lsrs	r3, r3, #2
 8016f10:	001a      	movs	r2, r3
 8016f12:	2301      	movs	r3, #1
 8016f14:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016f16:	d01d      	beq.n	8016f54 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	2204      	movs	r2, #4
 8016f1c:	4393      	bics	r3, r2
 8016f1e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f2a:	b2d2      	uxtb	r2, r2
 8016f2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f32:	1c5a      	adds	r2, r3, #1
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f3c:	3b01      	subs	r3, #1
 8016f3e:	b29a      	uxth	r2, r3
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f52:	e0cb      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	085b      	lsrs	r3, r3, #1
 8016f58:	001a      	movs	r2, r3
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	4013      	ands	r3, r2
 8016f5e:	d01e      	beq.n	8016f9e <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	085b      	lsrs	r3, r3, #1
 8016f64:	001a      	movs	r2, r3
 8016f66:	2301      	movs	r3, #1
 8016f68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016f6a:	d018      	beq.n	8016f9e <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f70:	781a      	ldrb	r2, [r3, #0]
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f7c:	1c5a      	adds	r2, r3, #1
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f86:	3b01      	subs	r3, #1
 8016f88:	b29a      	uxth	r2, r3
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f92:	b29b      	uxth	r3, r3
 8016f94:	3b01      	subs	r3, #1
 8016f96:	b29a      	uxth	r2, r3
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f9c:	e0a6      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	09db      	lsrs	r3, r3, #7
 8016fa2:	001a      	movs	r2, r3
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	4013      	ands	r3, r2
 8016fa8:	d100      	bne.n	8016fac <I2C_Master_ISR_IT+0x108>
 8016faa:	e06b      	b.n	8017084 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	099b      	lsrs	r3, r3, #6
 8016fb0:	001a      	movs	r2, r3
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016fb6:	d065      	beq.n	8017084 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d04a      	beq.n	8017058 <I2C_Master_ISR_IT+0x1b4>
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d146      	bne.n	8017058 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	b29a      	uxth	r2, r3
 8016fd2:	2112      	movs	r1, #18
 8016fd4:	187b      	adds	r3, r7, r1
 8016fd6:	0592      	lsls	r2, r2, #22
 8016fd8:	0d92      	lsrs	r2, r2, #22
 8016fda:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	2bff      	cmp	r3, #255	@ 0xff
 8016fe4:	d910      	bls.n	8017008 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	22ff      	movs	r2, #255	@ 0xff
 8016fea:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ff0:	b2da      	uxtb	r2, r3
 8016ff2:	2380      	movs	r3, #128	@ 0x80
 8016ff4:	045c      	lsls	r4, r3, #17
 8016ff6:	187b      	adds	r3, r7, r1
 8016ff8:	8819      	ldrh	r1, [r3, #0]
 8016ffa:	68f8      	ldr	r0, [r7, #12]
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	0023      	movs	r3, r4
 8017002:	f001 fdb1 	bl	8018b68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017006:	e03c      	b.n	8017082 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801700c:	b29a      	uxth	r2, r3
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017016:	4a43      	ldr	r2, [pc, #268]	@ (8017124 <I2C_Master_ISR_IT+0x280>)
 8017018:	4293      	cmp	r3, r2
 801701a:	d00e      	beq.n	801703a <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017020:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8017026:	2312      	movs	r3, #18
 8017028:	18fb      	adds	r3, r7, r3
 801702a:	8819      	ldrh	r1, [r3, #0]
 801702c:	68f8      	ldr	r0, [r7, #12]
 801702e:	2300      	movs	r3, #0
 8017030:	9300      	str	r3, [sp, #0]
 8017032:	0023      	movs	r3, r4
 8017034:	f001 fd98 	bl	8018b68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017038:	e023      	b.n	8017082 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801703e:	b2da      	uxtb	r2, r3
 8017040:	2380      	movs	r3, #128	@ 0x80
 8017042:	049c      	lsls	r4, r3, #18
 8017044:	2312      	movs	r3, #18
 8017046:	18fb      	adds	r3, r7, r3
 8017048:	8819      	ldrh	r1, [r3, #0]
 801704a:	68f8      	ldr	r0, [r7, #12]
 801704c:	2300      	movs	r3, #0
 801704e:	9300      	str	r3, [sp, #0]
 8017050:	0023      	movs	r3, r4
 8017052:	f001 fd89 	bl	8018b68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017056:	e014      	b.n	8017082 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	685a      	ldr	r2, [r3, #4]
 801705e:	2380      	movs	r3, #128	@ 0x80
 8017060:	049b      	lsls	r3, r3, #18
 8017062:	401a      	ands	r2, r3
 8017064:	2380      	movs	r3, #128	@ 0x80
 8017066:	049b      	lsls	r3, r3, #18
 8017068:	429a      	cmp	r2, r3
 801706a:	d004      	beq.n	8017076 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	0018      	movs	r0, r3
 8017070:	f000 fe0a 	bl	8017c88 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017074:	e03a      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	2140      	movs	r1, #64	@ 0x40
 801707a:	0018      	movs	r0, r3
 801707c:	f001 f8fc 	bl	8018278 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017080:	e034      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
 8017082:	e033      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	099b      	lsrs	r3, r3, #6
 8017088:	001a      	movs	r2, r3
 801708a:	2301      	movs	r3, #1
 801708c:	4013      	ands	r3, r2
 801708e:	d02d      	beq.n	80170ec <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	099b      	lsrs	r3, r3, #6
 8017094:	001a      	movs	r2, r3
 8017096:	2301      	movs	r3, #1
 8017098:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801709a:	d027      	beq.n	80170ec <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d11d      	bne.n	80170e2 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	685a      	ldr	r2, [r3, #4]
 80170ac:	2380      	movs	r3, #128	@ 0x80
 80170ae:	049b      	lsls	r3, r3, #18
 80170b0:	401a      	ands	r2, r3
 80170b2:	2380      	movs	r3, #128	@ 0x80
 80170b4:	049b      	lsls	r3, r3, #18
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d018      	beq.n	80170ec <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170be:	4a19      	ldr	r2, [pc, #100]	@ (8017124 <I2C_Master_ISR_IT+0x280>)
 80170c0:	4293      	cmp	r3, r2
 80170c2:	d109      	bne.n	80170d8 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	685a      	ldr	r2, [r3, #4]
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	2180      	movs	r1, #128	@ 0x80
 80170d0:	01c9      	lsls	r1, r1, #7
 80170d2:	430a      	orrs	r2, r1
 80170d4:	605a      	str	r2, [r3, #4]
 80170d6:	e009      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	0018      	movs	r0, r3
 80170dc:	f000 fdd4 	bl	8017c88 <I2C_ITMasterSeqCplt>
 80170e0:	e004      	b.n	80170ec <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	2140      	movs	r1, #64	@ 0x40
 80170e6:	0018      	movs	r0, r3
 80170e8:	f001 f8c6 	bl	8018278 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	095b      	lsrs	r3, r3, #5
 80170f0:	001a      	movs	r2, r3
 80170f2:	2301      	movs	r3, #1
 80170f4:	4013      	ands	r3, r2
 80170f6:	d00b      	beq.n	8017110 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	095b      	lsrs	r3, r3, #5
 80170fc:	001a      	movs	r2, r3
 80170fe:	2301      	movs	r3, #1
 8017100:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017102:	d005      	beq.n	8017110 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8017104:	697a      	ldr	r2, [r7, #20]
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	0011      	movs	r1, r2
 801710a:	0018      	movs	r0, r3
 801710c:	f000 fe64 	bl	8017dd8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2240      	movs	r2, #64	@ 0x40
 8017114:	2100      	movs	r1, #0
 8017116:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017118:	2300      	movs	r3, #0
}
 801711a:	0018      	movs	r0, r3
 801711c:	46bd      	mov	sp, r7
 801711e:	b007      	add	sp, #28
 8017120:	bd90      	pop	{r4, r7, pc}
 8017122:	46c0      	nop			@ (mov r8, r8)
 8017124:	ffff0000 	.word	0xffff0000

08017128 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b086      	sub	sp, #24
 801712c:	af00      	add	r7, sp, #0
 801712e:	60f8      	str	r0, [r7, #12]
 8017130:	60b9      	str	r1, [r7, #8]
 8017132:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017138:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	2240      	movs	r2, #64	@ 0x40
 8017142:	5c9b      	ldrb	r3, [r3, r2]
 8017144:	2b01      	cmp	r3, #1
 8017146:	d101      	bne.n	801714c <I2C_Slave_ISR_IT+0x24>
 8017148:	2302      	movs	r3, #2
 801714a:	e0fa      	b.n	8017342 <I2C_Slave_ISR_IT+0x21a>
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	2240      	movs	r2, #64	@ 0x40
 8017150:	2101      	movs	r1, #1
 8017152:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	095b      	lsrs	r3, r3, #5
 8017158:	001a      	movs	r2, r3
 801715a:	2301      	movs	r3, #1
 801715c:	4013      	ands	r3, r2
 801715e:	d00b      	beq.n	8017178 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	095b      	lsrs	r3, r3, #5
 8017164:	001a      	movs	r2, r3
 8017166:	2301      	movs	r3, #1
 8017168:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801716a:	d005      	beq.n	8017178 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 801716c:	693a      	ldr	r2, [r7, #16]
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	0011      	movs	r1, r2
 8017172:	0018      	movs	r0, r3
 8017174:	f000 ff02 	bl	8017f7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	091b      	lsrs	r3, r3, #4
 801717c:	001a      	movs	r2, r3
 801717e:	2301      	movs	r3, #1
 8017180:	4013      	ands	r3, r2
 8017182:	d054      	beq.n	801722e <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	091b      	lsrs	r3, r3, #4
 8017188:	001a      	movs	r2, r3
 801718a:	2301      	movs	r3, #1
 801718c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801718e:	d04e      	beq.n	801722e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017194:	b29b      	uxth	r3, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	d12d      	bne.n	80171f6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	2241      	movs	r2, #65	@ 0x41
 801719e:	5c9b      	ldrb	r3, [r3, r2]
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	2b28      	cmp	r3, #40	@ 0x28
 80171a4:	d10b      	bne.n	80171be <I2C_Slave_ISR_IT+0x96>
 80171a6:	697a      	ldr	r2, [r7, #20]
 80171a8:	2380      	movs	r3, #128	@ 0x80
 80171aa:	049b      	lsls	r3, r3, #18
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d106      	bne.n	80171be <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80171b0:	693a      	ldr	r2, [r7, #16]
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	0011      	movs	r1, r2
 80171b6:	0018      	movs	r0, r3
 80171b8:	f001 f804 	bl	80181c4 <I2C_ITListenCplt>
 80171bc:	e036      	b.n	801722c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	2241      	movs	r2, #65	@ 0x41
 80171c2:	5c9b      	ldrb	r3, [r3, r2]
 80171c4:	b2db      	uxtb	r3, r3
 80171c6:	2b29      	cmp	r3, #41	@ 0x29
 80171c8:	d110      	bne.n	80171ec <I2C_Slave_ISR_IT+0xc4>
 80171ca:	697b      	ldr	r3, [r7, #20]
 80171cc:	4a5f      	ldr	r2, [pc, #380]	@ (801734c <I2C_Slave_ISR_IT+0x224>)
 80171ce:	4293      	cmp	r3, r2
 80171d0:	d00c      	beq.n	80171ec <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2210      	movs	r2, #16
 80171d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	0018      	movs	r0, r3
 80171de:	f001 f976 	bl	80184ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	0018      	movs	r0, r3
 80171e6:	f000 fd91 	bl	8017d0c <I2C_ITSlaveSeqCplt>
 80171ea:	e01f      	b.n	801722c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	2210      	movs	r2, #16
 80171f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80171f4:	e09d      	b.n	8017332 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2210      	movs	r2, #16
 80171fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017202:	2204      	movs	r2, #4
 8017204:	431a      	orrs	r2, r3
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801720a:	697b      	ldr	r3, [r7, #20]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d005      	beq.n	801721c <I2C_Slave_ISR_IT+0xf4>
 8017210:	697a      	ldr	r2, [r7, #20]
 8017212:	2380      	movs	r3, #128	@ 0x80
 8017214:	045b      	lsls	r3, r3, #17
 8017216:	429a      	cmp	r2, r3
 8017218:	d000      	beq.n	801721c <I2C_Slave_ISR_IT+0xf4>
 801721a:	e08a      	b.n	8017332 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	0011      	movs	r1, r2
 8017224:	0018      	movs	r0, r3
 8017226:	f001 f827 	bl	8018278 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801722a:	e082      	b.n	8017332 <I2C_Slave_ISR_IT+0x20a>
 801722c:	e081      	b.n	8017332 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801722e:	693b      	ldr	r3, [r7, #16]
 8017230:	089b      	lsrs	r3, r3, #2
 8017232:	001a      	movs	r2, r3
 8017234:	2301      	movs	r3, #1
 8017236:	4013      	ands	r3, r2
 8017238:	d031      	beq.n	801729e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	089b      	lsrs	r3, r3, #2
 801723e:	001a      	movs	r2, r3
 8017240:	2301      	movs	r3, #1
 8017242:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017244:	d02b      	beq.n	801729e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801724a:	b29b      	uxth	r3, r3
 801724c:	2b00      	cmp	r3, #0
 801724e:	d018      	beq.n	8017282 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801725a:	b2d2      	uxtb	r2, r2
 801725c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017262:	1c5a      	adds	r2, r3, #1
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801726c:	3b01      	subs	r3, #1
 801726e:	b29a      	uxth	r2, r3
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017278:	b29b      	uxth	r3, r3
 801727a:	3b01      	subs	r3, #1
 801727c:	b29a      	uxth	r2, r3
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017286:	b29b      	uxth	r3, r3
 8017288:	2b00      	cmp	r3, #0
 801728a:	d154      	bne.n	8017336 <I2C_Slave_ISR_IT+0x20e>
 801728c:	697b      	ldr	r3, [r7, #20]
 801728e:	4a2f      	ldr	r2, [pc, #188]	@ (801734c <I2C_Slave_ISR_IT+0x224>)
 8017290:	4293      	cmp	r3, r2
 8017292:	d050      	beq.n	8017336 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	0018      	movs	r0, r3
 8017298:	f000 fd38 	bl	8017d0c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801729c:	e04b      	b.n	8017336 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801729e:	693b      	ldr	r3, [r7, #16]
 80172a0:	08db      	lsrs	r3, r3, #3
 80172a2:	001a      	movs	r2, r3
 80172a4:	2301      	movs	r3, #1
 80172a6:	4013      	ands	r3, r2
 80172a8:	d00c      	beq.n	80172c4 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	08db      	lsrs	r3, r3, #3
 80172ae:	001a      	movs	r2, r3
 80172b0:	2301      	movs	r3, #1
 80172b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80172b4:	d006      	beq.n	80172c4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80172b6:	693a      	ldr	r2, [r7, #16]
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	0011      	movs	r1, r2
 80172bc:	0018      	movs	r0, r3
 80172be:	f000 fc3f 	bl	8017b40 <I2C_ITAddrCplt>
 80172c2:	e039      	b.n	8017338 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80172c4:	693b      	ldr	r3, [r7, #16]
 80172c6:	085b      	lsrs	r3, r3, #1
 80172c8:	001a      	movs	r2, r3
 80172ca:	2301      	movs	r3, #1
 80172cc:	4013      	ands	r3, r2
 80172ce:	d033      	beq.n	8017338 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	085b      	lsrs	r3, r3, #1
 80172d4:	001a      	movs	r2, r3
 80172d6:	2301      	movs	r3, #1
 80172d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80172da:	d02d      	beq.n	8017338 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172e0:	b29b      	uxth	r3, r3
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d018      	beq.n	8017318 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172ea:	781a      	ldrb	r2, [r3, #0]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172f6:	1c5a      	adds	r2, r3, #1
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017300:	b29b      	uxth	r3, r3
 8017302:	3b01      	subs	r3, #1
 8017304:	b29a      	uxth	r2, r3
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801730e:	3b01      	subs	r3, #1
 8017310:	b29a      	uxth	r2, r3
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017316:	e00f      	b.n	8017338 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8017318:	697a      	ldr	r2, [r7, #20]
 801731a:	2380      	movs	r3, #128	@ 0x80
 801731c:	045b      	lsls	r3, r3, #17
 801731e:	429a      	cmp	r2, r3
 8017320:	d002      	beq.n	8017328 <I2C_Slave_ISR_IT+0x200>
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d107      	bne.n	8017338 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	0018      	movs	r0, r3
 801732c:	f000 fcee 	bl	8017d0c <I2C_ITSlaveSeqCplt>
 8017330:	e002      	b.n	8017338 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8017332:	46c0      	nop			@ (mov r8, r8)
 8017334:	e000      	b.n	8017338 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8017336:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2240      	movs	r2, #64	@ 0x40
 801733c:	2100      	movs	r1, #0
 801733e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017340:	2300      	movs	r3, #0
}
 8017342:	0018      	movs	r0, r3
 8017344:	46bd      	mov	sp, r7
 8017346:	b006      	add	sp, #24
 8017348:	bd80      	pop	{r7, pc}
 801734a:	46c0      	nop			@ (mov r8, r8)
 801734c:	ffff0000 	.word	0xffff0000

08017350 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8017350:	b590      	push	{r4, r7, lr}
 8017352:	b089      	sub	sp, #36	@ 0x24
 8017354:	af02      	add	r7, sp, #8
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	2240      	movs	r2, #64	@ 0x40
 8017360:	5c9b      	ldrb	r3, [r3, r2]
 8017362:	2b01      	cmp	r3, #1
 8017364:	d101      	bne.n	801736a <I2C_Master_ISR_DMA+0x1a>
 8017366:	2302      	movs	r3, #2
 8017368:	e0f7      	b.n	801755a <I2C_Master_ISR_DMA+0x20a>
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2240      	movs	r2, #64	@ 0x40
 801736e:	2101      	movs	r1, #1
 8017370:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	091b      	lsrs	r3, r3, #4
 8017376:	001a      	movs	r2, r3
 8017378:	2301      	movs	r3, #1
 801737a:	4013      	ands	r3, r2
 801737c:	d019      	beq.n	80173b2 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	091b      	lsrs	r3, r3, #4
 8017382:	001a      	movs	r2, r3
 8017384:	2301      	movs	r3, #1
 8017386:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017388:	d013      	beq.n	80173b2 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	2210      	movs	r2, #16
 8017390:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017396:	2204      	movs	r2, #4
 8017398:	431a      	orrs	r2, r3
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	2120      	movs	r1, #32
 80173a2:	0018      	movs	r0, r3
 80173a4:	f001 fc1a 	bl	8018bdc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	0018      	movs	r0, r3
 80173ac:	f001 f88f 	bl	80184ce <I2C_Flush_TXDR>
 80173b0:	e0ce      	b.n	8017550 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	09db      	lsrs	r3, r3, #7
 80173b6:	001a      	movs	r2, r3
 80173b8:	2301      	movs	r3, #1
 80173ba:	4013      	ands	r3, r2
 80173bc:	d100      	bne.n	80173c0 <I2C_Master_ISR_DMA+0x70>
 80173be:	e07e      	b.n	80174be <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	099b      	lsrs	r3, r3, #6
 80173c4:	001a      	movs	r2, r3
 80173c6:	2301      	movs	r3, #1
 80173c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80173ca:	d100      	bne.n	80173ce <I2C_Master_ISR_DMA+0x7e>
 80173cc:	e077      	b.n	80174be <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	681a      	ldr	r2, [r3, #0]
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	2140      	movs	r1, #64	@ 0x40
 80173da:	438a      	bics	r2, r1
 80173dc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d055      	beq.n	8017494 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	685b      	ldr	r3, [r3, #4]
 80173ee:	b29a      	uxth	r2, r3
 80173f0:	2312      	movs	r3, #18
 80173f2:	18fb      	adds	r3, r7, r3
 80173f4:	0592      	lsls	r2, r2, #22
 80173f6:	0d92      	lsrs	r2, r2, #22
 80173f8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173fe:	b29b      	uxth	r3, r3
 8017400:	2bff      	cmp	r3, #255	@ 0xff
 8017402:	d906      	bls.n	8017412 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	22ff      	movs	r2, #255	@ 0xff
 8017408:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801740a:	2380      	movs	r3, #128	@ 0x80
 801740c:	045b      	lsls	r3, r3, #17
 801740e:	617b      	str	r3, [r7, #20]
 8017410:	e010      	b.n	8017434 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017416:	b29a      	uxth	r2, r3
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017420:	4a50      	ldr	r2, [pc, #320]	@ (8017564 <I2C_Master_ISR_DMA+0x214>)
 8017422:	4293      	cmp	r3, r2
 8017424:	d003      	beq.n	801742e <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801742a:	617b      	str	r3, [r7, #20]
 801742c:	e002      	b.n	8017434 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801742e:	2380      	movs	r3, #128	@ 0x80
 8017430:	049b      	lsls	r3, r3, #18
 8017432:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017438:	b2da      	uxtb	r2, r3
 801743a:	697c      	ldr	r4, [r7, #20]
 801743c:	2312      	movs	r3, #18
 801743e:	18fb      	adds	r3, r7, r3
 8017440:	8819      	ldrh	r1, [r3, #0]
 8017442:	68f8      	ldr	r0, [r7, #12]
 8017444:	2300      	movs	r3, #0
 8017446:	9300      	str	r3, [sp, #0]
 8017448:	0023      	movs	r3, r4
 801744a:	f001 fb8d 	bl	8018b68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017452:	b29a      	uxth	r2, r3
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017458:	1ad3      	subs	r3, r2, r3
 801745a:	b29a      	uxth	r2, r3
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	2241      	movs	r2, #65	@ 0x41
 8017464:	5c9b      	ldrb	r3, [r3, r2]
 8017466:	b2db      	uxtb	r3, r3
 8017468:	2b22      	cmp	r3, #34	@ 0x22
 801746a:	d109      	bne.n	8017480 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	681a      	ldr	r2, [r3, #0]
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2180      	movs	r1, #128	@ 0x80
 8017478:	0209      	lsls	r1, r1, #8
 801747a:	430a      	orrs	r2, r1
 801747c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801747e:	e067      	b.n	8017550 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	681a      	ldr	r2, [r3, #0]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	2180      	movs	r1, #128	@ 0x80
 801748c:	01c9      	lsls	r1, r1, #7
 801748e:	430a      	orrs	r2, r1
 8017490:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017492:	e05d      	b.n	8017550 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	685a      	ldr	r2, [r3, #4]
 801749a:	2380      	movs	r3, #128	@ 0x80
 801749c:	049b      	lsls	r3, r3, #18
 801749e:	401a      	ands	r2, r3
 80174a0:	2380      	movs	r3, #128	@ 0x80
 80174a2:	049b      	lsls	r3, r3, #18
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d004      	beq.n	80174b2 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	0018      	movs	r0, r3
 80174ac:	f000 fbec 	bl	8017c88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80174b0:	e04e      	b.n	8017550 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	2140      	movs	r1, #64	@ 0x40
 80174b6:	0018      	movs	r0, r3
 80174b8:	f000 fede 	bl	8018278 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80174bc:	e048      	b.n	8017550 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80174be:	68bb      	ldr	r3, [r7, #8]
 80174c0:	099b      	lsrs	r3, r3, #6
 80174c2:	001a      	movs	r2, r3
 80174c4:	2301      	movs	r3, #1
 80174c6:	4013      	ands	r3, r2
 80174c8:	d02e      	beq.n	8017528 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	099b      	lsrs	r3, r3, #6
 80174ce:	001a      	movs	r2, r3
 80174d0:	2301      	movs	r3, #1
 80174d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80174d4:	d028      	beq.n	8017528 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80174da:	b29b      	uxth	r3, r3
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d11d      	bne.n	801751c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	685a      	ldr	r2, [r3, #4]
 80174e6:	2380      	movs	r3, #128	@ 0x80
 80174e8:	049b      	lsls	r3, r3, #18
 80174ea:	401a      	ands	r2, r3
 80174ec:	2380      	movs	r3, #128	@ 0x80
 80174ee:	049b      	lsls	r3, r3, #18
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d02c      	beq.n	801754e <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174f8:	4a1a      	ldr	r2, [pc, #104]	@ (8017564 <I2C_Master_ISR_DMA+0x214>)
 80174fa:	4293      	cmp	r3, r2
 80174fc:	d109      	bne.n	8017512 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	685a      	ldr	r2, [r3, #4]
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2180      	movs	r1, #128	@ 0x80
 801750a:	01c9      	lsls	r1, r1, #7
 801750c:	430a      	orrs	r2, r1
 801750e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8017510:	e01d      	b.n	801754e <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	0018      	movs	r0, r3
 8017516:	f000 fbb7 	bl	8017c88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801751a:	e018      	b.n	801754e <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2140      	movs	r1, #64	@ 0x40
 8017520:	0018      	movs	r0, r3
 8017522:	f000 fea9 	bl	8018278 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8017526:	e012      	b.n	801754e <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	095b      	lsrs	r3, r3, #5
 801752c:	001a      	movs	r2, r3
 801752e:	2301      	movs	r3, #1
 8017530:	4013      	ands	r3, r2
 8017532:	d00d      	beq.n	8017550 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	095b      	lsrs	r3, r3, #5
 8017538:	001a      	movs	r2, r3
 801753a:	2301      	movs	r3, #1
 801753c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801753e:	d007      	beq.n	8017550 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017540:	68ba      	ldr	r2, [r7, #8]
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	0011      	movs	r1, r2
 8017546:	0018      	movs	r0, r3
 8017548:	f000 fc46 	bl	8017dd8 <I2C_ITMasterCplt>
 801754c:	e000      	b.n	8017550 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 801754e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	2240      	movs	r2, #64	@ 0x40
 8017554:	2100      	movs	r1, #0
 8017556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017558:	2300      	movs	r3, #0
}
 801755a:	0018      	movs	r0, r3
 801755c:	46bd      	mov	sp, r7
 801755e:	b007      	add	sp, #28
 8017560:	bd90      	pop	{r4, r7, pc}
 8017562:	46c0      	nop			@ (mov r8, r8)
 8017564:	ffff0000 	.word	0xffff0000

08017568 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8017568:	b590      	push	{r4, r7, lr}
 801756a:	b089      	sub	sp, #36	@ 0x24
 801756c:	af02      	add	r7, sp, #8
 801756e:	60f8      	str	r0, [r7, #12]
 8017570:	60b9      	str	r1, [r7, #8]
 8017572:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8017574:	4b92      	ldr	r3, [pc, #584]	@ (80177c0 <I2C_Mem_ISR_DMA+0x258>)
 8017576:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	2240      	movs	r2, #64	@ 0x40
 801757c:	5c9b      	ldrb	r3, [r3, r2]
 801757e:	2b01      	cmp	r3, #1
 8017580:	d101      	bne.n	8017586 <I2C_Mem_ISR_DMA+0x1e>
 8017582:	2302      	movs	r3, #2
 8017584:	e118      	b.n	80177b8 <I2C_Mem_ISR_DMA+0x250>
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2240      	movs	r2, #64	@ 0x40
 801758a:	2101      	movs	r1, #1
 801758c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	091b      	lsrs	r3, r3, #4
 8017592:	001a      	movs	r2, r3
 8017594:	2301      	movs	r3, #1
 8017596:	4013      	ands	r3, r2
 8017598:	d019      	beq.n	80175ce <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	091b      	lsrs	r3, r3, #4
 801759e:	001a      	movs	r2, r3
 80175a0:	2301      	movs	r3, #1
 80175a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80175a4:	d013      	beq.n	80175ce <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2210      	movs	r2, #16
 80175ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175b2:	2204      	movs	r2, #4
 80175b4:	431a      	orrs	r2, r3
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	2120      	movs	r1, #32
 80175be:	0018      	movs	r0, r3
 80175c0:	f001 fb0c 	bl	8018bdc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	0018      	movs	r0, r3
 80175c8:	f000 ff81 	bl	80184ce <I2C_Flush_TXDR>
 80175cc:	e0ef      	b.n	80177ae <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80175ce:	68bb      	ldr	r3, [r7, #8]
 80175d0:	085b      	lsrs	r3, r3, #1
 80175d2:	001a      	movs	r2, r3
 80175d4:	2301      	movs	r3, #1
 80175d6:	4013      	ands	r3, r2
 80175d8:	d00f      	beq.n	80175fa <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	085b      	lsrs	r3, r3, #1
 80175de:	001a      	movs	r2, r3
 80175e0:	2301      	movs	r3, #1
 80175e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80175e4:	d009      	beq.n	80175fa <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	68fa      	ldr	r2, [r7, #12]
 80175ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80175ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	2201      	movs	r2, #1
 80175f4:	4252      	negs	r2, r2
 80175f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80175f8:	e0d9      	b.n	80177ae <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80175fa:	68bb      	ldr	r3, [r7, #8]
 80175fc:	09db      	lsrs	r3, r3, #7
 80175fe:	001a      	movs	r2, r3
 8017600:	2301      	movs	r3, #1
 8017602:	4013      	ands	r3, r2
 8017604:	d060      	beq.n	80176c8 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	099b      	lsrs	r3, r3, #6
 801760a:	001a      	movs	r2, r3
 801760c:	2301      	movs	r3, #1
 801760e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017610:	d05a      	beq.n	80176c8 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	2110      	movs	r1, #16
 8017616:	0018      	movs	r0, r3
 8017618:	f001 fae0 	bl	8018bdc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017620:	b29b      	uxth	r3, r3
 8017622:	2b00      	cmp	r3, #0
 8017624:	d04a      	beq.n	80176bc <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801762a:	b29b      	uxth	r3, r3
 801762c:	2bff      	cmp	r3, #255	@ 0xff
 801762e:	d910      	bls.n	8017652 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	22ff      	movs	r2, #255	@ 0xff
 8017634:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801763a:	b299      	uxth	r1, r3
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017640:	b2da      	uxtb	r2, r3
 8017642:	2380      	movs	r3, #128	@ 0x80
 8017644:	045b      	lsls	r3, r3, #17
 8017646:	68f8      	ldr	r0, [r7, #12]
 8017648:	2400      	movs	r4, #0
 801764a:	9400      	str	r4, [sp, #0]
 801764c:	f001 fa8c 	bl	8018b68 <I2C_TransferConfig>
 8017650:	e011      	b.n	8017676 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017656:	b29a      	uxth	r2, r3
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017660:	b299      	uxth	r1, r3
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017666:	b2da      	uxtb	r2, r3
 8017668:	2380      	movs	r3, #128	@ 0x80
 801766a:	049b      	lsls	r3, r3, #18
 801766c:	68f8      	ldr	r0, [r7, #12]
 801766e:	2400      	movs	r4, #0
 8017670:	9400      	str	r4, [sp, #0]
 8017672:	f001 fa79 	bl	8018b68 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801767a:	b29a      	uxth	r2, r3
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017680:	1ad3      	subs	r3, r2, r3
 8017682:	b29a      	uxth	r2, r3
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2241      	movs	r2, #65	@ 0x41
 801768c:	5c9b      	ldrb	r3, [r3, r2]
 801768e:	b2db      	uxtb	r3, r3
 8017690:	2b22      	cmp	r3, #34	@ 0x22
 8017692:	d109      	bne.n	80176a8 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	681a      	ldr	r2, [r3, #0]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	2180      	movs	r1, #128	@ 0x80
 80176a0:	0209      	lsls	r1, r1, #8
 80176a2:	430a      	orrs	r2, r1
 80176a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80176a6:	e082      	b.n	80177ae <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	681a      	ldr	r2, [r3, #0]
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2180      	movs	r1, #128	@ 0x80
 80176b4:	01c9      	lsls	r1, r1, #7
 80176b6:	430a      	orrs	r2, r1
 80176b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80176ba:	e078      	b.n	80177ae <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	2140      	movs	r1, #64	@ 0x40
 80176c0:	0018      	movs	r0, r3
 80176c2:	f000 fdd9 	bl	8018278 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80176c6:	e072      	b.n	80177ae <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	099b      	lsrs	r3, r3, #6
 80176cc:	001a      	movs	r2, r3
 80176ce:	2301      	movs	r3, #1
 80176d0:	4013      	ands	r3, r2
 80176d2:	d05a      	beq.n	801778a <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	099b      	lsrs	r3, r3, #6
 80176d8:	001a      	movs	r2, r3
 80176da:	2301      	movs	r3, #1
 80176dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80176de:	d054      	beq.n	801778a <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	2241      	movs	r2, #65	@ 0x41
 80176e4:	5c9b      	ldrb	r3, [r3, r2]
 80176e6:	b2db      	uxtb	r3, r3
 80176e8:	2b22      	cmp	r3, #34	@ 0x22
 80176ea:	d101      	bne.n	80176f0 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 80176ec:	4b35      	ldr	r3, [pc, #212]	@ (80177c4 <I2C_Mem_ISR_DMA+0x25c>)
 80176ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	2bff      	cmp	r3, #255	@ 0xff
 80176f8:	d911      	bls.n	801771e <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	22ff      	movs	r2, #255	@ 0xff
 80176fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017704:	b299      	uxth	r1, r3
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801770a:	b2da      	uxtb	r2, r3
 801770c:	2380      	movs	r3, #128	@ 0x80
 801770e:	045c      	lsls	r4, r3, #17
 8017710:	68f8      	ldr	r0, [r7, #12]
 8017712:	697b      	ldr	r3, [r7, #20]
 8017714:	9300      	str	r3, [sp, #0]
 8017716:	0023      	movs	r3, r4
 8017718:	f001 fa26 	bl	8018b68 <I2C_TransferConfig>
 801771c:	e012      	b.n	8017744 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017722:	b29a      	uxth	r2, r3
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801772c:	b299      	uxth	r1, r3
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017732:	b2da      	uxtb	r2, r3
 8017734:	2380      	movs	r3, #128	@ 0x80
 8017736:	049c      	lsls	r4, r3, #18
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	9300      	str	r3, [sp, #0]
 801773e:	0023      	movs	r3, r4
 8017740:	f001 fa12 	bl	8018b68 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017748:	b29a      	uxth	r2, r3
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801774e:	1ad3      	subs	r3, r2, r3
 8017750:	b29a      	uxth	r2, r3
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	2241      	movs	r2, #65	@ 0x41
 801775a:	5c9b      	ldrb	r3, [r3, r2]
 801775c:	b2db      	uxtb	r3, r3
 801775e:	2b22      	cmp	r3, #34	@ 0x22
 8017760:	d109      	bne.n	8017776 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	681a      	ldr	r2, [r3, #0]
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2180      	movs	r1, #128	@ 0x80
 801776e:	0209      	lsls	r1, r1, #8
 8017770:	430a      	orrs	r2, r1
 8017772:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017774:	e01b      	b.n	80177ae <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	681a      	ldr	r2, [r3, #0]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	2180      	movs	r1, #128	@ 0x80
 8017782:	01c9      	lsls	r1, r1, #7
 8017784:	430a      	orrs	r2, r1
 8017786:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017788:	e011      	b.n	80177ae <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	095b      	lsrs	r3, r3, #5
 801778e:	001a      	movs	r2, r3
 8017790:	2301      	movs	r3, #1
 8017792:	4013      	ands	r3, r2
 8017794:	d00b      	beq.n	80177ae <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	095b      	lsrs	r3, r3, #5
 801779a:	001a      	movs	r2, r3
 801779c:	2301      	movs	r3, #1
 801779e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80177a0:	d005      	beq.n	80177ae <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80177a2:	68ba      	ldr	r2, [r7, #8]
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	0011      	movs	r1, r2
 80177a8:	0018      	movs	r0, r3
 80177aa:	f000 fb15 	bl	8017dd8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	2240      	movs	r2, #64	@ 0x40
 80177b2:	2100      	movs	r1, #0
 80177b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80177b6:	2300      	movs	r3, #0
}
 80177b8:	0018      	movs	r0, r3
 80177ba:	46bd      	mov	sp, r7
 80177bc:	b007      	add	sp, #28
 80177be:	bd90      	pop	{r4, r7, pc}
 80177c0:	80002000 	.word	0x80002000
 80177c4:	80002400 	.word	0x80002400

080177c8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b088      	sub	sp, #32
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	60f8      	str	r0, [r7, #12]
 80177d0:	60b9      	str	r1, [r7, #8]
 80177d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177d8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80177da:	2300      	movs	r3, #0
 80177dc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	2240      	movs	r2, #64	@ 0x40
 80177e2:	5c9b      	ldrb	r3, [r3, r2]
 80177e4:	2b01      	cmp	r3, #1
 80177e6:	d101      	bne.n	80177ec <I2C_Slave_ISR_DMA+0x24>
 80177e8:	2302      	movs	r3, #2
 80177ea:	e0dd      	b.n	80179a8 <I2C_Slave_ISR_DMA+0x1e0>
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2240      	movs	r2, #64	@ 0x40
 80177f0:	2101      	movs	r1, #1
 80177f2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80177f4:	68bb      	ldr	r3, [r7, #8]
 80177f6:	095b      	lsrs	r3, r3, #5
 80177f8:	001a      	movs	r2, r3
 80177fa:	2301      	movs	r3, #1
 80177fc:	4013      	ands	r3, r2
 80177fe:	d00b      	beq.n	8017818 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	095b      	lsrs	r3, r3, #5
 8017804:	001a      	movs	r2, r3
 8017806:	2301      	movs	r3, #1
 8017808:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801780a:	d005      	beq.n	8017818 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 801780c:	68ba      	ldr	r2, [r7, #8]
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	0011      	movs	r1, r2
 8017812:	0018      	movs	r0, r3
 8017814:	f000 fbb2 	bl	8017f7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017818:	68bb      	ldr	r3, [r7, #8]
 801781a:	091b      	lsrs	r3, r3, #4
 801781c:	001a      	movs	r2, r3
 801781e:	2301      	movs	r3, #1
 8017820:	4013      	ands	r3, r2
 8017822:	d100      	bne.n	8017826 <I2C_Slave_ISR_DMA+0x5e>
 8017824:	e0a9      	b.n	801797a <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	091b      	lsrs	r3, r3, #4
 801782a:	001a      	movs	r2, r3
 801782c:	2301      	movs	r3, #1
 801782e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017830:	d100      	bne.n	8017834 <I2C_Slave_ISR_DMA+0x6c>
 8017832:	e0a2      	b.n	801797a <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	0b9b      	lsrs	r3, r3, #14
 8017838:	001a      	movs	r2, r3
 801783a:	2301      	movs	r3, #1
 801783c:	4013      	ands	r3, r2
 801783e:	d106      	bne.n	801784e <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	0bdb      	lsrs	r3, r3, #15
 8017844:	001a      	movs	r2, r3
 8017846:	2301      	movs	r3, #1
 8017848:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801784a:	d100      	bne.n	801784e <I2C_Slave_ISR_DMA+0x86>
 801784c:	e08e      	b.n	801796c <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017852:	2b00      	cmp	r3, #0
 8017854:	d00d      	beq.n	8017872 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	0bdb      	lsrs	r3, r3, #15
 801785a:	001a      	movs	r2, r3
 801785c:	2301      	movs	r3, #1
 801785e:	4013      	ands	r3, r2
 8017860:	d007      	beq.n	8017872 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d101      	bne.n	8017872 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 801786e:	2301      	movs	r3, #1
 8017870:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017876:	2b00      	cmp	r3, #0
 8017878:	d00d      	beq.n	8017896 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	0b9b      	lsrs	r3, r3, #14
 801787e:	001a      	movs	r2, r3
 8017880:	2301      	movs	r3, #1
 8017882:	4013      	ands	r3, r2
 8017884:	d007      	beq.n	8017896 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d101      	bne.n	8017896 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8017892:	2301      	movs	r3, #1
 8017894:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8017896:	69fb      	ldr	r3, [r7, #28]
 8017898:	2b01      	cmp	r3, #1
 801789a:	d12d      	bne.n	80178f8 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	2241      	movs	r2, #65	@ 0x41
 80178a0:	5c9b      	ldrb	r3, [r3, r2]
 80178a2:	b2db      	uxtb	r3, r3
 80178a4:	2b28      	cmp	r3, #40	@ 0x28
 80178a6:	d10b      	bne.n	80178c0 <I2C_Slave_ISR_DMA+0xf8>
 80178a8:	69ba      	ldr	r2, [r7, #24]
 80178aa:	2380      	movs	r3, #128	@ 0x80
 80178ac:	049b      	lsls	r3, r3, #18
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d106      	bne.n	80178c0 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80178b2:	68ba      	ldr	r2, [r7, #8]
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	0011      	movs	r1, r2
 80178b8:	0018      	movs	r0, r3
 80178ba:	f000 fc83 	bl	80181c4 <I2C_ITListenCplt>
 80178be:	e054      	b.n	801796a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	2241      	movs	r2, #65	@ 0x41
 80178c4:	5c9b      	ldrb	r3, [r3, r2]
 80178c6:	b2db      	uxtb	r3, r3
 80178c8:	2b29      	cmp	r3, #41	@ 0x29
 80178ca:	d110      	bne.n	80178ee <I2C_Slave_ISR_DMA+0x126>
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	4a38      	ldr	r2, [pc, #224]	@ (80179b0 <I2C_Slave_ISR_DMA+0x1e8>)
 80178d0:	4293      	cmp	r3, r2
 80178d2:	d00c      	beq.n	80178ee <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	2210      	movs	r2, #16
 80178da:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	0018      	movs	r0, r3
 80178e0:	f000 fdf5 	bl	80184ce <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	0018      	movs	r0, r3
 80178e8:	f000 fa10 	bl	8017d0c <I2C_ITSlaveSeqCplt>
 80178ec:	e03d      	b.n	801796a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2210      	movs	r2, #16
 80178f4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80178f6:	e03e      	b.n	8017976 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	2210      	movs	r2, #16
 80178fe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017904:	2204      	movs	r2, #4
 8017906:	431a      	orrs	r2, r3
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 801790c:	2317      	movs	r3, #23
 801790e:	18fb      	adds	r3, r7, r3
 8017910:	68fa      	ldr	r2, [r7, #12]
 8017912:	2141      	movs	r1, #65	@ 0x41
 8017914:	5c52      	ldrb	r2, [r2, r1]
 8017916:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017918:	69bb      	ldr	r3, [r7, #24]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d004      	beq.n	8017928 <I2C_Slave_ISR_DMA+0x160>
 801791e:	69ba      	ldr	r2, [r7, #24]
 8017920:	2380      	movs	r3, #128	@ 0x80
 8017922:	045b      	lsls	r3, r3, #17
 8017924:	429a      	cmp	r2, r3
 8017926:	d126      	bne.n	8017976 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017928:	2217      	movs	r2, #23
 801792a:	18bb      	adds	r3, r7, r2
 801792c:	781b      	ldrb	r3, [r3, #0]
 801792e:	2b21      	cmp	r3, #33	@ 0x21
 8017930:	d003      	beq.n	801793a <I2C_Slave_ISR_DMA+0x172>
 8017932:	18bb      	adds	r3, r7, r2
 8017934:	781b      	ldrb	r3, [r3, #0]
 8017936:	2b29      	cmp	r3, #41	@ 0x29
 8017938:	d103      	bne.n	8017942 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	2221      	movs	r2, #33	@ 0x21
 801793e:	631a      	str	r2, [r3, #48]	@ 0x30
 8017940:	e00b      	b.n	801795a <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017942:	2217      	movs	r2, #23
 8017944:	18bb      	adds	r3, r7, r2
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	2b22      	cmp	r3, #34	@ 0x22
 801794a:	d003      	beq.n	8017954 <I2C_Slave_ISR_DMA+0x18c>
 801794c:	18bb      	adds	r3, r7, r2
 801794e:	781b      	ldrb	r3, [r3, #0]
 8017950:	2b2a      	cmp	r3, #42	@ 0x2a
 8017952:	d102      	bne.n	801795a <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	2222      	movs	r2, #34	@ 0x22
 8017958:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	0011      	movs	r1, r2
 8017962:	0018      	movs	r0, r3
 8017964:	f000 fc88 	bl	8018278 <I2C_ITError>
      if (treatdmanack == 1U)
 8017968:	e005      	b.n	8017976 <I2C_Slave_ISR_DMA+0x1ae>
 801796a:	e004      	b.n	8017976 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2210      	movs	r2, #16
 8017972:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017974:	e013      	b.n	801799e <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8017976:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017978:	e011      	b.n	801799e <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	08db      	lsrs	r3, r3, #3
 801797e:	001a      	movs	r2, r3
 8017980:	2301      	movs	r3, #1
 8017982:	4013      	ands	r3, r2
 8017984:	d00b      	beq.n	801799e <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	08db      	lsrs	r3, r3, #3
 801798a:	001a      	movs	r2, r3
 801798c:	2301      	movs	r3, #1
 801798e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017990:	d005      	beq.n	801799e <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8017992:	68ba      	ldr	r2, [r7, #8]
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	0011      	movs	r1, r2
 8017998:	0018      	movs	r0, r3
 801799a:	f000 f8d1 	bl	8017b40 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	2240      	movs	r2, #64	@ 0x40
 80179a2:	2100      	movs	r1, #0
 80179a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80179a6:	2300      	movs	r3, #0
}
 80179a8:	0018      	movs	r0, r3
 80179aa:	46bd      	mov	sp, r7
 80179ac:	b008      	add	sp, #32
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	ffff0000 	.word	0xffff0000

080179b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80179b4:	b5b0      	push	{r4, r5, r7, lr}
 80179b6:	b086      	sub	sp, #24
 80179b8:	af02      	add	r7, sp, #8
 80179ba:	60f8      	str	r0, [r7, #12]
 80179bc:	000c      	movs	r4, r1
 80179be:	0010      	movs	r0, r2
 80179c0:	0019      	movs	r1, r3
 80179c2:	250a      	movs	r5, #10
 80179c4:	197b      	adds	r3, r7, r5
 80179c6:	1c22      	adds	r2, r4, #0
 80179c8:	801a      	strh	r2, [r3, #0]
 80179ca:	2308      	movs	r3, #8
 80179cc:	18fb      	adds	r3, r7, r3
 80179ce:	1c02      	adds	r2, r0, #0
 80179d0:	801a      	strh	r2, [r3, #0]
 80179d2:	1dbb      	adds	r3, r7, #6
 80179d4:	1c0a      	adds	r2, r1, #0
 80179d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80179d8:	1dbb      	adds	r3, r7, #6
 80179da:	881b      	ldrh	r3, [r3, #0]
 80179dc:	b2da      	uxtb	r2, r3
 80179de:	2380      	movs	r3, #128	@ 0x80
 80179e0:	045c      	lsls	r4, r3, #17
 80179e2:	197b      	adds	r3, r7, r5
 80179e4:	8819      	ldrh	r1, [r3, #0]
 80179e6:	68f8      	ldr	r0, [r7, #12]
 80179e8:	4b23      	ldr	r3, [pc, #140]	@ (8017a78 <I2C_RequestMemoryWrite+0xc4>)
 80179ea:	9300      	str	r3, [sp, #0]
 80179ec:	0023      	movs	r3, r4
 80179ee:	f001 f8bb 	bl	8018b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179f4:	6a39      	ldr	r1, [r7, #32]
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	0018      	movs	r0, r3
 80179fa:	f000 feb1 	bl	8018760 <I2C_WaitOnTXISFlagUntilTimeout>
 80179fe:	1e03      	subs	r3, r0, #0
 8017a00:	d001      	beq.n	8017a06 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8017a02:	2301      	movs	r3, #1
 8017a04:	e033      	b.n	8017a6e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017a06:	1dbb      	adds	r3, r7, #6
 8017a08:	881b      	ldrh	r3, [r3, #0]
 8017a0a:	2b01      	cmp	r3, #1
 8017a0c:	d107      	bne.n	8017a1e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a0e:	2308      	movs	r3, #8
 8017a10:	18fb      	adds	r3, r7, r3
 8017a12:	881b      	ldrh	r3, [r3, #0]
 8017a14:	b2da      	uxtb	r2, r3
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8017a1c:	e019      	b.n	8017a52 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017a1e:	2308      	movs	r3, #8
 8017a20:	18fb      	adds	r3, r7, r3
 8017a22:	881b      	ldrh	r3, [r3, #0]
 8017a24:	0a1b      	lsrs	r3, r3, #8
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	b2da      	uxtb	r2, r3
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a32:	6a39      	ldr	r1, [r7, #32]
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	0018      	movs	r0, r3
 8017a38:	f000 fe92 	bl	8018760 <I2C_WaitOnTXISFlagUntilTimeout>
 8017a3c:	1e03      	subs	r3, r0, #0
 8017a3e:	d001      	beq.n	8017a44 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8017a40:	2301      	movs	r3, #1
 8017a42:	e014      	b.n	8017a6e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a44:	2308      	movs	r3, #8
 8017a46:	18fb      	adds	r3, r7, r3
 8017a48:	881b      	ldrh	r3, [r3, #0]
 8017a4a:	b2da      	uxtb	r2, r3
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8017a52:	6a3a      	ldr	r2, [r7, #32]
 8017a54:	68f8      	ldr	r0, [r7, #12]
 8017a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a58:	9300      	str	r3, [sp, #0]
 8017a5a:	0013      	movs	r3, r2
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	2180      	movs	r1, #128	@ 0x80
 8017a60:	f000 fe30 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 8017a64:	1e03      	subs	r3, r0, #0
 8017a66:	d001      	beq.n	8017a6c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8017a68:	2301      	movs	r3, #1
 8017a6a:	e000      	b.n	8017a6e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8017a6c:	2300      	movs	r3, #0
}
 8017a6e:	0018      	movs	r0, r3
 8017a70:	46bd      	mov	sp, r7
 8017a72:	b004      	add	sp, #16
 8017a74:	bdb0      	pop	{r4, r5, r7, pc}
 8017a76:	46c0      	nop			@ (mov r8, r8)
 8017a78:	80002000 	.word	0x80002000

08017a7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017a7c:	b5b0      	push	{r4, r5, r7, lr}
 8017a7e:	b086      	sub	sp, #24
 8017a80:	af02      	add	r7, sp, #8
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	000c      	movs	r4, r1
 8017a86:	0010      	movs	r0, r2
 8017a88:	0019      	movs	r1, r3
 8017a8a:	250a      	movs	r5, #10
 8017a8c:	197b      	adds	r3, r7, r5
 8017a8e:	1c22      	adds	r2, r4, #0
 8017a90:	801a      	strh	r2, [r3, #0]
 8017a92:	2308      	movs	r3, #8
 8017a94:	18fb      	adds	r3, r7, r3
 8017a96:	1c02      	adds	r2, r0, #0
 8017a98:	801a      	strh	r2, [r3, #0]
 8017a9a:	1dbb      	adds	r3, r7, #6
 8017a9c:	1c0a      	adds	r2, r1, #0
 8017a9e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017aa0:	1dbb      	adds	r3, r7, #6
 8017aa2:	881b      	ldrh	r3, [r3, #0]
 8017aa4:	b2da      	uxtb	r2, r3
 8017aa6:	197b      	adds	r3, r7, r5
 8017aa8:	8819      	ldrh	r1, [r3, #0]
 8017aaa:	68f8      	ldr	r0, [r7, #12]
 8017aac:	4b23      	ldr	r3, [pc, #140]	@ (8017b3c <I2C_RequestMemoryRead+0xc0>)
 8017aae:	9300      	str	r3, [sp, #0]
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	f001 f859 	bl	8018b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ab8:	6a39      	ldr	r1, [r7, #32]
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	0018      	movs	r0, r3
 8017abe:	f000 fe4f 	bl	8018760 <I2C_WaitOnTXISFlagUntilTimeout>
 8017ac2:	1e03      	subs	r3, r0, #0
 8017ac4:	d001      	beq.n	8017aca <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	e033      	b.n	8017b32 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017aca:	1dbb      	adds	r3, r7, #6
 8017acc:	881b      	ldrh	r3, [r3, #0]
 8017ace:	2b01      	cmp	r3, #1
 8017ad0:	d107      	bne.n	8017ae2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017ad2:	2308      	movs	r3, #8
 8017ad4:	18fb      	adds	r3, r7, r3
 8017ad6:	881b      	ldrh	r3, [r3, #0]
 8017ad8:	b2da      	uxtb	r2, r3
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	629a      	str	r2, [r3, #40]	@ 0x28
 8017ae0:	e019      	b.n	8017b16 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017ae2:	2308      	movs	r3, #8
 8017ae4:	18fb      	adds	r3, r7, r3
 8017ae6:	881b      	ldrh	r3, [r3, #0]
 8017ae8:	0a1b      	lsrs	r3, r3, #8
 8017aea:	b29b      	uxth	r3, r3
 8017aec:	b2da      	uxtb	r2, r3
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017af6:	6a39      	ldr	r1, [r7, #32]
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	0018      	movs	r0, r3
 8017afc:	f000 fe30 	bl	8018760 <I2C_WaitOnTXISFlagUntilTimeout>
 8017b00:	1e03      	subs	r3, r0, #0
 8017b02:	d001      	beq.n	8017b08 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017b04:	2301      	movs	r3, #1
 8017b06:	e014      	b.n	8017b32 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017b08:	2308      	movs	r3, #8
 8017b0a:	18fb      	adds	r3, r7, r3
 8017b0c:	881b      	ldrh	r3, [r3, #0]
 8017b0e:	b2da      	uxtb	r2, r3
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017b16:	6a3a      	ldr	r2, [r7, #32]
 8017b18:	68f8      	ldr	r0, [r7, #12]
 8017b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b1c:	9300      	str	r3, [sp, #0]
 8017b1e:	0013      	movs	r3, r2
 8017b20:	2200      	movs	r2, #0
 8017b22:	2140      	movs	r1, #64	@ 0x40
 8017b24:	f000 fdce 	bl	80186c4 <I2C_WaitOnFlagUntilTimeout>
 8017b28:	1e03      	subs	r3, r0, #0
 8017b2a:	d001      	beq.n	8017b30 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	e000      	b.n	8017b32 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017b30:	2300      	movs	r3, #0
}
 8017b32:	0018      	movs	r0, r3
 8017b34:	46bd      	mov	sp, r7
 8017b36:	b004      	add	sp, #16
 8017b38:	bdb0      	pop	{r4, r5, r7, pc}
 8017b3a:	46c0      	nop			@ (mov r8, r8)
 8017b3c:	80002000 	.word	0x80002000

08017b40 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017b40:	b5b0      	push	{r4, r5, r7, lr}
 8017b42:	b084      	sub	sp, #16
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
 8017b48:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	2241      	movs	r2, #65	@ 0x41
 8017b4e:	5c9b      	ldrb	r3, [r3, r2]
 8017b50:	b2db      	uxtb	r3, r3
 8017b52:	001a      	movs	r2, r3
 8017b54:	2328      	movs	r3, #40	@ 0x28
 8017b56:	4013      	ands	r3, r2
 8017b58:	2b28      	cmp	r3, #40	@ 0x28
 8017b5a:	d000      	beq.n	8017b5e <I2C_ITAddrCplt+0x1e>
 8017b5c:	e088      	b.n	8017c70 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	699b      	ldr	r3, [r3, #24]
 8017b64:	0c1b      	lsrs	r3, r3, #16
 8017b66:	b2da      	uxtb	r2, r3
 8017b68:	250f      	movs	r5, #15
 8017b6a:	197b      	adds	r3, r7, r5
 8017b6c:	2101      	movs	r1, #1
 8017b6e:	400a      	ands	r2, r1
 8017b70:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	699b      	ldr	r3, [r3, #24]
 8017b78:	0c1b      	lsrs	r3, r3, #16
 8017b7a:	b29a      	uxth	r2, r3
 8017b7c:	200c      	movs	r0, #12
 8017b7e:	183b      	adds	r3, r7, r0
 8017b80:	21fe      	movs	r1, #254	@ 0xfe
 8017b82:	400a      	ands	r2, r1
 8017b84:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	689b      	ldr	r3, [r3, #8]
 8017b8c:	b29a      	uxth	r2, r3
 8017b8e:	240a      	movs	r4, #10
 8017b90:	193b      	adds	r3, r7, r4
 8017b92:	0592      	lsls	r2, r2, #22
 8017b94:	0d92      	lsrs	r2, r2, #22
 8017b96:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	68db      	ldr	r3, [r3, #12]
 8017b9e:	b29a      	uxth	r2, r3
 8017ba0:	2308      	movs	r3, #8
 8017ba2:	18fb      	adds	r3, r7, r3
 8017ba4:	21fe      	movs	r1, #254	@ 0xfe
 8017ba6:	400a      	ands	r2, r1
 8017ba8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	68db      	ldr	r3, [r3, #12]
 8017bae:	2b02      	cmp	r3, #2
 8017bb0:	d148      	bne.n	8017c44 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017bb2:	0021      	movs	r1, r4
 8017bb4:	187b      	adds	r3, r7, r1
 8017bb6:	881b      	ldrh	r3, [r3, #0]
 8017bb8:	09db      	lsrs	r3, r3, #7
 8017bba:	b29a      	uxth	r2, r3
 8017bbc:	183b      	adds	r3, r7, r0
 8017bbe:	881b      	ldrh	r3, [r3, #0]
 8017bc0:	4053      	eors	r3, r2
 8017bc2:	b29b      	uxth	r3, r3
 8017bc4:	001a      	movs	r2, r3
 8017bc6:	2306      	movs	r3, #6
 8017bc8:	4013      	ands	r3, r2
 8017bca:	d120      	bne.n	8017c0e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017bcc:	183b      	adds	r3, r7, r0
 8017bce:	187a      	adds	r2, r7, r1
 8017bd0:	8812      	ldrh	r2, [r2, #0]
 8017bd2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017bd8:	1c5a      	adds	r2, r3, #1
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017be2:	2b02      	cmp	r3, #2
 8017be4:	d14c      	bne.n	8017c80 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	2200      	movs	r2, #0
 8017bea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	2208      	movs	r2, #8
 8017bf2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	2240      	movs	r2, #64	@ 0x40
 8017bf8:	2100      	movs	r1, #0
 8017bfa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017bfc:	183b      	adds	r3, r7, r0
 8017bfe:	881a      	ldrh	r2, [r3, #0]
 8017c00:	197b      	adds	r3, r7, r5
 8017c02:	7819      	ldrb	r1, [r3, #0]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	0018      	movs	r0, r3
 8017c08:	f7ff f914 	bl	8016e34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017c0c:	e038      	b.n	8017c80 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017c0e:	240c      	movs	r4, #12
 8017c10:	193b      	adds	r3, r7, r4
 8017c12:	2208      	movs	r2, #8
 8017c14:	18ba      	adds	r2, r7, r2
 8017c16:	8812      	ldrh	r2, [r2, #0]
 8017c18:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017c1a:	2380      	movs	r3, #128	@ 0x80
 8017c1c:	021a      	lsls	r2, r3, #8
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	0011      	movs	r1, r2
 8017c22:	0018      	movs	r0, r3
 8017c24:	f001 f868 	bl	8018cf8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2240      	movs	r2, #64	@ 0x40
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017c30:	193b      	adds	r3, r7, r4
 8017c32:	881a      	ldrh	r2, [r3, #0]
 8017c34:	230f      	movs	r3, #15
 8017c36:	18fb      	adds	r3, r7, r3
 8017c38:	7819      	ldrb	r1, [r3, #0]
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	0018      	movs	r0, r3
 8017c3e:	f7ff f8f9 	bl	8016e34 <HAL_I2C_AddrCallback>
}
 8017c42:	e01d      	b.n	8017c80 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017c44:	2380      	movs	r3, #128	@ 0x80
 8017c46:	021a      	lsls	r2, r3, #8
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	0011      	movs	r1, r2
 8017c4c:	0018      	movs	r0, r3
 8017c4e:	f001 f853 	bl	8018cf8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2240      	movs	r2, #64	@ 0x40
 8017c56:	2100      	movs	r1, #0
 8017c58:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017c5a:	230c      	movs	r3, #12
 8017c5c:	18fb      	adds	r3, r7, r3
 8017c5e:	881a      	ldrh	r2, [r3, #0]
 8017c60:	230f      	movs	r3, #15
 8017c62:	18fb      	adds	r3, r7, r3
 8017c64:	7819      	ldrb	r1, [r3, #0]
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	0018      	movs	r0, r3
 8017c6a:	f7ff f8e3 	bl	8016e34 <HAL_I2C_AddrCallback>
}
 8017c6e:	e007      	b.n	8017c80 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2208      	movs	r2, #8
 8017c76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2240      	movs	r2, #64	@ 0x40
 8017c7c:	2100      	movs	r1, #0
 8017c7e:	5499      	strb	r1, [r3, r2]
}
 8017c80:	46c0      	nop			@ (mov r8, r8)
 8017c82:	46bd      	mov	sp, r7
 8017c84:	b004      	add	sp, #16
 8017c86:	bdb0      	pop	{r4, r5, r7, pc}

08017c88 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	2242      	movs	r2, #66	@ 0x42
 8017c94:	2100      	movs	r1, #0
 8017c96:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2241      	movs	r2, #65	@ 0x41
 8017c9c:	5c9b      	ldrb	r3, [r3, r2]
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	2b21      	cmp	r3, #33	@ 0x21
 8017ca2:	d117      	bne.n	8017cd4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2241      	movs	r2, #65	@ 0x41
 8017ca8:	2120      	movs	r1, #32
 8017caa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	2211      	movs	r2, #17
 8017cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	2101      	movs	r1, #1
 8017cbc:	0018      	movs	r0, r3
 8017cbe:	f001 f81b 	bl	8018cf8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	2240      	movs	r2, #64	@ 0x40
 8017cc6:	2100      	movs	r1, #0
 8017cc8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	0018      	movs	r0, r3
 8017cce:	f7ff f891 	bl	8016df4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017cd2:	e016      	b.n	8017d02 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2241      	movs	r2, #65	@ 0x41
 8017cd8:	2120      	movs	r1, #32
 8017cda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2212      	movs	r2, #18
 8017ce0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	2102      	movs	r1, #2
 8017cec:	0018      	movs	r0, r3
 8017cee:	f001 f803 	bl	8018cf8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2240      	movs	r2, #64	@ 0x40
 8017cf6:	2100      	movs	r1, #0
 8017cf8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	0018      	movs	r0, r3
 8017cfe:	f7ff f881 	bl	8016e04 <HAL_I2C_MasterRxCpltCallback>
}
 8017d02:	46c0      	nop			@ (mov r8, r8)
 8017d04:	46bd      	mov	sp, r7
 8017d06:	b002      	add	sp, #8
 8017d08:	bd80      	pop	{r7, pc}
	...

08017d0c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b084      	sub	sp, #16
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	2242      	movs	r2, #66	@ 0x42
 8017d20:	2100      	movs	r1, #0
 8017d22:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	0b9b      	lsrs	r3, r3, #14
 8017d28:	001a      	movs	r2, r3
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	4013      	ands	r3, r2
 8017d2e:	d008      	beq.n	8017d42 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	4925      	ldr	r1, [pc, #148]	@ (8017dd0 <I2C_ITSlaveSeqCplt+0xc4>)
 8017d3c:	400a      	ands	r2, r1
 8017d3e:	601a      	str	r2, [r3, #0]
 8017d40:	e00d      	b.n	8017d5e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	0bdb      	lsrs	r3, r3, #15
 8017d46:	001a      	movs	r2, r3
 8017d48:	2301      	movs	r3, #1
 8017d4a:	4013      	ands	r3, r2
 8017d4c:	d007      	beq.n	8017d5e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	681a      	ldr	r2, [r3, #0]
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	491e      	ldr	r1, [pc, #120]	@ (8017dd4 <I2C_ITSlaveSeqCplt+0xc8>)
 8017d5a:	400a      	ands	r2, r1
 8017d5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2241      	movs	r2, #65	@ 0x41
 8017d62:	5c9b      	ldrb	r3, [r3, r2]
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	2b29      	cmp	r3, #41	@ 0x29
 8017d68:	d114      	bne.n	8017d94 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2241      	movs	r2, #65	@ 0x41
 8017d6e:	2128      	movs	r1, #40	@ 0x28
 8017d70:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2221      	movs	r2, #33	@ 0x21
 8017d76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2101      	movs	r1, #1
 8017d7c:	0018      	movs	r0, r3
 8017d7e:	f000 ffbb 	bl	8018cf8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2240      	movs	r2, #64	@ 0x40
 8017d86:	2100      	movs	r1, #0
 8017d88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	0018      	movs	r0, r3
 8017d8e:	f7ff f841 	bl	8016e14 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017d92:	e019      	b.n	8017dc8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2241      	movs	r2, #65	@ 0x41
 8017d98:	5c9b      	ldrb	r3, [r3, r2]
 8017d9a:	b2db      	uxtb	r3, r3
 8017d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d9e:	d113      	bne.n	8017dc8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	2241      	movs	r2, #65	@ 0x41
 8017da4:	2128      	movs	r1, #40	@ 0x28
 8017da6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2222      	movs	r2, #34	@ 0x22
 8017dac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2102      	movs	r1, #2
 8017db2:	0018      	movs	r0, r3
 8017db4:	f000 ffa0 	bl	8018cf8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2240      	movs	r2, #64	@ 0x40
 8017dbc:	2100      	movs	r1, #0
 8017dbe:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	0018      	movs	r0, r3
 8017dc4:	f7ff f82e 	bl	8016e24 <HAL_I2C_SlaveRxCpltCallback>
}
 8017dc8:	46c0      	nop			@ (mov r8, r8)
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	b004      	add	sp, #16
 8017dce:	bd80      	pop	{r7, pc}
 8017dd0:	ffffbfff 	.word	0xffffbfff
 8017dd4:	ffff7fff 	.word	0xffff7fff

08017dd8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b086      	sub	sp, #24
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	2220      	movs	r2, #32
 8017dec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	2241      	movs	r2, #65	@ 0x41
 8017df2:	5c9b      	ldrb	r3, [r3, r2]
 8017df4:	b2db      	uxtb	r3, r3
 8017df6:	2b21      	cmp	r3, #33	@ 0x21
 8017df8:	d108      	bne.n	8017e0c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2101      	movs	r1, #1
 8017dfe:	0018      	movs	r0, r3
 8017e00:	f000 ff7a 	bl	8018cf8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	2211      	movs	r2, #17
 8017e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8017e0a:	e00d      	b.n	8017e28 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	2241      	movs	r2, #65	@ 0x41
 8017e10:	5c9b      	ldrb	r3, [r3, r2]
 8017e12:	b2db      	uxtb	r3, r3
 8017e14:	2b22      	cmp	r3, #34	@ 0x22
 8017e16:	d107      	bne.n	8017e28 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	2102      	movs	r1, #2
 8017e1c:	0018      	movs	r0, r3
 8017e1e:	f000 ff6b 	bl	8018cf8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2212      	movs	r2, #18
 8017e26:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	685a      	ldr	r2, [r3, #4]
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	4950      	ldr	r1, [pc, #320]	@ (8017f74 <I2C_ITMasterCplt+0x19c>)
 8017e34:	400a      	ands	r2, r1
 8017e36:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	4a4d      	ldr	r2, [pc, #308]	@ (8017f78 <I2C_ITMasterCplt+0x1a0>)
 8017e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017e44:	697b      	ldr	r3, [r7, #20]
 8017e46:	091b      	lsrs	r3, r3, #4
 8017e48:	001a      	movs	r2, r3
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	4013      	ands	r3, r2
 8017e4e:	d009      	beq.n	8017e64 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	2210      	movs	r2, #16
 8017e56:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e5c:	2204      	movs	r2, #4
 8017e5e:	431a      	orrs	r2, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	2241      	movs	r2, #65	@ 0x41
 8017e68:	5c9b      	ldrb	r3, [r3, r2]
 8017e6a:	b2db      	uxtb	r3, r3
 8017e6c:	2b60      	cmp	r3, #96	@ 0x60
 8017e6e:	d10b      	bne.n	8017e88 <I2C_ITMasterCplt+0xb0>
 8017e70:	697b      	ldr	r3, [r7, #20]
 8017e72:	089b      	lsrs	r3, r3, #2
 8017e74:	001a      	movs	r2, r3
 8017e76:	2301      	movs	r3, #1
 8017e78:	4013      	ands	r3, r2
 8017e7a:	d005      	beq.n	8017e88 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e82:	b2db      	uxtb	r3, r3
 8017e84:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017e86:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	0018      	movs	r0, r3
 8017e8c:	f000 fb1f 	bl	80184ce <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e94:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2241      	movs	r2, #65	@ 0x41
 8017e9a:	5c9b      	ldrb	r3, [r3, r2]
 8017e9c:	b2db      	uxtb	r3, r3
 8017e9e:	2b60      	cmp	r3, #96	@ 0x60
 8017ea0:	d002      	beq.n	8017ea8 <I2C_ITMasterCplt+0xd0>
 8017ea2:	693b      	ldr	r3, [r7, #16]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d007      	beq.n	8017eb8 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	0011      	movs	r1, r2
 8017eb0:	0018      	movs	r0, r3
 8017eb2:	f000 f9e1 	bl	8018278 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017eb6:	e058      	b.n	8017f6a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	2241      	movs	r2, #65	@ 0x41
 8017ebc:	5c9b      	ldrb	r3, [r3, r2]
 8017ebe:	b2db      	uxtb	r3, r3
 8017ec0:	2b21      	cmp	r3, #33	@ 0x21
 8017ec2:	d126      	bne.n	8017f12 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	2241      	movs	r2, #65	@ 0x41
 8017ec8:	2120      	movs	r1, #32
 8017eca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	2242      	movs	r2, #66	@ 0x42
 8017ed6:	5c9b      	ldrb	r3, [r3, r2]
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	2b40      	cmp	r3, #64	@ 0x40
 8017edc:	d10c      	bne.n	8017ef8 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	2242      	movs	r2, #66	@ 0x42
 8017ee2:	2100      	movs	r1, #0
 8017ee4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2240      	movs	r2, #64	@ 0x40
 8017eea:	2100      	movs	r1, #0
 8017eec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	0018      	movs	r0, r3
 8017ef2:	f7fe ffb7 	bl	8016e64 <HAL_I2C_MemTxCpltCallback>
}
 8017ef6:	e038      	b.n	8017f6a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	2242      	movs	r2, #66	@ 0x42
 8017efc:	2100      	movs	r1, #0
 8017efe:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2240      	movs	r2, #64	@ 0x40
 8017f04:	2100      	movs	r1, #0
 8017f06:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	0018      	movs	r0, r3
 8017f0c:	f7fe ff72 	bl	8016df4 <HAL_I2C_MasterTxCpltCallback>
}
 8017f10:	e02b      	b.n	8017f6a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2241      	movs	r2, #65	@ 0x41
 8017f16:	5c9b      	ldrb	r3, [r3, r2]
 8017f18:	b2db      	uxtb	r3, r3
 8017f1a:	2b22      	cmp	r3, #34	@ 0x22
 8017f1c:	d125      	bne.n	8017f6a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	2241      	movs	r2, #65	@ 0x41
 8017f22:	2120      	movs	r1, #32
 8017f24:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2200      	movs	r2, #0
 8017f2a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2242      	movs	r2, #66	@ 0x42
 8017f30:	5c9b      	ldrb	r3, [r3, r2]
 8017f32:	b2db      	uxtb	r3, r3
 8017f34:	2b40      	cmp	r3, #64	@ 0x40
 8017f36:	d10c      	bne.n	8017f52 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	2242      	movs	r2, #66	@ 0x42
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	2240      	movs	r2, #64	@ 0x40
 8017f44:	2100      	movs	r1, #0
 8017f46:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	0018      	movs	r0, r3
 8017f4c:	f7fe ff92 	bl	8016e74 <HAL_I2C_MemRxCpltCallback>
}
 8017f50:	e00b      	b.n	8017f6a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2242      	movs	r2, #66	@ 0x42
 8017f56:	2100      	movs	r1, #0
 8017f58:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	2240      	movs	r2, #64	@ 0x40
 8017f5e:	2100      	movs	r1, #0
 8017f60:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	0018      	movs	r0, r3
 8017f66:	f7fe ff4d 	bl	8016e04 <HAL_I2C_MasterRxCpltCallback>
}
 8017f6a:	46c0      	nop			@ (mov r8, r8)
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	b006      	add	sp, #24
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	46c0      	nop			@ (mov r8, r8)
 8017f74:	fe00e800 	.word	0xfe00e800
 8017f78:	ffff0000 	.word	0xffff0000

08017f7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b086      	sub	sp, #24
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
 8017f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017f8e:	683b      	ldr	r3, [r7, #0]
 8017f90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017f92:	200f      	movs	r0, #15
 8017f94:	183b      	adds	r3, r7, r0
 8017f96:	687a      	ldr	r2, [r7, #4]
 8017f98:	2141      	movs	r1, #65	@ 0x41
 8017f9a:	5c52      	ldrb	r2, [r2, r1]
 8017f9c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	2220      	movs	r2, #32
 8017fa4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017fa6:	183b      	adds	r3, r7, r0
 8017fa8:	781b      	ldrb	r3, [r3, #0]
 8017faa:	2b21      	cmp	r3, #33	@ 0x21
 8017fac:	d003      	beq.n	8017fb6 <I2C_ITSlaveCplt+0x3a>
 8017fae:	183b      	adds	r3, r7, r0
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	2b29      	cmp	r3, #41	@ 0x29
 8017fb4:	d109      	bne.n	8017fca <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017fb6:	4a7d      	ldr	r2, [pc, #500]	@ (80181ac <I2C_ITSlaveCplt+0x230>)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	0011      	movs	r1, r2
 8017fbc:	0018      	movs	r0, r3
 8017fbe:	f000 fe9b 	bl	8018cf8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	2221      	movs	r2, #33	@ 0x21
 8017fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8017fc8:	e011      	b.n	8017fee <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017fca:	220f      	movs	r2, #15
 8017fcc:	18bb      	adds	r3, r7, r2
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	2b22      	cmp	r3, #34	@ 0x22
 8017fd2:	d003      	beq.n	8017fdc <I2C_ITSlaveCplt+0x60>
 8017fd4:	18bb      	adds	r3, r7, r2
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fda:	d108      	bne.n	8017fee <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017fdc:	4a74      	ldr	r2, [pc, #464]	@ (80181b0 <I2C_ITSlaveCplt+0x234>)
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	0011      	movs	r1, r2
 8017fe2:	0018      	movs	r0, r3
 8017fe4:	f000 fe88 	bl	8018cf8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	2222      	movs	r2, #34	@ 0x22
 8017fec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	685a      	ldr	r2, [r3, #4]
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	2180      	movs	r1, #128	@ 0x80
 8017ffa:	0209      	lsls	r1, r1, #8
 8017ffc:	430a      	orrs	r2, r1
 8017ffe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	685a      	ldr	r2, [r3, #4]
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	496a      	ldr	r1, [pc, #424]	@ (80181b4 <I2C_ITSlaveCplt+0x238>)
 801800c:	400a      	ands	r2, r1
 801800e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	0018      	movs	r0, r3
 8018014:	f000 fa5b 	bl	80184ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8018018:	693b      	ldr	r3, [r7, #16]
 801801a:	0b9b      	lsrs	r3, r3, #14
 801801c:	001a      	movs	r2, r3
 801801e:	2301      	movs	r3, #1
 8018020:	4013      	ands	r3, r2
 8018022:	d013      	beq.n	801804c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	681a      	ldr	r2, [r3, #0]
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	4962      	ldr	r1, [pc, #392]	@ (80181b8 <I2C_ITSlaveCplt+0x23c>)
 8018030:	400a      	ands	r2, r1
 8018032:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018038:	2b00      	cmp	r3, #0
 801803a:	d020      	beq.n	801807e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	b29a      	uxth	r2, r3
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801804a:	e018      	b.n	801807e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801804c:	693b      	ldr	r3, [r7, #16]
 801804e:	0bdb      	lsrs	r3, r3, #15
 8018050:	001a      	movs	r2, r3
 8018052:	2301      	movs	r3, #1
 8018054:	4013      	ands	r3, r2
 8018056:	d012      	beq.n	801807e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	681a      	ldr	r2, [r3, #0]
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	4956      	ldr	r1, [pc, #344]	@ (80181bc <I2C_ITSlaveCplt+0x240>)
 8018064:	400a      	ands	r2, r1
 8018066:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801806c:	2b00      	cmp	r3, #0
 801806e:	d006      	beq.n	801807e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	685b      	ldr	r3, [r3, #4]
 8018078:	b29a      	uxth	r2, r3
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801807e:	697b      	ldr	r3, [r7, #20]
 8018080:	089b      	lsrs	r3, r3, #2
 8018082:	001a      	movs	r2, r3
 8018084:	2301      	movs	r3, #1
 8018086:	4013      	ands	r3, r2
 8018088:	d020      	beq.n	80180cc <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	2204      	movs	r2, #4
 801808e:	4393      	bics	r3, r2
 8018090:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801809c:	b2d2      	uxtb	r2, r2
 801809e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180a4:	1c5a      	adds	r2, r3, #1
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d00c      	beq.n	80180cc <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80180b6:	3b01      	subs	r3, #1
 80180b8:	b29a      	uxth	r2, r3
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	3b01      	subs	r3, #1
 80180c6:	b29a      	uxth	r2, r3
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d005      	beq.n	80180e2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80180da:	2204      	movs	r2, #4
 80180dc:	431a      	orrs	r2, r3
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2242      	movs	r2, #66	@ 0x42
 80180e6:	2100      	movs	r1, #0
 80180e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	2200      	movs	r2, #0
 80180ee:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d013      	beq.n	8018120 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	0011      	movs	r1, r2
 8018100:	0018      	movs	r0, r3
 8018102:	f000 f8b9 	bl	8018278 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	2241      	movs	r2, #65	@ 0x41
 801810a:	5c9b      	ldrb	r3, [r3, r2]
 801810c:	b2db      	uxtb	r3, r3
 801810e:	2b28      	cmp	r3, #40	@ 0x28
 8018110:	d147      	bne.n	80181a2 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8018112:	697a      	ldr	r2, [r7, #20]
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	0011      	movs	r1, r2
 8018118:	0018      	movs	r0, r3
 801811a:	f000 f853 	bl	80181c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801811e:	e040      	b.n	80181a2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018124:	4a26      	ldr	r2, [pc, #152]	@ (80181c0 <I2C_ITSlaveCplt+0x244>)
 8018126:	4293      	cmp	r3, r2
 8018128:	d016      	beq.n	8018158 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	0018      	movs	r0, r3
 801812e:	f7ff fded 	bl	8017d0c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	4a22      	ldr	r2, [pc, #136]	@ (80181c0 <I2C_ITSlaveCplt+0x244>)
 8018136:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2241      	movs	r2, #65	@ 0x41
 801813c:	2120      	movs	r1, #32
 801813e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2200      	movs	r2, #0
 8018144:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2240      	movs	r2, #64	@ 0x40
 801814a:	2100      	movs	r1, #0
 801814c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	0018      	movs	r0, r3
 8018152:	f7fe fe7f 	bl	8016e54 <HAL_I2C_ListenCpltCallback>
}
 8018156:	e024      	b.n	80181a2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	2241      	movs	r2, #65	@ 0x41
 801815c:	5c9b      	ldrb	r3, [r3, r2]
 801815e:	b2db      	uxtb	r3, r3
 8018160:	2b22      	cmp	r3, #34	@ 0x22
 8018162:	d10f      	bne.n	8018184 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	2241      	movs	r2, #65	@ 0x41
 8018168:	2120      	movs	r1, #32
 801816a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2200      	movs	r2, #0
 8018170:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2240      	movs	r2, #64	@ 0x40
 8018176:	2100      	movs	r1, #0
 8018178:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	0018      	movs	r0, r3
 801817e:	f7fe fe51 	bl	8016e24 <HAL_I2C_SlaveRxCpltCallback>
}
 8018182:	e00e      	b.n	80181a2 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2241      	movs	r2, #65	@ 0x41
 8018188:	2120      	movs	r1, #32
 801818a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2200      	movs	r2, #0
 8018190:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2240      	movs	r2, #64	@ 0x40
 8018196:	2100      	movs	r1, #0
 8018198:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	0018      	movs	r0, r3
 801819e:	f7fe fe39 	bl	8016e14 <HAL_I2C_SlaveTxCpltCallback>
}
 80181a2:	46c0      	nop			@ (mov r8, r8)
 80181a4:	46bd      	mov	sp, r7
 80181a6:	b006      	add	sp, #24
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	46c0      	nop			@ (mov r8, r8)
 80181ac:	00008001 	.word	0x00008001
 80181b0:	00008002 	.word	0x00008002
 80181b4:	fe00e800 	.word	0xfe00e800
 80181b8:	ffffbfff 	.word	0xffffbfff
 80181bc:	ffff7fff 	.word	0xffff7fff
 80181c0:	ffff0000 	.word	0xffff0000

080181c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b082      	sub	sp, #8
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	4a27      	ldr	r2, [pc, #156]	@ (8018270 <I2C_ITListenCplt+0xac>)
 80181d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2200      	movs	r2, #0
 80181d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2241      	movs	r2, #65	@ 0x41
 80181de:	2120      	movs	r1, #32
 80181e0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	2242      	movs	r2, #66	@ 0x42
 80181e6:	2100      	movs	r1, #0
 80181e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2200      	movs	r2, #0
 80181ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	089b      	lsrs	r3, r3, #2
 80181f4:	001a      	movs	r2, r3
 80181f6:	2301      	movs	r3, #1
 80181f8:	4013      	ands	r3, r2
 80181fa:	d022      	beq.n	8018242 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018206:	b2d2      	uxtb	r2, r2
 8018208:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801820e:	1c5a      	adds	r2, r3, #1
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018218:	2b00      	cmp	r3, #0
 801821a:	d012      	beq.n	8018242 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018220:	3b01      	subs	r3, #1
 8018222:	b29a      	uxth	r2, r3
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801822c:	b29b      	uxth	r3, r3
 801822e:	3b01      	subs	r3, #1
 8018230:	b29a      	uxth	r2, r3
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801823a:	2204      	movs	r2, #4
 801823c:	431a      	orrs	r2, r3
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018242:	4a0c      	ldr	r2, [pc, #48]	@ (8018274 <I2C_ITListenCplt+0xb0>)
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	0011      	movs	r1, r2
 8018248:	0018      	movs	r0, r3
 801824a:	f000 fd55 	bl	8018cf8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2210      	movs	r2, #16
 8018254:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	2240      	movs	r2, #64	@ 0x40
 801825a:	2100      	movs	r1, #0
 801825c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	0018      	movs	r0, r3
 8018262:	f7fe fdf7 	bl	8016e54 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8018266:	46c0      	nop			@ (mov r8, r8)
 8018268:	46bd      	mov	sp, r7
 801826a:	b002      	add	sp, #8
 801826c:	bd80      	pop	{r7, pc}
 801826e:	46c0      	nop			@ (mov r8, r8)
 8018270:	ffff0000 	.word	0xffff0000
 8018274:	00008003 	.word	0x00008003

08018278 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b084      	sub	sp, #16
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
 8018280:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8018282:	200f      	movs	r0, #15
 8018284:	183b      	adds	r3, r7, r0
 8018286:	687a      	ldr	r2, [r7, #4]
 8018288:	2141      	movs	r1, #65	@ 0x41
 801828a:	5c52      	ldrb	r2, [r2, r1]
 801828c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	2242      	movs	r2, #66	@ 0x42
 8018292:	2100      	movs	r1, #0
 8018294:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	4a72      	ldr	r2, [pc, #456]	@ (8018464 <I2C_ITError+0x1ec>)
 801829a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2200      	movs	r2, #0
 80182a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	431a      	orrs	r2, r3
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80182ae:	183b      	adds	r3, r7, r0
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	2b28      	cmp	r3, #40	@ 0x28
 80182b4:	d007      	beq.n	80182c6 <I2C_ITError+0x4e>
 80182b6:	183b      	adds	r3, r7, r0
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	2b29      	cmp	r3, #41	@ 0x29
 80182bc:	d003      	beq.n	80182c6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80182be:	183b      	adds	r3, r7, r0
 80182c0:	781b      	ldrb	r3, [r3, #0]
 80182c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80182c4:	d10c      	bne.n	80182e0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	2103      	movs	r1, #3
 80182ca:	0018      	movs	r0, r3
 80182cc:	f000 fd14 	bl	8018cf8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2241      	movs	r2, #65	@ 0x41
 80182d4:	2128      	movs	r1, #40	@ 0x28
 80182d6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	4a63      	ldr	r2, [pc, #396]	@ (8018468 <I2C_ITError+0x1f0>)
 80182dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80182de:	e032      	b.n	8018346 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80182e0:	4a62      	ldr	r2, [pc, #392]	@ (801846c <I2C_ITError+0x1f4>)
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	0011      	movs	r1, r2
 80182e6:	0018      	movs	r0, r3
 80182e8:	f000 fd06 	bl	8018cf8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	0018      	movs	r0, r3
 80182f0:	f000 f8ed 	bl	80184ce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2241      	movs	r2, #65	@ 0x41
 80182f8:	5c9b      	ldrb	r3, [r3, r2]
 80182fa:	b2db      	uxtb	r3, r3
 80182fc:	2b60      	cmp	r3, #96	@ 0x60
 80182fe:	d01f      	beq.n	8018340 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	2241      	movs	r2, #65	@ 0x41
 8018304:	2120      	movs	r1, #32
 8018306:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	699b      	ldr	r3, [r3, #24]
 801830e:	2220      	movs	r2, #32
 8018310:	4013      	ands	r3, r2
 8018312:	2b20      	cmp	r3, #32
 8018314:	d114      	bne.n	8018340 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	699b      	ldr	r3, [r3, #24]
 801831c:	2210      	movs	r2, #16
 801831e:	4013      	ands	r3, r2
 8018320:	2b10      	cmp	r3, #16
 8018322:	d109      	bne.n	8018338 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	2210      	movs	r2, #16
 801832a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018330:	2204      	movs	r2, #4
 8018332:	431a      	orrs	r2, r3
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	2220      	movs	r2, #32
 801833e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	2200      	movs	r2, #0
 8018344:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801834a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018350:	2b00      	cmp	r3, #0
 8018352:	d03b      	beq.n	80183cc <I2C_ITError+0x154>
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	2b11      	cmp	r3, #17
 8018358:	d002      	beq.n	8018360 <I2C_ITError+0xe8>
 801835a:	68bb      	ldr	r3, [r7, #8]
 801835c:	2b21      	cmp	r3, #33	@ 0x21
 801835e:	d135      	bne.n	80183cc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	681a      	ldr	r2, [r3, #0]
 8018366:	2380      	movs	r3, #128	@ 0x80
 8018368:	01db      	lsls	r3, r3, #7
 801836a:	401a      	ands	r2, r3
 801836c:	2380      	movs	r3, #128	@ 0x80
 801836e:	01db      	lsls	r3, r3, #7
 8018370:	429a      	cmp	r2, r3
 8018372:	d107      	bne.n	8018384 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	681a      	ldr	r2, [r3, #0]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	493c      	ldr	r1, [pc, #240]	@ (8018470 <I2C_ITError+0x1f8>)
 8018380:	400a      	ands	r2, r1
 8018382:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018388:	0018      	movs	r0, r3
 801838a:	f7fd f9bc 	bl	8015706 <HAL_DMA_GetState>
 801838e:	0003      	movs	r3, r0
 8018390:	2b01      	cmp	r3, #1
 8018392:	d016      	beq.n	80183c2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018398:	4a36      	ldr	r2, [pc, #216]	@ (8018474 <I2C_ITError+0x1fc>)
 801839a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	2240      	movs	r2, #64	@ 0x40
 80183a0:	2100      	movs	r1, #0
 80183a2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183a8:	0018      	movs	r0, r3
 80183aa:	f7fd f8b7 	bl	801551c <HAL_DMA_Abort_IT>
 80183ae:	1e03      	subs	r3, r0, #0
 80183b0:	d051      	beq.n	8018456 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183bc:	0018      	movs	r0, r3
 80183be:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80183c0:	e049      	b.n	8018456 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	0018      	movs	r0, r3
 80183c6:	f000 f859 	bl	801847c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80183ca:	e044      	b.n	8018456 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d03b      	beq.n	801844c <I2C_ITError+0x1d4>
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	2b12      	cmp	r3, #18
 80183d8:	d002      	beq.n	80183e0 <I2C_ITError+0x168>
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	2b22      	cmp	r3, #34	@ 0x22
 80183de:	d135      	bne.n	801844c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	681a      	ldr	r2, [r3, #0]
 80183e6:	2380      	movs	r3, #128	@ 0x80
 80183e8:	021b      	lsls	r3, r3, #8
 80183ea:	401a      	ands	r2, r3
 80183ec:	2380      	movs	r3, #128	@ 0x80
 80183ee:	021b      	lsls	r3, r3, #8
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d107      	bne.n	8018404 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	491e      	ldr	r1, [pc, #120]	@ (8018478 <I2C_ITError+0x200>)
 8018400:	400a      	ands	r2, r1
 8018402:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018408:	0018      	movs	r0, r3
 801840a:	f7fd f97c 	bl	8015706 <HAL_DMA_GetState>
 801840e:	0003      	movs	r3, r0
 8018410:	2b01      	cmp	r3, #1
 8018412:	d016      	beq.n	8018442 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018418:	4a16      	ldr	r2, [pc, #88]	@ (8018474 <I2C_ITError+0x1fc>)
 801841a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2240      	movs	r2, #64	@ 0x40
 8018420:	2100      	movs	r1, #0
 8018422:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018428:	0018      	movs	r0, r3
 801842a:	f7fd f877 	bl	801551c <HAL_DMA_Abort_IT>
 801842e:	1e03      	subs	r3, r0, #0
 8018430:	d013      	beq.n	801845a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801843c:	0018      	movs	r0, r3
 801843e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018440:	e00b      	b.n	801845a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	0018      	movs	r0, r3
 8018446:	f000 f819 	bl	801847c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801844a:	e006      	b.n	801845a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	0018      	movs	r0, r3
 8018450:	f000 f814 	bl	801847c <I2C_TreatErrorCallback>
  }
}
 8018454:	e002      	b.n	801845c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018456:	46c0      	nop			@ (mov r8, r8)
 8018458:	e000      	b.n	801845c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801845a:	46c0      	nop			@ (mov r8, r8)
}
 801845c:	46c0      	nop			@ (mov r8, r8)
 801845e:	46bd      	mov	sp, r7
 8018460:	b004      	add	sp, #16
 8018462:	bd80      	pop	{r7, pc}
 8018464:	ffff0000 	.word	0xffff0000
 8018468:	08017129 	.word	0x08017129
 801846c:	00008003 	.word	0x00008003
 8018470:	ffffbfff 	.word	0xffffbfff
 8018474:	08018687 	.word	0x08018687
 8018478:	ffff7fff 	.word	0xffff7fff

0801847c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b082      	sub	sp, #8
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2241      	movs	r2, #65	@ 0x41
 8018488:	5c9b      	ldrb	r3, [r3, r2]
 801848a:	b2db      	uxtb	r3, r3
 801848c:	2b60      	cmp	r3, #96	@ 0x60
 801848e:	d10f      	bne.n	80184b0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	2241      	movs	r2, #65	@ 0x41
 8018494:	2120      	movs	r1, #32
 8018496:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2200      	movs	r2, #0
 801849c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	2240      	movs	r2, #64	@ 0x40
 80184a2:	2100      	movs	r1, #0
 80184a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	0018      	movs	r0, r3
 80184aa:	f7fe fcf3 	bl	8016e94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80184ae:	e00a      	b.n	80184c6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	2200      	movs	r2, #0
 80184b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	2240      	movs	r2, #64	@ 0x40
 80184ba:	2100      	movs	r1, #0
 80184bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	0018      	movs	r0, r3
 80184c2:	f7fe fcdf 	bl	8016e84 <HAL_I2C_ErrorCallback>
}
 80184c6:	46c0      	nop			@ (mov r8, r8)
 80184c8:	46bd      	mov	sp, r7
 80184ca:	b002      	add	sp, #8
 80184cc:	bd80      	pop	{r7, pc}

080184ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80184ce:	b580      	push	{r7, lr}
 80184d0:	b082      	sub	sp, #8
 80184d2:	af00      	add	r7, sp, #0
 80184d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	699b      	ldr	r3, [r3, #24]
 80184dc:	2202      	movs	r2, #2
 80184de:	4013      	ands	r3, r2
 80184e0:	2b02      	cmp	r3, #2
 80184e2:	d103      	bne.n	80184ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	2200      	movs	r2, #0
 80184ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	699b      	ldr	r3, [r3, #24]
 80184f2:	2201      	movs	r2, #1
 80184f4:	4013      	ands	r3, r2
 80184f6:	2b01      	cmp	r3, #1
 80184f8:	d007      	beq.n	801850a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	699a      	ldr	r2, [r3, #24]
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	2101      	movs	r1, #1
 8018506:	430a      	orrs	r2, r1
 8018508:	619a      	str	r2, [r3, #24]
  }
}
 801850a:	46c0      	nop			@ (mov r8, r8)
 801850c:	46bd      	mov	sp, r7
 801850e:	b002      	add	sp, #8
 8018510:	bd80      	pop	{r7, pc}
	...

08018514 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018520:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	4920      	ldr	r1, [pc, #128]	@ (80185b0 <I2C_DMAMasterTransmitCplt+0x9c>)
 801852e:	400a      	ands	r2, r1
 8018530:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018536:	b29b      	uxth	r3, r3
 8018538:	2b00      	cmp	r3, #0
 801853a:	d105      	bne.n	8018548 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	2120      	movs	r1, #32
 8018540:	0018      	movs	r0, r3
 8018542:	f000 fb4b 	bl	8018bdc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8018546:	e02e      	b.n	80185a6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018550:	189a      	adds	r2, r3, r2
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801855a:	b29b      	uxth	r3, r3
 801855c:	2bff      	cmp	r3, #255	@ 0xff
 801855e:	d903      	bls.n	8018568 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	22ff      	movs	r2, #255	@ 0xff
 8018564:	851a      	strh	r2, [r3, #40]	@ 0x28
 8018566:	e004      	b.n	8018572 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801856c:	b29a      	uxth	r2, r3
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801857a:	0019      	movs	r1, r3
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	3328      	adds	r3, #40	@ 0x28
 8018582:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018588:	f7fc ff22 	bl	80153d0 <HAL_DMA_Start_IT>
 801858c:	1e03      	subs	r3, r0, #0
 801858e:	d005      	beq.n	801859c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	2110      	movs	r1, #16
 8018594:	0018      	movs	r0, r3
 8018596:	f7ff fe6f 	bl	8018278 <I2C_ITError>
}
 801859a:	e004      	b.n	80185a6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2140      	movs	r1, #64	@ 0x40
 80185a0:	0018      	movs	r0, r3
 80185a2:	f000 fb1b 	bl	8018bdc <I2C_Enable_IRQ>
}
 80185a6:	46c0      	nop			@ (mov r8, r8)
 80185a8:	46bd      	mov	sp, r7
 80185aa:	b004      	add	sp, #16
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	46c0      	nop			@ (mov r8, r8)
 80185b0:	ffffbfff 	.word	0xffffbfff

080185b4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b084      	sub	sp, #16
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185c0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	4920      	ldr	r1, [pc, #128]	@ (8018650 <I2C_DMAMasterReceiveCplt+0x9c>)
 80185ce:	400a      	ands	r2, r1
 80185d0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d105      	bne.n	80185e8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	2120      	movs	r1, #32
 80185e0:	0018      	movs	r0, r3
 80185e2:	f000 fafb 	bl	8018bdc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80185e6:	e02e      	b.n	8018646 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185ec:	68fa      	ldr	r2, [r7, #12]
 80185ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80185f0:	189a      	adds	r2, r3, r2
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	2bff      	cmp	r3, #255	@ 0xff
 80185fe:	d903      	bls.n	8018608 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	22ff      	movs	r2, #255	@ 0xff
 8018604:	851a      	strh	r2, [r3, #40]	@ 0x28
 8018606:	e004      	b.n	8018612 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801860c:	b29a      	uxth	r2, r3
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	3324      	adds	r3, #36	@ 0x24
 801861c:	0019      	movs	r1, r3
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018622:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018628:	f7fc fed2 	bl	80153d0 <HAL_DMA_Start_IT>
 801862c:	1e03      	subs	r3, r0, #0
 801862e:	d005      	beq.n	801863c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	2110      	movs	r1, #16
 8018634:	0018      	movs	r0, r3
 8018636:	f7ff fe1f 	bl	8018278 <I2C_ITError>
}
 801863a:	e004      	b.n	8018646 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	2140      	movs	r1, #64	@ 0x40
 8018640:	0018      	movs	r0, r3
 8018642:	f000 facb 	bl	8018bdc <I2C_Enable_IRQ>
}
 8018646:	46c0      	nop			@ (mov r8, r8)
 8018648:	46bd      	mov	sp, r7
 801864a:	b004      	add	sp, #16
 801864c:	bd80      	pop	{r7, pc}
 801864e:	46c0      	nop			@ (mov r8, r8)
 8018650:	ffff7fff 	.word	0xffff7fff

08018654 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018654:	b580      	push	{r7, lr}
 8018656:	b084      	sub	sp, #16
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018660:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	685a      	ldr	r2, [r3, #4]
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	2180      	movs	r1, #128	@ 0x80
 801866e:	0209      	lsls	r1, r1, #8
 8018670:	430a      	orrs	r2, r1
 8018672:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2110      	movs	r1, #16
 8018678:	0018      	movs	r0, r3
 801867a:	f7ff fdfd 	bl	8018278 <I2C_ITError>
}
 801867e:	46c0      	nop			@ (mov r8, r8)
 8018680:	46bd      	mov	sp, r7
 8018682:	b004      	add	sp, #16
 8018684:	bd80      	pop	{r7, pc}

08018686 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018686:	b580      	push	{r7, lr}
 8018688:	b084      	sub	sp, #16
 801868a:	af00      	add	r7, sp, #0
 801868c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018692:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018698:	2b00      	cmp	r3, #0
 801869a:	d003      	beq.n	80186a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80186a0:	2200      	movs	r2, #0
 80186a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d003      	beq.n	80186b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186b0:	2200      	movs	r2, #0
 80186b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	0018      	movs	r0, r3
 80186b8:	f7ff fee0 	bl	801847c <I2C_TreatErrorCallback>
}
 80186bc:	46c0      	nop			@ (mov r8, r8)
 80186be:	46bd      	mov	sp, r7
 80186c0:	b004      	add	sp, #16
 80186c2:	bd80      	pop	{r7, pc}

080186c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b084      	sub	sp, #16
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	60f8      	str	r0, [r7, #12]
 80186cc:	60b9      	str	r1, [r7, #8]
 80186ce:	603b      	str	r3, [r7, #0]
 80186d0:	1dfb      	adds	r3, r7, #7
 80186d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80186d4:	e030      	b.n	8018738 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	3301      	adds	r3, #1
 80186da:	d02d      	beq.n	8018738 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80186dc:	f7fc f95a 	bl	8014994 <HAL_GetTick>
 80186e0:	0002      	movs	r2, r0
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	1ad3      	subs	r3, r2, r3
 80186e6:	683a      	ldr	r2, [r7, #0]
 80186e8:	429a      	cmp	r2, r3
 80186ea:	d302      	bcc.n	80186f2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80186ec:	683b      	ldr	r3, [r7, #0]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d122      	bne.n	8018738 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	699b      	ldr	r3, [r3, #24]
 80186f8:	68ba      	ldr	r2, [r7, #8]
 80186fa:	4013      	ands	r3, r2
 80186fc:	68ba      	ldr	r2, [r7, #8]
 80186fe:	1ad3      	subs	r3, r2, r3
 8018700:	425a      	negs	r2, r3
 8018702:	4153      	adcs	r3, r2
 8018704:	b2db      	uxtb	r3, r3
 8018706:	001a      	movs	r2, r3
 8018708:	1dfb      	adds	r3, r7, #7
 801870a:	781b      	ldrb	r3, [r3, #0]
 801870c:	429a      	cmp	r2, r3
 801870e:	d113      	bne.n	8018738 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018714:	2220      	movs	r2, #32
 8018716:	431a      	orrs	r2, r3
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2241      	movs	r2, #65	@ 0x41
 8018720:	2120      	movs	r1, #32
 8018722:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2242      	movs	r2, #66	@ 0x42
 8018728:	2100      	movs	r1, #0
 801872a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2240      	movs	r2, #64	@ 0x40
 8018730:	2100      	movs	r1, #0
 8018732:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8018734:	2301      	movs	r3, #1
 8018736:	e00f      	b.n	8018758 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	699b      	ldr	r3, [r3, #24]
 801873e:	68ba      	ldr	r2, [r7, #8]
 8018740:	4013      	ands	r3, r2
 8018742:	68ba      	ldr	r2, [r7, #8]
 8018744:	1ad3      	subs	r3, r2, r3
 8018746:	425a      	negs	r2, r3
 8018748:	4153      	adcs	r3, r2
 801874a:	b2db      	uxtb	r3, r3
 801874c:	001a      	movs	r2, r3
 801874e:	1dfb      	adds	r3, r7, #7
 8018750:	781b      	ldrb	r3, [r3, #0]
 8018752:	429a      	cmp	r2, r3
 8018754:	d0bf      	beq.n	80186d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018756:	2300      	movs	r3, #0
}
 8018758:	0018      	movs	r0, r3
 801875a:	46bd      	mov	sp, r7
 801875c:	b004      	add	sp, #16
 801875e:	bd80      	pop	{r7, pc}

08018760 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b084      	sub	sp, #16
 8018764:	af00      	add	r7, sp, #0
 8018766:	60f8      	str	r0, [r7, #12]
 8018768:	60b9      	str	r1, [r7, #8]
 801876a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801876c:	e032      	b.n	80187d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801876e:	687a      	ldr	r2, [r7, #4]
 8018770:	68b9      	ldr	r1, [r7, #8]
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	0018      	movs	r0, r3
 8018776:	f000 f8ff 	bl	8018978 <I2C_IsErrorOccurred>
 801877a:	1e03      	subs	r3, r0, #0
 801877c:	d001      	beq.n	8018782 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801877e:	2301      	movs	r3, #1
 8018780:	e030      	b.n	80187e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018782:	68bb      	ldr	r3, [r7, #8]
 8018784:	3301      	adds	r3, #1
 8018786:	d025      	beq.n	80187d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018788:	f7fc f904 	bl	8014994 <HAL_GetTick>
 801878c:	0002      	movs	r2, r0
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	1ad3      	subs	r3, r2, r3
 8018792:	68ba      	ldr	r2, [r7, #8]
 8018794:	429a      	cmp	r2, r3
 8018796:	d302      	bcc.n	801879e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8018798:	68bb      	ldr	r3, [r7, #8]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d11a      	bne.n	80187d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	699b      	ldr	r3, [r3, #24]
 80187a4:	2202      	movs	r2, #2
 80187a6:	4013      	ands	r3, r2
 80187a8:	2b02      	cmp	r3, #2
 80187aa:	d013      	beq.n	80187d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187b0:	2220      	movs	r2, #32
 80187b2:	431a      	orrs	r2, r3
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	2241      	movs	r2, #65	@ 0x41
 80187bc:	2120      	movs	r1, #32
 80187be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	2242      	movs	r2, #66	@ 0x42
 80187c4:	2100      	movs	r1, #0
 80187c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2240      	movs	r2, #64	@ 0x40
 80187cc:	2100      	movs	r1, #0
 80187ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80187d0:	2301      	movs	r3, #1
 80187d2:	e007      	b.n	80187e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	699b      	ldr	r3, [r3, #24]
 80187da:	2202      	movs	r2, #2
 80187dc:	4013      	ands	r3, r2
 80187de:	2b02      	cmp	r3, #2
 80187e0:	d1c5      	bne.n	801876e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80187e2:	2300      	movs	r3, #0
}
 80187e4:	0018      	movs	r0, r3
 80187e6:	46bd      	mov	sp, r7
 80187e8:	b004      	add	sp, #16
 80187ea:	bd80      	pop	{r7, pc}

080187ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b084      	sub	sp, #16
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	60f8      	str	r0, [r7, #12]
 80187f4:	60b9      	str	r1, [r7, #8]
 80187f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80187f8:	e02f      	b.n	801885a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80187fa:	687a      	ldr	r2, [r7, #4]
 80187fc:	68b9      	ldr	r1, [r7, #8]
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	0018      	movs	r0, r3
 8018802:	f000 f8b9 	bl	8018978 <I2C_IsErrorOccurred>
 8018806:	1e03      	subs	r3, r0, #0
 8018808:	d001      	beq.n	801880e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801880a:	2301      	movs	r3, #1
 801880c:	e02d      	b.n	801886a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801880e:	f7fc f8c1 	bl	8014994 <HAL_GetTick>
 8018812:	0002      	movs	r2, r0
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	1ad3      	subs	r3, r2, r3
 8018818:	68ba      	ldr	r2, [r7, #8]
 801881a:	429a      	cmp	r2, r3
 801881c:	d302      	bcc.n	8018824 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d11a      	bne.n	801885a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	699b      	ldr	r3, [r3, #24]
 801882a:	2220      	movs	r2, #32
 801882c:	4013      	ands	r3, r2
 801882e:	2b20      	cmp	r3, #32
 8018830:	d013      	beq.n	801885a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018836:	2220      	movs	r2, #32
 8018838:	431a      	orrs	r2, r3
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2241      	movs	r2, #65	@ 0x41
 8018842:	2120      	movs	r1, #32
 8018844:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	2242      	movs	r2, #66	@ 0x42
 801884a:	2100      	movs	r1, #0
 801884c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	2240      	movs	r2, #64	@ 0x40
 8018852:	2100      	movs	r1, #0
 8018854:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018856:	2301      	movs	r3, #1
 8018858:	e007      	b.n	801886a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	699b      	ldr	r3, [r3, #24]
 8018860:	2220      	movs	r2, #32
 8018862:	4013      	ands	r3, r2
 8018864:	2b20      	cmp	r3, #32
 8018866:	d1c8      	bne.n	80187fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018868:	2300      	movs	r3, #0
}
 801886a:	0018      	movs	r0, r3
 801886c:	46bd      	mov	sp, r7
 801886e:	b004      	add	sp, #16
 8018870:	bd80      	pop	{r7, pc}
	...

08018874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b084      	sub	sp, #16
 8018878:	af00      	add	r7, sp, #0
 801887a:	60f8      	str	r0, [r7, #12]
 801887c:	60b9      	str	r1, [r7, #8]
 801887e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018880:	e06b      	b.n	801895a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018882:	687a      	ldr	r2, [r7, #4]
 8018884:	68b9      	ldr	r1, [r7, #8]
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	0018      	movs	r0, r3
 801888a:	f000 f875 	bl	8018978 <I2C_IsErrorOccurred>
 801888e:	1e03      	subs	r3, r0, #0
 8018890:	d001      	beq.n	8018896 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018892:	2301      	movs	r3, #1
 8018894:	e069      	b.n	801896a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	699b      	ldr	r3, [r3, #24]
 801889c:	2220      	movs	r2, #32
 801889e:	4013      	ands	r3, r2
 80188a0:	2b20      	cmp	r3, #32
 80188a2:	d138      	bne.n	8018916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	699b      	ldr	r3, [r3, #24]
 80188aa:	2204      	movs	r2, #4
 80188ac:	4013      	ands	r3, r2
 80188ae:	2b04      	cmp	r3, #4
 80188b0:	d105      	bne.n	80188be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d001      	beq.n	80188be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80188ba:	2300      	movs	r3, #0
 80188bc:	e055      	b.n	801896a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	699b      	ldr	r3, [r3, #24]
 80188c4:	2210      	movs	r2, #16
 80188c6:	4013      	ands	r3, r2
 80188c8:	2b10      	cmp	r3, #16
 80188ca:	d107      	bne.n	80188dc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	2210      	movs	r2, #16
 80188d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	2204      	movs	r2, #4
 80188d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80188da:	e002      	b.n	80188e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	2200      	movs	r2, #0
 80188e0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	2220      	movs	r2, #32
 80188e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	685a      	ldr	r2, [r3, #4]
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	491f      	ldr	r1, [pc, #124]	@ (8018974 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80188f6:	400a      	ands	r2, r1
 80188f8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	2241      	movs	r2, #65	@ 0x41
 80188fe:	2120      	movs	r1, #32
 8018900:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	2242      	movs	r2, #66	@ 0x42
 8018906:	2100      	movs	r1, #0
 8018908:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	2240      	movs	r2, #64	@ 0x40
 801890e:	2100      	movs	r1, #0
 8018910:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018912:	2301      	movs	r3, #1
 8018914:	e029      	b.n	801896a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018916:	f7fc f83d 	bl	8014994 <HAL_GetTick>
 801891a:	0002      	movs	r2, r0
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	1ad3      	subs	r3, r2, r3
 8018920:	68ba      	ldr	r2, [r7, #8]
 8018922:	429a      	cmp	r2, r3
 8018924:	d302      	bcc.n	801892c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d116      	bne.n	801895a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	699b      	ldr	r3, [r3, #24]
 8018932:	2204      	movs	r2, #4
 8018934:	4013      	ands	r3, r2
 8018936:	2b04      	cmp	r3, #4
 8018938:	d00f      	beq.n	801895a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801893e:	2220      	movs	r2, #32
 8018940:	431a      	orrs	r2, r3
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	2241      	movs	r2, #65	@ 0x41
 801894a:	2120      	movs	r1, #32
 801894c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	2240      	movs	r2, #64	@ 0x40
 8018952:	2100      	movs	r1, #0
 8018954:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018956:	2301      	movs	r3, #1
 8018958:	e007      	b.n	801896a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	699b      	ldr	r3, [r3, #24]
 8018960:	2204      	movs	r2, #4
 8018962:	4013      	ands	r3, r2
 8018964:	2b04      	cmp	r3, #4
 8018966:	d18c      	bne.n	8018882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018968:	2300      	movs	r3, #0
}
 801896a:	0018      	movs	r0, r3
 801896c:	46bd      	mov	sp, r7
 801896e:	b004      	add	sp, #16
 8018970:	bd80      	pop	{r7, pc}
 8018972:	46c0      	nop			@ (mov r8, r8)
 8018974:	fe00e800 	.word	0xfe00e800

08018978 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b08a      	sub	sp, #40	@ 0x28
 801897c:	af00      	add	r7, sp, #0
 801897e:	60f8      	str	r0, [r7, #12]
 8018980:	60b9      	str	r1, [r7, #8]
 8018982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018984:	2327      	movs	r3, #39	@ 0x27
 8018986:	18fb      	adds	r3, r7, r3
 8018988:	2200      	movs	r2, #0
 801898a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	699b      	ldr	r3, [r3, #24]
 8018992:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018994:	2300      	movs	r3, #0
 8018996:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801899c:	69bb      	ldr	r3, [r7, #24]
 801899e:	2210      	movs	r2, #16
 80189a0:	4013      	ands	r3, r2
 80189a2:	d100      	bne.n	80189a6 <I2C_IsErrorOccurred+0x2e>
 80189a4:	e079      	b.n	8018a9a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	2210      	movs	r2, #16
 80189ac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80189ae:	e057      	b.n	8018a60 <I2C_IsErrorOccurred+0xe8>
 80189b0:	2227      	movs	r2, #39	@ 0x27
 80189b2:	18bb      	adds	r3, r7, r2
 80189b4:	18ba      	adds	r2, r7, r2
 80189b6:	7812      	ldrb	r2, [r2, #0]
 80189b8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80189ba:	68bb      	ldr	r3, [r7, #8]
 80189bc:	3301      	adds	r3, #1
 80189be:	d04f      	beq.n	8018a60 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80189c0:	f7fb ffe8 	bl	8014994 <HAL_GetTick>
 80189c4:	0002      	movs	r2, r0
 80189c6:	69fb      	ldr	r3, [r7, #28]
 80189c8:	1ad3      	subs	r3, r2, r3
 80189ca:	68ba      	ldr	r2, [r7, #8]
 80189cc:	429a      	cmp	r2, r3
 80189ce:	d302      	bcc.n	80189d6 <I2C_IsErrorOccurred+0x5e>
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d144      	bne.n	8018a60 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	685a      	ldr	r2, [r3, #4]
 80189dc:	2380      	movs	r3, #128	@ 0x80
 80189de:	01db      	lsls	r3, r3, #7
 80189e0:	4013      	ands	r3, r2
 80189e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80189e4:	2013      	movs	r0, #19
 80189e6:	183b      	adds	r3, r7, r0
 80189e8:	68fa      	ldr	r2, [r7, #12]
 80189ea:	2142      	movs	r1, #66	@ 0x42
 80189ec:	5c52      	ldrb	r2, [r2, r1]
 80189ee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	699a      	ldr	r2, [r3, #24]
 80189f6:	2380      	movs	r3, #128	@ 0x80
 80189f8:	021b      	lsls	r3, r3, #8
 80189fa:	401a      	ands	r2, r3
 80189fc:	2380      	movs	r3, #128	@ 0x80
 80189fe:	021b      	lsls	r3, r3, #8
 8018a00:	429a      	cmp	r2, r3
 8018a02:	d126      	bne.n	8018a52 <I2C_IsErrorOccurred+0xda>
 8018a04:	697a      	ldr	r2, [r7, #20]
 8018a06:	2380      	movs	r3, #128	@ 0x80
 8018a08:	01db      	lsls	r3, r3, #7
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	d021      	beq.n	8018a52 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8018a0e:	183b      	adds	r3, r7, r0
 8018a10:	781b      	ldrb	r3, [r3, #0]
 8018a12:	2b20      	cmp	r3, #32
 8018a14:	d01d      	beq.n	8018a52 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	685a      	ldr	r2, [r3, #4]
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2180      	movs	r1, #128	@ 0x80
 8018a22:	01c9      	lsls	r1, r1, #7
 8018a24:	430a      	orrs	r2, r1
 8018a26:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018a28:	f7fb ffb4 	bl	8014994 <HAL_GetTick>
 8018a2c:	0003      	movs	r3, r0
 8018a2e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018a30:	e00f      	b.n	8018a52 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018a32:	f7fb ffaf 	bl	8014994 <HAL_GetTick>
 8018a36:	0002      	movs	r2, r0
 8018a38:	69fb      	ldr	r3, [r7, #28]
 8018a3a:	1ad3      	subs	r3, r2, r3
 8018a3c:	2b19      	cmp	r3, #25
 8018a3e:	d908      	bls.n	8018a52 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8018a40:	6a3b      	ldr	r3, [r7, #32]
 8018a42:	2220      	movs	r2, #32
 8018a44:	4313      	orrs	r3, r2
 8018a46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018a48:	2327      	movs	r3, #39	@ 0x27
 8018a4a:	18fb      	adds	r3, r7, r3
 8018a4c:	2201      	movs	r2, #1
 8018a4e:	701a      	strb	r2, [r3, #0]

              break;
 8018a50:	e006      	b.n	8018a60 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	699b      	ldr	r3, [r3, #24]
 8018a58:	2220      	movs	r2, #32
 8018a5a:	4013      	ands	r3, r2
 8018a5c:	2b20      	cmp	r3, #32
 8018a5e:	d1e8      	bne.n	8018a32 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	699b      	ldr	r3, [r3, #24]
 8018a66:	2220      	movs	r2, #32
 8018a68:	4013      	ands	r3, r2
 8018a6a:	2b20      	cmp	r3, #32
 8018a6c:	d004      	beq.n	8018a78 <I2C_IsErrorOccurred+0x100>
 8018a6e:	2327      	movs	r3, #39	@ 0x27
 8018a70:	18fb      	adds	r3, r7, r3
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d09b      	beq.n	80189b0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018a78:	2327      	movs	r3, #39	@ 0x27
 8018a7a:	18fb      	adds	r3, r7, r3
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d103      	bne.n	8018a8a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	2220      	movs	r2, #32
 8018a88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018a8a:	6a3b      	ldr	r3, [r7, #32]
 8018a8c:	2204      	movs	r2, #4
 8018a8e:	4313      	orrs	r3, r2
 8018a90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018a92:	2327      	movs	r3, #39	@ 0x27
 8018a94:	18fb      	adds	r3, r7, r3
 8018a96:	2201      	movs	r2, #1
 8018a98:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	699b      	ldr	r3, [r3, #24]
 8018aa0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018aa2:	69ba      	ldr	r2, [r7, #24]
 8018aa4:	2380      	movs	r3, #128	@ 0x80
 8018aa6:	005b      	lsls	r3, r3, #1
 8018aa8:	4013      	ands	r3, r2
 8018aaa:	d00c      	beq.n	8018ac6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018aac:	6a3b      	ldr	r3, [r7, #32]
 8018aae:	2201      	movs	r2, #1
 8018ab0:	4313      	orrs	r3, r2
 8018ab2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	2280      	movs	r2, #128	@ 0x80
 8018aba:	0052      	lsls	r2, r2, #1
 8018abc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018abe:	2327      	movs	r3, #39	@ 0x27
 8018ac0:	18fb      	adds	r3, r7, r3
 8018ac2:	2201      	movs	r2, #1
 8018ac4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018ac6:	69ba      	ldr	r2, [r7, #24]
 8018ac8:	2380      	movs	r3, #128	@ 0x80
 8018aca:	00db      	lsls	r3, r3, #3
 8018acc:	4013      	ands	r3, r2
 8018ace:	d00c      	beq.n	8018aea <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018ad0:	6a3b      	ldr	r3, [r7, #32]
 8018ad2:	2208      	movs	r2, #8
 8018ad4:	4313      	orrs	r3, r2
 8018ad6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2280      	movs	r2, #128	@ 0x80
 8018ade:	00d2      	lsls	r2, r2, #3
 8018ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018ae2:	2327      	movs	r3, #39	@ 0x27
 8018ae4:	18fb      	adds	r3, r7, r3
 8018ae6:	2201      	movs	r2, #1
 8018ae8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018aea:	69ba      	ldr	r2, [r7, #24]
 8018aec:	2380      	movs	r3, #128	@ 0x80
 8018aee:	009b      	lsls	r3, r3, #2
 8018af0:	4013      	ands	r3, r2
 8018af2:	d00c      	beq.n	8018b0e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018af4:	6a3b      	ldr	r3, [r7, #32]
 8018af6:	2202      	movs	r2, #2
 8018af8:	4313      	orrs	r3, r2
 8018afa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2280      	movs	r2, #128	@ 0x80
 8018b02:	0092      	lsls	r2, r2, #2
 8018b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018b06:	2327      	movs	r3, #39	@ 0x27
 8018b08:	18fb      	adds	r3, r7, r3
 8018b0a:	2201      	movs	r2, #1
 8018b0c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018b0e:	2327      	movs	r3, #39	@ 0x27
 8018b10:	18fb      	adds	r3, r7, r3
 8018b12:	781b      	ldrb	r3, [r3, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d01d      	beq.n	8018b54 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	0018      	movs	r0, r3
 8018b1c:	f7ff fcd7 	bl	80184ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	685a      	ldr	r2, [r3, #4]
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	490e      	ldr	r1, [pc, #56]	@ (8018b64 <I2C_IsErrorOccurred+0x1ec>)
 8018b2c:	400a      	ands	r2, r1
 8018b2e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018b34:	6a3b      	ldr	r3, [r7, #32]
 8018b36:	431a      	orrs	r2, r3
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	2241      	movs	r2, #65	@ 0x41
 8018b40:	2120      	movs	r1, #32
 8018b42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	2242      	movs	r2, #66	@ 0x42
 8018b48:	2100      	movs	r1, #0
 8018b4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	2240      	movs	r2, #64	@ 0x40
 8018b50:	2100      	movs	r1, #0
 8018b52:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018b54:	2327      	movs	r3, #39	@ 0x27
 8018b56:	18fb      	adds	r3, r7, r3
 8018b58:	781b      	ldrb	r3, [r3, #0]
}
 8018b5a:	0018      	movs	r0, r3
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	b00a      	add	sp, #40	@ 0x28
 8018b60:	bd80      	pop	{r7, pc}
 8018b62:	46c0      	nop			@ (mov r8, r8)
 8018b64:	fe00e800 	.word	0xfe00e800

08018b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018b68:	b590      	push	{r4, r7, lr}
 8018b6a:	b087      	sub	sp, #28
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	60f8      	str	r0, [r7, #12]
 8018b70:	0008      	movs	r0, r1
 8018b72:	0011      	movs	r1, r2
 8018b74:	607b      	str	r3, [r7, #4]
 8018b76:	240a      	movs	r4, #10
 8018b78:	193b      	adds	r3, r7, r4
 8018b7a:	1c02      	adds	r2, r0, #0
 8018b7c:	801a      	strh	r2, [r3, #0]
 8018b7e:	2009      	movs	r0, #9
 8018b80:	183b      	adds	r3, r7, r0
 8018b82:	1c0a      	adds	r2, r1, #0
 8018b84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b86:	193b      	adds	r3, r7, r4
 8018b88:	881b      	ldrh	r3, [r3, #0]
 8018b8a:	059b      	lsls	r3, r3, #22
 8018b8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018b8e:	183b      	adds	r3, r7, r0
 8018b90:	781b      	ldrb	r3, [r3, #0]
 8018b92:	0419      	lsls	r1, r3, #16
 8018b94:	23ff      	movs	r3, #255	@ 0xff
 8018b96:	041b      	lsls	r3, r3, #16
 8018b98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018b9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ba2:	4313      	orrs	r3, r2
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	085b      	lsrs	r3, r3, #1
 8018ba8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	685b      	ldr	r3, [r3, #4]
 8018bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018bb2:	0d51      	lsrs	r1, r2, #21
 8018bb4:	2280      	movs	r2, #128	@ 0x80
 8018bb6:	00d2      	lsls	r2, r2, #3
 8018bb8:	400a      	ands	r2, r1
 8018bba:	4907      	ldr	r1, [pc, #28]	@ (8018bd8 <I2C_TransferConfig+0x70>)
 8018bbc:	430a      	orrs	r2, r1
 8018bbe:	43d2      	mvns	r2, r2
 8018bc0:	401a      	ands	r2, r3
 8018bc2:	0011      	movs	r1, r2
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	697a      	ldr	r2, [r7, #20]
 8018bca:	430a      	orrs	r2, r1
 8018bcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018bce:	46c0      	nop			@ (mov r8, r8)
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	b007      	add	sp, #28
 8018bd4:	bd90      	pop	{r4, r7, pc}
 8018bd6:	46c0      	nop			@ (mov r8, r8)
 8018bd8:	03ff63ff 	.word	0x03ff63ff

08018bdc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b084      	sub	sp, #16
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
 8018be4:	000a      	movs	r2, r1
 8018be6:	1cbb      	adds	r3, r7, #2
 8018be8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018bea:	2300      	movs	r3, #0
 8018bec:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8018cec <I2C_Enable_IRQ+0x110>)
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d035      	beq.n	8018c64 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8018cf0 <I2C_Enable_IRQ+0x114>)
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d030      	beq.n	8018c64 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018c06:	4b3b      	ldr	r3, [pc, #236]	@ (8018cf4 <I2C_Enable_IRQ+0x118>)
 8018c08:	429a      	cmp	r2, r3
 8018c0a:	d02b      	beq.n	8018c64 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c0c:	1cbb      	adds	r3, r7, #2
 8018c0e:	2200      	movs	r2, #0
 8018c10:	5e9b      	ldrsh	r3, [r3, r2]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	da03      	bge.n	8018c1e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	22b8      	movs	r2, #184	@ 0xb8
 8018c1a:	4313      	orrs	r3, r2
 8018c1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c1e:	1cbb      	adds	r3, r7, #2
 8018c20:	881b      	ldrh	r3, [r3, #0]
 8018c22:	2201      	movs	r2, #1
 8018c24:	4013      	ands	r3, r2
 8018c26:	d003      	beq.n	8018c30 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	22f2      	movs	r2, #242	@ 0xf2
 8018c2c:	4313      	orrs	r3, r2
 8018c2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c30:	1cbb      	adds	r3, r7, #2
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	2202      	movs	r2, #2
 8018c36:	4013      	ands	r3, r2
 8018c38:	d003      	beq.n	8018c42 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	22f4      	movs	r2, #244	@ 0xf4
 8018c3e:	4313      	orrs	r3, r2
 8018c40:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018c42:	1cbb      	adds	r3, r7, #2
 8018c44:	881b      	ldrh	r3, [r3, #0]
 8018c46:	2b10      	cmp	r3, #16
 8018c48:	d103      	bne.n	8018c52 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	2290      	movs	r2, #144	@ 0x90
 8018c4e:	4313      	orrs	r3, r2
 8018c50:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c52:	1cbb      	adds	r3, r7, #2
 8018c54:	881b      	ldrh	r3, [r3, #0]
 8018c56:	2b20      	cmp	r3, #32
 8018c58:	d13c      	bne.n	8018cd4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	2220      	movs	r2, #32
 8018c5e:	4313      	orrs	r3, r2
 8018c60:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c62:	e037      	b.n	8018cd4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c64:	1cbb      	adds	r3, r7, #2
 8018c66:	2200      	movs	r2, #0
 8018c68:	5e9b      	ldrsh	r3, [r3, r2]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	da03      	bge.n	8018c76 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	22b8      	movs	r2, #184	@ 0xb8
 8018c72:	4313      	orrs	r3, r2
 8018c74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c76:	1cbb      	adds	r3, r7, #2
 8018c78:	881b      	ldrh	r3, [r3, #0]
 8018c7a:	2201      	movs	r2, #1
 8018c7c:	4013      	ands	r3, r2
 8018c7e:	d003      	beq.n	8018c88 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	22f2      	movs	r2, #242	@ 0xf2
 8018c84:	4313      	orrs	r3, r2
 8018c86:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c88:	1cbb      	adds	r3, r7, #2
 8018c8a:	881b      	ldrh	r3, [r3, #0]
 8018c8c:	2202      	movs	r2, #2
 8018c8e:	4013      	ands	r3, r2
 8018c90:	d003      	beq.n	8018c9a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	22f4      	movs	r2, #244	@ 0xf4
 8018c96:	4313      	orrs	r3, r2
 8018c98:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018c9a:	1cbb      	adds	r3, r7, #2
 8018c9c:	881b      	ldrh	r3, [r3, #0]
 8018c9e:	2b10      	cmp	r3, #16
 8018ca0:	d103      	bne.n	8018caa <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	2290      	movs	r2, #144	@ 0x90
 8018ca6:	4313      	orrs	r3, r2
 8018ca8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018caa:	1cbb      	adds	r3, r7, #2
 8018cac:	881b      	ldrh	r3, [r3, #0]
 8018cae:	2b20      	cmp	r3, #32
 8018cb0:	d103      	bne.n	8018cba <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	2260      	movs	r2, #96	@ 0x60
 8018cb6:	4313      	orrs	r3, r2
 8018cb8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8018cf4 <I2C_Enable_IRQ+0x118>)
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	d007      	beq.n	8018cd4 <I2C_Enable_IRQ+0xf8>
 8018cc4:	1cbb      	adds	r3, r7, #2
 8018cc6:	881b      	ldrh	r3, [r3, #0]
 8018cc8:	2b40      	cmp	r3, #64	@ 0x40
 8018cca:	d103      	bne.n	8018cd4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	2240      	movs	r2, #64	@ 0x40
 8018cd0:	4313      	orrs	r3, r2
 8018cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	6819      	ldr	r1, [r3, #0]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	68fa      	ldr	r2, [r7, #12]
 8018ce0:	430a      	orrs	r2, r1
 8018ce2:	601a      	str	r2, [r3, #0]
}
 8018ce4:	46c0      	nop			@ (mov r8, r8)
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	b004      	add	sp, #16
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	08017351 	.word	0x08017351
 8018cf0:	080177c9 	.word	0x080177c9
 8018cf4:	08017569 	.word	0x08017569

08018cf8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b084      	sub	sp, #16
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
 8018d00:	000a      	movs	r2, r1
 8018d02:	1cbb      	adds	r3, r7, #2
 8018d04:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018d06:	2300      	movs	r3, #0
 8018d08:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018d0a:	1cbb      	adds	r3, r7, #2
 8018d0c:	881b      	ldrh	r3, [r3, #0]
 8018d0e:	2201      	movs	r2, #1
 8018d10:	4013      	ands	r3, r2
 8018d12:	d010      	beq.n	8018d36 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	2242      	movs	r2, #66	@ 0x42
 8018d18:	4313      	orrs	r3, r2
 8018d1a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2241      	movs	r2, #65	@ 0x41
 8018d20:	5c9b      	ldrb	r3, [r3, r2]
 8018d22:	b2db      	uxtb	r3, r3
 8018d24:	001a      	movs	r2, r3
 8018d26:	2328      	movs	r3, #40	@ 0x28
 8018d28:	4013      	ands	r3, r2
 8018d2a:	2b28      	cmp	r3, #40	@ 0x28
 8018d2c:	d003      	beq.n	8018d36 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	22b0      	movs	r2, #176	@ 0xb0
 8018d32:	4313      	orrs	r3, r2
 8018d34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018d36:	1cbb      	adds	r3, r7, #2
 8018d38:	881b      	ldrh	r3, [r3, #0]
 8018d3a:	2202      	movs	r2, #2
 8018d3c:	4013      	ands	r3, r2
 8018d3e:	d010      	beq.n	8018d62 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	2244      	movs	r2, #68	@ 0x44
 8018d44:	4313      	orrs	r3, r2
 8018d46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2241      	movs	r2, #65	@ 0x41
 8018d4c:	5c9b      	ldrb	r3, [r3, r2]
 8018d4e:	b2db      	uxtb	r3, r3
 8018d50:	001a      	movs	r2, r3
 8018d52:	2328      	movs	r3, #40	@ 0x28
 8018d54:	4013      	ands	r3, r2
 8018d56:	2b28      	cmp	r3, #40	@ 0x28
 8018d58:	d003      	beq.n	8018d62 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	22b0      	movs	r2, #176	@ 0xb0
 8018d5e:	4313      	orrs	r3, r2
 8018d60:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018d62:	1cbb      	adds	r3, r7, #2
 8018d64:	2200      	movs	r2, #0
 8018d66:	5e9b      	ldrsh	r3, [r3, r2]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	da03      	bge.n	8018d74 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	22b8      	movs	r2, #184	@ 0xb8
 8018d70:	4313      	orrs	r3, r2
 8018d72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018d74:	1cbb      	adds	r3, r7, #2
 8018d76:	881b      	ldrh	r3, [r3, #0]
 8018d78:	2b10      	cmp	r3, #16
 8018d7a:	d103      	bne.n	8018d84 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	2290      	movs	r2, #144	@ 0x90
 8018d80:	4313      	orrs	r3, r2
 8018d82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018d84:	1cbb      	adds	r3, r7, #2
 8018d86:	881b      	ldrh	r3, [r3, #0]
 8018d88:	2b20      	cmp	r3, #32
 8018d8a:	d103      	bne.n	8018d94 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	2220      	movs	r2, #32
 8018d90:	4313      	orrs	r3, r2
 8018d92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018d94:	1cbb      	adds	r3, r7, #2
 8018d96:	881b      	ldrh	r3, [r3, #0]
 8018d98:	2b40      	cmp	r3, #64	@ 0x40
 8018d9a:	d103      	bne.n	8018da4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	2240      	movs	r2, #64	@ 0x40
 8018da0:	4313      	orrs	r3, r2
 8018da2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	681a      	ldr	r2, [r3, #0]
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	43d9      	mvns	r1, r3
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	400a      	ands	r2, r1
 8018db4:	601a      	str	r2, [r3, #0]
}
 8018db6:	46c0      	nop			@ (mov r8, r8)
 8018db8:	46bd      	mov	sp, r7
 8018dba:	b004      	add	sp, #16
 8018dbc:	bd80      	pop	{r7, pc}
	...

08018dc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b082      	sub	sp, #8
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	6078      	str	r0, [r7, #4]
 8018dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2241      	movs	r2, #65	@ 0x41
 8018dce:	5c9b      	ldrb	r3, [r3, r2]
 8018dd0:	b2db      	uxtb	r3, r3
 8018dd2:	2b20      	cmp	r3, #32
 8018dd4:	d138      	bne.n	8018e48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	2240      	movs	r2, #64	@ 0x40
 8018dda:	5c9b      	ldrb	r3, [r3, r2]
 8018ddc:	2b01      	cmp	r3, #1
 8018dde:	d101      	bne.n	8018de4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018de0:	2302      	movs	r3, #2
 8018de2:	e032      	b.n	8018e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	2240      	movs	r2, #64	@ 0x40
 8018de8:	2101      	movs	r1, #1
 8018dea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	2241      	movs	r2, #65	@ 0x41
 8018df0:	2124      	movs	r1, #36	@ 0x24
 8018df2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	681a      	ldr	r2, [r3, #0]
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	2101      	movs	r1, #1
 8018e00:	438a      	bics	r2, r1
 8018e02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	681a      	ldr	r2, [r3, #0]
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	4911      	ldr	r1, [pc, #68]	@ (8018e54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018e10:	400a      	ands	r2, r1
 8018e12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	6819      	ldr	r1, [r3, #0]
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	683a      	ldr	r2, [r7, #0]
 8018e20:	430a      	orrs	r2, r1
 8018e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	681a      	ldr	r2, [r3, #0]
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2101      	movs	r1, #1
 8018e30:	430a      	orrs	r2, r1
 8018e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	2241      	movs	r2, #65	@ 0x41
 8018e38:	2120      	movs	r1, #32
 8018e3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2240      	movs	r2, #64	@ 0x40
 8018e40:	2100      	movs	r1, #0
 8018e42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018e44:	2300      	movs	r3, #0
 8018e46:	e000      	b.n	8018e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018e48:	2302      	movs	r3, #2
  }
}
 8018e4a:	0018      	movs	r0, r3
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	b002      	add	sp, #8
 8018e50:	bd80      	pop	{r7, pc}
 8018e52:	46c0      	nop			@ (mov r8, r8)
 8018e54:	ffffefff 	.word	0xffffefff

08018e58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b084      	sub	sp, #16
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
 8018e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2241      	movs	r2, #65	@ 0x41
 8018e66:	5c9b      	ldrb	r3, [r3, r2]
 8018e68:	b2db      	uxtb	r3, r3
 8018e6a:	2b20      	cmp	r3, #32
 8018e6c:	d139      	bne.n	8018ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2240      	movs	r2, #64	@ 0x40
 8018e72:	5c9b      	ldrb	r3, [r3, r2]
 8018e74:	2b01      	cmp	r3, #1
 8018e76:	d101      	bne.n	8018e7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018e78:	2302      	movs	r3, #2
 8018e7a:	e033      	b.n	8018ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	2240      	movs	r2, #64	@ 0x40
 8018e80:	2101      	movs	r1, #1
 8018e82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2241      	movs	r2, #65	@ 0x41
 8018e88:	2124      	movs	r1, #36	@ 0x24
 8018e8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	681a      	ldr	r2, [r3, #0]
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	2101      	movs	r1, #1
 8018e98:	438a      	bics	r2, r1
 8018e9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	4a11      	ldr	r2, [pc, #68]	@ (8018eec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018ea8:	4013      	ands	r3, r2
 8018eaa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	021b      	lsls	r3, r3, #8
 8018eb0:	68fa      	ldr	r2, [r7, #12]
 8018eb2:	4313      	orrs	r3, r2
 8018eb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	68fa      	ldr	r2, [r7, #12]
 8018ebc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	681a      	ldr	r2, [r3, #0]
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	2101      	movs	r1, #1
 8018eca:	430a      	orrs	r2, r1
 8018ecc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	2241      	movs	r2, #65	@ 0x41
 8018ed2:	2120      	movs	r1, #32
 8018ed4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2240      	movs	r2, #64	@ 0x40
 8018eda:	2100      	movs	r1, #0
 8018edc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018ede:	2300      	movs	r3, #0
 8018ee0:	e000      	b.n	8018ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018ee2:	2302      	movs	r3, #2
  }
}
 8018ee4:	0018      	movs	r0, r3
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	b004      	add	sp, #16
 8018eea:	bd80      	pop	{r7, pc}
 8018eec:	fffff0ff 	.word	0xfffff0ff

08018ef0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b088      	sub	sp, #32
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d101      	bne.n	8018f02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018efe:	2301      	movs	r3, #1
 8018f00:	e0e1      	b.n	80190c6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	2235      	movs	r2, #53	@ 0x35
 8018f06:	5c9b      	ldrb	r3, [r3, r2]
 8018f08:	b2db      	uxtb	r3, r3
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d107      	bne.n	8018f1e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	2234      	movs	r2, #52	@ 0x34
 8018f12:	2100      	movs	r1, #0
 8018f14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	0018      	movs	r0, r3
 8018f1a:	f7f3 fdad 	bl	800ca78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2235      	movs	r2, #53	@ 0x35
 8018f22:	2102      	movs	r1, #2
 8018f24:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	69da      	ldr	r2, [r3, #28]
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	4967      	ldr	r1, [pc, #412]	@ (80190d0 <HAL_I2S_Init+0x1e0>)
 8018f32:	400a      	ands	r2, r1
 8018f34:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	2202      	movs	r2, #2
 8018f3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	695b      	ldr	r3, [r3, #20]
 8018f42:	2b02      	cmp	r3, #2
 8018f44:	d073      	beq.n	801902e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	68db      	ldr	r3, [r3, #12]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d102      	bne.n	8018f54 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018f4e:	2310      	movs	r3, #16
 8018f50:	617b      	str	r3, [r7, #20]
 8018f52:	e001      	b.n	8018f58 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018f54:	2320      	movs	r3, #32
 8018f56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	689b      	ldr	r3, [r3, #8]
 8018f5c:	2b20      	cmp	r3, #32
 8018f5e:	d802      	bhi.n	8018f66 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	005b      	lsls	r3, r3, #1
 8018f64:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018f66:	f002 febd 	bl	801bce4 <HAL_RCC_GetSysClockFreq>
 8018f6a:	0003      	movs	r3, r0
 8018f6c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	691a      	ldr	r2, [r3, #16]
 8018f72:	2380      	movs	r3, #128	@ 0x80
 8018f74:	009b      	lsls	r3, r3, #2
 8018f76:	429a      	cmp	r2, r3
 8018f78:	d131      	bne.n	8018fde <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	68db      	ldr	r3, [r3, #12]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d016      	beq.n	8018fb0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f82:	697b      	ldr	r3, [r7, #20]
 8018f84:	009b      	lsls	r3, r3, #2
 8018f86:	0019      	movs	r1, r3
 8018f88:	68f8      	ldr	r0, [r7, #12]
 8018f8a:	f7e7 f90b 	bl	80001a4 <__udivsi3>
 8018f8e:	0003      	movs	r3, r0
 8018f90:	001a      	movs	r2, r3
 8018f92:	0013      	movs	r3, r2
 8018f94:	009b      	lsls	r3, r3, #2
 8018f96:	189b      	adds	r3, r3, r2
 8018f98:	005b      	lsls	r3, r3, #1
 8018f9a:	001a      	movs	r2, r3
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	695b      	ldr	r3, [r3, #20]
 8018fa0:	0019      	movs	r1, r3
 8018fa2:	0010      	movs	r0, r2
 8018fa4:	f7e7 f8fe 	bl	80001a4 <__udivsi3>
 8018fa8:	0003      	movs	r3, r0
 8018faa:	3305      	adds	r3, #5
 8018fac:	613b      	str	r3, [r7, #16]
 8018fae:	e02a      	b.n	8019006 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	00db      	lsls	r3, r3, #3
 8018fb4:	0019      	movs	r1, r3
 8018fb6:	68f8      	ldr	r0, [r7, #12]
 8018fb8:	f7e7 f8f4 	bl	80001a4 <__udivsi3>
 8018fbc:	0003      	movs	r3, r0
 8018fbe:	001a      	movs	r2, r3
 8018fc0:	0013      	movs	r3, r2
 8018fc2:	009b      	lsls	r3, r3, #2
 8018fc4:	189b      	adds	r3, r3, r2
 8018fc6:	005b      	lsls	r3, r3, #1
 8018fc8:	001a      	movs	r2, r3
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	695b      	ldr	r3, [r3, #20]
 8018fce:	0019      	movs	r1, r3
 8018fd0:	0010      	movs	r0, r2
 8018fd2:	f7e7 f8e7 	bl	80001a4 <__udivsi3>
 8018fd6:	0003      	movs	r3, r0
 8018fd8:	3305      	adds	r3, #5
 8018fda:	613b      	str	r3, [r7, #16]
 8018fdc:	e013      	b.n	8019006 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018fde:	6979      	ldr	r1, [r7, #20]
 8018fe0:	68f8      	ldr	r0, [r7, #12]
 8018fe2:	f7e7 f8df 	bl	80001a4 <__udivsi3>
 8018fe6:	0003      	movs	r3, r0
 8018fe8:	001a      	movs	r2, r3
 8018fea:	0013      	movs	r3, r2
 8018fec:	009b      	lsls	r3, r3, #2
 8018fee:	189b      	adds	r3, r3, r2
 8018ff0:	005b      	lsls	r3, r3, #1
 8018ff2:	001a      	movs	r2, r3
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	695b      	ldr	r3, [r3, #20]
 8018ff8:	0019      	movs	r1, r3
 8018ffa:	0010      	movs	r0, r2
 8018ffc:	f7e7 f8d2 	bl	80001a4 <__udivsi3>
 8019000:	0003      	movs	r3, r0
 8019002:	3305      	adds	r3, #5
 8019004:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8019006:	693b      	ldr	r3, [r7, #16]
 8019008:	210a      	movs	r1, #10
 801900a:	0018      	movs	r0, r3
 801900c:	f7e7 f8ca 	bl	80001a4 <__udivsi3>
 8019010:	0003      	movs	r3, r0
 8019012:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	2201      	movs	r2, #1
 8019018:	4013      	ands	r3, r2
 801901a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801901c:	693a      	ldr	r2, [r7, #16]
 801901e:	69bb      	ldr	r3, [r7, #24]
 8019020:	1ad3      	subs	r3, r2, r3
 8019022:	085b      	lsrs	r3, r3, #1
 8019024:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8019026:	69bb      	ldr	r3, [r7, #24]
 8019028:	021b      	lsls	r3, r3, #8
 801902a:	61bb      	str	r3, [r7, #24]
 801902c:	e003      	b.n	8019036 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801902e:	2302      	movs	r3, #2
 8019030:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8019032:	2300      	movs	r3, #0
 8019034:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8019036:	69fb      	ldr	r3, [r7, #28]
 8019038:	2b01      	cmp	r3, #1
 801903a:	d902      	bls.n	8019042 <HAL_I2S_Init+0x152>
 801903c:	69fb      	ldr	r3, [r7, #28]
 801903e:	2bff      	cmp	r3, #255	@ 0xff
 8019040:	d907      	bls.n	8019052 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019046:	2210      	movs	r2, #16
 8019048:	431a      	orrs	r2, r3
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801904e:	2301      	movs	r3, #1
 8019050:	e039      	b.n	80190c6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	691a      	ldr	r2, [r3, #16]
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	431a      	orrs	r2, r3
 801905a:	0011      	movs	r1, r2
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	69fa      	ldr	r2, [r7, #28]
 8019062:	430a      	orrs	r2, r1
 8019064:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	69db      	ldr	r3, [r3, #28]
 801906c:	4a18      	ldr	r2, [pc, #96]	@ (80190d0 <HAL_I2S_Init+0x1e0>)
 801906e:	401a      	ands	r2, r3
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	6859      	ldr	r1, [r3, #4]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	689b      	ldr	r3, [r3, #8]
 8019078:	4319      	orrs	r1, r3
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	68db      	ldr	r3, [r3, #12]
 801907e:	4319      	orrs	r1, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	699b      	ldr	r3, [r3, #24]
 8019084:	430b      	orrs	r3, r1
 8019086:	431a      	orrs	r2, r3
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	2180      	movs	r1, #128	@ 0x80
 801908e:	0109      	lsls	r1, r1, #4
 8019090:	430a      	orrs	r2, r1
 8019092:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	689b      	ldr	r3, [r3, #8]
 8019098:	2b30      	cmp	r3, #48	@ 0x30
 801909a:	d003      	beq.n	80190a4 <HAL_I2S_Init+0x1b4>
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	689b      	ldr	r3, [r3, #8]
 80190a0:	2bb0      	cmp	r3, #176	@ 0xb0
 80190a2:	d108      	bne.n	80190b6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	69da      	ldr	r2, [r3, #28]
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	2180      	movs	r1, #128	@ 0x80
 80190b0:	0149      	lsls	r1, r1, #5
 80190b2:	430a      	orrs	r2, r1
 80190b4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	2200      	movs	r2, #0
 80190ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	2235      	movs	r2, #53	@ 0x35
 80190c0:	2101      	movs	r1, #1
 80190c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80190c4:	2300      	movs	r3, #0
}
 80190c6:	0018      	movs	r0, r3
 80190c8:	46bd      	mov	sp, r7
 80190ca:	b008      	add	sp, #32
 80190cc:	bd80      	pop	{r7, pc}
 80190ce:	46c0      	nop			@ (mov r8, r8)
 80190d0:	fffff040 	.word	0xfffff040

080190d4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b086      	sub	sp, #24
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	60b9      	str	r1, [r7, #8]
 80190de:	1dbb      	adds	r3, r7, #6
 80190e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80190e2:	68bb      	ldr	r3, [r7, #8]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d003      	beq.n	80190f0 <HAL_I2S_Receive_DMA+0x1c>
 80190e8:	1dbb      	adds	r3, r7, #6
 80190ea:	881b      	ldrh	r3, [r3, #0]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d101      	bne.n	80190f4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80190f0:	2301      	movs	r3, #1
 80190f2:	e0a6      	b.n	8019242 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	2234      	movs	r2, #52	@ 0x34
 80190f8:	5c9b      	ldrb	r3, [r3, r2]
 80190fa:	b2db      	uxtb	r3, r3
 80190fc:	2b01      	cmp	r3, #1
 80190fe:	d101      	bne.n	8019104 <HAL_I2S_Receive_DMA+0x30>
 8019100:	2302      	movs	r3, #2
 8019102:	e09e      	b.n	8019242 <HAL_I2S_Receive_DMA+0x16e>
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	2234      	movs	r2, #52	@ 0x34
 8019108:	2101      	movs	r1, #1
 801910a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	2235      	movs	r2, #53	@ 0x35
 8019110:	5c9b      	ldrb	r3, [r3, r2]
 8019112:	b2db      	uxtb	r3, r3
 8019114:	2b01      	cmp	r3, #1
 8019116:	d005      	beq.n	8019124 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	2234      	movs	r2, #52	@ 0x34
 801911c:	2100      	movs	r1, #0
 801911e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8019120:	2302      	movs	r3, #2
 8019122:	e08e      	b.n	8019242 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	2235      	movs	r2, #53	@ 0x35
 8019128:	2104      	movs	r1, #4
 801912a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	2200      	movs	r2, #0
 8019130:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	68ba      	ldr	r2, [r7, #8]
 8019136:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	69db      	ldr	r3, [r3, #28]
 801913e:	2207      	movs	r2, #7
 8019140:	4013      	ands	r3, r2
 8019142:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8019144:	697b      	ldr	r3, [r7, #20]
 8019146:	2b03      	cmp	r3, #3
 8019148:	d002      	beq.n	8019150 <HAL_I2S_Receive_DMA+0x7c>
 801914a:	697b      	ldr	r3, [r7, #20]
 801914c:	2b05      	cmp	r3, #5
 801914e:	d10c      	bne.n	801916a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8019150:	1dbb      	adds	r3, r7, #6
 8019152:	881b      	ldrh	r3, [r3, #0]
 8019154:	18db      	adds	r3, r3, r3
 8019156:	b29a      	uxth	r2, r3
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 801915c:	1dbb      	adds	r3, r7, #6
 801915e:	881b      	ldrh	r3, [r3, #0]
 8019160:	18db      	adds	r3, r3, r3
 8019162:	b29a      	uxth	r2, r3
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8019168:	e007      	b.n	801917a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	1dba      	adds	r2, r7, #6
 801916e:	8812      	ldrh	r2, [r2, #0]
 8019170:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	1dba      	adds	r2, r7, #6
 8019176:	8812      	ldrh	r2, [r2, #0]
 8019178:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801917e:	4a33      	ldr	r2, [pc, #204]	@ (801924c <HAL_I2S_Receive_DMA+0x178>)
 8019180:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019186:	4a32      	ldr	r2, [pc, #200]	@ (8019250 <HAL_I2S_Receive_DMA+0x17c>)
 8019188:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801918e:	4a31      	ldr	r2, [pc, #196]	@ (8019254 <HAL_I2S_Receive_DMA+0x180>)
 8019190:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	69da      	ldr	r2, [r3, #28]
 8019198:	23c0      	movs	r3, #192	@ 0xc0
 801919a:	009b      	lsls	r3, r3, #2
 801919c:	401a      	ands	r2, r3
 801919e:	23c0      	movs	r3, #192	@ 0xc0
 80191a0:	009b      	lsls	r3, r3, #2
 80191a2:	429a      	cmp	r2, r3
 80191a4:	d10a      	bne.n	80191bc <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80191a6:	2300      	movs	r3, #0
 80191a8:	613b      	str	r3, [r7, #16]
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	68db      	ldr	r3, [r3, #12]
 80191b0:	613b      	str	r3, [r7, #16]
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	689b      	ldr	r3, [r3, #8]
 80191b8:	613b      	str	r3, [r7, #16]
 80191ba:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	330c      	adds	r3, #12
 80191c6:	0019      	movs	r1, r3
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191cc:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80191d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80191d4:	f7fc f8fc 	bl	80153d0 <HAL_DMA_Start_IT>
 80191d8:	1e03      	subs	r3, r0, #0
 80191da:	d00f      	beq.n	80191fc <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191e0:	2208      	movs	r2, #8
 80191e2:	431a      	orrs	r2, r3
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	2235      	movs	r2, #53	@ 0x35
 80191ec:	2101      	movs	r1, #1
 80191ee:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	2234      	movs	r2, #52	@ 0x34
 80191f4:	2100      	movs	r1, #0
 80191f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80191f8:	2301      	movs	r3, #1
 80191fa:	e022      	b.n	8019242 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	69da      	ldr	r2, [r3, #28]
 8019202:	2380      	movs	r3, #128	@ 0x80
 8019204:	00db      	lsls	r3, r3, #3
 8019206:	4013      	ands	r3, r2
 8019208:	d108      	bne.n	801921c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	69da      	ldr	r2, [r3, #28]
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	2180      	movs	r1, #128	@ 0x80
 8019216:	00c9      	lsls	r1, r1, #3
 8019218:	430a      	orrs	r2, r1
 801921a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	685b      	ldr	r3, [r3, #4]
 8019222:	2201      	movs	r2, #1
 8019224:	4013      	ands	r3, r2
 8019226:	d107      	bne.n	8019238 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	685a      	ldr	r2, [r3, #4]
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	2101      	movs	r1, #1
 8019234:	430a      	orrs	r2, r1
 8019236:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	2234      	movs	r2, #52	@ 0x34
 801923c:	2100      	movs	r1, #0
 801923e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8019240:	2300      	movs	r3, #0
}
 8019242:	0018      	movs	r0, r3
 8019244:	46bd      	mov	sp, r7
 8019246:	b006      	add	sp, #24
 8019248:	bd80      	pop	{r7, pc}
 801924a:	46c0      	nop			@ (mov r8, r8)
 801924c:	08019435 	.word	0x08019435
 8019250:	080193f1 	.word	0x080193f1
 8019254:	08019453 	.word	0x08019453

08019258 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b086      	sub	sp, #24
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019260:	2317      	movs	r3, #23
 8019262:	18fb      	adds	r3, r7, r3
 8019264:	2200      	movs	r2, #0
 8019266:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	685a      	ldr	r2, [r3, #4]
 801926c:	2380      	movs	r3, #128	@ 0x80
 801926e:	009b      	lsls	r3, r3, #2
 8019270:	429a      	cmp	r2, r3
 8019272:	d003      	beq.n	801927c <HAL_I2S_DMAStop+0x24>
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	685b      	ldr	r3, [r3, #4]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d158      	bne.n	801932e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019280:	2b00      	cmp	r3, #0
 8019282:	d010      	beq.n	80192a6 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019288:	0018      	movs	r0, r3
 801928a:	f7fc f907 	bl	801549c <HAL_DMA_Abort>
 801928e:	1e03      	subs	r3, r0, #0
 8019290:	d009      	beq.n	80192a6 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019296:	2208      	movs	r2, #8
 8019298:	431a      	orrs	r2, r3
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801929e:	2317      	movs	r3, #23
 80192a0:	18fb      	adds	r3, r7, r3
 80192a2:	2201      	movs	r2, #1
 80192a4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80192a6:	6878      	ldr	r0, [r7, #4]
 80192a8:	2364      	movs	r3, #100	@ 0x64
 80192aa:	2201      	movs	r2, #1
 80192ac:	2102      	movs	r1, #2
 80192ae:	f000 f8f7 	bl	80194a0 <I2S_WaitFlagStateUntilTimeout>
 80192b2:	1e03      	subs	r3, r0, #0
 80192b4:	d00d      	beq.n	80192d2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192ba:	2201      	movs	r2, #1
 80192bc:	431a      	orrs	r2, r3
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	2235      	movs	r2, #53	@ 0x35
 80192c6:	2101      	movs	r1, #1
 80192c8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80192ca:	2317      	movs	r3, #23
 80192cc:	18fb      	adds	r3, r7, r3
 80192ce:	2201      	movs	r2, #1
 80192d0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80192d2:	6878      	ldr	r0, [r7, #4]
 80192d4:	2364      	movs	r3, #100	@ 0x64
 80192d6:	2200      	movs	r2, #0
 80192d8:	2180      	movs	r1, #128	@ 0x80
 80192da:	f000 f8e1 	bl	80194a0 <I2S_WaitFlagStateUntilTimeout>
 80192de:	1e03      	subs	r3, r0, #0
 80192e0:	d00d      	beq.n	80192fe <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192e6:	2201      	movs	r2, #1
 80192e8:	431a      	orrs	r2, r3
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	2235      	movs	r2, #53	@ 0x35
 80192f2:	2101      	movs	r1, #1
 80192f4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80192f6:	2317      	movs	r3, #23
 80192f8:	18fb      	adds	r3, r7, r3
 80192fa:	2201      	movs	r2, #1
 80192fc:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	69da      	ldr	r2, [r3, #28]
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	4938      	ldr	r1, [pc, #224]	@ (80193ec <HAL_I2S_DMAStop+0x194>)
 801930a:	400a      	ands	r2, r1
 801930c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801930e:	2300      	movs	r3, #0
 8019310:	613b      	str	r3, [r7, #16]
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	689b      	ldr	r3, [r3, #8]
 8019318:	613b      	str	r3, [r7, #16]
 801931a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	685a      	ldr	r2, [r3, #4]
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	2102      	movs	r1, #2
 8019328:	438a      	bics	r2, r1
 801932a:	605a      	str	r2, [r3, #4]
 801932c:	e053      	b.n	80193d6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	685a      	ldr	r2, [r3, #4]
 8019332:	23c0      	movs	r3, #192	@ 0xc0
 8019334:	009b      	lsls	r3, r3, #2
 8019336:	429a      	cmp	r2, r3
 8019338:	d005      	beq.n	8019346 <HAL_I2S_DMAStop+0xee>
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	685a      	ldr	r2, [r3, #4]
 801933e:	2380      	movs	r3, #128	@ 0x80
 8019340:	005b      	lsls	r3, r3, #1
 8019342:	429a      	cmp	r2, r3
 8019344:	d147      	bne.n	80193d6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801934a:	2b00      	cmp	r3, #0
 801934c:	d010      	beq.n	8019370 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019352:	0018      	movs	r0, r3
 8019354:	f7fc f8a2 	bl	801549c <HAL_DMA_Abort>
 8019358:	1e03      	subs	r3, r0, #0
 801935a:	d009      	beq.n	8019370 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019360:	2208      	movs	r2, #8
 8019362:	431a      	orrs	r2, r3
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019368:	2317      	movs	r3, #23
 801936a:	18fb      	adds	r3, r7, r3
 801936c:	2201      	movs	r2, #1
 801936e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	69da      	ldr	r2, [r3, #28]
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	491c      	ldr	r1, [pc, #112]	@ (80193ec <HAL_I2S_DMAStop+0x194>)
 801937c:	400a      	ands	r2, r1
 801937e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8019380:	2300      	movs	r3, #0
 8019382:	60fb      	str	r3, [r7, #12]
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	68db      	ldr	r3, [r3, #12]
 801938a:	60fb      	str	r3, [r7, #12]
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	689b      	ldr	r3, [r3, #8]
 8019392:	60fb      	str	r3, [r7, #12]
 8019394:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	685a      	ldr	r2, [r3, #4]
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2101      	movs	r1, #1
 80193a2:	438a      	bics	r2, r1
 80193a4:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	685a      	ldr	r2, [r3, #4]
 80193aa:	2380      	movs	r3, #128	@ 0x80
 80193ac:	005b      	lsls	r3, r3, #1
 80193ae:	429a      	cmp	r2, r3
 80193b0:	d10e      	bne.n	80193d0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193b6:	2240      	movs	r2, #64	@ 0x40
 80193b8:	431a      	orrs	r2, r3
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	2235      	movs	r2, #53	@ 0x35
 80193c2:	2101      	movs	r1, #1
 80193c4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80193c6:	2317      	movs	r3, #23
 80193c8:	18fb      	adds	r3, r7, r3
 80193ca:	2201      	movs	r2, #1
 80193cc:	701a      	strb	r2, [r3, #0]
 80193ce:	e002      	b.n	80193d6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	2235      	movs	r2, #53	@ 0x35
 80193da:	2101      	movs	r1, #1
 80193dc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80193de:	2317      	movs	r3, #23
 80193e0:	18fb      	adds	r3, r7, r3
 80193e2:	781b      	ldrb	r3, [r3, #0]
}
 80193e4:	0018      	movs	r0, r3
 80193e6:	46bd      	mov	sp, r7
 80193e8:	b006      	add	sp, #24
 80193ea:	bd80      	pop	{r7, pc}
 80193ec:	fffffbff 	.word	0xfffffbff

080193f0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b084      	sub	sp, #16
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193fc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	69db      	ldr	r3, [r3, #28]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d10e      	bne.n	8019424 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	685a      	ldr	r2, [r3, #4]
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	2101      	movs	r1, #1
 8019412:	438a      	bics	r2, r1
 8019414:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	2200      	movs	r2, #0
 801941a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	2235      	movs	r2, #53	@ 0x35
 8019420:	2101      	movs	r1, #1
 8019422:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	0018      	movs	r0, r3
 8019428:	f7f8 fbc6 	bl	8011bb8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801942c:	46c0      	nop			@ (mov r8, r8)
 801942e:	46bd      	mov	sp, r7
 8019430:	b004      	add	sp, #16
 8019432:	bd80      	pop	{r7, pc}

08019434 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019440:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	0018      	movs	r0, r3
 8019446:	f7f8 fba5 	bl	8011b94 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801944a:	46c0      	nop			@ (mov r8, r8)
 801944c:	46bd      	mov	sp, r7
 801944e:	b004      	add	sp, #16
 8019450:	bd80      	pop	{r7, pc}

08019452 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8019452:	b580      	push	{r7, lr}
 8019454:	b084      	sub	sp, #16
 8019456:	af00      	add	r7, sp, #0
 8019458:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801945e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	685a      	ldr	r2, [r3, #4]
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	2103      	movs	r1, #3
 801946c:	438a      	bics	r2, r1
 801946e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	2200      	movs	r2, #0
 8019474:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	2200      	movs	r2, #0
 801947a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	2235      	movs	r2, #53	@ 0x35
 8019480:	2101      	movs	r1, #1
 8019482:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019488:	2208      	movs	r2, #8
 801948a:	431a      	orrs	r2, r3
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	0018      	movs	r0, r3
 8019494:	f7f8 fbde 	bl	8011c54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019498:	46c0      	nop			@ (mov r8, r8)
 801949a:	46bd      	mov	sp, r7
 801949c:	b004      	add	sp, #16
 801949e:	bd80      	pop	{r7, pc}

080194a0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b086      	sub	sp, #24
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	60f8      	str	r0, [r7, #12]
 80194a8:	60b9      	str	r1, [r7, #8]
 80194aa:	603b      	str	r3, [r7, #0]
 80194ac:	1dfb      	adds	r3, r7, #7
 80194ae:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80194b0:	f7fb fa70 	bl	8014994 <HAL_GetTick>
 80194b4:	0003      	movs	r3, r0
 80194b6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80194b8:	e017      	b.n	80194ea <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	3301      	adds	r3, #1
 80194be:	d014      	beq.n	80194ea <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80194c0:	f7fb fa68 	bl	8014994 <HAL_GetTick>
 80194c4:	0002      	movs	r2, r0
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	1ad3      	subs	r3, r2, r3
 80194ca:	683a      	ldr	r2, [r7, #0]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d902      	bls.n	80194d6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d109      	bne.n	80194ea <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	2235      	movs	r2, #53	@ 0x35
 80194da:	2101      	movs	r1, #1
 80194dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	2234      	movs	r2, #52	@ 0x34
 80194e2:	2100      	movs	r1, #0
 80194e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80194e6:	2303      	movs	r3, #3
 80194e8:	e00f      	b.n	801950a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	689b      	ldr	r3, [r3, #8]
 80194f0:	68ba      	ldr	r2, [r7, #8]
 80194f2:	4013      	ands	r3, r2
 80194f4:	68ba      	ldr	r2, [r7, #8]
 80194f6:	1ad3      	subs	r3, r2, r3
 80194f8:	425a      	negs	r2, r3
 80194fa:	4153      	adcs	r3, r2
 80194fc:	b2db      	uxtb	r3, r3
 80194fe:	001a      	movs	r2, r3
 8019500:	1dfb      	adds	r3, r7, #7
 8019502:	781b      	ldrb	r3, [r3, #0]
 8019504:	429a      	cmp	r2, r3
 8019506:	d1d8      	bne.n	80194ba <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8019508:	2300      	movs	r3, #0
}
 801950a:	0018      	movs	r0, r3
 801950c:	46bd      	mov	sp, r7
 801950e:	b006      	add	sp, #24
 8019510:	bd80      	pop	{r7, pc}
	...

08019514 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019516:	b08b      	sub	sp, #44	@ 0x2c
 8019518:	af06      	add	r7, sp, #24
 801951a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d101      	bne.n	8019526 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019522:	2301      	movs	r3, #1
 8019524:	e0f0      	b.n	8019708 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	4a79      	ldr	r2, [pc, #484]	@ (8019710 <HAL_PCD_Init+0x1fc>)
 801952a:	5c9b      	ldrb	r3, [r3, r2]
 801952c:	b2db      	uxtb	r3, r3
 801952e:	2b00      	cmp	r3, #0
 8019530:	d108      	bne.n	8019544 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019532:	687a      	ldr	r2, [r7, #4]
 8019534:	23aa      	movs	r3, #170	@ 0xaa
 8019536:	009b      	lsls	r3, r3, #2
 8019538:	2100      	movs	r1, #0
 801953a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	0018      	movs	r0, r3
 8019540:	f00a f856 	bl	80235f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	4a72      	ldr	r2, [pc, #456]	@ (8019710 <HAL_PCD_Init+0x1fc>)
 8019548:	2103      	movs	r1, #3
 801954a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	0018      	movs	r0, r3
 8019552:	f005 fffb 	bl	801f54c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019556:	230f      	movs	r3, #15
 8019558:	18fb      	adds	r3, r7, r3
 801955a:	2200      	movs	r2, #0
 801955c:	701a      	strb	r2, [r3, #0]
 801955e:	e049      	b.n	80195f4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019560:	200f      	movs	r0, #15
 8019562:	183b      	adds	r3, r7, r0
 8019564:	781b      	ldrb	r3, [r3, #0]
 8019566:	6879      	ldr	r1, [r7, #4]
 8019568:	1c5a      	adds	r2, r3, #1
 801956a:	0013      	movs	r3, r2
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	189b      	adds	r3, r3, r2
 8019570:	00db      	lsls	r3, r3, #3
 8019572:	18cb      	adds	r3, r1, r3
 8019574:	3301      	adds	r3, #1
 8019576:	2201      	movs	r2, #1
 8019578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801957a:	183b      	adds	r3, r7, r0
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	6879      	ldr	r1, [r7, #4]
 8019580:	1c5a      	adds	r2, r3, #1
 8019582:	0013      	movs	r3, r2
 8019584:	009b      	lsls	r3, r3, #2
 8019586:	189b      	adds	r3, r3, r2
 8019588:	00db      	lsls	r3, r3, #3
 801958a:	183a      	adds	r2, r7, r0
 801958c:	7812      	ldrb	r2, [r2, #0]
 801958e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019590:	183b      	adds	r3, r7, r0
 8019592:	781b      	ldrb	r3, [r3, #0]
 8019594:	6879      	ldr	r1, [r7, #4]
 8019596:	1c5a      	adds	r2, r3, #1
 8019598:	0013      	movs	r3, r2
 801959a:	009b      	lsls	r3, r3, #2
 801959c:	189b      	adds	r3, r3, r2
 801959e:	00db      	lsls	r3, r3, #3
 80195a0:	18cb      	adds	r3, r1, r3
 80195a2:	3303      	adds	r3, #3
 80195a4:	2200      	movs	r2, #0
 80195a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80195a8:	183b      	adds	r3, r7, r0
 80195aa:	781a      	ldrb	r2, [r3, #0]
 80195ac:	6879      	ldr	r1, [r7, #4]
 80195ae:	0013      	movs	r3, r2
 80195b0:	009b      	lsls	r3, r3, #2
 80195b2:	189b      	adds	r3, r3, r2
 80195b4:	00db      	lsls	r3, r3, #3
 80195b6:	18cb      	adds	r3, r1, r3
 80195b8:	3338      	adds	r3, #56	@ 0x38
 80195ba:	2200      	movs	r2, #0
 80195bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80195be:	183b      	adds	r3, r7, r0
 80195c0:	781a      	ldrb	r2, [r3, #0]
 80195c2:	6879      	ldr	r1, [r7, #4]
 80195c4:	0013      	movs	r3, r2
 80195c6:	009b      	lsls	r3, r3, #2
 80195c8:	189b      	adds	r3, r3, r2
 80195ca:	00db      	lsls	r3, r3, #3
 80195cc:	18cb      	adds	r3, r1, r3
 80195ce:	333c      	adds	r3, #60	@ 0x3c
 80195d0:	2200      	movs	r2, #0
 80195d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80195d4:	183b      	adds	r3, r7, r0
 80195d6:	781a      	ldrb	r2, [r3, #0]
 80195d8:	6879      	ldr	r1, [r7, #4]
 80195da:	0013      	movs	r3, r2
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	189b      	adds	r3, r3, r2
 80195e0:	00db      	lsls	r3, r3, #3
 80195e2:	18cb      	adds	r3, r1, r3
 80195e4:	3340      	adds	r3, #64	@ 0x40
 80195e6:	2200      	movs	r2, #0
 80195e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80195ea:	183b      	adds	r3, r7, r0
 80195ec:	781a      	ldrb	r2, [r3, #0]
 80195ee:	183b      	adds	r3, r7, r0
 80195f0:	3201      	adds	r2, #1
 80195f2:	701a      	strb	r2, [r3, #0]
 80195f4:	210f      	movs	r1, #15
 80195f6:	187b      	adds	r3, r7, r1
 80195f8:	781a      	ldrb	r2, [r3, #0]
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	429a      	cmp	r2, r3
 8019600:	d3ae      	bcc.n	8019560 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019602:	187b      	adds	r3, r7, r1
 8019604:	2200      	movs	r2, #0
 8019606:	701a      	strb	r2, [r3, #0]
 8019608:	e056      	b.n	80196b8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801960a:	240f      	movs	r4, #15
 801960c:	193b      	adds	r3, r7, r4
 801960e:	781a      	ldrb	r2, [r3, #0]
 8019610:	6878      	ldr	r0, [r7, #4]
 8019612:	236a      	movs	r3, #106	@ 0x6a
 8019614:	33ff      	adds	r3, #255	@ 0xff
 8019616:	0019      	movs	r1, r3
 8019618:	0013      	movs	r3, r2
 801961a:	009b      	lsls	r3, r3, #2
 801961c:	189b      	adds	r3, r3, r2
 801961e:	00db      	lsls	r3, r3, #3
 8019620:	18c3      	adds	r3, r0, r3
 8019622:	185b      	adds	r3, r3, r1
 8019624:	2200      	movs	r2, #0
 8019626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019628:	193b      	adds	r3, r7, r4
 801962a:	781a      	ldrb	r2, [r3, #0]
 801962c:	6878      	ldr	r0, [r7, #4]
 801962e:	23b4      	movs	r3, #180	@ 0xb4
 8019630:	0059      	lsls	r1, r3, #1
 8019632:	0013      	movs	r3, r2
 8019634:	009b      	lsls	r3, r3, #2
 8019636:	189b      	adds	r3, r3, r2
 8019638:	00db      	lsls	r3, r3, #3
 801963a:	18c3      	adds	r3, r0, r3
 801963c:	185b      	adds	r3, r3, r1
 801963e:	193a      	adds	r2, r7, r4
 8019640:	7812      	ldrb	r2, [r2, #0]
 8019642:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019644:	193b      	adds	r3, r7, r4
 8019646:	781a      	ldrb	r2, [r3, #0]
 8019648:	6878      	ldr	r0, [r7, #4]
 801964a:	236c      	movs	r3, #108	@ 0x6c
 801964c:	33ff      	adds	r3, #255	@ 0xff
 801964e:	0019      	movs	r1, r3
 8019650:	0013      	movs	r3, r2
 8019652:	009b      	lsls	r3, r3, #2
 8019654:	189b      	adds	r3, r3, r2
 8019656:	00db      	lsls	r3, r3, #3
 8019658:	18c3      	adds	r3, r0, r3
 801965a:	185b      	adds	r3, r3, r1
 801965c:	2200      	movs	r2, #0
 801965e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019660:	193b      	adds	r3, r7, r4
 8019662:	781a      	ldrb	r2, [r3, #0]
 8019664:	6878      	ldr	r0, [r7, #4]
 8019666:	23bc      	movs	r3, #188	@ 0xbc
 8019668:	0059      	lsls	r1, r3, #1
 801966a:	0013      	movs	r3, r2
 801966c:	009b      	lsls	r3, r3, #2
 801966e:	189b      	adds	r3, r3, r2
 8019670:	00db      	lsls	r3, r3, #3
 8019672:	18c3      	adds	r3, r0, r3
 8019674:	185b      	adds	r3, r3, r1
 8019676:	2200      	movs	r2, #0
 8019678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801967a:	193b      	adds	r3, r7, r4
 801967c:	781a      	ldrb	r2, [r3, #0]
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	23be      	movs	r3, #190	@ 0xbe
 8019682:	0059      	lsls	r1, r3, #1
 8019684:	0013      	movs	r3, r2
 8019686:	009b      	lsls	r3, r3, #2
 8019688:	189b      	adds	r3, r3, r2
 801968a:	00db      	lsls	r3, r3, #3
 801968c:	18c3      	adds	r3, r0, r3
 801968e:	185b      	adds	r3, r3, r1
 8019690:	2200      	movs	r2, #0
 8019692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019694:	193b      	adds	r3, r7, r4
 8019696:	781a      	ldrb	r2, [r3, #0]
 8019698:	6878      	ldr	r0, [r7, #4]
 801969a:	23c0      	movs	r3, #192	@ 0xc0
 801969c:	0059      	lsls	r1, r3, #1
 801969e:	0013      	movs	r3, r2
 80196a0:	009b      	lsls	r3, r3, #2
 80196a2:	189b      	adds	r3, r3, r2
 80196a4:	00db      	lsls	r3, r3, #3
 80196a6:	18c3      	adds	r3, r0, r3
 80196a8:	185b      	adds	r3, r3, r1
 80196aa:	2200      	movs	r2, #0
 80196ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80196ae:	193b      	adds	r3, r7, r4
 80196b0:	781a      	ldrb	r2, [r3, #0]
 80196b2:	193b      	adds	r3, r7, r4
 80196b4:	3201      	adds	r2, #1
 80196b6:	701a      	strb	r2, [r3, #0]
 80196b8:	230f      	movs	r3, #15
 80196ba:	18fb      	adds	r3, r7, r3
 80196bc:	781a      	ldrb	r2, [r3, #0]
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	429a      	cmp	r2, r3
 80196c4:	d3a1      	bcc.n	801960a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	6818      	ldr	r0, [r3, #0]
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	466a      	mov	r2, sp
 80196ce:	0011      	movs	r1, r2
 80196d0:	001a      	movs	r2, r3
 80196d2:	3210      	adds	r2, #16
 80196d4:	ca70      	ldmia	r2!, {r4, r5, r6}
 80196d6:	c170      	stmia	r1!, {r4, r5, r6}
 80196d8:	ca30      	ldmia	r2!, {r4, r5}
 80196da:	c130      	stmia	r1!, {r4, r5}
 80196dc:	6859      	ldr	r1, [r3, #4]
 80196de:	689a      	ldr	r2, [r3, #8]
 80196e0:	68db      	ldr	r3, [r3, #12]
 80196e2:	f005 ff4d 	bl	801f580 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2224      	movs	r2, #36	@ 0x24
 80196ea:	2100      	movs	r1, #0
 80196ec:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	4a07      	ldr	r2, [pc, #28]	@ (8019710 <HAL_PCD_Init+0x1fc>)
 80196f2:	2101      	movs	r1, #1
 80196f4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	69db      	ldr	r3, [r3, #28]
 80196fa:	2b01      	cmp	r3, #1
 80196fc:	d103      	bne.n	8019706 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	0018      	movs	r0, r3
 8019702:	f001 fd23 	bl	801b14c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8019706:	2300      	movs	r3, #0
}
 8019708:	0018      	movs	r0, r3
 801970a:	46bd      	mov	sp, r7
 801970c:	b005      	add	sp, #20
 801970e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019710:	000002a9 	.word	0x000002a9

08019714 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b082      	sub	sp, #8
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 801971c:	687a      	ldr	r2, [r7, #4]
 801971e:	23aa      	movs	r3, #170	@ 0xaa
 8019720:	009b      	lsls	r3, r3, #2
 8019722:	5cd3      	ldrb	r3, [r2, r3]
 8019724:	2b01      	cmp	r3, #1
 8019726:	d101      	bne.n	801972c <HAL_PCD_Start+0x18>
 8019728:	2302      	movs	r3, #2
 801972a:	e014      	b.n	8019756 <HAL_PCD_Start+0x42>
 801972c:	687a      	ldr	r2, [r7, #4]
 801972e:	23aa      	movs	r3, #170	@ 0xaa
 8019730:	009b      	lsls	r3, r3, #2
 8019732:	2101      	movs	r1, #1
 8019734:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	0018      	movs	r0, r3
 801973c:	f005 fef0 	bl	801f520 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	0018      	movs	r0, r3
 8019746:	f007 fef3 	bl	8021530 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801974a:	687a      	ldr	r2, [r7, #4]
 801974c:	23aa      	movs	r3, #170	@ 0xaa
 801974e:	009b      	lsls	r3, r3, #2
 8019750:	2100      	movs	r1, #0
 8019752:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019754:	2300      	movs	r3, #0
}
 8019756:	0018      	movs	r0, r3
 8019758:	46bd      	mov	sp, r7
 801975a:	b002      	add	sp, #8
 801975c:	bd80      	pop	{r7, pc}
	...

08019760 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	0018      	movs	r0, r3
 801976e:	f007 fef5 	bl	802155c <USB_ReadInterrupts>
 8019772:	0003      	movs	r3, r0
 8019774:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8019776:	68fa      	ldr	r2, [r7, #12]
 8019778:	2380      	movs	r3, #128	@ 0x80
 801977a:	021b      	lsls	r3, r3, #8
 801977c:	4013      	ands	r3, r2
 801977e:	d004      	beq.n	801978a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	0018      	movs	r0, r3
 8019784:	f000 fb62 	bl	8019e4c <PCD_EP_ISR_Handler>

    return;
 8019788:	e11d      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801978a:	68fa      	ldr	r2, [r7, #12]
 801978c:	2380      	movs	r3, #128	@ 0x80
 801978e:	00db      	lsls	r3, r3, #3
 8019790:	4013      	ands	r3, r2
 8019792:	d015      	beq.n	80197c0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	2244      	movs	r2, #68	@ 0x44
 801979a:	5a9b      	ldrh	r3, [r3, r2]
 801979c:	b29a      	uxth	r2, r3
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	498a      	ldr	r1, [pc, #552]	@ (80199cc <HAL_PCD_IRQHandler+0x26c>)
 80197a4:	400a      	ands	r2, r1
 80197a6:	b291      	uxth	r1, r2
 80197a8:	2244      	movs	r2, #68	@ 0x44
 80197aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	0018      	movs	r0, r3
 80197b0:	f009 ffa1 	bl	80236f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	2100      	movs	r1, #0
 80197b8:	0018      	movs	r0, r3
 80197ba:	f000 f915 	bl	80199e8 <HAL_PCD_SetAddress>

    return;
 80197be:	e102      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80197c0:	68fa      	ldr	r2, [r7, #12]
 80197c2:	2380      	movs	r3, #128	@ 0x80
 80197c4:	01db      	lsls	r3, r3, #7
 80197c6:	4013      	ands	r3, r2
 80197c8:	d00c      	beq.n	80197e4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	2244      	movs	r2, #68	@ 0x44
 80197d0:	5a9b      	ldrh	r3, [r3, r2]
 80197d2:	b29a      	uxth	r2, r3
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	497d      	ldr	r1, [pc, #500]	@ (80199d0 <HAL_PCD_IRQHandler+0x270>)
 80197da:	400a      	ands	r2, r1
 80197dc:	b291      	uxth	r1, r2
 80197de:	2244      	movs	r2, #68	@ 0x44
 80197e0:	5299      	strh	r1, [r3, r2]

    return;
 80197e2:	e0f0      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80197e4:	68fa      	ldr	r2, [r7, #12]
 80197e6:	2380      	movs	r3, #128	@ 0x80
 80197e8:	019b      	lsls	r3, r3, #6
 80197ea:	4013      	ands	r3, r2
 80197ec:	d00c      	beq.n	8019808 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	2244      	movs	r2, #68	@ 0x44
 80197f4:	5a9b      	ldrh	r3, [r3, r2]
 80197f6:	b29a      	uxth	r2, r3
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	4975      	ldr	r1, [pc, #468]	@ (80199d4 <HAL_PCD_IRQHandler+0x274>)
 80197fe:	400a      	ands	r2, r1
 8019800:	b291      	uxth	r1, r2
 8019802:	2244      	movs	r2, #68	@ 0x44
 8019804:	5299      	strh	r1, [r3, r2]

    return;
 8019806:	e0de      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8019808:	68fa      	ldr	r2, [r7, #12]
 801980a:	2380      	movs	r3, #128	@ 0x80
 801980c:	015b      	lsls	r3, r3, #5
 801980e:	4013      	ands	r3, r2
 8019810:	d038      	beq.n	8019884 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	2240      	movs	r2, #64	@ 0x40
 8019818:	5a9b      	ldrh	r3, [r3, r2]
 801981a:	b29a      	uxth	r2, r3
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	2104      	movs	r1, #4
 8019822:	438a      	bics	r2, r1
 8019824:	b291      	uxth	r1, r2
 8019826:	2240      	movs	r2, #64	@ 0x40
 8019828:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	2240      	movs	r2, #64	@ 0x40
 8019830:	5a9b      	ldrh	r3, [r3, r2]
 8019832:	b29a      	uxth	r2, r3
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	2108      	movs	r1, #8
 801983a:	438a      	bics	r2, r1
 801983c:	b291      	uxth	r1, r2
 801983e:	2240      	movs	r2, #64	@ 0x40
 8019840:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8019842:	687a      	ldr	r2, [r7, #4]
 8019844:	23b8      	movs	r3, #184	@ 0xb8
 8019846:	009b      	lsls	r3, r3, #2
 8019848:	5cd3      	ldrb	r3, [r2, r3]
 801984a:	2b01      	cmp	r3, #1
 801984c:	d109      	bne.n	8019862 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801984e:	687a      	ldr	r2, [r7, #4]
 8019850:	23b8      	movs	r3, #184	@ 0xb8
 8019852:	009b      	lsls	r3, r3, #2
 8019854:	2100      	movs	r1, #0
 8019856:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2100      	movs	r1, #0
 801985c:	0018      	movs	r0, r3
 801985e:	f001 fc9f 	bl	801b1a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	0018      	movs	r0, r3
 8019866:	f009 ff87 	bl	8023778 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	2244      	movs	r2, #68	@ 0x44
 8019870:	5a9b      	ldrh	r3, [r3, r2]
 8019872:	b29a      	uxth	r2, r3
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	4957      	ldr	r1, [pc, #348]	@ (80199d8 <HAL_PCD_IRQHandler+0x278>)
 801987a:	400a      	ands	r2, r1
 801987c:	b291      	uxth	r1, r2
 801987e:	2244      	movs	r2, #68	@ 0x44
 8019880:	5299      	strh	r1, [r3, r2]

    return;
 8019882:	e0a0      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8019884:	68fa      	ldr	r2, [r7, #12]
 8019886:	2380      	movs	r3, #128	@ 0x80
 8019888:	011b      	lsls	r3, r3, #4
 801988a:	4013      	ands	r3, r2
 801988c:	d028      	beq.n	80198e0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	2240      	movs	r2, #64	@ 0x40
 8019894:	5a9b      	ldrh	r3, [r3, r2]
 8019896:	b29a      	uxth	r2, r3
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	2108      	movs	r1, #8
 801989e:	430a      	orrs	r2, r1
 80198a0:	b291      	uxth	r1, r2
 80198a2:	2240      	movs	r2, #64	@ 0x40
 80198a4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	2244      	movs	r2, #68	@ 0x44
 80198ac:	5a9b      	ldrh	r3, [r3, r2]
 80198ae:	b29a      	uxth	r2, r3
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	4949      	ldr	r1, [pc, #292]	@ (80199dc <HAL_PCD_IRQHandler+0x27c>)
 80198b6:	400a      	ands	r2, r1
 80198b8:	b291      	uxth	r1, r2
 80198ba:	2244      	movs	r2, #68	@ 0x44
 80198bc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	2240      	movs	r2, #64	@ 0x40
 80198c4:	5a9b      	ldrh	r3, [r3, r2]
 80198c6:	b29a      	uxth	r2, r3
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	2104      	movs	r1, #4
 80198ce:	430a      	orrs	r2, r1
 80198d0:	b291      	uxth	r1, r2
 80198d2:	2240      	movs	r2, #64	@ 0x40
 80198d4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	0018      	movs	r0, r3
 80198da:	f009 ff31 	bl	8023740 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80198de:	e072      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	2280      	movs	r2, #128	@ 0x80
 80198e4:	4013      	ands	r3, r2
 80198e6:	d046      	beq.n	8019976 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	2244      	movs	r2, #68	@ 0x44
 80198ee:	5a9b      	ldrh	r3, [r3, r2]
 80198f0:	b29a      	uxth	r2, r3
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	2180      	movs	r1, #128	@ 0x80
 80198f8:	438a      	bics	r2, r1
 80198fa:	b291      	uxth	r1, r2
 80198fc:	2244      	movs	r2, #68	@ 0x44
 80198fe:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8019900:	687a      	ldr	r2, [r7, #4]
 8019902:	23b8      	movs	r3, #184	@ 0xb8
 8019904:	009b      	lsls	r3, r3, #2
 8019906:	5cd3      	ldrb	r3, [r2, r3]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d12f      	bne.n	801996c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	2240      	movs	r2, #64	@ 0x40
 8019912:	5a9b      	ldrh	r3, [r3, r2]
 8019914:	b29a      	uxth	r2, r3
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	2104      	movs	r1, #4
 801991c:	430a      	orrs	r2, r1
 801991e:	b291      	uxth	r1, r2
 8019920:	2240      	movs	r2, #64	@ 0x40
 8019922:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	2240      	movs	r2, #64	@ 0x40
 801992a:	5a9b      	ldrh	r3, [r3, r2]
 801992c:	b29a      	uxth	r2, r3
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	2108      	movs	r1, #8
 8019934:	430a      	orrs	r2, r1
 8019936:	b291      	uxth	r1, r2
 8019938:	2240      	movs	r2, #64	@ 0x40
 801993a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 801993c:	687a      	ldr	r2, [r7, #4]
 801993e:	23b8      	movs	r3, #184	@ 0xb8
 8019940:	009b      	lsls	r3, r3, #2
 8019942:	2101      	movs	r1, #1
 8019944:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	2254      	movs	r2, #84	@ 0x54
 801994c:	5a9b      	ldrh	r3, [r3, r2]
 801994e:	b29b      	uxth	r3, r3
 8019950:	089b      	lsrs	r3, r3, #2
 8019952:	223c      	movs	r2, #60	@ 0x3c
 8019954:	4013      	ands	r3, r2
 8019956:	0019      	movs	r1, r3
 8019958:	687a      	ldr	r2, [r7, #4]
 801995a:	23b9      	movs	r3, #185	@ 0xb9
 801995c:	009b      	lsls	r3, r3, #2
 801995e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	2101      	movs	r1, #1
 8019964:	0018      	movs	r0, r3
 8019966:	f001 fc1b 	bl	801b1a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801996a:	e02c      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	0018      	movs	r0, r3
 8019970:	f009 fee6 	bl	8023740 <HAL_PCD_SuspendCallback>
    return;
 8019974:	e027      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8019976:	68fa      	ldr	r2, [r7, #12]
 8019978:	2380      	movs	r3, #128	@ 0x80
 801997a:	009b      	lsls	r3, r3, #2
 801997c:	4013      	ands	r3, r2
 801997e:	d010      	beq.n	80199a2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2244      	movs	r2, #68	@ 0x44
 8019986:	5a9b      	ldrh	r3, [r3, r2]
 8019988:	b29a      	uxth	r2, r3
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	4914      	ldr	r1, [pc, #80]	@ (80199e0 <HAL_PCD_IRQHandler+0x280>)
 8019990:	400a      	ands	r2, r1
 8019992:	b291      	uxth	r1, r2
 8019994:	2244      	movs	r2, #68	@ 0x44
 8019996:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	0018      	movs	r0, r3
 801999c:	f009 fe9c 	bl	80236d8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80199a0:	e011      	b.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80199a2:	68fa      	ldr	r2, [r7, #12]
 80199a4:	2380      	movs	r3, #128	@ 0x80
 80199a6:	005b      	lsls	r3, r3, #1
 80199a8:	4013      	ands	r3, r2
 80199aa:	d00c      	beq.n	80199c6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	2244      	movs	r2, #68	@ 0x44
 80199b2:	5a9b      	ldrh	r3, [r3, r2]
 80199b4:	b29a      	uxth	r2, r3
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	490a      	ldr	r1, [pc, #40]	@ (80199e4 <HAL_PCD_IRQHandler+0x284>)
 80199bc:	400a      	ands	r2, r1
 80199be:	b291      	uxth	r1, r2
 80199c0:	2244      	movs	r2, #68	@ 0x44
 80199c2:	5299      	strh	r1, [r3, r2]

    return;
 80199c4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80199c6:	46bd      	mov	sp, r7
 80199c8:	b004      	add	sp, #16
 80199ca:	bd80      	pop	{r7, pc}
 80199cc:	fffffbff 	.word	0xfffffbff
 80199d0:	ffffbfff 	.word	0xffffbfff
 80199d4:	ffffdfff 	.word	0xffffdfff
 80199d8:	ffffefff 	.word	0xffffefff
 80199dc:	fffff7ff 	.word	0xfffff7ff
 80199e0:	fffffdff 	.word	0xfffffdff
 80199e4:	fffffeff 	.word	0xfffffeff

080199e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b082      	sub	sp, #8
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
 80199f0:	000a      	movs	r2, r1
 80199f2:	1cfb      	adds	r3, r7, #3
 80199f4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80199f6:	687a      	ldr	r2, [r7, #4]
 80199f8:	23aa      	movs	r3, #170	@ 0xaa
 80199fa:	009b      	lsls	r3, r3, #2
 80199fc:	5cd3      	ldrb	r3, [r2, r3]
 80199fe:	2b01      	cmp	r3, #1
 8019a00:	d101      	bne.n	8019a06 <HAL_PCD_SetAddress+0x1e>
 8019a02:	2302      	movs	r3, #2
 8019a04:	e017      	b.n	8019a36 <HAL_PCD_SetAddress+0x4e>
 8019a06:	687a      	ldr	r2, [r7, #4]
 8019a08:	23aa      	movs	r3, #170	@ 0xaa
 8019a0a:	009b      	lsls	r3, r3, #2
 8019a0c:	2101      	movs	r1, #1
 8019a0e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	1cfa      	adds	r2, r7, #3
 8019a14:	2124      	movs	r1, #36	@ 0x24
 8019a16:	7812      	ldrb	r2, [r2, #0]
 8019a18:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	681a      	ldr	r2, [r3, #0]
 8019a1e:	1cfb      	adds	r3, r7, #3
 8019a20:	781b      	ldrb	r3, [r3, #0]
 8019a22:	0019      	movs	r1, r3
 8019a24:	0010      	movs	r0, r2
 8019a26:	f007 fd6f 	bl	8021508 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8019a2a:	687a      	ldr	r2, [r7, #4]
 8019a2c:	23aa      	movs	r3, #170	@ 0xaa
 8019a2e:	009b      	lsls	r3, r3, #2
 8019a30:	2100      	movs	r1, #0
 8019a32:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019a34:	2300      	movs	r3, #0
}
 8019a36:	0018      	movs	r0, r3
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	b002      	add	sp, #8
 8019a3c:	bd80      	pop	{r7, pc}

08019a3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8019a3e:	b590      	push	{r4, r7, lr}
 8019a40:	b085      	sub	sp, #20
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	6078      	str	r0, [r7, #4]
 8019a46:	000c      	movs	r4, r1
 8019a48:	0010      	movs	r0, r2
 8019a4a:	0019      	movs	r1, r3
 8019a4c:	1cfb      	adds	r3, r7, #3
 8019a4e:	1c22      	adds	r2, r4, #0
 8019a50:	701a      	strb	r2, [r3, #0]
 8019a52:	003b      	movs	r3, r7
 8019a54:	1c02      	adds	r2, r0, #0
 8019a56:	801a      	strh	r2, [r3, #0]
 8019a58:	1cbb      	adds	r3, r7, #2
 8019a5a:	1c0a      	adds	r2, r1, #0
 8019a5c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8019a5e:	230b      	movs	r3, #11
 8019a60:	18fb      	adds	r3, r7, r3
 8019a62:	2200      	movs	r2, #0
 8019a64:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019a66:	1cfb      	adds	r3, r7, #3
 8019a68:	781b      	ldrb	r3, [r3, #0]
 8019a6a:	b25b      	sxtb	r3, r3
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	da0f      	bge.n	8019a90 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019a70:	1cfb      	adds	r3, r7, #3
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	2207      	movs	r2, #7
 8019a76:	4013      	ands	r3, r2
 8019a78:	1c5a      	adds	r2, r3, #1
 8019a7a:	0013      	movs	r3, r2
 8019a7c:	009b      	lsls	r3, r3, #2
 8019a7e:	189b      	adds	r3, r3, r2
 8019a80:	00db      	lsls	r3, r3, #3
 8019a82:	687a      	ldr	r2, [r7, #4]
 8019a84:	18d3      	adds	r3, r2, r3
 8019a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	2201      	movs	r2, #1
 8019a8c:	705a      	strb	r2, [r3, #1]
 8019a8e:	e00f      	b.n	8019ab0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019a90:	1cfb      	adds	r3, r7, #3
 8019a92:	781b      	ldrb	r3, [r3, #0]
 8019a94:	2207      	movs	r2, #7
 8019a96:	401a      	ands	r2, r3
 8019a98:	0013      	movs	r3, r2
 8019a9a:	009b      	lsls	r3, r3, #2
 8019a9c:	189b      	adds	r3, r3, r2
 8019a9e:	00db      	lsls	r3, r3, #3
 8019aa0:	3369      	adds	r3, #105	@ 0x69
 8019aa2:	33ff      	adds	r3, #255	@ 0xff
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	18d3      	adds	r3, r2, r3
 8019aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	2200      	movs	r2, #0
 8019aae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8019ab0:	1cfb      	adds	r3, r7, #3
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	2207      	movs	r2, #7
 8019ab6:	4013      	ands	r3, r2
 8019ab8:	b2da      	uxtb	r2, r3
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8019abe:	003b      	movs	r3, r7
 8019ac0:	881a      	ldrh	r2, [r3, #0]
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	1cba      	adds	r2, r7, #2
 8019aca:	7812      	ldrb	r2, [r2, #0]
 8019acc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8019ace:	1cbb      	adds	r3, r7, #2
 8019ad0:	781b      	ldrb	r3, [r3, #0]
 8019ad2:	2b02      	cmp	r3, #2
 8019ad4:	d102      	bne.n	8019adc <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	2200      	movs	r2, #0
 8019ada:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019adc:	687a      	ldr	r2, [r7, #4]
 8019ade:	23aa      	movs	r3, #170	@ 0xaa
 8019ae0:	009b      	lsls	r3, r3, #2
 8019ae2:	5cd3      	ldrb	r3, [r2, r3]
 8019ae4:	2b01      	cmp	r3, #1
 8019ae6:	d101      	bne.n	8019aec <HAL_PCD_EP_Open+0xae>
 8019ae8:	2302      	movs	r3, #2
 8019aea:	e013      	b.n	8019b14 <HAL_PCD_EP_Open+0xd6>
 8019aec:	687a      	ldr	r2, [r7, #4]
 8019aee:	23aa      	movs	r3, #170	@ 0xaa
 8019af0:	009b      	lsls	r3, r3, #2
 8019af2:	2101      	movs	r1, #1
 8019af4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	68fa      	ldr	r2, [r7, #12]
 8019afc:	0011      	movs	r1, r2
 8019afe:	0018      	movs	r0, r3
 8019b00:	f005 fd66 	bl	801f5d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019b04:	687a      	ldr	r2, [r7, #4]
 8019b06:	23aa      	movs	r3, #170	@ 0xaa
 8019b08:	009b      	lsls	r3, r3, #2
 8019b0a:	2100      	movs	r1, #0
 8019b0c:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019b0e:	230b      	movs	r3, #11
 8019b10:	18fb      	adds	r3, r7, r3
 8019b12:	781b      	ldrb	r3, [r3, #0]
}
 8019b14:	0018      	movs	r0, r3
 8019b16:	46bd      	mov	sp, r7
 8019b18:	b005      	add	sp, #20
 8019b1a:	bd90      	pop	{r4, r7, pc}

08019b1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b084      	sub	sp, #16
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	000a      	movs	r2, r1
 8019b26:	1cfb      	adds	r3, r7, #3
 8019b28:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019b2a:	1cfb      	adds	r3, r7, #3
 8019b2c:	781b      	ldrb	r3, [r3, #0]
 8019b2e:	b25b      	sxtb	r3, r3
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	da0f      	bge.n	8019b54 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019b34:	1cfb      	adds	r3, r7, #3
 8019b36:	781b      	ldrb	r3, [r3, #0]
 8019b38:	2207      	movs	r2, #7
 8019b3a:	4013      	ands	r3, r2
 8019b3c:	1c5a      	adds	r2, r3, #1
 8019b3e:	0013      	movs	r3, r2
 8019b40:	009b      	lsls	r3, r3, #2
 8019b42:	189b      	adds	r3, r3, r2
 8019b44:	00db      	lsls	r3, r3, #3
 8019b46:	687a      	ldr	r2, [r7, #4]
 8019b48:	18d3      	adds	r3, r2, r3
 8019b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	2201      	movs	r2, #1
 8019b50:	705a      	strb	r2, [r3, #1]
 8019b52:	e00f      	b.n	8019b74 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019b54:	1cfb      	adds	r3, r7, #3
 8019b56:	781b      	ldrb	r3, [r3, #0]
 8019b58:	2207      	movs	r2, #7
 8019b5a:	401a      	ands	r2, r3
 8019b5c:	0013      	movs	r3, r2
 8019b5e:	009b      	lsls	r3, r3, #2
 8019b60:	189b      	adds	r3, r3, r2
 8019b62:	00db      	lsls	r3, r3, #3
 8019b64:	3369      	adds	r3, #105	@ 0x69
 8019b66:	33ff      	adds	r3, #255	@ 0xff
 8019b68:	687a      	ldr	r2, [r7, #4]
 8019b6a:	18d3      	adds	r3, r2, r3
 8019b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	2200      	movs	r2, #0
 8019b72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019b74:	1cfb      	adds	r3, r7, #3
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	2207      	movs	r2, #7
 8019b7a:	4013      	ands	r3, r2
 8019b7c:	b2da      	uxtb	r2, r3
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019b82:	687a      	ldr	r2, [r7, #4]
 8019b84:	23aa      	movs	r3, #170	@ 0xaa
 8019b86:	009b      	lsls	r3, r3, #2
 8019b88:	5cd3      	ldrb	r3, [r2, r3]
 8019b8a:	2b01      	cmp	r3, #1
 8019b8c:	d101      	bne.n	8019b92 <HAL_PCD_EP_Close+0x76>
 8019b8e:	2302      	movs	r3, #2
 8019b90:	e011      	b.n	8019bb6 <HAL_PCD_EP_Close+0x9a>
 8019b92:	687a      	ldr	r2, [r7, #4]
 8019b94:	23aa      	movs	r3, #170	@ 0xaa
 8019b96:	009b      	lsls	r3, r3, #2
 8019b98:	2101      	movs	r1, #1
 8019b9a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	68fa      	ldr	r2, [r7, #12]
 8019ba2:	0011      	movs	r1, r2
 8019ba4:	0018      	movs	r0, r3
 8019ba6:	f006 f8b5 	bl	801fd14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019baa:	687a      	ldr	r2, [r7, #4]
 8019bac:	23aa      	movs	r3, #170	@ 0xaa
 8019bae:	009b      	lsls	r3, r3, #2
 8019bb0:	2100      	movs	r1, #0
 8019bb2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019bb4:	2300      	movs	r3, #0
}
 8019bb6:	0018      	movs	r0, r3
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	b004      	add	sp, #16
 8019bbc:	bd80      	pop	{r7, pc}

08019bbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019bbe:	b580      	push	{r7, lr}
 8019bc0:	b086      	sub	sp, #24
 8019bc2:	af00      	add	r7, sp, #0
 8019bc4:	60f8      	str	r0, [r7, #12]
 8019bc6:	607a      	str	r2, [r7, #4]
 8019bc8:	603b      	str	r3, [r7, #0]
 8019bca:	200b      	movs	r0, #11
 8019bcc:	183b      	adds	r3, r7, r0
 8019bce:	1c0a      	adds	r2, r1, #0
 8019bd0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019bd2:	0001      	movs	r1, r0
 8019bd4:	187b      	adds	r3, r7, r1
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	2207      	movs	r2, #7
 8019bda:	401a      	ands	r2, r3
 8019bdc:	0013      	movs	r3, r2
 8019bde:	009b      	lsls	r3, r3, #2
 8019be0:	189b      	adds	r3, r3, r2
 8019be2:	00db      	lsls	r3, r3, #3
 8019be4:	3369      	adds	r3, #105	@ 0x69
 8019be6:	33ff      	adds	r3, #255	@ 0xff
 8019be8:	68fa      	ldr	r2, [r7, #12]
 8019bea:	18d3      	adds	r3, r2, r3
 8019bec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	687a      	ldr	r2, [r7, #4]
 8019bf2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	683a      	ldr	r2, [r7, #0]
 8019bf8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019bfa:	697b      	ldr	r3, [r7, #20]
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019c00:	697b      	ldr	r3, [r7, #20]
 8019c02:	2200      	movs	r2, #0
 8019c04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c06:	187b      	adds	r3, r7, r1
 8019c08:	781b      	ldrb	r3, [r3, #0]
 8019c0a:	2207      	movs	r2, #7
 8019c0c:	4013      	ands	r3, r2
 8019c0e:	b2da      	uxtb	r2, r3
 8019c10:	697b      	ldr	r3, [r7, #20]
 8019c12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	697a      	ldr	r2, [r7, #20]
 8019c1a:	0011      	movs	r1, r2
 8019c1c:	0018      	movs	r0, r3
 8019c1e:	f006 fa39 	bl	8020094 <USB_EPStartXfer>

  return HAL_OK;
 8019c22:	2300      	movs	r3, #0
}
 8019c24:	0018      	movs	r0, r3
 8019c26:	46bd      	mov	sp, r7
 8019c28:	b006      	add	sp, #24
 8019c2a:	bd80      	pop	{r7, pc}

08019c2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b082      	sub	sp, #8
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
 8019c34:	000a      	movs	r2, r1
 8019c36:	1cfb      	adds	r3, r7, #3
 8019c38:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019c3a:	1cfb      	adds	r3, r7, #3
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	2207      	movs	r2, #7
 8019c40:	401a      	ands	r2, r3
 8019c42:	6878      	ldr	r0, [r7, #4]
 8019c44:	23c2      	movs	r3, #194	@ 0xc2
 8019c46:	0059      	lsls	r1, r3, #1
 8019c48:	0013      	movs	r3, r2
 8019c4a:	009b      	lsls	r3, r3, #2
 8019c4c:	189b      	adds	r3, r3, r2
 8019c4e:	00db      	lsls	r3, r3, #3
 8019c50:	18c3      	adds	r3, r0, r3
 8019c52:	185b      	adds	r3, r3, r1
 8019c54:	681b      	ldr	r3, [r3, #0]
}
 8019c56:	0018      	movs	r0, r3
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	b002      	add	sp, #8
 8019c5c:	bd80      	pop	{r7, pc}

08019c5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019c5e:	b580      	push	{r7, lr}
 8019c60:	b086      	sub	sp, #24
 8019c62:	af00      	add	r7, sp, #0
 8019c64:	60f8      	str	r0, [r7, #12]
 8019c66:	607a      	str	r2, [r7, #4]
 8019c68:	603b      	str	r3, [r7, #0]
 8019c6a:	200b      	movs	r0, #11
 8019c6c:	183b      	adds	r3, r7, r0
 8019c6e:	1c0a      	adds	r2, r1, #0
 8019c70:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c72:	183b      	adds	r3, r7, r0
 8019c74:	781b      	ldrb	r3, [r3, #0]
 8019c76:	2207      	movs	r2, #7
 8019c78:	4013      	ands	r3, r2
 8019c7a:	1c5a      	adds	r2, r3, #1
 8019c7c:	0013      	movs	r3, r2
 8019c7e:	009b      	lsls	r3, r3, #2
 8019c80:	189b      	adds	r3, r3, r2
 8019c82:	00db      	lsls	r3, r3, #3
 8019c84:	68fa      	ldr	r2, [r7, #12]
 8019c86:	18d3      	adds	r3, r2, r3
 8019c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019c8a:	697b      	ldr	r3, [r7, #20]
 8019c8c:	687a      	ldr	r2, [r7, #4]
 8019c8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019c90:	697b      	ldr	r3, [r7, #20]
 8019c92:	683a      	ldr	r2, [r7, #0]
 8019c94:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	2224      	movs	r2, #36	@ 0x24
 8019c9a:	2101      	movs	r1, #1
 8019c9c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019c9e:	697b      	ldr	r3, [r7, #20]
 8019ca0:	683a      	ldr	r2, [r7, #0]
 8019ca2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019ca4:	697b      	ldr	r3, [r7, #20]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019caa:	697b      	ldr	r3, [r7, #20]
 8019cac:	2201      	movs	r2, #1
 8019cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019cb0:	183b      	adds	r3, r7, r0
 8019cb2:	781b      	ldrb	r3, [r3, #0]
 8019cb4:	2207      	movs	r2, #7
 8019cb6:	4013      	ands	r3, r2
 8019cb8:	b2da      	uxtb	r2, r3
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	697a      	ldr	r2, [r7, #20]
 8019cc4:	0011      	movs	r1, r2
 8019cc6:	0018      	movs	r0, r3
 8019cc8:	f006 f9e4 	bl	8020094 <USB_EPStartXfer>

  return HAL_OK;
 8019ccc:	2300      	movs	r3, #0
}
 8019cce:	0018      	movs	r0, r3
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	b006      	add	sp, #24
 8019cd4:	bd80      	pop	{r7, pc}

08019cd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019cd6:	b580      	push	{r7, lr}
 8019cd8:	b084      	sub	sp, #16
 8019cda:	af00      	add	r7, sp, #0
 8019cdc:	6078      	str	r0, [r7, #4]
 8019cde:	000a      	movs	r2, r1
 8019ce0:	1cfb      	adds	r3, r7, #3
 8019ce2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019ce4:	1cfb      	adds	r3, r7, #3
 8019ce6:	781b      	ldrb	r3, [r3, #0]
 8019ce8:	2207      	movs	r2, #7
 8019cea:	401a      	ands	r2, r3
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	685b      	ldr	r3, [r3, #4]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	d901      	bls.n	8019cf8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	e046      	b.n	8019d86 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019cf8:	1cfb      	adds	r3, r7, #3
 8019cfa:	781b      	ldrb	r3, [r3, #0]
 8019cfc:	b25b      	sxtb	r3, r3
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	da0f      	bge.n	8019d22 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019d02:	1cfb      	adds	r3, r7, #3
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	2207      	movs	r2, #7
 8019d08:	4013      	ands	r3, r2
 8019d0a:	1c5a      	adds	r2, r3, #1
 8019d0c:	0013      	movs	r3, r2
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	189b      	adds	r3, r3, r2
 8019d12:	00db      	lsls	r3, r3, #3
 8019d14:	687a      	ldr	r2, [r7, #4]
 8019d16:	18d3      	adds	r3, r2, r3
 8019d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	2201      	movs	r2, #1
 8019d1e:	705a      	strb	r2, [r3, #1]
 8019d20:	e00d      	b.n	8019d3e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019d22:	1cfb      	adds	r3, r7, #3
 8019d24:	781a      	ldrb	r2, [r3, #0]
 8019d26:	0013      	movs	r3, r2
 8019d28:	009b      	lsls	r3, r3, #2
 8019d2a:	189b      	adds	r3, r3, r2
 8019d2c:	00db      	lsls	r3, r3, #3
 8019d2e:	3369      	adds	r3, #105	@ 0x69
 8019d30:	33ff      	adds	r3, #255	@ 0xff
 8019d32:	687a      	ldr	r2, [r7, #4]
 8019d34:	18d3      	adds	r3, r2, r3
 8019d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	2201      	movs	r2, #1
 8019d42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019d44:	1cfb      	adds	r3, r7, #3
 8019d46:	781b      	ldrb	r3, [r3, #0]
 8019d48:	2207      	movs	r2, #7
 8019d4a:	4013      	ands	r3, r2
 8019d4c:	b2da      	uxtb	r2, r3
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019d52:	687a      	ldr	r2, [r7, #4]
 8019d54:	23aa      	movs	r3, #170	@ 0xaa
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	5cd3      	ldrb	r3, [r2, r3]
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d101      	bne.n	8019d62 <HAL_PCD_EP_SetStall+0x8c>
 8019d5e:	2302      	movs	r3, #2
 8019d60:	e011      	b.n	8019d86 <HAL_PCD_EP_SetStall+0xb0>
 8019d62:	687a      	ldr	r2, [r7, #4]
 8019d64:	23aa      	movs	r3, #170	@ 0xaa
 8019d66:	009b      	lsls	r3, r3, #2
 8019d68:	2101      	movs	r1, #1
 8019d6a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	68fa      	ldr	r2, [r7, #12]
 8019d72:	0011      	movs	r1, r2
 8019d74:	0018      	movs	r0, r3
 8019d76:	f007 fac5 	bl	8021304 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019d7a:	687a      	ldr	r2, [r7, #4]
 8019d7c:	23aa      	movs	r3, #170	@ 0xaa
 8019d7e:	009b      	lsls	r3, r3, #2
 8019d80:	2100      	movs	r1, #0
 8019d82:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019d84:	2300      	movs	r3, #0
}
 8019d86:	0018      	movs	r0, r3
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	b004      	add	sp, #16
 8019d8c:	bd80      	pop	{r7, pc}

08019d8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019d8e:	b580      	push	{r7, lr}
 8019d90:	b084      	sub	sp, #16
 8019d92:	af00      	add	r7, sp, #0
 8019d94:	6078      	str	r0, [r7, #4]
 8019d96:	000a      	movs	r2, r1
 8019d98:	1cfb      	adds	r3, r7, #3
 8019d9a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019d9c:	1cfb      	adds	r3, r7, #3
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	220f      	movs	r2, #15
 8019da2:	401a      	ands	r2, r3
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	685b      	ldr	r3, [r3, #4]
 8019da8:	429a      	cmp	r2, r3
 8019daa:	d901      	bls.n	8019db0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019dac:	2301      	movs	r3, #1
 8019dae:	e048      	b.n	8019e42 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019db0:	1cfb      	adds	r3, r7, #3
 8019db2:	781b      	ldrb	r3, [r3, #0]
 8019db4:	b25b      	sxtb	r3, r3
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	da0f      	bge.n	8019dda <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019dba:	1cfb      	adds	r3, r7, #3
 8019dbc:	781b      	ldrb	r3, [r3, #0]
 8019dbe:	2207      	movs	r2, #7
 8019dc0:	4013      	ands	r3, r2
 8019dc2:	1c5a      	adds	r2, r3, #1
 8019dc4:	0013      	movs	r3, r2
 8019dc6:	009b      	lsls	r3, r3, #2
 8019dc8:	189b      	adds	r3, r3, r2
 8019dca:	00db      	lsls	r3, r3, #3
 8019dcc:	687a      	ldr	r2, [r7, #4]
 8019dce:	18d3      	adds	r3, r2, r3
 8019dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	2201      	movs	r2, #1
 8019dd6:	705a      	strb	r2, [r3, #1]
 8019dd8:	e00f      	b.n	8019dfa <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019dda:	1cfb      	adds	r3, r7, #3
 8019ddc:	781b      	ldrb	r3, [r3, #0]
 8019dde:	2207      	movs	r2, #7
 8019de0:	401a      	ands	r2, r3
 8019de2:	0013      	movs	r3, r2
 8019de4:	009b      	lsls	r3, r3, #2
 8019de6:	189b      	adds	r3, r3, r2
 8019de8:	00db      	lsls	r3, r3, #3
 8019dea:	3369      	adds	r3, #105	@ 0x69
 8019dec:	33ff      	adds	r3, #255	@ 0xff
 8019dee:	687a      	ldr	r2, [r7, #4]
 8019df0:	18d3      	adds	r3, r2, r3
 8019df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	2200      	movs	r2, #0
 8019df8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	2200      	movs	r2, #0
 8019dfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019e00:	1cfb      	adds	r3, r7, #3
 8019e02:	781b      	ldrb	r3, [r3, #0]
 8019e04:	2207      	movs	r2, #7
 8019e06:	4013      	ands	r3, r2
 8019e08:	b2da      	uxtb	r2, r3
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019e0e:	687a      	ldr	r2, [r7, #4]
 8019e10:	23aa      	movs	r3, #170	@ 0xaa
 8019e12:	009b      	lsls	r3, r3, #2
 8019e14:	5cd3      	ldrb	r3, [r2, r3]
 8019e16:	2b01      	cmp	r3, #1
 8019e18:	d101      	bne.n	8019e1e <HAL_PCD_EP_ClrStall+0x90>
 8019e1a:	2302      	movs	r3, #2
 8019e1c:	e011      	b.n	8019e42 <HAL_PCD_EP_ClrStall+0xb4>
 8019e1e:	687a      	ldr	r2, [r7, #4]
 8019e20:	23aa      	movs	r3, #170	@ 0xaa
 8019e22:	009b      	lsls	r3, r3, #2
 8019e24:	2101      	movs	r1, #1
 8019e26:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	68fa      	ldr	r2, [r7, #12]
 8019e2e:	0011      	movs	r1, r2
 8019e30:	0018      	movs	r0, r3
 8019e32:	f007 fab7 	bl	80213a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019e36:	687a      	ldr	r2, [r7, #4]
 8019e38:	23aa      	movs	r3, #170	@ 0xaa
 8019e3a:	009b      	lsls	r3, r3, #2
 8019e3c:	2100      	movs	r1, #0
 8019e3e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019e40:	2300      	movs	r3, #0
}
 8019e42:	0018      	movs	r0, r3
 8019e44:	46bd      	mov	sp, r7
 8019e46:	b004      	add	sp, #16
 8019e48:	bd80      	pop	{r7, pc}
	...

08019e4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019e4c:	b5b0      	push	{r4, r5, r7, lr}
 8019e4e:	b096      	sub	sp, #88	@ 0x58
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019e54:	f000 fbec 	bl	801a630 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	204e      	movs	r0, #78	@ 0x4e
 8019e5e:	183b      	adds	r3, r7, r0
 8019e60:	2144      	movs	r1, #68	@ 0x44
 8019e62:	5a52      	ldrh	r2, [r2, r1]
 8019e64:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019e66:	183b      	adds	r3, r7, r0
 8019e68:	881b      	ldrh	r3, [r3, #0]
 8019e6a:	b2da      	uxtb	r2, r3
 8019e6c:	244d      	movs	r4, #77	@ 0x4d
 8019e6e:	193b      	adds	r3, r7, r4
 8019e70:	210f      	movs	r1, #15
 8019e72:	400a      	ands	r2, r1
 8019e74:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019e76:	193b      	adds	r3, r7, r4
 8019e78:	781b      	ldrb	r3, [r3, #0]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d000      	beq.n	8019e80 <PCD_EP_ISR_Handler+0x34>
 8019e7e:	e18f      	b.n	801a1a0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019e80:	183b      	adds	r3, r7, r0
 8019e82:	881b      	ldrh	r3, [r3, #0]
 8019e84:	2210      	movs	r2, #16
 8019e86:	4013      	ands	r3, r2
 8019e88:	d155      	bne.n	8019f36 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	881b      	ldrh	r3, [r3, #0]
 8019e90:	b29a      	uxth	r2, r3
 8019e92:	200e      	movs	r0, #14
 8019e94:	183b      	adds	r3, r7, r0
 8019e96:	49bb      	ldr	r1, [pc, #748]	@ (801a184 <PCD_EP_ISR_Handler+0x338>)
 8019e98:	400a      	ands	r2, r1
 8019e9a:	801a      	strh	r2, [r3, #0]
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	183a      	adds	r2, r7, r0
 8019ea2:	8812      	ldrh	r2, [r2, #0]
 8019ea4:	49b8      	ldr	r1, [pc, #736]	@ (801a188 <PCD_EP_ISR_Handler+0x33c>)
 8019ea6:	430a      	orrs	r2, r1
 8019ea8:	b292      	uxth	r2, r2
 8019eaa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	3328      	adds	r3, #40	@ 0x28
 8019eb0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	2250      	movs	r2, #80	@ 0x50
 8019eb8:	5a9b      	ldrh	r3, [r3, r2]
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	001a      	movs	r2, r3
 8019ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ec0:	781b      	ldrb	r3, [r3, #0]
 8019ec2:	00db      	lsls	r3, r3, #3
 8019ec4:	18d2      	adds	r2, r2, r3
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	18d3      	adds	r3, r2, r3
 8019ecc:	4aaf      	ldr	r2, [pc, #700]	@ (801a18c <PCD_EP_ISR_Handler+0x340>)
 8019ece:	4694      	mov	ip, r2
 8019ed0:	4463      	add	r3, ip
 8019ed2:	881b      	ldrh	r3, [r3, #0]
 8019ed4:	059b      	lsls	r3, r3, #22
 8019ed6:	0d9a      	lsrs	r2, r3, #22
 8019ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019eda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ede:	695a      	ldr	r2, [r3, #20]
 8019ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ee2:	69db      	ldr	r3, [r3, #28]
 8019ee4:	18d2      	adds	r2, r2, r3
 8019ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ee8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	2100      	movs	r1, #0
 8019eee:	0018      	movs	r0, r3
 8019ef0:	f009 fbd4 	bl	802369c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	2224      	movs	r2, #36	@ 0x24
 8019ef8:	5c9b      	ldrb	r3, [r3, r2]
 8019efa:	b2db      	uxtb	r3, r3
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d101      	bne.n	8019f04 <PCD_EP_ISR_Handler+0xb8>
 8019f00:	f000 fb96 	bl	801a630 <PCD_EP_ISR_Handler+0x7e4>
 8019f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f06:	699b      	ldr	r3, [r3, #24]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d001      	beq.n	8019f10 <PCD_EP_ISR_Handler+0xc4>
 8019f0c:	f000 fb90 	bl	801a630 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	2224      	movs	r2, #36	@ 0x24
 8019f14:	5c9b      	ldrb	r3, [r3, r2]
 8019f16:	b2db      	uxtb	r3, r3
 8019f18:	2280      	movs	r2, #128	@ 0x80
 8019f1a:	4252      	negs	r2, r2
 8019f1c:	4313      	orrs	r3, r2
 8019f1e:	b2da      	uxtb	r2, r3
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	0011      	movs	r1, r2
 8019f26:	224c      	movs	r2, #76	@ 0x4c
 8019f28:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	2224      	movs	r2, #36	@ 0x24
 8019f2e:	2100      	movs	r1, #0
 8019f30:	5499      	strb	r1, [r3, r2]
 8019f32:	f000 fb7d 	bl	801a630 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	3369      	adds	r3, #105	@ 0x69
 8019f3a:	33ff      	adds	r3, #255	@ 0xff
 8019f3c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	681a      	ldr	r2, [r3, #0]
 8019f42:	214a      	movs	r1, #74	@ 0x4a
 8019f44:	187b      	adds	r3, r7, r1
 8019f46:	8812      	ldrh	r2, [r2, #0]
 8019f48:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019f4a:	187b      	adds	r3, r7, r1
 8019f4c:	881a      	ldrh	r2, [r3, #0]
 8019f4e:	2380      	movs	r3, #128	@ 0x80
 8019f50:	011b      	lsls	r3, r3, #4
 8019f52:	4013      	ands	r3, r2
 8019f54:	d037      	beq.n	8019fc6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	2250      	movs	r2, #80	@ 0x50
 8019f5c:	5a9b      	ldrh	r3, [r3, r2]
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	001a      	movs	r2, r3
 8019f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f64:	781b      	ldrb	r3, [r3, #0]
 8019f66:	00db      	lsls	r3, r3, #3
 8019f68:	18d2      	adds	r2, r2, r3
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	18d3      	adds	r3, r2, r3
 8019f70:	4a87      	ldr	r2, [pc, #540]	@ (801a190 <PCD_EP_ISR_Handler+0x344>)
 8019f72:	4694      	mov	ip, r2
 8019f74:	4463      	add	r3, ip
 8019f76:	881b      	ldrh	r3, [r3, #0]
 8019f78:	059b      	lsls	r3, r3, #22
 8019f7a:	0d9a      	lsrs	r2, r3, #22
 8019f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f7e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	6818      	ldr	r0, [r3, #0]
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	22ac      	movs	r2, #172	@ 0xac
 8019f88:	0092      	lsls	r2, r2, #2
 8019f8a:	1899      	adds	r1, r3, r2
 8019f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f8e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f92:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019f94:	b29b      	uxth	r3, r3
 8019f96:	f007 fb39 	bl	802160c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	881b      	ldrh	r3, [r3, #0]
 8019fa0:	b29a      	uxth	r2, r3
 8019fa2:	2010      	movs	r0, #16
 8019fa4:	183b      	adds	r3, r7, r0
 8019fa6:	497b      	ldr	r1, [pc, #492]	@ (801a194 <PCD_EP_ISR_Handler+0x348>)
 8019fa8:	400a      	ands	r2, r1
 8019faa:	801a      	strh	r2, [r3, #0]
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	183a      	adds	r2, r7, r0
 8019fb2:	8812      	ldrh	r2, [r2, #0]
 8019fb4:	2180      	movs	r1, #128	@ 0x80
 8019fb6:	430a      	orrs	r2, r1
 8019fb8:	b292      	uxth	r2, r2
 8019fba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	0018      	movs	r0, r3
 8019fc0:	f009 fb36 	bl	8023630 <HAL_PCD_SetupStageCallback>
 8019fc4:	e334      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019fc6:	234a      	movs	r3, #74	@ 0x4a
 8019fc8:	18fb      	adds	r3, r7, r3
 8019fca:	2200      	movs	r2, #0
 8019fcc:	5e9b      	ldrsh	r3, [r3, r2]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	db00      	blt.n	8019fd4 <PCD_EP_ISR_Handler+0x188>
 8019fd2:	e32d      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	881b      	ldrh	r3, [r3, #0]
 8019fda:	b29a      	uxth	r2, r3
 8019fdc:	201e      	movs	r0, #30
 8019fde:	183b      	adds	r3, r7, r0
 8019fe0:	496c      	ldr	r1, [pc, #432]	@ (801a194 <PCD_EP_ISR_Handler+0x348>)
 8019fe2:	400a      	ands	r2, r1
 8019fe4:	801a      	strh	r2, [r3, #0]
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	183a      	adds	r2, r7, r0
 8019fec:	8812      	ldrh	r2, [r2, #0]
 8019fee:	2180      	movs	r1, #128	@ 0x80
 8019ff0:	430a      	orrs	r2, r1
 8019ff2:	b292      	uxth	r2, r2
 8019ff4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	2250      	movs	r2, #80	@ 0x50
 8019ffc:	5a9b      	ldrh	r3, [r3, r2]
 8019ffe:	b29b      	uxth	r3, r3
 801a000:	001a      	movs	r2, r3
 801a002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a004:	781b      	ldrb	r3, [r3, #0]
 801a006:	00db      	lsls	r3, r3, #3
 801a008:	18d2      	adds	r2, r2, r3
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	18d3      	adds	r3, r2, r3
 801a010:	4a5f      	ldr	r2, [pc, #380]	@ (801a190 <PCD_EP_ISR_Handler+0x344>)
 801a012:	4694      	mov	ip, r2
 801a014:	4463      	add	r3, ip
 801a016:	881b      	ldrh	r3, [r3, #0]
 801a018:	059b      	lsls	r3, r3, #22
 801a01a:	0d9a      	lsrs	r2, r3, #22
 801a01c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a01e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801a020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a022:	69db      	ldr	r3, [r3, #28]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d01a      	beq.n	801a05e <PCD_EP_ISR_Handler+0x212>
 801a028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a02a:	695b      	ldr	r3, [r3, #20]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d016      	beq.n	801a05e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	6818      	ldr	r0, [r3, #0]
 801a034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a036:	6959      	ldr	r1, [r3, #20]
 801a038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a03a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801a03c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a03e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a040:	b29b      	uxth	r3, r3
 801a042:	f007 fae3 	bl	802160c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801a046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a048:	695a      	ldr	r2, [r3, #20]
 801a04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a04c:	69db      	ldr	r3, [r3, #28]
 801a04e:	18d2      	adds	r2, r2, r3
 801a050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a052:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	2100      	movs	r1, #0
 801a058:	0018      	movs	r0, r3
 801a05a:	f009 fafe 	bl	802365a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	681a      	ldr	r2, [r3, #0]
 801a062:	214a      	movs	r1, #74	@ 0x4a
 801a064:	187b      	adds	r3, r7, r1
 801a066:	8812      	ldrh	r2, [r2, #0]
 801a068:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801a06a:	187b      	adds	r3, r7, r1
 801a06c:	881a      	ldrh	r2, [r3, #0]
 801a06e:	2380      	movs	r3, #128	@ 0x80
 801a070:	011b      	lsls	r3, r3, #4
 801a072:	4013      	ands	r3, r2
 801a074:	d000      	beq.n	801a078 <PCD_EP_ISR_Handler+0x22c>
 801a076:	e2db      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
 801a078:	187b      	adds	r3, r7, r1
 801a07a:	881a      	ldrh	r2, [r3, #0]
 801a07c:	23c0      	movs	r3, #192	@ 0xc0
 801a07e:	019b      	lsls	r3, r3, #6
 801a080:	401a      	ands	r2, r3
 801a082:	23c0      	movs	r3, #192	@ 0xc0
 801a084:	019b      	lsls	r3, r3, #6
 801a086:	429a      	cmp	r2, r3
 801a088:	d100      	bne.n	801a08c <PCD_EP_ISR_Handler+0x240>
 801a08a:	e2d1      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	61bb      	str	r3, [r7, #24]
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	2250      	movs	r2, #80	@ 0x50
 801a098:	5a9b      	ldrh	r3, [r3, r2]
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	001a      	movs	r2, r3
 801a09e:	69bb      	ldr	r3, [r7, #24]
 801a0a0:	189b      	adds	r3, r3, r2
 801a0a2:	61bb      	str	r3, [r7, #24]
 801a0a4:	69bb      	ldr	r3, [r7, #24]
 801a0a6:	4a3a      	ldr	r2, [pc, #232]	@ (801a190 <PCD_EP_ISR_Handler+0x344>)
 801a0a8:	4694      	mov	ip, r2
 801a0aa:	4463      	add	r3, ip
 801a0ac:	617b      	str	r3, [r7, #20]
 801a0ae:	697b      	ldr	r3, [r7, #20]
 801a0b0:	881b      	ldrh	r3, [r3, #0]
 801a0b2:	b29b      	uxth	r3, r3
 801a0b4:	059b      	lsls	r3, r3, #22
 801a0b6:	0d9b      	lsrs	r3, r3, #22
 801a0b8:	b29a      	uxth	r2, r3
 801a0ba:	697b      	ldr	r3, [r7, #20]
 801a0bc:	801a      	strh	r2, [r3, #0]
 801a0be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0c0:	691b      	ldr	r3, [r3, #16]
 801a0c2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0c4:	d91a      	bls.n	801a0fc <PCD_EP_ISR_Handler+0x2b0>
 801a0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0c8:	691b      	ldr	r3, [r3, #16]
 801a0ca:	095b      	lsrs	r3, r3, #5
 801a0cc:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0d0:	691b      	ldr	r3, [r3, #16]
 801a0d2:	221f      	movs	r2, #31
 801a0d4:	4013      	ands	r3, r2
 801a0d6:	d102      	bne.n	801a0de <PCD_EP_ISR_Handler+0x292>
 801a0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0da:	3b01      	subs	r3, #1
 801a0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0de:	697b      	ldr	r3, [r7, #20]
 801a0e0:	881b      	ldrh	r3, [r3, #0]
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	029b      	lsls	r3, r3, #10
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	4313      	orrs	r3, r2
 801a0ee:	b29b      	uxth	r3, r3
 801a0f0:	4a25      	ldr	r2, [pc, #148]	@ (801a188 <PCD_EP_ISR_Handler+0x33c>)
 801a0f2:	4313      	orrs	r3, r2
 801a0f4:	b29a      	uxth	r2, r3
 801a0f6:	697b      	ldr	r3, [r7, #20]
 801a0f8:	801a      	strh	r2, [r3, #0]
 801a0fa:	e023      	b.n	801a144 <PCD_EP_ISR_Handler+0x2f8>
 801a0fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0fe:	691b      	ldr	r3, [r3, #16]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d108      	bne.n	801a116 <PCD_EP_ISR_Handler+0x2ca>
 801a104:	697b      	ldr	r3, [r7, #20]
 801a106:	881b      	ldrh	r3, [r3, #0]
 801a108:	b29b      	uxth	r3, r3
 801a10a:	4a1f      	ldr	r2, [pc, #124]	@ (801a188 <PCD_EP_ISR_Handler+0x33c>)
 801a10c:	4313      	orrs	r3, r2
 801a10e:	b29a      	uxth	r2, r3
 801a110:	697b      	ldr	r3, [r7, #20]
 801a112:	801a      	strh	r2, [r3, #0]
 801a114:	e016      	b.n	801a144 <PCD_EP_ISR_Handler+0x2f8>
 801a116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a118:	691b      	ldr	r3, [r3, #16]
 801a11a:	085b      	lsrs	r3, r3, #1
 801a11c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a11e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a120:	691b      	ldr	r3, [r3, #16]
 801a122:	2201      	movs	r2, #1
 801a124:	4013      	ands	r3, r2
 801a126:	d002      	beq.n	801a12e <PCD_EP_ISR_Handler+0x2e2>
 801a128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a12a:	3301      	adds	r3, #1
 801a12c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	881b      	ldrh	r3, [r3, #0]
 801a132:	b29a      	uxth	r2, r3
 801a134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a136:	b29b      	uxth	r3, r3
 801a138:	029b      	lsls	r3, r3, #10
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	4313      	orrs	r3, r2
 801a13e:	b29a      	uxth	r2, r3
 801a140:	697b      	ldr	r3, [r7, #20]
 801a142:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	881b      	ldrh	r3, [r3, #0]
 801a14a:	b29a      	uxth	r2, r3
 801a14c:	2012      	movs	r0, #18
 801a14e:	183b      	adds	r3, r7, r0
 801a150:	4911      	ldr	r1, [pc, #68]	@ (801a198 <PCD_EP_ISR_Handler+0x34c>)
 801a152:	400a      	ands	r2, r1
 801a154:	801a      	strh	r2, [r3, #0]
 801a156:	183b      	adds	r3, r7, r0
 801a158:	183a      	adds	r2, r7, r0
 801a15a:	8812      	ldrh	r2, [r2, #0]
 801a15c:	2180      	movs	r1, #128	@ 0x80
 801a15e:	0149      	lsls	r1, r1, #5
 801a160:	404a      	eors	r2, r1
 801a162:	801a      	strh	r2, [r3, #0]
 801a164:	183b      	adds	r3, r7, r0
 801a166:	183a      	adds	r2, r7, r0
 801a168:	8812      	ldrh	r2, [r2, #0]
 801a16a:	2180      	movs	r1, #128	@ 0x80
 801a16c:	0189      	lsls	r1, r1, #6
 801a16e:	404a      	eors	r2, r1
 801a170:	801a      	strh	r2, [r3, #0]
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	183a      	adds	r2, r7, r0
 801a178:	8812      	ldrh	r2, [r2, #0]
 801a17a:	4908      	ldr	r1, [pc, #32]	@ (801a19c <PCD_EP_ISR_Handler+0x350>)
 801a17c:	430a      	orrs	r2, r1
 801a17e:	b292      	uxth	r2, r2
 801a180:	801a      	strh	r2, [r3, #0]
 801a182:	e255      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
 801a184:	ffff8f0f 	.word	0xffff8f0f
 801a188:	ffff8000 	.word	0xffff8000
 801a18c:	00000402 	.word	0x00000402
 801a190:	00000406 	.word	0x00000406
 801a194:	00000f8f 	.word	0x00000f8f
 801a198:	ffffbf8f 	.word	0xffffbf8f
 801a19c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	001a      	movs	r2, r3
 801a1a6:	204d      	movs	r0, #77	@ 0x4d
 801a1a8:	183b      	adds	r3, r7, r0
 801a1aa:	781b      	ldrb	r3, [r3, #0]
 801a1ac:	009b      	lsls	r3, r3, #2
 801a1ae:	18d2      	adds	r2, r2, r3
 801a1b0:	214a      	movs	r1, #74	@ 0x4a
 801a1b2:	187b      	adds	r3, r7, r1
 801a1b4:	8812      	ldrh	r2, [r2, #0]
 801a1b6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a1b8:	187b      	adds	r3, r7, r1
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	5e9b      	ldrsh	r3, [r3, r2]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	db00      	blt.n	801a1c4 <PCD_EP_ISR_Handler+0x378>
 801a1c2:	e0fa      	b.n	801a3ba <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	001a      	movs	r2, r3
 801a1ca:	183b      	adds	r3, r7, r0
 801a1cc:	781b      	ldrb	r3, [r3, #0]
 801a1ce:	009b      	lsls	r3, r3, #2
 801a1d0:	18d3      	adds	r3, r2, r3
 801a1d2:	881b      	ldrh	r3, [r3, #0]
 801a1d4:	b29a      	uxth	r2, r3
 801a1d6:	2448      	movs	r4, #72	@ 0x48
 801a1d8:	193b      	adds	r3, r7, r4
 801a1da:	49d1      	ldr	r1, [pc, #836]	@ (801a520 <PCD_EP_ISR_Handler+0x6d4>)
 801a1dc:	400a      	ands	r2, r1
 801a1de:	801a      	strh	r2, [r3, #0]
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	001a      	movs	r2, r3
 801a1e6:	183b      	adds	r3, r7, r0
 801a1e8:	781b      	ldrb	r3, [r3, #0]
 801a1ea:	009b      	lsls	r3, r3, #2
 801a1ec:	18d3      	adds	r3, r2, r3
 801a1ee:	193a      	adds	r2, r7, r4
 801a1f0:	8812      	ldrh	r2, [r2, #0]
 801a1f2:	2180      	movs	r1, #128	@ 0x80
 801a1f4:	430a      	orrs	r2, r1
 801a1f6:	b292      	uxth	r2, r2
 801a1f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a1fa:	183b      	adds	r3, r7, r0
 801a1fc:	781a      	ldrb	r2, [r3, #0]
 801a1fe:	0013      	movs	r3, r2
 801a200:	009b      	lsls	r3, r3, #2
 801a202:	189b      	adds	r3, r3, r2
 801a204:	00db      	lsls	r3, r3, #3
 801a206:	3369      	adds	r3, #105	@ 0x69
 801a208:	33ff      	adds	r3, #255	@ 0xff
 801a20a:	687a      	ldr	r2, [r7, #4]
 801a20c:	18d3      	adds	r3, r2, r3
 801a20e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a212:	7b1b      	ldrb	r3, [r3, #12]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d125      	bne.n	801a264 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	2250      	movs	r2, #80	@ 0x50
 801a21e:	5a9b      	ldrh	r3, [r3, r2]
 801a220:	b29b      	uxth	r3, r3
 801a222:	001a      	movs	r2, r3
 801a224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	00db      	lsls	r3, r3, #3
 801a22a:	18d2      	adds	r2, r2, r3
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	18d3      	adds	r3, r2, r3
 801a232:	4abc      	ldr	r2, [pc, #752]	@ (801a524 <PCD_EP_ISR_Handler+0x6d8>)
 801a234:	4694      	mov	ip, r2
 801a236:	4463      	add	r3, ip
 801a238:	881a      	ldrh	r2, [r3, #0]
 801a23a:	2450      	movs	r4, #80	@ 0x50
 801a23c:	193b      	adds	r3, r7, r4
 801a23e:	0592      	lsls	r2, r2, #22
 801a240:	0d92      	lsrs	r2, r2, #22
 801a242:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a244:	193b      	adds	r3, r7, r4
 801a246:	881b      	ldrh	r3, [r3, #0]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d100      	bne.n	801a24e <PCD_EP_ISR_Handler+0x402>
 801a24c:	e08d      	b.n	801a36a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	6818      	ldr	r0, [r3, #0]
 801a252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a254:	6959      	ldr	r1, [r3, #20]
 801a256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a258:	88da      	ldrh	r2, [r3, #6]
 801a25a:	193b      	adds	r3, r7, r4
 801a25c:	881b      	ldrh	r3, [r3, #0]
 801a25e:	f007 f9d5 	bl	802160c <USB_ReadPMA>
 801a262:	e082      	b.n	801a36a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a266:	78db      	ldrb	r3, [r3, #3]
 801a268:	2b02      	cmp	r3, #2
 801a26a:	d10c      	bne.n	801a286 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a26c:	2350      	movs	r3, #80	@ 0x50
 801a26e:	18fc      	adds	r4, r7, r3
 801a270:	234a      	movs	r3, #74	@ 0x4a
 801a272:	18fb      	adds	r3, r7, r3
 801a274:	881a      	ldrh	r2, [r3, #0]
 801a276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	0018      	movs	r0, r3
 801a27c:	f000 f9ec 	bl	801a658 <HAL_PCD_EP_DB_Receive>
 801a280:	0003      	movs	r3, r0
 801a282:	8023      	strh	r3, [r4, #0]
 801a284:	e071      	b.n	801a36a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	001a      	movs	r2, r3
 801a28c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a28e:	781b      	ldrb	r3, [r3, #0]
 801a290:	009b      	lsls	r3, r3, #2
 801a292:	18d3      	adds	r3, r2, r3
 801a294:	881b      	ldrh	r3, [r3, #0]
 801a296:	b29a      	uxth	r2, r3
 801a298:	2052      	movs	r0, #82	@ 0x52
 801a29a:	183b      	adds	r3, r7, r0
 801a29c:	49a2      	ldr	r1, [pc, #648]	@ (801a528 <PCD_EP_ISR_Handler+0x6dc>)
 801a29e:	400a      	ands	r2, r1
 801a2a0:	801a      	strh	r2, [r3, #0]
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	001a      	movs	r2, r3
 801a2a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2aa:	781b      	ldrb	r3, [r3, #0]
 801a2ac:	009b      	lsls	r3, r3, #2
 801a2ae:	18d3      	adds	r3, r2, r3
 801a2b0:	183a      	adds	r2, r7, r0
 801a2b2:	8812      	ldrh	r2, [r2, #0]
 801a2b4:	499d      	ldr	r1, [pc, #628]	@ (801a52c <PCD_EP_ISR_Handler+0x6e0>)
 801a2b6:	430a      	orrs	r2, r1
 801a2b8:	b292      	uxth	r2, r2
 801a2ba:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	001a      	movs	r2, r3
 801a2c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c4:	781b      	ldrb	r3, [r3, #0]
 801a2c6:	009b      	lsls	r3, r3, #2
 801a2c8:	18d3      	adds	r3, r2, r3
 801a2ca:	881b      	ldrh	r3, [r3, #0]
 801a2cc:	b29b      	uxth	r3, r3
 801a2ce:	001a      	movs	r2, r3
 801a2d0:	2380      	movs	r3, #128	@ 0x80
 801a2d2:	01db      	lsls	r3, r3, #7
 801a2d4:	4013      	ands	r3, r2
 801a2d6:	d024      	beq.n	801a322 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2250      	movs	r2, #80	@ 0x50
 801a2de:	5a9b      	ldrh	r3, [r3, r2]
 801a2e0:	b29b      	uxth	r3, r3
 801a2e2:	001a      	movs	r2, r3
 801a2e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2e6:	781b      	ldrb	r3, [r3, #0]
 801a2e8:	00db      	lsls	r3, r3, #3
 801a2ea:	18d2      	adds	r2, r2, r3
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	18d3      	adds	r3, r2, r3
 801a2f2:	4a8f      	ldr	r2, [pc, #572]	@ (801a530 <PCD_EP_ISR_Handler+0x6e4>)
 801a2f4:	4694      	mov	ip, r2
 801a2f6:	4463      	add	r3, ip
 801a2f8:	881a      	ldrh	r2, [r3, #0]
 801a2fa:	2450      	movs	r4, #80	@ 0x50
 801a2fc:	193b      	adds	r3, r7, r4
 801a2fe:	0592      	lsls	r2, r2, #22
 801a300:	0d92      	lsrs	r2, r2, #22
 801a302:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a304:	193b      	adds	r3, r7, r4
 801a306:	881b      	ldrh	r3, [r3, #0]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d02e      	beq.n	801a36a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	6818      	ldr	r0, [r3, #0]
 801a310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a312:	6959      	ldr	r1, [r3, #20]
 801a314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a316:	891a      	ldrh	r2, [r3, #8]
 801a318:	193b      	adds	r3, r7, r4
 801a31a:	881b      	ldrh	r3, [r3, #0]
 801a31c:	f007 f976 	bl	802160c <USB_ReadPMA>
 801a320:	e023      	b.n	801a36a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	2250      	movs	r2, #80	@ 0x50
 801a328:	5a9b      	ldrh	r3, [r3, r2]
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	001a      	movs	r2, r3
 801a32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a330:	781b      	ldrb	r3, [r3, #0]
 801a332:	00db      	lsls	r3, r3, #3
 801a334:	18d2      	adds	r2, r2, r3
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	18d3      	adds	r3, r2, r3
 801a33c:	4a79      	ldr	r2, [pc, #484]	@ (801a524 <PCD_EP_ISR_Handler+0x6d8>)
 801a33e:	4694      	mov	ip, r2
 801a340:	4463      	add	r3, ip
 801a342:	881a      	ldrh	r2, [r3, #0]
 801a344:	2450      	movs	r4, #80	@ 0x50
 801a346:	193b      	adds	r3, r7, r4
 801a348:	0592      	lsls	r2, r2, #22
 801a34a:	0d92      	lsrs	r2, r2, #22
 801a34c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a34e:	193b      	adds	r3, r7, r4
 801a350:	881b      	ldrh	r3, [r3, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d009      	beq.n	801a36a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6818      	ldr	r0, [r3, #0]
 801a35a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a35c:	6959      	ldr	r1, [r3, #20]
 801a35e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a360:	895a      	ldrh	r2, [r3, #10]
 801a362:	193b      	adds	r3, r7, r4
 801a364:	881b      	ldrh	r3, [r3, #0]
 801a366:	f007 f951 	bl	802160c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a36a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a36c:	69da      	ldr	r2, [r3, #28]
 801a36e:	2150      	movs	r1, #80	@ 0x50
 801a370:	187b      	adds	r3, r7, r1
 801a372:	881b      	ldrh	r3, [r3, #0]
 801a374:	18d2      	adds	r2, r2, r3
 801a376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a378:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a37a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a37c:	695a      	ldr	r2, [r3, #20]
 801a37e:	187b      	adds	r3, r7, r1
 801a380:	881b      	ldrh	r3, [r3, #0]
 801a382:	18d2      	adds	r2, r2, r3
 801a384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a386:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a38a:	699b      	ldr	r3, [r3, #24]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d005      	beq.n	801a39c <PCD_EP_ISR_Handler+0x550>
 801a390:	187b      	adds	r3, r7, r1
 801a392:	881a      	ldrh	r2, [r3, #0]
 801a394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a396:	691b      	ldr	r3, [r3, #16]
 801a398:	429a      	cmp	r2, r3
 801a39a:	d207      	bcs.n	801a3ac <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a39e:	781a      	ldrb	r2, [r3, #0]
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	0011      	movs	r1, r2
 801a3a4:	0018      	movs	r0, r3
 801a3a6:	f009 f958 	bl	802365a <HAL_PCD_DataOutStageCallback>
 801a3aa:	e006      	b.n	801a3ba <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a3b2:	0011      	movs	r1, r2
 801a3b4:	0018      	movs	r0, r3
 801a3b6:	f005 fe6d 	bl	8020094 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a3ba:	244a      	movs	r4, #74	@ 0x4a
 801a3bc:	193b      	adds	r3, r7, r4
 801a3be:	881b      	ldrh	r3, [r3, #0]
 801a3c0:	2280      	movs	r2, #128	@ 0x80
 801a3c2:	4013      	ands	r3, r2
 801a3c4:	d100      	bne.n	801a3c8 <PCD_EP_ISR_Handler+0x57c>
 801a3c6:	e133      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a3c8:	204d      	movs	r0, #77	@ 0x4d
 801a3ca:	183b      	adds	r3, r7, r0
 801a3cc:	781b      	ldrb	r3, [r3, #0]
 801a3ce:	1c5a      	adds	r2, r3, #1
 801a3d0:	0013      	movs	r3, r2
 801a3d2:	009b      	lsls	r3, r3, #2
 801a3d4:	189b      	adds	r3, r3, r2
 801a3d6:	00db      	lsls	r3, r3, #3
 801a3d8:	687a      	ldr	r2, [r7, #4]
 801a3da:	18d3      	adds	r3, r2, r3
 801a3dc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	001a      	movs	r2, r3
 801a3e4:	183b      	adds	r3, r7, r0
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	18d3      	adds	r3, r2, r3
 801a3ec:	881b      	ldrh	r3, [r3, #0]
 801a3ee:	b29a      	uxth	r2, r3
 801a3f0:	2542      	movs	r5, #66	@ 0x42
 801a3f2:	197b      	adds	r3, r7, r5
 801a3f4:	494f      	ldr	r1, [pc, #316]	@ (801a534 <PCD_EP_ISR_Handler+0x6e8>)
 801a3f6:	400a      	ands	r2, r1
 801a3f8:	801a      	strh	r2, [r3, #0]
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	001a      	movs	r2, r3
 801a400:	183b      	adds	r3, r7, r0
 801a402:	781b      	ldrb	r3, [r3, #0]
 801a404:	009b      	lsls	r3, r3, #2
 801a406:	18d3      	adds	r3, r2, r3
 801a408:	197a      	adds	r2, r7, r5
 801a40a:	8812      	ldrh	r2, [r2, #0]
 801a40c:	494a      	ldr	r1, [pc, #296]	@ (801a538 <PCD_EP_ISR_Handler+0x6ec>)
 801a40e:	430a      	orrs	r2, r1
 801a410:	b292      	uxth	r2, r2
 801a412:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a416:	78db      	ldrb	r3, [r3, #3]
 801a418:	2b01      	cmp	r3, #1
 801a41a:	d000      	beq.n	801a41e <PCD_EP_ISR_Handler+0x5d2>
 801a41c:	e0af      	b.n	801a57e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a41e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a420:	2200      	movs	r2, #0
 801a422:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a426:	7b1b      	ldrb	r3, [r3, #12]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d100      	bne.n	801a42e <PCD_EP_ISR_Handler+0x5e2>
 801a42c:	e09f      	b.n	801a56e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a42e:	193b      	adds	r3, r7, r4
 801a430:	881b      	ldrh	r3, [r3, #0]
 801a432:	2240      	movs	r2, #64	@ 0x40
 801a434:	4013      	ands	r3, r2
 801a436:	d046      	beq.n	801a4c6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a43a:	785b      	ldrb	r3, [r3, #1]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d125      	bne.n	801a48c <PCD_EP_ISR_Handler+0x640>
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	627b      	str	r3, [r7, #36]	@ 0x24
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	2250      	movs	r2, #80	@ 0x50
 801a44c:	5a9b      	ldrh	r3, [r3, r2]
 801a44e:	b29b      	uxth	r3, r3
 801a450:	001a      	movs	r2, r3
 801a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a454:	189b      	adds	r3, r3, r2
 801a456:	627b      	str	r3, [r7, #36]	@ 0x24
 801a458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a45a:	781b      	ldrb	r3, [r3, #0]
 801a45c:	00da      	lsls	r2, r3, #3
 801a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a460:	18d3      	adds	r3, r2, r3
 801a462:	4a33      	ldr	r2, [pc, #204]	@ (801a530 <PCD_EP_ISR_Handler+0x6e4>)
 801a464:	4694      	mov	ip, r2
 801a466:	4463      	add	r3, ip
 801a468:	623b      	str	r3, [r7, #32]
 801a46a:	6a3b      	ldr	r3, [r7, #32]
 801a46c:	881b      	ldrh	r3, [r3, #0]
 801a46e:	b29b      	uxth	r3, r3
 801a470:	059b      	lsls	r3, r3, #22
 801a472:	0d9b      	lsrs	r3, r3, #22
 801a474:	b29a      	uxth	r2, r3
 801a476:	6a3b      	ldr	r3, [r7, #32]
 801a478:	801a      	strh	r2, [r3, #0]
 801a47a:	6a3b      	ldr	r3, [r7, #32]
 801a47c:	881b      	ldrh	r3, [r3, #0]
 801a47e:	b29b      	uxth	r3, r3
 801a480:	4a2d      	ldr	r2, [pc, #180]	@ (801a538 <PCD_EP_ISR_Handler+0x6ec>)
 801a482:	4313      	orrs	r3, r2
 801a484:	b29a      	uxth	r2, r3
 801a486:	6a3b      	ldr	r3, [r7, #32]
 801a488:	801a      	strh	r2, [r3, #0]
 801a48a:	e070      	b.n	801a56e <PCD_EP_ISR_Handler+0x722>
 801a48c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a48e:	785b      	ldrb	r3, [r3, #1]
 801a490:	2b01      	cmp	r3, #1
 801a492:	d16c      	bne.n	801a56e <PCD_EP_ISR_Handler+0x722>
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	2250      	movs	r2, #80	@ 0x50
 801a4a0:	5a9b      	ldrh	r3, [r3, r2]
 801a4a2:	b29b      	uxth	r3, r3
 801a4a4:	001a      	movs	r2, r3
 801a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a8:	189b      	adds	r3, r3, r2
 801a4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	00da      	lsls	r2, r3, #3
 801a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4b4:	18d3      	adds	r3, r2, r3
 801a4b6:	4a1e      	ldr	r2, [pc, #120]	@ (801a530 <PCD_EP_ISR_Handler+0x6e4>)
 801a4b8:	4694      	mov	ip, r2
 801a4ba:	4463      	add	r3, ip
 801a4bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	801a      	strh	r2, [r3, #0]
 801a4c4:	e053      	b.n	801a56e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a4cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ce:	785b      	ldrb	r3, [r3, #1]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d133      	bne.n	801a53c <PCD_EP_ISR_Handler+0x6f0>
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	637b      	str	r3, [r7, #52]	@ 0x34
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	2250      	movs	r2, #80	@ 0x50
 801a4e0:	5a9b      	ldrh	r3, [r3, r2]
 801a4e2:	b29b      	uxth	r3, r3
 801a4e4:	001a      	movs	r2, r3
 801a4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4e8:	189b      	adds	r3, r3, r2
 801a4ea:	637b      	str	r3, [r7, #52]	@ 0x34
 801a4ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	00da      	lsls	r2, r3, #3
 801a4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4f4:	18d3      	adds	r3, r2, r3
 801a4f6:	4a0b      	ldr	r2, [pc, #44]	@ (801a524 <PCD_EP_ISR_Handler+0x6d8>)
 801a4f8:	4694      	mov	ip, r2
 801a4fa:	4463      	add	r3, ip
 801a4fc:	633b      	str	r3, [r7, #48]	@ 0x30
 801a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a500:	881b      	ldrh	r3, [r3, #0]
 801a502:	b29b      	uxth	r3, r3
 801a504:	059b      	lsls	r3, r3, #22
 801a506:	0d9b      	lsrs	r3, r3, #22
 801a508:	b29a      	uxth	r2, r3
 801a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a50c:	801a      	strh	r2, [r3, #0]
 801a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a510:	881b      	ldrh	r3, [r3, #0]
 801a512:	b29b      	uxth	r3, r3
 801a514:	4a08      	ldr	r2, [pc, #32]	@ (801a538 <PCD_EP_ISR_Handler+0x6ec>)
 801a516:	4313      	orrs	r3, r2
 801a518:	b29a      	uxth	r2, r3
 801a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a51c:	801a      	strh	r2, [r3, #0]
 801a51e:	e026      	b.n	801a56e <PCD_EP_ISR_Handler+0x722>
 801a520:	00000f8f 	.word	0x00000f8f
 801a524:	00000406 	.word	0x00000406
 801a528:	ffff8f8f 	.word	0xffff8f8f
 801a52c:	ffff80c0 	.word	0xffff80c0
 801a530:	00000402 	.word	0x00000402
 801a534:	ffff8f0f 	.word	0xffff8f0f
 801a538:	ffff8000 	.word	0xffff8000
 801a53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a53e:	785b      	ldrb	r3, [r3, #1]
 801a540:	2b01      	cmp	r3, #1
 801a542:	d114      	bne.n	801a56e <PCD_EP_ISR_Handler+0x722>
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	2250      	movs	r2, #80	@ 0x50
 801a54a:	5a9b      	ldrh	r3, [r3, r2]
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	001a      	movs	r2, r3
 801a550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a552:	189b      	adds	r3, r3, r2
 801a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a558:	781b      	ldrb	r3, [r3, #0]
 801a55a:	00da      	lsls	r2, r3, #3
 801a55c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a55e:	18d3      	adds	r3, r2, r3
 801a560:	4a3b      	ldr	r2, [pc, #236]	@ (801a650 <PCD_EP_ISR_Handler+0x804>)
 801a562:	4694      	mov	ip, r2
 801a564:	4463      	add	r3, ip
 801a566:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a56a:	2200      	movs	r2, #0
 801a56c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a56e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a570:	781a      	ldrb	r2, [r3, #0]
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	0011      	movs	r1, r2
 801a576:	0018      	movs	r0, r3
 801a578:	f009 f890 	bl	802369c <HAL_PCD_DataInStageCallback>
 801a57c:	e058      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a57e:	234a      	movs	r3, #74	@ 0x4a
 801a580:	18fb      	adds	r3, r7, r3
 801a582:	881a      	ldrh	r2, [r3, #0]
 801a584:	2380      	movs	r3, #128	@ 0x80
 801a586:	005b      	lsls	r3, r3, #1
 801a588:	4013      	ands	r3, r2
 801a58a:	d149      	bne.n	801a620 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	2250      	movs	r2, #80	@ 0x50
 801a592:	5a9b      	ldrh	r3, [r3, r2]
 801a594:	b29b      	uxth	r3, r3
 801a596:	001a      	movs	r2, r3
 801a598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a59a:	781b      	ldrb	r3, [r3, #0]
 801a59c:	00db      	lsls	r3, r3, #3
 801a59e:	18d2      	adds	r2, r2, r3
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	18d3      	adds	r3, r2, r3
 801a5a6:	4a2b      	ldr	r2, [pc, #172]	@ (801a654 <PCD_EP_ISR_Handler+0x808>)
 801a5a8:	4694      	mov	ip, r2
 801a5aa:	4463      	add	r3, ip
 801a5ac:	881a      	ldrh	r2, [r3, #0]
 801a5ae:	2140      	movs	r1, #64	@ 0x40
 801a5b0:	187b      	adds	r3, r7, r1
 801a5b2:	0592      	lsls	r2, r2, #22
 801a5b4:	0d92      	lsrs	r2, r2, #22
 801a5b6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a5b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5ba:	699a      	ldr	r2, [r3, #24]
 801a5bc:	187b      	adds	r3, r7, r1
 801a5be:	881b      	ldrh	r3, [r3, #0]
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	d907      	bls.n	801a5d4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a5c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5c6:	699a      	ldr	r2, [r3, #24]
 801a5c8:	187b      	adds	r3, r7, r1
 801a5ca:	881b      	ldrh	r3, [r3, #0]
 801a5cc:	1ad2      	subs	r2, r2, r3
 801a5ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5d0:	619a      	str	r2, [r3, #24]
 801a5d2:	e002      	b.n	801a5da <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a5d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5dc:	699b      	ldr	r3, [r3, #24]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d107      	bne.n	801a5f2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a5e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5e4:	781a      	ldrb	r2, [r3, #0]
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	0011      	movs	r1, r2
 801a5ea:	0018      	movs	r0, r3
 801a5ec:	f009 f856 	bl	802369c <HAL_PCD_DataInStageCallback>
 801a5f0:	e01e      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5f4:	695a      	ldr	r2, [r3, #20]
 801a5f6:	2140      	movs	r1, #64	@ 0x40
 801a5f8:	187b      	adds	r3, r7, r1
 801a5fa:	881b      	ldrh	r3, [r3, #0]
 801a5fc:	18d2      	adds	r2, r2, r3
 801a5fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a600:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a604:	69da      	ldr	r2, [r3, #28]
 801a606:	187b      	adds	r3, r7, r1
 801a608:	881b      	ldrh	r3, [r3, #0]
 801a60a:	18d2      	adds	r2, r2, r3
 801a60c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a60e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a616:	0011      	movs	r1, r2
 801a618:	0018      	movs	r0, r3
 801a61a:	f005 fd3b 	bl	8020094 <USB_EPStartXfer>
 801a61e:	e007      	b.n	801a630 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a620:	234a      	movs	r3, #74	@ 0x4a
 801a622:	18fb      	adds	r3, r7, r3
 801a624:	881a      	ldrh	r2, [r3, #0]
 801a626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	0018      	movs	r0, r3
 801a62c:	f000 f930 	bl	801a890 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	2244      	movs	r2, #68	@ 0x44
 801a636:	5a9b      	ldrh	r3, [r3, r2]
 801a638:	b29b      	uxth	r3, r3
 801a63a:	b21b      	sxth	r3, r3
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	da01      	bge.n	801a644 <PCD_EP_ISR_Handler+0x7f8>
 801a640:	f7ff fc0a 	bl	8019e58 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a644:	2300      	movs	r3, #0
}
 801a646:	0018      	movs	r0, r3
 801a648:	46bd      	mov	sp, r7
 801a64a:	b016      	add	sp, #88	@ 0x58
 801a64c:	bdb0      	pop	{r4, r5, r7, pc}
 801a64e:	46c0      	nop			@ (mov r8, r8)
 801a650:	00000406 	.word	0x00000406
 801a654:	00000402 	.word	0x00000402

0801a658 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a658:	b590      	push	{r4, r7, lr}
 801a65a:	b089      	sub	sp, #36	@ 0x24
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	60f8      	str	r0, [r7, #12]
 801a660:	60b9      	str	r1, [r7, #8]
 801a662:	1dbb      	adds	r3, r7, #6
 801a664:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a666:	1dbb      	adds	r3, r7, #6
 801a668:	881a      	ldrh	r2, [r3, #0]
 801a66a:	2380      	movs	r3, #128	@ 0x80
 801a66c:	01db      	lsls	r3, r3, #7
 801a66e:	4013      	ands	r3, r2
 801a670:	d100      	bne.n	801a674 <HAL_PCD_EP_DB_Receive+0x1c>
 801a672:	e07d      	b.n	801a770 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	2250      	movs	r2, #80	@ 0x50
 801a67a:	5a9b      	ldrh	r3, [r3, r2]
 801a67c:	b29b      	uxth	r3, r3
 801a67e:	001a      	movs	r2, r3
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	781b      	ldrb	r3, [r3, #0]
 801a684:	00db      	lsls	r3, r3, #3
 801a686:	18d2      	adds	r2, r2, r3
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	18d3      	adds	r3, r2, r3
 801a68e:	4a7a      	ldr	r2, [pc, #488]	@ (801a878 <HAL_PCD_EP_DB_Receive+0x220>)
 801a690:	4694      	mov	ip, r2
 801a692:	4463      	add	r3, ip
 801a694:	881a      	ldrh	r2, [r3, #0]
 801a696:	211a      	movs	r1, #26
 801a698:	187b      	adds	r3, r7, r1
 801a69a:	0592      	lsls	r2, r2, #22
 801a69c:	0d92      	lsrs	r2, r2, #22
 801a69e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a6a0:	68bb      	ldr	r3, [r7, #8]
 801a6a2:	699a      	ldr	r2, [r3, #24]
 801a6a4:	187b      	adds	r3, r7, r1
 801a6a6:	881b      	ldrh	r3, [r3, #0]
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d307      	bcc.n	801a6bc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	699a      	ldr	r2, [r3, #24]
 801a6b0:	187b      	adds	r3, r7, r1
 801a6b2:	881b      	ldrh	r3, [r3, #0]
 801a6b4:	1ad2      	subs	r2, r2, r3
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	619a      	str	r2, [r3, #24]
 801a6ba:	e002      	b.n	801a6c2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	2200      	movs	r2, #0
 801a6c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a6c2:	68bb      	ldr	r3, [r7, #8]
 801a6c4:	699b      	ldr	r3, [r3, #24]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d121      	bne.n	801a70e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	001a      	movs	r2, r3
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	781b      	ldrb	r3, [r3, #0]
 801a6d4:	009b      	lsls	r3, r3, #2
 801a6d6:	18d3      	adds	r3, r2, r3
 801a6d8:	881b      	ldrh	r3, [r3, #0]
 801a6da:	b29a      	uxth	r2, r3
 801a6dc:	2018      	movs	r0, #24
 801a6de:	183b      	adds	r3, r7, r0
 801a6e0:	4966      	ldr	r1, [pc, #408]	@ (801a87c <HAL_PCD_EP_DB_Receive+0x224>)
 801a6e2:	400a      	ands	r2, r1
 801a6e4:	801a      	strh	r2, [r3, #0]
 801a6e6:	183b      	adds	r3, r7, r0
 801a6e8:	183a      	adds	r2, r7, r0
 801a6ea:	8812      	ldrh	r2, [r2, #0]
 801a6ec:	2180      	movs	r1, #128	@ 0x80
 801a6ee:	0189      	lsls	r1, r1, #6
 801a6f0:	404a      	eors	r2, r1
 801a6f2:	801a      	strh	r2, [r3, #0]
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	001a      	movs	r2, r3
 801a6fa:	68bb      	ldr	r3, [r7, #8]
 801a6fc:	781b      	ldrb	r3, [r3, #0]
 801a6fe:	009b      	lsls	r3, r3, #2
 801a700:	18d3      	adds	r3, r2, r3
 801a702:	183a      	adds	r2, r7, r0
 801a704:	8812      	ldrh	r2, [r2, #0]
 801a706:	495e      	ldr	r1, [pc, #376]	@ (801a880 <HAL_PCD_EP_DB_Receive+0x228>)
 801a708:	430a      	orrs	r2, r1
 801a70a:	b292      	uxth	r2, r2
 801a70c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a70e:	1dbb      	adds	r3, r7, #6
 801a710:	881b      	ldrh	r3, [r3, #0]
 801a712:	2240      	movs	r2, #64	@ 0x40
 801a714:	4013      	ands	r3, r2
 801a716:	d01a      	beq.n	801a74e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	001a      	movs	r2, r3
 801a71e:	68bb      	ldr	r3, [r7, #8]
 801a720:	781b      	ldrb	r3, [r3, #0]
 801a722:	009b      	lsls	r3, r3, #2
 801a724:	18d3      	adds	r3, r2, r3
 801a726:	881b      	ldrh	r3, [r3, #0]
 801a728:	b29a      	uxth	r2, r3
 801a72a:	2016      	movs	r0, #22
 801a72c:	183b      	adds	r3, r7, r0
 801a72e:	4955      	ldr	r1, [pc, #340]	@ (801a884 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a730:	400a      	ands	r2, r1
 801a732:	801a      	strh	r2, [r3, #0]
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	001a      	movs	r2, r3
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	781b      	ldrb	r3, [r3, #0]
 801a73e:	009b      	lsls	r3, r3, #2
 801a740:	18d3      	adds	r3, r2, r3
 801a742:	183a      	adds	r2, r7, r0
 801a744:	8812      	ldrh	r2, [r2, #0]
 801a746:	4950      	ldr	r1, [pc, #320]	@ (801a888 <HAL_PCD_EP_DB_Receive+0x230>)
 801a748:	430a      	orrs	r2, r1
 801a74a:	b292      	uxth	r2, r2
 801a74c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a74e:	241a      	movs	r4, #26
 801a750:	193b      	adds	r3, r7, r4
 801a752:	881b      	ldrh	r3, [r3, #0]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d100      	bne.n	801a75a <HAL_PCD_EP_DB_Receive+0x102>
 801a758:	e086      	b.n	801a868 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	6818      	ldr	r0, [r3, #0]
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	6959      	ldr	r1, [r3, #20]
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	891a      	ldrh	r2, [r3, #8]
 801a766:	193b      	adds	r3, r7, r4
 801a768:	881b      	ldrh	r3, [r3, #0]
 801a76a:	f006 ff4f 	bl	802160c <USB_ReadPMA>
 801a76e:	e07b      	b.n	801a868 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	2250      	movs	r2, #80	@ 0x50
 801a776:	5a9b      	ldrh	r3, [r3, r2]
 801a778:	b29b      	uxth	r3, r3
 801a77a:	001a      	movs	r2, r3
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	781b      	ldrb	r3, [r3, #0]
 801a780:	00db      	lsls	r3, r3, #3
 801a782:	18d2      	adds	r2, r2, r3
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	18d3      	adds	r3, r2, r3
 801a78a:	4a40      	ldr	r2, [pc, #256]	@ (801a88c <HAL_PCD_EP_DB_Receive+0x234>)
 801a78c:	4694      	mov	ip, r2
 801a78e:	4463      	add	r3, ip
 801a790:	881a      	ldrh	r2, [r3, #0]
 801a792:	211a      	movs	r1, #26
 801a794:	187b      	adds	r3, r7, r1
 801a796:	0592      	lsls	r2, r2, #22
 801a798:	0d92      	lsrs	r2, r2, #22
 801a79a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	699a      	ldr	r2, [r3, #24]
 801a7a0:	187b      	adds	r3, r7, r1
 801a7a2:	881b      	ldrh	r3, [r3, #0]
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d307      	bcc.n	801a7b8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a7a8:	68bb      	ldr	r3, [r7, #8]
 801a7aa:	699a      	ldr	r2, [r3, #24]
 801a7ac:	187b      	adds	r3, r7, r1
 801a7ae:	881b      	ldrh	r3, [r3, #0]
 801a7b0:	1ad2      	subs	r2, r2, r3
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	619a      	str	r2, [r3, #24]
 801a7b6:	e002      	b.n	801a7be <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	699b      	ldr	r3, [r3, #24]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d121      	bne.n	801a80a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	001a      	movs	r2, r3
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	781b      	ldrb	r3, [r3, #0]
 801a7d0:	009b      	lsls	r3, r3, #2
 801a7d2:	18d3      	adds	r3, r2, r3
 801a7d4:	881b      	ldrh	r3, [r3, #0]
 801a7d6:	b29a      	uxth	r2, r3
 801a7d8:	201e      	movs	r0, #30
 801a7da:	183b      	adds	r3, r7, r0
 801a7dc:	4927      	ldr	r1, [pc, #156]	@ (801a87c <HAL_PCD_EP_DB_Receive+0x224>)
 801a7de:	400a      	ands	r2, r1
 801a7e0:	801a      	strh	r2, [r3, #0]
 801a7e2:	183b      	adds	r3, r7, r0
 801a7e4:	183a      	adds	r2, r7, r0
 801a7e6:	8812      	ldrh	r2, [r2, #0]
 801a7e8:	2180      	movs	r1, #128	@ 0x80
 801a7ea:	0189      	lsls	r1, r1, #6
 801a7ec:	404a      	eors	r2, r1
 801a7ee:	801a      	strh	r2, [r3, #0]
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	001a      	movs	r2, r3
 801a7f6:	68bb      	ldr	r3, [r7, #8]
 801a7f8:	781b      	ldrb	r3, [r3, #0]
 801a7fa:	009b      	lsls	r3, r3, #2
 801a7fc:	18d3      	adds	r3, r2, r3
 801a7fe:	183a      	adds	r2, r7, r0
 801a800:	8812      	ldrh	r2, [r2, #0]
 801a802:	491f      	ldr	r1, [pc, #124]	@ (801a880 <HAL_PCD_EP_DB_Receive+0x228>)
 801a804:	430a      	orrs	r2, r1
 801a806:	b292      	uxth	r2, r2
 801a808:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a80a:	1dbb      	adds	r3, r7, #6
 801a80c:	881b      	ldrh	r3, [r3, #0]
 801a80e:	2240      	movs	r2, #64	@ 0x40
 801a810:	4013      	ands	r3, r2
 801a812:	d11a      	bne.n	801a84a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	001a      	movs	r2, r3
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	009b      	lsls	r3, r3, #2
 801a820:	18d3      	adds	r3, r2, r3
 801a822:	881b      	ldrh	r3, [r3, #0]
 801a824:	b29a      	uxth	r2, r3
 801a826:	201c      	movs	r0, #28
 801a828:	183b      	adds	r3, r7, r0
 801a82a:	4916      	ldr	r1, [pc, #88]	@ (801a884 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a82c:	400a      	ands	r2, r1
 801a82e:	801a      	strh	r2, [r3, #0]
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	001a      	movs	r2, r3
 801a836:	68bb      	ldr	r3, [r7, #8]
 801a838:	781b      	ldrb	r3, [r3, #0]
 801a83a:	009b      	lsls	r3, r3, #2
 801a83c:	18d3      	adds	r3, r2, r3
 801a83e:	183a      	adds	r2, r7, r0
 801a840:	8812      	ldrh	r2, [r2, #0]
 801a842:	4911      	ldr	r1, [pc, #68]	@ (801a888 <HAL_PCD_EP_DB_Receive+0x230>)
 801a844:	430a      	orrs	r2, r1
 801a846:	b292      	uxth	r2, r2
 801a848:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a84a:	241a      	movs	r4, #26
 801a84c:	193b      	adds	r3, r7, r4
 801a84e:	881b      	ldrh	r3, [r3, #0]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d009      	beq.n	801a868 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	6818      	ldr	r0, [r3, #0]
 801a858:	68bb      	ldr	r3, [r7, #8]
 801a85a:	6959      	ldr	r1, [r3, #20]
 801a85c:	68bb      	ldr	r3, [r7, #8]
 801a85e:	895a      	ldrh	r2, [r3, #10]
 801a860:	193b      	adds	r3, r7, r4
 801a862:	881b      	ldrh	r3, [r3, #0]
 801a864:	f006 fed2 	bl	802160c <USB_ReadPMA>
    }
  }

  return count;
 801a868:	231a      	movs	r3, #26
 801a86a:	18fb      	adds	r3, r7, r3
 801a86c:	881b      	ldrh	r3, [r3, #0]
}
 801a86e:	0018      	movs	r0, r3
 801a870:	46bd      	mov	sp, r7
 801a872:	b009      	add	sp, #36	@ 0x24
 801a874:	bd90      	pop	{r4, r7, pc}
 801a876:	46c0      	nop			@ (mov r8, r8)
 801a878:	00000402 	.word	0x00000402
 801a87c:	ffffbf8f 	.word	0xffffbf8f
 801a880:	ffff8080 	.word	0xffff8080
 801a884:	ffff8f8f 	.word	0xffff8f8f
 801a888:	ffff80c0 	.word	0xffff80c0
 801a88c:	00000406 	.word	0x00000406

0801a890 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b0a4      	sub	sp, #144	@ 0x90
 801a894:	af00      	add	r7, sp, #0
 801a896:	60f8      	str	r0, [r7, #12]
 801a898:	60b9      	str	r1, [r7, #8]
 801a89a:	1dbb      	adds	r3, r7, #6
 801a89c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a89e:	1dbb      	adds	r3, r7, #6
 801a8a0:	881b      	ldrh	r3, [r3, #0]
 801a8a2:	2240      	movs	r2, #64	@ 0x40
 801a8a4:	4013      	ands	r3, r2
 801a8a6:	d100      	bne.n	801a8aa <HAL_PCD_EP_DB_Transmit+0x1a>
 801a8a8:	e1e4      	b.n	801ac74 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	2250      	movs	r2, #80	@ 0x50
 801a8b0:	5a9b      	ldrh	r3, [r3, r2]
 801a8b2:	b29b      	uxth	r3, r3
 801a8b4:	001a      	movs	r2, r3
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	781b      	ldrb	r3, [r3, #0]
 801a8ba:	00db      	lsls	r3, r3, #3
 801a8bc:	18d2      	adds	r2, r2, r3
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	18d3      	adds	r3, r2, r3
 801a8c4:	4ad0      	ldr	r2, [pc, #832]	@ (801ac08 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a8c6:	4694      	mov	ip, r2
 801a8c8:	4463      	add	r3, ip
 801a8ca:	881a      	ldrh	r2, [r3, #0]
 801a8cc:	2186      	movs	r1, #134	@ 0x86
 801a8ce:	187b      	adds	r3, r7, r1
 801a8d0:	0592      	lsls	r2, r2, #22
 801a8d2:	0d92      	lsrs	r2, r2, #22
 801a8d4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a8d6:	68bb      	ldr	r3, [r7, #8]
 801a8d8:	699a      	ldr	r2, [r3, #24]
 801a8da:	187b      	adds	r3, r7, r1
 801a8dc:	881b      	ldrh	r3, [r3, #0]
 801a8de:	429a      	cmp	r2, r3
 801a8e0:	d907      	bls.n	801a8f2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	699a      	ldr	r2, [r3, #24]
 801a8e6:	187b      	adds	r3, r7, r1
 801a8e8:	881b      	ldrh	r3, [r3, #0]
 801a8ea:	1ad2      	subs	r2, r2, r3
 801a8ec:	68bb      	ldr	r3, [r7, #8]
 801a8ee:	619a      	str	r2, [r3, #24]
 801a8f0:	e002      	b.n	801a8f8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a8f2:	68bb      	ldr	r3, [r7, #8]
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	699b      	ldr	r3, [r3, #24]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d000      	beq.n	801a902 <HAL_PCD_EP_DB_Transmit+0x72>
 801a900:	e0b5      	b.n	801aa6e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	785b      	ldrb	r3, [r3, #1]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d125      	bne.n	801a956 <HAL_PCD_EP_DB_Transmit+0xc6>
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	2250      	movs	r2, #80	@ 0x50
 801a916:	5a9b      	ldrh	r3, [r3, r2]
 801a918:	b29b      	uxth	r3, r3
 801a91a:	001a      	movs	r2, r3
 801a91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a91e:	189b      	adds	r3, r3, r2
 801a920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a922:	68bb      	ldr	r3, [r7, #8]
 801a924:	781b      	ldrb	r3, [r3, #0]
 801a926:	00da      	lsls	r2, r3, #3
 801a928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a92a:	18d3      	adds	r3, r2, r3
 801a92c:	4ab6      	ldr	r2, [pc, #728]	@ (801ac08 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a92e:	4694      	mov	ip, r2
 801a930:	4463      	add	r3, ip
 801a932:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a936:	881b      	ldrh	r3, [r3, #0]
 801a938:	b29b      	uxth	r3, r3
 801a93a:	059b      	lsls	r3, r3, #22
 801a93c:	0d9b      	lsrs	r3, r3, #22
 801a93e:	b29a      	uxth	r2, r3
 801a940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a942:	801a      	strh	r2, [r3, #0]
 801a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a946:	881b      	ldrh	r3, [r3, #0]
 801a948:	b29b      	uxth	r3, r3
 801a94a:	4ab0      	ldr	r2, [pc, #704]	@ (801ac0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a94c:	4313      	orrs	r3, r2
 801a94e:	b29a      	uxth	r2, r3
 801a950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a952:	801a      	strh	r2, [r3, #0]
 801a954:	e01b      	b.n	801a98e <HAL_PCD_EP_DB_Transmit+0xfe>
 801a956:	68bb      	ldr	r3, [r7, #8]
 801a958:	785b      	ldrb	r3, [r3, #1]
 801a95a:	2b01      	cmp	r3, #1
 801a95c:	d117      	bne.n	801a98e <HAL_PCD_EP_DB_Transmit+0xfe>
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	637b      	str	r3, [r7, #52]	@ 0x34
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	2250      	movs	r2, #80	@ 0x50
 801a96a:	5a9b      	ldrh	r3, [r3, r2]
 801a96c:	b29b      	uxth	r3, r3
 801a96e:	001a      	movs	r2, r3
 801a970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a972:	189b      	adds	r3, r3, r2
 801a974:	637b      	str	r3, [r7, #52]	@ 0x34
 801a976:	68bb      	ldr	r3, [r7, #8]
 801a978:	781b      	ldrb	r3, [r3, #0]
 801a97a:	00da      	lsls	r2, r3, #3
 801a97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a97e:	18d3      	adds	r3, r2, r3
 801a980:	4aa1      	ldr	r2, [pc, #644]	@ (801ac08 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a982:	4694      	mov	ip, r2
 801a984:	4463      	add	r3, ip
 801a986:	633b      	str	r3, [r7, #48]	@ 0x30
 801a988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a98a:	2200      	movs	r2, #0
 801a98c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	627b      	str	r3, [r7, #36]	@ 0x24
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	785b      	ldrb	r3, [r3, #1]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d125      	bne.n	801a9e8 <HAL_PCD_EP_DB_Transmit+0x158>
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	61fb      	str	r3, [r7, #28]
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2250      	movs	r2, #80	@ 0x50
 801a9a8:	5a9b      	ldrh	r3, [r3, r2]
 801a9aa:	b29b      	uxth	r3, r3
 801a9ac:	001a      	movs	r2, r3
 801a9ae:	69fb      	ldr	r3, [r7, #28]
 801a9b0:	189b      	adds	r3, r3, r2
 801a9b2:	61fb      	str	r3, [r7, #28]
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	781b      	ldrb	r3, [r3, #0]
 801a9b8:	00da      	lsls	r2, r3, #3
 801a9ba:	69fb      	ldr	r3, [r7, #28]
 801a9bc:	18d3      	adds	r3, r2, r3
 801a9be:	4a94      	ldr	r2, [pc, #592]	@ (801ac10 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a9c0:	4694      	mov	ip, r2
 801a9c2:	4463      	add	r3, ip
 801a9c4:	61bb      	str	r3, [r7, #24]
 801a9c6:	69bb      	ldr	r3, [r7, #24]
 801a9c8:	881b      	ldrh	r3, [r3, #0]
 801a9ca:	b29b      	uxth	r3, r3
 801a9cc:	059b      	lsls	r3, r3, #22
 801a9ce:	0d9b      	lsrs	r3, r3, #22
 801a9d0:	b29a      	uxth	r2, r3
 801a9d2:	69bb      	ldr	r3, [r7, #24]
 801a9d4:	801a      	strh	r2, [r3, #0]
 801a9d6:	69bb      	ldr	r3, [r7, #24]
 801a9d8:	881b      	ldrh	r3, [r3, #0]
 801a9da:	b29b      	uxth	r3, r3
 801a9dc:	4a8b      	ldr	r2, [pc, #556]	@ (801ac0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a9de:	4313      	orrs	r3, r2
 801a9e0:	b29a      	uxth	r2, r3
 801a9e2:	69bb      	ldr	r3, [r7, #24]
 801a9e4:	801a      	strh	r2, [r3, #0]
 801a9e6:	e018      	b.n	801aa1a <HAL_PCD_EP_DB_Transmit+0x18a>
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	785b      	ldrb	r3, [r3, #1]
 801a9ec:	2b01      	cmp	r3, #1
 801a9ee:	d114      	bne.n	801aa1a <HAL_PCD_EP_DB_Transmit+0x18a>
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	2250      	movs	r2, #80	@ 0x50
 801a9f6:	5a9b      	ldrh	r3, [r3, r2]
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	001a      	movs	r2, r3
 801a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9fe:	189b      	adds	r3, r3, r2
 801aa00:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa02:	68bb      	ldr	r3, [r7, #8]
 801aa04:	781b      	ldrb	r3, [r3, #0]
 801aa06:	00da      	lsls	r2, r3, #3
 801aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa0a:	18d3      	adds	r3, r2, r3
 801aa0c:	4a80      	ldr	r2, [pc, #512]	@ (801ac10 <HAL_PCD_EP_DB_Transmit+0x380>)
 801aa0e:	4694      	mov	ip, r2
 801aa10:	4463      	add	r3, ip
 801aa12:	623b      	str	r3, [r7, #32]
 801aa14:	6a3b      	ldr	r3, [r7, #32]
 801aa16:	2200      	movs	r2, #0
 801aa18:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801aa1a:	68bb      	ldr	r3, [r7, #8]
 801aa1c:	781a      	ldrb	r2, [r3, #0]
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	0011      	movs	r1, r2
 801aa22:	0018      	movs	r0, r3
 801aa24:	f008 fe3a 	bl	802369c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801aa28:	1dbb      	adds	r3, r7, #6
 801aa2a:	881a      	ldrh	r2, [r3, #0]
 801aa2c:	2380      	movs	r3, #128	@ 0x80
 801aa2e:	01db      	lsls	r3, r3, #7
 801aa30:	4013      	ands	r3, r2
 801aa32:	d100      	bne.n	801aa36 <HAL_PCD_EP_DB_Transmit+0x1a6>
 801aa34:	e309      	b.n	801b04a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	001a      	movs	r2, r3
 801aa3c:	68bb      	ldr	r3, [r7, #8]
 801aa3e:	781b      	ldrb	r3, [r3, #0]
 801aa40:	009b      	lsls	r3, r3, #2
 801aa42:	18d3      	adds	r3, r2, r3
 801aa44:	881b      	ldrh	r3, [r3, #0]
 801aa46:	b29a      	uxth	r2, r3
 801aa48:	2016      	movs	r0, #22
 801aa4a:	183b      	adds	r3, r7, r0
 801aa4c:	4971      	ldr	r1, [pc, #452]	@ (801ac14 <HAL_PCD_EP_DB_Transmit+0x384>)
 801aa4e:	400a      	ands	r2, r1
 801aa50:	801a      	strh	r2, [r3, #0]
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	001a      	movs	r2, r3
 801aa58:	68bb      	ldr	r3, [r7, #8]
 801aa5a:	781b      	ldrb	r3, [r3, #0]
 801aa5c:	009b      	lsls	r3, r3, #2
 801aa5e:	18d3      	adds	r3, r2, r3
 801aa60:	183a      	adds	r2, r7, r0
 801aa62:	8812      	ldrh	r2, [r2, #0]
 801aa64:	496c      	ldr	r1, [pc, #432]	@ (801ac18 <HAL_PCD_EP_DB_Transmit+0x388>)
 801aa66:	430a      	orrs	r2, r1
 801aa68:	b292      	uxth	r2, r2
 801aa6a:	801a      	strh	r2, [r3, #0]
 801aa6c:	e2ed      	b.n	801b04a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801aa6e:	1dbb      	adds	r3, r7, #6
 801aa70:	881a      	ldrh	r2, [r3, #0]
 801aa72:	2380      	movs	r3, #128	@ 0x80
 801aa74:	01db      	lsls	r3, r3, #7
 801aa76:	4013      	ands	r3, r2
 801aa78:	d01a      	beq.n	801aab0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	001a      	movs	r2, r3
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	781b      	ldrb	r3, [r3, #0]
 801aa84:	009b      	lsls	r3, r3, #2
 801aa86:	18d3      	adds	r3, r2, r3
 801aa88:	881b      	ldrh	r3, [r3, #0]
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	208a      	movs	r0, #138	@ 0x8a
 801aa8e:	183b      	adds	r3, r7, r0
 801aa90:	4960      	ldr	r1, [pc, #384]	@ (801ac14 <HAL_PCD_EP_DB_Transmit+0x384>)
 801aa92:	400a      	ands	r2, r1
 801aa94:	801a      	strh	r2, [r3, #0]
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	001a      	movs	r2, r3
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	781b      	ldrb	r3, [r3, #0]
 801aaa0:	009b      	lsls	r3, r3, #2
 801aaa2:	18d3      	adds	r3, r2, r3
 801aaa4:	183a      	adds	r2, r7, r0
 801aaa6:	8812      	ldrh	r2, [r2, #0]
 801aaa8:	495b      	ldr	r1, [pc, #364]	@ (801ac18 <HAL_PCD_EP_DB_Transmit+0x388>)
 801aaaa:	430a      	orrs	r2, r1
 801aaac:	b292      	uxth	r2, r2
 801aaae:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	2224      	movs	r2, #36	@ 0x24
 801aab4:	5c9b      	ldrb	r3, [r3, r2]
 801aab6:	2b01      	cmp	r3, #1
 801aab8:	d000      	beq.n	801aabc <HAL_PCD_EP_DB_Transmit+0x22c>
 801aaba:	e2c6      	b.n	801b04a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801aabc:	68bb      	ldr	r3, [r7, #8]
 801aabe:	695a      	ldr	r2, [r3, #20]
 801aac0:	2186      	movs	r1, #134	@ 0x86
 801aac2:	187b      	adds	r3, r7, r1
 801aac4:	881b      	ldrh	r3, [r3, #0]
 801aac6:	18d2      	adds	r2, r2, r3
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	69da      	ldr	r2, [r3, #28]
 801aad0:	187b      	adds	r3, r7, r1
 801aad2:	881b      	ldrh	r3, [r3, #0]
 801aad4:	18d2      	adds	r2, r2, r3
 801aad6:	68bb      	ldr	r3, [r7, #8]
 801aad8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aada:	68bb      	ldr	r3, [r7, #8]
 801aadc:	6a1a      	ldr	r2, [r3, #32]
 801aade:	68bb      	ldr	r3, [r7, #8]
 801aae0:	691b      	ldr	r3, [r3, #16]
 801aae2:	429a      	cmp	r2, r3
 801aae4:	d30c      	bcc.n	801ab00 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	691b      	ldr	r3, [r3, #16]
 801aaea:	218c      	movs	r1, #140	@ 0x8c
 801aaec:	187a      	adds	r2, r7, r1
 801aaee:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801aaf0:	68bb      	ldr	r3, [r7, #8]
 801aaf2:	6a1a      	ldr	r2, [r3, #32]
 801aaf4:	187b      	adds	r3, r7, r1
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	1ad2      	subs	r2, r2, r3
 801aafa:	68bb      	ldr	r3, [r7, #8]
 801aafc:	621a      	str	r2, [r3, #32]
 801aafe:	e01a      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801ab00:	68bb      	ldr	r3, [r7, #8]
 801ab02:	6a1b      	ldr	r3, [r3, #32]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d10a      	bne.n	801ab1e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801ab08:	2386      	movs	r3, #134	@ 0x86
 801ab0a:	18fb      	adds	r3, r7, r3
 801ab0c:	881b      	ldrh	r3, [r3, #0]
 801ab0e:	228c      	movs	r2, #140	@ 0x8c
 801ab10:	18ba      	adds	r2, r7, r2
 801ab12:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	2224      	movs	r2, #36	@ 0x24
 801ab18:	2100      	movs	r1, #0
 801ab1a:	5499      	strb	r1, [r3, r2]
 801ab1c:	e00b      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801ab1e:	68bb      	ldr	r3, [r7, #8]
 801ab20:	2224      	movs	r2, #36	@ 0x24
 801ab22:	2100      	movs	r1, #0
 801ab24:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	6a1b      	ldr	r3, [r3, #32]
 801ab2a:	228c      	movs	r2, #140	@ 0x8c
 801ab2c:	18ba      	adds	r2, r7, r2
 801ab2e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	2200      	movs	r2, #0
 801ab34:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801ab36:	68bb      	ldr	r3, [r7, #8]
 801ab38:	785b      	ldrb	r3, [r3, #1]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d000      	beq.n	801ab40 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801ab3e:	e06d      	b.n	801ac1c <HAL_PCD_EP_DB_Transmit+0x38c>
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	2250      	movs	r2, #80	@ 0x50
 801ab4c:	5a9b      	ldrh	r3, [r3, r2]
 801ab4e:	b29b      	uxth	r3, r3
 801ab50:	001a      	movs	r2, r3
 801ab52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab54:	189b      	adds	r3, r3, r2
 801ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	00da      	lsls	r2, r3, #3
 801ab5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab60:	18d3      	adds	r3, r2, r3
 801ab62:	4a29      	ldr	r2, [pc, #164]	@ (801ac08 <HAL_PCD_EP_DB_Transmit+0x378>)
 801ab64:	4694      	mov	ip, r2
 801ab66:	4463      	add	r3, ip
 801ab68:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab6c:	881b      	ldrh	r3, [r3, #0]
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	059b      	lsls	r3, r3, #22
 801ab72:	0d9b      	lsrs	r3, r3, #22
 801ab74:	b29a      	uxth	r2, r3
 801ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab78:	801a      	strh	r2, [r3, #0]
 801ab7a:	228c      	movs	r2, #140	@ 0x8c
 801ab7c:	18bb      	adds	r3, r7, r2
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	2b3e      	cmp	r3, #62	@ 0x3e
 801ab82:	d91a      	bls.n	801abba <HAL_PCD_EP_DB_Transmit+0x32a>
 801ab84:	18bb      	adds	r3, r7, r2
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	095b      	lsrs	r3, r3, #5
 801ab8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab8c:	18bb      	adds	r3, r7, r2
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	221f      	movs	r2, #31
 801ab92:	4013      	ands	r3, r2
 801ab94:	d102      	bne.n	801ab9c <HAL_PCD_EP_DB_Transmit+0x30c>
 801ab96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab98:	3b01      	subs	r3, #1
 801ab9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab9e:	881b      	ldrh	r3, [r3, #0]
 801aba0:	b29a      	uxth	r2, r3
 801aba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aba4:	b29b      	uxth	r3, r3
 801aba6:	029b      	lsls	r3, r3, #10
 801aba8:	b29b      	uxth	r3, r3
 801abaa:	4313      	orrs	r3, r2
 801abac:	b29b      	uxth	r3, r3
 801abae:	4a17      	ldr	r2, [pc, #92]	@ (801ac0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 801abb0:	4313      	orrs	r3, r2
 801abb2:	b29a      	uxth	r2, r3
 801abb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abb6:	801a      	strh	r2, [r3, #0]
 801abb8:	e04f      	b.n	801ac5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801abba:	238c      	movs	r3, #140	@ 0x8c
 801abbc:	18fb      	adds	r3, r7, r3
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d108      	bne.n	801abd6 <HAL_PCD_EP_DB_Transmit+0x346>
 801abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abc6:	881b      	ldrh	r3, [r3, #0]
 801abc8:	b29b      	uxth	r3, r3
 801abca:	4a10      	ldr	r2, [pc, #64]	@ (801ac0c <HAL_PCD_EP_DB_Transmit+0x37c>)
 801abcc:	4313      	orrs	r3, r2
 801abce:	b29a      	uxth	r2, r3
 801abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abd2:	801a      	strh	r2, [r3, #0]
 801abd4:	e041      	b.n	801ac5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801abd6:	228c      	movs	r2, #140	@ 0x8c
 801abd8:	18bb      	adds	r3, r7, r2
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	085b      	lsrs	r3, r3, #1
 801abde:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abe0:	18bb      	adds	r3, r7, r2
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	2201      	movs	r2, #1
 801abe6:	4013      	ands	r3, r2
 801abe8:	d002      	beq.n	801abf0 <HAL_PCD_EP_DB_Transmit+0x360>
 801abea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801abec:	3301      	adds	r3, #1
 801abee:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abf2:	881b      	ldrh	r3, [r3, #0]
 801abf4:	b29a      	uxth	r2, r3
 801abf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801abf8:	b29b      	uxth	r3, r3
 801abfa:	029b      	lsls	r3, r3, #10
 801abfc:	b29b      	uxth	r3, r3
 801abfe:	4313      	orrs	r3, r2
 801ac00:	b29a      	uxth	r2, r3
 801ac02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac04:	801a      	strh	r2, [r3, #0]
 801ac06:	e028      	b.n	801ac5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ac08:	00000402 	.word	0x00000402
 801ac0c:	ffff8000 	.word	0xffff8000
 801ac10:	00000406 	.word	0x00000406
 801ac14:	ffff8f8f 	.word	0xffff8f8f
 801ac18:	ffffc080 	.word	0xffffc080
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	785b      	ldrb	r3, [r3, #1]
 801ac20:	2b01      	cmp	r3, #1
 801ac22:	d11a      	bne.n	801ac5a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	647b      	str	r3, [r7, #68]	@ 0x44
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2250      	movs	r2, #80	@ 0x50
 801ac30:	5a9b      	ldrh	r3, [r3, r2]
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	001a      	movs	r2, r3
 801ac36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac38:	189b      	adds	r3, r3, r2
 801ac3a:	647b      	str	r3, [r7, #68]	@ 0x44
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	781b      	ldrb	r3, [r3, #0]
 801ac40:	00da      	lsls	r2, r3, #3
 801ac42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac44:	18d3      	adds	r3, r2, r3
 801ac46:	4adb      	ldr	r2, [pc, #876]	@ (801afb4 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac48:	4694      	mov	ip, r2
 801ac4a:	4463      	add	r3, ip
 801ac4c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ac4e:	238c      	movs	r3, #140	@ 0x8c
 801ac50:	18fb      	adds	r3, r7, r3
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	b29a      	uxth	r2, r3
 801ac56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac58:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	6818      	ldr	r0, [r3, #0]
 801ac5e:	68bb      	ldr	r3, [r7, #8]
 801ac60:	6959      	ldr	r1, [r3, #20]
 801ac62:	68bb      	ldr	r3, [r7, #8]
 801ac64:	891a      	ldrh	r2, [r3, #8]
 801ac66:	238c      	movs	r3, #140	@ 0x8c
 801ac68:	18fb      	adds	r3, r7, r3
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	b29b      	uxth	r3, r3
 801ac6e:	f006 fc83 	bl	8021578 <USB_WritePMA>
 801ac72:	e1ea      	b.n	801b04a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	2250      	movs	r2, #80	@ 0x50
 801ac7a:	5a9b      	ldrh	r3, [r3, r2]
 801ac7c:	b29b      	uxth	r3, r3
 801ac7e:	001a      	movs	r2, r3
 801ac80:	68bb      	ldr	r3, [r7, #8]
 801ac82:	781b      	ldrb	r3, [r3, #0]
 801ac84:	00db      	lsls	r3, r3, #3
 801ac86:	18d2      	adds	r2, r2, r3
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	18d3      	adds	r3, r2, r3
 801ac8e:	4aca      	ldr	r2, [pc, #808]	@ (801afb8 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ac90:	4694      	mov	ip, r2
 801ac92:	4463      	add	r3, ip
 801ac94:	881a      	ldrh	r2, [r3, #0]
 801ac96:	2186      	movs	r1, #134	@ 0x86
 801ac98:	187b      	adds	r3, r7, r1
 801ac9a:	0592      	lsls	r2, r2, #22
 801ac9c:	0d92      	lsrs	r2, r2, #22
 801ac9e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801aca0:	68bb      	ldr	r3, [r7, #8]
 801aca2:	699a      	ldr	r2, [r3, #24]
 801aca4:	187b      	adds	r3, r7, r1
 801aca6:	881b      	ldrh	r3, [r3, #0]
 801aca8:	429a      	cmp	r2, r3
 801acaa:	d307      	bcc.n	801acbc <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801acac:	68bb      	ldr	r3, [r7, #8]
 801acae:	699a      	ldr	r2, [r3, #24]
 801acb0:	187b      	adds	r3, r7, r1
 801acb2:	881b      	ldrh	r3, [r3, #0]
 801acb4:	1ad2      	subs	r2, r2, r3
 801acb6:	68bb      	ldr	r3, [r7, #8]
 801acb8:	619a      	str	r2, [r3, #24]
 801acba:	e002      	b.n	801acc2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	2200      	movs	r2, #0
 801acc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801acc2:	68bb      	ldr	r3, [r7, #8]
 801acc4:	699b      	ldr	r3, [r3, #24]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d000      	beq.n	801accc <HAL_PCD_EP_DB_Transmit+0x43c>
 801acca:	e0bb      	b.n	801ae44 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	785b      	ldrb	r3, [r3, #1]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d125      	bne.n	801ad20 <HAL_PCD_EP_DB_Transmit+0x490>
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	2250      	movs	r2, #80	@ 0x50
 801ace0:	5a9b      	ldrh	r3, [r3, r2]
 801ace2:	b29b      	uxth	r3, r3
 801ace4:	001a      	movs	r2, r3
 801ace6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ace8:	189b      	adds	r3, r3, r2
 801acea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801acec:	68bb      	ldr	r3, [r7, #8]
 801acee:	781b      	ldrb	r3, [r3, #0]
 801acf0:	00da      	lsls	r2, r3, #3
 801acf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801acf4:	18d3      	adds	r3, r2, r3
 801acf6:	4aaf      	ldr	r2, [pc, #700]	@ (801afb4 <HAL_PCD_EP_DB_Transmit+0x724>)
 801acf8:	4694      	mov	ip, r2
 801acfa:	4463      	add	r3, ip
 801acfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 801acfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad00:	881b      	ldrh	r3, [r3, #0]
 801ad02:	b29b      	uxth	r3, r3
 801ad04:	059b      	lsls	r3, r3, #22
 801ad06:	0d9b      	lsrs	r3, r3, #22
 801ad08:	b29a      	uxth	r2, r3
 801ad0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad0c:	801a      	strh	r2, [r3, #0]
 801ad0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad10:	881b      	ldrh	r3, [r3, #0]
 801ad12:	b29b      	uxth	r3, r3
 801ad14:	4aa9      	ldr	r2, [pc, #676]	@ (801afbc <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ad16:	4313      	orrs	r3, r2
 801ad18:	b29a      	uxth	r2, r3
 801ad1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad1c:	801a      	strh	r2, [r3, #0]
 801ad1e:	e01b      	b.n	801ad58 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ad20:	68bb      	ldr	r3, [r7, #8]
 801ad22:	785b      	ldrb	r3, [r3, #1]
 801ad24:	2b01      	cmp	r3, #1
 801ad26:	d117      	bne.n	801ad58 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	667b      	str	r3, [r7, #100]	@ 0x64
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	2250      	movs	r2, #80	@ 0x50
 801ad34:	5a9b      	ldrh	r3, [r3, r2]
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	001a      	movs	r2, r3
 801ad3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad3c:	189b      	adds	r3, r3, r2
 801ad3e:	667b      	str	r3, [r7, #100]	@ 0x64
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	781b      	ldrb	r3, [r3, #0]
 801ad44:	00da      	lsls	r2, r3, #3
 801ad46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad48:	18d3      	adds	r3, r2, r3
 801ad4a:	4a9a      	ldr	r2, [pc, #616]	@ (801afb4 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ad4c:	4694      	mov	ip, r2
 801ad4e:	4463      	add	r3, ip
 801ad50:	663b      	str	r3, [r7, #96]	@ 0x60
 801ad52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ad54:	2200      	movs	r2, #0
 801ad56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad5e:	68bb      	ldr	r3, [r7, #8]
 801ad60:	785b      	ldrb	r3, [r3, #1]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d12b      	bne.n	801adbe <HAL_PCD_EP_DB_Transmit+0x52e>
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	2250      	movs	r2, #80	@ 0x50
 801ad72:	5a9b      	ldrh	r3, [r3, r2]
 801ad74:	b29b      	uxth	r3, r3
 801ad76:	001a      	movs	r2, r3
 801ad78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad7a:	189b      	adds	r3, r3, r2
 801ad7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad7e:	68bb      	ldr	r3, [r7, #8]
 801ad80:	781b      	ldrb	r3, [r3, #0]
 801ad82:	00da      	lsls	r2, r3, #3
 801ad84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad86:	18d3      	adds	r3, r2, r3
 801ad88:	4a8b      	ldr	r2, [pc, #556]	@ (801afb8 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad8a:	4694      	mov	ip, r2
 801ad8c:	4463      	add	r3, ip
 801ad8e:	2180      	movs	r1, #128	@ 0x80
 801ad90:	187a      	adds	r2, r7, r1
 801ad92:	6013      	str	r3, [r2, #0]
 801ad94:	187b      	adds	r3, r7, r1
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	881b      	ldrh	r3, [r3, #0]
 801ad9a:	b29b      	uxth	r3, r3
 801ad9c:	059b      	lsls	r3, r3, #22
 801ad9e:	0d9b      	lsrs	r3, r3, #22
 801ada0:	b29a      	uxth	r2, r3
 801ada2:	187b      	adds	r3, r7, r1
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	801a      	strh	r2, [r3, #0]
 801ada8:	187b      	adds	r3, r7, r1
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	881b      	ldrh	r3, [r3, #0]
 801adae:	b29b      	uxth	r3, r3
 801adb0:	4a82      	ldr	r2, [pc, #520]	@ (801afbc <HAL_PCD_EP_DB_Transmit+0x72c>)
 801adb2:	4313      	orrs	r3, r2
 801adb4:	b29a      	uxth	r2, r3
 801adb6:	187b      	adds	r3, r7, r1
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	801a      	strh	r2, [r3, #0]
 801adbc:	e018      	b.n	801adf0 <HAL_PCD_EP_DB_Transmit+0x560>
 801adbe:	68bb      	ldr	r3, [r7, #8]
 801adc0:	785b      	ldrb	r3, [r3, #1]
 801adc2:	2b01      	cmp	r3, #1
 801adc4:	d114      	bne.n	801adf0 <HAL_PCD_EP_DB_Transmit+0x560>
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	2250      	movs	r2, #80	@ 0x50
 801adcc:	5a9b      	ldrh	r3, [r3, r2]
 801adce:	b29b      	uxth	r3, r3
 801add0:	001a      	movs	r2, r3
 801add2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801add4:	189b      	adds	r3, r3, r2
 801add6:	677b      	str	r3, [r7, #116]	@ 0x74
 801add8:	68bb      	ldr	r3, [r7, #8]
 801adda:	781b      	ldrb	r3, [r3, #0]
 801addc:	00da      	lsls	r2, r3, #3
 801adde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ade0:	18d3      	adds	r3, r2, r3
 801ade2:	4a75      	ldr	r2, [pc, #468]	@ (801afb8 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ade4:	4694      	mov	ip, r2
 801ade6:	4463      	add	r3, ip
 801ade8:	673b      	str	r3, [r7, #112]	@ 0x70
 801adea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801adec:	2200      	movs	r2, #0
 801adee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801adf0:	68bb      	ldr	r3, [r7, #8]
 801adf2:	781a      	ldrb	r2, [r3, #0]
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	0011      	movs	r1, r2
 801adf8:	0018      	movs	r0, r3
 801adfa:	f008 fc4f 	bl	802369c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801adfe:	1dbb      	adds	r3, r7, #6
 801ae00:	881a      	ldrh	r2, [r3, #0]
 801ae02:	2380      	movs	r3, #128	@ 0x80
 801ae04:	01db      	lsls	r3, r3, #7
 801ae06:	4013      	ands	r3, r2
 801ae08:	d000      	beq.n	801ae0c <HAL_PCD_EP_DB_Transmit+0x57c>
 801ae0a:	e11e      	b.n	801b04a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	001a      	movs	r2, r3
 801ae12:	68bb      	ldr	r3, [r7, #8]
 801ae14:	781b      	ldrb	r3, [r3, #0]
 801ae16:	009b      	lsls	r3, r3, #2
 801ae18:	18d3      	adds	r3, r2, r3
 801ae1a:	881b      	ldrh	r3, [r3, #0]
 801ae1c:	b29a      	uxth	r2, r3
 801ae1e:	2088      	movs	r0, #136	@ 0x88
 801ae20:	183b      	adds	r3, r7, r0
 801ae22:	4967      	ldr	r1, [pc, #412]	@ (801afc0 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ae24:	400a      	ands	r2, r1
 801ae26:	801a      	strh	r2, [r3, #0]
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	001a      	movs	r2, r3
 801ae2e:	68bb      	ldr	r3, [r7, #8]
 801ae30:	781b      	ldrb	r3, [r3, #0]
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	18d3      	adds	r3, r2, r3
 801ae36:	183a      	adds	r2, r7, r0
 801ae38:	8812      	ldrh	r2, [r2, #0]
 801ae3a:	4962      	ldr	r1, [pc, #392]	@ (801afc4 <HAL_PCD_EP_DB_Transmit+0x734>)
 801ae3c:	430a      	orrs	r2, r1
 801ae3e:	b292      	uxth	r2, r2
 801ae40:	801a      	strh	r2, [r3, #0]
 801ae42:	e102      	b.n	801b04a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ae44:	1dbb      	adds	r3, r7, #6
 801ae46:	881a      	ldrh	r2, [r3, #0]
 801ae48:	2380      	movs	r3, #128	@ 0x80
 801ae4a:	01db      	lsls	r3, r3, #7
 801ae4c:	4013      	ands	r3, r2
 801ae4e:	d11a      	bne.n	801ae86 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	001a      	movs	r2, r3
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	781b      	ldrb	r3, [r3, #0]
 801ae5a:	009b      	lsls	r3, r3, #2
 801ae5c:	18d3      	adds	r3, r2, r3
 801ae5e:	881b      	ldrh	r3, [r3, #0]
 801ae60:	b29a      	uxth	r2, r3
 801ae62:	204e      	movs	r0, #78	@ 0x4e
 801ae64:	183b      	adds	r3, r7, r0
 801ae66:	4956      	ldr	r1, [pc, #344]	@ (801afc0 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ae68:	400a      	ands	r2, r1
 801ae6a:	801a      	strh	r2, [r3, #0]
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	001a      	movs	r2, r3
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	781b      	ldrb	r3, [r3, #0]
 801ae76:	009b      	lsls	r3, r3, #2
 801ae78:	18d3      	adds	r3, r2, r3
 801ae7a:	183a      	adds	r2, r7, r0
 801ae7c:	8812      	ldrh	r2, [r2, #0]
 801ae7e:	4951      	ldr	r1, [pc, #324]	@ (801afc4 <HAL_PCD_EP_DB_Transmit+0x734>)
 801ae80:	430a      	orrs	r2, r1
 801ae82:	b292      	uxth	r2, r2
 801ae84:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801ae86:	68bb      	ldr	r3, [r7, #8]
 801ae88:	2224      	movs	r2, #36	@ 0x24
 801ae8a:	5c9b      	ldrb	r3, [r3, r2]
 801ae8c:	2b01      	cmp	r3, #1
 801ae8e:	d000      	beq.n	801ae92 <HAL_PCD_EP_DB_Transmit+0x602>
 801ae90:	e0db      	b.n	801b04a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801ae92:	68bb      	ldr	r3, [r7, #8]
 801ae94:	695a      	ldr	r2, [r3, #20]
 801ae96:	2186      	movs	r1, #134	@ 0x86
 801ae98:	187b      	adds	r3, r7, r1
 801ae9a:	881b      	ldrh	r3, [r3, #0]
 801ae9c:	18d2      	adds	r2, r2, r3
 801ae9e:	68bb      	ldr	r3, [r7, #8]
 801aea0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801aea2:	68bb      	ldr	r3, [r7, #8]
 801aea4:	69da      	ldr	r2, [r3, #28]
 801aea6:	187b      	adds	r3, r7, r1
 801aea8:	881b      	ldrh	r3, [r3, #0]
 801aeaa:	18d2      	adds	r2, r2, r3
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aeb0:	68bb      	ldr	r3, [r7, #8]
 801aeb2:	6a1a      	ldr	r2, [r3, #32]
 801aeb4:	68bb      	ldr	r3, [r7, #8]
 801aeb6:	691b      	ldr	r3, [r3, #16]
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	d30c      	bcc.n	801aed6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801aebc:	68bb      	ldr	r3, [r7, #8]
 801aebe:	691b      	ldr	r3, [r3, #16]
 801aec0:	218c      	movs	r1, #140	@ 0x8c
 801aec2:	187a      	adds	r2, r7, r1
 801aec4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801aec6:	68bb      	ldr	r3, [r7, #8]
 801aec8:	6a1a      	ldr	r2, [r3, #32]
 801aeca:	187b      	adds	r3, r7, r1
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	1ad2      	subs	r2, r2, r3
 801aed0:	68bb      	ldr	r3, [r7, #8]
 801aed2:	621a      	str	r2, [r3, #32]
 801aed4:	e01a      	b.n	801af0c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801aed6:	68bb      	ldr	r3, [r7, #8]
 801aed8:	6a1b      	ldr	r3, [r3, #32]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d10a      	bne.n	801aef4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801aede:	2386      	movs	r3, #134	@ 0x86
 801aee0:	18fb      	adds	r3, r7, r3
 801aee2:	881b      	ldrh	r3, [r3, #0]
 801aee4:	228c      	movs	r2, #140	@ 0x8c
 801aee6:	18ba      	adds	r2, r7, r2
 801aee8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801aeea:	68bb      	ldr	r3, [r7, #8]
 801aeec:	2224      	movs	r2, #36	@ 0x24
 801aeee:	2100      	movs	r1, #0
 801aef0:	5499      	strb	r1, [r3, r2]
 801aef2:	e00b      	b.n	801af0c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	6a1b      	ldr	r3, [r3, #32]
 801aef8:	228c      	movs	r2, #140	@ 0x8c
 801aefa:	18ba      	adds	r2, r7, r2
 801aefc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801aefe:	68bb      	ldr	r3, [r7, #8]
 801af00:	2200      	movs	r2, #0
 801af02:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801af04:	68bb      	ldr	r3, [r7, #8]
 801af06:	2224      	movs	r2, #36	@ 0x24
 801af08:	2100      	movs	r1, #0
 801af0a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	657b      	str	r3, [r7, #84]	@ 0x54
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	785b      	ldrb	r3, [r3, #1]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d000      	beq.n	801af1c <HAL_PCD_EP_DB_Transmit+0x68c>
 801af1a:	e06e      	b.n	801affa <HAL_PCD_EP_DB_Transmit+0x76a>
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	2250      	movs	r2, #80	@ 0x50
 801af28:	5a9b      	ldrh	r3, [r3, r2]
 801af2a:	b29b      	uxth	r3, r3
 801af2c:	001a      	movs	r2, r3
 801af2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801af30:	189b      	adds	r3, r3, r2
 801af32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	781b      	ldrb	r3, [r3, #0]
 801af38:	00da      	lsls	r2, r3, #3
 801af3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801af3c:	18d3      	adds	r3, r2, r3
 801af3e:	4a1e      	ldr	r2, [pc, #120]	@ (801afb8 <HAL_PCD_EP_DB_Transmit+0x728>)
 801af40:	4694      	mov	ip, r2
 801af42:	4463      	add	r3, ip
 801af44:	65bb      	str	r3, [r7, #88]	@ 0x58
 801af46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af48:	881b      	ldrh	r3, [r3, #0]
 801af4a:	b29b      	uxth	r3, r3
 801af4c:	059b      	lsls	r3, r3, #22
 801af4e:	0d9b      	lsrs	r3, r3, #22
 801af50:	b29a      	uxth	r2, r3
 801af52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af54:	801a      	strh	r2, [r3, #0]
 801af56:	228c      	movs	r2, #140	@ 0x8c
 801af58:	18bb      	adds	r3, r7, r2
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	2b3e      	cmp	r3, #62	@ 0x3e
 801af5e:	d91a      	bls.n	801af96 <HAL_PCD_EP_DB_Transmit+0x706>
 801af60:	18bb      	adds	r3, r7, r2
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	095b      	lsrs	r3, r3, #5
 801af66:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af68:	18bb      	adds	r3, r7, r2
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	221f      	movs	r2, #31
 801af6e:	4013      	ands	r3, r2
 801af70:	d102      	bne.n	801af78 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801af72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af74:	3b01      	subs	r3, #1
 801af76:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af7a:	881b      	ldrh	r3, [r3, #0]
 801af7c:	b29a      	uxth	r2, r3
 801af7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af80:	b29b      	uxth	r3, r3
 801af82:	029b      	lsls	r3, r3, #10
 801af84:	b29b      	uxth	r3, r3
 801af86:	4313      	orrs	r3, r2
 801af88:	b29b      	uxth	r3, r3
 801af8a:	4a0c      	ldr	r2, [pc, #48]	@ (801afbc <HAL_PCD_EP_DB_Transmit+0x72c>)
 801af8c:	4313      	orrs	r3, r2
 801af8e:	b29a      	uxth	r2, r3
 801af90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af92:	801a      	strh	r2, [r3, #0]
 801af94:	e04d      	b.n	801b032 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af96:	238c      	movs	r3, #140	@ 0x8c
 801af98:	18fb      	adds	r3, r7, r3
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d113      	bne.n	801afc8 <HAL_PCD_EP_DB_Transmit+0x738>
 801afa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801afa2:	881b      	ldrh	r3, [r3, #0]
 801afa4:	b29b      	uxth	r3, r3
 801afa6:	4a05      	ldr	r2, [pc, #20]	@ (801afbc <HAL_PCD_EP_DB_Transmit+0x72c>)
 801afa8:	4313      	orrs	r3, r2
 801afaa:	b29a      	uxth	r2, r3
 801afac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801afae:	801a      	strh	r2, [r3, #0]
 801afb0:	e03f      	b.n	801b032 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801afb2:	46c0      	nop			@ (mov r8, r8)
 801afb4:	00000402 	.word	0x00000402
 801afb8:	00000406 	.word	0x00000406
 801afbc:	ffff8000 	.word	0xffff8000
 801afc0:	ffff8f8f 	.word	0xffff8f8f
 801afc4:	ffffc080 	.word	0xffffc080
 801afc8:	228c      	movs	r2, #140	@ 0x8c
 801afca:	18bb      	adds	r3, r7, r2
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	085b      	lsrs	r3, r3, #1
 801afd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 801afd2:	18bb      	adds	r3, r7, r2
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	2201      	movs	r2, #1
 801afd8:	4013      	ands	r3, r2
 801afda:	d002      	beq.n	801afe2 <HAL_PCD_EP_DB_Transmit+0x752>
 801afdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801afde:	3301      	adds	r3, #1
 801afe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 801afe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801afe4:	881b      	ldrh	r3, [r3, #0]
 801afe6:	b29a      	uxth	r2, r3
 801afe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801afea:	b29b      	uxth	r3, r3
 801afec:	029b      	lsls	r3, r3, #10
 801afee:	b29b      	uxth	r3, r3
 801aff0:	4313      	orrs	r3, r2
 801aff2:	b29a      	uxth	r2, r3
 801aff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aff6:	801a      	strh	r2, [r3, #0]
 801aff8:	e01b      	b.n	801b032 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	785b      	ldrb	r3, [r3, #1]
 801affe:	2b01      	cmp	r3, #1
 801b000:	d117      	bne.n	801b032 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	2250      	movs	r2, #80	@ 0x50
 801b008:	5a9b      	ldrh	r3, [r3, r2]
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	001a      	movs	r2, r3
 801b00e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b010:	189b      	adds	r3, r3, r2
 801b012:	657b      	str	r3, [r7, #84]	@ 0x54
 801b014:	68bb      	ldr	r3, [r7, #8]
 801b016:	781b      	ldrb	r3, [r3, #0]
 801b018:	00da      	lsls	r2, r3, #3
 801b01a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b01c:	18d3      	adds	r3, r2, r3
 801b01e:	4a21      	ldr	r2, [pc, #132]	@ (801b0a4 <HAL_PCD_EP_DB_Transmit+0x814>)
 801b020:	4694      	mov	ip, r2
 801b022:	4463      	add	r3, ip
 801b024:	653b      	str	r3, [r7, #80]	@ 0x50
 801b026:	238c      	movs	r3, #140	@ 0x8c
 801b028:	18fb      	adds	r3, r7, r3
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	b29a      	uxth	r2, r3
 801b02e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b030:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	6818      	ldr	r0, [r3, #0]
 801b036:	68bb      	ldr	r3, [r7, #8]
 801b038:	6959      	ldr	r1, [r3, #20]
 801b03a:	68bb      	ldr	r3, [r7, #8]
 801b03c:	895a      	ldrh	r2, [r3, #10]
 801b03e:	238c      	movs	r3, #140	@ 0x8c
 801b040:	18fb      	adds	r3, r7, r3
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	b29b      	uxth	r3, r3
 801b046:	f006 fa97 	bl	8021578 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	001a      	movs	r2, r3
 801b050:	68bb      	ldr	r3, [r7, #8]
 801b052:	781b      	ldrb	r3, [r3, #0]
 801b054:	009b      	lsls	r3, r3, #2
 801b056:	18d3      	adds	r3, r2, r3
 801b058:	881b      	ldrh	r3, [r3, #0]
 801b05a:	b29a      	uxth	r2, r3
 801b05c:	2014      	movs	r0, #20
 801b05e:	183b      	adds	r3, r7, r0
 801b060:	4911      	ldr	r1, [pc, #68]	@ (801b0a8 <HAL_PCD_EP_DB_Transmit+0x818>)
 801b062:	400a      	ands	r2, r1
 801b064:	801a      	strh	r2, [r3, #0]
 801b066:	183b      	adds	r3, r7, r0
 801b068:	183a      	adds	r2, r7, r0
 801b06a:	8812      	ldrh	r2, [r2, #0]
 801b06c:	2110      	movs	r1, #16
 801b06e:	404a      	eors	r2, r1
 801b070:	801a      	strh	r2, [r3, #0]
 801b072:	183b      	adds	r3, r7, r0
 801b074:	183a      	adds	r2, r7, r0
 801b076:	8812      	ldrh	r2, [r2, #0]
 801b078:	2120      	movs	r1, #32
 801b07a:	404a      	eors	r2, r1
 801b07c:	801a      	strh	r2, [r3, #0]
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	001a      	movs	r2, r3
 801b084:	68bb      	ldr	r3, [r7, #8]
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	009b      	lsls	r3, r3, #2
 801b08a:	18d3      	adds	r3, r2, r3
 801b08c:	183a      	adds	r2, r7, r0
 801b08e:	8812      	ldrh	r2, [r2, #0]
 801b090:	4906      	ldr	r1, [pc, #24]	@ (801b0ac <HAL_PCD_EP_DB_Transmit+0x81c>)
 801b092:	430a      	orrs	r2, r1
 801b094:	b292      	uxth	r2, r2
 801b096:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801b098:	2300      	movs	r3, #0
}
 801b09a:	0018      	movs	r0, r3
 801b09c:	46bd      	mov	sp, r7
 801b09e:	b024      	add	sp, #144	@ 0x90
 801b0a0:	bd80      	pop	{r7, pc}
 801b0a2:	46c0      	nop			@ (mov r8, r8)
 801b0a4:	00000406 	.word	0x00000406
 801b0a8:	ffff8fbf 	.word	0xffff8fbf
 801b0ac:	ffff8080 	.word	0xffff8080

0801b0b0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801b0b0:	b590      	push	{r4, r7, lr}
 801b0b2:	b087      	sub	sp, #28
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	60f8      	str	r0, [r7, #12]
 801b0b8:	0008      	movs	r0, r1
 801b0ba:	0011      	movs	r1, r2
 801b0bc:	607b      	str	r3, [r7, #4]
 801b0be:	240a      	movs	r4, #10
 801b0c0:	193b      	adds	r3, r7, r4
 801b0c2:	1c02      	adds	r2, r0, #0
 801b0c4:	801a      	strh	r2, [r3, #0]
 801b0c6:	2308      	movs	r3, #8
 801b0c8:	18fb      	adds	r3, r7, r3
 801b0ca:	1c0a      	adds	r2, r1, #0
 801b0cc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801b0ce:	0021      	movs	r1, r4
 801b0d0:	187b      	adds	r3, r7, r1
 801b0d2:	881b      	ldrh	r3, [r3, #0]
 801b0d4:	2280      	movs	r2, #128	@ 0x80
 801b0d6:	4013      	ands	r3, r2
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d00c      	beq.n	801b0f8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b0de:	187b      	adds	r3, r7, r1
 801b0e0:	881b      	ldrh	r3, [r3, #0]
 801b0e2:	2207      	movs	r2, #7
 801b0e4:	4013      	ands	r3, r2
 801b0e6:	1c5a      	adds	r2, r3, #1
 801b0e8:	0013      	movs	r3, r2
 801b0ea:	009b      	lsls	r3, r3, #2
 801b0ec:	189b      	adds	r3, r3, r2
 801b0ee:	00db      	lsls	r3, r3, #3
 801b0f0:	68fa      	ldr	r2, [r7, #12]
 801b0f2:	18d3      	adds	r3, r2, r3
 801b0f4:	617b      	str	r3, [r7, #20]
 801b0f6:	e00b      	b.n	801b110 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b0f8:	230a      	movs	r3, #10
 801b0fa:	18fb      	adds	r3, r7, r3
 801b0fc:	881a      	ldrh	r2, [r3, #0]
 801b0fe:	0013      	movs	r3, r2
 801b100:	009b      	lsls	r3, r3, #2
 801b102:	189b      	adds	r3, r3, r2
 801b104:	00db      	lsls	r3, r3, #3
 801b106:	3369      	adds	r3, #105	@ 0x69
 801b108:	33ff      	adds	r3, #255	@ 0xff
 801b10a:	68fa      	ldr	r2, [r7, #12]
 801b10c:	18d3      	adds	r3, r2, r3
 801b10e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b110:	2308      	movs	r3, #8
 801b112:	18fb      	adds	r3, r7, r3
 801b114:	881b      	ldrh	r3, [r3, #0]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d107      	bne.n	801b12a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b11a:	697b      	ldr	r3, [r7, #20]
 801b11c:	2200      	movs	r2, #0
 801b11e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	b29a      	uxth	r2, r3
 801b124:	697b      	ldr	r3, [r7, #20]
 801b126:	80da      	strh	r2, [r3, #6]
 801b128:	e00b      	b.n	801b142 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b12a:	697b      	ldr	r3, [r7, #20]
 801b12c:	2201      	movs	r2, #1
 801b12e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	b29a      	uxth	r2, r3
 801b134:	697b      	ldr	r3, [r7, #20]
 801b136:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	0c1b      	lsrs	r3, r3, #16
 801b13c:	b29a      	uxth	r2, r3
 801b13e:	697b      	ldr	r3, [r7, #20]
 801b140:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b142:	2300      	movs	r3, #0
}
 801b144:	0018      	movs	r0, r3
 801b146:	46bd      	mov	sp, r7
 801b148:	b007      	add	sp, #28
 801b14a:	bd90      	pop	{r4, r7, pc}

0801b14c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	b084      	sub	sp, #16
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b15a:	687a      	ldr	r2, [r7, #4]
 801b15c:	23ba      	movs	r3, #186	@ 0xba
 801b15e:	009b      	lsls	r3, r3, #2
 801b160:	2101      	movs	r1, #1
 801b162:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b164:	687a      	ldr	r2, [r7, #4]
 801b166:	23b8      	movs	r3, #184	@ 0xb8
 801b168:	009b      	lsls	r3, r3, #2
 801b16a:	2100      	movs	r1, #0
 801b16c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	2254      	movs	r2, #84	@ 0x54
 801b172:	5a9b      	ldrh	r3, [r3, r2]
 801b174:	b29b      	uxth	r3, r3
 801b176:	2201      	movs	r2, #1
 801b178:	4313      	orrs	r3, r2
 801b17a:	b299      	uxth	r1, r3
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	2254      	movs	r2, #84	@ 0x54
 801b180:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	2254      	movs	r2, #84	@ 0x54
 801b186:	5a9b      	ldrh	r3, [r3, r2]
 801b188:	b29b      	uxth	r3, r3
 801b18a:	2202      	movs	r2, #2
 801b18c:	4313      	orrs	r3, r2
 801b18e:	b299      	uxth	r1, r3
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	2254      	movs	r2, #84	@ 0x54
 801b194:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b196:	2300      	movs	r3, #0
}
 801b198:	0018      	movs	r0, r3
 801b19a:	46bd      	mov	sp, r7
 801b19c:	b004      	add	sp, #16
 801b19e:	bd80      	pop	{r7, pc}

0801b1a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b082      	sub	sp, #8
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	6078      	str	r0, [r7, #4]
 801b1a8:	000a      	movs	r2, r1
 801b1aa:	1cfb      	adds	r3, r7, #3
 801b1ac:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b1ae:	46c0      	nop			@ (mov r8, r8)
 801b1b0:	46bd      	mov	sp, r7
 801b1b2:	b002      	add	sp, #8
 801b1b4:	bd80      	pop	{r7, pc}
	...

0801b1b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b1bc:	4b04      	ldr	r3, [pc, #16]	@ (801b1d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b1be:	681a      	ldr	r2, [r3, #0]
 801b1c0:	4b03      	ldr	r3, [pc, #12]	@ (801b1d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b1c2:	2180      	movs	r1, #128	@ 0x80
 801b1c4:	0049      	lsls	r1, r1, #1
 801b1c6:	430a      	orrs	r2, r1
 801b1c8:	601a      	str	r2, [r3, #0]
}
 801b1ca:	46c0      	nop			@ (mov r8, r8)
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bd80      	pop	{r7, pc}
 801b1d0:	40007000 	.word	0x40007000

0801b1d4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b1d8:	4b04      	ldr	r3, [pc, #16]	@ (801b1ec <HAL_PWR_DisableBkUpAccess+0x18>)
 801b1da:	681a      	ldr	r2, [r3, #0]
 801b1dc:	4b03      	ldr	r3, [pc, #12]	@ (801b1ec <HAL_PWR_DisableBkUpAccess+0x18>)
 801b1de:	4904      	ldr	r1, [pc, #16]	@ (801b1f0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b1e0:	400a      	ands	r2, r1
 801b1e2:	601a      	str	r2, [r3, #0]
}
 801b1e4:	46c0      	nop			@ (mov r8, r8)
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bd80      	pop	{r7, pc}
 801b1ea:	46c0      	nop			@ (mov r8, r8)
 801b1ec:	40007000 	.word	0x40007000
 801b1f0:	fffffeff 	.word	0xfffffeff

0801b1f4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b086      	sub	sp, #24
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	000a      	movs	r2, r1
 801b1fe:	1cfb      	adds	r3, r7, #3
 801b200:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b202:	2300      	movs	r3, #0
 801b204:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b206:	4b25      	ldr	r3, [pc, #148]	@ (801b29c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b208:	681a      	ldr	r2, [r3, #0]
 801b20a:	2380      	movs	r3, #128	@ 0x80
 801b20c:	009b      	lsls	r3, r3, #2
 801b20e:	4013      	ands	r3, r2
 801b210:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b212:	4b23      	ldr	r3, [pc, #140]	@ (801b2a0 <HAL_PWR_EnterSTOPMode+0xac>)
 801b214:	6a1b      	ldr	r3, [r3, #32]
 801b216:	2201      	movs	r2, #1
 801b218:	4013      	ands	r3, r2
 801b21a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b21c:	693b      	ldr	r3, [r7, #16]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d008      	beq.n	801b234 <HAL_PWR_EnterSTOPMode+0x40>
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d005      	beq.n	801b234 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b228:	4b1c      	ldr	r3, [pc, #112]	@ (801b29c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b22a:	681a      	ldr	r2, [r3, #0]
 801b22c:	4b1b      	ldr	r3, [pc, #108]	@ (801b29c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b22e:	491d      	ldr	r1, [pc, #116]	@ (801b2a4 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b230:	400a      	ands	r2, r1
 801b232:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b234:	4b19      	ldr	r3, [pc, #100]	@ (801b29c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b23a:	697b      	ldr	r3, [r7, #20]
 801b23c:	2203      	movs	r2, #3
 801b23e:	4393      	bics	r3, r2
 801b240:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b242:	697a      	ldr	r2, [r7, #20]
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	4313      	orrs	r3, r2
 801b248:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b24a:	4b14      	ldr	r3, [pc, #80]	@ (801b29c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b24c:	697a      	ldr	r2, [r7, #20]
 801b24e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b250:	4b15      	ldr	r3, [pc, #84]	@ (801b2a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b252:	691a      	ldr	r2, [r3, #16]
 801b254:	4b14      	ldr	r3, [pc, #80]	@ (801b2a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b256:	2104      	movs	r1, #4
 801b258:	430a      	orrs	r2, r1
 801b25a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b25c:	1cfb      	adds	r3, r7, #3
 801b25e:	781b      	ldrb	r3, [r3, #0]
 801b260:	2b01      	cmp	r3, #1
 801b262:	d101      	bne.n	801b268 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b264:	bf30      	wfi
 801b266:	e002      	b.n	801b26e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b268:	bf40      	sev
    __WFE();
 801b26a:	bf20      	wfe
    __WFE();
 801b26c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b26e:	4b0e      	ldr	r3, [pc, #56]	@ (801b2a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b270:	691a      	ldr	r2, [r3, #16]
 801b272:	4b0d      	ldr	r3, [pc, #52]	@ (801b2a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b274:	2104      	movs	r1, #4
 801b276:	438a      	bics	r2, r1
 801b278:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b27a:	693b      	ldr	r3, [r7, #16]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d009      	beq.n	801b294 <HAL_PWR_EnterSTOPMode+0xa0>
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d006      	beq.n	801b294 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b286:	4b05      	ldr	r3, [pc, #20]	@ (801b29c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b288:	681a      	ldr	r2, [r3, #0]
 801b28a:	4b04      	ldr	r3, [pc, #16]	@ (801b29c <HAL_PWR_EnterSTOPMode+0xa8>)
 801b28c:	2180      	movs	r1, #128	@ 0x80
 801b28e:	0089      	lsls	r1, r1, #2
 801b290:	430a      	orrs	r2, r1
 801b292:	601a      	str	r2, [r3, #0]
  }
}
 801b294:	46c0      	nop			@ (mov r8, r8)
 801b296:	46bd      	mov	sp, r7
 801b298:	b006      	add	sp, #24
 801b29a:	bd80      	pop	{r7, pc}
 801b29c:	40007000 	.word	0x40007000
 801b2a0:	40010000 	.word	0x40010000
 801b2a4:	fffffdff 	.word	0xfffffdff
 801b2a8:	e000ed00 	.word	0xe000ed00

0801b2ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b2ac:	b5b0      	push	{r4, r5, r7, lr}
 801b2ae:	b08a      	sub	sp, #40	@ 0x28
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d102      	bne.n	801b2c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b2ba:	2301      	movs	r3, #1
 801b2bc:	f000 fbbf 	bl	801ba3e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b2c0:	4bc9      	ldr	r3, [pc, #804]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b2c2:	68db      	ldr	r3, [r3, #12]
 801b2c4:	220c      	movs	r2, #12
 801b2c6:	4013      	ands	r3, r2
 801b2c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b2ca:	4bc7      	ldr	r3, [pc, #796]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b2cc:	68da      	ldr	r2, [r3, #12]
 801b2ce:	2380      	movs	r3, #128	@ 0x80
 801b2d0:	025b      	lsls	r3, r3, #9
 801b2d2:	4013      	ands	r3, r2
 801b2d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	2201      	movs	r2, #1
 801b2dc:	4013      	ands	r3, r2
 801b2de:	d100      	bne.n	801b2e2 <HAL_RCC_OscConfig+0x36>
 801b2e0:	e07e      	b.n	801b3e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b2e2:	69fb      	ldr	r3, [r7, #28]
 801b2e4:	2b08      	cmp	r3, #8
 801b2e6:	d007      	beq.n	801b2f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b2e8:	69fb      	ldr	r3, [r7, #28]
 801b2ea:	2b0c      	cmp	r3, #12
 801b2ec:	d112      	bne.n	801b314 <HAL_RCC_OscConfig+0x68>
 801b2ee:	69ba      	ldr	r2, [r7, #24]
 801b2f0:	2380      	movs	r3, #128	@ 0x80
 801b2f2:	025b      	lsls	r3, r3, #9
 801b2f4:	429a      	cmp	r2, r3
 801b2f6:	d10d      	bne.n	801b314 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b2f8:	4bbb      	ldr	r3, [pc, #748]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b2fa:	681a      	ldr	r2, [r3, #0]
 801b2fc:	2380      	movs	r3, #128	@ 0x80
 801b2fe:	029b      	lsls	r3, r3, #10
 801b300:	4013      	ands	r3, r2
 801b302:	d100      	bne.n	801b306 <HAL_RCC_OscConfig+0x5a>
 801b304:	e06b      	b.n	801b3de <HAL_RCC_OscConfig+0x132>
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	685b      	ldr	r3, [r3, #4]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d167      	bne.n	801b3de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b30e:	2301      	movs	r3, #1
 801b310:	f000 fb95 	bl	801ba3e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	685a      	ldr	r2, [r3, #4]
 801b318:	2380      	movs	r3, #128	@ 0x80
 801b31a:	025b      	lsls	r3, r3, #9
 801b31c:	429a      	cmp	r2, r3
 801b31e:	d107      	bne.n	801b330 <HAL_RCC_OscConfig+0x84>
 801b320:	4bb1      	ldr	r3, [pc, #708]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b322:	681a      	ldr	r2, [r3, #0]
 801b324:	4bb0      	ldr	r3, [pc, #704]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b326:	2180      	movs	r1, #128	@ 0x80
 801b328:	0249      	lsls	r1, r1, #9
 801b32a:	430a      	orrs	r2, r1
 801b32c:	601a      	str	r2, [r3, #0]
 801b32e:	e027      	b.n	801b380 <HAL_RCC_OscConfig+0xd4>
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	685a      	ldr	r2, [r3, #4]
 801b334:	23a0      	movs	r3, #160	@ 0xa0
 801b336:	02db      	lsls	r3, r3, #11
 801b338:	429a      	cmp	r2, r3
 801b33a:	d10e      	bne.n	801b35a <HAL_RCC_OscConfig+0xae>
 801b33c:	4baa      	ldr	r3, [pc, #680]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b33e:	681a      	ldr	r2, [r3, #0]
 801b340:	4ba9      	ldr	r3, [pc, #676]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b342:	2180      	movs	r1, #128	@ 0x80
 801b344:	02c9      	lsls	r1, r1, #11
 801b346:	430a      	orrs	r2, r1
 801b348:	601a      	str	r2, [r3, #0]
 801b34a:	4ba7      	ldr	r3, [pc, #668]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b34c:	681a      	ldr	r2, [r3, #0]
 801b34e:	4ba6      	ldr	r3, [pc, #664]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b350:	2180      	movs	r1, #128	@ 0x80
 801b352:	0249      	lsls	r1, r1, #9
 801b354:	430a      	orrs	r2, r1
 801b356:	601a      	str	r2, [r3, #0]
 801b358:	e012      	b.n	801b380 <HAL_RCC_OscConfig+0xd4>
 801b35a:	4ba3      	ldr	r3, [pc, #652]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b35c:	681a      	ldr	r2, [r3, #0]
 801b35e:	4ba2      	ldr	r3, [pc, #648]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b360:	49a2      	ldr	r1, [pc, #648]	@ (801b5ec <HAL_RCC_OscConfig+0x340>)
 801b362:	400a      	ands	r2, r1
 801b364:	601a      	str	r2, [r3, #0]
 801b366:	4ba0      	ldr	r3, [pc, #640]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b368:	681a      	ldr	r2, [r3, #0]
 801b36a:	2380      	movs	r3, #128	@ 0x80
 801b36c:	025b      	lsls	r3, r3, #9
 801b36e:	4013      	ands	r3, r2
 801b370:	60fb      	str	r3, [r7, #12]
 801b372:	68fb      	ldr	r3, [r7, #12]
 801b374:	4b9c      	ldr	r3, [pc, #624]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	4b9b      	ldr	r3, [pc, #620]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b37a:	499d      	ldr	r1, [pc, #628]	@ (801b5f0 <HAL_RCC_OscConfig+0x344>)
 801b37c:	400a      	ands	r2, r1
 801b37e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d015      	beq.n	801b3b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b388:	f7f9 fb04 	bl	8014994 <HAL_GetTick>
 801b38c:	0003      	movs	r3, r0
 801b38e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b390:	e009      	b.n	801b3a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b392:	f7f9 faff 	bl	8014994 <HAL_GetTick>
 801b396:	0002      	movs	r2, r0
 801b398:	697b      	ldr	r3, [r7, #20]
 801b39a:	1ad3      	subs	r3, r2, r3
 801b39c:	2b64      	cmp	r3, #100	@ 0x64
 801b39e:	d902      	bls.n	801b3a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b3a0:	2303      	movs	r3, #3
 801b3a2:	f000 fb4c 	bl	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b3a6:	4b90      	ldr	r3, [pc, #576]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b3a8:	681a      	ldr	r2, [r3, #0]
 801b3aa:	2380      	movs	r3, #128	@ 0x80
 801b3ac:	029b      	lsls	r3, r3, #10
 801b3ae:	4013      	ands	r3, r2
 801b3b0:	d0ef      	beq.n	801b392 <HAL_RCC_OscConfig+0xe6>
 801b3b2:	e015      	b.n	801b3e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3b4:	f7f9 faee 	bl	8014994 <HAL_GetTick>
 801b3b8:	0003      	movs	r3, r0
 801b3ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b3bc:	e008      	b.n	801b3d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b3be:	f7f9 fae9 	bl	8014994 <HAL_GetTick>
 801b3c2:	0002      	movs	r2, r0
 801b3c4:	697b      	ldr	r3, [r7, #20]
 801b3c6:	1ad3      	subs	r3, r2, r3
 801b3c8:	2b64      	cmp	r3, #100	@ 0x64
 801b3ca:	d901      	bls.n	801b3d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b3cc:	2303      	movs	r3, #3
 801b3ce:	e336      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b3d0:	4b85      	ldr	r3, [pc, #532]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b3d2:	681a      	ldr	r2, [r3, #0]
 801b3d4:	2380      	movs	r3, #128	@ 0x80
 801b3d6:	029b      	lsls	r3, r3, #10
 801b3d8:	4013      	ands	r3, r2
 801b3da:	d1f0      	bne.n	801b3be <HAL_RCC_OscConfig+0x112>
 801b3dc:	e000      	b.n	801b3e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b3de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	2202      	movs	r2, #2
 801b3e6:	4013      	ands	r3, r2
 801b3e8:	d100      	bne.n	801b3ec <HAL_RCC_OscConfig+0x140>
 801b3ea:	e099      	b.n	801b520 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	68db      	ldr	r3, [r3, #12]
 801b3f0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3f4:	2220      	movs	r2, #32
 801b3f6:	4013      	ands	r3, r2
 801b3f8:	d009      	beq.n	801b40e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b3fa:	4b7b      	ldr	r3, [pc, #492]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b3fc:	681a      	ldr	r2, [r3, #0]
 801b3fe:	4b7a      	ldr	r3, [pc, #488]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b400:	2120      	movs	r1, #32
 801b402:	430a      	orrs	r2, r1
 801b404:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b408:	2220      	movs	r2, #32
 801b40a:	4393      	bics	r3, r2
 801b40c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b40e:	69fb      	ldr	r3, [r7, #28]
 801b410:	2b04      	cmp	r3, #4
 801b412:	d005      	beq.n	801b420 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b414:	69fb      	ldr	r3, [r7, #28]
 801b416:	2b0c      	cmp	r3, #12
 801b418:	d13e      	bne.n	801b498 <HAL_RCC_OscConfig+0x1ec>
 801b41a:	69bb      	ldr	r3, [r7, #24]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d13b      	bne.n	801b498 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b420:	4b71      	ldr	r3, [pc, #452]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	2204      	movs	r2, #4
 801b426:	4013      	ands	r3, r2
 801b428:	d004      	beq.n	801b434 <HAL_RCC_OscConfig+0x188>
 801b42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d101      	bne.n	801b434 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b430:	2301      	movs	r3, #1
 801b432:	e304      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b434:	4b6c      	ldr	r3, [pc, #432]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b436:	685b      	ldr	r3, [r3, #4]
 801b438:	4a6e      	ldr	r2, [pc, #440]	@ (801b5f4 <HAL_RCC_OscConfig+0x348>)
 801b43a:	4013      	ands	r3, r2
 801b43c:	0019      	movs	r1, r3
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	691b      	ldr	r3, [r3, #16]
 801b442:	021a      	lsls	r2, r3, #8
 801b444:	4b68      	ldr	r3, [pc, #416]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b446:	430a      	orrs	r2, r1
 801b448:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b44a:	4b67      	ldr	r3, [pc, #412]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	2209      	movs	r2, #9
 801b450:	4393      	bics	r3, r2
 801b452:	0019      	movs	r1, r3
 801b454:	4b64      	ldr	r3, [pc, #400]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b458:	430a      	orrs	r2, r1
 801b45a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b45c:	f000 fc42 	bl	801bce4 <HAL_RCC_GetSysClockFreq>
 801b460:	0001      	movs	r1, r0
 801b462:	4b61      	ldr	r3, [pc, #388]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b464:	68db      	ldr	r3, [r3, #12]
 801b466:	091b      	lsrs	r3, r3, #4
 801b468:	220f      	movs	r2, #15
 801b46a:	4013      	ands	r3, r2
 801b46c:	4a62      	ldr	r2, [pc, #392]	@ (801b5f8 <HAL_RCC_OscConfig+0x34c>)
 801b46e:	5cd3      	ldrb	r3, [r2, r3]
 801b470:	000a      	movs	r2, r1
 801b472:	40da      	lsrs	r2, r3
 801b474:	4b61      	ldr	r3, [pc, #388]	@ (801b5fc <HAL_RCC_OscConfig+0x350>)
 801b476:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b478:	4b61      	ldr	r3, [pc, #388]	@ (801b600 <HAL_RCC_OscConfig+0x354>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	2513      	movs	r5, #19
 801b47e:	197c      	adds	r4, r7, r5
 801b480:	0018      	movs	r0, r3
 801b482:	f7f9 fa41 	bl	8014908 <HAL_InitTick>
 801b486:	0003      	movs	r3, r0
 801b488:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b48a:	197b      	adds	r3, r7, r5
 801b48c:	781b      	ldrb	r3, [r3, #0]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d046      	beq.n	801b520 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b492:	197b      	adds	r3, r7, r5
 801b494:	781b      	ldrb	r3, [r3, #0]
 801b496:	e2d2      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d027      	beq.n	801b4ee <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b49e:	4b52      	ldr	r3, [pc, #328]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	2209      	movs	r2, #9
 801b4a4:	4393      	bics	r3, r2
 801b4a6:	0019      	movs	r1, r3
 801b4a8:	4b4f      	ldr	r3, [pc, #316]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b4aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b4ac:	430a      	orrs	r2, r1
 801b4ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4b0:	f7f9 fa70 	bl	8014994 <HAL_GetTick>
 801b4b4:	0003      	movs	r3, r0
 801b4b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b4b8:	e008      	b.n	801b4cc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b4ba:	f7f9 fa6b 	bl	8014994 <HAL_GetTick>
 801b4be:	0002      	movs	r2, r0
 801b4c0:	697b      	ldr	r3, [r7, #20]
 801b4c2:	1ad3      	subs	r3, r2, r3
 801b4c4:	2b02      	cmp	r3, #2
 801b4c6:	d901      	bls.n	801b4cc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b4c8:	2303      	movs	r3, #3
 801b4ca:	e2b8      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b4cc:	4b46      	ldr	r3, [pc, #280]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	2204      	movs	r2, #4
 801b4d2:	4013      	ands	r3, r2
 801b4d4:	d0f1      	beq.n	801b4ba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b4d6:	4b44      	ldr	r3, [pc, #272]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b4d8:	685b      	ldr	r3, [r3, #4]
 801b4da:	4a46      	ldr	r2, [pc, #280]	@ (801b5f4 <HAL_RCC_OscConfig+0x348>)
 801b4dc:	4013      	ands	r3, r2
 801b4de:	0019      	movs	r1, r3
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	691b      	ldr	r3, [r3, #16]
 801b4e4:	021a      	lsls	r2, r3, #8
 801b4e6:	4b40      	ldr	r3, [pc, #256]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b4e8:	430a      	orrs	r2, r1
 801b4ea:	605a      	str	r2, [r3, #4]
 801b4ec:	e018      	b.n	801b520 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b4ee:	4b3e      	ldr	r3, [pc, #248]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b4f0:	681a      	ldr	r2, [r3, #0]
 801b4f2:	4b3d      	ldr	r3, [pc, #244]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b4f4:	2101      	movs	r1, #1
 801b4f6:	438a      	bics	r2, r1
 801b4f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4fa:	f7f9 fa4b 	bl	8014994 <HAL_GetTick>
 801b4fe:	0003      	movs	r3, r0
 801b500:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b502:	e008      	b.n	801b516 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b504:	f7f9 fa46 	bl	8014994 <HAL_GetTick>
 801b508:	0002      	movs	r2, r0
 801b50a:	697b      	ldr	r3, [r7, #20]
 801b50c:	1ad3      	subs	r3, r2, r3
 801b50e:	2b02      	cmp	r3, #2
 801b510:	d901      	bls.n	801b516 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b512:	2303      	movs	r3, #3
 801b514:	e293      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b516:	4b34      	ldr	r3, [pc, #208]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	2204      	movs	r2, #4
 801b51c:	4013      	ands	r3, r2
 801b51e:	d1f1      	bne.n	801b504 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	2210      	movs	r2, #16
 801b526:	4013      	ands	r3, r2
 801b528:	d100      	bne.n	801b52c <HAL_RCC_OscConfig+0x280>
 801b52a:	e0a2      	b.n	801b672 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b52c:	69fb      	ldr	r3, [r7, #28]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d140      	bne.n	801b5b4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b532:	4b2d      	ldr	r3, [pc, #180]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b534:	681a      	ldr	r2, [r3, #0]
 801b536:	2380      	movs	r3, #128	@ 0x80
 801b538:	009b      	lsls	r3, r3, #2
 801b53a:	4013      	ands	r3, r2
 801b53c:	d005      	beq.n	801b54a <HAL_RCC_OscConfig+0x29e>
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	69db      	ldr	r3, [r3, #28]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d101      	bne.n	801b54a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b546:	2301      	movs	r3, #1
 801b548:	e279      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b54a:	4b27      	ldr	r3, [pc, #156]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b54c:	685b      	ldr	r3, [r3, #4]
 801b54e:	4a2d      	ldr	r2, [pc, #180]	@ (801b604 <HAL_RCC_OscConfig+0x358>)
 801b550:	4013      	ands	r3, r2
 801b552:	0019      	movs	r1, r3
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b558:	4b23      	ldr	r3, [pc, #140]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b55a:	430a      	orrs	r2, r1
 801b55c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b55e:	4b22      	ldr	r3, [pc, #136]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b560:	685b      	ldr	r3, [r3, #4]
 801b562:	021b      	lsls	r3, r3, #8
 801b564:	0a19      	lsrs	r1, r3, #8
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	6a1b      	ldr	r3, [r3, #32]
 801b56a:	061a      	lsls	r2, r3, #24
 801b56c:	4b1e      	ldr	r3, [pc, #120]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b56e:	430a      	orrs	r2, r1
 801b570:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b576:	0b5b      	lsrs	r3, r3, #13
 801b578:	3301      	adds	r3, #1
 801b57a:	2280      	movs	r2, #128	@ 0x80
 801b57c:	0212      	lsls	r2, r2, #8
 801b57e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b580:	4b19      	ldr	r3, [pc, #100]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b582:	68db      	ldr	r3, [r3, #12]
 801b584:	091b      	lsrs	r3, r3, #4
 801b586:	210f      	movs	r1, #15
 801b588:	400b      	ands	r3, r1
 801b58a:	491b      	ldr	r1, [pc, #108]	@ (801b5f8 <HAL_RCC_OscConfig+0x34c>)
 801b58c:	5ccb      	ldrb	r3, [r1, r3]
 801b58e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b590:	4b1a      	ldr	r3, [pc, #104]	@ (801b5fc <HAL_RCC_OscConfig+0x350>)
 801b592:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b594:	4b1a      	ldr	r3, [pc, #104]	@ (801b600 <HAL_RCC_OscConfig+0x354>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	2513      	movs	r5, #19
 801b59a:	197c      	adds	r4, r7, r5
 801b59c:	0018      	movs	r0, r3
 801b59e:	f7f9 f9b3 	bl	8014908 <HAL_InitTick>
 801b5a2:	0003      	movs	r3, r0
 801b5a4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b5a6:	197b      	adds	r3, r7, r5
 801b5a8:	781b      	ldrb	r3, [r3, #0]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d061      	beq.n	801b672 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b5ae:	197b      	adds	r3, r7, r5
 801b5b0:	781b      	ldrb	r3, [r3, #0]
 801b5b2:	e244      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	69db      	ldr	r3, [r3, #28]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d040      	beq.n	801b63e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b5bc:	4b0a      	ldr	r3, [pc, #40]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b5be:	681a      	ldr	r2, [r3, #0]
 801b5c0:	4b09      	ldr	r3, [pc, #36]	@ (801b5e8 <HAL_RCC_OscConfig+0x33c>)
 801b5c2:	2180      	movs	r1, #128	@ 0x80
 801b5c4:	0049      	lsls	r1, r1, #1
 801b5c6:	430a      	orrs	r2, r1
 801b5c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b5ca:	f7f9 f9e3 	bl	8014994 <HAL_GetTick>
 801b5ce:	0003      	movs	r3, r0
 801b5d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b5d2:	e019      	b.n	801b608 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b5d4:	f7f9 f9de 	bl	8014994 <HAL_GetTick>
 801b5d8:	0002      	movs	r2, r0
 801b5da:	697b      	ldr	r3, [r7, #20]
 801b5dc:	1ad3      	subs	r3, r2, r3
 801b5de:	2b02      	cmp	r3, #2
 801b5e0:	d912      	bls.n	801b608 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b5e2:	2303      	movs	r3, #3
 801b5e4:	e22b      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
 801b5e6:	46c0      	nop			@ (mov r8, r8)
 801b5e8:	40021000 	.word	0x40021000
 801b5ec:	fffeffff 	.word	0xfffeffff
 801b5f0:	fffbffff 	.word	0xfffbffff
 801b5f4:	ffffe0ff 	.word	0xffffe0ff
 801b5f8:	0802e83c 	.word	0x0802e83c
 801b5fc:	200000ec 	.word	0x200000ec
 801b600:	200000fc 	.word	0x200000fc
 801b604:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b608:	4bca      	ldr	r3, [pc, #808]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b60a:	681a      	ldr	r2, [r3, #0]
 801b60c:	2380      	movs	r3, #128	@ 0x80
 801b60e:	009b      	lsls	r3, r3, #2
 801b610:	4013      	ands	r3, r2
 801b612:	d0df      	beq.n	801b5d4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b614:	4bc7      	ldr	r3, [pc, #796]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b616:	685b      	ldr	r3, [r3, #4]
 801b618:	4ac7      	ldr	r2, [pc, #796]	@ (801b938 <HAL_RCC_OscConfig+0x68c>)
 801b61a:	4013      	ands	r3, r2
 801b61c:	0019      	movs	r1, r3
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b622:	4bc4      	ldr	r3, [pc, #784]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b624:	430a      	orrs	r2, r1
 801b626:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b628:	4bc2      	ldr	r3, [pc, #776]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	021b      	lsls	r3, r3, #8
 801b62e:	0a19      	lsrs	r1, r3, #8
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	6a1b      	ldr	r3, [r3, #32]
 801b634:	061a      	lsls	r2, r3, #24
 801b636:	4bbf      	ldr	r3, [pc, #764]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b638:	430a      	orrs	r2, r1
 801b63a:	605a      	str	r2, [r3, #4]
 801b63c:	e019      	b.n	801b672 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b63e:	4bbd      	ldr	r3, [pc, #756]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b640:	681a      	ldr	r2, [r3, #0]
 801b642:	4bbc      	ldr	r3, [pc, #752]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b644:	49bd      	ldr	r1, [pc, #756]	@ (801b93c <HAL_RCC_OscConfig+0x690>)
 801b646:	400a      	ands	r2, r1
 801b648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b64a:	f7f9 f9a3 	bl	8014994 <HAL_GetTick>
 801b64e:	0003      	movs	r3, r0
 801b650:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b652:	e008      	b.n	801b666 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b654:	f7f9 f99e 	bl	8014994 <HAL_GetTick>
 801b658:	0002      	movs	r2, r0
 801b65a:	697b      	ldr	r3, [r7, #20]
 801b65c:	1ad3      	subs	r3, r2, r3
 801b65e:	2b02      	cmp	r3, #2
 801b660:	d901      	bls.n	801b666 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b662:	2303      	movs	r3, #3
 801b664:	e1eb      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b666:	4bb3      	ldr	r3, [pc, #716]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b668:	681a      	ldr	r2, [r3, #0]
 801b66a:	2380      	movs	r3, #128	@ 0x80
 801b66c:	009b      	lsls	r3, r3, #2
 801b66e:	4013      	ands	r3, r2
 801b670:	d1f0      	bne.n	801b654 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	2208      	movs	r2, #8
 801b678:	4013      	ands	r3, r2
 801b67a:	d036      	beq.n	801b6ea <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	695b      	ldr	r3, [r3, #20]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d019      	beq.n	801b6b8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b684:	4bab      	ldr	r3, [pc, #684]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b688:	4baa      	ldr	r3, [pc, #680]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b68a:	2101      	movs	r1, #1
 801b68c:	430a      	orrs	r2, r1
 801b68e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b690:	f7f9 f980 	bl	8014994 <HAL_GetTick>
 801b694:	0003      	movs	r3, r0
 801b696:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b698:	e008      	b.n	801b6ac <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b69a:	f7f9 f97b 	bl	8014994 <HAL_GetTick>
 801b69e:	0002      	movs	r2, r0
 801b6a0:	697b      	ldr	r3, [r7, #20]
 801b6a2:	1ad3      	subs	r3, r2, r3
 801b6a4:	2b02      	cmp	r3, #2
 801b6a6:	d901      	bls.n	801b6ac <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b6a8:	2303      	movs	r3, #3
 801b6aa:	e1c8      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b6ac:	4ba1      	ldr	r3, [pc, #644]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b6b0:	2202      	movs	r2, #2
 801b6b2:	4013      	ands	r3, r2
 801b6b4:	d0f1      	beq.n	801b69a <HAL_RCC_OscConfig+0x3ee>
 801b6b6:	e018      	b.n	801b6ea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b6b8:	4b9e      	ldr	r3, [pc, #632]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b6ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6bc:	4b9d      	ldr	r3, [pc, #628]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b6be:	2101      	movs	r1, #1
 801b6c0:	438a      	bics	r2, r1
 801b6c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b6c4:	f7f9 f966 	bl	8014994 <HAL_GetTick>
 801b6c8:	0003      	movs	r3, r0
 801b6ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b6cc:	e008      	b.n	801b6e0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b6ce:	f7f9 f961 	bl	8014994 <HAL_GetTick>
 801b6d2:	0002      	movs	r2, r0
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	1ad3      	subs	r3, r2, r3
 801b6d8:	2b02      	cmp	r3, #2
 801b6da:	d901      	bls.n	801b6e0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b6dc:	2303      	movs	r3, #3
 801b6de:	e1ae      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b6e0:	4b94      	ldr	r3, [pc, #592]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b6e4:	2202      	movs	r2, #2
 801b6e6:	4013      	ands	r3, r2
 801b6e8:	d1f1      	bne.n	801b6ce <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	2204      	movs	r2, #4
 801b6f0:	4013      	ands	r3, r2
 801b6f2:	d100      	bne.n	801b6f6 <HAL_RCC_OscConfig+0x44a>
 801b6f4:	e0ae      	b.n	801b854 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b6f6:	2023      	movs	r0, #35	@ 0x23
 801b6f8:	183b      	adds	r3, r7, r0
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b6fe:	4b8d      	ldr	r3, [pc, #564]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b702:	2380      	movs	r3, #128	@ 0x80
 801b704:	055b      	lsls	r3, r3, #21
 801b706:	4013      	ands	r3, r2
 801b708:	d109      	bne.n	801b71e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b70a:	4b8a      	ldr	r3, [pc, #552]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b70c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b70e:	4b89      	ldr	r3, [pc, #548]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b710:	2180      	movs	r1, #128	@ 0x80
 801b712:	0549      	lsls	r1, r1, #21
 801b714:	430a      	orrs	r2, r1
 801b716:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b718:	183b      	adds	r3, r7, r0
 801b71a:	2201      	movs	r2, #1
 801b71c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b71e:	4b88      	ldr	r3, [pc, #544]	@ (801b940 <HAL_RCC_OscConfig+0x694>)
 801b720:	681a      	ldr	r2, [r3, #0]
 801b722:	2380      	movs	r3, #128	@ 0x80
 801b724:	005b      	lsls	r3, r3, #1
 801b726:	4013      	ands	r3, r2
 801b728:	d11a      	bne.n	801b760 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b72a:	4b85      	ldr	r3, [pc, #532]	@ (801b940 <HAL_RCC_OscConfig+0x694>)
 801b72c:	681a      	ldr	r2, [r3, #0]
 801b72e:	4b84      	ldr	r3, [pc, #528]	@ (801b940 <HAL_RCC_OscConfig+0x694>)
 801b730:	2180      	movs	r1, #128	@ 0x80
 801b732:	0049      	lsls	r1, r1, #1
 801b734:	430a      	orrs	r2, r1
 801b736:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b738:	f7f9 f92c 	bl	8014994 <HAL_GetTick>
 801b73c:	0003      	movs	r3, r0
 801b73e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b740:	e008      	b.n	801b754 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b742:	f7f9 f927 	bl	8014994 <HAL_GetTick>
 801b746:	0002      	movs	r2, r0
 801b748:	697b      	ldr	r3, [r7, #20]
 801b74a:	1ad3      	subs	r3, r2, r3
 801b74c:	2b64      	cmp	r3, #100	@ 0x64
 801b74e:	d901      	bls.n	801b754 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b750:	2303      	movs	r3, #3
 801b752:	e174      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b754:	4b7a      	ldr	r3, [pc, #488]	@ (801b940 <HAL_RCC_OscConfig+0x694>)
 801b756:	681a      	ldr	r2, [r3, #0]
 801b758:	2380      	movs	r3, #128	@ 0x80
 801b75a:	005b      	lsls	r3, r3, #1
 801b75c:	4013      	ands	r3, r2
 801b75e:	d0f0      	beq.n	801b742 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	689a      	ldr	r2, [r3, #8]
 801b764:	2380      	movs	r3, #128	@ 0x80
 801b766:	005b      	lsls	r3, r3, #1
 801b768:	429a      	cmp	r2, r3
 801b76a:	d107      	bne.n	801b77c <HAL_RCC_OscConfig+0x4d0>
 801b76c:	4b71      	ldr	r3, [pc, #452]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b76e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b770:	4b70      	ldr	r3, [pc, #448]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b772:	2180      	movs	r1, #128	@ 0x80
 801b774:	0049      	lsls	r1, r1, #1
 801b776:	430a      	orrs	r2, r1
 801b778:	651a      	str	r2, [r3, #80]	@ 0x50
 801b77a:	e031      	b.n	801b7e0 <HAL_RCC_OscConfig+0x534>
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	689b      	ldr	r3, [r3, #8]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d10c      	bne.n	801b79e <HAL_RCC_OscConfig+0x4f2>
 801b784:	4b6b      	ldr	r3, [pc, #428]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b788:	4b6a      	ldr	r3, [pc, #424]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b78a:	496c      	ldr	r1, [pc, #432]	@ (801b93c <HAL_RCC_OscConfig+0x690>)
 801b78c:	400a      	ands	r2, r1
 801b78e:	651a      	str	r2, [r3, #80]	@ 0x50
 801b790:	4b68      	ldr	r3, [pc, #416]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b792:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b794:	4b67      	ldr	r3, [pc, #412]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b796:	496b      	ldr	r1, [pc, #428]	@ (801b944 <HAL_RCC_OscConfig+0x698>)
 801b798:	400a      	ands	r2, r1
 801b79a:	651a      	str	r2, [r3, #80]	@ 0x50
 801b79c:	e020      	b.n	801b7e0 <HAL_RCC_OscConfig+0x534>
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	689a      	ldr	r2, [r3, #8]
 801b7a2:	23a0      	movs	r3, #160	@ 0xa0
 801b7a4:	00db      	lsls	r3, r3, #3
 801b7a6:	429a      	cmp	r2, r3
 801b7a8:	d10e      	bne.n	801b7c8 <HAL_RCC_OscConfig+0x51c>
 801b7aa:	4b62      	ldr	r3, [pc, #392]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7ae:	4b61      	ldr	r3, [pc, #388]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7b0:	2180      	movs	r1, #128	@ 0x80
 801b7b2:	00c9      	lsls	r1, r1, #3
 801b7b4:	430a      	orrs	r2, r1
 801b7b6:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7b8:	4b5e      	ldr	r3, [pc, #376]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7bc:	4b5d      	ldr	r3, [pc, #372]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7be:	2180      	movs	r1, #128	@ 0x80
 801b7c0:	0049      	lsls	r1, r1, #1
 801b7c2:	430a      	orrs	r2, r1
 801b7c4:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7c6:	e00b      	b.n	801b7e0 <HAL_RCC_OscConfig+0x534>
 801b7c8:	4b5a      	ldr	r3, [pc, #360]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7cc:	4b59      	ldr	r3, [pc, #356]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7ce:	495b      	ldr	r1, [pc, #364]	@ (801b93c <HAL_RCC_OscConfig+0x690>)
 801b7d0:	400a      	ands	r2, r1
 801b7d2:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7d4:	4b57      	ldr	r3, [pc, #348]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7d8:	4b56      	ldr	r3, [pc, #344]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b7da:	495a      	ldr	r1, [pc, #360]	@ (801b944 <HAL_RCC_OscConfig+0x698>)
 801b7dc:	400a      	ands	r2, r1
 801b7de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	689b      	ldr	r3, [r3, #8]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d015      	beq.n	801b814 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b7e8:	f7f9 f8d4 	bl	8014994 <HAL_GetTick>
 801b7ec:	0003      	movs	r3, r0
 801b7ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b7f0:	e009      	b.n	801b806 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b7f2:	f7f9 f8cf 	bl	8014994 <HAL_GetTick>
 801b7f6:	0002      	movs	r2, r0
 801b7f8:	697b      	ldr	r3, [r7, #20]
 801b7fa:	1ad3      	subs	r3, r2, r3
 801b7fc:	4a52      	ldr	r2, [pc, #328]	@ (801b948 <HAL_RCC_OscConfig+0x69c>)
 801b7fe:	4293      	cmp	r3, r2
 801b800:	d901      	bls.n	801b806 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b802:	2303      	movs	r3, #3
 801b804:	e11b      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b806:	4b4b      	ldr	r3, [pc, #300]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b80a:	2380      	movs	r3, #128	@ 0x80
 801b80c:	009b      	lsls	r3, r3, #2
 801b80e:	4013      	ands	r3, r2
 801b810:	d0ef      	beq.n	801b7f2 <HAL_RCC_OscConfig+0x546>
 801b812:	e014      	b.n	801b83e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b814:	f7f9 f8be 	bl	8014994 <HAL_GetTick>
 801b818:	0003      	movs	r3, r0
 801b81a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b81c:	e009      	b.n	801b832 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b81e:	f7f9 f8b9 	bl	8014994 <HAL_GetTick>
 801b822:	0002      	movs	r2, r0
 801b824:	697b      	ldr	r3, [r7, #20]
 801b826:	1ad3      	subs	r3, r2, r3
 801b828:	4a47      	ldr	r2, [pc, #284]	@ (801b948 <HAL_RCC_OscConfig+0x69c>)
 801b82a:	4293      	cmp	r3, r2
 801b82c:	d901      	bls.n	801b832 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b82e:	2303      	movs	r3, #3
 801b830:	e105      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b832:	4b40      	ldr	r3, [pc, #256]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b836:	2380      	movs	r3, #128	@ 0x80
 801b838:	009b      	lsls	r3, r3, #2
 801b83a:	4013      	ands	r3, r2
 801b83c:	d1ef      	bne.n	801b81e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b83e:	2323      	movs	r3, #35	@ 0x23
 801b840:	18fb      	adds	r3, r7, r3
 801b842:	781b      	ldrb	r3, [r3, #0]
 801b844:	2b01      	cmp	r3, #1
 801b846:	d105      	bne.n	801b854 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b848:	4b3a      	ldr	r3, [pc, #232]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b84a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b84c:	4b39      	ldr	r3, [pc, #228]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b84e:	493f      	ldr	r1, [pc, #252]	@ (801b94c <HAL_RCC_OscConfig+0x6a0>)
 801b850:	400a      	ands	r2, r1
 801b852:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	2220      	movs	r2, #32
 801b85a:	4013      	ands	r3, r2
 801b85c:	d049      	beq.n	801b8f2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	699b      	ldr	r3, [r3, #24]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d026      	beq.n	801b8b4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b866:	4b33      	ldr	r3, [pc, #204]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b868:	689a      	ldr	r2, [r3, #8]
 801b86a:	4b32      	ldr	r3, [pc, #200]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b86c:	2101      	movs	r1, #1
 801b86e:	430a      	orrs	r2, r1
 801b870:	609a      	str	r2, [r3, #8]
 801b872:	4b30      	ldr	r3, [pc, #192]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b876:	4b2f      	ldr	r3, [pc, #188]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b878:	2101      	movs	r1, #1
 801b87a:	430a      	orrs	r2, r1
 801b87c:	635a      	str	r2, [r3, #52]	@ 0x34
 801b87e:	4b34      	ldr	r3, [pc, #208]	@ (801b950 <HAL_RCC_OscConfig+0x6a4>)
 801b880:	6a1a      	ldr	r2, [r3, #32]
 801b882:	4b33      	ldr	r3, [pc, #204]	@ (801b950 <HAL_RCC_OscConfig+0x6a4>)
 801b884:	2180      	movs	r1, #128	@ 0x80
 801b886:	0189      	lsls	r1, r1, #6
 801b888:	430a      	orrs	r2, r1
 801b88a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b88c:	f7f9 f882 	bl	8014994 <HAL_GetTick>
 801b890:	0003      	movs	r3, r0
 801b892:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b894:	e008      	b.n	801b8a8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b896:	f7f9 f87d 	bl	8014994 <HAL_GetTick>
 801b89a:	0002      	movs	r2, r0
 801b89c:	697b      	ldr	r3, [r7, #20]
 801b89e:	1ad3      	subs	r3, r2, r3
 801b8a0:	2b02      	cmp	r3, #2
 801b8a2:	d901      	bls.n	801b8a8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b8a4:	2303      	movs	r3, #3
 801b8a6:	e0ca      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b8a8:	4b22      	ldr	r3, [pc, #136]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b8aa:	689b      	ldr	r3, [r3, #8]
 801b8ac:	2202      	movs	r2, #2
 801b8ae:	4013      	ands	r3, r2
 801b8b0:	d0f1      	beq.n	801b896 <HAL_RCC_OscConfig+0x5ea>
 801b8b2:	e01e      	b.n	801b8f2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b8b4:	4b1f      	ldr	r3, [pc, #124]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b8b6:	689a      	ldr	r2, [r3, #8]
 801b8b8:	4b1e      	ldr	r3, [pc, #120]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b8ba:	2101      	movs	r1, #1
 801b8bc:	438a      	bics	r2, r1
 801b8be:	609a      	str	r2, [r3, #8]
 801b8c0:	4b23      	ldr	r3, [pc, #140]	@ (801b950 <HAL_RCC_OscConfig+0x6a4>)
 801b8c2:	6a1a      	ldr	r2, [r3, #32]
 801b8c4:	4b22      	ldr	r3, [pc, #136]	@ (801b950 <HAL_RCC_OscConfig+0x6a4>)
 801b8c6:	4923      	ldr	r1, [pc, #140]	@ (801b954 <HAL_RCC_OscConfig+0x6a8>)
 801b8c8:	400a      	ands	r2, r1
 801b8ca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8cc:	f7f9 f862 	bl	8014994 <HAL_GetTick>
 801b8d0:	0003      	movs	r3, r0
 801b8d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b8d4:	e008      	b.n	801b8e8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b8d6:	f7f9 f85d 	bl	8014994 <HAL_GetTick>
 801b8da:	0002      	movs	r2, r0
 801b8dc:	697b      	ldr	r3, [r7, #20]
 801b8de:	1ad3      	subs	r3, r2, r3
 801b8e0:	2b02      	cmp	r3, #2
 801b8e2:	d901      	bls.n	801b8e8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b8e4:	2303      	movs	r3, #3
 801b8e6:	e0aa      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b8e8:	4b12      	ldr	r3, [pc, #72]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b8ea:	689b      	ldr	r3, [r3, #8]
 801b8ec:	2202      	movs	r2, #2
 801b8ee:	4013      	ands	r3, r2
 801b8f0:	d1f1      	bne.n	801b8d6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d100      	bne.n	801b8fc <HAL_RCC_OscConfig+0x650>
 801b8fa:	e09f      	b.n	801ba3c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b8fc:	69fb      	ldr	r3, [r7, #28]
 801b8fe:	2b0c      	cmp	r3, #12
 801b900:	d100      	bne.n	801b904 <HAL_RCC_OscConfig+0x658>
 801b902:	e078      	b.n	801b9f6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b908:	2b02      	cmp	r3, #2
 801b90a:	d159      	bne.n	801b9c0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b90c:	4b09      	ldr	r3, [pc, #36]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b90e:	681a      	ldr	r2, [r3, #0]
 801b910:	4b08      	ldr	r3, [pc, #32]	@ (801b934 <HAL_RCC_OscConfig+0x688>)
 801b912:	4911      	ldr	r1, [pc, #68]	@ (801b958 <HAL_RCC_OscConfig+0x6ac>)
 801b914:	400a      	ands	r2, r1
 801b916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b918:	f7f9 f83c 	bl	8014994 <HAL_GetTick>
 801b91c:	0003      	movs	r3, r0
 801b91e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b920:	e01c      	b.n	801b95c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b922:	f7f9 f837 	bl	8014994 <HAL_GetTick>
 801b926:	0002      	movs	r2, r0
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	1ad3      	subs	r3, r2, r3
 801b92c:	2b02      	cmp	r3, #2
 801b92e:	d915      	bls.n	801b95c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b930:	2303      	movs	r3, #3
 801b932:	e084      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
 801b934:	40021000 	.word	0x40021000
 801b938:	ffff1fff 	.word	0xffff1fff
 801b93c:	fffffeff 	.word	0xfffffeff
 801b940:	40007000 	.word	0x40007000
 801b944:	fffffbff 	.word	0xfffffbff
 801b948:	00001388 	.word	0x00001388
 801b94c:	efffffff 	.word	0xefffffff
 801b950:	40010000 	.word	0x40010000
 801b954:	ffffdfff 	.word	0xffffdfff
 801b958:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b95c:	4b3a      	ldr	r3, [pc, #232]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b95e:	681a      	ldr	r2, [r3, #0]
 801b960:	2380      	movs	r3, #128	@ 0x80
 801b962:	049b      	lsls	r3, r3, #18
 801b964:	4013      	ands	r3, r2
 801b966:	d1dc      	bne.n	801b922 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b968:	4b37      	ldr	r3, [pc, #220]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b96a:	68db      	ldr	r3, [r3, #12]
 801b96c:	4a37      	ldr	r2, [pc, #220]	@ (801ba4c <HAL_RCC_OscConfig+0x7a0>)
 801b96e:	4013      	ands	r3, r2
 801b970:	0019      	movs	r1, r3
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b97a:	431a      	orrs	r2, r3
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b980:	431a      	orrs	r2, r3
 801b982:	4b31      	ldr	r3, [pc, #196]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b984:	430a      	orrs	r2, r1
 801b986:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b988:	4b2f      	ldr	r3, [pc, #188]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b98a:	681a      	ldr	r2, [r3, #0]
 801b98c:	4b2e      	ldr	r3, [pc, #184]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b98e:	2180      	movs	r1, #128	@ 0x80
 801b990:	0449      	lsls	r1, r1, #17
 801b992:	430a      	orrs	r2, r1
 801b994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b996:	f7f8 fffd 	bl	8014994 <HAL_GetTick>
 801b99a:	0003      	movs	r3, r0
 801b99c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b99e:	e008      	b.n	801b9b2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b9a0:	f7f8 fff8 	bl	8014994 <HAL_GetTick>
 801b9a4:	0002      	movs	r2, r0
 801b9a6:	697b      	ldr	r3, [r7, #20]
 801b9a8:	1ad3      	subs	r3, r2, r3
 801b9aa:	2b02      	cmp	r3, #2
 801b9ac:	d901      	bls.n	801b9b2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b9ae:	2303      	movs	r3, #3
 801b9b0:	e045      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b9b2:	4b25      	ldr	r3, [pc, #148]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b9b4:	681a      	ldr	r2, [r3, #0]
 801b9b6:	2380      	movs	r3, #128	@ 0x80
 801b9b8:	049b      	lsls	r3, r3, #18
 801b9ba:	4013      	ands	r3, r2
 801b9bc:	d0f0      	beq.n	801b9a0 <HAL_RCC_OscConfig+0x6f4>
 801b9be:	e03d      	b.n	801ba3c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b9c0:	4b21      	ldr	r3, [pc, #132]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b9c2:	681a      	ldr	r2, [r3, #0]
 801b9c4:	4b20      	ldr	r3, [pc, #128]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b9c6:	4922      	ldr	r1, [pc, #136]	@ (801ba50 <HAL_RCC_OscConfig+0x7a4>)
 801b9c8:	400a      	ands	r2, r1
 801b9ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b9cc:	f7f8 ffe2 	bl	8014994 <HAL_GetTick>
 801b9d0:	0003      	movs	r3, r0
 801b9d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b9d4:	e008      	b.n	801b9e8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b9d6:	f7f8 ffdd 	bl	8014994 <HAL_GetTick>
 801b9da:	0002      	movs	r2, r0
 801b9dc:	697b      	ldr	r3, [r7, #20]
 801b9de:	1ad3      	subs	r3, r2, r3
 801b9e0:	2b02      	cmp	r3, #2
 801b9e2:	d901      	bls.n	801b9e8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801b9e4:	2303      	movs	r3, #3
 801b9e6:	e02a      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b9e8:	4b17      	ldr	r3, [pc, #92]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801b9ea:	681a      	ldr	r2, [r3, #0]
 801b9ec:	2380      	movs	r3, #128	@ 0x80
 801b9ee:	049b      	lsls	r3, r3, #18
 801b9f0:	4013      	ands	r3, r2
 801b9f2:	d1f0      	bne.n	801b9d6 <HAL_RCC_OscConfig+0x72a>
 801b9f4:	e022      	b.n	801ba3c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b9fa:	2b01      	cmp	r3, #1
 801b9fc:	d101      	bne.n	801ba02 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801b9fe:	2301      	movs	r3, #1
 801ba00:	e01d      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801ba02:	4b11      	ldr	r3, [pc, #68]	@ (801ba48 <HAL_RCC_OscConfig+0x79c>)
 801ba04:	68db      	ldr	r3, [r3, #12]
 801ba06:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ba08:	69ba      	ldr	r2, [r7, #24]
 801ba0a:	2380      	movs	r3, #128	@ 0x80
 801ba0c:	025b      	lsls	r3, r3, #9
 801ba0e:	401a      	ands	r2, r3
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba14:	429a      	cmp	r2, r3
 801ba16:	d10f      	bne.n	801ba38 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ba18:	69ba      	ldr	r2, [r7, #24]
 801ba1a:	23f0      	movs	r3, #240	@ 0xf0
 801ba1c:	039b      	lsls	r3, r3, #14
 801ba1e:	401a      	ands	r2, r3
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ba24:	429a      	cmp	r2, r3
 801ba26:	d107      	bne.n	801ba38 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801ba28:	69ba      	ldr	r2, [r7, #24]
 801ba2a:	23c0      	movs	r3, #192	@ 0xc0
 801ba2c:	041b      	lsls	r3, r3, #16
 801ba2e:	401a      	ands	r2, r3
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d001      	beq.n	801ba3c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801ba38:	2301      	movs	r3, #1
 801ba3a:	e000      	b.n	801ba3e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801ba3c:	2300      	movs	r3, #0
}
 801ba3e:	0018      	movs	r0, r3
 801ba40:	46bd      	mov	sp, r7
 801ba42:	b00a      	add	sp, #40	@ 0x28
 801ba44:	bdb0      	pop	{r4, r5, r7, pc}
 801ba46:	46c0      	nop			@ (mov r8, r8)
 801ba48:	40021000 	.word	0x40021000
 801ba4c:	ff02ffff 	.word	0xff02ffff
 801ba50:	feffffff 	.word	0xfeffffff

0801ba54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ba54:	b5b0      	push	{r4, r5, r7, lr}
 801ba56:	b084      	sub	sp, #16
 801ba58:	af00      	add	r7, sp, #0
 801ba5a:	6078      	str	r0, [r7, #4]
 801ba5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d101      	bne.n	801ba68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ba64:	2301      	movs	r3, #1
 801ba66:	e128      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ba68:	4b96      	ldr	r3, [pc, #600]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	2201      	movs	r2, #1
 801ba6e:	4013      	ands	r3, r2
 801ba70:	683a      	ldr	r2, [r7, #0]
 801ba72:	429a      	cmp	r2, r3
 801ba74:	d91e      	bls.n	801bab4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ba76:	4b93      	ldr	r3, [pc, #588]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	2201      	movs	r2, #1
 801ba7c:	4393      	bics	r3, r2
 801ba7e:	0019      	movs	r1, r3
 801ba80:	4b90      	ldr	r3, [pc, #576]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801ba82:	683a      	ldr	r2, [r7, #0]
 801ba84:	430a      	orrs	r2, r1
 801ba86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ba88:	f7f8 ff84 	bl	8014994 <HAL_GetTick>
 801ba8c:	0003      	movs	r3, r0
 801ba8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ba90:	e009      	b.n	801baa6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ba92:	f7f8 ff7f 	bl	8014994 <HAL_GetTick>
 801ba96:	0002      	movs	r2, r0
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	1ad3      	subs	r3, r2, r3
 801ba9c:	4a8a      	ldr	r2, [pc, #552]	@ (801bcc8 <HAL_RCC_ClockConfig+0x274>)
 801ba9e:	4293      	cmp	r3, r2
 801baa0:	d901      	bls.n	801baa6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801baa2:	2303      	movs	r3, #3
 801baa4:	e109      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801baa6:	4b87      	ldr	r3, [pc, #540]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	2201      	movs	r2, #1
 801baac:	4013      	ands	r3, r2
 801baae:	683a      	ldr	r2, [r7, #0]
 801bab0:	429a      	cmp	r2, r3
 801bab2:	d1ee      	bne.n	801ba92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	2202      	movs	r2, #2
 801baba:	4013      	ands	r3, r2
 801babc:	d009      	beq.n	801bad2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801babe:	4b83      	ldr	r3, [pc, #524]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bac0:	68db      	ldr	r3, [r3, #12]
 801bac2:	22f0      	movs	r2, #240	@ 0xf0
 801bac4:	4393      	bics	r3, r2
 801bac6:	0019      	movs	r1, r3
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	689a      	ldr	r2, [r3, #8]
 801bacc:	4b7f      	ldr	r3, [pc, #508]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bace:	430a      	orrs	r2, r1
 801bad0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	2201      	movs	r2, #1
 801bad8:	4013      	ands	r3, r2
 801bada:	d100      	bne.n	801bade <HAL_RCC_ClockConfig+0x8a>
 801badc:	e089      	b.n	801bbf2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	685b      	ldr	r3, [r3, #4]
 801bae2:	2b02      	cmp	r3, #2
 801bae4:	d107      	bne.n	801baf6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bae6:	4b79      	ldr	r3, [pc, #484]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bae8:	681a      	ldr	r2, [r3, #0]
 801baea:	2380      	movs	r3, #128	@ 0x80
 801baec:	029b      	lsls	r3, r3, #10
 801baee:	4013      	ands	r3, r2
 801baf0:	d120      	bne.n	801bb34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801baf2:	2301      	movs	r3, #1
 801baf4:	e0e1      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	685b      	ldr	r3, [r3, #4]
 801bafa:	2b03      	cmp	r3, #3
 801bafc:	d107      	bne.n	801bb0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bafe:	4b73      	ldr	r3, [pc, #460]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bb00:	681a      	ldr	r2, [r3, #0]
 801bb02:	2380      	movs	r3, #128	@ 0x80
 801bb04:	049b      	lsls	r3, r3, #18
 801bb06:	4013      	ands	r3, r2
 801bb08:	d114      	bne.n	801bb34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bb0a:	2301      	movs	r3, #1
 801bb0c:	e0d5      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	685b      	ldr	r3, [r3, #4]
 801bb12:	2b01      	cmp	r3, #1
 801bb14:	d106      	bne.n	801bb24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bb16:	4b6d      	ldr	r3, [pc, #436]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	2204      	movs	r2, #4
 801bb1c:	4013      	ands	r3, r2
 801bb1e:	d109      	bne.n	801bb34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bb20:	2301      	movs	r3, #1
 801bb22:	e0ca      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801bb24:	4b69      	ldr	r3, [pc, #420]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bb26:	681a      	ldr	r2, [r3, #0]
 801bb28:	2380      	movs	r3, #128	@ 0x80
 801bb2a:	009b      	lsls	r3, r3, #2
 801bb2c:	4013      	ands	r3, r2
 801bb2e:	d101      	bne.n	801bb34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bb30:	2301      	movs	r3, #1
 801bb32:	e0c2      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bb34:	4b65      	ldr	r3, [pc, #404]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bb36:	68db      	ldr	r3, [r3, #12]
 801bb38:	2203      	movs	r2, #3
 801bb3a:	4393      	bics	r3, r2
 801bb3c:	0019      	movs	r1, r3
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	685a      	ldr	r2, [r3, #4]
 801bb42:	4b62      	ldr	r3, [pc, #392]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bb44:	430a      	orrs	r2, r1
 801bb46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801bb48:	f7f8 ff24 	bl	8014994 <HAL_GetTick>
 801bb4c:	0003      	movs	r3, r0
 801bb4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	685b      	ldr	r3, [r3, #4]
 801bb54:	2b02      	cmp	r3, #2
 801bb56:	d111      	bne.n	801bb7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bb58:	e009      	b.n	801bb6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb5a:	f7f8 ff1b 	bl	8014994 <HAL_GetTick>
 801bb5e:	0002      	movs	r2, r0
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	1ad3      	subs	r3, r2, r3
 801bb64:	4a58      	ldr	r2, [pc, #352]	@ (801bcc8 <HAL_RCC_ClockConfig+0x274>)
 801bb66:	4293      	cmp	r3, r2
 801bb68:	d901      	bls.n	801bb6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801bb6a:	2303      	movs	r3, #3
 801bb6c:	e0a5      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bb6e:	4b57      	ldr	r3, [pc, #348]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bb70:	68db      	ldr	r3, [r3, #12]
 801bb72:	220c      	movs	r2, #12
 801bb74:	4013      	ands	r3, r2
 801bb76:	2b08      	cmp	r3, #8
 801bb78:	d1ef      	bne.n	801bb5a <HAL_RCC_ClockConfig+0x106>
 801bb7a:	e03a      	b.n	801bbf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	685b      	ldr	r3, [r3, #4]
 801bb80:	2b03      	cmp	r3, #3
 801bb82:	d111      	bne.n	801bba8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb84:	e009      	b.n	801bb9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb86:	f7f8 ff05 	bl	8014994 <HAL_GetTick>
 801bb8a:	0002      	movs	r2, r0
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	1ad3      	subs	r3, r2, r3
 801bb90:	4a4d      	ldr	r2, [pc, #308]	@ (801bcc8 <HAL_RCC_ClockConfig+0x274>)
 801bb92:	4293      	cmp	r3, r2
 801bb94:	d901      	bls.n	801bb9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801bb96:	2303      	movs	r3, #3
 801bb98:	e08f      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bb9a:	4b4c      	ldr	r3, [pc, #304]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bb9c:	68db      	ldr	r3, [r3, #12]
 801bb9e:	220c      	movs	r2, #12
 801bba0:	4013      	ands	r3, r2
 801bba2:	2b0c      	cmp	r3, #12
 801bba4:	d1ef      	bne.n	801bb86 <HAL_RCC_ClockConfig+0x132>
 801bba6:	e024      	b.n	801bbf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	685b      	ldr	r3, [r3, #4]
 801bbac:	2b01      	cmp	r3, #1
 801bbae:	d11b      	bne.n	801bbe8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bbb0:	e009      	b.n	801bbc6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bbb2:	f7f8 feef 	bl	8014994 <HAL_GetTick>
 801bbb6:	0002      	movs	r2, r0
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	1ad3      	subs	r3, r2, r3
 801bbbc:	4a42      	ldr	r2, [pc, #264]	@ (801bcc8 <HAL_RCC_ClockConfig+0x274>)
 801bbbe:	4293      	cmp	r3, r2
 801bbc0:	d901      	bls.n	801bbc6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801bbc2:	2303      	movs	r3, #3
 801bbc4:	e079      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bbc6:	4b41      	ldr	r3, [pc, #260]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bbc8:	68db      	ldr	r3, [r3, #12]
 801bbca:	220c      	movs	r2, #12
 801bbcc:	4013      	ands	r3, r2
 801bbce:	2b04      	cmp	r3, #4
 801bbd0:	d1ef      	bne.n	801bbb2 <HAL_RCC_ClockConfig+0x15e>
 801bbd2:	e00e      	b.n	801bbf2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bbd4:	f7f8 fede 	bl	8014994 <HAL_GetTick>
 801bbd8:	0002      	movs	r2, r0
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	1ad3      	subs	r3, r2, r3
 801bbde:	4a3a      	ldr	r2, [pc, #232]	@ (801bcc8 <HAL_RCC_ClockConfig+0x274>)
 801bbe0:	4293      	cmp	r3, r2
 801bbe2:	d901      	bls.n	801bbe8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801bbe4:	2303      	movs	r3, #3
 801bbe6:	e068      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bbe8:	4b38      	ldr	r3, [pc, #224]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bbea:	68db      	ldr	r3, [r3, #12]
 801bbec:	220c      	movs	r2, #12
 801bbee:	4013      	ands	r3, r2
 801bbf0:	d1f0      	bne.n	801bbd4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bbf2:	4b34      	ldr	r3, [pc, #208]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	2201      	movs	r2, #1
 801bbf8:	4013      	ands	r3, r2
 801bbfa:	683a      	ldr	r2, [r7, #0]
 801bbfc:	429a      	cmp	r2, r3
 801bbfe:	d21e      	bcs.n	801bc3e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bc00:	4b30      	ldr	r3, [pc, #192]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	2201      	movs	r2, #1
 801bc06:	4393      	bics	r3, r2
 801bc08:	0019      	movs	r1, r3
 801bc0a:	4b2e      	ldr	r3, [pc, #184]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801bc0c:	683a      	ldr	r2, [r7, #0]
 801bc0e:	430a      	orrs	r2, r1
 801bc10:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bc12:	f7f8 febf 	bl	8014994 <HAL_GetTick>
 801bc16:	0003      	movs	r3, r0
 801bc18:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bc1a:	e009      	b.n	801bc30 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bc1c:	f7f8 feba 	bl	8014994 <HAL_GetTick>
 801bc20:	0002      	movs	r2, r0
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	1ad3      	subs	r3, r2, r3
 801bc26:	4a28      	ldr	r2, [pc, #160]	@ (801bcc8 <HAL_RCC_ClockConfig+0x274>)
 801bc28:	4293      	cmp	r3, r2
 801bc2a:	d901      	bls.n	801bc30 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bc2c:	2303      	movs	r3, #3
 801bc2e:	e044      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bc30:	4b24      	ldr	r3, [pc, #144]	@ (801bcc4 <HAL_RCC_ClockConfig+0x270>)
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	2201      	movs	r2, #1
 801bc36:	4013      	ands	r3, r2
 801bc38:	683a      	ldr	r2, [r7, #0]
 801bc3a:	429a      	cmp	r2, r3
 801bc3c:	d1ee      	bne.n	801bc1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	2204      	movs	r2, #4
 801bc44:	4013      	ands	r3, r2
 801bc46:	d009      	beq.n	801bc5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bc48:	4b20      	ldr	r3, [pc, #128]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bc4a:	68db      	ldr	r3, [r3, #12]
 801bc4c:	4a20      	ldr	r2, [pc, #128]	@ (801bcd0 <HAL_RCC_ClockConfig+0x27c>)
 801bc4e:	4013      	ands	r3, r2
 801bc50:	0019      	movs	r1, r3
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	68da      	ldr	r2, [r3, #12]
 801bc56:	4b1d      	ldr	r3, [pc, #116]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bc58:	430a      	orrs	r2, r1
 801bc5a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	2208      	movs	r2, #8
 801bc62:	4013      	ands	r3, r2
 801bc64:	d00a      	beq.n	801bc7c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bc66:	4b19      	ldr	r3, [pc, #100]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bc68:	68db      	ldr	r3, [r3, #12]
 801bc6a:	4a1a      	ldr	r2, [pc, #104]	@ (801bcd4 <HAL_RCC_ClockConfig+0x280>)
 801bc6c:	4013      	ands	r3, r2
 801bc6e:	0019      	movs	r1, r3
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	691b      	ldr	r3, [r3, #16]
 801bc74:	00da      	lsls	r2, r3, #3
 801bc76:	4b15      	ldr	r3, [pc, #84]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bc78:	430a      	orrs	r2, r1
 801bc7a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bc7c:	f000 f832 	bl	801bce4 <HAL_RCC_GetSysClockFreq>
 801bc80:	0001      	movs	r1, r0
 801bc82:	4b12      	ldr	r3, [pc, #72]	@ (801bccc <HAL_RCC_ClockConfig+0x278>)
 801bc84:	68db      	ldr	r3, [r3, #12]
 801bc86:	091b      	lsrs	r3, r3, #4
 801bc88:	220f      	movs	r2, #15
 801bc8a:	4013      	ands	r3, r2
 801bc8c:	4a12      	ldr	r2, [pc, #72]	@ (801bcd8 <HAL_RCC_ClockConfig+0x284>)
 801bc8e:	5cd3      	ldrb	r3, [r2, r3]
 801bc90:	000a      	movs	r2, r1
 801bc92:	40da      	lsrs	r2, r3
 801bc94:	4b11      	ldr	r3, [pc, #68]	@ (801bcdc <HAL_RCC_ClockConfig+0x288>)
 801bc96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bc98:	4b11      	ldr	r3, [pc, #68]	@ (801bce0 <HAL_RCC_ClockConfig+0x28c>)
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	250b      	movs	r5, #11
 801bc9e:	197c      	adds	r4, r7, r5
 801bca0:	0018      	movs	r0, r3
 801bca2:	f7f8 fe31 	bl	8014908 <HAL_InitTick>
 801bca6:	0003      	movs	r3, r0
 801bca8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bcaa:	197b      	adds	r3, r7, r5
 801bcac:	781b      	ldrb	r3, [r3, #0]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d002      	beq.n	801bcb8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bcb2:	197b      	adds	r3, r7, r5
 801bcb4:	781b      	ldrb	r3, [r3, #0]
 801bcb6:	e000      	b.n	801bcba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bcb8:	2300      	movs	r3, #0
}
 801bcba:	0018      	movs	r0, r3
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	b004      	add	sp, #16
 801bcc0:	bdb0      	pop	{r4, r5, r7, pc}
 801bcc2:	46c0      	nop			@ (mov r8, r8)
 801bcc4:	40022000 	.word	0x40022000
 801bcc8:	00001388 	.word	0x00001388
 801bccc:	40021000 	.word	0x40021000
 801bcd0:	fffff8ff 	.word	0xfffff8ff
 801bcd4:	ffffc7ff 	.word	0xffffc7ff
 801bcd8:	0802e83c 	.word	0x0802e83c
 801bcdc:	200000ec 	.word	0x200000ec
 801bce0:	200000fc 	.word	0x200000fc

0801bce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bce4:	b5b0      	push	{r4, r5, r7, lr}
 801bce6:	b08e      	sub	sp, #56	@ 0x38
 801bce8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bcea:	4b4c      	ldr	r3, [pc, #304]	@ (801be1c <HAL_RCC_GetSysClockFreq+0x138>)
 801bcec:	68db      	ldr	r3, [r3, #12]
 801bcee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bcf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bcf2:	230c      	movs	r3, #12
 801bcf4:	4013      	ands	r3, r2
 801bcf6:	2b0c      	cmp	r3, #12
 801bcf8:	d014      	beq.n	801bd24 <HAL_RCC_GetSysClockFreq+0x40>
 801bcfa:	d900      	bls.n	801bcfe <HAL_RCC_GetSysClockFreq+0x1a>
 801bcfc:	e07b      	b.n	801bdf6 <HAL_RCC_GetSysClockFreq+0x112>
 801bcfe:	2b04      	cmp	r3, #4
 801bd00:	d002      	beq.n	801bd08 <HAL_RCC_GetSysClockFreq+0x24>
 801bd02:	2b08      	cmp	r3, #8
 801bd04:	d00b      	beq.n	801bd1e <HAL_RCC_GetSysClockFreq+0x3a>
 801bd06:	e076      	b.n	801bdf6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bd08:	4b44      	ldr	r3, [pc, #272]	@ (801be1c <HAL_RCC_GetSysClockFreq+0x138>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	2210      	movs	r2, #16
 801bd0e:	4013      	ands	r3, r2
 801bd10:	d002      	beq.n	801bd18 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bd12:	4b43      	ldr	r3, [pc, #268]	@ (801be20 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bd14:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bd16:	e07c      	b.n	801be12 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bd18:	4b42      	ldr	r3, [pc, #264]	@ (801be24 <HAL_RCC_GetSysClockFreq+0x140>)
 801bd1a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd1c:	e079      	b.n	801be12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bd1e:	4b42      	ldr	r3, [pc, #264]	@ (801be28 <HAL_RCC_GetSysClockFreq+0x144>)
 801bd20:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd22:	e076      	b.n	801be12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd26:	0c9a      	lsrs	r2, r3, #18
 801bd28:	230f      	movs	r3, #15
 801bd2a:	401a      	ands	r2, r3
 801bd2c:	4b3f      	ldr	r3, [pc, #252]	@ (801be2c <HAL_RCC_GetSysClockFreq+0x148>)
 801bd2e:	5c9b      	ldrb	r3, [r3, r2]
 801bd30:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd34:	0d9a      	lsrs	r2, r3, #22
 801bd36:	2303      	movs	r3, #3
 801bd38:	4013      	ands	r3, r2
 801bd3a:	3301      	adds	r3, #1
 801bd3c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bd3e:	4b37      	ldr	r3, [pc, #220]	@ (801be1c <HAL_RCC_GetSysClockFreq+0x138>)
 801bd40:	68da      	ldr	r2, [r3, #12]
 801bd42:	2380      	movs	r3, #128	@ 0x80
 801bd44:	025b      	lsls	r3, r3, #9
 801bd46:	4013      	ands	r3, r2
 801bd48:	d01a      	beq.n	801bd80 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd4c:	61bb      	str	r3, [r7, #24]
 801bd4e:	2300      	movs	r3, #0
 801bd50:	61fb      	str	r3, [r7, #28]
 801bd52:	4a35      	ldr	r2, [pc, #212]	@ (801be28 <HAL_RCC_GetSysClockFreq+0x144>)
 801bd54:	2300      	movs	r3, #0
 801bd56:	69b8      	ldr	r0, [r7, #24]
 801bd58:	69f9      	ldr	r1, [r7, #28]
 801bd5a:	f7e4 fc31 	bl	80005c0 <__aeabi_lmul>
 801bd5e:	0002      	movs	r2, r0
 801bd60:	000b      	movs	r3, r1
 801bd62:	0010      	movs	r0, r2
 801bd64:	0019      	movs	r1, r3
 801bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd68:	613b      	str	r3, [r7, #16]
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	617b      	str	r3, [r7, #20]
 801bd6e:	693a      	ldr	r2, [r7, #16]
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	f7e4 fc05 	bl	8000580 <__aeabi_uldivmod>
 801bd76:	0002      	movs	r2, r0
 801bd78:	000b      	movs	r3, r1
 801bd7a:	0013      	movs	r3, r2
 801bd7c:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd7e:	e037      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bd80:	4b26      	ldr	r3, [pc, #152]	@ (801be1c <HAL_RCC_GetSysClockFreq+0x138>)
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	2210      	movs	r2, #16
 801bd86:	4013      	ands	r3, r2
 801bd88:	d01a      	beq.n	801bdc0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801bd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd8c:	60bb      	str	r3, [r7, #8]
 801bd8e:	2300      	movs	r3, #0
 801bd90:	60fb      	str	r3, [r7, #12]
 801bd92:	4a23      	ldr	r2, [pc, #140]	@ (801be20 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bd94:	2300      	movs	r3, #0
 801bd96:	68b8      	ldr	r0, [r7, #8]
 801bd98:	68f9      	ldr	r1, [r7, #12]
 801bd9a:	f7e4 fc11 	bl	80005c0 <__aeabi_lmul>
 801bd9e:	0002      	movs	r2, r0
 801bda0:	000b      	movs	r3, r1
 801bda2:	0010      	movs	r0, r2
 801bda4:	0019      	movs	r1, r3
 801bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bda8:	603b      	str	r3, [r7, #0]
 801bdaa:	2300      	movs	r3, #0
 801bdac:	607b      	str	r3, [r7, #4]
 801bdae:	683a      	ldr	r2, [r7, #0]
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	f7e4 fbe5 	bl	8000580 <__aeabi_uldivmod>
 801bdb6:	0002      	movs	r2, r0
 801bdb8:	000b      	movs	r3, r1
 801bdba:	0013      	movs	r3, r2
 801bdbc:	637b      	str	r3, [r7, #52]	@ 0x34
 801bdbe:	e017      	b.n	801bdf0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdc2:	0018      	movs	r0, r3
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	0019      	movs	r1, r3
 801bdc8:	4a16      	ldr	r2, [pc, #88]	@ (801be24 <HAL_RCC_GetSysClockFreq+0x140>)
 801bdca:	2300      	movs	r3, #0
 801bdcc:	f7e4 fbf8 	bl	80005c0 <__aeabi_lmul>
 801bdd0:	0002      	movs	r2, r0
 801bdd2:	000b      	movs	r3, r1
 801bdd4:	0010      	movs	r0, r2
 801bdd6:	0019      	movs	r1, r3
 801bdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdda:	001c      	movs	r4, r3
 801bddc:	2300      	movs	r3, #0
 801bdde:	001d      	movs	r5, r3
 801bde0:	0022      	movs	r2, r4
 801bde2:	002b      	movs	r3, r5
 801bde4:	f7e4 fbcc 	bl	8000580 <__aeabi_uldivmod>
 801bde8:	0002      	movs	r2, r0
 801bdea:	000b      	movs	r3, r1
 801bdec:	0013      	movs	r3, r2
 801bdee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801bdf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bdf2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bdf4:	e00d      	b.n	801be12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801bdf6:	4b09      	ldr	r3, [pc, #36]	@ (801be1c <HAL_RCC_GetSysClockFreq+0x138>)
 801bdf8:	685b      	ldr	r3, [r3, #4]
 801bdfa:	0b5b      	lsrs	r3, r3, #13
 801bdfc:	2207      	movs	r2, #7
 801bdfe:	4013      	ands	r3, r2
 801be00:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801be02:	6a3b      	ldr	r3, [r7, #32]
 801be04:	3301      	adds	r3, #1
 801be06:	2280      	movs	r2, #128	@ 0x80
 801be08:	0212      	lsls	r2, r2, #8
 801be0a:	409a      	lsls	r2, r3
 801be0c:	0013      	movs	r3, r2
 801be0e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801be10:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801be12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801be14:	0018      	movs	r0, r3
 801be16:	46bd      	mov	sp, r7
 801be18:	b00e      	add	sp, #56	@ 0x38
 801be1a:	bdb0      	pop	{r4, r5, r7, pc}
 801be1c:	40021000 	.word	0x40021000
 801be20:	003d0900 	.word	0x003d0900
 801be24:	00f42400 	.word	0x00f42400
 801be28:	007a1200 	.word	0x007a1200
 801be2c:	0802e854 	.word	0x0802e854

0801be30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801be30:	b580      	push	{r7, lr}
 801be32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801be34:	4b02      	ldr	r3, [pc, #8]	@ (801be40 <HAL_RCC_GetHCLKFreq+0x10>)
 801be36:	681b      	ldr	r3, [r3, #0]
}
 801be38:	0018      	movs	r0, r3
 801be3a:	46bd      	mov	sp, r7
 801be3c:	bd80      	pop	{r7, pc}
 801be3e:	46c0      	nop			@ (mov r8, r8)
 801be40:	200000ec 	.word	0x200000ec

0801be44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801be44:	b580      	push	{r7, lr}
 801be46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801be48:	f7ff fff2 	bl	801be30 <HAL_RCC_GetHCLKFreq>
 801be4c:	0001      	movs	r1, r0
 801be4e:	4b06      	ldr	r3, [pc, #24]	@ (801be68 <HAL_RCC_GetPCLK1Freq+0x24>)
 801be50:	68db      	ldr	r3, [r3, #12]
 801be52:	0a1b      	lsrs	r3, r3, #8
 801be54:	2207      	movs	r2, #7
 801be56:	4013      	ands	r3, r2
 801be58:	4a04      	ldr	r2, [pc, #16]	@ (801be6c <HAL_RCC_GetPCLK1Freq+0x28>)
 801be5a:	5cd3      	ldrb	r3, [r2, r3]
 801be5c:	40d9      	lsrs	r1, r3
 801be5e:	000b      	movs	r3, r1
}
 801be60:	0018      	movs	r0, r3
 801be62:	46bd      	mov	sp, r7
 801be64:	bd80      	pop	{r7, pc}
 801be66:	46c0      	nop			@ (mov r8, r8)
 801be68:	40021000 	.word	0x40021000
 801be6c:	0802e84c 	.word	0x0802e84c

0801be70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801be70:	b580      	push	{r7, lr}
 801be72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801be74:	f7ff ffdc 	bl	801be30 <HAL_RCC_GetHCLKFreq>
 801be78:	0001      	movs	r1, r0
 801be7a:	4b06      	ldr	r3, [pc, #24]	@ (801be94 <HAL_RCC_GetPCLK2Freq+0x24>)
 801be7c:	68db      	ldr	r3, [r3, #12]
 801be7e:	0adb      	lsrs	r3, r3, #11
 801be80:	2207      	movs	r2, #7
 801be82:	4013      	ands	r3, r2
 801be84:	4a04      	ldr	r2, [pc, #16]	@ (801be98 <HAL_RCC_GetPCLK2Freq+0x28>)
 801be86:	5cd3      	ldrb	r3, [r2, r3]
 801be88:	40d9      	lsrs	r1, r3
 801be8a:	000b      	movs	r3, r1
}
 801be8c:	0018      	movs	r0, r3
 801be8e:	46bd      	mov	sp, r7
 801be90:	bd80      	pop	{r7, pc}
 801be92:	46c0      	nop			@ (mov r8, r8)
 801be94:	40021000 	.word	0x40021000
 801be98:	0802e84c 	.word	0x0802e84c

0801be9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b086      	sub	sp, #24
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801bea4:	2017      	movs	r0, #23
 801bea6:	183b      	adds	r3, r7, r0
 801bea8:	2200      	movs	r2, #0
 801beaa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	2220      	movs	r2, #32
 801beb2:	4013      	ands	r3, r2
 801beb4:	d100      	bne.n	801beb8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801beb6:	e0c7      	b.n	801c048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801beb8:	4b9b      	ldr	r3, [pc, #620]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bebc:	2380      	movs	r3, #128	@ 0x80
 801bebe:	055b      	lsls	r3, r3, #21
 801bec0:	4013      	ands	r3, r2
 801bec2:	d109      	bne.n	801bed8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bec4:	4b98      	ldr	r3, [pc, #608]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bec8:	4b97      	ldr	r3, [pc, #604]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beca:	2180      	movs	r1, #128	@ 0x80
 801becc:	0549      	lsls	r1, r1, #21
 801bece:	430a      	orrs	r2, r1
 801bed0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801bed2:	183b      	adds	r3, r7, r0
 801bed4:	2201      	movs	r2, #1
 801bed6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bed8:	4b94      	ldr	r3, [pc, #592]	@ (801c12c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801beda:	681a      	ldr	r2, [r3, #0]
 801bedc:	2380      	movs	r3, #128	@ 0x80
 801bede:	005b      	lsls	r3, r3, #1
 801bee0:	4013      	ands	r3, r2
 801bee2:	d11a      	bne.n	801bf1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bee4:	4b91      	ldr	r3, [pc, #580]	@ (801c12c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bee6:	681a      	ldr	r2, [r3, #0]
 801bee8:	4b90      	ldr	r3, [pc, #576]	@ (801c12c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801beea:	2180      	movs	r1, #128	@ 0x80
 801beec:	0049      	lsls	r1, r1, #1
 801beee:	430a      	orrs	r2, r1
 801bef0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bef2:	f7f8 fd4f 	bl	8014994 <HAL_GetTick>
 801bef6:	0003      	movs	r3, r0
 801bef8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801befa:	e008      	b.n	801bf0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801befc:	f7f8 fd4a 	bl	8014994 <HAL_GetTick>
 801bf00:	0002      	movs	r2, r0
 801bf02:	693b      	ldr	r3, [r7, #16]
 801bf04:	1ad3      	subs	r3, r2, r3
 801bf06:	2b64      	cmp	r3, #100	@ 0x64
 801bf08:	d901      	bls.n	801bf0e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801bf0a:	2303      	movs	r3, #3
 801bf0c:	e107      	b.n	801c11e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bf0e:	4b87      	ldr	r3, [pc, #540]	@ (801c12c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bf10:	681a      	ldr	r2, [r3, #0]
 801bf12:	2380      	movs	r3, #128	@ 0x80
 801bf14:	005b      	lsls	r3, r3, #1
 801bf16:	4013      	ands	r3, r2
 801bf18:	d0f0      	beq.n	801befc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801bf1a:	4b83      	ldr	r3, [pc, #524]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf1c:	681a      	ldr	r2, [r3, #0]
 801bf1e:	23c0      	movs	r3, #192	@ 0xc0
 801bf20:	039b      	lsls	r3, r3, #14
 801bf22:	4013      	ands	r3, r2
 801bf24:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	685a      	ldr	r2, [r3, #4]
 801bf2a:	23c0      	movs	r3, #192	@ 0xc0
 801bf2c:	039b      	lsls	r3, r3, #14
 801bf2e:	4013      	ands	r3, r2
 801bf30:	68fa      	ldr	r2, [r7, #12]
 801bf32:	429a      	cmp	r2, r3
 801bf34:	d013      	beq.n	801bf5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	685a      	ldr	r2, [r3, #4]
 801bf3a:	23c0      	movs	r3, #192	@ 0xc0
 801bf3c:	029b      	lsls	r3, r3, #10
 801bf3e:	401a      	ands	r2, r3
 801bf40:	23c0      	movs	r3, #192	@ 0xc0
 801bf42:	029b      	lsls	r3, r3, #10
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d10a      	bne.n	801bf5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801bf48:	4b77      	ldr	r3, [pc, #476]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf4a:	681a      	ldr	r2, [r3, #0]
 801bf4c:	2380      	movs	r3, #128	@ 0x80
 801bf4e:	029b      	lsls	r3, r3, #10
 801bf50:	401a      	ands	r2, r3
 801bf52:	2380      	movs	r3, #128	@ 0x80
 801bf54:	029b      	lsls	r3, r3, #10
 801bf56:	429a      	cmp	r2, r3
 801bf58:	d101      	bne.n	801bf5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801bf5a:	2301      	movs	r3, #1
 801bf5c:	e0df      	b.n	801c11e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801bf5e:	4b72      	ldr	r3, [pc, #456]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf62:	23c0      	movs	r3, #192	@ 0xc0
 801bf64:	029b      	lsls	r3, r3, #10
 801bf66:	4013      	ands	r3, r2
 801bf68:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d03b      	beq.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	685a      	ldr	r2, [r3, #4]
 801bf74:	23c0      	movs	r3, #192	@ 0xc0
 801bf76:	029b      	lsls	r3, r3, #10
 801bf78:	4013      	ands	r3, r2
 801bf7a:	68fa      	ldr	r2, [r7, #12]
 801bf7c:	429a      	cmp	r2, r3
 801bf7e:	d033      	beq.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	2220      	movs	r2, #32
 801bf86:	4013      	ands	r3, r2
 801bf88:	d02e      	beq.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801bf8a:	4b67      	ldr	r3, [pc, #412]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf8e:	4a68      	ldr	r2, [pc, #416]	@ (801c130 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bf90:	4013      	ands	r3, r2
 801bf92:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801bf94:	4b64      	ldr	r3, [pc, #400]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf98:	4b63      	ldr	r3, [pc, #396]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf9a:	2180      	movs	r1, #128	@ 0x80
 801bf9c:	0309      	lsls	r1, r1, #12
 801bf9e:	430a      	orrs	r2, r1
 801bfa0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801bfa2:	4b61      	ldr	r3, [pc, #388]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bfa6:	4b60      	ldr	r3, [pc, #384]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfa8:	4962      	ldr	r1, [pc, #392]	@ (801c134 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801bfaa:	400a      	ands	r2, r1
 801bfac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801bfae:	4b5e      	ldr	r3, [pc, #376]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfb0:	68fa      	ldr	r2, [r7, #12]
 801bfb2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801bfb4:	68fa      	ldr	r2, [r7, #12]
 801bfb6:	2380      	movs	r3, #128	@ 0x80
 801bfb8:	005b      	lsls	r3, r3, #1
 801bfba:	4013      	ands	r3, r2
 801bfbc:	d014      	beq.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bfbe:	f7f8 fce9 	bl	8014994 <HAL_GetTick>
 801bfc2:	0003      	movs	r3, r0
 801bfc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bfc6:	e009      	b.n	801bfdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bfc8:	f7f8 fce4 	bl	8014994 <HAL_GetTick>
 801bfcc:	0002      	movs	r2, r0
 801bfce:	693b      	ldr	r3, [r7, #16]
 801bfd0:	1ad3      	subs	r3, r2, r3
 801bfd2:	4a59      	ldr	r2, [pc, #356]	@ (801c138 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	d901      	bls.n	801bfdc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801bfd8:	2303      	movs	r3, #3
 801bfda:	e0a0      	b.n	801c11e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bfdc:	4b52      	ldr	r3, [pc, #328]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bfe0:	2380      	movs	r3, #128	@ 0x80
 801bfe2:	009b      	lsls	r3, r3, #2
 801bfe4:	4013      	ands	r3, r2
 801bfe6:	d0ef      	beq.n	801bfc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	2220      	movs	r2, #32
 801bfee:	4013      	ands	r3, r2
 801bff0:	d01f      	beq.n	801c032 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	685a      	ldr	r2, [r3, #4]
 801bff6:	23c0      	movs	r3, #192	@ 0xc0
 801bff8:	029b      	lsls	r3, r3, #10
 801bffa:	401a      	ands	r2, r3
 801bffc:	23c0      	movs	r3, #192	@ 0xc0
 801bffe:	029b      	lsls	r3, r3, #10
 801c000:	429a      	cmp	r2, r3
 801c002:	d10c      	bne.n	801c01e <HAL_RCCEx_PeriphCLKConfig+0x182>
 801c004:	4b48      	ldr	r3, [pc, #288]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	4a4c      	ldr	r2, [pc, #304]	@ (801c13c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801c00a:	4013      	ands	r3, r2
 801c00c:	0019      	movs	r1, r3
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	685a      	ldr	r2, [r3, #4]
 801c012:	23c0      	movs	r3, #192	@ 0xc0
 801c014:	039b      	lsls	r3, r3, #14
 801c016:	401a      	ands	r2, r3
 801c018:	4b43      	ldr	r3, [pc, #268]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c01a:	430a      	orrs	r2, r1
 801c01c:	601a      	str	r2, [r3, #0]
 801c01e:	4b42      	ldr	r3, [pc, #264]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c020:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	685a      	ldr	r2, [r3, #4]
 801c026:	23c0      	movs	r3, #192	@ 0xc0
 801c028:	029b      	lsls	r3, r3, #10
 801c02a:	401a      	ands	r2, r3
 801c02c:	4b3e      	ldr	r3, [pc, #248]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c02e:	430a      	orrs	r2, r1
 801c030:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801c032:	2317      	movs	r3, #23
 801c034:	18fb      	adds	r3, r7, r3
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	2b01      	cmp	r3, #1
 801c03a:	d105      	bne.n	801c048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c03c:	4b3a      	ldr	r3, [pc, #232]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c03e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c040:	4b39      	ldr	r3, [pc, #228]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c042:	493f      	ldr	r1, [pc, #252]	@ (801c140 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801c044:	400a      	ands	r2, r1
 801c046:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	2201      	movs	r2, #1
 801c04e:	4013      	ands	r3, r2
 801c050:	d009      	beq.n	801c066 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c052:	4b35      	ldr	r3, [pc, #212]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c056:	2203      	movs	r2, #3
 801c058:	4393      	bics	r3, r2
 801c05a:	0019      	movs	r1, r3
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	689a      	ldr	r2, [r3, #8]
 801c060:	4b31      	ldr	r3, [pc, #196]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c062:	430a      	orrs	r2, r1
 801c064:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	2202      	movs	r2, #2
 801c06c:	4013      	ands	r3, r2
 801c06e:	d009      	beq.n	801c084 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c070:	4b2d      	ldr	r3, [pc, #180]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c074:	220c      	movs	r2, #12
 801c076:	4393      	bics	r3, r2
 801c078:	0019      	movs	r1, r3
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	68da      	ldr	r2, [r3, #12]
 801c07e:	4b2a      	ldr	r3, [pc, #168]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c080:	430a      	orrs	r2, r1
 801c082:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	2204      	movs	r2, #4
 801c08a:	4013      	ands	r3, r2
 801c08c:	d009      	beq.n	801c0a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c08e:	4b26      	ldr	r3, [pc, #152]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c092:	4a2c      	ldr	r2, [pc, #176]	@ (801c144 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801c094:	4013      	ands	r3, r2
 801c096:	0019      	movs	r1, r3
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	691a      	ldr	r2, [r3, #16]
 801c09c:	4b22      	ldr	r3, [pc, #136]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c09e:	430a      	orrs	r2, r1
 801c0a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	2208      	movs	r2, #8
 801c0a8:	4013      	ands	r3, r2
 801c0aa:	d009      	beq.n	801c0c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c0ac:	4b1e      	ldr	r3, [pc, #120]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0b0:	4a25      	ldr	r2, [pc, #148]	@ (801c148 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c0b2:	4013      	ands	r3, r2
 801c0b4:	0019      	movs	r1, r3
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	695a      	ldr	r2, [r3, #20]
 801c0ba:	4b1b      	ldr	r3, [pc, #108]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0bc:	430a      	orrs	r2, r1
 801c0be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	681a      	ldr	r2, [r3, #0]
 801c0c4:	2380      	movs	r3, #128	@ 0x80
 801c0c6:	005b      	lsls	r3, r3, #1
 801c0c8:	4013      	ands	r3, r2
 801c0ca:	d009      	beq.n	801c0e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c0cc:	4b16      	ldr	r3, [pc, #88]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0d0:	4a17      	ldr	r2, [pc, #92]	@ (801c130 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c0d2:	4013      	ands	r3, r2
 801c0d4:	0019      	movs	r1, r3
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	699a      	ldr	r2, [r3, #24]
 801c0da:	4b13      	ldr	r3, [pc, #76]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0dc:	430a      	orrs	r2, r1
 801c0de:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	2240      	movs	r2, #64	@ 0x40
 801c0e6:	4013      	ands	r3, r2
 801c0e8:	d009      	beq.n	801c0fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c0ea:	4b0f      	ldr	r3, [pc, #60]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0ee:	4a17      	ldr	r2, [pc, #92]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c0f0:	4013      	ands	r3, r2
 801c0f2:	0019      	movs	r1, r3
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	6a1a      	ldr	r2, [r3, #32]
 801c0f8:	4b0b      	ldr	r3, [pc, #44]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0fa:	430a      	orrs	r2, r1
 801c0fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	2280      	movs	r2, #128	@ 0x80
 801c104:	4013      	ands	r3, r2
 801c106:	d009      	beq.n	801c11c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c108:	4b07      	ldr	r3, [pc, #28]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c10a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c10c:	4a10      	ldr	r2, [pc, #64]	@ (801c150 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c10e:	4013      	ands	r3, r2
 801c110:	0019      	movs	r1, r3
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	69da      	ldr	r2, [r3, #28]
 801c116:	4b04      	ldr	r3, [pc, #16]	@ (801c128 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c118:	430a      	orrs	r2, r1
 801c11a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c11c:	2300      	movs	r3, #0
}
 801c11e:	0018      	movs	r0, r3
 801c120:	46bd      	mov	sp, r7
 801c122:	b006      	add	sp, #24
 801c124:	bd80      	pop	{r7, pc}
 801c126:	46c0      	nop			@ (mov r8, r8)
 801c128:	40021000 	.word	0x40021000
 801c12c:	40007000 	.word	0x40007000
 801c130:	fffcffff 	.word	0xfffcffff
 801c134:	fff7ffff 	.word	0xfff7ffff
 801c138:	00001388 	.word	0x00001388
 801c13c:	ffcfffff 	.word	0xffcfffff
 801c140:	efffffff 	.word	0xefffffff
 801c144:	fffff3ff 	.word	0xfffff3ff
 801c148:	ffffcfff 	.word	0xffffcfff
 801c14c:	fbffffff 	.word	0xfbffffff
 801c150:	fff3ffff 	.word	0xfff3ffff

0801c154 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c154:	b5b0      	push	{r4, r5, r7, lr}
 801c156:	b084      	sub	sp, #16
 801c158:	af00      	add	r7, sp, #0
 801c15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c15c:	230f      	movs	r3, #15
 801c15e:	18fb      	adds	r3, r7, r3
 801c160:	2201      	movs	r2, #1
 801c162:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d101      	bne.n	801c16e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c16a:	2301      	movs	r3, #1
 801c16c:	e088      	b.n	801c280 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	2221      	movs	r2, #33	@ 0x21
 801c172:	5c9b      	ldrb	r3, [r3, r2]
 801c174:	b2db      	uxtb	r3, r3
 801c176:	2b00      	cmp	r3, #0
 801c178:	d107      	bne.n	801c18a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	2220      	movs	r2, #32
 801c17e:	2100      	movs	r1, #0
 801c180:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	0018      	movs	r0, r3
 801c186:	f7f2 fa39 	bl	800e5fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	2221      	movs	r2, #33	@ 0x21
 801c18e:	2102      	movs	r1, #2
 801c190:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	68db      	ldr	r3, [r3, #12]
 801c198:	2210      	movs	r2, #16
 801c19a:	4013      	ands	r3, r2
 801c19c:	2b10      	cmp	r3, #16
 801c19e:	d05f      	beq.n	801c260 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	22ca      	movs	r2, #202	@ 0xca
 801c1a6:	625a      	str	r2, [r3, #36]	@ 0x24
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	2253      	movs	r2, #83	@ 0x53
 801c1ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c1b0:	250f      	movs	r5, #15
 801c1b2:	197c      	adds	r4, r7, r5
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	0018      	movs	r0, r3
 801c1b8:	f000 fa99 	bl	801c6ee <RTC_EnterInitMode>
 801c1bc:	0003      	movs	r3, r0
 801c1be:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c1c0:	0028      	movs	r0, r5
 801c1c2:	183b      	adds	r3, r7, r0
 801c1c4:	781b      	ldrb	r3, [r3, #0]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d12c      	bne.n	801c224 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	689a      	ldr	r2, [r3, #8]
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	492c      	ldr	r1, [pc, #176]	@ (801c288 <HAL_RTC_Init+0x134>)
 801c1d6:	400a      	ands	r2, r1
 801c1d8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	6899      	ldr	r1, [r3, #8]
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	685a      	ldr	r2, [r3, #4]
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	691b      	ldr	r3, [r3, #16]
 801c1e8:	431a      	orrs	r2, r3
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	699b      	ldr	r3, [r3, #24]
 801c1ee:	431a      	orrs	r2, r3
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	430a      	orrs	r2, r1
 801c1f6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	687a      	ldr	r2, [r7, #4]
 801c1fe:	68d2      	ldr	r2, [r2, #12]
 801c200:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	6919      	ldr	r1, [r3, #16]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	689b      	ldr	r3, [r3, #8]
 801c20c:	041a      	lsls	r2, r3, #16
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	430a      	orrs	r2, r1
 801c214:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c216:	183c      	adds	r4, r7, r0
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	0018      	movs	r0, r3
 801c21c:	f000 faab 	bl	801c776 <RTC_ExitInitMode>
 801c220:	0003      	movs	r3, r0
 801c222:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c224:	230f      	movs	r3, #15
 801c226:	18fb      	adds	r3, r7, r3
 801c228:	781b      	ldrb	r3, [r3, #0]
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d113      	bne.n	801c256 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	2103      	movs	r1, #3
 801c23a:	438a      	bics	r2, r1
 801c23c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	69da      	ldr	r2, [r3, #28]
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	695b      	ldr	r3, [r3, #20]
 801c24c:	431a      	orrs	r2, r3
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	430a      	orrs	r2, r1
 801c254:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	22ff      	movs	r2, #255	@ 0xff
 801c25c:	625a      	str	r2, [r3, #36]	@ 0x24
 801c25e:	e003      	b.n	801c268 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c260:	230f      	movs	r3, #15
 801c262:	18fb      	adds	r3, r7, r3
 801c264:	2200      	movs	r2, #0
 801c266:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c268:	230f      	movs	r3, #15
 801c26a:	18fb      	adds	r3, r7, r3
 801c26c:	781b      	ldrb	r3, [r3, #0]
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d103      	bne.n	801c27a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	2221      	movs	r2, #33	@ 0x21
 801c276:	2101      	movs	r1, #1
 801c278:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c27a:	230f      	movs	r3, #15
 801c27c:	18fb      	adds	r3, r7, r3
 801c27e:	781b      	ldrb	r3, [r3, #0]
}
 801c280:	0018      	movs	r0, r3
 801c282:	46bd      	mov	sp, r7
 801c284:	b004      	add	sp, #16
 801c286:	bdb0      	pop	{r4, r5, r7, pc}
 801c288:	ff8fffbf 	.word	0xff8fffbf

0801c28c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c28c:	b5b0      	push	{r4, r5, r7, lr}
 801c28e:	b086      	sub	sp, #24
 801c290:	af00      	add	r7, sp, #0
 801c292:	60f8      	str	r0, [r7, #12]
 801c294:	60b9      	str	r1, [r7, #8]
 801c296:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c298:	2300      	movs	r3, #0
 801c29a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2220      	movs	r2, #32
 801c2a0:	5c9b      	ldrb	r3, [r3, r2]
 801c2a2:	2b01      	cmp	r3, #1
 801c2a4:	d101      	bne.n	801c2aa <HAL_RTC_SetTime+0x1e>
 801c2a6:	2302      	movs	r3, #2
 801c2a8:	e092      	b.n	801c3d0 <HAL_RTC_SetTime+0x144>
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	2220      	movs	r2, #32
 801c2ae:	2101      	movs	r1, #1
 801c2b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	2221      	movs	r2, #33	@ 0x21
 801c2b6:	2102      	movs	r1, #2
 801c2b8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d125      	bne.n	801c30c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	689b      	ldr	r3, [r3, #8]
 801c2c6:	2240      	movs	r2, #64	@ 0x40
 801c2c8:	4013      	ands	r3, r2
 801c2ca:	d102      	bne.n	801c2d2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	781b      	ldrb	r3, [r3, #0]
 801c2d6:	0018      	movs	r0, r3
 801c2d8:	f000 fa77 	bl	801c7ca <RTC_ByteToBcd2>
 801c2dc:	0003      	movs	r3, r0
 801c2de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c2e0:	68bb      	ldr	r3, [r7, #8]
 801c2e2:	785b      	ldrb	r3, [r3, #1]
 801c2e4:	0018      	movs	r0, r3
 801c2e6:	f000 fa70 	bl	801c7ca <RTC_ByteToBcd2>
 801c2ea:	0003      	movs	r3, r0
 801c2ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c2ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c2f0:	68bb      	ldr	r3, [r7, #8]
 801c2f2:	789b      	ldrb	r3, [r3, #2]
 801c2f4:	0018      	movs	r0, r3
 801c2f6:	f000 fa68 	bl	801c7ca <RTC_ByteToBcd2>
 801c2fa:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c2fc:	0022      	movs	r2, r4
 801c2fe:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c300:	68bb      	ldr	r3, [r7, #8]
 801c302:	78db      	ldrb	r3, [r3, #3]
 801c304:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c306:	4313      	orrs	r3, r2
 801c308:	617b      	str	r3, [r7, #20]
 801c30a:	e017      	b.n	801c33c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	689b      	ldr	r3, [r3, #8]
 801c312:	2240      	movs	r2, #64	@ 0x40
 801c314:	4013      	ands	r3, r2
 801c316:	d102      	bne.n	801c31e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c318:	68bb      	ldr	r3, [r7, #8]
 801c31a:	2200      	movs	r2, #0
 801c31c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c31e:	68bb      	ldr	r3, [r7, #8]
 801c320:	781b      	ldrb	r3, [r3, #0]
 801c322:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c324:	68bb      	ldr	r3, [r7, #8]
 801c326:	785b      	ldrb	r3, [r3, #1]
 801c328:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c32a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c32c:	68ba      	ldr	r2, [r7, #8]
 801c32e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c330:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c332:	68bb      	ldr	r3, [r7, #8]
 801c334:	78db      	ldrb	r3, [r3, #3]
 801c336:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c338:	4313      	orrs	r3, r2
 801c33a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	22ca      	movs	r2, #202	@ 0xca
 801c342:	625a      	str	r2, [r3, #36]	@ 0x24
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	2253      	movs	r2, #83	@ 0x53
 801c34a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c34c:	2513      	movs	r5, #19
 801c34e:	197c      	adds	r4, r7, r5
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	0018      	movs	r0, r3
 801c354:	f000 f9cb 	bl	801c6ee <RTC_EnterInitMode>
 801c358:	0003      	movs	r3, r0
 801c35a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c35c:	0028      	movs	r0, r5
 801c35e:	183b      	adds	r3, r7, r0
 801c360:	781b      	ldrb	r3, [r3, #0]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d120      	bne.n	801c3a8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	697a      	ldr	r2, [r7, #20]
 801c36c:	491a      	ldr	r1, [pc, #104]	@ (801c3d8 <HAL_RTC_SetTime+0x14c>)
 801c36e:	400a      	ands	r2, r1
 801c370:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	689a      	ldr	r2, [r3, #8]
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	4917      	ldr	r1, [pc, #92]	@ (801c3dc <HAL_RTC_SetTime+0x150>)
 801c37e:	400a      	ands	r2, r1
 801c380:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	6899      	ldr	r1, [r3, #8]
 801c388:	68bb      	ldr	r3, [r7, #8]
 801c38a:	68da      	ldr	r2, [r3, #12]
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	691b      	ldr	r3, [r3, #16]
 801c390:	431a      	orrs	r2, r3
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	430a      	orrs	r2, r1
 801c398:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c39a:	183c      	adds	r4, r7, r0
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	0018      	movs	r0, r3
 801c3a0:	f000 f9e9 	bl	801c776 <RTC_ExitInitMode>
 801c3a4:	0003      	movs	r3, r0
 801c3a6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c3a8:	2313      	movs	r3, #19
 801c3aa:	18fb      	adds	r3, r7, r3
 801c3ac:	781b      	ldrb	r3, [r3, #0]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d103      	bne.n	801c3ba <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	2221      	movs	r2, #33	@ 0x21
 801c3b6:	2101      	movs	r1, #1
 801c3b8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	22ff      	movs	r2, #255	@ 0xff
 801c3c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	2220      	movs	r2, #32
 801c3c6:	2100      	movs	r1, #0
 801c3c8:	5499      	strb	r1, [r3, r2]

  return status;
 801c3ca:	2313      	movs	r3, #19
 801c3cc:	18fb      	adds	r3, r7, r3
 801c3ce:	781b      	ldrb	r3, [r3, #0]
}
 801c3d0:	0018      	movs	r0, r3
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	b006      	add	sp, #24
 801c3d6:	bdb0      	pop	{r4, r5, r7, pc}
 801c3d8:	007f7f7f 	.word	0x007f7f7f
 801c3dc:	fffbffff 	.word	0xfffbffff

0801c3e0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b086      	sub	sp, #24
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	60f8      	str	r0, [r7, #12]
 801c3e8:	60b9      	str	r1, [r7, #8]
 801c3ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c3ec:	2300      	movs	r3, #0
 801c3ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c3f6:	68bb      	ldr	r3, [r7, #8]
 801c3f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	691b      	ldr	r3, [r3, #16]
 801c400:	045b      	lsls	r3, r3, #17
 801c402:	0c5a      	lsrs	r2, r3, #17
 801c404:	68bb      	ldr	r3, [r7, #8]
 801c406:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	4a22      	ldr	r2, [pc, #136]	@ (801c498 <HAL_RTC_GetTime+0xb8>)
 801c410:	4013      	ands	r3, r2
 801c412:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c414:	697b      	ldr	r3, [r7, #20]
 801c416:	0c1b      	lsrs	r3, r3, #16
 801c418:	b2db      	uxtb	r3, r3
 801c41a:	223f      	movs	r2, #63	@ 0x3f
 801c41c:	4013      	ands	r3, r2
 801c41e:	b2da      	uxtb	r2, r3
 801c420:	68bb      	ldr	r3, [r7, #8]
 801c422:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c424:	697b      	ldr	r3, [r7, #20]
 801c426:	0a1b      	lsrs	r3, r3, #8
 801c428:	b2db      	uxtb	r3, r3
 801c42a:	227f      	movs	r2, #127	@ 0x7f
 801c42c:	4013      	ands	r3, r2
 801c42e:	b2da      	uxtb	r2, r3
 801c430:	68bb      	ldr	r3, [r7, #8]
 801c432:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c434:	697b      	ldr	r3, [r7, #20]
 801c436:	b2db      	uxtb	r3, r3
 801c438:	227f      	movs	r2, #127	@ 0x7f
 801c43a:	4013      	ands	r3, r2
 801c43c:	b2da      	uxtb	r2, r3
 801c43e:	68bb      	ldr	r3, [r7, #8]
 801c440:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c442:	697b      	ldr	r3, [r7, #20]
 801c444:	0d9b      	lsrs	r3, r3, #22
 801c446:	b2db      	uxtb	r3, r3
 801c448:	2201      	movs	r2, #1
 801c44a:	4013      	ands	r3, r2
 801c44c:	b2da      	uxtb	r2, r3
 801c44e:	68bb      	ldr	r3, [r7, #8]
 801c450:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d11a      	bne.n	801c48e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c458:	68bb      	ldr	r3, [r7, #8]
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	0018      	movs	r0, r3
 801c45e:	f000 f9d5 	bl	801c80c <RTC_Bcd2ToByte>
 801c462:	0003      	movs	r3, r0
 801c464:	001a      	movs	r2, r3
 801c466:	68bb      	ldr	r3, [r7, #8]
 801c468:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c46a:	68bb      	ldr	r3, [r7, #8]
 801c46c:	785b      	ldrb	r3, [r3, #1]
 801c46e:	0018      	movs	r0, r3
 801c470:	f000 f9cc 	bl	801c80c <RTC_Bcd2ToByte>
 801c474:	0003      	movs	r3, r0
 801c476:	001a      	movs	r2, r3
 801c478:	68bb      	ldr	r3, [r7, #8]
 801c47a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c47c:	68bb      	ldr	r3, [r7, #8]
 801c47e:	789b      	ldrb	r3, [r3, #2]
 801c480:	0018      	movs	r0, r3
 801c482:	f000 f9c3 	bl	801c80c <RTC_Bcd2ToByte>
 801c486:	0003      	movs	r3, r0
 801c488:	001a      	movs	r2, r3
 801c48a:	68bb      	ldr	r3, [r7, #8]
 801c48c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c48e:	2300      	movs	r3, #0
}
 801c490:	0018      	movs	r0, r3
 801c492:	46bd      	mov	sp, r7
 801c494:	b006      	add	sp, #24
 801c496:	bd80      	pop	{r7, pc}
 801c498:	007f7f7f 	.word	0x007f7f7f

0801c49c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c49c:	b5b0      	push	{r4, r5, r7, lr}
 801c49e:	b086      	sub	sp, #24
 801c4a0:	af00      	add	r7, sp, #0
 801c4a2:	60f8      	str	r0, [r7, #12]
 801c4a4:	60b9      	str	r1, [r7, #8]
 801c4a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	2220      	movs	r2, #32
 801c4b0:	5c9b      	ldrb	r3, [r3, r2]
 801c4b2:	2b01      	cmp	r3, #1
 801c4b4:	d101      	bne.n	801c4ba <HAL_RTC_SetDate+0x1e>
 801c4b6:	2302      	movs	r3, #2
 801c4b8:	e07e      	b.n	801c5b8 <HAL_RTC_SetDate+0x11c>
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	2220      	movs	r2, #32
 801c4be:	2101      	movs	r1, #1
 801c4c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	2221      	movs	r2, #33	@ 0x21
 801c4c6:	2102      	movs	r1, #2
 801c4c8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d10e      	bne.n	801c4ee <HAL_RTC_SetDate+0x52>
 801c4d0:	68bb      	ldr	r3, [r7, #8]
 801c4d2:	785b      	ldrb	r3, [r3, #1]
 801c4d4:	001a      	movs	r2, r3
 801c4d6:	2310      	movs	r3, #16
 801c4d8:	4013      	ands	r3, r2
 801c4da:	d008      	beq.n	801c4ee <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c4dc:	68bb      	ldr	r3, [r7, #8]
 801c4de:	785b      	ldrb	r3, [r3, #1]
 801c4e0:	2210      	movs	r2, #16
 801c4e2:	4393      	bics	r3, r2
 801c4e4:	b2db      	uxtb	r3, r3
 801c4e6:	330a      	adds	r3, #10
 801c4e8:	b2da      	uxtb	r2, r3
 801c4ea:	68bb      	ldr	r3, [r7, #8]
 801c4ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d11c      	bne.n	801c52e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c4f4:	68bb      	ldr	r3, [r7, #8]
 801c4f6:	78db      	ldrb	r3, [r3, #3]
 801c4f8:	0018      	movs	r0, r3
 801c4fa:	f000 f966 	bl	801c7ca <RTC_ByteToBcd2>
 801c4fe:	0003      	movs	r3, r0
 801c500:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c502:	68bb      	ldr	r3, [r7, #8]
 801c504:	785b      	ldrb	r3, [r3, #1]
 801c506:	0018      	movs	r0, r3
 801c508:	f000 f95f 	bl	801c7ca <RTC_ByteToBcd2>
 801c50c:	0003      	movs	r3, r0
 801c50e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c510:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c512:	68bb      	ldr	r3, [r7, #8]
 801c514:	789b      	ldrb	r3, [r3, #2]
 801c516:	0018      	movs	r0, r3
 801c518:	f000 f957 	bl	801c7ca <RTC_ByteToBcd2>
 801c51c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c51e:	0022      	movs	r2, r4
 801c520:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c522:	68bb      	ldr	r3, [r7, #8]
 801c524:	781b      	ldrb	r3, [r3, #0]
 801c526:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c528:	4313      	orrs	r3, r2
 801c52a:	617b      	str	r3, [r7, #20]
 801c52c:	e00e      	b.n	801c54c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c52e:	68bb      	ldr	r3, [r7, #8]
 801c530:	78db      	ldrb	r3, [r3, #3]
 801c532:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c534:	68bb      	ldr	r3, [r7, #8]
 801c536:	785b      	ldrb	r3, [r3, #1]
 801c538:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c53a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c53c:	68ba      	ldr	r2, [r7, #8]
 801c53e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c540:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c542:	68bb      	ldr	r3, [r7, #8]
 801c544:	781b      	ldrb	r3, [r3, #0]
 801c546:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c548:	4313      	orrs	r3, r2
 801c54a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	22ca      	movs	r2, #202	@ 0xca
 801c552:	625a      	str	r2, [r3, #36]	@ 0x24
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	2253      	movs	r2, #83	@ 0x53
 801c55a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c55c:	2513      	movs	r5, #19
 801c55e:	197c      	adds	r4, r7, r5
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	0018      	movs	r0, r3
 801c564:	f000 f8c3 	bl	801c6ee <RTC_EnterInitMode>
 801c568:	0003      	movs	r3, r0
 801c56a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c56c:	0028      	movs	r0, r5
 801c56e:	183b      	adds	r3, r7, r0
 801c570:	781b      	ldrb	r3, [r3, #0]
 801c572:	2b00      	cmp	r3, #0
 801c574:	d10c      	bne.n	801c590 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	697a      	ldr	r2, [r7, #20]
 801c57c:	4910      	ldr	r1, [pc, #64]	@ (801c5c0 <HAL_RTC_SetDate+0x124>)
 801c57e:	400a      	ands	r2, r1
 801c580:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c582:	183c      	adds	r4, r7, r0
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	0018      	movs	r0, r3
 801c588:	f000 f8f5 	bl	801c776 <RTC_ExitInitMode>
 801c58c:	0003      	movs	r3, r0
 801c58e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c590:	2313      	movs	r3, #19
 801c592:	18fb      	adds	r3, r7, r3
 801c594:	781b      	ldrb	r3, [r3, #0]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d103      	bne.n	801c5a2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	2221      	movs	r2, #33	@ 0x21
 801c59e:	2101      	movs	r1, #1
 801c5a0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	22ff      	movs	r2, #255	@ 0xff
 801c5a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	2220      	movs	r2, #32
 801c5ae:	2100      	movs	r1, #0
 801c5b0:	5499      	strb	r1, [r3, r2]

  return status;
 801c5b2:	2313      	movs	r3, #19
 801c5b4:	18fb      	adds	r3, r7, r3
 801c5b6:	781b      	ldrb	r3, [r3, #0]
}
 801c5b8:	0018      	movs	r0, r3
 801c5ba:	46bd      	mov	sp, r7
 801c5bc:	b006      	add	sp, #24
 801c5be:	bdb0      	pop	{r4, r5, r7, pc}
 801c5c0:	00ffff3f 	.word	0x00ffff3f

0801c5c4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b086      	sub	sp, #24
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	60f8      	str	r0, [r7, #12]
 801c5cc:	60b9      	str	r1, [r7, #8]
 801c5ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	681b      	ldr	r3, [r3, #0]
 801c5d8:	685b      	ldr	r3, [r3, #4]
 801c5da:	4a21      	ldr	r2, [pc, #132]	@ (801c660 <HAL_RTC_GetDate+0x9c>)
 801c5dc:	4013      	ands	r3, r2
 801c5de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c5e0:	697b      	ldr	r3, [r7, #20]
 801c5e2:	0c1b      	lsrs	r3, r3, #16
 801c5e4:	b2da      	uxtb	r2, r3
 801c5e6:	68bb      	ldr	r3, [r7, #8]
 801c5e8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c5ea:	697b      	ldr	r3, [r7, #20]
 801c5ec:	0a1b      	lsrs	r3, r3, #8
 801c5ee:	b2db      	uxtb	r3, r3
 801c5f0:	221f      	movs	r2, #31
 801c5f2:	4013      	ands	r3, r2
 801c5f4:	b2da      	uxtb	r2, r3
 801c5f6:	68bb      	ldr	r3, [r7, #8]
 801c5f8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c5fa:	697b      	ldr	r3, [r7, #20]
 801c5fc:	b2db      	uxtb	r3, r3
 801c5fe:	223f      	movs	r2, #63	@ 0x3f
 801c600:	4013      	ands	r3, r2
 801c602:	b2da      	uxtb	r2, r3
 801c604:	68bb      	ldr	r3, [r7, #8]
 801c606:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c608:	697b      	ldr	r3, [r7, #20]
 801c60a:	0b5b      	lsrs	r3, r3, #13
 801c60c:	b2db      	uxtb	r3, r3
 801c60e:	2207      	movs	r2, #7
 801c610:	4013      	ands	r3, r2
 801c612:	b2da      	uxtb	r2, r3
 801c614:	68bb      	ldr	r3, [r7, #8]
 801c616:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d11a      	bne.n	801c654 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c61e:	68bb      	ldr	r3, [r7, #8]
 801c620:	78db      	ldrb	r3, [r3, #3]
 801c622:	0018      	movs	r0, r3
 801c624:	f000 f8f2 	bl	801c80c <RTC_Bcd2ToByte>
 801c628:	0003      	movs	r3, r0
 801c62a:	001a      	movs	r2, r3
 801c62c:	68bb      	ldr	r3, [r7, #8]
 801c62e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c630:	68bb      	ldr	r3, [r7, #8]
 801c632:	785b      	ldrb	r3, [r3, #1]
 801c634:	0018      	movs	r0, r3
 801c636:	f000 f8e9 	bl	801c80c <RTC_Bcd2ToByte>
 801c63a:	0003      	movs	r3, r0
 801c63c:	001a      	movs	r2, r3
 801c63e:	68bb      	ldr	r3, [r7, #8]
 801c640:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c642:	68bb      	ldr	r3, [r7, #8]
 801c644:	789b      	ldrb	r3, [r3, #2]
 801c646:	0018      	movs	r0, r3
 801c648:	f000 f8e0 	bl	801c80c <RTC_Bcd2ToByte>
 801c64c:	0003      	movs	r3, r0
 801c64e:	001a      	movs	r2, r3
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c654:	2300      	movs	r3, #0
}
 801c656:	0018      	movs	r0, r3
 801c658:	46bd      	mov	sp, r7
 801c65a:	b006      	add	sp, #24
 801c65c:	bd80      	pop	{r7, pc}
 801c65e:	46c0      	nop			@ (mov r8, r8)
 801c660:	00ffff3f 	.word	0x00ffff3f

0801c664 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b084      	sub	sp, #16
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c66c:	2300      	movs	r3, #0
 801c66e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	4a0e      	ldr	r2, [pc, #56]	@ (801c6b0 <HAL_RTC_WaitForSynchro+0x4c>)
 801c676:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c678:	f7f8 f98c 	bl	8014994 <HAL_GetTick>
 801c67c:	0003      	movs	r3, r0
 801c67e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c680:	e00a      	b.n	801c698 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c682:	f7f8 f987 	bl	8014994 <HAL_GetTick>
 801c686:	0002      	movs	r2, r0
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	1ad2      	subs	r2, r2, r3
 801c68c:	23fa      	movs	r3, #250	@ 0xfa
 801c68e:	009b      	lsls	r3, r3, #2
 801c690:	429a      	cmp	r2, r3
 801c692:	d901      	bls.n	801c698 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c694:	2303      	movs	r3, #3
 801c696:	e006      	b.n	801c6a6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	68db      	ldr	r3, [r3, #12]
 801c69e:	2220      	movs	r2, #32
 801c6a0:	4013      	ands	r3, r2
 801c6a2:	d0ee      	beq.n	801c682 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c6a4:	2300      	movs	r3, #0
}
 801c6a6:	0018      	movs	r0, r3
 801c6a8:	46bd      	mov	sp, r7
 801c6aa:	b004      	add	sp, #16
 801c6ac:	bd80      	pop	{r7, pc}
 801c6ae:	46c0      	nop			@ (mov r8, r8)
 801c6b0:	0001ff5f 	.word	0x0001ff5f

0801c6b4 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b082      	sub	sp, #8
 801c6b8:	af00      	add	r7, sp, #0
 801c6ba:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	22ca      	movs	r2, #202	@ 0xca
 801c6c2:	625a      	str	r2, [r3, #36]	@ 0x24
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	2253      	movs	r2, #83	@ 0x53
 801c6ca:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	689a      	ldr	r2, [r3, #8]
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	2180      	movs	r1, #128	@ 0x80
 801c6d8:	0249      	lsls	r1, r1, #9
 801c6da:	430a      	orrs	r2, r1
 801c6dc:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	22ff      	movs	r2, #255	@ 0xff
 801c6e4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c6e6:	46c0      	nop			@ (mov r8, r8)
 801c6e8:	46bd      	mov	sp, r7
 801c6ea:	b002      	add	sp, #8
 801c6ec:	bd80      	pop	{r7, pc}

0801c6ee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c6ee:	b580      	push	{r7, lr}
 801c6f0:	b084      	sub	sp, #16
 801c6f2:	af00      	add	r7, sp, #0
 801c6f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c6fa:	230f      	movs	r3, #15
 801c6fc:	18fb      	adds	r3, r7, r3
 801c6fe:	2200      	movs	r2, #0
 801c700:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	68db      	ldr	r3, [r3, #12]
 801c708:	2240      	movs	r2, #64	@ 0x40
 801c70a:	4013      	ands	r3, r2
 801c70c:	d12c      	bne.n	801c768 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	68da      	ldr	r2, [r3, #12]
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	2180      	movs	r1, #128	@ 0x80
 801c71a:	430a      	orrs	r2, r1
 801c71c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c71e:	f7f8 f939 	bl	8014994 <HAL_GetTick>
 801c722:	0003      	movs	r3, r0
 801c724:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c726:	e014      	b.n	801c752 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c728:	f7f8 f934 	bl	8014994 <HAL_GetTick>
 801c72c:	0002      	movs	r2, r0
 801c72e:	68bb      	ldr	r3, [r7, #8]
 801c730:	1ad2      	subs	r2, r2, r3
 801c732:	200f      	movs	r0, #15
 801c734:	183b      	adds	r3, r7, r0
 801c736:	1839      	adds	r1, r7, r0
 801c738:	7809      	ldrb	r1, [r1, #0]
 801c73a:	7019      	strb	r1, [r3, #0]
 801c73c:	23fa      	movs	r3, #250	@ 0xfa
 801c73e:	009b      	lsls	r3, r3, #2
 801c740:	429a      	cmp	r2, r3
 801c742:	d906      	bls.n	801c752 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	2221      	movs	r2, #33	@ 0x21
 801c748:	2104      	movs	r1, #4
 801c74a:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c74c:	183b      	adds	r3, r7, r0
 801c74e:	2201      	movs	r2, #1
 801c750:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	68db      	ldr	r3, [r3, #12]
 801c758:	2240      	movs	r2, #64	@ 0x40
 801c75a:	4013      	ands	r3, r2
 801c75c:	d104      	bne.n	801c768 <RTC_EnterInitMode+0x7a>
 801c75e:	230f      	movs	r3, #15
 801c760:	18fb      	adds	r3, r7, r3
 801c762:	781b      	ldrb	r3, [r3, #0]
 801c764:	2b01      	cmp	r3, #1
 801c766:	d1df      	bne.n	801c728 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c768:	230f      	movs	r3, #15
 801c76a:	18fb      	adds	r3, r7, r3
 801c76c:	781b      	ldrb	r3, [r3, #0]
}
 801c76e:	0018      	movs	r0, r3
 801c770:	46bd      	mov	sp, r7
 801c772:	b004      	add	sp, #16
 801c774:	bd80      	pop	{r7, pc}

0801c776 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c776:	b590      	push	{r4, r7, lr}
 801c778:	b085      	sub	sp, #20
 801c77a:	af00      	add	r7, sp, #0
 801c77c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c77e:	240f      	movs	r4, #15
 801c780:	193b      	adds	r3, r7, r4
 801c782:	2200      	movs	r2, #0
 801c784:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	68da      	ldr	r2, [r3, #12]
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	2180      	movs	r1, #128	@ 0x80
 801c792:	438a      	bics	r2, r1
 801c794:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	689b      	ldr	r3, [r3, #8]
 801c79c:	2220      	movs	r2, #32
 801c79e:	4013      	ands	r3, r2
 801c7a0:	d10c      	bne.n	801c7bc <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	0018      	movs	r0, r3
 801c7a6:	f7ff ff5d 	bl	801c664 <HAL_RTC_WaitForSynchro>
 801c7aa:	1e03      	subs	r3, r0, #0
 801c7ac:	d006      	beq.n	801c7bc <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	2221      	movs	r2, #33	@ 0x21
 801c7b2:	2104      	movs	r1, #4
 801c7b4:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c7b6:	193b      	adds	r3, r7, r4
 801c7b8:	2201      	movs	r2, #1
 801c7ba:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c7bc:	230f      	movs	r3, #15
 801c7be:	18fb      	adds	r3, r7, r3
 801c7c0:	781b      	ldrb	r3, [r3, #0]
}
 801c7c2:	0018      	movs	r0, r3
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	b005      	add	sp, #20
 801c7c8:	bd90      	pop	{r4, r7, pc}

0801c7ca <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c7ca:	b580      	push	{r7, lr}
 801c7cc:	b084      	sub	sp, #16
 801c7ce:	af00      	add	r7, sp, #0
 801c7d0:	0002      	movs	r2, r0
 801c7d2:	1dfb      	adds	r3, r7, #7
 801c7d4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c7da:	e007      	b.n	801c7ec <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	3301      	adds	r3, #1
 801c7e0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c7e2:	1dfb      	adds	r3, r7, #7
 801c7e4:	1dfa      	adds	r2, r7, #7
 801c7e6:	7812      	ldrb	r2, [r2, #0]
 801c7e8:	3a0a      	subs	r2, #10
 801c7ea:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c7ec:	1dfb      	adds	r3, r7, #7
 801c7ee:	781b      	ldrb	r3, [r3, #0]
 801c7f0:	2b09      	cmp	r3, #9
 801c7f2:	d8f3      	bhi.n	801c7dc <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	b2db      	uxtb	r3, r3
 801c7f8:	011b      	lsls	r3, r3, #4
 801c7fa:	b2da      	uxtb	r2, r3
 801c7fc:	1dfb      	adds	r3, r7, #7
 801c7fe:	781b      	ldrb	r3, [r3, #0]
 801c800:	4313      	orrs	r3, r2
 801c802:	b2db      	uxtb	r3, r3
}
 801c804:	0018      	movs	r0, r3
 801c806:	46bd      	mov	sp, r7
 801c808:	b004      	add	sp, #16
 801c80a:	bd80      	pop	{r7, pc}

0801c80c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b084      	sub	sp, #16
 801c810:	af00      	add	r7, sp, #0
 801c812:	0002      	movs	r2, r0
 801c814:	1dfb      	adds	r3, r7, #7
 801c816:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c818:	2300      	movs	r3, #0
 801c81a:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c81c:	1dfb      	adds	r3, r7, #7
 801c81e:	781b      	ldrb	r3, [r3, #0]
 801c820:	091b      	lsrs	r3, r3, #4
 801c822:	b2db      	uxtb	r3, r3
 801c824:	001a      	movs	r2, r3
 801c826:	0013      	movs	r3, r2
 801c828:	009b      	lsls	r3, r3, #2
 801c82a:	189b      	adds	r3, r3, r2
 801c82c:	005b      	lsls	r3, r3, #1
 801c82e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	b2da      	uxtb	r2, r3
 801c834:	1dfb      	adds	r3, r7, #7
 801c836:	781b      	ldrb	r3, [r3, #0]
 801c838:	210f      	movs	r1, #15
 801c83a:	400b      	ands	r3, r1
 801c83c:	b2db      	uxtb	r3, r3
 801c83e:	18d3      	adds	r3, r2, r3
 801c840:	b2db      	uxtb	r3, r3
}
 801c842:	0018      	movs	r0, r3
 801c844:	46bd      	mov	sp, r7
 801c846:	b004      	add	sp, #16
 801c848:	bd80      	pop	{r7, pc}
	...

0801c84c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c84c:	b580      	push	{r7, lr}
 801c84e:	b086      	sub	sp, #24
 801c850:	af00      	add	r7, sp, #0
 801c852:	60f8      	str	r0, [r7, #12]
 801c854:	60b9      	str	r1, [r7, #8]
 801c856:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c858:	4b64      	ldr	r3, [pc, #400]	@ (801c9ec <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	22fa      	movs	r2, #250	@ 0xfa
 801c85e:	01d1      	lsls	r1, r2, #7
 801c860:	0018      	movs	r0, r3
 801c862:	f7e3 fc9f 	bl	80001a4 <__udivsi3>
 801c866:	0003      	movs	r3, r0
 801c868:	001a      	movs	r2, r3
 801c86a:	0013      	movs	r3, r2
 801c86c:	015b      	lsls	r3, r3, #5
 801c86e:	1a9b      	subs	r3, r3, r2
 801c870:	009b      	lsls	r3, r3, #2
 801c872:	189b      	adds	r3, r3, r2
 801c874:	00db      	lsls	r3, r3, #3
 801c876:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	2220      	movs	r2, #32
 801c87c:	5c9b      	ldrb	r3, [r3, r2]
 801c87e:	2b01      	cmp	r3, #1
 801c880:	d101      	bne.n	801c886 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c882:	2302      	movs	r3, #2
 801c884:	e0ad      	b.n	801c9e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	2220      	movs	r2, #32
 801c88a:	2101      	movs	r1, #1
 801c88c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	2221      	movs	r2, #33	@ 0x21
 801c892:	2102      	movs	r1, #2
 801c894:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	22ca      	movs	r2, #202	@ 0xca
 801c89c:	625a      	str	r2, [r3, #36]	@ 0x24
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	2253      	movs	r2, #83	@ 0x53
 801c8a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	689a      	ldr	r2, [r3, #8]
 801c8ac:	2380      	movs	r3, #128	@ 0x80
 801c8ae:	00db      	lsls	r3, r3, #3
 801c8b0:	4013      	ands	r3, r2
 801c8b2:	d019      	beq.n	801c8e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c8b4:	697b      	ldr	r3, [r7, #20]
 801c8b6:	3b01      	subs	r3, #1
 801c8b8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c8ba:	697b      	ldr	r3, [r7, #20]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d10d      	bne.n	801c8dc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	22ff      	movs	r2, #255	@ 0xff
 801c8c6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	2221      	movs	r2, #33	@ 0x21
 801c8cc:	2103      	movs	r1, #3
 801c8ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	2220      	movs	r2, #32
 801c8d4:	2100      	movs	r1, #0
 801c8d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c8d8:	2303      	movs	r3, #3
 801c8da:	e082      	b.n	801c9e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	68db      	ldr	r3, [r3, #12]
 801c8e2:	2204      	movs	r2, #4
 801c8e4:	4013      	ands	r3, r2
 801c8e6:	d1e5      	bne.n	801c8b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	689a      	ldr	r2, [r3, #8]
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	493f      	ldr	r1, [pc, #252]	@ (801c9f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c8f4:	400a      	ands	r2, r1
 801c8f6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	68db      	ldr	r3, [r3, #12]
 801c8fe:	22ff      	movs	r2, #255	@ 0xff
 801c900:	401a      	ands	r2, r3
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	493b      	ldr	r1, [pc, #236]	@ (801c9f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c908:	430a      	orrs	r2, r1
 801c90a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c90c:	4b37      	ldr	r3, [pc, #220]	@ (801c9ec <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	22fa      	movs	r2, #250	@ 0xfa
 801c912:	01d1      	lsls	r1, r2, #7
 801c914:	0018      	movs	r0, r3
 801c916:	f7e3 fc45 	bl	80001a4 <__udivsi3>
 801c91a:	0003      	movs	r3, r0
 801c91c:	001a      	movs	r2, r3
 801c91e:	0013      	movs	r3, r2
 801c920:	015b      	lsls	r3, r3, #5
 801c922:	1a9b      	subs	r3, r3, r2
 801c924:	009b      	lsls	r3, r3, #2
 801c926:	189b      	adds	r3, r3, r2
 801c928:	00db      	lsls	r3, r3, #3
 801c92a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	3b01      	subs	r3, #1
 801c930:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c932:	697b      	ldr	r3, [r7, #20]
 801c934:	2b00      	cmp	r3, #0
 801c936:	d10d      	bne.n	801c954 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	22ff      	movs	r2, #255	@ 0xff
 801c93e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	2221      	movs	r2, #33	@ 0x21
 801c944:	2103      	movs	r1, #3
 801c946:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	2220      	movs	r2, #32
 801c94c:	2100      	movs	r1, #0
 801c94e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c950:	2303      	movs	r3, #3
 801c952:	e046      	b.n	801c9e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	681b      	ldr	r3, [r3, #0]
 801c958:	68db      	ldr	r3, [r3, #12]
 801c95a:	2204      	movs	r2, #4
 801c95c:	4013      	ands	r3, r2
 801c95e:	d0e5      	beq.n	801c92c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	689a      	ldr	r2, [r3, #8]
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	2107      	movs	r1, #7
 801c96c:	438a      	bics	r2, r1
 801c96e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	6899      	ldr	r1, [r3, #8]
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	687a      	ldr	r2, [r7, #4]
 801c97c:	430a      	orrs	r2, r1
 801c97e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	68ba      	ldr	r2, [r7, #8]
 801c986:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c988:	4b1b      	ldr	r3, [pc, #108]	@ (801c9f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c98a:	681a      	ldr	r2, [r3, #0]
 801c98c:	4b1a      	ldr	r3, [pc, #104]	@ (801c9f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c98e:	2180      	movs	r1, #128	@ 0x80
 801c990:	0349      	lsls	r1, r1, #13
 801c992:	430a      	orrs	r2, r1
 801c994:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c996:	4b18      	ldr	r3, [pc, #96]	@ (801c9f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c998:	689a      	ldr	r2, [r3, #8]
 801c99a:	4b17      	ldr	r3, [pc, #92]	@ (801c9f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c99c:	2180      	movs	r1, #128	@ 0x80
 801c99e:	0349      	lsls	r1, r1, #13
 801c9a0:	430a      	orrs	r2, r1
 801c9a2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	689a      	ldr	r2, [r3, #8]
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	2180      	movs	r1, #128	@ 0x80
 801c9b0:	01c9      	lsls	r1, r1, #7
 801c9b2:	430a      	orrs	r2, r1
 801c9b4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	689a      	ldr	r2, [r3, #8]
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	2180      	movs	r1, #128	@ 0x80
 801c9c2:	00c9      	lsls	r1, r1, #3
 801c9c4:	430a      	orrs	r2, r1
 801c9c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	22ff      	movs	r2, #255	@ 0xff
 801c9ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	2221      	movs	r2, #33	@ 0x21
 801c9d4:	2101      	movs	r1, #1
 801c9d6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	2220      	movs	r2, #32
 801c9dc:	2100      	movs	r1, #0
 801c9de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c9e0:	2300      	movs	r3, #0
}
 801c9e2:	0018      	movs	r0, r3
 801c9e4:	46bd      	mov	sp, r7
 801c9e6:	b006      	add	sp, #24
 801c9e8:	bd80      	pop	{r7, pc}
 801c9ea:	46c0      	nop			@ (mov r8, r8)
 801c9ec:	200000ec 	.word	0x200000ec
 801c9f0:	fffffbff 	.word	0xfffffbff
 801c9f4:	fffffb7f 	.word	0xfffffb7f
 801c9f8:	40010400 	.word	0x40010400

0801c9fc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b084      	sub	sp, #16
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ca04:	2300      	movs	r3, #0
 801ca06:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	2220      	movs	r2, #32
 801ca0c:	5c9b      	ldrb	r3, [r3, r2]
 801ca0e:	2b01      	cmp	r3, #1
 801ca10:	d101      	bne.n	801ca16 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801ca12:	2302      	movs	r3, #2
 801ca14:	e04e      	b.n	801cab4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	2220      	movs	r2, #32
 801ca1a:	2101      	movs	r1, #1
 801ca1c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	2221      	movs	r2, #33	@ 0x21
 801ca22:	2102      	movs	r1, #2
 801ca24:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	22ca      	movs	r2, #202	@ 0xca
 801ca2c:	625a      	str	r2, [r3, #36]	@ 0x24
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	2253      	movs	r2, #83	@ 0x53
 801ca34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	689a      	ldr	r2, [r3, #8]
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	491e      	ldr	r1, [pc, #120]	@ (801cabc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801ca42:	400a      	ands	r2, r1
 801ca44:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	689a      	ldr	r2, [r3, #8]
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	491b      	ldr	r1, [pc, #108]	@ (801cac0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801ca52:	400a      	ands	r2, r1
 801ca54:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ca56:	f7f7 ff9d 	bl	8014994 <HAL_GetTick>
 801ca5a:	0003      	movs	r3, r0
 801ca5c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801ca5e:	e016      	b.n	801ca8e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801ca60:	f7f7 ff98 	bl	8014994 <HAL_GetTick>
 801ca64:	0002      	movs	r2, r0
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	1ad2      	subs	r2, r2, r3
 801ca6a:	23fa      	movs	r3, #250	@ 0xfa
 801ca6c:	009b      	lsls	r3, r3, #2
 801ca6e:	429a      	cmp	r2, r3
 801ca70:	d90d      	bls.n	801ca8e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	22ff      	movs	r2, #255	@ 0xff
 801ca78:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	2221      	movs	r2, #33	@ 0x21
 801ca7e:	2103      	movs	r1, #3
 801ca80:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	2220      	movs	r2, #32
 801ca86:	2100      	movs	r1, #0
 801ca88:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801ca8a:	2303      	movs	r3, #3
 801ca8c:	e012      	b.n	801cab4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	68db      	ldr	r3, [r3, #12]
 801ca94:	2204      	movs	r2, #4
 801ca96:	4013      	ands	r3, r2
 801ca98:	d0e2      	beq.n	801ca60 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	22ff      	movs	r2, #255	@ 0xff
 801caa0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	2221      	movs	r2, #33	@ 0x21
 801caa6:	2101      	movs	r1, #1
 801caa8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	2220      	movs	r2, #32
 801caae:	2100      	movs	r1, #0
 801cab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cab2:	2300      	movs	r3, #0
}
 801cab4:	0018      	movs	r0, r3
 801cab6:	46bd      	mov	sp, r7
 801cab8:	b004      	add	sp, #16
 801caba:	bd80      	pop	{r7, pc}
 801cabc:	fffffbff 	.word	0xfffffbff
 801cac0:	ffffbfff 	.word	0xffffbfff

0801cac4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b082      	sub	sp, #8
 801cac8:	af00      	add	r7, sp, #0
 801caca:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801cacc:	4b13      	ldr	r3, [pc, #76]	@ (801cb1c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801cace:	2280      	movs	r2, #128	@ 0x80
 801cad0:	0352      	lsls	r2, r2, #13
 801cad2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	689a      	ldr	r2, [r3, #8]
 801cada:	2380      	movs	r3, #128	@ 0x80
 801cadc:	01db      	lsls	r3, r3, #7
 801cade:	4013      	ands	r3, r2
 801cae0:	d014      	beq.n	801cb0c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	68da      	ldr	r2, [r3, #12]
 801cae8:	2380      	movs	r3, #128	@ 0x80
 801caea:	00db      	lsls	r3, r3, #3
 801caec:	4013      	ands	r3, r2
 801caee:	d00d      	beq.n	801cb0c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	68db      	ldr	r3, [r3, #12]
 801caf6:	22ff      	movs	r2, #255	@ 0xff
 801caf8:	401a      	ands	r2, r3
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	4908      	ldr	r1, [pc, #32]	@ (801cb20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801cb00:	430a      	orrs	r2, r1
 801cb02:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	0018      	movs	r0, r3
 801cb08:	f000 f80c 	bl	801cb24 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	2221      	movs	r2, #33	@ 0x21
 801cb10:	2101      	movs	r1, #1
 801cb12:	5499      	strb	r1, [r3, r2]
}
 801cb14:	46c0      	nop			@ (mov r8, r8)
 801cb16:	46bd      	mov	sp, r7
 801cb18:	b002      	add	sp, #8
 801cb1a:	bd80      	pop	{r7, pc}
 801cb1c:	40010400 	.word	0x40010400
 801cb20:	fffffb7f 	.word	0xfffffb7f

0801cb24 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801cb24:	b580      	push	{r7, lr}
 801cb26:	b082      	sub	sp, #8
 801cb28:	af00      	add	r7, sp, #0
 801cb2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801cb2c:	46c0      	nop			@ (mov r8, r8)
 801cb2e:	46bd      	mov	sp, r7
 801cb30:	b002      	add	sp, #8
 801cb32:	bd80      	pop	{r7, pc}

0801cb34 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b086      	sub	sp, #24
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	60f8      	str	r0, [r7, #12]
 801cb3c:	60b9      	str	r1, [r7, #8]
 801cb3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801cb40:	2300      	movs	r3, #0
 801cb42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	3350      	adds	r3, #80	@ 0x50
 801cb4a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801cb4c:	68bb      	ldr	r3, [r7, #8]
 801cb4e:	009b      	lsls	r3, r3, #2
 801cb50:	697a      	ldr	r2, [r7, #20]
 801cb52:	18d3      	adds	r3, r2, r3
 801cb54:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801cb56:	697b      	ldr	r3, [r7, #20]
 801cb58:	687a      	ldr	r2, [r7, #4]
 801cb5a:	601a      	str	r2, [r3, #0]
}
 801cb5c:	46c0      	nop			@ (mov r8, r8)
 801cb5e:	46bd      	mov	sp, r7
 801cb60:	b006      	add	sp, #24
 801cb62:	bd80      	pop	{r7, pc}

0801cb64 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b084      	sub	sp, #16
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	6078      	str	r0, [r7, #4]
 801cb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801cb6e:	2300      	movs	r3, #0
 801cb70:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	3350      	adds	r3, #80	@ 0x50
 801cb78:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801cb7a:	683b      	ldr	r3, [r7, #0]
 801cb7c:	009b      	lsls	r3, r3, #2
 801cb7e:	68fa      	ldr	r2, [r7, #12]
 801cb80:	18d3      	adds	r3, r2, r3
 801cb82:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	681b      	ldr	r3, [r3, #0]
}
 801cb88:	0018      	movs	r0, r3
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	b004      	add	sp, #16
 801cb8e:	bd80      	pop	{r7, pc}

0801cb90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cb90:	b580      	push	{r7, lr}
 801cb92:	b082      	sub	sp, #8
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d101      	bne.n	801cba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cb9e:	2301      	movs	r3, #1
 801cba0:	e032      	b.n	801cc08 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	2239      	movs	r2, #57	@ 0x39
 801cba6:	5c9b      	ldrb	r3, [r3, r2]
 801cba8:	b2db      	uxtb	r3, r3
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d107      	bne.n	801cbbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	2238      	movs	r2, #56	@ 0x38
 801cbb2:	2100      	movs	r1, #0
 801cbb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	0018      	movs	r0, r3
 801cbba:	f7f6 fea3 	bl	8013904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	2239      	movs	r2, #57	@ 0x39
 801cbc2:	2102      	movs	r1, #2
 801cbc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	681a      	ldr	r2, [r3, #0]
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	3304      	adds	r3, #4
 801cbce:	0019      	movs	r1, r3
 801cbd0:	0010      	movs	r0, r2
 801cbd2:	f000 fa1d 	bl	801d010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	223e      	movs	r2, #62	@ 0x3e
 801cbda:	2101      	movs	r1, #1
 801cbdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	223a      	movs	r2, #58	@ 0x3a
 801cbe2:	2101      	movs	r1, #1
 801cbe4:	5499      	strb	r1, [r3, r2]
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	223b      	movs	r2, #59	@ 0x3b
 801cbea:	2101      	movs	r1, #1
 801cbec:	5499      	strb	r1, [r3, r2]
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	223c      	movs	r2, #60	@ 0x3c
 801cbf2:	2101      	movs	r1, #1
 801cbf4:	5499      	strb	r1, [r3, r2]
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	223d      	movs	r2, #61	@ 0x3d
 801cbfa:	2101      	movs	r1, #1
 801cbfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	2239      	movs	r2, #57	@ 0x39
 801cc02:	2101      	movs	r1, #1
 801cc04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cc06:	2300      	movs	r3, #0
}
 801cc08:	0018      	movs	r0, r3
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	b002      	add	sp, #8
 801cc0e:	bd80      	pop	{r7, pc}

0801cc10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cc10:	b580      	push	{r7, lr}
 801cc12:	b084      	sub	sp, #16
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	2239      	movs	r2, #57	@ 0x39
 801cc1c:	5c9b      	ldrb	r3, [r3, r2]
 801cc1e:	b2db      	uxtb	r3, r3
 801cc20:	2b01      	cmp	r3, #1
 801cc22:	d001      	beq.n	801cc28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cc24:	2301      	movs	r3, #1
 801cc26:	e033      	b.n	801cc90 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	2239      	movs	r2, #57	@ 0x39
 801cc2c:	2102      	movs	r1, #2
 801cc2e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	681a      	ldr	r2, [r3, #0]
 801cc34:	2380      	movs	r3, #128	@ 0x80
 801cc36:	05db      	lsls	r3, r3, #23
 801cc38:	429a      	cmp	r2, r3
 801cc3a:	d00e      	beq.n	801cc5a <HAL_TIM_Base_Start+0x4a>
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	4a15      	ldr	r2, [pc, #84]	@ (801cc98 <HAL_TIM_Base_Start+0x88>)
 801cc42:	4293      	cmp	r3, r2
 801cc44:	d009      	beq.n	801cc5a <HAL_TIM_Base_Start+0x4a>
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	4a14      	ldr	r2, [pc, #80]	@ (801cc9c <HAL_TIM_Base_Start+0x8c>)
 801cc4c:	4293      	cmp	r3, r2
 801cc4e:	d004      	beq.n	801cc5a <HAL_TIM_Base_Start+0x4a>
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	4a12      	ldr	r2, [pc, #72]	@ (801cca0 <HAL_TIM_Base_Start+0x90>)
 801cc56:	4293      	cmp	r3, r2
 801cc58:	d111      	bne.n	801cc7e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	689b      	ldr	r3, [r3, #8]
 801cc60:	2207      	movs	r2, #7
 801cc62:	4013      	ands	r3, r2
 801cc64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	2b06      	cmp	r3, #6
 801cc6a:	d010      	beq.n	801cc8e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	681a      	ldr	r2, [r3, #0]
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	2101      	movs	r1, #1
 801cc78:	430a      	orrs	r2, r1
 801cc7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc7c:	e007      	b.n	801cc8e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	681a      	ldr	r2, [r3, #0]
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	2101      	movs	r1, #1
 801cc8a:	430a      	orrs	r2, r1
 801cc8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cc8e:	2300      	movs	r3, #0
}
 801cc90:	0018      	movs	r0, r3
 801cc92:	46bd      	mov	sp, r7
 801cc94:	b004      	add	sp, #16
 801cc96:	bd80      	pop	{r7, pc}
 801cc98:	40000400 	.word	0x40000400
 801cc9c:	40010800 	.word	0x40010800
 801cca0:	40011400 	.word	0x40011400

0801cca4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b082      	sub	sp, #8
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	6a1b      	ldr	r3, [r3, #32]
 801ccb2:	4a0a      	ldr	r2, [pc, #40]	@ (801ccdc <HAL_TIM_Base_Stop+0x38>)
 801ccb4:	4013      	ands	r3, r2
 801ccb6:	d107      	bne.n	801ccc8 <HAL_TIM_Base_Stop+0x24>
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	681a      	ldr	r2, [r3, #0]
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	2101      	movs	r1, #1
 801ccc4:	438a      	bics	r2, r1
 801ccc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	2239      	movs	r2, #57	@ 0x39
 801cccc:	2101      	movs	r1, #1
 801ccce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801ccd0:	2300      	movs	r3, #0
}
 801ccd2:	0018      	movs	r0, r3
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	b002      	add	sp, #8
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	46c0      	nop			@ (mov r8, r8)
 801ccdc:	00001111 	.word	0x00001111

0801cce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b082      	sub	sp, #8
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d101      	bne.n	801ccf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ccee:	2301      	movs	r3, #1
 801ccf0:	e032      	b.n	801cd58 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	2239      	movs	r2, #57	@ 0x39
 801ccf6:	5c9b      	ldrb	r3, [r3, r2]
 801ccf8:	b2db      	uxtb	r3, r3
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d107      	bne.n	801cd0e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	2238      	movs	r2, #56	@ 0x38
 801cd02:	2100      	movs	r1, #0
 801cd04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	0018      	movs	r0, r3
 801cd0a:	f7f6 fdd7 	bl	80138bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	2239      	movs	r2, #57	@ 0x39
 801cd12:	2102      	movs	r1, #2
 801cd14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681a      	ldr	r2, [r3, #0]
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	3304      	adds	r3, #4
 801cd1e:	0019      	movs	r1, r3
 801cd20:	0010      	movs	r0, r2
 801cd22:	f000 f975 	bl	801d010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	223e      	movs	r2, #62	@ 0x3e
 801cd2a:	2101      	movs	r1, #1
 801cd2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	223a      	movs	r2, #58	@ 0x3a
 801cd32:	2101      	movs	r1, #1
 801cd34:	5499      	strb	r1, [r3, r2]
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	223b      	movs	r2, #59	@ 0x3b
 801cd3a:	2101      	movs	r1, #1
 801cd3c:	5499      	strb	r1, [r3, r2]
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	223c      	movs	r2, #60	@ 0x3c
 801cd42:	2101      	movs	r1, #1
 801cd44:	5499      	strb	r1, [r3, r2]
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	223d      	movs	r2, #61	@ 0x3d
 801cd4a:	2101      	movs	r1, #1
 801cd4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	2239      	movs	r2, #57	@ 0x39
 801cd52:	2101      	movs	r1, #1
 801cd54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cd56:	2300      	movs	r3, #0
}
 801cd58:	0018      	movs	r0, r3
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	b002      	add	sp, #8
 801cd5e:	bd80      	pop	{r7, pc}

0801cd60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b084      	sub	sp, #16
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d108      	bne.n	801cd82 <HAL_TIM_PWM_Start+0x22>
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	223a      	movs	r2, #58	@ 0x3a
 801cd74:	5c9b      	ldrb	r3, [r3, r2]
 801cd76:	b2db      	uxtb	r3, r3
 801cd78:	3b01      	subs	r3, #1
 801cd7a:	1e5a      	subs	r2, r3, #1
 801cd7c:	4193      	sbcs	r3, r2
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	e01f      	b.n	801cdc2 <HAL_TIM_PWM_Start+0x62>
 801cd82:	683b      	ldr	r3, [r7, #0]
 801cd84:	2b04      	cmp	r3, #4
 801cd86:	d108      	bne.n	801cd9a <HAL_TIM_PWM_Start+0x3a>
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	223b      	movs	r2, #59	@ 0x3b
 801cd8c:	5c9b      	ldrb	r3, [r3, r2]
 801cd8e:	b2db      	uxtb	r3, r3
 801cd90:	3b01      	subs	r3, #1
 801cd92:	1e5a      	subs	r2, r3, #1
 801cd94:	4193      	sbcs	r3, r2
 801cd96:	b2db      	uxtb	r3, r3
 801cd98:	e013      	b.n	801cdc2 <HAL_TIM_PWM_Start+0x62>
 801cd9a:	683b      	ldr	r3, [r7, #0]
 801cd9c:	2b08      	cmp	r3, #8
 801cd9e:	d108      	bne.n	801cdb2 <HAL_TIM_PWM_Start+0x52>
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	223c      	movs	r2, #60	@ 0x3c
 801cda4:	5c9b      	ldrb	r3, [r3, r2]
 801cda6:	b2db      	uxtb	r3, r3
 801cda8:	3b01      	subs	r3, #1
 801cdaa:	1e5a      	subs	r2, r3, #1
 801cdac:	4193      	sbcs	r3, r2
 801cdae:	b2db      	uxtb	r3, r3
 801cdb0:	e007      	b.n	801cdc2 <HAL_TIM_PWM_Start+0x62>
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	223d      	movs	r2, #61	@ 0x3d
 801cdb6:	5c9b      	ldrb	r3, [r3, r2]
 801cdb8:	b2db      	uxtb	r3, r3
 801cdba:	3b01      	subs	r3, #1
 801cdbc:	1e5a      	subs	r2, r3, #1
 801cdbe:	4193      	sbcs	r3, r2
 801cdc0:	b2db      	uxtb	r3, r3
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d001      	beq.n	801cdca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801cdc6:	2301      	movs	r3, #1
 801cdc8:	e052      	b.n	801ce70 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cdca:	683b      	ldr	r3, [r7, #0]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d104      	bne.n	801cdda <HAL_TIM_PWM_Start+0x7a>
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	223a      	movs	r2, #58	@ 0x3a
 801cdd4:	2102      	movs	r1, #2
 801cdd6:	5499      	strb	r1, [r3, r2]
 801cdd8:	e013      	b.n	801ce02 <HAL_TIM_PWM_Start+0xa2>
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	2b04      	cmp	r3, #4
 801cdde:	d104      	bne.n	801cdea <HAL_TIM_PWM_Start+0x8a>
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	223b      	movs	r2, #59	@ 0x3b
 801cde4:	2102      	movs	r1, #2
 801cde6:	5499      	strb	r1, [r3, r2]
 801cde8:	e00b      	b.n	801ce02 <HAL_TIM_PWM_Start+0xa2>
 801cdea:	683b      	ldr	r3, [r7, #0]
 801cdec:	2b08      	cmp	r3, #8
 801cdee:	d104      	bne.n	801cdfa <HAL_TIM_PWM_Start+0x9a>
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	223c      	movs	r2, #60	@ 0x3c
 801cdf4:	2102      	movs	r1, #2
 801cdf6:	5499      	strb	r1, [r3, r2]
 801cdf8:	e003      	b.n	801ce02 <HAL_TIM_PWM_Start+0xa2>
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	223d      	movs	r2, #61	@ 0x3d
 801cdfe:	2102      	movs	r1, #2
 801ce00:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	6839      	ldr	r1, [r7, #0]
 801ce08:	2201      	movs	r2, #1
 801ce0a:	0018      	movs	r0, r3
 801ce0c:	f000 fa62 	bl	801d2d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	681a      	ldr	r2, [r3, #0]
 801ce14:	2380      	movs	r3, #128	@ 0x80
 801ce16:	05db      	lsls	r3, r3, #23
 801ce18:	429a      	cmp	r2, r3
 801ce1a:	d00e      	beq.n	801ce3a <HAL_TIM_PWM_Start+0xda>
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	4a15      	ldr	r2, [pc, #84]	@ (801ce78 <HAL_TIM_PWM_Start+0x118>)
 801ce22:	4293      	cmp	r3, r2
 801ce24:	d009      	beq.n	801ce3a <HAL_TIM_PWM_Start+0xda>
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	4a14      	ldr	r2, [pc, #80]	@ (801ce7c <HAL_TIM_PWM_Start+0x11c>)
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	d004      	beq.n	801ce3a <HAL_TIM_PWM_Start+0xda>
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	4a12      	ldr	r2, [pc, #72]	@ (801ce80 <HAL_TIM_PWM_Start+0x120>)
 801ce36:	4293      	cmp	r3, r2
 801ce38:	d111      	bne.n	801ce5e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	689b      	ldr	r3, [r3, #8]
 801ce40:	2207      	movs	r2, #7
 801ce42:	4013      	ands	r3, r2
 801ce44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	2b06      	cmp	r3, #6
 801ce4a:	d010      	beq.n	801ce6e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	681a      	ldr	r2, [r3, #0]
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	2101      	movs	r1, #1
 801ce58:	430a      	orrs	r2, r1
 801ce5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce5c:	e007      	b.n	801ce6e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	681a      	ldr	r2, [r3, #0]
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	2101      	movs	r1, #1
 801ce6a:	430a      	orrs	r2, r1
 801ce6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ce6e:	2300      	movs	r3, #0
}
 801ce70:	0018      	movs	r0, r3
 801ce72:	46bd      	mov	sp, r7
 801ce74:	b004      	add	sp, #16
 801ce76:	bd80      	pop	{r7, pc}
 801ce78:	40000400 	.word	0x40000400
 801ce7c:	40010800 	.word	0x40010800
 801ce80:	40011400 	.word	0x40011400

0801ce84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b086      	sub	sp, #24
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	60f8      	str	r0, [r7, #12]
 801ce8c:	60b9      	str	r1, [r7, #8]
 801ce8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ce90:	2317      	movs	r3, #23
 801ce92:	18fb      	adds	r3, r7, r3
 801ce94:	2200      	movs	r2, #0
 801ce96:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	2238      	movs	r2, #56	@ 0x38
 801ce9c:	5c9b      	ldrb	r3, [r3, r2]
 801ce9e:	2b01      	cmp	r3, #1
 801cea0:	d101      	bne.n	801cea6 <HAL_TIM_PWM_ConfigChannel+0x22>
 801cea2:	2302      	movs	r3, #2
 801cea4:	e0ad      	b.n	801d002 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	2238      	movs	r2, #56	@ 0x38
 801ceaa:	2101      	movs	r1, #1
 801ceac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	2b0c      	cmp	r3, #12
 801ceb2:	d100      	bne.n	801ceb6 <HAL_TIM_PWM_ConfigChannel+0x32>
 801ceb4:	e076      	b.n	801cfa4 <HAL_TIM_PWM_ConfigChannel+0x120>
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	2b0c      	cmp	r3, #12
 801ceba:	d900      	bls.n	801cebe <HAL_TIM_PWM_ConfigChannel+0x3a>
 801cebc:	e095      	b.n	801cfea <HAL_TIM_PWM_ConfigChannel+0x166>
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	2b08      	cmp	r3, #8
 801cec2:	d04e      	beq.n	801cf62 <HAL_TIM_PWM_ConfigChannel+0xde>
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	2b08      	cmp	r3, #8
 801cec8:	d900      	bls.n	801cecc <HAL_TIM_PWM_ConfigChannel+0x48>
 801ceca:	e08e      	b.n	801cfea <HAL_TIM_PWM_ConfigChannel+0x166>
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d003      	beq.n	801ceda <HAL_TIM_PWM_ConfigChannel+0x56>
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2b04      	cmp	r3, #4
 801ced6:	d021      	beq.n	801cf1c <HAL_TIM_PWM_ConfigChannel+0x98>
 801ced8:	e087      	b.n	801cfea <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	68ba      	ldr	r2, [r7, #8]
 801cee0:	0011      	movs	r1, r2
 801cee2:	0018      	movs	r0, r3
 801cee4:	f000 f8f2 	bl	801d0cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	699a      	ldr	r2, [r3, #24]
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	2108      	movs	r1, #8
 801cef4:	430a      	orrs	r2, r1
 801cef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	699a      	ldr	r2, [r3, #24]
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	2104      	movs	r1, #4
 801cf04:	438a      	bics	r2, r1
 801cf06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	6999      	ldr	r1, [r3, #24]
 801cf0e:	68bb      	ldr	r3, [r7, #8]
 801cf10:	68da      	ldr	r2, [r3, #12]
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	430a      	orrs	r2, r1
 801cf18:	619a      	str	r2, [r3, #24]
      break;
 801cf1a:	e06b      	b.n	801cff4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	68ba      	ldr	r2, [r7, #8]
 801cf22:	0011      	movs	r1, r2
 801cf24:	0018      	movs	r0, r3
 801cf26:	f000 f90d 	bl	801d144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	699a      	ldr	r2, [r3, #24]
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	2180      	movs	r1, #128	@ 0x80
 801cf36:	0109      	lsls	r1, r1, #4
 801cf38:	430a      	orrs	r2, r1
 801cf3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	699a      	ldr	r2, [r3, #24]
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	4931      	ldr	r1, [pc, #196]	@ (801d00c <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cf48:	400a      	ands	r2, r1
 801cf4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801cf4c:	68fb      	ldr	r3, [r7, #12]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	6999      	ldr	r1, [r3, #24]
 801cf52:	68bb      	ldr	r3, [r7, #8]
 801cf54:	68db      	ldr	r3, [r3, #12]
 801cf56:	021a      	lsls	r2, r3, #8
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	430a      	orrs	r2, r1
 801cf5e:	619a      	str	r2, [r3, #24]
      break;
 801cf60:	e048      	b.n	801cff4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	68ba      	ldr	r2, [r7, #8]
 801cf68:	0011      	movs	r1, r2
 801cf6a:	0018      	movs	r0, r3
 801cf6c:	f000 f92c 	bl	801d1c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	69da      	ldr	r2, [r3, #28]
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	2108      	movs	r1, #8
 801cf7c:	430a      	orrs	r2, r1
 801cf7e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	69da      	ldr	r2, [r3, #28]
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	2104      	movs	r1, #4
 801cf8c:	438a      	bics	r2, r1
 801cf8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	69d9      	ldr	r1, [r3, #28]
 801cf96:	68bb      	ldr	r3, [r7, #8]
 801cf98:	68da      	ldr	r2, [r3, #12]
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	430a      	orrs	r2, r1
 801cfa0:	61da      	str	r2, [r3, #28]
      break;
 801cfa2:	e027      	b.n	801cff4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	68ba      	ldr	r2, [r7, #8]
 801cfaa:	0011      	movs	r1, r2
 801cfac:	0018      	movs	r0, r3
 801cfae:	f000 f94b 	bl	801d248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	69da      	ldr	r2, [r3, #28]
 801cfb8:	68fb      	ldr	r3, [r7, #12]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	2180      	movs	r1, #128	@ 0x80
 801cfbe:	0109      	lsls	r1, r1, #4
 801cfc0:	430a      	orrs	r2, r1
 801cfc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	69da      	ldr	r2, [r3, #28]
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	490f      	ldr	r1, [pc, #60]	@ (801d00c <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cfd0:	400a      	ands	r2, r1
 801cfd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	69d9      	ldr	r1, [r3, #28]
 801cfda:	68bb      	ldr	r3, [r7, #8]
 801cfdc:	68db      	ldr	r3, [r3, #12]
 801cfde:	021a      	lsls	r2, r3, #8
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	430a      	orrs	r2, r1
 801cfe6:	61da      	str	r2, [r3, #28]
      break;
 801cfe8:	e004      	b.n	801cff4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801cfea:	2317      	movs	r3, #23
 801cfec:	18fb      	adds	r3, r7, r3
 801cfee:	2201      	movs	r2, #1
 801cff0:	701a      	strb	r2, [r3, #0]
      break;
 801cff2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	2238      	movs	r2, #56	@ 0x38
 801cff8:	2100      	movs	r1, #0
 801cffa:	5499      	strb	r1, [r3, r2]

  return status;
 801cffc:	2317      	movs	r3, #23
 801cffe:	18fb      	adds	r3, r7, r3
 801d000:	781b      	ldrb	r3, [r3, #0]
}
 801d002:	0018      	movs	r0, r3
 801d004:	46bd      	mov	sp, r7
 801d006:	b006      	add	sp, #24
 801d008:	bd80      	pop	{r7, pc}
 801d00a:	46c0      	nop			@ (mov r8, r8)
 801d00c:	fffffbff 	.word	0xfffffbff

0801d010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b084      	sub	sp, #16
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
 801d018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d020:	687a      	ldr	r2, [r7, #4]
 801d022:	2380      	movs	r3, #128	@ 0x80
 801d024:	05db      	lsls	r3, r3, #23
 801d026:	429a      	cmp	r2, r3
 801d028:	d00b      	beq.n	801d042 <TIM_Base_SetConfig+0x32>
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	4a23      	ldr	r2, [pc, #140]	@ (801d0bc <TIM_Base_SetConfig+0xac>)
 801d02e:	4293      	cmp	r3, r2
 801d030:	d007      	beq.n	801d042 <TIM_Base_SetConfig+0x32>
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	4a22      	ldr	r2, [pc, #136]	@ (801d0c0 <TIM_Base_SetConfig+0xb0>)
 801d036:	4293      	cmp	r3, r2
 801d038:	d003      	beq.n	801d042 <TIM_Base_SetConfig+0x32>
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	4a21      	ldr	r2, [pc, #132]	@ (801d0c4 <TIM_Base_SetConfig+0xb4>)
 801d03e:	4293      	cmp	r3, r2
 801d040:	d108      	bne.n	801d054 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	2270      	movs	r2, #112	@ 0x70
 801d046:	4393      	bics	r3, r2
 801d048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	685b      	ldr	r3, [r3, #4]
 801d04e:	68fa      	ldr	r2, [r7, #12]
 801d050:	4313      	orrs	r3, r2
 801d052:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d054:	687a      	ldr	r2, [r7, #4]
 801d056:	2380      	movs	r3, #128	@ 0x80
 801d058:	05db      	lsls	r3, r3, #23
 801d05a:	429a      	cmp	r2, r3
 801d05c:	d00b      	beq.n	801d076 <TIM_Base_SetConfig+0x66>
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	4a16      	ldr	r2, [pc, #88]	@ (801d0bc <TIM_Base_SetConfig+0xac>)
 801d062:	4293      	cmp	r3, r2
 801d064:	d007      	beq.n	801d076 <TIM_Base_SetConfig+0x66>
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	4a15      	ldr	r2, [pc, #84]	@ (801d0c0 <TIM_Base_SetConfig+0xb0>)
 801d06a:	4293      	cmp	r3, r2
 801d06c:	d003      	beq.n	801d076 <TIM_Base_SetConfig+0x66>
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	4a14      	ldr	r2, [pc, #80]	@ (801d0c4 <TIM_Base_SetConfig+0xb4>)
 801d072:	4293      	cmp	r3, r2
 801d074:	d108      	bne.n	801d088 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	4a13      	ldr	r2, [pc, #76]	@ (801d0c8 <TIM_Base_SetConfig+0xb8>)
 801d07a:	4013      	ands	r3, r2
 801d07c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d07e:	683b      	ldr	r3, [r7, #0]
 801d080:	68db      	ldr	r3, [r3, #12]
 801d082:	68fa      	ldr	r2, [r7, #12]
 801d084:	4313      	orrs	r3, r2
 801d086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	2280      	movs	r2, #128	@ 0x80
 801d08c:	4393      	bics	r3, r2
 801d08e:	001a      	movs	r2, r3
 801d090:	683b      	ldr	r3, [r7, #0]
 801d092:	691b      	ldr	r3, [r3, #16]
 801d094:	4313      	orrs	r3, r2
 801d096:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	68fa      	ldr	r2, [r7, #12]
 801d09c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d09e:	683b      	ldr	r3, [r7, #0]
 801d0a0:	689a      	ldr	r2, [r3, #8]
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d0a6:	683b      	ldr	r3, [r7, #0]
 801d0a8:	681a      	ldr	r2, [r3, #0]
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	2201      	movs	r2, #1
 801d0b2:	615a      	str	r2, [r3, #20]
}
 801d0b4:	46c0      	nop			@ (mov r8, r8)
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	b004      	add	sp, #16
 801d0ba:	bd80      	pop	{r7, pc}
 801d0bc:	40000400 	.word	0x40000400
 801d0c0:	40010800 	.word	0x40010800
 801d0c4:	40011400 	.word	0x40011400
 801d0c8:	fffffcff 	.word	0xfffffcff

0801d0cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b086      	sub	sp, #24
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
 801d0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	6a1b      	ldr	r3, [r3, #32]
 801d0da:	2201      	movs	r2, #1
 801d0dc:	4393      	bics	r3, r2
 801d0de:	001a      	movs	r2, r3
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	6a1b      	ldr	r3, [r3, #32]
 801d0e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	685b      	ldr	r3, [r3, #4]
 801d0ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	699b      	ldr	r3, [r3, #24]
 801d0f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	2270      	movs	r2, #112	@ 0x70
 801d0fa:	4393      	bics	r3, r2
 801d0fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d0fe:	68fb      	ldr	r3, [r7, #12]
 801d100:	2203      	movs	r2, #3
 801d102:	4393      	bics	r3, r2
 801d104:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d106:	683b      	ldr	r3, [r7, #0]
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	68fa      	ldr	r2, [r7, #12]
 801d10c:	4313      	orrs	r3, r2
 801d10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d110:	697b      	ldr	r3, [r7, #20]
 801d112:	2202      	movs	r2, #2
 801d114:	4393      	bics	r3, r2
 801d116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d118:	683b      	ldr	r3, [r7, #0]
 801d11a:	689b      	ldr	r3, [r3, #8]
 801d11c:	697a      	ldr	r2, [r7, #20]
 801d11e:	4313      	orrs	r3, r2
 801d120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	693a      	ldr	r2, [r7, #16]
 801d126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	68fa      	ldr	r2, [r7, #12]
 801d12c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	685a      	ldr	r2, [r3, #4]
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	697a      	ldr	r2, [r7, #20]
 801d13a:	621a      	str	r2, [r3, #32]
}
 801d13c:	46c0      	nop			@ (mov r8, r8)
 801d13e:	46bd      	mov	sp, r7
 801d140:	b006      	add	sp, #24
 801d142:	bd80      	pop	{r7, pc}

0801d144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b086      	sub	sp, #24
 801d148:	af00      	add	r7, sp, #0
 801d14a:	6078      	str	r0, [r7, #4]
 801d14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	6a1b      	ldr	r3, [r3, #32]
 801d152:	2210      	movs	r2, #16
 801d154:	4393      	bics	r3, r2
 801d156:	001a      	movs	r2, r3
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	6a1b      	ldr	r3, [r3, #32]
 801d160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	685b      	ldr	r3, [r3, #4]
 801d166:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	699b      	ldr	r3, [r3, #24]
 801d16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d16e:	68fb      	ldr	r3, [r7, #12]
 801d170:	4a13      	ldr	r2, [pc, #76]	@ (801d1c0 <TIM_OC2_SetConfig+0x7c>)
 801d172:	4013      	ands	r3, r2
 801d174:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d176:	68fb      	ldr	r3, [r7, #12]
 801d178:	4a12      	ldr	r2, [pc, #72]	@ (801d1c4 <TIM_OC2_SetConfig+0x80>)
 801d17a:	4013      	ands	r3, r2
 801d17c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d17e:	683b      	ldr	r3, [r7, #0]
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	021b      	lsls	r3, r3, #8
 801d184:	68fa      	ldr	r2, [r7, #12]
 801d186:	4313      	orrs	r3, r2
 801d188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d18a:	697b      	ldr	r3, [r7, #20]
 801d18c:	2220      	movs	r2, #32
 801d18e:	4393      	bics	r3, r2
 801d190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d192:	683b      	ldr	r3, [r7, #0]
 801d194:	689b      	ldr	r3, [r3, #8]
 801d196:	011b      	lsls	r3, r3, #4
 801d198:	697a      	ldr	r2, [r7, #20]
 801d19a:	4313      	orrs	r3, r2
 801d19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	693a      	ldr	r2, [r7, #16]
 801d1a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	68fa      	ldr	r2, [r7, #12]
 801d1a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d1aa:	683b      	ldr	r3, [r7, #0]
 801d1ac:	685a      	ldr	r2, [r3, #4]
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	697a      	ldr	r2, [r7, #20]
 801d1b6:	621a      	str	r2, [r3, #32]
}
 801d1b8:	46c0      	nop			@ (mov r8, r8)
 801d1ba:	46bd      	mov	sp, r7
 801d1bc:	b006      	add	sp, #24
 801d1be:	bd80      	pop	{r7, pc}
 801d1c0:	ffff8fff 	.word	0xffff8fff
 801d1c4:	fffffcff 	.word	0xfffffcff

0801d1c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b086      	sub	sp, #24
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	6078      	str	r0, [r7, #4]
 801d1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	6a1b      	ldr	r3, [r3, #32]
 801d1d6:	4a1a      	ldr	r2, [pc, #104]	@ (801d240 <TIM_OC3_SetConfig+0x78>)
 801d1d8:	401a      	ands	r2, r3
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	6a1b      	ldr	r3, [r3, #32]
 801d1e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	685b      	ldr	r3, [r3, #4]
 801d1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	69db      	ldr	r3, [r3, #28]
 801d1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	2270      	movs	r2, #112	@ 0x70
 801d1f4:	4393      	bics	r3, r2
 801d1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	2203      	movs	r2, #3
 801d1fc:	4393      	bics	r3, r2
 801d1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d200:	683b      	ldr	r3, [r7, #0]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	68fa      	ldr	r2, [r7, #12]
 801d206:	4313      	orrs	r3, r2
 801d208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d20a:	697b      	ldr	r3, [r7, #20]
 801d20c:	4a0d      	ldr	r2, [pc, #52]	@ (801d244 <TIM_OC3_SetConfig+0x7c>)
 801d20e:	4013      	ands	r3, r2
 801d210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d212:	683b      	ldr	r3, [r7, #0]
 801d214:	689b      	ldr	r3, [r3, #8]
 801d216:	021b      	lsls	r3, r3, #8
 801d218:	697a      	ldr	r2, [r7, #20]
 801d21a:	4313      	orrs	r3, r2
 801d21c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	693a      	ldr	r2, [r7, #16]
 801d222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	68fa      	ldr	r2, [r7, #12]
 801d228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d22a:	683b      	ldr	r3, [r7, #0]
 801d22c:	685a      	ldr	r2, [r3, #4]
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	697a      	ldr	r2, [r7, #20]
 801d236:	621a      	str	r2, [r3, #32]
}
 801d238:	46c0      	nop			@ (mov r8, r8)
 801d23a:	46bd      	mov	sp, r7
 801d23c:	b006      	add	sp, #24
 801d23e:	bd80      	pop	{r7, pc}
 801d240:	fffffeff 	.word	0xfffffeff
 801d244:	fffffdff 	.word	0xfffffdff

0801d248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d248:	b580      	push	{r7, lr}
 801d24a:	b086      	sub	sp, #24
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	6078      	str	r0, [r7, #4]
 801d250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	6a1b      	ldr	r3, [r3, #32]
 801d256:	4a1b      	ldr	r2, [pc, #108]	@ (801d2c4 <TIM_OC4_SetConfig+0x7c>)
 801d258:	401a      	ands	r2, r3
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	6a1b      	ldr	r3, [r3, #32]
 801d262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	685b      	ldr	r3, [r3, #4]
 801d268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	69db      	ldr	r3, [r3, #28]
 801d26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	4a15      	ldr	r2, [pc, #84]	@ (801d2c8 <TIM_OC4_SetConfig+0x80>)
 801d274:	4013      	ands	r3, r2
 801d276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	4a14      	ldr	r2, [pc, #80]	@ (801d2cc <TIM_OC4_SetConfig+0x84>)
 801d27c:	4013      	ands	r3, r2
 801d27e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d280:	683b      	ldr	r3, [r7, #0]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	021b      	lsls	r3, r3, #8
 801d286:	68fa      	ldr	r2, [r7, #12]
 801d288:	4313      	orrs	r3, r2
 801d28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d28c:	697b      	ldr	r3, [r7, #20]
 801d28e:	4a10      	ldr	r2, [pc, #64]	@ (801d2d0 <TIM_OC4_SetConfig+0x88>)
 801d290:	4013      	ands	r3, r2
 801d292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d294:	683b      	ldr	r3, [r7, #0]
 801d296:	689b      	ldr	r3, [r3, #8]
 801d298:	031b      	lsls	r3, r3, #12
 801d29a:	697a      	ldr	r2, [r7, #20]
 801d29c:	4313      	orrs	r3, r2
 801d29e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	693a      	ldr	r2, [r7, #16]
 801d2a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	68fa      	ldr	r2, [r7, #12]
 801d2aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d2ac:	683b      	ldr	r3, [r7, #0]
 801d2ae:	685a      	ldr	r2, [r3, #4]
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	697a      	ldr	r2, [r7, #20]
 801d2b8:	621a      	str	r2, [r3, #32]
}
 801d2ba:	46c0      	nop			@ (mov r8, r8)
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	b006      	add	sp, #24
 801d2c0:	bd80      	pop	{r7, pc}
 801d2c2:	46c0      	nop			@ (mov r8, r8)
 801d2c4:	ffffefff 	.word	0xffffefff
 801d2c8:	ffff8fff 	.word	0xffff8fff
 801d2cc:	fffffcff 	.word	0xfffffcff
 801d2d0:	ffffdfff 	.word	0xffffdfff

0801d2d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b086      	sub	sp, #24
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	60f8      	str	r0, [r7, #12]
 801d2dc:	60b9      	str	r1, [r7, #8]
 801d2de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d2e0:	68bb      	ldr	r3, [r7, #8]
 801d2e2:	221f      	movs	r2, #31
 801d2e4:	4013      	ands	r3, r2
 801d2e6:	2201      	movs	r2, #1
 801d2e8:	409a      	lsls	r2, r3
 801d2ea:	0013      	movs	r3, r2
 801d2ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	6a1b      	ldr	r3, [r3, #32]
 801d2f2:	697a      	ldr	r2, [r7, #20]
 801d2f4:	43d2      	mvns	r2, r2
 801d2f6:	401a      	ands	r2, r3
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	6a1a      	ldr	r2, [r3, #32]
 801d300:	68bb      	ldr	r3, [r7, #8]
 801d302:	211f      	movs	r1, #31
 801d304:	400b      	ands	r3, r1
 801d306:	6879      	ldr	r1, [r7, #4]
 801d308:	4099      	lsls	r1, r3
 801d30a:	000b      	movs	r3, r1
 801d30c:	431a      	orrs	r2, r3
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	621a      	str	r2, [r3, #32]
}
 801d312:	46c0      	nop			@ (mov r8, r8)
 801d314:	46bd      	mov	sp, r7
 801d316:	b006      	add	sp, #24
 801d318:	bd80      	pop	{r7, pc}
	...

0801d31c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d31c:	b580      	push	{r7, lr}
 801d31e:	b084      	sub	sp, #16
 801d320:	af00      	add	r7, sp, #0
 801d322:	6078      	str	r0, [r7, #4]
 801d324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	2238      	movs	r2, #56	@ 0x38
 801d32a:	5c9b      	ldrb	r3, [r3, r2]
 801d32c:	2b01      	cmp	r3, #1
 801d32e:	d101      	bne.n	801d334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d330:	2302      	movs	r3, #2
 801d332:	e047      	b.n	801d3c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	2238      	movs	r2, #56	@ 0x38
 801d338:	2101      	movs	r1, #1
 801d33a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	2239      	movs	r2, #57	@ 0x39
 801d340:	2102      	movs	r1, #2
 801d342:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	685b      	ldr	r3, [r3, #4]
 801d34a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	689b      	ldr	r3, [r3, #8]
 801d352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	2270      	movs	r2, #112	@ 0x70
 801d358:	4393      	bics	r3, r2
 801d35a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d35c:	683b      	ldr	r3, [r7, #0]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	68fa      	ldr	r2, [r7, #12]
 801d362:	4313      	orrs	r3, r2
 801d364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	68fa      	ldr	r2, [r7, #12]
 801d36c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	681a      	ldr	r2, [r3, #0]
 801d372:	2380      	movs	r3, #128	@ 0x80
 801d374:	05db      	lsls	r3, r3, #23
 801d376:	429a      	cmp	r2, r3
 801d378:	d00e      	beq.n	801d398 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	4a13      	ldr	r2, [pc, #76]	@ (801d3cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d380:	4293      	cmp	r3, r2
 801d382:	d009      	beq.n	801d398 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	4a11      	ldr	r2, [pc, #68]	@ (801d3d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d38a:	4293      	cmp	r3, r2
 801d38c:	d004      	beq.n	801d398 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	4a10      	ldr	r2, [pc, #64]	@ (801d3d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d394:	4293      	cmp	r3, r2
 801d396:	d10c      	bne.n	801d3b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d398:	68bb      	ldr	r3, [r7, #8]
 801d39a:	2280      	movs	r2, #128	@ 0x80
 801d39c:	4393      	bics	r3, r2
 801d39e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d3a0:	683b      	ldr	r3, [r7, #0]
 801d3a2:	685b      	ldr	r3, [r3, #4]
 801d3a4:	68ba      	ldr	r2, [r7, #8]
 801d3a6:	4313      	orrs	r3, r2
 801d3a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	68ba      	ldr	r2, [r7, #8]
 801d3b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	2239      	movs	r2, #57	@ 0x39
 801d3b6:	2101      	movs	r1, #1
 801d3b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	2238      	movs	r2, #56	@ 0x38
 801d3be:	2100      	movs	r1, #0
 801d3c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d3c2:	2300      	movs	r3, #0
}
 801d3c4:	0018      	movs	r0, r3
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	b004      	add	sp, #16
 801d3ca:	bd80      	pop	{r7, pc}
 801d3cc:	40000400 	.word	0x40000400
 801d3d0:	40010800 	.word	0x40010800
 801d3d4:	40011400 	.word	0x40011400

0801d3d8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d3d8:	b580      	push	{r7, lr}
 801d3da:	b082      	sub	sp, #8
 801d3dc:	af00      	add	r7, sp, #0
 801d3de:	6078      	str	r0, [r7, #4]
 801d3e0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	2238      	movs	r2, #56	@ 0x38
 801d3e6:	5c9b      	ldrb	r3, [r3, r2]
 801d3e8:	2b01      	cmp	r3, #1
 801d3ea:	d101      	bne.n	801d3f0 <HAL_TIMEx_RemapConfig+0x18>
 801d3ec:	2302      	movs	r3, #2
 801d3ee:	e00c      	b.n	801d40a <HAL_TIMEx_RemapConfig+0x32>
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	2238      	movs	r2, #56	@ 0x38
 801d3f4:	2101      	movs	r1, #1
 801d3f6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	683a      	ldr	r2, [r7, #0]
 801d3fe:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	2238      	movs	r2, #56	@ 0x38
 801d404:	2100      	movs	r1, #0
 801d406:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d408:	2300      	movs	r3, #0
}
 801d40a:	0018      	movs	r0, r3
 801d40c:	46bd      	mov	sp, r7
 801d40e:	b002      	add	sp, #8
 801d410:	bd80      	pop	{r7, pc}
	...

0801d414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d414:	b580      	push	{r7, lr}
 801d416:	b082      	sub	sp, #8
 801d418:	af00      	add	r7, sp, #0
 801d41a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d101      	bne.n	801d426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d422:	2301      	movs	r3, #1
 801d424:	e053      	b.n	801d4ce <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d116      	bne.n	801d45c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	2278      	movs	r2, #120	@ 0x78
 801d432:	2100      	movs	r1, #0
 801d434:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	0018      	movs	r0, r3
 801d43a:	f000 fe5b 	bl	801e0f4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	22b0      	movs	r2, #176	@ 0xb0
 801d442:	589b      	ldr	r3, [r3, r2]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d103      	bne.n	801d450 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	21b0      	movs	r1, #176	@ 0xb0
 801d44c:	4a22      	ldr	r2, [pc, #136]	@ (801d4d8 <HAL_UART_Init+0xc4>)
 801d44e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	22b0      	movs	r2, #176	@ 0xb0
 801d454:	589b      	ldr	r3, [r3, r2]
 801d456:	687a      	ldr	r2, [r7, #4]
 801d458:	0010      	movs	r0, r2
 801d45a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	2224      	movs	r2, #36	@ 0x24
 801d460:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	681a      	ldr	r2, [r3, #0]
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	2101      	movs	r1, #1
 801d46e:	438a      	bics	r2, r1
 801d470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	0018      	movs	r0, r3
 801d476:	f000 fe81 	bl	801e17c <UART_SetConfig>
 801d47a:	0003      	movs	r3, r0
 801d47c:	2b01      	cmp	r3, #1
 801d47e:	d101      	bne.n	801d484 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d480:	2301      	movs	r3, #1
 801d482:	e024      	b.n	801d4ce <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d003      	beq.n	801d494 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	0018      	movs	r0, r3
 801d490:	f001 f912 	bl	801e6b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	685a      	ldr	r2, [r3, #4]
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	490f      	ldr	r1, [pc, #60]	@ (801d4dc <HAL_UART_Init+0xc8>)
 801d4a0:	400a      	ands	r2, r1
 801d4a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	689a      	ldr	r2, [r3, #8]
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	212a      	movs	r1, #42	@ 0x2a
 801d4b0:	438a      	bics	r2, r1
 801d4b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	681a      	ldr	r2, [r3, #0]
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	2101      	movs	r1, #1
 801d4c0:	430a      	orrs	r2, r1
 801d4c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	0018      	movs	r0, r3
 801d4c8:	f001 f9aa 	bl	801e820 <UART_CheckIdleState>
 801d4cc:	0003      	movs	r3, r0
}
 801d4ce:	0018      	movs	r0, r3
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	b002      	add	sp, #8
 801d4d4:	bd80      	pop	{r7, pc}
 801d4d6:	46c0      	nop			@ (mov r8, r8)
 801d4d8:	08013b79 	.word	0x08013b79
 801d4dc:	ffffb7ff 	.word	0xffffb7ff

0801d4e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d4e0:	b580      	push	{r7, lr}
 801d4e2:	b08a      	sub	sp, #40	@ 0x28
 801d4e4:	af02      	add	r7, sp, #8
 801d4e6:	60f8      	str	r0, [r7, #12]
 801d4e8:	60b9      	str	r1, [r7, #8]
 801d4ea:	603b      	str	r3, [r7, #0]
 801d4ec:	1dbb      	adds	r3, r7, #6
 801d4ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d4f4:	2b20      	cmp	r3, #32
 801d4f6:	d000      	beq.n	801d4fa <HAL_UART_Transmit+0x1a>
 801d4f8:	e08c      	b.n	801d614 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d4fa:	68bb      	ldr	r3, [r7, #8]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d003      	beq.n	801d508 <HAL_UART_Transmit+0x28>
 801d500:	1dbb      	adds	r3, r7, #6
 801d502:	881b      	ldrh	r3, [r3, #0]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d101      	bne.n	801d50c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d508:	2301      	movs	r3, #1
 801d50a:	e084      	b.n	801d616 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	689a      	ldr	r2, [r3, #8]
 801d510:	2380      	movs	r3, #128	@ 0x80
 801d512:	015b      	lsls	r3, r3, #5
 801d514:	429a      	cmp	r2, r3
 801d516:	d109      	bne.n	801d52c <HAL_UART_Transmit+0x4c>
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	691b      	ldr	r3, [r3, #16]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d105      	bne.n	801d52c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d520:	68bb      	ldr	r3, [r7, #8]
 801d522:	2201      	movs	r2, #1
 801d524:	4013      	ands	r3, r2
 801d526:	d001      	beq.n	801d52c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d528:	2301      	movs	r3, #1
 801d52a:	e074      	b.n	801d616 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	2284      	movs	r2, #132	@ 0x84
 801d530:	2100      	movs	r1, #0
 801d532:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	2221      	movs	r2, #33	@ 0x21
 801d538:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d53a:	f7f7 fa2b 	bl	8014994 <HAL_GetTick>
 801d53e:	0003      	movs	r3, r0
 801d540:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	1dba      	adds	r2, r7, #6
 801d546:	2150      	movs	r1, #80	@ 0x50
 801d548:	8812      	ldrh	r2, [r2, #0]
 801d54a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	1dba      	adds	r2, r7, #6
 801d550:	2152      	movs	r1, #82	@ 0x52
 801d552:	8812      	ldrh	r2, [r2, #0]
 801d554:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	689a      	ldr	r2, [r3, #8]
 801d55a:	2380      	movs	r3, #128	@ 0x80
 801d55c:	015b      	lsls	r3, r3, #5
 801d55e:	429a      	cmp	r2, r3
 801d560:	d108      	bne.n	801d574 <HAL_UART_Transmit+0x94>
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	691b      	ldr	r3, [r3, #16]
 801d566:	2b00      	cmp	r3, #0
 801d568:	d104      	bne.n	801d574 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d56a:	2300      	movs	r3, #0
 801d56c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d56e:	68bb      	ldr	r3, [r7, #8]
 801d570:	61bb      	str	r3, [r7, #24]
 801d572:	e003      	b.n	801d57c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d574:	68bb      	ldr	r3, [r7, #8]
 801d576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d578:	2300      	movs	r3, #0
 801d57a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d57c:	e02f      	b.n	801d5de <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d57e:	697a      	ldr	r2, [r7, #20]
 801d580:	68f8      	ldr	r0, [r7, #12]
 801d582:	683b      	ldr	r3, [r7, #0]
 801d584:	9300      	str	r3, [sp, #0]
 801d586:	0013      	movs	r3, r2
 801d588:	2200      	movs	r2, #0
 801d58a:	2180      	movs	r1, #128	@ 0x80
 801d58c:	f001 f9f0 	bl	801e970 <UART_WaitOnFlagUntilTimeout>
 801d590:	1e03      	subs	r3, r0, #0
 801d592:	d004      	beq.n	801d59e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	2220      	movs	r2, #32
 801d598:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d59a:	2303      	movs	r3, #3
 801d59c:	e03b      	b.n	801d616 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d59e:	69fb      	ldr	r3, [r7, #28]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d10b      	bne.n	801d5bc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d5a4:	69bb      	ldr	r3, [r7, #24]
 801d5a6:	881b      	ldrh	r3, [r3, #0]
 801d5a8:	001a      	movs	r2, r3
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	05d2      	lsls	r2, r2, #23
 801d5b0:	0dd2      	lsrs	r2, r2, #23
 801d5b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d5b4:	69bb      	ldr	r3, [r7, #24]
 801d5b6:	3302      	adds	r3, #2
 801d5b8:	61bb      	str	r3, [r7, #24]
 801d5ba:	e007      	b.n	801d5cc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d5bc:	69fb      	ldr	r3, [r7, #28]
 801d5be:	781a      	ldrb	r2, [r3, #0]
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d5c6:	69fb      	ldr	r3, [r7, #28]
 801d5c8:	3301      	adds	r3, #1
 801d5ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	2252      	movs	r2, #82	@ 0x52
 801d5d0:	5a9b      	ldrh	r3, [r3, r2]
 801d5d2:	b29b      	uxth	r3, r3
 801d5d4:	3b01      	subs	r3, #1
 801d5d6:	b299      	uxth	r1, r3
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	2252      	movs	r2, #82	@ 0x52
 801d5dc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	2252      	movs	r2, #82	@ 0x52
 801d5e2:	5a9b      	ldrh	r3, [r3, r2]
 801d5e4:	b29b      	uxth	r3, r3
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d1c9      	bne.n	801d57e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d5ea:	697a      	ldr	r2, [r7, #20]
 801d5ec:	68f8      	ldr	r0, [r7, #12]
 801d5ee:	683b      	ldr	r3, [r7, #0]
 801d5f0:	9300      	str	r3, [sp, #0]
 801d5f2:	0013      	movs	r3, r2
 801d5f4:	2200      	movs	r2, #0
 801d5f6:	2140      	movs	r1, #64	@ 0x40
 801d5f8:	f001 f9ba 	bl	801e970 <UART_WaitOnFlagUntilTimeout>
 801d5fc:	1e03      	subs	r3, r0, #0
 801d5fe:	d004      	beq.n	801d60a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	2220      	movs	r2, #32
 801d604:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d606:	2303      	movs	r3, #3
 801d608:	e005      	b.n	801d616 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	2220      	movs	r2, #32
 801d60e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d610:	2300      	movs	r3, #0
 801d612:	e000      	b.n	801d616 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d614:	2302      	movs	r3, #2
  }
}
 801d616:	0018      	movs	r0, r3
 801d618:	46bd      	mov	sp, r7
 801d61a:	b008      	add	sp, #32
 801d61c:	bd80      	pop	{r7, pc}
	...

0801d620 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d620:	b580      	push	{r7, lr}
 801d622:	b088      	sub	sp, #32
 801d624:	af00      	add	r7, sp, #0
 801d626:	60f8      	str	r0, [r7, #12]
 801d628:	60b9      	str	r1, [r7, #8]
 801d62a:	1dbb      	adds	r3, r7, #6
 801d62c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	2280      	movs	r2, #128	@ 0x80
 801d632:	589b      	ldr	r3, [r3, r2]
 801d634:	2b20      	cmp	r3, #32
 801d636:	d14a      	bne.n	801d6ce <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d638:	68bb      	ldr	r3, [r7, #8]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d003      	beq.n	801d646 <HAL_UART_Receive_IT+0x26>
 801d63e:	1dbb      	adds	r3, r7, #6
 801d640:	881b      	ldrh	r3, [r3, #0]
 801d642:	2b00      	cmp	r3, #0
 801d644:	d101      	bne.n	801d64a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d646:	2301      	movs	r3, #1
 801d648:	e042      	b.n	801d6d0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	689a      	ldr	r2, [r3, #8]
 801d64e:	2380      	movs	r3, #128	@ 0x80
 801d650:	015b      	lsls	r3, r3, #5
 801d652:	429a      	cmp	r2, r3
 801d654:	d109      	bne.n	801d66a <HAL_UART_Receive_IT+0x4a>
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	691b      	ldr	r3, [r3, #16]
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d105      	bne.n	801d66a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d65e:	68bb      	ldr	r3, [r7, #8]
 801d660:	2201      	movs	r2, #1
 801d662:	4013      	ands	r3, r2
 801d664:	d001      	beq.n	801d66a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d666:	2301      	movs	r3, #1
 801d668:	e032      	b.n	801d6d0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	2200      	movs	r2, #0
 801d66e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	681b      	ldr	r3, [r3, #0]
 801d674:	4a18      	ldr	r2, [pc, #96]	@ (801d6d8 <HAL_UART_Receive_IT+0xb8>)
 801d676:	4293      	cmp	r3, r2
 801d678:	d020      	beq.n	801d6bc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	685a      	ldr	r2, [r3, #4]
 801d680:	2380      	movs	r3, #128	@ 0x80
 801d682:	041b      	lsls	r3, r3, #16
 801d684:	4013      	ands	r3, r2
 801d686:	d019      	beq.n	801d6bc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d688:	f3ef 8310 	mrs	r3, PRIMASK
 801d68c:	613b      	str	r3, [r7, #16]
  return(result);
 801d68e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d690:	61fb      	str	r3, [r7, #28]
 801d692:	2301      	movs	r3, #1
 801d694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d696:	697b      	ldr	r3, [r7, #20]
 801d698:	f383 8810 	msr	PRIMASK, r3
}
 801d69c:	46c0      	nop			@ (mov r8, r8)
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	681a      	ldr	r2, [r3, #0]
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	2180      	movs	r1, #128	@ 0x80
 801d6aa:	04c9      	lsls	r1, r1, #19
 801d6ac:	430a      	orrs	r2, r1
 801d6ae:	601a      	str	r2, [r3, #0]
 801d6b0:	69fb      	ldr	r3, [r7, #28]
 801d6b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6b4:	69bb      	ldr	r3, [r7, #24]
 801d6b6:	f383 8810 	msr	PRIMASK, r3
}
 801d6ba:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d6bc:	1dbb      	adds	r3, r7, #6
 801d6be:	881a      	ldrh	r2, [r3, #0]
 801d6c0:	68b9      	ldr	r1, [r7, #8]
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	0018      	movs	r0, r3
 801d6c6:	f001 f9bd 	bl	801ea44 <UART_Start_Receive_IT>
 801d6ca:	0003      	movs	r3, r0
 801d6cc:	e000      	b.n	801d6d0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d6ce:	2302      	movs	r3, #2
  }
}
 801d6d0:	0018      	movs	r0, r3
 801d6d2:	46bd      	mov	sp, r7
 801d6d4:	b008      	add	sp, #32
 801d6d6:	bd80      	pop	{r7, pc}
 801d6d8:	40004800 	.word	0x40004800

0801d6dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d6dc:	b580      	push	{r7, lr}
 801d6de:	b088      	sub	sp, #32
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	60f8      	str	r0, [r7, #12]
 801d6e4:	60b9      	str	r1, [r7, #8]
 801d6e6:	1dbb      	adds	r3, r7, #6
 801d6e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d6ee:	2b20      	cmp	r3, #32
 801d6f0:	d000      	beq.n	801d6f4 <HAL_UART_Transmit_DMA+0x18>
 801d6f2:	e077      	b.n	801d7e4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d6f4:	68bb      	ldr	r3, [r7, #8]
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d003      	beq.n	801d702 <HAL_UART_Transmit_DMA+0x26>
 801d6fa:	1dbb      	adds	r3, r7, #6
 801d6fc:	881b      	ldrh	r3, [r3, #0]
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d101      	bne.n	801d706 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d702:	2301      	movs	r3, #1
 801d704:	e06f      	b.n	801d7e6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	689a      	ldr	r2, [r3, #8]
 801d70a:	2380      	movs	r3, #128	@ 0x80
 801d70c:	015b      	lsls	r3, r3, #5
 801d70e:	429a      	cmp	r2, r3
 801d710:	d109      	bne.n	801d726 <HAL_UART_Transmit_DMA+0x4a>
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	691b      	ldr	r3, [r3, #16]
 801d716:	2b00      	cmp	r3, #0
 801d718:	d105      	bne.n	801d726 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d71a:	68bb      	ldr	r3, [r7, #8]
 801d71c:	2201      	movs	r2, #1
 801d71e:	4013      	ands	r3, r2
 801d720:	d001      	beq.n	801d726 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d722:	2301      	movs	r3, #1
 801d724:	e05f      	b.n	801d7e6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	68ba      	ldr	r2, [r7, #8]
 801d72a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	1dba      	adds	r2, r7, #6
 801d730:	2150      	movs	r1, #80	@ 0x50
 801d732:	8812      	ldrh	r2, [r2, #0]
 801d734:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	1dba      	adds	r2, r7, #6
 801d73a:	2152      	movs	r1, #82	@ 0x52
 801d73c:	8812      	ldrh	r2, [r2, #0]
 801d73e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	2284      	movs	r2, #132	@ 0x84
 801d744:	2100      	movs	r1, #0
 801d746:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	2221      	movs	r2, #33	@ 0x21
 801d74c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d752:	2b00      	cmp	r3, #0
 801d754:	d027      	beq.n	801d7a6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d75a:	4a25      	ldr	r2, [pc, #148]	@ (801d7f0 <HAL_UART_Transmit_DMA+0x114>)
 801d75c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d762:	4a24      	ldr	r2, [pc, #144]	@ (801d7f4 <HAL_UART_Transmit_DMA+0x118>)
 801d764:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d76a:	4a23      	ldr	r2, [pc, #140]	@ (801d7f8 <HAL_UART_Transmit_DMA+0x11c>)
 801d76c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d772:	2200      	movs	r2, #0
 801d774:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d77e:	0019      	movs	r1, r3
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	3328      	adds	r3, #40	@ 0x28
 801d786:	001a      	movs	r2, r3
 801d788:	1dbb      	adds	r3, r7, #6
 801d78a:	881b      	ldrh	r3, [r3, #0]
 801d78c:	f7f7 fe20 	bl	80153d0 <HAL_DMA_Start_IT>
 801d790:	1e03      	subs	r3, r0, #0
 801d792:	d008      	beq.n	801d7a6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	2284      	movs	r2, #132	@ 0x84
 801d798:	2110      	movs	r1, #16
 801d79a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	2220      	movs	r2, #32
 801d7a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	e01f      	b.n	801d7e6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	2240      	movs	r2, #64	@ 0x40
 801d7ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7ae:	f3ef 8310 	mrs	r3, PRIMASK
 801d7b2:	613b      	str	r3, [r7, #16]
  return(result);
 801d7b4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d7b6:	61fb      	str	r3, [r7, #28]
 801d7b8:	2301      	movs	r3, #1
 801d7ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7bc:	697b      	ldr	r3, [r7, #20]
 801d7be:	f383 8810 	msr	PRIMASK, r3
}
 801d7c2:	46c0      	nop			@ (mov r8, r8)
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	689a      	ldr	r2, [r3, #8]
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	2180      	movs	r1, #128	@ 0x80
 801d7d0:	430a      	orrs	r2, r1
 801d7d2:	609a      	str	r2, [r3, #8]
 801d7d4:	69fb      	ldr	r3, [r7, #28]
 801d7d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7d8:	69bb      	ldr	r3, [r7, #24]
 801d7da:	f383 8810 	msr	PRIMASK, r3
}
 801d7de:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d7e0:	2300      	movs	r3, #0
 801d7e2:	e000      	b.n	801d7e6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d7e4:	2302      	movs	r3, #2
  }
}
 801d7e6:	0018      	movs	r0, r3
 801d7e8:	46bd      	mov	sp, r7
 801d7ea:	b008      	add	sp, #32
 801d7ec:	bd80      	pop	{r7, pc}
 801d7ee:	46c0      	nop			@ (mov r8, r8)
 801d7f0:	0801ee29 	.word	0x0801ee29
 801d7f4:	0801eec5 	.word	0x0801eec5
 801d7f8:	0801f065 	.word	0x0801f065

0801d7fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b088      	sub	sp, #32
 801d800:	af00      	add	r7, sp, #0
 801d802:	60f8      	str	r0, [r7, #12]
 801d804:	60b9      	str	r1, [r7, #8]
 801d806:	1dbb      	adds	r3, r7, #6
 801d808:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	2280      	movs	r2, #128	@ 0x80
 801d80e:	589b      	ldr	r3, [r3, r2]
 801d810:	2b20      	cmp	r3, #32
 801d812:	d14a      	bne.n	801d8aa <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d814:	68bb      	ldr	r3, [r7, #8]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d003      	beq.n	801d822 <HAL_UART_Receive_DMA+0x26>
 801d81a:	1dbb      	adds	r3, r7, #6
 801d81c:	881b      	ldrh	r3, [r3, #0]
 801d81e:	2b00      	cmp	r3, #0
 801d820:	d101      	bne.n	801d826 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d822:	2301      	movs	r3, #1
 801d824:	e042      	b.n	801d8ac <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	689a      	ldr	r2, [r3, #8]
 801d82a:	2380      	movs	r3, #128	@ 0x80
 801d82c:	015b      	lsls	r3, r3, #5
 801d82e:	429a      	cmp	r2, r3
 801d830:	d109      	bne.n	801d846 <HAL_UART_Receive_DMA+0x4a>
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	691b      	ldr	r3, [r3, #16]
 801d836:	2b00      	cmp	r3, #0
 801d838:	d105      	bne.n	801d846 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d83a:	68bb      	ldr	r3, [r7, #8]
 801d83c:	2201      	movs	r2, #1
 801d83e:	4013      	ands	r3, r2
 801d840:	d001      	beq.n	801d846 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d842:	2301      	movs	r3, #1
 801d844:	e032      	b.n	801d8ac <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	2200      	movs	r2, #0
 801d84a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	4a18      	ldr	r2, [pc, #96]	@ (801d8b4 <HAL_UART_Receive_DMA+0xb8>)
 801d852:	4293      	cmp	r3, r2
 801d854:	d020      	beq.n	801d898 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d856:	68fb      	ldr	r3, [r7, #12]
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	685a      	ldr	r2, [r3, #4]
 801d85c:	2380      	movs	r3, #128	@ 0x80
 801d85e:	041b      	lsls	r3, r3, #16
 801d860:	4013      	ands	r3, r2
 801d862:	d019      	beq.n	801d898 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d864:	f3ef 8310 	mrs	r3, PRIMASK
 801d868:	613b      	str	r3, [r7, #16]
  return(result);
 801d86a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d86c:	61fb      	str	r3, [r7, #28]
 801d86e:	2301      	movs	r3, #1
 801d870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d872:	697b      	ldr	r3, [r7, #20]
 801d874:	f383 8810 	msr	PRIMASK, r3
}
 801d878:	46c0      	nop			@ (mov r8, r8)
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	681a      	ldr	r2, [r3, #0]
 801d880:	68fb      	ldr	r3, [r7, #12]
 801d882:	681b      	ldr	r3, [r3, #0]
 801d884:	2180      	movs	r1, #128	@ 0x80
 801d886:	04c9      	lsls	r1, r1, #19
 801d888:	430a      	orrs	r2, r1
 801d88a:	601a      	str	r2, [r3, #0]
 801d88c:	69fb      	ldr	r3, [r7, #28]
 801d88e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d890:	69bb      	ldr	r3, [r7, #24]
 801d892:	f383 8810 	msr	PRIMASK, r3
}
 801d896:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d898:	1dbb      	adds	r3, r7, #6
 801d89a:	881a      	ldrh	r2, [r3, #0]
 801d89c:	68b9      	ldr	r1, [r7, #8]
 801d89e:	68fb      	ldr	r3, [r7, #12]
 801d8a0:	0018      	movs	r0, r3
 801d8a2:	f001 f999 	bl	801ebd8 <UART_Start_Receive_DMA>
 801d8a6:	0003      	movs	r3, r0
 801d8a8:	e000      	b.n	801d8ac <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d8aa:	2302      	movs	r3, #2
  }
}
 801d8ac:	0018      	movs	r0, r3
 801d8ae:	46bd      	mov	sp, r7
 801d8b0:	b008      	add	sp, #32
 801d8b2:	bd80      	pop	{r7, pc}
 801d8b4:	40004800 	.word	0x40004800

0801d8b8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b096      	sub	sp, #88	@ 0x58
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8c0:	f3ef 8310 	mrs	r3, PRIMASK
 801d8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801d8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801d8c8:	657b      	str	r3, [r7, #84]	@ 0x54
 801d8ca:	2301      	movs	r3, #1
 801d8cc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d8d0:	f383 8810 	msr	PRIMASK, r3
}
 801d8d4:	46c0      	nop			@ (mov r8, r8)
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	681a      	ldr	r2, [r3, #0]
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	496f      	ldr	r1, [pc, #444]	@ (801daa0 <HAL_UART_Abort+0x1e8>)
 801d8e2:	400a      	ands	r2, r1
 801d8e4:	601a      	str	r2, [r3, #0]
 801d8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d8e8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8ec:	f383 8810 	msr	PRIMASK, r3
}
 801d8f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8f2:	f3ef 8310 	mrs	r3, PRIMASK
 801d8f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 801d8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d8fa:	653b      	str	r3, [r7, #80]	@ 0x50
 801d8fc:	2301      	movs	r3, #1
 801d8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d902:	f383 8810 	msr	PRIMASK, r3
}
 801d906:	46c0      	nop			@ (mov r8, r8)
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	689a      	ldr	r2, [r3, #8]
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	2101      	movs	r1, #1
 801d914:	438a      	bics	r2, r1
 801d916:	609a      	str	r2, [r3, #8]
 801d918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d91a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d91c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d91e:	f383 8810 	msr	PRIMASK, r3
}
 801d922:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d928:	2b01      	cmp	r3, #1
 801d92a:	d118      	bne.n	801d95e <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d92c:	f3ef 8310 	mrs	r3, PRIMASK
 801d930:	623b      	str	r3, [r7, #32]
  return(result);
 801d932:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801d934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d936:	2301      	movs	r3, #1
 801d938:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d93c:	f383 8810 	msr	PRIMASK, r3
}
 801d940:	46c0      	nop			@ (mov r8, r8)
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	681a      	ldr	r2, [r3, #0]
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	2110      	movs	r1, #16
 801d94e:	438a      	bics	r2, r1
 801d950:	601a      	str	r2, [r3, #0]
 801d952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d954:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d958:	f383 8810 	msr	PRIMASK, r3
}
 801d95c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	689b      	ldr	r3, [r3, #8]
 801d964:	2280      	movs	r2, #128	@ 0x80
 801d966:	4013      	ands	r3, r2
 801d968:	2b80      	cmp	r3, #128	@ 0x80
 801d96a:	d135      	bne.n	801d9d8 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d96c:	f3ef 8310 	mrs	r3, PRIMASK
 801d970:	617b      	str	r3, [r7, #20]
  return(result);
 801d972:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d974:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d976:	2301      	movs	r3, #1
 801d978:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d97a:	69bb      	ldr	r3, [r7, #24]
 801d97c:	f383 8810 	msr	PRIMASK, r3
}
 801d980:	46c0      	nop			@ (mov r8, r8)
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	689a      	ldr	r2, [r3, #8]
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	2180      	movs	r1, #128	@ 0x80
 801d98e:	438a      	bics	r2, r1
 801d990:	609a      	str	r2, [r3, #8]
 801d992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d994:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d996:	69fb      	ldr	r3, [r7, #28]
 801d998:	f383 8810 	msr	PRIMASK, r3
}
 801d99c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d018      	beq.n	801d9d8 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9aa:	2200      	movs	r2, #0
 801d9ac:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9b2:	0018      	movs	r0, r3
 801d9b4:	f7f7 fd72 	bl	801549c <HAL_DMA_Abort>
 801d9b8:	1e03      	subs	r3, r0, #0
 801d9ba:	d00d      	beq.n	801d9d8 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9c0:	0018      	movs	r0, r3
 801d9c2:	f7f7 feac 	bl	801571e <HAL_DMA_GetError>
 801d9c6:	0003      	movs	r3, r0
 801d9c8:	2b20      	cmp	r3, #32
 801d9ca:	d105      	bne.n	801d9d8 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	2284      	movs	r2, #132	@ 0x84
 801d9d0:	2110      	movs	r1, #16
 801d9d2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d9d4:	2303      	movs	r3, #3
 801d9d6:	e05f      	b.n	801da98 <HAL_UART_Abort+0x1e0>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	689b      	ldr	r3, [r3, #8]
 801d9de:	2240      	movs	r2, #64	@ 0x40
 801d9e0:	4013      	ands	r3, r2
 801d9e2:	2b40      	cmp	r3, #64	@ 0x40
 801d9e4:	d135      	bne.n	801da52 <HAL_UART_Abort+0x19a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9e6:	f3ef 8310 	mrs	r3, PRIMASK
 801d9ea:	60bb      	str	r3, [r7, #8]
  return(result);
 801d9ec:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d9ee:	647b      	str	r3, [r7, #68]	@ 0x44
 801d9f0:	2301      	movs	r3, #1
 801d9f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	f383 8810 	msr	PRIMASK, r3
}
 801d9fa:	46c0      	nop			@ (mov r8, r8)
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	689a      	ldr	r2, [r3, #8]
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	2140      	movs	r1, #64	@ 0x40
 801da08:	438a      	bics	r2, r1
 801da0a:	609a      	str	r2, [r3, #8]
 801da0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da10:	693b      	ldr	r3, [r7, #16]
 801da12:	f383 8810 	msr	PRIMASK, r3
}
 801da16:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d018      	beq.n	801da52 <HAL_UART_Abort+0x19a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da24:	2200      	movs	r2, #0
 801da26:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da2c:	0018      	movs	r0, r3
 801da2e:	f7f7 fd35 	bl	801549c <HAL_DMA_Abort>
 801da32:	1e03      	subs	r3, r0, #0
 801da34:	d00d      	beq.n	801da52 <HAL_UART_Abort+0x19a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da3a:	0018      	movs	r0, r3
 801da3c:	f7f7 fe6f 	bl	801571e <HAL_DMA_GetError>
 801da40:	0003      	movs	r3, r0
 801da42:	2b20      	cmp	r3, #32
 801da44:	d105      	bne.n	801da52 <HAL_UART_Abort+0x19a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	2284      	movs	r2, #132	@ 0x84
 801da4a:	2110      	movs	r1, #16
 801da4c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801da4e:	2303      	movs	r3, #3
 801da50:	e022      	b.n	801da98 <HAL_UART_Abort+0x1e0>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	2252      	movs	r2, #82	@ 0x52
 801da56:	2100      	movs	r1, #0
 801da58:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	225a      	movs	r2, #90	@ 0x5a
 801da5e:	2100      	movs	r1, #0
 801da60:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	220f      	movs	r2, #15
 801da68:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	681b      	ldr	r3, [r3, #0]
 801da6e:	699a      	ldr	r2, [r3, #24]
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	2108      	movs	r1, #8
 801da76:	430a      	orrs	r2, r1
 801da78:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	2220      	movs	r2, #32
 801da7e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	2280      	movs	r2, #128	@ 0x80
 801da84:	2120      	movs	r1, #32
 801da86:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	2200      	movs	r2, #0
 801da8c:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	2284      	movs	r2, #132	@ 0x84
 801da92:	2100      	movs	r1, #0
 801da94:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 801da96:	2300      	movs	r3, #0
}
 801da98:	0018      	movs	r0, r3
 801da9a:	46bd      	mov	sp, r7
 801da9c:	b016      	add	sp, #88	@ 0x58
 801da9e:	bd80      	pop	{r7, pc}
 801daa0:	fffffe1f 	.word	0xfffffe1f

0801daa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801daa4:	b590      	push	{r4, r7, lr}
 801daa6:	b0ab      	sub	sp, #172	@ 0xac
 801daa8:	af00      	add	r7, sp, #0
 801daaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	69db      	ldr	r3, [r3, #28]
 801dab2:	22a4      	movs	r2, #164	@ 0xa4
 801dab4:	18b9      	adds	r1, r7, r2
 801dab6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	20a0      	movs	r0, #160	@ 0xa0
 801dac0:	1839      	adds	r1, r7, r0
 801dac2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	689b      	ldr	r3, [r3, #8]
 801daca:	219c      	movs	r1, #156	@ 0x9c
 801dacc:	1879      	adds	r1, r7, r1
 801dace:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801dad0:	0011      	movs	r1, r2
 801dad2:	18bb      	adds	r3, r7, r2
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	4a9c      	ldr	r2, [pc, #624]	@ (801dd48 <HAL_UART_IRQHandler+0x2a4>)
 801dad8:	4013      	ands	r3, r2
 801dada:	2298      	movs	r2, #152	@ 0x98
 801dadc:	18bc      	adds	r4, r7, r2
 801dade:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801dae0:	18bb      	adds	r3, r7, r2
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d114      	bne.n	801db12 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801dae8:	187b      	adds	r3, r7, r1
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	2220      	movs	r2, #32
 801daee:	4013      	ands	r3, r2
 801daf0:	d00f      	beq.n	801db12 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801daf2:	183b      	adds	r3, r7, r0
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	2220      	movs	r2, #32
 801daf8:	4013      	ands	r3, r2
 801dafa:	d00a      	beq.n	801db12 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db00:	2b00      	cmp	r3, #0
 801db02:	d100      	bne.n	801db06 <HAL_UART_IRQHandler+0x62>
 801db04:	e2aa      	b.n	801e05c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db0a:	687a      	ldr	r2, [r7, #4]
 801db0c:	0010      	movs	r0, r2
 801db0e:	4798      	blx	r3
      }
      return;
 801db10:	e2a4      	b.n	801e05c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801db12:	2398      	movs	r3, #152	@ 0x98
 801db14:	18fb      	adds	r3, r7, r3
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d100      	bne.n	801db1e <HAL_UART_IRQHandler+0x7a>
 801db1c:	e11a      	b.n	801dd54 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801db1e:	239c      	movs	r3, #156	@ 0x9c
 801db20:	18fb      	adds	r3, r7, r3
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	2201      	movs	r2, #1
 801db26:	4013      	ands	r3, r2
 801db28:	d106      	bne.n	801db38 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801db2a:	23a0      	movs	r3, #160	@ 0xa0
 801db2c:	18fb      	adds	r3, r7, r3
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	4a86      	ldr	r2, [pc, #536]	@ (801dd4c <HAL_UART_IRQHandler+0x2a8>)
 801db32:	4013      	ands	r3, r2
 801db34:	d100      	bne.n	801db38 <HAL_UART_IRQHandler+0x94>
 801db36:	e10d      	b.n	801dd54 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801db38:	23a4      	movs	r3, #164	@ 0xa4
 801db3a:	18fb      	adds	r3, r7, r3
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	2201      	movs	r2, #1
 801db40:	4013      	ands	r3, r2
 801db42:	d012      	beq.n	801db6a <HAL_UART_IRQHandler+0xc6>
 801db44:	23a0      	movs	r3, #160	@ 0xa0
 801db46:	18fb      	adds	r3, r7, r3
 801db48:	681a      	ldr	r2, [r3, #0]
 801db4a:	2380      	movs	r3, #128	@ 0x80
 801db4c:	005b      	lsls	r3, r3, #1
 801db4e:	4013      	ands	r3, r2
 801db50:	d00b      	beq.n	801db6a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	681b      	ldr	r3, [r3, #0]
 801db56:	2201      	movs	r2, #1
 801db58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	2284      	movs	r2, #132	@ 0x84
 801db5e:	589b      	ldr	r3, [r3, r2]
 801db60:	2201      	movs	r2, #1
 801db62:	431a      	orrs	r2, r3
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	2184      	movs	r1, #132	@ 0x84
 801db68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801db6a:	23a4      	movs	r3, #164	@ 0xa4
 801db6c:	18fb      	adds	r3, r7, r3
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	2202      	movs	r2, #2
 801db72:	4013      	ands	r3, r2
 801db74:	d011      	beq.n	801db9a <HAL_UART_IRQHandler+0xf6>
 801db76:	239c      	movs	r3, #156	@ 0x9c
 801db78:	18fb      	adds	r3, r7, r3
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	2201      	movs	r2, #1
 801db7e:	4013      	ands	r3, r2
 801db80:	d00b      	beq.n	801db9a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	2202      	movs	r2, #2
 801db88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	2284      	movs	r2, #132	@ 0x84
 801db8e:	589b      	ldr	r3, [r3, r2]
 801db90:	2204      	movs	r2, #4
 801db92:	431a      	orrs	r2, r3
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	2184      	movs	r1, #132	@ 0x84
 801db98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801db9a:	23a4      	movs	r3, #164	@ 0xa4
 801db9c:	18fb      	adds	r3, r7, r3
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	2204      	movs	r2, #4
 801dba2:	4013      	ands	r3, r2
 801dba4:	d011      	beq.n	801dbca <HAL_UART_IRQHandler+0x126>
 801dba6:	239c      	movs	r3, #156	@ 0x9c
 801dba8:	18fb      	adds	r3, r7, r3
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	2201      	movs	r2, #1
 801dbae:	4013      	ands	r3, r2
 801dbb0:	d00b      	beq.n	801dbca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	2204      	movs	r2, #4
 801dbb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	2284      	movs	r2, #132	@ 0x84
 801dbbe:	589b      	ldr	r3, [r3, r2]
 801dbc0:	2202      	movs	r2, #2
 801dbc2:	431a      	orrs	r2, r3
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	2184      	movs	r1, #132	@ 0x84
 801dbc8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801dbca:	23a4      	movs	r3, #164	@ 0xa4
 801dbcc:	18fb      	adds	r3, r7, r3
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	2208      	movs	r2, #8
 801dbd2:	4013      	ands	r3, r2
 801dbd4:	d017      	beq.n	801dc06 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801dbd6:	23a0      	movs	r3, #160	@ 0xa0
 801dbd8:	18fb      	adds	r3, r7, r3
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	2220      	movs	r2, #32
 801dbde:	4013      	ands	r3, r2
 801dbe0:	d105      	bne.n	801dbee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801dbe2:	239c      	movs	r3, #156	@ 0x9c
 801dbe4:	18fb      	adds	r3, r7, r3
 801dbe6:	681b      	ldr	r3, [r3, #0]
 801dbe8:	2201      	movs	r2, #1
 801dbea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801dbec:	d00b      	beq.n	801dc06 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	2208      	movs	r2, #8
 801dbf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	2284      	movs	r2, #132	@ 0x84
 801dbfa:	589b      	ldr	r3, [r3, r2]
 801dbfc:	2208      	movs	r2, #8
 801dbfe:	431a      	orrs	r2, r3
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	2184      	movs	r1, #132	@ 0x84
 801dc04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801dc06:	23a4      	movs	r3, #164	@ 0xa4
 801dc08:	18fb      	adds	r3, r7, r3
 801dc0a:	681a      	ldr	r2, [r3, #0]
 801dc0c:	2380      	movs	r3, #128	@ 0x80
 801dc0e:	011b      	lsls	r3, r3, #4
 801dc10:	4013      	ands	r3, r2
 801dc12:	d013      	beq.n	801dc3c <HAL_UART_IRQHandler+0x198>
 801dc14:	23a0      	movs	r3, #160	@ 0xa0
 801dc16:	18fb      	adds	r3, r7, r3
 801dc18:	681a      	ldr	r2, [r3, #0]
 801dc1a:	2380      	movs	r3, #128	@ 0x80
 801dc1c:	04db      	lsls	r3, r3, #19
 801dc1e:	4013      	ands	r3, r2
 801dc20:	d00c      	beq.n	801dc3c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	2280      	movs	r2, #128	@ 0x80
 801dc28:	0112      	lsls	r2, r2, #4
 801dc2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	2284      	movs	r2, #132	@ 0x84
 801dc30:	589b      	ldr	r3, [r3, r2]
 801dc32:	2220      	movs	r2, #32
 801dc34:	431a      	orrs	r2, r3
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	2184      	movs	r1, #132	@ 0x84
 801dc3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	2284      	movs	r2, #132	@ 0x84
 801dc40:	589b      	ldr	r3, [r3, r2]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d100      	bne.n	801dc48 <HAL_UART_IRQHandler+0x1a4>
 801dc46:	e20b      	b.n	801e060 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801dc48:	23a4      	movs	r3, #164	@ 0xa4
 801dc4a:	18fb      	adds	r3, r7, r3
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	2220      	movs	r2, #32
 801dc50:	4013      	ands	r3, r2
 801dc52:	d00e      	beq.n	801dc72 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801dc54:	23a0      	movs	r3, #160	@ 0xa0
 801dc56:	18fb      	adds	r3, r7, r3
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	2220      	movs	r2, #32
 801dc5c:	4013      	ands	r3, r2
 801dc5e:	d008      	beq.n	801dc72 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d004      	beq.n	801dc72 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dc6c:	687a      	ldr	r2, [r7, #4]
 801dc6e:	0010      	movs	r0, r2
 801dc70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	2284      	movs	r2, #132	@ 0x84
 801dc76:	589b      	ldr	r3, [r3, r2]
 801dc78:	2194      	movs	r1, #148	@ 0x94
 801dc7a:	187a      	adds	r2, r7, r1
 801dc7c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	689b      	ldr	r3, [r3, #8]
 801dc84:	2240      	movs	r2, #64	@ 0x40
 801dc86:	4013      	ands	r3, r2
 801dc88:	2b40      	cmp	r3, #64	@ 0x40
 801dc8a:	d004      	beq.n	801dc96 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801dc8c:	187b      	adds	r3, r7, r1
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	2228      	movs	r2, #40	@ 0x28
 801dc92:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dc94:	d04b      	beq.n	801dd2e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	0018      	movs	r0, r3
 801dc9a:	f001 f861 	bl	801ed60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	689b      	ldr	r3, [r3, #8]
 801dca4:	2240      	movs	r2, #64	@ 0x40
 801dca6:	4013      	ands	r3, r2
 801dca8:	2b40      	cmp	r3, #64	@ 0x40
 801dcaa:	d139      	bne.n	801dd20 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcac:	f3ef 8310 	mrs	r3, PRIMASK
 801dcb0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801dcb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dcb4:	2090      	movs	r0, #144	@ 0x90
 801dcb6:	183a      	adds	r2, r7, r0
 801dcb8:	6013      	str	r3, [r2, #0]
 801dcba:	2301      	movs	r3, #1
 801dcbc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dcc0:	f383 8810 	msr	PRIMASK, r3
}
 801dcc4:	46c0      	nop			@ (mov r8, r8)
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	689a      	ldr	r2, [r3, #8]
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	2140      	movs	r1, #64	@ 0x40
 801dcd2:	438a      	bics	r2, r1
 801dcd4:	609a      	str	r2, [r3, #8]
 801dcd6:	183b      	adds	r3, r7, r0
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dcde:	f383 8810 	msr	PRIMASK, r3
}
 801dce2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d012      	beq.n	801dd12 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dcf0:	4a17      	ldr	r2, [pc, #92]	@ (801dd50 <HAL_UART_IRQHandler+0x2ac>)
 801dcf2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dcf8:	0018      	movs	r0, r3
 801dcfa:	f7f7 fc0f 	bl	801551c <HAL_DMA_Abort_IT>
 801dcfe:	1e03      	subs	r3, r0, #0
 801dd00:	d020      	beq.n	801dd44 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd0c:	0018      	movs	r0, r3
 801dd0e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd10:	e018      	b.n	801dd44 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	2298      	movs	r2, #152	@ 0x98
 801dd16:	589b      	ldr	r3, [r3, r2]
 801dd18:	687a      	ldr	r2, [r7, #4]
 801dd1a:	0010      	movs	r0, r2
 801dd1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd1e:	e011      	b.n	801dd44 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	2298      	movs	r2, #152	@ 0x98
 801dd24:	589b      	ldr	r3, [r3, r2]
 801dd26:	687a      	ldr	r2, [r7, #4]
 801dd28:	0010      	movs	r0, r2
 801dd2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd2c:	e00a      	b.n	801dd44 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	2298      	movs	r2, #152	@ 0x98
 801dd32:	589b      	ldr	r3, [r3, r2]
 801dd34:	687a      	ldr	r2, [r7, #4]
 801dd36:	0010      	movs	r0, r2
 801dd38:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	2284      	movs	r2, #132	@ 0x84
 801dd3e:	2100      	movs	r1, #0
 801dd40:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801dd42:	e18d      	b.n	801e060 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd44:	46c0      	nop			@ (mov r8, r8)
    return;
 801dd46:	e18b      	b.n	801e060 <HAL_UART_IRQHandler+0x5bc>
 801dd48:	0000080f 	.word	0x0000080f
 801dd4c:	04000120 	.word	0x04000120
 801dd50:	0801f0ed 	.word	0x0801f0ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dd58:	2b01      	cmp	r3, #1
 801dd5a:	d000      	beq.n	801dd5e <HAL_UART_IRQHandler+0x2ba>
 801dd5c:	e13d      	b.n	801dfda <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801dd5e:	23a4      	movs	r3, #164	@ 0xa4
 801dd60:	18fb      	adds	r3, r7, r3
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	2210      	movs	r2, #16
 801dd66:	4013      	ands	r3, r2
 801dd68:	d100      	bne.n	801dd6c <HAL_UART_IRQHandler+0x2c8>
 801dd6a:	e136      	b.n	801dfda <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801dd6c:	23a0      	movs	r3, #160	@ 0xa0
 801dd6e:	18fb      	adds	r3, r7, r3
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	2210      	movs	r2, #16
 801dd74:	4013      	ands	r3, r2
 801dd76:	d100      	bne.n	801dd7a <HAL_UART_IRQHandler+0x2d6>
 801dd78:	e12f      	b.n	801dfda <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	2210      	movs	r2, #16
 801dd80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	689b      	ldr	r3, [r3, #8]
 801dd88:	2240      	movs	r2, #64	@ 0x40
 801dd8a:	4013      	ands	r3, r2
 801dd8c:	2b40      	cmp	r3, #64	@ 0x40
 801dd8e:	d000      	beq.n	801dd92 <HAL_UART_IRQHandler+0x2ee>
 801dd90:	e0a2      	b.n	801ded8 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	685a      	ldr	r2, [r3, #4]
 801dd9a:	217e      	movs	r1, #126	@ 0x7e
 801dd9c:	187b      	adds	r3, r7, r1
 801dd9e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801dda0:	187b      	adds	r3, r7, r1
 801dda2:	881b      	ldrh	r3, [r3, #0]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d100      	bne.n	801ddaa <HAL_UART_IRQHandler+0x306>
 801dda8:	e15c      	b.n	801e064 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	2258      	movs	r2, #88	@ 0x58
 801ddae:	5a9b      	ldrh	r3, [r3, r2]
 801ddb0:	187a      	adds	r2, r7, r1
 801ddb2:	8812      	ldrh	r2, [r2, #0]
 801ddb4:	429a      	cmp	r2, r3
 801ddb6:	d300      	bcc.n	801ddba <HAL_UART_IRQHandler+0x316>
 801ddb8:	e154      	b.n	801e064 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	187a      	adds	r2, r7, r1
 801ddbe:	215a      	movs	r1, #90	@ 0x5a
 801ddc0:	8812      	ldrh	r2, [r2, #0]
 801ddc2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	681b      	ldr	r3, [r3, #0]
 801ddcc:	2220      	movs	r2, #32
 801ddce:	4013      	ands	r3, r2
 801ddd0:	d16f      	bne.n	801deb2 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddd2:	f3ef 8310 	mrs	r3, PRIMASK
 801ddd6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ddd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ddda:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dddc:	2301      	movs	r3, #1
 801ddde:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dde2:	f383 8810 	msr	PRIMASK, r3
}
 801dde6:	46c0      	nop			@ (mov r8, r8)
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	681a      	ldr	r2, [r3, #0]
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	49a0      	ldr	r1, [pc, #640]	@ (801e074 <HAL_UART_IRQHandler+0x5d0>)
 801ddf4:	400a      	ands	r2, r1
 801ddf6:	601a      	str	r2, [r3, #0]
 801ddf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ddfe:	f383 8810 	msr	PRIMASK, r3
}
 801de02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de04:	f3ef 8310 	mrs	r3, PRIMASK
 801de08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801de0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de0c:	677b      	str	r3, [r7, #116]	@ 0x74
 801de0e:	2301      	movs	r3, #1
 801de10:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801de14:	f383 8810 	msr	PRIMASK, r3
}
 801de18:	46c0      	nop			@ (mov r8, r8)
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	689a      	ldr	r2, [r3, #8]
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	2101      	movs	r1, #1
 801de26:	438a      	bics	r2, r1
 801de28:	609a      	str	r2, [r3, #8]
 801de2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801de2c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801de30:	f383 8810 	msr	PRIMASK, r3
}
 801de34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de36:	f3ef 8310 	mrs	r3, PRIMASK
 801de3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801de3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801de3e:	673b      	str	r3, [r7, #112]	@ 0x70
 801de40:	2301      	movs	r3, #1
 801de42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de46:	f383 8810 	msr	PRIMASK, r3
}
 801de4a:	46c0      	nop			@ (mov r8, r8)
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	689a      	ldr	r2, [r3, #8]
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	2140      	movs	r1, #64	@ 0x40
 801de58:	438a      	bics	r2, r1
 801de5a:	609a      	str	r2, [r3, #8]
 801de5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801de5e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801de62:	f383 8810 	msr	PRIMASK, r3
}
 801de66:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	2280      	movs	r2, #128	@ 0x80
 801de6c:	2120      	movs	r1, #32
 801de6e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	2200      	movs	r2, #0
 801de74:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de76:	f3ef 8310 	mrs	r3, PRIMASK
 801de7a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801de7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801de7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801de80:	2301      	movs	r3, #1
 801de82:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801de86:	f383 8810 	msr	PRIMASK, r3
}
 801de8a:	46c0      	nop			@ (mov r8, r8)
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	681a      	ldr	r2, [r3, #0]
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	2110      	movs	r1, #16
 801de98:	438a      	bics	r2, r1
 801de9a:	601a      	str	r2, [r3, #0]
 801de9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801de9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dea2:	f383 8810 	msr	PRIMASK, r3
}
 801dea6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801deac:	0018      	movs	r0, r3
 801deae:	f7f7 faf5 	bl	801549c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	2202      	movs	r2, #2
 801deb6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	22ac      	movs	r2, #172	@ 0xac
 801debc:	589b      	ldr	r3, [r3, r2]
 801debe:	687a      	ldr	r2, [r7, #4]
 801dec0:	2158      	movs	r1, #88	@ 0x58
 801dec2:	5a51      	ldrh	r1, [r2, r1]
 801dec4:	687a      	ldr	r2, [r7, #4]
 801dec6:	205a      	movs	r0, #90	@ 0x5a
 801dec8:	5a12      	ldrh	r2, [r2, r0]
 801deca:	b292      	uxth	r2, r2
 801decc:	1a8a      	subs	r2, r1, r2
 801dece:	b291      	uxth	r1, r2
 801ded0:	687a      	ldr	r2, [r7, #4]
 801ded2:	0010      	movs	r0, r2
 801ded4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ded6:	e0c5      	b.n	801e064 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	2258      	movs	r2, #88	@ 0x58
 801dedc:	5a99      	ldrh	r1, [r3, r2]
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	225a      	movs	r2, #90	@ 0x5a
 801dee2:	5a9b      	ldrh	r3, [r3, r2]
 801dee4:	b29a      	uxth	r2, r3
 801dee6:	208e      	movs	r0, #142	@ 0x8e
 801dee8:	183b      	adds	r3, r7, r0
 801deea:	1a8a      	subs	r2, r1, r2
 801deec:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	225a      	movs	r2, #90	@ 0x5a
 801def2:	5a9b      	ldrh	r3, [r3, r2]
 801def4:	b29b      	uxth	r3, r3
 801def6:	2b00      	cmp	r3, #0
 801def8:	d100      	bne.n	801defc <HAL_UART_IRQHandler+0x458>
 801defa:	e0b5      	b.n	801e068 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801defc:	183b      	adds	r3, r7, r0
 801defe:	881b      	ldrh	r3, [r3, #0]
 801df00:	2b00      	cmp	r3, #0
 801df02:	d100      	bne.n	801df06 <HAL_UART_IRQHandler+0x462>
 801df04:	e0b0      	b.n	801e068 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df06:	f3ef 8310 	mrs	r3, PRIMASK
 801df0a:	60fb      	str	r3, [r7, #12]
  return(result);
 801df0c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801df0e:	2488      	movs	r4, #136	@ 0x88
 801df10:	193a      	adds	r2, r7, r4
 801df12:	6013      	str	r3, [r2, #0]
 801df14:	2301      	movs	r3, #1
 801df16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df18:	693b      	ldr	r3, [r7, #16]
 801df1a:	f383 8810 	msr	PRIMASK, r3
}
 801df1e:	46c0      	nop			@ (mov r8, r8)
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	681b      	ldr	r3, [r3, #0]
 801df24:	681a      	ldr	r2, [r3, #0]
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	4953      	ldr	r1, [pc, #332]	@ (801e078 <HAL_UART_IRQHandler+0x5d4>)
 801df2c:	400a      	ands	r2, r1
 801df2e:	601a      	str	r2, [r3, #0]
 801df30:	193b      	adds	r3, r7, r4
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df36:	697b      	ldr	r3, [r7, #20]
 801df38:	f383 8810 	msr	PRIMASK, r3
}
 801df3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df3e:	f3ef 8310 	mrs	r3, PRIMASK
 801df42:	61bb      	str	r3, [r7, #24]
  return(result);
 801df44:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801df46:	2484      	movs	r4, #132	@ 0x84
 801df48:	193a      	adds	r2, r7, r4
 801df4a:	6013      	str	r3, [r2, #0]
 801df4c:	2301      	movs	r3, #1
 801df4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df50:	69fb      	ldr	r3, [r7, #28]
 801df52:	f383 8810 	msr	PRIMASK, r3
}
 801df56:	46c0      	nop			@ (mov r8, r8)
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	689a      	ldr	r2, [r3, #8]
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	2101      	movs	r1, #1
 801df64:	438a      	bics	r2, r1
 801df66:	609a      	str	r2, [r3, #8]
 801df68:	193b      	adds	r3, r7, r4
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df6e:	6a3b      	ldr	r3, [r7, #32]
 801df70:	f383 8810 	msr	PRIMASK, r3
}
 801df74:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	2280      	movs	r2, #128	@ 0x80
 801df7a:	2120      	movs	r1, #32
 801df7c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	2200      	movs	r2, #0
 801df82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	2200      	movs	r2, #0
 801df88:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df8a:	f3ef 8310 	mrs	r3, PRIMASK
 801df8e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801df90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801df92:	2480      	movs	r4, #128	@ 0x80
 801df94:	193a      	adds	r2, r7, r4
 801df96:	6013      	str	r3, [r2, #0]
 801df98:	2301      	movs	r3, #1
 801df9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df9e:	f383 8810 	msr	PRIMASK, r3
}
 801dfa2:	46c0      	nop			@ (mov r8, r8)
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	681b      	ldr	r3, [r3, #0]
 801dfa8:	681a      	ldr	r2, [r3, #0]
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	2110      	movs	r1, #16
 801dfb0:	438a      	bics	r2, r1
 801dfb2:	601a      	str	r2, [r3, #0]
 801dfb4:	193b      	adds	r3, r7, r4
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfbc:	f383 8810 	msr	PRIMASK, r3
}
 801dfc0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	2202      	movs	r2, #2
 801dfc6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	22ac      	movs	r2, #172	@ 0xac
 801dfcc:	589b      	ldr	r3, [r3, r2]
 801dfce:	183a      	adds	r2, r7, r0
 801dfd0:	8811      	ldrh	r1, [r2, #0]
 801dfd2:	687a      	ldr	r2, [r7, #4]
 801dfd4:	0010      	movs	r0, r2
 801dfd6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dfd8:	e046      	b.n	801e068 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801dfda:	23a4      	movs	r3, #164	@ 0xa4
 801dfdc:	18fb      	adds	r3, r7, r3
 801dfde:	681a      	ldr	r2, [r3, #0]
 801dfe0:	2380      	movs	r3, #128	@ 0x80
 801dfe2:	035b      	lsls	r3, r3, #13
 801dfe4:	4013      	ands	r3, r2
 801dfe6:	d012      	beq.n	801e00e <HAL_UART_IRQHandler+0x56a>
 801dfe8:	239c      	movs	r3, #156	@ 0x9c
 801dfea:	18fb      	adds	r3, r7, r3
 801dfec:	681a      	ldr	r2, [r3, #0]
 801dfee:	2380      	movs	r3, #128	@ 0x80
 801dff0:	03db      	lsls	r3, r3, #15
 801dff2:	4013      	ands	r3, r2
 801dff4:	d00b      	beq.n	801e00e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	2280      	movs	r2, #128	@ 0x80
 801dffc:	0352      	lsls	r2, r2, #13
 801dffe:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	22a8      	movs	r2, #168	@ 0xa8
 801e004:	589b      	ldr	r3, [r3, r2]
 801e006:	687a      	ldr	r2, [r7, #4]
 801e008:	0010      	movs	r0, r2
 801e00a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801e00c:	e02f      	b.n	801e06e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801e00e:	23a4      	movs	r3, #164	@ 0xa4
 801e010:	18fb      	adds	r3, r7, r3
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	2280      	movs	r2, #128	@ 0x80
 801e016:	4013      	ands	r3, r2
 801e018:	d00f      	beq.n	801e03a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801e01a:	23a0      	movs	r3, #160	@ 0xa0
 801e01c:	18fb      	adds	r3, r7, r3
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	2280      	movs	r2, #128	@ 0x80
 801e022:	4013      	ands	r3, r2
 801e024:	d009      	beq.n	801e03a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d01e      	beq.n	801e06c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e032:	687a      	ldr	r2, [r7, #4]
 801e034:	0010      	movs	r0, r2
 801e036:	4798      	blx	r3
    }
    return;
 801e038:	e018      	b.n	801e06c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801e03a:	23a4      	movs	r3, #164	@ 0xa4
 801e03c:	18fb      	adds	r3, r7, r3
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	2240      	movs	r2, #64	@ 0x40
 801e042:	4013      	ands	r3, r2
 801e044:	d013      	beq.n	801e06e <HAL_UART_IRQHandler+0x5ca>
 801e046:	23a0      	movs	r3, #160	@ 0xa0
 801e048:	18fb      	adds	r3, r7, r3
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	2240      	movs	r2, #64	@ 0x40
 801e04e:	4013      	ands	r3, r2
 801e050:	d00d      	beq.n	801e06e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	0018      	movs	r0, r3
 801e056:	f001 f862 	bl	801f11e <UART_EndTransmit_IT>
    return;
 801e05a:	e008      	b.n	801e06e <HAL_UART_IRQHandler+0x5ca>
      return;
 801e05c:	46c0      	nop			@ (mov r8, r8)
 801e05e:	e006      	b.n	801e06e <HAL_UART_IRQHandler+0x5ca>
    return;
 801e060:	46c0      	nop			@ (mov r8, r8)
 801e062:	e004      	b.n	801e06e <HAL_UART_IRQHandler+0x5ca>
      return;
 801e064:	46c0      	nop			@ (mov r8, r8)
 801e066:	e002      	b.n	801e06e <HAL_UART_IRQHandler+0x5ca>
      return;
 801e068:	46c0      	nop			@ (mov r8, r8)
 801e06a:	e000      	b.n	801e06e <HAL_UART_IRQHandler+0x5ca>
    return;
 801e06c:	46c0      	nop			@ (mov r8, r8)
  }

}
 801e06e:	46bd      	mov	sp, r7
 801e070:	b02b      	add	sp, #172	@ 0xac
 801e072:	bd90      	pop	{r4, r7, pc}
 801e074:	fffffeff 	.word	0xfffffeff
 801e078:	fffffedf 	.word	0xfffffedf

0801e07c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801e07c:	b580      	push	{r7, lr}
 801e07e:	b082      	sub	sp, #8
 801e080:	af00      	add	r7, sp, #0
 801e082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801e084:	46c0      	nop			@ (mov r8, r8)
 801e086:	46bd      	mov	sp, r7
 801e088:	b002      	add	sp, #8
 801e08a:	bd80      	pop	{r7, pc}

0801e08c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e08c:	b580      	push	{r7, lr}
 801e08e:	b082      	sub	sp, #8
 801e090:	af00      	add	r7, sp, #0
 801e092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801e094:	46c0      	nop			@ (mov r8, r8)
 801e096:	46bd      	mov	sp, r7
 801e098:	b002      	add	sp, #8
 801e09a:	bd80      	pop	{r7, pc}

0801e09c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b082      	sub	sp, #8
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801e0a4:	46c0      	nop			@ (mov r8, r8)
 801e0a6:	46bd      	mov	sp, r7
 801e0a8:	b002      	add	sp, #8
 801e0aa:	bd80      	pop	{r7, pc}

0801e0ac <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801e0ac:	b580      	push	{r7, lr}
 801e0ae:	b082      	sub	sp, #8
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801e0b4:	46c0      	nop			@ (mov r8, r8)
 801e0b6:	46bd      	mov	sp, r7
 801e0b8:	b002      	add	sp, #8
 801e0ba:	bd80      	pop	{r7, pc}

0801e0bc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801e0bc:	b580      	push	{r7, lr}
 801e0be:	b082      	sub	sp, #8
 801e0c0:	af00      	add	r7, sp, #0
 801e0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801e0c4:	46c0      	nop			@ (mov r8, r8)
 801e0c6:	46bd      	mov	sp, r7
 801e0c8:	b002      	add	sp, #8
 801e0ca:	bd80      	pop	{r7, pc}

0801e0cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801e0cc:	b580      	push	{r7, lr}
 801e0ce:	b082      	sub	sp, #8
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801e0d4:	46c0      	nop			@ (mov r8, r8)
 801e0d6:	46bd      	mov	sp, r7
 801e0d8:	b002      	add	sp, #8
 801e0da:	bd80      	pop	{r7, pc}

0801e0dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801e0dc:	b580      	push	{r7, lr}
 801e0de:	b082      	sub	sp, #8
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	6078      	str	r0, [r7, #4]
 801e0e4:	000a      	movs	r2, r1
 801e0e6:	1cbb      	adds	r3, r7, #2
 801e0e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801e0ea:	46c0      	nop			@ (mov r8, r8)
 801e0ec:	46bd      	mov	sp, r7
 801e0ee:	b002      	add	sp, #8
 801e0f0:	bd80      	pop	{r7, pc}
	...

0801e0f4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801e0f4:	b580      	push	{r7, lr}
 801e0f6:	b082      	sub	sp, #8
 801e0f8:	af00      	add	r7, sp, #0
 801e0fa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	2188      	movs	r1, #136	@ 0x88
 801e100:	4a14      	ldr	r2, [pc, #80]	@ (801e154 <UART_InitCallbacksToDefault+0x60>)
 801e102:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	218c      	movs	r1, #140	@ 0x8c
 801e108:	4a13      	ldr	r2, [pc, #76]	@ (801e158 <UART_InitCallbacksToDefault+0x64>)
 801e10a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	2190      	movs	r1, #144	@ 0x90
 801e110:	4a12      	ldr	r2, [pc, #72]	@ (801e15c <UART_InitCallbacksToDefault+0x68>)
 801e112:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	2194      	movs	r1, #148	@ 0x94
 801e118:	4a11      	ldr	r2, [pc, #68]	@ (801e160 <UART_InitCallbacksToDefault+0x6c>)
 801e11a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	2198      	movs	r1, #152	@ 0x98
 801e120:	4a10      	ldr	r2, [pc, #64]	@ (801e164 <UART_InitCallbacksToDefault+0x70>)
 801e122:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	219c      	movs	r1, #156	@ 0x9c
 801e128:	4a0f      	ldr	r2, [pc, #60]	@ (801e168 <UART_InitCallbacksToDefault+0x74>)
 801e12a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	21a0      	movs	r1, #160	@ 0xa0
 801e130:	4a0e      	ldr	r2, [pc, #56]	@ (801e16c <UART_InitCallbacksToDefault+0x78>)
 801e132:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	21a4      	movs	r1, #164	@ 0xa4
 801e138:	4a0d      	ldr	r2, [pc, #52]	@ (801e170 <UART_InitCallbacksToDefault+0x7c>)
 801e13a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	21a8      	movs	r1, #168	@ 0xa8
 801e140:	4a0c      	ldr	r2, [pc, #48]	@ (801e174 <UART_InitCallbacksToDefault+0x80>)
 801e142:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	21ac      	movs	r1, #172	@ 0xac
 801e148:	4a0b      	ldr	r2, [pc, #44]	@ (801e178 <UART_InitCallbacksToDefault+0x84>)
 801e14a:	505a      	str	r2, [r3, r1]

}
 801e14c:	46c0      	nop			@ (mov r8, r8)
 801e14e:	46bd      	mov	sp, r7
 801e150:	b002      	add	sp, #8
 801e152:	bd80      	pop	{r7, pc}
 801e154:	0801e08d 	.word	0x0801e08d
 801e158:	0801e07d 	.word	0x0801e07d
 801e15c:	0801e09d 	.word	0x0801e09d
 801e160:	0800d405 	.word	0x0800d405
 801e164:	08005071 	.word	0x08005071
 801e168:	0801e0ad 	.word	0x0801e0ad
 801e16c:	0801e0bd 	.word	0x0801e0bd
 801e170:	0801e0cd 	.word	0x0801e0cd
 801e174:	0801f511 	.word	0x0801f511
 801e178:	0801e0dd 	.word	0x0801e0dd

0801e17c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e17c:	b5b0      	push	{r4, r5, r7, lr}
 801e17e:	b08e      	sub	sp, #56	@ 0x38
 801e180:	af00      	add	r7, sp, #0
 801e182:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e184:	231a      	movs	r3, #26
 801e186:	2218      	movs	r2, #24
 801e188:	189b      	adds	r3, r3, r2
 801e18a:	19db      	adds	r3, r3, r7
 801e18c:	2200      	movs	r2, #0
 801e18e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e190:	69fb      	ldr	r3, [r7, #28]
 801e192:	689a      	ldr	r2, [r3, #8]
 801e194:	69fb      	ldr	r3, [r7, #28]
 801e196:	691b      	ldr	r3, [r3, #16]
 801e198:	431a      	orrs	r2, r3
 801e19a:	69fb      	ldr	r3, [r7, #28]
 801e19c:	695b      	ldr	r3, [r3, #20]
 801e19e:	431a      	orrs	r2, r3
 801e1a0:	69fb      	ldr	r3, [r7, #28]
 801e1a2:	69db      	ldr	r3, [r3, #28]
 801e1a4:	4313      	orrs	r3, r2
 801e1a6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e1a8:	69fb      	ldr	r3, [r7, #28]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	4ac3      	ldr	r2, [pc, #780]	@ (801e4bc <UART_SetConfig+0x340>)
 801e1b0:	4013      	ands	r3, r2
 801e1b2:	0019      	movs	r1, r3
 801e1b4:	69fb      	ldr	r3, [r7, #28]
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e1ba:	430a      	orrs	r2, r1
 801e1bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e1be:	69fb      	ldr	r3, [r7, #28]
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	685b      	ldr	r3, [r3, #4]
 801e1c4:	4abe      	ldr	r2, [pc, #760]	@ (801e4c0 <UART_SetConfig+0x344>)
 801e1c6:	4013      	ands	r3, r2
 801e1c8:	0019      	movs	r1, r3
 801e1ca:	69fb      	ldr	r3, [r7, #28]
 801e1cc:	68da      	ldr	r2, [r3, #12]
 801e1ce:	69fb      	ldr	r3, [r7, #28]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	430a      	orrs	r2, r1
 801e1d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e1d6:	69fb      	ldr	r3, [r7, #28]
 801e1d8:	699b      	ldr	r3, [r3, #24]
 801e1da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e1dc:	69fb      	ldr	r3, [r7, #28]
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	4ab8      	ldr	r2, [pc, #736]	@ (801e4c4 <UART_SetConfig+0x348>)
 801e1e2:	4293      	cmp	r3, r2
 801e1e4:	d004      	beq.n	801e1f0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e1e6:	69fb      	ldr	r3, [r7, #28]
 801e1e8:	6a1b      	ldr	r3, [r3, #32]
 801e1ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e1ec:	4313      	orrs	r3, r2
 801e1ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e1f0:	69fb      	ldr	r3, [r7, #28]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	689b      	ldr	r3, [r3, #8]
 801e1f6:	4ab4      	ldr	r2, [pc, #720]	@ (801e4c8 <UART_SetConfig+0x34c>)
 801e1f8:	4013      	ands	r3, r2
 801e1fa:	0019      	movs	r1, r3
 801e1fc:	69fb      	ldr	r3, [r7, #28]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e202:	430a      	orrs	r2, r1
 801e204:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e206:	69fb      	ldr	r3, [r7, #28]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	4ab0      	ldr	r2, [pc, #704]	@ (801e4cc <UART_SetConfig+0x350>)
 801e20c:	4293      	cmp	r3, r2
 801e20e:	d131      	bne.n	801e274 <UART_SetConfig+0xf8>
 801e210:	4baf      	ldr	r3, [pc, #700]	@ (801e4d0 <UART_SetConfig+0x354>)
 801e212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e214:	2203      	movs	r2, #3
 801e216:	4013      	ands	r3, r2
 801e218:	2b03      	cmp	r3, #3
 801e21a:	d01d      	beq.n	801e258 <UART_SetConfig+0xdc>
 801e21c:	d823      	bhi.n	801e266 <UART_SetConfig+0xea>
 801e21e:	2b02      	cmp	r3, #2
 801e220:	d00c      	beq.n	801e23c <UART_SetConfig+0xc0>
 801e222:	d820      	bhi.n	801e266 <UART_SetConfig+0xea>
 801e224:	2b00      	cmp	r3, #0
 801e226:	d002      	beq.n	801e22e <UART_SetConfig+0xb2>
 801e228:	2b01      	cmp	r3, #1
 801e22a:	d00e      	beq.n	801e24a <UART_SetConfig+0xce>
 801e22c:	e01b      	b.n	801e266 <UART_SetConfig+0xea>
 801e22e:	231b      	movs	r3, #27
 801e230:	2218      	movs	r2, #24
 801e232:	189b      	adds	r3, r3, r2
 801e234:	19db      	adds	r3, r3, r7
 801e236:	2201      	movs	r2, #1
 801e238:	701a      	strb	r2, [r3, #0]
 801e23a:	e0b4      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e23c:	231b      	movs	r3, #27
 801e23e:	2218      	movs	r2, #24
 801e240:	189b      	adds	r3, r3, r2
 801e242:	19db      	adds	r3, r3, r7
 801e244:	2202      	movs	r2, #2
 801e246:	701a      	strb	r2, [r3, #0]
 801e248:	e0ad      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e24a:	231b      	movs	r3, #27
 801e24c:	2218      	movs	r2, #24
 801e24e:	189b      	adds	r3, r3, r2
 801e250:	19db      	adds	r3, r3, r7
 801e252:	2204      	movs	r2, #4
 801e254:	701a      	strb	r2, [r3, #0]
 801e256:	e0a6      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e258:	231b      	movs	r3, #27
 801e25a:	2218      	movs	r2, #24
 801e25c:	189b      	adds	r3, r3, r2
 801e25e:	19db      	adds	r3, r3, r7
 801e260:	2208      	movs	r2, #8
 801e262:	701a      	strb	r2, [r3, #0]
 801e264:	e09f      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e266:	231b      	movs	r3, #27
 801e268:	2218      	movs	r2, #24
 801e26a:	189b      	adds	r3, r3, r2
 801e26c:	19db      	adds	r3, r3, r7
 801e26e:	2210      	movs	r2, #16
 801e270:	701a      	strb	r2, [r3, #0]
 801e272:	e098      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e274:	69fb      	ldr	r3, [r7, #28]
 801e276:	681b      	ldr	r3, [r3, #0]
 801e278:	4a96      	ldr	r2, [pc, #600]	@ (801e4d4 <UART_SetConfig+0x358>)
 801e27a:	4293      	cmp	r3, r2
 801e27c:	d131      	bne.n	801e2e2 <UART_SetConfig+0x166>
 801e27e:	4b94      	ldr	r3, [pc, #592]	@ (801e4d0 <UART_SetConfig+0x354>)
 801e280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e282:	220c      	movs	r2, #12
 801e284:	4013      	ands	r3, r2
 801e286:	2b0c      	cmp	r3, #12
 801e288:	d01d      	beq.n	801e2c6 <UART_SetConfig+0x14a>
 801e28a:	d823      	bhi.n	801e2d4 <UART_SetConfig+0x158>
 801e28c:	2b08      	cmp	r3, #8
 801e28e:	d00c      	beq.n	801e2aa <UART_SetConfig+0x12e>
 801e290:	d820      	bhi.n	801e2d4 <UART_SetConfig+0x158>
 801e292:	2b00      	cmp	r3, #0
 801e294:	d002      	beq.n	801e29c <UART_SetConfig+0x120>
 801e296:	2b04      	cmp	r3, #4
 801e298:	d00e      	beq.n	801e2b8 <UART_SetConfig+0x13c>
 801e29a:	e01b      	b.n	801e2d4 <UART_SetConfig+0x158>
 801e29c:	231b      	movs	r3, #27
 801e29e:	2218      	movs	r2, #24
 801e2a0:	189b      	adds	r3, r3, r2
 801e2a2:	19db      	adds	r3, r3, r7
 801e2a4:	2200      	movs	r2, #0
 801e2a6:	701a      	strb	r2, [r3, #0]
 801e2a8:	e07d      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e2aa:	231b      	movs	r3, #27
 801e2ac:	2218      	movs	r2, #24
 801e2ae:	189b      	adds	r3, r3, r2
 801e2b0:	19db      	adds	r3, r3, r7
 801e2b2:	2202      	movs	r2, #2
 801e2b4:	701a      	strb	r2, [r3, #0]
 801e2b6:	e076      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e2b8:	231b      	movs	r3, #27
 801e2ba:	2218      	movs	r2, #24
 801e2bc:	189b      	adds	r3, r3, r2
 801e2be:	19db      	adds	r3, r3, r7
 801e2c0:	2204      	movs	r2, #4
 801e2c2:	701a      	strb	r2, [r3, #0]
 801e2c4:	e06f      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e2c6:	231b      	movs	r3, #27
 801e2c8:	2218      	movs	r2, #24
 801e2ca:	189b      	adds	r3, r3, r2
 801e2cc:	19db      	adds	r3, r3, r7
 801e2ce:	2208      	movs	r2, #8
 801e2d0:	701a      	strb	r2, [r3, #0]
 801e2d2:	e068      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e2d4:	231b      	movs	r3, #27
 801e2d6:	2218      	movs	r2, #24
 801e2d8:	189b      	adds	r3, r3, r2
 801e2da:	19db      	adds	r3, r3, r7
 801e2dc:	2210      	movs	r2, #16
 801e2de:	701a      	strb	r2, [r3, #0]
 801e2e0:	e061      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e2e2:	69fb      	ldr	r3, [r7, #28]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	4a7c      	ldr	r2, [pc, #496]	@ (801e4d8 <UART_SetConfig+0x35c>)
 801e2e8:	4293      	cmp	r3, r2
 801e2ea:	d106      	bne.n	801e2fa <UART_SetConfig+0x17e>
 801e2ec:	231b      	movs	r3, #27
 801e2ee:	2218      	movs	r2, #24
 801e2f0:	189b      	adds	r3, r3, r2
 801e2f2:	19db      	adds	r3, r3, r7
 801e2f4:	2200      	movs	r2, #0
 801e2f6:	701a      	strb	r2, [r3, #0]
 801e2f8:	e055      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e2fa:	69fb      	ldr	r3, [r7, #28]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	4a77      	ldr	r2, [pc, #476]	@ (801e4dc <UART_SetConfig+0x360>)
 801e300:	4293      	cmp	r3, r2
 801e302:	d106      	bne.n	801e312 <UART_SetConfig+0x196>
 801e304:	231b      	movs	r3, #27
 801e306:	2218      	movs	r2, #24
 801e308:	189b      	adds	r3, r3, r2
 801e30a:	19db      	adds	r3, r3, r7
 801e30c:	2200      	movs	r2, #0
 801e30e:	701a      	strb	r2, [r3, #0]
 801e310:	e049      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e312:	69fb      	ldr	r3, [r7, #28]
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	4a6b      	ldr	r2, [pc, #428]	@ (801e4c4 <UART_SetConfig+0x348>)
 801e318:	4293      	cmp	r3, r2
 801e31a:	d13e      	bne.n	801e39a <UART_SetConfig+0x21e>
 801e31c:	4b6c      	ldr	r3, [pc, #432]	@ (801e4d0 <UART_SetConfig+0x354>)
 801e31e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e320:	23c0      	movs	r3, #192	@ 0xc0
 801e322:	011b      	lsls	r3, r3, #4
 801e324:	4013      	ands	r3, r2
 801e326:	22c0      	movs	r2, #192	@ 0xc0
 801e328:	0112      	lsls	r2, r2, #4
 801e32a:	4293      	cmp	r3, r2
 801e32c:	d027      	beq.n	801e37e <UART_SetConfig+0x202>
 801e32e:	22c0      	movs	r2, #192	@ 0xc0
 801e330:	0112      	lsls	r2, r2, #4
 801e332:	4293      	cmp	r3, r2
 801e334:	d82a      	bhi.n	801e38c <UART_SetConfig+0x210>
 801e336:	2280      	movs	r2, #128	@ 0x80
 801e338:	0112      	lsls	r2, r2, #4
 801e33a:	4293      	cmp	r3, r2
 801e33c:	d011      	beq.n	801e362 <UART_SetConfig+0x1e6>
 801e33e:	2280      	movs	r2, #128	@ 0x80
 801e340:	0112      	lsls	r2, r2, #4
 801e342:	4293      	cmp	r3, r2
 801e344:	d822      	bhi.n	801e38c <UART_SetConfig+0x210>
 801e346:	2b00      	cmp	r3, #0
 801e348:	d004      	beq.n	801e354 <UART_SetConfig+0x1d8>
 801e34a:	2280      	movs	r2, #128	@ 0x80
 801e34c:	00d2      	lsls	r2, r2, #3
 801e34e:	4293      	cmp	r3, r2
 801e350:	d00e      	beq.n	801e370 <UART_SetConfig+0x1f4>
 801e352:	e01b      	b.n	801e38c <UART_SetConfig+0x210>
 801e354:	231b      	movs	r3, #27
 801e356:	2218      	movs	r2, #24
 801e358:	189b      	adds	r3, r3, r2
 801e35a:	19db      	adds	r3, r3, r7
 801e35c:	2200      	movs	r2, #0
 801e35e:	701a      	strb	r2, [r3, #0]
 801e360:	e021      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e362:	231b      	movs	r3, #27
 801e364:	2218      	movs	r2, #24
 801e366:	189b      	adds	r3, r3, r2
 801e368:	19db      	adds	r3, r3, r7
 801e36a:	2202      	movs	r2, #2
 801e36c:	701a      	strb	r2, [r3, #0]
 801e36e:	e01a      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e370:	231b      	movs	r3, #27
 801e372:	2218      	movs	r2, #24
 801e374:	189b      	adds	r3, r3, r2
 801e376:	19db      	adds	r3, r3, r7
 801e378:	2204      	movs	r2, #4
 801e37a:	701a      	strb	r2, [r3, #0]
 801e37c:	e013      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e37e:	231b      	movs	r3, #27
 801e380:	2218      	movs	r2, #24
 801e382:	189b      	adds	r3, r3, r2
 801e384:	19db      	adds	r3, r3, r7
 801e386:	2208      	movs	r2, #8
 801e388:	701a      	strb	r2, [r3, #0]
 801e38a:	e00c      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e38c:	231b      	movs	r3, #27
 801e38e:	2218      	movs	r2, #24
 801e390:	189b      	adds	r3, r3, r2
 801e392:	19db      	adds	r3, r3, r7
 801e394:	2210      	movs	r2, #16
 801e396:	701a      	strb	r2, [r3, #0]
 801e398:	e005      	b.n	801e3a6 <UART_SetConfig+0x22a>
 801e39a:	231b      	movs	r3, #27
 801e39c:	2218      	movs	r2, #24
 801e39e:	189b      	adds	r3, r3, r2
 801e3a0:	19db      	adds	r3, r3, r7
 801e3a2:	2210      	movs	r2, #16
 801e3a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e3a6:	69fb      	ldr	r3, [r7, #28]
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	4a46      	ldr	r2, [pc, #280]	@ (801e4c4 <UART_SetConfig+0x348>)
 801e3ac:	4293      	cmp	r3, r2
 801e3ae:	d000      	beq.n	801e3b2 <UART_SetConfig+0x236>
 801e3b0:	e09a      	b.n	801e4e8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e3b2:	231b      	movs	r3, #27
 801e3b4:	2218      	movs	r2, #24
 801e3b6:	189b      	adds	r3, r3, r2
 801e3b8:	19db      	adds	r3, r3, r7
 801e3ba:	781b      	ldrb	r3, [r3, #0]
 801e3bc:	2b08      	cmp	r3, #8
 801e3be:	d01d      	beq.n	801e3fc <UART_SetConfig+0x280>
 801e3c0:	dc20      	bgt.n	801e404 <UART_SetConfig+0x288>
 801e3c2:	2b04      	cmp	r3, #4
 801e3c4:	d015      	beq.n	801e3f2 <UART_SetConfig+0x276>
 801e3c6:	dc1d      	bgt.n	801e404 <UART_SetConfig+0x288>
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d002      	beq.n	801e3d2 <UART_SetConfig+0x256>
 801e3cc:	2b02      	cmp	r3, #2
 801e3ce:	d005      	beq.n	801e3dc <UART_SetConfig+0x260>
 801e3d0:	e018      	b.n	801e404 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e3d2:	f7fd fd37 	bl	801be44 <HAL_RCC_GetPCLK1Freq>
 801e3d6:	0003      	movs	r3, r0
 801e3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3da:	e01c      	b.n	801e416 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e3dc:	4b3c      	ldr	r3, [pc, #240]	@ (801e4d0 <UART_SetConfig+0x354>)
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	2210      	movs	r2, #16
 801e3e2:	4013      	ands	r3, r2
 801e3e4:	d002      	beq.n	801e3ec <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e3e6:	4b3e      	ldr	r3, [pc, #248]	@ (801e4e0 <UART_SetConfig+0x364>)
 801e3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e3ea:	e014      	b.n	801e416 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e3ec:	4b3d      	ldr	r3, [pc, #244]	@ (801e4e4 <UART_SetConfig+0x368>)
 801e3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3f0:	e011      	b.n	801e416 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e3f2:	f7fd fc77 	bl	801bce4 <HAL_RCC_GetSysClockFreq>
 801e3f6:	0003      	movs	r3, r0
 801e3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3fa:	e00c      	b.n	801e416 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e3fc:	2380      	movs	r3, #128	@ 0x80
 801e3fe:	021b      	lsls	r3, r3, #8
 801e400:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e402:	e008      	b.n	801e416 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e404:	2300      	movs	r3, #0
 801e406:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e408:	231a      	movs	r3, #26
 801e40a:	2218      	movs	r2, #24
 801e40c:	189b      	adds	r3, r3, r2
 801e40e:	19db      	adds	r3, r3, r7
 801e410:	2201      	movs	r2, #1
 801e412:	701a      	strb	r2, [r3, #0]
        break;
 801e414:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d100      	bne.n	801e41e <UART_SetConfig+0x2a2>
 801e41c:	e133      	b.n	801e686 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e41e:	69fb      	ldr	r3, [r7, #28]
 801e420:	685a      	ldr	r2, [r3, #4]
 801e422:	0013      	movs	r3, r2
 801e424:	005b      	lsls	r3, r3, #1
 801e426:	189b      	adds	r3, r3, r2
 801e428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e42a:	429a      	cmp	r2, r3
 801e42c:	d305      	bcc.n	801e43a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e42e:	69fb      	ldr	r3, [r7, #28]
 801e430:	685b      	ldr	r3, [r3, #4]
 801e432:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e436:	429a      	cmp	r2, r3
 801e438:	d906      	bls.n	801e448 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e43a:	231a      	movs	r3, #26
 801e43c:	2218      	movs	r2, #24
 801e43e:	189b      	adds	r3, r3, r2
 801e440:	19db      	adds	r3, r3, r7
 801e442:	2201      	movs	r2, #1
 801e444:	701a      	strb	r2, [r3, #0]
 801e446:	e11e      	b.n	801e686 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e44a:	613b      	str	r3, [r7, #16]
 801e44c:	2300      	movs	r3, #0
 801e44e:	617b      	str	r3, [r7, #20]
 801e450:	6939      	ldr	r1, [r7, #16]
 801e452:	697a      	ldr	r2, [r7, #20]
 801e454:	000b      	movs	r3, r1
 801e456:	0e1b      	lsrs	r3, r3, #24
 801e458:	0010      	movs	r0, r2
 801e45a:	0205      	lsls	r5, r0, #8
 801e45c:	431d      	orrs	r5, r3
 801e45e:	000b      	movs	r3, r1
 801e460:	021c      	lsls	r4, r3, #8
 801e462:	69fb      	ldr	r3, [r7, #28]
 801e464:	685b      	ldr	r3, [r3, #4]
 801e466:	085b      	lsrs	r3, r3, #1
 801e468:	60bb      	str	r3, [r7, #8]
 801e46a:	2300      	movs	r3, #0
 801e46c:	60fb      	str	r3, [r7, #12]
 801e46e:	68b8      	ldr	r0, [r7, #8]
 801e470:	68f9      	ldr	r1, [r7, #12]
 801e472:	1900      	adds	r0, r0, r4
 801e474:	4169      	adcs	r1, r5
 801e476:	69fb      	ldr	r3, [r7, #28]
 801e478:	685b      	ldr	r3, [r3, #4]
 801e47a:	603b      	str	r3, [r7, #0]
 801e47c:	2300      	movs	r3, #0
 801e47e:	607b      	str	r3, [r7, #4]
 801e480:	683a      	ldr	r2, [r7, #0]
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	f7e2 f87c 	bl	8000580 <__aeabi_uldivmod>
 801e488:	0002      	movs	r2, r0
 801e48a:	000b      	movs	r3, r1
 801e48c:	0013      	movs	r3, r2
 801e48e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e492:	23c0      	movs	r3, #192	@ 0xc0
 801e494:	009b      	lsls	r3, r3, #2
 801e496:	429a      	cmp	r2, r3
 801e498:	d309      	bcc.n	801e4ae <UART_SetConfig+0x332>
 801e49a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e49c:	2380      	movs	r3, #128	@ 0x80
 801e49e:	035b      	lsls	r3, r3, #13
 801e4a0:	429a      	cmp	r2, r3
 801e4a2:	d204      	bcs.n	801e4ae <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e4a4:	69fb      	ldr	r3, [r7, #28]
 801e4a6:	681b      	ldr	r3, [r3, #0]
 801e4a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e4aa:	60da      	str	r2, [r3, #12]
 801e4ac:	e0eb      	b.n	801e686 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e4ae:	231a      	movs	r3, #26
 801e4b0:	2218      	movs	r2, #24
 801e4b2:	189b      	adds	r3, r3, r2
 801e4b4:	19db      	adds	r3, r3, r7
 801e4b6:	2201      	movs	r2, #1
 801e4b8:	701a      	strb	r2, [r3, #0]
 801e4ba:	e0e4      	b.n	801e686 <UART_SetConfig+0x50a>
 801e4bc:	efff69f3 	.word	0xefff69f3
 801e4c0:	ffffcfff 	.word	0xffffcfff
 801e4c4:	40004800 	.word	0x40004800
 801e4c8:	fffff4ff 	.word	0xfffff4ff
 801e4cc:	40013800 	.word	0x40013800
 801e4d0:	40021000 	.word	0x40021000
 801e4d4:	40004400 	.word	0x40004400
 801e4d8:	40004c00 	.word	0x40004c00
 801e4dc:	40005000 	.word	0x40005000
 801e4e0:	003d0900 	.word	0x003d0900
 801e4e4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e4e8:	69fb      	ldr	r3, [r7, #28]
 801e4ea:	69da      	ldr	r2, [r3, #28]
 801e4ec:	2380      	movs	r3, #128	@ 0x80
 801e4ee:	021b      	lsls	r3, r3, #8
 801e4f0:	429a      	cmp	r2, r3
 801e4f2:	d000      	beq.n	801e4f6 <UART_SetConfig+0x37a>
 801e4f4:	e070      	b.n	801e5d8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e4f6:	231b      	movs	r3, #27
 801e4f8:	2218      	movs	r2, #24
 801e4fa:	189b      	adds	r3, r3, r2
 801e4fc:	19db      	adds	r3, r3, r7
 801e4fe:	781b      	ldrb	r3, [r3, #0]
 801e500:	2b08      	cmp	r3, #8
 801e502:	d822      	bhi.n	801e54a <UART_SetConfig+0x3ce>
 801e504:	009a      	lsls	r2, r3, #2
 801e506:	4b67      	ldr	r3, [pc, #412]	@ (801e6a4 <UART_SetConfig+0x528>)
 801e508:	18d3      	adds	r3, r2, r3
 801e50a:	681b      	ldr	r3, [r3, #0]
 801e50c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e50e:	f7fd fc99 	bl	801be44 <HAL_RCC_GetPCLK1Freq>
 801e512:	0003      	movs	r3, r0
 801e514:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e516:	e021      	b.n	801e55c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e518:	f7fd fcaa 	bl	801be70 <HAL_RCC_GetPCLK2Freq>
 801e51c:	0003      	movs	r3, r0
 801e51e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e520:	e01c      	b.n	801e55c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e522:	4b61      	ldr	r3, [pc, #388]	@ (801e6a8 <UART_SetConfig+0x52c>)
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	2210      	movs	r2, #16
 801e528:	4013      	ands	r3, r2
 801e52a:	d002      	beq.n	801e532 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e52c:	4b5f      	ldr	r3, [pc, #380]	@ (801e6ac <UART_SetConfig+0x530>)
 801e52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e530:	e014      	b.n	801e55c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e532:	4b5f      	ldr	r3, [pc, #380]	@ (801e6b0 <UART_SetConfig+0x534>)
 801e534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e536:	e011      	b.n	801e55c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e538:	f7fd fbd4 	bl	801bce4 <HAL_RCC_GetSysClockFreq>
 801e53c:	0003      	movs	r3, r0
 801e53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e540:	e00c      	b.n	801e55c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e542:	2380      	movs	r3, #128	@ 0x80
 801e544:	021b      	lsls	r3, r3, #8
 801e546:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e548:	e008      	b.n	801e55c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e54a:	2300      	movs	r3, #0
 801e54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e54e:	231a      	movs	r3, #26
 801e550:	2218      	movs	r2, #24
 801e552:	189b      	adds	r3, r3, r2
 801e554:	19db      	adds	r3, r3, r7
 801e556:	2201      	movs	r2, #1
 801e558:	701a      	strb	r2, [r3, #0]
        break;
 801e55a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d100      	bne.n	801e564 <UART_SetConfig+0x3e8>
 801e562:	e090      	b.n	801e686 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e566:	005a      	lsls	r2, r3, #1
 801e568:	69fb      	ldr	r3, [r7, #28]
 801e56a:	685b      	ldr	r3, [r3, #4]
 801e56c:	085b      	lsrs	r3, r3, #1
 801e56e:	18d2      	adds	r2, r2, r3
 801e570:	69fb      	ldr	r3, [r7, #28]
 801e572:	685b      	ldr	r3, [r3, #4]
 801e574:	0019      	movs	r1, r3
 801e576:	0010      	movs	r0, r2
 801e578:	f7e1 fe14 	bl	80001a4 <__udivsi3>
 801e57c:	0003      	movs	r3, r0
 801e57e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e582:	2b0f      	cmp	r3, #15
 801e584:	d921      	bls.n	801e5ca <UART_SetConfig+0x44e>
 801e586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e588:	2380      	movs	r3, #128	@ 0x80
 801e58a:	025b      	lsls	r3, r3, #9
 801e58c:	429a      	cmp	r2, r3
 801e58e:	d21c      	bcs.n	801e5ca <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e592:	b29a      	uxth	r2, r3
 801e594:	200e      	movs	r0, #14
 801e596:	2418      	movs	r4, #24
 801e598:	1903      	adds	r3, r0, r4
 801e59a:	19db      	adds	r3, r3, r7
 801e59c:	210f      	movs	r1, #15
 801e59e:	438a      	bics	r2, r1
 801e5a0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5a4:	085b      	lsrs	r3, r3, #1
 801e5a6:	b29b      	uxth	r3, r3
 801e5a8:	2207      	movs	r2, #7
 801e5aa:	4013      	ands	r3, r2
 801e5ac:	b299      	uxth	r1, r3
 801e5ae:	1903      	adds	r3, r0, r4
 801e5b0:	19db      	adds	r3, r3, r7
 801e5b2:	1902      	adds	r2, r0, r4
 801e5b4:	19d2      	adds	r2, r2, r7
 801e5b6:	8812      	ldrh	r2, [r2, #0]
 801e5b8:	430a      	orrs	r2, r1
 801e5ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e5bc:	69fb      	ldr	r3, [r7, #28]
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	1902      	adds	r2, r0, r4
 801e5c2:	19d2      	adds	r2, r2, r7
 801e5c4:	8812      	ldrh	r2, [r2, #0]
 801e5c6:	60da      	str	r2, [r3, #12]
 801e5c8:	e05d      	b.n	801e686 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e5ca:	231a      	movs	r3, #26
 801e5cc:	2218      	movs	r2, #24
 801e5ce:	189b      	adds	r3, r3, r2
 801e5d0:	19db      	adds	r3, r3, r7
 801e5d2:	2201      	movs	r2, #1
 801e5d4:	701a      	strb	r2, [r3, #0]
 801e5d6:	e056      	b.n	801e686 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e5d8:	231b      	movs	r3, #27
 801e5da:	2218      	movs	r2, #24
 801e5dc:	189b      	adds	r3, r3, r2
 801e5de:	19db      	adds	r3, r3, r7
 801e5e0:	781b      	ldrb	r3, [r3, #0]
 801e5e2:	2b08      	cmp	r3, #8
 801e5e4:	d822      	bhi.n	801e62c <UART_SetConfig+0x4b0>
 801e5e6:	009a      	lsls	r2, r3, #2
 801e5e8:	4b32      	ldr	r3, [pc, #200]	@ (801e6b4 <UART_SetConfig+0x538>)
 801e5ea:	18d3      	adds	r3, r2, r3
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e5f0:	f7fd fc28 	bl	801be44 <HAL_RCC_GetPCLK1Freq>
 801e5f4:	0003      	movs	r3, r0
 801e5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e5f8:	e021      	b.n	801e63e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e5fa:	f7fd fc39 	bl	801be70 <HAL_RCC_GetPCLK2Freq>
 801e5fe:	0003      	movs	r3, r0
 801e600:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e602:	e01c      	b.n	801e63e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e604:	4b28      	ldr	r3, [pc, #160]	@ (801e6a8 <UART_SetConfig+0x52c>)
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	2210      	movs	r2, #16
 801e60a:	4013      	ands	r3, r2
 801e60c:	d002      	beq.n	801e614 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e60e:	4b27      	ldr	r3, [pc, #156]	@ (801e6ac <UART_SetConfig+0x530>)
 801e610:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e612:	e014      	b.n	801e63e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e614:	4b26      	ldr	r3, [pc, #152]	@ (801e6b0 <UART_SetConfig+0x534>)
 801e616:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e618:	e011      	b.n	801e63e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e61a:	f7fd fb63 	bl	801bce4 <HAL_RCC_GetSysClockFreq>
 801e61e:	0003      	movs	r3, r0
 801e620:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e622:	e00c      	b.n	801e63e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e624:	2380      	movs	r3, #128	@ 0x80
 801e626:	021b      	lsls	r3, r3, #8
 801e628:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e62a:	e008      	b.n	801e63e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e62c:	2300      	movs	r3, #0
 801e62e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e630:	231a      	movs	r3, #26
 801e632:	2218      	movs	r2, #24
 801e634:	189b      	adds	r3, r3, r2
 801e636:	19db      	adds	r3, r3, r7
 801e638:	2201      	movs	r2, #1
 801e63a:	701a      	strb	r2, [r3, #0]
        break;
 801e63c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e640:	2b00      	cmp	r3, #0
 801e642:	d020      	beq.n	801e686 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e644:	69fb      	ldr	r3, [r7, #28]
 801e646:	685b      	ldr	r3, [r3, #4]
 801e648:	085a      	lsrs	r2, r3, #1
 801e64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e64c:	18d2      	adds	r2, r2, r3
 801e64e:	69fb      	ldr	r3, [r7, #28]
 801e650:	685b      	ldr	r3, [r3, #4]
 801e652:	0019      	movs	r1, r3
 801e654:	0010      	movs	r0, r2
 801e656:	f7e1 fda5 	bl	80001a4 <__udivsi3>
 801e65a:	0003      	movs	r3, r0
 801e65c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e660:	2b0f      	cmp	r3, #15
 801e662:	d90a      	bls.n	801e67a <UART_SetConfig+0x4fe>
 801e664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e666:	2380      	movs	r3, #128	@ 0x80
 801e668:	025b      	lsls	r3, r3, #9
 801e66a:	429a      	cmp	r2, r3
 801e66c:	d205      	bcs.n	801e67a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e670:	b29a      	uxth	r2, r3
 801e672:	69fb      	ldr	r3, [r7, #28]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	60da      	str	r2, [r3, #12]
 801e678:	e005      	b.n	801e686 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e67a:	231a      	movs	r3, #26
 801e67c:	2218      	movs	r2, #24
 801e67e:	189b      	adds	r3, r3, r2
 801e680:	19db      	adds	r3, r3, r7
 801e682:	2201      	movs	r2, #1
 801e684:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e686:	69fb      	ldr	r3, [r7, #28]
 801e688:	2200      	movs	r2, #0
 801e68a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	2200      	movs	r2, #0
 801e690:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e692:	231a      	movs	r3, #26
 801e694:	2218      	movs	r2, #24
 801e696:	189b      	adds	r3, r3, r2
 801e698:	19db      	adds	r3, r3, r7
 801e69a:	781b      	ldrb	r3, [r3, #0]
}
 801e69c:	0018      	movs	r0, r3
 801e69e:	46bd      	mov	sp, r7
 801e6a0:	b00e      	add	sp, #56	@ 0x38
 801e6a2:	bdb0      	pop	{r4, r5, r7, pc}
 801e6a4:	0802e888 	.word	0x0802e888
 801e6a8:	40021000 	.word	0x40021000
 801e6ac:	003d0900 	.word	0x003d0900
 801e6b0:	00f42400 	.word	0x00f42400
 801e6b4:	0802e8ac 	.word	0x0802e8ac

0801e6b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e6b8:	b580      	push	{r7, lr}
 801e6ba:	b082      	sub	sp, #8
 801e6bc:	af00      	add	r7, sp, #0
 801e6be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6c4:	2201      	movs	r2, #1
 801e6c6:	4013      	ands	r3, r2
 801e6c8:	d00b      	beq.n	801e6e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e6ca:	687b      	ldr	r3, [r7, #4]
 801e6cc:	681b      	ldr	r3, [r3, #0]
 801e6ce:	685b      	ldr	r3, [r3, #4]
 801e6d0:	4a4a      	ldr	r2, [pc, #296]	@ (801e7fc <UART_AdvFeatureConfig+0x144>)
 801e6d2:	4013      	ands	r3, r2
 801e6d4:	0019      	movs	r1, r3
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	430a      	orrs	r2, r1
 801e6e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6e6:	2202      	movs	r2, #2
 801e6e8:	4013      	ands	r3, r2
 801e6ea:	d00b      	beq.n	801e704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	685b      	ldr	r3, [r3, #4]
 801e6f2:	4a43      	ldr	r2, [pc, #268]	@ (801e800 <UART_AdvFeatureConfig+0x148>)
 801e6f4:	4013      	ands	r3, r2
 801e6f6:	0019      	movs	r1, r3
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	430a      	orrs	r2, r1
 801e702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e708:	2204      	movs	r2, #4
 801e70a:	4013      	ands	r3, r2
 801e70c:	d00b      	beq.n	801e726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	685b      	ldr	r3, [r3, #4]
 801e714:	4a3b      	ldr	r2, [pc, #236]	@ (801e804 <UART_AdvFeatureConfig+0x14c>)
 801e716:	4013      	ands	r3, r2
 801e718:	0019      	movs	r1, r3
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	430a      	orrs	r2, r1
 801e724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e72a:	2208      	movs	r2, #8
 801e72c:	4013      	ands	r3, r2
 801e72e:	d00b      	beq.n	801e748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	685b      	ldr	r3, [r3, #4]
 801e736:	4a34      	ldr	r2, [pc, #208]	@ (801e808 <UART_AdvFeatureConfig+0x150>)
 801e738:	4013      	ands	r3, r2
 801e73a:	0019      	movs	r1, r3
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	430a      	orrs	r2, r1
 801e746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e74c:	2210      	movs	r2, #16
 801e74e:	4013      	ands	r3, r2
 801e750:	d00b      	beq.n	801e76a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	689b      	ldr	r3, [r3, #8]
 801e758:	4a2c      	ldr	r2, [pc, #176]	@ (801e80c <UART_AdvFeatureConfig+0x154>)
 801e75a:	4013      	ands	r3, r2
 801e75c:	0019      	movs	r1, r3
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	430a      	orrs	r2, r1
 801e768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e76e:	2220      	movs	r2, #32
 801e770:	4013      	ands	r3, r2
 801e772:	d00b      	beq.n	801e78c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	689b      	ldr	r3, [r3, #8]
 801e77a:	4a25      	ldr	r2, [pc, #148]	@ (801e810 <UART_AdvFeatureConfig+0x158>)
 801e77c:	4013      	ands	r3, r2
 801e77e:	0019      	movs	r1, r3
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	430a      	orrs	r2, r1
 801e78a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e790:	2240      	movs	r2, #64	@ 0x40
 801e792:	4013      	ands	r3, r2
 801e794:	d01d      	beq.n	801e7d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	685b      	ldr	r3, [r3, #4]
 801e79c:	4a1d      	ldr	r2, [pc, #116]	@ (801e814 <UART_AdvFeatureConfig+0x15c>)
 801e79e:	4013      	ands	r3, r2
 801e7a0:	0019      	movs	r1, r3
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	430a      	orrs	r2, r1
 801e7ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e7b2:	2380      	movs	r3, #128	@ 0x80
 801e7b4:	035b      	lsls	r3, r3, #13
 801e7b6:	429a      	cmp	r2, r3
 801e7b8:	d10b      	bne.n	801e7d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	685b      	ldr	r3, [r3, #4]
 801e7c0:	4a15      	ldr	r2, [pc, #84]	@ (801e818 <UART_AdvFeatureConfig+0x160>)
 801e7c2:	4013      	ands	r3, r2
 801e7c4:	0019      	movs	r1, r3
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	430a      	orrs	r2, r1
 801e7d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7d6:	2280      	movs	r2, #128	@ 0x80
 801e7d8:	4013      	ands	r3, r2
 801e7da:	d00b      	beq.n	801e7f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	685b      	ldr	r3, [r3, #4]
 801e7e2:	4a0e      	ldr	r2, [pc, #56]	@ (801e81c <UART_AdvFeatureConfig+0x164>)
 801e7e4:	4013      	ands	r3, r2
 801e7e6:	0019      	movs	r1, r3
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	430a      	orrs	r2, r1
 801e7f2:	605a      	str	r2, [r3, #4]
  }
}
 801e7f4:	46c0      	nop			@ (mov r8, r8)
 801e7f6:	46bd      	mov	sp, r7
 801e7f8:	b002      	add	sp, #8
 801e7fa:	bd80      	pop	{r7, pc}
 801e7fc:	fffdffff 	.word	0xfffdffff
 801e800:	fffeffff 	.word	0xfffeffff
 801e804:	fffbffff 	.word	0xfffbffff
 801e808:	ffff7fff 	.word	0xffff7fff
 801e80c:	ffffefff 	.word	0xffffefff
 801e810:	ffffdfff 	.word	0xffffdfff
 801e814:	ffefffff 	.word	0xffefffff
 801e818:	ff9fffff 	.word	0xff9fffff
 801e81c:	fff7ffff 	.word	0xfff7ffff

0801e820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e820:	b580      	push	{r7, lr}
 801e822:	b092      	sub	sp, #72	@ 0x48
 801e824:	af02      	add	r7, sp, #8
 801e826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	2284      	movs	r2, #132	@ 0x84
 801e82c:	2100      	movs	r1, #0
 801e82e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e830:	f7f6 f8b0 	bl	8014994 <HAL_GetTick>
 801e834:	0003      	movs	r3, r0
 801e836:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	681b      	ldr	r3, [r3, #0]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	2208      	movs	r2, #8
 801e840:	4013      	ands	r3, r2
 801e842:	2b08      	cmp	r3, #8
 801e844:	d12c      	bne.n	801e8a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e848:	2280      	movs	r2, #128	@ 0x80
 801e84a:	0391      	lsls	r1, r2, #14
 801e84c:	6878      	ldr	r0, [r7, #4]
 801e84e:	4a46      	ldr	r2, [pc, #280]	@ (801e968 <UART_CheckIdleState+0x148>)
 801e850:	9200      	str	r2, [sp, #0]
 801e852:	2200      	movs	r2, #0
 801e854:	f000 f88c 	bl	801e970 <UART_WaitOnFlagUntilTimeout>
 801e858:	1e03      	subs	r3, r0, #0
 801e85a:	d021      	beq.n	801e8a0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e85c:	f3ef 8310 	mrs	r3, PRIMASK
 801e860:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e864:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e866:	2301      	movs	r3, #1
 801e868:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e86c:	f383 8810 	msr	PRIMASK, r3
}
 801e870:	46c0      	nop			@ (mov r8, r8)
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	681a      	ldr	r2, [r3, #0]
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	2180      	movs	r1, #128	@ 0x80
 801e87e:	438a      	bics	r2, r1
 801e880:	601a      	str	r2, [r3, #0]
 801e882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e888:	f383 8810 	msr	PRIMASK, r3
}
 801e88c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	2220      	movs	r2, #32
 801e892:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	2278      	movs	r2, #120	@ 0x78
 801e898:	2100      	movs	r1, #0
 801e89a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e89c:	2303      	movs	r3, #3
 801e89e:	e05f      	b.n	801e960 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	681b      	ldr	r3, [r3, #0]
 801e8a4:	681b      	ldr	r3, [r3, #0]
 801e8a6:	2204      	movs	r2, #4
 801e8a8:	4013      	ands	r3, r2
 801e8aa:	2b04      	cmp	r3, #4
 801e8ac:	d146      	bne.n	801e93c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8b0:	2280      	movs	r2, #128	@ 0x80
 801e8b2:	03d1      	lsls	r1, r2, #15
 801e8b4:	6878      	ldr	r0, [r7, #4]
 801e8b6:	4a2c      	ldr	r2, [pc, #176]	@ (801e968 <UART_CheckIdleState+0x148>)
 801e8b8:	9200      	str	r2, [sp, #0]
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	f000 f858 	bl	801e970 <UART_WaitOnFlagUntilTimeout>
 801e8c0:	1e03      	subs	r3, r0, #0
 801e8c2:	d03b      	beq.n	801e93c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8c4:	f3ef 8310 	mrs	r3, PRIMASK
 801e8c8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e8cc:	637b      	str	r3, [r7, #52]	@ 0x34
 801e8ce:	2301      	movs	r3, #1
 801e8d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8d2:	693b      	ldr	r3, [r7, #16]
 801e8d4:	f383 8810 	msr	PRIMASK, r3
}
 801e8d8:	46c0      	nop			@ (mov r8, r8)
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	681a      	ldr	r2, [r3, #0]
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	4921      	ldr	r1, [pc, #132]	@ (801e96c <UART_CheckIdleState+0x14c>)
 801e8e6:	400a      	ands	r2, r1
 801e8e8:	601a      	str	r2, [r3, #0]
 801e8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8ee:	697b      	ldr	r3, [r7, #20]
 801e8f0:	f383 8810 	msr	PRIMASK, r3
}
 801e8f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8f6:	f3ef 8310 	mrs	r3, PRIMASK
 801e8fa:	61bb      	str	r3, [r7, #24]
  return(result);
 801e8fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e8fe:	633b      	str	r3, [r7, #48]	@ 0x30
 801e900:	2301      	movs	r3, #1
 801e902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e904:	69fb      	ldr	r3, [r7, #28]
 801e906:	f383 8810 	msr	PRIMASK, r3
}
 801e90a:	46c0      	nop			@ (mov r8, r8)
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	681b      	ldr	r3, [r3, #0]
 801e910:	689a      	ldr	r2, [r3, #8]
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	2101      	movs	r1, #1
 801e918:	438a      	bics	r2, r1
 801e91a:	609a      	str	r2, [r3, #8]
 801e91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e91e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e920:	6a3b      	ldr	r3, [r7, #32]
 801e922:	f383 8810 	msr	PRIMASK, r3
}
 801e926:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	2280      	movs	r2, #128	@ 0x80
 801e92c:	2120      	movs	r1, #32
 801e92e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	2278      	movs	r2, #120	@ 0x78
 801e934:	2100      	movs	r1, #0
 801e936:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e938:	2303      	movs	r3, #3
 801e93a:	e011      	b.n	801e960 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e93c:	687b      	ldr	r3, [r7, #4]
 801e93e:	2220      	movs	r2, #32
 801e940:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	2280      	movs	r2, #128	@ 0x80
 801e946:	2120      	movs	r1, #32
 801e948:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	2200      	movs	r2, #0
 801e94e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	2200      	movs	r2, #0
 801e954:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	2278      	movs	r2, #120	@ 0x78
 801e95a:	2100      	movs	r1, #0
 801e95c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e95e:	2300      	movs	r3, #0
}
 801e960:	0018      	movs	r0, r3
 801e962:	46bd      	mov	sp, r7
 801e964:	b010      	add	sp, #64	@ 0x40
 801e966:	bd80      	pop	{r7, pc}
 801e968:	01ffffff 	.word	0x01ffffff
 801e96c:	fffffedf 	.word	0xfffffedf

0801e970 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e970:	b580      	push	{r7, lr}
 801e972:	b084      	sub	sp, #16
 801e974:	af00      	add	r7, sp, #0
 801e976:	60f8      	str	r0, [r7, #12]
 801e978:	60b9      	str	r1, [r7, #8]
 801e97a:	603b      	str	r3, [r7, #0]
 801e97c:	1dfb      	adds	r3, r7, #7
 801e97e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e980:	e04b      	b.n	801ea1a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e982:	69bb      	ldr	r3, [r7, #24]
 801e984:	3301      	adds	r3, #1
 801e986:	d048      	beq.n	801ea1a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e988:	f7f6 f804 	bl	8014994 <HAL_GetTick>
 801e98c:	0002      	movs	r2, r0
 801e98e:	683b      	ldr	r3, [r7, #0]
 801e990:	1ad3      	subs	r3, r2, r3
 801e992:	69ba      	ldr	r2, [r7, #24]
 801e994:	429a      	cmp	r2, r3
 801e996:	d302      	bcc.n	801e99e <UART_WaitOnFlagUntilTimeout+0x2e>
 801e998:	69bb      	ldr	r3, [r7, #24]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d101      	bne.n	801e9a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e99e:	2303      	movs	r3, #3
 801e9a0:	e04b      	b.n	801ea3a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e9a2:	68fb      	ldr	r3, [r7, #12]
 801e9a4:	681b      	ldr	r3, [r3, #0]
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	2204      	movs	r2, #4
 801e9aa:	4013      	ands	r3, r2
 801e9ac:	d035      	beq.n	801ea1a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	69db      	ldr	r3, [r3, #28]
 801e9b4:	2208      	movs	r2, #8
 801e9b6:	4013      	ands	r3, r2
 801e9b8:	2b08      	cmp	r3, #8
 801e9ba:	d111      	bne.n	801e9e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e9bc:	68fb      	ldr	r3, [r7, #12]
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	2208      	movs	r2, #8
 801e9c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	0018      	movs	r0, r3
 801e9c8:	f000 f9ca 	bl	801ed60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	2284      	movs	r2, #132	@ 0x84
 801e9d0:	2108      	movs	r1, #8
 801e9d2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e9d4:	68fb      	ldr	r3, [r7, #12]
 801e9d6:	2278      	movs	r2, #120	@ 0x78
 801e9d8:	2100      	movs	r1, #0
 801e9da:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e9dc:	2301      	movs	r3, #1
 801e9de:	e02c      	b.n	801ea3a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	69da      	ldr	r2, [r3, #28]
 801e9e6:	2380      	movs	r3, #128	@ 0x80
 801e9e8:	011b      	lsls	r3, r3, #4
 801e9ea:	401a      	ands	r2, r3
 801e9ec:	2380      	movs	r3, #128	@ 0x80
 801e9ee:	011b      	lsls	r3, r3, #4
 801e9f0:	429a      	cmp	r2, r3
 801e9f2:	d112      	bne.n	801ea1a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e9f4:	68fb      	ldr	r3, [r7, #12]
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	2280      	movs	r2, #128	@ 0x80
 801e9fa:	0112      	lsls	r2, r2, #4
 801e9fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	0018      	movs	r0, r3
 801ea02:	f000 f9ad 	bl	801ed60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ea06:	68fb      	ldr	r3, [r7, #12]
 801ea08:	2284      	movs	r2, #132	@ 0x84
 801ea0a:	2120      	movs	r1, #32
 801ea0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ea0e:	68fb      	ldr	r3, [r7, #12]
 801ea10:	2278      	movs	r2, #120	@ 0x78
 801ea12:	2100      	movs	r1, #0
 801ea14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801ea16:	2303      	movs	r3, #3
 801ea18:	e00f      	b.n	801ea3a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ea1a:	68fb      	ldr	r3, [r7, #12]
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	69db      	ldr	r3, [r3, #28]
 801ea20:	68ba      	ldr	r2, [r7, #8]
 801ea22:	4013      	ands	r3, r2
 801ea24:	68ba      	ldr	r2, [r7, #8]
 801ea26:	1ad3      	subs	r3, r2, r3
 801ea28:	425a      	negs	r2, r3
 801ea2a:	4153      	adcs	r3, r2
 801ea2c:	b2db      	uxtb	r3, r3
 801ea2e:	001a      	movs	r2, r3
 801ea30:	1dfb      	adds	r3, r7, #7
 801ea32:	781b      	ldrb	r3, [r3, #0]
 801ea34:	429a      	cmp	r2, r3
 801ea36:	d0a4      	beq.n	801e982 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ea38:	2300      	movs	r3, #0
}
 801ea3a:	0018      	movs	r0, r3
 801ea3c:	46bd      	mov	sp, r7
 801ea3e:	b004      	add	sp, #16
 801ea40:	bd80      	pop	{r7, pc}
	...

0801ea44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ea44:	b580      	push	{r7, lr}
 801ea46:	b090      	sub	sp, #64	@ 0x40
 801ea48:	af00      	add	r7, sp, #0
 801ea4a:	60f8      	str	r0, [r7, #12]
 801ea4c:	60b9      	str	r1, [r7, #8]
 801ea4e:	1dbb      	adds	r3, r7, #6
 801ea50:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801ea52:	68fb      	ldr	r3, [r7, #12]
 801ea54:	68ba      	ldr	r2, [r7, #8]
 801ea56:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801ea58:	68fb      	ldr	r3, [r7, #12]
 801ea5a:	1dba      	adds	r2, r7, #6
 801ea5c:	2158      	movs	r1, #88	@ 0x58
 801ea5e:	8812      	ldrh	r2, [r2, #0]
 801ea60:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801ea62:	68fb      	ldr	r3, [r7, #12]
 801ea64:	1dba      	adds	r2, r7, #6
 801ea66:	215a      	movs	r1, #90	@ 0x5a
 801ea68:	8812      	ldrh	r2, [r2, #0]
 801ea6a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	2200      	movs	r2, #0
 801ea70:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ea72:	68fb      	ldr	r3, [r7, #12]
 801ea74:	689a      	ldr	r2, [r3, #8]
 801ea76:	2380      	movs	r3, #128	@ 0x80
 801ea78:	015b      	lsls	r3, r3, #5
 801ea7a:	429a      	cmp	r2, r3
 801ea7c:	d10d      	bne.n	801ea9a <UART_Start_Receive_IT+0x56>
 801ea7e:	68fb      	ldr	r3, [r7, #12]
 801ea80:	691b      	ldr	r3, [r3, #16]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d104      	bne.n	801ea90 <UART_Start_Receive_IT+0x4c>
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	225c      	movs	r2, #92	@ 0x5c
 801ea8a:	4950      	ldr	r1, [pc, #320]	@ (801ebcc <UART_Start_Receive_IT+0x188>)
 801ea8c:	5299      	strh	r1, [r3, r2]
 801ea8e:	e02e      	b.n	801eaee <UART_Start_Receive_IT+0xaa>
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	225c      	movs	r2, #92	@ 0x5c
 801ea94:	21ff      	movs	r1, #255	@ 0xff
 801ea96:	5299      	strh	r1, [r3, r2]
 801ea98:	e029      	b.n	801eaee <UART_Start_Receive_IT+0xaa>
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	689b      	ldr	r3, [r3, #8]
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	d10d      	bne.n	801eabe <UART_Start_Receive_IT+0x7a>
 801eaa2:	68fb      	ldr	r3, [r7, #12]
 801eaa4:	691b      	ldr	r3, [r3, #16]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d104      	bne.n	801eab4 <UART_Start_Receive_IT+0x70>
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	225c      	movs	r2, #92	@ 0x5c
 801eaae:	21ff      	movs	r1, #255	@ 0xff
 801eab0:	5299      	strh	r1, [r3, r2]
 801eab2:	e01c      	b.n	801eaee <UART_Start_Receive_IT+0xaa>
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	225c      	movs	r2, #92	@ 0x5c
 801eab8:	217f      	movs	r1, #127	@ 0x7f
 801eaba:	5299      	strh	r1, [r3, r2]
 801eabc:	e017      	b.n	801eaee <UART_Start_Receive_IT+0xaa>
 801eabe:	68fb      	ldr	r3, [r7, #12]
 801eac0:	689a      	ldr	r2, [r3, #8]
 801eac2:	2380      	movs	r3, #128	@ 0x80
 801eac4:	055b      	lsls	r3, r3, #21
 801eac6:	429a      	cmp	r2, r3
 801eac8:	d10d      	bne.n	801eae6 <UART_Start_Receive_IT+0xa2>
 801eaca:	68fb      	ldr	r3, [r7, #12]
 801eacc:	691b      	ldr	r3, [r3, #16]
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d104      	bne.n	801eadc <UART_Start_Receive_IT+0x98>
 801ead2:	68fb      	ldr	r3, [r7, #12]
 801ead4:	225c      	movs	r2, #92	@ 0x5c
 801ead6:	217f      	movs	r1, #127	@ 0x7f
 801ead8:	5299      	strh	r1, [r3, r2]
 801eada:	e008      	b.n	801eaee <UART_Start_Receive_IT+0xaa>
 801eadc:	68fb      	ldr	r3, [r7, #12]
 801eade:	225c      	movs	r2, #92	@ 0x5c
 801eae0:	213f      	movs	r1, #63	@ 0x3f
 801eae2:	5299      	strh	r1, [r3, r2]
 801eae4:	e003      	b.n	801eaee <UART_Start_Receive_IT+0xaa>
 801eae6:	68fb      	ldr	r3, [r7, #12]
 801eae8:	225c      	movs	r2, #92	@ 0x5c
 801eaea:	2100      	movs	r1, #0
 801eaec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	2284      	movs	r2, #132	@ 0x84
 801eaf2:	2100      	movs	r1, #0
 801eaf4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801eaf6:	68fb      	ldr	r3, [r7, #12]
 801eaf8:	2280      	movs	r2, #128	@ 0x80
 801eafa:	2122      	movs	r1, #34	@ 0x22
 801eafc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eafe:	f3ef 8310 	mrs	r3, PRIMASK
 801eb02:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801eb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eb08:	2301      	movs	r3, #1
 801eb0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb0e:	f383 8810 	msr	PRIMASK, r3
}
 801eb12:	46c0      	nop			@ (mov r8, r8)
 801eb14:	68fb      	ldr	r3, [r7, #12]
 801eb16:	681b      	ldr	r3, [r3, #0]
 801eb18:	689a      	ldr	r2, [r3, #8]
 801eb1a:	68fb      	ldr	r3, [r7, #12]
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	2101      	movs	r1, #1
 801eb20:	430a      	orrs	r2, r1
 801eb22:	609a      	str	r2, [r3, #8]
 801eb24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801eb26:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb2a:	f383 8810 	msr	PRIMASK, r3
}
 801eb2e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	689a      	ldr	r2, [r3, #8]
 801eb34:	2380      	movs	r3, #128	@ 0x80
 801eb36:	015b      	lsls	r3, r3, #5
 801eb38:	429a      	cmp	r2, r3
 801eb3a:	d107      	bne.n	801eb4c <UART_Start_Receive_IT+0x108>
 801eb3c:	68fb      	ldr	r3, [r7, #12]
 801eb3e:	691b      	ldr	r3, [r3, #16]
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	d103      	bne.n	801eb4c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	4a22      	ldr	r2, [pc, #136]	@ (801ebd0 <UART_Start_Receive_IT+0x18c>)
 801eb48:	669a      	str	r2, [r3, #104]	@ 0x68
 801eb4a:	e002      	b.n	801eb52 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	4a21      	ldr	r2, [pc, #132]	@ (801ebd4 <UART_Start_Receive_IT+0x190>)
 801eb50:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	691b      	ldr	r3, [r3, #16]
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	d019      	beq.n	801eb8e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb5a:	f3ef 8310 	mrs	r3, PRIMASK
 801eb5e:	61fb      	str	r3, [r7, #28]
  return(result);
 801eb60:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801eb62:	637b      	str	r3, [r7, #52]	@ 0x34
 801eb64:	2301      	movs	r3, #1
 801eb66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb68:	6a3b      	ldr	r3, [r7, #32]
 801eb6a:	f383 8810 	msr	PRIMASK, r3
}
 801eb6e:	46c0      	nop			@ (mov r8, r8)
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	681a      	ldr	r2, [r3, #0]
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	681b      	ldr	r3, [r3, #0]
 801eb7a:	2190      	movs	r1, #144	@ 0x90
 801eb7c:	0049      	lsls	r1, r1, #1
 801eb7e:	430a      	orrs	r2, r1
 801eb80:	601a      	str	r2, [r3, #0]
 801eb82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eb84:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb88:	f383 8810 	msr	PRIMASK, r3
}
 801eb8c:	e018      	b.n	801ebc0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb8e:	f3ef 8310 	mrs	r3, PRIMASK
 801eb92:	613b      	str	r3, [r7, #16]
  return(result);
 801eb94:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801eb96:	63bb      	str	r3, [r7, #56]	@ 0x38
 801eb98:	2301      	movs	r3, #1
 801eb9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb9c:	697b      	ldr	r3, [r7, #20]
 801eb9e:	f383 8810 	msr	PRIMASK, r3
}
 801eba2:	46c0      	nop			@ (mov r8, r8)
 801eba4:	68fb      	ldr	r3, [r7, #12]
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	681a      	ldr	r2, [r3, #0]
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	2120      	movs	r1, #32
 801ebb0:	430a      	orrs	r2, r1
 801ebb2:	601a      	str	r2, [r3, #0]
 801ebb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ebb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebb8:	69bb      	ldr	r3, [r7, #24]
 801ebba:	f383 8810 	msr	PRIMASK, r3
}
 801ebbe:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801ebc0:	2300      	movs	r3, #0
}
 801ebc2:	0018      	movs	r0, r3
 801ebc4:	46bd      	mov	sp, r7
 801ebc6:	b010      	add	sp, #64	@ 0x40
 801ebc8:	bd80      	pop	{r7, pc}
 801ebca:	46c0      	nop			@ (mov r8, r8)
 801ebcc:	000001ff 	.word	0x000001ff
 801ebd0:	0801f345 	.word	0x0801f345
 801ebd4:	0801f179 	.word	0x0801f179

0801ebd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ebd8:	b580      	push	{r7, lr}
 801ebda:	b090      	sub	sp, #64	@ 0x40
 801ebdc:	af00      	add	r7, sp, #0
 801ebde:	60f8      	str	r0, [r7, #12]
 801ebe0:	60b9      	str	r1, [r7, #8]
 801ebe2:	1dbb      	adds	r3, r7, #6
 801ebe4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801ebe6:	68fb      	ldr	r3, [r7, #12]
 801ebe8:	68ba      	ldr	r2, [r7, #8]
 801ebea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801ebec:	68fb      	ldr	r3, [r7, #12]
 801ebee:	1dba      	adds	r2, r7, #6
 801ebf0:	2158      	movs	r1, #88	@ 0x58
 801ebf2:	8812      	ldrh	r2, [r2, #0]
 801ebf4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ebf6:	68fb      	ldr	r3, [r7, #12]
 801ebf8:	2284      	movs	r2, #132	@ 0x84
 801ebfa:	2100      	movs	r1, #0
 801ebfc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ebfe:	68fb      	ldr	r3, [r7, #12]
 801ec00:	2280      	movs	r2, #128	@ 0x80
 801ec02:	2122      	movs	r1, #34	@ 0x22
 801ec04:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801ec06:	68fb      	ldr	r3, [r7, #12]
 801ec08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d028      	beq.n	801ec60 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec12:	4a3e      	ldr	r2, [pc, #248]	@ (801ed0c <UART_Start_Receive_DMA+0x134>)
 801ec14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec1a:	4a3d      	ldr	r2, [pc, #244]	@ (801ed10 <UART_Start_Receive_DMA+0x138>)
 801ec1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec22:	4a3c      	ldr	r2, [pc, #240]	@ (801ed14 <UART_Start_Receive_DMA+0x13c>)
 801ec24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801ec26:	68fb      	ldr	r3, [r7, #12]
 801ec28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec2a:	2200      	movs	r2, #0
 801ec2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801ec2e:	68fb      	ldr	r3, [r7, #12]
 801ec30:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801ec32:	68fb      	ldr	r3, [r7, #12]
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	3324      	adds	r3, #36	@ 0x24
 801ec38:	0019      	movs	r1, r3
 801ec3a:	68fb      	ldr	r3, [r7, #12]
 801ec3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ec3e:	001a      	movs	r2, r3
 801ec40:	1dbb      	adds	r3, r7, #6
 801ec42:	881b      	ldrh	r3, [r3, #0]
 801ec44:	f7f6 fbc4 	bl	80153d0 <HAL_DMA_Start_IT>
 801ec48:	1e03      	subs	r3, r0, #0
 801ec4a:	d009      	beq.n	801ec60 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ec4c:	68fb      	ldr	r3, [r7, #12]
 801ec4e:	2284      	movs	r2, #132	@ 0x84
 801ec50:	2110      	movs	r1, #16
 801ec52:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ec54:	68fb      	ldr	r3, [r7, #12]
 801ec56:	2280      	movs	r2, #128	@ 0x80
 801ec58:	2120      	movs	r1, #32
 801ec5a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801ec5c:	2301      	movs	r3, #1
 801ec5e:	e050      	b.n	801ed02 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	691b      	ldr	r3, [r3, #16]
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d019      	beq.n	801ec9c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec68:	f3ef 8310 	mrs	r3, PRIMASK
 801ec6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ec6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ec70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ec72:	2301      	movs	r3, #1
 801ec74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec78:	f383 8810 	msr	PRIMASK, r3
}
 801ec7c:	46c0      	nop			@ (mov r8, r8)
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	681a      	ldr	r2, [r3, #0]
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	681b      	ldr	r3, [r3, #0]
 801ec88:	2180      	movs	r1, #128	@ 0x80
 801ec8a:	0049      	lsls	r1, r1, #1
 801ec8c:	430a      	orrs	r2, r1
 801ec8e:	601a      	str	r2, [r3, #0]
 801ec90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ec92:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ec96:	f383 8810 	msr	PRIMASK, r3
}
 801ec9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec9c:	f3ef 8310 	mrs	r3, PRIMASK
 801eca0:	613b      	str	r3, [r7, #16]
  return(result);
 801eca2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eca4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801eca6:	2301      	movs	r3, #1
 801eca8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecaa:	697b      	ldr	r3, [r7, #20]
 801ecac:	f383 8810 	msr	PRIMASK, r3
}
 801ecb0:	46c0      	nop			@ (mov r8, r8)
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	689a      	ldr	r2, [r3, #8]
 801ecb8:	68fb      	ldr	r3, [r7, #12]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	2101      	movs	r1, #1
 801ecbe:	430a      	orrs	r2, r1
 801ecc0:	609a      	str	r2, [r3, #8]
 801ecc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ecc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecc6:	69bb      	ldr	r3, [r7, #24]
 801ecc8:	f383 8810 	msr	PRIMASK, r3
}
 801eccc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecce:	f3ef 8310 	mrs	r3, PRIMASK
 801ecd2:	61fb      	str	r3, [r7, #28]
  return(result);
 801ecd4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ecd6:	637b      	str	r3, [r7, #52]	@ 0x34
 801ecd8:	2301      	movs	r3, #1
 801ecda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecdc:	6a3b      	ldr	r3, [r7, #32]
 801ecde:	f383 8810 	msr	PRIMASK, r3
}
 801ece2:	46c0      	nop			@ (mov r8, r8)
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	689a      	ldr	r2, [r3, #8]
 801ecea:	68fb      	ldr	r3, [r7, #12]
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	2140      	movs	r1, #64	@ 0x40
 801ecf0:	430a      	orrs	r2, r1
 801ecf2:	609a      	str	r2, [r3, #8]
 801ecf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ecf6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecfa:	f383 8810 	msr	PRIMASK, r3
}
 801ecfe:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801ed00:	2300      	movs	r3, #0
}
 801ed02:	0018      	movs	r0, r3
 801ed04:	46bd      	mov	sp, r7
 801ed06:	b010      	add	sp, #64	@ 0x40
 801ed08:	bd80      	pop	{r7, pc}
 801ed0a:	46c0      	nop			@ (mov r8, r8)
 801ed0c:	0801eee9 	.word	0x0801eee9
 801ed10:	0801f01d 	.word	0x0801f01d
 801ed14:	0801f065 	.word	0x0801f065

0801ed18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ed18:	b580      	push	{r7, lr}
 801ed1a:	b086      	sub	sp, #24
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed20:	f3ef 8310 	mrs	r3, PRIMASK
 801ed24:	60bb      	str	r3, [r7, #8]
  return(result);
 801ed26:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ed28:	617b      	str	r3, [r7, #20]
 801ed2a:	2301      	movs	r3, #1
 801ed2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed2e:	68fb      	ldr	r3, [r7, #12]
 801ed30:	f383 8810 	msr	PRIMASK, r3
}
 801ed34:	46c0      	nop			@ (mov r8, r8)
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	681a      	ldr	r2, [r3, #0]
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	21c0      	movs	r1, #192	@ 0xc0
 801ed42:	438a      	bics	r2, r1
 801ed44:	601a      	str	r2, [r3, #0]
 801ed46:	697b      	ldr	r3, [r7, #20]
 801ed48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed4a:	693b      	ldr	r3, [r7, #16]
 801ed4c:	f383 8810 	msr	PRIMASK, r3
}
 801ed50:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	2220      	movs	r2, #32
 801ed56:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801ed58:	46c0      	nop			@ (mov r8, r8)
 801ed5a:	46bd      	mov	sp, r7
 801ed5c:	b006      	add	sp, #24
 801ed5e:	bd80      	pop	{r7, pc}

0801ed60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ed60:	b580      	push	{r7, lr}
 801ed62:	b08e      	sub	sp, #56	@ 0x38
 801ed64:	af00      	add	r7, sp, #0
 801ed66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed68:	f3ef 8310 	mrs	r3, PRIMASK
 801ed6c:	617b      	str	r3, [r7, #20]
  return(result);
 801ed6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ed70:	637b      	str	r3, [r7, #52]	@ 0x34
 801ed72:	2301      	movs	r3, #1
 801ed74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed76:	69bb      	ldr	r3, [r7, #24]
 801ed78:	f383 8810 	msr	PRIMASK, r3
}
 801ed7c:	46c0      	nop			@ (mov r8, r8)
 801ed7e:	687b      	ldr	r3, [r7, #4]
 801ed80:	681b      	ldr	r3, [r3, #0]
 801ed82:	681a      	ldr	r2, [r3, #0]
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	4926      	ldr	r1, [pc, #152]	@ (801ee24 <UART_EndRxTransfer+0xc4>)
 801ed8a:	400a      	ands	r2, r1
 801ed8c:	601a      	str	r2, [r3, #0]
 801ed8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed92:	69fb      	ldr	r3, [r7, #28]
 801ed94:	f383 8810 	msr	PRIMASK, r3
}
 801ed98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed9a:	f3ef 8310 	mrs	r3, PRIMASK
 801ed9e:	623b      	str	r3, [r7, #32]
  return(result);
 801eda0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eda2:	633b      	str	r3, [r7, #48]	@ 0x30
 801eda4:	2301      	movs	r3, #1
 801eda6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edaa:	f383 8810 	msr	PRIMASK, r3
}
 801edae:	46c0      	nop			@ (mov r8, r8)
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	689a      	ldr	r2, [r3, #8]
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	681b      	ldr	r3, [r3, #0]
 801edba:	2101      	movs	r1, #1
 801edbc:	438a      	bics	r2, r1
 801edbe:	609a      	str	r2, [r3, #8]
 801edc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801edc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801edc6:	f383 8810 	msr	PRIMASK, r3
}
 801edca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801edd0:	2b01      	cmp	r3, #1
 801edd2:	d118      	bne.n	801ee06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edd4:	f3ef 8310 	mrs	r3, PRIMASK
 801edd8:	60bb      	str	r3, [r7, #8]
  return(result);
 801edda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801edde:	2301      	movs	r3, #1
 801ede0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ede2:	68fb      	ldr	r3, [r7, #12]
 801ede4:	f383 8810 	msr	PRIMASK, r3
}
 801ede8:	46c0      	nop			@ (mov r8, r8)
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	681a      	ldr	r2, [r3, #0]
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	681b      	ldr	r3, [r3, #0]
 801edf4:	2110      	movs	r1, #16
 801edf6:	438a      	bics	r2, r1
 801edf8:	601a      	str	r2, [r3, #0]
 801edfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edfe:	693b      	ldr	r3, [r7, #16]
 801ee00:	f383 8810 	msr	PRIMASK, r3
}
 801ee04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	2280      	movs	r2, #128	@ 0x80
 801ee0a:	2120      	movs	r1, #32
 801ee0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	2200      	movs	r2, #0
 801ee12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	2200      	movs	r2, #0
 801ee18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ee1a:	46c0      	nop			@ (mov r8, r8)
 801ee1c:	46bd      	mov	sp, r7
 801ee1e:	b00e      	add	sp, #56	@ 0x38
 801ee20:	bd80      	pop	{r7, pc}
 801ee22:	46c0      	nop			@ (mov r8, r8)
 801ee24:	fffffedf 	.word	0xfffffedf

0801ee28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ee28:	b580      	push	{r7, lr}
 801ee2a:	b08c      	sub	sp, #48	@ 0x30
 801ee2c:	af00      	add	r7, sp, #0
 801ee2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	2220      	movs	r2, #32
 801ee3e:	4013      	ands	r3, r2
 801ee40:	d135      	bne.n	801eeae <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801ee42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee44:	2252      	movs	r2, #82	@ 0x52
 801ee46:	2100      	movs	r1, #0
 801ee48:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee4a:	f3ef 8310 	mrs	r3, PRIMASK
 801ee4e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ee50:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ee52:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ee54:	2301      	movs	r3, #1
 801ee56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee58:	693b      	ldr	r3, [r7, #16]
 801ee5a:	f383 8810 	msr	PRIMASK, r3
}
 801ee5e:	46c0      	nop			@ (mov r8, r8)
 801ee60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	689a      	ldr	r2, [r3, #8]
 801ee66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	2180      	movs	r1, #128	@ 0x80
 801ee6c:	438a      	bics	r2, r1
 801ee6e:	609a      	str	r2, [r3, #8]
 801ee70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee74:	697b      	ldr	r3, [r7, #20]
 801ee76:	f383 8810 	msr	PRIMASK, r3
}
 801ee7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee7c:	f3ef 8310 	mrs	r3, PRIMASK
 801ee80:	61bb      	str	r3, [r7, #24]
  return(result);
 801ee82:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ee84:	627b      	str	r3, [r7, #36]	@ 0x24
 801ee86:	2301      	movs	r3, #1
 801ee88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee8a:	69fb      	ldr	r3, [r7, #28]
 801ee8c:	f383 8810 	msr	PRIMASK, r3
}
 801ee90:	46c0      	nop			@ (mov r8, r8)
 801ee92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee94:	681b      	ldr	r3, [r3, #0]
 801ee96:	681a      	ldr	r2, [r3, #0]
 801ee98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	2140      	movs	r1, #64	@ 0x40
 801ee9e:	430a      	orrs	r2, r1
 801eea0:	601a      	str	r2, [r3, #0]
 801eea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eea4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eea6:	6a3b      	ldr	r3, [r7, #32]
 801eea8:	f383 8810 	msr	PRIMASK, r3
}
 801eeac:	e006      	b.n	801eebc <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801eeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eeb0:	228c      	movs	r2, #140	@ 0x8c
 801eeb2:	589b      	ldr	r3, [r3, r2]
 801eeb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801eeb6:	0010      	movs	r0, r2
 801eeb8:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801eeba:	46c0      	nop			@ (mov r8, r8)
 801eebc:	46c0      	nop			@ (mov r8, r8)
 801eebe:	46bd      	mov	sp, r7
 801eec0:	b00c      	add	sp, #48	@ 0x30
 801eec2:	bd80      	pop	{r7, pc}

0801eec4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801eec4:	b580      	push	{r7, lr}
 801eec6:	b084      	sub	sp, #16
 801eec8:	af00      	add	r7, sp, #0
 801eeca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eed0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	2288      	movs	r2, #136	@ 0x88
 801eed6:	589b      	ldr	r3, [r3, r2]
 801eed8:	68fa      	ldr	r2, [r7, #12]
 801eeda:	0010      	movs	r0, r2
 801eedc:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801eede:	46c0      	nop			@ (mov r8, r8)
 801eee0:	46bd      	mov	sp, r7
 801eee2:	b004      	add	sp, #16
 801eee4:	bd80      	pop	{r7, pc}
	...

0801eee8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801eee8:	b580      	push	{r7, lr}
 801eeea:	b094      	sub	sp, #80	@ 0x50
 801eeec:	af00      	add	r7, sp, #0
 801eeee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eef4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	681b      	ldr	r3, [r3, #0]
 801eefa:	681b      	ldr	r3, [r3, #0]
 801eefc:	2220      	movs	r2, #32
 801eefe:	4013      	ands	r3, r2
 801ef00:	d16f      	bne.n	801efe2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ef02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef04:	225a      	movs	r2, #90	@ 0x5a
 801ef06:	2100      	movs	r1, #0
 801ef08:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef0a:	f3ef 8310 	mrs	r3, PRIMASK
 801ef0e:	61bb      	str	r3, [r7, #24]
  return(result);
 801ef10:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ef12:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ef14:	2301      	movs	r3, #1
 801ef16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef18:	69fb      	ldr	r3, [r7, #28]
 801ef1a:	f383 8810 	msr	PRIMASK, r3
}
 801ef1e:	46c0      	nop			@ (mov r8, r8)
 801ef20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	681a      	ldr	r2, [r3, #0]
 801ef26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef28:	681b      	ldr	r3, [r3, #0]
 801ef2a:	493b      	ldr	r1, [pc, #236]	@ (801f018 <UART_DMAReceiveCplt+0x130>)
 801ef2c:	400a      	ands	r2, r1
 801ef2e:	601a      	str	r2, [r3, #0]
 801ef30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ef32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef34:	6a3b      	ldr	r3, [r7, #32]
 801ef36:	f383 8810 	msr	PRIMASK, r3
}
 801ef3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef3c:	f3ef 8310 	mrs	r3, PRIMASK
 801ef40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ef44:	647b      	str	r3, [r7, #68]	@ 0x44
 801ef46:	2301      	movs	r3, #1
 801ef48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef4c:	f383 8810 	msr	PRIMASK, r3
}
 801ef50:	46c0      	nop			@ (mov r8, r8)
 801ef52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef54:	681b      	ldr	r3, [r3, #0]
 801ef56:	689a      	ldr	r2, [r3, #8]
 801ef58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	2101      	movs	r1, #1
 801ef5e:	438a      	bics	r2, r1
 801ef60:	609a      	str	r2, [r3, #8]
 801ef62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ef64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef68:	f383 8810 	msr	PRIMASK, r3
}
 801ef6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef6e:	f3ef 8310 	mrs	r3, PRIMASK
 801ef72:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ef74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ef76:	643b      	str	r3, [r7, #64]	@ 0x40
 801ef78:	2301      	movs	r3, #1
 801ef7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ef7e:	f383 8810 	msr	PRIMASK, r3
}
 801ef82:	46c0      	nop			@ (mov r8, r8)
 801ef84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	689a      	ldr	r2, [r3, #8]
 801ef8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	2140      	movs	r1, #64	@ 0x40
 801ef90:	438a      	bics	r2, r1
 801ef92:	609a      	str	r2, [r3, #8]
 801ef94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef96:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ef9a:	f383 8810 	msr	PRIMASK, r3
}
 801ef9e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801efa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efa2:	2280      	movs	r2, #128	@ 0x80
 801efa4:	2120      	movs	r1, #32
 801efa6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801efa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801efac:	2b01      	cmp	r3, #1
 801efae:	d118      	bne.n	801efe2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efb0:	f3ef 8310 	mrs	r3, PRIMASK
 801efb4:	60fb      	str	r3, [r7, #12]
  return(result);
 801efb6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801efb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801efba:	2301      	movs	r3, #1
 801efbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efbe:	693b      	ldr	r3, [r7, #16]
 801efc0:	f383 8810 	msr	PRIMASK, r3
}
 801efc4:	46c0      	nop			@ (mov r8, r8)
 801efc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	681a      	ldr	r2, [r3, #0]
 801efcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efce:	681b      	ldr	r3, [r3, #0]
 801efd0:	2110      	movs	r1, #16
 801efd2:	438a      	bics	r2, r1
 801efd4:	601a      	str	r2, [r3, #0]
 801efd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801efd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efda:	697b      	ldr	r3, [r7, #20]
 801efdc:	f383 8810 	msr	PRIMASK, r3
}
 801efe0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801efe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efe4:	2200      	movs	r2, #0
 801efe6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801efe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801efec:	2b01      	cmp	r3, #1
 801efee:	d109      	bne.n	801f004 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801eff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eff2:	22ac      	movs	r2, #172	@ 0xac
 801eff4:	589b      	ldr	r3, [r3, r2]
 801eff6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801eff8:	2158      	movs	r1, #88	@ 0x58
 801effa:	5a51      	ldrh	r1, [r2, r1]
 801effc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801effe:	0010      	movs	r0, r2
 801f000:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801f002:	e005      	b.n	801f010 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801f004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f006:	2294      	movs	r2, #148	@ 0x94
 801f008:	589b      	ldr	r3, [r3, r2]
 801f00a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f00c:	0010      	movs	r0, r2
 801f00e:	4798      	blx	r3
}
 801f010:	46c0      	nop			@ (mov r8, r8)
 801f012:	46bd      	mov	sp, r7
 801f014:	b014      	add	sp, #80	@ 0x50
 801f016:	bd80      	pop	{r7, pc}
 801f018:	fffffeff 	.word	0xfffffeff

0801f01c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801f01c:	b580      	push	{r7, lr}
 801f01e:	b084      	sub	sp, #16
 801f020:	af00      	add	r7, sp, #0
 801f022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f028:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801f02a:	68fb      	ldr	r3, [r7, #12]
 801f02c:	2201      	movs	r2, #1
 801f02e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f034:	2b01      	cmp	r3, #1
 801f036:	d10b      	bne.n	801f050 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801f038:	68fb      	ldr	r3, [r7, #12]
 801f03a:	22ac      	movs	r2, #172	@ 0xac
 801f03c:	589b      	ldr	r3, [r3, r2]
 801f03e:	68fa      	ldr	r2, [r7, #12]
 801f040:	2158      	movs	r1, #88	@ 0x58
 801f042:	5a52      	ldrh	r2, [r2, r1]
 801f044:	0852      	lsrs	r2, r2, #1
 801f046:	b291      	uxth	r1, r2
 801f048:	68fa      	ldr	r2, [r7, #12]
 801f04a:	0010      	movs	r0, r2
 801f04c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801f04e:	e005      	b.n	801f05c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	2290      	movs	r2, #144	@ 0x90
 801f054:	589b      	ldr	r3, [r3, r2]
 801f056:	68fa      	ldr	r2, [r7, #12]
 801f058:	0010      	movs	r0, r2
 801f05a:	4798      	blx	r3
}
 801f05c:	46c0      	nop			@ (mov r8, r8)
 801f05e:	46bd      	mov	sp, r7
 801f060:	b004      	add	sp, #16
 801f062:	bd80      	pop	{r7, pc}

0801f064 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801f064:	b580      	push	{r7, lr}
 801f066:	b086      	sub	sp, #24
 801f068:	af00      	add	r7, sp, #0
 801f06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f070:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801f072:	697b      	ldr	r3, [r7, #20]
 801f074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f076:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801f078:	697b      	ldr	r3, [r7, #20]
 801f07a:	2280      	movs	r2, #128	@ 0x80
 801f07c:	589b      	ldr	r3, [r3, r2]
 801f07e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801f080:	697b      	ldr	r3, [r7, #20]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	689b      	ldr	r3, [r3, #8]
 801f086:	2280      	movs	r2, #128	@ 0x80
 801f088:	4013      	ands	r3, r2
 801f08a:	2b80      	cmp	r3, #128	@ 0x80
 801f08c:	d10a      	bne.n	801f0a4 <UART_DMAError+0x40>
 801f08e:	693b      	ldr	r3, [r7, #16]
 801f090:	2b21      	cmp	r3, #33	@ 0x21
 801f092:	d107      	bne.n	801f0a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801f094:	697b      	ldr	r3, [r7, #20]
 801f096:	2252      	movs	r2, #82	@ 0x52
 801f098:	2100      	movs	r1, #0
 801f09a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801f09c:	697b      	ldr	r3, [r7, #20]
 801f09e:	0018      	movs	r0, r3
 801f0a0:	f7ff fe3a 	bl	801ed18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801f0a4:	697b      	ldr	r3, [r7, #20]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	689b      	ldr	r3, [r3, #8]
 801f0aa:	2240      	movs	r2, #64	@ 0x40
 801f0ac:	4013      	ands	r3, r2
 801f0ae:	2b40      	cmp	r3, #64	@ 0x40
 801f0b0:	d10a      	bne.n	801f0c8 <UART_DMAError+0x64>
 801f0b2:	68fb      	ldr	r3, [r7, #12]
 801f0b4:	2b22      	cmp	r3, #34	@ 0x22
 801f0b6:	d107      	bne.n	801f0c8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801f0b8:	697b      	ldr	r3, [r7, #20]
 801f0ba:	225a      	movs	r2, #90	@ 0x5a
 801f0bc:	2100      	movs	r1, #0
 801f0be:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801f0c0:	697b      	ldr	r3, [r7, #20]
 801f0c2:	0018      	movs	r0, r3
 801f0c4:	f7ff fe4c 	bl	801ed60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801f0c8:	697b      	ldr	r3, [r7, #20]
 801f0ca:	2284      	movs	r2, #132	@ 0x84
 801f0cc:	589b      	ldr	r3, [r3, r2]
 801f0ce:	2210      	movs	r2, #16
 801f0d0:	431a      	orrs	r2, r3
 801f0d2:	697b      	ldr	r3, [r7, #20]
 801f0d4:	2184      	movs	r1, #132	@ 0x84
 801f0d6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f0d8:	697b      	ldr	r3, [r7, #20]
 801f0da:	2298      	movs	r2, #152	@ 0x98
 801f0dc:	589b      	ldr	r3, [r3, r2]
 801f0de:	697a      	ldr	r2, [r7, #20]
 801f0e0:	0010      	movs	r0, r2
 801f0e2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f0e4:	46c0      	nop			@ (mov r8, r8)
 801f0e6:	46bd      	mov	sp, r7
 801f0e8:	b006      	add	sp, #24
 801f0ea:	bd80      	pop	{r7, pc}

0801f0ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f0ec:	b580      	push	{r7, lr}
 801f0ee:	b084      	sub	sp, #16
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f0fa:	68fb      	ldr	r3, [r7, #12]
 801f0fc:	225a      	movs	r2, #90	@ 0x5a
 801f0fe:	2100      	movs	r1, #0
 801f100:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801f102:	68fb      	ldr	r3, [r7, #12]
 801f104:	2252      	movs	r2, #82	@ 0x52
 801f106:	2100      	movs	r1, #0
 801f108:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f10a:	68fb      	ldr	r3, [r7, #12]
 801f10c:	2298      	movs	r2, #152	@ 0x98
 801f10e:	589b      	ldr	r3, [r3, r2]
 801f110:	68fa      	ldr	r2, [r7, #12]
 801f112:	0010      	movs	r0, r2
 801f114:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f116:	46c0      	nop			@ (mov r8, r8)
 801f118:	46bd      	mov	sp, r7
 801f11a:	b004      	add	sp, #16
 801f11c:	bd80      	pop	{r7, pc}

0801f11e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f11e:	b580      	push	{r7, lr}
 801f120:	b086      	sub	sp, #24
 801f122:	af00      	add	r7, sp, #0
 801f124:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f126:	f3ef 8310 	mrs	r3, PRIMASK
 801f12a:	60bb      	str	r3, [r7, #8]
  return(result);
 801f12c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f12e:	617b      	str	r3, [r7, #20]
 801f130:	2301      	movs	r3, #1
 801f132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f134:	68fb      	ldr	r3, [r7, #12]
 801f136:	f383 8810 	msr	PRIMASK, r3
}
 801f13a:	46c0      	nop			@ (mov r8, r8)
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	681a      	ldr	r2, [r3, #0]
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	2140      	movs	r1, #64	@ 0x40
 801f148:	438a      	bics	r2, r1
 801f14a:	601a      	str	r2, [r3, #0]
 801f14c:	697b      	ldr	r3, [r7, #20]
 801f14e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f150:	693b      	ldr	r3, [r7, #16]
 801f152:	f383 8810 	msr	PRIMASK, r3
}
 801f156:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	2220      	movs	r2, #32
 801f15c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	2200      	movs	r2, #0
 801f162:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	228c      	movs	r2, #140	@ 0x8c
 801f168:	589b      	ldr	r3, [r3, r2]
 801f16a:	687a      	ldr	r2, [r7, #4]
 801f16c:	0010      	movs	r0, r2
 801f16e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f170:	46c0      	nop			@ (mov r8, r8)
 801f172:	46bd      	mov	sp, r7
 801f174:	b006      	add	sp, #24
 801f176:	bd80      	pop	{r7, pc}

0801f178 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f178:	b580      	push	{r7, lr}
 801f17a:	b094      	sub	sp, #80	@ 0x50
 801f17c:	af00      	add	r7, sp, #0
 801f17e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f180:	204e      	movs	r0, #78	@ 0x4e
 801f182:	183b      	adds	r3, r7, r0
 801f184:	687a      	ldr	r2, [r7, #4]
 801f186:	215c      	movs	r1, #92	@ 0x5c
 801f188:	5a52      	ldrh	r2, [r2, r1]
 801f18a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	2280      	movs	r2, #128	@ 0x80
 801f190:	589b      	ldr	r3, [r3, r2]
 801f192:	2b22      	cmp	r3, #34	@ 0x22
 801f194:	d000      	beq.n	801f198 <UART_RxISR_8BIT+0x20>
 801f196:	e0c2      	b.n	801f31e <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f19e:	214c      	movs	r1, #76	@ 0x4c
 801f1a0:	187b      	adds	r3, r7, r1
 801f1a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f1a4:	187b      	adds	r3, r7, r1
 801f1a6:	881b      	ldrh	r3, [r3, #0]
 801f1a8:	b2da      	uxtb	r2, r3
 801f1aa:	183b      	adds	r3, r7, r0
 801f1ac:	881b      	ldrh	r3, [r3, #0]
 801f1ae:	b2d9      	uxtb	r1, r3
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f1b4:	400a      	ands	r2, r1
 801f1b6:	b2d2      	uxtb	r2, r2
 801f1b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f1be:	1c5a      	adds	r2, r3, #1
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	225a      	movs	r2, #90	@ 0x5a
 801f1c8:	5a9b      	ldrh	r3, [r3, r2]
 801f1ca:	b29b      	uxth	r3, r3
 801f1cc:	3b01      	subs	r3, #1
 801f1ce:	b299      	uxth	r1, r3
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	225a      	movs	r2, #90	@ 0x5a
 801f1d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	225a      	movs	r2, #90	@ 0x5a
 801f1da:	5a9b      	ldrh	r3, [r3, r2]
 801f1dc:	b29b      	uxth	r3, r3
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d000      	beq.n	801f1e4 <UART_RxISR_8BIT+0x6c>
 801f1e2:	e0a4      	b.n	801f32e <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1e4:	f3ef 8310 	mrs	r3, PRIMASK
 801f1e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801f1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f1ee:	2301      	movs	r3, #1
 801f1f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1f4:	f383 8810 	msr	PRIMASK, r3
}
 801f1f8:	46c0      	nop			@ (mov r8, r8)
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	681b      	ldr	r3, [r3, #0]
 801f1fe:	681a      	ldr	r2, [r3, #0]
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	494c      	ldr	r1, [pc, #304]	@ (801f338 <UART_RxISR_8BIT+0x1c0>)
 801f206:	400a      	ands	r2, r1
 801f208:	601a      	str	r2, [r3, #0]
 801f20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f210:	f383 8810 	msr	PRIMASK, r3
}
 801f214:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f216:	f3ef 8310 	mrs	r3, PRIMASK
 801f21a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801f21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f21e:	647b      	str	r3, [r7, #68]	@ 0x44
 801f220:	2301      	movs	r3, #1
 801f222:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f226:	f383 8810 	msr	PRIMASK, r3
}
 801f22a:	46c0      	nop			@ (mov r8, r8)
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	681b      	ldr	r3, [r3, #0]
 801f230:	689a      	ldr	r2, [r3, #8]
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	2101      	movs	r1, #1
 801f238:	438a      	bics	r2, r1
 801f23a:	609a      	str	r2, [r3, #8]
 801f23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f23e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f242:	f383 8810 	msr	PRIMASK, r3
}
 801f246:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	2280      	movs	r2, #128	@ 0x80
 801f24c:	2120      	movs	r1, #32
 801f24e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	2200      	movs	r2, #0
 801f254:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	2200      	movs	r2, #0
 801f25a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	4a36      	ldr	r2, [pc, #216]	@ (801f33c <UART_RxISR_8BIT+0x1c4>)
 801f262:	4293      	cmp	r3, r2
 801f264:	d01f      	beq.n	801f2a6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	685a      	ldr	r2, [r3, #4]
 801f26c:	2380      	movs	r3, #128	@ 0x80
 801f26e:	041b      	lsls	r3, r3, #16
 801f270:	4013      	ands	r3, r2
 801f272:	d018      	beq.n	801f2a6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f274:	f3ef 8310 	mrs	r3, PRIMASK
 801f278:	61bb      	str	r3, [r7, #24]
  return(result);
 801f27a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f27c:	643b      	str	r3, [r7, #64]	@ 0x40
 801f27e:	2301      	movs	r3, #1
 801f280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f282:	69fb      	ldr	r3, [r7, #28]
 801f284:	f383 8810 	msr	PRIMASK, r3
}
 801f288:	46c0      	nop			@ (mov r8, r8)
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	681a      	ldr	r2, [r3, #0]
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	492a      	ldr	r1, [pc, #168]	@ (801f340 <UART_RxISR_8BIT+0x1c8>)
 801f296:	400a      	ands	r2, r1
 801f298:	601a      	str	r2, [r3, #0]
 801f29a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f29c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f29e:	6a3b      	ldr	r3, [r7, #32]
 801f2a0:	f383 8810 	msr	PRIMASK, r3
}
 801f2a4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f2aa:	2b01      	cmp	r3, #1
 801f2ac:	d130      	bne.n	801f310 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	2200      	movs	r2, #0
 801f2b2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2b4:	f3ef 8310 	mrs	r3, PRIMASK
 801f2b8:	60fb      	str	r3, [r7, #12]
  return(result);
 801f2ba:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f2be:	2301      	movs	r3, #1
 801f2c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2c2:	693b      	ldr	r3, [r7, #16]
 801f2c4:	f383 8810 	msr	PRIMASK, r3
}
 801f2c8:	46c0      	nop			@ (mov r8, r8)
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	681a      	ldr	r2, [r3, #0]
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	681b      	ldr	r3, [r3, #0]
 801f2d4:	2110      	movs	r1, #16
 801f2d6:	438a      	bics	r2, r1
 801f2d8:	601a      	str	r2, [r3, #0]
 801f2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f2dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2de:	697b      	ldr	r3, [r7, #20]
 801f2e0:	f383 8810 	msr	PRIMASK, r3
}
 801f2e4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	69db      	ldr	r3, [r3, #28]
 801f2ec:	2210      	movs	r2, #16
 801f2ee:	4013      	ands	r3, r2
 801f2f0:	2b10      	cmp	r3, #16
 801f2f2:	d103      	bne.n	801f2fc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	2210      	movs	r2, #16
 801f2fa:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	22ac      	movs	r2, #172	@ 0xac
 801f300:	589b      	ldr	r3, [r3, r2]
 801f302:	687a      	ldr	r2, [r7, #4]
 801f304:	2158      	movs	r1, #88	@ 0x58
 801f306:	5a51      	ldrh	r1, [r2, r1]
 801f308:	687a      	ldr	r2, [r7, #4]
 801f30a:	0010      	movs	r0, r2
 801f30c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f30e:	e00e      	b.n	801f32e <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f310:	687b      	ldr	r3, [r7, #4]
 801f312:	2294      	movs	r2, #148	@ 0x94
 801f314:	589b      	ldr	r3, [r3, r2]
 801f316:	687a      	ldr	r2, [r7, #4]
 801f318:	0010      	movs	r0, r2
 801f31a:	4798      	blx	r3
}
 801f31c:	e007      	b.n	801f32e <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	699a      	ldr	r2, [r3, #24]
 801f324:	687b      	ldr	r3, [r7, #4]
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	2108      	movs	r1, #8
 801f32a:	430a      	orrs	r2, r1
 801f32c:	619a      	str	r2, [r3, #24]
}
 801f32e:	46c0      	nop			@ (mov r8, r8)
 801f330:	46bd      	mov	sp, r7
 801f332:	b014      	add	sp, #80	@ 0x50
 801f334:	bd80      	pop	{r7, pc}
 801f336:	46c0      	nop			@ (mov r8, r8)
 801f338:	fffffedf 	.word	0xfffffedf
 801f33c:	40004800 	.word	0x40004800
 801f340:	fbffffff 	.word	0xfbffffff

0801f344 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f344:	b580      	push	{r7, lr}
 801f346:	b094      	sub	sp, #80	@ 0x50
 801f348:	af00      	add	r7, sp, #0
 801f34a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f34c:	204e      	movs	r0, #78	@ 0x4e
 801f34e:	183b      	adds	r3, r7, r0
 801f350:	687a      	ldr	r2, [r7, #4]
 801f352:	215c      	movs	r1, #92	@ 0x5c
 801f354:	5a52      	ldrh	r2, [r2, r1]
 801f356:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	2280      	movs	r2, #128	@ 0x80
 801f35c:	589b      	ldr	r3, [r3, r2]
 801f35e:	2b22      	cmp	r3, #34	@ 0x22
 801f360:	d000      	beq.n	801f364 <UART_RxISR_16BIT+0x20>
 801f362:	e0c2      	b.n	801f4ea <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f36a:	214c      	movs	r1, #76	@ 0x4c
 801f36c:	187b      	adds	r3, r7, r1
 801f36e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f374:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f376:	187b      	adds	r3, r7, r1
 801f378:	183a      	adds	r2, r7, r0
 801f37a:	881b      	ldrh	r3, [r3, #0]
 801f37c:	8812      	ldrh	r2, [r2, #0]
 801f37e:	4013      	ands	r3, r2
 801f380:	b29a      	uxth	r2, r3
 801f382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f384:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f38a:	1c9a      	adds	r2, r3, #2
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f390:	687b      	ldr	r3, [r7, #4]
 801f392:	225a      	movs	r2, #90	@ 0x5a
 801f394:	5a9b      	ldrh	r3, [r3, r2]
 801f396:	b29b      	uxth	r3, r3
 801f398:	3b01      	subs	r3, #1
 801f39a:	b299      	uxth	r1, r3
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	225a      	movs	r2, #90	@ 0x5a
 801f3a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f3a2:	687b      	ldr	r3, [r7, #4]
 801f3a4:	225a      	movs	r2, #90	@ 0x5a
 801f3a6:	5a9b      	ldrh	r3, [r3, r2]
 801f3a8:	b29b      	uxth	r3, r3
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d000      	beq.n	801f3b0 <UART_RxISR_16BIT+0x6c>
 801f3ae:	e0a4      	b.n	801f4fa <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f3b0:	f3ef 8310 	mrs	r3, PRIMASK
 801f3b4:	623b      	str	r3, [r7, #32]
  return(result);
 801f3b6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f3b8:	647b      	str	r3, [r7, #68]	@ 0x44
 801f3ba:	2301      	movs	r3, #1
 801f3bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3c0:	f383 8810 	msr	PRIMASK, r3
}
 801f3c4:	46c0      	nop			@ (mov r8, r8)
 801f3c6:	687b      	ldr	r3, [r7, #4]
 801f3c8:	681b      	ldr	r3, [r3, #0]
 801f3ca:	681a      	ldr	r2, [r3, #0]
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	494c      	ldr	r1, [pc, #304]	@ (801f504 <UART_RxISR_16BIT+0x1c0>)
 801f3d2:	400a      	ands	r2, r1
 801f3d4:	601a      	str	r2, [r3, #0]
 801f3d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3dc:	f383 8810 	msr	PRIMASK, r3
}
 801f3e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f3e2:	f3ef 8310 	mrs	r3, PRIMASK
 801f3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f3ea:	643b      	str	r3, [r7, #64]	@ 0x40
 801f3ec:	2301      	movs	r3, #1
 801f3ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3f2:	f383 8810 	msr	PRIMASK, r3
}
 801f3f6:	46c0      	nop			@ (mov r8, r8)
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	689a      	ldr	r2, [r3, #8]
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	2101      	movs	r1, #1
 801f404:	438a      	bics	r2, r1
 801f406:	609a      	str	r2, [r3, #8]
 801f408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f40a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f40e:	f383 8810 	msr	PRIMASK, r3
}
 801f412:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	2280      	movs	r2, #128	@ 0x80
 801f418:	2120      	movs	r1, #32
 801f41a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	2200      	movs	r2, #0
 801f420:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	2200      	movs	r2, #0
 801f426:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	4a36      	ldr	r2, [pc, #216]	@ (801f508 <UART_RxISR_16BIT+0x1c4>)
 801f42e:	4293      	cmp	r3, r2
 801f430:	d01f      	beq.n	801f472 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	685a      	ldr	r2, [r3, #4]
 801f438:	2380      	movs	r3, #128	@ 0x80
 801f43a:	041b      	lsls	r3, r3, #16
 801f43c:	4013      	ands	r3, r2
 801f43e:	d018      	beq.n	801f472 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f440:	f3ef 8310 	mrs	r3, PRIMASK
 801f444:	617b      	str	r3, [r7, #20]
  return(result);
 801f446:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f44a:	2301      	movs	r3, #1
 801f44c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f44e:	69bb      	ldr	r3, [r7, #24]
 801f450:	f383 8810 	msr	PRIMASK, r3
}
 801f454:	46c0      	nop			@ (mov r8, r8)
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	681a      	ldr	r2, [r3, #0]
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	681b      	ldr	r3, [r3, #0]
 801f460:	492a      	ldr	r1, [pc, #168]	@ (801f50c <UART_RxISR_16BIT+0x1c8>)
 801f462:	400a      	ands	r2, r1
 801f464:	601a      	str	r2, [r3, #0]
 801f466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f46a:	69fb      	ldr	r3, [r7, #28]
 801f46c:	f383 8810 	msr	PRIMASK, r3
}
 801f470:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f472:	687b      	ldr	r3, [r7, #4]
 801f474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f476:	2b01      	cmp	r3, #1
 801f478:	d130      	bne.n	801f4dc <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	2200      	movs	r2, #0
 801f47e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f480:	f3ef 8310 	mrs	r3, PRIMASK
 801f484:	60bb      	str	r3, [r7, #8]
  return(result);
 801f486:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f488:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f48a:	2301      	movs	r3, #1
 801f48c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f48e:	68fb      	ldr	r3, [r7, #12]
 801f490:	f383 8810 	msr	PRIMASK, r3
}
 801f494:	46c0      	nop			@ (mov r8, r8)
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	681a      	ldr	r2, [r3, #0]
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	681b      	ldr	r3, [r3, #0]
 801f4a0:	2110      	movs	r1, #16
 801f4a2:	438a      	bics	r2, r1
 801f4a4:	601a      	str	r2, [r3, #0]
 801f4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f4a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f4aa:	693b      	ldr	r3, [r7, #16]
 801f4ac:	f383 8810 	msr	PRIMASK, r3
}
 801f4b0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	69db      	ldr	r3, [r3, #28]
 801f4b8:	2210      	movs	r2, #16
 801f4ba:	4013      	ands	r3, r2
 801f4bc:	2b10      	cmp	r3, #16
 801f4be:	d103      	bne.n	801f4c8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	2210      	movs	r2, #16
 801f4c6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	22ac      	movs	r2, #172	@ 0xac
 801f4cc:	589b      	ldr	r3, [r3, r2]
 801f4ce:	687a      	ldr	r2, [r7, #4]
 801f4d0:	2158      	movs	r1, #88	@ 0x58
 801f4d2:	5a51      	ldrh	r1, [r2, r1]
 801f4d4:	687a      	ldr	r2, [r7, #4]
 801f4d6:	0010      	movs	r0, r2
 801f4d8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f4da:	e00e      	b.n	801f4fa <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	2294      	movs	r2, #148	@ 0x94
 801f4e0:	589b      	ldr	r3, [r3, r2]
 801f4e2:	687a      	ldr	r2, [r7, #4]
 801f4e4:	0010      	movs	r0, r2
 801f4e6:	4798      	blx	r3
}
 801f4e8:	e007      	b.n	801f4fa <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	699a      	ldr	r2, [r3, #24]
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	2108      	movs	r1, #8
 801f4f6:	430a      	orrs	r2, r1
 801f4f8:	619a      	str	r2, [r3, #24]
}
 801f4fa:	46c0      	nop			@ (mov r8, r8)
 801f4fc:	46bd      	mov	sp, r7
 801f4fe:	b014      	add	sp, #80	@ 0x50
 801f500:	bd80      	pop	{r7, pc}
 801f502:	46c0      	nop			@ (mov r8, r8)
 801f504:	fffffedf 	.word	0xfffffedf
 801f508:	40004800 	.word	0x40004800
 801f50c:	fbffffff 	.word	0xfbffffff

0801f510 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f510:	b580      	push	{r7, lr}
 801f512:	b082      	sub	sp, #8
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f518:	46c0      	nop			@ (mov r8, r8)
 801f51a:	46bd      	mov	sp, r7
 801f51c:	b002      	add	sp, #8
 801f51e:	bd80      	pop	{r7, pc}

0801f520 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f520:	b580      	push	{r7, lr}
 801f522:	b084      	sub	sp, #16
 801f524:	af00      	add	r7, sp, #0
 801f526:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	2244      	movs	r2, #68	@ 0x44
 801f52c:	2100      	movs	r1, #0
 801f52e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f530:	4b05      	ldr	r3, [pc, #20]	@ (801f548 <USB_EnableGlobalInt+0x28>)
 801f532:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f534:	68fb      	ldr	r3, [r7, #12]
 801f536:	b299      	uxth	r1, r3
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	2240      	movs	r2, #64	@ 0x40
 801f53c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f53e:	2300      	movs	r3, #0
}
 801f540:	0018      	movs	r0, r3
 801f542:	46bd      	mov	sp, r7
 801f544:	b004      	add	sp, #16
 801f546:	bd80      	pop	{r7, pc}
 801f548:	0000bf80 	.word	0x0000bf80

0801f54c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f54c:	b580      	push	{r7, lr}
 801f54e:	b084      	sub	sp, #16
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f554:	4b09      	ldr	r3, [pc, #36]	@ (801f57c <USB_DisableGlobalInt+0x30>)
 801f556:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	2240      	movs	r2, #64	@ 0x40
 801f55c:	5a9b      	ldrh	r3, [r3, r2]
 801f55e:	b29b      	uxth	r3, r3
 801f560:	68fa      	ldr	r2, [r7, #12]
 801f562:	b292      	uxth	r2, r2
 801f564:	43d2      	mvns	r2, r2
 801f566:	b292      	uxth	r2, r2
 801f568:	4013      	ands	r3, r2
 801f56a:	b299      	uxth	r1, r3
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	2240      	movs	r2, #64	@ 0x40
 801f570:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f572:	2300      	movs	r3, #0
}
 801f574:	0018      	movs	r0, r3
 801f576:	46bd      	mov	sp, r7
 801f578:	b004      	add	sp, #16
 801f57a:	bd80      	pop	{r7, pc}
 801f57c:	0000bf80 	.word	0x0000bf80

0801f580 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f580:	b084      	sub	sp, #16
 801f582:	b590      	push	{r4, r7, lr}
 801f584:	b083      	sub	sp, #12
 801f586:	af00      	add	r7, sp, #0
 801f588:	6078      	str	r0, [r7, #4]
 801f58a:	2004      	movs	r0, #4
 801f58c:	2410      	movs	r4, #16
 801f58e:	1900      	adds	r0, r0, r4
 801f590:	2408      	movs	r4, #8
 801f592:	46a4      	mov	ip, r4
 801f594:	44bc      	add	ip, r7
 801f596:	4460      	add	r0, ip
 801f598:	6001      	str	r1, [r0, #0]
 801f59a:	6042      	str	r2, [r0, #4]
 801f59c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	2240      	movs	r2, #64	@ 0x40
 801f5a2:	2101      	movs	r1, #1
 801f5a4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	2240      	movs	r2, #64	@ 0x40
 801f5aa:	2100      	movs	r1, #0
 801f5ac:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	2244      	movs	r2, #68	@ 0x44
 801f5b2:	2100      	movs	r1, #0
 801f5b4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	2250      	movs	r2, #80	@ 0x50
 801f5ba:	2100      	movs	r1, #0
 801f5bc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f5be:	2300      	movs	r3, #0
}
 801f5c0:	0018      	movs	r0, r3
 801f5c2:	46bd      	mov	sp, r7
 801f5c4:	b003      	add	sp, #12
 801f5c6:	bc90      	pop	{r4, r7}
 801f5c8:	bc08      	pop	{r3}
 801f5ca:	b004      	add	sp, #16
 801f5cc:	4718      	bx	r3
	...

0801f5d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f5d0:	b580      	push	{r7, lr}
 801f5d2:	b09c      	sub	sp, #112	@ 0x70
 801f5d4:	af00      	add	r7, sp, #0
 801f5d6:	6078      	str	r0, [r7, #4]
 801f5d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f5da:	236f      	movs	r3, #111	@ 0x6f
 801f5dc:	18fb      	adds	r3, r7, r3
 801f5de:	2200      	movs	r2, #0
 801f5e0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f5e2:	687a      	ldr	r2, [r7, #4]
 801f5e4:	683b      	ldr	r3, [r7, #0]
 801f5e6:	781b      	ldrb	r3, [r3, #0]
 801f5e8:	009b      	lsls	r3, r3, #2
 801f5ea:	18d3      	adds	r3, r2, r3
 801f5ec:	881b      	ldrh	r3, [r3, #0]
 801f5ee:	b29a      	uxth	r2, r3
 801f5f0:	236c      	movs	r3, #108	@ 0x6c
 801f5f2:	18fb      	adds	r3, r7, r3
 801f5f4:	49a3      	ldr	r1, [pc, #652]	@ (801f884 <USB_ActivateEndpoint+0x2b4>)
 801f5f6:	400a      	ands	r2, r1
 801f5f8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f5fa:	683b      	ldr	r3, [r7, #0]
 801f5fc:	78db      	ldrb	r3, [r3, #3]
 801f5fe:	2b03      	cmp	r3, #3
 801f600:	d017      	beq.n	801f632 <USB_ActivateEndpoint+0x62>
 801f602:	dc28      	bgt.n	801f656 <USB_ActivateEndpoint+0x86>
 801f604:	2b02      	cmp	r3, #2
 801f606:	d00e      	beq.n	801f626 <USB_ActivateEndpoint+0x56>
 801f608:	dc25      	bgt.n	801f656 <USB_ActivateEndpoint+0x86>
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	d002      	beq.n	801f614 <USB_ActivateEndpoint+0x44>
 801f60e:	2b01      	cmp	r3, #1
 801f610:	d018      	beq.n	801f644 <USB_ActivateEndpoint+0x74>
 801f612:	e020      	b.n	801f656 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f614:	226c      	movs	r2, #108	@ 0x6c
 801f616:	18bb      	adds	r3, r7, r2
 801f618:	18ba      	adds	r2, r7, r2
 801f61a:	8812      	ldrh	r2, [r2, #0]
 801f61c:	2180      	movs	r1, #128	@ 0x80
 801f61e:	0089      	lsls	r1, r1, #2
 801f620:	430a      	orrs	r2, r1
 801f622:	801a      	strh	r2, [r3, #0]
      break;
 801f624:	e01c      	b.n	801f660 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f626:	226c      	movs	r2, #108	@ 0x6c
 801f628:	18bb      	adds	r3, r7, r2
 801f62a:	18ba      	adds	r2, r7, r2
 801f62c:	8812      	ldrh	r2, [r2, #0]
 801f62e:	801a      	strh	r2, [r3, #0]
      break;
 801f630:	e016      	b.n	801f660 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f632:	226c      	movs	r2, #108	@ 0x6c
 801f634:	18bb      	adds	r3, r7, r2
 801f636:	18ba      	adds	r2, r7, r2
 801f638:	8812      	ldrh	r2, [r2, #0]
 801f63a:	21c0      	movs	r1, #192	@ 0xc0
 801f63c:	00c9      	lsls	r1, r1, #3
 801f63e:	430a      	orrs	r2, r1
 801f640:	801a      	strh	r2, [r3, #0]
      break;
 801f642:	e00d      	b.n	801f660 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f644:	226c      	movs	r2, #108	@ 0x6c
 801f646:	18bb      	adds	r3, r7, r2
 801f648:	18ba      	adds	r2, r7, r2
 801f64a:	8812      	ldrh	r2, [r2, #0]
 801f64c:	2180      	movs	r1, #128	@ 0x80
 801f64e:	00c9      	lsls	r1, r1, #3
 801f650:	430a      	orrs	r2, r1
 801f652:	801a      	strh	r2, [r3, #0]
      break;
 801f654:	e004      	b.n	801f660 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f656:	236f      	movs	r3, #111	@ 0x6f
 801f658:	18fb      	adds	r3, r7, r3
 801f65a:	2201      	movs	r2, #1
 801f65c:	701a      	strb	r2, [r3, #0]
      break;
 801f65e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f660:	687a      	ldr	r2, [r7, #4]
 801f662:	683b      	ldr	r3, [r7, #0]
 801f664:	781b      	ldrb	r3, [r3, #0]
 801f666:	009b      	lsls	r3, r3, #2
 801f668:	18d3      	adds	r3, r2, r3
 801f66a:	226c      	movs	r2, #108	@ 0x6c
 801f66c:	18ba      	adds	r2, r7, r2
 801f66e:	8812      	ldrh	r2, [r2, #0]
 801f670:	4985      	ldr	r1, [pc, #532]	@ (801f888 <USB_ActivateEndpoint+0x2b8>)
 801f672:	430a      	orrs	r2, r1
 801f674:	b292      	uxth	r2, r2
 801f676:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f678:	687a      	ldr	r2, [r7, #4]
 801f67a:	683b      	ldr	r3, [r7, #0]
 801f67c:	781b      	ldrb	r3, [r3, #0]
 801f67e:	009b      	lsls	r3, r3, #2
 801f680:	18d3      	adds	r3, r2, r3
 801f682:	881b      	ldrh	r3, [r3, #0]
 801f684:	b29b      	uxth	r3, r3
 801f686:	b21b      	sxth	r3, r3
 801f688:	4a80      	ldr	r2, [pc, #512]	@ (801f88c <USB_ActivateEndpoint+0x2bc>)
 801f68a:	4013      	ands	r3, r2
 801f68c:	b21a      	sxth	r2, r3
 801f68e:	683b      	ldr	r3, [r7, #0]
 801f690:	781b      	ldrb	r3, [r3, #0]
 801f692:	b21b      	sxth	r3, r3
 801f694:	4313      	orrs	r3, r2
 801f696:	b21a      	sxth	r2, r3
 801f698:	2166      	movs	r1, #102	@ 0x66
 801f69a:	187b      	adds	r3, r7, r1
 801f69c:	801a      	strh	r2, [r3, #0]
 801f69e:	687a      	ldr	r2, [r7, #4]
 801f6a0:	683b      	ldr	r3, [r7, #0]
 801f6a2:	781b      	ldrb	r3, [r3, #0]
 801f6a4:	009b      	lsls	r3, r3, #2
 801f6a6:	18d3      	adds	r3, r2, r3
 801f6a8:	187a      	adds	r2, r7, r1
 801f6aa:	8812      	ldrh	r2, [r2, #0]
 801f6ac:	4976      	ldr	r1, [pc, #472]	@ (801f888 <USB_ActivateEndpoint+0x2b8>)
 801f6ae:	430a      	orrs	r2, r1
 801f6b0:	b292      	uxth	r2, r2
 801f6b2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f6b4:	683b      	ldr	r3, [r7, #0]
 801f6b6:	7b1b      	ldrb	r3, [r3, #12]
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	d000      	beq.n	801f6be <USB_ActivateEndpoint+0xee>
 801f6bc:	e178      	b.n	801f9b0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f6be:	683b      	ldr	r3, [r7, #0]
 801f6c0:	785b      	ldrb	r3, [r3, #1]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d100      	bne.n	801f6c8 <USB_ActivateEndpoint+0xf8>
 801f6c6:	e07a      	b.n	801f7be <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	61bb      	str	r3, [r7, #24]
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	2250      	movs	r2, #80	@ 0x50
 801f6d0:	5a9b      	ldrh	r3, [r3, r2]
 801f6d2:	b29b      	uxth	r3, r3
 801f6d4:	001a      	movs	r2, r3
 801f6d6:	69bb      	ldr	r3, [r7, #24]
 801f6d8:	189b      	adds	r3, r3, r2
 801f6da:	61bb      	str	r3, [r7, #24]
 801f6dc:	683b      	ldr	r3, [r7, #0]
 801f6de:	781b      	ldrb	r3, [r3, #0]
 801f6e0:	00da      	lsls	r2, r3, #3
 801f6e2:	69bb      	ldr	r3, [r7, #24]
 801f6e4:	18d3      	adds	r3, r2, r3
 801f6e6:	2280      	movs	r2, #128	@ 0x80
 801f6e8:	00d2      	lsls	r2, r2, #3
 801f6ea:	4694      	mov	ip, r2
 801f6ec:	4463      	add	r3, ip
 801f6ee:	617b      	str	r3, [r7, #20]
 801f6f0:	683b      	ldr	r3, [r7, #0]
 801f6f2:	88db      	ldrh	r3, [r3, #6]
 801f6f4:	085b      	lsrs	r3, r3, #1
 801f6f6:	b29b      	uxth	r3, r3
 801f6f8:	18db      	adds	r3, r3, r3
 801f6fa:	b29a      	uxth	r2, r3
 801f6fc:	697b      	ldr	r3, [r7, #20]
 801f6fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f700:	687a      	ldr	r2, [r7, #4]
 801f702:	683b      	ldr	r3, [r7, #0]
 801f704:	781b      	ldrb	r3, [r3, #0]
 801f706:	009b      	lsls	r3, r3, #2
 801f708:	18d2      	adds	r2, r2, r3
 801f70a:	2112      	movs	r1, #18
 801f70c:	187b      	adds	r3, r7, r1
 801f70e:	8812      	ldrh	r2, [r2, #0]
 801f710:	801a      	strh	r2, [r3, #0]
 801f712:	187b      	adds	r3, r7, r1
 801f714:	881b      	ldrh	r3, [r3, #0]
 801f716:	2240      	movs	r2, #64	@ 0x40
 801f718:	4013      	ands	r3, r2
 801f71a:	d016      	beq.n	801f74a <USB_ActivateEndpoint+0x17a>
 801f71c:	687a      	ldr	r2, [r7, #4]
 801f71e:	683b      	ldr	r3, [r7, #0]
 801f720:	781b      	ldrb	r3, [r3, #0]
 801f722:	009b      	lsls	r3, r3, #2
 801f724:	18d3      	adds	r3, r2, r3
 801f726:	881b      	ldrh	r3, [r3, #0]
 801f728:	b29a      	uxth	r2, r3
 801f72a:	2010      	movs	r0, #16
 801f72c:	183b      	adds	r3, r7, r0
 801f72e:	4957      	ldr	r1, [pc, #348]	@ (801f88c <USB_ActivateEndpoint+0x2bc>)
 801f730:	400a      	ands	r2, r1
 801f732:	801a      	strh	r2, [r3, #0]
 801f734:	687a      	ldr	r2, [r7, #4]
 801f736:	683b      	ldr	r3, [r7, #0]
 801f738:	781b      	ldrb	r3, [r3, #0]
 801f73a:	009b      	lsls	r3, r3, #2
 801f73c:	18d3      	adds	r3, r2, r3
 801f73e:	183a      	adds	r2, r7, r0
 801f740:	8812      	ldrh	r2, [r2, #0]
 801f742:	4953      	ldr	r1, [pc, #332]	@ (801f890 <USB_ActivateEndpoint+0x2c0>)
 801f744:	430a      	orrs	r2, r1
 801f746:	b292      	uxth	r2, r2
 801f748:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	78db      	ldrb	r3, [r3, #3]
 801f74e:	2b01      	cmp	r3, #1
 801f750:	d01d      	beq.n	801f78e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f752:	687a      	ldr	r2, [r7, #4]
 801f754:	683b      	ldr	r3, [r7, #0]
 801f756:	781b      	ldrb	r3, [r3, #0]
 801f758:	009b      	lsls	r3, r3, #2
 801f75a:	18d3      	adds	r3, r2, r3
 801f75c:	881b      	ldrh	r3, [r3, #0]
 801f75e:	b29a      	uxth	r2, r3
 801f760:	200c      	movs	r0, #12
 801f762:	183b      	adds	r3, r7, r0
 801f764:	494b      	ldr	r1, [pc, #300]	@ (801f894 <USB_ActivateEndpoint+0x2c4>)
 801f766:	400a      	ands	r2, r1
 801f768:	801a      	strh	r2, [r3, #0]
 801f76a:	183b      	adds	r3, r7, r0
 801f76c:	183a      	adds	r2, r7, r0
 801f76e:	8812      	ldrh	r2, [r2, #0]
 801f770:	2120      	movs	r1, #32
 801f772:	404a      	eors	r2, r1
 801f774:	801a      	strh	r2, [r3, #0]
 801f776:	687a      	ldr	r2, [r7, #4]
 801f778:	683b      	ldr	r3, [r7, #0]
 801f77a:	781b      	ldrb	r3, [r3, #0]
 801f77c:	009b      	lsls	r3, r3, #2
 801f77e:	18d3      	adds	r3, r2, r3
 801f780:	183a      	adds	r2, r7, r0
 801f782:	8812      	ldrh	r2, [r2, #0]
 801f784:	4940      	ldr	r1, [pc, #256]	@ (801f888 <USB_ActivateEndpoint+0x2b8>)
 801f786:	430a      	orrs	r2, r1
 801f788:	b292      	uxth	r2, r2
 801f78a:	801a      	strh	r2, [r3, #0]
 801f78c:	e2b4      	b.n	801fcf8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f78e:	687a      	ldr	r2, [r7, #4]
 801f790:	683b      	ldr	r3, [r7, #0]
 801f792:	781b      	ldrb	r3, [r3, #0]
 801f794:	009b      	lsls	r3, r3, #2
 801f796:	18d3      	adds	r3, r2, r3
 801f798:	881b      	ldrh	r3, [r3, #0]
 801f79a:	b29a      	uxth	r2, r3
 801f79c:	200e      	movs	r0, #14
 801f79e:	183b      	adds	r3, r7, r0
 801f7a0:	493c      	ldr	r1, [pc, #240]	@ (801f894 <USB_ActivateEndpoint+0x2c4>)
 801f7a2:	400a      	ands	r2, r1
 801f7a4:	801a      	strh	r2, [r3, #0]
 801f7a6:	687a      	ldr	r2, [r7, #4]
 801f7a8:	683b      	ldr	r3, [r7, #0]
 801f7aa:	781b      	ldrb	r3, [r3, #0]
 801f7ac:	009b      	lsls	r3, r3, #2
 801f7ae:	18d3      	adds	r3, r2, r3
 801f7b0:	183a      	adds	r2, r7, r0
 801f7b2:	8812      	ldrh	r2, [r2, #0]
 801f7b4:	4934      	ldr	r1, [pc, #208]	@ (801f888 <USB_ActivateEndpoint+0x2b8>)
 801f7b6:	430a      	orrs	r2, r1
 801f7b8:	b292      	uxth	r2, r2
 801f7ba:	801a      	strh	r2, [r3, #0]
 801f7bc:	e29c      	b.n	801fcf8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f7be:	687b      	ldr	r3, [r7, #4]
 801f7c0:	633b      	str	r3, [r7, #48]	@ 0x30
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	2250      	movs	r2, #80	@ 0x50
 801f7c6:	5a9b      	ldrh	r3, [r3, r2]
 801f7c8:	b29b      	uxth	r3, r3
 801f7ca:	001a      	movs	r2, r3
 801f7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f7ce:	189b      	adds	r3, r3, r2
 801f7d0:	633b      	str	r3, [r7, #48]	@ 0x30
 801f7d2:	683b      	ldr	r3, [r7, #0]
 801f7d4:	781b      	ldrb	r3, [r3, #0]
 801f7d6:	00da      	lsls	r2, r3, #3
 801f7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f7da:	18d3      	adds	r3, r2, r3
 801f7dc:	4a2e      	ldr	r2, [pc, #184]	@ (801f898 <USB_ActivateEndpoint+0x2c8>)
 801f7de:	4694      	mov	ip, r2
 801f7e0:	4463      	add	r3, ip
 801f7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f7e4:	683b      	ldr	r3, [r7, #0]
 801f7e6:	88db      	ldrh	r3, [r3, #6]
 801f7e8:	085b      	lsrs	r3, r3, #1
 801f7ea:	b29b      	uxth	r3, r3
 801f7ec:	18db      	adds	r3, r3, r3
 801f7ee:	b29a      	uxth	r2, r3
 801f7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f7f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	2250      	movs	r2, #80	@ 0x50
 801f7fc:	5a9b      	ldrh	r3, [r3, r2]
 801f7fe:	b29b      	uxth	r3, r3
 801f800:	001a      	movs	r2, r3
 801f802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f804:	189b      	adds	r3, r3, r2
 801f806:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f808:	683b      	ldr	r3, [r7, #0]
 801f80a:	781b      	ldrb	r3, [r3, #0]
 801f80c:	00da      	lsls	r2, r3, #3
 801f80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f810:	18d3      	adds	r3, r2, r3
 801f812:	4a22      	ldr	r2, [pc, #136]	@ (801f89c <USB_ActivateEndpoint+0x2cc>)
 801f814:	4694      	mov	ip, r2
 801f816:	4463      	add	r3, ip
 801f818:	627b      	str	r3, [r7, #36]	@ 0x24
 801f81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f81c:	881b      	ldrh	r3, [r3, #0]
 801f81e:	b29b      	uxth	r3, r3
 801f820:	059b      	lsls	r3, r3, #22
 801f822:	0d9b      	lsrs	r3, r3, #22
 801f824:	b29a      	uxth	r2, r3
 801f826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f828:	801a      	strh	r2, [r3, #0]
 801f82a:	683b      	ldr	r3, [r7, #0]
 801f82c:	691b      	ldr	r3, [r3, #16]
 801f82e:	2b3e      	cmp	r3, #62	@ 0x3e
 801f830:	d91a      	bls.n	801f868 <USB_ActivateEndpoint+0x298>
 801f832:	683b      	ldr	r3, [r7, #0]
 801f834:	691b      	ldr	r3, [r3, #16]
 801f836:	095b      	lsrs	r3, r3, #5
 801f838:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f83a:	683b      	ldr	r3, [r7, #0]
 801f83c:	691b      	ldr	r3, [r3, #16]
 801f83e:	221f      	movs	r2, #31
 801f840:	4013      	ands	r3, r2
 801f842:	d102      	bne.n	801f84a <USB_ActivateEndpoint+0x27a>
 801f844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f846:	3b01      	subs	r3, #1
 801f848:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f84c:	881b      	ldrh	r3, [r3, #0]
 801f84e:	b29a      	uxth	r2, r3
 801f850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f852:	b29b      	uxth	r3, r3
 801f854:	029b      	lsls	r3, r3, #10
 801f856:	b29b      	uxth	r3, r3
 801f858:	4313      	orrs	r3, r2
 801f85a:	b29b      	uxth	r3, r3
 801f85c:	4a10      	ldr	r2, [pc, #64]	@ (801f8a0 <USB_ActivateEndpoint+0x2d0>)
 801f85e:	4313      	orrs	r3, r2
 801f860:	b29a      	uxth	r2, r3
 801f862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f864:	801a      	strh	r2, [r3, #0]
 801f866:	e034      	b.n	801f8d2 <USB_ActivateEndpoint+0x302>
 801f868:	683b      	ldr	r3, [r7, #0]
 801f86a:	691b      	ldr	r3, [r3, #16]
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	d119      	bne.n	801f8a4 <USB_ActivateEndpoint+0x2d4>
 801f870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f872:	881b      	ldrh	r3, [r3, #0]
 801f874:	b29b      	uxth	r3, r3
 801f876:	4a0a      	ldr	r2, [pc, #40]	@ (801f8a0 <USB_ActivateEndpoint+0x2d0>)
 801f878:	4313      	orrs	r3, r2
 801f87a:	b29a      	uxth	r2, r3
 801f87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f87e:	801a      	strh	r2, [r3, #0]
 801f880:	e027      	b.n	801f8d2 <USB_ActivateEndpoint+0x302>
 801f882:	46c0      	nop			@ (mov r8, r8)
 801f884:	ffff898f 	.word	0xffff898f
 801f888:	ffff8080 	.word	0xffff8080
 801f88c:	ffff8f8f 	.word	0xffff8f8f
 801f890:	ffff80c0 	.word	0xffff80c0
 801f894:	ffff8fbf 	.word	0xffff8fbf
 801f898:	00000404 	.word	0x00000404
 801f89c:	00000406 	.word	0x00000406
 801f8a0:	ffff8000 	.word	0xffff8000
 801f8a4:	683b      	ldr	r3, [r7, #0]
 801f8a6:	691b      	ldr	r3, [r3, #16]
 801f8a8:	085b      	lsrs	r3, r3, #1
 801f8aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f8ac:	683b      	ldr	r3, [r7, #0]
 801f8ae:	691b      	ldr	r3, [r3, #16]
 801f8b0:	2201      	movs	r2, #1
 801f8b2:	4013      	ands	r3, r2
 801f8b4:	d002      	beq.n	801f8bc <USB_ActivateEndpoint+0x2ec>
 801f8b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f8b8:	3301      	adds	r3, #1
 801f8ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8be:	881b      	ldrh	r3, [r3, #0]
 801f8c0:	b29a      	uxth	r2, r3
 801f8c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f8c4:	b29b      	uxth	r3, r3
 801f8c6:	029b      	lsls	r3, r3, #10
 801f8c8:	b29b      	uxth	r3, r3
 801f8ca:	4313      	orrs	r3, r2
 801f8cc:	b29a      	uxth	r2, r3
 801f8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f8d2:	687a      	ldr	r2, [r7, #4]
 801f8d4:	683b      	ldr	r3, [r7, #0]
 801f8d6:	781b      	ldrb	r3, [r3, #0]
 801f8d8:	009b      	lsls	r3, r3, #2
 801f8da:	18d2      	adds	r2, r2, r3
 801f8dc:	2122      	movs	r1, #34	@ 0x22
 801f8de:	187b      	adds	r3, r7, r1
 801f8e0:	8812      	ldrh	r2, [r2, #0]
 801f8e2:	801a      	strh	r2, [r3, #0]
 801f8e4:	187b      	adds	r3, r7, r1
 801f8e6:	881a      	ldrh	r2, [r3, #0]
 801f8e8:	2380      	movs	r3, #128	@ 0x80
 801f8ea:	01db      	lsls	r3, r3, #7
 801f8ec:	4013      	ands	r3, r2
 801f8ee:	d016      	beq.n	801f91e <USB_ActivateEndpoint+0x34e>
 801f8f0:	687a      	ldr	r2, [r7, #4]
 801f8f2:	683b      	ldr	r3, [r7, #0]
 801f8f4:	781b      	ldrb	r3, [r3, #0]
 801f8f6:	009b      	lsls	r3, r3, #2
 801f8f8:	18d3      	adds	r3, r2, r3
 801f8fa:	881b      	ldrh	r3, [r3, #0]
 801f8fc:	b29a      	uxth	r2, r3
 801f8fe:	2020      	movs	r0, #32
 801f900:	183b      	adds	r3, r7, r0
 801f902:	49dd      	ldr	r1, [pc, #884]	@ (801fc78 <USB_ActivateEndpoint+0x6a8>)
 801f904:	400a      	ands	r2, r1
 801f906:	801a      	strh	r2, [r3, #0]
 801f908:	687a      	ldr	r2, [r7, #4]
 801f90a:	683b      	ldr	r3, [r7, #0]
 801f90c:	781b      	ldrb	r3, [r3, #0]
 801f90e:	009b      	lsls	r3, r3, #2
 801f910:	18d3      	adds	r3, r2, r3
 801f912:	183a      	adds	r2, r7, r0
 801f914:	8812      	ldrh	r2, [r2, #0]
 801f916:	49d9      	ldr	r1, [pc, #868]	@ (801fc7c <USB_ActivateEndpoint+0x6ac>)
 801f918:	430a      	orrs	r2, r1
 801f91a:	b292      	uxth	r2, r2
 801f91c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	781b      	ldrb	r3, [r3, #0]
 801f922:	2b00      	cmp	r3, #0
 801f924:	d125      	bne.n	801f972 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f926:	687a      	ldr	r2, [r7, #4]
 801f928:	683b      	ldr	r3, [r7, #0]
 801f92a:	781b      	ldrb	r3, [r3, #0]
 801f92c:	009b      	lsls	r3, r3, #2
 801f92e:	18d3      	adds	r3, r2, r3
 801f930:	881b      	ldrh	r3, [r3, #0]
 801f932:	b29a      	uxth	r2, r3
 801f934:	201c      	movs	r0, #28
 801f936:	183b      	adds	r3, r7, r0
 801f938:	49d1      	ldr	r1, [pc, #836]	@ (801fc80 <USB_ActivateEndpoint+0x6b0>)
 801f93a:	400a      	ands	r2, r1
 801f93c:	801a      	strh	r2, [r3, #0]
 801f93e:	183b      	adds	r3, r7, r0
 801f940:	183a      	adds	r2, r7, r0
 801f942:	8812      	ldrh	r2, [r2, #0]
 801f944:	2180      	movs	r1, #128	@ 0x80
 801f946:	0149      	lsls	r1, r1, #5
 801f948:	404a      	eors	r2, r1
 801f94a:	801a      	strh	r2, [r3, #0]
 801f94c:	183b      	adds	r3, r7, r0
 801f94e:	183a      	adds	r2, r7, r0
 801f950:	8812      	ldrh	r2, [r2, #0]
 801f952:	2180      	movs	r1, #128	@ 0x80
 801f954:	0189      	lsls	r1, r1, #6
 801f956:	404a      	eors	r2, r1
 801f958:	801a      	strh	r2, [r3, #0]
 801f95a:	687a      	ldr	r2, [r7, #4]
 801f95c:	683b      	ldr	r3, [r7, #0]
 801f95e:	781b      	ldrb	r3, [r3, #0]
 801f960:	009b      	lsls	r3, r3, #2
 801f962:	18d3      	adds	r3, r2, r3
 801f964:	183a      	adds	r2, r7, r0
 801f966:	8812      	ldrh	r2, [r2, #0]
 801f968:	49c6      	ldr	r1, [pc, #792]	@ (801fc84 <USB_ActivateEndpoint+0x6b4>)
 801f96a:	430a      	orrs	r2, r1
 801f96c:	b292      	uxth	r2, r2
 801f96e:	801a      	strh	r2, [r3, #0]
 801f970:	e1c2      	b.n	801fcf8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f972:	687a      	ldr	r2, [r7, #4]
 801f974:	683b      	ldr	r3, [r7, #0]
 801f976:	781b      	ldrb	r3, [r3, #0]
 801f978:	009b      	lsls	r3, r3, #2
 801f97a:	18d3      	adds	r3, r2, r3
 801f97c:	881b      	ldrh	r3, [r3, #0]
 801f97e:	b29a      	uxth	r2, r3
 801f980:	201e      	movs	r0, #30
 801f982:	183b      	adds	r3, r7, r0
 801f984:	49be      	ldr	r1, [pc, #760]	@ (801fc80 <USB_ActivateEndpoint+0x6b0>)
 801f986:	400a      	ands	r2, r1
 801f988:	801a      	strh	r2, [r3, #0]
 801f98a:	183b      	adds	r3, r7, r0
 801f98c:	183a      	adds	r2, r7, r0
 801f98e:	8812      	ldrh	r2, [r2, #0]
 801f990:	2180      	movs	r1, #128	@ 0x80
 801f992:	0189      	lsls	r1, r1, #6
 801f994:	404a      	eors	r2, r1
 801f996:	801a      	strh	r2, [r3, #0]
 801f998:	687a      	ldr	r2, [r7, #4]
 801f99a:	683b      	ldr	r3, [r7, #0]
 801f99c:	781b      	ldrb	r3, [r3, #0]
 801f99e:	009b      	lsls	r3, r3, #2
 801f9a0:	18d3      	adds	r3, r2, r3
 801f9a2:	183a      	adds	r2, r7, r0
 801f9a4:	8812      	ldrh	r2, [r2, #0]
 801f9a6:	49b7      	ldr	r1, [pc, #732]	@ (801fc84 <USB_ActivateEndpoint+0x6b4>)
 801f9a8:	430a      	orrs	r2, r1
 801f9aa:	b292      	uxth	r2, r2
 801f9ac:	801a      	strh	r2, [r3, #0]
 801f9ae:	e1a3      	b.n	801fcf8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f9b0:	683b      	ldr	r3, [r7, #0]
 801f9b2:	78db      	ldrb	r3, [r3, #3]
 801f9b4:	2b02      	cmp	r3, #2
 801f9b6:	d117      	bne.n	801f9e8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f9b8:	687a      	ldr	r2, [r7, #4]
 801f9ba:	683b      	ldr	r3, [r7, #0]
 801f9bc:	781b      	ldrb	r3, [r3, #0]
 801f9be:	009b      	lsls	r3, r3, #2
 801f9c0:	18d3      	adds	r3, r2, r3
 801f9c2:	881b      	ldrh	r3, [r3, #0]
 801f9c4:	b29a      	uxth	r2, r3
 801f9c6:	2062      	movs	r0, #98	@ 0x62
 801f9c8:	183b      	adds	r3, r7, r0
 801f9ca:	49ab      	ldr	r1, [pc, #684]	@ (801fc78 <USB_ActivateEndpoint+0x6a8>)
 801f9cc:	400a      	ands	r2, r1
 801f9ce:	801a      	strh	r2, [r3, #0]
 801f9d0:	687a      	ldr	r2, [r7, #4]
 801f9d2:	683b      	ldr	r3, [r7, #0]
 801f9d4:	781b      	ldrb	r3, [r3, #0]
 801f9d6:	009b      	lsls	r3, r3, #2
 801f9d8:	18d3      	adds	r3, r2, r3
 801f9da:	183a      	adds	r2, r7, r0
 801f9dc:	8812      	ldrh	r2, [r2, #0]
 801f9de:	49aa      	ldr	r1, [pc, #680]	@ (801fc88 <USB_ActivateEndpoint+0x6b8>)
 801f9e0:	430a      	orrs	r2, r1
 801f9e2:	b292      	uxth	r2, r2
 801f9e4:	801a      	strh	r2, [r3, #0]
 801f9e6:	e016      	b.n	801fa16 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f9e8:	687a      	ldr	r2, [r7, #4]
 801f9ea:	683b      	ldr	r3, [r7, #0]
 801f9ec:	781b      	ldrb	r3, [r3, #0]
 801f9ee:	009b      	lsls	r3, r3, #2
 801f9f0:	18d3      	adds	r3, r2, r3
 801f9f2:	881b      	ldrh	r3, [r3, #0]
 801f9f4:	b29a      	uxth	r2, r3
 801f9f6:	2064      	movs	r0, #100	@ 0x64
 801f9f8:	183b      	adds	r3, r7, r0
 801f9fa:	49a4      	ldr	r1, [pc, #656]	@ (801fc8c <USB_ActivateEndpoint+0x6bc>)
 801f9fc:	400a      	ands	r2, r1
 801f9fe:	801a      	strh	r2, [r3, #0]
 801fa00:	687a      	ldr	r2, [r7, #4]
 801fa02:	683b      	ldr	r3, [r7, #0]
 801fa04:	781b      	ldrb	r3, [r3, #0]
 801fa06:	009b      	lsls	r3, r3, #2
 801fa08:	18d3      	adds	r3, r2, r3
 801fa0a:	183a      	adds	r2, r7, r0
 801fa0c:	8812      	ldrh	r2, [r2, #0]
 801fa0e:	499d      	ldr	r1, [pc, #628]	@ (801fc84 <USB_ActivateEndpoint+0x6b4>)
 801fa10:	430a      	orrs	r2, r1
 801fa12:	b292      	uxth	r2, r2
 801fa14:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	2250      	movs	r2, #80	@ 0x50
 801fa1e:	5a9b      	ldrh	r3, [r3, r2]
 801fa20:	b29b      	uxth	r3, r3
 801fa22:	001a      	movs	r2, r3
 801fa24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fa26:	189b      	adds	r3, r3, r2
 801fa28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801fa2a:	683b      	ldr	r3, [r7, #0]
 801fa2c:	781b      	ldrb	r3, [r3, #0]
 801fa2e:	00da      	lsls	r2, r3, #3
 801fa30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fa32:	18d3      	adds	r3, r2, r3
 801fa34:	2280      	movs	r2, #128	@ 0x80
 801fa36:	00d2      	lsls	r2, r2, #3
 801fa38:	4694      	mov	ip, r2
 801fa3a:	4463      	add	r3, ip
 801fa3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801fa3e:	683b      	ldr	r3, [r7, #0]
 801fa40:	891b      	ldrh	r3, [r3, #8]
 801fa42:	085b      	lsrs	r3, r3, #1
 801fa44:	b29b      	uxth	r3, r3
 801fa46:	18db      	adds	r3, r3, r3
 801fa48:	b29a      	uxth	r2, r3
 801fa4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801fa4c:	801a      	strh	r2, [r3, #0]
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	657b      	str	r3, [r7, #84]	@ 0x54
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	2250      	movs	r2, #80	@ 0x50
 801fa56:	5a9b      	ldrh	r3, [r3, r2]
 801fa58:	b29b      	uxth	r3, r3
 801fa5a:	001a      	movs	r2, r3
 801fa5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa5e:	189b      	adds	r3, r3, r2
 801fa60:	657b      	str	r3, [r7, #84]	@ 0x54
 801fa62:	683b      	ldr	r3, [r7, #0]
 801fa64:	781b      	ldrb	r3, [r3, #0]
 801fa66:	00da      	lsls	r2, r3, #3
 801fa68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa6a:	18d3      	adds	r3, r2, r3
 801fa6c:	4a88      	ldr	r2, [pc, #544]	@ (801fc90 <USB_ActivateEndpoint+0x6c0>)
 801fa6e:	4694      	mov	ip, r2
 801fa70:	4463      	add	r3, ip
 801fa72:	653b      	str	r3, [r7, #80]	@ 0x50
 801fa74:	683b      	ldr	r3, [r7, #0]
 801fa76:	895b      	ldrh	r3, [r3, #10]
 801fa78:	085b      	lsrs	r3, r3, #1
 801fa7a:	b29b      	uxth	r3, r3
 801fa7c:	18db      	adds	r3, r3, r3
 801fa7e:	b29a      	uxth	r2, r3
 801fa80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fa82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801fa84:	683b      	ldr	r3, [r7, #0]
 801fa86:	785b      	ldrb	r3, [r3, #1]
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	d000      	beq.n	801fa8e <USB_ActivateEndpoint+0x4be>
 801fa8c:	e087      	b.n	801fb9e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fa8e:	687a      	ldr	r2, [r7, #4]
 801fa90:	683b      	ldr	r3, [r7, #0]
 801fa92:	781b      	ldrb	r3, [r3, #0]
 801fa94:	009b      	lsls	r3, r3, #2
 801fa96:	18d2      	adds	r2, r2, r3
 801fa98:	2140      	movs	r1, #64	@ 0x40
 801fa9a:	187b      	adds	r3, r7, r1
 801fa9c:	8812      	ldrh	r2, [r2, #0]
 801fa9e:	801a      	strh	r2, [r3, #0]
 801faa0:	187b      	adds	r3, r7, r1
 801faa2:	881a      	ldrh	r2, [r3, #0]
 801faa4:	2380      	movs	r3, #128	@ 0x80
 801faa6:	01db      	lsls	r3, r3, #7
 801faa8:	4013      	ands	r3, r2
 801faaa:	d016      	beq.n	801fada <USB_ActivateEndpoint+0x50a>
 801faac:	687a      	ldr	r2, [r7, #4]
 801faae:	683b      	ldr	r3, [r7, #0]
 801fab0:	781b      	ldrb	r3, [r3, #0]
 801fab2:	009b      	lsls	r3, r3, #2
 801fab4:	18d3      	adds	r3, r2, r3
 801fab6:	881b      	ldrh	r3, [r3, #0]
 801fab8:	b29a      	uxth	r2, r3
 801faba:	203e      	movs	r0, #62	@ 0x3e
 801fabc:	183b      	adds	r3, r7, r0
 801fabe:	496e      	ldr	r1, [pc, #440]	@ (801fc78 <USB_ActivateEndpoint+0x6a8>)
 801fac0:	400a      	ands	r2, r1
 801fac2:	801a      	strh	r2, [r3, #0]
 801fac4:	687a      	ldr	r2, [r7, #4]
 801fac6:	683b      	ldr	r3, [r7, #0]
 801fac8:	781b      	ldrb	r3, [r3, #0]
 801faca:	009b      	lsls	r3, r3, #2
 801facc:	18d3      	adds	r3, r2, r3
 801face:	183a      	adds	r2, r7, r0
 801fad0:	8812      	ldrh	r2, [r2, #0]
 801fad2:	496a      	ldr	r1, [pc, #424]	@ (801fc7c <USB_ActivateEndpoint+0x6ac>)
 801fad4:	430a      	orrs	r2, r1
 801fad6:	b292      	uxth	r2, r2
 801fad8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fada:	687a      	ldr	r2, [r7, #4]
 801fadc:	683b      	ldr	r3, [r7, #0]
 801fade:	781b      	ldrb	r3, [r3, #0]
 801fae0:	009b      	lsls	r3, r3, #2
 801fae2:	18d2      	adds	r2, r2, r3
 801fae4:	213c      	movs	r1, #60	@ 0x3c
 801fae6:	187b      	adds	r3, r7, r1
 801fae8:	8812      	ldrh	r2, [r2, #0]
 801faea:	801a      	strh	r2, [r3, #0]
 801faec:	187b      	adds	r3, r7, r1
 801faee:	881b      	ldrh	r3, [r3, #0]
 801faf0:	2240      	movs	r2, #64	@ 0x40
 801faf2:	4013      	ands	r3, r2
 801faf4:	d016      	beq.n	801fb24 <USB_ActivateEndpoint+0x554>
 801faf6:	687a      	ldr	r2, [r7, #4]
 801faf8:	683b      	ldr	r3, [r7, #0]
 801fafa:	781b      	ldrb	r3, [r3, #0]
 801fafc:	009b      	lsls	r3, r3, #2
 801fafe:	18d3      	adds	r3, r2, r3
 801fb00:	881b      	ldrh	r3, [r3, #0]
 801fb02:	b29a      	uxth	r2, r3
 801fb04:	203a      	movs	r0, #58	@ 0x3a
 801fb06:	183b      	adds	r3, r7, r0
 801fb08:	495b      	ldr	r1, [pc, #364]	@ (801fc78 <USB_ActivateEndpoint+0x6a8>)
 801fb0a:	400a      	ands	r2, r1
 801fb0c:	801a      	strh	r2, [r3, #0]
 801fb0e:	687a      	ldr	r2, [r7, #4]
 801fb10:	683b      	ldr	r3, [r7, #0]
 801fb12:	781b      	ldrb	r3, [r3, #0]
 801fb14:	009b      	lsls	r3, r3, #2
 801fb16:	18d3      	adds	r3, r2, r3
 801fb18:	183a      	adds	r2, r7, r0
 801fb1a:	8812      	ldrh	r2, [r2, #0]
 801fb1c:	495d      	ldr	r1, [pc, #372]	@ (801fc94 <USB_ActivateEndpoint+0x6c4>)
 801fb1e:	430a      	orrs	r2, r1
 801fb20:	b292      	uxth	r2, r2
 801fb22:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fb24:	687a      	ldr	r2, [r7, #4]
 801fb26:	683b      	ldr	r3, [r7, #0]
 801fb28:	781b      	ldrb	r3, [r3, #0]
 801fb2a:	009b      	lsls	r3, r3, #2
 801fb2c:	18d3      	adds	r3, r2, r3
 801fb2e:	881b      	ldrh	r3, [r3, #0]
 801fb30:	b29a      	uxth	r2, r3
 801fb32:	2038      	movs	r0, #56	@ 0x38
 801fb34:	183b      	adds	r3, r7, r0
 801fb36:	4952      	ldr	r1, [pc, #328]	@ (801fc80 <USB_ActivateEndpoint+0x6b0>)
 801fb38:	400a      	ands	r2, r1
 801fb3a:	801a      	strh	r2, [r3, #0]
 801fb3c:	183b      	adds	r3, r7, r0
 801fb3e:	183a      	adds	r2, r7, r0
 801fb40:	8812      	ldrh	r2, [r2, #0]
 801fb42:	2180      	movs	r1, #128	@ 0x80
 801fb44:	0149      	lsls	r1, r1, #5
 801fb46:	404a      	eors	r2, r1
 801fb48:	801a      	strh	r2, [r3, #0]
 801fb4a:	183b      	adds	r3, r7, r0
 801fb4c:	183a      	adds	r2, r7, r0
 801fb4e:	8812      	ldrh	r2, [r2, #0]
 801fb50:	2180      	movs	r1, #128	@ 0x80
 801fb52:	0189      	lsls	r1, r1, #6
 801fb54:	404a      	eors	r2, r1
 801fb56:	801a      	strh	r2, [r3, #0]
 801fb58:	687a      	ldr	r2, [r7, #4]
 801fb5a:	683b      	ldr	r3, [r7, #0]
 801fb5c:	781b      	ldrb	r3, [r3, #0]
 801fb5e:	009b      	lsls	r3, r3, #2
 801fb60:	18d3      	adds	r3, r2, r3
 801fb62:	183a      	adds	r2, r7, r0
 801fb64:	8812      	ldrh	r2, [r2, #0]
 801fb66:	4947      	ldr	r1, [pc, #284]	@ (801fc84 <USB_ActivateEndpoint+0x6b4>)
 801fb68:	430a      	orrs	r2, r1
 801fb6a:	b292      	uxth	r2, r2
 801fb6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fb6e:	687a      	ldr	r2, [r7, #4]
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	781b      	ldrb	r3, [r3, #0]
 801fb74:	009b      	lsls	r3, r3, #2
 801fb76:	18d3      	adds	r3, r2, r3
 801fb78:	881b      	ldrh	r3, [r3, #0]
 801fb7a:	b29a      	uxth	r2, r3
 801fb7c:	2036      	movs	r0, #54	@ 0x36
 801fb7e:	183b      	adds	r3, r7, r0
 801fb80:	4945      	ldr	r1, [pc, #276]	@ (801fc98 <USB_ActivateEndpoint+0x6c8>)
 801fb82:	400a      	ands	r2, r1
 801fb84:	801a      	strh	r2, [r3, #0]
 801fb86:	687a      	ldr	r2, [r7, #4]
 801fb88:	683b      	ldr	r3, [r7, #0]
 801fb8a:	781b      	ldrb	r3, [r3, #0]
 801fb8c:	009b      	lsls	r3, r3, #2
 801fb8e:	18d3      	adds	r3, r2, r3
 801fb90:	183a      	adds	r2, r7, r0
 801fb92:	8812      	ldrh	r2, [r2, #0]
 801fb94:	493b      	ldr	r1, [pc, #236]	@ (801fc84 <USB_ActivateEndpoint+0x6b4>)
 801fb96:	430a      	orrs	r2, r1
 801fb98:	b292      	uxth	r2, r2
 801fb9a:	801a      	strh	r2, [r3, #0]
 801fb9c:	e0ac      	b.n	801fcf8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fb9e:	687a      	ldr	r2, [r7, #4]
 801fba0:	683b      	ldr	r3, [r7, #0]
 801fba2:	781b      	ldrb	r3, [r3, #0]
 801fba4:	009b      	lsls	r3, r3, #2
 801fba6:	18d2      	adds	r2, r2, r3
 801fba8:	214e      	movs	r1, #78	@ 0x4e
 801fbaa:	187b      	adds	r3, r7, r1
 801fbac:	8812      	ldrh	r2, [r2, #0]
 801fbae:	801a      	strh	r2, [r3, #0]
 801fbb0:	187b      	adds	r3, r7, r1
 801fbb2:	881a      	ldrh	r2, [r3, #0]
 801fbb4:	2380      	movs	r3, #128	@ 0x80
 801fbb6:	01db      	lsls	r3, r3, #7
 801fbb8:	4013      	ands	r3, r2
 801fbba:	d016      	beq.n	801fbea <USB_ActivateEndpoint+0x61a>
 801fbbc:	687a      	ldr	r2, [r7, #4]
 801fbbe:	683b      	ldr	r3, [r7, #0]
 801fbc0:	781b      	ldrb	r3, [r3, #0]
 801fbc2:	009b      	lsls	r3, r3, #2
 801fbc4:	18d3      	adds	r3, r2, r3
 801fbc6:	881b      	ldrh	r3, [r3, #0]
 801fbc8:	b29a      	uxth	r2, r3
 801fbca:	204c      	movs	r0, #76	@ 0x4c
 801fbcc:	183b      	adds	r3, r7, r0
 801fbce:	492a      	ldr	r1, [pc, #168]	@ (801fc78 <USB_ActivateEndpoint+0x6a8>)
 801fbd0:	400a      	ands	r2, r1
 801fbd2:	801a      	strh	r2, [r3, #0]
 801fbd4:	687a      	ldr	r2, [r7, #4]
 801fbd6:	683b      	ldr	r3, [r7, #0]
 801fbd8:	781b      	ldrb	r3, [r3, #0]
 801fbda:	009b      	lsls	r3, r3, #2
 801fbdc:	18d3      	adds	r3, r2, r3
 801fbde:	183a      	adds	r2, r7, r0
 801fbe0:	8812      	ldrh	r2, [r2, #0]
 801fbe2:	4926      	ldr	r1, [pc, #152]	@ (801fc7c <USB_ActivateEndpoint+0x6ac>)
 801fbe4:	430a      	orrs	r2, r1
 801fbe6:	b292      	uxth	r2, r2
 801fbe8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fbea:	687a      	ldr	r2, [r7, #4]
 801fbec:	683b      	ldr	r3, [r7, #0]
 801fbee:	781b      	ldrb	r3, [r3, #0]
 801fbf0:	009b      	lsls	r3, r3, #2
 801fbf2:	18d2      	adds	r2, r2, r3
 801fbf4:	214a      	movs	r1, #74	@ 0x4a
 801fbf6:	187b      	adds	r3, r7, r1
 801fbf8:	8812      	ldrh	r2, [r2, #0]
 801fbfa:	801a      	strh	r2, [r3, #0]
 801fbfc:	187b      	adds	r3, r7, r1
 801fbfe:	881b      	ldrh	r3, [r3, #0]
 801fc00:	2240      	movs	r2, #64	@ 0x40
 801fc02:	4013      	ands	r3, r2
 801fc04:	d016      	beq.n	801fc34 <USB_ActivateEndpoint+0x664>
 801fc06:	687a      	ldr	r2, [r7, #4]
 801fc08:	683b      	ldr	r3, [r7, #0]
 801fc0a:	781b      	ldrb	r3, [r3, #0]
 801fc0c:	009b      	lsls	r3, r3, #2
 801fc0e:	18d3      	adds	r3, r2, r3
 801fc10:	881b      	ldrh	r3, [r3, #0]
 801fc12:	b29a      	uxth	r2, r3
 801fc14:	2048      	movs	r0, #72	@ 0x48
 801fc16:	183b      	adds	r3, r7, r0
 801fc18:	4917      	ldr	r1, [pc, #92]	@ (801fc78 <USB_ActivateEndpoint+0x6a8>)
 801fc1a:	400a      	ands	r2, r1
 801fc1c:	801a      	strh	r2, [r3, #0]
 801fc1e:	687a      	ldr	r2, [r7, #4]
 801fc20:	683b      	ldr	r3, [r7, #0]
 801fc22:	781b      	ldrb	r3, [r3, #0]
 801fc24:	009b      	lsls	r3, r3, #2
 801fc26:	18d3      	adds	r3, r2, r3
 801fc28:	183a      	adds	r2, r7, r0
 801fc2a:	8812      	ldrh	r2, [r2, #0]
 801fc2c:	4919      	ldr	r1, [pc, #100]	@ (801fc94 <USB_ActivateEndpoint+0x6c4>)
 801fc2e:	430a      	orrs	r2, r1
 801fc30:	b292      	uxth	r2, r2
 801fc32:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801fc34:	683b      	ldr	r3, [r7, #0]
 801fc36:	78db      	ldrb	r3, [r3, #3]
 801fc38:	2b01      	cmp	r3, #1
 801fc3a:	d02f      	beq.n	801fc9c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fc3c:	687a      	ldr	r2, [r7, #4]
 801fc3e:	683b      	ldr	r3, [r7, #0]
 801fc40:	781b      	ldrb	r3, [r3, #0]
 801fc42:	009b      	lsls	r3, r3, #2
 801fc44:	18d3      	adds	r3, r2, r3
 801fc46:	881b      	ldrh	r3, [r3, #0]
 801fc48:	b29a      	uxth	r2, r3
 801fc4a:	2044      	movs	r0, #68	@ 0x44
 801fc4c:	183b      	adds	r3, r7, r0
 801fc4e:	4912      	ldr	r1, [pc, #72]	@ (801fc98 <USB_ActivateEndpoint+0x6c8>)
 801fc50:	400a      	ands	r2, r1
 801fc52:	801a      	strh	r2, [r3, #0]
 801fc54:	183b      	adds	r3, r7, r0
 801fc56:	183a      	adds	r2, r7, r0
 801fc58:	8812      	ldrh	r2, [r2, #0]
 801fc5a:	2120      	movs	r1, #32
 801fc5c:	404a      	eors	r2, r1
 801fc5e:	801a      	strh	r2, [r3, #0]
 801fc60:	687a      	ldr	r2, [r7, #4]
 801fc62:	683b      	ldr	r3, [r7, #0]
 801fc64:	781b      	ldrb	r3, [r3, #0]
 801fc66:	009b      	lsls	r3, r3, #2
 801fc68:	18d3      	adds	r3, r2, r3
 801fc6a:	183a      	adds	r2, r7, r0
 801fc6c:	8812      	ldrh	r2, [r2, #0]
 801fc6e:	4905      	ldr	r1, [pc, #20]	@ (801fc84 <USB_ActivateEndpoint+0x6b4>)
 801fc70:	430a      	orrs	r2, r1
 801fc72:	b292      	uxth	r2, r2
 801fc74:	801a      	strh	r2, [r3, #0]
 801fc76:	e028      	b.n	801fcca <USB_ActivateEndpoint+0x6fa>
 801fc78:	ffff8f8f 	.word	0xffff8f8f
 801fc7c:	ffffc080 	.word	0xffffc080
 801fc80:	ffffbf8f 	.word	0xffffbf8f
 801fc84:	ffff8080 	.word	0xffff8080
 801fc88:	ffff8180 	.word	0xffff8180
 801fc8c:	ffff8e8f 	.word	0xffff8e8f
 801fc90:	00000404 	.word	0x00000404
 801fc94:	ffff80c0 	.word	0xffff80c0
 801fc98:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fc9c:	687a      	ldr	r2, [r7, #4]
 801fc9e:	683b      	ldr	r3, [r7, #0]
 801fca0:	781b      	ldrb	r3, [r3, #0]
 801fca2:	009b      	lsls	r3, r3, #2
 801fca4:	18d3      	adds	r3, r2, r3
 801fca6:	881b      	ldrh	r3, [r3, #0]
 801fca8:	b29a      	uxth	r2, r3
 801fcaa:	2046      	movs	r0, #70	@ 0x46
 801fcac:	183b      	adds	r3, r7, r0
 801fcae:	4916      	ldr	r1, [pc, #88]	@ (801fd08 <USB_ActivateEndpoint+0x738>)
 801fcb0:	400a      	ands	r2, r1
 801fcb2:	801a      	strh	r2, [r3, #0]
 801fcb4:	687a      	ldr	r2, [r7, #4]
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	781b      	ldrb	r3, [r3, #0]
 801fcba:	009b      	lsls	r3, r3, #2
 801fcbc:	18d3      	adds	r3, r2, r3
 801fcbe:	183a      	adds	r2, r7, r0
 801fcc0:	8812      	ldrh	r2, [r2, #0]
 801fcc2:	4912      	ldr	r1, [pc, #72]	@ (801fd0c <USB_ActivateEndpoint+0x73c>)
 801fcc4:	430a      	orrs	r2, r1
 801fcc6:	b292      	uxth	r2, r2
 801fcc8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fcca:	687a      	ldr	r2, [r7, #4]
 801fccc:	683b      	ldr	r3, [r7, #0]
 801fcce:	781b      	ldrb	r3, [r3, #0]
 801fcd0:	009b      	lsls	r3, r3, #2
 801fcd2:	18d3      	adds	r3, r2, r3
 801fcd4:	881b      	ldrh	r3, [r3, #0]
 801fcd6:	b29a      	uxth	r2, r3
 801fcd8:	2042      	movs	r0, #66	@ 0x42
 801fcda:	183b      	adds	r3, r7, r0
 801fcdc:	490c      	ldr	r1, [pc, #48]	@ (801fd10 <USB_ActivateEndpoint+0x740>)
 801fcde:	400a      	ands	r2, r1
 801fce0:	801a      	strh	r2, [r3, #0]
 801fce2:	687a      	ldr	r2, [r7, #4]
 801fce4:	683b      	ldr	r3, [r7, #0]
 801fce6:	781b      	ldrb	r3, [r3, #0]
 801fce8:	009b      	lsls	r3, r3, #2
 801fcea:	18d3      	adds	r3, r2, r3
 801fcec:	183a      	adds	r2, r7, r0
 801fcee:	8812      	ldrh	r2, [r2, #0]
 801fcf0:	4906      	ldr	r1, [pc, #24]	@ (801fd0c <USB_ActivateEndpoint+0x73c>)
 801fcf2:	430a      	orrs	r2, r1
 801fcf4:	b292      	uxth	r2, r2
 801fcf6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fcf8:	236f      	movs	r3, #111	@ 0x6f
 801fcfa:	18fb      	adds	r3, r7, r3
 801fcfc:	781b      	ldrb	r3, [r3, #0]
}
 801fcfe:	0018      	movs	r0, r3
 801fd00:	46bd      	mov	sp, r7
 801fd02:	b01c      	add	sp, #112	@ 0x70
 801fd04:	bd80      	pop	{r7, pc}
 801fd06:	46c0      	nop			@ (mov r8, r8)
 801fd08:	ffff8fbf 	.word	0xffff8fbf
 801fd0c:	ffff8080 	.word	0xffff8080
 801fd10:	ffffbf8f 	.word	0xffffbf8f

0801fd14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fd14:	b580      	push	{r7, lr}
 801fd16:	b08c      	sub	sp, #48	@ 0x30
 801fd18:	af00      	add	r7, sp, #0
 801fd1a:	6078      	str	r0, [r7, #4]
 801fd1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fd1e:	683b      	ldr	r3, [r7, #0]
 801fd20:	7b1b      	ldrb	r3, [r3, #12]
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d000      	beq.n	801fd28 <USB_DeactivateEndpoint+0x14>
 801fd26:	e07e      	b.n	801fe26 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fd28:	683b      	ldr	r3, [r7, #0]
 801fd2a:	785b      	ldrb	r3, [r3, #1]
 801fd2c:	2b00      	cmp	r3, #0
 801fd2e:	d03c      	beq.n	801fdaa <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fd30:	687a      	ldr	r2, [r7, #4]
 801fd32:	683b      	ldr	r3, [r7, #0]
 801fd34:	781b      	ldrb	r3, [r3, #0]
 801fd36:	009b      	lsls	r3, r3, #2
 801fd38:	18d2      	adds	r2, r2, r3
 801fd3a:	210c      	movs	r1, #12
 801fd3c:	187b      	adds	r3, r7, r1
 801fd3e:	8812      	ldrh	r2, [r2, #0]
 801fd40:	801a      	strh	r2, [r3, #0]
 801fd42:	187b      	adds	r3, r7, r1
 801fd44:	881b      	ldrh	r3, [r3, #0]
 801fd46:	2240      	movs	r2, #64	@ 0x40
 801fd48:	4013      	ands	r3, r2
 801fd4a:	d016      	beq.n	801fd7a <USB_DeactivateEndpoint+0x66>
 801fd4c:	687a      	ldr	r2, [r7, #4]
 801fd4e:	683b      	ldr	r3, [r7, #0]
 801fd50:	781b      	ldrb	r3, [r3, #0]
 801fd52:	009b      	lsls	r3, r3, #2
 801fd54:	18d3      	adds	r3, r2, r3
 801fd56:	881b      	ldrh	r3, [r3, #0]
 801fd58:	b29a      	uxth	r2, r3
 801fd5a:	200a      	movs	r0, #10
 801fd5c:	183b      	adds	r3, r7, r0
 801fd5e:	49c7      	ldr	r1, [pc, #796]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801fd60:	400a      	ands	r2, r1
 801fd62:	801a      	strh	r2, [r3, #0]
 801fd64:	687a      	ldr	r2, [r7, #4]
 801fd66:	683b      	ldr	r3, [r7, #0]
 801fd68:	781b      	ldrb	r3, [r3, #0]
 801fd6a:	009b      	lsls	r3, r3, #2
 801fd6c:	18d3      	adds	r3, r2, r3
 801fd6e:	183a      	adds	r2, r7, r0
 801fd70:	8812      	ldrh	r2, [r2, #0]
 801fd72:	49c3      	ldr	r1, [pc, #780]	@ (8020080 <USB_DeactivateEndpoint+0x36c>)
 801fd74:	430a      	orrs	r2, r1
 801fd76:	b292      	uxth	r2, r2
 801fd78:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fd7a:	687a      	ldr	r2, [r7, #4]
 801fd7c:	683b      	ldr	r3, [r7, #0]
 801fd7e:	781b      	ldrb	r3, [r3, #0]
 801fd80:	009b      	lsls	r3, r3, #2
 801fd82:	18d3      	adds	r3, r2, r3
 801fd84:	881b      	ldrh	r3, [r3, #0]
 801fd86:	b29a      	uxth	r2, r3
 801fd88:	2008      	movs	r0, #8
 801fd8a:	183b      	adds	r3, r7, r0
 801fd8c:	49bd      	ldr	r1, [pc, #756]	@ (8020084 <USB_DeactivateEndpoint+0x370>)
 801fd8e:	400a      	ands	r2, r1
 801fd90:	801a      	strh	r2, [r3, #0]
 801fd92:	687a      	ldr	r2, [r7, #4]
 801fd94:	683b      	ldr	r3, [r7, #0]
 801fd96:	781b      	ldrb	r3, [r3, #0]
 801fd98:	009b      	lsls	r3, r3, #2
 801fd9a:	18d3      	adds	r3, r2, r3
 801fd9c:	183a      	adds	r2, r7, r0
 801fd9e:	8812      	ldrh	r2, [r2, #0]
 801fda0:	49b9      	ldr	r1, [pc, #740]	@ (8020088 <USB_DeactivateEndpoint+0x374>)
 801fda2:	430a      	orrs	r2, r1
 801fda4:	b292      	uxth	r2, r2
 801fda6:	801a      	strh	r2, [r3, #0]
 801fda8:	e163      	b.n	8020072 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fdaa:	687a      	ldr	r2, [r7, #4]
 801fdac:	683b      	ldr	r3, [r7, #0]
 801fdae:	781b      	ldrb	r3, [r3, #0]
 801fdb0:	009b      	lsls	r3, r3, #2
 801fdb2:	18d2      	adds	r2, r2, r3
 801fdb4:	2112      	movs	r1, #18
 801fdb6:	187b      	adds	r3, r7, r1
 801fdb8:	8812      	ldrh	r2, [r2, #0]
 801fdba:	801a      	strh	r2, [r3, #0]
 801fdbc:	187b      	adds	r3, r7, r1
 801fdbe:	881a      	ldrh	r2, [r3, #0]
 801fdc0:	2380      	movs	r3, #128	@ 0x80
 801fdc2:	01db      	lsls	r3, r3, #7
 801fdc4:	4013      	ands	r3, r2
 801fdc6:	d016      	beq.n	801fdf6 <USB_DeactivateEndpoint+0xe2>
 801fdc8:	687a      	ldr	r2, [r7, #4]
 801fdca:	683b      	ldr	r3, [r7, #0]
 801fdcc:	781b      	ldrb	r3, [r3, #0]
 801fdce:	009b      	lsls	r3, r3, #2
 801fdd0:	18d3      	adds	r3, r2, r3
 801fdd2:	881b      	ldrh	r3, [r3, #0]
 801fdd4:	b29a      	uxth	r2, r3
 801fdd6:	2010      	movs	r0, #16
 801fdd8:	183b      	adds	r3, r7, r0
 801fdda:	49a8      	ldr	r1, [pc, #672]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801fddc:	400a      	ands	r2, r1
 801fdde:	801a      	strh	r2, [r3, #0]
 801fde0:	687a      	ldr	r2, [r7, #4]
 801fde2:	683b      	ldr	r3, [r7, #0]
 801fde4:	781b      	ldrb	r3, [r3, #0]
 801fde6:	009b      	lsls	r3, r3, #2
 801fde8:	18d3      	adds	r3, r2, r3
 801fdea:	183a      	adds	r2, r7, r0
 801fdec:	8812      	ldrh	r2, [r2, #0]
 801fdee:	49a7      	ldr	r1, [pc, #668]	@ (802008c <USB_DeactivateEndpoint+0x378>)
 801fdf0:	430a      	orrs	r2, r1
 801fdf2:	b292      	uxth	r2, r2
 801fdf4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fdf6:	687a      	ldr	r2, [r7, #4]
 801fdf8:	683b      	ldr	r3, [r7, #0]
 801fdfa:	781b      	ldrb	r3, [r3, #0]
 801fdfc:	009b      	lsls	r3, r3, #2
 801fdfe:	18d3      	adds	r3, r2, r3
 801fe00:	881b      	ldrh	r3, [r3, #0]
 801fe02:	b29a      	uxth	r2, r3
 801fe04:	200e      	movs	r0, #14
 801fe06:	183b      	adds	r3, r7, r0
 801fe08:	49a1      	ldr	r1, [pc, #644]	@ (8020090 <USB_DeactivateEndpoint+0x37c>)
 801fe0a:	400a      	ands	r2, r1
 801fe0c:	801a      	strh	r2, [r3, #0]
 801fe0e:	687a      	ldr	r2, [r7, #4]
 801fe10:	683b      	ldr	r3, [r7, #0]
 801fe12:	781b      	ldrb	r3, [r3, #0]
 801fe14:	009b      	lsls	r3, r3, #2
 801fe16:	18d3      	adds	r3, r2, r3
 801fe18:	183a      	adds	r2, r7, r0
 801fe1a:	8812      	ldrh	r2, [r2, #0]
 801fe1c:	499a      	ldr	r1, [pc, #616]	@ (8020088 <USB_DeactivateEndpoint+0x374>)
 801fe1e:	430a      	orrs	r2, r1
 801fe20:	b292      	uxth	r2, r2
 801fe22:	801a      	strh	r2, [r3, #0]
 801fe24:	e125      	b.n	8020072 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fe26:	683b      	ldr	r3, [r7, #0]
 801fe28:	785b      	ldrb	r3, [r3, #1]
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d000      	beq.n	801fe30 <USB_DeactivateEndpoint+0x11c>
 801fe2e:	e090      	b.n	801ff52 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fe30:	687a      	ldr	r2, [r7, #4]
 801fe32:	683b      	ldr	r3, [r7, #0]
 801fe34:	781b      	ldrb	r3, [r3, #0]
 801fe36:	009b      	lsls	r3, r3, #2
 801fe38:	18d2      	adds	r2, r2, r3
 801fe3a:	2120      	movs	r1, #32
 801fe3c:	187b      	adds	r3, r7, r1
 801fe3e:	8812      	ldrh	r2, [r2, #0]
 801fe40:	801a      	strh	r2, [r3, #0]
 801fe42:	187b      	adds	r3, r7, r1
 801fe44:	881a      	ldrh	r2, [r3, #0]
 801fe46:	2380      	movs	r3, #128	@ 0x80
 801fe48:	01db      	lsls	r3, r3, #7
 801fe4a:	4013      	ands	r3, r2
 801fe4c:	d016      	beq.n	801fe7c <USB_DeactivateEndpoint+0x168>
 801fe4e:	687a      	ldr	r2, [r7, #4]
 801fe50:	683b      	ldr	r3, [r7, #0]
 801fe52:	781b      	ldrb	r3, [r3, #0]
 801fe54:	009b      	lsls	r3, r3, #2
 801fe56:	18d3      	adds	r3, r2, r3
 801fe58:	881b      	ldrh	r3, [r3, #0]
 801fe5a:	b29a      	uxth	r2, r3
 801fe5c:	201e      	movs	r0, #30
 801fe5e:	183b      	adds	r3, r7, r0
 801fe60:	4986      	ldr	r1, [pc, #536]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801fe62:	400a      	ands	r2, r1
 801fe64:	801a      	strh	r2, [r3, #0]
 801fe66:	687a      	ldr	r2, [r7, #4]
 801fe68:	683b      	ldr	r3, [r7, #0]
 801fe6a:	781b      	ldrb	r3, [r3, #0]
 801fe6c:	009b      	lsls	r3, r3, #2
 801fe6e:	18d3      	adds	r3, r2, r3
 801fe70:	183a      	adds	r2, r7, r0
 801fe72:	8812      	ldrh	r2, [r2, #0]
 801fe74:	4985      	ldr	r1, [pc, #532]	@ (802008c <USB_DeactivateEndpoint+0x378>)
 801fe76:	430a      	orrs	r2, r1
 801fe78:	b292      	uxth	r2, r2
 801fe7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fe7c:	687a      	ldr	r2, [r7, #4]
 801fe7e:	683b      	ldr	r3, [r7, #0]
 801fe80:	781b      	ldrb	r3, [r3, #0]
 801fe82:	009b      	lsls	r3, r3, #2
 801fe84:	18d2      	adds	r2, r2, r3
 801fe86:	211c      	movs	r1, #28
 801fe88:	187b      	adds	r3, r7, r1
 801fe8a:	8812      	ldrh	r2, [r2, #0]
 801fe8c:	801a      	strh	r2, [r3, #0]
 801fe8e:	187b      	adds	r3, r7, r1
 801fe90:	881b      	ldrh	r3, [r3, #0]
 801fe92:	2240      	movs	r2, #64	@ 0x40
 801fe94:	4013      	ands	r3, r2
 801fe96:	d016      	beq.n	801fec6 <USB_DeactivateEndpoint+0x1b2>
 801fe98:	687a      	ldr	r2, [r7, #4]
 801fe9a:	683b      	ldr	r3, [r7, #0]
 801fe9c:	781b      	ldrb	r3, [r3, #0]
 801fe9e:	009b      	lsls	r3, r3, #2
 801fea0:	18d3      	adds	r3, r2, r3
 801fea2:	881b      	ldrh	r3, [r3, #0]
 801fea4:	b29a      	uxth	r2, r3
 801fea6:	201a      	movs	r0, #26
 801fea8:	183b      	adds	r3, r7, r0
 801feaa:	4974      	ldr	r1, [pc, #464]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801feac:	400a      	ands	r2, r1
 801feae:	801a      	strh	r2, [r3, #0]
 801feb0:	687a      	ldr	r2, [r7, #4]
 801feb2:	683b      	ldr	r3, [r7, #0]
 801feb4:	781b      	ldrb	r3, [r3, #0]
 801feb6:	009b      	lsls	r3, r3, #2
 801feb8:	18d3      	adds	r3, r2, r3
 801feba:	183a      	adds	r2, r7, r0
 801febc:	8812      	ldrh	r2, [r2, #0]
 801febe:	4970      	ldr	r1, [pc, #448]	@ (8020080 <USB_DeactivateEndpoint+0x36c>)
 801fec0:	430a      	orrs	r2, r1
 801fec2:	b292      	uxth	r2, r2
 801fec4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801fec6:	687a      	ldr	r2, [r7, #4]
 801fec8:	683b      	ldr	r3, [r7, #0]
 801feca:	781b      	ldrb	r3, [r3, #0]
 801fecc:	009b      	lsls	r3, r3, #2
 801fece:	18d3      	adds	r3, r2, r3
 801fed0:	881b      	ldrh	r3, [r3, #0]
 801fed2:	b29a      	uxth	r2, r3
 801fed4:	2018      	movs	r0, #24
 801fed6:	183b      	adds	r3, r7, r0
 801fed8:	4968      	ldr	r1, [pc, #416]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801feda:	400a      	ands	r2, r1
 801fedc:	801a      	strh	r2, [r3, #0]
 801fede:	687a      	ldr	r2, [r7, #4]
 801fee0:	683b      	ldr	r3, [r7, #0]
 801fee2:	781b      	ldrb	r3, [r3, #0]
 801fee4:	009b      	lsls	r3, r3, #2
 801fee6:	18d3      	adds	r3, r2, r3
 801fee8:	183a      	adds	r2, r7, r0
 801feea:	8812      	ldrh	r2, [r2, #0]
 801feec:	4964      	ldr	r1, [pc, #400]	@ (8020080 <USB_DeactivateEndpoint+0x36c>)
 801feee:	430a      	orrs	r2, r1
 801fef0:	b292      	uxth	r2, r2
 801fef2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fef4:	687a      	ldr	r2, [r7, #4]
 801fef6:	683b      	ldr	r3, [r7, #0]
 801fef8:	781b      	ldrb	r3, [r3, #0]
 801fefa:	009b      	lsls	r3, r3, #2
 801fefc:	18d3      	adds	r3, r2, r3
 801fefe:	881b      	ldrh	r3, [r3, #0]
 801ff00:	b29a      	uxth	r2, r3
 801ff02:	2016      	movs	r0, #22
 801ff04:	183b      	adds	r3, r7, r0
 801ff06:	4962      	ldr	r1, [pc, #392]	@ (8020090 <USB_DeactivateEndpoint+0x37c>)
 801ff08:	400a      	ands	r2, r1
 801ff0a:	801a      	strh	r2, [r3, #0]
 801ff0c:	687a      	ldr	r2, [r7, #4]
 801ff0e:	683b      	ldr	r3, [r7, #0]
 801ff10:	781b      	ldrb	r3, [r3, #0]
 801ff12:	009b      	lsls	r3, r3, #2
 801ff14:	18d3      	adds	r3, r2, r3
 801ff16:	183a      	adds	r2, r7, r0
 801ff18:	8812      	ldrh	r2, [r2, #0]
 801ff1a:	495b      	ldr	r1, [pc, #364]	@ (8020088 <USB_DeactivateEndpoint+0x374>)
 801ff1c:	430a      	orrs	r2, r1
 801ff1e:	b292      	uxth	r2, r2
 801ff20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ff22:	687a      	ldr	r2, [r7, #4]
 801ff24:	683b      	ldr	r3, [r7, #0]
 801ff26:	781b      	ldrb	r3, [r3, #0]
 801ff28:	009b      	lsls	r3, r3, #2
 801ff2a:	18d3      	adds	r3, r2, r3
 801ff2c:	881b      	ldrh	r3, [r3, #0]
 801ff2e:	b29a      	uxth	r2, r3
 801ff30:	2014      	movs	r0, #20
 801ff32:	183b      	adds	r3, r7, r0
 801ff34:	4953      	ldr	r1, [pc, #332]	@ (8020084 <USB_DeactivateEndpoint+0x370>)
 801ff36:	400a      	ands	r2, r1
 801ff38:	801a      	strh	r2, [r3, #0]
 801ff3a:	687a      	ldr	r2, [r7, #4]
 801ff3c:	683b      	ldr	r3, [r7, #0]
 801ff3e:	781b      	ldrb	r3, [r3, #0]
 801ff40:	009b      	lsls	r3, r3, #2
 801ff42:	18d3      	adds	r3, r2, r3
 801ff44:	183a      	adds	r2, r7, r0
 801ff46:	8812      	ldrh	r2, [r2, #0]
 801ff48:	494f      	ldr	r1, [pc, #316]	@ (8020088 <USB_DeactivateEndpoint+0x374>)
 801ff4a:	430a      	orrs	r2, r1
 801ff4c:	b292      	uxth	r2, r2
 801ff4e:	801a      	strh	r2, [r3, #0]
 801ff50:	e08f      	b.n	8020072 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ff52:	687a      	ldr	r2, [r7, #4]
 801ff54:	683b      	ldr	r3, [r7, #0]
 801ff56:	781b      	ldrb	r3, [r3, #0]
 801ff58:	009b      	lsls	r3, r3, #2
 801ff5a:	18d2      	adds	r2, r2, r3
 801ff5c:	212e      	movs	r1, #46	@ 0x2e
 801ff5e:	187b      	adds	r3, r7, r1
 801ff60:	8812      	ldrh	r2, [r2, #0]
 801ff62:	801a      	strh	r2, [r3, #0]
 801ff64:	187b      	adds	r3, r7, r1
 801ff66:	881a      	ldrh	r2, [r3, #0]
 801ff68:	2380      	movs	r3, #128	@ 0x80
 801ff6a:	01db      	lsls	r3, r3, #7
 801ff6c:	4013      	ands	r3, r2
 801ff6e:	d016      	beq.n	801ff9e <USB_DeactivateEndpoint+0x28a>
 801ff70:	687a      	ldr	r2, [r7, #4]
 801ff72:	683b      	ldr	r3, [r7, #0]
 801ff74:	781b      	ldrb	r3, [r3, #0]
 801ff76:	009b      	lsls	r3, r3, #2
 801ff78:	18d3      	adds	r3, r2, r3
 801ff7a:	881b      	ldrh	r3, [r3, #0]
 801ff7c:	b29a      	uxth	r2, r3
 801ff7e:	202c      	movs	r0, #44	@ 0x2c
 801ff80:	183b      	adds	r3, r7, r0
 801ff82:	493e      	ldr	r1, [pc, #248]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801ff84:	400a      	ands	r2, r1
 801ff86:	801a      	strh	r2, [r3, #0]
 801ff88:	687a      	ldr	r2, [r7, #4]
 801ff8a:	683b      	ldr	r3, [r7, #0]
 801ff8c:	781b      	ldrb	r3, [r3, #0]
 801ff8e:	009b      	lsls	r3, r3, #2
 801ff90:	18d3      	adds	r3, r2, r3
 801ff92:	183a      	adds	r2, r7, r0
 801ff94:	8812      	ldrh	r2, [r2, #0]
 801ff96:	493d      	ldr	r1, [pc, #244]	@ (802008c <USB_DeactivateEndpoint+0x378>)
 801ff98:	430a      	orrs	r2, r1
 801ff9a:	b292      	uxth	r2, r2
 801ff9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ff9e:	687a      	ldr	r2, [r7, #4]
 801ffa0:	683b      	ldr	r3, [r7, #0]
 801ffa2:	781b      	ldrb	r3, [r3, #0]
 801ffa4:	009b      	lsls	r3, r3, #2
 801ffa6:	18d2      	adds	r2, r2, r3
 801ffa8:	212a      	movs	r1, #42	@ 0x2a
 801ffaa:	187b      	adds	r3, r7, r1
 801ffac:	8812      	ldrh	r2, [r2, #0]
 801ffae:	801a      	strh	r2, [r3, #0]
 801ffb0:	187b      	adds	r3, r7, r1
 801ffb2:	881b      	ldrh	r3, [r3, #0]
 801ffb4:	2240      	movs	r2, #64	@ 0x40
 801ffb6:	4013      	ands	r3, r2
 801ffb8:	d016      	beq.n	801ffe8 <USB_DeactivateEndpoint+0x2d4>
 801ffba:	687a      	ldr	r2, [r7, #4]
 801ffbc:	683b      	ldr	r3, [r7, #0]
 801ffbe:	781b      	ldrb	r3, [r3, #0]
 801ffc0:	009b      	lsls	r3, r3, #2
 801ffc2:	18d3      	adds	r3, r2, r3
 801ffc4:	881b      	ldrh	r3, [r3, #0]
 801ffc6:	b29a      	uxth	r2, r3
 801ffc8:	2028      	movs	r0, #40	@ 0x28
 801ffca:	183b      	adds	r3, r7, r0
 801ffcc:	492b      	ldr	r1, [pc, #172]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801ffce:	400a      	ands	r2, r1
 801ffd0:	801a      	strh	r2, [r3, #0]
 801ffd2:	687a      	ldr	r2, [r7, #4]
 801ffd4:	683b      	ldr	r3, [r7, #0]
 801ffd6:	781b      	ldrb	r3, [r3, #0]
 801ffd8:	009b      	lsls	r3, r3, #2
 801ffda:	18d3      	adds	r3, r2, r3
 801ffdc:	183a      	adds	r2, r7, r0
 801ffde:	8812      	ldrh	r2, [r2, #0]
 801ffe0:	4927      	ldr	r1, [pc, #156]	@ (8020080 <USB_DeactivateEndpoint+0x36c>)
 801ffe2:	430a      	orrs	r2, r1
 801ffe4:	b292      	uxth	r2, r2
 801ffe6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801ffe8:	687a      	ldr	r2, [r7, #4]
 801ffea:	683b      	ldr	r3, [r7, #0]
 801ffec:	781b      	ldrb	r3, [r3, #0]
 801ffee:	009b      	lsls	r3, r3, #2
 801fff0:	18d3      	adds	r3, r2, r3
 801fff2:	881b      	ldrh	r3, [r3, #0]
 801fff4:	b29a      	uxth	r2, r3
 801fff6:	2026      	movs	r0, #38	@ 0x26
 801fff8:	183b      	adds	r3, r7, r0
 801fffa:	4920      	ldr	r1, [pc, #128]	@ (802007c <USB_DeactivateEndpoint+0x368>)
 801fffc:	400a      	ands	r2, r1
 801fffe:	801a      	strh	r2, [r3, #0]
 8020000:	687a      	ldr	r2, [r7, #4]
 8020002:	683b      	ldr	r3, [r7, #0]
 8020004:	781b      	ldrb	r3, [r3, #0]
 8020006:	009b      	lsls	r3, r3, #2
 8020008:	18d3      	adds	r3, r2, r3
 802000a:	183a      	adds	r2, r7, r0
 802000c:	8812      	ldrh	r2, [r2, #0]
 802000e:	491f      	ldr	r1, [pc, #124]	@ (802008c <USB_DeactivateEndpoint+0x378>)
 8020010:	430a      	orrs	r2, r1
 8020012:	b292      	uxth	r2, r2
 8020014:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8020016:	687a      	ldr	r2, [r7, #4]
 8020018:	683b      	ldr	r3, [r7, #0]
 802001a:	781b      	ldrb	r3, [r3, #0]
 802001c:	009b      	lsls	r3, r3, #2
 802001e:	18d3      	adds	r3, r2, r3
 8020020:	881b      	ldrh	r3, [r3, #0]
 8020022:	b29a      	uxth	r2, r3
 8020024:	2024      	movs	r0, #36	@ 0x24
 8020026:	183b      	adds	r3, r7, r0
 8020028:	4916      	ldr	r1, [pc, #88]	@ (8020084 <USB_DeactivateEndpoint+0x370>)
 802002a:	400a      	ands	r2, r1
 802002c:	801a      	strh	r2, [r3, #0]
 802002e:	687a      	ldr	r2, [r7, #4]
 8020030:	683b      	ldr	r3, [r7, #0]
 8020032:	781b      	ldrb	r3, [r3, #0]
 8020034:	009b      	lsls	r3, r3, #2
 8020036:	18d3      	adds	r3, r2, r3
 8020038:	183a      	adds	r2, r7, r0
 802003a:	8812      	ldrh	r2, [r2, #0]
 802003c:	4912      	ldr	r1, [pc, #72]	@ (8020088 <USB_DeactivateEndpoint+0x374>)
 802003e:	430a      	orrs	r2, r1
 8020040:	b292      	uxth	r2, r2
 8020042:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8020044:	687a      	ldr	r2, [r7, #4]
 8020046:	683b      	ldr	r3, [r7, #0]
 8020048:	781b      	ldrb	r3, [r3, #0]
 802004a:	009b      	lsls	r3, r3, #2
 802004c:	18d3      	adds	r3, r2, r3
 802004e:	881b      	ldrh	r3, [r3, #0]
 8020050:	b29a      	uxth	r2, r3
 8020052:	2022      	movs	r0, #34	@ 0x22
 8020054:	183b      	adds	r3, r7, r0
 8020056:	490e      	ldr	r1, [pc, #56]	@ (8020090 <USB_DeactivateEndpoint+0x37c>)
 8020058:	400a      	ands	r2, r1
 802005a:	801a      	strh	r2, [r3, #0]
 802005c:	687a      	ldr	r2, [r7, #4]
 802005e:	683b      	ldr	r3, [r7, #0]
 8020060:	781b      	ldrb	r3, [r3, #0]
 8020062:	009b      	lsls	r3, r3, #2
 8020064:	18d3      	adds	r3, r2, r3
 8020066:	183a      	adds	r2, r7, r0
 8020068:	8812      	ldrh	r2, [r2, #0]
 802006a:	4907      	ldr	r1, [pc, #28]	@ (8020088 <USB_DeactivateEndpoint+0x374>)
 802006c:	430a      	orrs	r2, r1
 802006e:	b292      	uxth	r2, r2
 8020070:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8020072:	2300      	movs	r3, #0
}
 8020074:	0018      	movs	r0, r3
 8020076:	46bd      	mov	sp, r7
 8020078:	b00c      	add	sp, #48	@ 0x30
 802007a:	bd80      	pop	{r7, pc}
 802007c:	ffff8f8f 	.word	0xffff8f8f
 8020080:	ffff80c0 	.word	0xffff80c0
 8020084:	ffff8fbf 	.word	0xffff8fbf
 8020088:	ffff8080 	.word	0xffff8080
 802008c:	ffffc080 	.word	0xffffc080
 8020090:	ffffbf8f 	.word	0xffffbf8f

08020094 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020094:	b590      	push	{r4, r7, lr}
 8020096:	b0c3      	sub	sp, #268	@ 0x10c
 8020098:	af00      	add	r7, sp, #0
 802009a:	6078      	str	r0, [r7, #4]
 802009c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 802009e:	683b      	ldr	r3, [r7, #0]
 80200a0:	785b      	ldrb	r3, [r3, #1]
 80200a2:	2b01      	cmp	r3, #1
 80200a4:	d001      	beq.n	80200aa <USB_EPStartXfer+0x16>
 80200a6:	f000 fd2d 	bl	8020b04 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80200aa:	683b      	ldr	r3, [r7, #0]
 80200ac:	699a      	ldr	r2, [r3, #24]
 80200ae:	683b      	ldr	r3, [r7, #0]
 80200b0:	691b      	ldr	r3, [r3, #16]
 80200b2:	429a      	cmp	r2, r3
 80200b4:	d905      	bls.n	80200c2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80200b6:	683b      	ldr	r3, [r7, #0]
 80200b8:	691b      	ldr	r3, [r3, #16]
 80200ba:	1d7a      	adds	r2, r7, #5
 80200bc:	32ff      	adds	r2, #255	@ 0xff
 80200be:	6013      	str	r3, [r2, #0]
 80200c0:	e004      	b.n	80200cc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80200c2:	683b      	ldr	r3, [r7, #0]
 80200c4:	699b      	ldr	r3, [r3, #24]
 80200c6:	1d7a      	adds	r2, r7, #5
 80200c8:	32ff      	adds	r2, #255	@ 0xff
 80200ca:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80200cc:	683b      	ldr	r3, [r7, #0]
 80200ce:	7b1b      	ldrb	r3, [r3, #12]
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	d125      	bne.n	8020120 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80200d4:	683b      	ldr	r3, [r7, #0]
 80200d6:	6959      	ldr	r1, [r3, #20]
 80200d8:	683b      	ldr	r3, [r7, #0]
 80200da:	88da      	ldrh	r2, [r3, #6]
 80200dc:	1d7b      	adds	r3, r7, #5
 80200de:	33ff      	adds	r3, #255	@ 0xff
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	b29b      	uxth	r3, r3
 80200e4:	6878      	ldr	r0, [r7, #4]
 80200e6:	f001 fa47 	bl	8021578 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	613b      	str	r3, [r7, #16]
 80200ee:	687b      	ldr	r3, [r7, #4]
 80200f0:	2250      	movs	r2, #80	@ 0x50
 80200f2:	5a9b      	ldrh	r3, [r3, r2]
 80200f4:	b29b      	uxth	r3, r3
 80200f6:	001a      	movs	r2, r3
 80200f8:	693b      	ldr	r3, [r7, #16]
 80200fa:	189b      	adds	r3, r3, r2
 80200fc:	613b      	str	r3, [r7, #16]
 80200fe:	683b      	ldr	r3, [r7, #0]
 8020100:	781b      	ldrb	r3, [r3, #0]
 8020102:	00da      	lsls	r2, r3, #3
 8020104:	693b      	ldr	r3, [r7, #16]
 8020106:	18d3      	adds	r3, r2, r3
 8020108:	4ad7      	ldr	r2, [pc, #860]	@ (8020468 <USB_EPStartXfer+0x3d4>)
 802010a:	4694      	mov	ip, r2
 802010c:	4463      	add	r3, ip
 802010e:	60fb      	str	r3, [r7, #12]
 8020110:	1d7b      	adds	r3, r7, #5
 8020112:	33ff      	adds	r3, #255	@ 0xff
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	b29a      	uxth	r2, r3
 8020118:	68fb      	ldr	r3, [r7, #12]
 802011a:	801a      	strh	r2, [r3, #0]
 802011c:	f000 fccd 	bl	8020aba <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8020120:	683b      	ldr	r3, [r7, #0]
 8020122:	78db      	ldrb	r3, [r3, #3]
 8020124:	2b02      	cmp	r3, #2
 8020126:	d000      	beq.n	802012a <USB_EPStartXfer+0x96>
 8020128:	e362      	b.n	80207f0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 802012a:	683b      	ldr	r3, [r7, #0]
 802012c:	6a1a      	ldr	r2, [r3, #32]
 802012e:	683b      	ldr	r3, [r7, #0]
 8020130:	691b      	ldr	r3, [r3, #16]
 8020132:	429a      	cmp	r2, r3
 8020134:	d800      	bhi.n	8020138 <USB_EPStartXfer+0xa4>
 8020136:	e309      	b.n	802074c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8020138:	687a      	ldr	r2, [r7, #4]
 802013a:	683b      	ldr	r3, [r7, #0]
 802013c:	781b      	ldrb	r3, [r3, #0]
 802013e:	009b      	lsls	r3, r3, #2
 8020140:	18d3      	adds	r3, r2, r3
 8020142:	881b      	ldrh	r3, [r3, #0]
 8020144:	b29a      	uxth	r2, r3
 8020146:	2056      	movs	r0, #86	@ 0x56
 8020148:	183b      	adds	r3, r7, r0
 802014a:	49c8      	ldr	r1, [pc, #800]	@ (802046c <USB_EPStartXfer+0x3d8>)
 802014c:	400a      	ands	r2, r1
 802014e:	801a      	strh	r2, [r3, #0]
 8020150:	687a      	ldr	r2, [r7, #4]
 8020152:	683b      	ldr	r3, [r7, #0]
 8020154:	781b      	ldrb	r3, [r3, #0]
 8020156:	009b      	lsls	r3, r3, #2
 8020158:	18d3      	adds	r3, r2, r3
 802015a:	183a      	adds	r2, r7, r0
 802015c:	8812      	ldrh	r2, [r2, #0]
 802015e:	49c4      	ldr	r1, [pc, #784]	@ (8020470 <USB_EPStartXfer+0x3dc>)
 8020160:	430a      	orrs	r2, r1
 8020162:	b292      	uxth	r2, r2
 8020164:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8020166:	683b      	ldr	r3, [r7, #0]
 8020168:	6a1a      	ldr	r2, [r3, #32]
 802016a:	1d7b      	adds	r3, r7, #5
 802016c:	33ff      	adds	r3, #255	@ 0xff
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	1ad2      	subs	r2, r2, r3
 8020172:	683b      	ldr	r3, [r7, #0]
 8020174:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8020176:	687a      	ldr	r2, [r7, #4]
 8020178:	683b      	ldr	r3, [r7, #0]
 802017a:	781b      	ldrb	r3, [r3, #0]
 802017c:	009b      	lsls	r3, r3, #2
 802017e:	18d3      	adds	r3, r2, r3
 8020180:	881b      	ldrh	r3, [r3, #0]
 8020182:	b29b      	uxth	r3, r3
 8020184:	001a      	movs	r2, r3
 8020186:	2340      	movs	r3, #64	@ 0x40
 8020188:	4013      	ands	r3, r2
 802018a:	d100      	bne.n	802018e <USB_EPStartXfer+0xfa>
 802018c:	e176      	b.n	802047c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	633b      	str	r3, [r7, #48]	@ 0x30
 8020192:	683b      	ldr	r3, [r7, #0]
 8020194:	785b      	ldrb	r3, [r3, #1]
 8020196:	2b00      	cmp	r3, #0
 8020198:	d000      	beq.n	802019c <USB_EPStartXfer+0x108>
 802019a:	e074      	b.n	8020286 <USB_EPStartXfer+0x1f2>
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	2250      	movs	r2, #80	@ 0x50
 80201a4:	5a9b      	ldrh	r3, [r3, r2]
 80201a6:	b29b      	uxth	r3, r3
 80201a8:	001a      	movs	r2, r3
 80201aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201ac:	189b      	adds	r3, r3, r2
 80201ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80201b0:	683b      	ldr	r3, [r7, #0]
 80201b2:	781b      	ldrb	r3, [r3, #0]
 80201b4:	00da      	lsls	r2, r3, #3
 80201b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201b8:	18d3      	adds	r3, r2, r3
 80201ba:	4aae      	ldr	r2, [pc, #696]	@ (8020474 <USB_EPStartXfer+0x3e0>)
 80201bc:	4694      	mov	ip, r2
 80201be:	4463      	add	r3, ip
 80201c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80201c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201c4:	881b      	ldrh	r3, [r3, #0]
 80201c6:	b29b      	uxth	r3, r3
 80201c8:	059b      	lsls	r3, r3, #22
 80201ca:	0d9b      	lsrs	r3, r3, #22
 80201cc:	b29a      	uxth	r2, r3
 80201ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201d0:	801a      	strh	r2, [r3, #0]
 80201d2:	1d7b      	adds	r3, r7, #5
 80201d4:	33ff      	adds	r3, #255	@ 0xff
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80201da:	d924      	bls.n	8020226 <USB_EPStartXfer+0x192>
 80201dc:	1d7b      	adds	r3, r7, #5
 80201de:	33ff      	adds	r3, #255	@ 0xff
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	095b      	lsrs	r3, r3, #5
 80201e4:	1c7a      	adds	r2, r7, #1
 80201e6:	32ff      	adds	r2, #255	@ 0xff
 80201e8:	6013      	str	r3, [r2, #0]
 80201ea:	1d7b      	adds	r3, r7, #5
 80201ec:	33ff      	adds	r3, #255	@ 0xff
 80201ee:	681b      	ldr	r3, [r3, #0]
 80201f0:	221f      	movs	r2, #31
 80201f2:	4013      	ands	r3, r2
 80201f4:	d106      	bne.n	8020204 <USB_EPStartXfer+0x170>
 80201f6:	1c7b      	adds	r3, r7, #1
 80201f8:	33ff      	adds	r3, #255	@ 0xff
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	3b01      	subs	r3, #1
 80201fe:	1c7a      	adds	r2, r7, #1
 8020200:	32ff      	adds	r2, #255	@ 0xff
 8020202:	6013      	str	r3, [r2, #0]
 8020204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020206:	881b      	ldrh	r3, [r3, #0]
 8020208:	b29a      	uxth	r2, r3
 802020a:	1c7b      	adds	r3, r7, #1
 802020c:	33ff      	adds	r3, #255	@ 0xff
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	b29b      	uxth	r3, r3
 8020212:	029b      	lsls	r3, r3, #10
 8020214:	b29b      	uxth	r3, r3
 8020216:	4313      	orrs	r3, r2
 8020218:	b29b      	uxth	r3, r3
 802021a:	4a97      	ldr	r2, [pc, #604]	@ (8020478 <USB_EPStartXfer+0x3e4>)
 802021c:	4313      	orrs	r3, r2
 802021e:	b29a      	uxth	r2, r3
 8020220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020222:	801a      	strh	r2, [r3, #0]
 8020224:	e04a      	b.n	80202bc <USB_EPStartXfer+0x228>
 8020226:	1d7b      	adds	r3, r7, #5
 8020228:	33ff      	adds	r3, #255	@ 0xff
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	2b00      	cmp	r3, #0
 802022e:	d108      	bne.n	8020242 <USB_EPStartXfer+0x1ae>
 8020230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020232:	881b      	ldrh	r3, [r3, #0]
 8020234:	b29b      	uxth	r3, r3
 8020236:	4a90      	ldr	r2, [pc, #576]	@ (8020478 <USB_EPStartXfer+0x3e4>)
 8020238:	4313      	orrs	r3, r2
 802023a:	b29a      	uxth	r2, r3
 802023c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802023e:	801a      	strh	r2, [r3, #0]
 8020240:	e03c      	b.n	80202bc <USB_EPStartXfer+0x228>
 8020242:	1d7b      	adds	r3, r7, #5
 8020244:	33ff      	adds	r3, #255	@ 0xff
 8020246:	681b      	ldr	r3, [r3, #0]
 8020248:	085b      	lsrs	r3, r3, #1
 802024a:	1c7a      	adds	r2, r7, #1
 802024c:	32ff      	adds	r2, #255	@ 0xff
 802024e:	6013      	str	r3, [r2, #0]
 8020250:	1d7b      	adds	r3, r7, #5
 8020252:	33ff      	adds	r3, #255	@ 0xff
 8020254:	681b      	ldr	r3, [r3, #0]
 8020256:	2201      	movs	r2, #1
 8020258:	4013      	ands	r3, r2
 802025a:	d006      	beq.n	802026a <USB_EPStartXfer+0x1d6>
 802025c:	1c7b      	adds	r3, r7, #1
 802025e:	33ff      	adds	r3, #255	@ 0xff
 8020260:	681b      	ldr	r3, [r3, #0]
 8020262:	3301      	adds	r3, #1
 8020264:	1c7a      	adds	r2, r7, #1
 8020266:	32ff      	adds	r2, #255	@ 0xff
 8020268:	6013      	str	r3, [r2, #0]
 802026a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802026c:	881b      	ldrh	r3, [r3, #0]
 802026e:	b29a      	uxth	r2, r3
 8020270:	1c7b      	adds	r3, r7, #1
 8020272:	33ff      	adds	r3, #255	@ 0xff
 8020274:	681b      	ldr	r3, [r3, #0]
 8020276:	b29b      	uxth	r3, r3
 8020278:	029b      	lsls	r3, r3, #10
 802027a:	b29b      	uxth	r3, r3
 802027c:	4313      	orrs	r3, r2
 802027e:	b29a      	uxth	r2, r3
 8020280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020282:	801a      	strh	r2, [r3, #0]
 8020284:	e01a      	b.n	80202bc <USB_EPStartXfer+0x228>
 8020286:	683b      	ldr	r3, [r7, #0]
 8020288:	785b      	ldrb	r3, [r3, #1]
 802028a:	2b01      	cmp	r3, #1
 802028c:	d116      	bne.n	80202bc <USB_EPStartXfer+0x228>
 802028e:	687b      	ldr	r3, [r7, #4]
 8020290:	2250      	movs	r2, #80	@ 0x50
 8020292:	5a9b      	ldrh	r3, [r3, r2]
 8020294:	b29b      	uxth	r3, r3
 8020296:	001a      	movs	r2, r3
 8020298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802029a:	189b      	adds	r3, r3, r2
 802029c:	633b      	str	r3, [r7, #48]	@ 0x30
 802029e:	683b      	ldr	r3, [r7, #0]
 80202a0:	781b      	ldrb	r3, [r3, #0]
 80202a2:	00da      	lsls	r2, r3, #3
 80202a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202a6:	18d3      	adds	r3, r2, r3
 80202a8:	4a72      	ldr	r2, [pc, #456]	@ (8020474 <USB_EPStartXfer+0x3e0>)
 80202aa:	4694      	mov	ip, r2
 80202ac:	4463      	add	r3, ip
 80202ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80202b0:	1d7b      	adds	r3, r7, #5
 80202b2:	33ff      	adds	r3, #255	@ 0xff
 80202b4:	681b      	ldr	r3, [r3, #0]
 80202b6:	b29a      	uxth	r2, r3
 80202b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80202ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80202bc:	2076      	movs	r0, #118	@ 0x76
 80202be:	183b      	adds	r3, r7, r0
 80202c0:	683a      	ldr	r2, [r7, #0]
 80202c2:	8952      	ldrh	r2, [r2, #10]
 80202c4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80202c6:	683b      	ldr	r3, [r7, #0]
 80202c8:	6959      	ldr	r1, [r3, #20]
 80202ca:	1d7b      	adds	r3, r7, #5
 80202cc:	33ff      	adds	r3, #255	@ 0xff
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	b29c      	uxth	r4, r3
 80202d2:	183b      	adds	r3, r7, r0
 80202d4:	881a      	ldrh	r2, [r3, #0]
 80202d6:	6878      	ldr	r0, [r7, #4]
 80202d8:	0023      	movs	r3, r4
 80202da:	f001 f94d 	bl	8021578 <USB_WritePMA>
            ep->xfer_buff += len;
 80202de:	683b      	ldr	r3, [r7, #0]
 80202e0:	695a      	ldr	r2, [r3, #20]
 80202e2:	1d7b      	adds	r3, r7, #5
 80202e4:	33ff      	adds	r3, #255	@ 0xff
 80202e6:	681b      	ldr	r3, [r3, #0]
 80202e8:	18d2      	adds	r2, r2, r3
 80202ea:	683b      	ldr	r3, [r7, #0]
 80202ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80202ee:	683b      	ldr	r3, [r7, #0]
 80202f0:	6a1a      	ldr	r2, [r3, #32]
 80202f2:	683b      	ldr	r3, [r7, #0]
 80202f4:	691b      	ldr	r3, [r3, #16]
 80202f6:	429a      	cmp	r2, r3
 80202f8:	d908      	bls.n	802030c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80202fa:	683b      	ldr	r3, [r7, #0]
 80202fc:	6a1a      	ldr	r2, [r3, #32]
 80202fe:	1d7b      	adds	r3, r7, #5
 8020300:	33ff      	adds	r3, #255	@ 0xff
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	1ad2      	subs	r2, r2, r3
 8020306:	683b      	ldr	r3, [r7, #0]
 8020308:	621a      	str	r2, [r3, #32]
 802030a:	e007      	b.n	802031c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 802030c:	683b      	ldr	r3, [r7, #0]
 802030e:	6a1b      	ldr	r3, [r3, #32]
 8020310:	1d7a      	adds	r2, r7, #5
 8020312:	32ff      	adds	r2, #255	@ 0xff
 8020314:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020316:	683b      	ldr	r3, [r7, #0]
 8020318:	2200      	movs	r2, #0
 802031a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802031c:	683b      	ldr	r3, [r7, #0]
 802031e:	785b      	ldrb	r3, [r3, #1]
 8020320:	2b00      	cmp	r3, #0
 8020322:	d000      	beq.n	8020326 <USB_EPStartXfer+0x292>
 8020324:	e070      	b.n	8020408 <USB_EPStartXfer+0x374>
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	61bb      	str	r3, [r7, #24]
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	2250      	movs	r2, #80	@ 0x50
 802032e:	5a9b      	ldrh	r3, [r3, r2]
 8020330:	b29b      	uxth	r3, r3
 8020332:	001a      	movs	r2, r3
 8020334:	69bb      	ldr	r3, [r7, #24]
 8020336:	189b      	adds	r3, r3, r2
 8020338:	61bb      	str	r3, [r7, #24]
 802033a:	683b      	ldr	r3, [r7, #0]
 802033c:	781b      	ldrb	r3, [r3, #0]
 802033e:	00da      	lsls	r2, r3, #3
 8020340:	69bb      	ldr	r3, [r7, #24]
 8020342:	18d3      	adds	r3, r2, r3
 8020344:	4a48      	ldr	r2, [pc, #288]	@ (8020468 <USB_EPStartXfer+0x3d4>)
 8020346:	4694      	mov	ip, r2
 8020348:	4463      	add	r3, ip
 802034a:	617b      	str	r3, [r7, #20]
 802034c:	697b      	ldr	r3, [r7, #20]
 802034e:	881b      	ldrh	r3, [r3, #0]
 8020350:	b29b      	uxth	r3, r3
 8020352:	059b      	lsls	r3, r3, #22
 8020354:	0d9b      	lsrs	r3, r3, #22
 8020356:	b29a      	uxth	r2, r3
 8020358:	697b      	ldr	r3, [r7, #20]
 802035a:	801a      	strh	r2, [r3, #0]
 802035c:	1d7b      	adds	r3, r7, #5
 802035e:	33ff      	adds	r3, #255	@ 0xff
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	2b3e      	cmp	r3, #62	@ 0x3e
 8020364:	d922      	bls.n	80203ac <USB_EPStartXfer+0x318>
 8020366:	1d7b      	adds	r3, r7, #5
 8020368:	33ff      	adds	r3, #255	@ 0xff
 802036a:	681b      	ldr	r3, [r3, #0]
 802036c:	095b      	lsrs	r3, r3, #5
 802036e:	21fc      	movs	r1, #252	@ 0xfc
 8020370:	187a      	adds	r2, r7, r1
 8020372:	6013      	str	r3, [r2, #0]
 8020374:	1d7b      	adds	r3, r7, #5
 8020376:	33ff      	adds	r3, #255	@ 0xff
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	221f      	movs	r2, #31
 802037c:	4013      	ands	r3, r2
 802037e:	d104      	bne.n	802038a <USB_EPStartXfer+0x2f6>
 8020380:	187b      	adds	r3, r7, r1
 8020382:	681b      	ldr	r3, [r3, #0]
 8020384:	3b01      	subs	r3, #1
 8020386:	187a      	adds	r2, r7, r1
 8020388:	6013      	str	r3, [r2, #0]
 802038a:	697b      	ldr	r3, [r7, #20]
 802038c:	881b      	ldrh	r3, [r3, #0]
 802038e:	b29a      	uxth	r2, r3
 8020390:	23fc      	movs	r3, #252	@ 0xfc
 8020392:	18fb      	adds	r3, r7, r3
 8020394:	681b      	ldr	r3, [r3, #0]
 8020396:	b29b      	uxth	r3, r3
 8020398:	029b      	lsls	r3, r3, #10
 802039a:	b29b      	uxth	r3, r3
 802039c:	4313      	orrs	r3, r2
 802039e:	b29b      	uxth	r3, r3
 80203a0:	4a35      	ldr	r2, [pc, #212]	@ (8020478 <USB_EPStartXfer+0x3e4>)
 80203a2:	4313      	orrs	r3, r2
 80203a4:	b29a      	uxth	r2, r3
 80203a6:	697b      	ldr	r3, [r7, #20]
 80203a8:	801a      	strh	r2, [r3, #0]
 80203aa:	e04a      	b.n	8020442 <USB_EPStartXfer+0x3ae>
 80203ac:	1d7b      	adds	r3, r7, #5
 80203ae:	33ff      	adds	r3, #255	@ 0xff
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	d108      	bne.n	80203c8 <USB_EPStartXfer+0x334>
 80203b6:	697b      	ldr	r3, [r7, #20]
 80203b8:	881b      	ldrh	r3, [r3, #0]
 80203ba:	b29b      	uxth	r3, r3
 80203bc:	4a2e      	ldr	r2, [pc, #184]	@ (8020478 <USB_EPStartXfer+0x3e4>)
 80203be:	4313      	orrs	r3, r2
 80203c0:	b29a      	uxth	r2, r3
 80203c2:	697b      	ldr	r3, [r7, #20]
 80203c4:	801a      	strh	r2, [r3, #0]
 80203c6:	e03c      	b.n	8020442 <USB_EPStartXfer+0x3ae>
 80203c8:	1d7b      	adds	r3, r7, #5
 80203ca:	33ff      	adds	r3, #255	@ 0xff
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	085b      	lsrs	r3, r3, #1
 80203d0:	21fc      	movs	r1, #252	@ 0xfc
 80203d2:	187a      	adds	r2, r7, r1
 80203d4:	6013      	str	r3, [r2, #0]
 80203d6:	1d7b      	adds	r3, r7, #5
 80203d8:	33ff      	adds	r3, #255	@ 0xff
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	2201      	movs	r2, #1
 80203de:	4013      	ands	r3, r2
 80203e0:	d004      	beq.n	80203ec <USB_EPStartXfer+0x358>
 80203e2:	187b      	adds	r3, r7, r1
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	3301      	adds	r3, #1
 80203e8:	187a      	adds	r2, r7, r1
 80203ea:	6013      	str	r3, [r2, #0]
 80203ec:	697b      	ldr	r3, [r7, #20]
 80203ee:	881b      	ldrh	r3, [r3, #0]
 80203f0:	b29a      	uxth	r2, r3
 80203f2:	23fc      	movs	r3, #252	@ 0xfc
 80203f4:	18fb      	adds	r3, r7, r3
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	b29b      	uxth	r3, r3
 80203fa:	029b      	lsls	r3, r3, #10
 80203fc:	b29b      	uxth	r3, r3
 80203fe:	4313      	orrs	r3, r2
 8020400:	b29a      	uxth	r2, r3
 8020402:	697b      	ldr	r3, [r7, #20]
 8020404:	801a      	strh	r2, [r3, #0]
 8020406:	e01c      	b.n	8020442 <USB_EPStartXfer+0x3ae>
 8020408:	683b      	ldr	r3, [r7, #0]
 802040a:	785b      	ldrb	r3, [r3, #1]
 802040c:	2b01      	cmp	r3, #1
 802040e:	d118      	bne.n	8020442 <USB_EPStartXfer+0x3ae>
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	623b      	str	r3, [r7, #32]
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	2250      	movs	r2, #80	@ 0x50
 8020418:	5a9b      	ldrh	r3, [r3, r2]
 802041a:	b29b      	uxth	r3, r3
 802041c:	001a      	movs	r2, r3
 802041e:	6a3b      	ldr	r3, [r7, #32]
 8020420:	189b      	adds	r3, r3, r2
 8020422:	623b      	str	r3, [r7, #32]
 8020424:	683b      	ldr	r3, [r7, #0]
 8020426:	781b      	ldrb	r3, [r3, #0]
 8020428:	00da      	lsls	r2, r3, #3
 802042a:	6a3b      	ldr	r3, [r7, #32]
 802042c:	18d3      	adds	r3, r2, r3
 802042e:	4a0e      	ldr	r2, [pc, #56]	@ (8020468 <USB_EPStartXfer+0x3d4>)
 8020430:	4694      	mov	ip, r2
 8020432:	4463      	add	r3, ip
 8020434:	61fb      	str	r3, [r7, #28]
 8020436:	1d7b      	adds	r3, r7, #5
 8020438:	33ff      	adds	r3, #255	@ 0xff
 802043a:	681b      	ldr	r3, [r3, #0]
 802043c:	b29a      	uxth	r2, r3
 802043e:	69fb      	ldr	r3, [r7, #28]
 8020440:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8020442:	2076      	movs	r0, #118	@ 0x76
 8020444:	183b      	adds	r3, r7, r0
 8020446:	683a      	ldr	r2, [r7, #0]
 8020448:	8912      	ldrh	r2, [r2, #8]
 802044a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802044c:	683b      	ldr	r3, [r7, #0]
 802044e:	6959      	ldr	r1, [r3, #20]
 8020450:	1d7b      	adds	r3, r7, #5
 8020452:	33ff      	adds	r3, #255	@ 0xff
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	b29c      	uxth	r4, r3
 8020458:	183b      	adds	r3, r7, r0
 802045a:	881a      	ldrh	r2, [r3, #0]
 802045c:	6878      	ldr	r0, [r7, #4]
 802045e:	0023      	movs	r3, r4
 8020460:	f001 f88a 	bl	8021578 <USB_WritePMA>
 8020464:	e329      	b.n	8020aba <USB_EPStartXfer+0xa26>
 8020466:	46c0      	nop			@ (mov r8, r8)
 8020468:	00000402 	.word	0x00000402
 802046c:	ffff8f8f 	.word	0xffff8f8f
 8020470:	ffff8180 	.word	0xffff8180
 8020474:	00000406 	.word	0x00000406
 8020478:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802047c:	683b      	ldr	r3, [r7, #0]
 802047e:	785b      	ldrb	r3, [r3, #1]
 8020480:	2b00      	cmp	r3, #0
 8020482:	d000      	beq.n	8020486 <USB_EPStartXfer+0x3f2>
 8020484:	e070      	b.n	8020568 <USB_EPStartXfer+0x4d4>
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	64bb      	str	r3, [r7, #72]	@ 0x48
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	2250      	movs	r2, #80	@ 0x50
 802048e:	5a9b      	ldrh	r3, [r3, r2]
 8020490:	b29b      	uxth	r3, r3
 8020492:	001a      	movs	r2, r3
 8020494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020496:	189b      	adds	r3, r3, r2
 8020498:	64bb      	str	r3, [r7, #72]	@ 0x48
 802049a:	683b      	ldr	r3, [r7, #0]
 802049c:	781b      	ldrb	r3, [r3, #0]
 802049e:	00da      	lsls	r2, r3, #3
 80204a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80204a2:	18d3      	adds	r3, r2, r3
 80204a4:	4acd      	ldr	r2, [pc, #820]	@ (80207dc <USB_EPStartXfer+0x748>)
 80204a6:	4694      	mov	ip, r2
 80204a8:	4463      	add	r3, ip
 80204aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80204ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80204ae:	881b      	ldrh	r3, [r3, #0]
 80204b0:	b29b      	uxth	r3, r3
 80204b2:	059b      	lsls	r3, r3, #22
 80204b4:	0d9b      	lsrs	r3, r3, #22
 80204b6:	b29a      	uxth	r2, r3
 80204b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80204ba:	801a      	strh	r2, [r3, #0]
 80204bc:	1d7b      	adds	r3, r7, #5
 80204be:	33ff      	adds	r3, #255	@ 0xff
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80204c4:	d922      	bls.n	802050c <USB_EPStartXfer+0x478>
 80204c6:	1d7b      	adds	r3, r7, #5
 80204c8:	33ff      	adds	r3, #255	@ 0xff
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	095b      	lsrs	r3, r3, #5
 80204ce:	21f8      	movs	r1, #248	@ 0xf8
 80204d0:	187a      	adds	r2, r7, r1
 80204d2:	6013      	str	r3, [r2, #0]
 80204d4:	1d7b      	adds	r3, r7, #5
 80204d6:	33ff      	adds	r3, #255	@ 0xff
 80204d8:	681b      	ldr	r3, [r3, #0]
 80204da:	221f      	movs	r2, #31
 80204dc:	4013      	ands	r3, r2
 80204de:	d104      	bne.n	80204ea <USB_EPStartXfer+0x456>
 80204e0:	187b      	adds	r3, r7, r1
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	3b01      	subs	r3, #1
 80204e6:	187a      	adds	r2, r7, r1
 80204e8:	6013      	str	r3, [r2, #0]
 80204ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80204ec:	881b      	ldrh	r3, [r3, #0]
 80204ee:	b29a      	uxth	r2, r3
 80204f0:	23f8      	movs	r3, #248	@ 0xf8
 80204f2:	18fb      	adds	r3, r7, r3
 80204f4:	681b      	ldr	r3, [r3, #0]
 80204f6:	b29b      	uxth	r3, r3
 80204f8:	029b      	lsls	r3, r3, #10
 80204fa:	b29b      	uxth	r3, r3
 80204fc:	4313      	orrs	r3, r2
 80204fe:	b29b      	uxth	r3, r3
 8020500:	4ab7      	ldr	r2, [pc, #732]	@ (80207e0 <USB_EPStartXfer+0x74c>)
 8020502:	4313      	orrs	r3, r2
 8020504:	b29a      	uxth	r2, r3
 8020506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020508:	801a      	strh	r2, [r3, #0]
 802050a:	e04a      	b.n	80205a2 <USB_EPStartXfer+0x50e>
 802050c:	1d7b      	adds	r3, r7, #5
 802050e:	33ff      	adds	r3, #255	@ 0xff
 8020510:	681b      	ldr	r3, [r3, #0]
 8020512:	2b00      	cmp	r3, #0
 8020514:	d108      	bne.n	8020528 <USB_EPStartXfer+0x494>
 8020516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020518:	881b      	ldrh	r3, [r3, #0]
 802051a:	b29b      	uxth	r3, r3
 802051c:	4ab0      	ldr	r2, [pc, #704]	@ (80207e0 <USB_EPStartXfer+0x74c>)
 802051e:	4313      	orrs	r3, r2
 8020520:	b29a      	uxth	r2, r3
 8020522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020524:	801a      	strh	r2, [r3, #0]
 8020526:	e03c      	b.n	80205a2 <USB_EPStartXfer+0x50e>
 8020528:	1d7b      	adds	r3, r7, #5
 802052a:	33ff      	adds	r3, #255	@ 0xff
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	085b      	lsrs	r3, r3, #1
 8020530:	21f8      	movs	r1, #248	@ 0xf8
 8020532:	187a      	adds	r2, r7, r1
 8020534:	6013      	str	r3, [r2, #0]
 8020536:	1d7b      	adds	r3, r7, #5
 8020538:	33ff      	adds	r3, #255	@ 0xff
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	2201      	movs	r2, #1
 802053e:	4013      	ands	r3, r2
 8020540:	d004      	beq.n	802054c <USB_EPStartXfer+0x4b8>
 8020542:	187b      	adds	r3, r7, r1
 8020544:	681b      	ldr	r3, [r3, #0]
 8020546:	3301      	adds	r3, #1
 8020548:	187a      	adds	r2, r7, r1
 802054a:	6013      	str	r3, [r2, #0]
 802054c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802054e:	881b      	ldrh	r3, [r3, #0]
 8020550:	b29a      	uxth	r2, r3
 8020552:	23f8      	movs	r3, #248	@ 0xf8
 8020554:	18fb      	adds	r3, r7, r3
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	b29b      	uxth	r3, r3
 802055a:	029b      	lsls	r3, r3, #10
 802055c:	b29b      	uxth	r3, r3
 802055e:	4313      	orrs	r3, r2
 8020560:	b29a      	uxth	r2, r3
 8020562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020564:	801a      	strh	r2, [r3, #0]
 8020566:	e01c      	b.n	80205a2 <USB_EPStartXfer+0x50e>
 8020568:	683b      	ldr	r3, [r7, #0]
 802056a:	785b      	ldrb	r3, [r3, #1]
 802056c:	2b01      	cmp	r3, #1
 802056e:	d118      	bne.n	80205a2 <USB_EPStartXfer+0x50e>
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	653b      	str	r3, [r7, #80]	@ 0x50
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	2250      	movs	r2, #80	@ 0x50
 8020578:	5a9b      	ldrh	r3, [r3, r2]
 802057a:	b29b      	uxth	r3, r3
 802057c:	001a      	movs	r2, r3
 802057e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020580:	189b      	adds	r3, r3, r2
 8020582:	653b      	str	r3, [r7, #80]	@ 0x50
 8020584:	683b      	ldr	r3, [r7, #0]
 8020586:	781b      	ldrb	r3, [r3, #0]
 8020588:	00da      	lsls	r2, r3, #3
 802058a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802058c:	18d3      	adds	r3, r2, r3
 802058e:	4a93      	ldr	r2, [pc, #588]	@ (80207dc <USB_EPStartXfer+0x748>)
 8020590:	4694      	mov	ip, r2
 8020592:	4463      	add	r3, ip
 8020594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020596:	1d7b      	adds	r3, r7, #5
 8020598:	33ff      	adds	r3, #255	@ 0xff
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	b29a      	uxth	r2, r3
 802059e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80205a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80205a2:	2076      	movs	r0, #118	@ 0x76
 80205a4:	183b      	adds	r3, r7, r0
 80205a6:	683a      	ldr	r2, [r7, #0]
 80205a8:	8912      	ldrh	r2, [r2, #8]
 80205aa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80205ac:	683b      	ldr	r3, [r7, #0]
 80205ae:	6959      	ldr	r1, [r3, #20]
 80205b0:	1d7b      	adds	r3, r7, #5
 80205b2:	33ff      	adds	r3, #255	@ 0xff
 80205b4:	681b      	ldr	r3, [r3, #0]
 80205b6:	b29c      	uxth	r4, r3
 80205b8:	183b      	adds	r3, r7, r0
 80205ba:	881a      	ldrh	r2, [r3, #0]
 80205bc:	6878      	ldr	r0, [r7, #4]
 80205be:	0023      	movs	r3, r4
 80205c0:	f000 ffda 	bl	8021578 <USB_WritePMA>
            ep->xfer_buff += len;
 80205c4:	683b      	ldr	r3, [r7, #0]
 80205c6:	695a      	ldr	r2, [r3, #20]
 80205c8:	1d7b      	adds	r3, r7, #5
 80205ca:	33ff      	adds	r3, #255	@ 0xff
 80205cc:	681b      	ldr	r3, [r3, #0]
 80205ce:	18d2      	adds	r2, r2, r3
 80205d0:	683b      	ldr	r3, [r7, #0]
 80205d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80205d4:	683b      	ldr	r3, [r7, #0]
 80205d6:	6a1a      	ldr	r2, [r3, #32]
 80205d8:	683b      	ldr	r3, [r7, #0]
 80205da:	691b      	ldr	r3, [r3, #16]
 80205dc:	429a      	cmp	r2, r3
 80205de:	d908      	bls.n	80205f2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80205e0:	683b      	ldr	r3, [r7, #0]
 80205e2:	6a1a      	ldr	r2, [r3, #32]
 80205e4:	1d7b      	adds	r3, r7, #5
 80205e6:	33ff      	adds	r3, #255	@ 0xff
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	1ad2      	subs	r2, r2, r3
 80205ec:	683b      	ldr	r3, [r7, #0]
 80205ee:	621a      	str	r2, [r3, #32]
 80205f0:	e007      	b.n	8020602 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80205f2:	683b      	ldr	r3, [r7, #0]
 80205f4:	6a1b      	ldr	r3, [r3, #32]
 80205f6:	1d7a      	adds	r2, r7, #5
 80205f8:	32ff      	adds	r2, #255	@ 0xff
 80205fa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	2200      	movs	r2, #0
 8020600:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	643b      	str	r3, [r7, #64]	@ 0x40
 8020606:	683b      	ldr	r3, [r7, #0]
 8020608:	785b      	ldrb	r3, [r3, #1]
 802060a:	2b00      	cmp	r3, #0
 802060c:	d000      	beq.n	8020610 <USB_EPStartXfer+0x57c>
 802060e:	e070      	b.n	80206f2 <USB_EPStartXfer+0x65e>
 8020610:	687b      	ldr	r3, [r7, #4]
 8020612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	2250      	movs	r2, #80	@ 0x50
 8020618:	5a9b      	ldrh	r3, [r3, r2]
 802061a:	b29b      	uxth	r3, r3
 802061c:	001a      	movs	r2, r3
 802061e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020620:	189b      	adds	r3, r3, r2
 8020622:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020624:	683b      	ldr	r3, [r7, #0]
 8020626:	781b      	ldrb	r3, [r3, #0]
 8020628:	00da      	lsls	r2, r3, #3
 802062a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802062c:	18d3      	adds	r3, r2, r3
 802062e:	4a6d      	ldr	r2, [pc, #436]	@ (80207e4 <USB_EPStartXfer+0x750>)
 8020630:	4694      	mov	ip, r2
 8020632:	4463      	add	r3, ip
 8020634:	637b      	str	r3, [r7, #52]	@ 0x34
 8020636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020638:	881b      	ldrh	r3, [r3, #0]
 802063a:	b29b      	uxth	r3, r3
 802063c:	059b      	lsls	r3, r3, #22
 802063e:	0d9b      	lsrs	r3, r3, #22
 8020640:	b29a      	uxth	r2, r3
 8020642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020644:	801a      	strh	r2, [r3, #0]
 8020646:	1d7b      	adds	r3, r7, #5
 8020648:	33ff      	adds	r3, #255	@ 0xff
 802064a:	681b      	ldr	r3, [r3, #0]
 802064c:	2b3e      	cmp	r3, #62	@ 0x3e
 802064e:	d922      	bls.n	8020696 <USB_EPStartXfer+0x602>
 8020650:	1d7b      	adds	r3, r7, #5
 8020652:	33ff      	adds	r3, #255	@ 0xff
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	095b      	lsrs	r3, r3, #5
 8020658:	21f4      	movs	r1, #244	@ 0xf4
 802065a:	187a      	adds	r2, r7, r1
 802065c:	6013      	str	r3, [r2, #0]
 802065e:	1d7b      	adds	r3, r7, #5
 8020660:	33ff      	adds	r3, #255	@ 0xff
 8020662:	681b      	ldr	r3, [r3, #0]
 8020664:	221f      	movs	r2, #31
 8020666:	4013      	ands	r3, r2
 8020668:	d104      	bne.n	8020674 <USB_EPStartXfer+0x5e0>
 802066a:	187b      	adds	r3, r7, r1
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	3b01      	subs	r3, #1
 8020670:	187a      	adds	r2, r7, r1
 8020672:	6013      	str	r3, [r2, #0]
 8020674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020676:	881b      	ldrh	r3, [r3, #0]
 8020678:	b29a      	uxth	r2, r3
 802067a:	23f4      	movs	r3, #244	@ 0xf4
 802067c:	18fb      	adds	r3, r7, r3
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	b29b      	uxth	r3, r3
 8020682:	029b      	lsls	r3, r3, #10
 8020684:	b29b      	uxth	r3, r3
 8020686:	4313      	orrs	r3, r2
 8020688:	b29b      	uxth	r3, r3
 802068a:	4a55      	ldr	r2, [pc, #340]	@ (80207e0 <USB_EPStartXfer+0x74c>)
 802068c:	4313      	orrs	r3, r2
 802068e:	b29a      	uxth	r2, r3
 8020690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020692:	801a      	strh	r2, [r3, #0]
 8020694:	e048      	b.n	8020728 <USB_EPStartXfer+0x694>
 8020696:	1d7b      	adds	r3, r7, #5
 8020698:	33ff      	adds	r3, #255	@ 0xff
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	2b00      	cmp	r3, #0
 802069e:	d108      	bne.n	80206b2 <USB_EPStartXfer+0x61e>
 80206a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206a2:	881b      	ldrh	r3, [r3, #0]
 80206a4:	b29b      	uxth	r3, r3
 80206a6:	4a4e      	ldr	r2, [pc, #312]	@ (80207e0 <USB_EPStartXfer+0x74c>)
 80206a8:	4313      	orrs	r3, r2
 80206aa:	b29a      	uxth	r2, r3
 80206ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206ae:	801a      	strh	r2, [r3, #0]
 80206b0:	e03a      	b.n	8020728 <USB_EPStartXfer+0x694>
 80206b2:	1d7b      	adds	r3, r7, #5
 80206b4:	33ff      	adds	r3, #255	@ 0xff
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	21f4      	movs	r1, #244	@ 0xf4
 80206bc:	187a      	adds	r2, r7, r1
 80206be:	6013      	str	r3, [r2, #0]
 80206c0:	1d7b      	adds	r3, r7, #5
 80206c2:	33ff      	adds	r3, #255	@ 0xff
 80206c4:	681b      	ldr	r3, [r3, #0]
 80206c6:	2201      	movs	r2, #1
 80206c8:	4013      	ands	r3, r2
 80206ca:	d004      	beq.n	80206d6 <USB_EPStartXfer+0x642>
 80206cc:	187b      	adds	r3, r7, r1
 80206ce:	681b      	ldr	r3, [r3, #0]
 80206d0:	3301      	adds	r3, #1
 80206d2:	187a      	adds	r2, r7, r1
 80206d4:	6013      	str	r3, [r2, #0]
 80206d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206d8:	881b      	ldrh	r3, [r3, #0]
 80206da:	b29a      	uxth	r2, r3
 80206dc:	23f4      	movs	r3, #244	@ 0xf4
 80206de:	18fb      	adds	r3, r7, r3
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	b29b      	uxth	r3, r3
 80206e4:	029b      	lsls	r3, r3, #10
 80206e6:	b29b      	uxth	r3, r3
 80206e8:	4313      	orrs	r3, r2
 80206ea:	b29a      	uxth	r2, r3
 80206ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206ee:	801a      	strh	r2, [r3, #0]
 80206f0:	e01a      	b.n	8020728 <USB_EPStartXfer+0x694>
 80206f2:	683b      	ldr	r3, [r7, #0]
 80206f4:	785b      	ldrb	r3, [r3, #1]
 80206f6:	2b01      	cmp	r3, #1
 80206f8:	d116      	bne.n	8020728 <USB_EPStartXfer+0x694>
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	2250      	movs	r2, #80	@ 0x50
 80206fe:	5a9b      	ldrh	r3, [r3, r2]
 8020700:	b29b      	uxth	r3, r3
 8020702:	001a      	movs	r2, r3
 8020704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020706:	189b      	adds	r3, r3, r2
 8020708:	643b      	str	r3, [r7, #64]	@ 0x40
 802070a:	683b      	ldr	r3, [r7, #0]
 802070c:	781b      	ldrb	r3, [r3, #0]
 802070e:	00da      	lsls	r2, r3, #3
 8020710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020712:	18d3      	adds	r3, r2, r3
 8020714:	4a33      	ldr	r2, [pc, #204]	@ (80207e4 <USB_EPStartXfer+0x750>)
 8020716:	4694      	mov	ip, r2
 8020718:	4463      	add	r3, ip
 802071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802071c:	1d7b      	adds	r3, r7, #5
 802071e:	33ff      	adds	r3, #255	@ 0xff
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	b29a      	uxth	r2, r3
 8020724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020726:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020728:	2076      	movs	r0, #118	@ 0x76
 802072a:	183b      	adds	r3, r7, r0
 802072c:	683a      	ldr	r2, [r7, #0]
 802072e:	8952      	ldrh	r2, [r2, #10]
 8020730:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020732:	683b      	ldr	r3, [r7, #0]
 8020734:	6959      	ldr	r1, [r3, #20]
 8020736:	1d7b      	adds	r3, r7, #5
 8020738:	33ff      	adds	r3, #255	@ 0xff
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	b29c      	uxth	r4, r3
 802073e:	183b      	adds	r3, r7, r0
 8020740:	881a      	ldrh	r2, [r3, #0]
 8020742:	6878      	ldr	r0, [r7, #4]
 8020744:	0023      	movs	r3, r4
 8020746:	f000 ff17 	bl	8021578 <USB_WritePMA>
 802074a:	e1b6      	b.n	8020aba <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 802074c:	683b      	ldr	r3, [r7, #0]
 802074e:	6a1b      	ldr	r3, [r3, #32]
 8020750:	1d7a      	adds	r2, r7, #5
 8020752:	32ff      	adds	r2, #255	@ 0xff
 8020754:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8020756:	687a      	ldr	r2, [r7, #4]
 8020758:	683b      	ldr	r3, [r7, #0]
 802075a:	781b      	ldrb	r3, [r3, #0]
 802075c:	009b      	lsls	r3, r3, #2
 802075e:	18d3      	adds	r3, r2, r3
 8020760:	881b      	ldrh	r3, [r3, #0]
 8020762:	b29a      	uxth	r2, r3
 8020764:	2062      	movs	r0, #98	@ 0x62
 8020766:	183b      	adds	r3, r7, r0
 8020768:	491f      	ldr	r1, [pc, #124]	@ (80207e8 <USB_EPStartXfer+0x754>)
 802076a:	400a      	ands	r2, r1
 802076c:	801a      	strh	r2, [r3, #0]
 802076e:	687a      	ldr	r2, [r7, #4]
 8020770:	683b      	ldr	r3, [r7, #0]
 8020772:	781b      	ldrb	r3, [r3, #0]
 8020774:	009b      	lsls	r3, r3, #2
 8020776:	18d3      	adds	r3, r2, r3
 8020778:	183a      	adds	r2, r7, r0
 802077a:	8812      	ldrh	r2, [r2, #0]
 802077c:	491b      	ldr	r1, [pc, #108]	@ (80207ec <USB_EPStartXfer+0x758>)
 802077e:	430a      	orrs	r2, r1
 8020780:	b292      	uxth	r2, r2
 8020782:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	2250      	movs	r2, #80	@ 0x50
 802078c:	5a9b      	ldrh	r3, [r3, r2]
 802078e:	b29b      	uxth	r3, r3
 8020790:	001a      	movs	r2, r3
 8020792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020794:	189b      	adds	r3, r3, r2
 8020796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020798:	683b      	ldr	r3, [r7, #0]
 802079a:	781b      	ldrb	r3, [r3, #0]
 802079c:	00da      	lsls	r2, r3, #3
 802079e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80207a0:	18d3      	adds	r3, r2, r3
 80207a2:	4a0e      	ldr	r2, [pc, #56]	@ (80207dc <USB_EPStartXfer+0x748>)
 80207a4:	4694      	mov	ip, r2
 80207a6:	4463      	add	r3, ip
 80207a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80207aa:	1d7b      	adds	r3, r7, #5
 80207ac:	33ff      	adds	r3, #255	@ 0xff
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	b29a      	uxth	r2, r3
 80207b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80207b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80207b6:	2076      	movs	r0, #118	@ 0x76
 80207b8:	183b      	adds	r3, r7, r0
 80207ba:	683a      	ldr	r2, [r7, #0]
 80207bc:	8912      	ldrh	r2, [r2, #8]
 80207be:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80207c0:	683b      	ldr	r3, [r7, #0]
 80207c2:	6959      	ldr	r1, [r3, #20]
 80207c4:	1d7b      	adds	r3, r7, #5
 80207c6:	33ff      	adds	r3, #255	@ 0xff
 80207c8:	681b      	ldr	r3, [r3, #0]
 80207ca:	b29c      	uxth	r4, r3
 80207cc:	183b      	adds	r3, r7, r0
 80207ce:	881a      	ldrh	r2, [r3, #0]
 80207d0:	6878      	ldr	r0, [r7, #4]
 80207d2:	0023      	movs	r3, r4
 80207d4:	f000 fed0 	bl	8021578 <USB_WritePMA>
 80207d8:	e16f      	b.n	8020aba <USB_EPStartXfer+0xa26>
 80207da:	46c0      	nop			@ (mov r8, r8)
 80207dc:	00000402 	.word	0x00000402
 80207e0:	ffff8000 	.word	0xffff8000
 80207e4:	00000406 	.word	0x00000406
 80207e8:	ffff8e8f 	.word	0xffff8e8f
 80207ec:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80207f0:	683b      	ldr	r3, [r7, #0]
 80207f2:	6a1a      	ldr	r2, [r3, #32]
 80207f4:	1d7b      	adds	r3, r7, #5
 80207f6:	33ff      	adds	r3, #255	@ 0xff
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	1ad2      	subs	r2, r2, r3
 80207fc:	683b      	ldr	r3, [r7, #0]
 80207fe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8020800:	687a      	ldr	r2, [r7, #4]
 8020802:	683b      	ldr	r3, [r7, #0]
 8020804:	781b      	ldrb	r3, [r3, #0]
 8020806:	009b      	lsls	r3, r3, #2
 8020808:	18d3      	adds	r3, r2, r3
 802080a:	881b      	ldrh	r3, [r3, #0]
 802080c:	b29b      	uxth	r3, r3
 802080e:	001a      	movs	r2, r3
 8020810:	2340      	movs	r3, #64	@ 0x40
 8020812:	4013      	ands	r3, r2
 8020814:	d100      	bne.n	8020818 <USB_EPStartXfer+0x784>
 8020816:	e0a4      	b.n	8020962 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	673b      	str	r3, [r7, #112]	@ 0x70
 802081c:	683b      	ldr	r3, [r7, #0]
 802081e:	785b      	ldrb	r3, [r3, #1]
 8020820:	2b00      	cmp	r3, #0
 8020822:	d000      	beq.n	8020826 <USB_EPStartXfer+0x792>
 8020824:	e070      	b.n	8020908 <USB_EPStartXfer+0x874>
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	66bb      	str	r3, [r7, #104]	@ 0x68
 802082a:	687b      	ldr	r3, [r7, #4]
 802082c:	2250      	movs	r2, #80	@ 0x50
 802082e:	5a9b      	ldrh	r3, [r3, r2]
 8020830:	b29b      	uxth	r3, r3
 8020832:	001a      	movs	r2, r3
 8020834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020836:	189b      	adds	r3, r3, r2
 8020838:	66bb      	str	r3, [r7, #104]	@ 0x68
 802083a:	683b      	ldr	r3, [r7, #0]
 802083c:	781b      	ldrb	r3, [r3, #0]
 802083e:	00da      	lsls	r2, r3, #3
 8020840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020842:	18d3      	adds	r3, r2, r3
 8020844:	4abc      	ldr	r2, [pc, #752]	@ (8020b38 <USB_EPStartXfer+0xaa4>)
 8020846:	4694      	mov	ip, r2
 8020848:	4463      	add	r3, ip
 802084a:	667b      	str	r3, [r7, #100]	@ 0x64
 802084c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802084e:	881b      	ldrh	r3, [r3, #0]
 8020850:	b29b      	uxth	r3, r3
 8020852:	059b      	lsls	r3, r3, #22
 8020854:	0d9b      	lsrs	r3, r3, #22
 8020856:	b29a      	uxth	r2, r3
 8020858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802085a:	801a      	strh	r2, [r3, #0]
 802085c:	1d7b      	adds	r3, r7, #5
 802085e:	33ff      	adds	r3, #255	@ 0xff
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	2b3e      	cmp	r3, #62	@ 0x3e
 8020864:	d922      	bls.n	80208ac <USB_EPStartXfer+0x818>
 8020866:	1d7b      	adds	r3, r7, #5
 8020868:	33ff      	adds	r3, #255	@ 0xff
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	095b      	lsrs	r3, r3, #5
 802086e:	21f0      	movs	r1, #240	@ 0xf0
 8020870:	187a      	adds	r2, r7, r1
 8020872:	6013      	str	r3, [r2, #0]
 8020874:	1d7b      	adds	r3, r7, #5
 8020876:	33ff      	adds	r3, #255	@ 0xff
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	221f      	movs	r2, #31
 802087c:	4013      	ands	r3, r2
 802087e:	d104      	bne.n	802088a <USB_EPStartXfer+0x7f6>
 8020880:	187b      	adds	r3, r7, r1
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	3b01      	subs	r3, #1
 8020886:	187a      	adds	r2, r7, r1
 8020888:	6013      	str	r3, [r2, #0]
 802088a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802088c:	881b      	ldrh	r3, [r3, #0]
 802088e:	b29a      	uxth	r2, r3
 8020890:	23f0      	movs	r3, #240	@ 0xf0
 8020892:	18fb      	adds	r3, r7, r3
 8020894:	681b      	ldr	r3, [r3, #0]
 8020896:	b29b      	uxth	r3, r3
 8020898:	029b      	lsls	r3, r3, #10
 802089a:	b29b      	uxth	r3, r3
 802089c:	4313      	orrs	r3, r2
 802089e:	b29b      	uxth	r3, r3
 80208a0:	4aa6      	ldr	r2, [pc, #664]	@ (8020b3c <USB_EPStartXfer+0xaa8>)
 80208a2:	4313      	orrs	r3, r2
 80208a4:	b29a      	uxth	r2, r3
 80208a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208a8:	801a      	strh	r2, [r3, #0]
 80208aa:	e048      	b.n	802093e <USB_EPStartXfer+0x8aa>
 80208ac:	1d7b      	adds	r3, r7, #5
 80208ae:	33ff      	adds	r3, #255	@ 0xff
 80208b0:	681b      	ldr	r3, [r3, #0]
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	d108      	bne.n	80208c8 <USB_EPStartXfer+0x834>
 80208b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208b8:	881b      	ldrh	r3, [r3, #0]
 80208ba:	b29b      	uxth	r3, r3
 80208bc:	4a9f      	ldr	r2, [pc, #636]	@ (8020b3c <USB_EPStartXfer+0xaa8>)
 80208be:	4313      	orrs	r3, r2
 80208c0:	b29a      	uxth	r2, r3
 80208c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208c4:	801a      	strh	r2, [r3, #0]
 80208c6:	e03a      	b.n	802093e <USB_EPStartXfer+0x8aa>
 80208c8:	1d7b      	adds	r3, r7, #5
 80208ca:	33ff      	adds	r3, #255	@ 0xff
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	085b      	lsrs	r3, r3, #1
 80208d0:	21f0      	movs	r1, #240	@ 0xf0
 80208d2:	187a      	adds	r2, r7, r1
 80208d4:	6013      	str	r3, [r2, #0]
 80208d6:	1d7b      	adds	r3, r7, #5
 80208d8:	33ff      	adds	r3, #255	@ 0xff
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	2201      	movs	r2, #1
 80208de:	4013      	ands	r3, r2
 80208e0:	d004      	beq.n	80208ec <USB_EPStartXfer+0x858>
 80208e2:	187b      	adds	r3, r7, r1
 80208e4:	681b      	ldr	r3, [r3, #0]
 80208e6:	3301      	adds	r3, #1
 80208e8:	187a      	adds	r2, r7, r1
 80208ea:	6013      	str	r3, [r2, #0]
 80208ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208ee:	881b      	ldrh	r3, [r3, #0]
 80208f0:	b29a      	uxth	r2, r3
 80208f2:	23f0      	movs	r3, #240	@ 0xf0
 80208f4:	18fb      	adds	r3, r7, r3
 80208f6:	681b      	ldr	r3, [r3, #0]
 80208f8:	b29b      	uxth	r3, r3
 80208fa:	029b      	lsls	r3, r3, #10
 80208fc:	b29b      	uxth	r3, r3
 80208fe:	4313      	orrs	r3, r2
 8020900:	b29a      	uxth	r2, r3
 8020902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020904:	801a      	strh	r2, [r3, #0]
 8020906:	e01a      	b.n	802093e <USB_EPStartXfer+0x8aa>
 8020908:	683b      	ldr	r3, [r7, #0]
 802090a:	785b      	ldrb	r3, [r3, #1]
 802090c:	2b01      	cmp	r3, #1
 802090e:	d116      	bne.n	802093e <USB_EPStartXfer+0x8aa>
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	2250      	movs	r2, #80	@ 0x50
 8020914:	5a9b      	ldrh	r3, [r3, r2]
 8020916:	b29b      	uxth	r3, r3
 8020918:	001a      	movs	r2, r3
 802091a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802091c:	189b      	adds	r3, r3, r2
 802091e:	673b      	str	r3, [r7, #112]	@ 0x70
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	781b      	ldrb	r3, [r3, #0]
 8020924:	00da      	lsls	r2, r3, #3
 8020926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020928:	18d3      	adds	r3, r2, r3
 802092a:	4a83      	ldr	r2, [pc, #524]	@ (8020b38 <USB_EPStartXfer+0xaa4>)
 802092c:	4694      	mov	ip, r2
 802092e:	4463      	add	r3, ip
 8020930:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8020932:	1d7b      	adds	r3, r7, #5
 8020934:	33ff      	adds	r3, #255	@ 0xff
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	b29a      	uxth	r2, r3
 802093a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802093c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 802093e:	2076      	movs	r0, #118	@ 0x76
 8020940:	183b      	adds	r3, r7, r0
 8020942:	683a      	ldr	r2, [r7, #0]
 8020944:	8952      	ldrh	r2, [r2, #10]
 8020946:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020948:	683b      	ldr	r3, [r7, #0]
 802094a:	6959      	ldr	r1, [r3, #20]
 802094c:	1d7b      	adds	r3, r7, #5
 802094e:	33ff      	adds	r3, #255	@ 0xff
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	b29c      	uxth	r4, r3
 8020954:	183b      	adds	r3, r7, r0
 8020956:	881a      	ldrh	r2, [r3, #0]
 8020958:	6878      	ldr	r0, [r7, #4]
 802095a:	0023      	movs	r3, r4
 802095c:	f000 fe0c 	bl	8021578 <USB_WritePMA>
 8020960:	e0ab      	b.n	8020aba <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020962:	683b      	ldr	r3, [r7, #0]
 8020964:	785b      	ldrb	r3, [r3, #1]
 8020966:	2b00      	cmp	r3, #0
 8020968:	d000      	beq.n	802096c <USB_EPStartXfer+0x8d8>
 802096a:	e070      	b.n	8020a4e <USB_EPStartXfer+0x9ba>
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	2250      	movs	r2, #80	@ 0x50
 8020974:	5a9b      	ldrh	r3, [r3, r2]
 8020976:	b29b      	uxth	r3, r3
 8020978:	001a      	movs	r2, r3
 802097a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802097c:	189b      	adds	r3, r3, r2
 802097e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020980:	683b      	ldr	r3, [r7, #0]
 8020982:	781b      	ldrb	r3, [r3, #0]
 8020984:	00da      	lsls	r2, r3, #3
 8020986:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8020988:	18d3      	adds	r3, r2, r3
 802098a:	4a6d      	ldr	r2, [pc, #436]	@ (8020b40 <USB_EPStartXfer+0xaac>)
 802098c:	4694      	mov	ip, r2
 802098e:	4463      	add	r3, ip
 8020990:	67bb      	str	r3, [r7, #120]	@ 0x78
 8020992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020994:	881b      	ldrh	r3, [r3, #0]
 8020996:	b29b      	uxth	r3, r3
 8020998:	059b      	lsls	r3, r3, #22
 802099a:	0d9b      	lsrs	r3, r3, #22
 802099c:	b29a      	uxth	r2, r3
 802099e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80209a0:	801a      	strh	r2, [r3, #0]
 80209a2:	1d7b      	adds	r3, r7, #5
 80209a4:	33ff      	adds	r3, #255	@ 0xff
 80209a6:	681b      	ldr	r3, [r3, #0]
 80209a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80209aa:	d922      	bls.n	80209f2 <USB_EPStartXfer+0x95e>
 80209ac:	1d7b      	adds	r3, r7, #5
 80209ae:	33ff      	adds	r3, #255	@ 0xff
 80209b0:	681b      	ldr	r3, [r3, #0]
 80209b2:	095b      	lsrs	r3, r3, #5
 80209b4:	21ec      	movs	r1, #236	@ 0xec
 80209b6:	187a      	adds	r2, r7, r1
 80209b8:	6013      	str	r3, [r2, #0]
 80209ba:	1d7b      	adds	r3, r7, #5
 80209bc:	33ff      	adds	r3, #255	@ 0xff
 80209be:	681b      	ldr	r3, [r3, #0]
 80209c0:	221f      	movs	r2, #31
 80209c2:	4013      	ands	r3, r2
 80209c4:	d104      	bne.n	80209d0 <USB_EPStartXfer+0x93c>
 80209c6:	187b      	adds	r3, r7, r1
 80209c8:	681b      	ldr	r3, [r3, #0]
 80209ca:	3b01      	subs	r3, #1
 80209cc:	187a      	adds	r2, r7, r1
 80209ce:	6013      	str	r3, [r2, #0]
 80209d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80209d2:	881b      	ldrh	r3, [r3, #0]
 80209d4:	b29a      	uxth	r2, r3
 80209d6:	23ec      	movs	r3, #236	@ 0xec
 80209d8:	18fb      	adds	r3, r7, r3
 80209da:	681b      	ldr	r3, [r3, #0]
 80209dc:	b29b      	uxth	r3, r3
 80209de:	029b      	lsls	r3, r3, #10
 80209e0:	b29b      	uxth	r3, r3
 80209e2:	4313      	orrs	r3, r2
 80209e4:	b29b      	uxth	r3, r3
 80209e6:	4a55      	ldr	r2, [pc, #340]	@ (8020b3c <USB_EPStartXfer+0xaa8>)
 80209e8:	4313      	orrs	r3, r2
 80209ea:	b29a      	uxth	r2, r3
 80209ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80209ee:	801a      	strh	r2, [r3, #0]
 80209f0:	e052      	b.n	8020a98 <USB_EPStartXfer+0xa04>
 80209f2:	1d7b      	adds	r3, r7, #5
 80209f4:	33ff      	adds	r3, #255	@ 0xff
 80209f6:	681b      	ldr	r3, [r3, #0]
 80209f8:	2b00      	cmp	r3, #0
 80209fa:	d108      	bne.n	8020a0e <USB_EPStartXfer+0x97a>
 80209fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80209fe:	881b      	ldrh	r3, [r3, #0]
 8020a00:	b29b      	uxth	r3, r3
 8020a02:	4a4e      	ldr	r2, [pc, #312]	@ (8020b3c <USB_EPStartXfer+0xaa8>)
 8020a04:	4313      	orrs	r3, r2
 8020a06:	b29a      	uxth	r2, r3
 8020a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a0a:	801a      	strh	r2, [r3, #0]
 8020a0c:	e044      	b.n	8020a98 <USB_EPStartXfer+0xa04>
 8020a0e:	1d7b      	adds	r3, r7, #5
 8020a10:	33ff      	adds	r3, #255	@ 0xff
 8020a12:	681b      	ldr	r3, [r3, #0]
 8020a14:	085b      	lsrs	r3, r3, #1
 8020a16:	21ec      	movs	r1, #236	@ 0xec
 8020a18:	187a      	adds	r2, r7, r1
 8020a1a:	6013      	str	r3, [r2, #0]
 8020a1c:	1d7b      	adds	r3, r7, #5
 8020a1e:	33ff      	adds	r3, #255	@ 0xff
 8020a20:	681b      	ldr	r3, [r3, #0]
 8020a22:	2201      	movs	r2, #1
 8020a24:	4013      	ands	r3, r2
 8020a26:	d004      	beq.n	8020a32 <USB_EPStartXfer+0x99e>
 8020a28:	187b      	adds	r3, r7, r1
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	3301      	adds	r3, #1
 8020a2e:	187a      	adds	r2, r7, r1
 8020a30:	6013      	str	r3, [r2, #0]
 8020a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a34:	881b      	ldrh	r3, [r3, #0]
 8020a36:	b29a      	uxth	r2, r3
 8020a38:	23ec      	movs	r3, #236	@ 0xec
 8020a3a:	18fb      	adds	r3, r7, r3
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	b29b      	uxth	r3, r3
 8020a40:	029b      	lsls	r3, r3, #10
 8020a42:	b29b      	uxth	r3, r3
 8020a44:	4313      	orrs	r3, r2
 8020a46:	b29a      	uxth	r2, r3
 8020a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a4a:	801a      	strh	r2, [r3, #0]
 8020a4c:	e024      	b.n	8020a98 <USB_EPStartXfer+0xa04>
 8020a4e:	683b      	ldr	r3, [r7, #0]
 8020a50:	785b      	ldrb	r3, [r3, #1]
 8020a52:	2b01      	cmp	r3, #1
 8020a54:	d120      	bne.n	8020a98 <USB_EPStartXfer+0xa04>
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	2184      	movs	r1, #132	@ 0x84
 8020a5a:	187a      	adds	r2, r7, r1
 8020a5c:	6013      	str	r3, [r2, #0]
 8020a5e:	687b      	ldr	r3, [r7, #4]
 8020a60:	2250      	movs	r2, #80	@ 0x50
 8020a62:	5a9b      	ldrh	r3, [r3, r2]
 8020a64:	b29b      	uxth	r3, r3
 8020a66:	001a      	movs	r2, r3
 8020a68:	187b      	adds	r3, r7, r1
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	189b      	adds	r3, r3, r2
 8020a6e:	187a      	adds	r2, r7, r1
 8020a70:	6013      	str	r3, [r2, #0]
 8020a72:	683b      	ldr	r3, [r7, #0]
 8020a74:	781b      	ldrb	r3, [r3, #0]
 8020a76:	00da      	lsls	r2, r3, #3
 8020a78:	187b      	adds	r3, r7, r1
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	18d3      	adds	r3, r2, r3
 8020a7e:	4a30      	ldr	r2, [pc, #192]	@ (8020b40 <USB_EPStartXfer+0xaac>)
 8020a80:	4694      	mov	ip, r2
 8020a82:	4463      	add	r3, ip
 8020a84:	2180      	movs	r1, #128	@ 0x80
 8020a86:	187a      	adds	r2, r7, r1
 8020a88:	6013      	str	r3, [r2, #0]
 8020a8a:	1d7b      	adds	r3, r7, #5
 8020a8c:	33ff      	adds	r3, #255	@ 0xff
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	b29a      	uxth	r2, r3
 8020a92:	187b      	adds	r3, r7, r1
 8020a94:	681b      	ldr	r3, [r3, #0]
 8020a96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8020a98:	2076      	movs	r0, #118	@ 0x76
 8020a9a:	183b      	adds	r3, r7, r0
 8020a9c:	683a      	ldr	r2, [r7, #0]
 8020a9e:	8912      	ldrh	r2, [r2, #8]
 8020aa0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020aa2:	683b      	ldr	r3, [r7, #0]
 8020aa4:	6959      	ldr	r1, [r3, #20]
 8020aa6:	1d7b      	adds	r3, r7, #5
 8020aa8:	33ff      	adds	r3, #255	@ 0xff
 8020aaa:	681b      	ldr	r3, [r3, #0]
 8020aac:	b29c      	uxth	r4, r3
 8020aae:	183b      	adds	r3, r7, r0
 8020ab0:	881a      	ldrh	r2, [r3, #0]
 8020ab2:	6878      	ldr	r0, [r7, #4]
 8020ab4:	0023      	movs	r3, r4
 8020ab6:	f000 fd5f 	bl	8021578 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8020aba:	687a      	ldr	r2, [r7, #4]
 8020abc:	683b      	ldr	r3, [r7, #0]
 8020abe:	781b      	ldrb	r3, [r3, #0]
 8020ac0:	009b      	lsls	r3, r3, #2
 8020ac2:	18d3      	adds	r3, r2, r3
 8020ac4:	881b      	ldrh	r3, [r3, #0]
 8020ac6:	b29a      	uxth	r2, r3
 8020ac8:	200a      	movs	r0, #10
 8020aca:	183b      	adds	r3, r7, r0
 8020acc:	491d      	ldr	r1, [pc, #116]	@ (8020b44 <USB_EPStartXfer+0xab0>)
 8020ace:	400a      	ands	r2, r1
 8020ad0:	801a      	strh	r2, [r3, #0]
 8020ad2:	183b      	adds	r3, r7, r0
 8020ad4:	183a      	adds	r2, r7, r0
 8020ad6:	8812      	ldrh	r2, [r2, #0]
 8020ad8:	2110      	movs	r1, #16
 8020ada:	404a      	eors	r2, r1
 8020adc:	801a      	strh	r2, [r3, #0]
 8020ade:	183b      	adds	r3, r7, r0
 8020ae0:	183a      	adds	r2, r7, r0
 8020ae2:	8812      	ldrh	r2, [r2, #0]
 8020ae4:	2120      	movs	r1, #32
 8020ae6:	404a      	eors	r2, r1
 8020ae8:	801a      	strh	r2, [r3, #0]
 8020aea:	687a      	ldr	r2, [r7, #4]
 8020aec:	683b      	ldr	r3, [r7, #0]
 8020aee:	781b      	ldrb	r3, [r3, #0]
 8020af0:	009b      	lsls	r3, r3, #2
 8020af2:	18d3      	adds	r3, r2, r3
 8020af4:	183a      	adds	r2, r7, r0
 8020af6:	8812      	ldrh	r2, [r2, #0]
 8020af8:	4913      	ldr	r1, [pc, #76]	@ (8020b48 <USB_EPStartXfer+0xab4>)
 8020afa:	430a      	orrs	r2, r1
 8020afc:	b292      	uxth	r2, r2
 8020afe:	801a      	strh	r2, [r3, #0]
 8020b00:	f000 fbf4 	bl	80212ec <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8020b04:	683b      	ldr	r3, [r7, #0]
 8020b06:	7b1b      	ldrb	r3, [r3, #12]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d000      	beq.n	8020b0e <USB_EPStartXfer+0xa7a>
 8020b0c:	e0a9      	b.n	8020c62 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8020b0e:	683b      	ldr	r3, [r7, #0]
 8020b10:	699a      	ldr	r2, [r3, #24]
 8020b12:	683b      	ldr	r3, [r7, #0]
 8020b14:	691b      	ldr	r3, [r3, #16]
 8020b16:	429a      	cmp	r2, r3
 8020b18:	d918      	bls.n	8020b4c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020b1a:	683b      	ldr	r3, [r7, #0]
 8020b1c:	691b      	ldr	r3, [r3, #16]
 8020b1e:	1d7a      	adds	r2, r7, #5
 8020b20:	32ff      	adds	r2, #255	@ 0xff
 8020b22:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8020b24:	683b      	ldr	r3, [r7, #0]
 8020b26:	699a      	ldr	r2, [r3, #24]
 8020b28:	1d7b      	adds	r3, r7, #5
 8020b2a:	33ff      	adds	r3, #255	@ 0xff
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	1ad2      	subs	r2, r2, r3
 8020b30:	683b      	ldr	r3, [r7, #0]
 8020b32:	619a      	str	r2, [r3, #24]
 8020b34:	e012      	b.n	8020b5c <USB_EPStartXfer+0xac8>
 8020b36:	46c0      	nop			@ (mov r8, r8)
 8020b38:	00000406 	.word	0x00000406
 8020b3c:	ffff8000 	.word	0xffff8000
 8020b40:	00000402 	.word	0x00000402
 8020b44:	ffff8fbf 	.word	0xffff8fbf
 8020b48:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020b4c:	683b      	ldr	r3, [r7, #0]
 8020b4e:	699b      	ldr	r3, [r3, #24]
 8020b50:	1d7a      	adds	r2, r7, #5
 8020b52:	32ff      	adds	r2, #255	@ 0xff
 8020b54:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020b56:	683b      	ldr	r3, [r7, #0]
 8020b58:	2200      	movs	r2, #0
 8020b5a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	2190      	movs	r1, #144	@ 0x90
 8020b60:	187a      	adds	r2, r7, r1
 8020b62:	6013      	str	r3, [r2, #0]
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	2250      	movs	r2, #80	@ 0x50
 8020b68:	5a9b      	ldrh	r3, [r3, r2]
 8020b6a:	b29b      	uxth	r3, r3
 8020b6c:	001a      	movs	r2, r3
 8020b6e:	187b      	adds	r3, r7, r1
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	189b      	adds	r3, r3, r2
 8020b74:	187a      	adds	r2, r7, r1
 8020b76:	6013      	str	r3, [r2, #0]
 8020b78:	683b      	ldr	r3, [r7, #0]
 8020b7a:	781b      	ldrb	r3, [r3, #0]
 8020b7c:	00da      	lsls	r2, r3, #3
 8020b7e:	187b      	adds	r3, r7, r1
 8020b80:	681b      	ldr	r3, [r3, #0]
 8020b82:	18d3      	adds	r3, r2, r3
 8020b84:	4acf      	ldr	r2, [pc, #828]	@ (8020ec4 <USB_EPStartXfer+0xe30>)
 8020b86:	4694      	mov	ip, r2
 8020b88:	4463      	add	r3, ip
 8020b8a:	218c      	movs	r1, #140	@ 0x8c
 8020b8c:	187a      	adds	r2, r7, r1
 8020b8e:	6013      	str	r3, [r2, #0]
 8020b90:	187b      	adds	r3, r7, r1
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	881b      	ldrh	r3, [r3, #0]
 8020b96:	b29b      	uxth	r3, r3
 8020b98:	059b      	lsls	r3, r3, #22
 8020b9a:	0d9b      	lsrs	r3, r3, #22
 8020b9c:	b29a      	uxth	r2, r3
 8020b9e:	187b      	adds	r3, r7, r1
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	801a      	strh	r2, [r3, #0]
 8020ba4:	1d7b      	adds	r3, r7, #5
 8020ba6:	33ff      	adds	r3, #255	@ 0xff
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	2b3e      	cmp	r3, #62	@ 0x3e
 8020bac:	d925      	bls.n	8020bfa <USB_EPStartXfer+0xb66>
 8020bae:	1d7b      	adds	r3, r7, #5
 8020bb0:	33ff      	adds	r3, #255	@ 0xff
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	095b      	lsrs	r3, r3, #5
 8020bb6:	21e8      	movs	r1, #232	@ 0xe8
 8020bb8:	187a      	adds	r2, r7, r1
 8020bba:	6013      	str	r3, [r2, #0]
 8020bbc:	1d7b      	adds	r3, r7, #5
 8020bbe:	33ff      	adds	r3, #255	@ 0xff
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	221f      	movs	r2, #31
 8020bc4:	4013      	ands	r3, r2
 8020bc6:	d104      	bne.n	8020bd2 <USB_EPStartXfer+0xb3e>
 8020bc8:	187b      	adds	r3, r7, r1
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	3b01      	subs	r3, #1
 8020bce:	187a      	adds	r2, r7, r1
 8020bd0:	6013      	str	r3, [r2, #0]
 8020bd2:	218c      	movs	r1, #140	@ 0x8c
 8020bd4:	187b      	adds	r3, r7, r1
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	881b      	ldrh	r3, [r3, #0]
 8020bda:	b29a      	uxth	r2, r3
 8020bdc:	23e8      	movs	r3, #232	@ 0xe8
 8020bde:	18fb      	adds	r3, r7, r3
 8020be0:	681b      	ldr	r3, [r3, #0]
 8020be2:	b29b      	uxth	r3, r3
 8020be4:	029b      	lsls	r3, r3, #10
 8020be6:	b29b      	uxth	r3, r3
 8020be8:	4313      	orrs	r3, r2
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	4ab6      	ldr	r2, [pc, #728]	@ (8020ec8 <USB_EPStartXfer+0xe34>)
 8020bee:	4313      	orrs	r3, r2
 8020bf0:	b29a      	uxth	r2, r3
 8020bf2:	187b      	adds	r3, r7, r1
 8020bf4:	681b      	ldr	r3, [r3, #0]
 8020bf6:	801a      	strh	r2, [r3, #0]
 8020bf8:	e353      	b.n	80212a2 <USB_EPStartXfer+0x120e>
 8020bfa:	1d7b      	adds	r3, r7, #5
 8020bfc:	33ff      	adds	r3, #255	@ 0xff
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	d10b      	bne.n	8020c1c <USB_EPStartXfer+0xb88>
 8020c04:	218c      	movs	r1, #140	@ 0x8c
 8020c06:	187b      	adds	r3, r7, r1
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	881b      	ldrh	r3, [r3, #0]
 8020c0c:	b29b      	uxth	r3, r3
 8020c0e:	4aae      	ldr	r2, [pc, #696]	@ (8020ec8 <USB_EPStartXfer+0xe34>)
 8020c10:	4313      	orrs	r3, r2
 8020c12:	b29a      	uxth	r2, r3
 8020c14:	187b      	adds	r3, r7, r1
 8020c16:	681b      	ldr	r3, [r3, #0]
 8020c18:	801a      	strh	r2, [r3, #0]
 8020c1a:	e342      	b.n	80212a2 <USB_EPStartXfer+0x120e>
 8020c1c:	1d7b      	adds	r3, r7, #5
 8020c1e:	33ff      	adds	r3, #255	@ 0xff
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	085b      	lsrs	r3, r3, #1
 8020c24:	21e8      	movs	r1, #232	@ 0xe8
 8020c26:	187a      	adds	r2, r7, r1
 8020c28:	6013      	str	r3, [r2, #0]
 8020c2a:	1d7b      	adds	r3, r7, #5
 8020c2c:	33ff      	adds	r3, #255	@ 0xff
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	2201      	movs	r2, #1
 8020c32:	4013      	ands	r3, r2
 8020c34:	d004      	beq.n	8020c40 <USB_EPStartXfer+0xbac>
 8020c36:	187b      	adds	r3, r7, r1
 8020c38:	681b      	ldr	r3, [r3, #0]
 8020c3a:	3301      	adds	r3, #1
 8020c3c:	187a      	adds	r2, r7, r1
 8020c3e:	6013      	str	r3, [r2, #0]
 8020c40:	218c      	movs	r1, #140	@ 0x8c
 8020c42:	187b      	adds	r3, r7, r1
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	881b      	ldrh	r3, [r3, #0]
 8020c48:	b29a      	uxth	r2, r3
 8020c4a:	23e8      	movs	r3, #232	@ 0xe8
 8020c4c:	18fb      	adds	r3, r7, r3
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	b29b      	uxth	r3, r3
 8020c52:	029b      	lsls	r3, r3, #10
 8020c54:	b29b      	uxth	r3, r3
 8020c56:	4313      	orrs	r3, r2
 8020c58:	b29a      	uxth	r2, r3
 8020c5a:	187b      	adds	r3, r7, r1
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	801a      	strh	r2, [r3, #0]
 8020c60:	e31f      	b.n	80212a2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8020c62:	683b      	ldr	r3, [r7, #0]
 8020c64:	78db      	ldrb	r3, [r3, #3]
 8020c66:	2b02      	cmp	r3, #2
 8020c68:	d000      	beq.n	8020c6c <USB_EPStartXfer+0xbd8>
 8020c6a:	e191      	b.n	8020f90 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020c6c:	683b      	ldr	r3, [r7, #0]
 8020c6e:	785b      	ldrb	r3, [r3, #1]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d000      	beq.n	8020c76 <USB_EPStartXfer+0xbe2>
 8020c74:	e07c      	b.n	8020d70 <USB_EPStartXfer+0xcdc>
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	21ac      	movs	r1, #172	@ 0xac
 8020c7a:	187a      	adds	r2, r7, r1
 8020c7c:	6013      	str	r3, [r2, #0]
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	2250      	movs	r2, #80	@ 0x50
 8020c82:	5a9b      	ldrh	r3, [r3, r2]
 8020c84:	b29b      	uxth	r3, r3
 8020c86:	001a      	movs	r2, r3
 8020c88:	187b      	adds	r3, r7, r1
 8020c8a:	681b      	ldr	r3, [r3, #0]
 8020c8c:	189b      	adds	r3, r3, r2
 8020c8e:	187a      	adds	r2, r7, r1
 8020c90:	6013      	str	r3, [r2, #0]
 8020c92:	683b      	ldr	r3, [r7, #0]
 8020c94:	781b      	ldrb	r3, [r3, #0]
 8020c96:	00da      	lsls	r2, r3, #3
 8020c98:	187b      	adds	r3, r7, r1
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	18d3      	adds	r3, r2, r3
 8020c9e:	4a8b      	ldr	r2, [pc, #556]	@ (8020ecc <USB_EPStartXfer+0xe38>)
 8020ca0:	4694      	mov	ip, r2
 8020ca2:	4463      	add	r3, ip
 8020ca4:	21a8      	movs	r1, #168	@ 0xa8
 8020ca6:	187a      	adds	r2, r7, r1
 8020ca8:	6013      	str	r3, [r2, #0]
 8020caa:	187b      	adds	r3, r7, r1
 8020cac:	681b      	ldr	r3, [r3, #0]
 8020cae:	881b      	ldrh	r3, [r3, #0]
 8020cb0:	b29b      	uxth	r3, r3
 8020cb2:	059b      	lsls	r3, r3, #22
 8020cb4:	0d9b      	lsrs	r3, r3, #22
 8020cb6:	b29a      	uxth	r2, r3
 8020cb8:	187b      	adds	r3, r7, r1
 8020cba:	681b      	ldr	r3, [r3, #0]
 8020cbc:	801a      	strh	r2, [r3, #0]
 8020cbe:	683b      	ldr	r3, [r7, #0]
 8020cc0:	691b      	ldr	r3, [r3, #16]
 8020cc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8020cc4:	d923      	bls.n	8020d0e <USB_EPStartXfer+0xc7a>
 8020cc6:	683b      	ldr	r3, [r7, #0]
 8020cc8:	691b      	ldr	r3, [r3, #16]
 8020cca:	095b      	lsrs	r3, r3, #5
 8020ccc:	21e4      	movs	r1, #228	@ 0xe4
 8020cce:	187a      	adds	r2, r7, r1
 8020cd0:	6013      	str	r3, [r2, #0]
 8020cd2:	683b      	ldr	r3, [r7, #0]
 8020cd4:	691b      	ldr	r3, [r3, #16]
 8020cd6:	221f      	movs	r2, #31
 8020cd8:	4013      	ands	r3, r2
 8020cda:	d104      	bne.n	8020ce6 <USB_EPStartXfer+0xc52>
 8020cdc:	187b      	adds	r3, r7, r1
 8020cde:	681b      	ldr	r3, [r3, #0]
 8020ce0:	3b01      	subs	r3, #1
 8020ce2:	187a      	adds	r2, r7, r1
 8020ce4:	6013      	str	r3, [r2, #0]
 8020ce6:	21a8      	movs	r1, #168	@ 0xa8
 8020ce8:	187b      	adds	r3, r7, r1
 8020cea:	681b      	ldr	r3, [r3, #0]
 8020cec:	881b      	ldrh	r3, [r3, #0]
 8020cee:	b29a      	uxth	r2, r3
 8020cf0:	23e4      	movs	r3, #228	@ 0xe4
 8020cf2:	18fb      	adds	r3, r7, r3
 8020cf4:	681b      	ldr	r3, [r3, #0]
 8020cf6:	b29b      	uxth	r3, r3
 8020cf8:	029b      	lsls	r3, r3, #10
 8020cfa:	b29b      	uxth	r3, r3
 8020cfc:	4313      	orrs	r3, r2
 8020cfe:	b29b      	uxth	r3, r3
 8020d00:	4a71      	ldr	r2, [pc, #452]	@ (8020ec8 <USB_EPStartXfer+0xe34>)
 8020d02:	4313      	orrs	r3, r2
 8020d04:	b29a      	uxth	r2, r3
 8020d06:	187b      	adds	r3, r7, r1
 8020d08:	681b      	ldr	r3, [r3, #0]
 8020d0a:	801a      	strh	r2, [r3, #0]
 8020d0c:	e054      	b.n	8020db8 <USB_EPStartXfer+0xd24>
 8020d0e:	683b      	ldr	r3, [r7, #0]
 8020d10:	691b      	ldr	r3, [r3, #16]
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	d10b      	bne.n	8020d2e <USB_EPStartXfer+0xc9a>
 8020d16:	21a8      	movs	r1, #168	@ 0xa8
 8020d18:	187b      	adds	r3, r7, r1
 8020d1a:	681b      	ldr	r3, [r3, #0]
 8020d1c:	881b      	ldrh	r3, [r3, #0]
 8020d1e:	b29b      	uxth	r3, r3
 8020d20:	4a69      	ldr	r2, [pc, #420]	@ (8020ec8 <USB_EPStartXfer+0xe34>)
 8020d22:	4313      	orrs	r3, r2
 8020d24:	b29a      	uxth	r2, r3
 8020d26:	187b      	adds	r3, r7, r1
 8020d28:	681b      	ldr	r3, [r3, #0]
 8020d2a:	801a      	strh	r2, [r3, #0]
 8020d2c:	e044      	b.n	8020db8 <USB_EPStartXfer+0xd24>
 8020d2e:	683b      	ldr	r3, [r7, #0]
 8020d30:	691b      	ldr	r3, [r3, #16]
 8020d32:	085b      	lsrs	r3, r3, #1
 8020d34:	21e4      	movs	r1, #228	@ 0xe4
 8020d36:	187a      	adds	r2, r7, r1
 8020d38:	6013      	str	r3, [r2, #0]
 8020d3a:	683b      	ldr	r3, [r7, #0]
 8020d3c:	691b      	ldr	r3, [r3, #16]
 8020d3e:	2201      	movs	r2, #1
 8020d40:	4013      	ands	r3, r2
 8020d42:	d004      	beq.n	8020d4e <USB_EPStartXfer+0xcba>
 8020d44:	187b      	adds	r3, r7, r1
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	3301      	adds	r3, #1
 8020d4a:	187a      	adds	r2, r7, r1
 8020d4c:	6013      	str	r3, [r2, #0]
 8020d4e:	21a8      	movs	r1, #168	@ 0xa8
 8020d50:	187b      	adds	r3, r7, r1
 8020d52:	681b      	ldr	r3, [r3, #0]
 8020d54:	881b      	ldrh	r3, [r3, #0]
 8020d56:	b29a      	uxth	r2, r3
 8020d58:	23e4      	movs	r3, #228	@ 0xe4
 8020d5a:	18fb      	adds	r3, r7, r3
 8020d5c:	681b      	ldr	r3, [r3, #0]
 8020d5e:	b29b      	uxth	r3, r3
 8020d60:	029b      	lsls	r3, r3, #10
 8020d62:	b29b      	uxth	r3, r3
 8020d64:	4313      	orrs	r3, r2
 8020d66:	b29a      	uxth	r2, r3
 8020d68:	187b      	adds	r3, r7, r1
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	801a      	strh	r2, [r3, #0]
 8020d6e:	e023      	b.n	8020db8 <USB_EPStartXfer+0xd24>
 8020d70:	683b      	ldr	r3, [r7, #0]
 8020d72:	785b      	ldrb	r3, [r3, #1]
 8020d74:	2b01      	cmp	r3, #1
 8020d76:	d11f      	bne.n	8020db8 <USB_EPStartXfer+0xd24>
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	21b4      	movs	r1, #180	@ 0xb4
 8020d7c:	187a      	adds	r2, r7, r1
 8020d7e:	6013      	str	r3, [r2, #0]
 8020d80:	687b      	ldr	r3, [r7, #4]
 8020d82:	2250      	movs	r2, #80	@ 0x50
 8020d84:	5a9b      	ldrh	r3, [r3, r2]
 8020d86:	b29b      	uxth	r3, r3
 8020d88:	001a      	movs	r2, r3
 8020d8a:	187b      	adds	r3, r7, r1
 8020d8c:	681b      	ldr	r3, [r3, #0]
 8020d8e:	189b      	adds	r3, r3, r2
 8020d90:	187a      	adds	r2, r7, r1
 8020d92:	6013      	str	r3, [r2, #0]
 8020d94:	683b      	ldr	r3, [r7, #0]
 8020d96:	781b      	ldrb	r3, [r3, #0]
 8020d98:	00da      	lsls	r2, r3, #3
 8020d9a:	187b      	adds	r3, r7, r1
 8020d9c:	681b      	ldr	r3, [r3, #0]
 8020d9e:	18d3      	adds	r3, r2, r3
 8020da0:	4a4a      	ldr	r2, [pc, #296]	@ (8020ecc <USB_EPStartXfer+0xe38>)
 8020da2:	4694      	mov	ip, r2
 8020da4:	4463      	add	r3, ip
 8020da6:	21b0      	movs	r1, #176	@ 0xb0
 8020da8:	187a      	adds	r2, r7, r1
 8020daa:	6013      	str	r3, [r2, #0]
 8020dac:	683b      	ldr	r3, [r7, #0]
 8020dae:	691b      	ldr	r3, [r3, #16]
 8020db0:	b29a      	uxth	r2, r3
 8020db2:	187b      	adds	r3, r7, r1
 8020db4:	681b      	ldr	r3, [r3, #0]
 8020db6:	801a      	strh	r2, [r3, #0]
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	22a4      	movs	r2, #164	@ 0xa4
 8020dbc:	18ba      	adds	r2, r7, r2
 8020dbe:	6013      	str	r3, [r2, #0]
 8020dc0:	683b      	ldr	r3, [r7, #0]
 8020dc2:	785b      	ldrb	r3, [r3, #1]
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	d000      	beq.n	8020dca <USB_EPStartXfer+0xd36>
 8020dc8:	e082      	b.n	8020ed0 <USB_EPStartXfer+0xe3c>
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	219c      	movs	r1, #156	@ 0x9c
 8020dce:	187a      	adds	r2, r7, r1
 8020dd0:	6013      	str	r3, [r2, #0]
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	2250      	movs	r2, #80	@ 0x50
 8020dd6:	5a9b      	ldrh	r3, [r3, r2]
 8020dd8:	b29b      	uxth	r3, r3
 8020dda:	001a      	movs	r2, r3
 8020ddc:	187b      	adds	r3, r7, r1
 8020dde:	681b      	ldr	r3, [r3, #0]
 8020de0:	189b      	adds	r3, r3, r2
 8020de2:	187a      	adds	r2, r7, r1
 8020de4:	6013      	str	r3, [r2, #0]
 8020de6:	683b      	ldr	r3, [r7, #0]
 8020de8:	781b      	ldrb	r3, [r3, #0]
 8020dea:	00da      	lsls	r2, r3, #3
 8020dec:	187b      	adds	r3, r7, r1
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	18d3      	adds	r3, r2, r3
 8020df2:	4a34      	ldr	r2, [pc, #208]	@ (8020ec4 <USB_EPStartXfer+0xe30>)
 8020df4:	4694      	mov	ip, r2
 8020df6:	4463      	add	r3, ip
 8020df8:	2198      	movs	r1, #152	@ 0x98
 8020dfa:	187a      	adds	r2, r7, r1
 8020dfc:	6013      	str	r3, [r2, #0]
 8020dfe:	187b      	adds	r3, r7, r1
 8020e00:	681b      	ldr	r3, [r3, #0]
 8020e02:	881b      	ldrh	r3, [r3, #0]
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	059b      	lsls	r3, r3, #22
 8020e08:	0d9b      	lsrs	r3, r3, #22
 8020e0a:	b29a      	uxth	r2, r3
 8020e0c:	187b      	adds	r3, r7, r1
 8020e0e:	681b      	ldr	r3, [r3, #0]
 8020e10:	801a      	strh	r2, [r3, #0]
 8020e12:	683b      	ldr	r3, [r7, #0]
 8020e14:	691b      	ldr	r3, [r3, #16]
 8020e16:	2b3e      	cmp	r3, #62	@ 0x3e
 8020e18:	d923      	bls.n	8020e62 <USB_EPStartXfer+0xdce>
 8020e1a:	683b      	ldr	r3, [r7, #0]
 8020e1c:	691b      	ldr	r3, [r3, #16]
 8020e1e:	095b      	lsrs	r3, r3, #5
 8020e20:	21e0      	movs	r1, #224	@ 0xe0
 8020e22:	187a      	adds	r2, r7, r1
 8020e24:	6013      	str	r3, [r2, #0]
 8020e26:	683b      	ldr	r3, [r7, #0]
 8020e28:	691b      	ldr	r3, [r3, #16]
 8020e2a:	221f      	movs	r2, #31
 8020e2c:	4013      	ands	r3, r2
 8020e2e:	d104      	bne.n	8020e3a <USB_EPStartXfer+0xda6>
 8020e30:	187b      	adds	r3, r7, r1
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	3b01      	subs	r3, #1
 8020e36:	187a      	adds	r2, r7, r1
 8020e38:	6013      	str	r3, [r2, #0]
 8020e3a:	2198      	movs	r1, #152	@ 0x98
 8020e3c:	187b      	adds	r3, r7, r1
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	881b      	ldrh	r3, [r3, #0]
 8020e42:	b29a      	uxth	r2, r3
 8020e44:	23e0      	movs	r3, #224	@ 0xe0
 8020e46:	18fb      	adds	r3, r7, r3
 8020e48:	681b      	ldr	r3, [r3, #0]
 8020e4a:	b29b      	uxth	r3, r3
 8020e4c:	029b      	lsls	r3, r3, #10
 8020e4e:	b29b      	uxth	r3, r3
 8020e50:	4313      	orrs	r3, r2
 8020e52:	b29b      	uxth	r3, r3
 8020e54:	4a1c      	ldr	r2, [pc, #112]	@ (8020ec8 <USB_EPStartXfer+0xe34>)
 8020e56:	4313      	orrs	r3, r2
 8020e58:	b29a      	uxth	r2, r3
 8020e5a:	187b      	adds	r3, r7, r1
 8020e5c:	681b      	ldr	r3, [r3, #0]
 8020e5e:	801a      	strh	r2, [r3, #0]
 8020e60:	e057      	b.n	8020f12 <USB_EPStartXfer+0xe7e>
 8020e62:	683b      	ldr	r3, [r7, #0]
 8020e64:	691b      	ldr	r3, [r3, #16]
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	d10b      	bne.n	8020e82 <USB_EPStartXfer+0xdee>
 8020e6a:	2198      	movs	r1, #152	@ 0x98
 8020e6c:	187b      	adds	r3, r7, r1
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	881b      	ldrh	r3, [r3, #0]
 8020e72:	b29b      	uxth	r3, r3
 8020e74:	4a14      	ldr	r2, [pc, #80]	@ (8020ec8 <USB_EPStartXfer+0xe34>)
 8020e76:	4313      	orrs	r3, r2
 8020e78:	b29a      	uxth	r2, r3
 8020e7a:	187b      	adds	r3, r7, r1
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	801a      	strh	r2, [r3, #0]
 8020e80:	e047      	b.n	8020f12 <USB_EPStartXfer+0xe7e>
 8020e82:	683b      	ldr	r3, [r7, #0]
 8020e84:	691b      	ldr	r3, [r3, #16]
 8020e86:	085b      	lsrs	r3, r3, #1
 8020e88:	21e0      	movs	r1, #224	@ 0xe0
 8020e8a:	187a      	adds	r2, r7, r1
 8020e8c:	6013      	str	r3, [r2, #0]
 8020e8e:	683b      	ldr	r3, [r7, #0]
 8020e90:	691b      	ldr	r3, [r3, #16]
 8020e92:	2201      	movs	r2, #1
 8020e94:	4013      	ands	r3, r2
 8020e96:	d004      	beq.n	8020ea2 <USB_EPStartXfer+0xe0e>
 8020e98:	187b      	adds	r3, r7, r1
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	3301      	adds	r3, #1
 8020e9e:	187a      	adds	r2, r7, r1
 8020ea0:	6013      	str	r3, [r2, #0]
 8020ea2:	2198      	movs	r1, #152	@ 0x98
 8020ea4:	187b      	adds	r3, r7, r1
 8020ea6:	681b      	ldr	r3, [r3, #0]
 8020ea8:	881b      	ldrh	r3, [r3, #0]
 8020eaa:	b29a      	uxth	r2, r3
 8020eac:	23e0      	movs	r3, #224	@ 0xe0
 8020eae:	18fb      	adds	r3, r7, r3
 8020eb0:	681b      	ldr	r3, [r3, #0]
 8020eb2:	b29b      	uxth	r3, r3
 8020eb4:	029b      	lsls	r3, r3, #10
 8020eb6:	b29b      	uxth	r3, r3
 8020eb8:	4313      	orrs	r3, r2
 8020eba:	b29a      	uxth	r2, r3
 8020ebc:	187b      	adds	r3, r7, r1
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	801a      	strh	r2, [r3, #0]
 8020ec2:	e026      	b.n	8020f12 <USB_EPStartXfer+0xe7e>
 8020ec4:	00000406 	.word	0x00000406
 8020ec8:	ffff8000 	.word	0xffff8000
 8020ecc:	00000402 	.word	0x00000402
 8020ed0:	683b      	ldr	r3, [r7, #0]
 8020ed2:	785b      	ldrb	r3, [r3, #1]
 8020ed4:	2b01      	cmp	r3, #1
 8020ed6:	d11c      	bne.n	8020f12 <USB_EPStartXfer+0xe7e>
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	2250      	movs	r2, #80	@ 0x50
 8020edc:	5a9b      	ldrh	r3, [r3, r2]
 8020ede:	b29b      	uxth	r3, r3
 8020ee0:	001a      	movs	r2, r3
 8020ee2:	21a4      	movs	r1, #164	@ 0xa4
 8020ee4:	187b      	adds	r3, r7, r1
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	189b      	adds	r3, r3, r2
 8020eea:	187a      	adds	r2, r7, r1
 8020eec:	6013      	str	r3, [r2, #0]
 8020eee:	683b      	ldr	r3, [r7, #0]
 8020ef0:	781b      	ldrb	r3, [r3, #0]
 8020ef2:	00da      	lsls	r2, r3, #3
 8020ef4:	187b      	adds	r3, r7, r1
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	18d3      	adds	r3, r2, r3
 8020efa:	4ad2      	ldr	r2, [pc, #840]	@ (8021244 <USB_EPStartXfer+0x11b0>)
 8020efc:	4694      	mov	ip, r2
 8020efe:	4463      	add	r3, ip
 8020f00:	21a0      	movs	r1, #160	@ 0xa0
 8020f02:	187a      	adds	r2, r7, r1
 8020f04:	6013      	str	r3, [r2, #0]
 8020f06:	683b      	ldr	r3, [r7, #0]
 8020f08:	691b      	ldr	r3, [r3, #16]
 8020f0a:	b29a      	uxth	r2, r3
 8020f0c:	187b      	adds	r3, r7, r1
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020f12:	683b      	ldr	r3, [r7, #0]
 8020f14:	69db      	ldr	r3, [r3, #28]
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d100      	bne.n	8020f1c <USB_EPStartXfer+0xe88>
 8020f1a:	e1c2      	b.n	80212a2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020f1c:	687a      	ldr	r2, [r7, #4]
 8020f1e:	683b      	ldr	r3, [r7, #0]
 8020f20:	781b      	ldrb	r3, [r3, #0]
 8020f22:	009b      	lsls	r3, r3, #2
 8020f24:	18d2      	adds	r2, r2, r3
 8020f26:	2196      	movs	r1, #150	@ 0x96
 8020f28:	187b      	adds	r3, r7, r1
 8020f2a:	8812      	ldrh	r2, [r2, #0]
 8020f2c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020f2e:	187b      	adds	r3, r7, r1
 8020f30:	881a      	ldrh	r2, [r3, #0]
 8020f32:	2380      	movs	r3, #128	@ 0x80
 8020f34:	01db      	lsls	r3, r3, #7
 8020f36:	4013      	ands	r3, r2
 8020f38:	d004      	beq.n	8020f44 <USB_EPStartXfer+0xeb0>
 8020f3a:	187b      	adds	r3, r7, r1
 8020f3c:	881b      	ldrh	r3, [r3, #0]
 8020f3e:	2240      	movs	r2, #64	@ 0x40
 8020f40:	4013      	ands	r3, r2
 8020f42:	d10d      	bne.n	8020f60 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020f44:	2196      	movs	r1, #150	@ 0x96
 8020f46:	187b      	adds	r3, r7, r1
 8020f48:	881a      	ldrh	r2, [r3, #0]
 8020f4a:	2380      	movs	r3, #128	@ 0x80
 8020f4c:	01db      	lsls	r3, r3, #7
 8020f4e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020f50:	d000      	beq.n	8020f54 <USB_EPStartXfer+0xec0>
 8020f52:	e1a6      	b.n	80212a2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020f54:	187b      	adds	r3, r7, r1
 8020f56:	881b      	ldrh	r3, [r3, #0]
 8020f58:	2240      	movs	r2, #64	@ 0x40
 8020f5a:	4013      	ands	r3, r2
 8020f5c:	d000      	beq.n	8020f60 <USB_EPStartXfer+0xecc>
 8020f5e:	e1a0      	b.n	80212a2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020f60:	687a      	ldr	r2, [r7, #4]
 8020f62:	683b      	ldr	r3, [r7, #0]
 8020f64:	781b      	ldrb	r3, [r3, #0]
 8020f66:	009b      	lsls	r3, r3, #2
 8020f68:	18d3      	adds	r3, r2, r3
 8020f6a:	881b      	ldrh	r3, [r3, #0]
 8020f6c:	b29a      	uxth	r2, r3
 8020f6e:	2094      	movs	r0, #148	@ 0x94
 8020f70:	183b      	adds	r3, r7, r0
 8020f72:	49b5      	ldr	r1, [pc, #724]	@ (8021248 <USB_EPStartXfer+0x11b4>)
 8020f74:	400a      	ands	r2, r1
 8020f76:	801a      	strh	r2, [r3, #0]
 8020f78:	687a      	ldr	r2, [r7, #4]
 8020f7a:	683b      	ldr	r3, [r7, #0]
 8020f7c:	781b      	ldrb	r3, [r3, #0]
 8020f7e:	009b      	lsls	r3, r3, #2
 8020f80:	18d3      	adds	r3, r2, r3
 8020f82:	183a      	adds	r2, r7, r0
 8020f84:	8812      	ldrh	r2, [r2, #0]
 8020f86:	49b1      	ldr	r1, [pc, #708]	@ (802124c <USB_EPStartXfer+0x11b8>)
 8020f88:	430a      	orrs	r2, r1
 8020f8a:	b292      	uxth	r2, r2
 8020f8c:	801a      	strh	r2, [r3, #0]
 8020f8e:	e188      	b.n	80212a2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	78db      	ldrb	r3, [r3, #3]
 8020f94:	2b01      	cmp	r3, #1
 8020f96:	d000      	beq.n	8020f9a <USB_EPStartXfer+0xf06>
 8020f98:	e181      	b.n	802129e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020f9a:	683b      	ldr	r3, [r7, #0]
 8020f9c:	699a      	ldr	r2, [r3, #24]
 8020f9e:	683b      	ldr	r3, [r7, #0]
 8020fa0:	691b      	ldr	r3, [r3, #16]
 8020fa2:	429a      	cmp	r2, r3
 8020fa4:	d90d      	bls.n	8020fc2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020fa6:	683b      	ldr	r3, [r7, #0]
 8020fa8:	691b      	ldr	r3, [r3, #16]
 8020faa:	1d7a      	adds	r2, r7, #5
 8020fac:	32ff      	adds	r2, #255	@ 0xff
 8020fae:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020fb0:	683b      	ldr	r3, [r7, #0]
 8020fb2:	699a      	ldr	r2, [r3, #24]
 8020fb4:	1d7b      	adds	r3, r7, #5
 8020fb6:	33ff      	adds	r3, #255	@ 0xff
 8020fb8:	681b      	ldr	r3, [r3, #0]
 8020fba:	1ad2      	subs	r2, r2, r3
 8020fbc:	683b      	ldr	r3, [r7, #0]
 8020fbe:	619a      	str	r2, [r3, #24]
 8020fc0:	e007      	b.n	8020fd2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020fc2:	683b      	ldr	r3, [r7, #0]
 8020fc4:	699b      	ldr	r3, [r3, #24]
 8020fc6:	1d7a      	adds	r2, r7, #5
 8020fc8:	32ff      	adds	r2, #255	@ 0xff
 8020fca:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020fcc:	683b      	ldr	r3, [r7, #0]
 8020fce:	2200      	movs	r2, #0
 8020fd0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020fd2:	683b      	ldr	r3, [r7, #0]
 8020fd4:	785b      	ldrb	r3, [r3, #1]
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	d000      	beq.n	8020fdc <USB_EPStartXfer+0xf48>
 8020fda:	e082      	b.n	80210e2 <USB_EPStartXfer+0x104e>
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	21cc      	movs	r1, #204	@ 0xcc
 8020fe0:	187a      	adds	r2, r7, r1
 8020fe2:	6013      	str	r3, [r2, #0]
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	2250      	movs	r2, #80	@ 0x50
 8020fe8:	5a9b      	ldrh	r3, [r3, r2]
 8020fea:	b29b      	uxth	r3, r3
 8020fec:	001a      	movs	r2, r3
 8020fee:	187b      	adds	r3, r7, r1
 8020ff0:	681b      	ldr	r3, [r3, #0]
 8020ff2:	189b      	adds	r3, r3, r2
 8020ff4:	187a      	adds	r2, r7, r1
 8020ff6:	6013      	str	r3, [r2, #0]
 8020ff8:	683b      	ldr	r3, [r7, #0]
 8020ffa:	781b      	ldrb	r3, [r3, #0]
 8020ffc:	00da      	lsls	r2, r3, #3
 8020ffe:	187b      	adds	r3, r7, r1
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	18d3      	adds	r3, r2, r3
 8021004:	4a92      	ldr	r2, [pc, #584]	@ (8021250 <USB_EPStartXfer+0x11bc>)
 8021006:	4694      	mov	ip, r2
 8021008:	4463      	add	r3, ip
 802100a:	21c8      	movs	r1, #200	@ 0xc8
 802100c:	187a      	adds	r2, r7, r1
 802100e:	6013      	str	r3, [r2, #0]
 8021010:	187b      	adds	r3, r7, r1
 8021012:	681b      	ldr	r3, [r3, #0]
 8021014:	881b      	ldrh	r3, [r3, #0]
 8021016:	b29b      	uxth	r3, r3
 8021018:	059b      	lsls	r3, r3, #22
 802101a:	0d9b      	lsrs	r3, r3, #22
 802101c:	b29a      	uxth	r2, r3
 802101e:	187b      	adds	r3, r7, r1
 8021020:	681b      	ldr	r3, [r3, #0]
 8021022:	801a      	strh	r2, [r3, #0]
 8021024:	1d7b      	adds	r3, r7, #5
 8021026:	33ff      	adds	r3, #255	@ 0xff
 8021028:	681b      	ldr	r3, [r3, #0]
 802102a:	2b3e      	cmp	r3, #62	@ 0x3e
 802102c:	d925      	bls.n	802107a <USB_EPStartXfer+0xfe6>
 802102e:	1d7b      	adds	r3, r7, #5
 8021030:	33ff      	adds	r3, #255	@ 0xff
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	095b      	lsrs	r3, r3, #5
 8021036:	21dc      	movs	r1, #220	@ 0xdc
 8021038:	187a      	adds	r2, r7, r1
 802103a:	6013      	str	r3, [r2, #0]
 802103c:	1d7b      	adds	r3, r7, #5
 802103e:	33ff      	adds	r3, #255	@ 0xff
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	221f      	movs	r2, #31
 8021044:	4013      	ands	r3, r2
 8021046:	d104      	bne.n	8021052 <USB_EPStartXfer+0xfbe>
 8021048:	187b      	adds	r3, r7, r1
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	3b01      	subs	r3, #1
 802104e:	187a      	adds	r2, r7, r1
 8021050:	6013      	str	r3, [r2, #0]
 8021052:	21c8      	movs	r1, #200	@ 0xc8
 8021054:	187b      	adds	r3, r7, r1
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	881b      	ldrh	r3, [r3, #0]
 802105a:	b29a      	uxth	r2, r3
 802105c:	23dc      	movs	r3, #220	@ 0xdc
 802105e:	18fb      	adds	r3, r7, r3
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	b29b      	uxth	r3, r3
 8021064:	029b      	lsls	r3, r3, #10
 8021066:	b29b      	uxth	r3, r3
 8021068:	4313      	orrs	r3, r2
 802106a:	b29b      	uxth	r3, r3
 802106c:	4a79      	ldr	r2, [pc, #484]	@ (8021254 <USB_EPStartXfer+0x11c0>)
 802106e:	4313      	orrs	r3, r2
 8021070:	b29a      	uxth	r2, r3
 8021072:	187b      	adds	r3, r7, r1
 8021074:	681b      	ldr	r3, [r3, #0]
 8021076:	801a      	strh	r2, [r3, #0]
 8021078:	e058      	b.n	802112c <USB_EPStartXfer+0x1098>
 802107a:	1d7b      	adds	r3, r7, #5
 802107c:	33ff      	adds	r3, #255	@ 0xff
 802107e:	681b      	ldr	r3, [r3, #0]
 8021080:	2b00      	cmp	r3, #0
 8021082:	d10b      	bne.n	802109c <USB_EPStartXfer+0x1008>
 8021084:	21c8      	movs	r1, #200	@ 0xc8
 8021086:	187b      	adds	r3, r7, r1
 8021088:	681b      	ldr	r3, [r3, #0]
 802108a:	881b      	ldrh	r3, [r3, #0]
 802108c:	b29b      	uxth	r3, r3
 802108e:	4a71      	ldr	r2, [pc, #452]	@ (8021254 <USB_EPStartXfer+0x11c0>)
 8021090:	4313      	orrs	r3, r2
 8021092:	b29a      	uxth	r2, r3
 8021094:	187b      	adds	r3, r7, r1
 8021096:	681b      	ldr	r3, [r3, #0]
 8021098:	801a      	strh	r2, [r3, #0]
 802109a:	e047      	b.n	802112c <USB_EPStartXfer+0x1098>
 802109c:	1d7b      	adds	r3, r7, #5
 802109e:	33ff      	adds	r3, #255	@ 0xff
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	085b      	lsrs	r3, r3, #1
 80210a4:	21dc      	movs	r1, #220	@ 0xdc
 80210a6:	187a      	adds	r2, r7, r1
 80210a8:	6013      	str	r3, [r2, #0]
 80210aa:	1d7b      	adds	r3, r7, #5
 80210ac:	33ff      	adds	r3, #255	@ 0xff
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	2201      	movs	r2, #1
 80210b2:	4013      	ands	r3, r2
 80210b4:	d004      	beq.n	80210c0 <USB_EPStartXfer+0x102c>
 80210b6:	187b      	adds	r3, r7, r1
 80210b8:	681b      	ldr	r3, [r3, #0]
 80210ba:	3301      	adds	r3, #1
 80210bc:	187a      	adds	r2, r7, r1
 80210be:	6013      	str	r3, [r2, #0]
 80210c0:	21c8      	movs	r1, #200	@ 0xc8
 80210c2:	187b      	adds	r3, r7, r1
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	881b      	ldrh	r3, [r3, #0]
 80210c8:	b29a      	uxth	r2, r3
 80210ca:	23dc      	movs	r3, #220	@ 0xdc
 80210cc:	18fb      	adds	r3, r7, r3
 80210ce:	681b      	ldr	r3, [r3, #0]
 80210d0:	b29b      	uxth	r3, r3
 80210d2:	029b      	lsls	r3, r3, #10
 80210d4:	b29b      	uxth	r3, r3
 80210d6:	4313      	orrs	r3, r2
 80210d8:	b29a      	uxth	r2, r3
 80210da:	187b      	adds	r3, r7, r1
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	801a      	strh	r2, [r3, #0]
 80210e0:	e024      	b.n	802112c <USB_EPStartXfer+0x1098>
 80210e2:	683b      	ldr	r3, [r7, #0]
 80210e4:	785b      	ldrb	r3, [r3, #1]
 80210e6:	2b01      	cmp	r3, #1
 80210e8:	d120      	bne.n	802112c <USB_EPStartXfer+0x1098>
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	21d4      	movs	r1, #212	@ 0xd4
 80210ee:	187a      	adds	r2, r7, r1
 80210f0:	6013      	str	r3, [r2, #0]
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	2250      	movs	r2, #80	@ 0x50
 80210f6:	5a9b      	ldrh	r3, [r3, r2]
 80210f8:	b29b      	uxth	r3, r3
 80210fa:	001a      	movs	r2, r3
 80210fc:	187b      	adds	r3, r7, r1
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	189b      	adds	r3, r3, r2
 8021102:	187a      	adds	r2, r7, r1
 8021104:	6013      	str	r3, [r2, #0]
 8021106:	683b      	ldr	r3, [r7, #0]
 8021108:	781b      	ldrb	r3, [r3, #0]
 802110a:	00da      	lsls	r2, r3, #3
 802110c:	187b      	adds	r3, r7, r1
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	18d3      	adds	r3, r2, r3
 8021112:	4a4f      	ldr	r2, [pc, #316]	@ (8021250 <USB_EPStartXfer+0x11bc>)
 8021114:	4694      	mov	ip, r2
 8021116:	4463      	add	r3, ip
 8021118:	21d0      	movs	r1, #208	@ 0xd0
 802111a:	187a      	adds	r2, r7, r1
 802111c:	6013      	str	r3, [r2, #0]
 802111e:	1d7b      	adds	r3, r7, #5
 8021120:	33ff      	adds	r3, #255	@ 0xff
 8021122:	681b      	ldr	r3, [r3, #0]
 8021124:	b29a      	uxth	r2, r3
 8021126:	187b      	adds	r3, r7, r1
 8021128:	681b      	ldr	r3, [r3, #0]
 802112a:	801a      	strh	r2, [r3, #0]
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	22c4      	movs	r2, #196	@ 0xc4
 8021130:	18ba      	adds	r2, r7, r2
 8021132:	6013      	str	r3, [r2, #0]
 8021134:	683b      	ldr	r3, [r7, #0]
 8021136:	785b      	ldrb	r3, [r3, #1]
 8021138:	2b00      	cmp	r3, #0
 802113a:	d000      	beq.n	802113e <USB_EPStartXfer+0x10aa>
 802113c:	e08c      	b.n	8021258 <USB_EPStartXfer+0x11c4>
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	21bc      	movs	r1, #188	@ 0xbc
 8021142:	187a      	adds	r2, r7, r1
 8021144:	6013      	str	r3, [r2, #0]
 8021146:	687b      	ldr	r3, [r7, #4]
 8021148:	2250      	movs	r2, #80	@ 0x50
 802114a:	5a9b      	ldrh	r3, [r3, r2]
 802114c:	b29b      	uxth	r3, r3
 802114e:	001a      	movs	r2, r3
 8021150:	187b      	adds	r3, r7, r1
 8021152:	681b      	ldr	r3, [r3, #0]
 8021154:	189b      	adds	r3, r3, r2
 8021156:	187a      	adds	r2, r7, r1
 8021158:	6013      	str	r3, [r2, #0]
 802115a:	683b      	ldr	r3, [r7, #0]
 802115c:	781b      	ldrb	r3, [r3, #0]
 802115e:	00da      	lsls	r2, r3, #3
 8021160:	187b      	adds	r3, r7, r1
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	18d3      	adds	r3, r2, r3
 8021166:	4a37      	ldr	r2, [pc, #220]	@ (8021244 <USB_EPStartXfer+0x11b0>)
 8021168:	4694      	mov	ip, r2
 802116a:	4463      	add	r3, ip
 802116c:	21b8      	movs	r1, #184	@ 0xb8
 802116e:	187a      	adds	r2, r7, r1
 8021170:	6013      	str	r3, [r2, #0]
 8021172:	187b      	adds	r3, r7, r1
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	881b      	ldrh	r3, [r3, #0]
 8021178:	b29b      	uxth	r3, r3
 802117a:	059b      	lsls	r3, r3, #22
 802117c:	0d9b      	lsrs	r3, r3, #22
 802117e:	b29a      	uxth	r2, r3
 8021180:	187b      	adds	r3, r7, r1
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	801a      	strh	r2, [r3, #0]
 8021186:	1d7b      	adds	r3, r7, #5
 8021188:	33ff      	adds	r3, #255	@ 0xff
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	2b3e      	cmp	r3, #62	@ 0x3e
 802118e:	d925      	bls.n	80211dc <USB_EPStartXfer+0x1148>
 8021190:	1d7b      	adds	r3, r7, #5
 8021192:	33ff      	adds	r3, #255	@ 0xff
 8021194:	681b      	ldr	r3, [r3, #0]
 8021196:	095b      	lsrs	r3, r3, #5
 8021198:	21d8      	movs	r1, #216	@ 0xd8
 802119a:	187a      	adds	r2, r7, r1
 802119c:	6013      	str	r3, [r2, #0]
 802119e:	1d7b      	adds	r3, r7, #5
 80211a0:	33ff      	adds	r3, #255	@ 0xff
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	221f      	movs	r2, #31
 80211a6:	4013      	ands	r3, r2
 80211a8:	d104      	bne.n	80211b4 <USB_EPStartXfer+0x1120>
 80211aa:	187b      	adds	r3, r7, r1
 80211ac:	681b      	ldr	r3, [r3, #0]
 80211ae:	3b01      	subs	r3, #1
 80211b0:	187a      	adds	r2, r7, r1
 80211b2:	6013      	str	r3, [r2, #0]
 80211b4:	21b8      	movs	r1, #184	@ 0xb8
 80211b6:	187b      	adds	r3, r7, r1
 80211b8:	681b      	ldr	r3, [r3, #0]
 80211ba:	881b      	ldrh	r3, [r3, #0]
 80211bc:	b29a      	uxth	r2, r3
 80211be:	23d8      	movs	r3, #216	@ 0xd8
 80211c0:	18fb      	adds	r3, r7, r3
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	b29b      	uxth	r3, r3
 80211c6:	029b      	lsls	r3, r3, #10
 80211c8:	b29b      	uxth	r3, r3
 80211ca:	4313      	orrs	r3, r2
 80211cc:	b29b      	uxth	r3, r3
 80211ce:	4a21      	ldr	r2, [pc, #132]	@ (8021254 <USB_EPStartXfer+0x11c0>)
 80211d0:	4313      	orrs	r3, r2
 80211d2:	b29a      	uxth	r2, r3
 80211d4:	187b      	adds	r3, r7, r1
 80211d6:	681b      	ldr	r3, [r3, #0]
 80211d8:	801a      	strh	r2, [r3, #0]
 80211da:	e062      	b.n	80212a2 <USB_EPStartXfer+0x120e>
 80211dc:	1d7b      	adds	r3, r7, #5
 80211de:	33ff      	adds	r3, #255	@ 0xff
 80211e0:	681b      	ldr	r3, [r3, #0]
 80211e2:	2b00      	cmp	r3, #0
 80211e4:	d10b      	bne.n	80211fe <USB_EPStartXfer+0x116a>
 80211e6:	21b8      	movs	r1, #184	@ 0xb8
 80211e8:	187b      	adds	r3, r7, r1
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	881b      	ldrh	r3, [r3, #0]
 80211ee:	b29b      	uxth	r3, r3
 80211f0:	4a18      	ldr	r2, [pc, #96]	@ (8021254 <USB_EPStartXfer+0x11c0>)
 80211f2:	4313      	orrs	r3, r2
 80211f4:	b29a      	uxth	r2, r3
 80211f6:	187b      	adds	r3, r7, r1
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	801a      	strh	r2, [r3, #0]
 80211fc:	e051      	b.n	80212a2 <USB_EPStartXfer+0x120e>
 80211fe:	1d7b      	adds	r3, r7, #5
 8021200:	33ff      	adds	r3, #255	@ 0xff
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	085b      	lsrs	r3, r3, #1
 8021206:	21d8      	movs	r1, #216	@ 0xd8
 8021208:	187a      	adds	r2, r7, r1
 802120a:	6013      	str	r3, [r2, #0]
 802120c:	1d7b      	adds	r3, r7, #5
 802120e:	33ff      	adds	r3, #255	@ 0xff
 8021210:	681b      	ldr	r3, [r3, #0]
 8021212:	2201      	movs	r2, #1
 8021214:	4013      	ands	r3, r2
 8021216:	d004      	beq.n	8021222 <USB_EPStartXfer+0x118e>
 8021218:	187b      	adds	r3, r7, r1
 802121a:	681b      	ldr	r3, [r3, #0]
 802121c:	3301      	adds	r3, #1
 802121e:	187a      	adds	r2, r7, r1
 8021220:	6013      	str	r3, [r2, #0]
 8021222:	21b8      	movs	r1, #184	@ 0xb8
 8021224:	187b      	adds	r3, r7, r1
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	881b      	ldrh	r3, [r3, #0]
 802122a:	b29a      	uxth	r2, r3
 802122c:	23d8      	movs	r3, #216	@ 0xd8
 802122e:	18fb      	adds	r3, r7, r3
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	b29b      	uxth	r3, r3
 8021234:	029b      	lsls	r3, r3, #10
 8021236:	b29b      	uxth	r3, r3
 8021238:	4313      	orrs	r3, r2
 802123a:	b29a      	uxth	r2, r3
 802123c:	187b      	adds	r3, r7, r1
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	801a      	strh	r2, [r3, #0]
 8021242:	e02e      	b.n	80212a2 <USB_EPStartXfer+0x120e>
 8021244:	00000406 	.word	0x00000406
 8021248:	ffff8f8f 	.word	0xffff8f8f
 802124c:	ffff80c0 	.word	0xffff80c0
 8021250:	00000402 	.word	0x00000402
 8021254:	ffff8000 	.word	0xffff8000
 8021258:	683b      	ldr	r3, [r7, #0]
 802125a:	785b      	ldrb	r3, [r3, #1]
 802125c:	2b01      	cmp	r3, #1
 802125e:	d120      	bne.n	80212a2 <USB_EPStartXfer+0x120e>
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	2250      	movs	r2, #80	@ 0x50
 8021264:	5a9b      	ldrh	r3, [r3, r2]
 8021266:	b29b      	uxth	r3, r3
 8021268:	001a      	movs	r2, r3
 802126a:	21c4      	movs	r1, #196	@ 0xc4
 802126c:	187b      	adds	r3, r7, r1
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	189b      	adds	r3, r3, r2
 8021272:	187a      	adds	r2, r7, r1
 8021274:	6013      	str	r3, [r2, #0]
 8021276:	683b      	ldr	r3, [r7, #0]
 8021278:	781b      	ldrb	r3, [r3, #0]
 802127a:	00da      	lsls	r2, r3, #3
 802127c:	187b      	adds	r3, r7, r1
 802127e:	681b      	ldr	r3, [r3, #0]
 8021280:	18d3      	adds	r3, r2, r3
 8021282:	4a1d      	ldr	r2, [pc, #116]	@ (80212f8 <USB_EPStartXfer+0x1264>)
 8021284:	4694      	mov	ip, r2
 8021286:	4463      	add	r3, ip
 8021288:	21c0      	movs	r1, #192	@ 0xc0
 802128a:	187a      	adds	r2, r7, r1
 802128c:	6013      	str	r3, [r2, #0]
 802128e:	1d7b      	adds	r3, r7, #5
 8021290:	33ff      	adds	r3, #255	@ 0xff
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	b29a      	uxth	r2, r3
 8021296:	187b      	adds	r3, r7, r1
 8021298:	681b      	ldr	r3, [r3, #0]
 802129a:	801a      	strh	r2, [r3, #0]
 802129c:	e001      	b.n	80212a2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 802129e:	2301      	movs	r3, #1
 80212a0:	e025      	b.n	80212ee <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80212a2:	687a      	ldr	r2, [r7, #4]
 80212a4:	683b      	ldr	r3, [r7, #0]
 80212a6:	781b      	ldrb	r3, [r3, #0]
 80212a8:	009b      	lsls	r3, r3, #2
 80212aa:	18d3      	adds	r3, r2, r3
 80212ac:	881b      	ldrh	r3, [r3, #0]
 80212ae:	b29a      	uxth	r2, r3
 80212b0:	208a      	movs	r0, #138	@ 0x8a
 80212b2:	183b      	adds	r3, r7, r0
 80212b4:	4911      	ldr	r1, [pc, #68]	@ (80212fc <USB_EPStartXfer+0x1268>)
 80212b6:	400a      	ands	r2, r1
 80212b8:	801a      	strh	r2, [r3, #0]
 80212ba:	183b      	adds	r3, r7, r0
 80212bc:	183a      	adds	r2, r7, r0
 80212be:	8812      	ldrh	r2, [r2, #0]
 80212c0:	2180      	movs	r1, #128	@ 0x80
 80212c2:	0149      	lsls	r1, r1, #5
 80212c4:	404a      	eors	r2, r1
 80212c6:	801a      	strh	r2, [r3, #0]
 80212c8:	183b      	adds	r3, r7, r0
 80212ca:	183a      	adds	r2, r7, r0
 80212cc:	8812      	ldrh	r2, [r2, #0]
 80212ce:	2180      	movs	r1, #128	@ 0x80
 80212d0:	0189      	lsls	r1, r1, #6
 80212d2:	404a      	eors	r2, r1
 80212d4:	801a      	strh	r2, [r3, #0]
 80212d6:	687a      	ldr	r2, [r7, #4]
 80212d8:	683b      	ldr	r3, [r7, #0]
 80212da:	781b      	ldrb	r3, [r3, #0]
 80212dc:	009b      	lsls	r3, r3, #2
 80212de:	18d3      	adds	r3, r2, r3
 80212e0:	183a      	adds	r2, r7, r0
 80212e2:	8812      	ldrh	r2, [r2, #0]
 80212e4:	4906      	ldr	r1, [pc, #24]	@ (8021300 <USB_EPStartXfer+0x126c>)
 80212e6:	430a      	orrs	r2, r1
 80212e8:	b292      	uxth	r2, r2
 80212ea:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80212ec:	2300      	movs	r3, #0
}
 80212ee:	0018      	movs	r0, r3
 80212f0:	46bd      	mov	sp, r7
 80212f2:	b043      	add	sp, #268	@ 0x10c
 80212f4:	bd90      	pop	{r4, r7, pc}
 80212f6:	46c0      	nop			@ (mov r8, r8)
 80212f8:	00000406 	.word	0x00000406
 80212fc:	ffffbf8f 	.word	0xffffbf8f
 8021300:	ffff8080 	.word	0xffff8080

08021304 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021304:	b580      	push	{r7, lr}
 8021306:	b084      	sub	sp, #16
 8021308:	af00      	add	r7, sp, #0
 802130a:	6078      	str	r0, [r7, #4]
 802130c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 802130e:	683b      	ldr	r3, [r7, #0]
 8021310:	785b      	ldrb	r3, [r3, #1]
 8021312:	2b00      	cmp	r3, #0
 8021314:	d01d      	beq.n	8021352 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8021316:	687a      	ldr	r2, [r7, #4]
 8021318:	683b      	ldr	r3, [r7, #0]
 802131a:	781b      	ldrb	r3, [r3, #0]
 802131c:	009b      	lsls	r3, r3, #2
 802131e:	18d3      	adds	r3, r2, r3
 8021320:	881b      	ldrh	r3, [r3, #0]
 8021322:	b29a      	uxth	r2, r3
 8021324:	200c      	movs	r0, #12
 8021326:	183b      	adds	r3, r7, r0
 8021328:	491b      	ldr	r1, [pc, #108]	@ (8021398 <USB_EPSetStall+0x94>)
 802132a:	400a      	ands	r2, r1
 802132c:	801a      	strh	r2, [r3, #0]
 802132e:	183b      	adds	r3, r7, r0
 8021330:	183a      	adds	r2, r7, r0
 8021332:	8812      	ldrh	r2, [r2, #0]
 8021334:	2110      	movs	r1, #16
 8021336:	404a      	eors	r2, r1
 8021338:	801a      	strh	r2, [r3, #0]
 802133a:	687a      	ldr	r2, [r7, #4]
 802133c:	683b      	ldr	r3, [r7, #0]
 802133e:	781b      	ldrb	r3, [r3, #0]
 8021340:	009b      	lsls	r3, r3, #2
 8021342:	18d3      	adds	r3, r2, r3
 8021344:	183a      	adds	r2, r7, r0
 8021346:	8812      	ldrh	r2, [r2, #0]
 8021348:	4914      	ldr	r1, [pc, #80]	@ (802139c <USB_EPSetStall+0x98>)
 802134a:	430a      	orrs	r2, r1
 802134c:	b292      	uxth	r2, r2
 802134e:	801a      	strh	r2, [r3, #0]
 8021350:	e01d      	b.n	802138e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8021352:	687a      	ldr	r2, [r7, #4]
 8021354:	683b      	ldr	r3, [r7, #0]
 8021356:	781b      	ldrb	r3, [r3, #0]
 8021358:	009b      	lsls	r3, r3, #2
 802135a:	18d3      	adds	r3, r2, r3
 802135c:	881b      	ldrh	r3, [r3, #0]
 802135e:	b29a      	uxth	r2, r3
 8021360:	200e      	movs	r0, #14
 8021362:	183b      	adds	r3, r7, r0
 8021364:	490e      	ldr	r1, [pc, #56]	@ (80213a0 <USB_EPSetStall+0x9c>)
 8021366:	400a      	ands	r2, r1
 8021368:	801a      	strh	r2, [r3, #0]
 802136a:	183b      	adds	r3, r7, r0
 802136c:	183a      	adds	r2, r7, r0
 802136e:	8812      	ldrh	r2, [r2, #0]
 8021370:	2180      	movs	r1, #128	@ 0x80
 8021372:	0149      	lsls	r1, r1, #5
 8021374:	404a      	eors	r2, r1
 8021376:	801a      	strh	r2, [r3, #0]
 8021378:	687a      	ldr	r2, [r7, #4]
 802137a:	683b      	ldr	r3, [r7, #0]
 802137c:	781b      	ldrb	r3, [r3, #0]
 802137e:	009b      	lsls	r3, r3, #2
 8021380:	18d3      	adds	r3, r2, r3
 8021382:	183a      	adds	r2, r7, r0
 8021384:	8812      	ldrh	r2, [r2, #0]
 8021386:	4905      	ldr	r1, [pc, #20]	@ (802139c <USB_EPSetStall+0x98>)
 8021388:	430a      	orrs	r2, r1
 802138a:	b292      	uxth	r2, r2
 802138c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 802138e:	2300      	movs	r3, #0
}
 8021390:	0018      	movs	r0, r3
 8021392:	46bd      	mov	sp, r7
 8021394:	b004      	add	sp, #16
 8021396:	bd80      	pop	{r7, pc}
 8021398:	ffff8fbf 	.word	0xffff8fbf
 802139c:	ffff8080 	.word	0xffff8080
 80213a0:	ffffbf8f 	.word	0xffffbf8f

080213a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80213a4:	b580      	push	{r7, lr}
 80213a6:	b086      	sub	sp, #24
 80213a8:	af00      	add	r7, sp, #0
 80213aa:	6078      	str	r0, [r7, #4]
 80213ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80213ae:	683b      	ldr	r3, [r7, #0]
 80213b0:	7b1b      	ldrb	r3, [r3, #12]
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d000      	beq.n	80213b8 <USB_EPClearStall+0x14>
 80213b6:	e095      	b.n	80214e4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80213b8:	683b      	ldr	r3, [r7, #0]
 80213ba:	785b      	ldrb	r3, [r3, #1]
 80213bc:	2b00      	cmp	r3, #0
 80213be:	d046      	beq.n	802144e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80213c0:	687a      	ldr	r2, [r7, #4]
 80213c2:	683b      	ldr	r3, [r7, #0]
 80213c4:	781b      	ldrb	r3, [r3, #0]
 80213c6:	009b      	lsls	r3, r3, #2
 80213c8:	18d2      	adds	r2, r2, r3
 80213ca:	2110      	movs	r1, #16
 80213cc:	187b      	adds	r3, r7, r1
 80213ce:	8812      	ldrh	r2, [r2, #0]
 80213d0:	801a      	strh	r2, [r3, #0]
 80213d2:	187b      	adds	r3, r7, r1
 80213d4:	881b      	ldrh	r3, [r3, #0]
 80213d6:	2240      	movs	r2, #64	@ 0x40
 80213d8:	4013      	ands	r3, r2
 80213da:	d016      	beq.n	802140a <USB_EPClearStall+0x66>
 80213dc:	687a      	ldr	r2, [r7, #4]
 80213de:	683b      	ldr	r3, [r7, #0]
 80213e0:	781b      	ldrb	r3, [r3, #0]
 80213e2:	009b      	lsls	r3, r3, #2
 80213e4:	18d3      	adds	r3, r2, r3
 80213e6:	881b      	ldrh	r3, [r3, #0]
 80213e8:	b29a      	uxth	r2, r3
 80213ea:	200e      	movs	r0, #14
 80213ec:	183b      	adds	r3, r7, r0
 80213ee:	4940      	ldr	r1, [pc, #256]	@ (80214f0 <USB_EPClearStall+0x14c>)
 80213f0:	400a      	ands	r2, r1
 80213f2:	801a      	strh	r2, [r3, #0]
 80213f4:	687a      	ldr	r2, [r7, #4]
 80213f6:	683b      	ldr	r3, [r7, #0]
 80213f8:	781b      	ldrb	r3, [r3, #0]
 80213fa:	009b      	lsls	r3, r3, #2
 80213fc:	18d3      	adds	r3, r2, r3
 80213fe:	183a      	adds	r2, r7, r0
 8021400:	8812      	ldrh	r2, [r2, #0]
 8021402:	493c      	ldr	r1, [pc, #240]	@ (80214f4 <USB_EPClearStall+0x150>)
 8021404:	430a      	orrs	r2, r1
 8021406:	b292      	uxth	r2, r2
 8021408:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 802140a:	683b      	ldr	r3, [r7, #0]
 802140c:	78db      	ldrb	r3, [r3, #3]
 802140e:	2b01      	cmp	r3, #1
 8021410:	d068      	beq.n	80214e4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8021412:	687a      	ldr	r2, [r7, #4]
 8021414:	683b      	ldr	r3, [r7, #0]
 8021416:	781b      	ldrb	r3, [r3, #0]
 8021418:	009b      	lsls	r3, r3, #2
 802141a:	18d3      	adds	r3, r2, r3
 802141c:	881b      	ldrh	r3, [r3, #0]
 802141e:	b29a      	uxth	r2, r3
 8021420:	200c      	movs	r0, #12
 8021422:	183b      	adds	r3, r7, r0
 8021424:	4934      	ldr	r1, [pc, #208]	@ (80214f8 <USB_EPClearStall+0x154>)
 8021426:	400a      	ands	r2, r1
 8021428:	801a      	strh	r2, [r3, #0]
 802142a:	183b      	adds	r3, r7, r0
 802142c:	183a      	adds	r2, r7, r0
 802142e:	8812      	ldrh	r2, [r2, #0]
 8021430:	2120      	movs	r1, #32
 8021432:	404a      	eors	r2, r1
 8021434:	801a      	strh	r2, [r3, #0]
 8021436:	687a      	ldr	r2, [r7, #4]
 8021438:	683b      	ldr	r3, [r7, #0]
 802143a:	781b      	ldrb	r3, [r3, #0]
 802143c:	009b      	lsls	r3, r3, #2
 802143e:	18d3      	adds	r3, r2, r3
 8021440:	183a      	adds	r2, r7, r0
 8021442:	8812      	ldrh	r2, [r2, #0]
 8021444:	492d      	ldr	r1, [pc, #180]	@ (80214fc <USB_EPClearStall+0x158>)
 8021446:	430a      	orrs	r2, r1
 8021448:	b292      	uxth	r2, r2
 802144a:	801a      	strh	r2, [r3, #0]
 802144c:	e04a      	b.n	80214e4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802144e:	687a      	ldr	r2, [r7, #4]
 8021450:	683b      	ldr	r3, [r7, #0]
 8021452:	781b      	ldrb	r3, [r3, #0]
 8021454:	009b      	lsls	r3, r3, #2
 8021456:	18d2      	adds	r2, r2, r3
 8021458:	2116      	movs	r1, #22
 802145a:	187b      	adds	r3, r7, r1
 802145c:	8812      	ldrh	r2, [r2, #0]
 802145e:	801a      	strh	r2, [r3, #0]
 8021460:	187b      	adds	r3, r7, r1
 8021462:	881a      	ldrh	r2, [r3, #0]
 8021464:	2380      	movs	r3, #128	@ 0x80
 8021466:	01db      	lsls	r3, r3, #7
 8021468:	4013      	ands	r3, r2
 802146a:	d016      	beq.n	802149a <USB_EPClearStall+0xf6>
 802146c:	687a      	ldr	r2, [r7, #4]
 802146e:	683b      	ldr	r3, [r7, #0]
 8021470:	781b      	ldrb	r3, [r3, #0]
 8021472:	009b      	lsls	r3, r3, #2
 8021474:	18d3      	adds	r3, r2, r3
 8021476:	881b      	ldrh	r3, [r3, #0]
 8021478:	b29a      	uxth	r2, r3
 802147a:	2014      	movs	r0, #20
 802147c:	183b      	adds	r3, r7, r0
 802147e:	491c      	ldr	r1, [pc, #112]	@ (80214f0 <USB_EPClearStall+0x14c>)
 8021480:	400a      	ands	r2, r1
 8021482:	801a      	strh	r2, [r3, #0]
 8021484:	687a      	ldr	r2, [r7, #4]
 8021486:	683b      	ldr	r3, [r7, #0]
 8021488:	781b      	ldrb	r3, [r3, #0]
 802148a:	009b      	lsls	r3, r3, #2
 802148c:	18d3      	adds	r3, r2, r3
 802148e:	183a      	adds	r2, r7, r0
 8021490:	8812      	ldrh	r2, [r2, #0]
 8021492:	491b      	ldr	r1, [pc, #108]	@ (8021500 <USB_EPClearStall+0x15c>)
 8021494:	430a      	orrs	r2, r1
 8021496:	b292      	uxth	r2, r2
 8021498:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 802149a:	687a      	ldr	r2, [r7, #4]
 802149c:	683b      	ldr	r3, [r7, #0]
 802149e:	781b      	ldrb	r3, [r3, #0]
 80214a0:	009b      	lsls	r3, r3, #2
 80214a2:	18d3      	adds	r3, r2, r3
 80214a4:	881b      	ldrh	r3, [r3, #0]
 80214a6:	b29a      	uxth	r2, r3
 80214a8:	2012      	movs	r0, #18
 80214aa:	183b      	adds	r3, r7, r0
 80214ac:	4915      	ldr	r1, [pc, #84]	@ (8021504 <USB_EPClearStall+0x160>)
 80214ae:	400a      	ands	r2, r1
 80214b0:	801a      	strh	r2, [r3, #0]
 80214b2:	183b      	adds	r3, r7, r0
 80214b4:	183a      	adds	r2, r7, r0
 80214b6:	8812      	ldrh	r2, [r2, #0]
 80214b8:	2180      	movs	r1, #128	@ 0x80
 80214ba:	0149      	lsls	r1, r1, #5
 80214bc:	404a      	eors	r2, r1
 80214be:	801a      	strh	r2, [r3, #0]
 80214c0:	183b      	adds	r3, r7, r0
 80214c2:	183a      	adds	r2, r7, r0
 80214c4:	8812      	ldrh	r2, [r2, #0]
 80214c6:	2180      	movs	r1, #128	@ 0x80
 80214c8:	0189      	lsls	r1, r1, #6
 80214ca:	404a      	eors	r2, r1
 80214cc:	801a      	strh	r2, [r3, #0]
 80214ce:	687a      	ldr	r2, [r7, #4]
 80214d0:	683b      	ldr	r3, [r7, #0]
 80214d2:	781b      	ldrb	r3, [r3, #0]
 80214d4:	009b      	lsls	r3, r3, #2
 80214d6:	18d3      	adds	r3, r2, r3
 80214d8:	183a      	adds	r2, r7, r0
 80214da:	8812      	ldrh	r2, [r2, #0]
 80214dc:	4907      	ldr	r1, [pc, #28]	@ (80214fc <USB_EPClearStall+0x158>)
 80214de:	430a      	orrs	r2, r1
 80214e0:	b292      	uxth	r2, r2
 80214e2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80214e4:	2300      	movs	r3, #0
}
 80214e6:	0018      	movs	r0, r3
 80214e8:	46bd      	mov	sp, r7
 80214ea:	b006      	add	sp, #24
 80214ec:	bd80      	pop	{r7, pc}
 80214ee:	46c0      	nop			@ (mov r8, r8)
 80214f0:	ffff8f8f 	.word	0xffff8f8f
 80214f4:	ffff80c0 	.word	0xffff80c0
 80214f8:	ffff8fbf 	.word	0xffff8fbf
 80214fc:	ffff8080 	.word	0xffff8080
 8021500:	ffffc080 	.word	0xffffc080
 8021504:	ffffbf8f 	.word	0xffffbf8f

08021508 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8021508:	b580      	push	{r7, lr}
 802150a:	b082      	sub	sp, #8
 802150c:	af00      	add	r7, sp, #0
 802150e:	6078      	str	r0, [r7, #4]
 8021510:	000a      	movs	r2, r1
 8021512:	1cfb      	adds	r3, r7, #3
 8021514:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8021516:	1cfb      	adds	r3, r7, #3
 8021518:	781b      	ldrb	r3, [r3, #0]
 802151a:	2b00      	cmp	r3, #0
 802151c:	d103      	bne.n	8021526 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 802151e:	687b      	ldr	r3, [r7, #4]
 8021520:	224c      	movs	r2, #76	@ 0x4c
 8021522:	2180      	movs	r1, #128	@ 0x80
 8021524:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8021526:	2300      	movs	r3, #0
}
 8021528:	0018      	movs	r0, r3
 802152a:	46bd      	mov	sp, r7
 802152c:	b002      	add	sp, #8
 802152e:	bd80      	pop	{r7, pc}

08021530 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8021530:	b580      	push	{r7, lr}
 8021532:	b082      	sub	sp, #8
 8021534:	af00      	add	r7, sp, #0
 8021536:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	2258      	movs	r2, #88	@ 0x58
 802153c:	5a9b      	ldrh	r3, [r3, r2]
 802153e:	b29b      	uxth	r3, r3
 8021540:	4a05      	ldr	r2, [pc, #20]	@ (8021558 <USB_DevConnect+0x28>)
 8021542:	4313      	orrs	r3, r2
 8021544:	b299      	uxth	r1, r3
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	2258      	movs	r2, #88	@ 0x58
 802154a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 802154c:	2300      	movs	r3, #0
}
 802154e:	0018      	movs	r0, r3
 8021550:	46bd      	mov	sp, r7
 8021552:	b002      	add	sp, #8
 8021554:	bd80      	pop	{r7, pc}
 8021556:	46c0      	nop			@ (mov r8, r8)
 8021558:	ffff8000 	.word	0xffff8000

0802155c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 802155c:	b580      	push	{r7, lr}
 802155e:	b084      	sub	sp, #16
 8021560:	af00      	add	r7, sp, #0
 8021562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	2244      	movs	r2, #68	@ 0x44
 8021568:	5a9b      	ldrh	r3, [r3, r2]
 802156a:	b29b      	uxth	r3, r3
 802156c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 802156e:	68fb      	ldr	r3, [r7, #12]
}
 8021570:	0018      	movs	r0, r3
 8021572:	46bd      	mov	sp, r7
 8021574:	b004      	add	sp, #16
 8021576:	bd80      	pop	{r7, pc}

08021578 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021578:	b580      	push	{r7, lr}
 802157a:	b08a      	sub	sp, #40	@ 0x28
 802157c:	af00      	add	r7, sp, #0
 802157e:	60f8      	str	r0, [r7, #12]
 8021580:	60b9      	str	r1, [r7, #8]
 8021582:	0019      	movs	r1, r3
 8021584:	1dbb      	adds	r3, r7, #6
 8021586:	801a      	strh	r2, [r3, #0]
 8021588:	1d3b      	adds	r3, r7, #4
 802158a:	1c0a      	adds	r2, r1, #0
 802158c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 802158e:	1d3b      	adds	r3, r7, #4
 8021590:	881b      	ldrh	r3, [r3, #0]
 8021592:	3301      	adds	r3, #1
 8021594:	085b      	lsrs	r3, r3, #1
 8021596:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8021598:	68fb      	ldr	r3, [r7, #12]
 802159a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 802159c:	68bb      	ldr	r3, [r7, #8]
 802159e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80215a0:	1dbb      	adds	r3, r7, #6
 80215a2:	881a      	ldrh	r2, [r3, #0]
 80215a4:	697b      	ldr	r3, [r7, #20]
 80215a6:	18d3      	adds	r3, r2, r3
 80215a8:	2280      	movs	r2, #128	@ 0x80
 80215aa:	00d2      	lsls	r2, r2, #3
 80215ac:	4694      	mov	ip, r2
 80215ae:	4463      	add	r3, ip
 80215b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80215b2:	69bb      	ldr	r3, [r7, #24]
 80215b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80215b6:	e021      	b.n	80215fc <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80215b8:	69fb      	ldr	r3, [r7, #28]
 80215ba:	781a      	ldrb	r2, [r3, #0]
 80215bc:	2112      	movs	r1, #18
 80215be:	187b      	adds	r3, r7, r1
 80215c0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80215c2:	69fb      	ldr	r3, [r7, #28]
 80215c4:	3301      	adds	r3, #1
 80215c6:	781b      	ldrb	r3, [r3, #0]
 80215c8:	b21b      	sxth	r3, r3
 80215ca:	021b      	lsls	r3, r3, #8
 80215cc:	b21a      	sxth	r2, r3
 80215ce:	187b      	adds	r3, r7, r1
 80215d0:	2000      	movs	r0, #0
 80215d2:	5e1b      	ldrsh	r3, [r3, r0]
 80215d4:	4313      	orrs	r3, r2
 80215d6:	b21a      	sxth	r2, r3
 80215d8:	187b      	adds	r3, r7, r1
 80215da:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80215dc:	6a3b      	ldr	r3, [r7, #32]
 80215de:	187a      	adds	r2, r7, r1
 80215e0:	8812      	ldrh	r2, [r2, #0]
 80215e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80215e4:	6a3b      	ldr	r3, [r7, #32]
 80215e6:	3302      	adds	r3, #2
 80215e8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80215ea:	69fb      	ldr	r3, [r7, #28]
 80215ec:	3301      	adds	r3, #1
 80215ee:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80215f0:	69fb      	ldr	r3, [r7, #28]
 80215f2:	3301      	adds	r3, #1
 80215f4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80215f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215f8:	3b01      	subs	r3, #1
 80215fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80215fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215fe:	2b00      	cmp	r3, #0
 8021600:	d1da      	bne.n	80215b8 <USB_WritePMA+0x40>
  }
}
 8021602:	46c0      	nop			@ (mov r8, r8)
 8021604:	46c0      	nop			@ (mov r8, r8)
 8021606:	46bd      	mov	sp, r7
 8021608:	b00a      	add	sp, #40	@ 0x28
 802160a:	bd80      	pop	{r7, pc}

0802160c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 802160c:	b580      	push	{r7, lr}
 802160e:	b08a      	sub	sp, #40	@ 0x28
 8021610:	af00      	add	r7, sp, #0
 8021612:	60f8      	str	r0, [r7, #12]
 8021614:	60b9      	str	r1, [r7, #8]
 8021616:	0019      	movs	r1, r3
 8021618:	1dbb      	adds	r3, r7, #6
 802161a:	801a      	strh	r2, [r3, #0]
 802161c:	1d3b      	adds	r3, r7, #4
 802161e:	1c0a      	adds	r2, r1, #0
 8021620:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8021622:	1d3b      	adds	r3, r7, #4
 8021624:	881b      	ldrh	r3, [r3, #0]
 8021626:	085b      	lsrs	r3, r3, #1
 8021628:	b29b      	uxth	r3, r3
 802162a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 802162c:	68fb      	ldr	r3, [r7, #12]
 802162e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8021630:	68bb      	ldr	r3, [r7, #8]
 8021632:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021634:	1dbb      	adds	r3, r7, #6
 8021636:	881a      	ldrh	r2, [r3, #0]
 8021638:	697b      	ldr	r3, [r7, #20]
 802163a:	18d3      	adds	r3, r2, r3
 802163c:	2280      	movs	r2, #128	@ 0x80
 802163e:	00d2      	lsls	r2, r2, #3
 8021640:	4694      	mov	ip, r2
 8021642:	4463      	add	r3, ip
 8021644:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8021646:	69bb      	ldr	r3, [r7, #24]
 8021648:	627b      	str	r3, [r7, #36]	@ 0x24
 802164a:	e018      	b.n	802167e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 802164c:	6a3b      	ldr	r3, [r7, #32]
 802164e:	881b      	ldrh	r3, [r3, #0]
 8021650:	b29b      	uxth	r3, r3
 8021652:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021654:	6a3b      	ldr	r3, [r7, #32]
 8021656:	3302      	adds	r3, #2
 8021658:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802165a:	693b      	ldr	r3, [r7, #16]
 802165c:	b2da      	uxtb	r2, r3
 802165e:	69fb      	ldr	r3, [r7, #28]
 8021660:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021662:	69fb      	ldr	r3, [r7, #28]
 8021664:	3301      	adds	r3, #1
 8021666:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8021668:	693b      	ldr	r3, [r7, #16]
 802166a:	0a1b      	lsrs	r3, r3, #8
 802166c:	b2da      	uxtb	r2, r3
 802166e:	69fb      	ldr	r3, [r7, #28]
 8021670:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021672:	69fb      	ldr	r3, [r7, #28]
 8021674:	3301      	adds	r3, #1
 8021676:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8021678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802167a:	3b01      	subs	r3, #1
 802167c:	627b      	str	r3, [r7, #36]	@ 0x24
 802167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021680:	2b00      	cmp	r3, #0
 8021682:	d1e3      	bne.n	802164c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8021684:	1d3b      	adds	r3, r7, #4
 8021686:	881b      	ldrh	r3, [r3, #0]
 8021688:	2201      	movs	r2, #1
 802168a:	4013      	ands	r3, r2
 802168c:	b29b      	uxth	r3, r3
 802168e:	2b00      	cmp	r3, #0
 8021690:	d007      	beq.n	80216a2 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8021692:	6a3b      	ldr	r3, [r7, #32]
 8021694:	881b      	ldrh	r3, [r3, #0]
 8021696:	b29b      	uxth	r3, r3
 8021698:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802169a:	693b      	ldr	r3, [r7, #16]
 802169c:	b2da      	uxtb	r2, r3
 802169e:	69fb      	ldr	r3, [r7, #28]
 80216a0:	701a      	strb	r2, [r3, #0]
  }
}
 80216a2:	46c0      	nop			@ (mov r8, r8)
 80216a4:	46bd      	mov	sp, r7
 80216a6:	b00a      	add	sp, #40	@ 0x28
 80216a8:	bd80      	pop	{r7, pc}

080216aa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80216aa:	b580      	push	{r7, lr}
 80216ac:	b084      	sub	sp, #16
 80216ae:	af00      	add	r7, sp, #0
 80216b0:	6078      	str	r0, [r7, #4]
 80216b2:	000a      	movs	r2, r1
 80216b4:	1cfb      	adds	r3, r7, #3
 80216b6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80216b8:	230f      	movs	r3, #15
 80216ba:	18fb      	adds	r3, r7, r3
 80216bc:	2200      	movs	r2, #0
 80216be:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	7c1b      	ldrb	r3, [r3, #16]
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d116      	bne.n	80216f6 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80216c8:	2380      	movs	r3, #128	@ 0x80
 80216ca:	009b      	lsls	r3, r3, #2
 80216cc:	6878      	ldr	r0, [r7, #4]
 80216ce:	2202      	movs	r2, #2
 80216d0:	2181      	movs	r1, #129	@ 0x81
 80216d2:	f002 f8f8 	bl	80238c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	2201      	movs	r2, #1
 80216da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80216dc:	2380      	movs	r3, #128	@ 0x80
 80216de:	009b      	lsls	r3, r3, #2
 80216e0:	6878      	ldr	r0, [r7, #4]
 80216e2:	2202      	movs	r2, #2
 80216e4:	2101      	movs	r1, #1
 80216e6:	f002 f8ee 	bl	80238c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80216ea:	687a      	ldr	r2, [r7, #4]
 80216ec:	23b6      	movs	r3, #182	@ 0xb6
 80216ee:	005b      	lsls	r3, r3, #1
 80216f0:	2101      	movs	r1, #1
 80216f2:	50d1      	str	r1, [r2, r3]
 80216f4:	e013      	b.n	802171e <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80216f6:	6878      	ldr	r0, [r7, #4]
 80216f8:	2340      	movs	r3, #64	@ 0x40
 80216fa:	2202      	movs	r2, #2
 80216fc:	2181      	movs	r1, #129	@ 0x81
 80216fe:	f002 f8e2 	bl	80238c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	2201      	movs	r2, #1
 8021706:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021708:	6878      	ldr	r0, [r7, #4]
 802170a:	2340      	movs	r3, #64	@ 0x40
 802170c:	2202      	movs	r2, #2
 802170e:	2101      	movs	r1, #1
 8021710:	f002 f8d9 	bl	80238c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021714:	687a      	ldr	r2, [r7, #4]
 8021716:	23b6      	movs	r3, #182	@ 0xb6
 8021718:	005b      	lsls	r3, r3, #1
 802171a:	2101      	movs	r1, #1
 802171c:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802171e:	6878      	ldr	r0, [r7, #4]
 8021720:	2308      	movs	r3, #8
 8021722:	2203      	movs	r2, #3
 8021724:	2182      	movs	r1, #130	@ 0x82
 8021726:	f002 f8ce 	bl	80238c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	2201      	movs	r2, #1
 802172e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8021730:	2387      	movs	r3, #135	@ 0x87
 8021732:	009b      	lsls	r3, r3, #2
 8021734:	0018      	movs	r0, r3
 8021736:	f002 fa5f 	bl	8023bf8 <USBD_static_malloc>
 802173a:	0001      	movs	r1, r0
 802173c:	687a      	ldr	r2, [r7, #4]
 802173e:	23ae      	movs	r3, #174	@ 0xae
 8021740:	009b      	lsls	r3, r3, #2
 8021742:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8021744:	687a      	ldr	r2, [r7, #4]
 8021746:	23ae      	movs	r3, #174	@ 0xae
 8021748:	009b      	lsls	r3, r3, #2
 802174a:	58d3      	ldr	r3, [r2, r3]
 802174c:	2b00      	cmp	r3, #0
 802174e:	d104      	bne.n	802175a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8021750:	230f      	movs	r3, #15
 8021752:	18fb      	adds	r3, r7, r3
 8021754:	2201      	movs	r2, #1
 8021756:	701a      	strb	r2, [r3, #0]
 8021758:	e02c      	b.n	80217b4 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802175a:	687a      	ldr	r2, [r7, #4]
 802175c:	23ae      	movs	r3, #174	@ 0xae
 802175e:	009b      	lsls	r3, r3, #2
 8021760:	58d3      	ldr	r3, [r2, r3]
 8021762:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021764:	687a      	ldr	r2, [r7, #4]
 8021766:	23af      	movs	r3, #175	@ 0xaf
 8021768:	009b      	lsls	r3, r3, #2
 802176a:	58d3      	ldr	r3, [r2, r3]
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8021770:	68ba      	ldr	r2, [r7, #8]
 8021772:	2385      	movs	r3, #133	@ 0x85
 8021774:	009b      	lsls	r3, r3, #2
 8021776:	2100      	movs	r1, #0
 8021778:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 802177a:	68ba      	ldr	r2, [r7, #8]
 802177c:	2386      	movs	r3, #134	@ 0x86
 802177e:	009b      	lsls	r3, r3, #2
 8021780:	2100      	movs	r1, #0
 8021782:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021784:	687b      	ldr	r3, [r7, #4]
 8021786:	7c1b      	ldrb	r3, [r3, #16]
 8021788:	2b00      	cmp	r3, #0
 802178a:	d10a      	bne.n	80217a2 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802178c:	68ba      	ldr	r2, [r7, #8]
 802178e:	2381      	movs	r3, #129	@ 0x81
 8021790:	009b      	lsls	r3, r3, #2
 8021792:	58d2      	ldr	r2, [r2, r3]
 8021794:	2380      	movs	r3, #128	@ 0x80
 8021796:	009b      	lsls	r3, r3, #2
 8021798:	6878      	ldr	r0, [r7, #4]
 802179a:	2101      	movs	r1, #1
 802179c:	f002 f9de 	bl	8023b5c <USBD_LL_PrepareReceive>
 80217a0:	e008      	b.n	80217b4 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80217a2:	68ba      	ldr	r2, [r7, #8]
 80217a4:	2381      	movs	r3, #129	@ 0x81
 80217a6:	009b      	lsls	r3, r3, #2
 80217a8:	58d2      	ldr	r2, [r2, r3]
 80217aa:	6878      	ldr	r0, [r7, #4]
 80217ac:	2340      	movs	r3, #64	@ 0x40
 80217ae:	2101      	movs	r1, #1
 80217b0:	f002 f9d4 	bl	8023b5c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80217b4:	230f      	movs	r3, #15
 80217b6:	18fb      	adds	r3, r7, r3
 80217b8:	781b      	ldrb	r3, [r3, #0]
}
 80217ba:	0018      	movs	r0, r3
 80217bc:	46bd      	mov	sp, r7
 80217be:	b004      	add	sp, #16
 80217c0:	bd80      	pop	{r7, pc}

080217c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80217c2:	b580      	push	{r7, lr}
 80217c4:	b084      	sub	sp, #16
 80217c6:	af00      	add	r7, sp, #0
 80217c8:	6078      	str	r0, [r7, #4]
 80217ca:	000a      	movs	r2, r1
 80217cc:	1cfb      	adds	r3, r7, #3
 80217ce:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80217d0:	230f      	movs	r3, #15
 80217d2:	18fb      	adds	r3, r7, r3
 80217d4:	2200      	movs	r2, #0
 80217d6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80217d8:	687b      	ldr	r3, [r7, #4]
 80217da:	2181      	movs	r1, #129	@ 0x81
 80217dc:	0018      	movs	r0, r3
 80217de:	f002 f8a9 	bl	8023934 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	2200      	movs	r2, #0
 80217e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	2101      	movs	r1, #1
 80217ec:	0018      	movs	r0, r3
 80217ee:	f002 f8a1 	bl	8023934 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80217f2:	687a      	ldr	r2, [r7, #4]
 80217f4:	23b6      	movs	r3, #182	@ 0xb6
 80217f6:	005b      	lsls	r3, r3, #1
 80217f8:	2100      	movs	r1, #0
 80217fa:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	2182      	movs	r1, #130	@ 0x82
 8021800:	0018      	movs	r0, r3
 8021802:	f002 f897 	bl	8023934 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8021806:	687b      	ldr	r3, [r7, #4]
 8021808:	2200      	movs	r2, #0
 802180a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 802180c:	687a      	ldr	r2, [r7, #4]
 802180e:	23ae      	movs	r3, #174	@ 0xae
 8021810:	009b      	lsls	r3, r3, #2
 8021812:	58d3      	ldr	r3, [r2, r3]
 8021814:	2b00      	cmp	r3, #0
 8021816:	d011      	beq.n	802183c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8021818:	687a      	ldr	r2, [r7, #4]
 802181a:	23af      	movs	r3, #175	@ 0xaf
 802181c:	009b      	lsls	r3, r3, #2
 802181e:	58d3      	ldr	r3, [r2, r3]
 8021820:	685b      	ldr	r3, [r3, #4]
 8021822:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8021824:	687a      	ldr	r2, [r7, #4]
 8021826:	23ae      	movs	r3, #174	@ 0xae
 8021828:	009b      	lsls	r3, r3, #2
 802182a:	58d3      	ldr	r3, [r2, r3]
 802182c:	0018      	movs	r0, r3
 802182e:	f002 f9ef 	bl	8023c10 <USBD_static_free>
    pdev->pClassData = NULL;
 8021832:	687a      	ldr	r2, [r7, #4]
 8021834:	23ae      	movs	r3, #174	@ 0xae
 8021836:	009b      	lsls	r3, r3, #2
 8021838:	2100      	movs	r1, #0
 802183a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 802183c:	230f      	movs	r3, #15
 802183e:	18fb      	adds	r3, r7, r3
 8021840:	781b      	ldrb	r3, [r3, #0]
}
 8021842:	0018      	movs	r0, r3
 8021844:	46bd      	mov	sp, r7
 8021846:	b004      	add	sp, #16
 8021848:	bd80      	pop	{r7, pc}
	...

0802184c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 802184c:	b580      	push	{r7, lr}
 802184e:	b086      	sub	sp, #24
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
 8021854:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021856:	687a      	ldr	r2, [r7, #4]
 8021858:	23ae      	movs	r3, #174	@ 0xae
 802185a:	009b      	lsls	r3, r3, #2
 802185c:	58d3      	ldr	r3, [r2, r3]
 802185e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8021860:	230f      	movs	r3, #15
 8021862:	18fb      	adds	r3, r7, r3
 8021864:	2200      	movs	r2, #0
 8021866:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8021868:	230c      	movs	r3, #12
 802186a:	18fb      	adds	r3, r7, r3
 802186c:	2200      	movs	r2, #0
 802186e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8021870:	2317      	movs	r3, #23
 8021872:	18fb      	adds	r3, r7, r3
 8021874:	2200      	movs	r2, #0
 8021876:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021878:	683b      	ldr	r3, [r7, #0]
 802187a:	781b      	ldrb	r3, [r3, #0]
 802187c:	001a      	movs	r2, r3
 802187e:	2360      	movs	r3, #96	@ 0x60
 8021880:	4013      	ands	r3, r2
 8021882:	d03d      	beq.n	8021900 <USBD_CDC_Setup+0xb4>
 8021884:	2b20      	cmp	r3, #32
 8021886:	d000      	beq.n	802188a <USBD_CDC_Setup+0x3e>
 8021888:	e094      	b.n	80219b4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 802188a:	683b      	ldr	r3, [r7, #0]
 802188c:	88db      	ldrh	r3, [r3, #6]
 802188e:	2b00      	cmp	r3, #0
 8021890:	d02b      	beq.n	80218ea <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8021892:	683b      	ldr	r3, [r7, #0]
 8021894:	781b      	ldrb	r3, [r3, #0]
 8021896:	b25b      	sxtb	r3, r3
 8021898:	2b00      	cmp	r3, #0
 802189a:	da12      	bge.n	80218c2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802189c:	687a      	ldr	r2, [r7, #4]
 802189e:	23af      	movs	r3, #175	@ 0xaf
 80218a0:	009b      	lsls	r3, r3, #2
 80218a2:	58d3      	ldr	r3, [r2, r3]
 80218a4:	689b      	ldr	r3, [r3, #8]
 80218a6:	683a      	ldr	r2, [r7, #0]
 80218a8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80218aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80218ac:	683a      	ldr	r2, [r7, #0]
 80218ae:	88d2      	ldrh	r2, [r2, #6]
 80218b0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80218b2:	6939      	ldr	r1, [r7, #16]
 80218b4:	683b      	ldr	r3, [r7, #0]
 80218b6:	88da      	ldrh	r2, [r3, #6]
 80218b8:	687b      	ldr	r3, [r7, #4]
 80218ba:	0018      	movs	r0, r3
 80218bc:	f001 fbaf 	bl	802301e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80218c0:	e083      	b.n	80219ca <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80218c2:	683b      	ldr	r3, [r7, #0]
 80218c4:	7859      	ldrb	r1, [r3, #1]
 80218c6:	693a      	ldr	r2, [r7, #16]
 80218c8:	2380      	movs	r3, #128	@ 0x80
 80218ca:	009b      	lsls	r3, r3, #2
 80218cc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80218ce:	683b      	ldr	r3, [r7, #0]
 80218d0:	88db      	ldrh	r3, [r3, #6]
 80218d2:	b2d9      	uxtb	r1, r3
 80218d4:	693b      	ldr	r3, [r7, #16]
 80218d6:	4a40      	ldr	r2, [pc, #256]	@ (80219d8 <USBD_CDC_Setup+0x18c>)
 80218d8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80218da:	6939      	ldr	r1, [r7, #16]
 80218dc:	683b      	ldr	r3, [r7, #0]
 80218de:	88da      	ldrh	r2, [r3, #6]
 80218e0:	687b      	ldr	r3, [r7, #4]
 80218e2:	0018      	movs	r0, r3
 80218e4:	f001 fbce 	bl	8023084 <USBD_CtlPrepareRx>
      break;
 80218e8:	e06f      	b.n	80219ca <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80218ea:	687a      	ldr	r2, [r7, #4]
 80218ec:	23af      	movs	r3, #175	@ 0xaf
 80218ee:	009b      	lsls	r3, r3, #2
 80218f0:	58d3      	ldr	r3, [r2, r3]
 80218f2:	689b      	ldr	r3, [r3, #8]
 80218f4:	683a      	ldr	r2, [r7, #0]
 80218f6:	7850      	ldrb	r0, [r2, #1]
 80218f8:	6839      	ldr	r1, [r7, #0]
 80218fa:	2200      	movs	r2, #0
 80218fc:	4798      	blx	r3
      break;
 80218fe:	e064      	b.n	80219ca <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021900:	683b      	ldr	r3, [r7, #0]
 8021902:	785b      	ldrb	r3, [r3, #1]
 8021904:	2b0b      	cmp	r3, #11
 8021906:	d037      	beq.n	8021978 <USBD_CDC_Setup+0x12c>
 8021908:	dc47      	bgt.n	802199a <USBD_CDC_Setup+0x14e>
 802190a:	2b00      	cmp	r3, #0
 802190c:	d002      	beq.n	8021914 <USBD_CDC_Setup+0xc8>
 802190e:	2b0a      	cmp	r3, #10
 8021910:	d019      	beq.n	8021946 <USBD_CDC_Setup+0xfa>
 8021912:	e042      	b.n	802199a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021914:	687a      	ldr	r2, [r7, #4]
 8021916:	23a7      	movs	r3, #167	@ 0xa7
 8021918:	009b      	lsls	r3, r3, #2
 802191a:	5cd3      	ldrb	r3, [r2, r3]
 802191c:	2b03      	cmp	r3, #3
 802191e:	d107      	bne.n	8021930 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8021920:	230c      	movs	r3, #12
 8021922:	18f9      	adds	r1, r7, r3
 8021924:	687b      	ldr	r3, [r7, #4]
 8021926:	2202      	movs	r2, #2
 8021928:	0018      	movs	r0, r3
 802192a:	f001 fb78 	bl	802301e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802192e:	e040      	b.n	80219b2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021930:	683a      	ldr	r2, [r7, #0]
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	0011      	movs	r1, r2
 8021936:	0018      	movs	r0, r3
 8021938:	f001 faf3 	bl	8022f22 <USBD_CtlError>
            ret = USBD_FAIL;
 802193c:	2317      	movs	r3, #23
 802193e:	18fb      	adds	r3, r7, r3
 8021940:	2202      	movs	r2, #2
 8021942:	701a      	strb	r2, [r3, #0]
          break;
 8021944:	e035      	b.n	80219b2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021946:	687a      	ldr	r2, [r7, #4]
 8021948:	23a7      	movs	r3, #167	@ 0xa7
 802194a:	009b      	lsls	r3, r3, #2
 802194c:	5cd3      	ldrb	r3, [r2, r3]
 802194e:	2b03      	cmp	r3, #3
 8021950:	d107      	bne.n	8021962 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8021952:	230f      	movs	r3, #15
 8021954:	18f9      	adds	r1, r7, r3
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	2201      	movs	r2, #1
 802195a:	0018      	movs	r0, r3
 802195c:	f001 fb5f 	bl	802301e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021960:	e027      	b.n	80219b2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021962:	683a      	ldr	r2, [r7, #0]
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	0011      	movs	r1, r2
 8021968:	0018      	movs	r0, r3
 802196a:	f001 fada 	bl	8022f22 <USBD_CtlError>
            ret = USBD_FAIL;
 802196e:	2317      	movs	r3, #23
 8021970:	18fb      	adds	r3, r7, r3
 8021972:	2202      	movs	r2, #2
 8021974:	701a      	strb	r2, [r3, #0]
          break;
 8021976:	e01c      	b.n	80219b2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8021978:	687a      	ldr	r2, [r7, #4]
 802197a:	23a7      	movs	r3, #167	@ 0xa7
 802197c:	009b      	lsls	r3, r3, #2
 802197e:	5cd3      	ldrb	r3, [r2, r3]
 8021980:	2b03      	cmp	r3, #3
 8021982:	d015      	beq.n	80219b0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8021984:	683a      	ldr	r2, [r7, #0]
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	0011      	movs	r1, r2
 802198a:	0018      	movs	r0, r3
 802198c:	f001 fac9 	bl	8022f22 <USBD_CtlError>
            ret = USBD_FAIL;
 8021990:	2317      	movs	r3, #23
 8021992:	18fb      	adds	r3, r7, r3
 8021994:	2202      	movs	r2, #2
 8021996:	701a      	strb	r2, [r3, #0]
          }
          break;
 8021998:	e00a      	b.n	80219b0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 802199a:	683a      	ldr	r2, [r7, #0]
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	0011      	movs	r1, r2
 80219a0:	0018      	movs	r0, r3
 80219a2:	f001 fabe 	bl	8022f22 <USBD_CtlError>
          ret = USBD_FAIL;
 80219a6:	2317      	movs	r3, #23
 80219a8:	18fb      	adds	r3, r7, r3
 80219aa:	2202      	movs	r2, #2
 80219ac:	701a      	strb	r2, [r3, #0]
          break;
 80219ae:	e000      	b.n	80219b2 <USBD_CDC_Setup+0x166>
          break;
 80219b0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80219b2:	e00a      	b.n	80219ca <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80219b4:	683a      	ldr	r2, [r7, #0]
 80219b6:	687b      	ldr	r3, [r7, #4]
 80219b8:	0011      	movs	r1, r2
 80219ba:	0018      	movs	r0, r3
 80219bc:	f001 fab1 	bl	8022f22 <USBD_CtlError>
      ret = USBD_FAIL;
 80219c0:	2317      	movs	r3, #23
 80219c2:	18fb      	adds	r3, r7, r3
 80219c4:	2202      	movs	r2, #2
 80219c6:	701a      	strb	r2, [r3, #0]
      break;
 80219c8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80219ca:	2317      	movs	r3, #23
 80219cc:	18fb      	adds	r3, r7, r3
 80219ce:	781b      	ldrb	r3, [r3, #0]
}
 80219d0:	0018      	movs	r0, r3
 80219d2:	46bd      	mov	sp, r7
 80219d4:	b006      	add	sp, #24
 80219d6:	bd80      	pop	{r7, pc}
 80219d8:	00000201 	.word	0x00000201

080219dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80219dc:	b580      	push	{r7, lr}
 80219de:	b084      	sub	sp, #16
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	6078      	str	r0, [r7, #4]
 80219e4:	000a      	movs	r2, r1
 80219e6:	1cfb      	adds	r3, r7, #3
 80219e8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80219ea:	687a      	ldr	r2, [r7, #4]
 80219ec:	23ae      	movs	r3, #174	@ 0xae
 80219ee:	009b      	lsls	r3, r3, #2
 80219f0:	58d3      	ldr	r3, [r2, r3]
 80219f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80219f4:	687a      	ldr	r2, [r7, #4]
 80219f6:	23b0      	movs	r3, #176	@ 0xb0
 80219f8:	009b      	lsls	r3, r3, #2
 80219fa:	58d3      	ldr	r3, [r2, r3]
 80219fc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80219fe:	687a      	ldr	r2, [r7, #4]
 8021a00:	23ae      	movs	r3, #174	@ 0xae
 8021a02:	009b      	lsls	r3, r3, #2
 8021a04:	58d3      	ldr	r3, [r2, r3]
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d03e      	beq.n	8021a88 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8021a0a:	1cfb      	adds	r3, r7, #3
 8021a0c:	781a      	ldrb	r2, [r3, #0]
 8021a0e:	6879      	ldr	r1, [r7, #4]
 8021a10:	0013      	movs	r3, r2
 8021a12:	009b      	lsls	r3, r3, #2
 8021a14:	189b      	adds	r3, r3, r2
 8021a16:	009b      	lsls	r3, r3, #2
 8021a18:	18cb      	adds	r3, r1, r3
 8021a1a:	331c      	adds	r3, #28
 8021a1c:	681b      	ldr	r3, [r3, #0]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d02b      	beq.n	8021a7a <USBD_CDC_DataIn+0x9e>
 8021a22:	1cfb      	adds	r3, r7, #3
 8021a24:	781a      	ldrb	r2, [r3, #0]
 8021a26:	6879      	ldr	r1, [r7, #4]
 8021a28:	0013      	movs	r3, r2
 8021a2a:	009b      	lsls	r3, r3, #2
 8021a2c:	189b      	adds	r3, r3, r2
 8021a2e:	009b      	lsls	r3, r3, #2
 8021a30:	18cb      	adds	r3, r1, r3
 8021a32:	331c      	adds	r3, #28
 8021a34:	6818      	ldr	r0, [r3, #0]
 8021a36:	1cfb      	adds	r3, r7, #3
 8021a38:	781a      	ldrb	r2, [r3, #0]
 8021a3a:	68b9      	ldr	r1, [r7, #8]
 8021a3c:	0013      	movs	r3, r2
 8021a3e:	009b      	lsls	r3, r3, #2
 8021a40:	189b      	adds	r3, r3, r2
 8021a42:	00db      	lsls	r3, r3, #3
 8021a44:	18cb      	adds	r3, r1, r3
 8021a46:	3338      	adds	r3, #56	@ 0x38
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	0019      	movs	r1, r3
 8021a4c:	f7de fc30 	bl	80002b0 <__aeabi_uidivmod>
 8021a50:	1e0b      	subs	r3, r1, #0
 8021a52:	d112      	bne.n	8021a7a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021a54:	1cfb      	adds	r3, r7, #3
 8021a56:	781a      	ldrb	r2, [r3, #0]
 8021a58:	6879      	ldr	r1, [r7, #4]
 8021a5a:	0013      	movs	r3, r2
 8021a5c:	009b      	lsls	r3, r3, #2
 8021a5e:	189b      	adds	r3, r3, r2
 8021a60:	009b      	lsls	r3, r3, #2
 8021a62:	18cb      	adds	r3, r1, r3
 8021a64:	331c      	adds	r3, #28
 8021a66:	2200      	movs	r2, #0
 8021a68:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8021a6a:	1cfb      	adds	r3, r7, #3
 8021a6c:	7819      	ldrb	r1, [r3, #0]
 8021a6e:	6878      	ldr	r0, [r7, #4]
 8021a70:	2300      	movs	r3, #0
 8021a72:	2200      	movs	r2, #0
 8021a74:	f002 f83b 	bl	8023aee <USBD_LL_Transmit>
 8021a78:	e004      	b.n	8021a84 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8021a7a:	68fa      	ldr	r2, [r7, #12]
 8021a7c:	2385      	movs	r3, #133	@ 0x85
 8021a7e:	009b      	lsls	r3, r3, #2
 8021a80:	2100      	movs	r1, #0
 8021a82:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8021a84:	2300      	movs	r3, #0
 8021a86:	e000      	b.n	8021a8a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8021a88:	2302      	movs	r3, #2
  }
}
 8021a8a:	0018      	movs	r0, r3
 8021a8c:	46bd      	mov	sp, r7
 8021a8e:	b004      	add	sp, #16
 8021a90:	bd80      	pop	{r7, pc}

08021a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021a92:	b580      	push	{r7, lr}
 8021a94:	b084      	sub	sp, #16
 8021a96:	af00      	add	r7, sp, #0
 8021a98:	6078      	str	r0, [r7, #4]
 8021a9a:	000a      	movs	r2, r1
 8021a9c:	1cfb      	adds	r3, r7, #3
 8021a9e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021aa0:	687a      	ldr	r2, [r7, #4]
 8021aa2:	23ae      	movs	r3, #174	@ 0xae
 8021aa4:	009b      	lsls	r3, r3, #2
 8021aa6:	58d3      	ldr	r3, [r2, r3]
 8021aa8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8021aaa:	1cfb      	adds	r3, r7, #3
 8021aac:	781a      	ldrb	r2, [r3, #0]
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	0011      	movs	r1, r2
 8021ab2:	0018      	movs	r0, r3
 8021ab4:	f002 f889 	bl	8023bca <USBD_LL_GetRxDataSize>
 8021ab8:	0001      	movs	r1, r0
 8021aba:	68fa      	ldr	r2, [r7, #12]
 8021abc:	2383      	movs	r3, #131	@ 0x83
 8021abe:	009b      	lsls	r3, r3, #2
 8021ac0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8021ac2:	687a      	ldr	r2, [r7, #4]
 8021ac4:	23ae      	movs	r3, #174	@ 0xae
 8021ac6:	009b      	lsls	r3, r3, #2
 8021ac8:	58d3      	ldr	r3, [r2, r3]
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d011      	beq.n	8021af2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8021ace:	687a      	ldr	r2, [r7, #4]
 8021ad0:	23af      	movs	r3, #175	@ 0xaf
 8021ad2:	009b      	lsls	r3, r3, #2
 8021ad4:	58d3      	ldr	r3, [r2, r3]
 8021ad6:	68da      	ldr	r2, [r3, #12]
 8021ad8:	68f9      	ldr	r1, [r7, #12]
 8021ada:	2381      	movs	r3, #129	@ 0x81
 8021adc:	009b      	lsls	r3, r3, #2
 8021ade:	58c8      	ldr	r0, [r1, r3]
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	2183      	movs	r1, #131	@ 0x83
 8021ae4:	0089      	lsls	r1, r1, #2
 8021ae6:	468c      	mov	ip, r1
 8021ae8:	4463      	add	r3, ip
 8021aea:	0019      	movs	r1, r3
 8021aec:	4790      	blx	r2

    return USBD_OK;
 8021aee:	2300      	movs	r3, #0
 8021af0:	e000      	b.n	8021af4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8021af2:	2302      	movs	r3, #2
  }
}
 8021af4:	0018      	movs	r0, r3
 8021af6:	46bd      	mov	sp, r7
 8021af8:	b004      	add	sp, #16
 8021afa:	bd80      	pop	{r7, pc}

08021afc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021afc:	b590      	push	{r4, r7, lr}
 8021afe:	b085      	sub	sp, #20
 8021b00:	af00      	add	r7, sp, #0
 8021b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b04:	687a      	ldr	r2, [r7, #4]
 8021b06:	23ae      	movs	r3, #174	@ 0xae
 8021b08:	009b      	lsls	r3, r3, #2
 8021b0a:	58d3      	ldr	r3, [r2, r3]
 8021b0c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8021b0e:	687a      	ldr	r2, [r7, #4]
 8021b10:	23af      	movs	r3, #175	@ 0xaf
 8021b12:	009b      	lsls	r3, r3, #2
 8021b14:	58d3      	ldr	r3, [r2, r3]
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d018      	beq.n	8021b4c <USBD_CDC_EP0_RxReady+0x50>
 8021b1a:	68fa      	ldr	r2, [r7, #12]
 8021b1c:	2380      	movs	r3, #128	@ 0x80
 8021b1e:	009b      	lsls	r3, r3, #2
 8021b20:	5cd3      	ldrb	r3, [r2, r3]
 8021b22:	2bff      	cmp	r3, #255	@ 0xff
 8021b24:	d012      	beq.n	8021b4c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021b26:	687a      	ldr	r2, [r7, #4]
 8021b28:	23af      	movs	r3, #175	@ 0xaf
 8021b2a:	009b      	lsls	r3, r3, #2
 8021b2c:	58d3      	ldr	r3, [r2, r3]
 8021b2e:	689b      	ldr	r3, [r3, #8]
 8021b30:	68f9      	ldr	r1, [r7, #12]
 8021b32:	2280      	movs	r2, #128	@ 0x80
 8021b34:	0092      	lsls	r2, r2, #2
 8021b36:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021b38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021b3a:	68fa      	ldr	r2, [r7, #12]
 8021b3c:	4c06      	ldr	r4, [pc, #24]	@ (8021b58 <USBD_CDC_EP0_RxReady+0x5c>)
 8021b3e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021b40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8021b42:	68fa      	ldr	r2, [r7, #12]
 8021b44:	2380      	movs	r3, #128	@ 0x80
 8021b46:	009b      	lsls	r3, r3, #2
 8021b48:	21ff      	movs	r1, #255	@ 0xff
 8021b4a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021b4c:	2300      	movs	r3, #0
}
 8021b4e:	0018      	movs	r0, r3
 8021b50:	46bd      	mov	sp, r7
 8021b52:	b005      	add	sp, #20
 8021b54:	bd90      	pop	{r4, r7, pc}
 8021b56:	46c0      	nop			@ (mov r8, r8)
 8021b58:	00000201 	.word	0x00000201

08021b5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021b5c:	b580      	push	{r7, lr}
 8021b5e:	b082      	sub	sp, #8
 8021b60:	af00      	add	r7, sp, #0
 8021b62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	2243      	movs	r2, #67	@ 0x43
 8021b68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8021b6a:	4b02      	ldr	r3, [pc, #8]	@ (8021b74 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021b6c:	0018      	movs	r0, r3
 8021b6e:	46bd      	mov	sp, r7
 8021b70:	b002      	add	sp, #8
 8021b72:	bd80      	pop	{r7, pc}
 8021b74:	2000018c 	.word	0x2000018c

08021b78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8021b78:	b580      	push	{r7, lr}
 8021b7a:	b082      	sub	sp, #8
 8021b7c:	af00      	add	r7, sp, #0
 8021b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	2243      	movs	r2, #67	@ 0x43
 8021b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8021b86:	4b02      	ldr	r3, [pc, #8]	@ (8021b90 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8021b88:	0018      	movs	r0, r3
 8021b8a:	46bd      	mov	sp, r7
 8021b8c:	b002      	add	sp, #8
 8021b8e:	bd80      	pop	{r7, pc}
 8021b90:	20000148 	.word	0x20000148

08021b94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8021b94:	b580      	push	{r7, lr}
 8021b96:	b082      	sub	sp, #8
 8021b98:	af00      	add	r7, sp, #0
 8021b9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	2243      	movs	r2, #67	@ 0x43
 8021ba0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8021ba2:	4b02      	ldr	r3, [pc, #8]	@ (8021bac <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8021ba4:	0018      	movs	r0, r3
 8021ba6:	46bd      	mov	sp, r7
 8021ba8:	b002      	add	sp, #8
 8021baa:	bd80      	pop	{r7, pc}
 8021bac:	200001d0 	.word	0x200001d0

08021bb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021bb0:	b580      	push	{r7, lr}
 8021bb2:	b082      	sub	sp, #8
 8021bb4:	af00      	add	r7, sp, #0
 8021bb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8021bb8:	687b      	ldr	r3, [r7, #4]
 8021bba:	220a      	movs	r2, #10
 8021bbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8021bbe:	4b02      	ldr	r3, [pc, #8]	@ (8021bc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021bc0:	0018      	movs	r0, r3
 8021bc2:	46bd      	mov	sp, r7
 8021bc4:	b002      	add	sp, #8
 8021bc6:	bd80      	pop	{r7, pc}
 8021bc8:	20000104 	.word	0x20000104

08021bcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8021bcc:	b580      	push	{r7, lr}
 8021bce:	b084      	sub	sp, #16
 8021bd0:	af00      	add	r7, sp, #0
 8021bd2:	6078      	str	r0, [r7, #4]
 8021bd4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8021bd6:	200f      	movs	r0, #15
 8021bd8:	183b      	adds	r3, r7, r0
 8021bda:	2202      	movs	r2, #2
 8021bdc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8021bde:	683b      	ldr	r3, [r7, #0]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d007      	beq.n	8021bf4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8021be4:	687a      	ldr	r2, [r7, #4]
 8021be6:	23af      	movs	r3, #175	@ 0xaf
 8021be8:	009b      	lsls	r3, r3, #2
 8021bea:	6839      	ldr	r1, [r7, #0]
 8021bec:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8021bee:	183b      	adds	r3, r7, r0
 8021bf0:	2200      	movs	r2, #0
 8021bf2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8021bf4:	230f      	movs	r3, #15
 8021bf6:	18fb      	adds	r3, r7, r3
 8021bf8:	781b      	ldrb	r3, [r3, #0]
}
 8021bfa:	0018      	movs	r0, r3
 8021bfc:	46bd      	mov	sp, r7
 8021bfe:	b004      	add	sp, #16
 8021c00:	bd80      	pop	{r7, pc}

08021c02 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8021c02:	b580      	push	{r7, lr}
 8021c04:	b086      	sub	sp, #24
 8021c06:	af00      	add	r7, sp, #0
 8021c08:	60f8      	str	r0, [r7, #12]
 8021c0a:	60b9      	str	r1, [r7, #8]
 8021c0c:	1dbb      	adds	r3, r7, #6
 8021c0e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021c10:	68fa      	ldr	r2, [r7, #12]
 8021c12:	23ae      	movs	r3, #174	@ 0xae
 8021c14:	009b      	lsls	r3, r3, #2
 8021c16:	58d3      	ldr	r3, [r2, r3]
 8021c18:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021c1a:	697a      	ldr	r2, [r7, #20]
 8021c1c:	2382      	movs	r3, #130	@ 0x82
 8021c1e:	009b      	lsls	r3, r3, #2
 8021c20:	68b9      	ldr	r1, [r7, #8]
 8021c22:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8021c24:	1dbb      	adds	r3, r7, #6
 8021c26:	8819      	ldrh	r1, [r3, #0]
 8021c28:	697a      	ldr	r2, [r7, #20]
 8021c2a:	2384      	movs	r3, #132	@ 0x84
 8021c2c:	009b      	lsls	r3, r3, #2
 8021c2e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021c30:	2300      	movs	r3, #0
}
 8021c32:	0018      	movs	r0, r3
 8021c34:	46bd      	mov	sp, r7
 8021c36:	b006      	add	sp, #24
 8021c38:	bd80      	pop	{r7, pc}

08021c3a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021c3a:	b580      	push	{r7, lr}
 8021c3c:	b084      	sub	sp, #16
 8021c3e:	af00      	add	r7, sp, #0
 8021c40:	6078      	str	r0, [r7, #4]
 8021c42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021c44:	687a      	ldr	r2, [r7, #4]
 8021c46:	23ae      	movs	r3, #174	@ 0xae
 8021c48:	009b      	lsls	r3, r3, #2
 8021c4a:	58d3      	ldr	r3, [r2, r3]
 8021c4c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8021c4e:	68fa      	ldr	r2, [r7, #12]
 8021c50:	2381      	movs	r3, #129	@ 0x81
 8021c52:	009b      	lsls	r3, r3, #2
 8021c54:	6839      	ldr	r1, [r7, #0]
 8021c56:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021c58:	2300      	movs	r3, #0
}
 8021c5a:	0018      	movs	r0, r3
 8021c5c:	46bd      	mov	sp, r7
 8021c5e:	b004      	add	sp, #16
 8021c60:	bd80      	pop	{r7, pc}

08021c62 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8021c62:	b580      	push	{r7, lr}
 8021c64:	b084      	sub	sp, #16
 8021c66:	af00      	add	r7, sp, #0
 8021c68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021c6a:	687a      	ldr	r2, [r7, #4]
 8021c6c:	23ae      	movs	r3, #174	@ 0xae
 8021c6e:	009b      	lsls	r3, r3, #2
 8021c70:	58d3      	ldr	r3, [r2, r3]
 8021c72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021c74:	687a      	ldr	r2, [r7, #4]
 8021c76:	23ae      	movs	r3, #174	@ 0xae
 8021c78:	009b      	lsls	r3, r3, #2
 8021c7a:	58d3      	ldr	r3, [r2, r3]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d022      	beq.n	8021cc6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8021c80:	68fa      	ldr	r2, [r7, #12]
 8021c82:	2385      	movs	r3, #133	@ 0x85
 8021c84:	009b      	lsls	r3, r3, #2
 8021c86:	58d3      	ldr	r3, [r2, r3]
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d11a      	bne.n	8021cc2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021c8c:	68fa      	ldr	r2, [r7, #12]
 8021c8e:	2385      	movs	r3, #133	@ 0x85
 8021c90:	009b      	lsls	r3, r3, #2
 8021c92:	2101      	movs	r1, #1
 8021c94:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8021c96:	68fa      	ldr	r2, [r7, #12]
 8021c98:	2384      	movs	r3, #132	@ 0x84
 8021c9a:	009b      	lsls	r3, r3, #2
 8021c9c:	58d2      	ldr	r2, [r2, r3]
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021ca2:	68fa      	ldr	r2, [r7, #12]
 8021ca4:	2382      	movs	r3, #130	@ 0x82
 8021ca6:	009b      	lsls	r3, r3, #2
 8021ca8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021caa:	68fa      	ldr	r2, [r7, #12]
 8021cac:	2384      	movs	r3, #132	@ 0x84
 8021cae:	009b      	lsls	r3, r3, #2
 8021cb0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021cb2:	b29b      	uxth	r3, r3
 8021cb4:	6878      	ldr	r0, [r7, #4]
 8021cb6:	000a      	movs	r2, r1
 8021cb8:	2181      	movs	r1, #129	@ 0x81
 8021cba:	f001 ff18 	bl	8023aee <USBD_LL_Transmit>

      return USBD_OK;
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	e002      	b.n	8021cc8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021cc2:	2301      	movs	r3, #1
 8021cc4:	e000      	b.n	8021cc8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021cc6:	2302      	movs	r3, #2
  }
}
 8021cc8:	0018      	movs	r0, r3
 8021cca:	46bd      	mov	sp, r7
 8021ccc:	b004      	add	sp, #16
 8021cce:	bd80      	pop	{r7, pc}

08021cd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021cd0:	b580      	push	{r7, lr}
 8021cd2:	b084      	sub	sp, #16
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021cd8:	687a      	ldr	r2, [r7, #4]
 8021cda:	23ae      	movs	r3, #174	@ 0xae
 8021cdc:	009b      	lsls	r3, r3, #2
 8021cde:	58d3      	ldr	r3, [r2, r3]
 8021ce0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021ce2:	687a      	ldr	r2, [r7, #4]
 8021ce4:	23ae      	movs	r3, #174	@ 0xae
 8021ce6:	009b      	lsls	r3, r3, #2
 8021ce8:	58d3      	ldr	r3, [r2, r3]
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d019      	beq.n	8021d22 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	7c1b      	ldrb	r3, [r3, #16]
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d10a      	bne.n	8021d0c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021cf6:	68fa      	ldr	r2, [r7, #12]
 8021cf8:	2381      	movs	r3, #129	@ 0x81
 8021cfa:	009b      	lsls	r3, r3, #2
 8021cfc:	58d2      	ldr	r2, [r2, r3]
 8021cfe:	2380      	movs	r3, #128	@ 0x80
 8021d00:	009b      	lsls	r3, r3, #2
 8021d02:	6878      	ldr	r0, [r7, #4]
 8021d04:	2101      	movs	r1, #1
 8021d06:	f001 ff29 	bl	8023b5c <USBD_LL_PrepareReceive>
 8021d0a:	e008      	b.n	8021d1e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021d0c:	68fa      	ldr	r2, [r7, #12]
 8021d0e:	2381      	movs	r3, #129	@ 0x81
 8021d10:	009b      	lsls	r3, r3, #2
 8021d12:	58d2      	ldr	r2, [r2, r3]
 8021d14:	6878      	ldr	r0, [r7, #4]
 8021d16:	2340      	movs	r3, #64	@ 0x40
 8021d18:	2101      	movs	r1, #1
 8021d1a:	f001 ff1f 	bl	8023b5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021d1e:	2300      	movs	r3, #0
 8021d20:	e000      	b.n	8021d24 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021d22:	2302      	movs	r3, #2
  }
}
 8021d24:	0018      	movs	r0, r3
 8021d26:	46bd      	mov	sp, r7
 8021d28:	b004      	add	sp, #16
 8021d2a:	bd80      	pop	{r7, pc}

08021d2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021d2c:	b580      	push	{r7, lr}
 8021d2e:	b084      	sub	sp, #16
 8021d30:	af00      	add	r7, sp, #0
 8021d32:	60f8      	str	r0, [r7, #12]
 8021d34:	60b9      	str	r1, [r7, #8]
 8021d36:	1dfb      	adds	r3, r7, #7
 8021d38:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021d3a:	68fb      	ldr	r3, [r7, #12]
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d101      	bne.n	8021d44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021d40:	2302      	movs	r3, #2
 8021d42:	e020      	b.n	8021d86 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021d44:	68fa      	ldr	r2, [r7, #12]
 8021d46:	23ad      	movs	r3, #173	@ 0xad
 8021d48:	009b      	lsls	r3, r3, #2
 8021d4a:	58d3      	ldr	r3, [r2, r3]
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d004      	beq.n	8021d5a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021d50:	68fa      	ldr	r2, [r7, #12]
 8021d52:	23ad      	movs	r3, #173	@ 0xad
 8021d54:	009b      	lsls	r3, r3, #2
 8021d56:	2100      	movs	r1, #0
 8021d58:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021d5a:	68bb      	ldr	r3, [r7, #8]
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	d004      	beq.n	8021d6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021d60:	68fa      	ldr	r2, [r7, #12]
 8021d62:	23ac      	movs	r3, #172	@ 0xac
 8021d64:	009b      	lsls	r3, r3, #2
 8021d66:	68b9      	ldr	r1, [r7, #8]
 8021d68:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021d6a:	68fa      	ldr	r2, [r7, #12]
 8021d6c:	23a7      	movs	r3, #167	@ 0xa7
 8021d6e:	009b      	lsls	r3, r3, #2
 8021d70:	2101      	movs	r1, #1
 8021d72:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021d74:	68fb      	ldr	r3, [r7, #12]
 8021d76:	1dfa      	adds	r2, r7, #7
 8021d78:	7812      	ldrb	r2, [r2, #0]
 8021d7a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021d7c:	68fb      	ldr	r3, [r7, #12]
 8021d7e:	0018      	movs	r0, r3
 8021d80:	f001 fd18 	bl	80237b4 <USBD_LL_Init>

  return USBD_OK;
 8021d84:	2300      	movs	r3, #0
}
 8021d86:	0018      	movs	r0, r3
 8021d88:	46bd      	mov	sp, r7
 8021d8a:	b004      	add	sp, #16
 8021d8c:	bd80      	pop	{r7, pc}

08021d8e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021d8e:	b580      	push	{r7, lr}
 8021d90:	b084      	sub	sp, #16
 8021d92:	af00      	add	r7, sp, #0
 8021d94:	6078      	str	r0, [r7, #4]
 8021d96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021d98:	200f      	movs	r0, #15
 8021d9a:	183b      	adds	r3, r7, r0
 8021d9c:	2200      	movs	r2, #0
 8021d9e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021da0:	683b      	ldr	r3, [r7, #0]
 8021da2:	2b00      	cmp	r3, #0
 8021da4:	d008      	beq.n	8021db8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021da6:	687a      	ldr	r2, [r7, #4]
 8021da8:	23ad      	movs	r3, #173	@ 0xad
 8021daa:	009b      	lsls	r3, r3, #2
 8021dac:	6839      	ldr	r1, [r7, #0]
 8021dae:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021db0:	183b      	adds	r3, r7, r0
 8021db2:	2200      	movs	r2, #0
 8021db4:	701a      	strb	r2, [r3, #0]
 8021db6:	e003      	b.n	8021dc0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021db8:	230f      	movs	r3, #15
 8021dba:	18fb      	adds	r3, r7, r3
 8021dbc:	2202      	movs	r2, #2
 8021dbe:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021dc0:	230f      	movs	r3, #15
 8021dc2:	18fb      	adds	r3, r7, r3
 8021dc4:	781b      	ldrb	r3, [r3, #0]
}
 8021dc6:	0018      	movs	r0, r3
 8021dc8:	46bd      	mov	sp, r7
 8021dca:	b004      	add	sp, #16
 8021dcc:	bd80      	pop	{r7, pc}

08021dce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021dce:	b580      	push	{r7, lr}
 8021dd0:	b082      	sub	sp, #8
 8021dd2:	af00      	add	r7, sp, #0
 8021dd4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	0018      	movs	r0, r3
 8021dda:	f001 fd4f 	bl	802387c <USBD_LL_Start>

  return USBD_OK;
 8021dde:	2300      	movs	r3, #0
}
 8021de0:	0018      	movs	r0, r3
 8021de2:	46bd      	mov	sp, r7
 8021de4:	b002      	add	sp, #8
 8021de6:	bd80      	pop	{r7, pc}

08021de8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021de8:	b580      	push	{r7, lr}
 8021dea:	b082      	sub	sp, #8
 8021dec:	af00      	add	r7, sp, #0
 8021dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021df0:	2300      	movs	r3, #0
}
 8021df2:	0018      	movs	r0, r3
 8021df4:	46bd      	mov	sp, r7
 8021df6:	b002      	add	sp, #8
 8021df8:	bd80      	pop	{r7, pc}

08021dfa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021dfa:	b590      	push	{r4, r7, lr}
 8021dfc:	b085      	sub	sp, #20
 8021dfe:	af00      	add	r7, sp, #0
 8021e00:	6078      	str	r0, [r7, #4]
 8021e02:	000a      	movs	r2, r1
 8021e04:	1cfb      	adds	r3, r7, #3
 8021e06:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021e08:	240f      	movs	r4, #15
 8021e0a:	193b      	adds	r3, r7, r4
 8021e0c:	2202      	movs	r2, #2
 8021e0e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021e10:	687a      	ldr	r2, [r7, #4]
 8021e12:	23ad      	movs	r3, #173	@ 0xad
 8021e14:	009b      	lsls	r3, r3, #2
 8021e16:	58d3      	ldr	r3, [r2, r3]
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	d00e      	beq.n	8021e3a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021e1c:	687a      	ldr	r2, [r7, #4]
 8021e1e:	23ad      	movs	r3, #173	@ 0xad
 8021e20:	009b      	lsls	r3, r3, #2
 8021e22:	58d3      	ldr	r3, [r2, r3]
 8021e24:	681b      	ldr	r3, [r3, #0]
 8021e26:	1cfa      	adds	r2, r7, #3
 8021e28:	7811      	ldrb	r1, [r2, #0]
 8021e2a:	687a      	ldr	r2, [r7, #4]
 8021e2c:	0010      	movs	r0, r2
 8021e2e:	4798      	blx	r3
 8021e30:	1e03      	subs	r3, r0, #0
 8021e32:	d102      	bne.n	8021e3a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021e34:	193b      	adds	r3, r7, r4
 8021e36:	2200      	movs	r2, #0
 8021e38:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021e3a:	230f      	movs	r3, #15
 8021e3c:	18fb      	adds	r3, r7, r3
 8021e3e:	781b      	ldrb	r3, [r3, #0]
}
 8021e40:	0018      	movs	r0, r3
 8021e42:	46bd      	mov	sp, r7
 8021e44:	b005      	add	sp, #20
 8021e46:	bd90      	pop	{r4, r7, pc}

08021e48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021e48:	b580      	push	{r7, lr}
 8021e4a:	b082      	sub	sp, #8
 8021e4c:	af00      	add	r7, sp, #0
 8021e4e:	6078      	str	r0, [r7, #4]
 8021e50:	000a      	movs	r2, r1
 8021e52:	1cfb      	adds	r3, r7, #3
 8021e54:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021e56:	687a      	ldr	r2, [r7, #4]
 8021e58:	23ad      	movs	r3, #173	@ 0xad
 8021e5a:	009b      	lsls	r3, r3, #2
 8021e5c:	58d3      	ldr	r3, [r2, r3]
 8021e5e:	685b      	ldr	r3, [r3, #4]
 8021e60:	1cfa      	adds	r2, r7, #3
 8021e62:	7811      	ldrb	r1, [r2, #0]
 8021e64:	687a      	ldr	r2, [r7, #4]
 8021e66:	0010      	movs	r0, r2
 8021e68:	4798      	blx	r3

  return USBD_OK;
 8021e6a:	2300      	movs	r3, #0
}
 8021e6c:	0018      	movs	r0, r3
 8021e6e:	46bd      	mov	sp, r7
 8021e70:	b002      	add	sp, #8
 8021e72:	bd80      	pop	{r7, pc}

08021e74 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021e74:	b580      	push	{r7, lr}
 8021e76:	b082      	sub	sp, #8
 8021e78:	af00      	add	r7, sp, #0
 8021e7a:	6078      	str	r0, [r7, #4]
 8021e7c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	22aa      	movs	r2, #170	@ 0xaa
 8021e82:	0092      	lsls	r2, r2, #2
 8021e84:	4694      	mov	ip, r2
 8021e86:	4463      	add	r3, ip
 8021e88:	683a      	ldr	r2, [r7, #0]
 8021e8a:	0011      	movs	r1, r2
 8021e8c:	0018      	movs	r0, r3
 8021e8e:	f001 f810 	bl	8022eb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021e92:	687a      	ldr	r2, [r7, #4]
 8021e94:	23a5      	movs	r3, #165	@ 0xa5
 8021e96:	009b      	lsls	r3, r3, #2
 8021e98:	2101      	movs	r1, #1
 8021e9a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021e9c:	687b      	ldr	r3, [r7, #4]
 8021e9e:	4a23      	ldr	r2, [pc, #140]	@ (8021f2c <USBD_LL_SetupStage+0xb8>)
 8021ea0:	5a9b      	ldrh	r3, [r3, r2]
 8021ea2:	0019      	movs	r1, r3
 8021ea4:	687a      	ldr	r2, [r7, #4]
 8021ea6:	23a6      	movs	r3, #166	@ 0xa6
 8021ea8:	009b      	lsls	r3, r3, #2
 8021eaa:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021eac:	687a      	ldr	r2, [r7, #4]
 8021eae:	23aa      	movs	r3, #170	@ 0xaa
 8021eb0:	009b      	lsls	r3, r3, #2
 8021eb2:	5cd3      	ldrb	r3, [r2, r3]
 8021eb4:	001a      	movs	r2, r3
 8021eb6:	231f      	movs	r3, #31
 8021eb8:	4013      	ands	r3, r2
 8021eba:	2b02      	cmp	r3, #2
 8021ebc:	d019      	beq.n	8021ef2 <USBD_LL_SetupStage+0x7e>
 8021ebe:	d822      	bhi.n	8021f06 <USBD_LL_SetupStage+0x92>
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	d002      	beq.n	8021eca <USBD_LL_SetupStage+0x56>
 8021ec4:	2b01      	cmp	r3, #1
 8021ec6:	d00a      	beq.n	8021ede <USBD_LL_SetupStage+0x6a>
 8021ec8:	e01d      	b.n	8021f06 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	22aa      	movs	r2, #170	@ 0xaa
 8021ece:	0092      	lsls	r2, r2, #2
 8021ed0:	189a      	adds	r2, r3, r2
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	0011      	movs	r1, r2
 8021ed6:	0018      	movs	r0, r3
 8021ed8:	f000 fa10 	bl	80222fc <USBD_StdDevReq>
      break;
 8021edc:	e020      	b.n	8021f20 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	22aa      	movs	r2, #170	@ 0xaa
 8021ee2:	0092      	lsls	r2, r2, #2
 8021ee4:	189a      	adds	r2, r3, r2
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	0011      	movs	r1, r2
 8021eea:	0018      	movs	r0, r3
 8021eec:	f000 fa78 	bl	80223e0 <USBD_StdItfReq>
      break;
 8021ef0:	e016      	b.n	8021f20 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	22aa      	movs	r2, #170	@ 0xaa
 8021ef6:	0092      	lsls	r2, r2, #2
 8021ef8:	189a      	adds	r2, r3, r2
 8021efa:	687b      	ldr	r3, [r7, #4]
 8021efc:	0011      	movs	r1, r2
 8021efe:	0018      	movs	r0, r3
 8021f00:	f000 fac5 	bl	802248e <USBD_StdEPReq>
      break;
 8021f04:	e00c      	b.n	8021f20 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021f06:	687a      	ldr	r2, [r7, #4]
 8021f08:	23aa      	movs	r3, #170	@ 0xaa
 8021f0a:	009b      	lsls	r3, r3, #2
 8021f0c:	5cd3      	ldrb	r3, [r2, r3]
 8021f0e:	227f      	movs	r2, #127	@ 0x7f
 8021f10:	4393      	bics	r3, r2
 8021f12:	b2da      	uxtb	r2, r3
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	0011      	movs	r1, r2
 8021f18:	0018      	movs	r0, r3
 8021f1a:	f001 fd36 	bl	802398a <USBD_LL_StallEP>
      break;
 8021f1e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021f20:	2300      	movs	r3, #0
}
 8021f22:	0018      	movs	r0, r3
 8021f24:	46bd      	mov	sp, r7
 8021f26:	b002      	add	sp, #8
 8021f28:	bd80      	pop	{r7, pc}
 8021f2a:	46c0      	nop			@ (mov r8, r8)
 8021f2c:	000002ae 	.word	0x000002ae

08021f30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021f30:	b580      	push	{r7, lr}
 8021f32:	b086      	sub	sp, #24
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	60f8      	str	r0, [r7, #12]
 8021f38:	607a      	str	r2, [r7, #4]
 8021f3a:	200b      	movs	r0, #11
 8021f3c:	183b      	adds	r3, r7, r0
 8021f3e:	1c0a      	adds	r2, r1, #0
 8021f40:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021f42:	183b      	adds	r3, r7, r0
 8021f44:	781b      	ldrb	r3, [r3, #0]
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d154      	bne.n	8021ff4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	3355      	adds	r3, #85	@ 0x55
 8021f4e:	33ff      	adds	r3, #255	@ 0xff
 8021f50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021f52:	68fa      	ldr	r2, [r7, #12]
 8021f54:	23a5      	movs	r3, #165	@ 0xa5
 8021f56:	009b      	lsls	r3, r3, #2
 8021f58:	58d3      	ldr	r3, [r2, r3]
 8021f5a:	2b03      	cmp	r3, #3
 8021f5c:	d139      	bne.n	8021fd2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021f5e:	697b      	ldr	r3, [r7, #20]
 8021f60:	68da      	ldr	r2, [r3, #12]
 8021f62:	697b      	ldr	r3, [r7, #20]
 8021f64:	691b      	ldr	r3, [r3, #16]
 8021f66:	429a      	cmp	r2, r3
 8021f68:	d919      	bls.n	8021f9e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021f6a:	697b      	ldr	r3, [r7, #20]
 8021f6c:	68da      	ldr	r2, [r3, #12]
 8021f6e:	697b      	ldr	r3, [r7, #20]
 8021f70:	691b      	ldr	r3, [r3, #16]
 8021f72:	1ad2      	subs	r2, r2, r3
 8021f74:	697b      	ldr	r3, [r7, #20]
 8021f76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021f78:	697b      	ldr	r3, [r7, #20]
 8021f7a:	68da      	ldr	r2, [r3, #12]
 8021f7c:	697b      	ldr	r3, [r7, #20]
 8021f7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021f80:	429a      	cmp	r2, r3
 8021f82:	d203      	bcs.n	8021f8c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021f84:	697b      	ldr	r3, [r7, #20]
 8021f86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021f88:	b29b      	uxth	r3, r3
 8021f8a:	e002      	b.n	8021f92 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021f8c:	697b      	ldr	r3, [r7, #20]
 8021f8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021f90:	b29b      	uxth	r3, r3
 8021f92:	6879      	ldr	r1, [r7, #4]
 8021f94:	68f8      	ldr	r0, [r7, #12]
 8021f96:	001a      	movs	r2, r3
 8021f98:	f001 f898 	bl	80230cc <USBD_CtlContinueRx>
 8021f9c:	e045      	b.n	802202a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021f9e:	68fa      	ldr	r2, [r7, #12]
 8021fa0:	23ad      	movs	r3, #173	@ 0xad
 8021fa2:	009b      	lsls	r3, r3, #2
 8021fa4:	58d3      	ldr	r3, [r2, r3]
 8021fa6:	691b      	ldr	r3, [r3, #16]
 8021fa8:	2b00      	cmp	r3, #0
 8021faa:	d00d      	beq.n	8021fc8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021fac:	68fa      	ldr	r2, [r7, #12]
 8021fae:	23a7      	movs	r3, #167	@ 0xa7
 8021fb0:	009b      	lsls	r3, r3, #2
 8021fb2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021fb4:	2b03      	cmp	r3, #3
 8021fb6:	d107      	bne.n	8021fc8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021fb8:	68fa      	ldr	r2, [r7, #12]
 8021fba:	23ad      	movs	r3, #173	@ 0xad
 8021fbc:	009b      	lsls	r3, r3, #2
 8021fbe:	58d3      	ldr	r3, [r2, r3]
 8021fc0:	691b      	ldr	r3, [r3, #16]
 8021fc2:	68fa      	ldr	r2, [r7, #12]
 8021fc4:	0010      	movs	r0, r2
 8021fc6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021fc8:	68fb      	ldr	r3, [r7, #12]
 8021fca:	0018      	movs	r0, r3
 8021fcc:	f001 f891 	bl	80230f2 <USBD_CtlSendStatus>
 8021fd0:	e02b      	b.n	802202a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021fd2:	68fa      	ldr	r2, [r7, #12]
 8021fd4:	23a5      	movs	r3, #165	@ 0xa5
 8021fd6:	009b      	lsls	r3, r3, #2
 8021fd8:	58d3      	ldr	r3, [r2, r3]
 8021fda:	2b05      	cmp	r3, #5
 8021fdc:	d125      	bne.n	802202a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021fde:	68fa      	ldr	r2, [r7, #12]
 8021fe0:	23a5      	movs	r3, #165	@ 0xa5
 8021fe2:	009b      	lsls	r3, r3, #2
 8021fe4:	2100      	movs	r1, #0
 8021fe6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021fe8:	68fb      	ldr	r3, [r7, #12]
 8021fea:	2100      	movs	r1, #0
 8021fec:	0018      	movs	r0, r3
 8021fee:	f001 fccc 	bl	802398a <USBD_LL_StallEP>
 8021ff2:	e01a      	b.n	802202a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021ff4:	68fa      	ldr	r2, [r7, #12]
 8021ff6:	23ad      	movs	r3, #173	@ 0xad
 8021ff8:	009b      	lsls	r3, r3, #2
 8021ffa:	58d3      	ldr	r3, [r2, r3]
 8021ffc:	699b      	ldr	r3, [r3, #24]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d011      	beq.n	8022026 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8022002:	68fa      	ldr	r2, [r7, #12]
 8022004:	23a7      	movs	r3, #167	@ 0xa7
 8022006:	009b      	lsls	r3, r3, #2
 8022008:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 802200a:	2b03      	cmp	r3, #3
 802200c:	d10b      	bne.n	8022026 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 802200e:	68fa      	ldr	r2, [r7, #12]
 8022010:	23ad      	movs	r3, #173	@ 0xad
 8022012:	009b      	lsls	r3, r3, #2
 8022014:	58d3      	ldr	r3, [r2, r3]
 8022016:	699b      	ldr	r3, [r3, #24]
 8022018:	220b      	movs	r2, #11
 802201a:	18ba      	adds	r2, r7, r2
 802201c:	7811      	ldrb	r1, [r2, #0]
 802201e:	68fa      	ldr	r2, [r7, #12]
 8022020:	0010      	movs	r0, r2
 8022022:	4798      	blx	r3
 8022024:	e001      	b.n	802202a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8022026:	2302      	movs	r3, #2
 8022028:	e000      	b.n	802202c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 802202a:	2300      	movs	r3, #0
}
 802202c:	0018      	movs	r0, r3
 802202e:	46bd      	mov	sp, r7
 8022030:	b006      	add	sp, #24
 8022032:	bd80      	pop	{r7, pc}

08022034 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8022034:	b580      	push	{r7, lr}
 8022036:	b086      	sub	sp, #24
 8022038:	af00      	add	r7, sp, #0
 802203a:	60f8      	str	r0, [r7, #12]
 802203c:	607a      	str	r2, [r7, #4]
 802203e:	200b      	movs	r0, #11
 8022040:	183b      	adds	r3, r7, r0
 8022042:	1c0a      	adds	r2, r1, #0
 8022044:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8022046:	183b      	adds	r3, r7, r0
 8022048:	781b      	ldrb	r3, [r3, #0]
 802204a:	2b00      	cmp	r3, #0
 802204c:	d000      	beq.n	8022050 <USBD_LL_DataInStage+0x1c>
 802204e:	e08e      	b.n	802216e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8022050:	68fb      	ldr	r3, [r7, #12]
 8022052:	3314      	adds	r3, #20
 8022054:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8022056:	68fa      	ldr	r2, [r7, #12]
 8022058:	23a5      	movs	r3, #165	@ 0xa5
 802205a:	009b      	lsls	r3, r3, #2
 802205c:	58d3      	ldr	r3, [r2, r3]
 802205e:	2b02      	cmp	r3, #2
 8022060:	d164      	bne.n	802212c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8022062:	697b      	ldr	r3, [r7, #20]
 8022064:	68da      	ldr	r2, [r3, #12]
 8022066:	697b      	ldr	r3, [r7, #20]
 8022068:	691b      	ldr	r3, [r3, #16]
 802206a:	429a      	cmp	r2, r3
 802206c:	d915      	bls.n	802209a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 802206e:	697b      	ldr	r3, [r7, #20]
 8022070:	68da      	ldr	r2, [r3, #12]
 8022072:	697b      	ldr	r3, [r7, #20]
 8022074:	691b      	ldr	r3, [r3, #16]
 8022076:	1ad2      	subs	r2, r2, r3
 8022078:	697b      	ldr	r3, [r7, #20]
 802207a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 802207c:	697b      	ldr	r3, [r7, #20]
 802207e:	68db      	ldr	r3, [r3, #12]
 8022080:	b29a      	uxth	r2, r3
 8022082:	6879      	ldr	r1, [r7, #4]
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	0018      	movs	r0, r3
 8022088:	f000 ffe9 	bl	802305e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802208c:	68f8      	ldr	r0, [r7, #12]
 802208e:	2300      	movs	r3, #0
 8022090:	2200      	movs	r2, #0
 8022092:	2100      	movs	r1, #0
 8022094:	f001 fd62 	bl	8023b5c <USBD_LL_PrepareReceive>
 8022098:	e059      	b.n	802214e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802209a:	697b      	ldr	r3, [r7, #20]
 802209c:	689a      	ldr	r2, [r3, #8]
 802209e:	697b      	ldr	r3, [r7, #20]
 80220a0:	691b      	ldr	r3, [r3, #16]
 80220a2:	0019      	movs	r1, r3
 80220a4:	0010      	movs	r0, r2
 80220a6:	f7de f903 	bl	80002b0 <__aeabi_uidivmod>
 80220aa:	1e0b      	subs	r3, r1, #0
 80220ac:	d11f      	bne.n	80220ee <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80220ae:	697b      	ldr	r3, [r7, #20]
 80220b0:	689a      	ldr	r2, [r3, #8]
 80220b2:	697b      	ldr	r3, [r7, #20]
 80220b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80220b6:	429a      	cmp	r2, r3
 80220b8:	d319      	bcc.n	80220ee <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80220ba:	697b      	ldr	r3, [r7, #20]
 80220bc:	689a      	ldr	r2, [r3, #8]
 80220be:	68f9      	ldr	r1, [r7, #12]
 80220c0:	23a6      	movs	r3, #166	@ 0xa6
 80220c2:	009b      	lsls	r3, r3, #2
 80220c4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80220c6:	429a      	cmp	r2, r3
 80220c8:	d211      	bcs.n	80220ee <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	2200      	movs	r2, #0
 80220ce:	2100      	movs	r1, #0
 80220d0:	0018      	movs	r0, r3
 80220d2:	f000 ffc4 	bl	802305e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80220d6:	68fa      	ldr	r2, [r7, #12]
 80220d8:	23a6      	movs	r3, #166	@ 0xa6
 80220da:	009b      	lsls	r3, r3, #2
 80220dc:	2100      	movs	r1, #0
 80220de:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80220e0:	68f8      	ldr	r0, [r7, #12]
 80220e2:	2300      	movs	r3, #0
 80220e4:	2200      	movs	r2, #0
 80220e6:	2100      	movs	r1, #0
 80220e8:	f001 fd38 	bl	8023b5c <USBD_LL_PrepareReceive>
 80220ec:	e02f      	b.n	802214e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80220ee:	68fa      	ldr	r2, [r7, #12]
 80220f0:	23ad      	movs	r3, #173	@ 0xad
 80220f2:	009b      	lsls	r3, r3, #2
 80220f4:	58d3      	ldr	r3, [r2, r3]
 80220f6:	68db      	ldr	r3, [r3, #12]
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d00d      	beq.n	8022118 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80220fc:	68fa      	ldr	r2, [r7, #12]
 80220fe:	23a7      	movs	r3, #167	@ 0xa7
 8022100:	009b      	lsls	r3, r3, #2
 8022102:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8022104:	2b03      	cmp	r3, #3
 8022106:	d107      	bne.n	8022118 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8022108:	68fa      	ldr	r2, [r7, #12]
 802210a:	23ad      	movs	r3, #173	@ 0xad
 802210c:	009b      	lsls	r3, r3, #2
 802210e:	58d3      	ldr	r3, [r2, r3]
 8022110:	68db      	ldr	r3, [r3, #12]
 8022112:	68fa      	ldr	r2, [r7, #12]
 8022114:	0010      	movs	r0, r2
 8022116:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8022118:	68fb      	ldr	r3, [r7, #12]
 802211a:	2180      	movs	r1, #128	@ 0x80
 802211c:	0018      	movs	r0, r3
 802211e:	f001 fc34 	bl	802398a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8022122:	68fb      	ldr	r3, [r7, #12]
 8022124:	0018      	movs	r0, r3
 8022126:	f000 fff8 	bl	802311a <USBD_CtlReceiveStatus>
 802212a:	e010      	b.n	802214e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 802212c:	68fa      	ldr	r2, [r7, #12]
 802212e:	23a5      	movs	r3, #165	@ 0xa5
 8022130:	009b      	lsls	r3, r3, #2
 8022132:	58d3      	ldr	r3, [r2, r3]
 8022134:	2b04      	cmp	r3, #4
 8022136:	d005      	beq.n	8022144 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8022138:	68fa      	ldr	r2, [r7, #12]
 802213a:	23a5      	movs	r3, #165	@ 0xa5
 802213c:	009b      	lsls	r3, r3, #2
 802213e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8022140:	2b00      	cmp	r3, #0
 8022142:	d104      	bne.n	802214e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	2180      	movs	r1, #128	@ 0x80
 8022148:	0018      	movs	r0, r3
 802214a:	f001 fc1e 	bl	802398a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 802214e:	68fa      	ldr	r2, [r7, #12]
 8022150:	23a8      	movs	r3, #168	@ 0xa8
 8022152:	009b      	lsls	r3, r3, #2
 8022154:	5cd3      	ldrb	r3, [r2, r3]
 8022156:	2b01      	cmp	r3, #1
 8022158:	d124      	bne.n	80221a4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 802215a:	68fb      	ldr	r3, [r7, #12]
 802215c:	0018      	movs	r0, r3
 802215e:	f7ff fe43 	bl	8021de8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8022162:	68fa      	ldr	r2, [r7, #12]
 8022164:	23a8      	movs	r3, #168	@ 0xa8
 8022166:	009b      	lsls	r3, r3, #2
 8022168:	2100      	movs	r1, #0
 802216a:	54d1      	strb	r1, [r2, r3]
 802216c:	e01a      	b.n	80221a4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 802216e:	68fa      	ldr	r2, [r7, #12]
 8022170:	23ad      	movs	r3, #173	@ 0xad
 8022172:	009b      	lsls	r3, r3, #2
 8022174:	58d3      	ldr	r3, [r2, r3]
 8022176:	695b      	ldr	r3, [r3, #20]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d011      	beq.n	80221a0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802217c:	68fa      	ldr	r2, [r7, #12]
 802217e:	23a7      	movs	r3, #167	@ 0xa7
 8022180:	009b      	lsls	r3, r3, #2
 8022182:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8022184:	2b03      	cmp	r3, #3
 8022186:	d10b      	bne.n	80221a0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8022188:	68fa      	ldr	r2, [r7, #12]
 802218a:	23ad      	movs	r3, #173	@ 0xad
 802218c:	009b      	lsls	r3, r3, #2
 802218e:	58d3      	ldr	r3, [r2, r3]
 8022190:	695b      	ldr	r3, [r3, #20]
 8022192:	220b      	movs	r2, #11
 8022194:	18ba      	adds	r2, r7, r2
 8022196:	7811      	ldrb	r1, [r2, #0]
 8022198:	68fa      	ldr	r2, [r7, #12]
 802219a:	0010      	movs	r0, r2
 802219c:	4798      	blx	r3
 802219e:	e001      	b.n	80221a4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80221a0:	2302      	movs	r3, #2
 80221a2:	e000      	b.n	80221a6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80221a4:	2300      	movs	r3, #0
}
 80221a6:	0018      	movs	r0, r3
 80221a8:	46bd      	mov	sp, r7
 80221aa:	b006      	add	sp, #24
 80221ac:	bd80      	pop	{r7, pc}

080221ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80221ae:	b580      	push	{r7, lr}
 80221b0:	b082      	sub	sp, #8
 80221b2:	af00      	add	r7, sp, #0
 80221b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80221b6:	6878      	ldr	r0, [r7, #4]
 80221b8:	2340      	movs	r3, #64	@ 0x40
 80221ba:	2200      	movs	r2, #0
 80221bc:	2100      	movs	r1, #0
 80221be:	f001 fb82 	bl	80238c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80221c2:	687a      	ldr	r2, [r7, #4]
 80221c4:	23ac      	movs	r3, #172	@ 0xac
 80221c6:	005b      	lsls	r3, r3, #1
 80221c8:	2101      	movs	r1, #1
 80221ca:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80221cc:	687a      	ldr	r2, [r7, #4]
 80221ce:	23b2      	movs	r3, #178	@ 0xb2
 80221d0:	005b      	lsls	r3, r3, #1
 80221d2:	2140      	movs	r1, #64	@ 0x40
 80221d4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80221d6:	6878      	ldr	r0, [r7, #4]
 80221d8:	2340      	movs	r3, #64	@ 0x40
 80221da:	2200      	movs	r2, #0
 80221dc:	2180      	movs	r1, #128	@ 0x80
 80221de:	f001 fb72 	bl	80238c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	2201      	movs	r2, #1
 80221e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	2240      	movs	r2, #64	@ 0x40
 80221ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80221ee:	687a      	ldr	r2, [r7, #4]
 80221f0:	23a7      	movs	r3, #167	@ 0xa7
 80221f2:	009b      	lsls	r3, r3, #2
 80221f4:	2101      	movs	r1, #1
 80221f6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80221f8:	687a      	ldr	r2, [r7, #4]
 80221fa:	23a5      	movs	r3, #165	@ 0xa5
 80221fc:	009b      	lsls	r3, r3, #2
 80221fe:	2100      	movs	r1, #0
 8022200:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8022202:	687b      	ldr	r3, [r7, #4]
 8022204:	2200      	movs	r2, #0
 8022206:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8022208:	687a      	ldr	r2, [r7, #4]
 802220a:	23a9      	movs	r3, #169	@ 0xa9
 802220c:	009b      	lsls	r3, r3, #2
 802220e:	2100      	movs	r1, #0
 8022210:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8022212:	687a      	ldr	r2, [r7, #4]
 8022214:	23ae      	movs	r3, #174	@ 0xae
 8022216:	009b      	lsls	r3, r3, #2
 8022218:	58d3      	ldr	r3, [r2, r3]
 802221a:	2b00      	cmp	r3, #0
 802221c:	d00a      	beq.n	8022234 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802221e:	687a      	ldr	r2, [r7, #4]
 8022220:	23ad      	movs	r3, #173	@ 0xad
 8022222:	009b      	lsls	r3, r3, #2
 8022224:	58d3      	ldr	r3, [r2, r3]
 8022226:	685a      	ldr	r2, [r3, #4]
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	685b      	ldr	r3, [r3, #4]
 802222c:	b2d9      	uxtb	r1, r3
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	0018      	movs	r0, r3
 8022232:	4790      	blx	r2
  }

  return USBD_OK;
 8022234:	2300      	movs	r3, #0
}
 8022236:	0018      	movs	r0, r3
 8022238:	46bd      	mov	sp, r7
 802223a:	b002      	add	sp, #8
 802223c:	bd80      	pop	{r7, pc}

0802223e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802223e:	b580      	push	{r7, lr}
 8022240:	b082      	sub	sp, #8
 8022242:	af00      	add	r7, sp, #0
 8022244:	6078      	str	r0, [r7, #4]
 8022246:	000a      	movs	r2, r1
 8022248:	1cfb      	adds	r3, r7, #3
 802224a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	1cfa      	adds	r2, r7, #3
 8022250:	7812      	ldrb	r2, [r2, #0]
 8022252:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022254:	2300      	movs	r3, #0
}
 8022256:	0018      	movs	r0, r3
 8022258:	46bd      	mov	sp, r7
 802225a:	b002      	add	sp, #8
 802225c:	bd80      	pop	{r7, pc}
	...

08022260 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8022260:	b580      	push	{r7, lr}
 8022262:	b082      	sub	sp, #8
 8022264:	af00      	add	r7, sp, #0
 8022266:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8022268:	687a      	ldr	r2, [r7, #4]
 802226a:	23a7      	movs	r3, #167	@ 0xa7
 802226c:	009b      	lsls	r3, r3, #2
 802226e:	5cd1      	ldrb	r1, [r2, r3]
 8022270:	687b      	ldr	r3, [r7, #4]
 8022272:	4a06      	ldr	r2, [pc, #24]	@ (802228c <USBD_LL_Suspend+0x2c>)
 8022274:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8022276:	687a      	ldr	r2, [r7, #4]
 8022278:	23a7      	movs	r3, #167	@ 0xa7
 802227a:	009b      	lsls	r3, r3, #2
 802227c:	2104      	movs	r1, #4
 802227e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8022280:	2300      	movs	r3, #0
}
 8022282:	0018      	movs	r0, r3
 8022284:	46bd      	mov	sp, r7
 8022286:	b002      	add	sp, #8
 8022288:	bd80      	pop	{r7, pc}
 802228a:	46c0      	nop			@ (mov r8, r8)
 802228c:	0000029d 	.word	0x0000029d

08022290 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8022290:	b580      	push	{r7, lr}
 8022292:	b082      	sub	sp, #8
 8022294:	af00      	add	r7, sp, #0
 8022296:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8022298:	687a      	ldr	r2, [r7, #4]
 802229a:	23a7      	movs	r3, #167	@ 0xa7
 802229c:	009b      	lsls	r3, r3, #2
 802229e:	5cd3      	ldrb	r3, [r2, r3]
 80222a0:	2b04      	cmp	r3, #4
 80222a2:	d106      	bne.n	80222b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	4a05      	ldr	r2, [pc, #20]	@ (80222bc <USBD_LL_Resume+0x2c>)
 80222a8:	5c99      	ldrb	r1, [r3, r2]
 80222aa:	687a      	ldr	r2, [r7, #4]
 80222ac:	23a7      	movs	r3, #167	@ 0xa7
 80222ae:	009b      	lsls	r3, r3, #2
 80222b0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80222b2:	2300      	movs	r3, #0
}
 80222b4:	0018      	movs	r0, r3
 80222b6:	46bd      	mov	sp, r7
 80222b8:	b002      	add	sp, #8
 80222ba:	bd80      	pop	{r7, pc}
 80222bc:	0000029d 	.word	0x0000029d

080222c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80222c0:	b580      	push	{r7, lr}
 80222c2:	b082      	sub	sp, #8
 80222c4:	af00      	add	r7, sp, #0
 80222c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80222c8:	687a      	ldr	r2, [r7, #4]
 80222ca:	23a7      	movs	r3, #167	@ 0xa7
 80222cc:	009b      	lsls	r3, r3, #2
 80222ce:	5cd3      	ldrb	r3, [r2, r3]
 80222d0:	2b03      	cmp	r3, #3
 80222d2:	d10e      	bne.n	80222f2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80222d4:	687a      	ldr	r2, [r7, #4]
 80222d6:	23ad      	movs	r3, #173	@ 0xad
 80222d8:	009b      	lsls	r3, r3, #2
 80222da:	58d3      	ldr	r3, [r2, r3]
 80222dc:	69db      	ldr	r3, [r3, #28]
 80222de:	2b00      	cmp	r3, #0
 80222e0:	d007      	beq.n	80222f2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80222e2:	687a      	ldr	r2, [r7, #4]
 80222e4:	23ad      	movs	r3, #173	@ 0xad
 80222e6:	009b      	lsls	r3, r3, #2
 80222e8:	58d3      	ldr	r3, [r2, r3]
 80222ea:	69db      	ldr	r3, [r3, #28]
 80222ec:	687a      	ldr	r2, [r7, #4]
 80222ee:	0010      	movs	r0, r2
 80222f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80222f2:	2300      	movs	r3, #0
}
 80222f4:	0018      	movs	r0, r3
 80222f6:	46bd      	mov	sp, r7
 80222f8:	b002      	add	sp, #8
 80222fa:	bd80      	pop	{r7, pc}

080222fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80222fc:	b580      	push	{r7, lr}
 80222fe:	b084      	sub	sp, #16
 8022300:	af00      	add	r7, sp, #0
 8022302:	6078      	str	r0, [r7, #4]
 8022304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8022306:	230f      	movs	r3, #15
 8022308:	18fb      	adds	r3, r7, r3
 802230a:	2200      	movs	r2, #0
 802230c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802230e:	683b      	ldr	r3, [r7, #0]
 8022310:	781b      	ldrb	r3, [r3, #0]
 8022312:	001a      	movs	r2, r3
 8022314:	2360      	movs	r3, #96	@ 0x60
 8022316:	4013      	ands	r3, r2
 8022318:	2b40      	cmp	r3, #64	@ 0x40
 802231a:	d004      	beq.n	8022326 <USBD_StdDevReq+0x2a>
 802231c:	d84f      	bhi.n	80223be <USBD_StdDevReq+0xc2>
 802231e:	2b00      	cmp	r3, #0
 8022320:	d00b      	beq.n	802233a <USBD_StdDevReq+0x3e>
 8022322:	2b20      	cmp	r3, #32
 8022324:	d14b      	bne.n	80223be <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8022326:	687a      	ldr	r2, [r7, #4]
 8022328:	23ad      	movs	r3, #173	@ 0xad
 802232a:	009b      	lsls	r3, r3, #2
 802232c:	58d3      	ldr	r3, [r2, r3]
 802232e:	689b      	ldr	r3, [r3, #8]
 8022330:	6839      	ldr	r1, [r7, #0]
 8022332:	687a      	ldr	r2, [r7, #4]
 8022334:	0010      	movs	r0, r2
 8022336:	4798      	blx	r3
      break;
 8022338:	e048      	b.n	80223cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802233a:	683b      	ldr	r3, [r7, #0]
 802233c:	785b      	ldrb	r3, [r3, #1]
 802233e:	2b09      	cmp	r3, #9
 8022340:	d835      	bhi.n	80223ae <USBD_StdDevReq+0xb2>
 8022342:	009a      	lsls	r2, r3, #2
 8022344:	4b25      	ldr	r3, [pc, #148]	@ (80223dc <USBD_StdDevReq+0xe0>)
 8022346:	18d3      	adds	r3, r2, r3
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 802234c:	683a      	ldr	r2, [r7, #0]
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	0011      	movs	r1, r2
 8022352:	0018      	movs	r0, r3
 8022354:	f000 fa52 	bl	80227fc <USBD_GetDescriptor>
          break;
 8022358:	e030      	b.n	80223bc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802235a:	683a      	ldr	r2, [r7, #0]
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	0011      	movs	r1, r2
 8022360:	0018      	movs	r0, r3
 8022362:	f000 fbfd 	bl	8022b60 <USBD_SetAddress>
          break;
 8022366:	e029      	b.n	80223bc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8022368:	683a      	ldr	r2, [r7, #0]
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	0011      	movs	r1, r2
 802236e:	0018      	movs	r0, r3
 8022370:	f000 fc4a 	bl	8022c08 <USBD_SetConfig>
          break;
 8022374:	e022      	b.n	80223bc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8022376:	683a      	ldr	r2, [r7, #0]
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	0011      	movs	r1, r2
 802237c:	0018      	movs	r0, r3
 802237e:	f000 fce7 	bl	8022d50 <USBD_GetConfig>
          break;
 8022382:	e01b      	b.n	80223bc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8022384:	683a      	ldr	r2, [r7, #0]
 8022386:	687b      	ldr	r3, [r7, #4]
 8022388:	0011      	movs	r1, r2
 802238a:	0018      	movs	r0, r3
 802238c:	f000 fd1b 	bl	8022dc6 <USBD_GetStatus>
          break;
 8022390:	e014      	b.n	80223bc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8022392:	683a      	ldr	r2, [r7, #0]
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	0011      	movs	r1, r2
 8022398:	0018      	movs	r0, r3
 802239a:	f000 fd4e 	bl	8022e3a <USBD_SetFeature>
          break;
 802239e:	e00d      	b.n	80223bc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80223a0:	683a      	ldr	r2, [r7, #0]
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	0011      	movs	r1, r2
 80223a6:	0018      	movs	r0, r3
 80223a8:	f000 fd5d 	bl	8022e66 <USBD_ClrFeature>
          break;
 80223ac:	e006      	b.n	80223bc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80223ae:	683a      	ldr	r2, [r7, #0]
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	0011      	movs	r1, r2
 80223b4:	0018      	movs	r0, r3
 80223b6:	f000 fdb4 	bl	8022f22 <USBD_CtlError>
          break;
 80223ba:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80223bc:	e006      	b.n	80223cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80223be:	683a      	ldr	r2, [r7, #0]
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	0011      	movs	r1, r2
 80223c4:	0018      	movs	r0, r3
 80223c6:	f000 fdac 	bl	8022f22 <USBD_CtlError>
      break;
 80223ca:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80223cc:	230f      	movs	r3, #15
 80223ce:	18fb      	adds	r3, r7, r3
 80223d0:	781b      	ldrb	r3, [r3, #0]
}
 80223d2:	0018      	movs	r0, r3
 80223d4:	46bd      	mov	sp, r7
 80223d6:	b004      	add	sp, #16
 80223d8:	bd80      	pop	{r7, pc}
 80223da:	46c0      	nop			@ (mov r8, r8)
 80223dc:	0802e8d0 	.word	0x0802e8d0

080223e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80223e0:	b5b0      	push	{r4, r5, r7, lr}
 80223e2:	b084      	sub	sp, #16
 80223e4:	af00      	add	r7, sp, #0
 80223e6:	6078      	str	r0, [r7, #4]
 80223e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80223ea:	230f      	movs	r3, #15
 80223ec:	18fb      	adds	r3, r7, r3
 80223ee:	2200      	movs	r2, #0
 80223f0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80223f2:	683b      	ldr	r3, [r7, #0]
 80223f4:	781b      	ldrb	r3, [r3, #0]
 80223f6:	001a      	movs	r2, r3
 80223f8:	2360      	movs	r3, #96	@ 0x60
 80223fa:	4013      	ands	r3, r2
 80223fc:	2b40      	cmp	r3, #64	@ 0x40
 80223fe:	d004      	beq.n	802240a <USBD_StdItfReq+0x2a>
 8022400:	d839      	bhi.n	8022476 <USBD_StdItfReq+0x96>
 8022402:	2b00      	cmp	r3, #0
 8022404:	d001      	beq.n	802240a <USBD_StdItfReq+0x2a>
 8022406:	2b20      	cmp	r3, #32
 8022408:	d135      	bne.n	8022476 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802240a:	687a      	ldr	r2, [r7, #4]
 802240c:	23a7      	movs	r3, #167	@ 0xa7
 802240e:	009b      	lsls	r3, r3, #2
 8022410:	5cd3      	ldrb	r3, [r2, r3]
 8022412:	3b01      	subs	r3, #1
 8022414:	2b02      	cmp	r3, #2
 8022416:	d825      	bhi.n	8022464 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8022418:	683b      	ldr	r3, [r7, #0]
 802241a:	889b      	ldrh	r3, [r3, #4]
 802241c:	b2db      	uxtb	r3, r3
 802241e:	2b01      	cmp	r3, #1
 8022420:	d819      	bhi.n	8022456 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8022422:	687a      	ldr	r2, [r7, #4]
 8022424:	23ad      	movs	r3, #173	@ 0xad
 8022426:	009b      	lsls	r3, r3, #2
 8022428:	58d3      	ldr	r3, [r2, r3]
 802242a:	689b      	ldr	r3, [r3, #8]
 802242c:	250f      	movs	r5, #15
 802242e:	197c      	adds	r4, r7, r5
 8022430:	6839      	ldr	r1, [r7, #0]
 8022432:	687a      	ldr	r2, [r7, #4]
 8022434:	0010      	movs	r0, r2
 8022436:	4798      	blx	r3
 8022438:	0003      	movs	r3, r0
 802243a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802243c:	683b      	ldr	r3, [r7, #0]
 802243e:	88db      	ldrh	r3, [r3, #6]
 8022440:	2b00      	cmp	r3, #0
 8022442:	d116      	bne.n	8022472 <USBD_StdItfReq+0x92>
 8022444:	197b      	adds	r3, r7, r5
 8022446:	781b      	ldrb	r3, [r3, #0]
 8022448:	2b00      	cmp	r3, #0
 802244a:	d112      	bne.n	8022472 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	0018      	movs	r0, r3
 8022450:	f000 fe4f 	bl	80230f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022454:	e00d      	b.n	8022472 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8022456:	683a      	ldr	r2, [r7, #0]
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	0011      	movs	r1, r2
 802245c:	0018      	movs	r0, r3
 802245e:	f000 fd60 	bl	8022f22 <USBD_CtlError>
          break;
 8022462:	e006      	b.n	8022472 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022464:	683a      	ldr	r2, [r7, #0]
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	0011      	movs	r1, r2
 802246a:	0018      	movs	r0, r3
 802246c:	f000 fd59 	bl	8022f22 <USBD_CtlError>
          break;
 8022470:	e000      	b.n	8022474 <USBD_StdItfReq+0x94>
          break;
 8022472:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022474:	e006      	b.n	8022484 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8022476:	683a      	ldr	r2, [r7, #0]
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	0011      	movs	r1, r2
 802247c:	0018      	movs	r0, r3
 802247e:	f000 fd50 	bl	8022f22 <USBD_CtlError>
      break;
 8022482:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8022484:	2300      	movs	r3, #0
}
 8022486:	0018      	movs	r0, r3
 8022488:	46bd      	mov	sp, r7
 802248a:	b004      	add	sp, #16
 802248c:	bdb0      	pop	{r4, r5, r7, pc}

0802248e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 802248e:	b5b0      	push	{r4, r5, r7, lr}
 8022490:	b084      	sub	sp, #16
 8022492:	af00      	add	r7, sp, #0
 8022494:	6078      	str	r0, [r7, #4]
 8022496:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8022498:	230f      	movs	r3, #15
 802249a:	18fb      	adds	r3, r7, r3
 802249c:	2200      	movs	r2, #0
 802249e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80224a0:	683b      	ldr	r3, [r7, #0]
 80224a2:	889a      	ldrh	r2, [r3, #4]
 80224a4:	230e      	movs	r3, #14
 80224a6:	18fb      	adds	r3, r7, r3
 80224a8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80224aa:	683b      	ldr	r3, [r7, #0]
 80224ac:	781b      	ldrb	r3, [r3, #0]
 80224ae:	001a      	movs	r2, r3
 80224b0:	2360      	movs	r3, #96	@ 0x60
 80224b2:	4013      	ands	r3, r2
 80224b4:	2b40      	cmp	r3, #64	@ 0x40
 80224b6:	d006      	beq.n	80224c6 <USBD_StdEPReq+0x38>
 80224b8:	d900      	bls.n	80224bc <USBD_StdEPReq+0x2e>
 80224ba:	e190      	b.n	80227de <USBD_StdEPReq+0x350>
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d00c      	beq.n	80224da <USBD_StdEPReq+0x4c>
 80224c0:	2b20      	cmp	r3, #32
 80224c2:	d000      	beq.n	80224c6 <USBD_StdEPReq+0x38>
 80224c4:	e18b      	b.n	80227de <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80224c6:	687a      	ldr	r2, [r7, #4]
 80224c8:	23ad      	movs	r3, #173	@ 0xad
 80224ca:	009b      	lsls	r3, r3, #2
 80224cc:	58d3      	ldr	r3, [r2, r3]
 80224ce:	689b      	ldr	r3, [r3, #8]
 80224d0:	6839      	ldr	r1, [r7, #0]
 80224d2:	687a      	ldr	r2, [r7, #4]
 80224d4:	0010      	movs	r0, r2
 80224d6:	4798      	blx	r3
      break;
 80224d8:	e188      	b.n	80227ec <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80224da:	683b      	ldr	r3, [r7, #0]
 80224dc:	781b      	ldrb	r3, [r3, #0]
 80224de:	001a      	movs	r2, r3
 80224e0:	2360      	movs	r3, #96	@ 0x60
 80224e2:	4013      	ands	r3, r2
 80224e4:	2b20      	cmp	r3, #32
 80224e6:	d10f      	bne.n	8022508 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80224e8:	687a      	ldr	r2, [r7, #4]
 80224ea:	23ad      	movs	r3, #173	@ 0xad
 80224ec:	009b      	lsls	r3, r3, #2
 80224ee:	58d3      	ldr	r3, [r2, r3]
 80224f0:	689b      	ldr	r3, [r3, #8]
 80224f2:	250f      	movs	r5, #15
 80224f4:	197c      	adds	r4, r7, r5
 80224f6:	6839      	ldr	r1, [r7, #0]
 80224f8:	687a      	ldr	r2, [r7, #4]
 80224fa:	0010      	movs	r0, r2
 80224fc:	4798      	blx	r3
 80224fe:	0003      	movs	r3, r0
 8022500:	7023      	strb	r3, [r4, #0]

        return ret;
 8022502:	197b      	adds	r3, r7, r5
 8022504:	781b      	ldrb	r3, [r3, #0]
 8022506:	e174      	b.n	80227f2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8022508:	683b      	ldr	r3, [r7, #0]
 802250a:	785b      	ldrb	r3, [r3, #1]
 802250c:	2b03      	cmp	r3, #3
 802250e:	d007      	beq.n	8022520 <USBD_StdEPReq+0x92>
 8022510:	dd00      	ble.n	8022514 <USBD_StdEPReq+0x86>
 8022512:	e15c      	b.n	80227ce <USBD_StdEPReq+0x340>
 8022514:	2b00      	cmp	r3, #0
 8022516:	d100      	bne.n	802251a <USBD_StdEPReq+0x8c>
 8022518:	e092      	b.n	8022640 <USBD_StdEPReq+0x1b2>
 802251a:	2b01      	cmp	r3, #1
 802251c:	d04b      	beq.n	80225b6 <USBD_StdEPReq+0x128>
 802251e:	e156      	b.n	80227ce <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8022520:	687a      	ldr	r2, [r7, #4]
 8022522:	23a7      	movs	r3, #167	@ 0xa7
 8022524:	009b      	lsls	r3, r3, #2
 8022526:	5cd3      	ldrb	r3, [r2, r3]
 8022528:	2b02      	cmp	r3, #2
 802252a:	d002      	beq.n	8022532 <USBD_StdEPReq+0xa4>
 802252c:	2b03      	cmp	r3, #3
 802252e:	d01d      	beq.n	802256c <USBD_StdEPReq+0xde>
 8022530:	e039      	b.n	80225a6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022532:	220e      	movs	r2, #14
 8022534:	18bb      	adds	r3, r7, r2
 8022536:	781b      	ldrb	r3, [r3, #0]
 8022538:	2b00      	cmp	r3, #0
 802253a:	d010      	beq.n	802255e <USBD_StdEPReq+0xd0>
 802253c:	18bb      	adds	r3, r7, r2
 802253e:	781b      	ldrb	r3, [r3, #0]
 8022540:	2b80      	cmp	r3, #128	@ 0x80
 8022542:	d00c      	beq.n	802255e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022544:	18bb      	adds	r3, r7, r2
 8022546:	781a      	ldrb	r2, [r3, #0]
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	0011      	movs	r1, r2
 802254c:	0018      	movs	r0, r3
 802254e:	f001 fa1c 	bl	802398a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	2180      	movs	r1, #128	@ 0x80
 8022556:	0018      	movs	r0, r3
 8022558:	f001 fa17 	bl	802398a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802255c:	e02a      	b.n	80225b4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 802255e:	683a      	ldr	r2, [r7, #0]
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	0011      	movs	r1, r2
 8022564:	0018      	movs	r0, r3
 8022566:	f000 fcdc 	bl	8022f22 <USBD_CtlError>
              break;
 802256a:	e023      	b.n	80225b4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802256c:	683b      	ldr	r3, [r7, #0]
 802256e:	885b      	ldrh	r3, [r3, #2]
 8022570:	2b00      	cmp	r3, #0
 8022572:	d113      	bne.n	802259c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8022574:	220e      	movs	r2, #14
 8022576:	18bb      	adds	r3, r7, r2
 8022578:	781b      	ldrb	r3, [r3, #0]
 802257a:	2b00      	cmp	r3, #0
 802257c:	d00e      	beq.n	802259c <USBD_StdEPReq+0x10e>
 802257e:	18bb      	adds	r3, r7, r2
 8022580:	781b      	ldrb	r3, [r3, #0]
 8022582:	2b80      	cmp	r3, #128	@ 0x80
 8022584:	d00a      	beq.n	802259c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8022586:	683b      	ldr	r3, [r7, #0]
 8022588:	88db      	ldrh	r3, [r3, #6]
 802258a:	2b00      	cmp	r3, #0
 802258c:	d106      	bne.n	802259c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 802258e:	18bb      	adds	r3, r7, r2
 8022590:	781a      	ldrb	r2, [r3, #0]
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	0011      	movs	r1, r2
 8022596:	0018      	movs	r0, r3
 8022598:	f001 f9f7 	bl	802398a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	0018      	movs	r0, r3
 80225a0:	f000 fda7 	bl	80230f2 <USBD_CtlSendStatus>

              break;
 80225a4:	e006      	b.n	80225b4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80225a6:	683a      	ldr	r2, [r7, #0]
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	0011      	movs	r1, r2
 80225ac:	0018      	movs	r0, r3
 80225ae:	f000 fcb8 	bl	8022f22 <USBD_CtlError>
              break;
 80225b2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80225b4:	e112      	b.n	80227dc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80225b6:	687a      	ldr	r2, [r7, #4]
 80225b8:	23a7      	movs	r3, #167	@ 0xa7
 80225ba:	009b      	lsls	r3, r3, #2
 80225bc:	5cd3      	ldrb	r3, [r2, r3]
 80225be:	2b02      	cmp	r3, #2
 80225c0:	d002      	beq.n	80225c8 <USBD_StdEPReq+0x13a>
 80225c2:	2b03      	cmp	r3, #3
 80225c4:	d01d      	beq.n	8022602 <USBD_StdEPReq+0x174>
 80225c6:	e032      	b.n	802262e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80225c8:	220e      	movs	r2, #14
 80225ca:	18bb      	adds	r3, r7, r2
 80225cc:	781b      	ldrb	r3, [r3, #0]
 80225ce:	2b00      	cmp	r3, #0
 80225d0:	d010      	beq.n	80225f4 <USBD_StdEPReq+0x166>
 80225d2:	18bb      	adds	r3, r7, r2
 80225d4:	781b      	ldrb	r3, [r3, #0]
 80225d6:	2b80      	cmp	r3, #128	@ 0x80
 80225d8:	d00c      	beq.n	80225f4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80225da:	18bb      	adds	r3, r7, r2
 80225dc:	781a      	ldrb	r2, [r3, #0]
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	0011      	movs	r1, r2
 80225e2:	0018      	movs	r0, r3
 80225e4:	f001 f9d1 	bl	802398a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80225e8:	687b      	ldr	r3, [r7, #4]
 80225ea:	2180      	movs	r1, #128	@ 0x80
 80225ec:	0018      	movs	r0, r3
 80225ee:	f001 f9cc 	bl	802398a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80225f2:	e024      	b.n	802263e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80225f4:	683a      	ldr	r2, [r7, #0]
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	0011      	movs	r1, r2
 80225fa:	0018      	movs	r0, r3
 80225fc:	f000 fc91 	bl	8022f22 <USBD_CtlError>
              break;
 8022600:	e01d      	b.n	802263e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022602:	683b      	ldr	r3, [r7, #0]
 8022604:	885b      	ldrh	r3, [r3, #2]
 8022606:	2b00      	cmp	r3, #0
 8022608:	d118      	bne.n	802263c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802260a:	210e      	movs	r1, #14
 802260c:	187b      	adds	r3, r7, r1
 802260e:	781b      	ldrb	r3, [r3, #0]
 8022610:	227f      	movs	r2, #127	@ 0x7f
 8022612:	4013      	ands	r3, r2
 8022614:	d006      	beq.n	8022624 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8022616:	187b      	adds	r3, r7, r1
 8022618:	781a      	ldrb	r2, [r3, #0]
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	0011      	movs	r1, r2
 802261e:	0018      	movs	r0, r3
 8022620:	f001 f9de 	bl	80239e0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	0018      	movs	r0, r3
 8022628:	f000 fd63 	bl	80230f2 <USBD_CtlSendStatus>
              }
              break;
 802262c:	e006      	b.n	802263c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 802262e:	683a      	ldr	r2, [r7, #0]
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	0011      	movs	r1, r2
 8022634:	0018      	movs	r0, r3
 8022636:	f000 fc74 	bl	8022f22 <USBD_CtlError>
              break;
 802263a:	e000      	b.n	802263e <USBD_StdEPReq+0x1b0>
              break;
 802263c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 802263e:	e0cd      	b.n	80227dc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8022640:	687a      	ldr	r2, [r7, #4]
 8022642:	23a7      	movs	r3, #167	@ 0xa7
 8022644:	009b      	lsls	r3, r3, #2
 8022646:	5cd3      	ldrb	r3, [r2, r3]
 8022648:	2b02      	cmp	r3, #2
 802264a:	d002      	beq.n	8022652 <USBD_StdEPReq+0x1c4>
 802264c:	2b03      	cmp	r3, #3
 802264e:	d03c      	beq.n	80226ca <USBD_StdEPReq+0x23c>
 8022650:	e0b5      	b.n	80227be <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022652:	220e      	movs	r2, #14
 8022654:	18bb      	adds	r3, r7, r2
 8022656:	781b      	ldrb	r3, [r3, #0]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d00a      	beq.n	8022672 <USBD_StdEPReq+0x1e4>
 802265c:	18bb      	adds	r3, r7, r2
 802265e:	781b      	ldrb	r3, [r3, #0]
 8022660:	2b80      	cmp	r3, #128	@ 0x80
 8022662:	d006      	beq.n	8022672 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022664:	683a      	ldr	r2, [r7, #0]
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	0011      	movs	r1, r2
 802266a:	0018      	movs	r0, r3
 802266c:	f000 fc59 	bl	8022f22 <USBD_CtlError>
                break;
 8022670:	e0ac      	b.n	80227cc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022672:	220e      	movs	r2, #14
 8022674:	18bb      	adds	r3, r7, r2
 8022676:	781b      	ldrb	r3, [r3, #0]
 8022678:	b25b      	sxtb	r3, r3
 802267a:	2b00      	cmp	r3, #0
 802267c:	da0c      	bge.n	8022698 <USBD_StdEPReq+0x20a>
 802267e:	18bb      	adds	r3, r7, r2
 8022680:	781b      	ldrb	r3, [r3, #0]
 8022682:	227f      	movs	r2, #127	@ 0x7f
 8022684:	401a      	ands	r2, r3
 8022686:	0013      	movs	r3, r2
 8022688:	009b      	lsls	r3, r3, #2
 802268a:	189b      	adds	r3, r3, r2
 802268c:	009b      	lsls	r3, r3, #2
 802268e:	3310      	adds	r3, #16
 8022690:	687a      	ldr	r2, [r7, #4]
 8022692:	18d3      	adds	r3, r2, r3
 8022694:	3304      	adds	r3, #4
 8022696:	e00d      	b.n	80226b4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022698:	230e      	movs	r3, #14
 802269a:	18fb      	adds	r3, r7, r3
 802269c:	781b      	ldrb	r3, [r3, #0]
 802269e:	227f      	movs	r2, #127	@ 0x7f
 80226a0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80226a2:	0013      	movs	r3, r2
 80226a4:	009b      	lsls	r3, r3, #2
 80226a6:	189b      	adds	r3, r3, r2
 80226a8:	009b      	lsls	r3, r3, #2
 80226aa:	3351      	adds	r3, #81	@ 0x51
 80226ac:	33ff      	adds	r3, #255	@ 0xff
 80226ae:	687a      	ldr	r2, [r7, #4]
 80226b0:	18d3      	adds	r3, r2, r3
 80226b2:	3304      	adds	r3, #4
 80226b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80226b6:	68bb      	ldr	r3, [r7, #8]
 80226b8:	2200      	movs	r2, #0
 80226ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80226bc:	68b9      	ldr	r1, [r7, #8]
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	2202      	movs	r2, #2
 80226c2:	0018      	movs	r0, r3
 80226c4:	f000 fcab 	bl	802301e <USBD_CtlSendData>
              break;
 80226c8:	e080      	b.n	80227cc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80226ca:	220e      	movs	r2, #14
 80226cc:	18bb      	adds	r3, r7, r2
 80226ce:	781b      	ldrb	r3, [r3, #0]
 80226d0:	b25b      	sxtb	r3, r3
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	da14      	bge.n	8022700 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80226d6:	18bb      	adds	r3, r7, r2
 80226d8:	781b      	ldrb	r3, [r3, #0]
 80226da:	220f      	movs	r2, #15
 80226dc:	401a      	ands	r2, r3
 80226de:	6879      	ldr	r1, [r7, #4]
 80226e0:	0013      	movs	r3, r2
 80226e2:	009b      	lsls	r3, r3, #2
 80226e4:	189b      	adds	r3, r3, r2
 80226e6:	009b      	lsls	r3, r3, #2
 80226e8:	18cb      	adds	r3, r1, r3
 80226ea:	3318      	adds	r3, #24
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	d11e      	bne.n	8022730 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80226f2:	683a      	ldr	r2, [r7, #0]
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	0011      	movs	r1, r2
 80226f8:	0018      	movs	r0, r3
 80226fa:	f000 fc12 	bl	8022f22 <USBD_CtlError>
                  break;
 80226fe:	e065      	b.n	80227cc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8022700:	230e      	movs	r3, #14
 8022702:	18fb      	adds	r3, r7, r3
 8022704:	781b      	ldrb	r3, [r3, #0]
 8022706:	220f      	movs	r2, #15
 8022708:	401a      	ands	r2, r3
 802270a:	6878      	ldr	r0, [r7, #4]
 802270c:	23ac      	movs	r3, #172	@ 0xac
 802270e:	0059      	lsls	r1, r3, #1
 8022710:	0013      	movs	r3, r2
 8022712:	009b      	lsls	r3, r3, #2
 8022714:	189b      	adds	r3, r3, r2
 8022716:	009b      	lsls	r3, r3, #2
 8022718:	18c3      	adds	r3, r0, r3
 802271a:	185b      	adds	r3, r3, r1
 802271c:	681b      	ldr	r3, [r3, #0]
 802271e:	2b00      	cmp	r3, #0
 8022720:	d106      	bne.n	8022730 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8022722:	683a      	ldr	r2, [r7, #0]
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	0011      	movs	r1, r2
 8022728:	0018      	movs	r0, r3
 802272a:	f000 fbfa 	bl	8022f22 <USBD_CtlError>
                  break;
 802272e:	e04d      	b.n	80227cc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022730:	220e      	movs	r2, #14
 8022732:	18bb      	adds	r3, r7, r2
 8022734:	781b      	ldrb	r3, [r3, #0]
 8022736:	b25b      	sxtb	r3, r3
 8022738:	2b00      	cmp	r3, #0
 802273a:	da0c      	bge.n	8022756 <USBD_StdEPReq+0x2c8>
 802273c:	18bb      	adds	r3, r7, r2
 802273e:	781b      	ldrb	r3, [r3, #0]
 8022740:	227f      	movs	r2, #127	@ 0x7f
 8022742:	401a      	ands	r2, r3
 8022744:	0013      	movs	r3, r2
 8022746:	009b      	lsls	r3, r3, #2
 8022748:	189b      	adds	r3, r3, r2
 802274a:	009b      	lsls	r3, r3, #2
 802274c:	3310      	adds	r3, #16
 802274e:	687a      	ldr	r2, [r7, #4]
 8022750:	18d3      	adds	r3, r2, r3
 8022752:	3304      	adds	r3, #4
 8022754:	e00d      	b.n	8022772 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022756:	230e      	movs	r3, #14
 8022758:	18fb      	adds	r3, r7, r3
 802275a:	781b      	ldrb	r3, [r3, #0]
 802275c:	227f      	movs	r2, #127	@ 0x7f
 802275e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022760:	0013      	movs	r3, r2
 8022762:	009b      	lsls	r3, r3, #2
 8022764:	189b      	adds	r3, r3, r2
 8022766:	009b      	lsls	r3, r3, #2
 8022768:	3351      	adds	r3, #81	@ 0x51
 802276a:	33ff      	adds	r3, #255	@ 0xff
 802276c:	687a      	ldr	r2, [r7, #4]
 802276e:	18d3      	adds	r3, r2, r3
 8022770:	3304      	adds	r3, #4
 8022772:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022774:	220e      	movs	r2, #14
 8022776:	18bb      	adds	r3, r7, r2
 8022778:	781b      	ldrb	r3, [r3, #0]
 802277a:	2b00      	cmp	r3, #0
 802277c:	d003      	beq.n	8022786 <USBD_StdEPReq+0x2f8>
 802277e:	18bb      	adds	r3, r7, r2
 8022780:	781b      	ldrb	r3, [r3, #0]
 8022782:	2b80      	cmp	r3, #128	@ 0x80
 8022784:	d103      	bne.n	802278e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8022786:	68bb      	ldr	r3, [r7, #8]
 8022788:	2200      	movs	r2, #0
 802278a:	601a      	str	r2, [r3, #0]
 802278c:	e010      	b.n	80227b0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 802278e:	230e      	movs	r3, #14
 8022790:	18fb      	adds	r3, r7, r3
 8022792:	781a      	ldrb	r2, [r3, #0]
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	0011      	movs	r1, r2
 8022798:	0018      	movs	r0, r3
 802279a:	f001 f94c 	bl	8023a36 <USBD_LL_IsStallEP>
 802279e:	1e03      	subs	r3, r0, #0
 80227a0:	d003      	beq.n	80227aa <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80227a2:	68bb      	ldr	r3, [r7, #8]
 80227a4:	2201      	movs	r2, #1
 80227a6:	601a      	str	r2, [r3, #0]
 80227a8:	e002      	b.n	80227b0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80227aa:	68bb      	ldr	r3, [r7, #8]
 80227ac:	2200      	movs	r2, #0
 80227ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80227b0:	68b9      	ldr	r1, [r7, #8]
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	2202      	movs	r2, #2
 80227b6:	0018      	movs	r0, r3
 80227b8:	f000 fc31 	bl	802301e <USBD_CtlSendData>
              break;
 80227bc:	e006      	b.n	80227cc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80227be:	683a      	ldr	r2, [r7, #0]
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	0011      	movs	r1, r2
 80227c4:	0018      	movs	r0, r3
 80227c6:	f000 fbac 	bl	8022f22 <USBD_CtlError>
              break;
 80227ca:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80227cc:	e006      	b.n	80227dc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80227ce:	683a      	ldr	r2, [r7, #0]
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	0011      	movs	r1, r2
 80227d4:	0018      	movs	r0, r3
 80227d6:	f000 fba4 	bl	8022f22 <USBD_CtlError>
          break;
 80227da:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80227dc:	e006      	b.n	80227ec <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80227de:	683a      	ldr	r2, [r7, #0]
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	0011      	movs	r1, r2
 80227e4:	0018      	movs	r0, r3
 80227e6:	f000 fb9c 	bl	8022f22 <USBD_CtlError>
      break;
 80227ea:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80227ec:	230f      	movs	r3, #15
 80227ee:	18fb      	adds	r3, r7, r3
 80227f0:	781b      	ldrb	r3, [r3, #0]
}
 80227f2:	0018      	movs	r0, r3
 80227f4:	46bd      	mov	sp, r7
 80227f6:	b004      	add	sp, #16
 80227f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080227fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80227fc:	b580      	push	{r7, lr}
 80227fe:	b084      	sub	sp, #16
 8022800:	af00      	add	r7, sp, #0
 8022802:	6078      	str	r0, [r7, #4]
 8022804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8022806:	2308      	movs	r3, #8
 8022808:	18fb      	adds	r3, r7, r3
 802280a:	2200      	movs	r2, #0
 802280c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 802280e:	2300      	movs	r3, #0
 8022810:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8022812:	230b      	movs	r3, #11
 8022814:	18fb      	adds	r3, r7, r3
 8022816:	2200      	movs	r2, #0
 8022818:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 802281a:	683b      	ldr	r3, [r7, #0]
 802281c:	885b      	ldrh	r3, [r3, #2]
 802281e:	0a1b      	lsrs	r3, r3, #8
 8022820:	b29b      	uxth	r3, r3
 8022822:	2b07      	cmp	r3, #7
 8022824:	d900      	bls.n	8022828 <USBD_GetDescriptor+0x2c>
 8022826:	e159      	b.n	8022adc <USBD_GetDescriptor+0x2e0>
 8022828:	009a      	lsls	r2, r3, #2
 802282a:	4bcb      	ldr	r3, [pc, #812]	@ (8022b58 <USBD_GetDescriptor+0x35c>)
 802282c:	18d3      	adds	r3, r2, r3
 802282e:	681b      	ldr	r3, [r3, #0]
 8022830:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8022832:	687a      	ldr	r2, [r7, #4]
 8022834:	23ac      	movs	r3, #172	@ 0xac
 8022836:	009b      	lsls	r3, r3, #2
 8022838:	58d3      	ldr	r3, [r2, r3]
 802283a:	681b      	ldr	r3, [r3, #0]
 802283c:	687a      	ldr	r2, [r7, #4]
 802283e:	7c12      	ldrb	r2, [r2, #16]
 8022840:	2108      	movs	r1, #8
 8022842:	1879      	adds	r1, r7, r1
 8022844:	0010      	movs	r0, r2
 8022846:	4798      	blx	r3
 8022848:	0003      	movs	r3, r0
 802284a:	60fb      	str	r3, [r7, #12]
      break;
 802284c:	e153      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	7c1b      	ldrb	r3, [r3, #16]
 8022852:	2b00      	cmp	r3, #0
 8022854:	d10f      	bne.n	8022876 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8022856:	687a      	ldr	r2, [r7, #4]
 8022858:	23ad      	movs	r3, #173	@ 0xad
 802285a:	009b      	lsls	r3, r3, #2
 802285c:	58d3      	ldr	r3, [r2, r3]
 802285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022860:	2208      	movs	r2, #8
 8022862:	18ba      	adds	r2, r7, r2
 8022864:	0010      	movs	r0, r2
 8022866:	4798      	blx	r3
 8022868:	0003      	movs	r3, r0
 802286a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802286c:	68fb      	ldr	r3, [r7, #12]
 802286e:	3301      	adds	r3, #1
 8022870:	2202      	movs	r2, #2
 8022872:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022874:	e13f      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8022876:	687a      	ldr	r2, [r7, #4]
 8022878:	23ad      	movs	r3, #173	@ 0xad
 802287a:	009b      	lsls	r3, r3, #2
 802287c:	58d3      	ldr	r3, [r2, r3]
 802287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022880:	2208      	movs	r2, #8
 8022882:	18ba      	adds	r2, r7, r2
 8022884:	0010      	movs	r0, r2
 8022886:	4798      	blx	r3
 8022888:	0003      	movs	r3, r0
 802288a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802288c:	68fb      	ldr	r3, [r7, #12]
 802288e:	3301      	adds	r3, #1
 8022890:	2202      	movs	r2, #2
 8022892:	701a      	strb	r2, [r3, #0]
      break;
 8022894:	e12f      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8022896:	683b      	ldr	r3, [r7, #0]
 8022898:	885b      	ldrh	r3, [r3, #2]
 802289a:	b2db      	uxtb	r3, r3
 802289c:	2b05      	cmp	r3, #5
 802289e:	d900      	bls.n	80228a2 <USBD_GetDescriptor+0xa6>
 80228a0:	e0d0      	b.n	8022a44 <USBD_GetDescriptor+0x248>
 80228a2:	009a      	lsls	r2, r3, #2
 80228a4:	4bad      	ldr	r3, [pc, #692]	@ (8022b5c <USBD_GetDescriptor+0x360>)
 80228a6:	18d3      	adds	r3, r2, r3
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80228ac:	687a      	ldr	r2, [r7, #4]
 80228ae:	23ac      	movs	r3, #172	@ 0xac
 80228b0:	009b      	lsls	r3, r3, #2
 80228b2:	58d3      	ldr	r3, [r2, r3]
 80228b4:	685b      	ldr	r3, [r3, #4]
 80228b6:	2b00      	cmp	r3, #0
 80228b8:	d00d      	beq.n	80228d6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80228ba:	687a      	ldr	r2, [r7, #4]
 80228bc:	23ac      	movs	r3, #172	@ 0xac
 80228be:	009b      	lsls	r3, r3, #2
 80228c0:	58d3      	ldr	r3, [r2, r3]
 80228c2:	685b      	ldr	r3, [r3, #4]
 80228c4:	687a      	ldr	r2, [r7, #4]
 80228c6:	7c12      	ldrb	r2, [r2, #16]
 80228c8:	2108      	movs	r1, #8
 80228ca:	1879      	adds	r1, r7, r1
 80228cc:	0010      	movs	r0, r2
 80228ce:	4798      	blx	r3
 80228d0:	0003      	movs	r3, r0
 80228d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80228d4:	e0c3      	b.n	8022a5e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80228d6:	683a      	ldr	r2, [r7, #0]
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	0011      	movs	r1, r2
 80228dc:	0018      	movs	r0, r3
 80228de:	f000 fb20 	bl	8022f22 <USBD_CtlError>
            err++;
 80228e2:	210b      	movs	r1, #11
 80228e4:	187b      	adds	r3, r7, r1
 80228e6:	781a      	ldrb	r2, [r3, #0]
 80228e8:	187b      	adds	r3, r7, r1
 80228ea:	3201      	adds	r2, #1
 80228ec:	701a      	strb	r2, [r3, #0]
          break;
 80228ee:	e0b6      	b.n	8022a5e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80228f0:	687a      	ldr	r2, [r7, #4]
 80228f2:	23ac      	movs	r3, #172	@ 0xac
 80228f4:	009b      	lsls	r3, r3, #2
 80228f6:	58d3      	ldr	r3, [r2, r3]
 80228f8:	689b      	ldr	r3, [r3, #8]
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	d00d      	beq.n	802291a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80228fe:	687a      	ldr	r2, [r7, #4]
 8022900:	23ac      	movs	r3, #172	@ 0xac
 8022902:	009b      	lsls	r3, r3, #2
 8022904:	58d3      	ldr	r3, [r2, r3]
 8022906:	689b      	ldr	r3, [r3, #8]
 8022908:	687a      	ldr	r2, [r7, #4]
 802290a:	7c12      	ldrb	r2, [r2, #16]
 802290c:	2108      	movs	r1, #8
 802290e:	1879      	adds	r1, r7, r1
 8022910:	0010      	movs	r0, r2
 8022912:	4798      	blx	r3
 8022914:	0003      	movs	r3, r0
 8022916:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022918:	e0a1      	b.n	8022a5e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802291a:	683a      	ldr	r2, [r7, #0]
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	0011      	movs	r1, r2
 8022920:	0018      	movs	r0, r3
 8022922:	f000 fafe 	bl	8022f22 <USBD_CtlError>
            err++;
 8022926:	210b      	movs	r1, #11
 8022928:	187b      	adds	r3, r7, r1
 802292a:	781a      	ldrb	r2, [r3, #0]
 802292c:	187b      	adds	r3, r7, r1
 802292e:	3201      	adds	r2, #1
 8022930:	701a      	strb	r2, [r3, #0]
          break;
 8022932:	e094      	b.n	8022a5e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8022934:	687a      	ldr	r2, [r7, #4]
 8022936:	23ac      	movs	r3, #172	@ 0xac
 8022938:	009b      	lsls	r3, r3, #2
 802293a:	58d3      	ldr	r3, [r2, r3]
 802293c:	68db      	ldr	r3, [r3, #12]
 802293e:	2b00      	cmp	r3, #0
 8022940:	d00d      	beq.n	802295e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8022942:	687a      	ldr	r2, [r7, #4]
 8022944:	23ac      	movs	r3, #172	@ 0xac
 8022946:	009b      	lsls	r3, r3, #2
 8022948:	58d3      	ldr	r3, [r2, r3]
 802294a:	68db      	ldr	r3, [r3, #12]
 802294c:	687a      	ldr	r2, [r7, #4]
 802294e:	7c12      	ldrb	r2, [r2, #16]
 8022950:	2108      	movs	r1, #8
 8022952:	1879      	adds	r1, r7, r1
 8022954:	0010      	movs	r0, r2
 8022956:	4798      	blx	r3
 8022958:	0003      	movs	r3, r0
 802295a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802295c:	e07f      	b.n	8022a5e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802295e:	683a      	ldr	r2, [r7, #0]
 8022960:	687b      	ldr	r3, [r7, #4]
 8022962:	0011      	movs	r1, r2
 8022964:	0018      	movs	r0, r3
 8022966:	f000 fadc 	bl	8022f22 <USBD_CtlError>
            err++;
 802296a:	210b      	movs	r1, #11
 802296c:	187b      	adds	r3, r7, r1
 802296e:	781a      	ldrb	r2, [r3, #0]
 8022970:	187b      	adds	r3, r7, r1
 8022972:	3201      	adds	r2, #1
 8022974:	701a      	strb	r2, [r3, #0]
          break;
 8022976:	e072      	b.n	8022a5e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8022978:	687a      	ldr	r2, [r7, #4]
 802297a:	23ac      	movs	r3, #172	@ 0xac
 802297c:	009b      	lsls	r3, r3, #2
 802297e:	58d3      	ldr	r3, [r2, r3]
 8022980:	691b      	ldr	r3, [r3, #16]
 8022982:	2b00      	cmp	r3, #0
 8022984:	d00d      	beq.n	80229a2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8022986:	687a      	ldr	r2, [r7, #4]
 8022988:	23ac      	movs	r3, #172	@ 0xac
 802298a:	009b      	lsls	r3, r3, #2
 802298c:	58d3      	ldr	r3, [r2, r3]
 802298e:	691b      	ldr	r3, [r3, #16]
 8022990:	687a      	ldr	r2, [r7, #4]
 8022992:	7c12      	ldrb	r2, [r2, #16]
 8022994:	2108      	movs	r1, #8
 8022996:	1879      	adds	r1, r7, r1
 8022998:	0010      	movs	r0, r2
 802299a:	4798      	blx	r3
 802299c:	0003      	movs	r3, r0
 802299e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80229a0:	e05d      	b.n	8022a5e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80229a2:	683a      	ldr	r2, [r7, #0]
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	0011      	movs	r1, r2
 80229a8:	0018      	movs	r0, r3
 80229aa:	f000 faba 	bl	8022f22 <USBD_CtlError>
            err++;
 80229ae:	210b      	movs	r1, #11
 80229b0:	187b      	adds	r3, r7, r1
 80229b2:	781a      	ldrb	r2, [r3, #0]
 80229b4:	187b      	adds	r3, r7, r1
 80229b6:	3201      	adds	r2, #1
 80229b8:	701a      	strb	r2, [r3, #0]
          break;
 80229ba:	e050      	b.n	8022a5e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80229bc:	687a      	ldr	r2, [r7, #4]
 80229be:	23ac      	movs	r3, #172	@ 0xac
 80229c0:	009b      	lsls	r3, r3, #2
 80229c2:	58d3      	ldr	r3, [r2, r3]
 80229c4:	695b      	ldr	r3, [r3, #20]
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d00d      	beq.n	80229e6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80229ca:	687a      	ldr	r2, [r7, #4]
 80229cc:	23ac      	movs	r3, #172	@ 0xac
 80229ce:	009b      	lsls	r3, r3, #2
 80229d0:	58d3      	ldr	r3, [r2, r3]
 80229d2:	695b      	ldr	r3, [r3, #20]
 80229d4:	687a      	ldr	r2, [r7, #4]
 80229d6:	7c12      	ldrb	r2, [r2, #16]
 80229d8:	2108      	movs	r1, #8
 80229da:	1879      	adds	r1, r7, r1
 80229dc:	0010      	movs	r0, r2
 80229de:	4798      	blx	r3
 80229e0:	0003      	movs	r3, r0
 80229e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80229e4:	e03b      	b.n	8022a5e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80229e6:	683a      	ldr	r2, [r7, #0]
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	0011      	movs	r1, r2
 80229ec:	0018      	movs	r0, r3
 80229ee:	f000 fa98 	bl	8022f22 <USBD_CtlError>
            err++;
 80229f2:	210b      	movs	r1, #11
 80229f4:	187b      	adds	r3, r7, r1
 80229f6:	781a      	ldrb	r2, [r3, #0]
 80229f8:	187b      	adds	r3, r7, r1
 80229fa:	3201      	adds	r2, #1
 80229fc:	701a      	strb	r2, [r3, #0]
          break;
 80229fe:	e02e      	b.n	8022a5e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8022a00:	687a      	ldr	r2, [r7, #4]
 8022a02:	23ac      	movs	r3, #172	@ 0xac
 8022a04:	009b      	lsls	r3, r3, #2
 8022a06:	58d3      	ldr	r3, [r2, r3]
 8022a08:	699b      	ldr	r3, [r3, #24]
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d00d      	beq.n	8022a2a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8022a0e:	687a      	ldr	r2, [r7, #4]
 8022a10:	23ac      	movs	r3, #172	@ 0xac
 8022a12:	009b      	lsls	r3, r3, #2
 8022a14:	58d3      	ldr	r3, [r2, r3]
 8022a16:	699b      	ldr	r3, [r3, #24]
 8022a18:	687a      	ldr	r2, [r7, #4]
 8022a1a:	7c12      	ldrb	r2, [r2, #16]
 8022a1c:	2108      	movs	r1, #8
 8022a1e:	1879      	adds	r1, r7, r1
 8022a20:	0010      	movs	r0, r2
 8022a22:	4798      	blx	r3
 8022a24:	0003      	movs	r3, r0
 8022a26:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022a28:	e019      	b.n	8022a5e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022a2a:	683a      	ldr	r2, [r7, #0]
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	0011      	movs	r1, r2
 8022a30:	0018      	movs	r0, r3
 8022a32:	f000 fa76 	bl	8022f22 <USBD_CtlError>
            err++;
 8022a36:	210b      	movs	r1, #11
 8022a38:	187b      	adds	r3, r7, r1
 8022a3a:	781a      	ldrb	r2, [r3, #0]
 8022a3c:	187b      	adds	r3, r7, r1
 8022a3e:	3201      	adds	r2, #1
 8022a40:	701a      	strb	r2, [r3, #0]
          break;
 8022a42:	e00c      	b.n	8022a5e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022a44:	683a      	ldr	r2, [r7, #0]
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	0011      	movs	r1, r2
 8022a4a:	0018      	movs	r0, r3
 8022a4c:	f000 fa69 	bl	8022f22 <USBD_CtlError>
          err++;
 8022a50:	210b      	movs	r1, #11
 8022a52:	187b      	adds	r3, r7, r1
 8022a54:	781a      	ldrb	r2, [r3, #0]
 8022a56:	187b      	adds	r3, r7, r1
 8022a58:	3201      	adds	r2, #1
 8022a5a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022a5c:	e04b      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>
 8022a5e:	e04a      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	7c1b      	ldrb	r3, [r3, #16]
 8022a64:	2b00      	cmp	r3, #0
 8022a66:	d10b      	bne.n	8022a80 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8022a68:	687a      	ldr	r2, [r7, #4]
 8022a6a:	23ad      	movs	r3, #173	@ 0xad
 8022a6c:	009b      	lsls	r3, r3, #2
 8022a6e:	58d3      	ldr	r3, [r2, r3]
 8022a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a72:	2208      	movs	r2, #8
 8022a74:	18ba      	adds	r2, r7, r2
 8022a76:	0010      	movs	r0, r2
 8022a78:	4798      	blx	r3
 8022a7a:	0003      	movs	r3, r0
 8022a7c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022a7e:	e03a      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022a80:	683a      	ldr	r2, [r7, #0]
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	0011      	movs	r1, r2
 8022a86:	0018      	movs	r0, r3
 8022a88:	f000 fa4b 	bl	8022f22 <USBD_CtlError>
        err++;
 8022a8c:	210b      	movs	r1, #11
 8022a8e:	187b      	adds	r3, r7, r1
 8022a90:	781a      	ldrb	r2, [r3, #0]
 8022a92:	187b      	adds	r3, r7, r1
 8022a94:	3201      	adds	r2, #1
 8022a96:	701a      	strb	r2, [r3, #0]
      break;
 8022a98:	e02d      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	7c1b      	ldrb	r3, [r3, #16]
 8022a9e:	2b00      	cmp	r3, #0
 8022aa0:	d10f      	bne.n	8022ac2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8022aa2:	687a      	ldr	r2, [r7, #4]
 8022aa4:	23ad      	movs	r3, #173	@ 0xad
 8022aa6:	009b      	lsls	r3, r3, #2
 8022aa8:	58d3      	ldr	r3, [r2, r3]
 8022aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022aac:	2208      	movs	r2, #8
 8022aae:	18ba      	adds	r2, r7, r2
 8022ab0:	0010      	movs	r0, r2
 8022ab2:	4798      	blx	r3
 8022ab4:	0003      	movs	r3, r0
 8022ab6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8022ab8:	68fb      	ldr	r3, [r7, #12]
 8022aba:	3301      	adds	r3, #1
 8022abc:	2207      	movs	r2, #7
 8022abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022ac0:	e019      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022ac2:	683a      	ldr	r2, [r7, #0]
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	0011      	movs	r1, r2
 8022ac8:	0018      	movs	r0, r3
 8022aca:	f000 fa2a 	bl	8022f22 <USBD_CtlError>
        err++;
 8022ace:	210b      	movs	r1, #11
 8022ad0:	187b      	adds	r3, r7, r1
 8022ad2:	781a      	ldrb	r2, [r3, #0]
 8022ad4:	187b      	adds	r3, r7, r1
 8022ad6:	3201      	adds	r2, #1
 8022ad8:	701a      	strb	r2, [r3, #0]
      break;
 8022ada:	e00c      	b.n	8022af6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8022adc:	683a      	ldr	r2, [r7, #0]
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	0011      	movs	r1, r2
 8022ae2:	0018      	movs	r0, r3
 8022ae4:	f000 fa1d 	bl	8022f22 <USBD_CtlError>
      err++;
 8022ae8:	210b      	movs	r1, #11
 8022aea:	187b      	adds	r3, r7, r1
 8022aec:	781a      	ldrb	r2, [r3, #0]
 8022aee:	187b      	adds	r3, r7, r1
 8022af0:	3201      	adds	r2, #1
 8022af2:	701a      	strb	r2, [r3, #0]
      break;
 8022af4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8022af6:	230b      	movs	r3, #11
 8022af8:	18fb      	adds	r3, r7, r3
 8022afa:	781b      	ldrb	r3, [r3, #0]
 8022afc:	2b00      	cmp	r3, #0
 8022afe:	d127      	bne.n	8022b50 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8022b00:	2108      	movs	r1, #8
 8022b02:	187b      	adds	r3, r7, r1
 8022b04:	881b      	ldrh	r3, [r3, #0]
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d019      	beq.n	8022b3e <USBD_GetDescriptor+0x342>
 8022b0a:	683b      	ldr	r3, [r7, #0]
 8022b0c:	88db      	ldrh	r3, [r3, #6]
 8022b0e:	2b00      	cmp	r3, #0
 8022b10:	d015      	beq.n	8022b3e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8022b12:	683b      	ldr	r3, [r7, #0]
 8022b14:	88da      	ldrh	r2, [r3, #6]
 8022b16:	187b      	adds	r3, r7, r1
 8022b18:	881b      	ldrh	r3, [r3, #0]
 8022b1a:	1c18      	adds	r0, r3, #0
 8022b1c:	1c11      	adds	r1, r2, #0
 8022b1e:	b28a      	uxth	r2, r1
 8022b20:	b283      	uxth	r3, r0
 8022b22:	429a      	cmp	r2, r3
 8022b24:	d900      	bls.n	8022b28 <USBD_GetDescriptor+0x32c>
 8022b26:	1c01      	adds	r1, r0, #0
 8022b28:	b28a      	uxth	r2, r1
 8022b2a:	2108      	movs	r1, #8
 8022b2c:	187b      	adds	r3, r7, r1
 8022b2e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8022b30:	187b      	adds	r3, r7, r1
 8022b32:	881a      	ldrh	r2, [r3, #0]
 8022b34:	68f9      	ldr	r1, [r7, #12]
 8022b36:	687b      	ldr	r3, [r7, #4]
 8022b38:	0018      	movs	r0, r3
 8022b3a:	f000 fa70 	bl	802301e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8022b3e:	683b      	ldr	r3, [r7, #0]
 8022b40:	88db      	ldrh	r3, [r3, #6]
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d105      	bne.n	8022b52 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	0018      	movs	r0, r3
 8022b4a:	f000 fad2 	bl	80230f2 <USBD_CtlSendStatus>
 8022b4e:	e000      	b.n	8022b52 <USBD_GetDescriptor+0x356>
    return;
 8022b50:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022b52:	46bd      	mov	sp, r7
 8022b54:	b004      	add	sp, #16
 8022b56:	bd80      	pop	{r7, pc}
 8022b58:	0802e8f8 	.word	0x0802e8f8
 8022b5c:	0802e918 	.word	0x0802e918

08022b60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022b60:	b590      	push	{r4, r7, lr}
 8022b62:	b085      	sub	sp, #20
 8022b64:	af00      	add	r7, sp, #0
 8022b66:	6078      	str	r0, [r7, #4]
 8022b68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8022b6a:	683b      	ldr	r3, [r7, #0]
 8022b6c:	889b      	ldrh	r3, [r3, #4]
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d13d      	bne.n	8022bee <USBD_SetAddress+0x8e>
 8022b72:	683b      	ldr	r3, [r7, #0]
 8022b74:	88db      	ldrh	r3, [r3, #6]
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d139      	bne.n	8022bee <USBD_SetAddress+0x8e>
 8022b7a:	683b      	ldr	r3, [r7, #0]
 8022b7c:	885b      	ldrh	r3, [r3, #2]
 8022b7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8022b80:	d835      	bhi.n	8022bee <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022b82:	683b      	ldr	r3, [r7, #0]
 8022b84:	885b      	ldrh	r3, [r3, #2]
 8022b86:	b2da      	uxtb	r2, r3
 8022b88:	230f      	movs	r3, #15
 8022b8a:	18fb      	adds	r3, r7, r3
 8022b8c:	217f      	movs	r1, #127	@ 0x7f
 8022b8e:	400a      	ands	r2, r1
 8022b90:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022b92:	687a      	ldr	r2, [r7, #4]
 8022b94:	23a7      	movs	r3, #167	@ 0xa7
 8022b96:	009b      	lsls	r3, r3, #2
 8022b98:	5cd3      	ldrb	r3, [r2, r3]
 8022b9a:	2b03      	cmp	r3, #3
 8022b9c:	d106      	bne.n	8022bac <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8022b9e:	683a      	ldr	r2, [r7, #0]
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	0011      	movs	r1, r2
 8022ba4:	0018      	movs	r0, r3
 8022ba6:	f000 f9bc 	bl	8022f22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022baa:	e027      	b.n	8022bfc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	240f      	movs	r4, #15
 8022bb0:	193a      	adds	r2, r7, r4
 8022bb2:	4914      	ldr	r1, [pc, #80]	@ (8022c04 <USBD_SetAddress+0xa4>)
 8022bb4:	7812      	ldrb	r2, [r2, #0]
 8022bb6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022bb8:	193b      	adds	r3, r7, r4
 8022bba:	781a      	ldrb	r2, [r3, #0]
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	0011      	movs	r1, r2
 8022bc0:	0018      	movs	r0, r3
 8022bc2:	f000 ff69 	bl	8023a98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8022bc6:	687b      	ldr	r3, [r7, #4]
 8022bc8:	0018      	movs	r0, r3
 8022bca:	f000 fa92 	bl	80230f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022bce:	193b      	adds	r3, r7, r4
 8022bd0:	781b      	ldrb	r3, [r3, #0]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d005      	beq.n	8022be2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022bd6:	687a      	ldr	r2, [r7, #4]
 8022bd8:	23a7      	movs	r3, #167	@ 0xa7
 8022bda:	009b      	lsls	r3, r3, #2
 8022bdc:	2102      	movs	r1, #2
 8022bde:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022be0:	e00c      	b.n	8022bfc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022be2:	687a      	ldr	r2, [r7, #4]
 8022be4:	23a7      	movs	r3, #167	@ 0xa7
 8022be6:	009b      	lsls	r3, r3, #2
 8022be8:	2101      	movs	r1, #1
 8022bea:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022bec:	e006      	b.n	8022bfc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022bee:	683a      	ldr	r2, [r7, #0]
 8022bf0:	687b      	ldr	r3, [r7, #4]
 8022bf2:	0011      	movs	r1, r2
 8022bf4:	0018      	movs	r0, r3
 8022bf6:	f000 f994 	bl	8022f22 <USBD_CtlError>
  }
}
 8022bfa:	46c0      	nop			@ (mov r8, r8)
 8022bfc:	46c0      	nop			@ (mov r8, r8)
 8022bfe:	46bd      	mov	sp, r7
 8022c00:	b005      	add	sp, #20
 8022c02:	bd90      	pop	{r4, r7, pc}
 8022c04:	0000029e 	.word	0x0000029e

08022c08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022c08:	b580      	push	{r7, lr}
 8022c0a:	b082      	sub	sp, #8
 8022c0c:	af00      	add	r7, sp, #0
 8022c0e:	6078      	str	r0, [r7, #4]
 8022c10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022c12:	683b      	ldr	r3, [r7, #0]
 8022c14:	885b      	ldrh	r3, [r3, #2]
 8022c16:	b2da      	uxtb	r2, r3
 8022c18:	4b4c      	ldr	r3, [pc, #304]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022c1e:	781b      	ldrb	r3, [r3, #0]
 8022c20:	2b01      	cmp	r3, #1
 8022c22:	d906      	bls.n	8022c32 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8022c24:	683a      	ldr	r2, [r7, #0]
 8022c26:	687b      	ldr	r3, [r7, #4]
 8022c28:	0011      	movs	r1, r2
 8022c2a:	0018      	movs	r0, r3
 8022c2c:	f000 f979 	bl	8022f22 <USBD_CtlError>
 8022c30:	e088      	b.n	8022d44 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8022c32:	687a      	ldr	r2, [r7, #4]
 8022c34:	23a7      	movs	r3, #167	@ 0xa7
 8022c36:	009b      	lsls	r3, r3, #2
 8022c38:	5cd3      	ldrb	r3, [r2, r3]
 8022c3a:	2b02      	cmp	r3, #2
 8022c3c:	d002      	beq.n	8022c44 <USBD_SetConfig+0x3c>
 8022c3e:	2b03      	cmp	r3, #3
 8022c40:	d029      	beq.n	8022c96 <USBD_SetConfig+0x8e>
 8022c42:	e071      	b.n	8022d28 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022c44:	4b41      	ldr	r3, [pc, #260]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022c46:	781b      	ldrb	r3, [r3, #0]
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	d01f      	beq.n	8022c8c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022c4e:	781b      	ldrb	r3, [r3, #0]
 8022c50:	001a      	movs	r2, r3
 8022c52:	687b      	ldr	r3, [r7, #4]
 8022c54:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022c56:	687a      	ldr	r2, [r7, #4]
 8022c58:	23a7      	movs	r3, #167	@ 0xa7
 8022c5a:	009b      	lsls	r3, r3, #2
 8022c5c:	2103      	movs	r1, #3
 8022c5e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022c60:	4b3a      	ldr	r3, [pc, #232]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022c62:	781a      	ldrb	r2, [r3, #0]
 8022c64:	687b      	ldr	r3, [r7, #4]
 8022c66:	0011      	movs	r1, r2
 8022c68:	0018      	movs	r0, r3
 8022c6a:	f7ff f8c6 	bl	8021dfa <USBD_SetClassConfig>
 8022c6e:	0003      	movs	r3, r0
 8022c70:	2b02      	cmp	r3, #2
 8022c72:	d106      	bne.n	8022c82 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022c74:	683a      	ldr	r2, [r7, #0]
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	0011      	movs	r1, r2
 8022c7a:	0018      	movs	r0, r3
 8022c7c:	f000 f951 	bl	8022f22 <USBD_CtlError>
            return;
 8022c80:	e060      	b.n	8022d44 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8022c82:	687b      	ldr	r3, [r7, #4]
 8022c84:	0018      	movs	r0, r3
 8022c86:	f000 fa34 	bl	80230f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022c8a:	e05b      	b.n	8022d44 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	0018      	movs	r0, r3
 8022c90:	f000 fa2f 	bl	80230f2 <USBD_CtlSendStatus>
        break;
 8022c94:	e056      	b.n	8022d44 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8022c96:	4b2d      	ldr	r3, [pc, #180]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022c98:	781b      	ldrb	r3, [r3, #0]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	d115      	bne.n	8022cca <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022c9e:	687a      	ldr	r2, [r7, #4]
 8022ca0:	23a7      	movs	r3, #167	@ 0xa7
 8022ca2:	009b      	lsls	r3, r3, #2
 8022ca4:	2102      	movs	r1, #2
 8022ca6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022ca8:	4b28      	ldr	r3, [pc, #160]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022caa:	781b      	ldrb	r3, [r3, #0]
 8022cac:	001a      	movs	r2, r3
 8022cae:	687b      	ldr	r3, [r7, #4]
 8022cb0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022cb2:	4b26      	ldr	r3, [pc, #152]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022cb4:	781a      	ldrb	r2, [r3, #0]
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	0011      	movs	r1, r2
 8022cba:	0018      	movs	r0, r3
 8022cbc:	f7ff f8c4 	bl	8021e48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	0018      	movs	r0, r3
 8022cc4:	f000 fa15 	bl	80230f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022cc8:	e03c      	b.n	8022d44 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022cca:	4b20      	ldr	r3, [pc, #128]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022ccc:	781b      	ldrb	r3, [r3, #0]
 8022cce:	001a      	movs	r2, r3
 8022cd0:	687b      	ldr	r3, [r7, #4]
 8022cd2:	685b      	ldr	r3, [r3, #4]
 8022cd4:	429a      	cmp	r2, r3
 8022cd6:	d022      	beq.n	8022d1e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022cd8:	687b      	ldr	r3, [r7, #4]
 8022cda:	685b      	ldr	r3, [r3, #4]
 8022cdc:	b2da      	uxtb	r2, r3
 8022cde:	687b      	ldr	r3, [r7, #4]
 8022ce0:	0011      	movs	r1, r2
 8022ce2:	0018      	movs	r0, r3
 8022ce4:	f7ff f8b0 	bl	8021e48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022ce8:	4b18      	ldr	r3, [pc, #96]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022cea:	781b      	ldrb	r3, [r3, #0]
 8022cec:	001a      	movs	r2, r3
 8022cee:	687b      	ldr	r3, [r7, #4]
 8022cf0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022cf2:	4b16      	ldr	r3, [pc, #88]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022cf4:	781a      	ldrb	r2, [r3, #0]
 8022cf6:	687b      	ldr	r3, [r7, #4]
 8022cf8:	0011      	movs	r1, r2
 8022cfa:	0018      	movs	r0, r3
 8022cfc:	f7ff f87d 	bl	8021dfa <USBD_SetClassConfig>
 8022d00:	0003      	movs	r3, r0
 8022d02:	2b02      	cmp	r3, #2
 8022d04:	d106      	bne.n	8022d14 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022d06:	683a      	ldr	r2, [r7, #0]
 8022d08:	687b      	ldr	r3, [r7, #4]
 8022d0a:	0011      	movs	r1, r2
 8022d0c:	0018      	movs	r0, r3
 8022d0e:	f000 f908 	bl	8022f22 <USBD_CtlError>
            return;
 8022d12:	e017      	b.n	8022d44 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	0018      	movs	r0, r3
 8022d18:	f000 f9eb 	bl	80230f2 <USBD_CtlSendStatus>
        break;
 8022d1c:	e012      	b.n	8022d44 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022d1e:	687b      	ldr	r3, [r7, #4]
 8022d20:	0018      	movs	r0, r3
 8022d22:	f000 f9e6 	bl	80230f2 <USBD_CtlSendStatus>
        break;
 8022d26:	e00d      	b.n	8022d44 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022d28:	683a      	ldr	r2, [r7, #0]
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	0011      	movs	r1, r2
 8022d2e:	0018      	movs	r0, r3
 8022d30:	f000 f8f7 	bl	8022f22 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022d34:	4b05      	ldr	r3, [pc, #20]	@ (8022d4c <USBD_SetConfig+0x144>)
 8022d36:	781a      	ldrb	r2, [r3, #0]
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	0011      	movs	r1, r2
 8022d3c:	0018      	movs	r0, r3
 8022d3e:	f7ff f883 	bl	8021e48 <USBD_ClrClassConfig>
        break;
 8022d42:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022d44:	46bd      	mov	sp, r7
 8022d46:	b002      	add	sp, #8
 8022d48:	bd80      	pop	{r7, pc}
 8022d4a:	46c0      	nop			@ (mov r8, r8)
 8022d4c:	20002530 	.word	0x20002530

08022d50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022d50:	b580      	push	{r7, lr}
 8022d52:	b082      	sub	sp, #8
 8022d54:	af00      	add	r7, sp, #0
 8022d56:	6078      	str	r0, [r7, #4]
 8022d58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022d5a:	683b      	ldr	r3, [r7, #0]
 8022d5c:	88db      	ldrh	r3, [r3, #6]
 8022d5e:	2b01      	cmp	r3, #1
 8022d60:	d006      	beq.n	8022d70 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022d62:	683a      	ldr	r2, [r7, #0]
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	0011      	movs	r1, r2
 8022d68:	0018      	movs	r0, r3
 8022d6a:	f000 f8da 	bl	8022f22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022d6e:	e026      	b.n	8022dbe <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022d70:	687a      	ldr	r2, [r7, #4]
 8022d72:	23a7      	movs	r3, #167	@ 0xa7
 8022d74:	009b      	lsls	r3, r3, #2
 8022d76:	5cd3      	ldrb	r3, [r2, r3]
 8022d78:	2b02      	cmp	r3, #2
 8022d7a:	dc02      	bgt.n	8022d82 <USBD_GetConfig+0x32>
 8022d7c:	2b00      	cmp	r3, #0
 8022d7e:	dc03      	bgt.n	8022d88 <USBD_GetConfig+0x38>
 8022d80:	e016      	b.n	8022db0 <USBD_GetConfig+0x60>
 8022d82:	2b03      	cmp	r3, #3
 8022d84:	d00c      	beq.n	8022da0 <USBD_GetConfig+0x50>
 8022d86:	e013      	b.n	8022db0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	2200      	movs	r2, #0
 8022d8c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022d8e:	687b      	ldr	r3, [r7, #4]
 8022d90:	3308      	adds	r3, #8
 8022d92:	0019      	movs	r1, r3
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	2201      	movs	r2, #1
 8022d98:	0018      	movs	r0, r3
 8022d9a:	f000 f940 	bl	802301e <USBD_CtlSendData>
        break;
 8022d9e:	e00e      	b.n	8022dbe <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	1d19      	adds	r1, r3, #4
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	2201      	movs	r2, #1
 8022da8:	0018      	movs	r0, r3
 8022daa:	f000 f938 	bl	802301e <USBD_CtlSendData>
        break;
 8022dae:	e006      	b.n	8022dbe <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022db0:	683a      	ldr	r2, [r7, #0]
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	0011      	movs	r1, r2
 8022db6:	0018      	movs	r0, r3
 8022db8:	f000 f8b3 	bl	8022f22 <USBD_CtlError>
        break;
 8022dbc:	46c0      	nop			@ (mov r8, r8)
}
 8022dbe:	46c0      	nop			@ (mov r8, r8)
 8022dc0:	46bd      	mov	sp, r7
 8022dc2:	b002      	add	sp, #8
 8022dc4:	bd80      	pop	{r7, pc}

08022dc6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022dc6:	b580      	push	{r7, lr}
 8022dc8:	b082      	sub	sp, #8
 8022dca:	af00      	add	r7, sp, #0
 8022dcc:	6078      	str	r0, [r7, #4]
 8022dce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022dd0:	687a      	ldr	r2, [r7, #4]
 8022dd2:	23a7      	movs	r3, #167	@ 0xa7
 8022dd4:	009b      	lsls	r3, r3, #2
 8022dd6:	5cd3      	ldrb	r3, [r2, r3]
 8022dd8:	3b01      	subs	r3, #1
 8022dda:	2b02      	cmp	r3, #2
 8022ddc:	d822      	bhi.n	8022e24 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022dde:	683b      	ldr	r3, [r7, #0]
 8022de0:	88db      	ldrh	r3, [r3, #6]
 8022de2:	2b02      	cmp	r3, #2
 8022de4:	d006      	beq.n	8022df4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022de6:	683a      	ldr	r2, [r7, #0]
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	0011      	movs	r1, r2
 8022dec:	0018      	movs	r0, r3
 8022dee:	f000 f898 	bl	8022f22 <USBD_CtlError>
        break;
 8022df2:	e01e      	b.n	8022e32 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	2201      	movs	r2, #1
 8022df8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022dfa:	687a      	ldr	r2, [r7, #4]
 8022dfc:	23a9      	movs	r3, #169	@ 0xa9
 8022dfe:	009b      	lsls	r3, r3, #2
 8022e00:	58d3      	ldr	r3, [r2, r3]
 8022e02:	2b00      	cmp	r3, #0
 8022e04:	d005      	beq.n	8022e12 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022e06:	687b      	ldr	r3, [r7, #4]
 8022e08:	68db      	ldr	r3, [r3, #12]
 8022e0a:	2202      	movs	r2, #2
 8022e0c:	431a      	orrs	r2, r3
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	330c      	adds	r3, #12
 8022e16:	0019      	movs	r1, r3
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	2202      	movs	r2, #2
 8022e1c:	0018      	movs	r0, r3
 8022e1e:	f000 f8fe 	bl	802301e <USBD_CtlSendData>
      break;
 8022e22:	e006      	b.n	8022e32 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022e24:	683a      	ldr	r2, [r7, #0]
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	0011      	movs	r1, r2
 8022e2a:	0018      	movs	r0, r3
 8022e2c:	f000 f879 	bl	8022f22 <USBD_CtlError>
      break;
 8022e30:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022e32:	46c0      	nop			@ (mov r8, r8)
 8022e34:	46bd      	mov	sp, r7
 8022e36:	b002      	add	sp, #8
 8022e38:	bd80      	pop	{r7, pc}

08022e3a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022e3a:	b580      	push	{r7, lr}
 8022e3c:	b082      	sub	sp, #8
 8022e3e:	af00      	add	r7, sp, #0
 8022e40:	6078      	str	r0, [r7, #4]
 8022e42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022e44:	683b      	ldr	r3, [r7, #0]
 8022e46:	885b      	ldrh	r3, [r3, #2]
 8022e48:	2b01      	cmp	r3, #1
 8022e4a:	d108      	bne.n	8022e5e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022e4c:	687a      	ldr	r2, [r7, #4]
 8022e4e:	23a9      	movs	r3, #169	@ 0xa9
 8022e50:	009b      	lsls	r3, r3, #2
 8022e52:	2101      	movs	r1, #1
 8022e54:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	0018      	movs	r0, r3
 8022e5a:	f000 f94a 	bl	80230f2 <USBD_CtlSendStatus>
  }
}
 8022e5e:	46c0      	nop			@ (mov r8, r8)
 8022e60:	46bd      	mov	sp, r7
 8022e62:	b002      	add	sp, #8
 8022e64:	bd80      	pop	{r7, pc}

08022e66 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022e66:	b580      	push	{r7, lr}
 8022e68:	b082      	sub	sp, #8
 8022e6a:	af00      	add	r7, sp, #0
 8022e6c:	6078      	str	r0, [r7, #4]
 8022e6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022e70:	687a      	ldr	r2, [r7, #4]
 8022e72:	23a7      	movs	r3, #167	@ 0xa7
 8022e74:	009b      	lsls	r3, r3, #2
 8022e76:	5cd3      	ldrb	r3, [r2, r3]
 8022e78:	3b01      	subs	r3, #1
 8022e7a:	2b02      	cmp	r3, #2
 8022e7c:	d80d      	bhi.n	8022e9a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022e7e:	683b      	ldr	r3, [r7, #0]
 8022e80:	885b      	ldrh	r3, [r3, #2]
 8022e82:	2b01      	cmp	r3, #1
 8022e84:	d110      	bne.n	8022ea8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022e86:	687a      	ldr	r2, [r7, #4]
 8022e88:	23a9      	movs	r3, #169	@ 0xa9
 8022e8a:	009b      	lsls	r3, r3, #2
 8022e8c:	2100      	movs	r1, #0
 8022e8e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022e90:	687b      	ldr	r3, [r7, #4]
 8022e92:	0018      	movs	r0, r3
 8022e94:	f000 f92d 	bl	80230f2 <USBD_CtlSendStatus>
      }
      break;
 8022e98:	e006      	b.n	8022ea8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022e9a:	683a      	ldr	r2, [r7, #0]
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	0011      	movs	r1, r2
 8022ea0:	0018      	movs	r0, r3
 8022ea2:	f000 f83e 	bl	8022f22 <USBD_CtlError>
      break;
 8022ea6:	e000      	b.n	8022eaa <USBD_ClrFeature+0x44>
      break;
 8022ea8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022eaa:	46c0      	nop			@ (mov r8, r8)
 8022eac:	46bd      	mov	sp, r7
 8022eae:	b002      	add	sp, #8
 8022eb0:	bd80      	pop	{r7, pc}

08022eb2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022eb2:	b580      	push	{r7, lr}
 8022eb4:	b082      	sub	sp, #8
 8022eb6:	af00      	add	r7, sp, #0
 8022eb8:	6078      	str	r0, [r7, #4]
 8022eba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022ebc:	683b      	ldr	r3, [r7, #0]
 8022ebe:	781a      	ldrb	r2, [r3, #0]
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022ec4:	683b      	ldr	r3, [r7, #0]
 8022ec6:	785a      	ldrb	r2, [r3, #1]
 8022ec8:	687b      	ldr	r3, [r7, #4]
 8022eca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022ecc:	683b      	ldr	r3, [r7, #0]
 8022ece:	3302      	adds	r3, #2
 8022ed0:	781b      	ldrb	r3, [r3, #0]
 8022ed2:	001a      	movs	r2, r3
 8022ed4:	683b      	ldr	r3, [r7, #0]
 8022ed6:	3303      	adds	r3, #3
 8022ed8:	781b      	ldrb	r3, [r3, #0]
 8022eda:	021b      	lsls	r3, r3, #8
 8022edc:	b29b      	uxth	r3, r3
 8022ede:	18d3      	adds	r3, r2, r3
 8022ee0:	b29a      	uxth	r2, r3
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022ee6:	683b      	ldr	r3, [r7, #0]
 8022ee8:	3304      	adds	r3, #4
 8022eea:	781b      	ldrb	r3, [r3, #0]
 8022eec:	001a      	movs	r2, r3
 8022eee:	683b      	ldr	r3, [r7, #0]
 8022ef0:	3305      	adds	r3, #5
 8022ef2:	781b      	ldrb	r3, [r3, #0]
 8022ef4:	021b      	lsls	r3, r3, #8
 8022ef6:	b29b      	uxth	r3, r3
 8022ef8:	18d3      	adds	r3, r2, r3
 8022efa:	b29a      	uxth	r2, r3
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022f00:	683b      	ldr	r3, [r7, #0]
 8022f02:	3306      	adds	r3, #6
 8022f04:	781b      	ldrb	r3, [r3, #0]
 8022f06:	001a      	movs	r2, r3
 8022f08:	683b      	ldr	r3, [r7, #0]
 8022f0a:	3307      	adds	r3, #7
 8022f0c:	781b      	ldrb	r3, [r3, #0]
 8022f0e:	021b      	lsls	r3, r3, #8
 8022f10:	b29b      	uxth	r3, r3
 8022f12:	18d3      	adds	r3, r2, r3
 8022f14:	b29a      	uxth	r2, r3
 8022f16:	687b      	ldr	r3, [r7, #4]
 8022f18:	80da      	strh	r2, [r3, #6]

}
 8022f1a:	46c0      	nop			@ (mov r8, r8)
 8022f1c:	46bd      	mov	sp, r7
 8022f1e:	b002      	add	sp, #8
 8022f20:	bd80      	pop	{r7, pc}

08022f22 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022f22:	b580      	push	{r7, lr}
 8022f24:	b082      	sub	sp, #8
 8022f26:	af00      	add	r7, sp, #0
 8022f28:	6078      	str	r0, [r7, #4]
 8022f2a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	2180      	movs	r1, #128	@ 0x80
 8022f30:	0018      	movs	r0, r3
 8022f32:	f000 fd2a 	bl	802398a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	2100      	movs	r1, #0
 8022f3a:	0018      	movs	r0, r3
 8022f3c:	f000 fd25 	bl	802398a <USBD_LL_StallEP>
}
 8022f40:	46c0      	nop			@ (mov r8, r8)
 8022f42:	46bd      	mov	sp, r7
 8022f44:	b002      	add	sp, #8
 8022f46:	bd80      	pop	{r7, pc}

08022f48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022f48:	b590      	push	{r4, r7, lr}
 8022f4a:	b087      	sub	sp, #28
 8022f4c:	af00      	add	r7, sp, #0
 8022f4e:	60f8      	str	r0, [r7, #12]
 8022f50:	60b9      	str	r1, [r7, #8]
 8022f52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022f54:	2417      	movs	r4, #23
 8022f56:	193b      	adds	r3, r7, r4
 8022f58:	2200      	movs	r2, #0
 8022f5a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022f5c:	68fb      	ldr	r3, [r7, #12]
 8022f5e:	2b00      	cmp	r3, #0
 8022f60:	d03c      	beq.n	8022fdc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022f62:	68fb      	ldr	r3, [r7, #12]
 8022f64:	0018      	movs	r0, r3
 8022f66:	f000 f83d 	bl	8022fe4 <USBD_GetLen>
 8022f6a:	0003      	movs	r3, r0
 8022f6c:	3301      	adds	r3, #1
 8022f6e:	b29b      	uxth	r3, r3
 8022f70:	18db      	adds	r3, r3, r3
 8022f72:	b29a      	uxth	r2, r3
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022f78:	193b      	adds	r3, r7, r4
 8022f7a:	781b      	ldrb	r3, [r3, #0]
 8022f7c:	193a      	adds	r2, r7, r4
 8022f7e:	1c59      	adds	r1, r3, #1
 8022f80:	7011      	strb	r1, [r2, #0]
 8022f82:	001a      	movs	r2, r3
 8022f84:	68bb      	ldr	r3, [r7, #8]
 8022f86:	189b      	adds	r3, r3, r2
 8022f88:	687a      	ldr	r2, [r7, #4]
 8022f8a:	7812      	ldrb	r2, [r2, #0]
 8022f8c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022f8e:	193b      	adds	r3, r7, r4
 8022f90:	781b      	ldrb	r3, [r3, #0]
 8022f92:	193a      	adds	r2, r7, r4
 8022f94:	1c59      	adds	r1, r3, #1
 8022f96:	7011      	strb	r1, [r2, #0]
 8022f98:	001a      	movs	r2, r3
 8022f9a:	68bb      	ldr	r3, [r7, #8]
 8022f9c:	189b      	adds	r3, r3, r2
 8022f9e:	2203      	movs	r2, #3
 8022fa0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022fa2:	e017      	b.n	8022fd4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022fa4:	68fb      	ldr	r3, [r7, #12]
 8022fa6:	1c5a      	adds	r2, r3, #1
 8022fa8:	60fa      	str	r2, [r7, #12]
 8022faa:	2417      	movs	r4, #23
 8022fac:	193a      	adds	r2, r7, r4
 8022fae:	7812      	ldrb	r2, [r2, #0]
 8022fb0:	1939      	adds	r1, r7, r4
 8022fb2:	1c50      	adds	r0, r2, #1
 8022fb4:	7008      	strb	r0, [r1, #0]
 8022fb6:	0011      	movs	r1, r2
 8022fb8:	68ba      	ldr	r2, [r7, #8]
 8022fba:	1852      	adds	r2, r2, r1
 8022fbc:	781b      	ldrb	r3, [r3, #0]
 8022fbe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022fc0:	193b      	adds	r3, r7, r4
 8022fc2:	781b      	ldrb	r3, [r3, #0]
 8022fc4:	193a      	adds	r2, r7, r4
 8022fc6:	1c59      	adds	r1, r3, #1
 8022fc8:	7011      	strb	r1, [r2, #0]
 8022fca:	001a      	movs	r2, r3
 8022fcc:	68bb      	ldr	r3, [r7, #8]
 8022fce:	189b      	adds	r3, r3, r2
 8022fd0:	2200      	movs	r2, #0
 8022fd2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022fd4:	68fb      	ldr	r3, [r7, #12]
 8022fd6:	781b      	ldrb	r3, [r3, #0]
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	d1e3      	bne.n	8022fa4 <USBD_GetString+0x5c>
    }
  }
}
 8022fdc:	46c0      	nop			@ (mov r8, r8)
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	b007      	add	sp, #28
 8022fe2:	bd90      	pop	{r4, r7, pc}

08022fe4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022fe4:	b580      	push	{r7, lr}
 8022fe6:	b084      	sub	sp, #16
 8022fe8:	af00      	add	r7, sp, #0
 8022fea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022fec:	230f      	movs	r3, #15
 8022fee:	18fb      	adds	r3, r7, r3
 8022ff0:	2200      	movs	r2, #0
 8022ff2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022ff4:	e008      	b.n	8023008 <USBD_GetLen+0x24>
  {
    len++;
 8022ff6:	210f      	movs	r1, #15
 8022ff8:	187b      	adds	r3, r7, r1
 8022ffa:	781a      	ldrb	r2, [r3, #0]
 8022ffc:	187b      	adds	r3, r7, r1
 8022ffe:	3201      	adds	r2, #1
 8023000:	701a      	strb	r2, [r3, #0]
    buf++;
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	3301      	adds	r3, #1
 8023006:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	781b      	ldrb	r3, [r3, #0]
 802300c:	2b00      	cmp	r3, #0
 802300e:	d1f2      	bne.n	8022ff6 <USBD_GetLen+0x12>
  }

  return len;
 8023010:	230f      	movs	r3, #15
 8023012:	18fb      	adds	r3, r7, r3
 8023014:	781b      	ldrb	r3, [r3, #0]
}
 8023016:	0018      	movs	r0, r3
 8023018:	46bd      	mov	sp, r7
 802301a:	b004      	add	sp, #16
 802301c:	bd80      	pop	{r7, pc}

0802301e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 802301e:	b580      	push	{r7, lr}
 8023020:	b084      	sub	sp, #16
 8023022:	af00      	add	r7, sp, #0
 8023024:	60f8      	str	r0, [r7, #12]
 8023026:	60b9      	str	r1, [r7, #8]
 8023028:	1dbb      	adds	r3, r7, #6
 802302a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 802302c:	68fa      	ldr	r2, [r7, #12]
 802302e:	23a5      	movs	r3, #165	@ 0xa5
 8023030:	009b      	lsls	r3, r3, #2
 8023032:	2102      	movs	r1, #2
 8023034:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8023036:	1dbb      	adds	r3, r7, #6
 8023038:	881a      	ldrh	r2, [r3, #0]
 802303a:	68fb      	ldr	r3, [r7, #12]
 802303c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 802303e:	1dbb      	adds	r3, r7, #6
 8023040:	881a      	ldrh	r2, [r3, #0]
 8023042:	68fb      	ldr	r3, [r7, #12]
 8023044:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8023046:	1dbb      	adds	r3, r7, #6
 8023048:	881b      	ldrh	r3, [r3, #0]
 802304a:	68ba      	ldr	r2, [r7, #8]
 802304c:	68f8      	ldr	r0, [r7, #12]
 802304e:	2100      	movs	r1, #0
 8023050:	f000 fd4d 	bl	8023aee <USBD_LL_Transmit>

  return USBD_OK;
 8023054:	2300      	movs	r3, #0
}
 8023056:	0018      	movs	r0, r3
 8023058:	46bd      	mov	sp, r7
 802305a:	b004      	add	sp, #16
 802305c:	bd80      	pop	{r7, pc}

0802305e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 802305e:	b580      	push	{r7, lr}
 8023060:	b084      	sub	sp, #16
 8023062:	af00      	add	r7, sp, #0
 8023064:	60f8      	str	r0, [r7, #12]
 8023066:	60b9      	str	r1, [r7, #8]
 8023068:	1dbb      	adds	r3, r7, #6
 802306a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802306c:	1dbb      	adds	r3, r7, #6
 802306e:	881b      	ldrh	r3, [r3, #0]
 8023070:	68ba      	ldr	r2, [r7, #8]
 8023072:	68f8      	ldr	r0, [r7, #12]
 8023074:	2100      	movs	r1, #0
 8023076:	f000 fd3a 	bl	8023aee <USBD_LL_Transmit>

  return USBD_OK;
 802307a:	2300      	movs	r3, #0
}
 802307c:	0018      	movs	r0, r3
 802307e:	46bd      	mov	sp, r7
 8023080:	b004      	add	sp, #16
 8023082:	bd80      	pop	{r7, pc}

08023084 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8023084:	b580      	push	{r7, lr}
 8023086:	b084      	sub	sp, #16
 8023088:	af00      	add	r7, sp, #0
 802308a:	60f8      	str	r0, [r7, #12]
 802308c:	60b9      	str	r1, [r7, #8]
 802308e:	1dbb      	adds	r3, r7, #6
 8023090:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8023092:	68fa      	ldr	r2, [r7, #12]
 8023094:	23a5      	movs	r3, #165	@ 0xa5
 8023096:	009b      	lsls	r3, r3, #2
 8023098:	2103      	movs	r1, #3
 802309a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 802309c:	1dbb      	adds	r3, r7, #6
 802309e:	8819      	ldrh	r1, [r3, #0]
 80230a0:	68fa      	ldr	r2, [r7, #12]
 80230a2:	23ae      	movs	r3, #174	@ 0xae
 80230a4:	005b      	lsls	r3, r3, #1
 80230a6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80230a8:	1dbb      	adds	r3, r7, #6
 80230aa:	8819      	ldrh	r1, [r3, #0]
 80230ac:	68fa      	ldr	r2, [r7, #12]
 80230ae:	23b0      	movs	r3, #176	@ 0xb0
 80230b0:	005b      	lsls	r3, r3, #1
 80230b2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80230b4:	1dbb      	adds	r3, r7, #6
 80230b6:	881b      	ldrh	r3, [r3, #0]
 80230b8:	68ba      	ldr	r2, [r7, #8]
 80230ba:	68f8      	ldr	r0, [r7, #12]
 80230bc:	2100      	movs	r1, #0
 80230be:	f000 fd4d 	bl	8023b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80230c2:	2300      	movs	r3, #0
}
 80230c4:	0018      	movs	r0, r3
 80230c6:	46bd      	mov	sp, r7
 80230c8:	b004      	add	sp, #16
 80230ca:	bd80      	pop	{r7, pc}

080230cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80230cc:	b580      	push	{r7, lr}
 80230ce:	b084      	sub	sp, #16
 80230d0:	af00      	add	r7, sp, #0
 80230d2:	60f8      	str	r0, [r7, #12]
 80230d4:	60b9      	str	r1, [r7, #8]
 80230d6:	1dbb      	adds	r3, r7, #6
 80230d8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80230da:	1dbb      	adds	r3, r7, #6
 80230dc:	881b      	ldrh	r3, [r3, #0]
 80230de:	68ba      	ldr	r2, [r7, #8]
 80230e0:	68f8      	ldr	r0, [r7, #12]
 80230e2:	2100      	movs	r1, #0
 80230e4:	f000 fd3a 	bl	8023b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80230e8:	2300      	movs	r3, #0
}
 80230ea:	0018      	movs	r0, r3
 80230ec:	46bd      	mov	sp, r7
 80230ee:	b004      	add	sp, #16
 80230f0:	bd80      	pop	{r7, pc}

080230f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80230f2:	b580      	push	{r7, lr}
 80230f4:	b082      	sub	sp, #8
 80230f6:	af00      	add	r7, sp, #0
 80230f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80230fa:	687a      	ldr	r2, [r7, #4]
 80230fc:	23a5      	movs	r3, #165	@ 0xa5
 80230fe:	009b      	lsls	r3, r3, #2
 8023100:	2104      	movs	r1, #4
 8023102:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8023104:	6878      	ldr	r0, [r7, #4]
 8023106:	2300      	movs	r3, #0
 8023108:	2200      	movs	r2, #0
 802310a:	2100      	movs	r1, #0
 802310c:	f000 fcef 	bl	8023aee <USBD_LL_Transmit>

  return USBD_OK;
 8023110:	2300      	movs	r3, #0
}
 8023112:	0018      	movs	r0, r3
 8023114:	46bd      	mov	sp, r7
 8023116:	b002      	add	sp, #8
 8023118:	bd80      	pop	{r7, pc}

0802311a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802311a:	b580      	push	{r7, lr}
 802311c:	b082      	sub	sp, #8
 802311e:	af00      	add	r7, sp, #0
 8023120:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8023122:	687a      	ldr	r2, [r7, #4]
 8023124:	23a5      	movs	r3, #165	@ 0xa5
 8023126:	009b      	lsls	r3, r3, #2
 8023128:	2105      	movs	r1, #5
 802312a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802312c:	6878      	ldr	r0, [r7, #4]
 802312e:	2300      	movs	r3, #0
 8023130:	2200      	movs	r2, #0
 8023132:	2100      	movs	r1, #0
 8023134:	f000 fd12 	bl	8023b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8023138:	2300      	movs	r3, #0
}
 802313a:	0018      	movs	r0, r3
 802313c:	46bd      	mov	sp, r7
 802313e:	b002      	add	sp, #8
 8023140:	bd80      	pop	{r7, pc}
	...

08023144 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023144:	b580      	push	{r7, lr}
 8023146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8023148:	4914      	ldr	r1, [pc, #80]	@ (802319c <MX_USB_DEVICE_Init+0x58>)
 802314a:	4b15      	ldr	r3, [pc, #84]	@ (80231a0 <MX_USB_DEVICE_Init+0x5c>)
 802314c:	2200      	movs	r2, #0
 802314e:	0018      	movs	r0, r3
 8023150:	f7fe fdec 	bl	8021d2c <USBD_Init>
 8023154:	1e03      	subs	r3, r0, #0
 8023156:	d001      	beq.n	802315c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8023158:	f7ea f98a 	bl	800d470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802315c:	4a11      	ldr	r2, [pc, #68]	@ (80231a4 <MX_USB_DEVICE_Init+0x60>)
 802315e:	4b10      	ldr	r3, [pc, #64]	@ (80231a0 <MX_USB_DEVICE_Init+0x5c>)
 8023160:	0011      	movs	r1, r2
 8023162:	0018      	movs	r0, r3
 8023164:	f7fe fe13 	bl	8021d8e <USBD_RegisterClass>
 8023168:	1e03      	subs	r3, r0, #0
 802316a:	d001      	beq.n	8023170 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 802316c:	f7ea f980 	bl	800d470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023170:	4a0d      	ldr	r2, [pc, #52]	@ (80231a8 <MX_USB_DEVICE_Init+0x64>)
 8023172:	4b0b      	ldr	r3, [pc, #44]	@ (80231a0 <MX_USB_DEVICE_Init+0x5c>)
 8023174:	0011      	movs	r1, r2
 8023176:	0018      	movs	r0, r3
 8023178:	f7fe fd28 	bl	8021bcc <USBD_CDC_RegisterInterface>
 802317c:	1e03      	subs	r3, r0, #0
 802317e:	d001      	beq.n	8023184 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8023180:	f7ea f976 	bl	800d470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023184:	4b06      	ldr	r3, [pc, #24]	@ (80231a0 <MX_USB_DEVICE_Init+0x5c>)
 8023186:	0018      	movs	r0, r3
 8023188:	f7fe fe21 	bl	8021dce <USBD_Start>
 802318c:	1e03      	subs	r3, r0, #0
 802318e:	d001      	beq.n	8023194 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8023190:	f7ea f96e 	bl	800d470 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8023194:	46c0      	nop			@ (mov r8, r8)
 8023196:	46bd      	mov	sp, r7
 8023198:	bd80      	pop	{r7, pc}
 802319a:	46c0      	nop			@ (mov r8, r8)
 802319c:	20000224 	.word	0x20000224
 80231a0:	20002534 	.word	0x20002534
 80231a4:	20000110 	.word	0x20000110
 80231a8:	20000214 	.word	0x20000214

080231ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80231ac:	b580      	push	{r7, lr}
 80231ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80231b0:	4907      	ldr	r1, [pc, #28]	@ (80231d0 <CDC_Init_FS+0x24>)
 80231b2:	4b08      	ldr	r3, [pc, #32]	@ (80231d4 <CDC_Init_FS+0x28>)
 80231b4:	2200      	movs	r2, #0
 80231b6:	0018      	movs	r0, r3
 80231b8:	f7fe fd23 	bl	8021c02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80231bc:	4a06      	ldr	r2, [pc, #24]	@ (80231d8 <CDC_Init_FS+0x2c>)
 80231be:	4b05      	ldr	r3, [pc, #20]	@ (80231d4 <CDC_Init_FS+0x28>)
 80231c0:	0011      	movs	r1, r2
 80231c2:	0018      	movs	r0, r3
 80231c4:	f7fe fd39 	bl	8021c3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80231c8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80231ca:	0018      	movs	r0, r3
 80231cc:	46bd      	mov	sp, r7
 80231ce:	bd80      	pop	{r7, pc}
 80231d0:	20002cb8 	.word	0x20002cb8
 80231d4:	20002534 	.word	0x20002534
 80231d8:	200028b8 	.word	0x200028b8

080231dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80231dc:	b580      	push	{r7, lr}
 80231de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80231e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80231e2:	0018      	movs	r0, r3
 80231e4:	46bd      	mov	sp, r7
 80231e6:	bd80      	pop	{r7, pc}

080231e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80231e8:	b580      	push	{r7, lr}
 80231ea:	b084      	sub	sp, #16
 80231ec:	af00      	add	r7, sp, #0
 80231ee:	6039      	str	r1, [r7, #0]
 80231f0:	0011      	movs	r1, r2
 80231f2:	1dfb      	adds	r3, r7, #7
 80231f4:	1c02      	adds	r2, r0, #0
 80231f6:	701a      	strb	r2, [r3, #0]
 80231f8:	1d3b      	adds	r3, r7, #4
 80231fa:	1c0a      	adds	r2, r1, #0
 80231fc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80231fe:	1dfb      	adds	r3, r7, #7
 8023200:	781b      	ldrb	r3, [r3, #0]
 8023202:	2b23      	cmp	r3, #35	@ 0x23
 8023204:	d810      	bhi.n	8023228 <CDC_Control_FS+0x40>
 8023206:	009a      	lsls	r2, r3, #2
 8023208:	4b0a      	ldr	r3, [pc, #40]	@ (8023234 <CDC_Control_FS+0x4c>)
 802320a:	18d3      	adds	r3, r2, r3
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8023210:	683b      	ldr	r3, [r7, #0]
 8023212:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8023214:	68fb      	ldr	r3, [r7, #12]
 8023216:	885b      	ldrh	r3, [r3, #2]
 8023218:	001a      	movs	r2, r3
 802321a:	2301      	movs	r3, #1
 802321c:	4013      	ands	r3, r2
 802321e:	d001      	beq.n	8023224 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 8023220:	2302      	movs	r3, #2
 8023222:	e003      	b.n	802322c <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8023224:	2300      	movs	r3, #0
 8023226:	e001      	b.n	802322c <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8023228:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 802322a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802322c:	0018      	movs	r0, r3
 802322e:	46bd      	mov	sp, r7
 8023230:	b004      	add	sp, #16
 8023232:	bd80      	pop	{r7, pc}
 8023234:	0802e930 	.word	0x0802e930

08023238 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8023238:	b580      	push	{r7, lr}
 802323a:	b082      	sub	sp, #8
 802323c:	af00      	add	r7, sp, #0
 802323e:	6078      	str	r0, [r7, #4]
 8023240:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8023242:	4b12      	ldr	r3, [pc, #72]	@ (802328c <CDC_Receive_FS+0x54>)
 8023244:	781b      	ldrb	r3, [r3, #0]
 8023246:	2b00      	cmp	r3, #0
 8023248:	d013      	beq.n	8023272 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 802324a:	683b      	ldr	r3, [r7, #0]
 802324c:	681b      	ldr	r3, [r3, #0]
 802324e:	b29a      	uxth	r2, r3
 8023250:	2301      	movs	r3, #1
 8023252:	425b      	negs	r3, r3
 8023254:	6879      	ldr	r1, [r7, #4]
 8023256:	480e      	ldr	r0, [pc, #56]	@ (8023290 <CDC_Receive_FS+0x58>)
 8023258:	f7fa f942 	bl	801d4e0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802325c:	687a      	ldr	r2, [r7, #4]
 802325e:	4b0d      	ldr	r3, [pc, #52]	@ (8023294 <CDC_Receive_FS+0x5c>)
 8023260:	0011      	movs	r1, r2
 8023262:	0018      	movs	r0, r3
 8023264:	f7fe fce9 	bl	8021c3a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023268:	4b0a      	ldr	r3, [pc, #40]	@ (8023294 <CDC_Receive_FS+0x5c>)
 802326a:	0018      	movs	r0, r3
 802326c:	f7fe fd30 	bl	8021cd0 <USBD_CDC_ReceivePacket>
 8023270:	e006      	b.n	8023280 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8023272:	683b      	ldr	r3, [r7, #0]
 8023274:	681a      	ldr	r2, [r3, #0]
 8023276:	4b08      	ldr	r3, [pc, #32]	@ (8023298 <CDC_Receive_FS+0x60>)
 8023278:	681b      	ldr	r3, [r3, #0]
 802327a:	18d2      	adds	r2, r2, r3
 802327c:	4b06      	ldr	r3, [pc, #24]	@ (8023298 <CDC_Receive_FS+0x60>)
 802327e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8023280:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8023282:	0018      	movs	r0, r3
 8023284:	46bd      	mov	sp, r7
 8023286:	b002      	add	sp, #8
 8023288:	bd80      	pop	{r7, pc}
 802328a:	46c0      	nop			@ (mov r8, r8)
 802328c:	200027f8 	.word	0x200027f8
 8023290:	200027fc 	.word	0x200027fc
 8023294:	20002534 	.word	0x20002534
 8023298:	200028b4 	.word	0x200028b4

0802329c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802329c:	b5b0      	push	{r4, r5, r7, lr}
 802329e:	b084      	sub	sp, #16
 80232a0:	af00      	add	r7, sp, #0
 80232a2:	6078      	str	r0, [r7, #4]
 80232a4:	000a      	movs	r2, r1
 80232a6:	1cbb      	adds	r3, r7, #2
 80232a8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80232aa:	230f      	movs	r3, #15
 80232ac:	18fb      	adds	r3, r7, r3
 80232ae:	2200      	movs	r2, #0
 80232b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80232b2:	4a11      	ldr	r2, [pc, #68]	@ (80232f8 <CDC_Transmit_FS+0x5c>)
 80232b4:	23ae      	movs	r3, #174	@ 0xae
 80232b6:	009b      	lsls	r3, r3, #2
 80232b8:	58d3      	ldr	r3, [r2, r3]
 80232ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80232bc:	68ba      	ldr	r2, [r7, #8]
 80232be:	2385      	movs	r3, #133	@ 0x85
 80232c0:	009b      	lsls	r3, r3, #2
 80232c2:	58d3      	ldr	r3, [r2, r3]
 80232c4:	2b00      	cmp	r3, #0
 80232c6:	d001      	beq.n	80232cc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80232c8:	2301      	movs	r3, #1
 80232ca:	e010      	b.n	80232ee <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80232cc:	1cbb      	adds	r3, r7, #2
 80232ce:	881a      	ldrh	r2, [r3, #0]
 80232d0:	6879      	ldr	r1, [r7, #4]
 80232d2:	4b09      	ldr	r3, [pc, #36]	@ (80232f8 <CDC_Transmit_FS+0x5c>)
 80232d4:	0018      	movs	r0, r3
 80232d6:	f7fe fc94 	bl	8021c02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80232da:	250f      	movs	r5, #15
 80232dc:	197c      	adds	r4, r7, r5
 80232de:	4b06      	ldr	r3, [pc, #24]	@ (80232f8 <CDC_Transmit_FS+0x5c>)
 80232e0:	0018      	movs	r0, r3
 80232e2:	f7fe fcbe 	bl	8021c62 <USBD_CDC_TransmitPacket>
 80232e6:	0003      	movs	r3, r0
 80232e8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80232ea:	197b      	adds	r3, r7, r5
 80232ec:	781b      	ldrb	r3, [r3, #0]
}
 80232ee:	0018      	movs	r0, r3
 80232f0:	46bd      	mov	sp, r7
 80232f2:	b004      	add	sp, #16
 80232f4:	bdb0      	pop	{r4, r5, r7, pc}
 80232f6:	46c0      	nop			@ (mov r8, r8)
 80232f8:	20002534 	.word	0x20002534

080232fc <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80232fc:	b580      	push	{r7, lr}
 80232fe:	af00      	add	r7, sp, #0
  ESPProg = true;
 8023300:	4b02      	ldr	r3, [pc, #8]	@ (802330c <EnableESPProg+0x10>)
 8023302:	2201      	movs	r2, #1
 8023304:	701a      	strb	r2, [r3, #0]
}
 8023306:	46c0      	nop			@ (mov r8, r8)
 8023308:	46bd      	mov	sp, r7
 802330a:	bd80      	pop	{r7, pc}
 802330c:	200027f8 	.word	0x200027f8

08023310 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8023310:	b580      	push	{r7, lr}
 8023312:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8023314:	4b01      	ldr	r3, [pc, #4]	@ (802331c <GetUsbRxPointer+0xc>)
}
 8023316:	0018      	movs	r0, r3
 8023318:	46bd      	mov	sp, r7
 802331a:	bd80      	pop	{r7, pc}
 802331c:	200028b8 	.word	0x200028b8

08023320 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8023320:	b580      	push	{r7, lr}
 8023322:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8023324:	4b07      	ldr	r3, [pc, #28]	@ (8023344 <ResetUsbRxDataSize+0x24>)
 8023326:	2200      	movs	r2, #0
 8023328:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 802332a:	4a07      	ldr	r2, [pc, #28]	@ (8023348 <ResetUsbRxDataSize+0x28>)
 802332c:	4b07      	ldr	r3, [pc, #28]	@ (802334c <ResetUsbRxDataSize+0x2c>)
 802332e:	0011      	movs	r1, r2
 8023330:	0018      	movs	r0, r3
 8023332:	f7fe fc82 	bl	8021c3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023336:	4b05      	ldr	r3, [pc, #20]	@ (802334c <ResetUsbRxDataSize+0x2c>)
 8023338:	0018      	movs	r0, r3
 802333a:	f7fe fcc9 	bl	8021cd0 <USBD_CDC_ReceivePacket>
}
 802333e:	46c0      	nop			@ (mov r8, r8)
 8023340:	46bd      	mov	sp, r7
 8023342:	bd80      	pop	{r7, pc}
 8023344:	200028b4 	.word	0x200028b4
 8023348:	200028b8 	.word	0x200028b8
 802334c:	20002534 	.word	0x20002534

08023350 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8023350:	b580      	push	{r7, lr}
 8023352:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023354:	4b02      	ldr	r3, [pc, #8]	@ (8023360 <GetUsbRxDataSize+0x10>)
 8023356:	681b      	ldr	r3, [r3, #0]
}
 8023358:	0018      	movs	r0, r3
 802335a:	46bd      	mov	sp, r7
 802335c:	bd80      	pop	{r7, pc}
 802335e:	46c0      	nop			@ (mov r8, r8)
 8023360:	200028b4 	.word	0x200028b4

08023364 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023364:	b580      	push	{r7, lr}
 8023366:	b082      	sub	sp, #8
 8023368:	af00      	add	r7, sp, #0
 802336a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 802336c:	687a      	ldr	r2, [r7, #4]
 802336e:	4b07      	ldr	r3, [pc, #28]	@ (802338c <GetUsbRxNextChunk+0x28>)
 8023370:	18d2      	adds	r2, r2, r3
 8023372:	4b07      	ldr	r3, [pc, #28]	@ (8023390 <GetUsbRxNextChunk+0x2c>)
 8023374:	0011      	movs	r1, r2
 8023376:	0018      	movs	r0, r3
 8023378:	f7fe fc5f 	bl	8021c3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802337c:	4b04      	ldr	r3, [pc, #16]	@ (8023390 <GetUsbRxNextChunk+0x2c>)
 802337e:	0018      	movs	r0, r3
 8023380:	f7fe fca6 	bl	8021cd0 <USBD_CDC_ReceivePacket>
}
 8023384:	46c0      	nop			@ (mov r8, r8)
 8023386:	46bd      	mov	sp, r7
 8023388:	b002      	add	sp, #8
 802338a:	bd80      	pop	{r7, pc}
 802338c:	200028b8 	.word	0x200028b8
 8023390:	20002534 	.word	0x20002534

08023394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023394:	b580      	push	{r7, lr}
 8023396:	b082      	sub	sp, #8
 8023398:	af00      	add	r7, sp, #0
 802339a:	0002      	movs	r2, r0
 802339c:	6039      	str	r1, [r7, #0]
 802339e:	1dfb      	adds	r3, r7, #7
 80233a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80233a2:	683b      	ldr	r3, [r7, #0]
 80233a4:	2212      	movs	r2, #18
 80233a6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80233a8:	4b02      	ldr	r3, [pc, #8]	@ (80233b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80233aa:	0018      	movs	r0, r3
 80233ac:	46bd      	mov	sp, r7
 80233ae:	b002      	add	sp, #8
 80233b0:	bd80      	pop	{r7, pc}
 80233b2:	46c0      	nop			@ (mov r8, r8)
 80233b4:	20000240 	.word	0x20000240

080233b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80233b8:	b580      	push	{r7, lr}
 80233ba:	b082      	sub	sp, #8
 80233bc:	af00      	add	r7, sp, #0
 80233be:	0002      	movs	r2, r0
 80233c0:	6039      	str	r1, [r7, #0]
 80233c2:	1dfb      	adds	r3, r7, #7
 80233c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80233c6:	683b      	ldr	r3, [r7, #0]
 80233c8:	2204      	movs	r2, #4
 80233ca:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80233cc:	4b02      	ldr	r3, [pc, #8]	@ (80233d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80233ce:	0018      	movs	r0, r3
 80233d0:	46bd      	mov	sp, r7
 80233d2:	b002      	add	sp, #8
 80233d4:	bd80      	pop	{r7, pc}
 80233d6:	46c0      	nop			@ (mov r8, r8)
 80233d8:	20000254 	.word	0x20000254

080233dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80233dc:	b580      	push	{r7, lr}
 80233de:	b082      	sub	sp, #8
 80233e0:	af00      	add	r7, sp, #0
 80233e2:	0002      	movs	r2, r0
 80233e4:	6039      	str	r1, [r7, #0]
 80233e6:	1dfb      	adds	r3, r7, #7
 80233e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80233ea:	1dfb      	adds	r3, r7, #7
 80233ec:	781b      	ldrb	r3, [r3, #0]
 80233ee:	2b00      	cmp	r3, #0
 80233f0:	d106      	bne.n	8023400 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80233f2:	683a      	ldr	r2, [r7, #0]
 80233f4:	4908      	ldr	r1, [pc, #32]	@ (8023418 <USBD_FS_ProductStrDescriptor+0x3c>)
 80233f6:	4b09      	ldr	r3, [pc, #36]	@ (802341c <USBD_FS_ProductStrDescriptor+0x40>)
 80233f8:	0018      	movs	r0, r3
 80233fa:	f7ff fda5 	bl	8022f48 <USBD_GetString>
 80233fe:	e005      	b.n	802340c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023400:	683a      	ldr	r2, [r7, #0]
 8023402:	4905      	ldr	r1, [pc, #20]	@ (8023418 <USBD_FS_ProductStrDescriptor+0x3c>)
 8023404:	4b05      	ldr	r3, [pc, #20]	@ (802341c <USBD_FS_ProductStrDescriptor+0x40>)
 8023406:	0018      	movs	r0, r3
 8023408:	f7ff fd9e 	bl	8022f48 <USBD_GetString>
  }
  return USBD_StrDesc;
 802340c:	4b02      	ldr	r3, [pc, #8]	@ (8023418 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 802340e:	0018      	movs	r0, r3
 8023410:	46bd      	mov	sp, r7
 8023412:	b002      	add	sp, #8
 8023414:	bd80      	pop	{r7, pc}
 8023416:	46c0      	nop			@ (mov r8, r8)
 8023418:	200030b8 	.word	0x200030b8
 802341c:	0802dfd0 	.word	0x0802dfd0

08023420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023420:	b580      	push	{r7, lr}
 8023422:	b082      	sub	sp, #8
 8023424:	af00      	add	r7, sp, #0
 8023426:	0002      	movs	r2, r0
 8023428:	6039      	str	r1, [r7, #0]
 802342a:	1dfb      	adds	r3, r7, #7
 802342c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802342e:	683a      	ldr	r2, [r7, #0]
 8023430:	4904      	ldr	r1, [pc, #16]	@ (8023444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8023432:	4b05      	ldr	r3, [pc, #20]	@ (8023448 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8023434:	0018      	movs	r0, r3
 8023436:	f7ff fd87 	bl	8022f48 <USBD_GetString>
  return USBD_StrDesc;
 802343a:	4b02      	ldr	r3, [pc, #8]	@ (8023444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 802343c:	0018      	movs	r0, r3
 802343e:	46bd      	mov	sp, r7
 8023440:	b002      	add	sp, #8
 8023442:	bd80      	pop	{r7, pc}
 8023444:	200030b8 	.word	0x200030b8
 8023448:	0802dfe8 	.word	0x0802dfe8

0802344c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802344c:	b580      	push	{r7, lr}
 802344e:	b082      	sub	sp, #8
 8023450:	af00      	add	r7, sp, #0
 8023452:	0002      	movs	r2, r0
 8023454:	6039      	str	r1, [r7, #0]
 8023456:	1dfb      	adds	r3, r7, #7
 8023458:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802345a:	683b      	ldr	r3, [r7, #0]
 802345c:	221a      	movs	r2, #26
 802345e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8023460:	f000 f84c 	bl	80234fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023464:	4b02      	ldr	r3, [pc, #8]	@ (8023470 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8023466:	0018      	movs	r0, r3
 8023468:	46bd      	mov	sp, r7
 802346a:	b002      	add	sp, #8
 802346c:	bd80      	pop	{r7, pc}
 802346e:	46c0      	nop			@ (mov r8, r8)
 8023470:	20000258 	.word	0x20000258

08023474 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023474:	b580      	push	{r7, lr}
 8023476:	b082      	sub	sp, #8
 8023478:	af00      	add	r7, sp, #0
 802347a:	0002      	movs	r2, r0
 802347c:	6039      	str	r1, [r7, #0]
 802347e:	1dfb      	adds	r3, r7, #7
 8023480:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8023482:	1dfb      	adds	r3, r7, #7
 8023484:	781b      	ldrb	r3, [r3, #0]
 8023486:	2b00      	cmp	r3, #0
 8023488:	d106      	bne.n	8023498 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802348a:	683a      	ldr	r2, [r7, #0]
 802348c:	4908      	ldr	r1, [pc, #32]	@ (80234b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 802348e:	4b09      	ldr	r3, [pc, #36]	@ (80234b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8023490:	0018      	movs	r0, r3
 8023492:	f7ff fd59 	bl	8022f48 <USBD_GetString>
 8023496:	e005      	b.n	80234a4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023498:	683a      	ldr	r2, [r7, #0]
 802349a:	4905      	ldr	r1, [pc, #20]	@ (80234b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 802349c:	4b05      	ldr	r3, [pc, #20]	@ (80234b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 802349e:	0018      	movs	r0, r3
 80234a0:	f7ff fd52 	bl	8022f48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80234a4:	4b02      	ldr	r3, [pc, #8]	@ (80234b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80234a6:	0018      	movs	r0, r3
 80234a8:	46bd      	mov	sp, r7
 80234aa:	b002      	add	sp, #8
 80234ac:	bd80      	pop	{r7, pc}
 80234ae:	46c0      	nop			@ (mov r8, r8)
 80234b0:	200030b8 	.word	0x200030b8
 80234b4:	0802dffc 	.word	0x0802dffc

080234b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80234b8:	b580      	push	{r7, lr}
 80234ba:	b082      	sub	sp, #8
 80234bc:	af00      	add	r7, sp, #0
 80234be:	0002      	movs	r2, r0
 80234c0:	6039      	str	r1, [r7, #0]
 80234c2:	1dfb      	adds	r3, r7, #7
 80234c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80234c6:	1dfb      	adds	r3, r7, #7
 80234c8:	781b      	ldrb	r3, [r3, #0]
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d106      	bne.n	80234dc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80234ce:	683a      	ldr	r2, [r7, #0]
 80234d0:	4908      	ldr	r1, [pc, #32]	@ (80234f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80234d2:	4b09      	ldr	r3, [pc, #36]	@ (80234f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80234d4:	0018      	movs	r0, r3
 80234d6:	f7ff fd37 	bl	8022f48 <USBD_GetString>
 80234da:	e005      	b.n	80234e8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80234dc:	683a      	ldr	r2, [r7, #0]
 80234de:	4905      	ldr	r1, [pc, #20]	@ (80234f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80234e0:	4b05      	ldr	r3, [pc, #20]	@ (80234f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80234e2:	0018      	movs	r0, r3
 80234e4:	f7ff fd30 	bl	8022f48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80234e8:	4b02      	ldr	r3, [pc, #8]	@ (80234f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80234ea:	0018      	movs	r0, r3
 80234ec:	46bd      	mov	sp, r7
 80234ee:	b002      	add	sp, #8
 80234f0:	bd80      	pop	{r7, pc}
 80234f2:	46c0      	nop			@ (mov r8, r8)
 80234f4:	200030b8 	.word	0x200030b8
 80234f8:	0802e008 	.word	0x0802e008

080234fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80234fc:	b580      	push	{r7, lr}
 80234fe:	b084      	sub	sp, #16
 8023500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8023502:	4b10      	ldr	r3, [pc, #64]	@ (8023544 <Get_SerialNum+0x48>)
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8023508:	4b0f      	ldr	r3, [pc, #60]	@ (8023548 <Get_SerialNum+0x4c>)
 802350a:	681b      	ldr	r3, [r3, #0]
 802350c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802350e:	4b0f      	ldr	r3, [pc, #60]	@ (802354c <Get_SerialNum+0x50>)
 8023510:	681b      	ldr	r3, [r3, #0]
 8023512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8023514:	68fa      	ldr	r2, [r7, #12]
 8023516:	687b      	ldr	r3, [r7, #4]
 8023518:	18d3      	adds	r3, r2, r3
 802351a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 802351c:	68fb      	ldr	r3, [r7, #12]
 802351e:	2b00      	cmp	r3, #0
 8023520:	d00b      	beq.n	802353a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8023522:	490b      	ldr	r1, [pc, #44]	@ (8023550 <Get_SerialNum+0x54>)
 8023524:	68fb      	ldr	r3, [r7, #12]
 8023526:	2208      	movs	r2, #8
 8023528:	0018      	movs	r0, r3
 802352a:	f000 f815 	bl	8023558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802352e:	4909      	ldr	r1, [pc, #36]	@ (8023554 <Get_SerialNum+0x58>)
 8023530:	68bb      	ldr	r3, [r7, #8]
 8023532:	2204      	movs	r2, #4
 8023534:	0018      	movs	r0, r3
 8023536:	f000 f80f 	bl	8023558 <IntToUnicode>
  }
}
 802353a:	46c0      	nop			@ (mov r8, r8)
 802353c:	46bd      	mov	sp, r7
 802353e:	b004      	add	sp, #16
 8023540:	bd80      	pop	{r7, pc}
 8023542:	46c0      	nop			@ (mov r8, r8)
 8023544:	1ff80050 	.word	0x1ff80050
 8023548:	1ff80054 	.word	0x1ff80054
 802354c:	1ff80058 	.word	0x1ff80058
 8023550:	2000025a 	.word	0x2000025a
 8023554:	2000026a 	.word	0x2000026a

08023558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8023558:	b580      	push	{r7, lr}
 802355a:	b086      	sub	sp, #24
 802355c:	af00      	add	r7, sp, #0
 802355e:	60f8      	str	r0, [r7, #12]
 8023560:	60b9      	str	r1, [r7, #8]
 8023562:	1dfb      	adds	r3, r7, #7
 8023564:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8023566:	2117      	movs	r1, #23
 8023568:	187b      	adds	r3, r7, r1
 802356a:	2200      	movs	r2, #0
 802356c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802356e:	187b      	adds	r3, r7, r1
 8023570:	2200      	movs	r2, #0
 8023572:	701a      	strb	r2, [r3, #0]
 8023574:	e02f      	b.n	80235d6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8023576:	68fb      	ldr	r3, [r7, #12]
 8023578:	0f1b      	lsrs	r3, r3, #28
 802357a:	2b09      	cmp	r3, #9
 802357c:	d80d      	bhi.n	802359a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802357e:	68fb      	ldr	r3, [r7, #12]
 8023580:	0f1b      	lsrs	r3, r3, #28
 8023582:	b2da      	uxtb	r2, r3
 8023584:	2317      	movs	r3, #23
 8023586:	18fb      	adds	r3, r7, r3
 8023588:	781b      	ldrb	r3, [r3, #0]
 802358a:	005b      	lsls	r3, r3, #1
 802358c:	0019      	movs	r1, r3
 802358e:	68bb      	ldr	r3, [r7, #8]
 8023590:	185b      	adds	r3, r3, r1
 8023592:	3230      	adds	r2, #48	@ 0x30
 8023594:	b2d2      	uxtb	r2, r2
 8023596:	701a      	strb	r2, [r3, #0]
 8023598:	e00c      	b.n	80235b4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	0f1b      	lsrs	r3, r3, #28
 802359e:	b2da      	uxtb	r2, r3
 80235a0:	2317      	movs	r3, #23
 80235a2:	18fb      	adds	r3, r7, r3
 80235a4:	781b      	ldrb	r3, [r3, #0]
 80235a6:	005b      	lsls	r3, r3, #1
 80235a8:	0019      	movs	r1, r3
 80235aa:	68bb      	ldr	r3, [r7, #8]
 80235ac:	185b      	adds	r3, r3, r1
 80235ae:	3237      	adds	r2, #55	@ 0x37
 80235b0:	b2d2      	uxtb	r2, r2
 80235b2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	011b      	lsls	r3, r3, #4
 80235b8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80235ba:	2117      	movs	r1, #23
 80235bc:	187b      	adds	r3, r7, r1
 80235be:	781b      	ldrb	r3, [r3, #0]
 80235c0:	005b      	lsls	r3, r3, #1
 80235c2:	3301      	adds	r3, #1
 80235c4:	68ba      	ldr	r2, [r7, #8]
 80235c6:	18d3      	adds	r3, r2, r3
 80235c8:	2200      	movs	r2, #0
 80235ca:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80235cc:	187b      	adds	r3, r7, r1
 80235ce:	781a      	ldrb	r2, [r3, #0]
 80235d0:	187b      	adds	r3, r7, r1
 80235d2:	3201      	adds	r2, #1
 80235d4:	701a      	strb	r2, [r3, #0]
 80235d6:	2317      	movs	r3, #23
 80235d8:	18fa      	adds	r2, r7, r3
 80235da:	1dfb      	adds	r3, r7, #7
 80235dc:	7812      	ldrb	r2, [r2, #0]
 80235de:	781b      	ldrb	r3, [r3, #0]
 80235e0:	429a      	cmp	r2, r3
 80235e2:	d3c8      	bcc.n	8023576 <IntToUnicode+0x1e>
  }
}
 80235e4:	46c0      	nop			@ (mov r8, r8)
 80235e6:	46c0      	nop			@ (mov r8, r8)
 80235e8:	46bd      	mov	sp, r7
 80235ea:	b006      	add	sp, #24
 80235ec:	bd80      	pop	{r7, pc}
	...

080235f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80235f0:	b580      	push	{r7, lr}
 80235f2:	b082      	sub	sp, #8
 80235f4:	af00      	add	r7, sp, #0
 80235f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80235f8:	687b      	ldr	r3, [r7, #4]
 80235fa:	681b      	ldr	r3, [r3, #0]
 80235fc:	4a0a      	ldr	r2, [pc, #40]	@ (8023628 <HAL_PCD_MspInit+0x38>)
 80235fe:	4293      	cmp	r3, r2
 8023600:	d10e      	bne.n	8023620 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8023602:	4b0a      	ldr	r3, [pc, #40]	@ (802362c <HAL_PCD_MspInit+0x3c>)
 8023604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8023606:	4b09      	ldr	r3, [pc, #36]	@ (802362c <HAL_PCD_MspInit+0x3c>)
 8023608:	2180      	movs	r1, #128	@ 0x80
 802360a:	0409      	lsls	r1, r1, #16
 802360c:	430a      	orrs	r2, r1
 802360e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8023610:	2200      	movs	r2, #0
 8023612:	2100      	movs	r1, #0
 8023614:	201f      	movs	r0, #31
 8023616:	f7f1 fe31 	bl	801527c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 802361a:	201f      	movs	r0, #31
 802361c:	f7f1 fe43 	bl	80152a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8023620:	46c0      	nop			@ (mov r8, r8)
 8023622:	46bd      	mov	sp, r7
 8023624:	b002      	add	sp, #8
 8023626:	bd80      	pop	{r7, pc}
 8023628:	40005c00 	.word	0x40005c00
 802362c:	40021000 	.word	0x40021000

08023630 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023630:	b580      	push	{r7, lr}
 8023632:	b082      	sub	sp, #8
 8023634:	af00      	add	r7, sp, #0
 8023636:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023638:	687a      	ldr	r2, [r7, #4]
 802363a:	23bc      	movs	r3, #188	@ 0xbc
 802363c:	009b      	lsls	r3, r3, #2
 802363e:	58d2      	ldr	r2, [r2, r3]
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	21ac      	movs	r1, #172	@ 0xac
 8023644:	0089      	lsls	r1, r1, #2
 8023646:	468c      	mov	ip, r1
 8023648:	4463      	add	r3, ip
 802364a:	0019      	movs	r1, r3
 802364c:	0010      	movs	r0, r2
 802364e:	f7fe fc11 	bl	8021e74 <USBD_LL_SetupStage>
}
 8023652:	46c0      	nop			@ (mov r8, r8)
 8023654:	46bd      	mov	sp, r7
 8023656:	b002      	add	sp, #8
 8023658:	bd80      	pop	{r7, pc}

0802365a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802365a:	b590      	push	{r4, r7, lr}
 802365c:	b083      	sub	sp, #12
 802365e:	af00      	add	r7, sp, #0
 8023660:	6078      	str	r0, [r7, #4]
 8023662:	000a      	movs	r2, r1
 8023664:	1cfb      	adds	r3, r7, #3
 8023666:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023668:	687a      	ldr	r2, [r7, #4]
 802366a:	23bc      	movs	r3, #188	@ 0xbc
 802366c:	009b      	lsls	r3, r3, #2
 802366e:	58d4      	ldr	r4, [r2, r3]
 8023670:	1cfb      	adds	r3, r7, #3
 8023672:	781a      	ldrb	r2, [r3, #0]
 8023674:	6878      	ldr	r0, [r7, #4]
 8023676:	23be      	movs	r3, #190	@ 0xbe
 8023678:	0059      	lsls	r1, r3, #1
 802367a:	0013      	movs	r3, r2
 802367c:	009b      	lsls	r3, r3, #2
 802367e:	189b      	adds	r3, r3, r2
 8023680:	00db      	lsls	r3, r3, #3
 8023682:	18c3      	adds	r3, r0, r3
 8023684:	185b      	adds	r3, r3, r1
 8023686:	681a      	ldr	r2, [r3, #0]
 8023688:	1cfb      	adds	r3, r7, #3
 802368a:	781b      	ldrb	r3, [r3, #0]
 802368c:	0019      	movs	r1, r3
 802368e:	0020      	movs	r0, r4
 8023690:	f7fe fc4e 	bl	8021f30 <USBD_LL_DataOutStage>
}
 8023694:	46c0      	nop			@ (mov r8, r8)
 8023696:	46bd      	mov	sp, r7
 8023698:	b003      	add	sp, #12
 802369a:	bd90      	pop	{r4, r7, pc}

0802369c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802369c:	b580      	push	{r7, lr}
 802369e:	b082      	sub	sp, #8
 80236a0:	af00      	add	r7, sp, #0
 80236a2:	6078      	str	r0, [r7, #4]
 80236a4:	000a      	movs	r2, r1
 80236a6:	1cfb      	adds	r3, r7, #3
 80236a8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80236aa:	687a      	ldr	r2, [r7, #4]
 80236ac:	23bc      	movs	r3, #188	@ 0xbc
 80236ae:	009b      	lsls	r3, r3, #2
 80236b0:	58d0      	ldr	r0, [r2, r3]
 80236b2:	1cfb      	adds	r3, r7, #3
 80236b4:	781a      	ldrb	r2, [r3, #0]
 80236b6:	6879      	ldr	r1, [r7, #4]
 80236b8:	0013      	movs	r3, r2
 80236ba:	009b      	lsls	r3, r3, #2
 80236bc:	189b      	adds	r3, r3, r2
 80236be:	00db      	lsls	r3, r3, #3
 80236c0:	18cb      	adds	r3, r1, r3
 80236c2:	333c      	adds	r3, #60	@ 0x3c
 80236c4:	681a      	ldr	r2, [r3, #0]
 80236c6:	1cfb      	adds	r3, r7, #3
 80236c8:	781b      	ldrb	r3, [r3, #0]
 80236ca:	0019      	movs	r1, r3
 80236cc:	f7fe fcb2 	bl	8022034 <USBD_LL_DataInStage>
}
 80236d0:	46c0      	nop			@ (mov r8, r8)
 80236d2:	46bd      	mov	sp, r7
 80236d4:	b002      	add	sp, #8
 80236d6:	bd80      	pop	{r7, pc}

080236d8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80236d8:	b580      	push	{r7, lr}
 80236da:	b082      	sub	sp, #8
 80236dc:	af00      	add	r7, sp, #0
 80236de:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80236e0:	687a      	ldr	r2, [r7, #4]
 80236e2:	23bc      	movs	r3, #188	@ 0xbc
 80236e4:	009b      	lsls	r3, r3, #2
 80236e6:	58d3      	ldr	r3, [r2, r3]
 80236e8:	0018      	movs	r0, r3
 80236ea:	f7fe fde9 	bl	80222c0 <USBD_LL_SOF>
}
 80236ee:	46c0      	nop			@ (mov r8, r8)
 80236f0:	46bd      	mov	sp, r7
 80236f2:	b002      	add	sp, #8
 80236f4:	bd80      	pop	{r7, pc}

080236f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80236f6:	b580      	push	{r7, lr}
 80236f8:	b084      	sub	sp, #16
 80236fa:	af00      	add	r7, sp, #0
 80236fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80236fe:	230f      	movs	r3, #15
 8023700:	18fb      	adds	r3, r7, r3
 8023702:	2201      	movs	r2, #1
 8023704:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	689b      	ldr	r3, [r3, #8]
 802370a:	2b02      	cmp	r3, #2
 802370c:	d001      	beq.n	8023712 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 802370e:	f7e9 feaf 	bl	800d470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023712:	687a      	ldr	r2, [r7, #4]
 8023714:	23bc      	movs	r3, #188	@ 0xbc
 8023716:	009b      	lsls	r3, r3, #2
 8023718:	58d2      	ldr	r2, [r2, r3]
 802371a:	230f      	movs	r3, #15
 802371c:	18fb      	adds	r3, r7, r3
 802371e:	781b      	ldrb	r3, [r3, #0]
 8023720:	0019      	movs	r1, r3
 8023722:	0010      	movs	r0, r2
 8023724:	f7fe fd8b 	bl	802223e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023728:	687a      	ldr	r2, [r7, #4]
 802372a:	23bc      	movs	r3, #188	@ 0xbc
 802372c:	009b      	lsls	r3, r3, #2
 802372e:	58d3      	ldr	r3, [r2, r3]
 8023730:	0018      	movs	r0, r3
 8023732:	f7fe fd3c 	bl	80221ae <USBD_LL_Reset>
}
 8023736:	46c0      	nop			@ (mov r8, r8)
 8023738:	46bd      	mov	sp, r7
 802373a:	b004      	add	sp, #16
 802373c:	bd80      	pop	{r7, pc}
	...

08023740 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023740:	b580      	push	{r7, lr}
 8023742:	b082      	sub	sp, #8
 8023744:	af00      	add	r7, sp, #0
 8023746:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023748:	687a      	ldr	r2, [r7, #4]
 802374a:	23bc      	movs	r3, #188	@ 0xbc
 802374c:	009b      	lsls	r3, r3, #2
 802374e:	58d3      	ldr	r3, [r2, r3]
 8023750:	0018      	movs	r0, r3
 8023752:	f7fe fd85 	bl	8022260 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	699b      	ldr	r3, [r3, #24]
 802375a:	2b00      	cmp	r3, #0
 802375c:	d005      	beq.n	802376a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802375e:	4b05      	ldr	r3, [pc, #20]	@ (8023774 <HAL_PCD_SuspendCallback+0x34>)
 8023760:	691a      	ldr	r2, [r3, #16]
 8023762:	4b04      	ldr	r3, [pc, #16]	@ (8023774 <HAL_PCD_SuspendCallback+0x34>)
 8023764:	2106      	movs	r1, #6
 8023766:	430a      	orrs	r2, r1
 8023768:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802376a:	46c0      	nop			@ (mov r8, r8)
 802376c:	46bd      	mov	sp, r7
 802376e:	b002      	add	sp, #8
 8023770:	bd80      	pop	{r7, pc}
 8023772:	46c0      	nop			@ (mov r8, r8)
 8023774:	e000ed00 	.word	0xe000ed00

08023778 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023778:	b580      	push	{r7, lr}
 802377a:	b082      	sub	sp, #8
 802377c:	af00      	add	r7, sp, #0
 802377e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8023780:	687b      	ldr	r3, [r7, #4]
 8023782:	699b      	ldr	r3, [r3, #24]
 8023784:	2b00      	cmp	r3, #0
 8023786:	d007      	beq.n	8023798 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023788:	4b09      	ldr	r3, [pc, #36]	@ (80237b0 <HAL_PCD_ResumeCallback+0x38>)
 802378a:	691a      	ldr	r2, [r3, #16]
 802378c:	4b08      	ldr	r3, [pc, #32]	@ (80237b0 <HAL_PCD_ResumeCallback+0x38>)
 802378e:	2106      	movs	r1, #6
 8023790:	438a      	bics	r2, r1
 8023792:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8023794:	f000 fa44 	bl	8023c20 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8023798:	687a      	ldr	r2, [r7, #4]
 802379a:	23bc      	movs	r3, #188	@ 0xbc
 802379c:	009b      	lsls	r3, r3, #2
 802379e:	58d3      	ldr	r3, [r2, r3]
 80237a0:	0018      	movs	r0, r3
 80237a2:	f7fe fd75 	bl	8022290 <USBD_LL_Resume>
}
 80237a6:	46c0      	nop			@ (mov r8, r8)
 80237a8:	46bd      	mov	sp, r7
 80237aa:	b002      	add	sp, #8
 80237ac:	bd80      	pop	{r7, pc}
 80237ae:	46c0      	nop			@ (mov r8, r8)
 80237b0:	e000ed00 	.word	0xe000ed00

080237b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80237b4:	b580      	push	{r7, lr}
 80237b6:	b082      	sub	sp, #8
 80237b8:	af00      	add	r7, sp, #0
 80237ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80237bc:	4a2d      	ldr	r2, [pc, #180]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237be:	23bc      	movs	r3, #188	@ 0xbc
 80237c0:	009b      	lsls	r3, r3, #2
 80237c2:	6879      	ldr	r1, [r7, #4]
 80237c4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80237c6:	687a      	ldr	r2, [r7, #4]
 80237c8:	23b0      	movs	r3, #176	@ 0xb0
 80237ca:	009b      	lsls	r3, r3, #2
 80237cc:	4929      	ldr	r1, [pc, #164]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237ce:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80237d0:	4b28      	ldr	r3, [pc, #160]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237d2:	4a29      	ldr	r2, [pc, #164]	@ (8023878 <USBD_LL_Init+0xc4>)
 80237d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80237d6:	4b27      	ldr	r3, [pc, #156]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237d8:	2208      	movs	r2, #8
 80237da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80237dc:	4b25      	ldr	r3, [pc, #148]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237de:	2202      	movs	r2, #2
 80237e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80237e2:	4b24      	ldr	r3, [pc, #144]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237e4:	2202      	movs	r2, #2
 80237e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80237e8:	4b22      	ldr	r3, [pc, #136]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237ea:	2200      	movs	r2, #0
 80237ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80237ee:	4b21      	ldr	r3, [pc, #132]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237f0:	2200      	movs	r2, #0
 80237f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80237f4:	4b1f      	ldr	r3, [pc, #124]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237f6:	2200      	movs	r2, #0
 80237f8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80237fa:	4b1e      	ldr	r3, [pc, #120]	@ (8023874 <USBD_LL_Init+0xc0>)
 80237fc:	0018      	movs	r0, r3
 80237fe:	f7f5 fe89 	bl	8019514 <HAL_PCD_Init>
 8023802:	1e03      	subs	r3, r0, #0
 8023804:	d001      	beq.n	802380a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8023806:	f7e9 fe33 	bl	800d470 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802380a:	687a      	ldr	r2, [r7, #4]
 802380c:	23b0      	movs	r3, #176	@ 0xb0
 802380e:	009b      	lsls	r3, r3, #2
 8023810:	58d0      	ldr	r0, [r2, r3]
 8023812:	2318      	movs	r3, #24
 8023814:	2200      	movs	r2, #0
 8023816:	2100      	movs	r1, #0
 8023818:	f7f7 fc4a 	bl	801b0b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 802381c:	687a      	ldr	r2, [r7, #4]
 802381e:	23b0      	movs	r3, #176	@ 0xb0
 8023820:	009b      	lsls	r3, r3, #2
 8023822:	58d0      	ldr	r0, [r2, r3]
 8023824:	2358      	movs	r3, #88	@ 0x58
 8023826:	2200      	movs	r2, #0
 8023828:	2180      	movs	r1, #128	@ 0x80
 802382a:	f7f7 fc41 	bl	801b0b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802382e:	687a      	ldr	r2, [r7, #4]
 8023830:	23b0      	movs	r3, #176	@ 0xb0
 8023832:	009b      	lsls	r3, r3, #2
 8023834:	58d0      	ldr	r0, [r2, r3]
 8023836:	23c0      	movs	r3, #192	@ 0xc0
 8023838:	2200      	movs	r2, #0
 802383a:	2181      	movs	r1, #129	@ 0x81
 802383c:	f7f7 fc38 	bl	801b0b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8023840:	687a      	ldr	r2, [r7, #4]
 8023842:	23b0      	movs	r3, #176	@ 0xb0
 8023844:	009b      	lsls	r3, r3, #2
 8023846:	58d0      	ldr	r0, [r2, r3]
 8023848:	2388      	movs	r3, #136	@ 0x88
 802384a:	005b      	lsls	r3, r3, #1
 802384c:	2200      	movs	r2, #0
 802384e:	2101      	movs	r1, #1
 8023850:	f7f7 fc2e 	bl	801b0b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023854:	687a      	ldr	r2, [r7, #4]
 8023856:	23b0      	movs	r3, #176	@ 0xb0
 8023858:	009b      	lsls	r3, r3, #2
 802385a:	58d0      	ldr	r0, [r2, r3]
 802385c:	2380      	movs	r3, #128	@ 0x80
 802385e:	005b      	lsls	r3, r3, #1
 8023860:	2200      	movs	r2, #0
 8023862:	2182      	movs	r1, #130	@ 0x82
 8023864:	f7f7 fc24 	bl	801b0b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8023868:	2300      	movs	r3, #0
}
 802386a:	0018      	movs	r0, r3
 802386c:	46bd      	mov	sp, r7
 802386e:	b002      	add	sp, #8
 8023870:	bd80      	pop	{r7, pc}
 8023872:	46c0      	nop			@ (mov r8, r8)
 8023874:	200032b8 	.word	0x200032b8
 8023878:	40005c00 	.word	0x40005c00

0802387c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 802387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802387e:	b085      	sub	sp, #20
 8023880:	af00      	add	r7, sp, #0
 8023882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023884:	210f      	movs	r1, #15
 8023886:	187b      	adds	r3, r7, r1
 8023888:	2200      	movs	r2, #0
 802388a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802388c:	260e      	movs	r6, #14
 802388e:	19bb      	adds	r3, r7, r6
 8023890:	2200      	movs	r2, #0
 8023892:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8023894:	687a      	ldr	r2, [r7, #4]
 8023896:	23b0      	movs	r3, #176	@ 0xb0
 8023898:	009b      	lsls	r3, r3, #2
 802389a:	58d3      	ldr	r3, [r2, r3]
 802389c:	000d      	movs	r5, r1
 802389e:	187c      	adds	r4, r7, r1
 80238a0:	0018      	movs	r0, r3
 80238a2:	f7f5 ff37 	bl	8019714 <HAL_PCD_Start>
 80238a6:	0003      	movs	r3, r0
 80238a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80238aa:	19bc      	adds	r4, r7, r6
 80238ac:	197b      	adds	r3, r7, r5
 80238ae:	781b      	ldrb	r3, [r3, #0]
 80238b0:	0018      	movs	r0, r3
 80238b2:	f000 f9bc 	bl	8023c2e <USBD_Get_USB_Status>
 80238b6:	0003      	movs	r3, r0
 80238b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238ba:	19bb      	adds	r3, r7, r6
 80238bc:	781b      	ldrb	r3, [r3, #0]
}
 80238be:	0018      	movs	r0, r3
 80238c0:	46bd      	mov	sp, r7
 80238c2:	b005      	add	sp, #20
 80238c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080238c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80238c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238c8:	b085      	sub	sp, #20
 80238ca:	af00      	add	r7, sp, #0
 80238cc:	6078      	str	r0, [r7, #4]
 80238ce:	000c      	movs	r4, r1
 80238d0:	0010      	movs	r0, r2
 80238d2:	0019      	movs	r1, r3
 80238d4:	1cfb      	adds	r3, r7, #3
 80238d6:	1c22      	adds	r2, r4, #0
 80238d8:	701a      	strb	r2, [r3, #0]
 80238da:	1cbb      	adds	r3, r7, #2
 80238dc:	1c02      	adds	r2, r0, #0
 80238de:	701a      	strb	r2, [r3, #0]
 80238e0:	003b      	movs	r3, r7
 80238e2:	1c0a      	adds	r2, r1, #0
 80238e4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80238e6:	260f      	movs	r6, #15
 80238e8:	19bb      	adds	r3, r7, r6
 80238ea:	2200      	movs	r2, #0
 80238ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80238ee:	250e      	movs	r5, #14
 80238f0:	197b      	adds	r3, r7, r5
 80238f2:	2200      	movs	r2, #0
 80238f4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80238f6:	687a      	ldr	r2, [r7, #4]
 80238f8:	23b0      	movs	r3, #176	@ 0xb0
 80238fa:	009b      	lsls	r3, r3, #2
 80238fc:	58d0      	ldr	r0, [r2, r3]
 80238fe:	19bc      	adds	r4, r7, r6
 8023900:	1cbb      	adds	r3, r7, #2
 8023902:	781d      	ldrb	r5, [r3, #0]
 8023904:	003b      	movs	r3, r7
 8023906:	881a      	ldrh	r2, [r3, #0]
 8023908:	1cfb      	adds	r3, r7, #3
 802390a:	7819      	ldrb	r1, [r3, #0]
 802390c:	002b      	movs	r3, r5
 802390e:	f7f6 f896 	bl	8019a3e <HAL_PCD_EP_Open>
 8023912:	0003      	movs	r3, r0
 8023914:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023916:	250e      	movs	r5, #14
 8023918:	197c      	adds	r4, r7, r5
 802391a:	19bb      	adds	r3, r7, r6
 802391c:	781b      	ldrb	r3, [r3, #0]
 802391e:	0018      	movs	r0, r3
 8023920:	f000 f985 	bl	8023c2e <USBD_Get_USB_Status>
 8023924:	0003      	movs	r3, r0
 8023926:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023928:	197b      	adds	r3, r7, r5
 802392a:	781b      	ldrb	r3, [r3, #0]
}
 802392c:	0018      	movs	r0, r3
 802392e:	46bd      	mov	sp, r7
 8023930:	b005      	add	sp, #20
 8023932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023934 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023936:	b085      	sub	sp, #20
 8023938:	af00      	add	r7, sp, #0
 802393a:	6078      	str	r0, [r7, #4]
 802393c:	000a      	movs	r2, r1
 802393e:	1cfb      	adds	r3, r7, #3
 8023940:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023942:	210f      	movs	r1, #15
 8023944:	187b      	adds	r3, r7, r1
 8023946:	2200      	movs	r2, #0
 8023948:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802394a:	260e      	movs	r6, #14
 802394c:	19bb      	adds	r3, r7, r6
 802394e:	2200      	movs	r2, #0
 8023950:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023952:	687a      	ldr	r2, [r7, #4]
 8023954:	23b0      	movs	r3, #176	@ 0xb0
 8023956:	009b      	lsls	r3, r3, #2
 8023958:	58d2      	ldr	r2, [r2, r3]
 802395a:	000d      	movs	r5, r1
 802395c:	187c      	adds	r4, r7, r1
 802395e:	1cfb      	adds	r3, r7, #3
 8023960:	781b      	ldrb	r3, [r3, #0]
 8023962:	0019      	movs	r1, r3
 8023964:	0010      	movs	r0, r2
 8023966:	f7f6 f8d9 	bl	8019b1c <HAL_PCD_EP_Close>
 802396a:	0003      	movs	r3, r0
 802396c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802396e:	19bc      	adds	r4, r7, r6
 8023970:	197b      	adds	r3, r7, r5
 8023972:	781b      	ldrb	r3, [r3, #0]
 8023974:	0018      	movs	r0, r3
 8023976:	f000 f95a 	bl	8023c2e <USBD_Get_USB_Status>
 802397a:	0003      	movs	r3, r0
 802397c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802397e:	19bb      	adds	r3, r7, r6
 8023980:	781b      	ldrb	r3, [r3, #0]
}
 8023982:	0018      	movs	r0, r3
 8023984:	46bd      	mov	sp, r7
 8023986:	b005      	add	sp, #20
 8023988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802398a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802398a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802398c:	b085      	sub	sp, #20
 802398e:	af00      	add	r7, sp, #0
 8023990:	6078      	str	r0, [r7, #4]
 8023992:	000a      	movs	r2, r1
 8023994:	1cfb      	adds	r3, r7, #3
 8023996:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023998:	210f      	movs	r1, #15
 802399a:	187b      	adds	r3, r7, r1
 802399c:	2200      	movs	r2, #0
 802399e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239a0:	260e      	movs	r6, #14
 80239a2:	19bb      	adds	r3, r7, r6
 80239a4:	2200      	movs	r2, #0
 80239a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80239a8:	687a      	ldr	r2, [r7, #4]
 80239aa:	23b0      	movs	r3, #176	@ 0xb0
 80239ac:	009b      	lsls	r3, r3, #2
 80239ae:	58d2      	ldr	r2, [r2, r3]
 80239b0:	000d      	movs	r5, r1
 80239b2:	187c      	adds	r4, r7, r1
 80239b4:	1cfb      	adds	r3, r7, #3
 80239b6:	781b      	ldrb	r3, [r3, #0]
 80239b8:	0019      	movs	r1, r3
 80239ba:	0010      	movs	r0, r2
 80239bc:	f7f6 f98b 	bl	8019cd6 <HAL_PCD_EP_SetStall>
 80239c0:	0003      	movs	r3, r0
 80239c2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80239c4:	19bc      	adds	r4, r7, r6
 80239c6:	197b      	adds	r3, r7, r5
 80239c8:	781b      	ldrb	r3, [r3, #0]
 80239ca:	0018      	movs	r0, r3
 80239cc:	f000 f92f 	bl	8023c2e <USBD_Get_USB_Status>
 80239d0:	0003      	movs	r3, r0
 80239d2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80239d4:	19bb      	adds	r3, r7, r6
 80239d6:	781b      	ldrb	r3, [r3, #0]
}
 80239d8:	0018      	movs	r0, r3
 80239da:	46bd      	mov	sp, r7
 80239dc:	b005      	add	sp, #20
 80239de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080239e0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80239e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239e2:	b085      	sub	sp, #20
 80239e4:	af00      	add	r7, sp, #0
 80239e6:	6078      	str	r0, [r7, #4]
 80239e8:	000a      	movs	r2, r1
 80239ea:	1cfb      	adds	r3, r7, #3
 80239ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80239ee:	210f      	movs	r1, #15
 80239f0:	187b      	adds	r3, r7, r1
 80239f2:	2200      	movs	r2, #0
 80239f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239f6:	260e      	movs	r6, #14
 80239f8:	19bb      	adds	r3, r7, r6
 80239fa:	2200      	movs	r2, #0
 80239fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80239fe:	687a      	ldr	r2, [r7, #4]
 8023a00:	23b0      	movs	r3, #176	@ 0xb0
 8023a02:	009b      	lsls	r3, r3, #2
 8023a04:	58d2      	ldr	r2, [r2, r3]
 8023a06:	000d      	movs	r5, r1
 8023a08:	187c      	adds	r4, r7, r1
 8023a0a:	1cfb      	adds	r3, r7, #3
 8023a0c:	781b      	ldrb	r3, [r3, #0]
 8023a0e:	0019      	movs	r1, r3
 8023a10:	0010      	movs	r0, r2
 8023a12:	f7f6 f9bc 	bl	8019d8e <HAL_PCD_EP_ClrStall>
 8023a16:	0003      	movs	r3, r0
 8023a18:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023a1a:	19bc      	adds	r4, r7, r6
 8023a1c:	197b      	adds	r3, r7, r5
 8023a1e:	781b      	ldrb	r3, [r3, #0]
 8023a20:	0018      	movs	r0, r3
 8023a22:	f000 f904 	bl	8023c2e <USBD_Get_USB_Status>
 8023a26:	0003      	movs	r3, r0
 8023a28:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a2a:	19bb      	adds	r3, r7, r6
 8023a2c:	781b      	ldrb	r3, [r3, #0]
}
 8023a2e:	0018      	movs	r0, r3
 8023a30:	46bd      	mov	sp, r7
 8023a32:	b005      	add	sp, #20
 8023a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a36 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023a36:	b580      	push	{r7, lr}
 8023a38:	b084      	sub	sp, #16
 8023a3a:	af00      	add	r7, sp, #0
 8023a3c:	6078      	str	r0, [r7, #4]
 8023a3e:	000a      	movs	r2, r1
 8023a40:	1cfb      	adds	r3, r7, #3
 8023a42:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023a44:	687a      	ldr	r2, [r7, #4]
 8023a46:	23b0      	movs	r3, #176	@ 0xb0
 8023a48:	009b      	lsls	r3, r3, #2
 8023a4a:	58d3      	ldr	r3, [r2, r3]
 8023a4c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8023a4e:	1cfb      	adds	r3, r7, #3
 8023a50:	781b      	ldrb	r3, [r3, #0]
 8023a52:	b25b      	sxtb	r3, r3
 8023a54:	2b00      	cmp	r3, #0
 8023a56:	da0d      	bge.n	8023a74 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023a58:	1cfb      	adds	r3, r7, #3
 8023a5a:	781b      	ldrb	r3, [r3, #0]
 8023a5c:	227f      	movs	r2, #127	@ 0x7f
 8023a5e:	4013      	ands	r3, r2
 8023a60:	68f9      	ldr	r1, [r7, #12]
 8023a62:	1c5a      	adds	r2, r3, #1
 8023a64:	0013      	movs	r3, r2
 8023a66:	009b      	lsls	r3, r3, #2
 8023a68:	189b      	adds	r3, r3, r2
 8023a6a:	00db      	lsls	r3, r3, #3
 8023a6c:	18cb      	adds	r3, r1, r3
 8023a6e:	3302      	adds	r3, #2
 8023a70:	781b      	ldrb	r3, [r3, #0]
 8023a72:	e00d      	b.n	8023a90 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023a74:	1cfb      	adds	r3, r7, #3
 8023a76:	781b      	ldrb	r3, [r3, #0]
 8023a78:	227f      	movs	r2, #127	@ 0x7f
 8023a7a:	401a      	ands	r2, r3
 8023a7c:	68f8      	ldr	r0, [r7, #12]
 8023a7e:	23b5      	movs	r3, #181	@ 0xb5
 8023a80:	0059      	lsls	r1, r3, #1
 8023a82:	0013      	movs	r3, r2
 8023a84:	009b      	lsls	r3, r3, #2
 8023a86:	189b      	adds	r3, r3, r2
 8023a88:	00db      	lsls	r3, r3, #3
 8023a8a:	18c3      	adds	r3, r0, r3
 8023a8c:	185b      	adds	r3, r3, r1
 8023a8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023a90:	0018      	movs	r0, r3
 8023a92:	46bd      	mov	sp, r7
 8023a94:	b004      	add	sp, #16
 8023a96:	bd80      	pop	{r7, pc}

08023a98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8023a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a9a:	b085      	sub	sp, #20
 8023a9c:	af00      	add	r7, sp, #0
 8023a9e:	6078      	str	r0, [r7, #4]
 8023aa0:	000a      	movs	r2, r1
 8023aa2:	1cfb      	adds	r3, r7, #3
 8023aa4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023aa6:	210f      	movs	r1, #15
 8023aa8:	187b      	adds	r3, r7, r1
 8023aaa:	2200      	movs	r2, #0
 8023aac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023aae:	260e      	movs	r6, #14
 8023ab0:	19bb      	adds	r3, r7, r6
 8023ab2:	2200      	movs	r2, #0
 8023ab4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023ab6:	687a      	ldr	r2, [r7, #4]
 8023ab8:	23b0      	movs	r3, #176	@ 0xb0
 8023aba:	009b      	lsls	r3, r3, #2
 8023abc:	58d2      	ldr	r2, [r2, r3]
 8023abe:	000d      	movs	r5, r1
 8023ac0:	187c      	adds	r4, r7, r1
 8023ac2:	1cfb      	adds	r3, r7, #3
 8023ac4:	781b      	ldrb	r3, [r3, #0]
 8023ac6:	0019      	movs	r1, r3
 8023ac8:	0010      	movs	r0, r2
 8023aca:	f7f5 ff8d 	bl	80199e8 <HAL_PCD_SetAddress>
 8023ace:	0003      	movs	r3, r0
 8023ad0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023ad2:	19bc      	adds	r4, r7, r6
 8023ad4:	197b      	adds	r3, r7, r5
 8023ad6:	781b      	ldrb	r3, [r3, #0]
 8023ad8:	0018      	movs	r0, r3
 8023ada:	f000 f8a8 	bl	8023c2e <USBD_Get_USB_Status>
 8023ade:	0003      	movs	r3, r0
 8023ae0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023ae2:	19bb      	adds	r3, r7, r6
 8023ae4:	781b      	ldrb	r3, [r3, #0]
}
 8023ae6:	0018      	movs	r0, r3
 8023ae8:	46bd      	mov	sp, r7
 8023aea:	b005      	add	sp, #20
 8023aec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023aee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023af0:	b087      	sub	sp, #28
 8023af2:	af00      	add	r7, sp, #0
 8023af4:	60f8      	str	r0, [r7, #12]
 8023af6:	0008      	movs	r0, r1
 8023af8:	607a      	str	r2, [r7, #4]
 8023afa:	0019      	movs	r1, r3
 8023afc:	230b      	movs	r3, #11
 8023afe:	18fb      	adds	r3, r7, r3
 8023b00:	1c02      	adds	r2, r0, #0
 8023b02:	701a      	strb	r2, [r3, #0]
 8023b04:	2408      	movs	r4, #8
 8023b06:	193b      	adds	r3, r7, r4
 8023b08:	1c0a      	adds	r2, r1, #0
 8023b0a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023b0c:	2117      	movs	r1, #23
 8023b0e:	187b      	adds	r3, r7, r1
 8023b10:	2200      	movs	r2, #0
 8023b12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023b14:	2516      	movs	r5, #22
 8023b16:	197b      	adds	r3, r7, r5
 8023b18:	2200      	movs	r2, #0
 8023b1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023b1c:	68fa      	ldr	r2, [r7, #12]
 8023b1e:	23b0      	movs	r3, #176	@ 0xb0
 8023b20:	009b      	lsls	r3, r3, #2
 8023b22:	58d0      	ldr	r0, [r2, r3]
 8023b24:	193b      	adds	r3, r7, r4
 8023b26:	881d      	ldrh	r5, [r3, #0]
 8023b28:	000e      	movs	r6, r1
 8023b2a:	187c      	adds	r4, r7, r1
 8023b2c:	687a      	ldr	r2, [r7, #4]
 8023b2e:	230b      	movs	r3, #11
 8023b30:	18fb      	adds	r3, r7, r3
 8023b32:	7819      	ldrb	r1, [r3, #0]
 8023b34:	002b      	movs	r3, r5
 8023b36:	f7f6 f892 	bl	8019c5e <HAL_PCD_EP_Transmit>
 8023b3a:	0003      	movs	r3, r0
 8023b3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023b3e:	2516      	movs	r5, #22
 8023b40:	197c      	adds	r4, r7, r5
 8023b42:	19bb      	adds	r3, r7, r6
 8023b44:	781b      	ldrb	r3, [r3, #0]
 8023b46:	0018      	movs	r0, r3
 8023b48:	f000 f871 	bl	8023c2e <USBD_Get_USB_Status>
 8023b4c:	0003      	movs	r3, r0
 8023b4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023b50:	197b      	adds	r3, r7, r5
 8023b52:	781b      	ldrb	r3, [r3, #0]
}
 8023b54:	0018      	movs	r0, r3
 8023b56:	46bd      	mov	sp, r7
 8023b58:	b007      	add	sp, #28
 8023b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023b5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b5e:	b087      	sub	sp, #28
 8023b60:	af00      	add	r7, sp, #0
 8023b62:	60f8      	str	r0, [r7, #12]
 8023b64:	0008      	movs	r0, r1
 8023b66:	607a      	str	r2, [r7, #4]
 8023b68:	0019      	movs	r1, r3
 8023b6a:	230b      	movs	r3, #11
 8023b6c:	18fb      	adds	r3, r7, r3
 8023b6e:	1c02      	adds	r2, r0, #0
 8023b70:	701a      	strb	r2, [r3, #0]
 8023b72:	2408      	movs	r4, #8
 8023b74:	193b      	adds	r3, r7, r4
 8023b76:	1c0a      	adds	r2, r1, #0
 8023b78:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023b7a:	2117      	movs	r1, #23
 8023b7c:	187b      	adds	r3, r7, r1
 8023b7e:	2200      	movs	r2, #0
 8023b80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023b82:	2516      	movs	r5, #22
 8023b84:	197b      	adds	r3, r7, r5
 8023b86:	2200      	movs	r2, #0
 8023b88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023b8a:	68fa      	ldr	r2, [r7, #12]
 8023b8c:	23b0      	movs	r3, #176	@ 0xb0
 8023b8e:	009b      	lsls	r3, r3, #2
 8023b90:	58d0      	ldr	r0, [r2, r3]
 8023b92:	193b      	adds	r3, r7, r4
 8023b94:	881d      	ldrh	r5, [r3, #0]
 8023b96:	000e      	movs	r6, r1
 8023b98:	187c      	adds	r4, r7, r1
 8023b9a:	687a      	ldr	r2, [r7, #4]
 8023b9c:	230b      	movs	r3, #11
 8023b9e:	18fb      	adds	r3, r7, r3
 8023ba0:	7819      	ldrb	r1, [r3, #0]
 8023ba2:	002b      	movs	r3, r5
 8023ba4:	f7f6 f80b 	bl	8019bbe <HAL_PCD_EP_Receive>
 8023ba8:	0003      	movs	r3, r0
 8023baa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023bac:	2516      	movs	r5, #22
 8023bae:	197c      	adds	r4, r7, r5
 8023bb0:	19bb      	adds	r3, r7, r6
 8023bb2:	781b      	ldrb	r3, [r3, #0]
 8023bb4:	0018      	movs	r0, r3
 8023bb6:	f000 f83a 	bl	8023c2e <USBD_Get_USB_Status>
 8023bba:	0003      	movs	r3, r0
 8023bbc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023bbe:	197b      	adds	r3, r7, r5
 8023bc0:	781b      	ldrb	r3, [r3, #0]
}
 8023bc2:	0018      	movs	r0, r3
 8023bc4:	46bd      	mov	sp, r7
 8023bc6:	b007      	add	sp, #28
 8023bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023bca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023bca:	b580      	push	{r7, lr}
 8023bcc:	b082      	sub	sp, #8
 8023bce:	af00      	add	r7, sp, #0
 8023bd0:	6078      	str	r0, [r7, #4]
 8023bd2:	000a      	movs	r2, r1
 8023bd4:	1cfb      	adds	r3, r7, #3
 8023bd6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023bd8:	687a      	ldr	r2, [r7, #4]
 8023bda:	23b0      	movs	r3, #176	@ 0xb0
 8023bdc:	009b      	lsls	r3, r3, #2
 8023bde:	58d2      	ldr	r2, [r2, r3]
 8023be0:	1cfb      	adds	r3, r7, #3
 8023be2:	781b      	ldrb	r3, [r3, #0]
 8023be4:	0019      	movs	r1, r3
 8023be6:	0010      	movs	r0, r2
 8023be8:	f7f6 f820 	bl	8019c2c <HAL_PCD_EP_GetRxCount>
 8023bec:	0003      	movs	r3, r0
}
 8023bee:	0018      	movs	r0, r3
 8023bf0:	46bd      	mov	sp, r7
 8023bf2:	b002      	add	sp, #8
 8023bf4:	bd80      	pop	{r7, pc}
	...

08023bf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023bf8:	b580      	push	{r7, lr}
 8023bfa:	b082      	sub	sp, #8
 8023bfc:	af00      	add	r7, sp, #0
 8023bfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023c00:	4b02      	ldr	r3, [pc, #8]	@ (8023c0c <USBD_static_malloc+0x14>)
}
 8023c02:	0018      	movs	r0, r3
 8023c04:	46bd      	mov	sp, r7
 8023c06:	b002      	add	sp, #8
 8023c08:	bd80      	pop	{r7, pc}
 8023c0a:	46c0      	nop			@ (mov r8, r8)
 8023c0c:	200035ac 	.word	0x200035ac

08023c10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023c10:	b580      	push	{r7, lr}
 8023c12:	b082      	sub	sp, #8
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	6078      	str	r0, [r7, #4]

}
 8023c18:	46c0      	nop			@ (mov r8, r8)
 8023c1a:	46bd      	mov	sp, r7
 8023c1c:	b002      	add	sp, #8
 8023c1e:	bd80      	pop	{r7, pc}

08023c20 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8023c20:	b580      	push	{r7, lr}
 8023c22:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023c24:	f7e9 fab8 	bl	800d198 <SystemClock_Config>
}
 8023c28:	46c0      	nop			@ (mov r8, r8)
 8023c2a:	46bd      	mov	sp, r7
 8023c2c:	bd80      	pop	{r7, pc}

08023c2e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023c2e:	b580      	push	{r7, lr}
 8023c30:	b084      	sub	sp, #16
 8023c32:	af00      	add	r7, sp, #0
 8023c34:	0002      	movs	r2, r0
 8023c36:	1dfb      	adds	r3, r7, #7
 8023c38:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023c3a:	230f      	movs	r3, #15
 8023c3c:	18fb      	adds	r3, r7, r3
 8023c3e:	2200      	movs	r2, #0
 8023c40:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8023c42:	1dfb      	adds	r3, r7, #7
 8023c44:	781b      	ldrb	r3, [r3, #0]
 8023c46:	2b03      	cmp	r3, #3
 8023c48:	d017      	beq.n	8023c7a <USBD_Get_USB_Status+0x4c>
 8023c4a:	dc1b      	bgt.n	8023c84 <USBD_Get_USB_Status+0x56>
 8023c4c:	2b02      	cmp	r3, #2
 8023c4e:	d00f      	beq.n	8023c70 <USBD_Get_USB_Status+0x42>
 8023c50:	dc18      	bgt.n	8023c84 <USBD_Get_USB_Status+0x56>
 8023c52:	2b00      	cmp	r3, #0
 8023c54:	d002      	beq.n	8023c5c <USBD_Get_USB_Status+0x2e>
 8023c56:	2b01      	cmp	r3, #1
 8023c58:	d005      	beq.n	8023c66 <USBD_Get_USB_Status+0x38>
 8023c5a:	e013      	b.n	8023c84 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023c5c:	230f      	movs	r3, #15
 8023c5e:	18fb      	adds	r3, r7, r3
 8023c60:	2200      	movs	r2, #0
 8023c62:	701a      	strb	r2, [r3, #0]
    break;
 8023c64:	e013      	b.n	8023c8e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023c66:	230f      	movs	r3, #15
 8023c68:	18fb      	adds	r3, r7, r3
 8023c6a:	2202      	movs	r2, #2
 8023c6c:	701a      	strb	r2, [r3, #0]
    break;
 8023c6e:	e00e      	b.n	8023c8e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023c70:	230f      	movs	r3, #15
 8023c72:	18fb      	adds	r3, r7, r3
 8023c74:	2201      	movs	r2, #1
 8023c76:	701a      	strb	r2, [r3, #0]
    break;
 8023c78:	e009      	b.n	8023c8e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023c7a:	230f      	movs	r3, #15
 8023c7c:	18fb      	adds	r3, r7, r3
 8023c7e:	2202      	movs	r2, #2
 8023c80:	701a      	strb	r2, [r3, #0]
    break;
 8023c82:	e004      	b.n	8023c8e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023c84:	230f      	movs	r3, #15
 8023c86:	18fb      	adds	r3, r7, r3
 8023c88:	2202      	movs	r2, #2
 8023c8a:	701a      	strb	r2, [r3, #0]
    break;
 8023c8c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8023c8e:	230f      	movs	r3, #15
 8023c90:	18fb      	adds	r3, r7, r3
 8023c92:	781b      	ldrb	r3, [r3, #0]
}
 8023c94:	0018      	movs	r0, r3
 8023c96:	46bd      	mov	sp, r7
 8023c98:	b004      	add	sp, #16
 8023c9a:	bd80      	pop	{r7, pc}

08023c9c <arm_cfft_radix4by2_q31>:
 8023c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c9e:	465f      	mov	r7, fp
 8023ca0:	4656      	mov	r6, sl
 8023ca2:	464d      	mov	r5, r9
 8023ca4:	4644      	mov	r4, r8
 8023ca6:	000b      	movs	r3, r1
 8023ca8:	b4f0      	push	{r4, r5, r6, r7}
 8023caa:	085b      	lsrs	r3, r3, #1
 8023cac:	b08f      	sub	sp, #60	@ 0x3c
 8023cae:	910a      	str	r1, [sp, #40]	@ 0x28
 8023cb0:	0007      	movs	r7, r0
 8023cb2:	9009      	str	r0, [sp, #36]	@ 0x24
 8023cb4:	0011      	movs	r1, r2
 8023cb6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023cb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d100      	bne.n	8023cc0 <arm_cfft_radix4by2_q31+0x24>
 8023cbe:	e0a0      	b.n	8023e02 <arm_cfft_radix4by2_q31+0x166>
 8023cc0:	0002      	movs	r2, r0
 8023cc2:	00db      	lsls	r3, r3, #3
 8023cc4:	3204      	adds	r2, #4
 8023cc6:	4691      	mov	r9, r2
 8023cc8:	4698      	mov	r8, r3
 8023cca:	000a      	movs	r2, r1
 8023ccc:	464e      	mov	r6, r9
 8023cce:	4442      	add	r2, r8
 8023cd0:	4699      	mov	r9, r3
 8023cd2:	4688      	mov	r8, r1
 8023cd4:	9208      	str	r2, [sp, #32]
 8023cd6:	900d      	str	r0, [sp, #52]	@ 0x34
 8023cd8:	4643      	mov	r3, r8
 8023cda:	681b      	ldr	r3, [r3, #0]
 8023cdc:	469b      	mov	fp, r3
 8023cde:	4643      	mov	r3, r8
 8023ce0:	685b      	ldr	r3, [r3, #4]
 8023ce2:	469a      	mov	sl, r3
 8023ce4:	683b      	ldr	r3, [r7, #0]
 8023ce6:	109c      	asrs	r4, r3, #2
 8023ce8:	464b      	mov	r3, r9
 8023cea:	58fb      	ldr	r3, [r7, r3]
 8023cec:	109a      	asrs	r2, r3, #2
 8023cee:	18a3      	adds	r3, r4, r2
 8023cf0:	603b      	str	r3, [r7, #0]
 8023cf2:	6833      	ldr	r3, [r6, #0]
 8023cf4:	1aa4      	subs	r4, r4, r2
 8023cf6:	109d      	asrs	r5, r3, #2
 8023cf8:	464b      	mov	r3, r9
 8023cfa:	58f3      	ldr	r3, [r6, r3]
 8023cfc:	17e2      	asrs	r2, r4, #31
 8023cfe:	109b      	asrs	r3, r3, #2
 8023d00:	18e9      	adds	r1, r5, r3
 8023d02:	6031      	str	r1, [r6, #0]
 8023d04:	0011      	movs	r1, r2
 8023d06:	465a      	mov	r2, fp
 8023d08:	17d2      	asrs	r2, r2, #31
 8023d0a:	0010      	movs	r0, r2
 8023d0c:	4652      	mov	r2, sl
 8023d0e:	1aed      	subs	r5, r5, r3
 8023d10:	17eb      	asrs	r3, r5, #31
 8023d12:	17d2      	asrs	r2, r2, #31
 8023d14:	9307      	str	r3, [sp, #28]
 8023d16:	9204      	str	r2, [sp, #16]
 8023d18:	0003      	movs	r3, r0
 8023d1a:	465a      	mov	r2, fp
 8023d1c:	9006      	str	r0, [sp, #24]
 8023d1e:	0020      	movs	r0, r4
 8023d20:	9105      	str	r1, [sp, #20]
 8023d22:	f7dc fc4d 	bl	80005c0 <__aeabi_lmul>
 8023d26:	2280      	movs	r2, #128	@ 0x80
 8023d28:	2300      	movs	r3, #0
 8023d2a:	0612      	lsls	r2, r2, #24
 8023d2c:	1880      	adds	r0, r0, r2
 8023d2e:	4159      	adcs	r1, r3
 8023d30:	2300      	movs	r3, #0
 8023d32:	9101      	str	r1, [sp, #4]
 8023d34:	9300      	str	r3, [sp, #0]
 8023d36:	4652      	mov	r2, sl
 8023d38:	9b04      	ldr	r3, [sp, #16]
 8023d3a:	0028      	movs	r0, r5
 8023d3c:	17e9      	asrs	r1, r5, #31
 8023d3e:	f7dc fc3f 	bl	80005c0 <__aeabi_lmul>
 8023d42:	9a00      	ldr	r2, [sp, #0]
 8023d44:	9b01      	ldr	r3, [sp, #4]
 8023d46:	1880      	adds	r0, r0, r2
 8023d48:	4159      	adcs	r1, r3
 8023d4a:	2280      	movs	r2, #128	@ 0x80
 8023d4c:	2300      	movs	r3, #0
 8023d4e:	0612      	lsls	r2, r2, #24
 8023d50:	1880      	adds	r0, r0, r2
 8023d52:	4159      	adcs	r1, r3
 8023d54:	464a      	mov	r2, r9
 8023d56:	004b      	lsls	r3, r1, #1
 8023d58:	50bb      	str	r3, [r7, r2]
 8023d5a:	4658      	mov	r0, fp
 8023d5c:	002a      	movs	r2, r5
 8023d5e:	9b07      	ldr	r3, [sp, #28]
 8023d60:	9906      	ldr	r1, [sp, #24]
 8023d62:	f7dc fc2d 	bl	80005c0 <__aeabi_lmul>
 8023d66:	2280      	movs	r2, #128	@ 0x80
 8023d68:	2300      	movs	r3, #0
 8023d6a:	0612      	lsls	r2, r2, #24
 8023d6c:	1880      	adds	r0, r0, r2
 8023d6e:	4159      	adcs	r1, r3
 8023d70:	2000      	movs	r0, #0
 8023d72:	9103      	str	r1, [sp, #12]
 8023d74:	9002      	str	r0, [sp, #8]
 8023d76:	4652      	mov	r2, sl
 8023d78:	9b04      	ldr	r3, [sp, #16]
 8023d7a:	0020      	movs	r0, r4
 8023d7c:	9905      	ldr	r1, [sp, #20]
 8023d7e:	f7dc fc1f 	bl	80005c0 <__aeabi_lmul>
 8023d82:	9a02      	ldr	r2, [sp, #8]
 8023d84:	9b03      	ldr	r3, [sp, #12]
 8023d86:	1a12      	subs	r2, r2, r0
 8023d88:	418b      	sbcs	r3, r1
 8023d8a:	2080      	movs	r0, #128	@ 0x80
 8023d8c:	2100      	movs	r1, #0
 8023d8e:	0600      	lsls	r0, r0, #24
 8023d90:	1812      	adds	r2, r2, r0
 8023d92:	414b      	adcs	r3, r1
 8023d94:	464a      	mov	r2, r9
 8023d96:	005b      	lsls	r3, r3, #1
 8023d98:	50b3      	str	r3, [r6, r2]
 8023d9a:	2308      	movs	r3, #8
 8023d9c:	469c      	mov	ip, r3
 8023d9e:	9b08      	ldr	r3, [sp, #32]
 8023da0:	44e0      	add	r8, ip
 8023da2:	3708      	adds	r7, #8
 8023da4:	3608      	adds	r6, #8
 8023da6:	4598      	cmp	r8, r3
 8023da8:	d196      	bne.n	8023cd8 <arm_cfft_radix4by2_q31+0x3c>
 8023daa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023dac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023dae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023db0:	2302      	movs	r3, #2
 8023db2:	003a      	movs	r2, r7
 8023db4:	0029      	movs	r1, r5
 8023db6:	0020      	movs	r0, r4
 8023db8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023dba:	f000 f957 	bl	802406c <arm_radix4_butterfly_q31>
 8023dbe:	46a4      	mov	ip, r4
 8023dc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023dc2:	2302      	movs	r3, #2
 8023dc4:	0088      	lsls	r0, r1, #2
 8023dc6:	4460      	add	r0, ip
 8023dc8:	003a      	movs	r2, r7
 8023dca:	0029      	movs	r1, r5
 8023dcc:	f000 f94e 	bl	802406c <arm_radix4_butterfly_q31>
 8023dd0:	46a4      	mov	ip, r4
 8023dd2:	0128      	lsls	r0, r5, #4
 8023dd4:	4460      	add	r0, ip
 8023dd6:	6833      	ldr	r3, [r6, #0]
 8023dd8:	005b      	lsls	r3, r3, #1
 8023dda:	6033      	str	r3, [r6, #0]
 8023ddc:	6873      	ldr	r3, [r6, #4]
 8023dde:	005b      	lsls	r3, r3, #1
 8023de0:	6073      	str	r3, [r6, #4]
 8023de2:	68b3      	ldr	r3, [r6, #8]
 8023de4:	005b      	lsls	r3, r3, #1
 8023de6:	60b3      	str	r3, [r6, #8]
 8023de8:	68f3      	ldr	r3, [r6, #12]
 8023dea:	005b      	lsls	r3, r3, #1
 8023dec:	60f3      	str	r3, [r6, #12]
 8023dee:	3610      	adds	r6, #16
 8023df0:	42b0      	cmp	r0, r6
 8023df2:	d1f0      	bne.n	8023dd6 <arm_cfft_radix4by2_q31+0x13a>
 8023df4:	b00f      	add	sp, #60	@ 0x3c
 8023df6:	bc3c      	pop	{r2, r3, r4, r5}
 8023df8:	4690      	mov	r8, r2
 8023dfa:	4699      	mov	r9, r3
 8023dfc:	46a2      	mov	sl, r4
 8023dfe:	46ab      	mov	fp, r5
 8023e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e02:	2302      	movs	r3, #2
 8023e04:	2100      	movs	r1, #0
 8023e06:	0015      	movs	r5, r2
 8023e08:	f000 f930 	bl	802406c <arm_radix4_butterfly_q31>
 8023e0c:	46bc      	mov	ip, r7
 8023e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e10:	002a      	movs	r2, r5
 8023e12:	0098      	lsls	r0, r3, #2
 8023e14:	4460      	add	r0, ip
 8023e16:	2302      	movs	r3, #2
 8023e18:	2100      	movs	r1, #0
 8023e1a:	f000 f927 	bl	802406c <arm_radix4_butterfly_q31>
 8023e1e:	e7e9      	b.n	8023df4 <arm_cfft_radix4by2_q31+0x158>

08023e20 <arm_cfft_radix4by2_inverse_q31>:
 8023e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e22:	465f      	mov	r7, fp
 8023e24:	4656      	mov	r6, sl
 8023e26:	464d      	mov	r5, r9
 8023e28:	4644      	mov	r4, r8
 8023e2a:	000b      	movs	r3, r1
 8023e2c:	b4f0      	push	{r4, r5, r6, r7}
 8023e2e:	085b      	lsrs	r3, r3, #1
 8023e30:	b08f      	sub	sp, #60	@ 0x3c
 8023e32:	910a      	str	r1, [sp, #40]	@ 0x28
 8023e34:	0007      	movs	r7, r0
 8023e36:	9009      	str	r0, [sp, #36]	@ 0x24
 8023e38:	0011      	movs	r1, r2
 8023e3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023e3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8023e3e:	2b00      	cmp	r3, #0
 8023e40:	d100      	bne.n	8023e44 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023e42:	e0a0      	b.n	8023f86 <arm_cfft_radix4by2_inverse_q31+0x166>
 8023e44:	0002      	movs	r2, r0
 8023e46:	00db      	lsls	r3, r3, #3
 8023e48:	3204      	adds	r2, #4
 8023e4a:	4691      	mov	r9, r2
 8023e4c:	4698      	mov	r8, r3
 8023e4e:	000a      	movs	r2, r1
 8023e50:	464e      	mov	r6, r9
 8023e52:	4442      	add	r2, r8
 8023e54:	4699      	mov	r9, r3
 8023e56:	4688      	mov	r8, r1
 8023e58:	9208      	str	r2, [sp, #32]
 8023e5a:	900d      	str	r0, [sp, #52]	@ 0x34
 8023e5c:	4643      	mov	r3, r8
 8023e5e:	681b      	ldr	r3, [r3, #0]
 8023e60:	469b      	mov	fp, r3
 8023e62:	4643      	mov	r3, r8
 8023e64:	685b      	ldr	r3, [r3, #4]
 8023e66:	469a      	mov	sl, r3
 8023e68:	683b      	ldr	r3, [r7, #0]
 8023e6a:	109c      	asrs	r4, r3, #2
 8023e6c:	464b      	mov	r3, r9
 8023e6e:	58fb      	ldr	r3, [r7, r3]
 8023e70:	109a      	asrs	r2, r3, #2
 8023e72:	18a3      	adds	r3, r4, r2
 8023e74:	603b      	str	r3, [r7, #0]
 8023e76:	6833      	ldr	r3, [r6, #0]
 8023e78:	1aa4      	subs	r4, r4, r2
 8023e7a:	109d      	asrs	r5, r3, #2
 8023e7c:	464b      	mov	r3, r9
 8023e7e:	58f3      	ldr	r3, [r6, r3]
 8023e80:	17e2      	asrs	r2, r4, #31
 8023e82:	109b      	asrs	r3, r3, #2
 8023e84:	18e9      	adds	r1, r5, r3
 8023e86:	6031      	str	r1, [r6, #0]
 8023e88:	0011      	movs	r1, r2
 8023e8a:	465a      	mov	r2, fp
 8023e8c:	17d2      	asrs	r2, r2, #31
 8023e8e:	0010      	movs	r0, r2
 8023e90:	4652      	mov	r2, sl
 8023e92:	1aed      	subs	r5, r5, r3
 8023e94:	17eb      	asrs	r3, r5, #31
 8023e96:	17d2      	asrs	r2, r2, #31
 8023e98:	9307      	str	r3, [sp, #28]
 8023e9a:	9204      	str	r2, [sp, #16]
 8023e9c:	0003      	movs	r3, r0
 8023e9e:	465a      	mov	r2, fp
 8023ea0:	9006      	str	r0, [sp, #24]
 8023ea2:	0020      	movs	r0, r4
 8023ea4:	9105      	str	r1, [sp, #20]
 8023ea6:	f7dc fb8b 	bl	80005c0 <__aeabi_lmul>
 8023eaa:	2280      	movs	r2, #128	@ 0x80
 8023eac:	2300      	movs	r3, #0
 8023eae:	0612      	lsls	r2, r2, #24
 8023eb0:	1880      	adds	r0, r0, r2
 8023eb2:	4159      	adcs	r1, r3
 8023eb4:	2300      	movs	r3, #0
 8023eb6:	9101      	str	r1, [sp, #4]
 8023eb8:	9300      	str	r3, [sp, #0]
 8023eba:	4652      	mov	r2, sl
 8023ebc:	9b04      	ldr	r3, [sp, #16]
 8023ebe:	0028      	movs	r0, r5
 8023ec0:	17e9      	asrs	r1, r5, #31
 8023ec2:	f7dc fb7d 	bl	80005c0 <__aeabi_lmul>
 8023ec6:	9a00      	ldr	r2, [sp, #0]
 8023ec8:	9b01      	ldr	r3, [sp, #4]
 8023eca:	1a12      	subs	r2, r2, r0
 8023ecc:	418b      	sbcs	r3, r1
 8023ece:	2080      	movs	r0, #128	@ 0x80
 8023ed0:	2100      	movs	r1, #0
 8023ed2:	0600      	lsls	r0, r0, #24
 8023ed4:	1812      	adds	r2, r2, r0
 8023ed6:	414b      	adcs	r3, r1
 8023ed8:	464a      	mov	r2, r9
 8023eda:	005b      	lsls	r3, r3, #1
 8023edc:	50bb      	str	r3, [r7, r2]
 8023ede:	4658      	mov	r0, fp
 8023ee0:	002a      	movs	r2, r5
 8023ee2:	9b07      	ldr	r3, [sp, #28]
 8023ee4:	9906      	ldr	r1, [sp, #24]
 8023ee6:	f7dc fb6b 	bl	80005c0 <__aeabi_lmul>
 8023eea:	2280      	movs	r2, #128	@ 0x80
 8023eec:	2300      	movs	r3, #0
 8023eee:	0612      	lsls	r2, r2, #24
 8023ef0:	1880      	adds	r0, r0, r2
 8023ef2:	4159      	adcs	r1, r3
 8023ef4:	2000      	movs	r0, #0
 8023ef6:	9103      	str	r1, [sp, #12]
 8023ef8:	9002      	str	r0, [sp, #8]
 8023efa:	4652      	mov	r2, sl
 8023efc:	9b04      	ldr	r3, [sp, #16]
 8023efe:	0020      	movs	r0, r4
 8023f00:	9905      	ldr	r1, [sp, #20]
 8023f02:	f7dc fb5d 	bl	80005c0 <__aeabi_lmul>
 8023f06:	9b02      	ldr	r3, [sp, #8]
 8023f08:	9c03      	ldr	r4, [sp, #12]
 8023f0a:	18c0      	adds	r0, r0, r3
 8023f0c:	4161      	adcs	r1, r4
 8023f0e:	2380      	movs	r3, #128	@ 0x80
 8023f10:	2400      	movs	r4, #0
 8023f12:	061b      	lsls	r3, r3, #24
 8023f14:	18c0      	adds	r0, r0, r3
 8023f16:	4161      	adcs	r1, r4
 8023f18:	464a      	mov	r2, r9
 8023f1a:	004b      	lsls	r3, r1, #1
 8023f1c:	50b3      	str	r3, [r6, r2]
 8023f1e:	2308      	movs	r3, #8
 8023f20:	469c      	mov	ip, r3
 8023f22:	9b08      	ldr	r3, [sp, #32]
 8023f24:	44e0      	add	r8, ip
 8023f26:	3708      	adds	r7, #8
 8023f28:	3608      	adds	r6, #8
 8023f2a:	4598      	cmp	r8, r3
 8023f2c:	d196      	bne.n	8023e5c <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023f2e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023f30:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023f32:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023f34:	2302      	movs	r3, #2
 8023f36:	003a      	movs	r2, r7
 8023f38:	0029      	movs	r1, r5
 8023f3a:	0020      	movs	r0, r4
 8023f3c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023f3e:	f000 fb3b 	bl	80245b8 <arm_radix4_butterfly_inverse_q31>
 8023f42:	46a4      	mov	ip, r4
 8023f44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023f46:	2302      	movs	r3, #2
 8023f48:	0088      	lsls	r0, r1, #2
 8023f4a:	4460      	add	r0, ip
 8023f4c:	003a      	movs	r2, r7
 8023f4e:	0029      	movs	r1, r5
 8023f50:	f000 fb32 	bl	80245b8 <arm_radix4_butterfly_inverse_q31>
 8023f54:	46a4      	mov	ip, r4
 8023f56:	0128      	lsls	r0, r5, #4
 8023f58:	4460      	add	r0, ip
 8023f5a:	6833      	ldr	r3, [r6, #0]
 8023f5c:	005b      	lsls	r3, r3, #1
 8023f5e:	6033      	str	r3, [r6, #0]
 8023f60:	6873      	ldr	r3, [r6, #4]
 8023f62:	005b      	lsls	r3, r3, #1
 8023f64:	6073      	str	r3, [r6, #4]
 8023f66:	68b3      	ldr	r3, [r6, #8]
 8023f68:	005b      	lsls	r3, r3, #1
 8023f6a:	60b3      	str	r3, [r6, #8]
 8023f6c:	68f3      	ldr	r3, [r6, #12]
 8023f6e:	005b      	lsls	r3, r3, #1
 8023f70:	60f3      	str	r3, [r6, #12]
 8023f72:	3610      	adds	r6, #16
 8023f74:	42b0      	cmp	r0, r6
 8023f76:	d1f0      	bne.n	8023f5a <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023f78:	b00f      	add	sp, #60	@ 0x3c
 8023f7a:	bc3c      	pop	{r2, r3, r4, r5}
 8023f7c:	4690      	mov	r8, r2
 8023f7e:	4699      	mov	r9, r3
 8023f80:	46a2      	mov	sl, r4
 8023f82:	46ab      	mov	fp, r5
 8023f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f86:	2302      	movs	r3, #2
 8023f88:	2100      	movs	r1, #0
 8023f8a:	0015      	movs	r5, r2
 8023f8c:	f000 fb14 	bl	80245b8 <arm_radix4_butterfly_inverse_q31>
 8023f90:	46bc      	mov	ip, r7
 8023f92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f94:	002a      	movs	r2, r5
 8023f96:	0098      	lsls	r0, r3, #2
 8023f98:	4460      	add	r0, ip
 8023f9a:	2302      	movs	r3, #2
 8023f9c:	2100      	movs	r1, #0
 8023f9e:	f000 fb0b 	bl	80245b8 <arm_radix4_butterfly_inverse_q31>
 8023fa2:	e7e9      	b.n	8023f78 <arm_cfft_radix4by2_inverse_q31+0x158>

08023fa4 <arm_cfft_q31>:
 8023fa4:	b570      	push	{r4, r5, r6, lr}
 8023fa6:	001e      	movs	r6, r3
 8023fa8:	2380      	movs	r3, #128	@ 0x80
 8023faa:	000d      	movs	r5, r1
 8023fac:	0004      	movs	r4, r0
 8023fae:	8801      	ldrh	r1, [r0, #0]
 8023fb0:	005b      	lsls	r3, r3, #1
 8023fb2:	2a01      	cmp	r2, #1
 8023fb4:	d028      	beq.n	8024008 <arm_cfft_q31+0x64>
 8023fb6:	4299      	cmp	r1, r3
 8023fb8:	d020      	beq.n	8023ffc <arm_cfft_q31+0x58>
 8023fba:	d812      	bhi.n	8023fe2 <arm_cfft_q31+0x3e>
 8023fbc:	2920      	cmp	r1, #32
 8023fbe:	d004      	beq.n	8023fca <arm_cfft_q31+0x26>
 8023fc0:	d949      	bls.n	8024056 <arm_cfft_q31+0xb2>
 8023fc2:	2940      	cmp	r1, #64	@ 0x40
 8023fc4:	d01a      	beq.n	8023ffc <arm_cfft_q31+0x58>
 8023fc6:	2980      	cmp	r1, #128	@ 0x80
 8023fc8:	d103      	bne.n	8023fd2 <arm_cfft_q31+0x2e>
 8023fca:	6862      	ldr	r2, [r4, #4]
 8023fcc:	0028      	movs	r0, r5
 8023fce:	f7ff fe65 	bl	8023c9c <arm_cfft_radix4by2_q31>
 8023fd2:	2e00      	cmp	r6, #0
 8023fd4:	d004      	beq.n	8023fe0 <arm_cfft_q31+0x3c>
 8023fd6:	68a2      	ldr	r2, [r4, #8]
 8023fd8:	89a1      	ldrh	r1, [r4, #12]
 8023fda:	0028      	movs	r0, r5
 8023fdc:	f7dc f894 	bl	8000108 <arm_bitreversal_32>
 8023fe0:	bd70      	pop	{r4, r5, r6, pc}
 8023fe2:	2380      	movs	r3, #128	@ 0x80
 8023fe4:	00db      	lsls	r3, r3, #3
 8023fe6:	4299      	cmp	r1, r3
 8023fe8:	d008      	beq.n	8023ffc <arm_cfft_q31+0x58>
 8023fea:	d92f      	bls.n	802404c <arm_cfft_q31+0xa8>
 8023fec:	2380      	movs	r3, #128	@ 0x80
 8023fee:	011b      	lsls	r3, r3, #4
 8023ff0:	4299      	cmp	r1, r3
 8023ff2:	d0ea      	beq.n	8023fca <arm_cfft_q31+0x26>
 8023ff4:	2380      	movs	r3, #128	@ 0x80
 8023ff6:	015b      	lsls	r3, r3, #5
 8023ff8:	4299      	cmp	r1, r3
 8023ffa:	d1ea      	bne.n	8023fd2 <arm_cfft_q31+0x2e>
 8023ffc:	2301      	movs	r3, #1
 8023ffe:	6862      	ldr	r2, [r4, #4]
 8024000:	0028      	movs	r0, r5
 8024002:	f000 f833 	bl	802406c <arm_radix4_butterfly_q31>
 8024006:	e7e4      	b.n	8023fd2 <arm_cfft_q31+0x2e>
 8024008:	4299      	cmp	r1, r3
 802400a:	d019      	beq.n	8024040 <arm_cfft_q31+0x9c>
 802400c:	d80b      	bhi.n	8024026 <arm_cfft_q31+0x82>
 802400e:	2920      	cmp	r1, #32
 8024010:	d004      	beq.n	802401c <arm_cfft_q31+0x78>
 8024012:	d928      	bls.n	8024066 <arm_cfft_q31+0xc2>
 8024014:	2940      	cmp	r1, #64	@ 0x40
 8024016:	d013      	beq.n	8024040 <arm_cfft_q31+0x9c>
 8024018:	2980      	cmp	r1, #128	@ 0x80
 802401a:	d1da      	bne.n	8023fd2 <arm_cfft_q31+0x2e>
 802401c:	6862      	ldr	r2, [r4, #4]
 802401e:	0028      	movs	r0, r5
 8024020:	f7ff fefe 	bl	8023e20 <arm_cfft_radix4by2_inverse_q31>
 8024024:	e7d5      	b.n	8023fd2 <arm_cfft_q31+0x2e>
 8024026:	2380      	movs	r3, #128	@ 0x80
 8024028:	00db      	lsls	r3, r3, #3
 802402a:	4299      	cmp	r1, r3
 802402c:	d008      	beq.n	8024040 <arm_cfft_q31+0x9c>
 802402e:	d915      	bls.n	802405c <arm_cfft_q31+0xb8>
 8024030:	2380      	movs	r3, #128	@ 0x80
 8024032:	011b      	lsls	r3, r3, #4
 8024034:	4299      	cmp	r1, r3
 8024036:	d0f1      	beq.n	802401c <arm_cfft_q31+0x78>
 8024038:	2380      	movs	r3, #128	@ 0x80
 802403a:	015b      	lsls	r3, r3, #5
 802403c:	4299      	cmp	r1, r3
 802403e:	d1c8      	bne.n	8023fd2 <arm_cfft_q31+0x2e>
 8024040:	2301      	movs	r3, #1
 8024042:	6862      	ldr	r2, [r4, #4]
 8024044:	0028      	movs	r0, r5
 8024046:	f000 fab7 	bl	80245b8 <arm_radix4_butterfly_inverse_q31>
 802404a:	e7c2      	b.n	8023fd2 <arm_cfft_q31+0x2e>
 802404c:	2380      	movs	r3, #128	@ 0x80
 802404e:	009b      	lsls	r3, r3, #2
 8024050:	4299      	cmp	r1, r3
 8024052:	d0ba      	beq.n	8023fca <arm_cfft_q31+0x26>
 8024054:	e7bd      	b.n	8023fd2 <arm_cfft_q31+0x2e>
 8024056:	2910      	cmp	r1, #16
 8024058:	d1bb      	bne.n	8023fd2 <arm_cfft_q31+0x2e>
 802405a:	e7cf      	b.n	8023ffc <arm_cfft_q31+0x58>
 802405c:	2380      	movs	r3, #128	@ 0x80
 802405e:	009b      	lsls	r3, r3, #2
 8024060:	4299      	cmp	r1, r3
 8024062:	d0db      	beq.n	802401c <arm_cfft_q31+0x78>
 8024064:	e7b5      	b.n	8023fd2 <arm_cfft_q31+0x2e>
 8024066:	2910      	cmp	r1, #16
 8024068:	d1b3      	bne.n	8023fd2 <arm_cfft_q31+0x2e>
 802406a:	e7e9      	b.n	8024040 <arm_cfft_q31+0x9c>

0802406c <arm_radix4_butterfly_q31>:
 802406c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802406e:	464d      	mov	r5, r9
 8024070:	4644      	mov	r4, r8
 8024072:	465f      	mov	r7, fp
 8024074:	4656      	mov	r6, sl
 8024076:	469c      	mov	ip, r3
 8024078:	b4f0      	push	{r4, r5, r6, r7}
 802407a:	b0a7      	sub	sp, #156	@ 0x9c
 802407c:	9114      	str	r1, [sp, #80]	@ 0x50
 802407e:	0889      	lsrs	r1, r1, #2
 8024080:	9310      	str	r3, [sp, #64]	@ 0x40
 8024082:	00cb      	lsls	r3, r1, #3
 8024084:	0015      	movs	r5, r2
 8024086:	9223      	str	r2, [sp, #140]	@ 0x8c
 8024088:	18c2      	adds	r2, r0, r3
 802408a:	000c      	movs	r4, r1
 802408c:	469a      	mov	sl, r3
 802408e:	9124      	str	r1, [sp, #144]	@ 0x90
 8024090:	18d1      	adds	r1, r2, r3
 8024092:	4663      	mov	r3, ip
 8024094:	468b      	mov	fp, r1
 8024096:	0119      	lsls	r1, r3, #4
 8024098:	910d      	str	r1, [sp, #52]	@ 0x34
 802409a:	00d9      	lsls	r1, r3, #3
 802409c:	005b      	lsls	r3, r3, #1
 802409e:	4463      	add	r3, ip
 80240a0:	910e      	str	r1, [sp, #56]	@ 0x38
 80240a2:	00d9      	lsls	r1, r3, #3
 80240a4:	465b      	mov	r3, fp
 80240a6:	44da      	add	sl, fp
 80240a8:	4690      	mov	r8, r2
 80240aa:	4683      	mov	fp, r0
 80240ac:	4699      	mov	r9, r3
 80240ae:	9022      	str	r0, [sp, #136]	@ 0x88
 80240b0:	9025      	str	r0, [sp, #148]	@ 0x94
 80240b2:	910f      	str	r1, [sp, #60]	@ 0x3c
 80240b4:	9502      	str	r5, [sp, #8]
 80240b6:	9500      	str	r5, [sp, #0]
 80240b8:	9501      	str	r5, [sp, #4]
 80240ba:	9407      	str	r4, [sp, #28]
 80240bc:	465b      	mov	r3, fp
 80240be:	681b      	ldr	r3, [r3, #0]
 80240c0:	4642      	mov	r2, r8
 80240c2:	111c      	asrs	r4, r3, #4
 80240c4:	464b      	mov	r3, r9
 80240c6:	4658      	mov	r0, fp
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	6812      	ldr	r2, [r2, #0]
 80240cc:	111b      	asrs	r3, r3, #4
 80240ce:	18e7      	adds	r7, r4, r3
 80240d0:	1ae3      	subs	r3, r4, r3
 80240d2:	1114      	asrs	r4, r2, #4
 80240d4:	4652      	mov	r2, sl
 80240d6:	6840      	ldr	r0, [r0, #4]
 80240d8:	6812      	ldr	r2, [r2, #0]
 80240da:	1105      	asrs	r5, r0, #4
 80240dc:	4648      	mov	r0, r9
 80240de:	9303      	str	r3, [sp, #12]
 80240e0:	1113      	asrs	r3, r2, #4
 80240e2:	18e2      	adds	r2, r4, r3
 80240e4:	465c      	mov	r4, fp
 80240e6:	6840      	ldr	r0, [r0, #4]
 80240e8:	1103      	asrs	r3, r0, #4
 80240ea:	18ee      	adds	r6, r5, r3
 80240ec:	1ae8      	subs	r0, r5, r3
 80240ee:	18bb      	adds	r3, r7, r2
 80240f0:	6023      	str	r3, [r4, #0]
 80240f2:	4644      	mov	r4, r8
 80240f4:	6864      	ldr	r4, [r4, #4]
 80240f6:	9004      	str	r0, [sp, #16]
 80240f8:	1125      	asrs	r5, r4, #4
 80240fa:	4654      	mov	r4, sl
 80240fc:	6864      	ldr	r4, [r4, #4]
 80240fe:	1123      	asrs	r3, r4, #4
 8024100:	465c      	mov	r4, fp
 8024102:	18eb      	adds	r3, r5, r3
 8024104:	18f1      	adds	r1, r6, r3
 8024106:	6061      	str	r1, [r4, #4]
 8024108:	4655      	mov	r5, sl
 802410a:	4644      	mov	r4, r8
 802410c:	686d      	ldr	r5, [r5, #4]
 802410e:	6864      	ldr	r4, [r4, #4]
 8024110:	1129      	asrs	r1, r5, #4
 8024112:	1124      	asrs	r4, r4, #4
 8024114:	1a64      	subs	r4, r4, r1
 8024116:	4641      	mov	r1, r8
 8024118:	6809      	ldr	r1, [r1, #0]
 802411a:	9405      	str	r4, [sp, #20]
 802411c:	1108      	asrs	r0, r1, #4
 802411e:	4651      	mov	r1, sl
 8024120:	6809      	ldr	r1, [r1, #0]
 8024122:	1abc      	subs	r4, r7, r2
 8024124:	1109      	asrs	r1, r1, #4
 8024126:	1a41      	subs	r1, r0, r1
 8024128:	17e2      	asrs	r2, r4, #31
 802412a:	9106      	str	r1, [sp, #24]
 802412c:	0011      	movs	r1, r2
 802412e:	9a01      	ldr	r2, [sp, #4]
 8024130:	9108      	str	r1, [sp, #32]
 8024132:	6817      	ldr	r7, [r2, #0]
 8024134:	17fd      	asrs	r5, r7, #31
 8024136:	0028      	movs	r0, r5
 8024138:	1af5      	subs	r5, r6, r3
 802413a:	17ee      	asrs	r6, r5, #31
 802413c:	960a      	str	r6, [sp, #40]	@ 0x28
 802413e:	6856      	ldr	r6, [r2, #4]
 8024140:	9009      	str	r0, [sp, #36]	@ 0x24
 8024142:	17f3      	asrs	r3, r6, #31
 8024144:	003a      	movs	r2, r7
 8024146:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024148:	0003      	movs	r3, r0
 802414a:	0020      	movs	r0, r4
 802414c:	f7dc fa38 	bl	80005c0 <__aeabi_lmul>
 8024150:	0032      	movs	r2, r6
 8024152:	17f3      	asrs	r3, r6, #31
 8024154:	910c      	str	r1, [sp, #48]	@ 0x30
 8024156:	0028      	movs	r0, r5
 8024158:	17e9      	asrs	r1, r5, #31
 802415a:	f7dc fa31 	bl	80005c0 <__aeabi_lmul>
 802415e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024160:	002a      	movs	r2, r5
 8024162:	4684      	mov	ip, r0
 8024164:	4640      	mov	r0, r8
 8024166:	4461      	add	r1, ip
 8024168:	0049      	lsls	r1, r1, #1
 802416a:	6001      	str	r1, [r0, #0]
 802416c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802416e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024170:	0038      	movs	r0, r7
 8024172:	f7dc fa25 	bl	80005c0 <__aeabi_lmul>
 8024176:	0032      	movs	r2, r6
 8024178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802417a:	000d      	movs	r5, r1
 802417c:	0020      	movs	r0, r4
 802417e:	9908      	ldr	r1, [sp, #32]
 8024180:	f7dc fa1e 	bl	80005c0 <__aeabi_lmul>
 8024184:	4646      	mov	r6, r8
 8024186:	1a6d      	subs	r5, r5, r1
 8024188:	006d      	lsls	r5, r5, #1
 802418a:	6075      	str	r5, [r6, #4]
 802418c:	9903      	ldr	r1, [sp, #12]
 802418e:	9d05      	ldr	r5, [sp, #20]
 8024190:	000c      	movs	r4, r1
 8024192:	46ac      	mov	ip, r5
 8024194:	4464      	add	r4, ip
 8024196:	17e6      	asrs	r6, r4, #31
 8024198:	0031      	movs	r1, r6
 802419a:	9b00      	ldr	r3, [sp, #0]
 802419c:	9804      	ldr	r0, [sp, #16]
 802419e:	681e      	ldr	r6, [r3, #0]
 80241a0:	17f7      	asrs	r7, r6, #31
 80241a2:	9709      	str	r7, [sp, #36]	@ 0x24
 80241a4:	9f06      	ldr	r7, [sp, #24]
 80241a6:	0032      	movs	r2, r6
 80241a8:	1bc7      	subs	r7, r0, r7
 80241aa:	17fd      	asrs	r5, r7, #31
 80241ac:	950a      	str	r5, [sp, #40]	@ 0x28
 80241ae:	685d      	ldr	r5, [r3, #4]
 80241b0:	17f3      	asrs	r3, r6, #31
 80241b2:	17e8      	asrs	r0, r5, #31
 80241b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80241b6:	0020      	movs	r0, r4
 80241b8:	9108      	str	r1, [sp, #32]
 80241ba:	f7dc fa01 	bl	80005c0 <__aeabi_lmul>
 80241be:	002a      	movs	r2, r5
 80241c0:	17eb      	asrs	r3, r5, #31
 80241c2:	910c      	str	r1, [sp, #48]	@ 0x30
 80241c4:	0038      	movs	r0, r7
 80241c6:	17f9      	asrs	r1, r7, #31
 80241c8:	f7dc f9fa 	bl	80005c0 <__aeabi_lmul>
 80241cc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80241ce:	003a      	movs	r2, r7
 80241d0:	4684      	mov	ip, r0
 80241d2:	4648      	mov	r0, r9
 80241d4:	4461      	add	r1, ip
 80241d6:	0049      	lsls	r1, r1, #1
 80241d8:	6001      	str	r1, [r0, #0]
 80241da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80241dc:	0030      	movs	r0, r6
 80241de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80241e0:	f7dc f9ee 	bl	80005c0 <__aeabi_lmul>
 80241e4:	002a      	movs	r2, r5
 80241e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80241e8:	000e      	movs	r6, r1
 80241ea:	0020      	movs	r0, r4
 80241ec:	9908      	ldr	r1, [sp, #32]
 80241ee:	f7dc f9e7 	bl	80005c0 <__aeabi_lmul>
 80241f2:	464c      	mov	r4, r9
 80241f4:	9d05      	ldr	r5, [sp, #20]
 80241f6:	1a76      	subs	r6, r6, r1
 80241f8:	9903      	ldr	r1, [sp, #12]
 80241fa:	0076      	lsls	r6, r6, #1
 80241fc:	6066      	str	r6, [r4, #4]
 80241fe:	1b4c      	subs	r4, r1, r5
 8024200:	9e06      	ldr	r6, [sp, #24]
 8024202:	17e1      	asrs	r1, r4, #31
 8024204:	9103      	str	r1, [sp, #12]
 8024206:	9902      	ldr	r1, [sp, #8]
 8024208:	46b4      	mov	ip, r6
 802420a:	680f      	ldr	r7, [r1, #0]
 802420c:	9804      	ldr	r0, [sp, #16]
 802420e:	17fd      	asrs	r5, r7, #31
 8024210:	002b      	movs	r3, r5
 8024212:	684e      	ldr	r6, [r1, #4]
 8024214:	4460      	add	r0, ip
 8024216:	0005      	movs	r5, r0
 8024218:	17c0      	asrs	r0, r0, #31
 802421a:	9005      	str	r0, [sp, #20]
 802421c:	17f0      	asrs	r0, r6, #31
 802421e:	9006      	str	r0, [sp, #24]
 8024220:	003a      	movs	r2, r7
 8024222:	0020      	movs	r0, r4
 8024224:	17e1      	asrs	r1, r4, #31
 8024226:	9304      	str	r3, [sp, #16]
 8024228:	f7dc f9ca 	bl	80005c0 <__aeabi_lmul>
 802422c:	0032      	movs	r2, r6
 802422e:	9108      	str	r1, [sp, #32]
 8024230:	17f3      	asrs	r3, r6, #31
 8024232:	0028      	movs	r0, r5
 8024234:	17e9      	asrs	r1, r5, #31
 8024236:	f7dc f9c3 	bl	80005c0 <__aeabi_lmul>
 802423a:	9808      	ldr	r0, [sp, #32]
 802423c:	002a      	movs	r2, r5
 802423e:	4684      	mov	ip, r0
 8024240:	4650      	mov	r0, sl
 8024242:	4461      	add	r1, ip
 8024244:	0049      	lsls	r1, r1, #1
 8024246:	6001      	str	r1, [r0, #0]
 8024248:	9b05      	ldr	r3, [sp, #20]
 802424a:	9904      	ldr	r1, [sp, #16]
 802424c:	0038      	movs	r0, r7
 802424e:	f7dc f9b7 	bl	80005c0 <__aeabi_lmul>
 8024252:	0020      	movs	r0, r4
 8024254:	2408      	movs	r4, #8
 8024256:	000d      	movs	r5, r1
 8024258:	0032      	movs	r2, r6
 802425a:	9b06      	ldr	r3, [sp, #24]
 802425c:	9903      	ldr	r1, [sp, #12]
 802425e:	f7dc f9af 	bl	80005c0 <__aeabi_lmul>
 8024262:	46a4      	mov	ip, r4
 8024264:	4650      	mov	r0, sl
 8024266:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024268:	44e3      	add	fp, ip
 802426a:	44e0      	add	r8, ip
 802426c:	44e1      	add	r9, ip
 802426e:	44e2      	add	sl, ip
 8024270:	46a4      	mov	ip, r4
 8024272:	1a6d      	subs	r5, r5, r1
 8024274:	006d      	lsls	r5, r5, #1
 8024276:	9a01      	ldr	r2, [sp, #4]
 8024278:	6045      	str	r5, [r0, #4]
 802427a:	9807      	ldr	r0, [sp, #28]
 802427c:	4462      	add	r2, ip
 802427e:	3801      	subs	r0, #1
 8024280:	9201      	str	r2, [sp, #4]
 8024282:	9007      	str	r0, [sp, #28]
 8024284:	9b00      	ldr	r3, [sp, #0]
 8024286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024288:	9902      	ldr	r1, [sp, #8]
 802428a:	4694      	mov	ip, r2
 802428c:	4463      	add	r3, ip
 802428e:	9300      	str	r3, [sp, #0]
 8024290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024292:	469c      	mov	ip, r3
 8024294:	4461      	add	r1, ip
 8024296:	9102      	str	r1, [sp, #8]
 8024298:	2800      	cmp	r0, #0
 802429a:	d000      	beq.n	802429e <arm_radix4_butterfly_q31+0x232>
 802429c:	e70e      	b.n	80240bc <arm_radix4_butterfly_q31+0x50>
 802429e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80242a0:	009b      	lsls	r3, r3, #2
 80242a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80242a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242a6:	9320      	str	r3, [sp, #128]	@ 0x80
 80242a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80242aa:	2b04      	cmp	r3, #4
 80242ac:	d800      	bhi.n	80242b0 <arm_radix4_butterfly_q31+0x244>
 80242ae:	e180      	b.n	80245b2 <arm_radix4_butterfly_q31+0x546>
 80242b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80242b2:	0893      	lsrs	r3, r2, #2
 80242b4:	1e59      	subs	r1, r3, #1
 80242b6:	9321      	str	r3, [sp, #132]	@ 0x84
 80242b8:	00db      	lsls	r3, r3, #3
 80242ba:	931b      	str	r3, [sp, #108]	@ 0x6c
 80242bc:	00d3      	lsls	r3, r2, #3
 80242be:	9300      	str	r3, [sp, #0]
 80242c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80242c2:	911a      	str	r1, [sp, #104]	@ 0x68
 80242c4:	00da      	lsls	r2, r3, #3
 80242c6:	921e      	str	r2, [sp, #120]	@ 0x78
 80242c8:	011a      	lsls	r2, r3, #4
 80242ca:	921d      	str	r2, [sp, #116]	@ 0x74
 80242cc:	001a      	movs	r2, r3
 80242ce:	4694      	mov	ip, r2
 80242d0:	005b      	lsls	r3, r3, #1
 80242d2:	4463      	add	r3, ip
 80242d4:	00db      	lsls	r3, r3, #3
 80242d6:	931c      	str	r3, [sp, #112]	@ 0x70
 80242d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80242da:	9317      	str	r3, [sp, #92]	@ 0x5c
 80242dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80242de:	9318      	str	r3, [sp, #96]	@ 0x60
 80242e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80242e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80242e4:	2300      	movs	r3, #0
 80242e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80242e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80242ea:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80242ec:	681a      	ldr	r2, [r3, #0]
 80242ee:	685b      	ldr	r3, [r3, #4]
 80242f0:	9205      	str	r2, [sp, #20]
 80242f2:	9306      	str	r3, [sp, #24]
 80242f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80242f6:	468c      	mov	ip, r1
 80242f8:	681a      	ldr	r2, [r3, #0]
 80242fa:	685b      	ldr	r3, [r3, #4]
 80242fc:	9207      	str	r2, [sp, #28]
 80242fe:	9308      	str	r3, [sp, #32]
 8024300:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024302:	681a      	ldr	r2, [r3, #0]
 8024304:	685b      	ldr	r3, [r3, #4]
 8024306:	9209      	str	r2, [sp, #36]	@ 0x24
 8024308:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802430a:	930a      	str	r3, [sp, #40]	@ 0x28
 802430c:	0013      	movs	r3, r2
 802430e:	4463      	add	r3, ip
 8024310:	4698      	mov	r8, r3
 8024312:	0013      	movs	r3, r2
 8024314:	4442      	add	r2, r8
 8024316:	4691      	mov	r9, r2
 8024318:	001a      	movs	r2, r3
 802431a:	444a      	add	r2, r9
 802431c:	4692      	mov	sl, r2
 802431e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024320:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024322:	4293      	cmp	r3, r2
 8024324:	d800      	bhi.n	8024328 <arm_radix4_butterfly_q31+0x2bc>
 8024326:	e0dd      	b.n	80244e4 <arm_radix4_butterfly_q31+0x478>
 8024328:	4694      	mov	ip, r2
 802432a:	468b      	mov	fp, r1
 802432c:	4644      	mov	r4, r8
 802432e:	4655      	mov	r5, sl
 8024330:	9b07      	ldr	r3, [sp, #28]
 8024332:	17db      	asrs	r3, r3, #31
 8024334:	930c      	str	r3, [sp, #48]	@ 0x30
 8024336:	9b08      	ldr	r3, [sp, #32]
 8024338:	17db      	asrs	r3, r3, #31
 802433a:	930d      	str	r3, [sp, #52]	@ 0x34
 802433c:	9b05      	ldr	r3, [sp, #20]
 802433e:	17db      	asrs	r3, r3, #31
 8024340:	930e      	str	r3, [sp, #56]	@ 0x38
 8024342:	9b06      	ldr	r3, [sp, #24]
 8024344:	17db      	asrs	r3, r3, #31
 8024346:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802434a:	17db      	asrs	r3, r3, #31
 802434c:	9310      	str	r3, [sp, #64]	@ 0x40
 802434e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024350:	17db      	asrs	r3, r3, #31
 8024352:	9311      	str	r3, [sp, #68]	@ 0x44
 8024354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024356:	4463      	add	r3, ip
 8024358:	930b      	str	r3, [sp, #44]	@ 0x2c
 802435a:	465b      	mov	r3, fp
 802435c:	4659      	mov	r1, fp
 802435e:	681a      	ldr	r2, [r3, #0]
 8024360:	464b      	mov	r3, r9
 8024362:	684f      	ldr	r7, [r1, #4]
 8024364:	4649      	mov	r1, r9
 8024366:	681b      	ldr	r3, [r3, #0]
 8024368:	18d6      	adds	r6, r2, r3
 802436a:	1ad3      	subs	r3, r2, r3
 802436c:	9301      	str	r3, [sp, #4]
 802436e:	684b      	ldr	r3, [r1, #4]
 8024370:	18f8      	adds	r0, r7, r3
 8024372:	1af9      	subs	r1, r7, r3
 8024374:	6827      	ldr	r7, [r4, #0]
 8024376:	9102      	str	r1, [sp, #8]
 8024378:	003a      	movs	r2, r7
 802437a:	682f      	ldr	r7, [r5, #0]
 802437c:	46bc      	mov	ip, r7
 802437e:	465f      	mov	r7, fp
 8024380:	4462      	add	r2, ip
 8024382:	18b3      	adds	r3, r6, r2
 8024384:	109b      	asrs	r3, r3, #2
 8024386:	603b      	str	r3, [r7, #0]
 8024388:	6867      	ldr	r7, [r4, #4]
 802438a:	1ab6      	subs	r6, r6, r2
 802438c:	46b8      	mov	r8, r7
 802438e:	686f      	ldr	r7, [r5, #4]
 8024390:	17f2      	asrs	r2, r6, #31
 8024392:	46bc      	mov	ip, r7
 8024394:	44e0      	add	r8, ip
 8024396:	4643      	mov	r3, r8
 8024398:	465f      	mov	r7, fp
 802439a:	18c1      	adds	r1, r0, r3
 802439c:	1089      	asrs	r1, r1, #2
 802439e:	6079      	str	r1, [r7, #4]
 80243a0:	9900      	ldr	r1, [sp, #0]
 80243a2:	4690      	mov	r8, r2
 80243a4:	468c      	mov	ip, r1
 80243a6:	6867      	ldr	r7, [r4, #4]
 80243a8:	6869      	ldr	r1, [r5, #4]
 80243aa:	44e3      	add	fp, ip
 80243ac:	1a7f      	subs	r7, r7, r1
 80243ae:	9703      	str	r7, [sp, #12]
 80243b0:	6829      	ldr	r1, [r5, #0]
 80243b2:	6827      	ldr	r7, [r4, #0]
 80243b4:	1a7f      	subs	r7, r7, r1
 80243b6:	9704      	str	r7, [sp, #16]
 80243b8:	1ac7      	subs	r7, r0, r3
 80243ba:	17fa      	asrs	r2, r7, #31
 80243bc:	4692      	mov	sl, r2
 80243be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243c0:	9a07      	ldr	r2, [sp, #28]
 80243c2:	0030      	movs	r0, r6
 80243c4:	4641      	mov	r1, r8
 80243c6:	f7dc f8fb 	bl	80005c0 <__aeabi_lmul>
 80243ca:	9a08      	ldr	r2, [sp, #32]
 80243cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80243ce:	9112      	str	r1, [sp, #72]	@ 0x48
 80243d0:	0038      	movs	r0, r7
 80243d2:	4651      	mov	r1, sl
 80243d4:	f7dc f8f4 	bl	80005c0 <__aeabi_lmul>
 80243d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80243da:	9a07      	ldr	r2, [sp, #28]
 80243dc:	4684      	mov	ip, r0
 80243de:	4461      	add	r1, ip
 80243e0:	1049      	asrs	r1, r1, #1
 80243e2:	6021      	str	r1, [r4, #0]
 80243e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243e6:	0038      	movs	r0, r7
 80243e8:	4651      	mov	r1, sl
 80243ea:	f7dc f8e9 	bl	80005c0 <__aeabi_lmul>
 80243ee:	9a08      	ldr	r2, [sp, #32]
 80243f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80243f2:	000f      	movs	r7, r1
 80243f4:	0030      	movs	r0, r6
 80243f6:	4641      	mov	r1, r8
 80243f8:	f7dc f8e2 	bl	80005c0 <__aeabi_lmul>
 80243fc:	9b00      	ldr	r3, [sp, #0]
 80243fe:	9a01      	ldr	r2, [sp, #4]
 8024400:	469c      	mov	ip, r3
 8024402:	9803      	ldr	r0, [sp, #12]
 8024404:	1a7f      	subs	r7, r7, r1
 8024406:	107f      	asrs	r7, r7, #1
 8024408:	6067      	str	r7, [r4, #4]
 802440a:	0016      	movs	r6, r2
 802440c:	4464      	add	r4, ip
 802440e:	4684      	mov	ip, r0
 8024410:	4466      	add	r6, ip
 8024412:	17f2      	asrs	r2, r6, #31
 8024414:	4690      	mov	r8, r2
 8024416:	9902      	ldr	r1, [sp, #8]
 8024418:	9f04      	ldr	r7, [sp, #16]
 802441a:	0030      	movs	r0, r6
 802441c:	1bcf      	subs	r7, r1, r7
 802441e:	17fa      	asrs	r2, r7, #31
 8024420:	4692      	mov	sl, r2
 8024422:	4641      	mov	r1, r8
 8024424:	9a05      	ldr	r2, [sp, #20]
 8024426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024428:	f7dc f8ca 	bl	80005c0 <__aeabi_lmul>
 802442c:	9a06      	ldr	r2, [sp, #24]
 802442e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024430:	9112      	str	r1, [sp, #72]	@ 0x48
 8024432:	0038      	movs	r0, r7
 8024434:	4651      	mov	r1, sl
 8024436:	f7dc f8c3 	bl	80005c0 <__aeabi_lmul>
 802443a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802443c:	9a05      	ldr	r2, [sp, #20]
 802443e:	4684      	mov	ip, r0
 8024440:	4648      	mov	r0, r9
 8024442:	4461      	add	r1, ip
 8024444:	1049      	asrs	r1, r1, #1
 8024446:	6001      	str	r1, [r0, #0]
 8024448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802444a:	0038      	movs	r0, r7
 802444c:	4651      	mov	r1, sl
 802444e:	f7dc f8b7 	bl	80005c0 <__aeabi_lmul>
 8024452:	9a06      	ldr	r2, [sp, #24]
 8024454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024456:	000f      	movs	r7, r1
 8024458:	0030      	movs	r0, r6
 802445a:	4641      	mov	r1, r8
 802445c:	f7dc f8b0 	bl	80005c0 <__aeabi_lmul>
 8024460:	464e      	mov	r6, r9
 8024462:	9a00      	ldr	r2, [sp, #0]
 8024464:	9b01      	ldr	r3, [sp, #4]
 8024466:	4694      	mov	ip, r2
 8024468:	9803      	ldr	r0, [sp, #12]
 802446a:	1a7f      	subs	r7, r7, r1
 802446c:	107f      	asrs	r7, r7, #1
 802446e:	6077      	str	r7, [r6, #4]
 8024470:	1a1e      	subs	r6, r3, r0
 8024472:	9b04      	ldr	r3, [sp, #16]
 8024474:	44e1      	add	r9, ip
 8024476:	469c      	mov	ip, r3
 8024478:	17f0      	asrs	r0, r6, #31
 802447a:	4680      	mov	r8, r0
 802447c:	9902      	ldr	r1, [sp, #8]
 802447e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024480:	4461      	add	r1, ip
 8024482:	17cb      	asrs	r3, r1, #31
 8024484:	000f      	movs	r7, r1
 8024486:	469a      	mov	sl, r3
 8024488:	0030      	movs	r0, r6
 802448a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802448c:	4641      	mov	r1, r8
 802448e:	f7dc f897 	bl	80005c0 <__aeabi_lmul>
 8024492:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024494:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024496:	9101      	str	r1, [sp, #4]
 8024498:	0038      	movs	r0, r7
 802449a:	4651      	mov	r1, sl
 802449c:	f7dc f890 	bl	80005c0 <__aeabi_lmul>
 80244a0:	9801      	ldr	r0, [sp, #4]
 80244a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80244a4:	4684      	mov	ip, r0
 80244a6:	4461      	add	r1, ip
 80244a8:	1049      	asrs	r1, r1, #1
 80244aa:	6029      	str	r1, [r5, #0]
 80244ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80244ae:	0038      	movs	r0, r7
 80244b0:	4651      	mov	r1, sl
 80244b2:	f7dc f885 	bl	80005c0 <__aeabi_lmul>
 80244b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80244b8:	000f      	movs	r7, r1
 80244ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80244bc:	0030      	movs	r0, r6
 80244be:	4641      	mov	r1, r8
 80244c0:	f7dc f87e 	bl	80005c0 <__aeabi_lmul>
 80244c4:	1a7f      	subs	r7, r7, r1
 80244c6:	107f      	asrs	r7, r7, #1
 80244c8:	606f      	str	r7, [r5, #4]
 80244ca:	9a00      	ldr	r2, [sp, #0]
 80244cc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80244ce:	4694      	mov	ip, r2
 80244d0:	4465      	add	r5, ip
 80244d2:	468c      	mov	ip, r1
 80244d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80244d6:	0013      	movs	r3, r2
 80244d8:	4462      	add	r2, ip
 80244da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80244dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80244de:	429a      	cmp	r2, r3
 80244e0:	d900      	bls.n	80244e4 <arm_radix4_butterfly_q31+0x478>
 80244e2:	e73a      	b.n	802435a <arm_radix4_butterfly_q31+0x2ee>
 80244e4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80244e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80244e8:	468c      	mov	ip, r1
 80244ea:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80244ec:	4462      	add	r2, ip
 80244ee:	468c      	mov	ip, r1
 80244f0:	9216      	str	r2, [sp, #88]	@ 0x58
 80244f2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80244f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80244f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80244f8:	4462      	add	r2, ip
 80244fa:	468c      	mov	ip, r1
 80244fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80244fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024500:	3301      	adds	r3, #1
 8024502:	4462      	add	r2, ip
 8024504:	9218      	str	r2, [sp, #96]	@ 0x60
 8024506:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024508:	9315      	str	r3, [sp, #84]	@ 0x54
 802450a:	3208      	adds	r2, #8
 802450c:	9217      	str	r2, [sp, #92]	@ 0x5c
 802450e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024510:	4293      	cmp	r3, r2
 8024512:	d800      	bhi.n	8024516 <arm_radix4_butterfly_q31+0x4aa>
 8024514:	e6e8      	b.n	80242e8 <arm_radix4_butterfly_q31+0x27c>
 8024516:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024518:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802451a:	009b      	lsls	r3, r3, #2
 802451c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802451e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024520:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024522:	089b      	lsrs	r3, r3, #2
 8024524:	9320      	str	r3, [sp, #128]	@ 0x80
 8024526:	2b04      	cmp	r3, #4
 8024528:	d900      	bls.n	802452c <arm_radix4_butterfly_q31+0x4c0>
 802452a:	e6c1      	b.n	80242b0 <arm_radix4_butterfly_q31+0x244>
 802452c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802452e:	469a      	mov	sl, r3
 8024530:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024532:	691c      	ldr	r4, [r3, #16]
 8024534:	685a      	ldr	r2, [r3, #4]
 8024536:	46a1      	mov	r9, r4
 8024538:	4690      	mov	r8, r2
 802453a:	6819      	ldr	r1, [r3, #0]
 802453c:	689a      	ldr	r2, [r3, #8]
 802453e:	699f      	ldr	r7, [r3, #24]
 8024540:	188d      	adds	r5, r1, r2
 8024542:	444d      	add	r5, r9
 8024544:	19ed      	adds	r5, r5, r7
 8024546:	69de      	ldr	r6, [r3, #28]
 8024548:	601d      	str	r5, [r3, #0]
 802454a:	4645      	mov	r5, r8
 802454c:	46b4      	mov	ip, r6
 802454e:	68d8      	ldr	r0, [r3, #12]
 8024550:	695c      	ldr	r4, [r3, #20]
 8024552:	182d      	adds	r5, r5, r0
 8024554:	192d      	adds	r5, r5, r4
 8024556:	4465      	add	r5, ip
 8024558:	605d      	str	r5, [r3, #4]
 802455a:	1a8d      	subs	r5, r1, r2
 802455c:	444d      	add	r5, r9
 802455e:	1bed      	subs	r5, r5, r7
 8024560:	609d      	str	r5, [r3, #8]
 8024562:	4645      	mov	r5, r8
 8024564:	1a2d      	subs	r5, r5, r0
 8024566:	192d      	adds	r5, r5, r4
 8024568:	1bad      	subs	r5, r5, r6
 802456a:	464e      	mov	r6, r9
 802456c:	60dd      	str	r5, [r3, #12]
 802456e:	180d      	adds	r5, r1, r0
 8024570:	1bad      	subs	r5, r5, r6
 8024572:	4666      	mov	r6, ip
 8024574:	1bad      	subs	r5, r5, r6
 8024576:	611d      	str	r5, [r3, #16]
 8024578:	4645      	mov	r5, r8
 802457a:	1aad      	subs	r5, r5, r2
 802457c:	4442      	add	r2, r8
 802457e:	1b12      	subs	r2, r2, r4
 8024580:	1bd2      	subs	r2, r2, r7
 8024582:	1a08      	subs	r0, r1, r0
 8024584:	61da      	str	r2, [r3, #28]
 8024586:	4649      	mov	r1, r9
 8024588:	2201      	movs	r2, #1
 802458a:	1a41      	subs	r1, r0, r1
 802458c:	4252      	negs	r2, r2
 802458e:	4461      	add	r1, ip
 8024590:	4694      	mov	ip, r2
 8024592:	44e2      	add	sl, ip
 8024594:	4652      	mov	r2, sl
 8024596:	1b2d      	subs	r5, r5, r4
 8024598:	19ed      	adds	r5, r5, r7
 802459a:	615d      	str	r5, [r3, #20]
 802459c:	6199      	str	r1, [r3, #24]
 802459e:	3320      	adds	r3, #32
 80245a0:	2a00      	cmp	r2, #0
 80245a2:	d1c6      	bne.n	8024532 <arm_radix4_butterfly_q31+0x4c6>
 80245a4:	b027      	add	sp, #156	@ 0x9c
 80245a6:	bc3c      	pop	{r2, r3, r4, r5}
 80245a8:	4690      	mov	r8, r2
 80245aa:	4699      	mov	r9, r3
 80245ac:	46a2      	mov	sl, r4
 80245ae:	46ab      	mov	fp, r5
 80245b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245b2:	469a      	mov	sl, r3
 80245b4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80245b6:	e7bc      	b.n	8024532 <arm_radix4_butterfly_q31+0x4c6>

080245b8 <arm_radix4_butterfly_inverse_q31>:
 80245b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245ba:	464d      	mov	r5, r9
 80245bc:	4644      	mov	r4, r8
 80245be:	465f      	mov	r7, fp
 80245c0:	4656      	mov	r6, sl
 80245c2:	b4f0      	push	{r4, r5, r6, r7}
 80245c4:	b0a7      	sub	sp, #156	@ 0x9c
 80245c6:	469c      	mov	ip, r3
 80245c8:	9114      	str	r1, [sp, #80]	@ 0x50
 80245ca:	0889      	lsrs	r1, r1, #2
 80245cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80245ce:	00cb      	lsls	r3, r1, #3
 80245d0:	0015      	movs	r5, r2
 80245d2:	9223      	str	r2, [sp, #140]	@ 0x8c
 80245d4:	18c2      	adds	r2, r0, r3
 80245d6:	000c      	movs	r4, r1
 80245d8:	9124      	str	r1, [sp, #144]	@ 0x90
 80245da:	18d1      	adds	r1, r2, r3
 80245dc:	468b      	mov	fp, r1
 80245de:	469a      	mov	sl, r3
 80245e0:	4663      	mov	r3, ip
 80245e2:	44da      	add	sl, fp
 80245e4:	46d0      	mov	r8, sl
 80245e6:	4681      	mov	r9, r0
 80245e8:	4692      	mov	sl, r2
 80245ea:	0119      	lsls	r1, r3, #4
 80245ec:	910d      	str	r1, [sp, #52]	@ 0x34
 80245ee:	00d9      	lsls	r1, r3, #3
 80245f0:	005b      	lsls	r3, r3, #1
 80245f2:	4463      	add	r3, ip
 80245f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80245f6:	00d9      	lsls	r1, r3, #3
 80245f8:	9022      	str	r0, [sp, #136]	@ 0x88
 80245fa:	9025      	str	r0, [sp, #148]	@ 0x94
 80245fc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80245fe:	9502      	str	r5, [sp, #8]
 8024600:	9500      	str	r5, [sp, #0]
 8024602:	9501      	str	r5, [sp, #4]
 8024604:	9409      	str	r4, [sp, #36]	@ 0x24
 8024606:	464b      	mov	r3, r9
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	4652      	mov	r2, sl
 802460c:	111c      	asrs	r4, r3, #4
 802460e:	465b      	mov	r3, fp
 8024610:	4648      	mov	r0, r9
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	6812      	ldr	r2, [r2, #0]
 8024616:	6840      	ldr	r0, [r0, #4]
 8024618:	111b      	asrs	r3, r3, #4
 802461a:	18e7      	adds	r7, r4, r3
 802461c:	1ae3      	subs	r3, r4, r3
 802461e:	1114      	asrs	r4, r2, #4
 8024620:	4642      	mov	r2, r8
 8024622:	1105      	asrs	r5, r0, #4
 8024624:	4658      	mov	r0, fp
 8024626:	6812      	ldr	r2, [r2, #0]
 8024628:	6840      	ldr	r0, [r0, #4]
 802462a:	9303      	str	r3, [sp, #12]
 802462c:	1113      	asrs	r3, r2, #4
 802462e:	18e2      	adds	r2, r4, r3
 8024630:	1103      	asrs	r3, r0, #4
 8024632:	18ee      	adds	r6, r5, r3
 8024634:	1ae8      	subs	r0, r5, r3
 8024636:	464d      	mov	r5, r9
 8024638:	18bb      	adds	r3, r7, r2
 802463a:	602b      	str	r3, [r5, #0]
 802463c:	4641      	mov	r1, r8
 802463e:	4655      	mov	r5, sl
 8024640:	6849      	ldr	r1, [r1, #4]
 8024642:	686d      	ldr	r5, [r5, #4]
 8024644:	110b      	asrs	r3, r1, #4
 8024646:	112d      	asrs	r5, r5, #4
 8024648:	18eb      	adds	r3, r5, r3
 802464a:	464d      	mov	r5, r9
 802464c:	18f1      	adds	r1, r6, r3
 802464e:	6069      	str	r1, [r5, #4]
 8024650:	4655      	mov	r5, sl
 8024652:	686d      	ldr	r5, [r5, #4]
 8024654:	9004      	str	r0, [sp, #16]
 8024656:	112c      	asrs	r4, r5, #4
 8024658:	4645      	mov	r5, r8
 802465a:	686d      	ldr	r5, [r5, #4]
 802465c:	1129      	asrs	r1, r5, #4
 802465e:	1a65      	subs	r5, r4, r1
 8024660:	4651      	mov	r1, sl
 8024662:	6809      	ldr	r1, [r1, #0]
 8024664:	1abc      	subs	r4, r7, r2
 8024666:	1108      	asrs	r0, r1, #4
 8024668:	4641      	mov	r1, r8
 802466a:	17e2      	asrs	r2, r4, #31
 802466c:	6809      	ldr	r1, [r1, #0]
 802466e:	9207      	str	r2, [sp, #28]
 8024670:	9a01      	ldr	r2, [sp, #4]
 8024672:	1109      	asrs	r1, r1, #4
 8024674:	6817      	ldr	r7, [r2, #0]
 8024676:	1a41      	subs	r1, r0, r1
 8024678:	9106      	str	r1, [sp, #24]
 802467a:	0039      	movs	r1, r7
 802467c:	17ff      	asrs	r7, r7, #31
 802467e:	0038      	movs	r0, r7
 8024680:	9505      	str	r5, [sp, #20]
 8024682:	1af5      	subs	r5, r6, r3
 8024684:	17ef      	asrs	r7, r5, #31
 8024686:	970b      	str	r7, [sp, #44]	@ 0x2c
 8024688:	6857      	ldr	r7, [r2, #4]
 802468a:	0003      	movs	r3, r0
 802468c:	17fe      	asrs	r6, r7, #31
 802468e:	000a      	movs	r2, r1
 8024690:	9108      	str	r1, [sp, #32]
 8024692:	900a      	str	r0, [sp, #40]	@ 0x28
 8024694:	17e1      	asrs	r1, r4, #31
 8024696:	0020      	movs	r0, r4
 8024698:	960c      	str	r6, [sp, #48]	@ 0x30
 802469a:	f7db ff91 	bl	80005c0 <__aeabi_lmul>
 802469e:	003a      	movs	r2, r7
 80246a0:	17fb      	asrs	r3, r7, #31
 80246a2:	000e      	movs	r6, r1
 80246a4:	0028      	movs	r0, r5
 80246a6:	17e9      	asrs	r1, r5, #31
 80246a8:	f7db ff8a 	bl	80005c0 <__aeabi_lmul>
 80246ac:	4653      	mov	r3, sl
 80246ae:	1a76      	subs	r6, r6, r1
 80246b0:	0076      	lsls	r6, r6, #1
 80246b2:	601e      	str	r6, [r3, #0]
 80246b4:	002a      	movs	r2, r5
 80246b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80246b8:	9808      	ldr	r0, [sp, #32]
 80246ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246bc:	f7db ff80 	bl	80005c0 <__aeabi_lmul>
 80246c0:	003a      	movs	r2, r7
 80246c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246c4:	000d      	movs	r5, r1
 80246c6:	0020      	movs	r0, r4
 80246c8:	9907      	ldr	r1, [sp, #28]
 80246ca:	f7db ff79 	bl	80005c0 <__aeabi_lmul>
 80246ce:	4657      	mov	r7, sl
 80246d0:	186d      	adds	r5, r5, r1
 80246d2:	006d      	lsls	r5, r5, #1
 80246d4:	607d      	str	r5, [r7, #4]
 80246d6:	9b03      	ldr	r3, [sp, #12]
 80246d8:	9e06      	ldr	r6, [sp, #24]
 80246da:	9d05      	ldr	r5, [sp, #20]
 80246dc:	46b4      	mov	ip, r6
 80246de:	1b5d      	subs	r5, r3, r5
 80246e0:	9b00      	ldr	r3, [sp, #0]
 80246e2:	17ef      	asrs	r7, r5, #31
 80246e4:	0039      	movs	r1, r7
 80246e6:	681f      	ldr	r7, [r3, #0]
 80246e8:	17fc      	asrs	r4, r7, #31
 80246ea:	0020      	movs	r0, r4
 80246ec:	9c04      	ldr	r4, [sp, #16]
 80246ee:	4464      	add	r4, ip
 80246f0:	17e6      	asrs	r6, r4, #31
 80246f2:	9407      	str	r4, [sp, #28]
 80246f4:	9608      	str	r6, [sp, #32]
 80246f6:	685e      	ldr	r6, [r3, #4]
 80246f8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80246fa:	17f2      	asrs	r2, r6, #31
 80246fc:	0003      	movs	r3, r0
 80246fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8024700:	0028      	movs	r0, r5
 8024702:	003a      	movs	r2, r7
 8024704:	910a      	str	r1, [sp, #40]	@ 0x28
 8024706:	f7db ff5b 	bl	80005c0 <__aeabi_lmul>
 802470a:	0032      	movs	r2, r6
 802470c:	17f3      	asrs	r3, r6, #31
 802470e:	9807      	ldr	r0, [sp, #28]
 8024710:	000c      	movs	r4, r1
 8024712:	9908      	ldr	r1, [sp, #32]
 8024714:	f7db ff54 	bl	80005c0 <__aeabi_lmul>
 8024718:	4658      	mov	r0, fp
 802471a:	1a64      	subs	r4, r4, r1
 802471c:	0064      	lsls	r4, r4, #1
 802471e:	9a07      	ldr	r2, [sp, #28]
 8024720:	6004      	str	r4, [r0, #0]
 8024722:	9b08      	ldr	r3, [sp, #32]
 8024724:	0038      	movs	r0, r7
 8024726:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024728:	f7db ff4a 	bl	80005c0 <__aeabi_lmul>
 802472c:	0032      	movs	r2, r6
 802472e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024730:	000c      	movs	r4, r1
 8024732:	0028      	movs	r0, r5
 8024734:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024736:	f7db ff43 	bl	80005c0 <__aeabi_lmul>
 802473a:	9d05      	ldr	r5, [sp, #20]
 802473c:	465f      	mov	r7, fp
 802473e:	46ac      	mov	ip, r5
 8024740:	1864      	adds	r4, r4, r1
 8024742:	9903      	ldr	r1, [sp, #12]
 8024744:	0064      	lsls	r4, r4, #1
 8024746:	4461      	add	r1, ip
 8024748:	607c      	str	r4, [r7, #4]
 802474a:	000c      	movs	r4, r1
 802474c:	17c9      	asrs	r1, r1, #31
 802474e:	9105      	str	r1, [sp, #20]
 8024750:	9902      	ldr	r1, [sp, #8]
 8024752:	9804      	ldr	r0, [sp, #16]
 8024754:	680d      	ldr	r5, [r1, #0]
 8024756:	9e06      	ldr	r6, [sp, #24]
 8024758:	002b      	movs	r3, r5
 802475a:	17ed      	asrs	r5, r5, #31
 802475c:	684f      	ldr	r7, [r1, #4]
 802475e:	9503      	str	r5, [sp, #12]
 8024760:	1b85      	subs	r5, r0, r6
 8024762:	17e8      	asrs	r0, r5, #31
 8024764:	001a      	movs	r2, r3
 8024766:	9006      	str	r0, [sp, #24]
 8024768:	17fe      	asrs	r6, r7, #31
 802476a:	9304      	str	r3, [sp, #16]
 802476c:	0020      	movs	r0, r4
 802476e:	9b03      	ldr	r3, [sp, #12]
 8024770:	17e1      	asrs	r1, r4, #31
 8024772:	9607      	str	r6, [sp, #28]
 8024774:	f7db ff24 	bl	80005c0 <__aeabi_lmul>
 8024778:	003a      	movs	r2, r7
 802477a:	000e      	movs	r6, r1
 802477c:	17fb      	asrs	r3, r7, #31
 802477e:	0028      	movs	r0, r5
 8024780:	17e9      	asrs	r1, r5, #31
 8024782:	f7db ff1d 	bl	80005c0 <__aeabi_lmul>
 8024786:	4640      	mov	r0, r8
 8024788:	1a76      	subs	r6, r6, r1
 802478a:	0076      	lsls	r6, r6, #1
 802478c:	002a      	movs	r2, r5
 802478e:	9b06      	ldr	r3, [sp, #24]
 8024790:	6006      	str	r6, [r0, #0]
 8024792:	9903      	ldr	r1, [sp, #12]
 8024794:	9804      	ldr	r0, [sp, #16]
 8024796:	f7db ff13 	bl	80005c0 <__aeabi_lmul>
 802479a:	0020      	movs	r0, r4
 802479c:	2408      	movs	r4, #8
 802479e:	9b07      	ldr	r3, [sp, #28]
 80247a0:	000d      	movs	r5, r1
 80247a2:	003a      	movs	r2, r7
 80247a4:	9905      	ldr	r1, [sp, #20]
 80247a6:	f7db ff0b 	bl	80005c0 <__aeabi_lmul>
 80247aa:	4640      	mov	r0, r8
 80247ac:	46a4      	mov	ip, r4
 80247ae:	186d      	adds	r5, r5, r1
 80247b0:	006d      	lsls	r5, r5, #1
 80247b2:	6045      	str	r5, [r0, #4]
 80247b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80247b6:	44e1      	add	r9, ip
 80247b8:	3801      	subs	r0, #1
 80247ba:	9009      	str	r0, [sp, #36]	@ 0x24
 80247bc:	9a01      	ldr	r2, [sp, #4]
 80247be:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80247c0:	44e2      	add	sl, ip
 80247c2:	44e3      	add	fp, ip
 80247c4:	44e0      	add	r8, ip
 80247c6:	46a4      	mov	ip, r4
 80247c8:	4462      	add	r2, ip
 80247ca:	9201      	str	r2, [sp, #4]
 80247cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80247ce:	9b00      	ldr	r3, [sp, #0]
 80247d0:	4694      	mov	ip, r2
 80247d2:	4463      	add	r3, ip
 80247d4:	9300      	str	r3, [sp, #0]
 80247d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80247d8:	9902      	ldr	r1, [sp, #8]
 80247da:	469c      	mov	ip, r3
 80247dc:	4461      	add	r1, ip
 80247de:	9102      	str	r1, [sp, #8]
 80247e0:	2800      	cmp	r0, #0
 80247e2:	d000      	beq.n	80247e6 <arm_radix4_butterfly_inverse_q31+0x22e>
 80247e4:	e70f      	b.n	8024606 <arm_radix4_butterfly_inverse_q31+0x4e>
 80247e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80247e8:	009b      	lsls	r3, r3, #2
 80247ea:	931f      	str	r3, [sp, #124]	@ 0x7c
 80247ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80247ee:	9320      	str	r3, [sp, #128]	@ 0x80
 80247f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80247f2:	2b04      	cmp	r3, #4
 80247f4:	d800      	bhi.n	80247f8 <arm_radix4_butterfly_inverse_q31+0x240>
 80247f6:	e17c      	b.n	8024af2 <arm_radix4_butterfly_inverse_q31+0x53a>
 80247f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80247fa:	0893      	lsrs	r3, r2, #2
 80247fc:	1e59      	subs	r1, r3, #1
 80247fe:	9321      	str	r3, [sp, #132]	@ 0x84
 8024800:	00db      	lsls	r3, r3, #3
 8024802:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024804:	00d3      	lsls	r3, r2, #3
 8024806:	9300      	str	r3, [sp, #0]
 8024808:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802480a:	911a      	str	r1, [sp, #104]	@ 0x68
 802480c:	00da      	lsls	r2, r3, #3
 802480e:	921e      	str	r2, [sp, #120]	@ 0x78
 8024810:	011a      	lsls	r2, r3, #4
 8024812:	921d      	str	r2, [sp, #116]	@ 0x74
 8024814:	001a      	movs	r2, r3
 8024816:	4694      	mov	ip, r2
 8024818:	005b      	lsls	r3, r3, #1
 802481a:	4463      	add	r3, ip
 802481c:	00db      	lsls	r3, r3, #3
 802481e:	931c      	str	r3, [sp, #112]	@ 0x70
 8024820:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024822:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024826:	9318      	str	r3, [sp, #96]	@ 0x60
 8024828:	9319      	str	r3, [sp, #100]	@ 0x64
 802482a:	9316      	str	r3, [sp, #88]	@ 0x58
 802482c:	2300      	movs	r3, #0
 802482e:	9315      	str	r3, [sp, #84]	@ 0x54
 8024830:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024832:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024834:	681a      	ldr	r2, [r3, #0]
 8024836:	685b      	ldr	r3, [r3, #4]
 8024838:	9205      	str	r2, [sp, #20]
 802483a:	9306      	str	r3, [sp, #24]
 802483c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802483e:	468c      	mov	ip, r1
 8024840:	681a      	ldr	r2, [r3, #0]
 8024842:	685b      	ldr	r3, [r3, #4]
 8024844:	9207      	str	r2, [sp, #28]
 8024846:	9308      	str	r3, [sp, #32]
 8024848:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802484a:	681a      	ldr	r2, [r3, #0]
 802484c:	685b      	ldr	r3, [r3, #4]
 802484e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024850:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024852:	930a      	str	r3, [sp, #40]	@ 0x28
 8024854:	0013      	movs	r3, r2
 8024856:	4463      	add	r3, ip
 8024858:	4698      	mov	r8, r3
 802485a:	0013      	movs	r3, r2
 802485c:	4442      	add	r2, r8
 802485e:	4691      	mov	r9, r2
 8024860:	001a      	movs	r2, r3
 8024862:	444a      	add	r2, r9
 8024864:	4692      	mov	sl, r2
 8024866:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024868:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802486a:	4293      	cmp	r3, r2
 802486c:	d800      	bhi.n	8024870 <arm_radix4_butterfly_inverse_q31+0x2b8>
 802486e:	e0d9      	b.n	8024a24 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024870:	4694      	mov	ip, r2
 8024872:	4644      	mov	r4, r8
 8024874:	4655      	mov	r5, sl
 8024876:	4688      	mov	r8, r1
 8024878:	9b07      	ldr	r3, [sp, #28]
 802487a:	17db      	asrs	r3, r3, #31
 802487c:	930c      	str	r3, [sp, #48]	@ 0x30
 802487e:	9b08      	ldr	r3, [sp, #32]
 8024880:	17db      	asrs	r3, r3, #31
 8024882:	930d      	str	r3, [sp, #52]	@ 0x34
 8024884:	9b05      	ldr	r3, [sp, #20]
 8024886:	17db      	asrs	r3, r3, #31
 8024888:	930e      	str	r3, [sp, #56]	@ 0x38
 802488a:	9b06      	ldr	r3, [sp, #24]
 802488c:	17db      	asrs	r3, r3, #31
 802488e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024892:	17db      	asrs	r3, r3, #31
 8024894:	9310      	str	r3, [sp, #64]	@ 0x40
 8024896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024898:	17db      	asrs	r3, r3, #31
 802489a:	9311      	str	r3, [sp, #68]	@ 0x44
 802489c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802489e:	4463      	add	r3, ip
 80248a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80248a2:	4643      	mov	r3, r8
 80248a4:	4641      	mov	r1, r8
 80248a6:	681a      	ldr	r2, [r3, #0]
 80248a8:	464b      	mov	r3, r9
 80248aa:	684f      	ldr	r7, [r1, #4]
 80248ac:	4649      	mov	r1, r9
 80248ae:	681b      	ldr	r3, [r3, #0]
 80248b0:	18d6      	adds	r6, r2, r3
 80248b2:	1ad3      	subs	r3, r2, r3
 80248b4:	9301      	str	r3, [sp, #4]
 80248b6:	684b      	ldr	r3, [r1, #4]
 80248b8:	1af9      	subs	r1, r7, r3
 80248ba:	9102      	str	r1, [sp, #8]
 80248bc:	6829      	ldr	r1, [r5, #0]
 80248be:	18f8      	adds	r0, r7, r3
 80248c0:	468c      	mov	ip, r1
 80248c2:	6827      	ldr	r7, [r4, #0]
 80248c4:	4467      	add	r7, ip
 80248c6:	003a      	movs	r2, r7
 80248c8:	19f3      	adds	r3, r6, r7
 80248ca:	4647      	mov	r7, r8
 80248cc:	109b      	asrs	r3, r3, #2
 80248ce:	603b      	str	r3, [r7, #0]
 80248d0:	6869      	ldr	r1, [r5, #4]
 80248d2:	6867      	ldr	r7, [r4, #4]
 80248d4:	468c      	mov	ip, r1
 80248d6:	4467      	add	r7, ip
 80248d8:	003b      	movs	r3, r7
 80248da:	19c1      	adds	r1, r0, r7
 80248dc:	4647      	mov	r7, r8
 80248de:	1ab6      	subs	r6, r6, r2
 80248e0:	1089      	asrs	r1, r1, #2
 80248e2:	6079      	str	r1, [r7, #4]
 80248e4:	17f2      	asrs	r2, r6, #31
 80248e6:	9900      	ldr	r1, [sp, #0]
 80248e8:	4692      	mov	sl, r2
 80248ea:	468c      	mov	ip, r1
 80248ec:	6867      	ldr	r7, [r4, #4]
 80248ee:	6869      	ldr	r1, [r5, #4]
 80248f0:	44e0      	add	r8, ip
 80248f2:	1a7f      	subs	r7, r7, r1
 80248f4:	9703      	str	r7, [sp, #12]
 80248f6:	6821      	ldr	r1, [r4, #0]
 80248f8:	682f      	ldr	r7, [r5, #0]
 80248fa:	1bc9      	subs	r1, r1, r7
 80248fc:	1ac7      	subs	r7, r0, r3
 80248fe:	17fa      	asrs	r2, r7, #31
 8024900:	4693      	mov	fp, r2
 8024902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024904:	9a07      	ldr	r2, [sp, #28]
 8024906:	9104      	str	r1, [sp, #16]
 8024908:	0030      	movs	r0, r6
 802490a:	4651      	mov	r1, sl
 802490c:	f7db fe58 	bl	80005c0 <__aeabi_lmul>
 8024910:	9a08      	ldr	r2, [sp, #32]
 8024912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024914:	9112      	str	r1, [sp, #72]	@ 0x48
 8024916:	0038      	movs	r0, r7
 8024918:	4659      	mov	r1, fp
 802491a:	f7db fe51 	bl	80005c0 <__aeabi_lmul>
 802491e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024920:	9a07      	ldr	r2, [sp, #28]
 8024922:	1a41      	subs	r1, r0, r1
 8024924:	1049      	asrs	r1, r1, #1
 8024926:	6021      	str	r1, [r4, #0]
 8024928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802492a:	0038      	movs	r0, r7
 802492c:	4659      	mov	r1, fp
 802492e:	f7db fe47 	bl	80005c0 <__aeabi_lmul>
 8024932:	9a08      	ldr	r2, [sp, #32]
 8024934:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024936:	000f      	movs	r7, r1
 8024938:	0030      	movs	r0, r6
 802493a:	4651      	mov	r1, sl
 802493c:	f7db fe40 	bl	80005c0 <__aeabi_lmul>
 8024940:	9b00      	ldr	r3, [sp, #0]
 8024942:	187f      	adds	r7, r7, r1
 8024944:	469c      	mov	ip, r3
 8024946:	107f      	asrs	r7, r7, #1
 8024948:	6067      	str	r7, [r4, #4]
 802494a:	9a01      	ldr	r2, [sp, #4]
 802494c:	9f03      	ldr	r7, [sp, #12]
 802494e:	9802      	ldr	r0, [sp, #8]
 8024950:	1bd7      	subs	r7, r2, r7
 8024952:	17fe      	asrs	r6, r7, #31
 8024954:	0031      	movs	r1, r6
 8024956:	9e04      	ldr	r6, [sp, #16]
 8024958:	4682      	mov	sl, r0
 802495a:	4464      	add	r4, ip
 802495c:	46b4      	mov	ip, r6
 802495e:	44e2      	add	sl, ip
 8024960:	4652      	mov	r2, sl
 8024962:	17d2      	asrs	r2, r2, #31
 8024964:	4693      	mov	fp, r2
 8024966:	0038      	movs	r0, r7
 8024968:	9a05      	ldr	r2, [sp, #20]
 802496a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802496c:	9112      	str	r1, [sp, #72]	@ 0x48
 802496e:	f7db fe27 	bl	80005c0 <__aeabi_lmul>
 8024972:	9a06      	ldr	r2, [sp, #24]
 8024974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024976:	000e      	movs	r6, r1
 8024978:	4650      	mov	r0, sl
 802497a:	4659      	mov	r1, fp
 802497c:	f7db fe20 	bl	80005c0 <__aeabi_lmul>
 8024980:	4648      	mov	r0, r9
 8024982:	1a76      	subs	r6, r6, r1
 8024984:	1076      	asrs	r6, r6, #1
 8024986:	6006      	str	r6, [r0, #0]
 8024988:	9a05      	ldr	r2, [sp, #20]
 802498a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802498c:	4650      	mov	r0, sl
 802498e:	4659      	mov	r1, fp
 8024990:	f7db fe16 	bl	80005c0 <__aeabi_lmul>
 8024994:	9a06      	ldr	r2, [sp, #24]
 8024996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024998:	000e      	movs	r6, r1
 802499a:	0038      	movs	r0, r7
 802499c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802499e:	f7db fe0f 	bl	80005c0 <__aeabi_lmul>
 80249a2:	9a00      	ldr	r2, [sp, #0]
 80249a4:	9f03      	ldr	r7, [sp, #12]
 80249a6:	4694      	mov	ip, r2
 80249a8:	1876      	adds	r6, r6, r1
 80249aa:	4649      	mov	r1, r9
 80249ac:	44e1      	add	r9, ip
 80249ae:	46bc      	mov	ip, r7
 80249b0:	9b01      	ldr	r3, [sp, #4]
 80249b2:	1076      	asrs	r6, r6, #1
 80249b4:	4463      	add	r3, ip
 80249b6:	17df      	asrs	r7, r3, #31
 80249b8:	604e      	str	r6, [r1, #4]
 80249ba:	46ba      	mov	sl, r7
 80249bc:	001e      	movs	r6, r3
 80249be:	9802      	ldr	r0, [sp, #8]
 80249c0:	9b04      	ldr	r3, [sp, #16]
 80249c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80249c4:	1ac7      	subs	r7, r0, r3
 80249c6:	17fb      	asrs	r3, r7, #31
 80249c8:	469b      	mov	fp, r3
 80249ca:	0030      	movs	r0, r6
 80249cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249ce:	4651      	mov	r1, sl
 80249d0:	f7db fdf6 	bl	80005c0 <__aeabi_lmul>
 80249d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80249d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80249d8:	9101      	str	r1, [sp, #4]
 80249da:	0038      	movs	r0, r7
 80249dc:	4659      	mov	r1, fp
 80249de:	f7db fdef 	bl	80005c0 <__aeabi_lmul>
 80249e2:	9801      	ldr	r0, [sp, #4]
 80249e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80249e6:	1a41      	subs	r1, r0, r1
 80249e8:	1049      	asrs	r1, r1, #1
 80249ea:	6029      	str	r1, [r5, #0]
 80249ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249ee:	0038      	movs	r0, r7
 80249f0:	4659      	mov	r1, fp
 80249f2:	f7db fde5 	bl	80005c0 <__aeabi_lmul>
 80249f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80249f8:	000f      	movs	r7, r1
 80249fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80249fc:	0030      	movs	r0, r6
 80249fe:	4651      	mov	r1, sl
 8024a00:	f7db fdde 	bl	80005c0 <__aeabi_lmul>
 8024a04:	187f      	adds	r7, r7, r1
 8024a06:	107f      	asrs	r7, r7, #1
 8024a08:	606f      	str	r7, [r5, #4]
 8024a0a:	9a00      	ldr	r2, [sp, #0]
 8024a0c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024a0e:	4694      	mov	ip, r2
 8024a10:	4465      	add	r5, ip
 8024a12:	468c      	mov	ip, r1
 8024a14:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024a16:	0013      	movs	r3, r2
 8024a18:	4462      	add	r2, ip
 8024a1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024a1c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024a1e:	429a      	cmp	r2, r3
 8024a20:	d900      	bls.n	8024a24 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024a22:	e73e      	b.n	80248a2 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024a24:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a26:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024a28:	468c      	mov	ip, r1
 8024a2a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024a2c:	4462      	add	r2, ip
 8024a2e:	468c      	mov	ip, r1
 8024a30:	9216      	str	r2, [sp, #88]	@ 0x58
 8024a32:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024a34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024a36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024a38:	4462      	add	r2, ip
 8024a3a:	468c      	mov	ip, r1
 8024a3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8024a3e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024a40:	3301      	adds	r3, #1
 8024a42:	4462      	add	r2, ip
 8024a44:	9218      	str	r2, [sp, #96]	@ 0x60
 8024a46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024a48:	9315      	str	r3, [sp, #84]	@ 0x54
 8024a4a:	3208      	adds	r2, #8
 8024a4c:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024a4e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024a50:	4293      	cmp	r3, r2
 8024a52:	d800      	bhi.n	8024a56 <arm_radix4_butterfly_inverse_q31+0x49e>
 8024a54:	e6ec      	b.n	8024830 <arm_radix4_butterfly_inverse_q31+0x278>
 8024a56:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024a58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024a5a:	009b      	lsls	r3, r3, #2
 8024a5c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024a5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024a60:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024a62:	089b      	lsrs	r3, r3, #2
 8024a64:	9320      	str	r3, [sp, #128]	@ 0x80
 8024a66:	2b04      	cmp	r3, #4
 8024a68:	d900      	bls.n	8024a6c <arm_radix4_butterfly_inverse_q31+0x4b4>
 8024a6a:	e6c5      	b.n	80247f8 <arm_radix4_butterfly_inverse_q31+0x240>
 8024a6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024a6e:	469a      	mov	sl, r3
 8024a70:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024a72:	681a      	ldr	r2, [r3, #0]
 8024a74:	6918      	ldr	r0, [r3, #16]
 8024a76:	4691      	mov	r9, r2
 8024a78:	464c      	mov	r4, r9
 8024a7a:	4680      	mov	r8, r0
 8024a7c:	69de      	ldr	r6, [r3, #28]
 8024a7e:	689d      	ldr	r5, [r3, #8]
 8024a80:	46b4      	mov	ip, r6
 8024a82:	6998      	ldr	r0, [r3, #24]
 8024a84:	1964      	adds	r4, r4, r5
 8024a86:	6859      	ldr	r1, [r3, #4]
 8024a88:	68da      	ldr	r2, [r3, #12]
 8024a8a:	4444      	add	r4, r8
 8024a8c:	695f      	ldr	r7, [r3, #20]
 8024a8e:	1824      	adds	r4, r4, r0
 8024a90:	601c      	str	r4, [r3, #0]
 8024a92:	188c      	adds	r4, r1, r2
 8024a94:	19e4      	adds	r4, r4, r7
 8024a96:	4464      	add	r4, ip
 8024a98:	605c      	str	r4, [r3, #4]
 8024a9a:	464c      	mov	r4, r9
 8024a9c:	1b64      	subs	r4, r4, r5
 8024a9e:	4444      	add	r4, r8
 8024aa0:	1a24      	subs	r4, r4, r0
 8024aa2:	609c      	str	r4, [r3, #8]
 8024aa4:	1a8c      	subs	r4, r1, r2
 8024aa6:	19e4      	adds	r4, r4, r7
 8024aa8:	1ba4      	subs	r4, r4, r6
 8024aaa:	60dc      	str	r4, [r3, #12]
 8024aac:	464c      	mov	r4, r9
 8024aae:	4646      	mov	r6, r8
 8024ab0:	1aa4      	subs	r4, r4, r2
 8024ab2:	1ba4      	subs	r4, r4, r6
 8024ab4:	4464      	add	r4, ip
 8024ab6:	611c      	str	r4, [r3, #16]
 8024ab8:	194c      	adds	r4, r1, r5
 8024aba:	1be4      	subs	r4, r4, r7
 8024abc:	1a24      	subs	r4, r4, r0
 8024abe:	615c      	str	r4, [r3, #20]
 8024ac0:	4644      	mov	r4, r8
 8024ac2:	4666      	mov	r6, ip
 8024ac4:	444a      	add	r2, r9
 8024ac6:	1b12      	subs	r2, r2, r4
 8024ac8:	1b92      	subs	r2, r2, r6
 8024aca:	619a      	str	r2, [r3, #24]
 8024acc:	1b4a      	subs	r2, r1, r5
 8024ace:	1bd1      	subs	r1, r2, r7
 8024ad0:	2201      	movs	r2, #1
 8024ad2:	4252      	negs	r2, r2
 8024ad4:	4694      	mov	ip, r2
 8024ad6:	44e2      	add	sl, ip
 8024ad8:	4652      	mov	r2, sl
 8024ada:	1809      	adds	r1, r1, r0
 8024adc:	61d9      	str	r1, [r3, #28]
 8024ade:	3320      	adds	r3, #32
 8024ae0:	2a00      	cmp	r2, #0
 8024ae2:	d1c6      	bne.n	8024a72 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8024ae4:	b027      	add	sp, #156	@ 0x9c
 8024ae6:	bc3c      	pop	{r2, r3, r4, r5}
 8024ae8:	4690      	mov	r8, r2
 8024aea:	4699      	mov	r9, r3
 8024aec:	46a2      	mov	sl, r4
 8024aee:	46ab      	mov	fp, r5
 8024af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024af2:	469a      	mov	sl, r3
 8024af4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024af6:	e7bc      	b.n	8024a72 <arm_radix4_butterfly_inverse_q31+0x4ba>

08024af8 <arm_cmplx_mag_squared_q31>:
 8024af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024afa:	464f      	mov	r7, r9
 8024afc:	4646      	mov	r6, r8
 8024afe:	0004      	movs	r4, r0
 8024b00:	b4c0      	push	{r6, r7}
 8024b02:	0016      	movs	r6, r2
 8024b04:	000f      	movs	r7, r1
 8024b06:	2a00      	cmp	r2, #0
 8024b08:	d018      	beq.n	8024b3c <arm_cmplx_mag_squared_q31+0x44>
 8024b0a:	6823      	ldr	r3, [r4, #0]
 8024b0c:	6822      	ldr	r2, [r4, #0]
 8024b0e:	17d9      	asrs	r1, r3, #31
 8024b10:	6863      	ldr	r3, [r4, #4]
 8024b12:	0010      	movs	r0, r2
 8024b14:	4698      	mov	r8, r3
 8024b16:	17db      	asrs	r3, r3, #31
 8024b18:	4699      	mov	r9, r3
 8024b1a:	000b      	movs	r3, r1
 8024b1c:	f7db fd50 	bl	80005c0 <__aeabi_lmul>
 8024b20:	4642      	mov	r2, r8
 8024b22:	104d      	asrs	r5, r1, #1
 8024b24:	464b      	mov	r3, r9
 8024b26:	4640      	mov	r0, r8
 8024b28:	4649      	mov	r1, r9
 8024b2a:	f7db fd49 	bl	80005c0 <__aeabi_lmul>
 8024b2e:	1049      	asrs	r1, r1, #1
 8024b30:	1869      	adds	r1, r5, r1
 8024b32:	3e01      	subs	r6, #1
 8024b34:	c702      	stmia	r7!, {r1}
 8024b36:	3408      	adds	r4, #8
 8024b38:	2e00      	cmp	r6, #0
 8024b3a:	d1e6      	bne.n	8024b0a <arm_cmplx_mag_squared_q31+0x12>
 8024b3c:	bc0c      	pop	{r2, r3}
 8024b3e:	4690      	mov	r8, r2
 8024b40:	4699      	mov	r9, r3
 8024b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024b44 <arm_mult_q31>:
 8024b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b46:	4646      	mov	r6, r8
 8024b48:	464f      	mov	r7, r9
 8024b4a:	4690      	mov	r8, r2
 8024b4c:	b4c0      	push	{r6, r7}
 8024b4e:	001d      	movs	r5, r3
 8024b50:	0006      	movs	r6, r0
 8024b52:	000f      	movs	r7, r1
 8024b54:	2400      	movs	r4, #0
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	d020      	beq.n	8024b9c <arm_mult_q31+0x58>
 8024b5a:	4b12      	ldr	r3, [pc, #72]	@ (8024ba4 <arm_mult_q31+0x60>)
 8024b5c:	4699      	mov	r9, r3
 8024b5e:	e007      	b.n	8024b70 <arm_mult_q31+0x2c>
 8024b60:	464b      	mov	r3, r9
 8024b62:	4059      	eors	r1, r3
 8024b64:	4643      	mov	r3, r8
 8024b66:	3d01      	subs	r5, #1
 8024b68:	5119      	str	r1, [r3, r4]
 8024b6a:	3404      	adds	r4, #4
 8024b6c:	2d00      	cmp	r5, #0
 8024b6e:	d015      	beq.n	8024b9c <arm_mult_q31+0x58>
 8024b70:	5933      	ldr	r3, [r6, r4]
 8024b72:	593a      	ldr	r2, [r7, r4]
 8024b74:	17d9      	asrs	r1, r3, #31
 8024b76:	593b      	ldr	r3, [r7, r4]
 8024b78:	5930      	ldr	r0, [r6, r4]
 8024b7a:	17db      	asrs	r3, r3, #31
 8024b7c:	f7db fd20 	bl	80005c0 <__aeabi_lmul>
 8024b80:	004b      	lsls	r3, r1, #1
 8024b82:	0fc0      	lsrs	r0, r0, #31
 8024b84:	4318      	orrs	r0, r3
 8024b86:	17c9      	asrs	r1, r1, #31
 8024b88:	17c3      	asrs	r3, r0, #31
 8024b8a:	428b      	cmp	r3, r1
 8024b8c:	d1e8      	bne.n	8024b60 <arm_mult_q31+0x1c>
 8024b8e:	0001      	movs	r1, r0
 8024b90:	4643      	mov	r3, r8
 8024b92:	3d01      	subs	r5, #1
 8024b94:	5119      	str	r1, [r3, r4]
 8024b96:	3404      	adds	r4, #4
 8024b98:	2d00      	cmp	r5, #0
 8024b9a:	d1e9      	bne.n	8024b70 <arm_mult_q31+0x2c>
 8024b9c:	bc0c      	pop	{r2, r3}
 8024b9e:	4690      	mov	r8, r2
 8024ba0:	4699      	mov	r9, r3
 8024ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ba4:	7fffffff 	.word	0x7fffffff

08024ba8 <arm_add_q31>:
 8024ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024baa:	465f      	mov	r7, fp
 8024bac:	4656      	mov	r6, sl
 8024bae:	464d      	mov	r5, r9
 8024bb0:	4644      	mov	r4, r8
 8024bb2:	b4f0      	push	{r4, r5, r6, r7}
 8024bb4:	4693      	mov	fp, r2
 8024bb6:	b083      	sub	sp, #12
 8024bb8:	4681      	mov	r9, r0
 8024bba:	468a      	mov	sl, r1
 8024bbc:	4698      	mov	r8, r3
 8024bbe:	2200      	movs	r2, #0
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	d020      	beq.n	8024c06 <arm_add_q31+0x5e>
 8024bc4:	4649      	mov	r1, r9
 8024bc6:	4653      	mov	r3, sl
 8024bc8:	588e      	ldr	r6, [r1, r2]
 8024bca:	589b      	ldr	r3, [r3, r2]
 8024bcc:	17f7      	asrs	r7, r6, #31
 8024bce:	001c      	movs	r4, r3
 8024bd0:	0030      	movs	r0, r6
 8024bd2:	0039      	movs	r1, r7
 8024bd4:	17dd      	asrs	r5, r3, #31
 8024bd6:	46b4      	mov	ip, r6
 8024bd8:	1900      	adds	r0, r0, r4
 8024bda:	4169      	adcs	r1, r5
 8024bdc:	4463      	add	r3, ip
 8024bde:	9000      	str	r0, [sp, #0]
 8024be0:	9101      	str	r1, [sp, #4]
 8024be2:	17d9      	asrs	r1, r3, #31
 8024be4:	468c      	mov	ip, r1
 8024be6:	9901      	ldr	r1, [sp, #4]
 8024be8:	458c      	cmp	ip, r1
 8024bea:	d002      	beq.n	8024bf2 <arm_add_q31+0x4a>
 8024bec:	17cb      	asrs	r3, r1, #31
 8024bee:	4909      	ldr	r1, [pc, #36]	@ (8024c14 <arm_add_q31+0x6c>)
 8024bf0:	404b      	eors	r3, r1
 8024bf2:	4659      	mov	r1, fp
 8024bf4:	508b      	str	r3, [r1, r2]
 8024bf6:	2301      	movs	r3, #1
 8024bf8:	425b      	negs	r3, r3
 8024bfa:	469c      	mov	ip, r3
 8024bfc:	44e0      	add	r8, ip
 8024bfe:	4643      	mov	r3, r8
 8024c00:	3204      	adds	r2, #4
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	d1de      	bne.n	8024bc4 <arm_add_q31+0x1c>
 8024c06:	b003      	add	sp, #12
 8024c08:	bc3c      	pop	{r2, r3, r4, r5}
 8024c0a:	4690      	mov	r8, r2
 8024c0c:	4699      	mov	r9, r3
 8024c0e:	46a2      	mov	sl, r4
 8024c10:	46ab      	mov	fp, r5
 8024c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c14:	7fffffff 	.word	0x7fffffff

08024c18 <atof>:
 8024c18:	b510      	push	{r4, lr}
 8024c1a:	2100      	movs	r1, #0
 8024c1c:	f000 fe1e 	bl	802585c <strtod>
 8024c20:	bd10      	pop	{r4, pc}

08024c22 <atoi>:
 8024c22:	b510      	push	{r4, lr}
 8024c24:	220a      	movs	r2, #10
 8024c26:	2100      	movs	r1, #0
 8024c28:	f000 feb0 	bl	802598c <strtol>
 8024c2c:	bd10      	pop	{r4, pc}
	...

08024c30 <sulp>:
 8024c30:	b570      	push	{r4, r5, r6, lr}
 8024c32:	0016      	movs	r6, r2
 8024c34:	000d      	movs	r5, r1
 8024c36:	f003 fced 	bl	8028614 <__ulp>
 8024c3a:	2e00      	cmp	r6, #0
 8024c3c:	d00d      	beq.n	8024c5a <sulp+0x2a>
 8024c3e:	236b      	movs	r3, #107	@ 0x6b
 8024c40:	006a      	lsls	r2, r5, #1
 8024c42:	0d52      	lsrs	r2, r2, #21
 8024c44:	1a9b      	subs	r3, r3, r2
 8024c46:	2b00      	cmp	r3, #0
 8024c48:	dd07      	ble.n	8024c5a <sulp+0x2a>
 8024c4a:	2400      	movs	r4, #0
 8024c4c:	4a03      	ldr	r2, [pc, #12]	@ (8024c5c <sulp+0x2c>)
 8024c4e:	051b      	lsls	r3, r3, #20
 8024c50:	189d      	adds	r5, r3, r2
 8024c52:	002b      	movs	r3, r5
 8024c54:	0022      	movs	r2, r4
 8024c56:	f7dd fe7d 	bl	8002954 <__aeabi_dmul>
 8024c5a:	bd70      	pop	{r4, r5, r6, pc}
 8024c5c:	3ff00000 	.word	0x3ff00000

08024c60 <_strtod_l>:
 8024c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c62:	b0a3      	sub	sp, #140	@ 0x8c
 8024c64:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024c66:	2200      	movs	r2, #0
 8024c68:	2600      	movs	r6, #0
 8024c6a:	2700      	movs	r7, #0
 8024c6c:	9005      	str	r0, [sp, #20]
 8024c6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8024c70:	921e      	str	r2, [sp, #120]	@ 0x78
 8024c72:	911d      	str	r1, [sp, #116]	@ 0x74
 8024c74:	780a      	ldrb	r2, [r1, #0]
 8024c76:	2a2b      	cmp	r2, #43	@ 0x2b
 8024c78:	d053      	beq.n	8024d22 <_strtod_l+0xc2>
 8024c7a:	d83f      	bhi.n	8024cfc <_strtod_l+0x9c>
 8024c7c:	2a0d      	cmp	r2, #13
 8024c7e:	d839      	bhi.n	8024cf4 <_strtod_l+0x94>
 8024c80:	2a08      	cmp	r2, #8
 8024c82:	d839      	bhi.n	8024cf8 <_strtod_l+0x98>
 8024c84:	2a00      	cmp	r2, #0
 8024c86:	d042      	beq.n	8024d0e <_strtod_l+0xae>
 8024c88:	2200      	movs	r2, #0
 8024c8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8024c8c:	2100      	movs	r1, #0
 8024c8e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024c90:	910c      	str	r1, [sp, #48]	@ 0x30
 8024c92:	782a      	ldrb	r2, [r5, #0]
 8024c94:	2a30      	cmp	r2, #48	@ 0x30
 8024c96:	d000      	beq.n	8024c9a <_strtod_l+0x3a>
 8024c98:	e083      	b.n	8024da2 <_strtod_l+0x142>
 8024c9a:	786a      	ldrb	r2, [r5, #1]
 8024c9c:	3120      	adds	r1, #32
 8024c9e:	438a      	bics	r2, r1
 8024ca0:	2a58      	cmp	r2, #88	@ 0x58
 8024ca2:	d000      	beq.n	8024ca6 <_strtod_l+0x46>
 8024ca4:	e073      	b.n	8024d8e <_strtod_l+0x12e>
 8024ca6:	9302      	str	r3, [sp, #8]
 8024ca8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024caa:	4a9b      	ldr	r2, [pc, #620]	@ (8024f18 <_strtod_l+0x2b8>)
 8024cac:	9301      	str	r3, [sp, #4]
 8024cae:	ab1e      	add	r3, sp, #120	@ 0x78
 8024cb0:	9300      	str	r3, [sp, #0]
 8024cb2:	9805      	ldr	r0, [sp, #20]
 8024cb4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024cb6:	a91d      	add	r1, sp, #116	@ 0x74
 8024cb8:	f002 fd64 	bl	8027784 <__gethex>
 8024cbc:	230f      	movs	r3, #15
 8024cbe:	0002      	movs	r2, r0
 8024cc0:	401a      	ands	r2, r3
 8024cc2:	0004      	movs	r4, r0
 8024cc4:	9206      	str	r2, [sp, #24]
 8024cc6:	4218      	tst	r0, r3
 8024cc8:	d005      	beq.n	8024cd6 <_strtod_l+0x76>
 8024cca:	2a06      	cmp	r2, #6
 8024ccc:	d12b      	bne.n	8024d26 <_strtod_l+0xc6>
 8024cce:	2300      	movs	r3, #0
 8024cd0:	3501      	adds	r5, #1
 8024cd2:	951d      	str	r5, [sp, #116]	@ 0x74
 8024cd4:	9312      	str	r3, [sp, #72]	@ 0x48
 8024cd6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d002      	beq.n	8024ce2 <_strtod_l+0x82>
 8024cdc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cde:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024ce0:	6013      	str	r3, [r2, #0]
 8024ce2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	d019      	beq.n	8024d1c <_strtod_l+0xbc>
 8024ce8:	2380      	movs	r3, #128	@ 0x80
 8024cea:	0030      	movs	r0, r6
 8024cec:	061b      	lsls	r3, r3, #24
 8024cee:	18f9      	adds	r1, r7, r3
 8024cf0:	b023      	add	sp, #140	@ 0x8c
 8024cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024cf4:	2a20      	cmp	r2, #32
 8024cf6:	d1c7      	bne.n	8024c88 <_strtod_l+0x28>
 8024cf8:	3101      	adds	r1, #1
 8024cfa:	e7ba      	b.n	8024c72 <_strtod_l+0x12>
 8024cfc:	2a2d      	cmp	r2, #45	@ 0x2d
 8024cfe:	d1c3      	bne.n	8024c88 <_strtod_l+0x28>
 8024d00:	3a2c      	subs	r2, #44	@ 0x2c
 8024d02:	9212      	str	r2, [sp, #72]	@ 0x48
 8024d04:	1c4a      	adds	r2, r1, #1
 8024d06:	921d      	str	r2, [sp, #116]	@ 0x74
 8024d08:	784a      	ldrb	r2, [r1, #1]
 8024d0a:	2a00      	cmp	r2, #0
 8024d0c:	d1be      	bne.n	8024c8c <_strtod_l+0x2c>
 8024d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d10:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d12:	2300      	movs	r3, #0
 8024d14:	9312      	str	r3, [sp, #72]	@ 0x48
 8024d16:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024d18:	2b00      	cmp	r3, #0
 8024d1a:	d1df      	bne.n	8024cdc <_strtod_l+0x7c>
 8024d1c:	0030      	movs	r0, r6
 8024d1e:	0039      	movs	r1, r7
 8024d20:	e7e6      	b.n	8024cf0 <_strtod_l+0x90>
 8024d22:	2200      	movs	r2, #0
 8024d24:	e7ed      	b.n	8024d02 <_strtod_l+0xa2>
 8024d26:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024d28:	2a00      	cmp	r2, #0
 8024d2a:	d007      	beq.n	8024d3c <_strtod_l+0xdc>
 8024d2c:	2135      	movs	r1, #53	@ 0x35
 8024d2e:	a820      	add	r0, sp, #128	@ 0x80
 8024d30:	f003 fd66 	bl	8028800 <__copybits>
 8024d34:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024d36:	9805      	ldr	r0, [sp, #20]
 8024d38:	f003 f928 	bl	8027f8c <_Bfree>
 8024d3c:	9806      	ldr	r0, [sp, #24]
 8024d3e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024d40:	3801      	subs	r0, #1
 8024d42:	2804      	cmp	r0, #4
 8024d44:	d806      	bhi.n	8024d54 <_strtod_l+0xf4>
 8024d46:	f7db fa19 	bl	800017c <__gnu_thumb1_case_uqi>
 8024d4a:	0312      	.short	0x0312
 8024d4c:	1e1c      	.short	0x1e1c
 8024d4e:	12          	.byte	0x12
 8024d4f:	00          	.byte	0x00
 8024d50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d52:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024d54:	05e4      	lsls	r4, r4, #23
 8024d56:	d502      	bpl.n	8024d5e <_strtod_l+0xfe>
 8024d58:	2380      	movs	r3, #128	@ 0x80
 8024d5a:	061b      	lsls	r3, r3, #24
 8024d5c:	431f      	orrs	r7, r3
 8024d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8024f1c <_strtod_l+0x2bc>)
 8024d60:	423b      	tst	r3, r7
 8024d62:	d1b8      	bne.n	8024cd6 <_strtod_l+0x76>
 8024d64:	f001 fd9e 	bl	80268a4 <__errno>
 8024d68:	2322      	movs	r3, #34	@ 0x22
 8024d6a:	6003      	str	r3, [r0, #0]
 8024d6c:	e7b3      	b.n	8024cd6 <_strtod_l+0x76>
 8024d6e:	496c      	ldr	r1, [pc, #432]	@ (8024f20 <_strtod_l+0x2c0>)
 8024d70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024d72:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d74:	400a      	ands	r2, r1
 8024d76:	496b      	ldr	r1, [pc, #428]	@ (8024f24 <_strtod_l+0x2c4>)
 8024d78:	185b      	adds	r3, r3, r1
 8024d7a:	051b      	lsls	r3, r3, #20
 8024d7c:	431a      	orrs	r2, r3
 8024d7e:	0017      	movs	r7, r2
 8024d80:	e7e8      	b.n	8024d54 <_strtod_l+0xf4>
 8024d82:	4f66      	ldr	r7, [pc, #408]	@ (8024f1c <_strtod_l+0x2bc>)
 8024d84:	e7e6      	b.n	8024d54 <_strtod_l+0xf4>
 8024d86:	2601      	movs	r6, #1
 8024d88:	4f67      	ldr	r7, [pc, #412]	@ (8024f28 <_strtod_l+0x2c8>)
 8024d8a:	4276      	negs	r6, r6
 8024d8c:	e7e2      	b.n	8024d54 <_strtod_l+0xf4>
 8024d8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d90:	1c5a      	adds	r2, r3, #1
 8024d92:	921d      	str	r2, [sp, #116]	@ 0x74
 8024d94:	785b      	ldrb	r3, [r3, #1]
 8024d96:	2b30      	cmp	r3, #48	@ 0x30
 8024d98:	d0f9      	beq.n	8024d8e <_strtod_l+0x12e>
 8024d9a:	2b00      	cmp	r3, #0
 8024d9c:	d09b      	beq.n	8024cd6 <_strtod_l+0x76>
 8024d9e:	2301      	movs	r3, #1
 8024da0:	930c      	str	r3, [sp, #48]	@ 0x30
 8024da2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024da4:	220a      	movs	r2, #10
 8024da6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024da8:	2300      	movs	r3, #0
 8024daa:	9310      	str	r3, [sp, #64]	@ 0x40
 8024dac:	930d      	str	r3, [sp, #52]	@ 0x34
 8024dae:	9308      	str	r3, [sp, #32]
 8024db0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024db2:	7804      	ldrb	r4, [r0, #0]
 8024db4:	0023      	movs	r3, r4
 8024db6:	3b30      	subs	r3, #48	@ 0x30
 8024db8:	b2d9      	uxtb	r1, r3
 8024dba:	2909      	cmp	r1, #9
 8024dbc:	d927      	bls.n	8024e0e <_strtod_l+0x1ae>
 8024dbe:	2201      	movs	r2, #1
 8024dc0:	495a      	ldr	r1, [pc, #360]	@ (8024f2c <_strtod_l+0x2cc>)
 8024dc2:	f001 fce1 	bl	8026788 <strncmp>
 8024dc6:	2800      	cmp	r0, #0
 8024dc8:	d033      	beq.n	8024e32 <_strtod_l+0x1d2>
 8024dca:	2000      	movs	r0, #0
 8024dcc:	0023      	movs	r3, r4
 8024dce:	4684      	mov	ip, r0
 8024dd0:	9a08      	ldr	r2, [sp, #32]
 8024dd2:	900e      	str	r0, [sp, #56]	@ 0x38
 8024dd4:	9206      	str	r2, [sp, #24]
 8024dd6:	2220      	movs	r2, #32
 8024dd8:	0019      	movs	r1, r3
 8024dda:	4391      	bics	r1, r2
 8024ddc:	000a      	movs	r2, r1
 8024dde:	2100      	movs	r1, #0
 8024de0:	9107      	str	r1, [sp, #28]
 8024de2:	2a45      	cmp	r2, #69	@ 0x45
 8024de4:	d000      	beq.n	8024de8 <_strtod_l+0x188>
 8024de6:	e0cb      	b.n	8024f80 <_strtod_l+0x320>
 8024de8:	9b06      	ldr	r3, [sp, #24]
 8024dea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024dec:	4303      	orrs	r3, r0
 8024dee:	4313      	orrs	r3, r2
 8024df0:	428b      	cmp	r3, r1
 8024df2:	d08c      	beq.n	8024d0e <_strtod_l+0xae>
 8024df4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8024df8:	3301      	adds	r3, #1
 8024dfa:	931d      	str	r3, [sp, #116]	@ 0x74
 8024dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024dfe:	785b      	ldrb	r3, [r3, #1]
 8024e00:	2b2b      	cmp	r3, #43	@ 0x2b
 8024e02:	d07b      	beq.n	8024efc <_strtod_l+0x29c>
 8024e04:	000c      	movs	r4, r1
 8024e06:	2b2d      	cmp	r3, #45	@ 0x2d
 8024e08:	d17e      	bne.n	8024f08 <_strtod_l+0x2a8>
 8024e0a:	2401      	movs	r4, #1
 8024e0c:	e077      	b.n	8024efe <_strtod_l+0x29e>
 8024e0e:	9908      	ldr	r1, [sp, #32]
 8024e10:	2908      	cmp	r1, #8
 8024e12:	dc09      	bgt.n	8024e28 <_strtod_l+0x1c8>
 8024e14:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024e16:	4351      	muls	r1, r2
 8024e18:	185b      	adds	r3, r3, r1
 8024e1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8024e1c:	9b08      	ldr	r3, [sp, #32]
 8024e1e:	3001      	adds	r0, #1
 8024e20:	3301      	adds	r3, #1
 8024e22:	9308      	str	r3, [sp, #32]
 8024e24:	901d      	str	r0, [sp, #116]	@ 0x74
 8024e26:	e7c3      	b.n	8024db0 <_strtod_l+0x150>
 8024e28:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024e2a:	4355      	muls	r5, r2
 8024e2c:	195b      	adds	r3, r3, r5
 8024e2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024e30:	e7f4      	b.n	8024e1c <_strtod_l+0x1bc>
 8024e32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e34:	1c5a      	adds	r2, r3, #1
 8024e36:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e38:	9a08      	ldr	r2, [sp, #32]
 8024e3a:	785b      	ldrb	r3, [r3, #1]
 8024e3c:	2a00      	cmp	r2, #0
 8024e3e:	d03e      	beq.n	8024ebe <_strtod_l+0x25e>
 8024e40:	900e      	str	r0, [sp, #56]	@ 0x38
 8024e42:	9206      	str	r2, [sp, #24]
 8024e44:	001a      	movs	r2, r3
 8024e46:	3a30      	subs	r2, #48	@ 0x30
 8024e48:	2a09      	cmp	r2, #9
 8024e4a:	d912      	bls.n	8024e72 <_strtod_l+0x212>
 8024e4c:	2201      	movs	r2, #1
 8024e4e:	4694      	mov	ip, r2
 8024e50:	e7c1      	b.n	8024dd6 <_strtod_l+0x176>
 8024e52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e54:	3001      	adds	r0, #1
 8024e56:	1c5a      	adds	r2, r3, #1
 8024e58:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e5a:	785b      	ldrb	r3, [r3, #1]
 8024e5c:	2b30      	cmp	r3, #48	@ 0x30
 8024e5e:	d0f8      	beq.n	8024e52 <_strtod_l+0x1f2>
 8024e60:	001a      	movs	r2, r3
 8024e62:	3a31      	subs	r2, #49	@ 0x31
 8024e64:	2a08      	cmp	r2, #8
 8024e66:	d844      	bhi.n	8024ef2 <_strtod_l+0x292>
 8024e68:	900e      	str	r0, [sp, #56]	@ 0x38
 8024e6a:	2000      	movs	r0, #0
 8024e6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024e6e:	9006      	str	r0, [sp, #24]
 8024e70:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024e72:	001c      	movs	r4, r3
 8024e74:	1c42      	adds	r2, r0, #1
 8024e76:	3c30      	subs	r4, #48	@ 0x30
 8024e78:	2b30      	cmp	r3, #48	@ 0x30
 8024e7a:	d01a      	beq.n	8024eb2 <_strtod_l+0x252>
 8024e7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024e7e:	9906      	ldr	r1, [sp, #24]
 8024e80:	189b      	adds	r3, r3, r2
 8024e82:	930e      	str	r3, [sp, #56]	@ 0x38
 8024e84:	230a      	movs	r3, #10
 8024e86:	469c      	mov	ip, r3
 8024e88:	9d06      	ldr	r5, [sp, #24]
 8024e8a:	1c4b      	adds	r3, r1, #1
 8024e8c:	1b5d      	subs	r5, r3, r5
 8024e8e:	42aa      	cmp	r2, r5
 8024e90:	dc17      	bgt.n	8024ec2 <_strtod_l+0x262>
 8024e92:	43c3      	mvns	r3, r0
 8024e94:	9a06      	ldr	r2, [sp, #24]
 8024e96:	17db      	asrs	r3, r3, #31
 8024e98:	4003      	ands	r3, r0
 8024e9a:	18d1      	adds	r1, r2, r3
 8024e9c:	3201      	adds	r2, #1
 8024e9e:	18d3      	adds	r3, r2, r3
 8024ea0:	9306      	str	r3, [sp, #24]
 8024ea2:	2908      	cmp	r1, #8
 8024ea4:	dc1c      	bgt.n	8024ee0 <_strtod_l+0x280>
 8024ea6:	230a      	movs	r3, #10
 8024ea8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024eaa:	4353      	muls	r3, r2
 8024eac:	2200      	movs	r2, #0
 8024eae:	18e3      	adds	r3, r4, r3
 8024eb0:	930d      	str	r3, [sp, #52]	@ 0x34
 8024eb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024eb4:	0010      	movs	r0, r2
 8024eb6:	1c59      	adds	r1, r3, #1
 8024eb8:	911d      	str	r1, [sp, #116]	@ 0x74
 8024eba:	785b      	ldrb	r3, [r3, #1]
 8024ebc:	e7c2      	b.n	8024e44 <_strtod_l+0x1e4>
 8024ebe:	9808      	ldr	r0, [sp, #32]
 8024ec0:	e7cc      	b.n	8024e5c <_strtod_l+0x1fc>
 8024ec2:	2908      	cmp	r1, #8
 8024ec4:	dc05      	bgt.n	8024ed2 <_strtod_l+0x272>
 8024ec6:	4665      	mov	r5, ip
 8024ec8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024eca:	4369      	muls	r1, r5
 8024ecc:	910d      	str	r1, [sp, #52]	@ 0x34
 8024ece:	0019      	movs	r1, r3
 8024ed0:	e7da      	b.n	8024e88 <_strtod_l+0x228>
 8024ed2:	2b10      	cmp	r3, #16
 8024ed4:	dcfb      	bgt.n	8024ece <_strtod_l+0x26e>
 8024ed6:	4661      	mov	r1, ip
 8024ed8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024eda:	434d      	muls	r5, r1
 8024edc:	9510      	str	r5, [sp, #64]	@ 0x40
 8024ede:	e7f6      	b.n	8024ece <_strtod_l+0x26e>
 8024ee0:	2200      	movs	r2, #0
 8024ee2:	290f      	cmp	r1, #15
 8024ee4:	dce5      	bgt.n	8024eb2 <_strtod_l+0x252>
 8024ee6:	230a      	movs	r3, #10
 8024ee8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024eea:	435d      	muls	r5, r3
 8024eec:	1963      	adds	r3, r4, r5
 8024eee:	9310      	str	r3, [sp, #64]	@ 0x40
 8024ef0:	e7df      	b.n	8024eb2 <_strtod_l+0x252>
 8024ef2:	2200      	movs	r2, #0
 8024ef4:	920e      	str	r2, [sp, #56]	@ 0x38
 8024ef6:	9206      	str	r2, [sp, #24]
 8024ef8:	3201      	adds	r2, #1
 8024efa:	e7a8      	b.n	8024e4e <_strtod_l+0x1ee>
 8024efc:	2400      	movs	r4, #0
 8024efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f00:	3302      	adds	r3, #2
 8024f02:	931d      	str	r3, [sp, #116]	@ 0x74
 8024f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f06:	789b      	ldrb	r3, [r3, #2]
 8024f08:	001a      	movs	r2, r3
 8024f0a:	3a30      	subs	r2, #48	@ 0x30
 8024f0c:	2a09      	cmp	r2, #9
 8024f0e:	d913      	bls.n	8024f38 <_strtod_l+0x2d8>
 8024f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f12:	921d      	str	r2, [sp, #116]	@ 0x74
 8024f14:	2200      	movs	r2, #0
 8024f16:	e032      	b.n	8024f7e <_strtod_l+0x31e>
 8024f18:	0802ef98 	.word	0x0802ef98
 8024f1c:	7ff00000 	.word	0x7ff00000
 8024f20:	ffefffff 	.word	0xffefffff
 8024f24:	00000433 	.word	0x00000433
 8024f28:	7fffffff 	.word	0x7fffffff
 8024f2c:	0802edb0 	.word	0x0802edb0
 8024f30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f32:	1c5a      	adds	r2, r3, #1
 8024f34:	921d      	str	r2, [sp, #116]	@ 0x74
 8024f36:	785b      	ldrb	r3, [r3, #1]
 8024f38:	2b30      	cmp	r3, #48	@ 0x30
 8024f3a:	d0f9      	beq.n	8024f30 <_strtod_l+0x2d0>
 8024f3c:	2200      	movs	r2, #0
 8024f3e:	9207      	str	r2, [sp, #28]
 8024f40:	001a      	movs	r2, r3
 8024f42:	3a31      	subs	r2, #49	@ 0x31
 8024f44:	2a08      	cmp	r2, #8
 8024f46:	d81b      	bhi.n	8024f80 <_strtod_l+0x320>
 8024f48:	3b30      	subs	r3, #48	@ 0x30
 8024f4a:	001a      	movs	r2, r3
 8024f4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f4e:	9307      	str	r3, [sp, #28]
 8024f50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f52:	1c59      	adds	r1, r3, #1
 8024f54:	911d      	str	r1, [sp, #116]	@ 0x74
 8024f56:	785b      	ldrb	r3, [r3, #1]
 8024f58:	001d      	movs	r5, r3
 8024f5a:	3d30      	subs	r5, #48	@ 0x30
 8024f5c:	2d09      	cmp	r5, #9
 8024f5e:	d93a      	bls.n	8024fd6 <_strtod_l+0x376>
 8024f60:	9d07      	ldr	r5, [sp, #28]
 8024f62:	1b49      	subs	r1, r1, r5
 8024f64:	000d      	movs	r5, r1
 8024f66:	49b3      	ldr	r1, [pc, #716]	@ (8025234 <_strtod_l+0x5d4>)
 8024f68:	9107      	str	r1, [sp, #28]
 8024f6a:	2d08      	cmp	r5, #8
 8024f6c:	dc03      	bgt.n	8024f76 <_strtod_l+0x316>
 8024f6e:	9207      	str	r2, [sp, #28]
 8024f70:	428a      	cmp	r2, r1
 8024f72:	dd00      	ble.n	8024f76 <_strtod_l+0x316>
 8024f74:	9107      	str	r1, [sp, #28]
 8024f76:	2c00      	cmp	r4, #0
 8024f78:	d002      	beq.n	8024f80 <_strtod_l+0x320>
 8024f7a:	9a07      	ldr	r2, [sp, #28]
 8024f7c:	4252      	negs	r2, r2
 8024f7e:	9207      	str	r2, [sp, #28]
 8024f80:	9a06      	ldr	r2, [sp, #24]
 8024f82:	2a00      	cmp	r2, #0
 8024f84:	d14b      	bne.n	802501e <_strtod_l+0x3be>
 8024f86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024f88:	4310      	orrs	r0, r2
 8024f8a:	d000      	beq.n	8024f8e <_strtod_l+0x32e>
 8024f8c:	e6a3      	b.n	8024cd6 <_strtod_l+0x76>
 8024f8e:	4662      	mov	r2, ip
 8024f90:	2a00      	cmp	r2, #0
 8024f92:	d000      	beq.n	8024f96 <_strtod_l+0x336>
 8024f94:	e6bb      	b.n	8024d0e <_strtod_l+0xae>
 8024f96:	2b69      	cmp	r3, #105	@ 0x69
 8024f98:	d025      	beq.n	8024fe6 <_strtod_l+0x386>
 8024f9a:	dc21      	bgt.n	8024fe0 <_strtod_l+0x380>
 8024f9c:	2b49      	cmp	r3, #73	@ 0x49
 8024f9e:	d022      	beq.n	8024fe6 <_strtod_l+0x386>
 8024fa0:	2b4e      	cmp	r3, #78	@ 0x4e
 8024fa2:	d000      	beq.n	8024fa6 <_strtod_l+0x346>
 8024fa4:	e6b3      	b.n	8024d0e <_strtod_l+0xae>
 8024fa6:	49a4      	ldr	r1, [pc, #656]	@ (8025238 <_strtod_l+0x5d8>)
 8024fa8:	a81d      	add	r0, sp, #116	@ 0x74
 8024faa:	f002 fe21 	bl	8027bf0 <__match>
 8024fae:	2800      	cmp	r0, #0
 8024fb0:	d100      	bne.n	8024fb4 <_strtod_l+0x354>
 8024fb2:	e6ac      	b.n	8024d0e <_strtod_l+0xae>
 8024fb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024fb6:	781b      	ldrb	r3, [r3, #0]
 8024fb8:	2b28      	cmp	r3, #40	@ 0x28
 8024fba:	d12a      	bne.n	8025012 <_strtod_l+0x3b2>
 8024fbc:	499f      	ldr	r1, [pc, #636]	@ (802523c <_strtod_l+0x5dc>)
 8024fbe:	aa20      	add	r2, sp, #128	@ 0x80
 8024fc0:	a81d      	add	r0, sp, #116	@ 0x74
 8024fc2:	f002 fe29 	bl	8027c18 <__hexnan>
 8024fc6:	2805      	cmp	r0, #5
 8024fc8:	d123      	bne.n	8025012 <_strtod_l+0x3b2>
 8024fca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024fcc:	4a9c      	ldr	r2, [pc, #624]	@ (8025240 <_strtod_l+0x5e0>)
 8024fce:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024fd0:	431a      	orrs	r2, r3
 8024fd2:	0017      	movs	r7, r2
 8024fd4:	e67f      	b.n	8024cd6 <_strtod_l+0x76>
 8024fd6:	210a      	movs	r1, #10
 8024fd8:	434a      	muls	r2, r1
 8024fda:	18d2      	adds	r2, r2, r3
 8024fdc:	3a30      	subs	r2, #48	@ 0x30
 8024fde:	e7b7      	b.n	8024f50 <_strtod_l+0x2f0>
 8024fe0:	2b6e      	cmp	r3, #110	@ 0x6e
 8024fe2:	d0e0      	beq.n	8024fa6 <_strtod_l+0x346>
 8024fe4:	e693      	b.n	8024d0e <_strtod_l+0xae>
 8024fe6:	4997      	ldr	r1, [pc, #604]	@ (8025244 <_strtod_l+0x5e4>)
 8024fe8:	a81d      	add	r0, sp, #116	@ 0x74
 8024fea:	f002 fe01 	bl	8027bf0 <__match>
 8024fee:	2800      	cmp	r0, #0
 8024ff0:	d100      	bne.n	8024ff4 <_strtod_l+0x394>
 8024ff2:	e68c      	b.n	8024d0e <_strtod_l+0xae>
 8024ff4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ff6:	4994      	ldr	r1, [pc, #592]	@ (8025248 <_strtod_l+0x5e8>)
 8024ff8:	3b01      	subs	r3, #1
 8024ffa:	a81d      	add	r0, sp, #116	@ 0x74
 8024ffc:	931d      	str	r3, [sp, #116]	@ 0x74
 8024ffe:	f002 fdf7 	bl	8027bf0 <__match>
 8025002:	2800      	cmp	r0, #0
 8025004:	d102      	bne.n	802500c <_strtod_l+0x3ac>
 8025006:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025008:	3301      	adds	r3, #1
 802500a:	931d      	str	r3, [sp, #116]	@ 0x74
 802500c:	2600      	movs	r6, #0
 802500e:	4f8c      	ldr	r7, [pc, #560]	@ (8025240 <_strtod_l+0x5e0>)
 8025010:	e661      	b.n	8024cd6 <_strtod_l+0x76>
 8025012:	488e      	ldr	r0, [pc, #568]	@ (802524c <_strtod_l+0x5ec>)
 8025014:	f001 fc88 	bl	8026928 <nan>
 8025018:	0006      	movs	r6, r0
 802501a:	000f      	movs	r7, r1
 802501c:	e65b      	b.n	8024cd6 <_strtod_l+0x76>
 802501e:	9b07      	ldr	r3, [sp, #28]
 8025020:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025022:	1a9b      	subs	r3, r3, r2
 8025024:	930c      	str	r3, [sp, #48]	@ 0x30
 8025026:	9b08      	ldr	r3, [sp, #32]
 8025028:	2b00      	cmp	r3, #0
 802502a:	d101      	bne.n	8025030 <_strtod_l+0x3d0>
 802502c:	9b06      	ldr	r3, [sp, #24]
 802502e:	9308      	str	r3, [sp, #32]
 8025030:	9c06      	ldr	r4, [sp, #24]
 8025032:	2c10      	cmp	r4, #16
 8025034:	dd00      	ble.n	8025038 <_strtod_l+0x3d8>
 8025036:	2410      	movs	r4, #16
 8025038:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802503a:	f7de fc07 	bl	800384c <__aeabi_ui2d>
 802503e:	9b06      	ldr	r3, [sp, #24]
 8025040:	0006      	movs	r6, r0
 8025042:	000f      	movs	r7, r1
 8025044:	2b09      	cmp	r3, #9
 8025046:	dc13      	bgt.n	8025070 <_strtod_l+0x410>
 8025048:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802504a:	2b00      	cmp	r3, #0
 802504c:	d100      	bne.n	8025050 <_strtod_l+0x3f0>
 802504e:	e642      	b.n	8024cd6 <_strtod_l+0x76>
 8025050:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025052:	2b00      	cmp	r3, #0
 8025054:	dc00      	bgt.n	8025058 <_strtod_l+0x3f8>
 8025056:	e07e      	b.n	8025156 <_strtod_l+0x4f6>
 8025058:	2b16      	cmp	r3, #22
 802505a:	dc63      	bgt.n	8025124 <_strtod_l+0x4c4>
 802505c:	497c      	ldr	r1, [pc, #496]	@ (8025250 <_strtod_l+0x5f0>)
 802505e:	00db      	lsls	r3, r3, #3
 8025060:	18c9      	adds	r1, r1, r3
 8025062:	0032      	movs	r2, r6
 8025064:	6808      	ldr	r0, [r1, #0]
 8025066:	6849      	ldr	r1, [r1, #4]
 8025068:	003b      	movs	r3, r7
 802506a:	f7dd fc73 	bl	8002954 <__aeabi_dmul>
 802506e:	e7d3      	b.n	8025018 <_strtod_l+0x3b8>
 8025070:	0022      	movs	r2, r4
 8025072:	4b77      	ldr	r3, [pc, #476]	@ (8025250 <_strtod_l+0x5f0>)
 8025074:	3a09      	subs	r2, #9
 8025076:	00d2      	lsls	r2, r2, #3
 8025078:	189b      	adds	r3, r3, r2
 802507a:	681a      	ldr	r2, [r3, #0]
 802507c:	685b      	ldr	r3, [r3, #4]
 802507e:	f7dd fc69 	bl	8002954 <__aeabi_dmul>
 8025082:	0006      	movs	r6, r0
 8025084:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025086:	000f      	movs	r7, r1
 8025088:	f7de fbe0 	bl	800384c <__aeabi_ui2d>
 802508c:	000b      	movs	r3, r1
 802508e:	0002      	movs	r2, r0
 8025090:	0039      	movs	r1, r7
 8025092:	0030      	movs	r0, r6
 8025094:	f7dc fc5e 	bl	8001954 <__aeabi_dadd>
 8025098:	9b06      	ldr	r3, [sp, #24]
 802509a:	0006      	movs	r6, r0
 802509c:	000f      	movs	r7, r1
 802509e:	2b0f      	cmp	r3, #15
 80250a0:	ddd2      	ble.n	8025048 <_strtod_l+0x3e8>
 80250a2:	9b06      	ldr	r3, [sp, #24]
 80250a4:	1b1c      	subs	r4, r3, r4
 80250a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80250a8:	18e4      	adds	r4, r4, r3
 80250aa:	2c00      	cmp	r4, #0
 80250ac:	dc00      	bgt.n	80250b0 <_strtod_l+0x450>
 80250ae:	e09b      	b.n	80251e8 <_strtod_l+0x588>
 80250b0:	220f      	movs	r2, #15
 80250b2:	0023      	movs	r3, r4
 80250b4:	4013      	ands	r3, r2
 80250b6:	4214      	tst	r4, r2
 80250b8:	d00a      	beq.n	80250d0 <_strtod_l+0x470>
 80250ba:	4965      	ldr	r1, [pc, #404]	@ (8025250 <_strtod_l+0x5f0>)
 80250bc:	00db      	lsls	r3, r3, #3
 80250be:	18c9      	adds	r1, r1, r3
 80250c0:	0032      	movs	r2, r6
 80250c2:	6808      	ldr	r0, [r1, #0]
 80250c4:	6849      	ldr	r1, [r1, #4]
 80250c6:	003b      	movs	r3, r7
 80250c8:	f7dd fc44 	bl	8002954 <__aeabi_dmul>
 80250cc:	0006      	movs	r6, r0
 80250ce:	000f      	movs	r7, r1
 80250d0:	230f      	movs	r3, #15
 80250d2:	439c      	bics	r4, r3
 80250d4:	d073      	beq.n	80251be <_strtod_l+0x55e>
 80250d6:	3326      	adds	r3, #38	@ 0x26
 80250d8:	33ff      	adds	r3, #255	@ 0xff
 80250da:	429c      	cmp	r4, r3
 80250dc:	dd4b      	ble.n	8025176 <_strtod_l+0x516>
 80250de:	2300      	movs	r3, #0
 80250e0:	9306      	str	r3, [sp, #24]
 80250e2:	9307      	str	r3, [sp, #28]
 80250e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80250e6:	9308      	str	r3, [sp, #32]
 80250e8:	2322      	movs	r3, #34	@ 0x22
 80250ea:	2600      	movs	r6, #0
 80250ec:	9a05      	ldr	r2, [sp, #20]
 80250ee:	4f54      	ldr	r7, [pc, #336]	@ (8025240 <_strtod_l+0x5e0>)
 80250f0:	6013      	str	r3, [r2, #0]
 80250f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80250f4:	42b3      	cmp	r3, r6
 80250f6:	d100      	bne.n	80250fa <_strtod_l+0x49a>
 80250f8:	e5ed      	b.n	8024cd6 <_strtod_l+0x76>
 80250fa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80250fc:	9805      	ldr	r0, [sp, #20]
 80250fe:	f002 ff45 	bl	8027f8c <_Bfree>
 8025102:	9908      	ldr	r1, [sp, #32]
 8025104:	9805      	ldr	r0, [sp, #20]
 8025106:	f002 ff41 	bl	8027f8c <_Bfree>
 802510a:	9907      	ldr	r1, [sp, #28]
 802510c:	9805      	ldr	r0, [sp, #20]
 802510e:	f002 ff3d 	bl	8027f8c <_Bfree>
 8025112:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025114:	9805      	ldr	r0, [sp, #20]
 8025116:	f002 ff39 	bl	8027f8c <_Bfree>
 802511a:	9906      	ldr	r1, [sp, #24]
 802511c:	9805      	ldr	r0, [sp, #20]
 802511e:	f002 ff35 	bl	8027f8c <_Bfree>
 8025122:	e5d8      	b.n	8024cd6 <_strtod_l+0x76>
 8025124:	2325      	movs	r3, #37	@ 0x25
 8025126:	9a06      	ldr	r2, [sp, #24]
 8025128:	1a9b      	subs	r3, r3, r2
 802512a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802512c:	4293      	cmp	r3, r2
 802512e:	dbb8      	blt.n	80250a2 <_strtod_l+0x442>
 8025130:	240f      	movs	r4, #15
 8025132:	9b06      	ldr	r3, [sp, #24]
 8025134:	4d46      	ldr	r5, [pc, #280]	@ (8025250 <_strtod_l+0x5f0>)
 8025136:	1ae4      	subs	r4, r4, r3
 8025138:	00e1      	lsls	r1, r4, #3
 802513a:	1869      	adds	r1, r5, r1
 802513c:	0032      	movs	r2, r6
 802513e:	6808      	ldr	r0, [r1, #0]
 8025140:	6849      	ldr	r1, [r1, #4]
 8025142:	003b      	movs	r3, r7
 8025144:	f7dd fc06 	bl	8002954 <__aeabi_dmul>
 8025148:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802514a:	1b1c      	subs	r4, r3, r4
 802514c:	00e4      	lsls	r4, r4, #3
 802514e:	192d      	adds	r5, r5, r4
 8025150:	682a      	ldr	r2, [r5, #0]
 8025152:	686b      	ldr	r3, [r5, #4]
 8025154:	e789      	b.n	802506a <_strtod_l+0x40a>
 8025156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025158:	3316      	adds	r3, #22
 802515a:	dba2      	blt.n	80250a2 <_strtod_l+0x442>
 802515c:	9907      	ldr	r1, [sp, #28]
 802515e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025160:	4b3b      	ldr	r3, [pc, #236]	@ (8025250 <_strtod_l+0x5f0>)
 8025162:	1a52      	subs	r2, r2, r1
 8025164:	00d2      	lsls	r2, r2, #3
 8025166:	189b      	adds	r3, r3, r2
 8025168:	0030      	movs	r0, r6
 802516a:	681a      	ldr	r2, [r3, #0]
 802516c:	685b      	ldr	r3, [r3, #4]
 802516e:	0039      	movs	r1, r7
 8025170:	f7dc ffb6 	bl	80020e0 <__aeabi_ddiv>
 8025174:	e750      	b.n	8025018 <_strtod_l+0x3b8>
 8025176:	2300      	movs	r3, #0
 8025178:	0030      	movs	r0, r6
 802517a:	0039      	movs	r1, r7
 802517c:	4d35      	ldr	r5, [pc, #212]	@ (8025254 <_strtod_l+0x5f4>)
 802517e:	1124      	asrs	r4, r4, #4
 8025180:	9309      	str	r3, [sp, #36]	@ 0x24
 8025182:	2c01      	cmp	r4, #1
 8025184:	dc1e      	bgt.n	80251c4 <_strtod_l+0x564>
 8025186:	2b00      	cmp	r3, #0
 8025188:	d001      	beq.n	802518e <_strtod_l+0x52e>
 802518a:	0006      	movs	r6, r0
 802518c:	000f      	movs	r7, r1
 802518e:	4b32      	ldr	r3, [pc, #200]	@ (8025258 <_strtod_l+0x5f8>)
 8025190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025192:	18ff      	adds	r7, r7, r3
 8025194:	4b2f      	ldr	r3, [pc, #188]	@ (8025254 <_strtod_l+0x5f4>)
 8025196:	00d5      	lsls	r5, r2, #3
 8025198:	195d      	adds	r5, r3, r5
 802519a:	0032      	movs	r2, r6
 802519c:	6828      	ldr	r0, [r5, #0]
 802519e:	6869      	ldr	r1, [r5, #4]
 80251a0:	003b      	movs	r3, r7
 80251a2:	f7dd fbd7 	bl	8002954 <__aeabi_dmul>
 80251a6:	4b26      	ldr	r3, [pc, #152]	@ (8025240 <_strtod_l+0x5e0>)
 80251a8:	4a2c      	ldr	r2, [pc, #176]	@ (802525c <_strtod_l+0x5fc>)
 80251aa:	0006      	movs	r6, r0
 80251ac:	400b      	ands	r3, r1
 80251ae:	4293      	cmp	r3, r2
 80251b0:	d895      	bhi.n	80250de <_strtod_l+0x47e>
 80251b2:	4a2b      	ldr	r2, [pc, #172]	@ (8025260 <_strtod_l+0x600>)
 80251b4:	4293      	cmp	r3, r2
 80251b6:	d913      	bls.n	80251e0 <_strtod_l+0x580>
 80251b8:	2601      	movs	r6, #1
 80251ba:	4f2a      	ldr	r7, [pc, #168]	@ (8025264 <_strtod_l+0x604>)
 80251bc:	4276      	negs	r6, r6
 80251be:	2300      	movs	r3, #0
 80251c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80251c2:	e086      	b.n	80252d2 <_strtod_l+0x672>
 80251c4:	2201      	movs	r2, #1
 80251c6:	4214      	tst	r4, r2
 80251c8:	d004      	beq.n	80251d4 <_strtod_l+0x574>
 80251ca:	682a      	ldr	r2, [r5, #0]
 80251cc:	686b      	ldr	r3, [r5, #4]
 80251ce:	f7dd fbc1 	bl	8002954 <__aeabi_dmul>
 80251d2:	2301      	movs	r3, #1
 80251d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80251d6:	1064      	asrs	r4, r4, #1
 80251d8:	3201      	adds	r2, #1
 80251da:	9209      	str	r2, [sp, #36]	@ 0x24
 80251dc:	3508      	adds	r5, #8
 80251de:	e7d0      	b.n	8025182 <_strtod_l+0x522>
 80251e0:	23d4      	movs	r3, #212	@ 0xd4
 80251e2:	049b      	lsls	r3, r3, #18
 80251e4:	18cf      	adds	r7, r1, r3
 80251e6:	e7ea      	b.n	80251be <_strtod_l+0x55e>
 80251e8:	2c00      	cmp	r4, #0
 80251ea:	d0e8      	beq.n	80251be <_strtod_l+0x55e>
 80251ec:	4264      	negs	r4, r4
 80251ee:	230f      	movs	r3, #15
 80251f0:	0022      	movs	r2, r4
 80251f2:	401a      	ands	r2, r3
 80251f4:	421c      	tst	r4, r3
 80251f6:	d00a      	beq.n	802520e <_strtod_l+0x5ae>
 80251f8:	4b15      	ldr	r3, [pc, #84]	@ (8025250 <_strtod_l+0x5f0>)
 80251fa:	00d2      	lsls	r2, r2, #3
 80251fc:	189b      	adds	r3, r3, r2
 80251fe:	0030      	movs	r0, r6
 8025200:	681a      	ldr	r2, [r3, #0]
 8025202:	685b      	ldr	r3, [r3, #4]
 8025204:	0039      	movs	r1, r7
 8025206:	f7dc ff6b 	bl	80020e0 <__aeabi_ddiv>
 802520a:	0006      	movs	r6, r0
 802520c:	000f      	movs	r7, r1
 802520e:	1124      	asrs	r4, r4, #4
 8025210:	d0d5      	beq.n	80251be <_strtod_l+0x55e>
 8025212:	2c1f      	cmp	r4, #31
 8025214:	dd28      	ble.n	8025268 <_strtod_l+0x608>
 8025216:	2300      	movs	r3, #0
 8025218:	9306      	str	r3, [sp, #24]
 802521a:	9307      	str	r3, [sp, #28]
 802521c:	930d      	str	r3, [sp, #52]	@ 0x34
 802521e:	9308      	str	r3, [sp, #32]
 8025220:	2322      	movs	r3, #34	@ 0x22
 8025222:	9a05      	ldr	r2, [sp, #20]
 8025224:	2600      	movs	r6, #0
 8025226:	6013      	str	r3, [r2, #0]
 8025228:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802522a:	2700      	movs	r7, #0
 802522c:	2b00      	cmp	r3, #0
 802522e:	d000      	beq.n	8025232 <_strtod_l+0x5d2>
 8025230:	e763      	b.n	80250fa <_strtod_l+0x49a>
 8025232:	e550      	b.n	8024cd6 <_strtod_l+0x76>
 8025234:	00004e1f 	.word	0x00004e1f
 8025238:	0802edbf 	.word	0x0802edbf
 802523c:	0802ef84 	.word	0x0802ef84
 8025240:	7ff00000 	.word	0x7ff00000
 8025244:	0802edb7 	.word	0x0802edb7
 8025248:	0802edf1 	.word	0x0802edf1
 802524c:	0802ef80 	.word	0x0802ef80
 8025250:	0802f110 	.word	0x0802f110
 8025254:	0802f0e8 	.word	0x0802f0e8
 8025258:	fcb00000 	.word	0xfcb00000
 802525c:	7ca00000 	.word	0x7ca00000
 8025260:	7c900000 	.word	0x7c900000
 8025264:	7fefffff 	.word	0x7fefffff
 8025268:	2310      	movs	r3, #16
 802526a:	0022      	movs	r2, r4
 802526c:	401a      	ands	r2, r3
 802526e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025270:	421c      	tst	r4, r3
 8025272:	d001      	beq.n	8025278 <_strtod_l+0x618>
 8025274:	335a      	adds	r3, #90	@ 0x5a
 8025276:	9309      	str	r3, [sp, #36]	@ 0x24
 8025278:	0030      	movs	r0, r6
 802527a:	0039      	movs	r1, r7
 802527c:	2300      	movs	r3, #0
 802527e:	4dc0      	ldr	r5, [pc, #768]	@ (8025580 <_strtod_l+0x920>)
 8025280:	2201      	movs	r2, #1
 8025282:	4214      	tst	r4, r2
 8025284:	d004      	beq.n	8025290 <_strtod_l+0x630>
 8025286:	682a      	ldr	r2, [r5, #0]
 8025288:	686b      	ldr	r3, [r5, #4]
 802528a:	f7dd fb63 	bl	8002954 <__aeabi_dmul>
 802528e:	2301      	movs	r3, #1
 8025290:	1064      	asrs	r4, r4, #1
 8025292:	3508      	adds	r5, #8
 8025294:	2c00      	cmp	r4, #0
 8025296:	d1f3      	bne.n	8025280 <_strtod_l+0x620>
 8025298:	2b00      	cmp	r3, #0
 802529a:	d001      	beq.n	80252a0 <_strtod_l+0x640>
 802529c:	0006      	movs	r6, r0
 802529e:	000f      	movs	r7, r1
 80252a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252a2:	2b00      	cmp	r3, #0
 80252a4:	d00d      	beq.n	80252c2 <_strtod_l+0x662>
 80252a6:	236b      	movs	r3, #107	@ 0x6b
 80252a8:	007a      	lsls	r2, r7, #1
 80252aa:	0d52      	lsrs	r2, r2, #21
 80252ac:	0039      	movs	r1, r7
 80252ae:	1a9b      	subs	r3, r3, r2
 80252b0:	2b00      	cmp	r3, #0
 80252b2:	dd06      	ble.n	80252c2 <_strtod_l+0x662>
 80252b4:	2b1f      	cmp	r3, #31
 80252b6:	dd5c      	ble.n	8025372 <_strtod_l+0x712>
 80252b8:	2600      	movs	r6, #0
 80252ba:	2b34      	cmp	r3, #52	@ 0x34
 80252bc:	dd52      	ble.n	8025364 <_strtod_l+0x704>
 80252be:	27dc      	movs	r7, #220	@ 0xdc
 80252c0:	04bf      	lsls	r7, r7, #18
 80252c2:	2200      	movs	r2, #0
 80252c4:	2300      	movs	r3, #0
 80252c6:	0030      	movs	r0, r6
 80252c8:	0039      	movs	r1, r7
 80252ca:	f7db f8f1 	bl	80004b0 <__aeabi_dcmpeq>
 80252ce:	2800      	cmp	r0, #0
 80252d0:	d1a1      	bne.n	8025216 <_strtod_l+0x5b6>
 80252d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80252d4:	9a08      	ldr	r2, [sp, #32]
 80252d6:	9300      	str	r3, [sp, #0]
 80252d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80252da:	9b06      	ldr	r3, [sp, #24]
 80252dc:	9805      	ldr	r0, [sp, #20]
 80252de:	f002 febd 	bl	802805c <__s2b>
 80252e2:	900d      	str	r0, [sp, #52]	@ 0x34
 80252e4:	2800      	cmp	r0, #0
 80252e6:	d100      	bne.n	80252ea <_strtod_l+0x68a>
 80252e8:	e6f9      	b.n	80250de <_strtod_l+0x47e>
 80252ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80252ec:	9907      	ldr	r1, [sp, #28]
 80252ee:	43db      	mvns	r3, r3
 80252f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80252f2:	17db      	asrs	r3, r3, #31
 80252f4:	1a52      	subs	r2, r2, r1
 80252f6:	9214      	str	r2, [sp, #80]	@ 0x50
 80252f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80252fa:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80252fc:	17d2      	asrs	r2, r2, #31
 80252fe:	4011      	ands	r1, r2
 8025300:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025302:	9114      	str	r1, [sp, #80]	@ 0x50
 8025304:	401a      	ands	r2, r3
 8025306:	2300      	movs	r3, #0
 8025308:	921a      	str	r2, [sp, #104]	@ 0x68
 802530a:	9306      	str	r3, [sp, #24]
 802530c:	9307      	str	r3, [sp, #28]
 802530e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025310:	9805      	ldr	r0, [sp, #20]
 8025312:	6859      	ldr	r1, [r3, #4]
 8025314:	f002 fdf6 	bl	8027f04 <_Balloc>
 8025318:	9008      	str	r0, [sp, #32]
 802531a:	2800      	cmp	r0, #0
 802531c:	d100      	bne.n	8025320 <_strtod_l+0x6c0>
 802531e:	e6e3      	b.n	80250e8 <_strtod_l+0x488>
 8025320:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025322:	300c      	adds	r0, #12
 8025324:	0019      	movs	r1, r3
 8025326:	691a      	ldr	r2, [r3, #16]
 8025328:	310c      	adds	r1, #12
 802532a:	3202      	adds	r2, #2
 802532c:	0092      	lsls	r2, r2, #2
 802532e:	f001 faf1 	bl	8026914 <memcpy>
 8025332:	ab20      	add	r3, sp, #128	@ 0x80
 8025334:	9301      	str	r3, [sp, #4]
 8025336:	ab1f      	add	r3, sp, #124	@ 0x7c
 8025338:	9300      	str	r3, [sp, #0]
 802533a:	0032      	movs	r2, r6
 802533c:	003b      	movs	r3, r7
 802533e:	9805      	ldr	r0, [sp, #20]
 8025340:	9610      	str	r6, [sp, #64]	@ 0x40
 8025342:	9711      	str	r7, [sp, #68]	@ 0x44
 8025344:	f003 f9d2 	bl	80286ec <__d2b>
 8025348:	901e      	str	r0, [sp, #120]	@ 0x78
 802534a:	2800      	cmp	r0, #0
 802534c:	d100      	bne.n	8025350 <_strtod_l+0x6f0>
 802534e:	e6cb      	b.n	80250e8 <_strtod_l+0x488>
 8025350:	2101      	movs	r1, #1
 8025352:	9805      	ldr	r0, [sp, #20]
 8025354:	f002 ff1e 	bl	8028194 <__i2b>
 8025358:	9007      	str	r0, [sp, #28]
 802535a:	2800      	cmp	r0, #0
 802535c:	d10e      	bne.n	802537c <_strtod_l+0x71c>
 802535e:	2300      	movs	r3, #0
 8025360:	9307      	str	r3, [sp, #28]
 8025362:	e6c1      	b.n	80250e8 <_strtod_l+0x488>
 8025364:	234b      	movs	r3, #75	@ 0x4b
 8025366:	1a9a      	subs	r2, r3, r2
 8025368:	3b4c      	subs	r3, #76	@ 0x4c
 802536a:	4093      	lsls	r3, r2
 802536c:	4019      	ands	r1, r3
 802536e:	000f      	movs	r7, r1
 8025370:	e7a7      	b.n	80252c2 <_strtod_l+0x662>
 8025372:	2201      	movs	r2, #1
 8025374:	4252      	negs	r2, r2
 8025376:	409a      	lsls	r2, r3
 8025378:	4016      	ands	r6, r2
 802537a:	e7a2      	b.n	80252c2 <_strtod_l+0x662>
 802537c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802537e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025380:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025382:	1ad4      	subs	r4, r2, r3
 8025384:	2b00      	cmp	r3, #0
 8025386:	db01      	blt.n	802538c <_strtod_l+0x72c>
 8025388:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802538a:	195d      	adds	r5, r3, r5
 802538c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802538e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025390:	1a5b      	subs	r3, r3, r1
 8025392:	2136      	movs	r1, #54	@ 0x36
 8025394:	189b      	adds	r3, r3, r2
 8025396:	1a8a      	subs	r2, r1, r2
 8025398:	497a      	ldr	r1, [pc, #488]	@ (8025584 <_strtod_l+0x924>)
 802539a:	2001      	movs	r0, #1
 802539c:	468c      	mov	ip, r1
 802539e:	2100      	movs	r1, #0
 80253a0:	3b01      	subs	r3, #1
 80253a2:	9115      	str	r1, [sp, #84]	@ 0x54
 80253a4:	9016      	str	r0, [sp, #88]	@ 0x58
 80253a6:	4563      	cmp	r3, ip
 80253a8:	da06      	bge.n	80253b8 <_strtod_l+0x758>
 80253aa:	4661      	mov	r1, ip
 80253ac:	1ac9      	subs	r1, r1, r3
 80253ae:	1a52      	subs	r2, r2, r1
 80253b0:	291f      	cmp	r1, #31
 80253b2:	dc3f      	bgt.n	8025434 <_strtod_l+0x7d4>
 80253b4:	4088      	lsls	r0, r1
 80253b6:	9016      	str	r0, [sp, #88]	@ 0x58
 80253b8:	18ab      	adds	r3, r5, r2
 80253ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80253bc:	18a4      	adds	r4, r4, r2
 80253be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80253c2:	191c      	adds	r4, r3, r4
 80253c4:	002b      	movs	r3, r5
 80253c6:	4295      	cmp	r5, r2
 80253c8:	dd00      	ble.n	80253cc <_strtod_l+0x76c>
 80253ca:	0013      	movs	r3, r2
 80253cc:	42a3      	cmp	r3, r4
 80253ce:	dd00      	ble.n	80253d2 <_strtod_l+0x772>
 80253d0:	0023      	movs	r3, r4
 80253d2:	2b00      	cmp	r3, #0
 80253d4:	dd04      	ble.n	80253e0 <_strtod_l+0x780>
 80253d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80253d8:	1ae4      	subs	r4, r4, r3
 80253da:	1ad2      	subs	r2, r2, r3
 80253dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80253de:	1aed      	subs	r5, r5, r3
 80253e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80253e2:	2b00      	cmp	r3, #0
 80253e4:	dd16      	ble.n	8025414 <_strtod_l+0x7b4>
 80253e6:	001a      	movs	r2, r3
 80253e8:	9907      	ldr	r1, [sp, #28]
 80253ea:	9805      	ldr	r0, [sp, #20]
 80253ec:	f002 ff94 	bl	8028318 <__pow5mult>
 80253f0:	9007      	str	r0, [sp, #28]
 80253f2:	2800      	cmp	r0, #0
 80253f4:	d0b3      	beq.n	802535e <_strtod_l+0x6fe>
 80253f6:	0001      	movs	r1, r0
 80253f8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80253fa:	9805      	ldr	r0, [sp, #20]
 80253fc:	f002 fee2 	bl	80281c4 <__multiply>
 8025400:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025402:	2800      	cmp	r0, #0
 8025404:	d100      	bne.n	8025408 <_strtod_l+0x7a8>
 8025406:	e66f      	b.n	80250e8 <_strtod_l+0x488>
 8025408:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802540a:	9805      	ldr	r0, [sp, #20]
 802540c:	f002 fdbe 	bl	8027f8c <_Bfree>
 8025410:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025412:	931e      	str	r3, [sp, #120]	@ 0x78
 8025414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025416:	2b00      	cmp	r3, #0
 8025418:	dc12      	bgt.n	8025440 <_strtod_l+0x7e0>
 802541a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802541c:	2b00      	cmp	r3, #0
 802541e:	dd18      	ble.n	8025452 <_strtod_l+0x7f2>
 8025420:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025422:	9908      	ldr	r1, [sp, #32]
 8025424:	9805      	ldr	r0, [sp, #20]
 8025426:	f002 ff77 	bl	8028318 <__pow5mult>
 802542a:	9008      	str	r0, [sp, #32]
 802542c:	2800      	cmp	r0, #0
 802542e:	d110      	bne.n	8025452 <_strtod_l+0x7f2>
 8025430:	2300      	movs	r3, #0
 8025432:	e658      	b.n	80250e6 <_strtod_l+0x486>
 8025434:	4954      	ldr	r1, [pc, #336]	@ (8025588 <_strtod_l+0x928>)
 8025436:	1acb      	subs	r3, r1, r3
 8025438:	0001      	movs	r1, r0
 802543a:	4099      	lsls	r1, r3
 802543c:	9115      	str	r1, [sp, #84]	@ 0x54
 802543e:	e7ba      	b.n	80253b6 <_strtod_l+0x756>
 8025440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025442:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025444:	9805      	ldr	r0, [sp, #20]
 8025446:	f002 ffc3 	bl	80283d0 <__lshift>
 802544a:	901e      	str	r0, [sp, #120]	@ 0x78
 802544c:	2800      	cmp	r0, #0
 802544e:	d1e4      	bne.n	802541a <_strtod_l+0x7ba>
 8025450:	e64a      	b.n	80250e8 <_strtod_l+0x488>
 8025452:	2c00      	cmp	r4, #0
 8025454:	dd07      	ble.n	8025466 <_strtod_l+0x806>
 8025456:	0022      	movs	r2, r4
 8025458:	9908      	ldr	r1, [sp, #32]
 802545a:	9805      	ldr	r0, [sp, #20]
 802545c:	f002 ffb8 	bl	80283d0 <__lshift>
 8025460:	9008      	str	r0, [sp, #32]
 8025462:	2800      	cmp	r0, #0
 8025464:	d0e4      	beq.n	8025430 <_strtod_l+0x7d0>
 8025466:	2d00      	cmp	r5, #0
 8025468:	dd08      	ble.n	802547c <_strtod_l+0x81c>
 802546a:	002a      	movs	r2, r5
 802546c:	9907      	ldr	r1, [sp, #28]
 802546e:	9805      	ldr	r0, [sp, #20]
 8025470:	f002 ffae 	bl	80283d0 <__lshift>
 8025474:	9007      	str	r0, [sp, #28]
 8025476:	2800      	cmp	r0, #0
 8025478:	d100      	bne.n	802547c <_strtod_l+0x81c>
 802547a:	e635      	b.n	80250e8 <_strtod_l+0x488>
 802547c:	9a08      	ldr	r2, [sp, #32]
 802547e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025480:	9805      	ldr	r0, [sp, #20]
 8025482:	f003 f82d 	bl	80284e0 <__mdiff>
 8025486:	9006      	str	r0, [sp, #24]
 8025488:	2800      	cmp	r0, #0
 802548a:	d100      	bne.n	802548e <_strtod_l+0x82e>
 802548c:	e62c      	b.n	80250e8 <_strtod_l+0x488>
 802548e:	68c3      	ldr	r3, [r0, #12]
 8025490:	9907      	ldr	r1, [sp, #28]
 8025492:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025494:	2300      	movs	r3, #0
 8025496:	60c3      	str	r3, [r0, #12]
 8025498:	f003 f806 	bl	80284a8 <__mcmp>
 802549c:	2800      	cmp	r0, #0
 802549e:	da3b      	bge.n	8025518 <_strtod_l+0x8b8>
 80254a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254a2:	4333      	orrs	r3, r6
 80254a4:	d167      	bne.n	8025576 <_strtod_l+0x916>
 80254a6:	033b      	lsls	r3, r7, #12
 80254a8:	d165      	bne.n	8025576 <_strtod_l+0x916>
 80254aa:	22d6      	movs	r2, #214	@ 0xd6
 80254ac:	4b37      	ldr	r3, [pc, #220]	@ (802558c <_strtod_l+0x92c>)
 80254ae:	04d2      	lsls	r2, r2, #19
 80254b0:	403b      	ands	r3, r7
 80254b2:	4293      	cmp	r3, r2
 80254b4:	d95f      	bls.n	8025576 <_strtod_l+0x916>
 80254b6:	9b06      	ldr	r3, [sp, #24]
 80254b8:	695b      	ldr	r3, [r3, #20]
 80254ba:	2b00      	cmp	r3, #0
 80254bc:	d103      	bne.n	80254c6 <_strtod_l+0x866>
 80254be:	9b06      	ldr	r3, [sp, #24]
 80254c0:	691b      	ldr	r3, [r3, #16]
 80254c2:	2b01      	cmp	r3, #1
 80254c4:	dd57      	ble.n	8025576 <_strtod_l+0x916>
 80254c6:	9906      	ldr	r1, [sp, #24]
 80254c8:	2201      	movs	r2, #1
 80254ca:	9805      	ldr	r0, [sp, #20]
 80254cc:	f002 ff80 	bl	80283d0 <__lshift>
 80254d0:	9907      	ldr	r1, [sp, #28]
 80254d2:	9006      	str	r0, [sp, #24]
 80254d4:	f002 ffe8 	bl	80284a8 <__mcmp>
 80254d8:	2800      	cmp	r0, #0
 80254da:	dd4c      	ble.n	8025576 <_strtod_l+0x916>
 80254dc:	4b2b      	ldr	r3, [pc, #172]	@ (802558c <_strtod_l+0x92c>)
 80254de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80254e0:	403b      	ands	r3, r7
 80254e2:	2a00      	cmp	r2, #0
 80254e4:	d074      	beq.n	80255d0 <_strtod_l+0x970>
 80254e6:	22d6      	movs	r2, #214	@ 0xd6
 80254e8:	04d2      	lsls	r2, r2, #19
 80254ea:	4293      	cmp	r3, r2
 80254ec:	d870      	bhi.n	80255d0 <_strtod_l+0x970>
 80254ee:	22dc      	movs	r2, #220	@ 0xdc
 80254f0:	0492      	lsls	r2, r2, #18
 80254f2:	4293      	cmp	r3, r2
 80254f4:	d800      	bhi.n	80254f8 <_strtod_l+0x898>
 80254f6:	e693      	b.n	8025220 <_strtod_l+0x5c0>
 80254f8:	0030      	movs	r0, r6
 80254fa:	0039      	movs	r1, r7
 80254fc:	4b24      	ldr	r3, [pc, #144]	@ (8025590 <_strtod_l+0x930>)
 80254fe:	2200      	movs	r2, #0
 8025500:	f7dd fa28 	bl	8002954 <__aeabi_dmul>
 8025504:	4b21      	ldr	r3, [pc, #132]	@ (802558c <_strtod_l+0x92c>)
 8025506:	0006      	movs	r6, r0
 8025508:	000f      	movs	r7, r1
 802550a:	420b      	tst	r3, r1
 802550c:	d000      	beq.n	8025510 <_strtod_l+0x8b0>
 802550e:	e5f4      	b.n	80250fa <_strtod_l+0x49a>
 8025510:	2322      	movs	r3, #34	@ 0x22
 8025512:	9a05      	ldr	r2, [sp, #20]
 8025514:	6013      	str	r3, [r2, #0]
 8025516:	e5f0      	b.n	80250fa <_strtod_l+0x49a>
 8025518:	970e      	str	r7, [sp, #56]	@ 0x38
 802551a:	2800      	cmp	r0, #0
 802551c:	d175      	bne.n	802560a <_strtod_l+0x9aa>
 802551e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025520:	033b      	lsls	r3, r7, #12
 8025522:	0b1b      	lsrs	r3, r3, #12
 8025524:	2a00      	cmp	r2, #0
 8025526:	d039      	beq.n	802559c <_strtod_l+0x93c>
 8025528:	4a1a      	ldr	r2, [pc, #104]	@ (8025594 <_strtod_l+0x934>)
 802552a:	4293      	cmp	r3, r2
 802552c:	d138      	bne.n	80255a0 <_strtod_l+0x940>
 802552e:	2101      	movs	r1, #1
 8025530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025532:	4249      	negs	r1, r1
 8025534:	0032      	movs	r2, r6
 8025536:	0008      	movs	r0, r1
 8025538:	2b00      	cmp	r3, #0
 802553a:	d00b      	beq.n	8025554 <_strtod_l+0x8f4>
 802553c:	24d4      	movs	r4, #212	@ 0xd4
 802553e:	4b13      	ldr	r3, [pc, #76]	@ (802558c <_strtod_l+0x92c>)
 8025540:	0008      	movs	r0, r1
 8025542:	403b      	ands	r3, r7
 8025544:	04e4      	lsls	r4, r4, #19
 8025546:	42a3      	cmp	r3, r4
 8025548:	d804      	bhi.n	8025554 <_strtod_l+0x8f4>
 802554a:	306c      	adds	r0, #108	@ 0x6c
 802554c:	0d1b      	lsrs	r3, r3, #20
 802554e:	1ac3      	subs	r3, r0, r3
 8025550:	4099      	lsls	r1, r3
 8025552:	0008      	movs	r0, r1
 8025554:	4282      	cmp	r2, r0
 8025556:	d123      	bne.n	80255a0 <_strtod_l+0x940>
 8025558:	4b0f      	ldr	r3, [pc, #60]	@ (8025598 <_strtod_l+0x938>)
 802555a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802555c:	4299      	cmp	r1, r3
 802555e:	d102      	bne.n	8025566 <_strtod_l+0x906>
 8025560:	3201      	adds	r2, #1
 8025562:	d100      	bne.n	8025566 <_strtod_l+0x906>
 8025564:	e5c0      	b.n	80250e8 <_strtod_l+0x488>
 8025566:	4b09      	ldr	r3, [pc, #36]	@ (802558c <_strtod_l+0x92c>)
 8025568:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802556a:	2600      	movs	r6, #0
 802556c:	401a      	ands	r2, r3
 802556e:	0013      	movs	r3, r2
 8025570:	2280      	movs	r2, #128	@ 0x80
 8025572:	0352      	lsls	r2, r2, #13
 8025574:	189f      	adds	r7, r3, r2
 8025576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025578:	2b00      	cmp	r3, #0
 802557a:	d1bd      	bne.n	80254f8 <_strtod_l+0x898>
 802557c:	e5bd      	b.n	80250fa <_strtod_l+0x49a>
 802557e:	46c0      	nop			@ (mov r8, r8)
 8025580:	0802efb0 	.word	0x0802efb0
 8025584:	fffffc02 	.word	0xfffffc02
 8025588:	fffffbe2 	.word	0xfffffbe2
 802558c:	7ff00000 	.word	0x7ff00000
 8025590:	39500000 	.word	0x39500000
 8025594:	000fffff 	.word	0x000fffff
 8025598:	7fefffff 	.word	0x7fefffff
 802559c:	4333      	orrs	r3, r6
 802559e:	d09d      	beq.n	80254dc <_strtod_l+0x87c>
 80255a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80255a2:	2b00      	cmp	r3, #0
 80255a4:	d01c      	beq.n	80255e0 <_strtod_l+0x980>
 80255a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255a8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80255aa:	4213      	tst	r3, r2
 80255ac:	d0e3      	beq.n	8025576 <_strtod_l+0x916>
 80255ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80255b0:	0030      	movs	r0, r6
 80255b2:	0039      	movs	r1, r7
 80255b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80255b6:	2b00      	cmp	r3, #0
 80255b8:	d016      	beq.n	80255e8 <_strtod_l+0x988>
 80255ba:	f7ff fb39 	bl	8024c30 <sulp>
 80255be:	0002      	movs	r2, r0
 80255c0:	000b      	movs	r3, r1
 80255c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80255c4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80255c6:	f7dc f9c5 	bl	8001954 <__aeabi_dadd>
 80255ca:	0006      	movs	r6, r0
 80255cc:	000f      	movs	r7, r1
 80255ce:	e7d2      	b.n	8025576 <_strtod_l+0x916>
 80255d0:	2601      	movs	r6, #1
 80255d2:	4a92      	ldr	r2, [pc, #584]	@ (802581c <_strtod_l+0xbbc>)
 80255d4:	4276      	negs	r6, r6
 80255d6:	189b      	adds	r3, r3, r2
 80255d8:	4a91      	ldr	r2, [pc, #580]	@ (8025820 <_strtod_l+0xbc0>)
 80255da:	431a      	orrs	r2, r3
 80255dc:	0017      	movs	r7, r2
 80255de:	e7ca      	b.n	8025576 <_strtod_l+0x916>
 80255e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80255e2:	4233      	tst	r3, r6
 80255e4:	d0c7      	beq.n	8025576 <_strtod_l+0x916>
 80255e6:	e7e2      	b.n	80255ae <_strtod_l+0x94e>
 80255e8:	f7ff fb22 	bl	8024c30 <sulp>
 80255ec:	0002      	movs	r2, r0
 80255ee:	000b      	movs	r3, r1
 80255f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80255f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80255f4:	f7dd fc94 	bl	8002f20 <__aeabi_dsub>
 80255f8:	2200      	movs	r2, #0
 80255fa:	2300      	movs	r3, #0
 80255fc:	0006      	movs	r6, r0
 80255fe:	000f      	movs	r7, r1
 8025600:	f7da ff56 	bl	80004b0 <__aeabi_dcmpeq>
 8025604:	2800      	cmp	r0, #0
 8025606:	d0b6      	beq.n	8025576 <_strtod_l+0x916>
 8025608:	e60a      	b.n	8025220 <_strtod_l+0x5c0>
 802560a:	9907      	ldr	r1, [sp, #28]
 802560c:	9806      	ldr	r0, [sp, #24]
 802560e:	f003 f8cd 	bl	80287ac <__ratio>
 8025612:	2380      	movs	r3, #128	@ 0x80
 8025614:	2200      	movs	r2, #0
 8025616:	05db      	lsls	r3, r3, #23
 8025618:	0004      	movs	r4, r0
 802561a:	000d      	movs	r5, r1
 802561c:	f7da ff58 	bl	80004d0 <__aeabi_dcmple>
 8025620:	2800      	cmp	r0, #0
 8025622:	d06c      	beq.n	80256fe <_strtod_l+0xa9e>
 8025624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025626:	2b00      	cmp	r3, #0
 8025628:	d177      	bne.n	802571a <_strtod_l+0xaba>
 802562a:	2e00      	cmp	r6, #0
 802562c:	d157      	bne.n	80256de <_strtod_l+0xa7e>
 802562e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025630:	031b      	lsls	r3, r3, #12
 8025632:	d15a      	bne.n	80256ea <_strtod_l+0xa8a>
 8025634:	2200      	movs	r2, #0
 8025636:	0020      	movs	r0, r4
 8025638:	0029      	movs	r1, r5
 802563a:	4b7a      	ldr	r3, [pc, #488]	@ (8025824 <_strtod_l+0xbc4>)
 802563c:	f7da ff3e 	bl	80004bc <__aeabi_dcmplt>
 8025640:	2800      	cmp	r0, #0
 8025642:	d159      	bne.n	80256f8 <_strtod_l+0xa98>
 8025644:	0020      	movs	r0, r4
 8025646:	0029      	movs	r1, r5
 8025648:	2200      	movs	r2, #0
 802564a:	4b77      	ldr	r3, [pc, #476]	@ (8025828 <_strtod_l+0xbc8>)
 802564c:	f7dd f982 	bl	8002954 <__aeabi_dmul>
 8025650:	0004      	movs	r4, r0
 8025652:	000d      	movs	r5, r1
 8025654:	2380      	movs	r3, #128	@ 0x80
 8025656:	061b      	lsls	r3, r3, #24
 8025658:	18eb      	adds	r3, r5, r3
 802565a:	940a      	str	r4, [sp, #40]	@ 0x28
 802565c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802565e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025660:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025662:	9216      	str	r2, [sp, #88]	@ 0x58
 8025664:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025666:	4a71      	ldr	r2, [pc, #452]	@ (802582c <_strtod_l+0xbcc>)
 8025668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802566a:	4013      	ands	r3, r2
 802566c:	9315      	str	r3, [sp, #84]	@ 0x54
 802566e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025670:	4b6f      	ldr	r3, [pc, #444]	@ (8025830 <_strtod_l+0xbd0>)
 8025672:	429a      	cmp	r2, r3
 8025674:	d000      	beq.n	8025678 <_strtod_l+0xa18>
 8025676:	e087      	b.n	8025788 <_strtod_l+0xb28>
 8025678:	4a6e      	ldr	r2, [pc, #440]	@ (8025834 <_strtod_l+0xbd4>)
 802567a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802567c:	4694      	mov	ip, r2
 802567e:	4463      	add	r3, ip
 8025680:	001f      	movs	r7, r3
 8025682:	0030      	movs	r0, r6
 8025684:	0019      	movs	r1, r3
 8025686:	f002 ffc5 	bl	8028614 <__ulp>
 802568a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802568c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802568e:	f7dd f961 	bl	8002954 <__aeabi_dmul>
 8025692:	0032      	movs	r2, r6
 8025694:	003b      	movs	r3, r7
 8025696:	f7dc f95d 	bl	8001954 <__aeabi_dadd>
 802569a:	4a64      	ldr	r2, [pc, #400]	@ (802582c <_strtod_l+0xbcc>)
 802569c:	4b66      	ldr	r3, [pc, #408]	@ (8025838 <_strtod_l+0xbd8>)
 802569e:	0006      	movs	r6, r0
 80256a0:	400a      	ands	r2, r1
 80256a2:	429a      	cmp	r2, r3
 80256a4:	d940      	bls.n	8025728 <_strtod_l+0xac8>
 80256a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80256a8:	4a64      	ldr	r2, [pc, #400]	@ (802583c <_strtod_l+0xbdc>)
 80256aa:	4293      	cmp	r3, r2
 80256ac:	d103      	bne.n	80256b6 <_strtod_l+0xa56>
 80256ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80256b0:	3301      	adds	r3, #1
 80256b2:	d100      	bne.n	80256b6 <_strtod_l+0xa56>
 80256b4:	e518      	b.n	80250e8 <_strtod_l+0x488>
 80256b6:	2601      	movs	r6, #1
 80256b8:	4f60      	ldr	r7, [pc, #384]	@ (802583c <_strtod_l+0xbdc>)
 80256ba:	4276      	negs	r6, r6
 80256bc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80256be:	9805      	ldr	r0, [sp, #20]
 80256c0:	f002 fc64 	bl	8027f8c <_Bfree>
 80256c4:	9908      	ldr	r1, [sp, #32]
 80256c6:	9805      	ldr	r0, [sp, #20]
 80256c8:	f002 fc60 	bl	8027f8c <_Bfree>
 80256cc:	9907      	ldr	r1, [sp, #28]
 80256ce:	9805      	ldr	r0, [sp, #20]
 80256d0:	f002 fc5c 	bl	8027f8c <_Bfree>
 80256d4:	9906      	ldr	r1, [sp, #24]
 80256d6:	9805      	ldr	r0, [sp, #20]
 80256d8:	f002 fc58 	bl	8027f8c <_Bfree>
 80256dc:	e617      	b.n	802530e <_strtod_l+0x6ae>
 80256de:	2e01      	cmp	r6, #1
 80256e0:	d103      	bne.n	80256ea <_strtod_l+0xa8a>
 80256e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d100      	bne.n	80256ea <_strtod_l+0xa8a>
 80256e8:	e59a      	b.n	8025220 <_strtod_l+0x5c0>
 80256ea:	2300      	movs	r3, #0
 80256ec:	4c54      	ldr	r4, [pc, #336]	@ (8025840 <_strtod_l+0xbe0>)
 80256ee:	4d4d      	ldr	r5, [pc, #308]	@ (8025824 <_strtod_l+0xbc4>)
 80256f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80256f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80256f4:	2400      	movs	r4, #0
 80256f6:	e7b2      	b.n	802565e <_strtod_l+0x9fe>
 80256f8:	2400      	movs	r4, #0
 80256fa:	4d4b      	ldr	r5, [pc, #300]	@ (8025828 <_strtod_l+0xbc8>)
 80256fc:	e7aa      	b.n	8025654 <_strtod_l+0x9f4>
 80256fe:	0020      	movs	r0, r4
 8025700:	0029      	movs	r1, r5
 8025702:	4b49      	ldr	r3, [pc, #292]	@ (8025828 <_strtod_l+0xbc8>)
 8025704:	2200      	movs	r2, #0
 8025706:	f7dd f925 	bl	8002954 <__aeabi_dmul>
 802570a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802570c:	0004      	movs	r4, r0
 802570e:	000d      	movs	r5, r1
 8025710:	2b00      	cmp	r3, #0
 8025712:	d09f      	beq.n	8025654 <_strtod_l+0x9f4>
 8025714:	940a      	str	r4, [sp, #40]	@ 0x28
 8025716:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025718:	e7a1      	b.n	802565e <_strtod_l+0x9fe>
 802571a:	2300      	movs	r3, #0
 802571c:	4c41      	ldr	r4, [pc, #260]	@ (8025824 <_strtod_l+0xbc4>)
 802571e:	0025      	movs	r5, r4
 8025720:	930a      	str	r3, [sp, #40]	@ 0x28
 8025722:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025724:	001c      	movs	r4, r3
 8025726:	e79a      	b.n	802565e <_strtod_l+0x9fe>
 8025728:	23d4      	movs	r3, #212	@ 0xd4
 802572a:	049b      	lsls	r3, r3, #18
 802572c:	18cf      	adds	r7, r1, r3
 802572e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025730:	9710      	str	r7, [sp, #64]	@ 0x40
 8025732:	2b00      	cmp	r3, #0
 8025734:	d1c2      	bne.n	80256bc <_strtod_l+0xa5c>
 8025736:	4b3d      	ldr	r3, [pc, #244]	@ (802582c <_strtod_l+0xbcc>)
 8025738:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802573a:	403b      	ands	r3, r7
 802573c:	429a      	cmp	r2, r3
 802573e:	d1bd      	bne.n	80256bc <_strtod_l+0xa5c>
 8025740:	0020      	movs	r0, r4
 8025742:	0029      	movs	r1, r5
 8025744:	f7da ffa0 	bl	8000688 <__aeabi_d2lz>
 8025748:	f7da ffd8 	bl	80006fc <__aeabi_l2d>
 802574c:	0002      	movs	r2, r0
 802574e:	000b      	movs	r3, r1
 8025750:	0020      	movs	r0, r4
 8025752:	0029      	movs	r1, r5
 8025754:	f7dd fbe4 	bl	8002f20 <__aeabi_dsub>
 8025758:	033c      	lsls	r4, r7, #12
 802575a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802575c:	0b24      	lsrs	r4, r4, #12
 802575e:	4334      	orrs	r4, r6
 8025760:	900e      	str	r0, [sp, #56]	@ 0x38
 8025762:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025764:	4a37      	ldr	r2, [pc, #220]	@ (8025844 <_strtod_l+0xbe4>)
 8025766:	431c      	orrs	r4, r3
 8025768:	d052      	beq.n	8025810 <_strtod_l+0xbb0>
 802576a:	4b37      	ldr	r3, [pc, #220]	@ (8025848 <_strtod_l+0xbe8>)
 802576c:	f7da fea6 	bl	80004bc <__aeabi_dcmplt>
 8025770:	2800      	cmp	r0, #0
 8025772:	d000      	beq.n	8025776 <_strtod_l+0xb16>
 8025774:	e4c1      	b.n	80250fa <_strtod_l+0x49a>
 8025776:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025778:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802577a:	4a34      	ldr	r2, [pc, #208]	@ (802584c <_strtod_l+0xbec>)
 802577c:	4b2a      	ldr	r3, [pc, #168]	@ (8025828 <_strtod_l+0xbc8>)
 802577e:	f7da feb1 	bl	80004e4 <__aeabi_dcmpgt>
 8025782:	2800      	cmp	r0, #0
 8025784:	d09a      	beq.n	80256bc <_strtod_l+0xa5c>
 8025786:	e4b8      	b.n	80250fa <_strtod_l+0x49a>
 8025788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802578a:	2b00      	cmp	r3, #0
 802578c:	d02a      	beq.n	80257e4 <_strtod_l+0xb84>
 802578e:	23d4      	movs	r3, #212	@ 0xd4
 8025790:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025792:	04db      	lsls	r3, r3, #19
 8025794:	429a      	cmp	r2, r3
 8025796:	d825      	bhi.n	80257e4 <_strtod_l+0xb84>
 8025798:	0020      	movs	r0, r4
 802579a:	0029      	movs	r1, r5
 802579c:	4a2c      	ldr	r2, [pc, #176]	@ (8025850 <_strtod_l+0xbf0>)
 802579e:	4b2d      	ldr	r3, [pc, #180]	@ (8025854 <_strtod_l+0xbf4>)
 80257a0:	f7da fe96 	bl	80004d0 <__aeabi_dcmple>
 80257a4:	2800      	cmp	r0, #0
 80257a6:	d016      	beq.n	80257d6 <_strtod_l+0xb76>
 80257a8:	0020      	movs	r0, r4
 80257aa:	0029      	movs	r1, r5
 80257ac:	f7da ff4e 	bl	800064c <__aeabi_d2uiz>
 80257b0:	2800      	cmp	r0, #0
 80257b2:	d100      	bne.n	80257b6 <_strtod_l+0xb56>
 80257b4:	3001      	adds	r0, #1
 80257b6:	f7de f849 	bl	800384c <__aeabi_ui2d>
 80257ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80257bc:	0004      	movs	r4, r0
 80257be:	000d      	movs	r5, r1
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	d122      	bne.n	802580a <_strtod_l+0xbaa>
 80257c4:	2380      	movs	r3, #128	@ 0x80
 80257c6:	061b      	lsls	r3, r3, #24
 80257c8:	18cb      	adds	r3, r1, r3
 80257ca:	9018      	str	r0, [sp, #96]	@ 0x60
 80257cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80257ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80257d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80257d2:	9216      	str	r2, [sp, #88]	@ 0x58
 80257d4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80257d6:	22d6      	movs	r2, #214	@ 0xd6
 80257d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80257da:	04d2      	lsls	r2, r2, #19
 80257dc:	189b      	adds	r3, r3, r2
 80257de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80257e0:	1a9b      	subs	r3, r3, r2
 80257e2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80257e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80257e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80257e8:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80257ea:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80257ec:	f002 ff12 	bl	8028614 <__ulp>
 80257f0:	0002      	movs	r2, r0
 80257f2:	000b      	movs	r3, r1
 80257f4:	0030      	movs	r0, r6
 80257f6:	0039      	movs	r1, r7
 80257f8:	f7dd f8ac 	bl	8002954 <__aeabi_dmul>
 80257fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80257fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025800:	f7dc f8a8 	bl	8001954 <__aeabi_dadd>
 8025804:	0006      	movs	r6, r0
 8025806:	000f      	movs	r7, r1
 8025808:	e791      	b.n	802572e <_strtod_l+0xace>
 802580a:	9418      	str	r4, [sp, #96]	@ 0x60
 802580c:	9519      	str	r5, [sp, #100]	@ 0x64
 802580e:	e7de      	b.n	80257ce <_strtod_l+0xb6e>
 8025810:	4b11      	ldr	r3, [pc, #68]	@ (8025858 <_strtod_l+0xbf8>)
 8025812:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8025816:	f7da fe51 	bl	80004bc <__aeabi_dcmplt>
 802581a:	e7b2      	b.n	8025782 <_strtod_l+0xb22>
 802581c:	fff00000 	.word	0xfff00000
 8025820:	000fffff 	.word	0x000fffff
 8025824:	3ff00000 	.word	0x3ff00000
 8025828:	3fe00000 	.word	0x3fe00000
 802582c:	7ff00000 	.word	0x7ff00000
 8025830:	7fe00000 	.word	0x7fe00000
 8025834:	fcb00000 	.word	0xfcb00000
 8025838:	7c9fffff 	.word	0x7c9fffff
 802583c:	7fefffff 	.word	0x7fefffff
 8025840:	bff00000 	.word	0xbff00000
 8025844:	94a03595 	.word	0x94a03595
 8025848:	3fdfffff 	.word	0x3fdfffff
 802584c:	35afe535 	.word	0x35afe535
 8025850:	ffc00000 	.word	0xffc00000
 8025854:	41dfffff 	.word	0x41dfffff
 8025858:	3fcfffff 	.word	0x3fcfffff

0802585c <strtod>:
 802585c:	b510      	push	{r4, lr}
 802585e:	4c04      	ldr	r4, [pc, #16]	@ (8025870 <strtod+0x14>)
 8025860:	000a      	movs	r2, r1
 8025862:	0001      	movs	r1, r0
 8025864:	4b03      	ldr	r3, [pc, #12]	@ (8025874 <strtod+0x18>)
 8025866:	6820      	ldr	r0, [r4, #0]
 8025868:	f7ff f9fa 	bl	8024c60 <_strtod_l>
 802586c:	bd10      	pop	{r4, pc}
 802586e:	46c0      	nop			@ (mov r8, r8)
 8025870:	200003ec 	.word	0x200003ec
 8025874:	20000280 	.word	0x20000280

08025878 <_strtol_l.isra.0>:
 8025878:	b5f0      	push	{r4, r5, r6, r7, lr}
 802587a:	b085      	sub	sp, #20
 802587c:	0017      	movs	r7, r2
 802587e:	001e      	movs	r6, r3
 8025880:	9003      	str	r0, [sp, #12]
 8025882:	9101      	str	r1, [sp, #4]
 8025884:	2b24      	cmp	r3, #36	@ 0x24
 8025886:	d823      	bhi.n	80258d0 <_strtol_l.isra.0+0x58>
 8025888:	000c      	movs	r4, r1
 802588a:	2b01      	cmp	r3, #1
 802588c:	d020      	beq.n	80258d0 <_strtol_l.isra.0+0x58>
 802588e:	4b3d      	ldr	r3, [pc, #244]	@ (8025984 <_strtol_l.isra.0+0x10c>)
 8025890:	2208      	movs	r2, #8
 8025892:	469c      	mov	ip, r3
 8025894:	0023      	movs	r3, r4
 8025896:	4661      	mov	r1, ip
 8025898:	781d      	ldrb	r5, [r3, #0]
 802589a:	3401      	adds	r4, #1
 802589c:	5d48      	ldrb	r0, [r1, r5]
 802589e:	0001      	movs	r1, r0
 80258a0:	4011      	ands	r1, r2
 80258a2:	4210      	tst	r0, r2
 80258a4:	d1f6      	bne.n	8025894 <_strtol_l.isra.0+0x1c>
 80258a6:	2d2d      	cmp	r5, #45	@ 0x2d
 80258a8:	d119      	bne.n	80258de <_strtol_l.isra.0+0x66>
 80258aa:	7825      	ldrb	r5, [r4, #0]
 80258ac:	1c9c      	adds	r4, r3, #2
 80258ae:	2301      	movs	r3, #1
 80258b0:	9300      	str	r3, [sp, #0]
 80258b2:	2210      	movs	r2, #16
 80258b4:	0033      	movs	r3, r6
 80258b6:	4393      	bics	r3, r2
 80258b8:	d11d      	bne.n	80258f6 <_strtol_l.isra.0+0x7e>
 80258ba:	2d30      	cmp	r5, #48	@ 0x30
 80258bc:	d115      	bne.n	80258ea <_strtol_l.isra.0+0x72>
 80258be:	2120      	movs	r1, #32
 80258c0:	7823      	ldrb	r3, [r4, #0]
 80258c2:	438b      	bics	r3, r1
 80258c4:	2b58      	cmp	r3, #88	@ 0x58
 80258c6:	d110      	bne.n	80258ea <_strtol_l.isra.0+0x72>
 80258c8:	7865      	ldrb	r5, [r4, #1]
 80258ca:	3402      	adds	r4, #2
 80258cc:	2610      	movs	r6, #16
 80258ce:	e012      	b.n	80258f6 <_strtol_l.isra.0+0x7e>
 80258d0:	f000 ffe8 	bl	80268a4 <__errno>
 80258d4:	2316      	movs	r3, #22
 80258d6:	6003      	str	r3, [r0, #0]
 80258d8:	2000      	movs	r0, #0
 80258da:	b005      	add	sp, #20
 80258dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80258de:	9100      	str	r1, [sp, #0]
 80258e0:	2d2b      	cmp	r5, #43	@ 0x2b
 80258e2:	d1e6      	bne.n	80258b2 <_strtol_l.isra.0+0x3a>
 80258e4:	7825      	ldrb	r5, [r4, #0]
 80258e6:	1c9c      	adds	r4, r3, #2
 80258e8:	e7e3      	b.n	80258b2 <_strtol_l.isra.0+0x3a>
 80258ea:	2e00      	cmp	r6, #0
 80258ec:	d1ee      	bne.n	80258cc <_strtol_l.isra.0+0x54>
 80258ee:	360a      	adds	r6, #10
 80258f0:	2d30      	cmp	r5, #48	@ 0x30
 80258f2:	d100      	bne.n	80258f6 <_strtol_l.isra.0+0x7e>
 80258f4:	3e02      	subs	r6, #2
 80258f6:	4a24      	ldr	r2, [pc, #144]	@ (8025988 <_strtol_l.isra.0+0x110>)
 80258f8:	9b00      	ldr	r3, [sp, #0]
 80258fa:	4694      	mov	ip, r2
 80258fc:	4463      	add	r3, ip
 80258fe:	0031      	movs	r1, r6
 8025900:	0018      	movs	r0, r3
 8025902:	9302      	str	r3, [sp, #8]
 8025904:	f7da fcd4 	bl	80002b0 <__aeabi_uidivmod>
 8025908:	2200      	movs	r2, #0
 802590a:	4684      	mov	ip, r0
 802590c:	0010      	movs	r0, r2
 802590e:	002b      	movs	r3, r5
 8025910:	3b30      	subs	r3, #48	@ 0x30
 8025912:	2b09      	cmp	r3, #9
 8025914:	d811      	bhi.n	802593a <_strtol_l.isra.0+0xc2>
 8025916:	001d      	movs	r5, r3
 8025918:	42ae      	cmp	r6, r5
 802591a:	dd1d      	ble.n	8025958 <_strtol_l.isra.0+0xe0>
 802591c:	1c53      	adds	r3, r2, #1
 802591e:	d009      	beq.n	8025934 <_strtol_l.isra.0+0xbc>
 8025920:	2201      	movs	r2, #1
 8025922:	4252      	negs	r2, r2
 8025924:	4584      	cmp	ip, r0
 8025926:	d305      	bcc.n	8025934 <_strtol_l.isra.0+0xbc>
 8025928:	d101      	bne.n	802592e <_strtol_l.isra.0+0xb6>
 802592a:	42a9      	cmp	r1, r5
 802592c:	db11      	blt.n	8025952 <_strtol_l.isra.0+0xda>
 802592e:	2201      	movs	r2, #1
 8025930:	4370      	muls	r0, r6
 8025932:	1828      	adds	r0, r5, r0
 8025934:	7825      	ldrb	r5, [r4, #0]
 8025936:	3401      	adds	r4, #1
 8025938:	e7e9      	b.n	802590e <_strtol_l.isra.0+0x96>
 802593a:	002b      	movs	r3, r5
 802593c:	3b41      	subs	r3, #65	@ 0x41
 802593e:	2b19      	cmp	r3, #25
 8025940:	d801      	bhi.n	8025946 <_strtol_l.isra.0+0xce>
 8025942:	3d37      	subs	r5, #55	@ 0x37
 8025944:	e7e8      	b.n	8025918 <_strtol_l.isra.0+0xa0>
 8025946:	002b      	movs	r3, r5
 8025948:	3b61      	subs	r3, #97	@ 0x61
 802594a:	2b19      	cmp	r3, #25
 802594c:	d804      	bhi.n	8025958 <_strtol_l.isra.0+0xe0>
 802594e:	3d57      	subs	r5, #87	@ 0x57
 8025950:	e7e2      	b.n	8025918 <_strtol_l.isra.0+0xa0>
 8025952:	2201      	movs	r2, #1
 8025954:	4252      	negs	r2, r2
 8025956:	e7ed      	b.n	8025934 <_strtol_l.isra.0+0xbc>
 8025958:	1c53      	adds	r3, r2, #1
 802595a:	d108      	bne.n	802596e <_strtol_l.isra.0+0xf6>
 802595c:	2322      	movs	r3, #34	@ 0x22
 802595e:	9a03      	ldr	r2, [sp, #12]
 8025960:	9802      	ldr	r0, [sp, #8]
 8025962:	6013      	str	r3, [r2, #0]
 8025964:	2f00      	cmp	r7, #0
 8025966:	d0b8      	beq.n	80258da <_strtol_l.isra.0+0x62>
 8025968:	1e63      	subs	r3, r4, #1
 802596a:	9301      	str	r3, [sp, #4]
 802596c:	e007      	b.n	802597e <_strtol_l.isra.0+0x106>
 802596e:	9b00      	ldr	r3, [sp, #0]
 8025970:	2b00      	cmp	r3, #0
 8025972:	d000      	beq.n	8025976 <_strtol_l.isra.0+0xfe>
 8025974:	4240      	negs	r0, r0
 8025976:	2f00      	cmp	r7, #0
 8025978:	d0af      	beq.n	80258da <_strtol_l.isra.0+0x62>
 802597a:	2a00      	cmp	r2, #0
 802597c:	d1f4      	bne.n	8025968 <_strtol_l.isra.0+0xf0>
 802597e:	9b01      	ldr	r3, [sp, #4]
 8025980:	603b      	str	r3, [r7, #0]
 8025982:	e7aa      	b.n	80258da <_strtol_l.isra.0+0x62>
 8025984:	0802efd9 	.word	0x0802efd9
 8025988:	7fffffff 	.word	0x7fffffff

0802598c <strtol>:
 802598c:	b510      	push	{r4, lr}
 802598e:	4c04      	ldr	r4, [pc, #16]	@ (80259a0 <strtol+0x14>)
 8025990:	0013      	movs	r3, r2
 8025992:	000a      	movs	r2, r1
 8025994:	0001      	movs	r1, r0
 8025996:	6820      	ldr	r0, [r4, #0]
 8025998:	f7ff ff6e 	bl	8025878 <_strtol_l.isra.0>
 802599c:	bd10      	pop	{r4, pc}
 802599e:	46c0      	nop			@ (mov r8, r8)
 80259a0:	200003ec 	.word	0x200003ec

080259a4 <__cvt>:
 80259a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259a6:	001f      	movs	r7, r3
 80259a8:	2300      	movs	r3, #0
 80259aa:	0016      	movs	r6, r2
 80259ac:	b08b      	sub	sp, #44	@ 0x2c
 80259ae:	429f      	cmp	r7, r3
 80259b0:	da04      	bge.n	80259bc <__cvt+0x18>
 80259b2:	2180      	movs	r1, #128	@ 0x80
 80259b4:	0609      	lsls	r1, r1, #24
 80259b6:	187b      	adds	r3, r7, r1
 80259b8:	001f      	movs	r7, r3
 80259ba:	232d      	movs	r3, #45	@ 0x2d
 80259bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80259be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80259c0:	7013      	strb	r3, [r2, #0]
 80259c2:	2320      	movs	r3, #32
 80259c4:	2203      	movs	r2, #3
 80259c6:	439d      	bics	r5, r3
 80259c8:	2d46      	cmp	r5, #70	@ 0x46
 80259ca:	d007      	beq.n	80259dc <__cvt+0x38>
 80259cc:	002b      	movs	r3, r5
 80259ce:	3b45      	subs	r3, #69	@ 0x45
 80259d0:	4259      	negs	r1, r3
 80259d2:	414b      	adcs	r3, r1
 80259d4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80259d6:	3a01      	subs	r2, #1
 80259d8:	18cb      	adds	r3, r1, r3
 80259da:	9310      	str	r3, [sp, #64]	@ 0x40
 80259dc:	ab09      	add	r3, sp, #36	@ 0x24
 80259de:	9304      	str	r3, [sp, #16]
 80259e0:	ab08      	add	r3, sp, #32
 80259e2:	9303      	str	r3, [sp, #12]
 80259e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80259e6:	9200      	str	r2, [sp, #0]
 80259e8:	9302      	str	r3, [sp, #8]
 80259ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80259ec:	0032      	movs	r2, r6
 80259ee:	9301      	str	r3, [sp, #4]
 80259f0:	003b      	movs	r3, r7
 80259f2:	f001 f825 	bl	8026a40 <_dtoa_r>
 80259f6:	0004      	movs	r4, r0
 80259f8:	2d47      	cmp	r5, #71	@ 0x47
 80259fa:	d11b      	bne.n	8025a34 <__cvt+0x90>
 80259fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80259fe:	07db      	lsls	r3, r3, #31
 8025a00:	d511      	bpl.n	8025a26 <__cvt+0x82>
 8025a02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025a04:	18c3      	adds	r3, r0, r3
 8025a06:	9307      	str	r3, [sp, #28]
 8025a08:	2200      	movs	r2, #0
 8025a0a:	2300      	movs	r3, #0
 8025a0c:	0030      	movs	r0, r6
 8025a0e:	0039      	movs	r1, r7
 8025a10:	f7da fd4e 	bl	80004b0 <__aeabi_dcmpeq>
 8025a14:	2800      	cmp	r0, #0
 8025a16:	d001      	beq.n	8025a1c <__cvt+0x78>
 8025a18:	9b07      	ldr	r3, [sp, #28]
 8025a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025a1c:	2230      	movs	r2, #48	@ 0x30
 8025a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a20:	9907      	ldr	r1, [sp, #28]
 8025a22:	428b      	cmp	r3, r1
 8025a24:	d320      	bcc.n	8025a68 <__cvt+0xc4>
 8025a26:	0020      	movs	r0, r4
 8025a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a2a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025a2c:	1b1b      	subs	r3, r3, r4
 8025a2e:	6013      	str	r3, [r2, #0]
 8025a30:	b00b      	add	sp, #44	@ 0x2c
 8025a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025a36:	18c3      	adds	r3, r0, r3
 8025a38:	9307      	str	r3, [sp, #28]
 8025a3a:	2d46      	cmp	r5, #70	@ 0x46
 8025a3c:	d1e4      	bne.n	8025a08 <__cvt+0x64>
 8025a3e:	7803      	ldrb	r3, [r0, #0]
 8025a40:	2b30      	cmp	r3, #48	@ 0x30
 8025a42:	d10c      	bne.n	8025a5e <__cvt+0xba>
 8025a44:	2200      	movs	r2, #0
 8025a46:	2300      	movs	r3, #0
 8025a48:	0030      	movs	r0, r6
 8025a4a:	0039      	movs	r1, r7
 8025a4c:	f7da fd30 	bl	80004b0 <__aeabi_dcmpeq>
 8025a50:	2800      	cmp	r0, #0
 8025a52:	d104      	bne.n	8025a5e <__cvt+0xba>
 8025a54:	2301      	movs	r3, #1
 8025a56:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025a58:	1a9b      	subs	r3, r3, r2
 8025a5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025a5c:	6013      	str	r3, [r2, #0]
 8025a5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a60:	9a07      	ldr	r2, [sp, #28]
 8025a62:	681b      	ldr	r3, [r3, #0]
 8025a64:	18d3      	adds	r3, r2, r3
 8025a66:	e7ce      	b.n	8025a06 <__cvt+0x62>
 8025a68:	1c59      	adds	r1, r3, #1
 8025a6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8025a6c:	701a      	strb	r2, [r3, #0]
 8025a6e:	e7d6      	b.n	8025a1e <__cvt+0x7a>

08025a70 <__exponent>:
 8025a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a72:	232b      	movs	r3, #43	@ 0x2b
 8025a74:	b085      	sub	sp, #20
 8025a76:	0005      	movs	r5, r0
 8025a78:	1e0c      	subs	r4, r1, #0
 8025a7a:	7002      	strb	r2, [r0, #0]
 8025a7c:	da01      	bge.n	8025a82 <__exponent+0x12>
 8025a7e:	424c      	negs	r4, r1
 8025a80:	3302      	adds	r3, #2
 8025a82:	706b      	strb	r3, [r5, #1]
 8025a84:	2c09      	cmp	r4, #9
 8025a86:	dd2c      	ble.n	8025ae2 <__exponent+0x72>
 8025a88:	ab02      	add	r3, sp, #8
 8025a8a:	1dde      	adds	r6, r3, #7
 8025a8c:	0020      	movs	r0, r4
 8025a8e:	210a      	movs	r1, #10
 8025a90:	f7da fcf8 	bl	8000484 <__aeabi_idivmod>
 8025a94:	0037      	movs	r7, r6
 8025a96:	3130      	adds	r1, #48	@ 0x30
 8025a98:	3e01      	subs	r6, #1
 8025a9a:	0020      	movs	r0, r4
 8025a9c:	7031      	strb	r1, [r6, #0]
 8025a9e:	210a      	movs	r1, #10
 8025aa0:	9401      	str	r4, [sp, #4]
 8025aa2:	f7da fc09 	bl	80002b8 <__divsi3>
 8025aa6:	9b01      	ldr	r3, [sp, #4]
 8025aa8:	0004      	movs	r4, r0
 8025aaa:	2b63      	cmp	r3, #99	@ 0x63
 8025aac:	dcee      	bgt.n	8025a8c <__exponent+0x1c>
 8025aae:	1eba      	subs	r2, r7, #2
 8025ab0:	1ca8      	adds	r0, r5, #2
 8025ab2:	0001      	movs	r1, r0
 8025ab4:	0013      	movs	r3, r2
 8025ab6:	3430      	adds	r4, #48	@ 0x30
 8025ab8:	7014      	strb	r4, [r2, #0]
 8025aba:	ac02      	add	r4, sp, #8
 8025abc:	3407      	adds	r4, #7
 8025abe:	429c      	cmp	r4, r3
 8025ac0:	d80a      	bhi.n	8025ad8 <__exponent+0x68>
 8025ac2:	2300      	movs	r3, #0
 8025ac4:	4294      	cmp	r4, r2
 8025ac6:	d303      	bcc.n	8025ad0 <__exponent+0x60>
 8025ac8:	3309      	adds	r3, #9
 8025aca:	aa02      	add	r2, sp, #8
 8025acc:	189b      	adds	r3, r3, r2
 8025ace:	1bdb      	subs	r3, r3, r7
 8025ad0:	18c0      	adds	r0, r0, r3
 8025ad2:	1b40      	subs	r0, r0, r5
 8025ad4:	b005      	add	sp, #20
 8025ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ad8:	781c      	ldrb	r4, [r3, #0]
 8025ada:	3301      	adds	r3, #1
 8025adc:	700c      	strb	r4, [r1, #0]
 8025ade:	3101      	adds	r1, #1
 8025ae0:	e7eb      	b.n	8025aba <__exponent+0x4a>
 8025ae2:	2330      	movs	r3, #48	@ 0x30
 8025ae4:	18e4      	adds	r4, r4, r3
 8025ae6:	70ab      	strb	r3, [r5, #2]
 8025ae8:	1d28      	adds	r0, r5, #4
 8025aea:	70ec      	strb	r4, [r5, #3]
 8025aec:	e7f1      	b.n	8025ad2 <__exponent+0x62>
	...

08025af0 <_printf_float>:
 8025af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025af2:	b097      	sub	sp, #92	@ 0x5c
 8025af4:	000d      	movs	r5, r1
 8025af6:	920a      	str	r2, [sp, #40]	@ 0x28
 8025af8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025afa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025afc:	9009      	str	r0, [sp, #36]	@ 0x24
 8025afe:	f000 fe7f 	bl	8026800 <_localeconv_r>
 8025b02:	6803      	ldr	r3, [r0, #0]
 8025b04:	0018      	movs	r0, r3
 8025b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8025b08:	f7da fb30 	bl	800016c <strlen>
 8025b0c:	2300      	movs	r3, #0
 8025b0e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025b10:	9314      	str	r3, [sp, #80]	@ 0x50
 8025b12:	7e2b      	ldrb	r3, [r5, #24]
 8025b14:	2207      	movs	r2, #7
 8025b16:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b18:	682b      	ldr	r3, [r5, #0]
 8025b1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025b1e:	6823      	ldr	r3, [r4, #0]
 8025b20:	05c9      	lsls	r1, r1, #23
 8025b22:	d545      	bpl.n	8025bb0 <_printf_float+0xc0>
 8025b24:	189b      	adds	r3, r3, r2
 8025b26:	4393      	bics	r3, r2
 8025b28:	001a      	movs	r2, r3
 8025b2a:	3208      	adds	r2, #8
 8025b2c:	6022      	str	r2, [r4, #0]
 8025b2e:	2201      	movs	r2, #1
 8025b30:	681e      	ldr	r6, [r3, #0]
 8025b32:	685f      	ldr	r7, [r3, #4]
 8025b34:	007b      	lsls	r3, r7, #1
 8025b36:	085b      	lsrs	r3, r3, #1
 8025b38:	9311      	str	r3, [sp, #68]	@ 0x44
 8025b3a:	9610      	str	r6, [sp, #64]	@ 0x40
 8025b3c:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025b3e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025b40:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025b42:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025b44:	4ba7      	ldr	r3, [pc, #668]	@ (8025de4 <_printf_float+0x2f4>)
 8025b46:	4252      	negs	r2, r2
 8025b48:	f7dd fdf4 	bl	8003734 <__aeabi_dcmpun>
 8025b4c:	2800      	cmp	r0, #0
 8025b4e:	d131      	bne.n	8025bb4 <_printf_float+0xc4>
 8025b50:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025b52:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025b54:	2201      	movs	r2, #1
 8025b56:	4ba3      	ldr	r3, [pc, #652]	@ (8025de4 <_printf_float+0x2f4>)
 8025b58:	4252      	negs	r2, r2
 8025b5a:	f7da fcb9 	bl	80004d0 <__aeabi_dcmple>
 8025b5e:	2800      	cmp	r0, #0
 8025b60:	d128      	bne.n	8025bb4 <_printf_float+0xc4>
 8025b62:	2200      	movs	r2, #0
 8025b64:	2300      	movs	r3, #0
 8025b66:	0030      	movs	r0, r6
 8025b68:	0039      	movs	r1, r7
 8025b6a:	f7da fca7 	bl	80004bc <__aeabi_dcmplt>
 8025b6e:	2800      	cmp	r0, #0
 8025b70:	d003      	beq.n	8025b7a <_printf_float+0x8a>
 8025b72:	002b      	movs	r3, r5
 8025b74:	222d      	movs	r2, #45	@ 0x2d
 8025b76:	3343      	adds	r3, #67	@ 0x43
 8025b78:	701a      	strb	r2, [r3, #0]
 8025b7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b7c:	4f9a      	ldr	r7, [pc, #616]	@ (8025de8 <_printf_float+0x2f8>)
 8025b7e:	2b47      	cmp	r3, #71	@ 0x47
 8025b80:	d800      	bhi.n	8025b84 <_printf_float+0x94>
 8025b82:	4f9a      	ldr	r7, [pc, #616]	@ (8025dec <_printf_float+0x2fc>)
 8025b84:	2303      	movs	r3, #3
 8025b86:	2400      	movs	r4, #0
 8025b88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025b8a:	612b      	str	r3, [r5, #16]
 8025b8c:	3301      	adds	r3, #1
 8025b8e:	439a      	bics	r2, r3
 8025b90:	602a      	str	r2, [r5, #0]
 8025b92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025b94:	0029      	movs	r1, r5
 8025b96:	9300      	str	r3, [sp, #0]
 8025b98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025b9c:	aa15      	add	r2, sp, #84	@ 0x54
 8025b9e:	f000 f9e5 	bl	8025f6c <_printf_common>
 8025ba2:	3001      	adds	r0, #1
 8025ba4:	d000      	beq.n	8025ba8 <_printf_float+0xb8>
 8025ba6:	e09e      	b.n	8025ce6 <_printf_float+0x1f6>
 8025ba8:	2001      	movs	r0, #1
 8025baa:	4240      	negs	r0, r0
 8025bac:	b017      	add	sp, #92	@ 0x5c
 8025bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025bb0:	3307      	adds	r3, #7
 8025bb2:	e7b8      	b.n	8025b26 <_printf_float+0x36>
 8025bb4:	0032      	movs	r2, r6
 8025bb6:	003b      	movs	r3, r7
 8025bb8:	0030      	movs	r0, r6
 8025bba:	0039      	movs	r1, r7
 8025bbc:	f7dd fdba 	bl	8003734 <__aeabi_dcmpun>
 8025bc0:	2800      	cmp	r0, #0
 8025bc2:	d00b      	beq.n	8025bdc <_printf_float+0xec>
 8025bc4:	2f00      	cmp	r7, #0
 8025bc6:	da03      	bge.n	8025bd0 <_printf_float+0xe0>
 8025bc8:	002b      	movs	r3, r5
 8025bca:	222d      	movs	r2, #45	@ 0x2d
 8025bcc:	3343      	adds	r3, #67	@ 0x43
 8025bce:	701a      	strb	r2, [r3, #0]
 8025bd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bd2:	4f87      	ldr	r7, [pc, #540]	@ (8025df0 <_printf_float+0x300>)
 8025bd4:	2b47      	cmp	r3, #71	@ 0x47
 8025bd6:	d8d5      	bhi.n	8025b84 <_printf_float+0x94>
 8025bd8:	4f86      	ldr	r7, [pc, #536]	@ (8025df4 <_printf_float+0x304>)
 8025bda:	e7d3      	b.n	8025b84 <_printf_float+0x94>
 8025bdc:	2220      	movs	r2, #32
 8025bde:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025be0:	686b      	ldr	r3, [r5, #4]
 8025be2:	4394      	bics	r4, r2
 8025be4:	1c5a      	adds	r2, r3, #1
 8025be6:	d146      	bne.n	8025c76 <_printf_float+0x186>
 8025be8:	3307      	adds	r3, #7
 8025bea:	606b      	str	r3, [r5, #4]
 8025bec:	2380      	movs	r3, #128	@ 0x80
 8025bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025bf0:	00db      	lsls	r3, r3, #3
 8025bf2:	4313      	orrs	r3, r2
 8025bf4:	2200      	movs	r2, #0
 8025bf6:	602b      	str	r3, [r5, #0]
 8025bf8:	9206      	str	r2, [sp, #24]
 8025bfa:	aa14      	add	r2, sp, #80	@ 0x50
 8025bfc:	9205      	str	r2, [sp, #20]
 8025bfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025c00:	a90a      	add	r1, sp, #40	@ 0x28
 8025c02:	9204      	str	r2, [sp, #16]
 8025c04:	aa13      	add	r2, sp, #76	@ 0x4c
 8025c06:	9203      	str	r2, [sp, #12]
 8025c08:	2223      	movs	r2, #35	@ 0x23
 8025c0a:	1852      	adds	r2, r2, r1
 8025c0c:	9202      	str	r2, [sp, #8]
 8025c0e:	9301      	str	r3, [sp, #4]
 8025c10:	686b      	ldr	r3, [r5, #4]
 8025c12:	0032      	movs	r2, r6
 8025c14:	9300      	str	r3, [sp, #0]
 8025c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c18:	003b      	movs	r3, r7
 8025c1a:	f7ff fec3 	bl	80259a4 <__cvt>
 8025c1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025c20:	0007      	movs	r7, r0
 8025c22:	2c47      	cmp	r4, #71	@ 0x47
 8025c24:	d12d      	bne.n	8025c82 <_printf_float+0x192>
 8025c26:	1cd3      	adds	r3, r2, #3
 8025c28:	db02      	blt.n	8025c30 <_printf_float+0x140>
 8025c2a:	686b      	ldr	r3, [r5, #4]
 8025c2c:	429a      	cmp	r2, r3
 8025c2e:	dd47      	ble.n	8025cc0 <_printf_float+0x1d0>
 8025c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c32:	3b02      	subs	r3, #2
 8025c34:	b2db      	uxtb	r3, r3
 8025c36:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c38:	0028      	movs	r0, r5
 8025c3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025c3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025c3e:	3901      	subs	r1, #1
 8025c40:	3050      	adds	r0, #80	@ 0x50
 8025c42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025c44:	f7ff ff14 	bl	8025a70 <__exponent>
 8025c48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025c4a:	0004      	movs	r4, r0
 8025c4c:	1813      	adds	r3, r2, r0
 8025c4e:	612b      	str	r3, [r5, #16]
 8025c50:	2a01      	cmp	r2, #1
 8025c52:	dc02      	bgt.n	8025c5a <_printf_float+0x16a>
 8025c54:	682a      	ldr	r2, [r5, #0]
 8025c56:	07d2      	lsls	r2, r2, #31
 8025c58:	d501      	bpl.n	8025c5e <_printf_float+0x16e>
 8025c5a:	3301      	adds	r3, #1
 8025c5c:	612b      	str	r3, [r5, #16]
 8025c5e:	2323      	movs	r3, #35	@ 0x23
 8025c60:	aa0a      	add	r2, sp, #40	@ 0x28
 8025c62:	189b      	adds	r3, r3, r2
 8025c64:	781b      	ldrb	r3, [r3, #0]
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	d100      	bne.n	8025c6c <_printf_float+0x17c>
 8025c6a:	e792      	b.n	8025b92 <_printf_float+0xa2>
 8025c6c:	002b      	movs	r3, r5
 8025c6e:	222d      	movs	r2, #45	@ 0x2d
 8025c70:	3343      	adds	r3, #67	@ 0x43
 8025c72:	701a      	strb	r2, [r3, #0]
 8025c74:	e78d      	b.n	8025b92 <_printf_float+0xa2>
 8025c76:	2c47      	cmp	r4, #71	@ 0x47
 8025c78:	d1b8      	bne.n	8025bec <_printf_float+0xfc>
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d1b6      	bne.n	8025bec <_printf_float+0xfc>
 8025c7e:	3301      	adds	r3, #1
 8025c80:	e7b3      	b.n	8025bea <_printf_float+0xfa>
 8025c82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c84:	2b65      	cmp	r3, #101	@ 0x65
 8025c86:	d9d7      	bls.n	8025c38 <_printf_float+0x148>
 8025c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c8a:	2b66      	cmp	r3, #102	@ 0x66
 8025c8c:	d11a      	bne.n	8025cc4 <_printf_float+0x1d4>
 8025c8e:	686b      	ldr	r3, [r5, #4]
 8025c90:	2a00      	cmp	r2, #0
 8025c92:	dd09      	ble.n	8025ca8 <_printf_float+0x1b8>
 8025c94:	612a      	str	r2, [r5, #16]
 8025c96:	2b00      	cmp	r3, #0
 8025c98:	d102      	bne.n	8025ca0 <_printf_float+0x1b0>
 8025c9a:	6829      	ldr	r1, [r5, #0]
 8025c9c:	07c9      	lsls	r1, r1, #31
 8025c9e:	d50b      	bpl.n	8025cb8 <_printf_float+0x1c8>
 8025ca0:	3301      	adds	r3, #1
 8025ca2:	189b      	adds	r3, r3, r2
 8025ca4:	612b      	str	r3, [r5, #16]
 8025ca6:	e007      	b.n	8025cb8 <_printf_float+0x1c8>
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	d103      	bne.n	8025cb4 <_printf_float+0x1c4>
 8025cac:	2201      	movs	r2, #1
 8025cae:	6829      	ldr	r1, [r5, #0]
 8025cb0:	4211      	tst	r1, r2
 8025cb2:	d000      	beq.n	8025cb6 <_printf_float+0x1c6>
 8025cb4:	1c9a      	adds	r2, r3, #2
 8025cb6:	612a      	str	r2, [r5, #16]
 8025cb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025cba:	2400      	movs	r4, #0
 8025cbc:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025cbe:	e7ce      	b.n	8025c5e <_printf_float+0x16e>
 8025cc0:	2367      	movs	r3, #103	@ 0x67
 8025cc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8025cc4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025cc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025cc8:	4299      	cmp	r1, r3
 8025cca:	db06      	blt.n	8025cda <_printf_float+0x1ea>
 8025ccc:	682b      	ldr	r3, [r5, #0]
 8025cce:	6129      	str	r1, [r5, #16]
 8025cd0:	07db      	lsls	r3, r3, #31
 8025cd2:	d5f1      	bpl.n	8025cb8 <_printf_float+0x1c8>
 8025cd4:	3101      	adds	r1, #1
 8025cd6:	6129      	str	r1, [r5, #16]
 8025cd8:	e7ee      	b.n	8025cb8 <_printf_float+0x1c8>
 8025cda:	2201      	movs	r2, #1
 8025cdc:	2900      	cmp	r1, #0
 8025cde:	dce0      	bgt.n	8025ca2 <_printf_float+0x1b2>
 8025ce0:	1892      	adds	r2, r2, r2
 8025ce2:	1a52      	subs	r2, r2, r1
 8025ce4:	e7dd      	b.n	8025ca2 <_printf_float+0x1b2>
 8025ce6:	682a      	ldr	r2, [r5, #0]
 8025ce8:	0553      	lsls	r3, r2, #21
 8025cea:	d408      	bmi.n	8025cfe <_printf_float+0x20e>
 8025cec:	692b      	ldr	r3, [r5, #16]
 8025cee:	003a      	movs	r2, r7
 8025cf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cf4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025cf6:	47a0      	blx	r4
 8025cf8:	3001      	adds	r0, #1
 8025cfa:	d129      	bne.n	8025d50 <_printf_float+0x260>
 8025cfc:	e754      	b.n	8025ba8 <_printf_float+0xb8>
 8025cfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d00:	2b65      	cmp	r3, #101	@ 0x65
 8025d02:	d800      	bhi.n	8025d06 <_printf_float+0x216>
 8025d04:	e0db      	b.n	8025ebe <_printf_float+0x3ce>
 8025d06:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025d08:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025d0a:	2200      	movs	r2, #0
 8025d0c:	2300      	movs	r3, #0
 8025d0e:	f7da fbcf 	bl	80004b0 <__aeabi_dcmpeq>
 8025d12:	2800      	cmp	r0, #0
 8025d14:	d033      	beq.n	8025d7e <_printf_float+0x28e>
 8025d16:	2301      	movs	r3, #1
 8025d18:	4a37      	ldr	r2, [pc, #220]	@ (8025df8 <_printf_float+0x308>)
 8025d1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d20:	47a0      	blx	r4
 8025d22:	3001      	adds	r0, #1
 8025d24:	d100      	bne.n	8025d28 <_printf_float+0x238>
 8025d26:	e73f      	b.n	8025ba8 <_printf_float+0xb8>
 8025d28:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025d2a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d2c:	42b3      	cmp	r3, r6
 8025d2e:	db02      	blt.n	8025d36 <_printf_float+0x246>
 8025d30:	682b      	ldr	r3, [r5, #0]
 8025d32:	07db      	lsls	r3, r3, #31
 8025d34:	d50c      	bpl.n	8025d50 <_printf_float+0x260>
 8025d36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025d3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025d3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d40:	47a0      	blx	r4
 8025d42:	2400      	movs	r4, #0
 8025d44:	3001      	adds	r0, #1
 8025d46:	d100      	bne.n	8025d4a <_printf_float+0x25a>
 8025d48:	e72e      	b.n	8025ba8 <_printf_float+0xb8>
 8025d4a:	1e73      	subs	r3, r6, #1
 8025d4c:	42a3      	cmp	r3, r4
 8025d4e:	dc0a      	bgt.n	8025d66 <_printf_float+0x276>
 8025d50:	682b      	ldr	r3, [r5, #0]
 8025d52:	079b      	lsls	r3, r3, #30
 8025d54:	d500      	bpl.n	8025d58 <_printf_float+0x268>
 8025d56:	e106      	b.n	8025f66 <_printf_float+0x476>
 8025d58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025d5a:	68e8      	ldr	r0, [r5, #12]
 8025d5c:	4298      	cmp	r0, r3
 8025d5e:	db00      	blt.n	8025d62 <_printf_float+0x272>
 8025d60:	e724      	b.n	8025bac <_printf_float+0xbc>
 8025d62:	0018      	movs	r0, r3
 8025d64:	e722      	b.n	8025bac <_printf_float+0xbc>
 8025d66:	002a      	movs	r2, r5
 8025d68:	2301      	movs	r3, #1
 8025d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d6e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025d70:	321a      	adds	r2, #26
 8025d72:	47b8      	blx	r7
 8025d74:	3001      	adds	r0, #1
 8025d76:	d100      	bne.n	8025d7a <_printf_float+0x28a>
 8025d78:	e716      	b.n	8025ba8 <_printf_float+0xb8>
 8025d7a:	3401      	adds	r4, #1
 8025d7c:	e7e5      	b.n	8025d4a <_printf_float+0x25a>
 8025d7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d80:	2b00      	cmp	r3, #0
 8025d82:	dc3b      	bgt.n	8025dfc <_printf_float+0x30c>
 8025d84:	2301      	movs	r3, #1
 8025d86:	4a1c      	ldr	r2, [pc, #112]	@ (8025df8 <_printf_float+0x308>)
 8025d88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d8e:	47a0      	blx	r4
 8025d90:	3001      	adds	r0, #1
 8025d92:	d100      	bne.n	8025d96 <_printf_float+0x2a6>
 8025d94:	e708      	b.n	8025ba8 <_printf_float+0xb8>
 8025d96:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025d98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d9a:	4333      	orrs	r3, r6
 8025d9c:	d102      	bne.n	8025da4 <_printf_float+0x2b4>
 8025d9e:	682b      	ldr	r3, [r5, #0]
 8025da0:	07db      	lsls	r3, r3, #31
 8025da2:	d5d5      	bpl.n	8025d50 <_printf_float+0x260>
 8025da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025da6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025da8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dae:	47a0      	blx	r4
 8025db0:	2300      	movs	r3, #0
 8025db2:	3001      	adds	r0, #1
 8025db4:	d100      	bne.n	8025db8 <_printf_float+0x2c8>
 8025db6:	e6f7      	b.n	8025ba8 <_printf_float+0xb8>
 8025db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8025dba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025dbc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025dbe:	425b      	negs	r3, r3
 8025dc0:	4293      	cmp	r3, r2
 8025dc2:	dc01      	bgt.n	8025dc8 <_printf_float+0x2d8>
 8025dc4:	0033      	movs	r3, r6
 8025dc6:	e792      	b.n	8025cee <_printf_float+0x1fe>
 8025dc8:	002a      	movs	r2, r5
 8025dca:	2301      	movs	r3, #1
 8025dcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dd2:	321a      	adds	r2, #26
 8025dd4:	47a0      	blx	r4
 8025dd6:	3001      	adds	r0, #1
 8025dd8:	d100      	bne.n	8025ddc <_printf_float+0x2ec>
 8025dda:	e6e5      	b.n	8025ba8 <_printf_float+0xb8>
 8025ddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025dde:	3301      	adds	r3, #1
 8025de0:	e7ea      	b.n	8025db8 <_printf_float+0x2c8>
 8025de2:	46c0      	nop			@ (mov r8, r8)
 8025de4:	7fefffff 	.word	0x7fefffff
 8025de8:	0802edb6 	.word	0x0802edb6
 8025dec:	0802edb2 	.word	0x0802edb2
 8025df0:	0802edbe 	.word	0x0802edbe
 8025df4:	0802edba 	.word	0x0802edba
 8025df8:	0802edc2 	.word	0x0802edc2
 8025dfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025dfe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025e00:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e02:	429e      	cmp	r6, r3
 8025e04:	dd00      	ble.n	8025e08 <_printf_float+0x318>
 8025e06:	001e      	movs	r6, r3
 8025e08:	2e00      	cmp	r6, #0
 8025e0a:	dc31      	bgt.n	8025e70 <_printf_float+0x380>
 8025e0c:	43f3      	mvns	r3, r6
 8025e0e:	2400      	movs	r4, #0
 8025e10:	17db      	asrs	r3, r3, #31
 8025e12:	4033      	ands	r3, r6
 8025e14:	930e      	str	r3, [sp, #56]	@ 0x38
 8025e16:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025e1a:	1af3      	subs	r3, r6, r3
 8025e1c:	42a3      	cmp	r3, r4
 8025e1e:	dc30      	bgt.n	8025e82 <_printf_float+0x392>
 8025e20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025e22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e24:	429a      	cmp	r2, r3
 8025e26:	dc38      	bgt.n	8025e9a <_printf_float+0x3aa>
 8025e28:	682b      	ldr	r3, [r5, #0]
 8025e2a:	07db      	lsls	r3, r3, #31
 8025e2c:	d435      	bmi.n	8025e9a <_printf_float+0x3aa>
 8025e2e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e34:	1b9b      	subs	r3, r3, r6
 8025e36:	1b14      	subs	r4, r2, r4
 8025e38:	429c      	cmp	r4, r3
 8025e3a:	dd00      	ble.n	8025e3e <_printf_float+0x34e>
 8025e3c:	001c      	movs	r4, r3
 8025e3e:	2c00      	cmp	r4, #0
 8025e40:	dc34      	bgt.n	8025eac <_printf_float+0x3bc>
 8025e42:	43e3      	mvns	r3, r4
 8025e44:	2600      	movs	r6, #0
 8025e46:	17db      	asrs	r3, r3, #31
 8025e48:	401c      	ands	r4, r3
 8025e4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025e4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e4e:	1ad3      	subs	r3, r2, r3
 8025e50:	1b1b      	subs	r3, r3, r4
 8025e52:	42b3      	cmp	r3, r6
 8025e54:	dc00      	bgt.n	8025e58 <_printf_float+0x368>
 8025e56:	e77b      	b.n	8025d50 <_printf_float+0x260>
 8025e58:	002a      	movs	r2, r5
 8025e5a:	2301      	movs	r3, #1
 8025e5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e62:	321a      	adds	r2, #26
 8025e64:	47b8      	blx	r7
 8025e66:	3001      	adds	r0, #1
 8025e68:	d100      	bne.n	8025e6c <_printf_float+0x37c>
 8025e6a:	e69d      	b.n	8025ba8 <_printf_float+0xb8>
 8025e6c:	3601      	adds	r6, #1
 8025e6e:	e7ec      	b.n	8025e4a <_printf_float+0x35a>
 8025e70:	0033      	movs	r3, r6
 8025e72:	003a      	movs	r2, r7
 8025e74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e7a:	47a0      	blx	r4
 8025e7c:	3001      	adds	r0, #1
 8025e7e:	d1c5      	bne.n	8025e0c <_printf_float+0x31c>
 8025e80:	e692      	b.n	8025ba8 <_printf_float+0xb8>
 8025e82:	002a      	movs	r2, r5
 8025e84:	2301      	movs	r3, #1
 8025e86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e8a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e8c:	321a      	adds	r2, #26
 8025e8e:	47b0      	blx	r6
 8025e90:	3001      	adds	r0, #1
 8025e92:	d100      	bne.n	8025e96 <_printf_float+0x3a6>
 8025e94:	e688      	b.n	8025ba8 <_printf_float+0xb8>
 8025e96:	3401      	adds	r4, #1
 8025e98:	e7bd      	b.n	8025e16 <_printf_float+0x326>
 8025e9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025e9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ea0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ea2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ea4:	47a0      	blx	r4
 8025ea6:	3001      	adds	r0, #1
 8025ea8:	d1c1      	bne.n	8025e2e <_printf_float+0x33e>
 8025eaa:	e67d      	b.n	8025ba8 <_printf_float+0xb8>
 8025eac:	19ba      	adds	r2, r7, r6
 8025eae:	0023      	movs	r3, r4
 8025eb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025eb4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025eb6:	47b0      	blx	r6
 8025eb8:	3001      	adds	r0, #1
 8025eba:	d1c2      	bne.n	8025e42 <_printf_float+0x352>
 8025ebc:	e674      	b.n	8025ba8 <_printf_float+0xb8>
 8025ebe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025ec0:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ec2:	2b01      	cmp	r3, #1
 8025ec4:	dc02      	bgt.n	8025ecc <_printf_float+0x3dc>
 8025ec6:	2301      	movs	r3, #1
 8025ec8:	421a      	tst	r2, r3
 8025eca:	d039      	beq.n	8025f40 <_printf_float+0x450>
 8025ecc:	2301      	movs	r3, #1
 8025ece:	003a      	movs	r2, r7
 8025ed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ed4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025ed6:	47b0      	blx	r6
 8025ed8:	3001      	adds	r0, #1
 8025eda:	d100      	bne.n	8025ede <_printf_float+0x3ee>
 8025edc:	e664      	b.n	8025ba8 <_printf_float+0xb8>
 8025ede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ee0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ee4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ee6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025ee8:	47b0      	blx	r6
 8025eea:	3001      	adds	r0, #1
 8025eec:	d100      	bne.n	8025ef0 <_printf_float+0x400>
 8025eee:	e65b      	b.n	8025ba8 <_printf_float+0xb8>
 8025ef0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025ef2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025ef4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ef6:	2200      	movs	r2, #0
 8025ef8:	3b01      	subs	r3, #1
 8025efa:	930c      	str	r3, [sp, #48]	@ 0x30
 8025efc:	2300      	movs	r3, #0
 8025efe:	f7da fad7 	bl	80004b0 <__aeabi_dcmpeq>
 8025f02:	2800      	cmp	r0, #0
 8025f04:	d11a      	bne.n	8025f3c <_printf_float+0x44c>
 8025f06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f08:	1c7a      	adds	r2, r7, #1
 8025f0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f0e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f10:	47b0      	blx	r6
 8025f12:	3001      	adds	r0, #1
 8025f14:	d10e      	bne.n	8025f34 <_printf_float+0x444>
 8025f16:	e647      	b.n	8025ba8 <_printf_float+0xb8>
 8025f18:	002a      	movs	r2, r5
 8025f1a:	2301      	movs	r3, #1
 8025f1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025f22:	321a      	adds	r2, #26
 8025f24:	47b8      	blx	r7
 8025f26:	3001      	adds	r0, #1
 8025f28:	d100      	bne.n	8025f2c <_printf_float+0x43c>
 8025f2a:	e63d      	b.n	8025ba8 <_printf_float+0xb8>
 8025f2c:	3601      	adds	r6, #1
 8025f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f30:	429e      	cmp	r6, r3
 8025f32:	dbf1      	blt.n	8025f18 <_printf_float+0x428>
 8025f34:	002a      	movs	r2, r5
 8025f36:	0023      	movs	r3, r4
 8025f38:	3250      	adds	r2, #80	@ 0x50
 8025f3a:	e6d9      	b.n	8025cf0 <_printf_float+0x200>
 8025f3c:	2600      	movs	r6, #0
 8025f3e:	e7f6      	b.n	8025f2e <_printf_float+0x43e>
 8025f40:	003a      	movs	r2, r7
 8025f42:	e7e2      	b.n	8025f0a <_printf_float+0x41a>
 8025f44:	002a      	movs	r2, r5
 8025f46:	2301      	movs	r3, #1
 8025f48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f4e:	3219      	adds	r2, #25
 8025f50:	47b0      	blx	r6
 8025f52:	3001      	adds	r0, #1
 8025f54:	d100      	bne.n	8025f58 <_printf_float+0x468>
 8025f56:	e627      	b.n	8025ba8 <_printf_float+0xb8>
 8025f58:	3401      	adds	r4, #1
 8025f5a:	68eb      	ldr	r3, [r5, #12]
 8025f5c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025f5e:	1a9b      	subs	r3, r3, r2
 8025f60:	42a3      	cmp	r3, r4
 8025f62:	dcef      	bgt.n	8025f44 <_printf_float+0x454>
 8025f64:	e6f8      	b.n	8025d58 <_printf_float+0x268>
 8025f66:	2400      	movs	r4, #0
 8025f68:	e7f7      	b.n	8025f5a <_printf_float+0x46a>
 8025f6a:	46c0      	nop			@ (mov r8, r8)

08025f6c <_printf_common>:
 8025f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f6e:	0016      	movs	r6, r2
 8025f70:	9301      	str	r3, [sp, #4]
 8025f72:	688a      	ldr	r2, [r1, #8]
 8025f74:	690b      	ldr	r3, [r1, #16]
 8025f76:	000c      	movs	r4, r1
 8025f78:	9000      	str	r0, [sp, #0]
 8025f7a:	4293      	cmp	r3, r2
 8025f7c:	da00      	bge.n	8025f80 <_printf_common+0x14>
 8025f7e:	0013      	movs	r3, r2
 8025f80:	0022      	movs	r2, r4
 8025f82:	6033      	str	r3, [r6, #0]
 8025f84:	3243      	adds	r2, #67	@ 0x43
 8025f86:	7812      	ldrb	r2, [r2, #0]
 8025f88:	2a00      	cmp	r2, #0
 8025f8a:	d001      	beq.n	8025f90 <_printf_common+0x24>
 8025f8c:	3301      	adds	r3, #1
 8025f8e:	6033      	str	r3, [r6, #0]
 8025f90:	6823      	ldr	r3, [r4, #0]
 8025f92:	069b      	lsls	r3, r3, #26
 8025f94:	d502      	bpl.n	8025f9c <_printf_common+0x30>
 8025f96:	6833      	ldr	r3, [r6, #0]
 8025f98:	3302      	adds	r3, #2
 8025f9a:	6033      	str	r3, [r6, #0]
 8025f9c:	6822      	ldr	r2, [r4, #0]
 8025f9e:	2306      	movs	r3, #6
 8025fa0:	0015      	movs	r5, r2
 8025fa2:	401d      	ands	r5, r3
 8025fa4:	421a      	tst	r2, r3
 8025fa6:	d027      	beq.n	8025ff8 <_printf_common+0x8c>
 8025fa8:	0023      	movs	r3, r4
 8025faa:	3343      	adds	r3, #67	@ 0x43
 8025fac:	781b      	ldrb	r3, [r3, #0]
 8025fae:	1e5a      	subs	r2, r3, #1
 8025fb0:	4193      	sbcs	r3, r2
 8025fb2:	6822      	ldr	r2, [r4, #0]
 8025fb4:	0692      	lsls	r2, r2, #26
 8025fb6:	d430      	bmi.n	802601a <_printf_common+0xae>
 8025fb8:	0022      	movs	r2, r4
 8025fba:	9901      	ldr	r1, [sp, #4]
 8025fbc:	9800      	ldr	r0, [sp, #0]
 8025fbe:	9d08      	ldr	r5, [sp, #32]
 8025fc0:	3243      	adds	r2, #67	@ 0x43
 8025fc2:	47a8      	blx	r5
 8025fc4:	3001      	adds	r0, #1
 8025fc6:	d025      	beq.n	8026014 <_printf_common+0xa8>
 8025fc8:	2206      	movs	r2, #6
 8025fca:	6823      	ldr	r3, [r4, #0]
 8025fcc:	2500      	movs	r5, #0
 8025fce:	4013      	ands	r3, r2
 8025fd0:	2b04      	cmp	r3, #4
 8025fd2:	d105      	bne.n	8025fe0 <_printf_common+0x74>
 8025fd4:	6833      	ldr	r3, [r6, #0]
 8025fd6:	68e5      	ldr	r5, [r4, #12]
 8025fd8:	1aed      	subs	r5, r5, r3
 8025fda:	43eb      	mvns	r3, r5
 8025fdc:	17db      	asrs	r3, r3, #31
 8025fde:	401d      	ands	r5, r3
 8025fe0:	68a3      	ldr	r3, [r4, #8]
 8025fe2:	6922      	ldr	r2, [r4, #16]
 8025fe4:	4293      	cmp	r3, r2
 8025fe6:	dd01      	ble.n	8025fec <_printf_common+0x80>
 8025fe8:	1a9b      	subs	r3, r3, r2
 8025fea:	18ed      	adds	r5, r5, r3
 8025fec:	2600      	movs	r6, #0
 8025fee:	42b5      	cmp	r5, r6
 8025ff0:	d120      	bne.n	8026034 <_printf_common+0xc8>
 8025ff2:	2000      	movs	r0, #0
 8025ff4:	e010      	b.n	8026018 <_printf_common+0xac>
 8025ff6:	3501      	adds	r5, #1
 8025ff8:	68e3      	ldr	r3, [r4, #12]
 8025ffa:	6832      	ldr	r2, [r6, #0]
 8025ffc:	1a9b      	subs	r3, r3, r2
 8025ffe:	42ab      	cmp	r3, r5
 8026000:	ddd2      	ble.n	8025fa8 <_printf_common+0x3c>
 8026002:	0022      	movs	r2, r4
 8026004:	2301      	movs	r3, #1
 8026006:	9901      	ldr	r1, [sp, #4]
 8026008:	9800      	ldr	r0, [sp, #0]
 802600a:	9f08      	ldr	r7, [sp, #32]
 802600c:	3219      	adds	r2, #25
 802600e:	47b8      	blx	r7
 8026010:	3001      	adds	r0, #1
 8026012:	d1f0      	bne.n	8025ff6 <_printf_common+0x8a>
 8026014:	2001      	movs	r0, #1
 8026016:	4240      	negs	r0, r0
 8026018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802601a:	2030      	movs	r0, #48	@ 0x30
 802601c:	18e1      	adds	r1, r4, r3
 802601e:	3143      	adds	r1, #67	@ 0x43
 8026020:	7008      	strb	r0, [r1, #0]
 8026022:	0021      	movs	r1, r4
 8026024:	1c5a      	adds	r2, r3, #1
 8026026:	3145      	adds	r1, #69	@ 0x45
 8026028:	7809      	ldrb	r1, [r1, #0]
 802602a:	18a2      	adds	r2, r4, r2
 802602c:	3243      	adds	r2, #67	@ 0x43
 802602e:	3302      	adds	r3, #2
 8026030:	7011      	strb	r1, [r2, #0]
 8026032:	e7c1      	b.n	8025fb8 <_printf_common+0x4c>
 8026034:	0022      	movs	r2, r4
 8026036:	2301      	movs	r3, #1
 8026038:	9901      	ldr	r1, [sp, #4]
 802603a:	9800      	ldr	r0, [sp, #0]
 802603c:	9f08      	ldr	r7, [sp, #32]
 802603e:	321a      	adds	r2, #26
 8026040:	47b8      	blx	r7
 8026042:	3001      	adds	r0, #1
 8026044:	d0e6      	beq.n	8026014 <_printf_common+0xa8>
 8026046:	3601      	adds	r6, #1
 8026048:	e7d1      	b.n	8025fee <_printf_common+0x82>
	...

0802604c <_printf_i>:
 802604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802604e:	b08b      	sub	sp, #44	@ 0x2c
 8026050:	9206      	str	r2, [sp, #24]
 8026052:	000a      	movs	r2, r1
 8026054:	3243      	adds	r2, #67	@ 0x43
 8026056:	9307      	str	r3, [sp, #28]
 8026058:	9005      	str	r0, [sp, #20]
 802605a:	9203      	str	r2, [sp, #12]
 802605c:	7e0a      	ldrb	r2, [r1, #24]
 802605e:	000c      	movs	r4, r1
 8026060:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026062:	2a78      	cmp	r2, #120	@ 0x78
 8026064:	d809      	bhi.n	802607a <_printf_i+0x2e>
 8026066:	2a62      	cmp	r2, #98	@ 0x62
 8026068:	d80b      	bhi.n	8026082 <_printf_i+0x36>
 802606a:	2a00      	cmp	r2, #0
 802606c:	d100      	bne.n	8026070 <_printf_i+0x24>
 802606e:	e0ba      	b.n	80261e6 <_printf_i+0x19a>
 8026070:	497a      	ldr	r1, [pc, #488]	@ (802625c <_printf_i+0x210>)
 8026072:	9104      	str	r1, [sp, #16]
 8026074:	2a58      	cmp	r2, #88	@ 0x58
 8026076:	d100      	bne.n	802607a <_printf_i+0x2e>
 8026078:	e08e      	b.n	8026198 <_printf_i+0x14c>
 802607a:	0025      	movs	r5, r4
 802607c:	3542      	adds	r5, #66	@ 0x42
 802607e:	702a      	strb	r2, [r5, #0]
 8026080:	e022      	b.n	80260c8 <_printf_i+0x7c>
 8026082:	0010      	movs	r0, r2
 8026084:	3863      	subs	r0, #99	@ 0x63
 8026086:	2815      	cmp	r0, #21
 8026088:	d8f7      	bhi.n	802607a <_printf_i+0x2e>
 802608a:	f7da f881 	bl	8000190 <__gnu_thumb1_case_shi>
 802608e:	0016      	.short	0x0016
 8026090:	fff6001f 	.word	0xfff6001f
 8026094:	fff6fff6 	.word	0xfff6fff6
 8026098:	001ffff6 	.word	0x001ffff6
 802609c:	fff6fff6 	.word	0xfff6fff6
 80260a0:	fff6fff6 	.word	0xfff6fff6
 80260a4:	0036009f 	.word	0x0036009f
 80260a8:	fff6007e 	.word	0xfff6007e
 80260ac:	00b0fff6 	.word	0x00b0fff6
 80260b0:	0036fff6 	.word	0x0036fff6
 80260b4:	fff6fff6 	.word	0xfff6fff6
 80260b8:	0082      	.short	0x0082
 80260ba:	0025      	movs	r5, r4
 80260bc:	681a      	ldr	r2, [r3, #0]
 80260be:	3542      	adds	r5, #66	@ 0x42
 80260c0:	1d11      	adds	r1, r2, #4
 80260c2:	6019      	str	r1, [r3, #0]
 80260c4:	6813      	ldr	r3, [r2, #0]
 80260c6:	702b      	strb	r3, [r5, #0]
 80260c8:	2301      	movs	r3, #1
 80260ca:	e09e      	b.n	802620a <_printf_i+0x1be>
 80260cc:	6818      	ldr	r0, [r3, #0]
 80260ce:	6809      	ldr	r1, [r1, #0]
 80260d0:	1d02      	adds	r2, r0, #4
 80260d2:	060d      	lsls	r5, r1, #24
 80260d4:	d50b      	bpl.n	80260ee <_printf_i+0xa2>
 80260d6:	6806      	ldr	r6, [r0, #0]
 80260d8:	601a      	str	r2, [r3, #0]
 80260da:	2e00      	cmp	r6, #0
 80260dc:	da03      	bge.n	80260e6 <_printf_i+0x9a>
 80260de:	232d      	movs	r3, #45	@ 0x2d
 80260e0:	9a03      	ldr	r2, [sp, #12]
 80260e2:	4276      	negs	r6, r6
 80260e4:	7013      	strb	r3, [r2, #0]
 80260e6:	4b5d      	ldr	r3, [pc, #372]	@ (802625c <_printf_i+0x210>)
 80260e8:	270a      	movs	r7, #10
 80260ea:	9304      	str	r3, [sp, #16]
 80260ec:	e018      	b.n	8026120 <_printf_i+0xd4>
 80260ee:	6806      	ldr	r6, [r0, #0]
 80260f0:	601a      	str	r2, [r3, #0]
 80260f2:	0649      	lsls	r1, r1, #25
 80260f4:	d5f1      	bpl.n	80260da <_printf_i+0x8e>
 80260f6:	b236      	sxth	r6, r6
 80260f8:	e7ef      	b.n	80260da <_printf_i+0x8e>
 80260fa:	6808      	ldr	r0, [r1, #0]
 80260fc:	6819      	ldr	r1, [r3, #0]
 80260fe:	c940      	ldmia	r1!, {r6}
 8026100:	0605      	lsls	r5, r0, #24
 8026102:	d402      	bmi.n	802610a <_printf_i+0xbe>
 8026104:	0640      	lsls	r0, r0, #25
 8026106:	d500      	bpl.n	802610a <_printf_i+0xbe>
 8026108:	b2b6      	uxth	r6, r6
 802610a:	6019      	str	r1, [r3, #0]
 802610c:	4b53      	ldr	r3, [pc, #332]	@ (802625c <_printf_i+0x210>)
 802610e:	270a      	movs	r7, #10
 8026110:	9304      	str	r3, [sp, #16]
 8026112:	2a6f      	cmp	r2, #111	@ 0x6f
 8026114:	d100      	bne.n	8026118 <_printf_i+0xcc>
 8026116:	3f02      	subs	r7, #2
 8026118:	0023      	movs	r3, r4
 802611a:	2200      	movs	r2, #0
 802611c:	3343      	adds	r3, #67	@ 0x43
 802611e:	701a      	strb	r2, [r3, #0]
 8026120:	6863      	ldr	r3, [r4, #4]
 8026122:	60a3      	str	r3, [r4, #8]
 8026124:	2b00      	cmp	r3, #0
 8026126:	db06      	blt.n	8026136 <_printf_i+0xea>
 8026128:	2104      	movs	r1, #4
 802612a:	6822      	ldr	r2, [r4, #0]
 802612c:	9d03      	ldr	r5, [sp, #12]
 802612e:	438a      	bics	r2, r1
 8026130:	6022      	str	r2, [r4, #0]
 8026132:	4333      	orrs	r3, r6
 8026134:	d00c      	beq.n	8026150 <_printf_i+0x104>
 8026136:	9d03      	ldr	r5, [sp, #12]
 8026138:	0030      	movs	r0, r6
 802613a:	0039      	movs	r1, r7
 802613c:	f7da f8b8 	bl	80002b0 <__aeabi_uidivmod>
 8026140:	9b04      	ldr	r3, [sp, #16]
 8026142:	3d01      	subs	r5, #1
 8026144:	5c5b      	ldrb	r3, [r3, r1]
 8026146:	702b      	strb	r3, [r5, #0]
 8026148:	0033      	movs	r3, r6
 802614a:	0006      	movs	r6, r0
 802614c:	429f      	cmp	r7, r3
 802614e:	d9f3      	bls.n	8026138 <_printf_i+0xec>
 8026150:	2f08      	cmp	r7, #8
 8026152:	d109      	bne.n	8026168 <_printf_i+0x11c>
 8026154:	6823      	ldr	r3, [r4, #0]
 8026156:	07db      	lsls	r3, r3, #31
 8026158:	d506      	bpl.n	8026168 <_printf_i+0x11c>
 802615a:	6862      	ldr	r2, [r4, #4]
 802615c:	6923      	ldr	r3, [r4, #16]
 802615e:	429a      	cmp	r2, r3
 8026160:	dc02      	bgt.n	8026168 <_printf_i+0x11c>
 8026162:	2330      	movs	r3, #48	@ 0x30
 8026164:	3d01      	subs	r5, #1
 8026166:	702b      	strb	r3, [r5, #0]
 8026168:	9b03      	ldr	r3, [sp, #12]
 802616a:	1b5b      	subs	r3, r3, r5
 802616c:	6123      	str	r3, [r4, #16]
 802616e:	9b07      	ldr	r3, [sp, #28]
 8026170:	0021      	movs	r1, r4
 8026172:	9300      	str	r3, [sp, #0]
 8026174:	9805      	ldr	r0, [sp, #20]
 8026176:	9b06      	ldr	r3, [sp, #24]
 8026178:	aa09      	add	r2, sp, #36	@ 0x24
 802617a:	f7ff fef7 	bl	8025f6c <_printf_common>
 802617e:	3001      	adds	r0, #1
 8026180:	d148      	bne.n	8026214 <_printf_i+0x1c8>
 8026182:	2001      	movs	r0, #1
 8026184:	4240      	negs	r0, r0
 8026186:	b00b      	add	sp, #44	@ 0x2c
 8026188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802618a:	2220      	movs	r2, #32
 802618c:	6809      	ldr	r1, [r1, #0]
 802618e:	430a      	orrs	r2, r1
 8026190:	6022      	str	r2, [r4, #0]
 8026192:	2278      	movs	r2, #120	@ 0x78
 8026194:	4932      	ldr	r1, [pc, #200]	@ (8026260 <_printf_i+0x214>)
 8026196:	9104      	str	r1, [sp, #16]
 8026198:	0021      	movs	r1, r4
 802619a:	3145      	adds	r1, #69	@ 0x45
 802619c:	700a      	strb	r2, [r1, #0]
 802619e:	6819      	ldr	r1, [r3, #0]
 80261a0:	6822      	ldr	r2, [r4, #0]
 80261a2:	c940      	ldmia	r1!, {r6}
 80261a4:	0610      	lsls	r0, r2, #24
 80261a6:	d402      	bmi.n	80261ae <_printf_i+0x162>
 80261a8:	0650      	lsls	r0, r2, #25
 80261aa:	d500      	bpl.n	80261ae <_printf_i+0x162>
 80261ac:	b2b6      	uxth	r6, r6
 80261ae:	6019      	str	r1, [r3, #0]
 80261b0:	07d3      	lsls	r3, r2, #31
 80261b2:	d502      	bpl.n	80261ba <_printf_i+0x16e>
 80261b4:	2320      	movs	r3, #32
 80261b6:	4313      	orrs	r3, r2
 80261b8:	6023      	str	r3, [r4, #0]
 80261ba:	2e00      	cmp	r6, #0
 80261bc:	d001      	beq.n	80261c2 <_printf_i+0x176>
 80261be:	2710      	movs	r7, #16
 80261c0:	e7aa      	b.n	8026118 <_printf_i+0xcc>
 80261c2:	2220      	movs	r2, #32
 80261c4:	6823      	ldr	r3, [r4, #0]
 80261c6:	4393      	bics	r3, r2
 80261c8:	6023      	str	r3, [r4, #0]
 80261ca:	e7f8      	b.n	80261be <_printf_i+0x172>
 80261cc:	681a      	ldr	r2, [r3, #0]
 80261ce:	680d      	ldr	r5, [r1, #0]
 80261d0:	1d10      	adds	r0, r2, #4
 80261d2:	6949      	ldr	r1, [r1, #20]
 80261d4:	6018      	str	r0, [r3, #0]
 80261d6:	6813      	ldr	r3, [r2, #0]
 80261d8:	062e      	lsls	r6, r5, #24
 80261da:	d501      	bpl.n	80261e0 <_printf_i+0x194>
 80261dc:	6019      	str	r1, [r3, #0]
 80261de:	e002      	b.n	80261e6 <_printf_i+0x19a>
 80261e0:	066d      	lsls	r5, r5, #25
 80261e2:	d5fb      	bpl.n	80261dc <_printf_i+0x190>
 80261e4:	8019      	strh	r1, [r3, #0]
 80261e6:	2300      	movs	r3, #0
 80261e8:	9d03      	ldr	r5, [sp, #12]
 80261ea:	6123      	str	r3, [r4, #16]
 80261ec:	e7bf      	b.n	802616e <_printf_i+0x122>
 80261ee:	681a      	ldr	r2, [r3, #0]
 80261f0:	1d11      	adds	r1, r2, #4
 80261f2:	6019      	str	r1, [r3, #0]
 80261f4:	6815      	ldr	r5, [r2, #0]
 80261f6:	2100      	movs	r1, #0
 80261f8:	0028      	movs	r0, r5
 80261fa:	6862      	ldr	r2, [r4, #4]
 80261fc:	f000 fb7f 	bl	80268fe <memchr>
 8026200:	2800      	cmp	r0, #0
 8026202:	d001      	beq.n	8026208 <_printf_i+0x1bc>
 8026204:	1b40      	subs	r0, r0, r5
 8026206:	6060      	str	r0, [r4, #4]
 8026208:	6863      	ldr	r3, [r4, #4]
 802620a:	6123      	str	r3, [r4, #16]
 802620c:	2300      	movs	r3, #0
 802620e:	9a03      	ldr	r2, [sp, #12]
 8026210:	7013      	strb	r3, [r2, #0]
 8026212:	e7ac      	b.n	802616e <_printf_i+0x122>
 8026214:	002a      	movs	r2, r5
 8026216:	6923      	ldr	r3, [r4, #16]
 8026218:	9906      	ldr	r1, [sp, #24]
 802621a:	9805      	ldr	r0, [sp, #20]
 802621c:	9d07      	ldr	r5, [sp, #28]
 802621e:	47a8      	blx	r5
 8026220:	3001      	adds	r0, #1
 8026222:	d0ae      	beq.n	8026182 <_printf_i+0x136>
 8026224:	6823      	ldr	r3, [r4, #0]
 8026226:	079b      	lsls	r3, r3, #30
 8026228:	d415      	bmi.n	8026256 <_printf_i+0x20a>
 802622a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802622c:	68e0      	ldr	r0, [r4, #12]
 802622e:	4298      	cmp	r0, r3
 8026230:	daa9      	bge.n	8026186 <_printf_i+0x13a>
 8026232:	0018      	movs	r0, r3
 8026234:	e7a7      	b.n	8026186 <_printf_i+0x13a>
 8026236:	0022      	movs	r2, r4
 8026238:	2301      	movs	r3, #1
 802623a:	9906      	ldr	r1, [sp, #24]
 802623c:	9805      	ldr	r0, [sp, #20]
 802623e:	9e07      	ldr	r6, [sp, #28]
 8026240:	3219      	adds	r2, #25
 8026242:	47b0      	blx	r6
 8026244:	3001      	adds	r0, #1
 8026246:	d09c      	beq.n	8026182 <_printf_i+0x136>
 8026248:	3501      	adds	r5, #1
 802624a:	68e3      	ldr	r3, [r4, #12]
 802624c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802624e:	1a9b      	subs	r3, r3, r2
 8026250:	42ab      	cmp	r3, r5
 8026252:	dcf0      	bgt.n	8026236 <_printf_i+0x1ea>
 8026254:	e7e9      	b.n	802622a <_printf_i+0x1de>
 8026256:	2500      	movs	r5, #0
 8026258:	e7f7      	b.n	802624a <_printf_i+0x1fe>
 802625a:	46c0      	nop			@ (mov r8, r8)
 802625c:	0802edc4 	.word	0x0802edc4
 8026260:	0802edd5 	.word	0x0802edd5

08026264 <std>:
 8026264:	2300      	movs	r3, #0
 8026266:	b510      	push	{r4, lr}
 8026268:	0004      	movs	r4, r0
 802626a:	6003      	str	r3, [r0, #0]
 802626c:	6043      	str	r3, [r0, #4]
 802626e:	6083      	str	r3, [r0, #8]
 8026270:	8181      	strh	r1, [r0, #12]
 8026272:	6643      	str	r3, [r0, #100]	@ 0x64
 8026274:	81c2      	strh	r2, [r0, #14]
 8026276:	6103      	str	r3, [r0, #16]
 8026278:	6143      	str	r3, [r0, #20]
 802627a:	6183      	str	r3, [r0, #24]
 802627c:	0019      	movs	r1, r3
 802627e:	2208      	movs	r2, #8
 8026280:	305c      	adds	r0, #92	@ 0x5c
 8026282:	f000 fa6b 	bl	802675c <memset>
 8026286:	4b0b      	ldr	r3, [pc, #44]	@ (80262b4 <std+0x50>)
 8026288:	6224      	str	r4, [r4, #32]
 802628a:	6263      	str	r3, [r4, #36]	@ 0x24
 802628c:	4b0a      	ldr	r3, [pc, #40]	@ (80262b8 <std+0x54>)
 802628e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026290:	4b0a      	ldr	r3, [pc, #40]	@ (80262bc <std+0x58>)
 8026292:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026294:	4b0a      	ldr	r3, [pc, #40]	@ (80262c0 <std+0x5c>)
 8026296:	6323      	str	r3, [r4, #48]	@ 0x30
 8026298:	4b0a      	ldr	r3, [pc, #40]	@ (80262c4 <std+0x60>)
 802629a:	429c      	cmp	r4, r3
 802629c:	d005      	beq.n	80262aa <std+0x46>
 802629e:	4b0a      	ldr	r3, [pc, #40]	@ (80262c8 <std+0x64>)
 80262a0:	429c      	cmp	r4, r3
 80262a2:	d002      	beq.n	80262aa <std+0x46>
 80262a4:	4b09      	ldr	r3, [pc, #36]	@ (80262cc <std+0x68>)
 80262a6:	429c      	cmp	r4, r3
 80262a8:	d103      	bne.n	80262b2 <std+0x4e>
 80262aa:	0020      	movs	r0, r4
 80262ac:	3058      	adds	r0, #88	@ 0x58
 80262ae:	f000 fb23 	bl	80268f8 <__retarget_lock_init_recursive>
 80262b2:	bd10      	pop	{r4, pc}
 80262b4:	08026511 	.word	0x08026511
 80262b8:	08026539 	.word	0x08026539
 80262bc:	08026571 	.word	0x08026571
 80262c0:	0802659d 	.word	0x0802659d
 80262c4:	200037cc 	.word	0x200037cc
 80262c8:	20003834 	.word	0x20003834
 80262cc:	2000389c 	.word	0x2000389c

080262d0 <stdio_exit_handler>:
 80262d0:	b510      	push	{r4, lr}
 80262d2:	4a03      	ldr	r2, [pc, #12]	@ (80262e0 <stdio_exit_handler+0x10>)
 80262d4:	4903      	ldr	r1, [pc, #12]	@ (80262e4 <stdio_exit_handler+0x14>)
 80262d6:	4804      	ldr	r0, [pc, #16]	@ (80262e8 <stdio_exit_handler+0x18>)
 80262d8:	f000 f86c 	bl	80263b4 <_fwalk_sglue>
 80262dc:	bd10      	pop	{r4, pc}
 80262de:	46c0      	nop			@ (mov r8, r8)
 80262e0:	20000274 	.word	0x20000274
 80262e4:	08028ef5 	.word	0x08028ef5
 80262e8:	200003f0 	.word	0x200003f0

080262ec <cleanup_stdio>:
 80262ec:	6841      	ldr	r1, [r0, #4]
 80262ee:	4b0b      	ldr	r3, [pc, #44]	@ (802631c <cleanup_stdio+0x30>)
 80262f0:	b510      	push	{r4, lr}
 80262f2:	0004      	movs	r4, r0
 80262f4:	4299      	cmp	r1, r3
 80262f6:	d001      	beq.n	80262fc <cleanup_stdio+0x10>
 80262f8:	f002 fdfc 	bl	8028ef4 <_fflush_r>
 80262fc:	68a1      	ldr	r1, [r4, #8]
 80262fe:	4b08      	ldr	r3, [pc, #32]	@ (8026320 <cleanup_stdio+0x34>)
 8026300:	4299      	cmp	r1, r3
 8026302:	d002      	beq.n	802630a <cleanup_stdio+0x1e>
 8026304:	0020      	movs	r0, r4
 8026306:	f002 fdf5 	bl	8028ef4 <_fflush_r>
 802630a:	68e1      	ldr	r1, [r4, #12]
 802630c:	4b05      	ldr	r3, [pc, #20]	@ (8026324 <cleanup_stdio+0x38>)
 802630e:	4299      	cmp	r1, r3
 8026310:	d002      	beq.n	8026318 <cleanup_stdio+0x2c>
 8026312:	0020      	movs	r0, r4
 8026314:	f002 fdee 	bl	8028ef4 <_fflush_r>
 8026318:	bd10      	pop	{r4, pc}
 802631a:	46c0      	nop			@ (mov r8, r8)
 802631c:	200037cc 	.word	0x200037cc
 8026320:	20003834 	.word	0x20003834
 8026324:	2000389c 	.word	0x2000389c

08026328 <global_stdio_init.part.0>:
 8026328:	b510      	push	{r4, lr}
 802632a:	4b09      	ldr	r3, [pc, #36]	@ (8026350 <global_stdio_init.part.0+0x28>)
 802632c:	4a09      	ldr	r2, [pc, #36]	@ (8026354 <global_stdio_init.part.0+0x2c>)
 802632e:	2104      	movs	r1, #4
 8026330:	601a      	str	r2, [r3, #0]
 8026332:	4809      	ldr	r0, [pc, #36]	@ (8026358 <global_stdio_init.part.0+0x30>)
 8026334:	2200      	movs	r2, #0
 8026336:	f7ff ff95 	bl	8026264 <std>
 802633a:	2201      	movs	r2, #1
 802633c:	2109      	movs	r1, #9
 802633e:	4807      	ldr	r0, [pc, #28]	@ (802635c <global_stdio_init.part.0+0x34>)
 8026340:	f7ff ff90 	bl	8026264 <std>
 8026344:	2202      	movs	r2, #2
 8026346:	2112      	movs	r1, #18
 8026348:	4805      	ldr	r0, [pc, #20]	@ (8026360 <global_stdio_init.part.0+0x38>)
 802634a:	f7ff ff8b 	bl	8026264 <std>
 802634e:	bd10      	pop	{r4, pc}
 8026350:	20003904 	.word	0x20003904
 8026354:	080262d1 	.word	0x080262d1
 8026358:	200037cc 	.word	0x200037cc
 802635c:	20003834 	.word	0x20003834
 8026360:	2000389c 	.word	0x2000389c

08026364 <__sfp_lock_acquire>:
 8026364:	b510      	push	{r4, lr}
 8026366:	4802      	ldr	r0, [pc, #8]	@ (8026370 <__sfp_lock_acquire+0xc>)
 8026368:	f000 fac7 	bl	80268fa <__retarget_lock_acquire_recursive>
 802636c:	bd10      	pop	{r4, pc}
 802636e:	46c0      	nop			@ (mov r8, r8)
 8026370:	2000390d 	.word	0x2000390d

08026374 <__sfp_lock_release>:
 8026374:	b510      	push	{r4, lr}
 8026376:	4802      	ldr	r0, [pc, #8]	@ (8026380 <__sfp_lock_release+0xc>)
 8026378:	f000 fac0 	bl	80268fc <__retarget_lock_release_recursive>
 802637c:	bd10      	pop	{r4, pc}
 802637e:	46c0      	nop			@ (mov r8, r8)
 8026380:	2000390d 	.word	0x2000390d

08026384 <__sinit>:
 8026384:	b510      	push	{r4, lr}
 8026386:	0004      	movs	r4, r0
 8026388:	f7ff ffec 	bl	8026364 <__sfp_lock_acquire>
 802638c:	6a23      	ldr	r3, [r4, #32]
 802638e:	2b00      	cmp	r3, #0
 8026390:	d002      	beq.n	8026398 <__sinit+0x14>
 8026392:	f7ff ffef 	bl	8026374 <__sfp_lock_release>
 8026396:	bd10      	pop	{r4, pc}
 8026398:	4b04      	ldr	r3, [pc, #16]	@ (80263ac <__sinit+0x28>)
 802639a:	6223      	str	r3, [r4, #32]
 802639c:	4b04      	ldr	r3, [pc, #16]	@ (80263b0 <__sinit+0x2c>)
 802639e:	681b      	ldr	r3, [r3, #0]
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	d1f6      	bne.n	8026392 <__sinit+0xe>
 80263a4:	f7ff ffc0 	bl	8026328 <global_stdio_init.part.0>
 80263a8:	e7f3      	b.n	8026392 <__sinit+0xe>
 80263aa:	46c0      	nop			@ (mov r8, r8)
 80263ac:	080262ed 	.word	0x080262ed
 80263b0:	20003904 	.word	0x20003904

080263b4 <_fwalk_sglue>:
 80263b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80263b6:	0014      	movs	r4, r2
 80263b8:	2600      	movs	r6, #0
 80263ba:	9000      	str	r0, [sp, #0]
 80263bc:	9101      	str	r1, [sp, #4]
 80263be:	68a5      	ldr	r5, [r4, #8]
 80263c0:	6867      	ldr	r7, [r4, #4]
 80263c2:	3f01      	subs	r7, #1
 80263c4:	d504      	bpl.n	80263d0 <_fwalk_sglue+0x1c>
 80263c6:	6824      	ldr	r4, [r4, #0]
 80263c8:	2c00      	cmp	r4, #0
 80263ca:	d1f8      	bne.n	80263be <_fwalk_sglue+0xa>
 80263cc:	0030      	movs	r0, r6
 80263ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80263d0:	89ab      	ldrh	r3, [r5, #12]
 80263d2:	2b01      	cmp	r3, #1
 80263d4:	d908      	bls.n	80263e8 <_fwalk_sglue+0x34>
 80263d6:	220e      	movs	r2, #14
 80263d8:	5eab      	ldrsh	r3, [r5, r2]
 80263da:	3301      	adds	r3, #1
 80263dc:	d004      	beq.n	80263e8 <_fwalk_sglue+0x34>
 80263de:	0029      	movs	r1, r5
 80263e0:	9800      	ldr	r0, [sp, #0]
 80263e2:	9b01      	ldr	r3, [sp, #4]
 80263e4:	4798      	blx	r3
 80263e6:	4306      	orrs	r6, r0
 80263e8:	3568      	adds	r5, #104	@ 0x68
 80263ea:	e7ea      	b.n	80263c2 <_fwalk_sglue+0xe>

080263ec <iprintf>:
 80263ec:	b40f      	push	{r0, r1, r2, r3}
 80263ee:	b507      	push	{r0, r1, r2, lr}
 80263f0:	4905      	ldr	r1, [pc, #20]	@ (8026408 <iprintf+0x1c>)
 80263f2:	ab04      	add	r3, sp, #16
 80263f4:	6808      	ldr	r0, [r1, #0]
 80263f6:	cb04      	ldmia	r3!, {r2}
 80263f8:	6881      	ldr	r1, [r0, #8]
 80263fa:	9301      	str	r3, [sp, #4]
 80263fc:	f002 fbd8 	bl	8028bb0 <_vfiprintf_r>
 8026400:	b003      	add	sp, #12
 8026402:	bc08      	pop	{r3}
 8026404:	b004      	add	sp, #16
 8026406:	4718      	bx	r3
 8026408:	200003ec 	.word	0x200003ec

0802640c <_puts_r>:
 802640c:	6a03      	ldr	r3, [r0, #32]
 802640e:	b570      	push	{r4, r5, r6, lr}
 8026410:	0005      	movs	r5, r0
 8026412:	000e      	movs	r6, r1
 8026414:	6884      	ldr	r4, [r0, #8]
 8026416:	2b00      	cmp	r3, #0
 8026418:	d101      	bne.n	802641e <_puts_r+0x12>
 802641a:	f7ff ffb3 	bl	8026384 <__sinit>
 802641e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026420:	07db      	lsls	r3, r3, #31
 8026422:	d405      	bmi.n	8026430 <_puts_r+0x24>
 8026424:	89a3      	ldrh	r3, [r4, #12]
 8026426:	059b      	lsls	r3, r3, #22
 8026428:	d402      	bmi.n	8026430 <_puts_r+0x24>
 802642a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802642c:	f000 fa65 	bl	80268fa <__retarget_lock_acquire_recursive>
 8026430:	89a3      	ldrh	r3, [r4, #12]
 8026432:	071b      	lsls	r3, r3, #28
 8026434:	d502      	bpl.n	802643c <_puts_r+0x30>
 8026436:	6923      	ldr	r3, [r4, #16]
 8026438:	2b00      	cmp	r3, #0
 802643a:	d11f      	bne.n	802647c <_puts_r+0x70>
 802643c:	0021      	movs	r1, r4
 802643e:	0028      	movs	r0, r5
 8026440:	f000 f92e 	bl	80266a0 <__swsetup_r>
 8026444:	2800      	cmp	r0, #0
 8026446:	d019      	beq.n	802647c <_puts_r+0x70>
 8026448:	2501      	movs	r5, #1
 802644a:	426d      	negs	r5, r5
 802644c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802644e:	07db      	lsls	r3, r3, #31
 8026450:	d405      	bmi.n	802645e <_puts_r+0x52>
 8026452:	89a3      	ldrh	r3, [r4, #12]
 8026454:	059b      	lsls	r3, r3, #22
 8026456:	d402      	bmi.n	802645e <_puts_r+0x52>
 8026458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802645a:	f000 fa4f 	bl	80268fc <__retarget_lock_release_recursive>
 802645e:	0028      	movs	r0, r5
 8026460:	bd70      	pop	{r4, r5, r6, pc}
 8026462:	3601      	adds	r6, #1
 8026464:	60a3      	str	r3, [r4, #8]
 8026466:	2b00      	cmp	r3, #0
 8026468:	da04      	bge.n	8026474 <_puts_r+0x68>
 802646a:	69a2      	ldr	r2, [r4, #24]
 802646c:	429a      	cmp	r2, r3
 802646e:	dc16      	bgt.n	802649e <_puts_r+0x92>
 8026470:	290a      	cmp	r1, #10
 8026472:	d014      	beq.n	802649e <_puts_r+0x92>
 8026474:	6823      	ldr	r3, [r4, #0]
 8026476:	1c5a      	adds	r2, r3, #1
 8026478:	6022      	str	r2, [r4, #0]
 802647a:	7019      	strb	r1, [r3, #0]
 802647c:	68a3      	ldr	r3, [r4, #8]
 802647e:	7831      	ldrb	r1, [r6, #0]
 8026480:	3b01      	subs	r3, #1
 8026482:	2900      	cmp	r1, #0
 8026484:	d1ed      	bne.n	8026462 <_puts_r+0x56>
 8026486:	60a3      	str	r3, [r4, #8]
 8026488:	2b00      	cmp	r3, #0
 802648a:	da0f      	bge.n	80264ac <_puts_r+0xa0>
 802648c:	0022      	movs	r2, r4
 802648e:	0028      	movs	r0, r5
 8026490:	310a      	adds	r1, #10
 8026492:	f000 f8c3 	bl	802661c <__swbuf_r>
 8026496:	3001      	adds	r0, #1
 8026498:	d0d6      	beq.n	8026448 <_puts_r+0x3c>
 802649a:	250a      	movs	r5, #10
 802649c:	e7d6      	b.n	802644c <_puts_r+0x40>
 802649e:	0022      	movs	r2, r4
 80264a0:	0028      	movs	r0, r5
 80264a2:	f000 f8bb 	bl	802661c <__swbuf_r>
 80264a6:	3001      	adds	r0, #1
 80264a8:	d1e8      	bne.n	802647c <_puts_r+0x70>
 80264aa:	e7cd      	b.n	8026448 <_puts_r+0x3c>
 80264ac:	6823      	ldr	r3, [r4, #0]
 80264ae:	1c5a      	adds	r2, r3, #1
 80264b0:	6022      	str	r2, [r4, #0]
 80264b2:	220a      	movs	r2, #10
 80264b4:	701a      	strb	r2, [r3, #0]
 80264b6:	e7f0      	b.n	802649a <_puts_r+0x8e>

080264b8 <puts>:
 80264b8:	b510      	push	{r4, lr}
 80264ba:	4b03      	ldr	r3, [pc, #12]	@ (80264c8 <puts+0x10>)
 80264bc:	0001      	movs	r1, r0
 80264be:	6818      	ldr	r0, [r3, #0]
 80264c0:	f7ff ffa4 	bl	802640c <_puts_r>
 80264c4:	bd10      	pop	{r4, pc}
 80264c6:	46c0      	nop			@ (mov r8, r8)
 80264c8:	200003ec 	.word	0x200003ec

080264cc <siprintf>:
 80264cc:	b40e      	push	{r1, r2, r3}
 80264ce:	b510      	push	{r4, lr}
 80264d0:	2400      	movs	r4, #0
 80264d2:	490c      	ldr	r1, [pc, #48]	@ (8026504 <siprintf+0x38>)
 80264d4:	b09d      	sub	sp, #116	@ 0x74
 80264d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80264d8:	9002      	str	r0, [sp, #8]
 80264da:	9006      	str	r0, [sp, #24]
 80264dc:	9107      	str	r1, [sp, #28]
 80264de:	9104      	str	r1, [sp, #16]
 80264e0:	4809      	ldr	r0, [pc, #36]	@ (8026508 <siprintf+0x3c>)
 80264e2:	490a      	ldr	r1, [pc, #40]	@ (802650c <siprintf+0x40>)
 80264e4:	cb04      	ldmia	r3!, {r2}
 80264e6:	9105      	str	r1, [sp, #20]
 80264e8:	6800      	ldr	r0, [r0, #0]
 80264ea:	a902      	add	r1, sp, #8
 80264ec:	9301      	str	r3, [sp, #4]
 80264ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80264f0:	f002 fa38 	bl	8028964 <_svfiprintf_r>
 80264f4:	9b02      	ldr	r3, [sp, #8]
 80264f6:	701c      	strb	r4, [r3, #0]
 80264f8:	b01d      	add	sp, #116	@ 0x74
 80264fa:	bc10      	pop	{r4}
 80264fc:	bc08      	pop	{r3}
 80264fe:	b003      	add	sp, #12
 8026500:	4718      	bx	r3
 8026502:	46c0      	nop			@ (mov r8, r8)
 8026504:	7fffffff 	.word	0x7fffffff
 8026508:	200003ec 	.word	0x200003ec
 802650c:	ffff0208 	.word	0xffff0208

08026510 <__sread>:
 8026510:	b570      	push	{r4, r5, r6, lr}
 8026512:	000c      	movs	r4, r1
 8026514:	250e      	movs	r5, #14
 8026516:	5f49      	ldrsh	r1, [r1, r5]
 8026518:	f000 f99c 	bl	8026854 <_read_r>
 802651c:	2800      	cmp	r0, #0
 802651e:	db03      	blt.n	8026528 <__sread+0x18>
 8026520:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8026522:	181b      	adds	r3, r3, r0
 8026524:	6563      	str	r3, [r4, #84]	@ 0x54
 8026526:	bd70      	pop	{r4, r5, r6, pc}
 8026528:	89a3      	ldrh	r3, [r4, #12]
 802652a:	4a02      	ldr	r2, [pc, #8]	@ (8026534 <__sread+0x24>)
 802652c:	4013      	ands	r3, r2
 802652e:	81a3      	strh	r3, [r4, #12]
 8026530:	e7f9      	b.n	8026526 <__sread+0x16>
 8026532:	46c0      	nop			@ (mov r8, r8)
 8026534:	ffffefff 	.word	0xffffefff

08026538 <__swrite>:
 8026538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802653a:	001f      	movs	r7, r3
 802653c:	898b      	ldrh	r3, [r1, #12]
 802653e:	0005      	movs	r5, r0
 8026540:	000c      	movs	r4, r1
 8026542:	0016      	movs	r6, r2
 8026544:	05db      	lsls	r3, r3, #23
 8026546:	d505      	bpl.n	8026554 <__swrite+0x1c>
 8026548:	230e      	movs	r3, #14
 802654a:	5ec9      	ldrsh	r1, [r1, r3]
 802654c:	2200      	movs	r2, #0
 802654e:	2302      	movs	r3, #2
 8026550:	f000 f96c 	bl	802682c <_lseek_r>
 8026554:	89a3      	ldrh	r3, [r4, #12]
 8026556:	4a05      	ldr	r2, [pc, #20]	@ (802656c <__swrite+0x34>)
 8026558:	0028      	movs	r0, r5
 802655a:	4013      	ands	r3, r2
 802655c:	81a3      	strh	r3, [r4, #12]
 802655e:	0032      	movs	r2, r6
 8026560:	230e      	movs	r3, #14
 8026562:	5ee1      	ldrsh	r1, [r4, r3]
 8026564:	003b      	movs	r3, r7
 8026566:	f000 f989 	bl	802687c <_write_r>
 802656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802656c:	ffffefff 	.word	0xffffefff

08026570 <__sseek>:
 8026570:	b570      	push	{r4, r5, r6, lr}
 8026572:	000c      	movs	r4, r1
 8026574:	250e      	movs	r5, #14
 8026576:	5f49      	ldrsh	r1, [r1, r5]
 8026578:	f000 f958 	bl	802682c <_lseek_r>
 802657c:	89a3      	ldrh	r3, [r4, #12]
 802657e:	1c42      	adds	r2, r0, #1
 8026580:	d103      	bne.n	802658a <__sseek+0x1a>
 8026582:	4a05      	ldr	r2, [pc, #20]	@ (8026598 <__sseek+0x28>)
 8026584:	4013      	ands	r3, r2
 8026586:	81a3      	strh	r3, [r4, #12]
 8026588:	bd70      	pop	{r4, r5, r6, pc}
 802658a:	2280      	movs	r2, #128	@ 0x80
 802658c:	0152      	lsls	r2, r2, #5
 802658e:	4313      	orrs	r3, r2
 8026590:	81a3      	strh	r3, [r4, #12]
 8026592:	6560      	str	r0, [r4, #84]	@ 0x54
 8026594:	e7f8      	b.n	8026588 <__sseek+0x18>
 8026596:	46c0      	nop			@ (mov r8, r8)
 8026598:	ffffefff 	.word	0xffffefff

0802659c <__sclose>:
 802659c:	b510      	push	{r4, lr}
 802659e:	230e      	movs	r3, #14
 80265a0:	5ec9      	ldrsh	r1, [r1, r3]
 80265a2:	f000 f931 	bl	8026808 <_close_r>
 80265a6:	bd10      	pop	{r4, pc}

080265a8 <_vsniprintf_r>:
 80265a8:	b530      	push	{r4, r5, lr}
 80265aa:	0005      	movs	r5, r0
 80265ac:	0014      	movs	r4, r2
 80265ae:	0008      	movs	r0, r1
 80265b0:	001a      	movs	r2, r3
 80265b2:	b09b      	sub	sp, #108	@ 0x6c
 80265b4:	2c00      	cmp	r4, #0
 80265b6:	da05      	bge.n	80265c4 <_vsniprintf_r+0x1c>
 80265b8:	238b      	movs	r3, #139	@ 0x8b
 80265ba:	2001      	movs	r0, #1
 80265bc:	602b      	str	r3, [r5, #0]
 80265be:	4240      	negs	r0, r0
 80265c0:	b01b      	add	sp, #108	@ 0x6c
 80265c2:	bd30      	pop	{r4, r5, pc}
 80265c4:	2382      	movs	r3, #130	@ 0x82
 80265c6:	4669      	mov	r1, sp
 80265c8:	009b      	lsls	r3, r3, #2
 80265ca:	818b      	strh	r3, [r1, #12]
 80265cc:	2100      	movs	r1, #0
 80265ce:	9000      	str	r0, [sp, #0]
 80265d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80265d2:	9004      	str	r0, [sp, #16]
 80265d4:	428c      	cmp	r4, r1
 80265d6:	d000      	beq.n	80265da <_vsniprintf_r+0x32>
 80265d8:	1e61      	subs	r1, r4, #1
 80265da:	2301      	movs	r3, #1
 80265dc:	9102      	str	r1, [sp, #8]
 80265de:	9105      	str	r1, [sp, #20]
 80265e0:	4669      	mov	r1, sp
 80265e2:	425b      	negs	r3, r3
 80265e4:	81cb      	strh	r3, [r1, #14]
 80265e6:	0028      	movs	r0, r5
 80265e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80265ea:	f002 f9bb 	bl	8028964 <_svfiprintf_r>
 80265ee:	1c43      	adds	r3, r0, #1
 80265f0:	da01      	bge.n	80265f6 <_vsniprintf_r+0x4e>
 80265f2:	238b      	movs	r3, #139	@ 0x8b
 80265f4:	602b      	str	r3, [r5, #0]
 80265f6:	2c00      	cmp	r4, #0
 80265f8:	d0e2      	beq.n	80265c0 <_vsniprintf_r+0x18>
 80265fa:	2200      	movs	r2, #0
 80265fc:	9b00      	ldr	r3, [sp, #0]
 80265fe:	701a      	strb	r2, [r3, #0]
 8026600:	e7de      	b.n	80265c0 <_vsniprintf_r+0x18>
	...

08026604 <vsniprintf>:
 8026604:	b513      	push	{r0, r1, r4, lr}
 8026606:	4c04      	ldr	r4, [pc, #16]	@ (8026618 <vsniprintf+0x14>)
 8026608:	9300      	str	r3, [sp, #0]
 802660a:	0013      	movs	r3, r2
 802660c:	000a      	movs	r2, r1
 802660e:	0001      	movs	r1, r0
 8026610:	6820      	ldr	r0, [r4, #0]
 8026612:	f7ff ffc9 	bl	80265a8 <_vsniprintf_r>
 8026616:	bd16      	pop	{r1, r2, r4, pc}
 8026618:	200003ec 	.word	0x200003ec

0802661c <__swbuf_r>:
 802661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802661e:	0006      	movs	r6, r0
 8026620:	000d      	movs	r5, r1
 8026622:	0014      	movs	r4, r2
 8026624:	2800      	cmp	r0, #0
 8026626:	d004      	beq.n	8026632 <__swbuf_r+0x16>
 8026628:	6a03      	ldr	r3, [r0, #32]
 802662a:	2b00      	cmp	r3, #0
 802662c:	d101      	bne.n	8026632 <__swbuf_r+0x16>
 802662e:	f7ff fea9 	bl	8026384 <__sinit>
 8026632:	69a3      	ldr	r3, [r4, #24]
 8026634:	60a3      	str	r3, [r4, #8]
 8026636:	89a3      	ldrh	r3, [r4, #12]
 8026638:	071b      	lsls	r3, r3, #28
 802663a:	d502      	bpl.n	8026642 <__swbuf_r+0x26>
 802663c:	6923      	ldr	r3, [r4, #16]
 802663e:	2b00      	cmp	r3, #0
 8026640:	d109      	bne.n	8026656 <__swbuf_r+0x3a>
 8026642:	0021      	movs	r1, r4
 8026644:	0030      	movs	r0, r6
 8026646:	f000 f82b 	bl	80266a0 <__swsetup_r>
 802664a:	2800      	cmp	r0, #0
 802664c:	d003      	beq.n	8026656 <__swbuf_r+0x3a>
 802664e:	2501      	movs	r5, #1
 8026650:	426d      	negs	r5, r5
 8026652:	0028      	movs	r0, r5
 8026654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026656:	6923      	ldr	r3, [r4, #16]
 8026658:	6820      	ldr	r0, [r4, #0]
 802665a:	b2ef      	uxtb	r7, r5
 802665c:	1ac0      	subs	r0, r0, r3
 802665e:	6963      	ldr	r3, [r4, #20]
 8026660:	b2ed      	uxtb	r5, r5
 8026662:	4283      	cmp	r3, r0
 8026664:	dc05      	bgt.n	8026672 <__swbuf_r+0x56>
 8026666:	0021      	movs	r1, r4
 8026668:	0030      	movs	r0, r6
 802666a:	f002 fc43 	bl	8028ef4 <_fflush_r>
 802666e:	2800      	cmp	r0, #0
 8026670:	d1ed      	bne.n	802664e <__swbuf_r+0x32>
 8026672:	68a3      	ldr	r3, [r4, #8]
 8026674:	3001      	adds	r0, #1
 8026676:	3b01      	subs	r3, #1
 8026678:	60a3      	str	r3, [r4, #8]
 802667a:	6823      	ldr	r3, [r4, #0]
 802667c:	1c5a      	adds	r2, r3, #1
 802667e:	6022      	str	r2, [r4, #0]
 8026680:	701f      	strb	r7, [r3, #0]
 8026682:	6963      	ldr	r3, [r4, #20]
 8026684:	4283      	cmp	r3, r0
 8026686:	d004      	beq.n	8026692 <__swbuf_r+0x76>
 8026688:	89a3      	ldrh	r3, [r4, #12]
 802668a:	07db      	lsls	r3, r3, #31
 802668c:	d5e1      	bpl.n	8026652 <__swbuf_r+0x36>
 802668e:	2d0a      	cmp	r5, #10
 8026690:	d1df      	bne.n	8026652 <__swbuf_r+0x36>
 8026692:	0021      	movs	r1, r4
 8026694:	0030      	movs	r0, r6
 8026696:	f002 fc2d 	bl	8028ef4 <_fflush_r>
 802669a:	2800      	cmp	r0, #0
 802669c:	d0d9      	beq.n	8026652 <__swbuf_r+0x36>
 802669e:	e7d6      	b.n	802664e <__swbuf_r+0x32>

080266a0 <__swsetup_r>:
 80266a0:	4b2d      	ldr	r3, [pc, #180]	@ (8026758 <__swsetup_r+0xb8>)
 80266a2:	b570      	push	{r4, r5, r6, lr}
 80266a4:	0005      	movs	r5, r0
 80266a6:	6818      	ldr	r0, [r3, #0]
 80266a8:	000c      	movs	r4, r1
 80266aa:	2800      	cmp	r0, #0
 80266ac:	d004      	beq.n	80266b8 <__swsetup_r+0x18>
 80266ae:	6a03      	ldr	r3, [r0, #32]
 80266b0:	2b00      	cmp	r3, #0
 80266b2:	d101      	bne.n	80266b8 <__swsetup_r+0x18>
 80266b4:	f7ff fe66 	bl	8026384 <__sinit>
 80266b8:	220c      	movs	r2, #12
 80266ba:	5ea3      	ldrsh	r3, [r4, r2]
 80266bc:	071a      	lsls	r2, r3, #28
 80266be:	d423      	bmi.n	8026708 <__swsetup_r+0x68>
 80266c0:	06da      	lsls	r2, r3, #27
 80266c2:	d407      	bmi.n	80266d4 <__swsetup_r+0x34>
 80266c4:	2209      	movs	r2, #9
 80266c6:	602a      	str	r2, [r5, #0]
 80266c8:	2240      	movs	r2, #64	@ 0x40
 80266ca:	2001      	movs	r0, #1
 80266cc:	4313      	orrs	r3, r2
 80266ce:	81a3      	strh	r3, [r4, #12]
 80266d0:	4240      	negs	r0, r0
 80266d2:	e03a      	b.n	802674a <__swsetup_r+0xaa>
 80266d4:	075b      	lsls	r3, r3, #29
 80266d6:	d513      	bpl.n	8026700 <__swsetup_r+0x60>
 80266d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80266da:	2900      	cmp	r1, #0
 80266dc:	d008      	beq.n	80266f0 <__swsetup_r+0x50>
 80266de:	0023      	movs	r3, r4
 80266e0:	3344      	adds	r3, #68	@ 0x44
 80266e2:	4299      	cmp	r1, r3
 80266e4:	d002      	beq.n	80266ec <__swsetup_r+0x4c>
 80266e6:	0028      	movs	r0, r5
 80266e8:	f000 ff9a 	bl	8027620 <_free_r>
 80266ec:	2300      	movs	r3, #0
 80266ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80266f0:	2224      	movs	r2, #36	@ 0x24
 80266f2:	89a3      	ldrh	r3, [r4, #12]
 80266f4:	4393      	bics	r3, r2
 80266f6:	81a3      	strh	r3, [r4, #12]
 80266f8:	2300      	movs	r3, #0
 80266fa:	6063      	str	r3, [r4, #4]
 80266fc:	6923      	ldr	r3, [r4, #16]
 80266fe:	6023      	str	r3, [r4, #0]
 8026700:	2308      	movs	r3, #8
 8026702:	89a2      	ldrh	r2, [r4, #12]
 8026704:	4313      	orrs	r3, r2
 8026706:	81a3      	strh	r3, [r4, #12]
 8026708:	6923      	ldr	r3, [r4, #16]
 802670a:	2b00      	cmp	r3, #0
 802670c:	d10b      	bne.n	8026726 <__swsetup_r+0x86>
 802670e:	21a0      	movs	r1, #160	@ 0xa0
 8026710:	2280      	movs	r2, #128	@ 0x80
 8026712:	89a3      	ldrh	r3, [r4, #12]
 8026714:	0089      	lsls	r1, r1, #2
 8026716:	0092      	lsls	r2, r2, #2
 8026718:	400b      	ands	r3, r1
 802671a:	4293      	cmp	r3, r2
 802671c:	d003      	beq.n	8026726 <__swsetup_r+0x86>
 802671e:	0021      	movs	r1, r4
 8026720:	0028      	movs	r0, r5
 8026722:	f002 fc3d 	bl	8028fa0 <__smakebuf_r>
 8026726:	220c      	movs	r2, #12
 8026728:	5ea3      	ldrsh	r3, [r4, r2]
 802672a:	2101      	movs	r1, #1
 802672c:	001a      	movs	r2, r3
 802672e:	400a      	ands	r2, r1
 8026730:	420b      	tst	r3, r1
 8026732:	d00b      	beq.n	802674c <__swsetup_r+0xac>
 8026734:	2200      	movs	r2, #0
 8026736:	60a2      	str	r2, [r4, #8]
 8026738:	6962      	ldr	r2, [r4, #20]
 802673a:	4252      	negs	r2, r2
 802673c:	61a2      	str	r2, [r4, #24]
 802673e:	2000      	movs	r0, #0
 8026740:	6922      	ldr	r2, [r4, #16]
 8026742:	4282      	cmp	r2, r0
 8026744:	d101      	bne.n	802674a <__swsetup_r+0xaa>
 8026746:	061a      	lsls	r2, r3, #24
 8026748:	d4be      	bmi.n	80266c8 <__swsetup_r+0x28>
 802674a:	bd70      	pop	{r4, r5, r6, pc}
 802674c:	0799      	lsls	r1, r3, #30
 802674e:	d400      	bmi.n	8026752 <__swsetup_r+0xb2>
 8026750:	6962      	ldr	r2, [r4, #20]
 8026752:	60a2      	str	r2, [r4, #8]
 8026754:	e7f3      	b.n	802673e <__swsetup_r+0x9e>
 8026756:	46c0      	nop			@ (mov r8, r8)
 8026758:	200003ec 	.word	0x200003ec

0802675c <memset>:
 802675c:	0003      	movs	r3, r0
 802675e:	1882      	adds	r2, r0, r2
 8026760:	4293      	cmp	r3, r2
 8026762:	d100      	bne.n	8026766 <memset+0xa>
 8026764:	4770      	bx	lr
 8026766:	7019      	strb	r1, [r3, #0]
 8026768:	3301      	adds	r3, #1
 802676a:	e7f9      	b.n	8026760 <memset+0x4>

0802676c <strchr>:
 802676c:	b2c9      	uxtb	r1, r1
 802676e:	7803      	ldrb	r3, [r0, #0]
 8026770:	2b00      	cmp	r3, #0
 8026772:	d004      	beq.n	802677e <strchr+0x12>
 8026774:	428b      	cmp	r3, r1
 8026776:	d100      	bne.n	802677a <strchr+0xe>
 8026778:	4770      	bx	lr
 802677a:	3001      	adds	r0, #1
 802677c:	e7f7      	b.n	802676e <strchr+0x2>
 802677e:	424b      	negs	r3, r1
 8026780:	4159      	adcs	r1, r3
 8026782:	4249      	negs	r1, r1
 8026784:	4008      	ands	r0, r1
 8026786:	e7f7      	b.n	8026778 <strchr+0xc>

08026788 <strncmp>:
 8026788:	b530      	push	{r4, r5, lr}
 802678a:	0005      	movs	r5, r0
 802678c:	1e10      	subs	r0, r2, #0
 802678e:	d00b      	beq.n	80267a8 <strncmp+0x20>
 8026790:	2400      	movs	r4, #0
 8026792:	3a01      	subs	r2, #1
 8026794:	5d2b      	ldrb	r3, [r5, r4]
 8026796:	5d08      	ldrb	r0, [r1, r4]
 8026798:	4283      	cmp	r3, r0
 802679a:	d104      	bne.n	80267a6 <strncmp+0x1e>
 802679c:	4294      	cmp	r4, r2
 802679e:	d002      	beq.n	80267a6 <strncmp+0x1e>
 80267a0:	3401      	adds	r4, #1
 80267a2:	2b00      	cmp	r3, #0
 80267a4:	d1f6      	bne.n	8026794 <strncmp+0xc>
 80267a6:	1a18      	subs	r0, r3, r0
 80267a8:	bd30      	pop	{r4, r5, pc}

080267aa <strncpy>:
 80267aa:	0003      	movs	r3, r0
 80267ac:	b530      	push	{r4, r5, lr}
 80267ae:	001d      	movs	r5, r3
 80267b0:	2a00      	cmp	r2, #0
 80267b2:	d006      	beq.n	80267c2 <strncpy+0x18>
 80267b4:	780c      	ldrb	r4, [r1, #0]
 80267b6:	3a01      	subs	r2, #1
 80267b8:	3301      	adds	r3, #1
 80267ba:	702c      	strb	r4, [r5, #0]
 80267bc:	3101      	adds	r1, #1
 80267be:	2c00      	cmp	r4, #0
 80267c0:	d1f5      	bne.n	80267ae <strncpy+0x4>
 80267c2:	2100      	movs	r1, #0
 80267c4:	189a      	adds	r2, r3, r2
 80267c6:	4293      	cmp	r3, r2
 80267c8:	d100      	bne.n	80267cc <strncpy+0x22>
 80267ca:	bd30      	pop	{r4, r5, pc}
 80267cc:	7019      	strb	r1, [r3, #0]
 80267ce:	3301      	adds	r3, #1
 80267d0:	e7f9      	b.n	80267c6 <strncpy+0x1c>

080267d2 <strstr>:
 80267d2:	780a      	ldrb	r2, [r1, #0]
 80267d4:	b530      	push	{r4, r5, lr}
 80267d6:	2a00      	cmp	r2, #0
 80267d8:	d10c      	bne.n	80267f4 <strstr+0x22>
 80267da:	bd30      	pop	{r4, r5, pc}
 80267dc:	429a      	cmp	r2, r3
 80267de:	d108      	bne.n	80267f2 <strstr+0x20>
 80267e0:	2301      	movs	r3, #1
 80267e2:	5ccc      	ldrb	r4, [r1, r3]
 80267e4:	2c00      	cmp	r4, #0
 80267e6:	d0f8      	beq.n	80267da <strstr+0x8>
 80267e8:	5cc5      	ldrb	r5, [r0, r3]
 80267ea:	42a5      	cmp	r5, r4
 80267ec:	d101      	bne.n	80267f2 <strstr+0x20>
 80267ee:	3301      	adds	r3, #1
 80267f0:	e7f7      	b.n	80267e2 <strstr+0x10>
 80267f2:	3001      	adds	r0, #1
 80267f4:	7803      	ldrb	r3, [r0, #0]
 80267f6:	2b00      	cmp	r3, #0
 80267f8:	d1f0      	bne.n	80267dc <strstr+0xa>
 80267fa:	0018      	movs	r0, r3
 80267fc:	e7ed      	b.n	80267da <strstr+0x8>
	...

08026800 <_localeconv_r>:
 8026800:	4800      	ldr	r0, [pc, #0]	@ (8026804 <_localeconv_r+0x4>)
 8026802:	4770      	bx	lr
 8026804:	20000370 	.word	0x20000370

08026808 <_close_r>:
 8026808:	2300      	movs	r3, #0
 802680a:	b570      	push	{r4, r5, r6, lr}
 802680c:	4d06      	ldr	r5, [pc, #24]	@ (8026828 <_close_r+0x20>)
 802680e:	0004      	movs	r4, r0
 8026810:	0008      	movs	r0, r1
 8026812:	602b      	str	r3, [r5, #0]
 8026814:	f7ec febc 	bl	8013590 <_close>
 8026818:	1c43      	adds	r3, r0, #1
 802681a:	d103      	bne.n	8026824 <_close_r+0x1c>
 802681c:	682b      	ldr	r3, [r5, #0]
 802681e:	2b00      	cmp	r3, #0
 8026820:	d000      	beq.n	8026824 <_close_r+0x1c>
 8026822:	6023      	str	r3, [r4, #0]
 8026824:	bd70      	pop	{r4, r5, r6, pc}
 8026826:	46c0      	nop			@ (mov r8, r8)
 8026828:	20003908 	.word	0x20003908

0802682c <_lseek_r>:
 802682c:	b570      	push	{r4, r5, r6, lr}
 802682e:	0004      	movs	r4, r0
 8026830:	0008      	movs	r0, r1
 8026832:	0011      	movs	r1, r2
 8026834:	001a      	movs	r2, r3
 8026836:	2300      	movs	r3, #0
 8026838:	4d05      	ldr	r5, [pc, #20]	@ (8026850 <_lseek_r+0x24>)
 802683a:	602b      	str	r3, [r5, #0]
 802683c:	f7ec fec9 	bl	80135d2 <_lseek>
 8026840:	1c43      	adds	r3, r0, #1
 8026842:	d103      	bne.n	802684c <_lseek_r+0x20>
 8026844:	682b      	ldr	r3, [r5, #0]
 8026846:	2b00      	cmp	r3, #0
 8026848:	d000      	beq.n	802684c <_lseek_r+0x20>
 802684a:	6023      	str	r3, [r4, #0]
 802684c:	bd70      	pop	{r4, r5, r6, pc}
 802684e:	46c0      	nop			@ (mov r8, r8)
 8026850:	20003908 	.word	0x20003908

08026854 <_read_r>:
 8026854:	b570      	push	{r4, r5, r6, lr}
 8026856:	0004      	movs	r4, r0
 8026858:	0008      	movs	r0, r1
 802685a:	0011      	movs	r1, r2
 802685c:	001a      	movs	r2, r3
 802685e:	2300      	movs	r3, #0
 8026860:	4d05      	ldr	r5, [pc, #20]	@ (8026878 <_read_r+0x24>)
 8026862:	602b      	str	r3, [r5, #0]
 8026864:	f7ec fe77 	bl	8013556 <_read>
 8026868:	1c43      	adds	r3, r0, #1
 802686a:	d103      	bne.n	8026874 <_read_r+0x20>
 802686c:	682b      	ldr	r3, [r5, #0]
 802686e:	2b00      	cmp	r3, #0
 8026870:	d000      	beq.n	8026874 <_read_r+0x20>
 8026872:	6023      	str	r3, [r4, #0]
 8026874:	bd70      	pop	{r4, r5, r6, pc}
 8026876:	46c0      	nop			@ (mov r8, r8)
 8026878:	20003908 	.word	0x20003908

0802687c <_write_r>:
 802687c:	b570      	push	{r4, r5, r6, lr}
 802687e:	0004      	movs	r4, r0
 8026880:	0008      	movs	r0, r1
 8026882:	0011      	movs	r1, r2
 8026884:	001a      	movs	r2, r3
 8026886:	2300      	movs	r3, #0
 8026888:	4d05      	ldr	r5, [pc, #20]	@ (80268a0 <_write_r+0x24>)
 802688a:	602b      	str	r3, [r5, #0]
 802688c:	f7ed fb68 	bl	8013f60 <_write>
 8026890:	1c43      	adds	r3, r0, #1
 8026892:	d103      	bne.n	802689c <_write_r+0x20>
 8026894:	682b      	ldr	r3, [r5, #0]
 8026896:	2b00      	cmp	r3, #0
 8026898:	d000      	beq.n	802689c <_write_r+0x20>
 802689a:	6023      	str	r3, [r4, #0]
 802689c:	bd70      	pop	{r4, r5, r6, pc}
 802689e:	46c0      	nop			@ (mov r8, r8)
 80268a0:	20003908 	.word	0x20003908

080268a4 <__errno>:
 80268a4:	4b01      	ldr	r3, [pc, #4]	@ (80268ac <__errno+0x8>)
 80268a6:	6818      	ldr	r0, [r3, #0]
 80268a8:	4770      	bx	lr
 80268aa:	46c0      	nop			@ (mov r8, r8)
 80268ac:	200003ec 	.word	0x200003ec

080268b0 <__libc_init_array>:
 80268b0:	b570      	push	{r4, r5, r6, lr}
 80268b2:	2600      	movs	r6, #0
 80268b4:	4c0c      	ldr	r4, [pc, #48]	@ (80268e8 <__libc_init_array+0x38>)
 80268b6:	4d0d      	ldr	r5, [pc, #52]	@ (80268ec <__libc_init_array+0x3c>)
 80268b8:	1b64      	subs	r4, r4, r5
 80268ba:	10a4      	asrs	r4, r4, #2
 80268bc:	42a6      	cmp	r6, r4
 80268be:	d109      	bne.n	80268d4 <__libc_init_array+0x24>
 80268c0:	2600      	movs	r6, #0
 80268c2:	f003 ffcb 	bl	802a85c <_init>
 80268c6:	4c0a      	ldr	r4, [pc, #40]	@ (80268f0 <__libc_init_array+0x40>)
 80268c8:	4d0a      	ldr	r5, [pc, #40]	@ (80268f4 <__libc_init_array+0x44>)
 80268ca:	1b64      	subs	r4, r4, r5
 80268cc:	10a4      	asrs	r4, r4, #2
 80268ce:	42a6      	cmp	r6, r4
 80268d0:	d105      	bne.n	80268de <__libc_init_array+0x2e>
 80268d2:	bd70      	pop	{r4, r5, r6, pc}
 80268d4:	00b3      	lsls	r3, r6, #2
 80268d6:	58eb      	ldr	r3, [r5, r3]
 80268d8:	4798      	blx	r3
 80268da:	3601      	adds	r6, #1
 80268dc:	e7ee      	b.n	80268bc <__libc_init_array+0xc>
 80268de:	00b3      	lsls	r3, r6, #2
 80268e0:	58eb      	ldr	r3, [r5, r3]
 80268e2:	4798      	blx	r3
 80268e4:	3601      	adds	r6, #1
 80268e6:	e7f2      	b.n	80268ce <__libc_init_array+0x1e>
 80268e8:	0802f240 	.word	0x0802f240
 80268ec:	0802f240 	.word	0x0802f240
 80268f0:	0802f244 	.word	0x0802f244
 80268f4:	0802f240 	.word	0x0802f240

080268f8 <__retarget_lock_init_recursive>:
 80268f8:	4770      	bx	lr

080268fa <__retarget_lock_acquire_recursive>:
 80268fa:	4770      	bx	lr

080268fc <__retarget_lock_release_recursive>:
 80268fc:	4770      	bx	lr

080268fe <memchr>:
 80268fe:	b2c9      	uxtb	r1, r1
 8026900:	1882      	adds	r2, r0, r2
 8026902:	4290      	cmp	r0, r2
 8026904:	d101      	bne.n	802690a <memchr+0xc>
 8026906:	2000      	movs	r0, #0
 8026908:	4770      	bx	lr
 802690a:	7803      	ldrb	r3, [r0, #0]
 802690c:	428b      	cmp	r3, r1
 802690e:	d0fb      	beq.n	8026908 <memchr+0xa>
 8026910:	3001      	adds	r0, #1
 8026912:	e7f6      	b.n	8026902 <memchr+0x4>

08026914 <memcpy>:
 8026914:	2300      	movs	r3, #0
 8026916:	b510      	push	{r4, lr}
 8026918:	429a      	cmp	r2, r3
 802691a:	d100      	bne.n	802691e <memcpy+0xa>
 802691c:	bd10      	pop	{r4, pc}
 802691e:	5ccc      	ldrb	r4, [r1, r3]
 8026920:	54c4      	strb	r4, [r0, r3]
 8026922:	3301      	adds	r3, #1
 8026924:	e7f8      	b.n	8026918 <memcpy+0x4>
	...

08026928 <nan>:
 8026928:	2000      	movs	r0, #0
 802692a:	4901      	ldr	r1, [pc, #4]	@ (8026930 <nan+0x8>)
 802692c:	4770      	bx	lr
 802692e:	46c0      	nop			@ (mov r8, r8)
 8026930:	7ff80000 	.word	0x7ff80000

08026934 <quorem>:
 8026934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026936:	6903      	ldr	r3, [r0, #16]
 8026938:	690c      	ldr	r4, [r1, #16]
 802693a:	b089      	sub	sp, #36	@ 0x24
 802693c:	9003      	str	r0, [sp, #12]
 802693e:	9106      	str	r1, [sp, #24]
 8026940:	2000      	movs	r0, #0
 8026942:	42a3      	cmp	r3, r4
 8026944:	db63      	blt.n	8026a0e <quorem+0xda>
 8026946:	000b      	movs	r3, r1
 8026948:	3c01      	subs	r4, #1
 802694a:	3314      	adds	r3, #20
 802694c:	00a5      	lsls	r5, r4, #2
 802694e:	9304      	str	r3, [sp, #16]
 8026950:	195b      	adds	r3, r3, r5
 8026952:	9305      	str	r3, [sp, #20]
 8026954:	9b03      	ldr	r3, [sp, #12]
 8026956:	3314      	adds	r3, #20
 8026958:	9301      	str	r3, [sp, #4]
 802695a:	195d      	adds	r5, r3, r5
 802695c:	9b05      	ldr	r3, [sp, #20]
 802695e:	682f      	ldr	r7, [r5, #0]
 8026960:	681e      	ldr	r6, [r3, #0]
 8026962:	0038      	movs	r0, r7
 8026964:	3601      	adds	r6, #1
 8026966:	0031      	movs	r1, r6
 8026968:	f7d9 fc1c 	bl	80001a4 <__udivsi3>
 802696c:	9002      	str	r0, [sp, #8]
 802696e:	42b7      	cmp	r7, r6
 8026970:	d327      	bcc.n	80269c2 <quorem+0x8e>
 8026972:	9b04      	ldr	r3, [sp, #16]
 8026974:	2700      	movs	r7, #0
 8026976:	469c      	mov	ip, r3
 8026978:	9e01      	ldr	r6, [sp, #4]
 802697a:	9707      	str	r7, [sp, #28]
 802697c:	4662      	mov	r2, ip
 802697e:	ca08      	ldmia	r2!, {r3}
 8026980:	6830      	ldr	r0, [r6, #0]
 8026982:	4694      	mov	ip, r2
 8026984:	9a02      	ldr	r2, [sp, #8]
 8026986:	b299      	uxth	r1, r3
 8026988:	4351      	muls	r1, r2
 802698a:	0c1b      	lsrs	r3, r3, #16
 802698c:	4353      	muls	r3, r2
 802698e:	19c9      	adds	r1, r1, r7
 8026990:	0c0a      	lsrs	r2, r1, #16
 8026992:	189b      	adds	r3, r3, r2
 8026994:	b289      	uxth	r1, r1
 8026996:	b282      	uxth	r2, r0
 8026998:	1a52      	subs	r2, r2, r1
 802699a:	9907      	ldr	r1, [sp, #28]
 802699c:	0c1f      	lsrs	r7, r3, #16
 802699e:	1852      	adds	r2, r2, r1
 80269a0:	0c00      	lsrs	r0, r0, #16
 80269a2:	b29b      	uxth	r3, r3
 80269a4:	1411      	asrs	r1, r2, #16
 80269a6:	1ac3      	subs	r3, r0, r3
 80269a8:	185b      	adds	r3, r3, r1
 80269aa:	1419      	asrs	r1, r3, #16
 80269ac:	b292      	uxth	r2, r2
 80269ae:	041b      	lsls	r3, r3, #16
 80269b0:	431a      	orrs	r2, r3
 80269b2:	9b05      	ldr	r3, [sp, #20]
 80269b4:	9107      	str	r1, [sp, #28]
 80269b6:	c604      	stmia	r6!, {r2}
 80269b8:	4563      	cmp	r3, ip
 80269ba:	d2df      	bcs.n	802697c <quorem+0x48>
 80269bc:	682b      	ldr	r3, [r5, #0]
 80269be:	2b00      	cmp	r3, #0
 80269c0:	d02b      	beq.n	8026a1a <quorem+0xe6>
 80269c2:	9906      	ldr	r1, [sp, #24]
 80269c4:	9803      	ldr	r0, [sp, #12]
 80269c6:	f001 fd6f 	bl	80284a8 <__mcmp>
 80269ca:	2800      	cmp	r0, #0
 80269cc:	db1e      	blt.n	8026a0c <quorem+0xd8>
 80269ce:	2600      	movs	r6, #0
 80269d0:	9d01      	ldr	r5, [sp, #4]
 80269d2:	9904      	ldr	r1, [sp, #16]
 80269d4:	c901      	ldmia	r1!, {r0}
 80269d6:	682b      	ldr	r3, [r5, #0]
 80269d8:	b287      	uxth	r7, r0
 80269da:	b29a      	uxth	r2, r3
 80269dc:	1bd2      	subs	r2, r2, r7
 80269de:	1992      	adds	r2, r2, r6
 80269e0:	0c00      	lsrs	r0, r0, #16
 80269e2:	0c1b      	lsrs	r3, r3, #16
 80269e4:	1a1b      	subs	r3, r3, r0
 80269e6:	1410      	asrs	r0, r2, #16
 80269e8:	181b      	adds	r3, r3, r0
 80269ea:	141e      	asrs	r6, r3, #16
 80269ec:	b292      	uxth	r2, r2
 80269ee:	041b      	lsls	r3, r3, #16
 80269f0:	431a      	orrs	r2, r3
 80269f2:	9b05      	ldr	r3, [sp, #20]
 80269f4:	c504      	stmia	r5!, {r2}
 80269f6:	428b      	cmp	r3, r1
 80269f8:	d2ec      	bcs.n	80269d4 <quorem+0xa0>
 80269fa:	9a01      	ldr	r2, [sp, #4]
 80269fc:	00a3      	lsls	r3, r4, #2
 80269fe:	18d3      	adds	r3, r2, r3
 8026a00:	681a      	ldr	r2, [r3, #0]
 8026a02:	2a00      	cmp	r2, #0
 8026a04:	d014      	beq.n	8026a30 <quorem+0xfc>
 8026a06:	9b02      	ldr	r3, [sp, #8]
 8026a08:	3301      	adds	r3, #1
 8026a0a:	9302      	str	r3, [sp, #8]
 8026a0c:	9802      	ldr	r0, [sp, #8]
 8026a0e:	b009      	add	sp, #36	@ 0x24
 8026a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a12:	682b      	ldr	r3, [r5, #0]
 8026a14:	2b00      	cmp	r3, #0
 8026a16:	d104      	bne.n	8026a22 <quorem+0xee>
 8026a18:	3c01      	subs	r4, #1
 8026a1a:	9b01      	ldr	r3, [sp, #4]
 8026a1c:	3d04      	subs	r5, #4
 8026a1e:	42ab      	cmp	r3, r5
 8026a20:	d3f7      	bcc.n	8026a12 <quorem+0xde>
 8026a22:	9b03      	ldr	r3, [sp, #12]
 8026a24:	611c      	str	r4, [r3, #16]
 8026a26:	e7cc      	b.n	80269c2 <quorem+0x8e>
 8026a28:	681a      	ldr	r2, [r3, #0]
 8026a2a:	2a00      	cmp	r2, #0
 8026a2c:	d104      	bne.n	8026a38 <quorem+0x104>
 8026a2e:	3c01      	subs	r4, #1
 8026a30:	9a01      	ldr	r2, [sp, #4]
 8026a32:	3b04      	subs	r3, #4
 8026a34:	429a      	cmp	r2, r3
 8026a36:	d3f7      	bcc.n	8026a28 <quorem+0xf4>
 8026a38:	9b03      	ldr	r3, [sp, #12]
 8026a3a:	611c      	str	r4, [r3, #16]
 8026a3c:	e7e3      	b.n	8026a06 <quorem+0xd2>
	...

08026a40 <_dtoa_r>:
 8026a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026a42:	0014      	movs	r4, r2
 8026a44:	001d      	movs	r5, r3
 8026a46:	69c6      	ldr	r6, [r0, #28]
 8026a48:	b09d      	sub	sp, #116	@ 0x74
 8026a4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8026a4c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8026a4e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8026a50:	9003      	str	r0, [sp, #12]
 8026a52:	2e00      	cmp	r6, #0
 8026a54:	d10f      	bne.n	8026a76 <_dtoa_r+0x36>
 8026a56:	2010      	movs	r0, #16
 8026a58:	f001 f986 	bl	8027d68 <malloc>
 8026a5c:	9b03      	ldr	r3, [sp, #12]
 8026a5e:	1e02      	subs	r2, r0, #0
 8026a60:	61d8      	str	r0, [r3, #28]
 8026a62:	d104      	bne.n	8026a6e <_dtoa_r+0x2e>
 8026a64:	21ef      	movs	r1, #239	@ 0xef
 8026a66:	4bc7      	ldr	r3, [pc, #796]	@ (8026d84 <_dtoa_r+0x344>)
 8026a68:	48c7      	ldr	r0, [pc, #796]	@ (8026d88 <_dtoa_r+0x348>)
 8026a6a:	f002 fb23 	bl	80290b4 <__assert_func>
 8026a6e:	6046      	str	r6, [r0, #4]
 8026a70:	6086      	str	r6, [r0, #8]
 8026a72:	6006      	str	r6, [r0, #0]
 8026a74:	60c6      	str	r6, [r0, #12]
 8026a76:	9b03      	ldr	r3, [sp, #12]
 8026a78:	69db      	ldr	r3, [r3, #28]
 8026a7a:	6819      	ldr	r1, [r3, #0]
 8026a7c:	2900      	cmp	r1, #0
 8026a7e:	d00b      	beq.n	8026a98 <_dtoa_r+0x58>
 8026a80:	685a      	ldr	r2, [r3, #4]
 8026a82:	2301      	movs	r3, #1
 8026a84:	4093      	lsls	r3, r2
 8026a86:	604a      	str	r2, [r1, #4]
 8026a88:	608b      	str	r3, [r1, #8]
 8026a8a:	9803      	ldr	r0, [sp, #12]
 8026a8c:	f001 fa7e 	bl	8027f8c <_Bfree>
 8026a90:	2200      	movs	r2, #0
 8026a92:	9b03      	ldr	r3, [sp, #12]
 8026a94:	69db      	ldr	r3, [r3, #28]
 8026a96:	601a      	str	r2, [r3, #0]
 8026a98:	2d00      	cmp	r5, #0
 8026a9a:	da1e      	bge.n	8026ada <_dtoa_r+0x9a>
 8026a9c:	2301      	movs	r3, #1
 8026a9e:	603b      	str	r3, [r7, #0]
 8026aa0:	006b      	lsls	r3, r5, #1
 8026aa2:	085b      	lsrs	r3, r3, #1
 8026aa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026aa6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026aa8:	4bb8      	ldr	r3, [pc, #736]	@ (8026d8c <_dtoa_r+0x34c>)
 8026aaa:	4ab8      	ldr	r2, [pc, #736]	@ (8026d8c <_dtoa_r+0x34c>)
 8026aac:	403b      	ands	r3, r7
 8026aae:	4293      	cmp	r3, r2
 8026ab0:	d116      	bne.n	8026ae0 <_dtoa_r+0xa0>
 8026ab2:	4bb7      	ldr	r3, [pc, #732]	@ (8026d90 <_dtoa_r+0x350>)
 8026ab4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026ab6:	6013      	str	r3, [r2, #0]
 8026ab8:	033b      	lsls	r3, r7, #12
 8026aba:	0b1b      	lsrs	r3, r3, #12
 8026abc:	4323      	orrs	r3, r4
 8026abe:	d101      	bne.n	8026ac4 <_dtoa_r+0x84>
 8026ac0:	f000 fd80 	bl	80275c4 <_dtoa_r+0xb84>
 8026ac4:	4bb3      	ldr	r3, [pc, #716]	@ (8026d94 <_dtoa_r+0x354>)
 8026ac6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026ac8:	9308      	str	r3, [sp, #32]
 8026aca:	2a00      	cmp	r2, #0
 8026acc:	d002      	beq.n	8026ad4 <_dtoa_r+0x94>
 8026ace:	4bb2      	ldr	r3, [pc, #712]	@ (8026d98 <_dtoa_r+0x358>)
 8026ad0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026ad2:	6013      	str	r3, [r2, #0]
 8026ad4:	9808      	ldr	r0, [sp, #32]
 8026ad6:	b01d      	add	sp, #116	@ 0x74
 8026ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ada:	2300      	movs	r3, #0
 8026adc:	603b      	str	r3, [r7, #0]
 8026ade:	e7e2      	b.n	8026aa6 <_dtoa_r+0x66>
 8026ae0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026ae4:	9212      	str	r2, [sp, #72]	@ 0x48
 8026ae6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026ae8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026aea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026aec:	2200      	movs	r2, #0
 8026aee:	2300      	movs	r3, #0
 8026af0:	f7d9 fcde 	bl	80004b0 <__aeabi_dcmpeq>
 8026af4:	1e06      	subs	r6, r0, #0
 8026af6:	d00b      	beq.n	8026b10 <_dtoa_r+0xd0>
 8026af8:	2301      	movs	r3, #1
 8026afa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026afc:	6013      	str	r3, [r2, #0]
 8026afe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026b00:	2b00      	cmp	r3, #0
 8026b02:	d002      	beq.n	8026b0a <_dtoa_r+0xca>
 8026b04:	4ba5      	ldr	r3, [pc, #660]	@ (8026d9c <_dtoa_r+0x35c>)
 8026b06:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026b08:	6013      	str	r3, [r2, #0]
 8026b0a:	4ba5      	ldr	r3, [pc, #660]	@ (8026da0 <_dtoa_r+0x360>)
 8026b0c:	9308      	str	r3, [sp, #32]
 8026b0e:	e7e1      	b.n	8026ad4 <_dtoa_r+0x94>
 8026b10:	ab1a      	add	r3, sp, #104	@ 0x68
 8026b12:	9301      	str	r3, [sp, #4]
 8026b14:	ab1b      	add	r3, sp, #108	@ 0x6c
 8026b16:	9300      	str	r3, [sp, #0]
 8026b18:	9803      	ldr	r0, [sp, #12]
 8026b1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026b1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026b1e:	f001 fde5 	bl	80286ec <__d2b>
 8026b22:	007a      	lsls	r2, r7, #1
 8026b24:	9005      	str	r0, [sp, #20]
 8026b26:	0d52      	lsrs	r2, r2, #21
 8026b28:	d100      	bne.n	8026b2c <_dtoa_r+0xec>
 8026b2a:	e07b      	b.n	8026c24 <_dtoa_r+0x1e4>
 8026b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026b2e:	9618      	str	r6, [sp, #96]	@ 0x60
 8026b30:	0319      	lsls	r1, r3, #12
 8026b32:	4b9c      	ldr	r3, [pc, #624]	@ (8026da4 <_dtoa_r+0x364>)
 8026b34:	0b09      	lsrs	r1, r1, #12
 8026b36:	430b      	orrs	r3, r1
 8026b38:	499b      	ldr	r1, [pc, #620]	@ (8026da8 <_dtoa_r+0x368>)
 8026b3a:	1857      	adds	r7, r2, r1
 8026b3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026b40:	0019      	movs	r1, r3
 8026b42:	2200      	movs	r2, #0
 8026b44:	4b99      	ldr	r3, [pc, #612]	@ (8026dac <_dtoa_r+0x36c>)
 8026b46:	f7dc f9eb 	bl	8002f20 <__aeabi_dsub>
 8026b4a:	4a99      	ldr	r2, [pc, #612]	@ (8026db0 <_dtoa_r+0x370>)
 8026b4c:	4b99      	ldr	r3, [pc, #612]	@ (8026db4 <_dtoa_r+0x374>)
 8026b4e:	f7db ff01 	bl	8002954 <__aeabi_dmul>
 8026b52:	4a99      	ldr	r2, [pc, #612]	@ (8026db8 <_dtoa_r+0x378>)
 8026b54:	4b99      	ldr	r3, [pc, #612]	@ (8026dbc <_dtoa_r+0x37c>)
 8026b56:	f7da fefd 	bl	8001954 <__aeabi_dadd>
 8026b5a:	0004      	movs	r4, r0
 8026b5c:	0038      	movs	r0, r7
 8026b5e:	000d      	movs	r5, r1
 8026b60:	f7dc fe46 	bl	80037f0 <__aeabi_i2d>
 8026b64:	4a96      	ldr	r2, [pc, #600]	@ (8026dc0 <_dtoa_r+0x380>)
 8026b66:	4b97      	ldr	r3, [pc, #604]	@ (8026dc4 <_dtoa_r+0x384>)
 8026b68:	f7db fef4 	bl	8002954 <__aeabi_dmul>
 8026b6c:	0002      	movs	r2, r0
 8026b6e:	000b      	movs	r3, r1
 8026b70:	0020      	movs	r0, r4
 8026b72:	0029      	movs	r1, r5
 8026b74:	f7da feee 	bl	8001954 <__aeabi_dadd>
 8026b78:	0004      	movs	r4, r0
 8026b7a:	000d      	movs	r5, r1
 8026b7c:	f7dc fdfc 	bl	8003778 <__aeabi_d2iz>
 8026b80:	2200      	movs	r2, #0
 8026b82:	9004      	str	r0, [sp, #16]
 8026b84:	2300      	movs	r3, #0
 8026b86:	0020      	movs	r0, r4
 8026b88:	0029      	movs	r1, r5
 8026b8a:	f7d9 fc97 	bl	80004bc <__aeabi_dcmplt>
 8026b8e:	2800      	cmp	r0, #0
 8026b90:	d00b      	beq.n	8026baa <_dtoa_r+0x16a>
 8026b92:	9804      	ldr	r0, [sp, #16]
 8026b94:	f7dc fe2c 	bl	80037f0 <__aeabi_i2d>
 8026b98:	002b      	movs	r3, r5
 8026b9a:	0022      	movs	r2, r4
 8026b9c:	f7d9 fc88 	bl	80004b0 <__aeabi_dcmpeq>
 8026ba0:	4243      	negs	r3, r0
 8026ba2:	4158      	adcs	r0, r3
 8026ba4:	9b04      	ldr	r3, [sp, #16]
 8026ba6:	1a1b      	subs	r3, r3, r0
 8026ba8:	9304      	str	r3, [sp, #16]
 8026baa:	2301      	movs	r3, #1
 8026bac:	9315      	str	r3, [sp, #84]	@ 0x54
 8026bae:	9b04      	ldr	r3, [sp, #16]
 8026bb0:	2b16      	cmp	r3, #22
 8026bb2:	d810      	bhi.n	8026bd6 <_dtoa_r+0x196>
 8026bb4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026bb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026bb8:	9a04      	ldr	r2, [sp, #16]
 8026bba:	4b83      	ldr	r3, [pc, #524]	@ (8026dc8 <_dtoa_r+0x388>)
 8026bbc:	00d2      	lsls	r2, r2, #3
 8026bbe:	189b      	adds	r3, r3, r2
 8026bc0:	681a      	ldr	r2, [r3, #0]
 8026bc2:	685b      	ldr	r3, [r3, #4]
 8026bc4:	f7d9 fc7a 	bl	80004bc <__aeabi_dcmplt>
 8026bc8:	2800      	cmp	r0, #0
 8026bca:	d047      	beq.n	8026c5c <_dtoa_r+0x21c>
 8026bcc:	9b04      	ldr	r3, [sp, #16]
 8026bce:	3b01      	subs	r3, #1
 8026bd0:	9304      	str	r3, [sp, #16]
 8026bd2:	2300      	movs	r3, #0
 8026bd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8026bd6:	2200      	movs	r2, #0
 8026bd8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026bda:	9206      	str	r2, [sp, #24]
 8026bdc:	1bdb      	subs	r3, r3, r7
 8026bde:	1e5a      	subs	r2, r3, #1
 8026be0:	d53e      	bpl.n	8026c60 <_dtoa_r+0x220>
 8026be2:	2201      	movs	r2, #1
 8026be4:	1ad3      	subs	r3, r2, r3
 8026be6:	9306      	str	r3, [sp, #24]
 8026be8:	2300      	movs	r3, #0
 8026bea:	930d      	str	r3, [sp, #52]	@ 0x34
 8026bec:	9b04      	ldr	r3, [sp, #16]
 8026bee:	2b00      	cmp	r3, #0
 8026bf0:	db38      	blt.n	8026c64 <_dtoa_r+0x224>
 8026bf2:	9a04      	ldr	r2, [sp, #16]
 8026bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026bf6:	4694      	mov	ip, r2
 8026bf8:	4463      	add	r3, ip
 8026bfa:	930d      	str	r3, [sp, #52]	@ 0x34
 8026bfc:	2300      	movs	r3, #0
 8026bfe:	9214      	str	r2, [sp, #80]	@ 0x50
 8026c00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026c02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026c04:	2401      	movs	r4, #1
 8026c06:	2b09      	cmp	r3, #9
 8026c08:	d862      	bhi.n	8026cd0 <_dtoa_r+0x290>
 8026c0a:	2b05      	cmp	r3, #5
 8026c0c:	dd02      	ble.n	8026c14 <_dtoa_r+0x1d4>
 8026c0e:	2400      	movs	r4, #0
 8026c10:	3b04      	subs	r3, #4
 8026c12:	9322      	str	r3, [sp, #136]	@ 0x88
 8026c14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026c16:	1e98      	subs	r0, r3, #2
 8026c18:	2803      	cmp	r0, #3
 8026c1a:	d863      	bhi.n	8026ce4 <_dtoa_r+0x2a4>
 8026c1c:	f7d9 faae 	bl	800017c <__gnu_thumb1_case_uqi>
 8026c20:	2b385654 	.word	0x2b385654
 8026c24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c26:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026c28:	18f6      	adds	r6, r6, r3
 8026c2a:	4b68      	ldr	r3, [pc, #416]	@ (8026dcc <_dtoa_r+0x38c>)
 8026c2c:	18f2      	adds	r2, r6, r3
 8026c2e:	2a20      	cmp	r2, #32
 8026c30:	dd0f      	ble.n	8026c52 <_dtoa_r+0x212>
 8026c32:	2340      	movs	r3, #64	@ 0x40
 8026c34:	1a9b      	subs	r3, r3, r2
 8026c36:	409f      	lsls	r7, r3
 8026c38:	4b65      	ldr	r3, [pc, #404]	@ (8026dd0 <_dtoa_r+0x390>)
 8026c3a:	0038      	movs	r0, r7
 8026c3c:	18f3      	adds	r3, r6, r3
 8026c3e:	40dc      	lsrs	r4, r3
 8026c40:	4320      	orrs	r0, r4
 8026c42:	f7dc fe03 	bl	800384c <__aeabi_ui2d>
 8026c46:	2201      	movs	r2, #1
 8026c48:	4b62      	ldr	r3, [pc, #392]	@ (8026dd4 <_dtoa_r+0x394>)
 8026c4a:	1e77      	subs	r7, r6, #1
 8026c4c:	18cb      	adds	r3, r1, r3
 8026c4e:	9218      	str	r2, [sp, #96]	@ 0x60
 8026c50:	e776      	b.n	8026b40 <_dtoa_r+0x100>
 8026c52:	2320      	movs	r3, #32
 8026c54:	0020      	movs	r0, r4
 8026c56:	1a9b      	subs	r3, r3, r2
 8026c58:	4098      	lsls	r0, r3
 8026c5a:	e7f2      	b.n	8026c42 <_dtoa_r+0x202>
 8026c5c:	9015      	str	r0, [sp, #84]	@ 0x54
 8026c5e:	e7ba      	b.n	8026bd6 <_dtoa_r+0x196>
 8026c60:	920d      	str	r2, [sp, #52]	@ 0x34
 8026c62:	e7c3      	b.n	8026bec <_dtoa_r+0x1ac>
 8026c64:	9b06      	ldr	r3, [sp, #24]
 8026c66:	9a04      	ldr	r2, [sp, #16]
 8026c68:	1a9b      	subs	r3, r3, r2
 8026c6a:	9306      	str	r3, [sp, #24]
 8026c6c:	4253      	negs	r3, r2
 8026c6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026c70:	2300      	movs	r3, #0
 8026c72:	9314      	str	r3, [sp, #80]	@ 0x50
 8026c74:	e7c5      	b.n	8026c02 <_dtoa_r+0x1c2>
 8026c76:	2301      	movs	r3, #1
 8026c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026c7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8026c7c:	4694      	mov	ip, r2
 8026c7e:	9b04      	ldr	r3, [sp, #16]
 8026c80:	4463      	add	r3, ip
 8026c82:	930e      	str	r3, [sp, #56]	@ 0x38
 8026c84:	3301      	adds	r3, #1
 8026c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c88:	2b00      	cmp	r3, #0
 8026c8a:	dc08      	bgt.n	8026c9e <_dtoa_r+0x25e>
 8026c8c:	2301      	movs	r3, #1
 8026c8e:	e006      	b.n	8026c9e <_dtoa_r+0x25e>
 8026c90:	2301      	movs	r3, #1
 8026c92:	9310      	str	r3, [sp, #64]	@ 0x40
 8026c94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	dd28      	ble.n	8026cec <_dtoa_r+0x2ac>
 8026c9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8026c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c9e:	9a03      	ldr	r2, [sp, #12]
 8026ca0:	2100      	movs	r1, #0
 8026ca2:	69d0      	ldr	r0, [r2, #28]
 8026ca4:	2204      	movs	r2, #4
 8026ca6:	0015      	movs	r5, r2
 8026ca8:	3514      	adds	r5, #20
 8026caa:	429d      	cmp	r5, r3
 8026cac:	d923      	bls.n	8026cf6 <_dtoa_r+0x2b6>
 8026cae:	6041      	str	r1, [r0, #4]
 8026cb0:	9803      	ldr	r0, [sp, #12]
 8026cb2:	f001 f927 	bl	8027f04 <_Balloc>
 8026cb6:	9008      	str	r0, [sp, #32]
 8026cb8:	2800      	cmp	r0, #0
 8026cba:	d11f      	bne.n	8026cfc <_dtoa_r+0x2bc>
 8026cbc:	21b0      	movs	r1, #176	@ 0xb0
 8026cbe:	4b46      	ldr	r3, [pc, #280]	@ (8026dd8 <_dtoa_r+0x398>)
 8026cc0:	4831      	ldr	r0, [pc, #196]	@ (8026d88 <_dtoa_r+0x348>)
 8026cc2:	9a08      	ldr	r2, [sp, #32]
 8026cc4:	31ff      	adds	r1, #255	@ 0xff
 8026cc6:	e6d0      	b.n	8026a6a <_dtoa_r+0x2a>
 8026cc8:	2300      	movs	r3, #0
 8026cca:	e7e2      	b.n	8026c92 <_dtoa_r+0x252>
 8026ccc:	2300      	movs	r3, #0
 8026cce:	e7d3      	b.n	8026c78 <_dtoa_r+0x238>
 8026cd0:	2300      	movs	r3, #0
 8026cd2:	9410      	str	r4, [sp, #64]	@ 0x40
 8026cd4:	9322      	str	r3, [sp, #136]	@ 0x88
 8026cd6:	3b01      	subs	r3, #1
 8026cd8:	2200      	movs	r2, #0
 8026cda:	930e      	str	r3, [sp, #56]	@ 0x38
 8026cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cde:	3313      	adds	r3, #19
 8026ce0:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026ce2:	e7dc      	b.n	8026c9e <_dtoa_r+0x25e>
 8026ce4:	2301      	movs	r3, #1
 8026ce6:	9310      	str	r3, [sp, #64]	@ 0x40
 8026ce8:	3b02      	subs	r3, #2
 8026cea:	e7f5      	b.n	8026cd8 <_dtoa_r+0x298>
 8026cec:	2301      	movs	r3, #1
 8026cee:	001a      	movs	r2, r3
 8026cf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8026cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cf4:	e7f4      	b.n	8026ce0 <_dtoa_r+0x2a0>
 8026cf6:	3101      	adds	r1, #1
 8026cf8:	0052      	lsls	r2, r2, #1
 8026cfa:	e7d4      	b.n	8026ca6 <_dtoa_r+0x266>
 8026cfc:	9b03      	ldr	r3, [sp, #12]
 8026cfe:	9a08      	ldr	r2, [sp, #32]
 8026d00:	69db      	ldr	r3, [r3, #28]
 8026d02:	601a      	str	r2, [r3, #0]
 8026d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d06:	2b0e      	cmp	r3, #14
 8026d08:	d900      	bls.n	8026d0c <_dtoa_r+0x2cc>
 8026d0a:	e0d6      	b.n	8026eba <_dtoa_r+0x47a>
 8026d0c:	2c00      	cmp	r4, #0
 8026d0e:	d100      	bne.n	8026d12 <_dtoa_r+0x2d2>
 8026d10:	e0d3      	b.n	8026eba <_dtoa_r+0x47a>
 8026d12:	9b04      	ldr	r3, [sp, #16]
 8026d14:	2b00      	cmp	r3, #0
 8026d16:	dd63      	ble.n	8026de0 <_dtoa_r+0x3a0>
 8026d18:	210f      	movs	r1, #15
 8026d1a:	9a04      	ldr	r2, [sp, #16]
 8026d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8026dc8 <_dtoa_r+0x388>)
 8026d1e:	400a      	ands	r2, r1
 8026d20:	00d2      	lsls	r2, r2, #3
 8026d22:	189b      	adds	r3, r3, r2
 8026d24:	681e      	ldr	r6, [r3, #0]
 8026d26:	685f      	ldr	r7, [r3, #4]
 8026d28:	9b04      	ldr	r3, [sp, #16]
 8026d2a:	2402      	movs	r4, #2
 8026d2c:	111d      	asrs	r5, r3, #4
 8026d2e:	05db      	lsls	r3, r3, #23
 8026d30:	d50a      	bpl.n	8026d48 <_dtoa_r+0x308>
 8026d32:	4b2a      	ldr	r3, [pc, #168]	@ (8026ddc <_dtoa_r+0x39c>)
 8026d34:	400d      	ands	r5, r1
 8026d36:	6a1a      	ldr	r2, [r3, #32]
 8026d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026d3a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026d3c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026d3e:	f7db f9cf 	bl	80020e0 <__aeabi_ddiv>
 8026d42:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d46:	3401      	adds	r4, #1
 8026d48:	4b24      	ldr	r3, [pc, #144]	@ (8026ddc <_dtoa_r+0x39c>)
 8026d4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d4c:	2d00      	cmp	r5, #0
 8026d4e:	d108      	bne.n	8026d62 <_dtoa_r+0x322>
 8026d50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d54:	0032      	movs	r2, r6
 8026d56:	003b      	movs	r3, r7
 8026d58:	f7db f9c2 	bl	80020e0 <__aeabi_ddiv>
 8026d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d60:	e059      	b.n	8026e16 <_dtoa_r+0x3d6>
 8026d62:	2301      	movs	r3, #1
 8026d64:	421d      	tst	r5, r3
 8026d66:	d009      	beq.n	8026d7c <_dtoa_r+0x33c>
 8026d68:	18e4      	adds	r4, r4, r3
 8026d6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026d6c:	0030      	movs	r0, r6
 8026d6e:	681a      	ldr	r2, [r3, #0]
 8026d70:	685b      	ldr	r3, [r3, #4]
 8026d72:	0039      	movs	r1, r7
 8026d74:	f7db fdee 	bl	8002954 <__aeabi_dmul>
 8026d78:	0006      	movs	r6, r0
 8026d7a:	000f      	movs	r7, r1
 8026d7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026d7e:	106d      	asrs	r5, r5, #1
 8026d80:	3308      	adds	r3, #8
 8026d82:	e7e2      	b.n	8026d4a <_dtoa_r+0x30a>
 8026d84:	0802edfb 	.word	0x0802edfb
 8026d88:	0802ee12 	.word	0x0802ee12
 8026d8c:	7ff00000 	.word	0x7ff00000
 8026d90:	0000270f 	.word	0x0000270f
 8026d94:	0802edf7 	.word	0x0802edf7
 8026d98:	0802edfa 	.word	0x0802edfa
 8026d9c:	0802edc3 	.word	0x0802edc3
 8026da0:	0802edc2 	.word	0x0802edc2
 8026da4:	3ff00000 	.word	0x3ff00000
 8026da8:	fffffc01 	.word	0xfffffc01
 8026dac:	3ff80000 	.word	0x3ff80000
 8026db0:	636f4361 	.word	0x636f4361
 8026db4:	3fd287a7 	.word	0x3fd287a7
 8026db8:	8b60c8b3 	.word	0x8b60c8b3
 8026dbc:	3fc68a28 	.word	0x3fc68a28
 8026dc0:	509f79fb 	.word	0x509f79fb
 8026dc4:	3fd34413 	.word	0x3fd34413
 8026dc8:	0802f110 	.word	0x0802f110
 8026dcc:	00000432 	.word	0x00000432
 8026dd0:	00000412 	.word	0x00000412
 8026dd4:	fe100000 	.word	0xfe100000
 8026dd8:	0802ee6a 	.word	0x0802ee6a
 8026ddc:	0802f0e8 	.word	0x0802f0e8
 8026de0:	9b04      	ldr	r3, [sp, #16]
 8026de2:	2402      	movs	r4, #2
 8026de4:	2b00      	cmp	r3, #0
 8026de6:	d016      	beq.n	8026e16 <_dtoa_r+0x3d6>
 8026de8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026dea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026dec:	220f      	movs	r2, #15
 8026dee:	425d      	negs	r5, r3
 8026df0:	402a      	ands	r2, r5
 8026df2:	4bd5      	ldr	r3, [pc, #852]	@ (8027148 <_dtoa_r+0x708>)
 8026df4:	00d2      	lsls	r2, r2, #3
 8026df6:	189b      	adds	r3, r3, r2
 8026df8:	681a      	ldr	r2, [r3, #0]
 8026dfa:	685b      	ldr	r3, [r3, #4]
 8026dfc:	f7db fdaa 	bl	8002954 <__aeabi_dmul>
 8026e00:	2701      	movs	r7, #1
 8026e02:	2300      	movs	r3, #0
 8026e04:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e06:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e08:	4ed0      	ldr	r6, [pc, #832]	@ (802714c <_dtoa_r+0x70c>)
 8026e0a:	112d      	asrs	r5, r5, #4
 8026e0c:	2d00      	cmp	r5, #0
 8026e0e:	d000      	beq.n	8026e12 <_dtoa_r+0x3d2>
 8026e10:	e095      	b.n	8026f3e <_dtoa_r+0x4fe>
 8026e12:	2b00      	cmp	r3, #0
 8026e14:	d1a2      	bne.n	8026d5c <_dtoa_r+0x31c>
 8026e16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026e18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026e1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	d100      	bne.n	8026e22 <_dtoa_r+0x3e2>
 8026e20:	e098      	b.n	8026f54 <_dtoa_r+0x514>
 8026e22:	2200      	movs	r2, #0
 8026e24:	0030      	movs	r0, r6
 8026e26:	0039      	movs	r1, r7
 8026e28:	4bc9      	ldr	r3, [pc, #804]	@ (8027150 <_dtoa_r+0x710>)
 8026e2a:	f7d9 fb47 	bl	80004bc <__aeabi_dcmplt>
 8026e2e:	2800      	cmp	r0, #0
 8026e30:	d100      	bne.n	8026e34 <_dtoa_r+0x3f4>
 8026e32:	e08f      	b.n	8026f54 <_dtoa_r+0x514>
 8026e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	d100      	bne.n	8026e3c <_dtoa_r+0x3fc>
 8026e3a:	e08b      	b.n	8026f54 <_dtoa_r+0x514>
 8026e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e3e:	2b00      	cmp	r3, #0
 8026e40:	dd37      	ble.n	8026eb2 <_dtoa_r+0x472>
 8026e42:	9b04      	ldr	r3, [sp, #16]
 8026e44:	2200      	movs	r2, #0
 8026e46:	3b01      	subs	r3, #1
 8026e48:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e4a:	0030      	movs	r0, r6
 8026e4c:	4bc1      	ldr	r3, [pc, #772]	@ (8027154 <_dtoa_r+0x714>)
 8026e4e:	0039      	movs	r1, r7
 8026e50:	f7db fd80 	bl	8002954 <__aeabi_dmul>
 8026e54:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e5a:	3401      	adds	r4, #1
 8026e5c:	0020      	movs	r0, r4
 8026e5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8026e60:	f7dc fcc6 	bl	80037f0 <__aeabi_i2d>
 8026e64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e68:	f7db fd74 	bl	8002954 <__aeabi_dmul>
 8026e6c:	4bba      	ldr	r3, [pc, #744]	@ (8027158 <_dtoa_r+0x718>)
 8026e6e:	2200      	movs	r2, #0
 8026e70:	f7da fd70 	bl	8001954 <__aeabi_dadd>
 8026e74:	4bb9      	ldr	r3, [pc, #740]	@ (802715c <_dtoa_r+0x71c>)
 8026e76:	0006      	movs	r6, r0
 8026e78:	18cf      	adds	r7, r1, r3
 8026e7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	d16d      	bne.n	8026f5c <_dtoa_r+0x51c>
 8026e80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026e82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026e84:	2200      	movs	r2, #0
 8026e86:	4bb6      	ldr	r3, [pc, #728]	@ (8027160 <_dtoa_r+0x720>)
 8026e88:	f7dc f84a 	bl	8002f20 <__aeabi_dsub>
 8026e8c:	0032      	movs	r2, r6
 8026e8e:	003b      	movs	r3, r7
 8026e90:	0004      	movs	r4, r0
 8026e92:	000d      	movs	r5, r1
 8026e94:	f7d9 fb26 	bl	80004e4 <__aeabi_dcmpgt>
 8026e98:	2800      	cmp	r0, #0
 8026e9a:	d000      	beq.n	8026e9e <_dtoa_r+0x45e>
 8026e9c:	e2b6      	b.n	802740c <_dtoa_r+0x9cc>
 8026e9e:	2180      	movs	r1, #128	@ 0x80
 8026ea0:	0609      	lsls	r1, r1, #24
 8026ea2:	187b      	adds	r3, r7, r1
 8026ea4:	0032      	movs	r2, r6
 8026ea6:	0020      	movs	r0, r4
 8026ea8:	0029      	movs	r1, r5
 8026eaa:	f7d9 fb07 	bl	80004bc <__aeabi_dcmplt>
 8026eae:	2800      	cmp	r0, #0
 8026eb0:	d128      	bne.n	8026f04 <_dtoa_r+0x4c4>
 8026eb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026eb4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8026eb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026eba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	da00      	bge.n	8026ec2 <_dtoa_r+0x482>
 8026ec0:	e174      	b.n	80271ac <_dtoa_r+0x76c>
 8026ec2:	9a04      	ldr	r2, [sp, #16]
 8026ec4:	2a0e      	cmp	r2, #14
 8026ec6:	dd00      	ble.n	8026eca <_dtoa_r+0x48a>
 8026ec8:	e170      	b.n	80271ac <_dtoa_r+0x76c>
 8026eca:	4b9f      	ldr	r3, [pc, #636]	@ (8027148 <_dtoa_r+0x708>)
 8026ecc:	00d2      	lsls	r2, r2, #3
 8026ece:	189b      	adds	r3, r3, r2
 8026ed0:	685c      	ldr	r4, [r3, #4]
 8026ed2:	681b      	ldr	r3, [r3, #0]
 8026ed4:	9306      	str	r3, [sp, #24]
 8026ed6:	9407      	str	r4, [sp, #28]
 8026ed8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026eda:	2b00      	cmp	r3, #0
 8026edc:	db00      	blt.n	8026ee0 <_dtoa_r+0x4a0>
 8026ede:	e0e7      	b.n	80270b0 <_dtoa_r+0x670>
 8026ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	dd00      	ble.n	8026ee8 <_dtoa_r+0x4a8>
 8026ee6:	e0e3      	b.n	80270b0 <_dtoa_r+0x670>
 8026ee8:	d10c      	bne.n	8026f04 <_dtoa_r+0x4c4>
 8026eea:	9806      	ldr	r0, [sp, #24]
 8026eec:	9907      	ldr	r1, [sp, #28]
 8026eee:	2200      	movs	r2, #0
 8026ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8027160 <_dtoa_r+0x720>)
 8026ef2:	f7db fd2f 	bl	8002954 <__aeabi_dmul>
 8026ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ef8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026efa:	f7d9 fafd 	bl	80004f8 <__aeabi_dcmpge>
 8026efe:	2800      	cmp	r0, #0
 8026f00:	d100      	bne.n	8026f04 <_dtoa_r+0x4c4>
 8026f02:	e286      	b.n	8027412 <_dtoa_r+0x9d2>
 8026f04:	2600      	movs	r6, #0
 8026f06:	0037      	movs	r7, r6
 8026f08:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026f0a:	9c08      	ldr	r4, [sp, #32]
 8026f0c:	43db      	mvns	r3, r3
 8026f0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026f10:	9704      	str	r7, [sp, #16]
 8026f12:	2700      	movs	r7, #0
 8026f14:	0031      	movs	r1, r6
 8026f16:	9803      	ldr	r0, [sp, #12]
 8026f18:	f001 f838 	bl	8027f8c <_Bfree>
 8026f1c:	9b04      	ldr	r3, [sp, #16]
 8026f1e:	2b00      	cmp	r3, #0
 8026f20:	d100      	bne.n	8026f24 <_dtoa_r+0x4e4>
 8026f22:	e0bb      	b.n	802709c <_dtoa_r+0x65c>
 8026f24:	2f00      	cmp	r7, #0
 8026f26:	d005      	beq.n	8026f34 <_dtoa_r+0x4f4>
 8026f28:	429f      	cmp	r7, r3
 8026f2a:	d003      	beq.n	8026f34 <_dtoa_r+0x4f4>
 8026f2c:	0039      	movs	r1, r7
 8026f2e:	9803      	ldr	r0, [sp, #12]
 8026f30:	f001 f82c 	bl	8027f8c <_Bfree>
 8026f34:	9904      	ldr	r1, [sp, #16]
 8026f36:	9803      	ldr	r0, [sp, #12]
 8026f38:	f001 f828 	bl	8027f8c <_Bfree>
 8026f3c:	e0ae      	b.n	802709c <_dtoa_r+0x65c>
 8026f3e:	423d      	tst	r5, r7
 8026f40:	d005      	beq.n	8026f4e <_dtoa_r+0x50e>
 8026f42:	6832      	ldr	r2, [r6, #0]
 8026f44:	6873      	ldr	r3, [r6, #4]
 8026f46:	f7db fd05 	bl	8002954 <__aeabi_dmul>
 8026f4a:	003b      	movs	r3, r7
 8026f4c:	3401      	adds	r4, #1
 8026f4e:	106d      	asrs	r5, r5, #1
 8026f50:	3608      	adds	r6, #8
 8026f52:	e75b      	b.n	8026e0c <_dtoa_r+0x3cc>
 8026f54:	9b04      	ldr	r3, [sp, #16]
 8026f56:	930c      	str	r3, [sp, #48]	@ 0x30
 8026f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026f5a:	e77f      	b.n	8026e5c <_dtoa_r+0x41c>
 8026f5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8027148 <_dtoa_r+0x708>)
 8026f60:	3a01      	subs	r2, #1
 8026f62:	00d2      	lsls	r2, r2, #3
 8026f64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026f66:	189b      	adds	r3, r3, r2
 8026f68:	681a      	ldr	r2, [r3, #0]
 8026f6a:	685b      	ldr	r3, [r3, #4]
 8026f6c:	2900      	cmp	r1, #0
 8026f6e:	d04c      	beq.n	802700a <_dtoa_r+0x5ca>
 8026f70:	2000      	movs	r0, #0
 8026f72:	497c      	ldr	r1, [pc, #496]	@ (8027164 <_dtoa_r+0x724>)
 8026f74:	f7db f8b4 	bl	80020e0 <__aeabi_ddiv>
 8026f78:	0032      	movs	r2, r6
 8026f7a:	003b      	movs	r3, r7
 8026f7c:	f7db ffd0 	bl	8002f20 <__aeabi_dsub>
 8026f80:	9a08      	ldr	r2, [sp, #32]
 8026f82:	0006      	movs	r6, r0
 8026f84:	4694      	mov	ip, r2
 8026f86:	000f      	movs	r7, r1
 8026f88:	9b08      	ldr	r3, [sp, #32]
 8026f8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8026f8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f8e:	4463      	add	r3, ip
 8026f90:	9311      	str	r3, [sp, #68]	@ 0x44
 8026f92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f96:	f7dc fbef 	bl	8003778 <__aeabi_d2iz>
 8026f9a:	0005      	movs	r5, r0
 8026f9c:	f7dc fc28 	bl	80037f0 <__aeabi_i2d>
 8026fa0:	0002      	movs	r2, r0
 8026fa2:	000b      	movs	r3, r1
 8026fa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026fa6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026fa8:	f7db ffba 	bl	8002f20 <__aeabi_dsub>
 8026fac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026fae:	3530      	adds	r5, #48	@ 0x30
 8026fb0:	1c5c      	adds	r4, r3, #1
 8026fb2:	701d      	strb	r5, [r3, #0]
 8026fb4:	0032      	movs	r2, r6
 8026fb6:	003b      	movs	r3, r7
 8026fb8:	900a      	str	r0, [sp, #40]	@ 0x28
 8026fba:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026fbc:	f7d9 fa7e 	bl	80004bc <__aeabi_dcmplt>
 8026fc0:	2800      	cmp	r0, #0
 8026fc2:	d16b      	bne.n	802709c <_dtoa_r+0x65c>
 8026fc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026fc8:	2000      	movs	r0, #0
 8026fca:	4961      	ldr	r1, [pc, #388]	@ (8027150 <_dtoa_r+0x710>)
 8026fcc:	f7db ffa8 	bl	8002f20 <__aeabi_dsub>
 8026fd0:	0032      	movs	r2, r6
 8026fd2:	003b      	movs	r3, r7
 8026fd4:	f7d9 fa72 	bl	80004bc <__aeabi_dcmplt>
 8026fd8:	2800      	cmp	r0, #0
 8026fda:	d000      	beq.n	8026fde <_dtoa_r+0x59e>
 8026fdc:	e0c6      	b.n	802716c <_dtoa_r+0x72c>
 8026fde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026fe0:	42a3      	cmp	r3, r4
 8026fe2:	d100      	bne.n	8026fe6 <_dtoa_r+0x5a6>
 8026fe4:	e765      	b.n	8026eb2 <_dtoa_r+0x472>
 8026fe6:	2200      	movs	r2, #0
 8026fe8:	0030      	movs	r0, r6
 8026fea:	0039      	movs	r1, r7
 8026fec:	4b59      	ldr	r3, [pc, #356]	@ (8027154 <_dtoa_r+0x714>)
 8026fee:	f7db fcb1 	bl	8002954 <__aeabi_dmul>
 8026ff2:	2200      	movs	r2, #0
 8026ff4:	0006      	movs	r6, r0
 8026ff6:	000f      	movs	r7, r1
 8026ff8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026ffa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026ffc:	4b55      	ldr	r3, [pc, #340]	@ (8027154 <_dtoa_r+0x714>)
 8026ffe:	f7db fca9 	bl	8002954 <__aeabi_dmul>
 8027002:	9416      	str	r4, [sp, #88]	@ 0x58
 8027004:	900a      	str	r0, [sp, #40]	@ 0x28
 8027006:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027008:	e7c3      	b.n	8026f92 <_dtoa_r+0x552>
 802700a:	0030      	movs	r0, r6
 802700c:	0039      	movs	r1, r7
 802700e:	f7db fca1 	bl	8002954 <__aeabi_dmul>
 8027012:	9d08      	ldr	r5, [sp, #32]
 8027014:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027016:	002b      	movs	r3, r5
 8027018:	4694      	mov	ip, r2
 802701a:	9016      	str	r0, [sp, #88]	@ 0x58
 802701c:	9117      	str	r1, [sp, #92]	@ 0x5c
 802701e:	4463      	add	r3, ip
 8027020:	9319      	str	r3, [sp, #100]	@ 0x64
 8027022:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027024:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027026:	f7dc fba7 	bl	8003778 <__aeabi_d2iz>
 802702a:	0004      	movs	r4, r0
 802702c:	f7dc fbe0 	bl	80037f0 <__aeabi_i2d>
 8027030:	000b      	movs	r3, r1
 8027032:	0002      	movs	r2, r0
 8027034:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027036:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027038:	f7db ff72 	bl	8002f20 <__aeabi_dsub>
 802703c:	3430      	adds	r4, #48	@ 0x30
 802703e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027040:	702c      	strb	r4, [r5, #0]
 8027042:	3501      	adds	r5, #1
 8027044:	0006      	movs	r6, r0
 8027046:	000f      	movs	r7, r1
 8027048:	42ab      	cmp	r3, r5
 802704a:	d12a      	bne.n	80270a2 <_dtoa_r+0x662>
 802704c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802704e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8027050:	9b08      	ldr	r3, [sp, #32]
 8027052:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027054:	469c      	mov	ip, r3
 8027056:	2200      	movs	r2, #0
 8027058:	4b42      	ldr	r3, [pc, #264]	@ (8027164 <_dtoa_r+0x724>)
 802705a:	4464      	add	r4, ip
 802705c:	f7da fc7a 	bl	8001954 <__aeabi_dadd>
 8027060:	0002      	movs	r2, r0
 8027062:	000b      	movs	r3, r1
 8027064:	0030      	movs	r0, r6
 8027066:	0039      	movs	r1, r7
 8027068:	f7d9 fa3c 	bl	80004e4 <__aeabi_dcmpgt>
 802706c:	2800      	cmp	r0, #0
 802706e:	d000      	beq.n	8027072 <_dtoa_r+0x632>
 8027070:	e07c      	b.n	802716c <_dtoa_r+0x72c>
 8027072:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8027074:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027076:	2000      	movs	r0, #0
 8027078:	493a      	ldr	r1, [pc, #232]	@ (8027164 <_dtoa_r+0x724>)
 802707a:	f7db ff51 	bl	8002f20 <__aeabi_dsub>
 802707e:	0002      	movs	r2, r0
 8027080:	000b      	movs	r3, r1
 8027082:	0030      	movs	r0, r6
 8027084:	0039      	movs	r1, r7
 8027086:	f7d9 fa19 	bl	80004bc <__aeabi_dcmplt>
 802708a:	2800      	cmp	r0, #0
 802708c:	d100      	bne.n	8027090 <_dtoa_r+0x650>
 802708e:	e710      	b.n	8026eb2 <_dtoa_r+0x472>
 8027090:	0023      	movs	r3, r4
 8027092:	3c01      	subs	r4, #1
 8027094:	7822      	ldrb	r2, [r4, #0]
 8027096:	2a30      	cmp	r2, #48	@ 0x30
 8027098:	d0fa      	beq.n	8027090 <_dtoa_r+0x650>
 802709a:	001c      	movs	r4, r3
 802709c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802709e:	9304      	str	r3, [sp, #16]
 80270a0:	e042      	b.n	8027128 <_dtoa_r+0x6e8>
 80270a2:	2200      	movs	r2, #0
 80270a4:	4b2b      	ldr	r3, [pc, #172]	@ (8027154 <_dtoa_r+0x714>)
 80270a6:	f7db fc55 	bl	8002954 <__aeabi_dmul>
 80270aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80270ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80270ae:	e7b8      	b.n	8027022 <_dtoa_r+0x5e2>
 80270b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270b2:	9d08      	ldr	r5, [sp, #32]
 80270b4:	3b01      	subs	r3, #1
 80270b6:	195b      	adds	r3, r3, r5
 80270b8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80270ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80270bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80270be:	9a06      	ldr	r2, [sp, #24]
 80270c0:	9b07      	ldr	r3, [sp, #28]
 80270c2:	0030      	movs	r0, r6
 80270c4:	0039      	movs	r1, r7
 80270c6:	f7db f80b 	bl	80020e0 <__aeabi_ddiv>
 80270ca:	f7dc fb55 	bl	8003778 <__aeabi_d2iz>
 80270ce:	9009      	str	r0, [sp, #36]	@ 0x24
 80270d0:	f7dc fb8e 	bl	80037f0 <__aeabi_i2d>
 80270d4:	9a06      	ldr	r2, [sp, #24]
 80270d6:	9b07      	ldr	r3, [sp, #28]
 80270d8:	f7db fc3c 	bl	8002954 <__aeabi_dmul>
 80270dc:	0002      	movs	r2, r0
 80270de:	000b      	movs	r3, r1
 80270e0:	0030      	movs	r0, r6
 80270e2:	0039      	movs	r1, r7
 80270e4:	f7db ff1c 	bl	8002f20 <__aeabi_dsub>
 80270e8:	002b      	movs	r3, r5
 80270ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80270ec:	3501      	adds	r5, #1
 80270ee:	3230      	adds	r2, #48	@ 0x30
 80270f0:	701a      	strb	r2, [r3, #0]
 80270f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80270f4:	002c      	movs	r4, r5
 80270f6:	429a      	cmp	r2, r3
 80270f8:	d14b      	bne.n	8027192 <_dtoa_r+0x752>
 80270fa:	0002      	movs	r2, r0
 80270fc:	000b      	movs	r3, r1
 80270fe:	f7da fc29 	bl	8001954 <__aeabi_dadd>
 8027102:	9a06      	ldr	r2, [sp, #24]
 8027104:	9b07      	ldr	r3, [sp, #28]
 8027106:	0006      	movs	r6, r0
 8027108:	000f      	movs	r7, r1
 802710a:	f7d9 f9eb 	bl	80004e4 <__aeabi_dcmpgt>
 802710e:	2800      	cmp	r0, #0
 8027110:	d12a      	bne.n	8027168 <_dtoa_r+0x728>
 8027112:	9a06      	ldr	r2, [sp, #24]
 8027114:	9b07      	ldr	r3, [sp, #28]
 8027116:	0030      	movs	r0, r6
 8027118:	0039      	movs	r1, r7
 802711a:	f7d9 f9c9 	bl	80004b0 <__aeabi_dcmpeq>
 802711e:	2800      	cmp	r0, #0
 8027120:	d002      	beq.n	8027128 <_dtoa_r+0x6e8>
 8027122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027124:	07dd      	lsls	r5, r3, #31
 8027126:	d41f      	bmi.n	8027168 <_dtoa_r+0x728>
 8027128:	9905      	ldr	r1, [sp, #20]
 802712a:	9803      	ldr	r0, [sp, #12]
 802712c:	f000 ff2e 	bl	8027f8c <_Bfree>
 8027130:	2300      	movs	r3, #0
 8027132:	7023      	strb	r3, [r4, #0]
 8027134:	9b04      	ldr	r3, [sp, #16]
 8027136:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8027138:	3301      	adds	r3, #1
 802713a:	6013      	str	r3, [r2, #0]
 802713c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802713e:	2b00      	cmp	r3, #0
 8027140:	d100      	bne.n	8027144 <_dtoa_r+0x704>
 8027142:	e4c7      	b.n	8026ad4 <_dtoa_r+0x94>
 8027144:	601c      	str	r4, [r3, #0]
 8027146:	e4c5      	b.n	8026ad4 <_dtoa_r+0x94>
 8027148:	0802f110 	.word	0x0802f110
 802714c:	0802f0e8 	.word	0x0802f0e8
 8027150:	3ff00000 	.word	0x3ff00000
 8027154:	40240000 	.word	0x40240000
 8027158:	401c0000 	.word	0x401c0000
 802715c:	fcc00000 	.word	0xfcc00000
 8027160:	40140000 	.word	0x40140000
 8027164:	3fe00000 	.word	0x3fe00000
 8027168:	9b04      	ldr	r3, [sp, #16]
 802716a:	930c      	str	r3, [sp, #48]	@ 0x30
 802716c:	0023      	movs	r3, r4
 802716e:	001c      	movs	r4, r3
 8027170:	3b01      	subs	r3, #1
 8027172:	781a      	ldrb	r2, [r3, #0]
 8027174:	2a39      	cmp	r2, #57	@ 0x39
 8027176:	d108      	bne.n	802718a <_dtoa_r+0x74a>
 8027178:	9a08      	ldr	r2, [sp, #32]
 802717a:	429a      	cmp	r2, r3
 802717c:	d1f7      	bne.n	802716e <_dtoa_r+0x72e>
 802717e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027180:	9908      	ldr	r1, [sp, #32]
 8027182:	3201      	adds	r2, #1
 8027184:	920c      	str	r2, [sp, #48]	@ 0x30
 8027186:	2230      	movs	r2, #48	@ 0x30
 8027188:	700a      	strb	r2, [r1, #0]
 802718a:	781a      	ldrb	r2, [r3, #0]
 802718c:	3201      	adds	r2, #1
 802718e:	701a      	strb	r2, [r3, #0]
 8027190:	e784      	b.n	802709c <_dtoa_r+0x65c>
 8027192:	2200      	movs	r2, #0
 8027194:	4bc6      	ldr	r3, [pc, #792]	@ (80274b0 <_dtoa_r+0xa70>)
 8027196:	f7db fbdd 	bl	8002954 <__aeabi_dmul>
 802719a:	2200      	movs	r2, #0
 802719c:	2300      	movs	r3, #0
 802719e:	0006      	movs	r6, r0
 80271a0:	000f      	movs	r7, r1
 80271a2:	f7d9 f985 	bl	80004b0 <__aeabi_dcmpeq>
 80271a6:	2800      	cmp	r0, #0
 80271a8:	d089      	beq.n	80270be <_dtoa_r+0x67e>
 80271aa:	e7bd      	b.n	8027128 <_dtoa_r+0x6e8>
 80271ac:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80271ae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80271b0:	9c06      	ldr	r4, [sp, #24]
 80271b2:	2f00      	cmp	r7, #0
 80271b4:	d014      	beq.n	80271e0 <_dtoa_r+0x7a0>
 80271b6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80271b8:	2a01      	cmp	r2, #1
 80271ba:	dd00      	ble.n	80271be <_dtoa_r+0x77e>
 80271bc:	e0e4      	b.n	8027388 <_dtoa_r+0x948>
 80271be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80271c0:	2a00      	cmp	r2, #0
 80271c2:	d100      	bne.n	80271c6 <_dtoa_r+0x786>
 80271c4:	e0da      	b.n	802737c <_dtoa_r+0x93c>
 80271c6:	4abb      	ldr	r2, [pc, #748]	@ (80274b4 <_dtoa_r+0xa74>)
 80271c8:	189b      	adds	r3, r3, r2
 80271ca:	9a06      	ldr	r2, [sp, #24]
 80271cc:	2101      	movs	r1, #1
 80271ce:	18d2      	adds	r2, r2, r3
 80271d0:	9206      	str	r2, [sp, #24]
 80271d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80271d4:	9803      	ldr	r0, [sp, #12]
 80271d6:	18d3      	adds	r3, r2, r3
 80271d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80271da:	f000 ffdb 	bl	8028194 <__i2b>
 80271de:	0007      	movs	r7, r0
 80271e0:	2c00      	cmp	r4, #0
 80271e2:	d00e      	beq.n	8027202 <_dtoa_r+0x7c2>
 80271e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80271e6:	2b00      	cmp	r3, #0
 80271e8:	dd0b      	ble.n	8027202 <_dtoa_r+0x7c2>
 80271ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80271ec:	0023      	movs	r3, r4
 80271ee:	4294      	cmp	r4, r2
 80271f0:	dd00      	ble.n	80271f4 <_dtoa_r+0x7b4>
 80271f2:	0013      	movs	r3, r2
 80271f4:	9a06      	ldr	r2, [sp, #24]
 80271f6:	1ae4      	subs	r4, r4, r3
 80271f8:	1ad2      	subs	r2, r2, r3
 80271fa:	9206      	str	r2, [sp, #24]
 80271fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80271fe:	1ad3      	subs	r3, r2, r3
 8027200:	930d      	str	r3, [sp, #52]	@ 0x34
 8027202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027204:	2b00      	cmp	r3, #0
 8027206:	d021      	beq.n	802724c <_dtoa_r+0x80c>
 8027208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802720a:	2b00      	cmp	r3, #0
 802720c:	d100      	bne.n	8027210 <_dtoa_r+0x7d0>
 802720e:	e0d3      	b.n	80273b8 <_dtoa_r+0x978>
 8027210:	9e05      	ldr	r6, [sp, #20]
 8027212:	2d00      	cmp	r5, #0
 8027214:	d014      	beq.n	8027240 <_dtoa_r+0x800>
 8027216:	0039      	movs	r1, r7
 8027218:	002a      	movs	r2, r5
 802721a:	9803      	ldr	r0, [sp, #12]
 802721c:	f001 f87c 	bl	8028318 <__pow5mult>
 8027220:	9a05      	ldr	r2, [sp, #20]
 8027222:	0001      	movs	r1, r0
 8027224:	0007      	movs	r7, r0
 8027226:	9803      	ldr	r0, [sp, #12]
 8027228:	f000 ffcc 	bl	80281c4 <__multiply>
 802722c:	0006      	movs	r6, r0
 802722e:	9905      	ldr	r1, [sp, #20]
 8027230:	9803      	ldr	r0, [sp, #12]
 8027232:	f000 feab 	bl	8027f8c <_Bfree>
 8027236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027238:	9605      	str	r6, [sp, #20]
 802723a:	1b5b      	subs	r3, r3, r5
 802723c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802723e:	d005      	beq.n	802724c <_dtoa_r+0x80c>
 8027240:	0031      	movs	r1, r6
 8027242:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027244:	9803      	ldr	r0, [sp, #12]
 8027246:	f001 f867 	bl	8028318 <__pow5mult>
 802724a:	9005      	str	r0, [sp, #20]
 802724c:	2101      	movs	r1, #1
 802724e:	9803      	ldr	r0, [sp, #12]
 8027250:	f000 ffa0 	bl	8028194 <__i2b>
 8027254:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027256:	0006      	movs	r6, r0
 8027258:	2b00      	cmp	r3, #0
 802725a:	d100      	bne.n	802725e <_dtoa_r+0x81e>
 802725c:	e1bc      	b.n	80275d8 <_dtoa_r+0xb98>
 802725e:	001a      	movs	r2, r3
 8027260:	0001      	movs	r1, r0
 8027262:	9803      	ldr	r0, [sp, #12]
 8027264:	f001 f858 	bl	8028318 <__pow5mult>
 8027268:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802726a:	0006      	movs	r6, r0
 802726c:	2500      	movs	r5, #0
 802726e:	2b01      	cmp	r3, #1
 8027270:	dc16      	bgt.n	80272a0 <_dtoa_r+0x860>
 8027272:	2500      	movs	r5, #0
 8027274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027276:	42ab      	cmp	r3, r5
 8027278:	d10e      	bne.n	8027298 <_dtoa_r+0x858>
 802727a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802727c:	031b      	lsls	r3, r3, #12
 802727e:	42ab      	cmp	r3, r5
 8027280:	d10a      	bne.n	8027298 <_dtoa_r+0x858>
 8027282:	4b8d      	ldr	r3, [pc, #564]	@ (80274b8 <_dtoa_r+0xa78>)
 8027284:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027286:	4213      	tst	r3, r2
 8027288:	d006      	beq.n	8027298 <_dtoa_r+0x858>
 802728a:	9b06      	ldr	r3, [sp, #24]
 802728c:	3501      	adds	r5, #1
 802728e:	3301      	adds	r3, #1
 8027290:	9306      	str	r3, [sp, #24]
 8027292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027294:	3301      	adds	r3, #1
 8027296:	930d      	str	r3, [sp, #52]	@ 0x34
 8027298:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802729a:	2001      	movs	r0, #1
 802729c:	2b00      	cmp	r3, #0
 802729e:	d008      	beq.n	80272b2 <_dtoa_r+0x872>
 80272a0:	6933      	ldr	r3, [r6, #16]
 80272a2:	3303      	adds	r3, #3
 80272a4:	009b      	lsls	r3, r3, #2
 80272a6:	18f3      	adds	r3, r6, r3
 80272a8:	6858      	ldr	r0, [r3, #4]
 80272aa:	f000 ff23 	bl	80280f4 <__hi0bits>
 80272ae:	2320      	movs	r3, #32
 80272b0:	1a18      	subs	r0, r3, r0
 80272b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80272b4:	1818      	adds	r0, r3, r0
 80272b6:	0002      	movs	r2, r0
 80272b8:	231f      	movs	r3, #31
 80272ba:	401a      	ands	r2, r3
 80272bc:	4218      	tst	r0, r3
 80272be:	d100      	bne.n	80272c2 <_dtoa_r+0x882>
 80272c0:	e081      	b.n	80273c6 <_dtoa_r+0x986>
 80272c2:	3301      	adds	r3, #1
 80272c4:	1a9b      	subs	r3, r3, r2
 80272c6:	2b04      	cmp	r3, #4
 80272c8:	dd79      	ble.n	80273be <_dtoa_r+0x97e>
 80272ca:	231c      	movs	r3, #28
 80272cc:	1a9b      	subs	r3, r3, r2
 80272ce:	9a06      	ldr	r2, [sp, #24]
 80272d0:	18e4      	adds	r4, r4, r3
 80272d2:	18d2      	adds	r2, r2, r3
 80272d4:	9206      	str	r2, [sp, #24]
 80272d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80272d8:	18d3      	adds	r3, r2, r3
 80272da:	930d      	str	r3, [sp, #52]	@ 0x34
 80272dc:	9b06      	ldr	r3, [sp, #24]
 80272de:	2b00      	cmp	r3, #0
 80272e0:	dd05      	ble.n	80272ee <_dtoa_r+0x8ae>
 80272e2:	001a      	movs	r2, r3
 80272e4:	9905      	ldr	r1, [sp, #20]
 80272e6:	9803      	ldr	r0, [sp, #12]
 80272e8:	f001 f872 	bl	80283d0 <__lshift>
 80272ec:	9005      	str	r0, [sp, #20]
 80272ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80272f0:	2b00      	cmp	r3, #0
 80272f2:	dd05      	ble.n	8027300 <_dtoa_r+0x8c0>
 80272f4:	0031      	movs	r1, r6
 80272f6:	001a      	movs	r2, r3
 80272f8:	9803      	ldr	r0, [sp, #12]
 80272fa:	f001 f869 	bl	80283d0 <__lshift>
 80272fe:	0006      	movs	r6, r0
 8027300:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027302:	2b00      	cmp	r3, #0
 8027304:	d061      	beq.n	80273ca <_dtoa_r+0x98a>
 8027306:	0031      	movs	r1, r6
 8027308:	9805      	ldr	r0, [sp, #20]
 802730a:	f001 f8cd 	bl	80284a8 <__mcmp>
 802730e:	2800      	cmp	r0, #0
 8027310:	da5b      	bge.n	80273ca <_dtoa_r+0x98a>
 8027312:	9b04      	ldr	r3, [sp, #16]
 8027314:	220a      	movs	r2, #10
 8027316:	3b01      	subs	r3, #1
 8027318:	930c      	str	r3, [sp, #48]	@ 0x30
 802731a:	9905      	ldr	r1, [sp, #20]
 802731c:	2300      	movs	r3, #0
 802731e:	9803      	ldr	r0, [sp, #12]
 8027320:	f000 fe58 	bl	8027fd4 <__multadd>
 8027324:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027326:	9005      	str	r0, [sp, #20]
 8027328:	2b00      	cmp	r3, #0
 802732a:	d100      	bne.n	802732e <_dtoa_r+0x8ee>
 802732c:	e15b      	b.n	80275e6 <_dtoa_r+0xba6>
 802732e:	2300      	movs	r3, #0
 8027330:	0039      	movs	r1, r7
 8027332:	220a      	movs	r2, #10
 8027334:	9803      	ldr	r0, [sp, #12]
 8027336:	f000 fe4d 	bl	8027fd4 <__multadd>
 802733a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802733c:	0007      	movs	r7, r0
 802733e:	2b00      	cmp	r3, #0
 8027340:	dc4d      	bgt.n	80273de <_dtoa_r+0x99e>
 8027342:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027344:	2b02      	cmp	r3, #2
 8027346:	dd46      	ble.n	80273d6 <_dtoa_r+0x996>
 8027348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802734a:	2b00      	cmp	r3, #0
 802734c:	d000      	beq.n	8027350 <_dtoa_r+0x910>
 802734e:	e5db      	b.n	8026f08 <_dtoa_r+0x4c8>
 8027350:	0031      	movs	r1, r6
 8027352:	2205      	movs	r2, #5
 8027354:	9803      	ldr	r0, [sp, #12]
 8027356:	f000 fe3d 	bl	8027fd4 <__multadd>
 802735a:	0006      	movs	r6, r0
 802735c:	0001      	movs	r1, r0
 802735e:	9805      	ldr	r0, [sp, #20]
 8027360:	f001 f8a2 	bl	80284a8 <__mcmp>
 8027364:	2800      	cmp	r0, #0
 8027366:	dc00      	bgt.n	802736a <_dtoa_r+0x92a>
 8027368:	e5ce      	b.n	8026f08 <_dtoa_r+0x4c8>
 802736a:	9b08      	ldr	r3, [sp, #32]
 802736c:	9a08      	ldr	r2, [sp, #32]
 802736e:	1c5c      	adds	r4, r3, #1
 8027370:	2331      	movs	r3, #49	@ 0x31
 8027372:	7013      	strb	r3, [r2, #0]
 8027374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027376:	3301      	adds	r3, #1
 8027378:	930c      	str	r3, [sp, #48]	@ 0x30
 802737a:	e5c9      	b.n	8026f10 <_dtoa_r+0x4d0>
 802737c:	2336      	movs	r3, #54	@ 0x36
 802737e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027380:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027382:	1a9b      	subs	r3, r3, r2
 8027384:	9c06      	ldr	r4, [sp, #24]
 8027386:	e720      	b.n	80271ca <_dtoa_r+0x78a>
 8027388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802738a:	1e5d      	subs	r5, r3, #1
 802738c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802738e:	42ab      	cmp	r3, r5
 8027390:	db08      	blt.n	80273a4 <_dtoa_r+0x964>
 8027392:	1b5d      	subs	r5, r3, r5
 8027394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027396:	2b00      	cmp	r3, #0
 8027398:	daf4      	bge.n	8027384 <_dtoa_r+0x944>
 802739a:	9b06      	ldr	r3, [sp, #24]
 802739c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802739e:	1a9c      	subs	r4, r3, r2
 80273a0:	2300      	movs	r3, #0
 80273a2:	e712      	b.n	80271ca <_dtoa_r+0x78a>
 80273a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80273a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80273a8:	1aeb      	subs	r3, r5, r3
 80273aa:	18d3      	adds	r3, r2, r3
 80273ac:	9314      	str	r3, [sp, #80]	@ 0x50
 80273ae:	950f      	str	r5, [sp, #60]	@ 0x3c
 80273b0:	9c06      	ldr	r4, [sp, #24]
 80273b2:	2500      	movs	r5, #0
 80273b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273b6:	e708      	b.n	80271ca <_dtoa_r+0x78a>
 80273b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80273ba:	9905      	ldr	r1, [sp, #20]
 80273bc:	e742      	b.n	8027244 <_dtoa_r+0x804>
 80273be:	2b04      	cmp	r3, #4
 80273c0:	d08c      	beq.n	80272dc <_dtoa_r+0x89c>
 80273c2:	331c      	adds	r3, #28
 80273c4:	e783      	b.n	80272ce <_dtoa_r+0x88e>
 80273c6:	0013      	movs	r3, r2
 80273c8:	e7fb      	b.n	80273c2 <_dtoa_r+0x982>
 80273ca:	9b04      	ldr	r3, [sp, #16]
 80273cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80273ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80273d2:	2b00      	cmp	r3, #0
 80273d4:	ddb5      	ble.n	8027342 <_dtoa_r+0x902>
 80273d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80273d8:	2b00      	cmp	r3, #0
 80273da:	d100      	bne.n	80273de <_dtoa_r+0x99e>
 80273dc:	e107      	b.n	80275ee <_dtoa_r+0xbae>
 80273de:	2c00      	cmp	r4, #0
 80273e0:	dd05      	ble.n	80273ee <_dtoa_r+0x9ae>
 80273e2:	0039      	movs	r1, r7
 80273e4:	0022      	movs	r2, r4
 80273e6:	9803      	ldr	r0, [sp, #12]
 80273e8:	f000 fff2 	bl	80283d0 <__lshift>
 80273ec:	0007      	movs	r7, r0
 80273ee:	9704      	str	r7, [sp, #16]
 80273f0:	2d00      	cmp	r5, #0
 80273f2:	d020      	beq.n	8027436 <_dtoa_r+0x9f6>
 80273f4:	6879      	ldr	r1, [r7, #4]
 80273f6:	9803      	ldr	r0, [sp, #12]
 80273f8:	f000 fd84 	bl	8027f04 <_Balloc>
 80273fc:	1e04      	subs	r4, r0, #0
 80273fe:	d10c      	bne.n	802741a <_dtoa_r+0x9da>
 8027400:	0022      	movs	r2, r4
 8027402:	4b2e      	ldr	r3, [pc, #184]	@ (80274bc <_dtoa_r+0xa7c>)
 8027404:	482e      	ldr	r0, [pc, #184]	@ (80274c0 <_dtoa_r+0xa80>)
 8027406:	492f      	ldr	r1, [pc, #188]	@ (80274c4 <_dtoa_r+0xa84>)
 8027408:	f7ff fb2f 	bl	8026a6a <_dtoa_r+0x2a>
 802740c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802740e:	0037      	movs	r7, r6
 8027410:	e7ab      	b.n	802736a <_dtoa_r+0x92a>
 8027412:	9b04      	ldr	r3, [sp, #16]
 8027414:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8027416:	930c      	str	r3, [sp, #48]	@ 0x30
 8027418:	e7f9      	b.n	802740e <_dtoa_r+0x9ce>
 802741a:	0039      	movs	r1, r7
 802741c:	693a      	ldr	r2, [r7, #16]
 802741e:	310c      	adds	r1, #12
 8027420:	3202      	adds	r2, #2
 8027422:	0092      	lsls	r2, r2, #2
 8027424:	300c      	adds	r0, #12
 8027426:	f7ff fa75 	bl	8026914 <memcpy>
 802742a:	2201      	movs	r2, #1
 802742c:	0021      	movs	r1, r4
 802742e:	9803      	ldr	r0, [sp, #12]
 8027430:	f000 ffce 	bl	80283d0 <__lshift>
 8027434:	9004      	str	r0, [sp, #16]
 8027436:	9b08      	ldr	r3, [sp, #32]
 8027438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802743a:	9306      	str	r3, [sp, #24]
 802743c:	3b01      	subs	r3, #1
 802743e:	189b      	adds	r3, r3, r2
 8027440:	2201      	movs	r2, #1
 8027442:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027446:	4013      	ands	r3, r2
 8027448:	930e      	str	r3, [sp, #56]	@ 0x38
 802744a:	0031      	movs	r1, r6
 802744c:	9805      	ldr	r0, [sp, #20]
 802744e:	f7ff fa71 	bl	8026934 <quorem>
 8027452:	0039      	movs	r1, r7
 8027454:	0005      	movs	r5, r0
 8027456:	900a      	str	r0, [sp, #40]	@ 0x28
 8027458:	9805      	ldr	r0, [sp, #20]
 802745a:	f001 f825 	bl	80284a8 <__mcmp>
 802745e:	9a04      	ldr	r2, [sp, #16]
 8027460:	900d      	str	r0, [sp, #52]	@ 0x34
 8027462:	0031      	movs	r1, r6
 8027464:	9803      	ldr	r0, [sp, #12]
 8027466:	f001 f83b 	bl	80284e0 <__mdiff>
 802746a:	2201      	movs	r2, #1
 802746c:	68c3      	ldr	r3, [r0, #12]
 802746e:	0004      	movs	r4, r0
 8027470:	3530      	adds	r5, #48	@ 0x30
 8027472:	9209      	str	r2, [sp, #36]	@ 0x24
 8027474:	2b00      	cmp	r3, #0
 8027476:	d104      	bne.n	8027482 <_dtoa_r+0xa42>
 8027478:	0001      	movs	r1, r0
 802747a:	9805      	ldr	r0, [sp, #20]
 802747c:	f001 f814 	bl	80284a8 <__mcmp>
 8027480:	9009      	str	r0, [sp, #36]	@ 0x24
 8027482:	0021      	movs	r1, r4
 8027484:	9803      	ldr	r0, [sp, #12]
 8027486:	f000 fd81 	bl	8027f8c <_Bfree>
 802748a:	9b06      	ldr	r3, [sp, #24]
 802748c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802748e:	1c5c      	adds	r4, r3, #1
 8027490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027492:	4313      	orrs	r3, r2
 8027494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027496:	4313      	orrs	r3, r2
 8027498:	d116      	bne.n	80274c8 <_dtoa_r+0xa88>
 802749a:	2d39      	cmp	r5, #57	@ 0x39
 802749c:	d02f      	beq.n	80274fe <_dtoa_r+0xabe>
 802749e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80274a0:	2b00      	cmp	r3, #0
 80274a2:	dd01      	ble.n	80274a8 <_dtoa_r+0xa68>
 80274a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80274a6:	3531      	adds	r5, #49	@ 0x31
 80274a8:	9b06      	ldr	r3, [sp, #24]
 80274aa:	701d      	strb	r5, [r3, #0]
 80274ac:	e532      	b.n	8026f14 <_dtoa_r+0x4d4>
 80274ae:	46c0      	nop			@ (mov r8, r8)
 80274b0:	40240000 	.word	0x40240000
 80274b4:	00000433 	.word	0x00000433
 80274b8:	7ff00000 	.word	0x7ff00000
 80274bc:	0802ee6a 	.word	0x0802ee6a
 80274c0:	0802ee12 	.word	0x0802ee12
 80274c4:	000002ef 	.word	0x000002ef
 80274c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80274ca:	2b00      	cmp	r3, #0
 80274cc:	db04      	blt.n	80274d8 <_dtoa_r+0xa98>
 80274ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80274d0:	4313      	orrs	r3, r2
 80274d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80274d4:	4313      	orrs	r3, r2
 80274d6:	d11e      	bne.n	8027516 <_dtoa_r+0xad6>
 80274d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274da:	2b00      	cmp	r3, #0
 80274dc:	dde4      	ble.n	80274a8 <_dtoa_r+0xa68>
 80274de:	9905      	ldr	r1, [sp, #20]
 80274e0:	2201      	movs	r2, #1
 80274e2:	9803      	ldr	r0, [sp, #12]
 80274e4:	f000 ff74 	bl	80283d0 <__lshift>
 80274e8:	0031      	movs	r1, r6
 80274ea:	9005      	str	r0, [sp, #20]
 80274ec:	f000 ffdc 	bl	80284a8 <__mcmp>
 80274f0:	2800      	cmp	r0, #0
 80274f2:	dc02      	bgt.n	80274fa <_dtoa_r+0xaba>
 80274f4:	d1d8      	bne.n	80274a8 <_dtoa_r+0xa68>
 80274f6:	07eb      	lsls	r3, r5, #31
 80274f8:	d5d6      	bpl.n	80274a8 <_dtoa_r+0xa68>
 80274fa:	2d39      	cmp	r5, #57	@ 0x39
 80274fc:	d1d2      	bne.n	80274a4 <_dtoa_r+0xa64>
 80274fe:	2339      	movs	r3, #57	@ 0x39
 8027500:	9a06      	ldr	r2, [sp, #24]
 8027502:	7013      	strb	r3, [r2, #0]
 8027504:	0023      	movs	r3, r4
 8027506:	001c      	movs	r4, r3
 8027508:	3b01      	subs	r3, #1
 802750a:	781a      	ldrb	r2, [r3, #0]
 802750c:	2a39      	cmp	r2, #57	@ 0x39
 802750e:	d050      	beq.n	80275b2 <_dtoa_r+0xb72>
 8027510:	3201      	adds	r2, #1
 8027512:	701a      	strb	r2, [r3, #0]
 8027514:	e4fe      	b.n	8026f14 <_dtoa_r+0x4d4>
 8027516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027518:	2b00      	cmp	r3, #0
 802751a:	dd03      	ble.n	8027524 <_dtoa_r+0xae4>
 802751c:	2d39      	cmp	r5, #57	@ 0x39
 802751e:	d0ee      	beq.n	80274fe <_dtoa_r+0xabe>
 8027520:	3501      	adds	r5, #1
 8027522:	e7c1      	b.n	80274a8 <_dtoa_r+0xa68>
 8027524:	9b06      	ldr	r3, [sp, #24]
 8027526:	9a06      	ldr	r2, [sp, #24]
 8027528:	701d      	strb	r5, [r3, #0]
 802752a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802752c:	4293      	cmp	r3, r2
 802752e:	d02b      	beq.n	8027588 <_dtoa_r+0xb48>
 8027530:	2300      	movs	r3, #0
 8027532:	220a      	movs	r2, #10
 8027534:	9905      	ldr	r1, [sp, #20]
 8027536:	9803      	ldr	r0, [sp, #12]
 8027538:	f000 fd4c 	bl	8027fd4 <__multadd>
 802753c:	9b04      	ldr	r3, [sp, #16]
 802753e:	9005      	str	r0, [sp, #20]
 8027540:	429f      	cmp	r7, r3
 8027542:	d109      	bne.n	8027558 <_dtoa_r+0xb18>
 8027544:	0039      	movs	r1, r7
 8027546:	2300      	movs	r3, #0
 8027548:	220a      	movs	r2, #10
 802754a:	9803      	ldr	r0, [sp, #12]
 802754c:	f000 fd42 	bl	8027fd4 <__multadd>
 8027550:	0007      	movs	r7, r0
 8027552:	9004      	str	r0, [sp, #16]
 8027554:	9406      	str	r4, [sp, #24]
 8027556:	e778      	b.n	802744a <_dtoa_r+0xa0a>
 8027558:	0039      	movs	r1, r7
 802755a:	2300      	movs	r3, #0
 802755c:	220a      	movs	r2, #10
 802755e:	9803      	ldr	r0, [sp, #12]
 8027560:	f000 fd38 	bl	8027fd4 <__multadd>
 8027564:	2300      	movs	r3, #0
 8027566:	0007      	movs	r7, r0
 8027568:	220a      	movs	r2, #10
 802756a:	9904      	ldr	r1, [sp, #16]
 802756c:	9803      	ldr	r0, [sp, #12]
 802756e:	f000 fd31 	bl	8027fd4 <__multadd>
 8027572:	9004      	str	r0, [sp, #16]
 8027574:	e7ee      	b.n	8027554 <_dtoa_r+0xb14>
 8027576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027578:	2401      	movs	r4, #1
 802757a:	2b00      	cmp	r3, #0
 802757c:	dd00      	ble.n	8027580 <_dtoa_r+0xb40>
 802757e:	001c      	movs	r4, r3
 8027580:	9704      	str	r7, [sp, #16]
 8027582:	2700      	movs	r7, #0
 8027584:	9b08      	ldr	r3, [sp, #32]
 8027586:	191c      	adds	r4, r3, r4
 8027588:	9905      	ldr	r1, [sp, #20]
 802758a:	2201      	movs	r2, #1
 802758c:	9803      	ldr	r0, [sp, #12]
 802758e:	f000 ff1f 	bl	80283d0 <__lshift>
 8027592:	0031      	movs	r1, r6
 8027594:	9005      	str	r0, [sp, #20]
 8027596:	f000 ff87 	bl	80284a8 <__mcmp>
 802759a:	2800      	cmp	r0, #0
 802759c:	dcb2      	bgt.n	8027504 <_dtoa_r+0xac4>
 802759e:	d101      	bne.n	80275a4 <_dtoa_r+0xb64>
 80275a0:	07ed      	lsls	r5, r5, #31
 80275a2:	d4af      	bmi.n	8027504 <_dtoa_r+0xac4>
 80275a4:	0023      	movs	r3, r4
 80275a6:	001c      	movs	r4, r3
 80275a8:	3b01      	subs	r3, #1
 80275aa:	781a      	ldrb	r2, [r3, #0]
 80275ac:	2a30      	cmp	r2, #48	@ 0x30
 80275ae:	d0fa      	beq.n	80275a6 <_dtoa_r+0xb66>
 80275b0:	e4b0      	b.n	8026f14 <_dtoa_r+0x4d4>
 80275b2:	9a08      	ldr	r2, [sp, #32]
 80275b4:	429a      	cmp	r2, r3
 80275b6:	d1a6      	bne.n	8027506 <_dtoa_r+0xac6>
 80275b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80275ba:	3301      	adds	r3, #1
 80275bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80275be:	2331      	movs	r3, #49	@ 0x31
 80275c0:	7013      	strb	r3, [r2, #0]
 80275c2:	e4a7      	b.n	8026f14 <_dtoa_r+0x4d4>
 80275c4:	4b14      	ldr	r3, [pc, #80]	@ (8027618 <_dtoa_r+0xbd8>)
 80275c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80275c8:	9308      	str	r3, [sp, #32]
 80275ca:	4b14      	ldr	r3, [pc, #80]	@ (802761c <_dtoa_r+0xbdc>)
 80275cc:	2a00      	cmp	r2, #0
 80275ce:	d001      	beq.n	80275d4 <_dtoa_r+0xb94>
 80275d0:	f7ff fa7e 	bl	8026ad0 <_dtoa_r+0x90>
 80275d4:	f7ff fa7e 	bl	8026ad4 <_dtoa_r+0x94>
 80275d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80275da:	2b01      	cmp	r3, #1
 80275dc:	dc00      	bgt.n	80275e0 <_dtoa_r+0xba0>
 80275de:	e648      	b.n	8027272 <_dtoa_r+0x832>
 80275e0:	2001      	movs	r0, #1
 80275e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80275e4:	e665      	b.n	80272b2 <_dtoa_r+0x872>
 80275e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80275e8:	2b00      	cmp	r3, #0
 80275ea:	dc00      	bgt.n	80275ee <_dtoa_r+0xbae>
 80275ec:	e6a9      	b.n	8027342 <_dtoa_r+0x902>
 80275ee:	2400      	movs	r4, #0
 80275f0:	0031      	movs	r1, r6
 80275f2:	9805      	ldr	r0, [sp, #20]
 80275f4:	f7ff f99e 	bl	8026934 <quorem>
 80275f8:	9b08      	ldr	r3, [sp, #32]
 80275fa:	3030      	adds	r0, #48	@ 0x30
 80275fc:	5518      	strb	r0, [r3, r4]
 80275fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027600:	3401      	adds	r4, #1
 8027602:	0005      	movs	r5, r0
 8027604:	42a3      	cmp	r3, r4
 8027606:	ddb6      	ble.n	8027576 <_dtoa_r+0xb36>
 8027608:	2300      	movs	r3, #0
 802760a:	220a      	movs	r2, #10
 802760c:	9905      	ldr	r1, [sp, #20]
 802760e:	9803      	ldr	r0, [sp, #12]
 8027610:	f000 fce0 	bl	8027fd4 <__multadd>
 8027614:	9005      	str	r0, [sp, #20]
 8027616:	e7eb      	b.n	80275f0 <_dtoa_r+0xbb0>
 8027618:	0802edee 	.word	0x0802edee
 802761c:	0802edf6 	.word	0x0802edf6

08027620 <_free_r>:
 8027620:	b570      	push	{r4, r5, r6, lr}
 8027622:	0005      	movs	r5, r0
 8027624:	1e0c      	subs	r4, r1, #0
 8027626:	d010      	beq.n	802764a <_free_r+0x2a>
 8027628:	3c04      	subs	r4, #4
 802762a:	6823      	ldr	r3, [r4, #0]
 802762c:	2b00      	cmp	r3, #0
 802762e:	da00      	bge.n	8027632 <_free_r+0x12>
 8027630:	18e4      	adds	r4, r4, r3
 8027632:	0028      	movs	r0, r5
 8027634:	f000 fc56 	bl	8027ee4 <__malloc_lock>
 8027638:	4a1d      	ldr	r2, [pc, #116]	@ (80276b0 <_free_r+0x90>)
 802763a:	6813      	ldr	r3, [r2, #0]
 802763c:	2b00      	cmp	r3, #0
 802763e:	d105      	bne.n	802764c <_free_r+0x2c>
 8027640:	6063      	str	r3, [r4, #4]
 8027642:	6014      	str	r4, [r2, #0]
 8027644:	0028      	movs	r0, r5
 8027646:	f000 fc55 	bl	8027ef4 <__malloc_unlock>
 802764a:	bd70      	pop	{r4, r5, r6, pc}
 802764c:	42a3      	cmp	r3, r4
 802764e:	d908      	bls.n	8027662 <_free_r+0x42>
 8027650:	6820      	ldr	r0, [r4, #0]
 8027652:	1821      	adds	r1, r4, r0
 8027654:	428b      	cmp	r3, r1
 8027656:	d1f3      	bne.n	8027640 <_free_r+0x20>
 8027658:	6819      	ldr	r1, [r3, #0]
 802765a:	685b      	ldr	r3, [r3, #4]
 802765c:	1809      	adds	r1, r1, r0
 802765e:	6021      	str	r1, [r4, #0]
 8027660:	e7ee      	b.n	8027640 <_free_r+0x20>
 8027662:	001a      	movs	r2, r3
 8027664:	685b      	ldr	r3, [r3, #4]
 8027666:	2b00      	cmp	r3, #0
 8027668:	d001      	beq.n	802766e <_free_r+0x4e>
 802766a:	42a3      	cmp	r3, r4
 802766c:	d9f9      	bls.n	8027662 <_free_r+0x42>
 802766e:	6811      	ldr	r1, [r2, #0]
 8027670:	1850      	adds	r0, r2, r1
 8027672:	42a0      	cmp	r0, r4
 8027674:	d10b      	bne.n	802768e <_free_r+0x6e>
 8027676:	6820      	ldr	r0, [r4, #0]
 8027678:	1809      	adds	r1, r1, r0
 802767a:	1850      	adds	r0, r2, r1
 802767c:	6011      	str	r1, [r2, #0]
 802767e:	4283      	cmp	r3, r0
 8027680:	d1e0      	bne.n	8027644 <_free_r+0x24>
 8027682:	6818      	ldr	r0, [r3, #0]
 8027684:	685b      	ldr	r3, [r3, #4]
 8027686:	1841      	adds	r1, r0, r1
 8027688:	6011      	str	r1, [r2, #0]
 802768a:	6053      	str	r3, [r2, #4]
 802768c:	e7da      	b.n	8027644 <_free_r+0x24>
 802768e:	42a0      	cmp	r0, r4
 8027690:	d902      	bls.n	8027698 <_free_r+0x78>
 8027692:	230c      	movs	r3, #12
 8027694:	602b      	str	r3, [r5, #0]
 8027696:	e7d5      	b.n	8027644 <_free_r+0x24>
 8027698:	6820      	ldr	r0, [r4, #0]
 802769a:	1821      	adds	r1, r4, r0
 802769c:	428b      	cmp	r3, r1
 802769e:	d103      	bne.n	80276a8 <_free_r+0x88>
 80276a0:	6819      	ldr	r1, [r3, #0]
 80276a2:	685b      	ldr	r3, [r3, #4]
 80276a4:	1809      	adds	r1, r1, r0
 80276a6:	6021      	str	r1, [r4, #0]
 80276a8:	6063      	str	r3, [r4, #4]
 80276aa:	6054      	str	r4, [r2, #4]
 80276ac:	e7ca      	b.n	8027644 <_free_r+0x24>
 80276ae:	46c0      	nop			@ (mov r8, r8)
 80276b0:	20003914 	.word	0x20003914

080276b4 <rshift>:
 80276b4:	0002      	movs	r2, r0
 80276b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276b8:	6904      	ldr	r4, [r0, #16]
 80276ba:	b085      	sub	sp, #20
 80276bc:	3214      	adds	r2, #20
 80276be:	114b      	asrs	r3, r1, #5
 80276c0:	0016      	movs	r6, r2
 80276c2:	9302      	str	r3, [sp, #8]
 80276c4:	429c      	cmp	r4, r3
 80276c6:	dd31      	ble.n	802772c <rshift+0x78>
 80276c8:	261f      	movs	r6, #31
 80276ca:	000f      	movs	r7, r1
 80276cc:	009b      	lsls	r3, r3, #2
 80276ce:	00a5      	lsls	r5, r4, #2
 80276d0:	18d3      	adds	r3, r2, r3
 80276d2:	4037      	ands	r7, r6
 80276d4:	1955      	adds	r5, r2, r5
 80276d6:	9300      	str	r3, [sp, #0]
 80276d8:	9701      	str	r7, [sp, #4]
 80276da:	4231      	tst	r1, r6
 80276dc:	d10d      	bne.n	80276fa <rshift+0x46>
 80276de:	0016      	movs	r6, r2
 80276e0:	0019      	movs	r1, r3
 80276e2:	428d      	cmp	r5, r1
 80276e4:	d836      	bhi.n	8027754 <rshift+0xa0>
 80276e6:	9b00      	ldr	r3, [sp, #0]
 80276e8:	2600      	movs	r6, #0
 80276ea:	3b03      	subs	r3, #3
 80276ec:	429d      	cmp	r5, r3
 80276ee:	d302      	bcc.n	80276f6 <rshift+0x42>
 80276f0:	9b02      	ldr	r3, [sp, #8]
 80276f2:	1ae4      	subs	r4, r4, r3
 80276f4:	00a6      	lsls	r6, r4, #2
 80276f6:	1996      	adds	r6, r2, r6
 80276f8:	e018      	b.n	802772c <rshift+0x78>
 80276fa:	2120      	movs	r1, #32
 80276fc:	9e01      	ldr	r6, [sp, #4]
 80276fe:	9f01      	ldr	r7, [sp, #4]
 8027700:	1b89      	subs	r1, r1, r6
 8027702:	9e00      	ldr	r6, [sp, #0]
 8027704:	9103      	str	r1, [sp, #12]
 8027706:	ce02      	ldmia	r6!, {r1}
 8027708:	4694      	mov	ip, r2
 802770a:	40f9      	lsrs	r1, r7
 802770c:	42b5      	cmp	r5, r6
 802770e:	d816      	bhi.n	802773e <rshift+0x8a>
 8027710:	9b00      	ldr	r3, [sp, #0]
 8027712:	2600      	movs	r6, #0
 8027714:	3301      	adds	r3, #1
 8027716:	429d      	cmp	r5, r3
 8027718:	d303      	bcc.n	8027722 <rshift+0x6e>
 802771a:	9b02      	ldr	r3, [sp, #8]
 802771c:	1ae4      	subs	r4, r4, r3
 802771e:	00a6      	lsls	r6, r4, #2
 8027720:	3e04      	subs	r6, #4
 8027722:	1996      	adds	r6, r2, r6
 8027724:	6031      	str	r1, [r6, #0]
 8027726:	2900      	cmp	r1, #0
 8027728:	d000      	beq.n	802772c <rshift+0x78>
 802772a:	3604      	adds	r6, #4
 802772c:	1ab1      	subs	r1, r6, r2
 802772e:	1089      	asrs	r1, r1, #2
 8027730:	6101      	str	r1, [r0, #16]
 8027732:	4296      	cmp	r6, r2
 8027734:	d101      	bne.n	802773a <rshift+0x86>
 8027736:	2300      	movs	r3, #0
 8027738:	6143      	str	r3, [r0, #20]
 802773a:	b005      	add	sp, #20
 802773c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802773e:	6837      	ldr	r7, [r6, #0]
 8027740:	9b03      	ldr	r3, [sp, #12]
 8027742:	409f      	lsls	r7, r3
 8027744:	430f      	orrs	r7, r1
 8027746:	4661      	mov	r1, ip
 8027748:	c180      	stmia	r1!, {r7}
 802774a:	468c      	mov	ip, r1
 802774c:	9b01      	ldr	r3, [sp, #4]
 802774e:	ce02      	ldmia	r6!, {r1}
 8027750:	40d9      	lsrs	r1, r3
 8027752:	e7db      	b.n	802770c <rshift+0x58>
 8027754:	c980      	ldmia	r1!, {r7}
 8027756:	c680      	stmia	r6!, {r7}
 8027758:	e7c3      	b.n	80276e2 <rshift+0x2e>

0802775a <__hexdig_fun>:
 802775a:	0002      	movs	r2, r0
 802775c:	3a30      	subs	r2, #48	@ 0x30
 802775e:	0003      	movs	r3, r0
 8027760:	2a09      	cmp	r2, #9
 8027762:	d802      	bhi.n	802776a <__hexdig_fun+0x10>
 8027764:	3b20      	subs	r3, #32
 8027766:	b2d8      	uxtb	r0, r3
 8027768:	4770      	bx	lr
 802776a:	0002      	movs	r2, r0
 802776c:	3a61      	subs	r2, #97	@ 0x61
 802776e:	2a05      	cmp	r2, #5
 8027770:	d801      	bhi.n	8027776 <__hexdig_fun+0x1c>
 8027772:	3b47      	subs	r3, #71	@ 0x47
 8027774:	e7f7      	b.n	8027766 <__hexdig_fun+0xc>
 8027776:	001a      	movs	r2, r3
 8027778:	3a41      	subs	r2, #65	@ 0x41
 802777a:	2000      	movs	r0, #0
 802777c:	2a05      	cmp	r2, #5
 802777e:	d8f3      	bhi.n	8027768 <__hexdig_fun+0xe>
 8027780:	3b27      	subs	r3, #39	@ 0x27
 8027782:	e7f0      	b.n	8027766 <__hexdig_fun+0xc>

08027784 <__gethex>:
 8027784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027786:	b089      	sub	sp, #36	@ 0x24
 8027788:	9307      	str	r3, [sp, #28]
 802778a:	680b      	ldr	r3, [r1, #0]
 802778c:	9201      	str	r2, [sp, #4]
 802778e:	9003      	str	r0, [sp, #12]
 8027790:	9106      	str	r1, [sp, #24]
 8027792:	1c9a      	adds	r2, r3, #2
 8027794:	0011      	movs	r1, r2
 8027796:	3201      	adds	r2, #1
 8027798:	1e50      	subs	r0, r2, #1
 802779a:	7800      	ldrb	r0, [r0, #0]
 802779c:	2830      	cmp	r0, #48	@ 0x30
 802779e:	d0f9      	beq.n	8027794 <__gethex+0x10>
 80277a0:	1acb      	subs	r3, r1, r3
 80277a2:	3b02      	subs	r3, #2
 80277a4:	9305      	str	r3, [sp, #20]
 80277a6:	9100      	str	r1, [sp, #0]
 80277a8:	f7ff ffd7 	bl	802775a <__hexdig_fun>
 80277ac:	2300      	movs	r3, #0
 80277ae:	001d      	movs	r5, r3
 80277b0:	9302      	str	r3, [sp, #8]
 80277b2:	4298      	cmp	r0, r3
 80277b4:	d11e      	bne.n	80277f4 <__gethex+0x70>
 80277b6:	2201      	movs	r2, #1
 80277b8:	49a6      	ldr	r1, [pc, #664]	@ (8027a54 <__gethex+0x2d0>)
 80277ba:	9800      	ldr	r0, [sp, #0]
 80277bc:	f7fe ffe4 	bl	8026788 <strncmp>
 80277c0:	0007      	movs	r7, r0
 80277c2:	42a8      	cmp	r0, r5
 80277c4:	d000      	beq.n	80277c8 <__gethex+0x44>
 80277c6:	e06a      	b.n	802789e <__gethex+0x11a>
 80277c8:	9b00      	ldr	r3, [sp, #0]
 80277ca:	7858      	ldrb	r0, [r3, #1]
 80277cc:	1c5c      	adds	r4, r3, #1
 80277ce:	f7ff ffc4 	bl	802775a <__hexdig_fun>
 80277d2:	2301      	movs	r3, #1
 80277d4:	9302      	str	r3, [sp, #8]
 80277d6:	42a8      	cmp	r0, r5
 80277d8:	d02f      	beq.n	802783a <__gethex+0xb6>
 80277da:	9400      	str	r4, [sp, #0]
 80277dc:	9b00      	ldr	r3, [sp, #0]
 80277de:	7818      	ldrb	r0, [r3, #0]
 80277e0:	2830      	cmp	r0, #48	@ 0x30
 80277e2:	d009      	beq.n	80277f8 <__gethex+0x74>
 80277e4:	f7ff ffb9 	bl	802775a <__hexdig_fun>
 80277e8:	4242      	negs	r2, r0
 80277ea:	4142      	adcs	r2, r0
 80277ec:	2301      	movs	r3, #1
 80277ee:	0025      	movs	r5, r4
 80277f0:	9202      	str	r2, [sp, #8]
 80277f2:	9305      	str	r3, [sp, #20]
 80277f4:	9c00      	ldr	r4, [sp, #0]
 80277f6:	e004      	b.n	8027802 <__gethex+0x7e>
 80277f8:	9b00      	ldr	r3, [sp, #0]
 80277fa:	3301      	adds	r3, #1
 80277fc:	9300      	str	r3, [sp, #0]
 80277fe:	e7ed      	b.n	80277dc <__gethex+0x58>
 8027800:	3401      	adds	r4, #1
 8027802:	7820      	ldrb	r0, [r4, #0]
 8027804:	f7ff ffa9 	bl	802775a <__hexdig_fun>
 8027808:	1e07      	subs	r7, r0, #0
 802780a:	d1f9      	bne.n	8027800 <__gethex+0x7c>
 802780c:	2201      	movs	r2, #1
 802780e:	0020      	movs	r0, r4
 8027810:	4990      	ldr	r1, [pc, #576]	@ (8027a54 <__gethex+0x2d0>)
 8027812:	f7fe ffb9 	bl	8026788 <strncmp>
 8027816:	2800      	cmp	r0, #0
 8027818:	d10d      	bne.n	8027836 <__gethex+0xb2>
 802781a:	2d00      	cmp	r5, #0
 802781c:	d106      	bne.n	802782c <__gethex+0xa8>
 802781e:	3401      	adds	r4, #1
 8027820:	0025      	movs	r5, r4
 8027822:	7820      	ldrb	r0, [r4, #0]
 8027824:	f7ff ff99 	bl	802775a <__hexdig_fun>
 8027828:	2800      	cmp	r0, #0
 802782a:	d102      	bne.n	8027832 <__gethex+0xae>
 802782c:	1b2d      	subs	r5, r5, r4
 802782e:	00af      	lsls	r7, r5, #2
 8027830:	e003      	b.n	802783a <__gethex+0xb6>
 8027832:	3401      	adds	r4, #1
 8027834:	e7f5      	b.n	8027822 <__gethex+0x9e>
 8027836:	2d00      	cmp	r5, #0
 8027838:	d1f8      	bne.n	802782c <__gethex+0xa8>
 802783a:	2220      	movs	r2, #32
 802783c:	7823      	ldrb	r3, [r4, #0]
 802783e:	0026      	movs	r6, r4
 8027840:	4393      	bics	r3, r2
 8027842:	2b50      	cmp	r3, #80	@ 0x50
 8027844:	d11d      	bne.n	8027882 <__gethex+0xfe>
 8027846:	7863      	ldrb	r3, [r4, #1]
 8027848:	2b2b      	cmp	r3, #43	@ 0x2b
 802784a:	d02d      	beq.n	80278a8 <__gethex+0x124>
 802784c:	2b2d      	cmp	r3, #45	@ 0x2d
 802784e:	d02f      	beq.n	80278b0 <__gethex+0x12c>
 8027850:	2300      	movs	r3, #0
 8027852:	1c66      	adds	r6, r4, #1
 8027854:	9304      	str	r3, [sp, #16]
 8027856:	7830      	ldrb	r0, [r6, #0]
 8027858:	f7ff ff7f 	bl	802775a <__hexdig_fun>
 802785c:	1e43      	subs	r3, r0, #1
 802785e:	b2db      	uxtb	r3, r3
 8027860:	0005      	movs	r5, r0
 8027862:	2b18      	cmp	r3, #24
 8027864:	d82a      	bhi.n	80278bc <__gethex+0x138>
 8027866:	7870      	ldrb	r0, [r6, #1]
 8027868:	f7ff ff77 	bl	802775a <__hexdig_fun>
 802786c:	1e43      	subs	r3, r0, #1
 802786e:	b2db      	uxtb	r3, r3
 8027870:	3601      	adds	r6, #1
 8027872:	3d10      	subs	r5, #16
 8027874:	2b18      	cmp	r3, #24
 8027876:	d91d      	bls.n	80278b4 <__gethex+0x130>
 8027878:	9b04      	ldr	r3, [sp, #16]
 802787a:	2b00      	cmp	r3, #0
 802787c:	d000      	beq.n	8027880 <__gethex+0xfc>
 802787e:	426d      	negs	r5, r5
 8027880:	197f      	adds	r7, r7, r5
 8027882:	9b06      	ldr	r3, [sp, #24]
 8027884:	601e      	str	r6, [r3, #0]
 8027886:	9b02      	ldr	r3, [sp, #8]
 8027888:	2b00      	cmp	r3, #0
 802788a:	d019      	beq.n	80278c0 <__gethex+0x13c>
 802788c:	9b05      	ldr	r3, [sp, #20]
 802788e:	2606      	movs	r6, #6
 8027890:	425a      	negs	r2, r3
 8027892:	4153      	adcs	r3, r2
 8027894:	425b      	negs	r3, r3
 8027896:	401e      	ands	r6, r3
 8027898:	0030      	movs	r0, r6
 802789a:	b009      	add	sp, #36	@ 0x24
 802789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802789e:	2301      	movs	r3, #1
 80278a0:	2700      	movs	r7, #0
 80278a2:	9c00      	ldr	r4, [sp, #0]
 80278a4:	9302      	str	r3, [sp, #8]
 80278a6:	e7c8      	b.n	802783a <__gethex+0xb6>
 80278a8:	2300      	movs	r3, #0
 80278aa:	9304      	str	r3, [sp, #16]
 80278ac:	1ca6      	adds	r6, r4, #2
 80278ae:	e7d2      	b.n	8027856 <__gethex+0xd2>
 80278b0:	2301      	movs	r3, #1
 80278b2:	e7fa      	b.n	80278aa <__gethex+0x126>
 80278b4:	230a      	movs	r3, #10
 80278b6:	435d      	muls	r5, r3
 80278b8:	182d      	adds	r5, r5, r0
 80278ba:	e7d4      	b.n	8027866 <__gethex+0xe2>
 80278bc:	0026      	movs	r6, r4
 80278be:	e7e0      	b.n	8027882 <__gethex+0xfe>
 80278c0:	9b00      	ldr	r3, [sp, #0]
 80278c2:	9902      	ldr	r1, [sp, #8]
 80278c4:	1ae3      	subs	r3, r4, r3
 80278c6:	3b01      	subs	r3, #1
 80278c8:	2b07      	cmp	r3, #7
 80278ca:	dc0a      	bgt.n	80278e2 <__gethex+0x15e>
 80278cc:	9803      	ldr	r0, [sp, #12]
 80278ce:	f000 fb19 	bl	8027f04 <_Balloc>
 80278d2:	1e05      	subs	r5, r0, #0
 80278d4:	d108      	bne.n	80278e8 <__gethex+0x164>
 80278d6:	002a      	movs	r2, r5
 80278d8:	21e4      	movs	r1, #228	@ 0xe4
 80278da:	4b5f      	ldr	r3, [pc, #380]	@ (8027a58 <__gethex+0x2d4>)
 80278dc:	485f      	ldr	r0, [pc, #380]	@ (8027a5c <__gethex+0x2d8>)
 80278de:	f001 fbe9 	bl	80290b4 <__assert_func>
 80278e2:	3101      	adds	r1, #1
 80278e4:	105b      	asrs	r3, r3, #1
 80278e6:	e7ef      	b.n	80278c8 <__gethex+0x144>
 80278e8:	0003      	movs	r3, r0
 80278ea:	3314      	adds	r3, #20
 80278ec:	9302      	str	r3, [sp, #8]
 80278ee:	9305      	str	r3, [sp, #20]
 80278f0:	2300      	movs	r3, #0
 80278f2:	001e      	movs	r6, r3
 80278f4:	9304      	str	r3, [sp, #16]
 80278f6:	9b00      	ldr	r3, [sp, #0]
 80278f8:	42a3      	cmp	r3, r4
 80278fa:	d338      	bcc.n	802796e <__gethex+0x1ea>
 80278fc:	9c05      	ldr	r4, [sp, #20]
 80278fe:	9b02      	ldr	r3, [sp, #8]
 8027900:	c440      	stmia	r4!, {r6}
 8027902:	1ae4      	subs	r4, r4, r3
 8027904:	10a4      	asrs	r4, r4, #2
 8027906:	0030      	movs	r0, r6
 8027908:	612c      	str	r4, [r5, #16]
 802790a:	f000 fbf3 	bl	80280f4 <__hi0bits>
 802790e:	9b01      	ldr	r3, [sp, #4]
 8027910:	0164      	lsls	r4, r4, #5
 8027912:	681b      	ldr	r3, [r3, #0]
 8027914:	1a26      	subs	r6, r4, r0
 8027916:	9300      	str	r3, [sp, #0]
 8027918:	429e      	cmp	r6, r3
 802791a:	dd52      	ble.n	80279c2 <__gethex+0x23e>
 802791c:	1af6      	subs	r6, r6, r3
 802791e:	0031      	movs	r1, r6
 8027920:	0028      	movs	r0, r5
 8027922:	f000 ff8e 	bl	8028842 <__any_on>
 8027926:	1e04      	subs	r4, r0, #0
 8027928:	d00f      	beq.n	802794a <__gethex+0x1c6>
 802792a:	2401      	movs	r4, #1
 802792c:	211f      	movs	r1, #31
 802792e:	0020      	movs	r0, r4
 8027930:	1e73      	subs	r3, r6, #1
 8027932:	4019      	ands	r1, r3
 8027934:	4088      	lsls	r0, r1
 8027936:	0001      	movs	r1, r0
 8027938:	115a      	asrs	r2, r3, #5
 802793a:	9802      	ldr	r0, [sp, #8]
 802793c:	0092      	lsls	r2, r2, #2
 802793e:	5812      	ldr	r2, [r2, r0]
 8027940:	420a      	tst	r2, r1
 8027942:	d002      	beq.n	802794a <__gethex+0x1c6>
 8027944:	42a3      	cmp	r3, r4
 8027946:	dc34      	bgt.n	80279b2 <__gethex+0x22e>
 8027948:	2402      	movs	r4, #2
 802794a:	0031      	movs	r1, r6
 802794c:	0028      	movs	r0, r5
 802794e:	f7ff feb1 	bl	80276b4 <rshift>
 8027952:	19bf      	adds	r7, r7, r6
 8027954:	9b01      	ldr	r3, [sp, #4]
 8027956:	689b      	ldr	r3, [r3, #8]
 8027958:	42bb      	cmp	r3, r7
 802795a:	da42      	bge.n	80279e2 <__gethex+0x25e>
 802795c:	0029      	movs	r1, r5
 802795e:	9803      	ldr	r0, [sp, #12]
 8027960:	f000 fb14 	bl	8027f8c <_Bfree>
 8027964:	2300      	movs	r3, #0
 8027966:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027968:	26a3      	movs	r6, #163	@ 0xa3
 802796a:	6013      	str	r3, [r2, #0]
 802796c:	e794      	b.n	8027898 <__gethex+0x114>
 802796e:	3c01      	subs	r4, #1
 8027970:	7823      	ldrb	r3, [r4, #0]
 8027972:	2b2e      	cmp	r3, #46	@ 0x2e
 8027974:	d012      	beq.n	802799c <__gethex+0x218>
 8027976:	9b04      	ldr	r3, [sp, #16]
 8027978:	2b20      	cmp	r3, #32
 802797a:	d104      	bne.n	8027986 <__gethex+0x202>
 802797c:	9b05      	ldr	r3, [sp, #20]
 802797e:	c340      	stmia	r3!, {r6}
 8027980:	2600      	movs	r6, #0
 8027982:	9305      	str	r3, [sp, #20]
 8027984:	9604      	str	r6, [sp, #16]
 8027986:	7820      	ldrb	r0, [r4, #0]
 8027988:	f7ff fee7 	bl	802775a <__hexdig_fun>
 802798c:	230f      	movs	r3, #15
 802798e:	4018      	ands	r0, r3
 8027990:	9b04      	ldr	r3, [sp, #16]
 8027992:	4098      	lsls	r0, r3
 8027994:	3304      	adds	r3, #4
 8027996:	4306      	orrs	r6, r0
 8027998:	9304      	str	r3, [sp, #16]
 802799a:	e7ac      	b.n	80278f6 <__gethex+0x172>
 802799c:	9b00      	ldr	r3, [sp, #0]
 802799e:	42a3      	cmp	r3, r4
 80279a0:	d8e9      	bhi.n	8027976 <__gethex+0x1f2>
 80279a2:	2201      	movs	r2, #1
 80279a4:	0020      	movs	r0, r4
 80279a6:	492b      	ldr	r1, [pc, #172]	@ (8027a54 <__gethex+0x2d0>)
 80279a8:	f7fe feee 	bl	8026788 <strncmp>
 80279ac:	2800      	cmp	r0, #0
 80279ae:	d1e2      	bne.n	8027976 <__gethex+0x1f2>
 80279b0:	e7a1      	b.n	80278f6 <__gethex+0x172>
 80279b2:	0028      	movs	r0, r5
 80279b4:	1eb1      	subs	r1, r6, #2
 80279b6:	f000 ff44 	bl	8028842 <__any_on>
 80279ba:	2800      	cmp	r0, #0
 80279bc:	d0c4      	beq.n	8027948 <__gethex+0x1c4>
 80279be:	2403      	movs	r4, #3
 80279c0:	e7c3      	b.n	802794a <__gethex+0x1c6>
 80279c2:	9b00      	ldr	r3, [sp, #0]
 80279c4:	2400      	movs	r4, #0
 80279c6:	429e      	cmp	r6, r3
 80279c8:	dac4      	bge.n	8027954 <__gethex+0x1d0>
 80279ca:	1b9e      	subs	r6, r3, r6
 80279cc:	0029      	movs	r1, r5
 80279ce:	0032      	movs	r2, r6
 80279d0:	9803      	ldr	r0, [sp, #12]
 80279d2:	f000 fcfd 	bl	80283d0 <__lshift>
 80279d6:	0003      	movs	r3, r0
 80279d8:	3314      	adds	r3, #20
 80279da:	0005      	movs	r5, r0
 80279dc:	1bbf      	subs	r7, r7, r6
 80279de:	9302      	str	r3, [sp, #8]
 80279e0:	e7b8      	b.n	8027954 <__gethex+0x1d0>
 80279e2:	9b01      	ldr	r3, [sp, #4]
 80279e4:	685e      	ldr	r6, [r3, #4]
 80279e6:	42be      	cmp	r6, r7
 80279e8:	dd6f      	ble.n	8027aca <__gethex+0x346>
 80279ea:	9b00      	ldr	r3, [sp, #0]
 80279ec:	1bf6      	subs	r6, r6, r7
 80279ee:	42b3      	cmp	r3, r6
 80279f0:	dc36      	bgt.n	8027a60 <__gethex+0x2dc>
 80279f2:	9b01      	ldr	r3, [sp, #4]
 80279f4:	68db      	ldr	r3, [r3, #12]
 80279f6:	2b02      	cmp	r3, #2
 80279f8:	d024      	beq.n	8027a44 <__gethex+0x2c0>
 80279fa:	2b03      	cmp	r3, #3
 80279fc:	d026      	beq.n	8027a4c <__gethex+0x2c8>
 80279fe:	2b01      	cmp	r3, #1
 8027a00:	d117      	bne.n	8027a32 <__gethex+0x2ae>
 8027a02:	9b00      	ldr	r3, [sp, #0]
 8027a04:	42b3      	cmp	r3, r6
 8027a06:	d114      	bne.n	8027a32 <__gethex+0x2ae>
 8027a08:	2b01      	cmp	r3, #1
 8027a0a:	d10b      	bne.n	8027a24 <__gethex+0x2a0>
 8027a0c:	9b01      	ldr	r3, [sp, #4]
 8027a0e:	9a07      	ldr	r2, [sp, #28]
 8027a10:	685b      	ldr	r3, [r3, #4]
 8027a12:	2662      	movs	r6, #98	@ 0x62
 8027a14:	6013      	str	r3, [r2, #0]
 8027a16:	2301      	movs	r3, #1
 8027a18:	9a02      	ldr	r2, [sp, #8]
 8027a1a:	612b      	str	r3, [r5, #16]
 8027a1c:	6013      	str	r3, [r2, #0]
 8027a1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027a20:	601d      	str	r5, [r3, #0]
 8027a22:	e739      	b.n	8027898 <__gethex+0x114>
 8027a24:	9900      	ldr	r1, [sp, #0]
 8027a26:	0028      	movs	r0, r5
 8027a28:	3901      	subs	r1, #1
 8027a2a:	f000 ff0a 	bl	8028842 <__any_on>
 8027a2e:	2800      	cmp	r0, #0
 8027a30:	d1ec      	bne.n	8027a0c <__gethex+0x288>
 8027a32:	0029      	movs	r1, r5
 8027a34:	9803      	ldr	r0, [sp, #12]
 8027a36:	f000 faa9 	bl	8027f8c <_Bfree>
 8027a3a:	2300      	movs	r3, #0
 8027a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027a3e:	2650      	movs	r6, #80	@ 0x50
 8027a40:	6013      	str	r3, [r2, #0]
 8027a42:	e729      	b.n	8027898 <__gethex+0x114>
 8027a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a46:	2b00      	cmp	r3, #0
 8027a48:	d1f3      	bne.n	8027a32 <__gethex+0x2ae>
 8027a4a:	e7df      	b.n	8027a0c <__gethex+0x288>
 8027a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a4e:	2b00      	cmp	r3, #0
 8027a50:	d1dc      	bne.n	8027a0c <__gethex+0x288>
 8027a52:	e7ee      	b.n	8027a32 <__gethex+0x2ae>
 8027a54:	0802edb0 	.word	0x0802edb0
 8027a58:	0802ee6a 	.word	0x0802ee6a
 8027a5c:	0802ee7b 	.word	0x0802ee7b
 8027a60:	1e77      	subs	r7, r6, #1
 8027a62:	2c00      	cmp	r4, #0
 8027a64:	d12f      	bne.n	8027ac6 <__gethex+0x342>
 8027a66:	2f00      	cmp	r7, #0
 8027a68:	d004      	beq.n	8027a74 <__gethex+0x2f0>
 8027a6a:	0039      	movs	r1, r7
 8027a6c:	0028      	movs	r0, r5
 8027a6e:	f000 fee8 	bl	8028842 <__any_on>
 8027a72:	0004      	movs	r4, r0
 8027a74:	231f      	movs	r3, #31
 8027a76:	117a      	asrs	r2, r7, #5
 8027a78:	401f      	ands	r7, r3
 8027a7a:	3b1e      	subs	r3, #30
 8027a7c:	40bb      	lsls	r3, r7
 8027a7e:	9902      	ldr	r1, [sp, #8]
 8027a80:	0092      	lsls	r2, r2, #2
 8027a82:	5852      	ldr	r2, [r2, r1]
 8027a84:	421a      	tst	r2, r3
 8027a86:	d001      	beq.n	8027a8c <__gethex+0x308>
 8027a88:	2302      	movs	r3, #2
 8027a8a:	431c      	orrs	r4, r3
 8027a8c:	9b00      	ldr	r3, [sp, #0]
 8027a8e:	0031      	movs	r1, r6
 8027a90:	1b9b      	subs	r3, r3, r6
 8027a92:	2602      	movs	r6, #2
 8027a94:	0028      	movs	r0, r5
 8027a96:	9300      	str	r3, [sp, #0]
 8027a98:	f7ff fe0c 	bl	80276b4 <rshift>
 8027a9c:	9b01      	ldr	r3, [sp, #4]
 8027a9e:	685f      	ldr	r7, [r3, #4]
 8027aa0:	2c00      	cmp	r4, #0
 8027aa2:	d03f      	beq.n	8027b24 <__gethex+0x3a0>
 8027aa4:	9b01      	ldr	r3, [sp, #4]
 8027aa6:	68db      	ldr	r3, [r3, #12]
 8027aa8:	2b02      	cmp	r3, #2
 8027aaa:	d010      	beq.n	8027ace <__gethex+0x34a>
 8027aac:	2b03      	cmp	r3, #3
 8027aae:	d012      	beq.n	8027ad6 <__gethex+0x352>
 8027ab0:	2b01      	cmp	r3, #1
 8027ab2:	d106      	bne.n	8027ac2 <__gethex+0x33e>
 8027ab4:	07a2      	lsls	r2, r4, #30
 8027ab6:	d504      	bpl.n	8027ac2 <__gethex+0x33e>
 8027ab8:	9a02      	ldr	r2, [sp, #8]
 8027aba:	6812      	ldr	r2, [r2, #0]
 8027abc:	4314      	orrs	r4, r2
 8027abe:	421c      	tst	r4, r3
 8027ac0:	d10c      	bne.n	8027adc <__gethex+0x358>
 8027ac2:	2310      	movs	r3, #16
 8027ac4:	e02d      	b.n	8027b22 <__gethex+0x39e>
 8027ac6:	2401      	movs	r4, #1
 8027ac8:	e7d4      	b.n	8027a74 <__gethex+0x2f0>
 8027aca:	2601      	movs	r6, #1
 8027acc:	e7e8      	b.n	8027aa0 <__gethex+0x31c>
 8027ace:	2301      	movs	r3, #1
 8027ad0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027ad2:	1a9b      	subs	r3, r3, r2
 8027ad4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027ad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027ad8:	2b00      	cmp	r3, #0
 8027ada:	d0f2      	beq.n	8027ac2 <__gethex+0x33e>
 8027adc:	692b      	ldr	r3, [r5, #16]
 8027ade:	2000      	movs	r0, #0
 8027ae0:	9302      	str	r3, [sp, #8]
 8027ae2:	009b      	lsls	r3, r3, #2
 8027ae4:	9304      	str	r3, [sp, #16]
 8027ae6:	002b      	movs	r3, r5
 8027ae8:	9a04      	ldr	r2, [sp, #16]
 8027aea:	3314      	adds	r3, #20
 8027aec:	1899      	adds	r1, r3, r2
 8027aee:	681a      	ldr	r2, [r3, #0]
 8027af0:	1c54      	adds	r4, r2, #1
 8027af2:	d01c      	beq.n	8027b2e <__gethex+0x3aa>
 8027af4:	3201      	adds	r2, #1
 8027af6:	601a      	str	r2, [r3, #0]
 8027af8:	002b      	movs	r3, r5
 8027afa:	3314      	adds	r3, #20
 8027afc:	2e02      	cmp	r6, #2
 8027afe:	d13f      	bne.n	8027b80 <__gethex+0x3fc>
 8027b00:	9a01      	ldr	r2, [sp, #4]
 8027b02:	9900      	ldr	r1, [sp, #0]
 8027b04:	6812      	ldr	r2, [r2, #0]
 8027b06:	3a01      	subs	r2, #1
 8027b08:	428a      	cmp	r2, r1
 8027b0a:	d109      	bne.n	8027b20 <__gethex+0x39c>
 8027b0c:	000a      	movs	r2, r1
 8027b0e:	201f      	movs	r0, #31
 8027b10:	4010      	ands	r0, r2
 8027b12:	2201      	movs	r2, #1
 8027b14:	4082      	lsls	r2, r0
 8027b16:	1149      	asrs	r1, r1, #5
 8027b18:	0089      	lsls	r1, r1, #2
 8027b1a:	58cb      	ldr	r3, [r1, r3]
 8027b1c:	4213      	tst	r3, r2
 8027b1e:	d13d      	bne.n	8027b9c <__gethex+0x418>
 8027b20:	2320      	movs	r3, #32
 8027b22:	431e      	orrs	r6, r3
 8027b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027b26:	601d      	str	r5, [r3, #0]
 8027b28:	9b07      	ldr	r3, [sp, #28]
 8027b2a:	601f      	str	r7, [r3, #0]
 8027b2c:	e6b4      	b.n	8027898 <__gethex+0x114>
 8027b2e:	c301      	stmia	r3!, {r0}
 8027b30:	4299      	cmp	r1, r3
 8027b32:	d8dc      	bhi.n	8027aee <__gethex+0x36a>
 8027b34:	68ab      	ldr	r3, [r5, #8]
 8027b36:	9a02      	ldr	r2, [sp, #8]
 8027b38:	429a      	cmp	r2, r3
 8027b3a:	db18      	blt.n	8027b6e <__gethex+0x3ea>
 8027b3c:	6869      	ldr	r1, [r5, #4]
 8027b3e:	9803      	ldr	r0, [sp, #12]
 8027b40:	3101      	adds	r1, #1
 8027b42:	f000 f9df 	bl	8027f04 <_Balloc>
 8027b46:	1e04      	subs	r4, r0, #0
 8027b48:	d104      	bne.n	8027b54 <__gethex+0x3d0>
 8027b4a:	0022      	movs	r2, r4
 8027b4c:	2184      	movs	r1, #132	@ 0x84
 8027b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8027bc4 <__gethex+0x440>)
 8027b50:	481d      	ldr	r0, [pc, #116]	@ (8027bc8 <__gethex+0x444>)
 8027b52:	e6c4      	b.n	80278de <__gethex+0x15a>
 8027b54:	0029      	movs	r1, r5
 8027b56:	692a      	ldr	r2, [r5, #16]
 8027b58:	310c      	adds	r1, #12
 8027b5a:	3202      	adds	r2, #2
 8027b5c:	0092      	lsls	r2, r2, #2
 8027b5e:	300c      	adds	r0, #12
 8027b60:	f7fe fed8 	bl	8026914 <memcpy>
 8027b64:	0029      	movs	r1, r5
 8027b66:	9803      	ldr	r0, [sp, #12]
 8027b68:	f000 fa10 	bl	8027f8c <_Bfree>
 8027b6c:	0025      	movs	r5, r4
 8027b6e:	692b      	ldr	r3, [r5, #16]
 8027b70:	1c5a      	adds	r2, r3, #1
 8027b72:	612a      	str	r2, [r5, #16]
 8027b74:	2201      	movs	r2, #1
 8027b76:	3304      	adds	r3, #4
 8027b78:	009b      	lsls	r3, r3, #2
 8027b7a:	18eb      	adds	r3, r5, r3
 8027b7c:	605a      	str	r2, [r3, #4]
 8027b7e:	e7bb      	b.n	8027af8 <__gethex+0x374>
 8027b80:	692a      	ldr	r2, [r5, #16]
 8027b82:	9902      	ldr	r1, [sp, #8]
 8027b84:	428a      	cmp	r2, r1
 8027b86:	dd0b      	ble.n	8027ba0 <__gethex+0x41c>
 8027b88:	2101      	movs	r1, #1
 8027b8a:	0028      	movs	r0, r5
 8027b8c:	f7ff fd92 	bl	80276b4 <rshift>
 8027b90:	9b01      	ldr	r3, [sp, #4]
 8027b92:	3701      	adds	r7, #1
 8027b94:	689b      	ldr	r3, [r3, #8]
 8027b96:	42bb      	cmp	r3, r7
 8027b98:	da00      	bge.n	8027b9c <__gethex+0x418>
 8027b9a:	e6df      	b.n	802795c <__gethex+0x1d8>
 8027b9c:	2601      	movs	r6, #1
 8027b9e:	e7bf      	b.n	8027b20 <__gethex+0x39c>
 8027ba0:	221f      	movs	r2, #31
 8027ba2:	9c00      	ldr	r4, [sp, #0]
 8027ba4:	9900      	ldr	r1, [sp, #0]
 8027ba6:	4014      	ands	r4, r2
 8027ba8:	4211      	tst	r1, r2
 8027baa:	d0f7      	beq.n	8027b9c <__gethex+0x418>
 8027bac:	9a04      	ldr	r2, [sp, #16]
 8027bae:	189b      	adds	r3, r3, r2
 8027bb0:	3b04      	subs	r3, #4
 8027bb2:	6818      	ldr	r0, [r3, #0]
 8027bb4:	f000 fa9e 	bl	80280f4 <__hi0bits>
 8027bb8:	2320      	movs	r3, #32
 8027bba:	1b1b      	subs	r3, r3, r4
 8027bbc:	4298      	cmp	r0, r3
 8027bbe:	dbe3      	blt.n	8027b88 <__gethex+0x404>
 8027bc0:	e7ec      	b.n	8027b9c <__gethex+0x418>
 8027bc2:	46c0      	nop			@ (mov r8, r8)
 8027bc4:	0802ee6a 	.word	0x0802ee6a
 8027bc8:	0802ee7b 	.word	0x0802ee7b

08027bcc <L_shift>:
 8027bcc:	2308      	movs	r3, #8
 8027bce:	b570      	push	{r4, r5, r6, lr}
 8027bd0:	2520      	movs	r5, #32
 8027bd2:	1a9a      	subs	r2, r3, r2
 8027bd4:	0092      	lsls	r2, r2, #2
 8027bd6:	1aad      	subs	r5, r5, r2
 8027bd8:	6843      	ldr	r3, [r0, #4]
 8027bda:	6804      	ldr	r4, [r0, #0]
 8027bdc:	001e      	movs	r6, r3
 8027bde:	40ae      	lsls	r6, r5
 8027be0:	40d3      	lsrs	r3, r2
 8027be2:	4334      	orrs	r4, r6
 8027be4:	6004      	str	r4, [r0, #0]
 8027be6:	6043      	str	r3, [r0, #4]
 8027be8:	3004      	adds	r0, #4
 8027bea:	4288      	cmp	r0, r1
 8027bec:	d3f4      	bcc.n	8027bd8 <L_shift+0xc>
 8027bee:	bd70      	pop	{r4, r5, r6, pc}

08027bf0 <__match>:
 8027bf0:	b530      	push	{r4, r5, lr}
 8027bf2:	6803      	ldr	r3, [r0, #0]
 8027bf4:	780c      	ldrb	r4, [r1, #0]
 8027bf6:	3301      	adds	r3, #1
 8027bf8:	2c00      	cmp	r4, #0
 8027bfa:	d102      	bne.n	8027c02 <__match+0x12>
 8027bfc:	6003      	str	r3, [r0, #0]
 8027bfe:	2001      	movs	r0, #1
 8027c00:	bd30      	pop	{r4, r5, pc}
 8027c02:	781a      	ldrb	r2, [r3, #0]
 8027c04:	0015      	movs	r5, r2
 8027c06:	3d41      	subs	r5, #65	@ 0x41
 8027c08:	2d19      	cmp	r5, #25
 8027c0a:	d800      	bhi.n	8027c0e <__match+0x1e>
 8027c0c:	3220      	adds	r2, #32
 8027c0e:	3101      	adds	r1, #1
 8027c10:	42a2      	cmp	r2, r4
 8027c12:	d0ef      	beq.n	8027bf4 <__match+0x4>
 8027c14:	2000      	movs	r0, #0
 8027c16:	e7f3      	b.n	8027c00 <__match+0x10>

08027c18 <__hexnan>:
 8027c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c1a:	680b      	ldr	r3, [r1, #0]
 8027c1c:	b08b      	sub	sp, #44	@ 0x2c
 8027c1e:	9201      	str	r2, [sp, #4]
 8027c20:	9901      	ldr	r1, [sp, #4]
 8027c22:	115a      	asrs	r2, r3, #5
 8027c24:	0092      	lsls	r2, r2, #2
 8027c26:	188a      	adds	r2, r1, r2
 8027c28:	9202      	str	r2, [sp, #8]
 8027c2a:	0019      	movs	r1, r3
 8027c2c:	221f      	movs	r2, #31
 8027c2e:	4011      	ands	r1, r2
 8027c30:	9008      	str	r0, [sp, #32]
 8027c32:	9106      	str	r1, [sp, #24]
 8027c34:	4213      	tst	r3, r2
 8027c36:	d002      	beq.n	8027c3e <__hexnan+0x26>
 8027c38:	9b02      	ldr	r3, [sp, #8]
 8027c3a:	3304      	adds	r3, #4
 8027c3c:	9302      	str	r3, [sp, #8]
 8027c3e:	9b02      	ldr	r3, [sp, #8]
 8027c40:	2500      	movs	r5, #0
 8027c42:	1f1f      	subs	r7, r3, #4
 8027c44:	003e      	movs	r6, r7
 8027c46:	003c      	movs	r4, r7
 8027c48:	9b08      	ldr	r3, [sp, #32]
 8027c4a:	603d      	str	r5, [r7, #0]
 8027c4c:	681b      	ldr	r3, [r3, #0]
 8027c4e:	9507      	str	r5, [sp, #28]
 8027c50:	9305      	str	r3, [sp, #20]
 8027c52:	9503      	str	r5, [sp, #12]
 8027c54:	9b05      	ldr	r3, [sp, #20]
 8027c56:	3301      	adds	r3, #1
 8027c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c5a:	9b05      	ldr	r3, [sp, #20]
 8027c5c:	785b      	ldrb	r3, [r3, #1]
 8027c5e:	9304      	str	r3, [sp, #16]
 8027c60:	2b00      	cmp	r3, #0
 8027c62:	d028      	beq.n	8027cb6 <__hexnan+0x9e>
 8027c64:	9804      	ldr	r0, [sp, #16]
 8027c66:	f7ff fd78 	bl	802775a <__hexdig_fun>
 8027c6a:	2800      	cmp	r0, #0
 8027c6c:	d155      	bne.n	8027d1a <__hexnan+0x102>
 8027c6e:	9b04      	ldr	r3, [sp, #16]
 8027c70:	2b20      	cmp	r3, #32
 8027c72:	d819      	bhi.n	8027ca8 <__hexnan+0x90>
 8027c74:	9b03      	ldr	r3, [sp, #12]
 8027c76:	9a07      	ldr	r2, [sp, #28]
 8027c78:	4293      	cmp	r3, r2
 8027c7a:	dd12      	ble.n	8027ca2 <__hexnan+0x8a>
 8027c7c:	42b4      	cmp	r4, r6
 8027c7e:	d206      	bcs.n	8027c8e <__hexnan+0x76>
 8027c80:	2d07      	cmp	r5, #7
 8027c82:	dc04      	bgt.n	8027c8e <__hexnan+0x76>
 8027c84:	002a      	movs	r2, r5
 8027c86:	0031      	movs	r1, r6
 8027c88:	0020      	movs	r0, r4
 8027c8a:	f7ff ff9f 	bl	8027bcc <L_shift>
 8027c8e:	9b01      	ldr	r3, [sp, #4]
 8027c90:	2508      	movs	r5, #8
 8027c92:	429c      	cmp	r4, r3
 8027c94:	d905      	bls.n	8027ca2 <__hexnan+0x8a>
 8027c96:	1f26      	subs	r6, r4, #4
 8027c98:	2500      	movs	r5, #0
 8027c9a:	0034      	movs	r4, r6
 8027c9c:	9b03      	ldr	r3, [sp, #12]
 8027c9e:	6035      	str	r5, [r6, #0]
 8027ca0:	9307      	str	r3, [sp, #28]
 8027ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ca4:	9305      	str	r3, [sp, #20]
 8027ca6:	e7d5      	b.n	8027c54 <__hexnan+0x3c>
 8027ca8:	9b04      	ldr	r3, [sp, #16]
 8027caa:	2b29      	cmp	r3, #41	@ 0x29
 8027cac:	d15a      	bne.n	8027d64 <__hexnan+0x14c>
 8027cae:	9b05      	ldr	r3, [sp, #20]
 8027cb0:	9a08      	ldr	r2, [sp, #32]
 8027cb2:	3302      	adds	r3, #2
 8027cb4:	6013      	str	r3, [r2, #0]
 8027cb6:	9b03      	ldr	r3, [sp, #12]
 8027cb8:	2b00      	cmp	r3, #0
 8027cba:	d053      	beq.n	8027d64 <__hexnan+0x14c>
 8027cbc:	42b4      	cmp	r4, r6
 8027cbe:	d206      	bcs.n	8027cce <__hexnan+0xb6>
 8027cc0:	2d07      	cmp	r5, #7
 8027cc2:	dc04      	bgt.n	8027cce <__hexnan+0xb6>
 8027cc4:	002a      	movs	r2, r5
 8027cc6:	0031      	movs	r1, r6
 8027cc8:	0020      	movs	r0, r4
 8027cca:	f7ff ff7f 	bl	8027bcc <L_shift>
 8027cce:	9b01      	ldr	r3, [sp, #4]
 8027cd0:	429c      	cmp	r4, r3
 8027cd2:	d936      	bls.n	8027d42 <__hexnan+0x12a>
 8027cd4:	001a      	movs	r2, r3
 8027cd6:	0023      	movs	r3, r4
 8027cd8:	cb02      	ldmia	r3!, {r1}
 8027cda:	c202      	stmia	r2!, {r1}
 8027cdc:	429f      	cmp	r7, r3
 8027cde:	d2fb      	bcs.n	8027cd8 <__hexnan+0xc0>
 8027ce0:	9b02      	ldr	r3, [sp, #8]
 8027ce2:	1c62      	adds	r2, r4, #1
 8027ce4:	1ed9      	subs	r1, r3, #3
 8027ce6:	2304      	movs	r3, #4
 8027ce8:	4291      	cmp	r1, r2
 8027cea:	d305      	bcc.n	8027cf8 <__hexnan+0xe0>
 8027cec:	9b02      	ldr	r3, [sp, #8]
 8027cee:	3b04      	subs	r3, #4
 8027cf0:	1b1b      	subs	r3, r3, r4
 8027cf2:	089b      	lsrs	r3, r3, #2
 8027cf4:	3301      	adds	r3, #1
 8027cf6:	009b      	lsls	r3, r3, #2
 8027cf8:	9a01      	ldr	r2, [sp, #4]
 8027cfa:	18d3      	adds	r3, r2, r3
 8027cfc:	2200      	movs	r2, #0
 8027cfe:	c304      	stmia	r3!, {r2}
 8027d00:	429f      	cmp	r7, r3
 8027d02:	d2fc      	bcs.n	8027cfe <__hexnan+0xe6>
 8027d04:	683b      	ldr	r3, [r7, #0]
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	d104      	bne.n	8027d14 <__hexnan+0xfc>
 8027d0a:	9b01      	ldr	r3, [sp, #4]
 8027d0c:	429f      	cmp	r7, r3
 8027d0e:	d127      	bne.n	8027d60 <__hexnan+0x148>
 8027d10:	2301      	movs	r3, #1
 8027d12:	603b      	str	r3, [r7, #0]
 8027d14:	2005      	movs	r0, #5
 8027d16:	b00b      	add	sp, #44	@ 0x2c
 8027d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027d1a:	9b03      	ldr	r3, [sp, #12]
 8027d1c:	3501      	adds	r5, #1
 8027d1e:	3301      	adds	r3, #1
 8027d20:	9303      	str	r3, [sp, #12]
 8027d22:	2d08      	cmp	r5, #8
 8027d24:	dd06      	ble.n	8027d34 <__hexnan+0x11c>
 8027d26:	9b01      	ldr	r3, [sp, #4]
 8027d28:	429c      	cmp	r4, r3
 8027d2a:	d9ba      	bls.n	8027ca2 <__hexnan+0x8a>
 8027d2c:	2300      	movs	r3, #0
 8027d2e:	2501      	movs	r5, #1
 8027d30:	3c04      	subs	r4, #4
 8027d32:	6023      	str	r3, [r4, #0]
 8027d34:	220f      	movs	r2, #15
 8027d36:	6823      	ldr	r3, [r4, #0]
 8027d38:	4010      	ands	r0, r2
 8027d3a:	011b      	lsls	r3, r3, #4
 8027d3c:	4303      	orrs	r3, r0
 8027d3e:	6023      	str	r3, [r4, #0]
 8027d40:	e7af      	b.n	8027ca2 <__hexnan+0x8a>
 8027d42:	9b06      	ldr	r3, [sp, #24]
 8027d44:	2b00      	cmp	r3, #0
 8027d46:	d0dd      	beq.n	8027d04 <__hexnan+0xec>
 8027d48:	2320      	movs	r3, #32
 8027d4a:	9a06      	ldr	r2, [sp, #24]
 8027d4c:	9902      	ldr	r1, [sp, #8]
 8027d4e:	1a9b      	subs	r3, r3, r2
 8027d50:	2201      	movs	r2, #1
 8027d52:	4252      	negs	r2, r2
 8027d54:	40da      	lsrs	r2, r3
 8027d56:	3904      	subs	r1, #4
 8027d58:	680b      	ldr	r3, [r1, #0]
 8027d5a:	4013      	ands	r3, r2
 8027d5c:	600b      	str	r3, [r1, #0]
 8027d5e:	e7d1      	b.n	8027d04 <__hexnan+0xec>
 8027d60:	3f04      	subs	r7, #4
 8027d62:	e7cf      	b.n	8027d04 <__hexnan+0xec>
 8027d64:	2004      	movs	r0, #4
 8027d66:	e7d6      	b.n	8027d16 <__hexnan+0xfe>

08027d68 <malloc>:
 8027d68:	b510      	push	{r4, lr}
 8027d6a:	4b03      	ldr	r3, [pc, #12]	@ (8027d78 <malloc+0x10>)
 8027d6c:	0001      	movs	r1, r0
 8027d6e:	6818      	ldr	r0, [r3, #0]
 8027d70:	f000 f826 	bl	8027dc0 <_malloc_r>
 8027d74:	bd10      	pop	{r4, pc}
 8027d76:	46c0      	nop			@ (mov r8, r8)
 8027d78:	200003ec 	.word	0x200003ec

08027d7c <sbrk_aligned>:
 8027d7c:	b570      	push	{r4, r5, r6, lr}
 8027d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8027dbc <sbrk_aligned+0x40>)
 8027d80:	000d      	movs	r5, r1
 8027d82:	6831      	ldr	r1, [r6, #0]
 8027d84:	0004      	movs	r4, r0
 8027d86:	2900      	cmp	r1, #0
 8027d88:	d102      	bne.n	8027d90 <sbrk_aligned+0x14>
 8027d8a:	f001 f981 	bl	8029090 <_sbrk_r>
 8027d8e:	6030      	str	r0, [r6, #0]
 8027d90:	0029      	movs	r1, r5
 8027d92:	0020      	movs	r0, r4
 8027d94:	f001 f97c 	bl	8029090 <_sbrk_r>
 8027d98:	1c43      	adds	r3, r0, #1
 8027d9a:	d103      	bne.n	8027da4 <sbrk_aligned+0x28>
 8027d9c:	2501      	movs	r5, #1
 8027d9e:	426d      	negs	r5, r5
 8027da0:	0028      	movs	r0, r5
 8027da2:	bd70      	pop	{r4, r5, r6, pc}
 8027da4:	2303      	movs	r3, #3
 8027da6:	1cc5      	adds	r5, r0, #3
 8027da8:	439d      	bics	r5, r3
 8027daa:	42a8      	cmp	r0, r5
 8027dac:	d0f8      	beq.n	8027da0 <sbrk_aligned+0x24>
 8027dae:	1a29      	subs	r1, r5, r0
 8027db0:	0020      	movs	r0, r4
 8027db2:	f001 f96d 	bl	8029090 <_sbrk_r>
 8027db6:	3001      	adds	r0, #1
 8027db8:	d1f2      	bne.n	8027da0 <sbrk_aligned+0x24>
 8027dba:	e7ef      	b.n	8027d9c <sbrk_aligned+0x20>
 8027dbc:	20003910 	.word	0x20003910

08027dc0 <_malloc_r>:
 8027dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027dc2:	2203      	movs	r2, #3
 8027dc4:	1ccb      	adds	r3, r1, #3
 8027dc6:	4393      	bics	r3, r2
 8027dc8:	3308      	adds	r3, #8
 8027dca:	0005      	movs	r5, r0
 8027dcc:	001f      	movs	r7, r3
 8027dce:	2b0c      	cmp	r3, #12
 8027dd0:	d234      	bcs.n	8027e3c <_malloc_r+0x7c>
 8027dd2:	270c      	movs	r7, #12
 8027dd4:	42b9      	cmp	r1, r7
 8027dd6:	d833      	bhi.n	8027e40 <_malloc_r+0x80>
 8027dd8:	0028      	movs	r0, r5
 8027dda:	f000 f883 	bl	8027ee4 <__malloc_lock>
 8027dde:	4e37      	ldr	r6, [pc, #220]	@ (8027ebc <_malloc_r+0xfc>)
 8027de0:	6833      	ldr	r3, [r6, #0]
 8027de2:	001c      	movs	r4, r3
 8027de4:	2c00      	cmp	r4, #0
 8027de6:	d12f      	bne.n	8027e48 <_malloc_r+0x88>
 8027de8:	0039      	movs	r1, r7
 8027dea:	0028      	movs	r0, r5
 8027dec:	f7ff ffc6 	bl	8027d7c <sbrk_aligned>
 8027df0:	0004      	movs	r4, r0
 8027df2:	1c43      	adds	r3, r0, #1
 8027df4:	d15f      	bne.n	8027eb6 <_malloc_r+0xf6>
 8027df6:	6834      	ldr	r4, [r6, #0]
 8027df8:	9400      	str	r4, [sp, #0]
 8027dfa:	9b00      	ldr	r3, [sp, #0]
 8027dfc:	2b00      	cmp	r3, #0
 8027dfe:	d14a      	bne.n	8027e96 <_malloc_r+0xd6>
 8027e00:	2c00      	cmp	r4, #0
 8027e02:	d052      	beq.n	8027eaa <_malloc_r+0xea>
 8027e04:	6823      	ldr	r3, [r4, #0]
 8027e06:	0028      	movs	r0, r5
 8027e08:	18e3      	adds	r3, r4, r3
 8027e0a:	9900      	ldr	r1, [sp, #0]
 8027e0c:	9301      	str	r3, [sp, #4]
 8027e0e:	f001 f93f 	bl	8029090 <_sbrk_r>
 8027e12:	9b01      	ldr	r3, [sp, #4]
 8027e14:	4283      	cmp	r3, r0
 8027e16:	d148      	bne.n	8027eaa <_malloc_r+0xea>
 8027e18:	6823      	ldr	r3, [r4, #0]
 8027e1a:	0028      	movs	r0, r5
 8027e1c:	1aff      	subs	r7, r7, r3
 8027e1e:	0039      	movs	r1, r7
 8027e20:	f7ff ffac 	bl	8027d7c <sbrk_aligned>
 8027e24:	3001      	adds	r0, #1
 8027e26:	d040      	beq.n	8027eaa <_malloc_r+0xea>
 8027e28:	6823      	ldr	r3, [r4, #0]
 8027e2a:	19db      	adds	r3, r3, r7
 8027e2c:	6023      	str	r3, [r4, #0]
 8027e2e:	6833      	ldr	r3, [r6, #0]
 8027e30:	685a      	ldr	r2, [r3, #4]
 8027e32:	2a00      	cmp	r2, #0
 8027e34:	d133      	bne.n	8027e9e <_malloc_r+0xde>
 8027e36:	9b00      	ldr	r3, [sp, #0]
 8027e38:	6033      	str	r3, [r6, #0]
 8027e3a:	e019      	b.n	8027e70 <_malloc_r+0xb0>
 8027e3c:	2b00      	cmp	r3, #0
 8027e3e:	dac9      	bge.n	8027dd4 <_malloc_r+0x14>
 8027e40:	230c      	movs	r3, #12
 8027e42:	602b      	str	r3, [r5, #0]
 8027e44:	2000      	movs	r0, #0
 8027e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e48:	6821      	ldr	r1, [r4, #0]
 8027e4a:	1bc9      	subs	r1, r1, r7
 8027e4c:	d420      	bmi.n	8027e90 <_malloc_r+0xd0>
 8027e4e:	290b      	cmp	r1, #11
 8027e50:	d90a      	bls.n	8027e68 <_malloc_r+0xa8>
 8027e52:	19e2      	adds	r2, r4, r7
 8027e54:	6027      	str	r7, [r4, #0]
 8027e56:	42a3      	cmp	r3, r4
 8027e58:	d104      	bne.n	8027e64 <_malloc_r+0xa4>
 8027e5a:	6032      	str	r2, [r6, #0]
 8027e5c:	6863      	ldr	r3, [r4, #4]
 8027e5e:	6011      	str	r1, [r2, #0]
 8027e60:	6053      	str	r3, [r2, #4]
 8027e62:	e005      	b.n	8027e70 <_malloc_r+0xb0>
 8027e64:	605a      	str	r2, [r3, #4]
 8027e66:	e7f9      	b.n	8027e5c <_malloc_r+0x9c>
 8027e68:	6862      	ldr	r2, [r4, #4]
 8027e6a:	42a3      	cmp	r3, r4
 8027e6c:	d10e      	bne.n	8027e8c <_malloc_r+0xcc>
 8027e6e:	6032      	str	r2, [r6, #0]
 8027e70:	0028      	movs	r0, r5
 8027e72:	f000 f83f 	bl	8027ef4 <__malloc_unlock>
 8027e76:	0020      	movs	r0, r4
 8027e78:	2207      	movs	r2, #7
 8027e7a:	300b      	adds	r0, #11
 8027e7c:	1d23      	adds	r3, r4, #4
 8027e7e:	4390      	bics	r0, r2
 8027e80:	1ac2      	subs	r2, r0, r3
 8027e82:	4298      	cmp	r0, r3
 8027e84:	d0df      	beq.n	8027e46 <_malloc_r+0x86>
 8027e86:	1a1b      	subs	r3, r3, r0
 8027e88:	50a3      	str	r3, [r4, r2]
 8027e8a:	e7dc      	b.n	8027e46 <_malloc_r+0x86>
 8027e8c:	605a      	str	r2, [r3, #4]
 8027e8e:	e7ef      	b.n	8027e70 <_malloc_r+0xb0>
 8027e90:	0023      	movs	r3, r4
 8027e92:	6864      	ldr	r4, [r4, #4]
 8027e94:	e7a6      	b.n	8027de4 <_malloc_r+0x24>
 8027e96:	9c00      	ldr	r4, [sp, #0]
 8027e98:	6863      	ldr	r3, [r4, #4]
 8027e9a:	9300      	str	r3, [sp, #0]
 8027e9c:	e7ad      	b.n	8027dfa <_malloc_r+0x3a>
 8027e9e:	001a      	movs	r2, r3
 8027ea0:	685b      	ldr	r3, [r3, #4]
 8027ea2:	42a3      	cmp	r3, r4
 8027ea4:	d1fb      	bne.n	8027e9e <_malloc_r+0xde>
 8027ea6:	2300      	movs	r3, #0
 8027ea8:	e7da      	b.n	8027e60 <_malloc_r+0xa0>
 8027eaa:	230c      	movs	r3, #12
 8027eac:	0028      	movs	r0, r5
 8027eae:	602b      	str	r3, [r5, #0]
 8027eb0:	f000 f820 	bl	8027ef4 <__malloc_unlock>
 8027eb4:	e7c6      	b.n	8027e44 <_malloc_r+0x84>
 8027eb6:	6007      	str	r7, [r0, #0]
 8027eb8:	e7da      	b.n	8027e70 <_malloc_r+0xb0>
 8027eba:	46c0      	nop			@ (mov r8, r8)
 8027ebc:	20003914 	.word	0x20003914

08027ec0 <__ascii_mbtowc>:
 8027ec0:	b082      	sub	sp, #8
 8027ec2:	2900      	cmp	r1, #0
 8027ec4:	d100      	bne.n	8027ec8 <__ascii_mbtowc+0x8>
 8027ec6:	a901      	add	r1, sp, #4
 8027ec8:	1e10      	subs	r0, r2, #0
 8027eca:	d006      	beq.n	8027eda <__ascii_mbtowc+0x1a>
 8027ecc:	2b00      	cmp	r3, #0
 8027ece:	d006      	beq.n	8027ede <__ascii_mbtowc+0x1e>
 8027ed0:	7813      	ldrb	r3, [r2, #0]
 8027ed2:	600b      	str	r3, [r1, #0]
 8027ed4:	7810      	ldrb	r0, [r2, #0]
 8027ed6:	1e43      	subs	r3, r0, #1
 8027ed8:	4198      	sbcs	r0, r3
 8027eda:	b002      	add	sp, #8
 8027edc:	4770      	bx	lr
 8027ede:	2002      	movs	r0, #2
 8027ee0:	4240      	negs	r0, r0
 8027ee2:	e7fa      	b.n	8027eda <__ascii_mbtowc+0x1a>

08027ee4 <__malloc_lock>:
 8027ee4:	b510      	push	{r4, lr}
 8027ee6:	4802      	ldr	r0, [pc, #8]	@ (8027ef0 <__malloc_lock+0xc>)
 8027ee8:	f7fe fd07 	bl	80268fa <__retarget_lock_acquire_recursive>
 8027eec:	bd10      	pop	{r4, pc}
 8027eee:	46c0      	nop			@ (mov r8, r8)
 8027ef0:	2000390c 	.word	0x2000390c

08027ef4 <__malloc_unlock>:
 8027ef4:	b510      	push	{r4, lr}
 8027ef6:	4802      	ldr	r0, [pc, #8]	@ (8027f00 <__malloc_unlock+0xc>)
 8027ef8:	f7fe fd00 	bl	80268fc <__retarget_lock_release_recursive>
 8027efc:	bd10      	pop	{r4, pc}
 8027efe:	46c0      	nop			@ (mov r8, r8)
 8027f00:	2000390c 	.word	0x2000390c

08027f04 <_Balloc>:
 8027f04:	b570      	push	{r4, r5, r6, lr}
 8027f06:	69c5      	ldr	r5, [r0, #28]
 8027f08:	0006      	movs	r6, r0
 8027f0a:	000c      	movs	r4, r1
 8027f0c:	2d00      	cmp	r5, #0
 8027f0e:	d10e      	bne.n	8027f2e <_Balloc+0x2a>
 8027f10:	2010      	movs	r0, #16
 8027f12:	f7ff ff29 	bl	8027d68 <malloc>
 8027f16:	1e02      	subs	r2, r0, #0
 8027f18:	61f0      	str	r0, [r6, #28]
 8027f1a:	d104      	bne.n	8027f26 <_Balloc+0x22>
 8027f1c:	216b      	movs	r1, #107	@ 0x6b
 8027f1e:	4b19      	ldr	r3, [pc, #100]	@ (8027f84 <_Balloc+0x80>)
 8027f20:	4819      	ldr	r0, [pc, #100]	@ (8027f88 <_Balloc+0x84>)
 8027f22:	f001 f8c7 	bl	80290b4 <__assert_func>
 8027f26:	6045      	str	r5, [r0, #4]
 8027f28:	6085      	str	r5, [r0, #8]
 8027f2a:	6005      	str	r5, [r0, #0]
 8027f2c:	60c5      	str	r5, [r0, #12]
 8027f2e:	69f5      	ldr	r5, [r6, #28]
 8027f30:	68eb      	ldr	r3, [r5, #12]
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	d013      	beq.n	8027f5e <_Balloc+0x5a>
 8027f36:	69f3      	ldr	r3, [r6, #28]
 8027f38:	00a2      	lsls	r2, r4, #2
 8027f3a:	68db      	ldr	r3, [r3, #12]
 8027f3c:	189b      	adds	r3, r3, r2
 8027f3e:	6818      	ldr	r0, [r3, #0]
 8027f40:	2800      	cmp	r0, #0
 8027f42:	d118      	bne.n	8027f76 <_Balloc+0x72>
 8027f44:	2101      	movs	r1, #1
 8027f46:	000d      	movs	r5, r1
 8027f48:	40a5      	lsls	r5, r4
 8027f4a:	1d6a      	adds	r2, r5, #5
 8027f4c:	0030      	movs	r0, r6
 8027f4e:	0092      	lsls	r2, r2, #2
 8027f50:	f001 f8ce 	bl	80290f0 <_calloc_r>
 8027f54:	2800      	cmp	r0, #0
 8027f56:	d00c      	beq.n	8027f72 <_Balloc+0x6e>
 8027f58:	6044      	str	r4, [r0, #4]
 8027f5a:	6085      	str	r5, [r0, #8]
 8027f5c:	e00d      	b.n	8027f7a <_Balloc+0x76>
 8027f5e:	2221      	movs	r2, #33	@ 0x21
 8027f60:	2104      	movs	r1, #4
 8027f62:	0030      	movs	r0, r6
 8027f64:	f001 f8c4 	bl	80290f0 <_calloc_r>
 8027f68:	69f3      	ldr	r3, [r6, #28]
 8027f6a:	60e8      	str	r0, [r5, #12]
 8027f6c:	68db      	ldr	r3, [r3, #12]
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	d1e1      	bne.n	8027f36 <_Balloc+0x32>
 8027f72:	2000      	movs	r0, #0
 8027f74:	bd70      	pop	{r4, r5, r6, pc}
 8027f76:	6802      	ldr	r2, [r0, #0]
 8027f78:	601a      	str	r2, [r3, #0]
 8027f7a:	2300      	movs	r3, #0
 8027f7c:	6103      	str	r3, [r0, #16]
 8027f7e:	60c3      	str	r3, [r0, #12]
 8027f80:	e7f8      	b.n	8027f74 <_Balloc+0x70>
 8027f82:	46c0      	nop			@ (mov r8, r8)
 8027f84:	0802edfb 	.word	0x0802edfb
 8027f88:	0802eedb 	.word	0x0802eedb

08027f8c <_Bfree>:
 8027f8c:	b570      	push	{r4, r5, r6, lr}
 8027f8e:	69c6      	ldr	r6, [r0, #28]
 8027f90:	0005      	movs	r5, r0
 8027f92:	000c      	movs	r4, r1
 8027f94:	2e00      	cmp	r6, #0
 8027f96:	d10e      	bne.n	8027fb6 <_Bfree+0x2a>
 8027f98:	2010      	movs	r0, #16
 8027f9a:	f7ff fee5 	bl	8027d68 <malloc>
 8027f9e:	1e02      	subs	r2, r0, #0
 8027fa0:	61e8      	str	r0, [r5, #28]
 8027fa2:	d104      	bne.n	8027fae <_Bfree+0x22>
 8027fa4:	218f      	movs	r1, #143	@ 0x8f
 8027fa6:	4b09      	ldr	r3, [pc, #36]	@ (8027fcc <_Bfree+0x40>)
 8027fa8:	4809      	ldr	r0, [pc, #36]	@ (8027fd0 <_Bfree+0x44>)
 8027faa:	f001 f883 	bl	80290b4 <__assert_func>
 8027fae:	6046      	str	r6, [r0, #4]
 8027fb0:	6086      	str	r6, [r0, #8]
 8027fb2:	6006      	str	r6, [r0, #0]
 8027fb4:	60c6      	str	r6, [r0, #12]
 8027fb6:	2c00      	cmp	r4, #0
 8027fb8:	d007      	beq.n	8027fca <_Bfree+0x3e>
 8027fba:	69eb      	ldr	r3, [r5, #28]
 8027fbc:	6862      	ldr	r2, [r4, #4]
 8027fbe:	68db      	ldr	r3, [r3, #12]
 8027fc0:	0092      	lsls	r2, r2, #2
 8027fc2:	189b      	adds	r3, r3, r2
 8027fc4:	681a      	ldr	r2, [r3, #0]
 8027fc6:	6022      	str	r2, [r4, #0]
 8027fc8:	601c      	str	r4, [r3, #0]
 8027fca:	bd70      	pop	{r4, r5, r6, pc}
 8027fcc:	0802edfb 	.word	0x0802edfb
 8027fd0:	0802eedb 	.word	0x0802eedb

08027fd4 <__multadd>:
 8027fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027fd6:	000f      	movs	r7, r1
 8027fd8:	9001      	str	r0, [sp, #4]
 8027fda:	000c      	movs	r4, r1
 8027fdc:	001e      	movs	r6, r3
 8027fde:	2000      	movs	r0, #0
 8027fe0:	690d      	ldr	r5, [r1, #16]
 8027fe2:	3714      	adds	r7, #20
 8027fe4:	683b      	ldr	r3, [r7, #0]
 8027fe6:	3001      	adds	r0, #1
 8027fe8:	b299      	uxth	r1, r3
 8027fea:	4351      	muls	r1, r2
 8027fec:	0c1b      	lsrs	r3, r3, #16
 8027fee:	4353      	muls	r3, r2
 8027ff0:	1989      	adds	r1, r1, r6
 8027ff2:	0c0e      	lsrs	r6, r1, #16
 8027ff4:	199b      	adds	r3, r3, r6
 8027ff6:	0c1e      	lsrs	r6, r3, #16
 8027ff8:	b289      	uxth	r1, r1
 8027ffa:	041b      	lsls	r3, r3, #16
 8027ffc:	185b      	adds	r3, r3, r1
 8027ffe:	c708      	stmia	r7!, {r3}
 8028000:	4285      	cmp	r5, r0
 8028002:	dcef      	bgt.n	8027fe4 <__multadd+0x10>
 8028004:	2e00      	cmp	r6, #0
 8028006:	d022      	beq.n	802804e <__multadd+0x7a>
 8028008:	68a3      	ldr	r3, [r4, #8]
 802800a:	42ab      	cmp	r3, r5
 802800c:	dc19      	bgt.n	8028042 <__multadd+0x6e>
 802800e:	6861      	ldr	r1, [r4, #4]
 8028010:	9801      	ldr	r0, [sp, #4]
 8028012:	3101      	adds	r1, #1
 8028014:	f7ff ff76 	bl	8027f04 <_Balloc>
 8028018:	1e07      	subs	r7, r0, #0
 802801a:	d105      	bne.n	8028028 <__multadd+0x54>
 802801c:	003a      	movs	r2, r7
 802801e:	21ba      	movs	r1, #186	@ 0xba
 8028020:	4b0c      	ldr	r3, [pc, #48]	@ (8028054 <__multadd+0x80>)
 8028022:	480d      	ldr	r0, [pc, #52]	@ (8028058 <__multadd+0x84>)
 8028024:	f001 f846 	bl	80290b4 <__assert_func>
 8028028:	0021      	movs	r1, r4
 802802a:	6922      	ldr	r2, [r4, #16]
 802802c:	310c      	adds	r1, #12
 802802e:	3202      	adds	r2, #2
 8028030:	0092      	lsls	r2, r2, #2
 8028032:	300c      	adds	r0, #12
 8028034:	f7fe fc6e 	bl	8026914 <memcpy>
 8028038:	0021      	movs	r1, r4
 802803a:	9801      	ldr	r0, [sp, #4]
 802803c:	f7ff ffa6 	bl	8027f8c <_Bfree>
 8028040:	003c      	movs	r4, r7
 8028042:	1d2b      	adds	r3, r5, #4
 8028044:	009b      	lsls	r3, r3, #2
 8028046:	18e3      	adds	r3, r4, r3
 8028048:	3501      	adds	r5, #1
 802804a:	605e      	str	r6, [r3, #4]
 802804c:	6125      	str	r5, [r4, #16]
 802804e:	0020      	movs	r0, r4
 8028050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028052:	46c0      	nop			@ (mov r8, r8)
 8028054:	0802ee6a 	.word	0x0802ee6a
 8028058:	0802eedb 	.word	0x0802eedb

0802805c <__s2b>:
 802805c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802805e:	0007      	movs	r7, r0
 8028060:	0018      	movs	r0, r3
 8028062:	000c      	movs	r4, r1
 8028064:	3008      	adds	r0, #8
 8028066:	2109      	movs	r1, #9
 8028068:	9301      	str	r3, [sp, #4]
 802806a:	0015      	movs	r5, r2
 802806c:	f7d8 f924 	bl	80002b8 <__divsi3>
 8028070:	2301      	movs	r3, #1
 8028072:	2100      	movs	r1, #0
 8028074:	4283      	cmp	r3, r0
 8028076:	db0a      	blt.n	802808e <__s2b+0x32>
 8028078:	0038      	movs	r0, r7
 802807a:	f7ff ff43 	bl	8027f04 <_Balloc>
 802807e:	1e01      	subs	r1, r0, #0
 8028080:	d108      	bne.n	8028094 <__s2b+0x38>
 8028082:	000a      	movs	r2, r1
 8028084:	4b19      	ldr	r3, [pc, #100]	@ (80280ec <__s2b+0x90>)
 8028086:	481a      	ldr	r0, [pc, #104]	@ (80280f0 <__s2b+0x94>)
 8028088:	31d3      	adds	r1, #211	@ 0xd3
 802808a:	f001 f813 	bl	80290b4 <__assert_func>
 802808e:	005b      	lsls	r3, r3, #1
 8028090:	3101      	adds	r1, #1
 8028092:	e7ef      	b.n	8028074 <__s2b+0x18>
 8028094:	9b08      	ldr	r3, [sp, #32]
 8028096:	6143      	str	r3, [r0, #20]
 8028098:	2301      	movs	r3, #1
 802809a:	6103      	str	r3, [r0, #16]
 802809c:	2d09      	cmp	r5, #9
 802809e:	dd18      	ble.n	80280d2 <__s2b+0x76>
 80280a0:	0023      	movs	r3, r4
 80280a2:	3309      	adds	r3, #9
 80280a4:	001e      	movs	r6, r3
 80280a6:	9300      	str	r3, [sp, #0]
 80280a8:	1964      	adds	r4, r4, r5
 80280aa:	7833      	ldrb	r3, [r6, #0]
 80280ac:	220a      	movs	r2, #10
 80280ae:	0038      	movs	r0, r7
 80280b0:	3b30      	subs	r3, #48	@ 0x30
 80280b2:	f7ff ff8f 	bl	8027fd4 <__multadd>
 80280b6:	3601      	adds	r6, #1
 80280b8:	0001      	movs	r1, r0
 80280ba:	42a6      	cmp	r6, r4
 80280bc:	d1f5      	bne.n	80280aa <__s2b+0x4e>
 80280be:	002c      	movs	r4, r5
 80280c0:	9b00      	ldr	r3, [sp, #0]
 80280c2:	3c08      	subs	r4, #8
 80280c4:	191c      	adds	r4, r3, r4
 80280c6:	002e      	movs	r6, r5
 80280c8:	9b01      	ldr	r3, [sp, #4]
 80280ca:	429e      	cmp	r6, r3
 80280cc:	db04      	blt.n	80280d8 <__s2b+0x7c>
 80280ce:	0008      	movs	r0, r1
 80280d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80280d2:	2509      	movs	r5, #9
 80280d4:	340a      	adds	r4, #10
 80280d6:	e7f6      	b.n	80280c6 <__s2b+0x6a>
 80280d8:	1b63      	subs	r3, r4, r5
 80280da:	5d9b      	ldrb	r3, [r3, r6]
 80280dc:	220a      	movs	r2, #10
 80280de:	0038      	movs	r0, r7
 80280e0:	3b30      	subs	r3, #48	@ 0x30
 80280e2:	f7ff ff77 	bl	8027fd4 <__multadd>
 80280e6:	3601      	adds	r6, #1
 80280e8:	0001      	movs	r1, r0
 80280ea:	e7ed      	b.n	80280c8 <__s2b+0x6c>
 80280ec:	0802ee6a 	.word	0x0802ee6a
 80280f0:	0802eedb 	.word	0x0802eedb

080280f4 <__hi0bits>:
 80280f4:	2280      	movs	r2, #128	@ 0x80
 80280f6:	0003      	movs	r3, r0
 80280f8:	0252      	lsls	r2, r2, #9
 80280fa:	2000      	movs	r0, #0
 80280fc:	4293      	cmp	r3, r2
 80280fe:	d201      	bcs.n	8028104 <__hi0bits+0x10>
 8028100:	041b      	lsls	r3, r3, #16
 8028102:	3010      	adds	r0, #16
 8028104:	2280      	movs	r2, #128	@ 0x80
 8028106:	0452      	lsls	r2, r2, #17
 8028108:	4293      	cmp	r3, r2
 802810a:	d201      	bcs.n	8028110 <__hi0bits+0x1c>
 802810c:	3008      	adds	r0, #8
 802810e:	021b      	lsls	r3, r3, #8
 8028110:	2280      	movs	r2, #128	@ 0x80
 8028112:	0552      	lsls	r2, r2, #21
 8028114:	4293      	cmp	r3, r2
 8028116:	d201      	bcs.n	802811c <__hi0bits+0x28>
 8028118:	3004      	adds	r0, #4
 802811a:	011b      	lsls	r3, r3, #4
 802811c:	2280      	movs	r2, #128	@ 0x80
 802811e:	05d2      	lsls	r2, r2, #23
 8028120:	4293      	cmp	r3, r2
 8028122:	d201      	bcs.n	8028128 <__hi0bits+0x34>
 8028124:	3002      	adds	r0, #2
 8028126:	009b      	lsls	r3, r3, #2
 8028128:	2b00      	cmp	r3, #0
 802812a:	db03      	blt.n	8028134 <__hi0bits+0x40>
 802812c:	3001      	adds	r0, #1
 802812e:	4213      	tst	r3, r2
 8028130:	d100      	bne.n	8028134 <__hi0bits+0x40>
 8028132:	2020      	movs	r0, #32
 8028134:	4770      	bx	lr

08028136 <__lo0bits>:
 8028136:	6803      	ldr	r3, [r0, #0]
 8028138:	0001      	movs	r1, r0
 802813a:	2207      	movs	r2, #7
 802813c:	0018      	movs	r0, r3
 802813e:	4010      	ands	r0, r2
 8028140:	4213      	tst	r3, r2
 8028142:	d00d      	beq.n	8028160 <__lo0bits+0x2a>
 8028144:	3a06      	subs	r2, #6
 8028146:	2000      	movs	r0, #0
 8028148:	4213      	tst	r3, r2
 802814a:	d105      	bne.n	8028158 <__lo0bits+0x22>
 802814c:	3002      	adds	r0, #2
 802814e:	4203      	tst	r3, r0
 8028150:	d003      	beq.n	802815a <__lo0bits+0x24>
 8028152:	40d3      	lsrs	r3, r2
 8028154:	0010      	movs	r0, r2
 8028156:	600b      	str	r3, [r1, #0]
 8028158:	4770      	bx	lr
 802815a:	089b      	lsrs	r3, r3, #2
 802815c:	600b      	str	r3, [r1, #0]
 802815e:	e7fb      	b.n	8028158 <__lo0bits+0x22>
 8028160:	b29a      	uxth	r2, r3
 8028162:	2a00      	cmp	r2, #0
 8028164:	d101      	bne.n	802816a <__lo0bits+0x34>
 8028166:	2010      	movs	r0, #16
 8028168:	0c1b      	lsrs	r3, r3, #16
 802816a:	b2da      	uxtb	r2, r3
 802816c:	2a00      	cmp	r2, #0
 802816e:	d101      	bne.n	8028174 <__lo0bits+0x3e>
 8028170:	3008      	adds	r0, #8
 8028172:	0a1b      	lsrs	r3, r3, #8
 8028174:	071a      	lsls	r2, r3, #28
 8028176:	d101      	bne.n	802817c <__lo0bits+0x46>
 8028178:	3004      	adds	r0, #4
 802817a:	091b      	lsrs	r3, r3, #4
 802817c:	079a      	lsls	r2, r3, #30
 802817e:	d101      	bne.n	8028184 <__lo0bits+0x4e>
 8028180:	3002      	adds	r0, #2
 8028182:	089b      	lsrs	r3, r3, #2
 8028184:	07da      	lsls	r2, r3, #31
 8028186:	d4e9      	bmi.n	802815c <__lo0bits+0x26>
 8028188:	3001      	adds	r0, #1
 802818a:	085b      	lsrs	r3, r3, #1
 802818c:	d1e6      	bne.n	802815c <__lo0bits+0x26>
 802818e:	2020      	movs	r0, #32
 8028190:	e7e2      	b.n	8028158 <__lo0bits+0x22>
	...

08028194 <__i2b>:
 8028194:	b510      	push	{r4, lr}
 8028196:	000c      	movs	r4, r1
 8028198:	2101      	movs	r1, #1
 802819a:	f7ff feb3 	bl	8027f04 <_Balloc>
 802819e:	2800      	cmp	r0, #0
 80281a0:	d107      	bne.n	80281b2 <__i2b+0x1e>
 80281a2:	2146      	movs	r1, #70	@ 0x46
 80281a4:	4c05      	ldr	r4, [pc, #20]	@ (80281bc <__i2b+0x28>)
 80281a6:	0002      	movs	r2, r0
 80281a8:	4b05      	ldr	r3, [pc, #20]	@ (80281c0 <__i2b+0x2c>)
 80281aa:	0020      	movs	r0, r4
 80281ac:	31ff      	adds	r1, #255	@ 0xff
 80281ae:	f000 ff81 	bl	80290b4 <__assert_func>
 80281b2:	2301      	movs	r3, #1
 80281b4:	6144      	str	r4, [r0, #20]
 80281b6:	6103      	str	r3, [r0, #16]
 80281b8:	bd10      	pop	{r4, pc}
 80281ba:	46c0      	nop			@ (mov r8, r8)
 80281bc:	0802eedb 	.word	0x0802eedb
 80281c0:	0802ee6a 	.word	0x0802ee6a

080281c4 <__multiply>:
 80281c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80281c6:	0014      	movs	r4, r2
 80281c8:	690a      	ldr	r2, [r1, #16]
 80281ca:	6923      	ldr	r3, [r4, #16]
 80281cc:	000d      	movs	r5, r1
 80281ce:	b089      	sub	sp, #36	@ 0x24
 80281d0:	429a      	cmp	r2, r3
 80281d2:	db02      	blt.n	80281da <__multiply+0x16>
 80281d4:	0023      	movs	r3, r4
 80281d6:	000c      	movs	r4, r1
 80281d8:	001d      	movs	r5, r3
 80281da:	6927      	ldr	r7, [r4, #16]
 80281dc:	692e      	ldr	r6, [r5, #16]
 80281de:	6861      	ldr	r1, [r4, #4]
 80281e0:	19bb      	adds	r3, r7, r6
 80281e2:	9300      	str	r3, [sp, #0]
 80281e4:	68a3      	ldr	r3, [r4, #8]
 80281e6:	19ba      	adds	r2, r7, r6
 80281e8:	4293      	cmp	r3, r2
 80281ea:	da00      	bge.n	80281ee <__multiply+0x2a>
 80281ec:	3101      	adds	r1, #1
 80281ee:	f7ff fe89 	bl	8027f04 <_Balloc>
 80281f2:	4684      	mov	ip, r0
 80281f4:	2800      	cmp	r0, #0
 80281f6:	d106      	bne.n	8028206 <__multiply+0x42>
 80281f8:	21b1      	movs	r1, #177	@ 0xb1
 80281fa:	4662      	mov	r2, ip
 80281fc:	4b44      	ldr	r3, [pc, #272]	@ (8028310 <__multiply+0x14c>)
 80281fe:	4845      	ldr	r0, [pc, #276]	@ (8028314 <__multiply+0x150>)
 8028200:	0049      	lsls	r1, r1, #1
 8028202:	f000 ff57 	bl	80290b4 <__assert_func>
 8028206:	0002      	movs	r2, r0
 8028208:	19bb      	adds	r3, r7, r6
 802820a:	3214      	adds	r2, #20
 802820c:	009b      	lsls	r3, r3, #2
 802820e:	18d3      	adds	r3, r2, r3
 8028210:	9301      	str	r3, [sp, #4]
 8028212:	2100      	movs	r1, #0
 8028214:	0013      	movs	r3, r2
 8028216:	9801      	ldr	r0, [sp, #4]
 8028218:	4283      	cmp	r3, r0
 802821a:	d328      	bcc.n	802826e <__multiply+0xaa>
 802821c:	0023      	movs	r3, r4
 802821e:	00bf      	lsls	r7, r7, #2
 8028220:	3314      	adds	r3, #20
 8028222:	9304      	str	r3, [sp, #16]
 8028224:	3514      	adds	r5, #20
 8028226:	19db      	adds	r3, r3, r7
 8028228:	00b6      	lsls	r6, r6, #2
 802822a:	9302      	str	r3, [sp, #8]
 802822c:	19ab      	adds	r3, r5, r6
 802822e:	9307      	str	r3, [sp, #28]
 8028230:	2304      	movs	r3, #4
 8028232:	9305      	str	r3, [sp, #20]
 8028234:	0023      	movs	r3, r4
 8028236:	9902      	ldr	r1, [sp, #8]
 8028238:	3315      	adds	r3, #21
 802823a:	4299      	cmp	r1, r3
 802823c:	d305      	bcc.n	802824a <__multiply+0x86>
 802823e:	1b0c      	subs	r4, r1, r4
 8028240:	3c15      	subs	r4, #21
 8028242:	08a4      	lsrs	r4, r4, #2
 8028244:	3401      	adds	r4, #1
 8028246:	00a3      	lsls	r3, r4, #2
 8028248:	9305      	str	r3, [sp, #20]
 802824a:	9b07      	ldr	r3, [sp, #28]
 802824c:	429d      	cmp	r5, r3
 802824e:	d310      	bcc.n	8028272 <__multiply+0xae>
 8028250:	9b00      	ldr	r3, [sp, #0]
 8028252:	2b00      	cmp	r3, #0
 8028254:	dd05      	ble.n	8028262 <__multiply+0x9e>
 8028256:	9b01      	ldr	r3, [sp, #4]
 8028258:	3b04      	subs	r3, #4
 802825a:	9301      	str	r3, [sp, #4]
 802825c:	681b      	ldr	r3, [r3, #0]
 802825e:	2b00      	cmp	r3, #0
 8028260:	d052      	beq.n	8028308 <__multiply+0x144>
 8028262:	4663      	mov	r3, ip
 8028264:	4660      	mov	r0, ip
 8028266:	9a00      	ldr	r2, [sp, #0]
 8028268:	611a      	str	r2, [r3, #16]
 802826a:	b009      	add	sp, #36	@ 0x24
 802826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802826e:	c302      	stmia	r3!, {r1}
 8028270:	e7d1      	b.n	8028216 <__multiply+0x52>
 8028272:	682c      	ldr	r4, [r5, #0]
 8028274:	b2a4      	uxth	r4, r4
 8028276:	2c00      	cmp	r4, #0
 8028278:	d01f      	beq.n	80282ba <__multiply+0xf6>
 802827a:	2300      	movs	r3, #0
 802827c:	0017      	movs	r7, r2
 802827e:	9e04      	ldr	r6, [sp, #16]
 8028280:	9303      	str	r3, [sp, #12]
 8028282:	ce08      	ldmia	r6!, {r3}
 8028284:	6839      	ldr	r1, [r7, #0]
 8028286:	9306      	str	r3, [sp, #24]
 8028288:	466b      	mov	r3, sp
 802828a:	8b1b      	ldrh	r3, [r3, #24]
 802828c:	b288      	uxth	r0, r1
 802828e:	4363      	muls	r3, r4
 8028290:	181b      	adds	r3, r3, r0
 8028292:	9803      	ldr	r0, [sp, #12]
 8028294:	0c09      	lsrs	r1, r1, #16
 8028296:	181b      	adds	r3, r3, r0
 8028298:	9806      	ldr	r0, [sp, #24]
 802829a:	0c00      	lsrs	r0, r0, #16
 802829c:	4360      	muls	r0, r4
 802829e:	1840      	adds	r0, r0, r1
 80282a0:	0c19      	lsrs	r1, r3, #16
 80282a2:	1841      	adds	r1, r0, r1
 80282a4:	0c08      	lsrs	r0, r1, #16
 80282a6:	b29b      	uxth	r3, r3
 80282a8:	0409      	lsls	r1, r1, #16
 80282aa:	4319      	orrs	r1, r3
 80282ac:	9b02      	ldr	r3, [sp, #8]
 80282ae:	9003      	str	r0, [sp, #12]
 80282b0:	c702      	stmia	r7!, {r1}
 80282b2:	42b3      	cmp	r3, r6
 80282b4:	d8e5      	bhi.n	8028282 <__multiply+0xbe>
 80282b6:	9b05      	ldr	r3, [sp, #20]
 80282b8:	50d0      	str	r0, [r2, r3]
 80282ba:	682c      	ldr	r4, [r5, #0]
 80282bc:	0c24      	lsrs	r4, r4, #16
 80282be:	d020      	beq.n	8028302 <__multiply+0x13e>
 80282c0:	2100      	movs	r1, #0
 80282c2:	0010      	movs	r0, r2
 80282c4:	6813      	ldr	r3, [r2, #0]
 80282c6:	9e04      	ldr	r6, [sp, #16]
 80282c8:	9103      	str	r1, [sp, #12]
 80282ca:	6831      	ldr	r1, [r6, #0]
 80282cc:	6807      	ldr	r7, [r0, #0]
 80282ce:	b289      	uxth	r1, r1
 80282d0:	4361      	muls	r1, r4
 80282d2:	0c3f      	lsrs	r7, r7, #16
 80282d4:	19c9      	adds	r1, r1, r7
 80282d6:	9f03      	ldr	r7, [sp, #12]
 80282d8:	b29b      	uxth	r3, r3
 80282da:	19c9      	adds	r1, r1, r7
 80282dc:	040f      	lsls	r7, r1, #16
 80282de:	431f      	orrs	r7, r3
 80282e0:	6007      	str	r7, [r0, #0]
 80282e2:	ce80      	ldmia	r6!, {r7}
 80282e4:	6843      	ldr	r3, [r0, #4]
 80282e6:	0c3f      	lsrs	r7, r7, #16
 80282e8:	4367      	muls	r7, r4
 80282ea:	b29b      	uxth	r3, r3
 80282ec:	0c09      	lsrs	r1, r1, #16
 80282ee:	18fb      	adds	r3, r7, r3
 80282f0:	185b      	adds	r3, r3, r1
 80282f2:	0c19      	lsrs	r1, r3, #16
 80282f4:	9103      	str	r1, [sp, #12]
 80282f6:	9902      	ldr	r1, [sp, #8]
 80282f8:	3004      	adds	r0, #4
 80282fa:	42b1      	cmp	r1, r6
 80282fc:	d8e5      	bhi.n	80282ca <__multiply+0x106>
 80282fe:	9905      	ldr	r1, [sp, #20]
 8028300:	5053      	str	r3, [r2, r1]
 8028302:	3504      	adds	r5, #4
 8028304:	3204      	adds	r2, #4
 8028306:	e7a0      	b.n	802824a <__multiply+0x86>
 8028308:	9b00      	ldr	r3, [sp, #0]
 802830a:	3b01      	subs	r3, #1
 802830c:	9300      	str	r3, [sp, #0]
 802830e:	e79f      	b.n	8028250 <__multiply+0x8c>
 8028310:	0802ee6a 	.word	0x0802ee6a
 8028314:	0802eedb 	.word	0x0802eedb

08028318 <__pow5mult>:
 8028318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802831a:	2303      	movs	r3, #3
 802831c:	0015      	movs	r5, r2
 802831e:	0007      	movs	r7, r0
 8028320:	000e      	movs	r6, r1
 8028322:	401a      	ands	r2, r3
 8028324:	421d      	tst	r5, r3
 8028326:	d008      	beq.n	802833a <__pow5mult+0x22>
 8028328:	4925      	ldr	r1, [pc, #148]	@ (80283c0 <__pow5mult+0xa8>)
 802832a:	3a01      	subs	r2, #1
 802832c:	0092      	lsls	r2, r2, #2
 802832e:	5852      	ldr	r2, [r2, r1]
 8028330:	2300      	movs	r3, #0
 8028332:	0031      	movs	r1, r6
 8028334:	f7ff fe4e 	bl	8027fd4 <__multadd>
 8028338:	0006      	movs	r6, r0
 802833a:	10ad      	asrs	r5, r5, #2
 802833c:	d03d      	beq.n	80283ba <__pow5mult+0xa2>
 802833e:	69fc      	ldr	r4, [r7, #28]
 8028340:	2c00      	cmp	r4, #0
 8028342:	d10f      	bne.n	8028364 <__pow5mult+0x4c>
 8028344:	2010      	movs	r0, #16
 8028346:	f7ff fd0f 	bl	8027d68 <malloc>
 802834a:	1e02      	subs	r2, r0, #0
 802834c:	61f8      	str	r0, [r7, #28]
 802834e:	d105      	bne.n	802835c <__pow5mult+0x44>
 8028350:	21b4      	movs	r1, #180	@ 0xb4
 8028352:	4b1c      	ldr	r3, [pc, #112]	@ (80283c4 <__pow5mult+0xac>)
 8028354:	481c      	ldr	r0, [pc, #112]	@ (80283c8 <__pow5mult+0xb0>)
 8028356:	31ff      	adds	r1, #255	@ 0xff
 8028358:	f000 feac 	bl	80290b4 <__assert_func>
 802835c:	6044      	str	r4, [r0, #4]
 802835e:	6084      	str	r4, [r0, #8]
 8028360:	6004      	str	r4, [r0, #0]
 8028362:	60c4      	str	r4, [r0, #12]
 8028364:	69fb      	ldr	r3, [r7, #28]
 8028366:	689c      	ldr	r4, [r3, #8]
 8028368:	9301      	str	r3, [sp, #4]
 802836a:	2c00      	cmp	r4, #0
 802836c:	d108      	bne.n	8028380 <__pow5mult+0x68>
 802836e:	0038      	movs	r0, r7
 8028370:	4916      	ldr	r1, [pc, #88]	@ (80283cc <__pow5mult+0xb4>)
 8028372:	f7ff ff0f 	bl	8028194 <__i2b>
 8028376:	9b01      	ldr	r3, [sp, #4]
 8028378:	0004      	movs	r4, r0
 802837a:	6098      	str	r0, [r3, #8]
 802837c:	2300      	movs	r3, #0
 802837e:	6003      	str	r3, [r0, #0]
 8028380:	2301      	movs	r3, #1
 8028382:	421d      	tst	r5, r3
 8028384:	d00a      	beq.n	802839c <__pow5mult+0x84>
 8028386:	0031      	movs	r1, r6
 8028388:	0022      	movs	r2, r4
 802838a:	0038      	movs	r0, r7
 802838c:	f7ff ff1a 	bl	80281c4 <__multiply>
 8028390:	0031      	movs	r1, r6
 8028392:	9001      	str	r0, [sp, #4]
 8028394:	0038      	movs	r0, r7
 8028396:	f7ff fdf9 	bl	8027f8c <_Bfree>
 802839a:	9e01      	ldr	r6, [sp, #4]
 802839c:	106d      	asrs	r5, r5, #1
 802839e:	d00c      	beq.n	80283ba <__pow5mult+0xa2>
 80283a0:	6820      	ldr	r0, [r4, #0]
 80283a2:	2800      	cmp	r0, #0
 80283a4:	d107      	bne.n	80283b6 <__pow5mult+0x9e>
 80283a6:	0022      	movs	r2, r4
 80283a8:	0021      	movs	r1, r4
 80283aa:	0038      	movs	r0, r7
 80283ac:	f7ff ff0a 	bl	80281c4 <__multiply>
 80283b0:	2300      	movs	r3, #0
 80283b2:	6020      	str	r0, [r4, #0]
 80283b4:	6003      	str	r3, [r0, #0]
 80283b6:	0004      	movs	r4, r0
 80283b8:	e7e2      	b.n	8028380 <__pow5mult+0x68>
 80283ba:	0030      	movs	r0, r6
 80283bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80283be:	46c0      	nop			@ (mov r8, r8)
 80283c0:	0802f0dc 	.word	0x0802f0dc
 80283c4:	0802edfb 	.word	0x0802edfb
 80283c8:	0802eedb 	.word	0x0802eedb
 80283cc:	00000271 	.word	0x00000271

080283d0 <__lshift>:
 80283d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80283d2:	000c      	movs	r4, r1
 80283d4:	0016      	movs	r6, r2
 80283d6:	6923      	ldr	r3, [r4, #16]
 80283d8:	1157      	asrs	r7, r2, #5
 80283da:	b085      	sub	sp, #20
 80283dc:	18fb      	adds	r3, r7, r3
 80283de:	9301      	str	r3, [sp, #4]
 80283e0:	3301      	adds	r3, #1
 80283e2:	9300      	str	r3, [sp, #0]
 80283e4:	6849      	ldr	r1, [r1, #4]
 80283e6:	68a3      	ldr	r3, [r4, #8]
 80283e8:	9002      	str	r0, [sp, #8]
 80283ea:	9a00      	ldr	r2, [sp, #0]
 80283ec:	4293      	cmp	r3, r2
 80283ee:	db10      	blt.n	8028412 <__lshift+0x42>
 80283f0:	9802      	ldr	r0, [sp, #8]
 80283f2:	f7ff fd87 	bl	8027f04 <_Balloc>
 80283f6:	2300      	movs	r3, #0
 80283f8:	0001      	movs	r1, r0
 80283fa:	0005      	movs	r5, r0
 80283fc:	001a      	movs	r2, r3
 80283fe:	3114      	adds	r1, #20
 8028400:	4298      	cmp	r0, r3
 8028402:	d10c      	bne.n	802841e <__lshift+0x4e>
 8028404:	21ef      	movs	r1, #239	@ 0xef
 8028406:	002a      	movs	r2, r5
 8028408:	4b25      	ldr	r3, [pc, #148]	@ (80284a0 <__lshift+0xd0>)
 802840a:	4826      	ldr	r0, [pc, #152]	@ (80284a4 <__lshift+0xd4>)
 802840c:	0049      	lsls	r1, r1, #1
 802840e:	f000 fe51 	bl	80290b4 <__assert_func>
 8028412:	3101      	adds	r1, #1
 8028414:	005b      	lsls	r3, r3, #1
 8028416:	e7e8      	b.n	80283ea <__lshift+0x1a>
 8028418:	0098      	lsls	r0, r3, #2
 802841a:	500a      	str	r2, [r1, r0]
 802841c:	3301      	adds	r3, #1
 802841e:	42bb      	cmp	r3, r7
 8028420:	dbfa      	blt.n	8028418 <__lshift+0x48>
 8028422:	43fb      	mvns	r3, r7
 8028424:	17db      	asrs	r3, r3, #31
 8028426:	401f      	ands	r7, r3
 8028428:	00bf      	lsls	r7, r7, #2
 802842a:	0023      	movs	r3, r4
 802842c:	201f      	movs	r0, #31
 802842e:	19c9      	adds	r1, r1, r7
 8028430:	0037      	movs	r7, r6
 8028432:	6922      	ldr	r2, [r4, #16]
 8028434:	3314      	adds	r3, #20
 8028436:	0092      	lsls	r2, r2, #2
 8028438:	189a      	adds	r2, r3, r2
 802843a:	4007      	ands	r7, r0
 802843c:	4206      	tst	r6, r0
 802843e:	d029      	beq.n	8028494 <__lshift+0xc4>
 8028440:	3001      	adds	r0, #1
 8028442:	1bc0      	subs	r0, r0, r7
 8028444:	9003      	str	r0, [sp, #12]
 8028446:	468c      	mov	ip, r1
 8028448:	2000      	movs	r0, #0
 802844a:	681e      	ldr	r6, [r3, #0]
 802844c:	40be      	lsls	r6, r7
 802844e:	4306      	orrs	r6, r0
 8028450:	4660      	mov	r0, ip
 8028452:	c040      	stmia	r0!, {r6}
 8028454:	4684      	mov	ip, r0
 8028456:	9e03      	ldr	r6, [sp, #12]
 8028458:	cb01      	ldmia	r3!, {r0}
 802845a:	40f0      	lsrs	r0, r6
 802845c:	429a      	cmp	r2, r3
 802845e:	d8f4      	bhi.n	802844a <__lshift+0x7a>
 8028460:	0026      	movs	r6, r4
 8028462:	3615      	adds	r6, #21
 8028464:	2304      	movs	r3, #4
 8028466:	42b2      	cmp	r2, r6
 8028468:	d304      	bcc.n	8028474 <__lshift+0xa4>
 802846a:	1b13      	subs	r3, r2, r4
 802846c:	3b15      	subs	r3, #21
 802846e:	089b      	lsrs	r3, r3, #2
 8028470:	3301      	adds	r3, #1
 8028472:	009b      	lsls	r3, r3, #2
 8028474:	50c8      	str	r0, [r1, r3]
 8028476:	2800      	cmp	r0, #0
 8028478:	d002      	beq.n	8028480 <__lshift+0xb0>
 802847a:	9b01      	ldr	r3, [sp, #4]
 802847c:	3302      	adds	r3, #2
 802847e:	9300      	str	r3, [sp, #0]
 8028480:	9b00      	ldr	r3, [sp, #0]
 8028482:	9802      	ldr	r0, [sp, #8]
 8028484:	3b01      	subs	r3, #1
 8028486:	0021      	movs	r1, r4
 8028488:	612b      	str	r3, [r5, #16]
 802848a:	f7ff fd7f 	bl	8027f8c <_Bfree>
 802848e:	0028      	movs	r0, r5
 8028490:	b005      	add	sp, #20
 8028492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028494:	cb01      	ldmia	r3!, {r0}
 8028496:	c101      	stmia	r1!, {r0}
 8028498:	429a      	cmp	r2, r3
 802849a:	d8fb      	bhi.n	8028494 <__lshift+0xc4>
 802849c:	e7f0      	b.n	8028480 <__lshift+0xb0>
 802849e:	46c0      	nop			@ (mov r8, r8)
 80284a0:	0802ee6a 	.word	0x0802ee6a
 80284a4:	0802eedb 	.word	0x0802eedb

080284a8 <__mcmp>:
 80284a8:	b530      	push	{r4, r5, lr}
 80284aa:	690b      	ldr	r3, [r1, #16]
 80284ac:	6904      	ldr	r4, [r0, #16]
 80284ae:	0002      	movs	r2, r0
 80284b0:	1ae0      	subs	r0, r4, r3
 80284b2:	429c      	cmp	r4, r3
 80284b4:	d10f      	bne.n	80284d6 <__mcmp+0x2e>
 80284b6:	3214      	adds	r2, #20
 80284b8:	009b      	lsls	r3, r3, #2
 80284ba:	3114      	adds	r1, #20
 80284bc:	0014      	movs	r4, r2
 80284be:	18c9      	adds	r1, r1, r3
 80284c0:	18d2      	adds	r2, r2, r3
 80284c2:	3a04      	subs	r2, #4
 80284c4:	3904      	subs	r1, #4
 80284c6:	6815      	ldr	r5, [r2, #0]
 80284c8:	680b      	ldr	r3, [r1, #0]
 80284ca:	429d      	cmp	r5, r3
 80284cc:	d004      	beq.n	80284d8 <__mcmp+0x30>
 80284ce:	2001      	movs	r0, #1
 80284d0:	429d      	cmp	r5, r3
 80284d2:	d200      	bcs.n	80284d6 <__mcmp+0x2e>
 80284d4:	3802      	subs	r0, #2
 80284d6:	bd30      	pop	{r4, r5, pc}
 80284d8:	4294      	cmp	r4, r2
 80284da:	d3f2      	bcc.n	80284c2 <__mcmp+0x1a>
 80284dc:	e7fb      	b.n	80284d6 <__mcmp+0x2e>
	...

080284e0 <__mdiff>:
 80284e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80284e2:	000c      	movs	r4, r1
 80284e4:	b087      	sub	sp, #28
 80284e6:	9000      	str	r0, [sp, #0]
 80284e8:	0011      	movs	r1, r2
 80284ea:	0020      	movs	r0, r4
 80284ec:	0017      	movs	r7, r2
 80284ee:	f7ff ffdb 	bl	80284a8 <__mcmp>
 80284f2:	1e05      	subs	r5, r0, #0
 80284f4:	d110      	bne.n	8028518 <__mdiff+0x38>
 80284f6:	0001      	movs	r1, r0
 80284f8:	9800      	ldr	r0, [sp, #0]
 80284fa:	f7ff fd03 	bl	8027f04 <_Balloc>
 80284fe:	1e02      	subs	r2, r0, #0
 8028500:	d104      	bne.n	802850c <__mdiff+0x2c>
 8028502:	4b40      	ldr	r3, [pc, #256]	@ (8028604 <__mdiff+0x124>)
 8028504:	4840      	ldr	r0, [pc, #256]	@ (8028608 <__mdiff+0x128>)
 8028506:	4941      	ldr	r1, [pc, #260]	@ (802860c <__mdiff+0x12c>)
 8028508:	f000 fdd4 	bl	80290b4 <__assert_func>
 802850c:	2301      	movs	r3, #1
 802850e:	6145      	str	r5, [r0, #20]
 8028510:	6103      	str	r3, [r0, #16]
 8028512:	0010      	movs	r0, r2
 8028514:	b007      	add	sp, #28
 8028516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028518:	2600      	movs	r6, #0
 802851a:	42b0      	cmp	r0, r6
 802851c:	da03      	bge.n	8028526 <__mdiff+0x46>
 802851e:	0023      	movs	r3, r4
 8028520:	003c      	movs	r4, r7
 8028522:	001f      	movs	r7, r3
 8028524:	3601      	adds	r6, #1
 8028526:	6861      	ldr	r1, [r4, #4]
 8028528:	9800      	ldr	r0, [sp, #0]
 802852a:	f7ff fceb 	bl	8027f04 <_Balloc>
 802852e:	1e02      	subs	r2, r0, #0
 8028530:	d103      	bne.n	802853a <__mdiff+0x5a>
 8028532:	4b34      	ldr	r3, [pc, #208]	@ (8028604 <__mdiff+0x124>)
 8028534:	4834      	ldr	r0, [pc, #208]	@ (8028608 <__mdiff+0x128>)
 8028536:	4936      	ldr	r1, [pc, #216]	@ (8028610 <__mdiff+0x130>)
 8028538:	e7e6      	b.n	8028508 <__mdiff+0x28>
 802853a:	6923      	ldr	r3, [r4, #16]
 802853c:	3414      	adds	r4, #20
 802853e:	9300      	str	r3, [sp, #0]
 8028540:	009b      	lsls	r3, r3, #2
 8028542:	18e3      	adds	r3, r4, r3
 8028544:	0021      	movs	r1, r4
 8028546:	9401      	str	r4, [sp, #4]
 8028548:	003c      	movs	r4, r7
 802854a:	9302      	str	r3, [sp, #8]
 802854c:	693b      	ldr	r3, [r7, #16]
 802854e:	3414      	adds	r4, #20
 8028550:	009b      	lsls	r3, r3, #2
 8028552:	18e3      	adds	r3, r4, r3
 8028554:	9303      	str	r3, [sp, #12]
 8028556:	0003      	movs	r3, r0
 8028558:	60c6      	str	r6, [r0, #12]
 802855a:	468c      	mov	ip, r1
 802855c:	2000      	movs	r0, #0
 802855e:	3314      	adds	r3, #20
 8028560:	9304      	str	r3, [sp, #16]
 8028562:	9305      	str	r3, [sp, #20]
 8028564:	4663      	mov	r3, ip
 8028566:	cb20      	ldmia	r3!, {r5}
 8028568:	b2a9      	uxth	r1, r5
 802856a:	000e      	movs	r6, r1
 802856c:	469c      	mov	ip, r3
 802856e:	cc08      	ldmia	r4!, {r3}
 8028570:	0c2d      	lsrs	r5, r5, #16
 8028572:	b299      	uxth	r1, r3
 8028574:	1a71      	subs	r1, r6, r1
 8028576:	1809      	adds	r1, r1, r0
 8028578:	0c1b      	lsrs	r3, r3, #16
 802857a:	1408      	asrs	r0, r1, #16
 802857c:	1aeb      	subs	r3, r5, r3
 802857e:	181b      	adds	r3, r3, r0
 8028580:	1418      	asrs	r0, r3, #16
 8028582:	b289      	uxth	r1, r1
 8028584:	041b      	lsls	r3, r3, #16
 8028586:	4319      	orrs	r1, r3
 8028588:	9b05      	ldr	r3, [sp, #20]
 802858a:	c302      	stmia	r3!, {r1}
 802858c:	9305      	str	r3, [sp, #20]
 802858e:	9b03      	ldr	r3, [sp, #12]
 8028590:	42a3      	cmp	r3, r4
 8028592:	d8e7      	bhi.n	8028564 <__mdiff+0x84>
 8028594:	0039      	movs	r1, r7
 8028596:	9c03      	ldr	r4, [sp, #12]
 8028598:	3115      	adds	r1, #21
 802859a:	2304      	movs	r3, #4
 802859c:	428c      	cmp	r4, r1
 802859e:	d304      	bcc.n	80285aa <__mdiff+0xca>
 80285a0:	1be3      	subs	r3, r4, r7
 80285a2:	3b15      	subs	r3, #21
 80285a4:	089b      	lsrs	r3, r3, #2
 80285a6:	3301      	adds	r3, #1
 80285a8:	009b      	lsls	r3, r3, #2
 80285aa:	9901      	ldr	r1, [sp, #4]
 80285ac:	18cd      	adds	r5, r1, r3
 80285ae:	9904      	ldr	r1, [sp, #16]
 80285b0:	002e      	movs	r6, r5
 80285b2:	18cb      	adds	r3, r1, r3
 80285b4:	001f      	movs	r7, r3
 80285b6:	9902      	ldr	r1, [sp, #8]
 80285b8:	428e      	cmp	r6, r1
 80285ba:	d311      	bcc.n	80285e0 <__mdiff+0x100>
 80285bc:	9c02      	ldr	r4, [sp, #8]
 80285be:	1ee9      	subs	r1, r5, #3
 80285c0:	2000      	movs	r0, #0
 80285c2:	428c      	cmp	r4, r1
 80285c4:	d304      	bcc.n	80285d0 <__mdiff+0xf0>
 80285c6:	0021      	movs	r1, r4
 80285c8:	3103      	adds	r1, #3
 80285ca:	1b49      	subs	r1, r1, r5
 80285cc:	0889      	lsrs	r1, r1, #2
 80285ce:	0088      	lsls	r0, r1, #2
 80285d0:	181b      	adds	r3, r3, r0
 80285d2:	3b04      	subs	r3, #4
 80285d4:	6819      	ldr	r1, [r3, #0]
 80285d6:	2900      	cmp	r1, #0
 80285d8:	d010      	beq.n	80285fc <__mdiff+0x11c>
 80285da:	9b00      	ldr	r3, [sp, #0]
 80285dc:	6113      	str	r3, [r2, #16]
 80285de:	e798      	b.n	8028512 <__mdiff+0x32>
 80285e0:	4684      	mov	ip, r0
 80285e2:	ce02      	ldmia	r6!, {r1}
 80285e4:	b288      	uxth	r0, r1
 80285e6:	4460      	add	r0, ip
 80285e8:	1400      	asrs	r0, r0, #16
 80285ea:	0c0c      	lsrs	r4, r1, #16
 80285ec:	1904      	adds	r4, r0, r4
 80285ee:	4461      	add	r1, ip
 80285f0:	1420      	asrs	r0, r4, #16
 80285f2:	b289      	uxth	r1, r1
 80285f4:	0424      	lsls	r4, r4, #16
 80285f6:	4321      	orrs	r1, r4
 80285f8:	c702      	stmia	r7!, {r1}
 80285fa:	e7dc      	b.n	80285b6 <__mdiff+0xd6>
 80285fc:	9900      	ldr	r1, [sp, #0]
 80285fe:	3901      	subs	r1, #1
 8028600:	9100      	str	r1, [sp, #0]
 8028602:	e7e6      	b.n	80285d2 <__mdiff+0xf2>
 8028604:	0802ee6a 	.word	0x0802ee6a
 8028608:	0802eedb 	.word	0x0802eedb
 802860c:	00000237 	.word	0x00000237
 8028610:	00000245 	.word	0x00000245

08028614 <__ulp>:
 8028614:	b510      	push	{r4, lr}
 8028616:	2400      	movs	r4, #0
 8028618:	4b0c      	ldr	r3, [pc, #48]	@ (802864c <__ulp+0x38>)
 802861a:	4a0d      	ldr	r2, [pc, #52]	@ (8028650 <__ulp+0x3c>)
 802861c:	400b      	ands	r3, r1
 802861e:	189b      	adds	r3, r3, r2
 8028620:	42a3      	cmp	r3, r4
 8028622:	dc06      	bgt.n	8028632 <__ulp+0x1e>
 8028624:	425b      	negs	r3, r3
 8028626:	151a      	asrs	r2, r3, #20
 8028628:	2a13      	cmp	r2, #19
 802862a:	dc05      	bgt.n	8028638 <__ulp+0x24>
 802862c:	2380      	movs	r3, #128	@ 0x80
 802862e:	031b      	lsls	r3, r3, #12
 8028630:	4113      	asrs	r3, r2
 8028632:	0019      	movs	r1, r3
 8028634:	0020      	movs	r0, r4
 8028636:	bd10      	pop	{r4, pc}
 8028638:	3a14      	subs	r2, #20
 802863a:	2401      	movs	r4, #1
 802863c:	2a1e      	cmp	r2, #30
 802863e:	dc02      	bgt.n	8028646 <__ulp+0x32>
 8028640:	2480      	movs	r4, #128	@ 0x80
 8028642:	0624      	lsls	r4, r4, #24
 8028644:	40d4      	lsrs	r4, r2
 8028646:	2300      	movs	r3, #0
 8028648:	e7f3      	b.n	8028632 <__ulp+0x1e>
 802864a:	46c0      	nop			@ (mov r8, r8)
 802864c:	7ff00000 	.word	0x7ff00000
 8028650:	fcc00000 	.word	0xfcc00000

08028654 <__b2d>:
 8028654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028656:	0006      	movs	r6, r0
 8028658:	6903      	ldr	r3, [r0, #16]
 802865a:	3614      	adds	r6, #20
 802865c:	009b      	lsls	r3, r3, #2
 802865e:	18f3      	adds	r3, r6, r3
 8028660:	1f1d      	subs	r5, r3, #4
 8028662:	682c      	ldr	r4, [r5, #0]
 8028664:	000f      	movs	r7, r1
 8028666:	0020      	movs	r0, r4
 8028668:	9301      	str	r3, [sp, #4]
 802866a:	f7ff fd43 	bl	80280f4 <__hi0bits>
 802866e:	2220      	movs	r2, #32
 8028670:	1a12      	subs	r2, r2, r0
 8028672:	603a      	str	r2, [r7, #0]
 8028674:	0003      	movs	r3, r0
 8028676:	4a1c      	ldr	r2, [pc, #112]	@ (80286e8 <__b2d+0x94>)
 8028678:	280a      	cmp	r0, #10
 802867a:	dc15      	bgt.n	80286a8 <__b2d+0x54>
 802867c:	210b      	movs	r1, #11
 802867e:	0027      	movs	r7, r4
 8028680:	1a09      	subs	r1, r1, r0
 8028682:	40cf      	lsrs	r7, r1
 8028684:	433a      	orrs	r2, r7
 8028686:	468c      	mov	ip, r1
 8028688:	0011      	movs	r1, r2
 802868a:	2200      	movs	r2, #0
 802868c:	42ae      	cmp	r6, r5
 802868e:	d202      	bcs.n	8028696 <__b2d+0x42>
 8028690:	9a01      	ldr	r2, [sp, #4]
 8028692:	3a08      	subs	r2, #8
 8028694:	6812      	ldr	r2, [r2, #0]
 8028696:	3315      	adds	r3, #21
 8028698:	409c      	lsls	r4, r3
 802869a:	4663      	mov	r3, ip
 802869c:	0027      	movs	r7, r4
 802869e:	40da      	lsrs	r2, r3
 80286a0:	4317      	orrs	r7, r2
 80286a2:	0038      	movs	r0, r7
 80286a4:	b003      	add	sp, #12
 80286a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80286a8:	2700      	movs	r7, #0
 80286aa:	42ae      	cmp	r6, r5
 80286ac:	d202      	bcs.n	80286b4 <__b2d+0x60>
 80286ae:	9d01      	ldr	r5, [sp, #4]
 80286b0:	3d08      	subs	r5, #8
 80286b2:	682f      	ldr	r7, [r5, #0]
 80286b4:	210b      	movs	r1, #11
 80286b6:	4249      	negs	r1, r1
 80286b8:	468c      	mov	ip, r1
 80286ba:	449c      	add	ip, r3
 80286bc:	2b0b      	cmp	r3, #11
 80286be:	d010      	beq.n	80286e2 <__b2d+0x8e>
 80286c0:	4661      	mov	r1, ip
 80286c2:	2320      	movs	r3, #32
 80286c4:	408c      	lsls	r4, r1
 80286c6:	1a5b      	subs	r3, r3, r1
 80286c8:	0039      	movs	r1, r7
 80286ca:	40d9      	lsrs	r1, r3
 80286cc:	430c      	orrs	r4, r1
 80286ce:	4322      	orrs	r2, r4
 80286d0:	0011      	movs	r1, r2
 80286d2:	2200      	movs	r2, #0
 80286d4:	42b5      	cmp	r5, r6
 80286d6:	d901      	bls.n	80286dc <__b2d+0x88>
 80286d8:	3d04      	subs	r5, #4
 80286da:	682a      	ldr	r2, [r5, #0]
 80286dc:	4664      	mov	r4, ip
 80286de:	40a7      	lsls	r7, r4
 80286e0:	e7dd      	b.n	802869e <__b2d+0x4a>
 80286e2:	4322      	orrs	r2, r4
 80286e4:	0011      	movs	r1, r2
 80286e6:	e7dc      	b.n	80286a2 <__b2d+0x4e>
 80286e8:	3ff00000 	.word	0x3ff00000

080286ec <__d2b>:
 80286ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80286ee:	2101      	movs	r1, #1
 80286f0:	0016      	movs	r6, r2
 80286f2:	001f      	movs	r7, r3
 80286f4:	f7ff fc06 	bl	8027f04 <_Balloc>
 80286f8:	1e04      	subs	r4, r0, #0
 80286fa:	d105      	bne.n	8028708 <__d2b+0x1c>
 80286fc:	0022      	movs	r2, r4
 80286fe:	4b25      	ldr	r3, [pc, #148]	@ (8028794 <__d2b+0xa8>)
 8028700:	4825      	ldr	r0, [pc, #148]	@ (8028798 <__d2b+0xac>)
 8028702:	4926      	ldr	r1, [pc, #152]	@ (802879c <__d2b+0xb0>)
 8028704:	f000 fcd6 	bl	80290b4 <__assert_func>
 8028708:	033b      	lsls	r3, r7, #12
 802870a:	007d      	lsls	r5, r7, #1
 802870c:	0b1b      	lsrs	r3, r3, #12
 802870e:	0d6d      	lsrs	r5, r5, #21
 8028710:	d002      	beq.n	8028718 <__d2b+0x2c>
 8028712:	2280      	movs	r2, #128	@ 0x80
 8028714:	0352      	lsls	r2, r2, #13
 8028716:	4313      	orrs	r3, r2
 8028718:	9301      	str	r3, [sp, #4]
 802871a:	2e00      	cmp	r6, #0
 802871c:	d025      	beq.n	802876a <__d2b+0x7e>
 802871e:	4668      	mov	r0, sp
 8028720:	9600      	str	r6, [sp, #0]
 8028722:	f7ff fd08 	bl	8028136 <__lo0bits>
 8028726:	9b01      	ldr	r3, [sp, #4]
 8028728:	9900      	ldr	r1, [sp, #0]
 802872a:	2800      	cmp	r0, #0
 802872c:	d01b      	beq.n	8028766 <__d2b+0x7a>
 802872e:	2220      	movs	r2, #32
 8028730:	001e      	movs	r6, r3
 8028732:	1a12      	subs	r2, r2, r0
 8028734:	4096      	lsls	r6, r2
 8028736:	0032      	movs	r2, r6
 8028738:	40c3      	lsrs	r3, r0
 802873a:	430a      	orrs	r2, r1
 802873c:	6162      	str	r2, [r4, #20]
 802873e:	9301      	str	r3, [sp, #4]
 8028740:	9e01      	ldr	r6, [sp, #4]
 8028742:	61a6      	str	r6, [r4, #24]
 8028744:	1e73      	subs	r3, r6, #1
 8028746:	419e      	sbcs	r6, r3
 8028748:	3601      	adds	r6, #1
 802874a:	6126      	str	r6, [r4, #16]
 802874c:	2d00      	cmp	r5, #0
 802874e:	d014      	beq.n	802877a <__d2b+0x8e>
 8028750:	2635      	movs	r6, #53	@ 0x35
 8028752:	4b13      	ldr	r3, [pc, #76]	@ (80287a0 <__d2b+0xb4>)
 8028754:	18ed      	adds	r5, r5, r3
 8028756:	9b08      	ldr	r3, [sp, #32]
 8028758:	182d      	adds	r5, r5, r0
 802875a:	601d      	str	r5, [r3, #0]
 802875c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802875e:	1a36      	subs	r6, r6, r0
 8028760:	601e      	str	r6, [r3, #0]
 8028762:	0020      	movs	r0, r4
 8028764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028766:	6161      	str	r1, [r4, #20]
 8028768:	e7ea      	b.n	8028740 <__d2b+0x54>
 802876a:	a801      	add	r0, sp, #4
 802876c:	f7ff fce3 	bl	8028136 <__lo0bits>
 8028770:	9b01      	ldr	r3, [sp, #4]
 8028772:	2601      	movs	r6, #1
 8028774:	6163      	str	r3, [r4, #20]
 8028776:	3020      	adds	r0, #32
 8028778:	e7e7      	b.n	802874a <__d2b+0x5e>
 802877a:	4b0a      	ldr	r3, [pc, #40]	@ (80287a4 <__d2b+0xb8>)
 802877c:	18c0      	adds	r0, r0, r3
 802877e:	9b08      	ldr	r3, [sp, #32]
 8028780:	6018      	str	r0, [r3, #0]
 8028782:	4b09      	ldr	r3, [pc, #36]	@ (80287a8 <__d2b+0xbc>)
 8028784:	18f3      	adds	r3, r6, r3
 8028786:	009b      	lsls	r3, r3, #2
 8028788:	18e3      	adds	r3, r4, r3
 802878a:	6958      	ldr	r0, [r3, #20]
 802878c:	f7ff fcb2 	bl	80280f4 <__hi0bits>
 8028790:	0176      	lsls	r6, r6, #5
 8028792:	e7e3      	b.n	802875c <__d2b+0x70>
 8028794:	0802ee6a 	.word	0x0802ee6a
 8028798:	0802eedb 	.word	0x0802eedb
 802879c:	0000030f 	.word	0x0000030f
 80287a0:	fffffbcd 	.word	0xfffffbcd
 80287a4:	fffffbce 	.word	0xfffffbce
 80287a8:	3fffffff 	.word	0x3fffffff

080287ac <__ratio>:
 80287ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80287ae:	b087      	sub	sp, #28
 80287b0:	000f      	movs	r7, r1
 80287b2:	a904      	add	r1, sp, #16
 80287b4:	0006      	movs	r6, r0
 80287b6:	f7ff ff4d 	bl	8028654 <__b2d>
 80287ba:	9000      	str	r0, [sp, #0]
 80287bc:	9101      	str	r1, [sp, #4]
 80287be:	9b00      	ldr	r3, [sp, #0]
 80287c0:	9c01      	ldr	r4, [sp, #4]
 80287c2:	0038      	movs	r0, r7
 80287c4:	a905      	add	r1, sp, #20
 80287c6:	9302      	str	r3, [sp, #8]
 80287c8:	9403      	str	r4, [sp, #12]
 80287ca:	f7ff ff43 	bl	8028654 <__b2d>
 80287ce:	000d      	movs	r5, r1
 80287d0:	0002      	movs	r2, r0
 80287d2:	000b      	movs	r3, r1
 80287d4:	6930      	ldr	r0, [r6, #16]
 80287d6:	6939      	ldr	r1, [r7, #16]
 80287d8:	9e04      	ldr	r6, [sp, #16]
 80287da:	1a40      	subs	r0, r0, r1
 80287dc:	9905      	ldr	r1, [sp, #20]
 80287de:	0140      	lsls	r0, r0, #5
 80287e0:	1a71      	subs	r1, r6, r1
 80287e2:	1841      	adds	r1, r0, r1
 80287e4:	0508      	lsls	r0, r1, #20
 80287e6:	2900      	cmp	r1, #0
 80287e8:	dd08      	ble.n	80287fc <__ratio+0x50>
 80287ea:	9901      	ldr	r1, [sp, #4]
 80287ec:	1841      	adds	r1, r0, r1
 80287ee:	9103      	str	r1, [sp, #12]
 80287f0:	9802      	ldr	r0, [sp, #8]
 80287f2:	9903      	ldr	r1, [sp, #12]
 80287f4:	f7d9 fc74 	bl	80020e0 <__aeabi_ddiv>
 80287f8:	b007      	add	sp, #28
 80287fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80287fc:	1a2b      	subs	r3, r5, r0
 80287fe:	e7f7      	b.n	80287f0 <__ratio+0x44>

08028800 <__copybits>:
 8028800:	b570      	push	{r4, r5, r6, lr}
 8028802:	0014      	movs	r4, r2
 8028804:	0005      	movs	r5, r0
 8028806:	3901      	subs	r1, #1
 8028808:	6913      	ldr	r3, [r2, #16]
 802880a:	1149      	asrs	r1, r1, #5
 802880c:	3101      	adds	r1, #1
 802880e:	0089      	lsls	r1, r1, #2
 8028810:	3414      	adds	r4, #20
 8028812:	009b      	lsls	r3, r3, #2
 8028814:	1841      	adds	r1, r0, r1
 8028816:	18e3      	adds	r3, r4, r3
 8028818:	42a3      	cmp	r3, r4
 802881a:	d80d      	bhi.n	8028838 <__copybits+0x38>
 802881c:	0014      	movs	r4, r2
 802881e:	3411      	adds	r4, #17
 8028820:	2500      	movs	r5, #0
 8028822:	42a3      	cmp	r3, r4
 8028824:	d303      	bcc.n	802882e <__copybits+0x2e>
 8028826:	1a9b      	subs	r3, r3, r2
 8028828:	3b11      	subs	r3, #17
 802882a:	089b      	lsrs	r3, r3, #2
 802882c:	009d      	lsls	r5, r3, #2
 802882e:	2300      	movs	r3, #0
 8028830:	1940      	adds	r0, r0, r5
 8028832:	4281      	cmp	r1, r0
 8028834:	d803      	bhi.n	802883e <__copybits+0x3e>
 8028836:	bd70      	pop	{r4, r5, r6, pc}
 8028838:	cc40      	ldmia	r4!, {r6}
 802883a:	c540      	stmia	r5!, {r6}
 802883c:	e7ec      	b.n	8028818 <__copybits+0x18>
 802883e:	c008      	stmia	r0!, {r3}
 8028840:	e7f7      	b.n	8028832 <__copybits+0x32>

08028842 <__any_on>:
 8028842:	0002      	movs	r2, r0
 8028844:	6900      	ldr	r0, [r0, #16]
 8028846:	b510      	push	{r4, lr}
 8028848:	3214      	adds	r2, #20
 802884a:	114b      	asrs	r3, r1, #5
 802884c:	4298      	cmp	r0, r3
 802884e:	db13      	blt.n	8028878 <__any_on+0x36>
 8028850:	dd0c      	ble.n	802886c <__any_on+0x2a>
 8028852:	241f      	movs	r4, #31
 8028854:	0008      	movs	r0, r1
 8028856:	4020      	ands	r0, r4
 8028858:	4221      	tst	r1, r4
 802885a:	d007      	beq.n	802886c <__any_on+0x2a>
 802885c:	0099      	lsls	r1, r3, #2
 802885e:	588c      	ldr	r4, [r1, r2]
 8028860:	0021      	movs	r1, r4
 8028862:	40c1      	lsrs	r1, r0
 8028864:	4081      	lsls	r1, r0
 8028866:	2001      	movs	r0, #1
 8028868:	428c      	cmp	r4, r1
 802886a:	d104      	bne.n	8028876 <__any_on+0x34>
 802886c:	009b      	lsls	r3, r3, #2
 802886e:	18d3      	adds	r3, r2, r3
 8028870:	4293      	cmp	r3, r2
 8028872:	d803      	bhi.n	802887c <__any_on+0x3a>
 8028874:	2000      	movs	r0, #0
 8028876:	bd10      	pop	{r4, pc}
 8028878:	0003      	movs	r3, r0
 802887a:	e7f7      	b.n	802886c <__any_on+0x2a>
 802887c:	3b04      	subs	r3, #4
 802887e:	6819      	ldr	r1, [r3, #0]
 8028880:	2900      	cmp	r1, #0
 8028882:	d0f5      	beq.n	8028870 <__any_on+0x2e>
 8028884:	2001      	movs	r0, #1
 8028886:	e7f6      	b.n	8028876 <__any_on+0x34>

08028888 <__ascii_wctomb>:
 8028888:	0003      	movs	r3, r0
 802888a:	1e08      	subs	r0, r1, #0
 802888c:	d005      	beq.n	802889a <__ascii_wctomb+0x12>
 802888e:	2aff      	cmp	r2, #255	@ 0xff
 8028890:	d904      	bls.n	802889c <__ascii_wctomb+0x14>
 8028892:	228a      	movs	r2, #138	@ 0x8a
 8028894:	2001      	movs	r0, #1
 8028896:	601a      	str	r2, [r3, #0]
 8028898:	4240      	negs	r0, r0
 802889a:	4770      	bx	lr
 802889c:	2001      	movs	r0, #1
 802889e:	700a      	strb	r2, [r1, #0]
 80288a0:	e7fb      	b.n	802889a <__ascii_wctomb+0x12>
	...

080288a4 <__ssputs_r>:
 80288a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80288a6:	688e      	ldr	r6, [r1, #8]
 80288a8:	b085      	sub	sp, #20
 80288aa:	001f      	movs	r7, r3
 80288ac:	000c      	movs	r4, r1
 80288ae:	680b      	ldr	r3, [r1, #0]
 80288b0:	9002      	str	r0, [sp, #8]
 80288b2:	9203      	str	r2, [sp, #12]
 80288b4:	42be      	cmp	r6, r7
 80288b6:	d830      	bhi.n	802891a <__ssputs_r+0x76>
 80288b8:	210c      	movs	r1, #12
 80288ba:	5e62      	ldrsh	r2, [r4, r1]
 80288bc:	2190      	movs	r1, #144	@ 0x90
 80288be:	00c9      	lsls	r1, r1, #3
 80288c0:	420a      	tst	r2, r1
 80288c2:	d028      	beq.n	8028916 <__ssputs_r+0x72>
 80288c4:	2003      	movs	r0, #3
 80288c6:	6921      	ldr	r1, [r4, #16]
 80288c8:	1a5b      	subs	r3, r3, r1
 80288ca:	9301      	str	r3, [sp, #4]
 80288cc:	6963      	ldr	r3, [r4, #20]
 80288ce:	4343      	muls	r3, r0
 80288d0:	9801      	ldr	r0, [sp, #4]
 80288d2:	0fdd      	lsrs	r5, r3, #31
 80288d4:	18ed      	adds	r5, r5, r3
 80288d6:	1c7b      	adds	r3, r7, #1
 80288d8:	181b      	adds	r3, r3, r0
 80288da:	106d      	asrs	r5, r5, #1
 80288dc:	42ab      	cmp	r3, r5
 80288de:	d900      	bls.n	80288e2 <__ssputs_r+0x3e>
 80288e0:	001d      	movs	r5, r3
 80288e2:	0552      	lsls	r2, r2, #21
 80288e4:	d528      	bpl.n	8028938 <__ssputs_r+0x94>
 80288e6:	0029      	movs	r1, r5
 80288e8:	9802      	ldr	r0, [sp, #8]
 80288ea:	f7ff fa69 	bl	8027dc0 <_malloc_r>
 80288ee:	1e06      	subs	r6, r0, #0
 80288f0:	d02c      	beq.n	802894c <__ssputs_r+0xa8>
 80288f2:	9a01      	ldr	r2, [sp, #4]
 80288f4:	6921      	ldr	r1, [r4, #16]
 80288f6:	f7fe f80d 	bl	8026914 <memcpy>
 80288fa:	89a2      	ldrh	r2, [r4, #12]
 80288fc:	4b18      	ldr	r3, [pc, #96]	@ (8028960 <__ssputs_r+0xbc>)
 80288fe:	401a      	ands	r2, r3
 8028900:	2380      	movs	r3, #128	@ 0x80
 8028902:	4313      	orrs	r3, r2
 8028904:	81a3      	strh	r3, [r4, #12]
 8028906:	9b01      	ldr	r3, [sp, #4]
 8028908:	6126      	str	r6, [r4, #16]
 802890a:	18f6      	adds	r6, r6, r3
 802890c:	6026      	str	r6, [r4, #0]
 802890e:	003e      	movs	r6, r7
 8028910:	6165      	str	r5, [r4, #20]
 8028912:	1aed      	subs	r5, r5, r3
 8028914:	60a5      	str	r5, [r4, #8]
 8028916:	42be      	cmp	r6, r7
 8028918:	d900      	bls.n	802891c <__ssputs_r+0x78>
 802891a:	003e      	movs	r6, r7
 802891c:	0032      	movs	r2, r6
 802891e:	9903      	ldr	r1, [sp, #12]
 8028920:	6820      	ldr	r0, [r4, #0]
 8028922:	f000 fb7e 	bl	8029022 <memmove>
 8028926:	2000      	movs	r0, #0
 8028928:	68a3      	ldr	r3, [r4, #8]
 802892a:	1b9b      	subs	r3, r3, r6
 802892c:	60a3      	str	r3, [r4, #8]
 802892e:	6823      	ldr	r3, [r4, #0]
 8028930:	199b      	adds	r3, r3, r6
 8028932:	6023      	str	r3, [r4, #0]
 8028934:	b005      	add	sp, #20
 8028936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028938:	002a      	movs	r2, r5
 802893a:	9802      	ldr	r0, [sp, #8]
 802893c:	f000 fc05 	bl	802914a <_realloc_r>
 8028940:	1e06      	subs	r6, r0, #0
 8028942:	d1e0      	bne.n	8028906 <__ssputs_r+0x62>
 8028944:	6921      	ldr	r1, [r4, #16]
 8028946:	9802      	ldr	r0, [sp, #8]
 8028948:	f7fe fe6a 	bl	8027620 <_free_r>
 802894c:	230c      	movs	r3, #12
 802894e:	2001      	movs	r0, #1
 8028950:	9a02      	ldr	r2, [sp, #8]
 8028952:	4240      	negs	r0, r0
 8028954:	6013      	str	r3, [r2, #0]
 8028956:	89a2      	ldrh	r2, [r4, #12]
 8028958:	3334      	adds	r3, #52	@ 0x34
 802895a:	4313      	orrs	r3, r2
 802895c:	81a3      	strh	r3, [r4, #12]
 802895e:	e7e9      	b.n	8028934 <__ssputs_r+0x90>
 8028960:	fffffb7f 	.word	0xfffffb7f

08028964 <_svfiprintf_r>:
 8028964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028966:	b0a1      	sub	sp, #132	@ 0x84
 8028968:	9003      	str	r0, [sp, #12]
 802896a:	001d      	movs	r5, r3
 802896c:	898b      	ldrh	r3, [r1, #12]
 802896e:	000f      	movs	r7, r1
 8028970:	0016      	movs	r6, r2
 8028972:	061b      	lsls	r3, r3, #24
 8028974:	d511      	bpl.n	802899a <_svfiprintf_r+0x36>
 8028976:	690b      	ldr	r3, [r1, #16]
 8028978:	2b00      	cmp	r3, #0
 802897a:	d10e      	bne.n	802899a <_svfiprintf_r+0x36>
 802897c:	2140      	movs	r1, #64	@ 0x40
 802897e:	f7ff fa1f 	bl	8027dc0 <_malloc_r>
 8028982:	6038      	str	r0, [r7, #0]
 8028984:	6138      	str	r0, [r7, #16]
 8028986:	2800      	cmp	r0, #0
 8028988:	d105      	bne.n	8028996 <_svfiprintf_r+0x32>
 802898a:	230c      	movs	r3, #12
 802898c:	9a03      	ldr	r2, [sp, #12]
 802898e:	6013      	str	r3, [r2, #0]
 8028990:	2001      	movs	r0, #1
 8028992:	4240      	negs	r0, r0
 8028994:	e0cf      	b.n	8028b36 <_svfiprintf_r+0x1d2>
 8028996:	2340      	movs	r3, #64	@ 0x40
 8028998:	617b      	str	r3, [r7, #20]
 802899a:	2300      	movs	r3, #0
 802899c:	ac08      	add	r4, sp, #32
 802899e:	6163      	str	r3, [r4, #20]
 80289a0:	3320      	adds	r3, #32
 80289a2:	7663      	strb	r3, [r4, #25]
 80289a4:	3310      	adds	r3, #16
 80289a6:	76a3      	strb	r3, [r4, #26]
 80289a8:	9507      	str	r5, [sp, #28]
 80289aa:	0035      	movs	r5, r6
 80289ac:	782b      	ldrb	r3, [r5, #0]
 80289ae:	2b00      	cmp	r3, #0
 80289b0:	d001      	beq.n	80289b6 <_svfiprintf_r+0x52>
 80289b2:	2b25      	cmp	r3, #37	@ 0x25
 80289b4:	d148      	bne.n	8028a48 <_svfiprintf_r+0xe4>
 80289b6:	1bab      	subs	r3, r5, r6
 80289b8:	9305      	str	r3, [sp, #20]
 80289ba:	42b5      	cmp	r5, r6
 80289bc:	d00b      	beq.n	80289d6 <_svfiprintf_r+0x72>
 80289be:	0032      	movs	r2, r6
 80289c0:	0039      	movs	r1, r7
 80289c2:	9803      	ldr	r0, [sp, #12]
 80289c4:	f7ff ff6e 	bl	80288a4 <__ssputs_r>
 80289c8:	3001      	adds	r0, #1
 80289ca:	d100      	bne.n	80289ce <_svfiprintf_r+0x6a>
 80289cc:	e0ae      	b.n	8028b2c <_svfiprintf_r+0x1c8>
 80289ce:	6963      	ldr	r3, [r4, #20]
 80289d0:	9a05      	ldr	r2, [sp, #20]
 80289d2:	189b      	adds	r3, r3, r2
 80289d4:	6163      	str	r3, [r4, #20]
 80289d6:	782b      	ldrb	r3, [r5, #0]
 80289d8:	2b00      	cmp	r3, #0
 80289da:	d100      	bne.n	80289de <_svfiprintf_r+0x7a>
 80289dc:	e0a6      	b.n	8028b2c <_svfiprintf_r+0x1c8>
 80289de:	2201      	movs	r2, #1
 80289e0:	2300      	movs	r3, #0
 80289e2:	4252      	negs	r2, r2
 80289e4:	6062      	str	r2, [r4, #4]
 80289e6:	a904      	add	r1, sp, #16
 80289e8:	3254      	adds	r2, #84	@ 0x54
 80289ea:	1852      	adds	r2, r2, r1
 80289ec:	1c6e      	adds	r6, r5, #1
 80289ee:	6023      	str	r3, [r4, #0]
 80289f0:	60e3      	str	r3, [r4, #12]
 80289f2:	60a3      	str	r3, [r4, #8]
 80289f4:	7013      	strb	r3, [r2, #0]
 80289f6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80289f8:	4b54      	ldr	r3, [pc, #336]	@ (8028b4c <_svfiprintf_r+0x1e8>)
 80289fa:	2205      	movs	r2, #5
 80289fc:	0018      	movs	r0, r3
 80289fe:	7831      	ldrb	r1, [r6, #0]
 8028a00:	9305      	str	r3, [sp, #20]
 8028a02:	f7fd ff7c 	bl	80268fe <memchr>
 8028a06:	1c75      	adds	r5, r6, #1
 8028a08:	2800      	cmp	r0, #0
 8028a0a:	d11f      	bne.n	8028a4c <_svfiprintf_r+0xe8>
 8028a0c:	6822      	ldr	r2, [r4, #0]
 8028a0e:	06d3      	lsls	r3, r2, #27
 8028a10:	d504      	bpl.n	8028a1c <_svfiprintf_r+0xb8>
 8028a12:	2353      	movs	r3, #83	@ 0x53
 8028a14:	a904      	add	r1, sp, #16
 8028a16:	185b      	adds	r3, r3, r1
 8028a18:	2120      	movs	r1, #32
 8028a1a:	7019      	strb	r1, [r3, #0]
 8028a1c:	0713      	lsls	r3, r2, #28
 8028a1e:	d504      	bpl.n	8028a2a <_svfiprintf_r+0xc6>
 8028a20:	2353      	movs	r3, #83	@ 0x53
 8028a22:	a904      	add	r1, sp, #16
 8028a24:	185b      	adds	r3, r3, r1
 8028a26:	212b      	movs	r1, #43	@ 0x2b
 8028a28:	7019      	strb	r1, [r3, #0]
 8028a2a:	7833      	ldrb	r3, [r6, #0]
 8028a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a2e:	d016      	beq.n	8028a5e <_svfiprintf_r+0xfa>
 8028a30:	0035      	movs	r5, r6
 8028a32:	2100      	movs	r1, #0
 8028a34:	200a      	movs	r0, #10
 8028a36:	68e3      	ldr	r3, [r4, #12]
 8028a38:	782a      	ldrb	r2, [r5, #0]
 8028a3a:	1c6e      	adds	r6, r5, #1
 8028a3c:	3a30      	subs	r2, #48	@ 0x30
 8028a3e:	2a09      	cmp	r2, #9
 8028a40:	d950      	bls.n	8028ae4 <_svfiprintf_r+0x180>
 8028a42:	2900      	cmp	r1, #0
 8028a44:	d111      	bne.n	8028a6a <_svfiprintf_r+0x106>
 8028a46:	e017      	b.n	8028a78 <_svfiprintf_r+0x114>
 8028a48:	3501      	adds	r5, #1
 8028a4a:	e7af      	b.n	80289ac <_svfiprintf_r+0x48>
 8028a4c:	9b05      	ldr	r3, [sp, #20]
 8028a4e:	6822      	ldr	r2, [r4, #0]
 8028a50:	1ac0      	subs	r0, r0, r3
 8028a52:	2301      	movs	r3, #1
 8028a54:	4083      	lsls	r3, r0
 8028a56:	4313      	orrs	r3, r2
 8028a58:	002e      	movs	r6, r5
 8028a5a:	6023      	str	r3, [r4, #0]
 8028a5c:	e7cc      	b.n	80289f8 <_svfiprintf_r+0x94>
 8028a5e:	9b07      	ldr	r3, [sp, #28]
 8028a60:	1d19      	adds	r1, r3, #4
 8028a62:	681b      	ldr	r3, [r3, #0]
 8028a64:	9107      	str	r1, [sp, #28]
 8028a66:	2b00      	cmp	r3, #0
 8028a68:	db01      	blt.n	8028a6e <_svfiprintf_r+0x10a>
 8028a6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028a6c:	e004      	b.n	8028a78 <_svfiprintf_r+0x114>
 8028a6e:	425b      	negs	r3, r3
 8028a70:	60e3      	str	r3, [r4, #12]
 8028a72:	2302      	movs	r3, #2
 8028a74:	4313      	orrs	r3, r2
 8028a76:	6023      	str	r3, [r4, #0]
 8028a78:	782b      	ldrb	r3, [r5, #0]
 8028a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8028a7c:	d10c      	bne.n	8028a98 <_svfiprintf_r+0x134>
 8028a7e:	786b      	ldrb	r3, [r5, #1]
 8028a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a82:	d134      	bne.n	8028aee <_svfiprintf_r+0x18a>
 8028a84:	9b07      	ldr	r3, [sp, #28]
 8028a86:	3502      	adds	r5, #2
 8028a88:	1d1a      	adds	r2, r3, #4
 8028a8a:	681b      	ldr	r3, [r3, #0]
 8028a8c:	9207      	str	r2, [sp, #28]
 8028a8e:	2b00      	cmp	r3, #0
 8028a90:	da01      	bge.n	8028a96 <_svfiprintf_r+0x132>
 8028a92:	2301      	movs	r3, #1
 8028a94:	425b      	negs	r3, r3
 8028a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a98:	4e2d      	ldr	r6, [pc, #180]	@ (8028b50 <_svfiprintf_r+0x1ec>)
 8028a9a:	2203      	movs	r2, #3
 8028a9c:	0030      	movs	r0, r6
 8028a9e:	7829      	ldrb	r1, [r5, #0]
 8028aa0:	f7fd ff2d 	bl	80268fe <memchr>
 8028aa4:	2800      	cmp	r0, #0
 8028aa6:	d006      	beq.n	8028ab6 <_svfiprintf_r+0x152>
 8028aa8:	2340      	movs	r3, #64	@ 0x40
 8028aaa:	1b80      	subs	r0, r0, r6
 8028aac:	4083      	lsls	r3, r0
 8028aae:	6822      	ldr	r2, [r4, #0]
 8028ab0:	3501      	adds	r5, #1
 8028ab2:	4313      	orrs	r3, r2
 8028ab4:	6023      	str	r3, [r4, #0]
 8028ab6:	7829      	ldrb	r1, [r5, #0]
 8028ab8:	2206      	movs	r2, #6
 8028aba:	4826      	ldr	r0, [pc, #152]	@ (8028b54 <_svfiprintf_r+0x1f0>)
 8028abc:	1c6e      	adds	r6, r5, #1
 8028abe:	7621      	strb	r1, [r4, #24]
 8028ac0:	f7fd ff1d 	bl	80268fe <memchr>
 8028ac4:	2800      	cmp	r0, #0
 8028ac6:	d038      	beq.n	8028b3a <_svfiprintf_r+0x1d6>
 8028ac8:	4b23      	ldr	r3, [pc, #140]	@ (8028b58 <_svfiprintf_r+0x1f4>)
 8028aca:	2b00      	cmp	r3, #0
 8028acc:	d122      	bne.n	8028b14 <_svfiprintf_r+0x1b0>
 8028ace:	2207      	movs	r2, #7
 8028ad0:	9b07      	ldr	r3, [sp, #28]
 8028ad2:	3307      	adds	r3, #7
 8028ad4:	4393      	bics	r3, r2
 8028ad6:	3308      	adds	r3, #8
 8028ad8:	9307      	str	r3, [sp, #28]
 8028ada:	6963      	ldr	r3, [r4, #20]
 8028adc:	9a04      	ldr	r2, [sp, #16]
 8028ade:	189b      	adds	r3, r3, r2
 8028ae0:	6163      	str	r3, [r4, #20]
 8028ae2:	e762      	b.n	80289aa <_svfiprintf_r+0x46>
 8028ae4:	4343      	muls	r3, r0
 8028ae6:	0035      	movs	r5, r6
 8028ae8:	2101      	movs	r1, #1
 8028aea:	189b      	adds	r3, r3, r2
 8028aec:	e7a4      	b.n	8028a38 <_svfiprintf_r+0xd4>
 8028aee:	2300      	movs	r3, #0
 8028af0:	200a      	movs	r0, #10
 8028af2:	0019      	movs	r1, r3
 8028af4:	3501      	adds	r5, #1
 8028af6:	6063      	str	r3, [r4, #4]
 8028af8:	782a      	ldrb	r2, [r5, #0]
 8028afa:	1c6e      	adds	r6, r5, #1
 8028afc:	3a30      	subs	r2, #48	@ 0x30
 8028afe:	2a09      	cmp	r2, #9
 8028b00:	d903      	bls.n	8028b0a <_svfiprintf_r+0x1a6>
 8028b02:	2b00      	cmp	r3, #0
 8028b04:	d0c8      	beq.n	8028a98 <_svfiprintf_r+0x134>
 8028b06:	9109      	str	r1, [sp, #36]	@ 0x24
 8028b08:	e7c6      	b.n	8028a98 <_svfiprintf_r+0x134>
 8028b0a:	4341      	muls	r1, r0
 8028b0c:	0035      	movs	r5, r6
 8028b0e:	2301      	movs	r3, #1
 8028b10:	1889      	adds	r1, r1, r2
 8028b12:	e7f1      	b.n	8028af8 <_svfiprintf_r+0x194>
 8028b14:	aa07      	add	r2, sp, #28
 8028b16:	9200      	str	r2, [sp, #0]
 8028b18:	0021      	movs	r1, r4
 8028b1a:	003a      	movs	r2, r7
 8028b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8028b5c <_svfiprintf_r+0x1f8>)
 8028b1e:	9803      	ldr	r0, [sp, #12]
 8028b20:	f7fc ffe6 	bl	8025af0 <_printf_float>
 8028b24:	9004      	str	r0, [sp, #16]
 8028b26:	9b04      	ldr	r3, [sp, #16]
 8028b28:	3301      	adds	r3, #1
 8028b2a:	d1d6      	bne.n	8028ada <_svfiprintf_r+0x176>
 8028b2c:	89bb      	ldrh	r3, [r7, #12]
 8028b2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028b30:	065b      	lsls	r3, r3, #25
 8028b32:	d500      	bpl.n	8028b36 <_svfiprintf_r+0x1d2>
 8028b34:	e72c      	b.n	8028990 <_svfiprintf_r+0x2c>
 8028b36:	b021      	add	sp, #132	@ 0x84
 8028b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b3a:	aa07      	add	r2, sp, #28
 8028b3c:	9200      	str	r2, [sp, #0]
 8028b3e:	0021      	movs	r1, r4
 8028b40:	003a      	movs	r2, r7
 8028b42:	4b06      	ldr	r3, [pc, #24]	@ (8028b5c <_svfiprintf_r+0x1f8>)
 8028b44:	9803      	ldr	r0, [sp, #12]
 8028b46:	f7fd fa81 	bl	802604c <_printf_i>
 8028b4a:	e7eb      	b.n	8028b24 <_svfiprintf_r+0x1c0>
 8028b4c:	0802ef34 	.word	0x0802ef34
 8028b50:	0802ef3a 	.word	0x0802ef3a
 8028b54:	0802ef3e 	.word	0x0802ef3e
 8028b58:	08025af1 	.word	0x08025af1
 8028b5c:	080288a5 	.word	0x080288a5

08028b60 <__sfputc_r>:
 8028b60:	6893      	ldr	r3, [r2, #8]
 8028b62:	b510      	push	{r4, lr}
 8028b64:	3b01      	subs	r3, #1
 8028b66:	6093      	str	r3, [r2, #8]
 8028b68:	2b00      	cmp	r3, #0
 8028b6a:	da04      	bge.n	8028b76 <__sfputc_r+0x16>
 8028b6c:	6994      	ldr	r4, [r2, #24]
 8028b6e:	42a3      	cmp	r3, r4
 8028b70:	db07      	blt.n	8028b82 <__sfputc_r+0x22>
 8028b72:	290a      	cmp	r1, #10
 8028b74:	d005      	beq.n	8028b82 <__sfputc_r+0x22>
 8028b76:	6813      	ldr	r3, [r2, #0]
 8028b78:	1c58      	adds	r0, r3, #1
 8028b7a:	6010      	str	r0, [r2, #0]
 8028b7c:	7019      	strb	r1, [r3, #0]
 8028b7e:	0008      	movs	r0, r1
 8028b80:	bd10      	pop	{r4, pc}
 8028b82:	f7fd fd4b 	bl	802661c <__swbuf_r>
 8028b86:	0001      	movs	r1, r0
 8028b88:	e7f9      	b.n	8028b7e <__sfputc_r+0x1e>

08028b8a <__sfputs_r>:
 8028b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b8c:	0006      	movs	r6, r0
 8028b8e:	000f      	movs	r7, r1
 8028b90:	0014      	movs	r4, r2
 8028b92:	18d5      	adds	r5, r2, r3
 8028b94:	42ac      	cmp	r4, r5
 8028b96:	d101      	bne.n	8028b9c <__sfputs_r+0x12>
 8028b98:	2000      	movs	r0, #0
 8028b9a:	e007      	b.n	8028bac <__sfputs_r+0x22>
 8028b9c:	7821      	ldrb	r1, [r4, #0]
 8028b9e:	003a      	movs	r2, r7
 8028ba0:	0030      	movs	r0, r6
 8028ba2:	f7ff ffdd 	bl	8028b60 <__sfputc_r>
 8028ba6:	3401      	adds	r4, #1
 8028ba8:	1c43      	adds	r3, r0, #1
 8028baa:	d1f3      	bne.n	8028b94 <__sfputs_r+0xa>
 8028bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028bb0 <_vfiprintf_r>:
 8028bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028bb2:	b0a1      	sub	sp, #132	@ 0x84
 8028bb4:	000f      	movs	r7, r1
 8028bb6:	0015      	movs	r5, r2
 8028bb8:	001e      	movs	r6, r3
 8028bba:	9003      	str	r0, [sp, #12]
 8028bbc:	2800      	cmp	r0, #0
 8028bbe:	d004      	beq.n	8028bca <_vfiprintf_r+0x1a>
 8028bc0:	6a03      	ldr	r3, [r0, #32]
 8028bc2:	2b00      	cmp	r3, #0
 8028bc4:	d101      	bne.n	8028bca <_vfiprintf_r+0x1a>
 8028bc6:	f7fd fbdd 	bl	8026384 <__sinit>
 8028bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028bcc:	07db      	lsls	r3, r3, #31
 8028bce:	d405      	bmi.n	8028bdc <_vfiprintf_r+0x2c>
 8028bd0:	89bb      	ldrh	r3, [r7, #12]
 8028bd2:	059b      	lsls	r3, r3, #22
 8028bd4:	d402      	bmi.n	8028bdc <_vfiprintf_r+0x2c>
 8028bd6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028bd8:	f7fd fe8f 	bl	80268fa <__retarget_lock_acquire_recursive>
 8028bdc:	89bb      	ldrh	r3, [r7, #12]
 8028bde:	071b      	lsls	r3, r3, #28
 8028be0:	d502      	bpl.n	8028be8 <_vfiprintf_r+0x38>
 8028be2:	693b      	ldr	r3, [r7, #16]
 8028be4:	2b00      	cmp	r3, #0
 8028be6:	d113      	bne.n	8028c10 <_vfiprintf_r+0x60>
 8028be8:	0039      	movs	r1, r7
 8028bea:	9803      	ldr	r0, [sp, #12]
 8028bec:	f7fd fd58 	bl	80266a0 <__swsetup_r>
 8028bf0:	2800      	cmp	r0, #0
 8028bf2:	d00d      	beq.n	8028c10 <_vfiprintf_r+0x60>
 8028bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028bf6:	07db      	lsls	r3, r3, #31
 8028bf8:	d503      	bpl.n	8028c02 <_vfiprintf_r+0x52>
 8028bfa:	2001      	movs	r0, #1
 8028bfc:	4240      	negs	r0, r0
 8028bfe:	b021      	add	sp, #132	@ 0x84
 8028c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c02:	89bb      	ldrh	r3, [r7, #12]
 8028c04:	059b      	lsls	r3, r3, #22
 8028c06:	d4f8      	bmi.n	8028bfa <_vfiprintf_r+0x4a>
 8028c08:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028c0a:	f7fd fe77 	bl	80268fc <__retarget_lock_release_recursive>
 8028c0e:	e7f4      	b.n	8028bfa <_vfiprintf_r+0x4a>
 8028c10:	2300      	movs	r3, #0
 8028c12:	ac08      	add	r4, sp, #32
 8028c14:	6163      	str	r3, [r4, #20]
 8028c16:	3320      	adds	r3, #32
 8028c18:	7663      	strb	r3, [r4, #25]
 8028c1a:	3310      	adds	r3, #16
 8028c1c:	76a3      	strb	r3, [r4, #26]
 8028c1e:	9607      	str	r6, [sp, #28]
 8028c20:	002e      	movs	r6, r5
 8028c22:	7833      	ldrb	r3, [r6, #0]
 8028c24:	2b00      	cmp	r3, #0
 8028c26:	d001      	beq.n	8028c2c <_vfiprintf_r+0x7c>
 8028c28:	2b25      	cmp	r3, #37	@ 0x25
 8028c2a:	d148      	bne.n	8028cbe <_vfiprintf_r+0x10e>
 8028c2c:	1b73      	subs	r3, r6, r5
 8028c2e:	9305      	str	r3, [sp, #20]
 8028c30:	42ae      	cmp	r6, r5
 8028c32:	d00b      	beq.n	8028c4c <_vfiprintf_r+0x9c>
 8028c34:	002a      	movs	r2, r5
 8028c36:	0039      	movs	r1, r7
 8028c38:	9803      	ldr	r0, [sp, #12]
 8028c3a:	f7ff ffa6 	bl	8028b8a <__sfputs_r>
 8028c3e:	3001      	adds	r0, #1
 8028c40:	d100      	bne.n	8028c44 <_vfiprintf_r+0x94>
 8028c42:	e0ae      	b.n	8028da2 <_vfiprintf_r+0x1f2>
 8028c44:	6963      	ldr	r3, [r4, #20]
 8028c46:	9a05      	ldr	r2, [sp, #20]
 8028c48:	189b      	adds	r3, r3, r2
 8028c4a:	6163      	str	r3, [r4, #20]
 8028c4c:	7833      	ldrb	r3, [r6, #0]
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	d100      	bne.n	8028c54 <_vfiprintf_r+0xa4>
 8028c52:	e0a6      	b.n	8028da2 <_vfiprintf_r+0x1f2>
 8028c54:	2201      	movs	r2, #1
 8028c56:	2300      	movs	r3, #0
 8028c58:	4252      	negs	r2, r2
 8028c5a:	6062      	str	r2, [r4, #4]
 8028c5c:	a904      	add	r1, sp, #16
 8028c5e:	3254      	adds	r2, #84	@ 0x54
 8028c60:	1852      	adds	r2, r2, r1
 8028c62:	1c75      	adds	r5, r6, #1
 8028c64:	6023      	str	r3, [r4, #0]
 8028c66:	60e3      	str	r3, [r4, #12]
 8028c68:	60a3      	str	r3, [r4, #8]
 8028c6a:	7013      	strb	r3, [r2, #0]
 8028c6c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028c6e:	4b59      	ldr	r3, [pc, #356]	@ (8028dd4 <_vfiprintf_r+0x224>)
 8028c70:	2205      	movs	r2, #5
 8028c72:	0018      	movs	r0, r3
 8028c74:	7829      	ldrb	r1, [r5, #0]
 8028c76:	9305      	str	r3, [sp, #20]
 8028c78:	f7fd fe41 	bl	80268fe <memchr>
 8028c7c:	1c6e      	adds	r6, r5, #1
 8028c7e:	2800      	cmp	r0, #0
 8028c80:	d11f      	bne.n	8028cc2 <_vfiprintf_r+0x112>
 8028c82:	6822      	ldr	r2, [r4, #0]
 8028c84:	06d3      	lsls	r3, r2, #27
 8028c86:	d504      	bpl.n	8028c92 <_vfiprintf_r+0xe2>
 8028c88:	2353      	movs	r3, #83	@ 0x53
 8028c8a:	a904      	add	r1, sp, #16
 8028c8c:	185b      	adds	r3, r3, r1
 8028c8e:	2120      	movs	r1, #32
 8028c90:	7019      	strb	r1, [r3, #0]
 8028c92:	0713      	lsls	r3, r2, #28
 8028c94:	d504      	bpl.n	8028ca0 <_vfiprintf_r+0xf0>
 8028c96:	2353      	movs	r3, #83	@ 0x53
 8028c98:	a904      	add	r1, sp, #16
 8028c9a:	185b      	adds	r3, r3, r1
 8028c9c:	212b      	movs	r1, #43	@ 0x2b
 8028c9e:	7019      	strb	r1, [r3, #0]
 8028ca0:	782b      	ldrb	r3, [r5, #0]
 8028ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8028ca4:	d016      	beq.n	8028cd4 <_vfiprintf_r+0x124>
 8028ca6:	002e      	movs	r6, r5
 8028ca8:	2100      	movs	r1, #0
 8028caa:	200a      	movs	r0, #10
 8028cac:	68e3      	ldr	r3, [r4, #12]
 8028cae:	7832      	ldrb	r2, [r6, #0]
 8028cb0:	1c75      	adds	r5, r6, #1
 8028cb2:	3a30      	subs	r2, #48	@ 0x30
 8028cb4:	2a09      	cmp	r2, #9
 8028cb6:	d950      	bls.n	8028d5a <_vfiprintf_r+0x1aa>
 8028cb8:	2900      	cmp	r1, #0
 8028cba:	d111      	bne.n	8028ce0 <_vfiprintf_r+0x130>
 8028cbc:	e017      	b.n	8028cee <_vfiprintf_r+0x13e>
 8028cbe:	3601      	adds	r6, #1
 8028cc0:	e7af      	b.n	8028c22 <_vfiprintf_r+0x72>
 8028cc2:	9b05      	ldr	r3, [sp, #20]
 8028cc4:	6822      	ldr	r2, [r4, #0]
 8028cc6:	1ac0      	subs	r0, r0, r3
 8028cc8:	2301      	movs	r3, #1
 8028cca:	4083      	lsls	r3, r0
 8028ccc:	4313      	orrs	r3, r2
 8028cce:	0035      	movs	r5, r6
 8028cd0:	6023      	str	r3, [r4, #0]
 8028cd2:	e7cc      	b.n	8028c6e <_vfiprintf_r+0xbe>
 8028cd4:	9b07      	ldr	r3, [sp, #28]
 8028cd6:	1d19      	adds	r1, r3, #4
 8028cd8:	681b      	ldr	r3, [r3, #0]
 8028cda:	9107      	str	r1, [sp, #28]
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	db01      	blt.n	8028ce4 <_vfiprintf_r+0x134>
 8028ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028ce2:	e004      	b.n	8028cee <_vfiprintf_r+0x13e>
 8028ce4:	425b      	negs	r3, r3
 8028ce6:	60e3      	str	r3, [r4, #12]
 8028ce8:	2302      	movs	r3, #2
 8028cea:	4313      	orrs	r3, r2
 8028cec:	6023      	str	r3, [r4, #0]
 8028cee:	7833      	ldrb	r3, [r6, #0]
 8028cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8028cf2:	d10c      	bne.n	8028d0e <_vfiprintf_r+0x15e>
 8028cf4:	7873      	ldrb	r3, [r6, #1]
 8028cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8028cf8:	d134      	bne.n	8028d64 <_vfiprintf_r+0x1b4>
 8028cfa:	9b07      	ldr	r3, [sp, #28]
 8028cfc:	3602      	adds	r6, #2
 8028cfe:	1d1a      	adds	r2, r3, #4
 8028d00:	681b      	ldr	r3, [r3, #0]
 8028d02:	9207      	str	r2, [sp, #28]
 8028d04:	2b00      	cmp	r3, #0
 8028d06:	da01      	bge.n	8028d0c <_vfiprintf_r+0x15c>
 8028d08:	2301      	movs	r3, #1
 8028d0a:	425b      	negs	r3, r3
 8028d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8028d0e:	4d32      	ldr	r5, [pc, #200]	@ (8028dd8 <_vfiprintf_r+0x228>)
 8028d10:	2203      	movs	r2, #3
 8028d12:	0028      	movs	r0, r5
 8028d14:	7831      	ldrb	r1, [r6, #0]
 8028d16:	f7fd fdf2 	bl	80268fe <memchr>
 8028d1a:	2800      	cmp	r0, #0
 8028d1c:	d006      	beq.n	8028d2c <_vfiprintf_r+0x17c>
 8028d1e:	2340      	movs	r3, #64	@ 0x40
 8028d20:	1b40      	subs	r0, r0, r5
 8028d22:	4083      	lsls	r3, r0
 8028d24:	6822      	ldr	r2, [r4, #0]
 8028d26:	3601      	adds	r6, #1
 8028d28:	4313      	orrs	r3, r2
 8028d2a:	6023      	str	r3, [r4, #0]
 8028d2c:	7831      	ldrb	r1, [r6, #0]
 8028d2e:	2206      	movs	r2, #6
 8028d30:	482a      	ldr	r0, [pc, #168]	@ (8028ddc <_vfiprintf_r+0x22c>)
 8028d32:	1c75      	adds	r5, r6, #1
 8028d34:	7621      	strb	r1, [r4, #24]
 8028d36:	f7fd fde2 	bl	80268fe <memchr>
 8028d3a:	2800      	cmp	r0, #0
 8028d3c:	d040      	beq.n	8028dc0 <_vfiprintf_r+0x210>
 8028d3e:	4b28      	ldr	r3, [pc, #160]	@ (8028de0 <_vfiprintf_r+0x230>)
 8028d40:	2b00      	cmp	r3, #0
 8028d42:	d122      	bne.n	8028d8a <_vfiprintf_r+0x1da>
 8028d44:	2207      	movs	r2, #7
 8028d46:	9b07      	ldr	r3, [sp, #28]
 8028d48:	3307      	adds	r3, #7
 8028d4a:	4393      	bics	r3, r2
 8028d4c:	3308      	adds	r3, #8
 8028d4e:	9307      	str	r3, [sp, #28]
 8028d50:	6963      	ldr	r3, [r4, #20]
 8028d52:	9a04      	ldr	r2, [sp, #16]
 8028d54:	189b      	adds	r3, r3, r2
 8028d56:	6163      	str	r3, [r4, #20]
 8028d58:	e762      	b.n	8028c20 <_vfiprintf_r+0x70>
 8028d5a:	4343      	muls	r3, r0
 8028d5c:	002e      	movs	r6, r5
 8028d5e:	2101      	movs	r1, #1
 8028d60:	189b      	adds	r3, r3, r2
 8028d62:	e7a4      	b.n	8028cae <_vfiprintf_r+0xfe>
 8028d64:	2300      	movs	r3, #0
 8028d66:	200a      	movs	r0, #10
 8028d68:	0019      	movs	r1, r3
 8028d6a:	3601      	adds	r6, #1
 8028d6c:	6063      	str	r3, [r4, #4]
 8028d6e:	7832      	ldrb	r2, [r6, #0]
 8028d70:	1c75      	adds	r5, r6, #1
 8028d72:	3a30      	subs	r2, #48	@ 0x30
 8028d74:	2a09      	cmp	r2, #9
 8028d76:	d903      	bls.n	8028d80 <_vfiprintf_r+0x1d0>
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	d0c8      	beq.n	8028d0e <_vfiprintf_r+0x15e>
 8028d7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8028d7e:	e7c6      	b.n	8028d0e <_vfiprintf_r+0x15e>
 8028d80:	4341      	muls	r1, r0
 8028d82:	002e      	movs	r6, r5
 8028d84:	2301      	movs	r3, #1
 8028d86:	1889      	adds	r1, r1, r2
 8028d88:	e7f1      	b.n	8028d6e <_vfiprintf_r+0x1be>
 8028d8a:	aa07      	add	r2, sp, #28
 8028d8c:	9200      	str	r2, [sp, #0]
 8028d8e:	0021      	movs	r1, r4
 8028d90:	003a      	movs	r2, r7
 8028d92:	4b14      	ldr	r3, [pc, #80]	@ (8028de4 <_vfiprintf_r+0x234>)
 8028d94:	9803      	ldr	r0, [sp, #12]
 8028d96:	f7fc feab 	bl	8025af0 <_printf_float>
 8028d9a:	9004      	str	r0, [sp, #16]
 8028d9c:	9b04      	ldr	r3, [sp, #16]
 8028d9e:	3301      	adds	r3, #1
 8028da0:	d1d6      	bne.n	8028d50 <_vfiprintf_r+0x1a0>
 8028da2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028da4:	07db      	lsls	r3, r3, #31
 8028da6:	d405      	bmi.n	8028db4 <_vfiprintf_r+0x204>
 8028da8:	89bb      	ldrh	r3, [r7, #12]
 8028daa:	059b      	lsls	r3, r3, #22
 8028dac:	d402      	bmi.n	8028db4 <_vfiprintf_r+0x204>
 8028dae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028db0:	f7fd fda4 	bl	80268fc <__retarget_lock_release_recursive>
 8028db4:	89bb      	ldrh	r3, [r7, #12]
 8028db6:	065b      	lsls	r3, r3, #25
 8028db8:	d500      	bpl.n	8028dbc <_vfiprintf_r+0x20c>
 8028dba:	e71e      	b.n	8028bfa <_vfiprintf_r+0x4a>
 8028dbc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028dbe:	e71e      	b.n	8028bfe <_vfiprintf_r+0x4e>
 8028dc0:	aa07      	add	r2, sp, #28
 8028dc2:	9200      	str	r2, [sp, #0]
 8028dc4:	0021      	movs	r1, r4
 8028dc6:	003a      	movs	r2, r7
 8028dc8:	4b06      	ldr	r3, [pc, #24]	@ (8028de4 <_vfiprintf_r+0x234>)
 8028dca:	9803      	ldr	r0, [sp, #12]
 8028dcc:	f7fd f93e 	bl	802604c <_printf_i>
 8028dd0:	e7e3      	b.n	8028d9a <_vfiprintf_r+0x1ea>
 8028dd2:	46c0      	nop			@ (mov r8, r8)
 8028dd4:	0802ef34 	.word	0x0802ef34
 8028dd8:	0802ef3a 	.word	0x0802ef3a
 8028ddc:	0802ef3e 	.word	0x0802ef3e
 8028de0:	08025af1 	.word	0x08025af1
 8028de4:	08028b8b 	.word	0x08028b8b

08028de8 <__sflush_r>:
 8028de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028dea:	220c      	movs	r2, #12
 8028dec:	5e8b      	ldrsh	r3, [r1, r2]
 8028dee:	0005      	movs	r5, r0
 8028df0:	000c      	movs	r4, r1
 8028df2:	071a      	lsls	r2, r3, #28
 8028df4:	d456      	bmi.n	8028ea4 <__sflush_r+0xbc>
 8028df6:	684a      	ldr	r2, [r1, #4]
 8028df8:	2a00      	cmp	r2, #0
 8028dfa:	dc02      	bgt.n	8028e02 <__sflush_r+0x1a>
 8028dfc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028dfe:	2a00      	cmp	r2, #0
 8028e00:	dd4e      	ble.n	8028ea0 <__sflush_r+0xb8>
 8028e02:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028e04:	2f00      	cmp	r7, #0
 8028e06:	d04b      	beq.n	8028ea0 <__sflush_r+0xb8>
 8028e08:	2200      	movs	r2, #0
 8028e0a:	2080      	movs	r0, #128	@ 0x80
 8028e0c:	682e      	ldr	r6, [r5, #0]
 8028e0e:	602a      	str	r2, [r5, #0]
 8028e10:	001a      	movs	r2, r3
 8028e12:	0140      	lsls	r0, r0, #5
 8028e14:	6a21      	ldr	r1, [r4, #32]
 8028e16:	4002      	ands	r2, r0
 8028e18:	4203      	tst	r3, r0
 8028e1a:	d033      	beq.n	8028e84 <__sflush_r+0x9c>
 8028e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028e1e:	89a3      	ldrh	r3, [r4, #12]
 8028e20:	075b      	lsls	r3, r3, #29
 8028e22:	d506      	bpl.n	8028e32 <__sflush_r+0x4a>
 8028e24:	6863      	ldr	r3, [r4, #4]
 8028e26:	1ad2      	subs	r2, r2, r3
 8028e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028e2a:	2b00      	cmp	r3, #0
 8028e2c:	d001      	beq.n	8028e32 <__sflush_r+0x4a>
 8028e2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028e30:	1ad2      	subs	r2, r2, r3
 8028e32:	2300      	movs	r3, #0
 8028e34:	0028      	movs	r0, r5
 8028e36:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028e38:	6a21      	ldr	r1, [r4, #32]
 8028e3a:	47b8      	blx	r7
 8028e3c:	89a2      	ldrh	r2, [r4, #12]
 8028e3e:	1c43      	adds	r3, r0, #1
 8028e40:	d106      	bne.n	8028e50 <__sflush_r+0x68>
 8028e42:	6829      	ldr	r1, [r5, #0]
 8028e44:	291d      	cmp	r1, #29
 8028e46:	d846      	bhi.n	8028ed6 <__sflush_r+0xee>
 8028e48:	4b29      	ldr	r3, [pc, #164]	@ (8028ef0 <__sflush_r+0x108>)
 8028e4a:	40cb      	lsrs	r3, r1
 8028e4c:	07db      	lsls	r3, r3, #31
 8028e4e:	d542      	bpl.n	8028ed6 <__sflush_r+0xee>
 8028e50:	2300      	movs	r3, #0
 8028e52:	6063      	str	r3, [r4, #4]
 8028e54:	6923      	ldr	r3, [r4, #16]
 8028e56:	6023      	str	r3, [r4, #0]
 8028e58:	04d2      	lsls	r2, r2, #19
 8028e5a:	d505      	bpl.n	8028e68 <__sflush_r+0x80>
 8028e5c:	1c43      	adds	r3, r0, #1
 8028e5e:	d102      	bne.n	8028e66 <__sflush_r+0x7e>
 8028e60:	682b      	ldr	r3, [r5, #0]
 8028e62:	2b00      	cmp	r3, #0
 8028e64:	d100      	bne.n	8028e68 <__sflush_r+0x80>
 8028e66:	6560      	str	r0, [r4, #84]	@ 0x54
 8028e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028e6a:	602e      	str	r6, [r5, #0]
 8028e6c:	2900      	cmp	r1, #0
 8028e6e:	d017      	beq.n	8028ea0 <__sflush_r+0xb8>
 8028e70:	0023      	movs	r3, r4
 8028e72:	3344      	adds	r3, #68	@ 0x44
 8028e74:	4299      	cmp	r1, r3
 8028e76:	d002      	beq.n	8028e7e <__sflush_r+0x96>
 8028e78:	0028      	movs	r0, r5
 8028e7a:	f7fe fbd1 	bl	8027620 <_free_r>
 8028e7e:	2300      	movs	r3, #0
 8028e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8028e82:	e00d      	b.n	8028ea0 <__sflush_r+0xb8>
 8028e84:	2301      	movs	r3, #1
 8028e86:	0028      	movs	r0, r5
 8028e88:	47b8      	blx	r7
 8028e8a:	0002      	movs	r2, r0
 8028e8c:	1c43      	adds	r3, r0, #1
 8028e8e:	d1c6      	bne.n	8028e1e <__sflush_r+0x36>
 8028e90:	682b      	ldr	r3, [r5, #0]
 8028e92:	2b00      	cmp	r3, #0
 8028e94:	d0c3      	beq.n	8028e1e <__sflush_r+0x36>
 8028e96:	2b1d      	cmp	r3, #29
 8028e98:	d001      	beq.n	8028e9e <__sflush_r+0xb6>
 8028e9a:	2b16      	cmp	r3, #22
 8028e9c:	d11a      	bne.n	8028ed4 <__sflush_r+0xec>
 8028e9e:	602e      	str	r6, [r5, #0]
 8028ea0:	2000      	movs	r0, #0
 8028ea2:	e01e      	b.n	8028ee2 <__sflush_r+0xfa>
 8028ea4:	690e      	ldr	r6, [r1, #16]
 8028ea6:	2e00      	cmp	r6, #0
 8028ea8:	d0fa      	beq.n	8028ea0 <__sflush_r+0xb8>
 8028eaa:	680f      	ldr	r7, [r1, #0]
 8028eac:	600e      	str	r6, [r1, #0]
 8028eae:	1bba      	subs	r2, r7, r6
 8028eb0:	9201      	str	r2, [sp, #4]
 8028eb2:	2200      	movs	r2, #0
 8028eb4:	079b      	lsls	r3, r3, #30
 8028eb6:	d100      	bne.n	8028eba <__sflush_r+0xd2>
 8028eb8:	694a      	ldr	r2, [r1, #20]
 8028eba:	60a2      	str	r2, [r4, #8]
 8028ebc:	9b01      	ldr	r3, [sp, #4]
 8028ebe:	2b00      	cmp	r3, #0
 8028ec0:	ddee      	ble.n	8028ea0 <__sflush_r+0xb8>
 8028ec2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028ec4:	0032      	movs	r2, r6
 8028ec6:	001f      	movs	r7, r3
 8028ec8:	0028      	movs	r0, r5
 8028eca:	9b01      	ldr	r3, [sp, #4]
 8028ecc:	6a21      	ldr	r1, [r4, #32]
 8028ece:	47b8      	blx	r7
 8028ed0:	2800      	cmp	r0, #0
 8028ed2:	dc07      	bgt.n	8028ee4 <__sflush_r+0xfc>
 8028ed4:	89a2      	ldrh	r2, [r4, #12]
 8028ed6:	2340      	movs	r3, #64	@ 0x40
 8028ed8:	2001      	movs	r0, #1
 8028eda:	4313      	orrs	r3, r2
 8028edc:	b21b      	sxth	r3, r3
 8028ede:	81a3      	strh	r3, [r4, #12]
 8028ee0:	4240      	negs	r0, r0
 8028ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028ee4:	9b01      	ldr	r3, [sp, #4]
 8028ee6:	1836      	adds	r6, r6, r0
 8028ee8:	1a1b      	subs	r3, r3, r0
 8028eea:	9301      	str	r3, [sp, #4]
 8028eec:	e7e6      	b.n	8028ebc <__sflush_r+0xd4>
 8028eee:	46c0      	nop			@ (mov r8, r8)
 8028ef0:	20400001 	.word	0x20400001

08028ef4 <_fflush_r>:
 8028ef4:	690b      	ldr	r3, [r1, #16]
 8028ef6:	b570      	push	{r4, r5, r6, lr}
 8028ef8:	0005      	movs	r5, r0
 8028efa:	000c      	movs	r4, r1
 8028efc:	2b00      	cmp	r3, #0
 8028efe:	d102      	bne.n	8028f06 <_fflush_r+0x12>
 8028f00:	2500      	movs	r5, #0
 8028f02:	0028      	movs	r0, r5
 8028f04:	bd70      	pop	{r4, r5, r6, pc}
 8028f06:	2800      	cmp	r0, #0
 8028f08:	d004      	beq.n	8028f14 <_fflush_r+0x20>
 8028f0a:	6a03      	ldr	r3, [r0, #32]
 8028f0c:	2b00      	cmp	r3, #0
 8028f0e:	d101      	bne.n	8028f14 <_fflush_r+0x20>
 8028f10:	f7fd fa38 	bl	8026384 <__sinit>
 8028f14:	220c      	movs	r2, #12
 8028f16:	5ea3      	ldrsh	r3, [r4, r2]
 8028f18:	2b00      	cmp	r3, #0
 8028f1a:	d0f1      	beq.n	8028f00 <_fflush_r+0xc>
 8028f1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028f1e:	07d2      	lsls	r2, r2, #31
 8028f20:	d404      	bmi.n	8028f2c <_fflush_r+0x38>
 8028f22:	059b      	lsls	r3, r3, #22
 8028f24:	d402      	bmi.n	8028f2c <_fflush_r+0x38>
 8028f26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028f28:	f7fd fce7 	bl	80268fa <__retarget_lock_acquire_recursive>
 8028f2c:	0028      	movs	r0, r5
 8028f2e:	0021      	movs	r1, r4
 8028f30:	f7ff ff5a 	bl	8028de8 <__sflush_r>
 8028f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028f36:	0005      	movs	r5, r0
 8028f38:	07db      	lsls	r3, r3, #31
 8028f3a:	d4e2      	bmi.n	8028f02 <_fflush_r+0xe>
 8028f3c:	89a3      	ldrh	r3, [r4, #12]
 8028f3e:	059b      	lsls	r3, r3, #22
 8028f40:	d4df      	bmi.n	8028f02 <_fflush_r+0xe>
 8028f42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028f44:	f7fd fcda 	bl	80268fc <__retarget_lock_release_recursive>
 8028f48:	e7db      	b.n	8028f02 <_fflush_r+0xe>
	...

08028f4c <__swhatbuf_r>:
 8028f4c:	b570      	push	{r4, r5, r6, lr}
 8028f4e:	000e      	movs	r6, r1
 8028f50:	001d      	movs	r5, r3
 8028f52:	230e      	movs	r3, #14
 8028f54:	5ec9      	ldrsh	r1, [r1, r3]
 8028f56:	0014      	movs	r4, r2
 8028f58:	b096      	sub	sp, #88	@ 0x58
 8028f5a:	2900      	cmp	r1, #0
 8028f5c:	da0c      	bge.n	8028f78 <__swhatbuf_r+0x2c>
 8028f5e:	89b2      	ldrh	r2, [r6, #12]
 8028f60:	2380      	movs	r3, #128	@ 0x80
 8028f62:	0011      	movs	r1, r2
 8028f64:	4019      	ands	r1, r3
 8028f66:	421a      	tst	r2, r3
 8028f68:	d114      	bne.n	8028f94 <__swhatbuf_r+0x48>
 8028f6a:	2380      	movs	r3, #128	@ 0x80
 8028f6c:	00db      	lsls	r3, r3, #3
 8028f6e:	2000      	movs	r0, #0
 8028f70:	6029      	str	r1, [r5, #0]
 8028f72:	6023      	str	r3, [r4, #0]
 8028f74:	b016      	add	sp, #88	@ 0x58
 8028f76:	bd70      	pop	{r4, r5, r6, pc}
 8028f78:	466a      	mov	r2, sp
 8028f7a:	f000 f865 	bl	8029048 <_fstat_r>
 8028f7e:	2800      	cmp	r0, #0
 8028f80:	dbed      	blt.n	8028f5e <__swhatbuf_r+0x12>
 8028f82:	23f0      	movs	r3, #240	@ 0xf0
 8028f84:	9901      	ldr	r1, [sp, #4]
 8028f86:	021b      	lsls	r3, r3, #8
 8028f88:	4019      	ands	r1, r3
 8028f8a:	4b04      	ldr	r3, [pc, #16]	@ (8028f9c <__swhatbuf_r+0x50>)
 8028f8c:	18c9      	adds	r1, r1, r3
 8028f8e:	424b      	negs	r3, r1
 8028f90:	4159      	adcs	r1, r3
 8028f92:	e7ea      	b.n	8028f6a <__swhatbuf_r+0x1e>
 8028f94:	2100      	movs	r1, #0
 8028f96:	2340      	movs	r3, #64	@ 0x40
 8028f98:	e7e9      	b.n	8028f6e <__swhatbuf_r+0x22>
 8028f9a:	46c0      	nop			@ (mov r8, r8)
 8028f9c:	ffffe000 	.word	0xffffe000

08028fa0 <__smakebuf_r>:
 8028fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028fa2:	2602      	movs	r6, #2
 8028fa4:	898b      	ldrh	r3, [r1, #12]
 8028fa6:	0005      	movs	r5, r0
 8028fa8:	000c      	movs	r4, r1
 8028faa:	b085      	sub	sp, #20
 8028fac:	4233      	tst	r3, r6
 8028fae:	d007      	beq.n	8028fc0 <__smakebuf_r+0x20>
 8028fb0:	0023      	movs	r3, r4
 8028fb2:	3347      	adds	r3, #71	@ 0x47
 8028fb4:	6023      	str	r3, [r4, #0]
 8028fb6:	6123      	str	r3, [r4, #16]
 8028fb8:	2301      	movs	r3, #1
 8028fba:	6163      	str	r3, [r4, #20]
 8028fbc:	b005      	add	sp, #20
 8028fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028fc0:	ab03      	add	r3, sp, #12
 8028fc2:	aa02      	add	r2, sp, #8
 8028fc4:	f7ff ffc2 	bl	8028f4c <__swhatbuf_r>
 8028fc8:	9f02      	ldr	r7, [sp, #8]
 8028fca:	9001      	str	r0, [sp, #4]
 8028fcc:	0039      	movs	r1, r7
 8028fce:	0028      	movs	r0, r5
 8028fd0:	f7fe fef6 	bl	8027dc0 <_malloc_r>
 8028fd4:	2800      	cmp	r0, #0
 8028fd6:	d108      	bne.n	8028fea <__smakebuf_r+0x4a>
 8028fd8:	220c      	movs	r2, #12
 8028fda:	5ea3      	ldrsh	r3, [r4, r2]
 8028fdc:	059a      	lsls	r2, r3, #22
 8028fde:	d4ed      	bmi.n	8028fbc <__smakebuf_r+0x1c>
 8028fe0:	2203      	movs	r2, #3
 8028fe2:	4393      	bics	r3, r2
 8028fe4:	431e      	orrs	r6, r3
 8028fe6:	81a6      	strh	r6, [r4, #12]
 8028fe8:	e7e2      	b.n	8028fb0 <__smakebuf_r+0x10>
 8028fea:	2380      	movs	r3, #128	@ 0x80
 8028fec:	89a2      	ldrh	r2, [r4, #12]
 8028fee:	6020      	str	r0, [r4, #0]
 8028ff0:	4313      	orrs	r3, r2
 8028ff2:	81a3      	strh	r3, [r4, #12]
 8028ff4:	9b03      	ldr	r3, [sp, #12]
 8028ff6:	6120      	str	r0, [r4, #16]
 8028ff8:	6167      	str	r7, [r4, #20]
 8028ffa:	2b00      	cmp	r3, #0
 8028ffc:	d00c      	beq.n	8029018 <__smakebuf_r+0x78>
 8028ffe:	0028      	movs	r0, r5
 8029000:	230e      	movs	r3, #14
 8029002:	5ee1      	ldrsh	r1, [r4, r3]
 8029004:	f000 f832 	bl	802906c <_isatty_r>
 8029008:	2800      	cmp	r0, #0
 802900a:	d005      	beq.n	8029018 <__smakebuf_r+0x78>
 802900c:	2303      	movs	r3, #3
 802900e:	89a2      	ldrh	r2, [r4, #12]
 8029010:	439a      	bics	r2, r3
 8029012:	3b02      	subs	r3, #2
 8029014:	4313      	orrs	r3, r2
 8029016:	81a3      	strh	r3, [r4, #12]
 8029018:	89a3      	ldrh	r3, [r4, #12]
 802901a:	9a01      	ldr	r2, [sp, #4]
 802901c:	4313      	orrs	r3, r2
 802901e:	81a3      	strh	r3, [r4, #12]
 8029020:	e7cc      	b.n	8028fbc <__smakebuf_r+0x1c>

08029022 <memmove>:
 8029022:	b510      	push	{r4, lr}
 8029024:	4288      	cmp	r0, r1
 8029026:	d902      	bls.n	802902e <memmove+0xc>
 8029028:	188b      	adds	r3, r1, r2
 802902a:	4298      	cmp	r0, r3
 802902c:	d308      	bcc.n	8029040 <memmove+0x1e>
 802902e:	2300      	movs	r3, #0
 8029030:	429a      	cmp	r2, r3
 8029032:	d007      	beq.n	8029044 <memmove+0x22>
 8029034:	5ccc      	ldrb	r4, [r1, r3]
 8029036:	54c4      	strb	r4, [r0, r3]
 8029038:	3301      	adds	r3, #1
 802903a:	e7f9      	b.n	8029030 <memmove+0xe>
 802903c:	5c8b      	ldrb	r3, [r1, r2]
 802903e:	5483      	strb	r3, [r0, r2]
 8029040:	3a01      	subs	r2, #1
 8029042:	d2fb      	bcs.n	802903c <memmove+0x1a>
 8029044:	bd10      	pop	{r4, pc}
	...

08029048 <_fstat_r>:
 8029048:	2300      	movs	r3, #0
 802904a:	b570      	push	{r4, r5, r6, lr}
 802904c:	4d06      	ldr	r5, [pc, #24]	@ (8029068 <_fstat_r+0x20>)
 802904e:	0004      	movs	r4, r0
 8029050:	0008      	movs	r0, r1
 8029052:	0011      	movs	r1, r2
 8029054:	602b      	str	r3, [r5, #0]
 8029056:	f7ea faa5 	bl	80135a4 <_fstat>
 802905a:	1c43      	adds	r3, r0, #1
 802905c:	d103      	bne.n	8029066 <_fstat_r+0x1e>
 802905e:	682b      	ldr	r3, [r5, #0]
 8029060:	2b00      	cmp	r3, #0
 8029062:	d000      	beq.n	8029066 <_fstat_r+0x1e>
 8029064:	6023      	str	r3, [r4, #0]
 8029066:	bd70      	pop	{r4, r5, r6, pc}
 8029068:	20003908 	.word	0x20003908

0802906c <_isatty_r>:
 802906c:	2300      	movs	r3, #0
 802906e:	b570      	push	{r4, r5, r6, lr}
 8029070:	4d06      	ldr	r5, [pc, #24]	@ (802908c <_isatty_r+0x20>)
 8029072:	0004      	movs	r4, r0
 8029074:	0008      	movs	r0, r1
 8029076:	602b      	str	r3, [r5, #0]
 8029078:	f7ea faa2 	bl	80135c0 <_isatty>
 802907c:	1c43      	adds	r3, r0, #1
 802907e:	d103      	bne.n	8029088 <_isatty_r+0x1c>
 8029080:	682b      	ldr	r3, [r5, #0]
 8029082:	2b00      	cmp	r3, #0
 8029084:	d000      	beq.n	8029088 <_isatty_r+0x1c>
 8029086:	6023      	str	r3, [r4, #0]
 8029088:	bd70      	pop	{r4, r5, r6, pc}
 802908a:	46c0      	nop			@ (mov r8, r8)
 802908c:	20003908 	.word	0x20003908

08029090 <_sbrk_r>:
 8029090:	2300      	movs	r3, #0
 8029092:	b570      	push	{r4, r5, r6, lr}
 8029094:	4d06      	ldr	r5, [pc, #24]	@ (80290b0 <_sbrk_r+0x20>)
 8029096:	0004      	movs	r4, r0
 8029098:	0008      	movs	r0, r1
 802909a:	602b      	str	r3, [r5, #0]
 802909c:	f7ea faa4 	bl	80135e8 <_sbrk>
 80290a0:	1c43      	adds	r3, r0, #1
 80290a2:	d103      	bne.n	80290ac <_sbrk_r+0x1c>
 80290a4:	682b      	ldr	r3, [r5, #0]
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d000      	beq.n	80290ac <_sbrk_r+0x1c>
 80290aa:	6023      	str	r3, [r4, #0]
 80290ac:	bd70      	pop	{r4, r5, r6, pc}
 80290ae:	46c0      	nop			@ (mov r8, r8)
 80290b0:	20003908 	.word	0x20003908

080290b4 <__assert_func>:
 80290b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80290b6:	0014      	movs	r4, r2
 80290b8:	001a      	movs	r2, r3
 80290ba:	4b09      	ldr	r3, [pc, #36]	@ (80290e0 <__assert_func+0x2c>)
 80290bc:	0005      	movs	r5, r0
 80290be:	681b      	ldr	r3, [r3, #0]
 80290c0:	000e      	movs	r6, r1
 80290c2:	68d8      	ldr	r0, [r3, #12]
 80290c4:	4b07      	ldr	r3, [pc, #28]	@ (80290e4 <__assert_func+0x30>)
 80290c6:	2c00      	cmp	r4, #0
 80290c8:	d101      	bne.n	80290ce <__assert_func+0x1a>
 80290ca:	4b07      	ldr	r3, [pc, #28]	@ (80290e8 <__assert_func+0x34>)
 80290cc:	001c      	movs	r4, r3
 80290ce:	4907      	ldr	r1, [pc, #28]	@ (80290ec <__assert_func+0x38>)
 80290d0:	9301      	str	r3, [sp, #4]
 80290d2:	9402      	str	r4, [sp, #8]
 80290d4:	002b      	movs	r3, r5
 80290d6:	9600      	str	r6, [sp, #0]
 80290d8:	f000 f868 	bl	80291ac <fiprintf>
 80290dc:	f000 f876 	bl	80291cc <abort>
 80290e0:	200003ec 	.word	0x200003ec
 80290e4:	0802ef45 	.word	0x0802ef45
 80290e8:	0802ef80 	.word	0x0802ef80
 80290ec:	0802ef52 	.word	0x0802ef52

080290f0 <_calloc_r>:
 80290f0:	b570      	push	{r4, r5, r6, lr}
 80290f2:	0c0b      	lsrs	r3, r1, #16
 80290f4:	0c15      	lsrs	r5, r2, #16
 80290f6:	2b00      	cmp	r3, #0
 80290f8:	d11e      	bne.n	8029138 <_calloc_r+0x48>
 80290fa:	2d00      	cmp	r5, #0
 80290fc:	d10c      	bne.n	8029118 <_calloc_r+0x28>
 80290fe:	b289      	uxth	r1, r1
 8029100:	b294      	uxth	r4, r2
 8029102:	434c      	muls	r4, r1
 8029104:	0021      	movs	r1, r4
 8029106:	f7fe fe5b 	bl	8027dc0 <_malloc_r>
 802910a:	1e05      	subs	r5, r0, #0
 802910c:	d01b      	beq.n	8029146 <_calloc_r+0x56>
 802910e:	0022      	movs	r2, r4
 8029110:	2100      	movs	r1, #0
 8029112:	f7fd fb23 	bl	802675c <memset>
 8029116:	e016      	b.n	8029146 <_calloc_r+0x56>
 8029118:	1c2b      	adds	r3, r5, #0
 802911a:	1c0c      	adds	r4, r1, #0
 802911c:	b289      	uxth	r1, r1
 802911e:	b292      	uxth	r2, r2
 8029120:	434a      	muls	r2, r1
 8029122:	b29b      	uxth	r3, r3
 8029124:	b2a1      	uxth	r1, r4
 8029126:	4359      	muls	r1, r3
 8029128:	0c14      	lsrs	r4, r2, #16
 802912a:	190c      	adds	r4, r1, r4
 802912c:	0c23      	lsrs	r3, r4, #16
 802912e:	d107      	bne.n	8029140 <_calloc_r+0x50>
 8029130:	0424      	lsls	r4, r4, #16
 8029132:	b292      	uxth	r2, r2
 8029134:	4314      	orrs	r4, r2
 8029136:	e7e5      	b.n	8029104 <_calloc_r+0x14>
 8029138:	2d00      	cmp	r5, #0
 802913a:	d101      	bne.n	8029140 <_calloc_r+0x50>
 802913c:	1c14      	adds	r4, r2, #0
 802913e:	e7ed      	b.n	802911c <_calloc_r+0x2c>
 8029140:	230c      	movs	r3, #12
 8029142:	2500      	movs	r5, #0
 8029144:	6003      	str	r3, [r0, #0]
 8029146:	0028      	movs	r0, r5
 8029148:	bd70      	pop	{r4, r5, r6, pc}

0802914a <_realloc_r>:
 802914a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802914c:	0006      	movs	r6, r0
 802914e:	000c      	movs	r4, r1
 8029150:	0015      	movs	r5, r2
 8029152:	2900      	cmp	r1, #0
 8029154:	d105      	bne.n	8029162 <_realloc_r+0x18>
 8029156:	0011      	movs	r1, r2
 8029158:	f7fe fe32 	bl	8027dc0 <_malloc_r>
 802915c:	0004      	movs	r4, r0
 802915e:	0020      	movs	r0, r4
 8029160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8029162:	2a00      	cmp	r2, #0
 8029164:	d103      	bne.n	802916e <_realloc_r+0x24>
 8029166:	f7fe fa5b 	bl	8027620 <_free_r>
 802916a:	002c      	movs	r4, r5
 802916c:	e7f7      	b.n	802915e <_realloc_r+0x14>
 802916e:	f000 f834 	bl	80291da <_malloc_usable_size_r>
 8029172:	0007      	movs	r7, r0
 8029174:	4285      	cmp	r5, r0
 8029176:	d802      	bhi.n	802917e <_realloc_r+0x34>
 8029178:	0843      	lsrs	r3, r0, #1
 802917a:	42ab      	cmp	r3, r5
 802917c:	d3ef      	bcc.n	802915e <_realloc_r+0x14>
 802917e:	0029      	movs	r1, r5
 8029180:	0030      	movs	r0, r6
 8029182:	f7fe fe1d 	bl	8027dc0 <_malloc_r>
 8029186:	9001      	str	r0, [sp, #4]
 8029188:	2800      	cmp	r0, #0
 802918a:	d101      	bne.n	8029190 <_realloc_r+0x46>
 802918c:	9c01      	ldr	r4, [sp, #4]
 802918e:	e7e6      	b.n	802915e <_realloc_r+0x14>
 8029190:	002a      	movs	r2, r5
 8029192:	42bd      	cmp	r5, r7
 8029194:	d900      	bls.n	8029198 <_realloc_r+0x4e>
 8029196:	003a      	movs	r2, r7
 8029198:	0021      	movs	r1, r4
 802919a:	9801      	ldr	r0, [sp, #4]
 802919c:	f7fd fbba 	bl	8026914 <memcpy>
 80291a0:	0021      	movs	r1, r4
 80291a2:	0030      	movs	r0, r6
 80291a4:	f7fe fa3c 	bl	8027620 <_free_r>
 80291a8:	e7f0      	b.n	802918c <_realloc_r+0x42>
	...

080291ac <fiprintf>:
 80291ac:	b40e      	push	{r1, r2, r3}
 80291ae:	b517      	push	{r0, r1, r2, r4, lr}
 80291b0:	4c05      	ldr	r4, [pc, #20]	@ (80291c8 <fiprintf+0x1c>)
 80291b2:	ab05      	add	r3, sp, #20
 80291b4:	cb04      	ldmia	r3!, {r2}
 80291b6:	0001      	movs	r1, r0
 80291b8:	6820      	ldr	r0, [r4, #0]
 80291ba:	9301      	str	r3, [sp, #4]
 80291bc:	f7ff fcf8 	bl	8028bb0 <_vfiprintf_r>
 80291c0:	bc1e      	pop	{r1, r2, r3, r4}
 80291c2:	bc08      	pop	{r3}
 80291c4:	b003      	add	sp, #12
 80291c6:	4718      	bx	r3
 80291c8:	200003ec 	.word	0x200003ec

080291cc <abort>:
 80291cc:	2006      	movs	r0, #6
 80291ce:	b510      	push	{r4, lr}
 80291d0:	f000 f834 	bl	802923c <raise>
 80291d4:	2001      	movs	r0, #1
 80291d6:	f7ea f9b1 	bl	801353c <_exit>

080291da <_malloc_usable_size_r>:
 80291da:	1f0b      	subs	r3, r1, #4
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	1f18      	subs	r0, r3, #4
 80291e0:	2b00      	cmp	r3, #0
 80291e2:	da01      	bge.n	80291e8 <_malloc_usable_size_r+0xe>
 80291e4:	580b      	ldr	r3, [r1, r0]
 80291e6:	18c0      	adds	r0, r0, r3
 80291e8:	4770      	bx	lr

080291ea <_raise_r>:
 80291ea:	b570      	push	{r4, r5, r6, lr}
 80291ec:	0004      	movs	r4, r0
 80291ee:	000d      	movs	r5, r1
 80291f0:	291f      	cmp	r1, #31
 80291f2:	d904      	bls.n	80291fe <_raise_r+0x14>
 80291f4:	2316      	movs	r3, #22
 80291f6:	6003      	str	r3, [r0, #0]
 80291f8:	2001      	movs	r0, #1
 80291fa:	4240      	negs	r0, r0
 80291fc:	bd70      	pop	{r4, r5, r6, pc}
 80291fe:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8029200:	2b00      	cmp	r3, #0
 8029202:	d004      	beq.n	802920e <_raise_r+0x24>
 8029204:	008a      	lsls	r2, r1, #2
 8029206:	189b      	adds	r3, r3, r2
 8029208:	681a      	ldr	r2, [r3, #0]
 802920a:	2a00      	cmp	r2, #0
 802920c:	d108      	bne.n	8029220 <_raise_r+0x36>
 802920e:	0020      	movs	r0, r4
 8029210:	f000 f830 	bl	8029274 <_getpid_r>
 8029214:	002a      	movs	r2, r5
 8029216:	0001      	movs	r1, r0
 8029218:	0020      	movs	r0, r4
 802921a:	f000 f819 	bl	8029250 <_kill_r>
 802921e:	e7ed      	b.n	80291fc <_raise_r+0x12>
 8029220:	2a01      	cmp	r2, #1
 8029222:	d009      	beq.n	8029238 <_raise_r+0x4e>
 8029224:	1c51      	adds	r1, r2, #1
 8029226:	d103      	bne.n	8029230 <_raise_r+0x46>
 8029228:	2316      	movs	r3, #22
 802922a:	6003      	str	r3, [r0, #0]
 802922c:	2001      	movs	r0, #1
 802922e:	e7e5      	b.n	80291fc <_raise_r+0x12>
 8029230:	2100      	movs	r1, #0
 8029232:	0028      	movs	r0, r5
 8029234:	6019      	str	r1, [r3, #0]
 8029236:	4790      	blx	r2
 8029238:	2000      	movs	r0, #0
 802923a:	e7df      	b.n	80291fc <_raise_r+0x12>

0802923c <raise>:
 802923c:	b510      	push	{r4, lr}
 802923e:	4b03      	ldr	r3, [pc, #12]	@ (802924c <raise+0x10>)
 8029240:	0001      	movs	r1, r0
 8029242:	6818      	ldr	r0, [r3, #0]
 8029244:	f7ff ffd1 	bl	80291ea <_raise_r>
 8029248:	bd10      	pop	{r4, pc}
 802924a:	46c0      	nop			@ (mov r8, r8)
 802924c:	200003ec 	.word	0x200003ec

08029250 <_kill_r>:
 8029250:	2300      	movs	r3, #0
 8029252:	b570      	push	{r4, r5, r6, lr}
 8029254:	4d06      	ldr	r5, [pc, #24]	@ (8029270 <_kill_r+0x20>)
 8029256:	0004      	movs	r4, r0
 8029258:	0008      	movs	r0, r1
 802925a:	0011      	movs	r1, r2
 802925c:	602b      	str	r3, [r5, #0]
 802925e:	f7ea f95d 	bl	801351c <_kill>
 8029262:	1c43      	adds	r3, r0, #1
 8029264:	d103      	bne.n	802926e <_kill_r+0x1e>
 8029266:	682b      	ldr	r3, [r5, #0]
 8029268:	2b00      	cmp	r3, #0
 802926a:	d000      	beq.n	802926e <_kill_r+0x1e>
 802926c:	6023      	str	r3, [r4, #0]
 802926e:	bd70      	pop	{r4, r5, r6, pc}
 8029270:	20003908 	.word	0x20003908

08029274 <_getpid_r>:
 8029274:	b510      	push	{r4, lr}
 8029276:	f7ea f94b 	bl	8013510 <_getpid>
 802927a:	bd10      	pop	{r4, pc}

0802927c <log>:
 802927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802927e:	0004      	movs	r4, r0
 8029280:	000d      	movs	r5, r1
 8029282:	f000 f98d 	bl	80295a0 <__ieee754_log>
 8029286:	0022      	movs	r2, r4
 8029288:	0006      	movs	r6, r0
 802928a:	000f      	movs	r7, r1
 802928c:	002b      	movs	r3, r5
 802928e:	0020      	movs	r0, r4
 8029290:	0029      	movs	r1, r5
 8029292:	f7da fa4f 	bl	8003734 <__aeabi_dcmpun>
 8029296:	2800      	cmp	r0, #0
 8029298:	d115      	bne.n	80292c6 <log+0x4a>
 802929a:	2200      	movs	r2, #0
 802929c:	2300      	movs	r3, #0
 802929e:	0020      	movs	r0, r4
 80292a0:	0029      	movs	r1, r5
 80292a2:	f7d7 f91f 	bl	80004e4 <__aeabi_dcmpgt>
 80292a6:	2800      	cmp	r0, #0
 80292a8:	d10d      	bne.n	80292c6 <log+0x4a>
 80292aa:	2200      	movs	r2, #0
 80292ac:	2300      	movs	r3, #0
 80292ae:	0020      	movs	r0, r4
 80292b0:	0029      	movs	r1, r5
 80292b2:	f7d7 f8fd 	bl	80004b0 <__aeabi_dcmpeq>
 80292b6:	2800      	cmp	r0, #0
 80292b8:	d008      	beq.n	80292cc <log+0x50>
 80292ba:	f7fd faf3 	bl	80268a4 <__errno>
 80292be:	2322      	movs	r3, #34	@ 0x22
 80292c0:	2600      	movs	r6, #0
 80292c2:	4f07      	ldr	r7, [pc, #28]	@ (80292e0 <log+0x64>)
 80292c4:	6003      	str	r3, [r0, #0]
 80292c6:	0030      	movs	r0, r6
 80292c8:	0039      	movs	r1, r7
 80292ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80292cc:	f7fd faea 	bl	80268a4 <__errno>
 80292d0:	2321      	movs	r3, #33	@ 0x21
 80292d2:	6003      	str	r3, [r0, #0]
 80292d4:	4803      	ldr	r0, [pc, #12]	@ (80292e4 <log+0x68>)
 80292d6:	f7fd fb27 	bl	8026928 <nan>
 80292da:	0006      	movs	r6, r0
 80292dc:	000f      	movs	r7, r1
 80292de:	e7f2      	b.n	80292c6 <log+0x4a>
 80292e0:	fff00000 	.word	0xfff00000
 80292e4:	0802ef80 	.word	0x0802ef80

080292e8 <pow>:
 80292e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80292ea:	0014      	movs	r4, r2
 80292ec:	001d      	movs	r5, r3
 80292ee:	9000      	str	r0, [sp, #0]
 80292f0:	9101      	str	r1, [sp, #4]
 80292f2:	f000 fb07 	bl	8029904 <__ieee754_pow>
 80292f6:	0022      	movs	r2, r4
 80292f8:	0006      	movs	r6, r0
 80292fa:	000f      	movs	r7, r1
 80292fc:	002b      	movs	r3, r5
 80292fe:	0020      	movs	r0, r4
 8029300:	0029      	movs	r1, r5
 8029302:	f7da fa17 	bl	8003734 <__aeabi_dcmpun>
 8029306:	2800      	cmp	r0, #0
 8029308:	d13f      	bne.n	802938a <pow+0xa2>
 802930a:	9800      	ldr	r0, [sp, #0]
 802930c:	9901      	ldr	r1, [sp, #4]
 802930e:	2200      	movs	r2, #0
 8029310:	2300      	movs	r3, #0
 8029312:	f7d7 f8cd 	bl	80004b0 <__aeabi_dcmpeq>
 8029316:	2800      	cmp	r0, #0
 8029318:	d019      	beq.n	802934e <pow+0x66>
 802931a:	2200      	movs	r2, #0
 802931c:	2300      	movs	r3, #0
 802931e:	0020      	movs	r0, r4
 8029320:	0029      	movs	r1, r5
 8029322:	f7d7 f8c5 	bl	80004b0 <__aeabi_dcmpeq>
 8029326:	2800      	cmp	r0, #0
 8029328:	d146      	bne.n	80293b8 <pow+0xd0>
 802932a:	0020      	movs	r0, r4
 802932c:	0029      	movs	r1, r5
 802932e:	f000 f88d 	bl	802944c <finite>
 8029332:	2800      	cmp	r0, #0
 8029334:	d029      	beq.n	802938a <pow+0xa2>
 8029336:	2200      	movs	r2, #0
 8029338:	2300      	movs	r3, #0
 802933a:	0020      	movs	r0, r4
 802933c:	0029      	movs	r1, r5
 802933e:	f7d7 f8bd 	bl	80004bc <__aeabi_dcmplt>
 8029342:	2800      	cmp	r0, #0
 8029344:	d021      	beq.n	802938a <pow+0xa2>
 8029346:	f7fd faad 	bl	80268a4 <__errno>
 802934a:	2322      	movs	r3, #34	@ 0x22
 802934c:	e01c      	b.n	8029388 <pow+0xa0>
 802934e:	0030      	movs	r0, r6
 8029350:	0039      	movs	r1, r7
 8029352:	f000 f87b 	bl	802944c <finite>
 8029356:	2800      	cmp	r0, #0
 8029358:	d11b      	bne.n	8029392 <pow+0xaa>
 802935a:	9800      	ldr	r0, [sp, #0]
 802935c:	9901      	ldr	r1, [sp, #4]
 802935e:	f000 f875 	bl	802944c <finite>
 8029362:	2800      	cmp	r0, #0
 8029364:	d015      	beq.n	8029392 <pow+0xaa>
 8029366:	0020      	movs	r0, r4
 8029368:	0029      	movs	r1, r5
 802936a:	f000 f86f 	bl	802944c <finite>
 802936e:	2800      	cmp	r0, #0
 8029370:	d00f      	beq.n	8029392 <pow+0xaa>
 8029372:	0032      	movs	r2, r6
 8029374:	003b      	movs	r3, r7
 8029376:	0030      	movs	r0, r6
 8029378:	0039      	movs	r1, r7
 802937a:	f7da f9db 	bl	8003734 <__aeabi_dcmpun>
 802937e:	2800      	cmp	r0, #0
 8029380:	d0e1      	beq.n	8029346 <pow+0x5e>
 8029382:	f7fd fa8f 	bl	80268a4 <__errno>
 8029386:	2321      	movs	r3, #33	@ 0x21
 8029388:	6003      	str	r3, [r0, #0]
 802938a:	0030      	movs	r0, r6
 802938c:	0039      	movs	r1, r7
 802938e:	b003      	add	sp, #12
 8029390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029392:	2200      	movs	r2, #0
 8029394:	2300      	movs	r3, #0
 8029396:	0030      	movs	r0, r6
 8029398:	0039      	movs	r1, r7
 802939a:	f7d7 f889 	bl	80004b0 <__aeabi_dcmpeq>
 802939e:	2800      	cmp	r0, #0
 80293a0:	d0f3      	beq.n	802938a <pow+0xa2>
 80293a2:	9800      	ldr	r0, [sp, #0]
 80293a4:	9901      	ldr	r1, [sp, #4]
 80293a6:	f000 f851 	bl	802944c <finite>
 80293aa:	2800      	cmp	r0, #0
 80293ac:	d0ed      	beq.n	802938a <pow+0xa2>
 80293ae:	0020      	movs	r0, r4
 80293b0:	0029      	movs	r1, r5
 80293b2:	f000 f84b 	bl	802944c <finite>
 80293b6:	e7c4      	b.n	8029342 <pow+0x5a>
 80293b8:	2600      	movs	r6, #0
 80293ba:	4f01      	ldr	r7, [pc, #4]	@ (80293c0 <pow+0xd8>)
 80293bc:	e7e5      	b.n	802938a <pow+0xa2>
 80293be:	46c0      	nop			@ (mov r8, r8)
 80293c0:	3ff00000 	.word	0x3ff00000

080293c4 <expf>:
 80293c4:	b570      	push	{r4, r5, r6, lr}
 80293c6:	1c04      	adds	r4, r0, #0
 80293c8:	f000 ffb8 	bl	802a33c <__ieee754_expf>
 80293cc:	1c05      	adds	r5, r0, #0
 80293ce:	1c20      	adds	r0, r4, #0
 80293d0:	f000 f844 	bl	802945c <finitef>
 80293d4:	2800      	cmp	r0, #0
 80293d6:	d00b      	beq.n	80293f0 <expf+0x2c>
 80293d8:	490c      	ldr	r1, [pc, #48]	@ (802940c <expf+0x48>)
 80293da:	1c20      	adds	r0, r4, #0
 80293dc:	f7d7 f8bc 	bl	8000558 <__aeabi_fcmpgt>
 80293e0:	2800      	cmp	r0, #0
 80293e2:	d007      	beq.n	80293f4 <expf+0x30>
 80293e4:	f7fd fa5e 	bl	80268a4 <__errno>
 80293e8:	25ff      	movs	r5, #255	@ 0xff
 80293ea:	2322      	movs	r3, #34	@ 0x22
 80293ec:	05ed      	lsls	r5, r5, #23
 80293ee:	6003      	str	r3, [r0, #0]
 80293f0:	1c28      	adds	r0, r5, #0
 80293f2:	bd70      	pop	{r4, r5, r6, pc}
 80293f4:	4906      	ldr	r1, [pc, #24]	@ (8029410 <expf+0x4c>)
 80293f6:	1c20      	adds	r0, r4, #0
 80293f8:	f7d7 f89a 	bl	8000530 <__aeabi_fcmplt>
 80293fc:	2800      	cmp	r0, #0
 80293fe:	d0f7      	beq.n	80293f0 <expf+0x2c>
 8029400:	f7fd fa50 	bl	80268a4 <__errno>
 8029404:	2322      	movs	r3, #34	@ 0x22
 8029406:	2500      	movs	r5, #0
 8029408:	6003      	str	r3, [r0, #0]
 802940a:	e7f1      	b.n	80293f0 <expf+0x2c>
 802940c:	42b17217 	.word	0x42b17217
 8029410:	c2cff1b5 	.word	0xc2cff1b5

08029414 <sqrtf>:
 8029414:	b570      	push	{r4, r5, r6, lr}
 8029416:	1c05      	adds	r5, r0, #0
 8029418:	f000 f82a 	bl	8029470 <__ieee754_sqrtf>
 802941c:	1c29      	adds	r1, r5, #0
 802941e:	1c04      	adds	r4, r0, #0
 8029420:	1c28      	adds	r0, r5, #0
 8029422:	f7d8 f9cb 	bl	80017bc <__aeabi_fcmpun>
 8029426:	2800      	cmp	r0, #0
 8029428:	d10e      	bne.n	8029448 <sqrtf+0x34>
 802942a:	2100      	movs	r1, #0
 802942c:	1c28      	adds	r0, r5, #0
 802942e:	f7d7 f87f 	bl	8000530 <__aeabi_fcmplt>
 8029432:	2800      	cmp	r0, #0
 8029434:	d008      	beq.n	8029448 <sqrtf+0x34>
 8029436:	f7fd fa35 	bl	80268a4 <__errno>
 802943a:	2321      	movs	r3, #33	@ 0x21
 802943c:	2100      	movs	r1, #0
 802943e:	6003      	str	r3, [r0, #0]
 8029440:	1c08      	adds	r0, r1, #0
 8029442:	f7d7 fc2f 	bl	8000ca4 <__aeabi_fdiv>
 8029446:	1c04      	adds	r4, r0, #0
 8029448:	1c20      	adds	r0, r4, #0
 802944a:	bd70      	pop	{r4, r5, r6, pc}

0802944c <finite>:
 802944c:	4b02      	ldr	r3, [pc, #8]	@ (8029458 <finite+0xc>)
 802944e:	0048      	lsls	r0, r1, #1
 8029450:	0840      	lsrs	r0, r0, #1
 8029452:	18c0      	adds	r0, r0, r3
 8029454:	0fc0      	lsrs	r0, r0, #31
 8029456:	4770      	bx	lr
 8029458:	80100000 	.word	0x80100000

0802945c <finitef>:
 802945c:	22ff      	movs	r2, #255	@ 0xff
 802945e:	0043      	lsls	r3, r0, #1
 8029460:	085b      	lsrs	r3, r3, #1
 8029462:	2001      	movs	r0, #1
 8029464:	05d2      	lsls	r2, r2, #23
 8029466:	4293      	cmp	r3, r2
 8029468:	db00      	blt.n	802946c <finitef+0x10>
 802946a:	2000      	movs	r0, #0
 802946c:	4770      	bx	lr
	...

08029470 <__ieee754_sqrtf>:
 8029470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029472:	21ff      	movs	r1, #255	@ 0xff
 8029474:	0042      	lsls	r2, r0, #1
 8029476:	0003      	movs	r3, r0
 8029478:	1c04      	adds	r4, r0, #0
 802947a:	0852      	lsrs	r2, r2, #1
 802947c:	05c9      	lsls	r1, r1, #23
 802947e:	428a      	cmp	r2, r1
 8029480:	d309      	bcc.n	8029496 <__ieee754_sqrtf+0x26>
 8029482:	1c01      	adds	r1, r0, #0
 8029484:	f7d7 fddc 	bl	8001040 <__aeabi_fmul>
 8029488:	1c01      	adds	r1, r0, #0
 802948a:	1c20      	adds	r0, r4, #0
 802948c:	f7d7 fa18 	bl	80008c0 <__aeabi_fadd>
 8029490:	1c04      	adds	r4, r0, #0
 8029492:	1c20      	adds	r0, r4, #0
 8029494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8029496:	2a00      	cmp	r2, #0
 8029498:	d0fb      	beq.n	8029492 <__ieee754_sqrtf+0x22>
 802949a:	2800      	cmp	r0, #0
 802949c:	da06      	bge.n	80294ac <__ieee754_sqrtf+0x3c>
 802949e:	1c01      	adds	r1, r0, #0
 80294a0:	f7d7 ff28 	bl	80012f4 <__aeabi_fsub>
 80294a4:	1c01      	adds	r1, r0, #0
 80294a6:	f7d7 fbfd 	bl	8000ca4 <__aeabi_fdiv>
 80294aa:	e7f1      	b.n	8029490 <__ieee754_sqrtf+0x20>
 80294ac:	0002      	movs	r2, r0
 80294ae:	400a      	ands	r2, r1
 80294b0:	4208      	tst	r0, r1
 80294b2:	d040      	beq.n	8029536 <__ieee754_sqrtf+0xc6>
 80294b4:	15c1      	asrs	r1, r0, #23
 80294b6:	2280      	movs	r2, #128	@ 0x80
 80294b8:	000f      	movs	r7, r1
 80294ba:	025b      	lsls	r3, r3, #9
 80294bc:	0a5b      	lsrs	r3, r3, #9
 80294be:	0412      	lsls	r2, r2, #16
 80294c0:	3f7f      	subs	r7, #127	@ 0x7f
 80294c2:	4313      	orrs	r3, r2
 80294c4:	07c9      	lsls	r1, r1, #31
 80294c6:	d400      	bmi.n	80294ca <__ieee754_sqrtf+0x5a>
 80294c8:	005b      	lsls	r3, r3, #1
 80294ca:	2400      	movs	r4, #0
 80294cc:	2180      	movs	r1, #128	@ 0x80
 80294ce:	2019      	movs	r0, #25
 80294d0:	0026      	movs	r6, r4
 80294d2:	107f      	asrs	r7, r7, #1
 80294d4:	005b      	lsls	r3, r3, #1
 80294d6:	0449      	lsls	r1, r1, #17
 80294d8:	1875      	adds	r5, r6, r1
 80294da:	001a      	movs	r2, r3
 80294dc:	429d      	cmp	r5, r3
 80294de:	dc02      	bgt.n	80294e6 <__ieee754_sqrtf+0x76>
 80294e0:	186e      	adds	r6, r5, r1
 80294e2:	1b5a      	subs	r2, r3, r5
 80294e4:	1864      	adds	r4, r4, r1
 80294e6:	3801      	subs	r0, #1
 80294e8:	0053      	lsls	r3, r2, #1
 80294ea:	0849      	lsrs	r1, r1, #1
 80294ec:	2800      	cmp	r0, #0
 80294ee:	d1f3      	bne.n	80294d8 <__ieee754_sqrtf+0x68>
 80294f0:	2a00      	cmp	r2, #0
 80294f2:	d019      	beq.n	8029528 <__ieee754_sqrtf+0xb8>
 80294f4:	4d16      	ldr	r5, [pc, #88]	@ (8029550 <__ieee754_sqrtf+0xe0>)
 80294f6:	4e17      	ldr	r6, [pc, #92]	@ (8029554 <__ieee754_sqrtf+0xe4>)
 80294f8:	6828      	ldr	r0, [r5, #0]
 80294fa:	6831      	ldr	r1, [r6, #0]
 80294fc:	682b      	ldr	r3, [r5, #0]
 80294fe:	9301      	str	r3, [sp, #4]
 8029500:	f7d7 fef8 	bl	80012f4 <__aeabi_fsub>
 8029504:	1c01      	adds	r1, r0, #0
 8029506:	9801      	ldr	r0, [sp, #4]
 8029508:	f7d7 f81c 	bl	8000544 <__aeabi_fcmple>
 802950c:	2800      	cmp	r0, #0
 802950e:	d00b      	beq.n	8029528 <__ieee754_sqrtf+0xb8>
 8029510:	6828      	ldr	r0, [r5, #0]
 8029512:	6831      	ldr	r1, [r6, #0]
 8029514:	f7d7 f9d4 	bl	80008c0 <__aeabi_fadd>
 8029518:	682d      	ldr	r5, [r5, #0]
 802951a:	1c01      	adds	r1, r0, #0
 802951c:	1c28      	adds	r0, r5, #0
 802951e:	f7d7 f807 	bl	8000530 <__aeabi_fcmplt>
 8029522:	2800      	cmp	r0, #0
 8029524:	d010      	beq.n	8029548 <__ieee754_sqrtf+0xd8>
 8029526:	3402      	adds	r4, #2
 8029528:	23fc      	movs	r3, #252	@ 0xfc
 802952a:	1064      	asrs	r4, r4, #1
 802952c:	059b      	lsls	r3, r3, #22
 802952e:	18e3      	adds	r3, r4, r3
 8029530:	05fc      	lsls	r4, r7, #23
 8029532:	18e4      	adds	r4, r4, r3
 8029534:	e7ad      	b.n	8029492 <__ieee754_sqrtf+0x22>
 8029536:	2080      	movs	r0, #128	@ 0x80
 8029538:	0400      	lsls	r0, r0, #16
 802953a:	005b      	lsls	r3, r3, #1
 802953c:	0011      	movs	r1, r2
 802953e:	3201      	adds	r2, #1
 8029540:	4203      	tst	r3, r0
 8029542:	d0fa      	beq.n	802953a <__ieee754_sqrtf+0xca>
 8029544:	4249      	negs	r1, r1
 8029546:	e7b6      	b.n	80294b6 <__ieee754_sqrtf+0x46>
 8029548:	2301      	movs	r3, #1
 802954a:	3401      	adds	r4, #1
 802954c:	439c      	bics	r4, r3
 802954e:	e7eb      	b.n	8029528 <__ieee754_sqrtf+0xb8>
 8029550:	0802f1dc 	.word	0x0802f1dc
 8029554:	0802f1d8 	.word	0x0802f1d8

08029558 <roundf>:
 8029558:	0dc3      	lsrs	r3, r0, #23
 802955a:	b2db      	uxtb	r3, r3
 802955c:	3b7f      	subs	r3, #127	@ 0x7f
 802955e:	0002      	movs	r2, r0
 8029560:	b510      	push	{r4, lr}
 8029562:	2b16      	cmp	r3, #22
 8029564:	dc13      	bgt.n	802958e <roundf+0x36>
 8029566:	2b00      	cmp	r3, #0
 8029568:	da07      	bge.n	802957a <roundf+0x22>
 802956a:	0fc2      	lsrs	r2, r0, #31
 802956c:	07d0      	lsls	r0, r2, #31
 802956e:	3301      	adds	r3, #1
 8029570:	d102      	bne.n	8029578 <roundf+0x20>
 8029572:	23fe      	movs	r3, #254	@ 0xfe
 8029574:	059b      	lsls	r3, r3, #22
 8029576:	4318      	orrs	r0, r3
 8029578:	bd10      	pop	{r4, pc}
 802957a:	4908      	ldr	r1, [pc, #32]	@ (802959c <roundf+0x44>)
 802957c:	4119      	asrs	r1, r3
 802957e:	4208      	tst	r0, r1
 8029580:	d0fa      	beq.n	8029578 <roundf+0x20>
 8029582:	2080      	movs	r0, #128	@ 0x80
 8029584:	03c0      	lsls	r0, r0, #15
 8029586:	4118      	asrs	r0, r3
 8029588:	1880      	adds	r0, r0, r2
 802958a:	4388      	bics	r0, r1
 802958c:	e7f4      	b.n	8029578 <roundf+0x20>
 802958e:	2b80      	cmp	r3, #128	@ 0x80
 8029590:	d1f2      	bne.n	8029578 <roundf+0x20>
 8029592:	1c01      	adds	r1, r0, #0
 8029594:	f7d7 f994 	bl	80008c0 <__aeabi_fadd>
 8029598:	e7ee      	b.n	8029578 <roundf+0x20>
 802959a:	46c0      	nop			@ (mov r8, r8)
 802959c:	007fffff 	.word	0x007fffff

080295a0 <__ieee754_log>:
 80295a0:	2380      	movs	r3, #128	@ 0x80
 80295a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80295a4:	035b      	lsls	r3, r3, #13
 80295a6:	000e      	movs	r6, r1
 80295a8:	b08d      	sub	sp, #52	@ 0x34
 80295aa:	4299      	cmp	r1, r3
 80295ac:	da23      	bge.n	80295f6 <__ieee754_log+0x56>
 80295ae:	004b      	lsls	r3, r1, #1
 80295b0:	085b      	lsrs	r3, r3, #1
 80295b2:	4303      	orrs	r3, r0
 80295b4:	d107      	bne.n	80295c6 <__ieee754_log+0x26>
 80295b6:	2200      	movs	r2, #0
 80295b8:	2300      	movs	r3, #0
 80295ba:	2000      	movs	r0, #0
 80295bc:	49b4      	ldr	r1, [pc, #720]	@ (8029890 <__ieee754_log+0x2f0>)
 80295be:	f7d8 fd8f 	bl	80020e0 <__aeabi_ddiv>
 80295c2:	b00d      	add	sp, #52	@ 0x34
 80295c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80295c6:	2900      	cmp	r1, #0
 80295c8:	da06      	bge.n	80295d8 <__ieee754_log+0x38>
 80295ca:	0002      	movs	r2, r0
 80295cc:	000b      	movs	r3, r1
 80295ce:	f7d9 fca7 	bl	8002f20 <__aeabi_dsub>
 80295d2:	2200      	movs	r2, #0
 80295d4:	2300      	movs	r3, #0
 80295d6:	e7f2      	b.n	80295be <__ieee754_log+0x1e>
 80295d8:	4bae      	ldr	r3, [pc, #696]	@ (8029894 <__ieee754_log+0x2f4>)
 80295da:	2200      	movs	r2, #0
 80295dc:	f7d9 f9ba 	bl	8002954 <__aeabi_dmul>
 80295e0:	2336      	movs	r3, #54	@ 0x36
 80295e2:	000e      	movs	r6, r1
 80295e4:	425b      	negs	r3, r3
 80295e6:	4aac      	ldr	r2, [pc, #688]	@ (8029898 <__ieee754_log+0x2f8>)
 80295e8:	4296      	cmp	r6, r2
 80295ea:	dd06      	ble.n	80295fa <__ieee754_log+0x5a>
 80295ec:	0002      	movs	r2, r0
 80295ee:	000b      	movs	r3, r1
 80295f0:	f7d8 f9b0 	bl	8001954 <__aeabi_dadd>
 80295f4:	e7e5      	b.n	80295c2 <__ieee754_log+0x22>
 80295f6:	2300      	movs	r3, #0
 80295f8:	e7f5      	b.n	80295e6 <__ieee754_log+0x46>
 80295fa:	4ca8      	ldr	r4, [pc, #672]	@ (802989c <__ieee754_log+0x2fc>)
 80295fc:	1532      	asrs	r2, r6, #20
 80295fe:	1912      	adds	r2, r2, r4
 8029600:	0336      	lsls	r6, r6, #12
 8029602:	4ca7      	ldr	r4, [pc, #668]	@ (80298a0 <__ieee754_log+0x300>)
 8029604:	18d2      	adds	r2, r2, r3
 8029606:	0b33      	lsrs	r3, r6, #12
 8029608:	9302      	str	r3, [sp, #8]
 802960a:	191b      	adds	r3, r3, r4
 802960c:	2480      	movs	r4, #128	@ 0x80
 802960e:	0364      	lsls	r4, r4, #13
 8029610:	4023      	ands	r3, r4
 8029612:	4ca4      	ldr	r4, [pc, #656]	@ (80298a4 <__ieee754_log+0x304>)
 8029614:	9d02      	ldr	r5, [sp, #8]
 8029616:	405c      	eors	r4, r3
 8029618:	151b      	asrs	r3, r3, #20
 802961a:	189b      	adds	r3, r3, r2
 802961c:	4325      	orrs	r5, r4
 802961e:	2200      	movs	r2, #0
 8029620:	9300      	str	r3, [sp, #0]
 8029622:	0029      	movs	r1, r5
 8029624:	4b9f      	ldr	r3, [pc, #636]	@ (80298a4 <__ieee754_log+0x304>)
 8029626:	f7d9 fc7b 	bl	8002f20 <__aeabi_dsub>
 802962a:	9b02      	ldr	r3, [sp, #8]
 802962c:	0006      	movs	r6, r0
 802962e:	3302      	adds	r3, #2
 8029630:	031b      	lsls	r3, r3, #12
 8029632:	000f      	movs	r7, r1
 8029634:	2200      	movs	r2, #0
 8029636:	0b1b      	lsrs	r3, r3, #12
 8029638:	2b02      	cmp	r3, #2
 802963a:	dc64      	bgt.n	8029706 <__ieee754_log+0x166>
 802963c:	2300      	movs	r3, #0
 802963e:	f7d6 ff37 	bl	80004b0 <__aeabi_dcmpeq>
 8029642:	2800      	cmp	r0, #0
 8029644:	d019      	beq.n	802967a <__ieee754_log+0xda>
 8029646:	9b00      	ldr	r3, [sp, #0]
 8029648:	2b00      	cmp	r3, #0
 802964a:	d100      	bne.n	802964e <__ieee754_log+0xae>
 802964c:	e11c      	b.n	8029888 <__ieee754_log+0x2e8>
 802964e:	0018      	movs	r0, r3
 8029650:	f7da f8ce 	bl	80037f0 <__aeabi_i2d>
 8029654:	4a94      	ldr	r2, [pc, #592]	@ (80298a8 <__ieee754_log+0x308>)
 8029656:	4b95      	ldr	r3, [pc, #596]	@ (80298ac <__ieee754_log+0x30c>)
 8029658:	0004      	movs	r4, r0
 802965a:	000d      	movs	r5, r1
 802965c:	f7d9 f97a 	bl	8002954 <__aeabi_dmul>
 8029660:	4a93      	ldr	r2, [pc, #588]	@ (80298b0 <__ieee754_log+0x310>)
 8029662:	0006      	movs	r6, r0
 8029664:	000f      	movs	r7, r1
 8029666:	4b93      	ldr	r3, [pc, #588]	@ (80298b4 <__ieee754_log+0x314>)
 8029668:	0020      	movs	r0, r4
 802966a:	0029      	movs	r1, r5
 802966c:	f7d9 f972 	bl	8002954 <__aeabi_dmul>
 8029670:	0002      	movs	r2, r0
 8029672:	000b      	movs	r3, r1
 8029674:	0030      	movs	r0, r6
 8029676:	0039      	movs	r1, r7
 8029678:	e7ba      	b.n	80295f0 <__ieee754_log+0x50>
 802967a:	4a8f      	ldr	r2, [pc, #572]	@ (80298b8 <__ieee754_log+0x318>)
 802967c:	4b8f      	ldr	r3, [pc, #572]	@ (80298bc <__ieee754_log+0x31c>)
 802967e:	0030      	movs	r0, r6
 8029680:	0039      	movs	r1, r7
 8029682:	f7d9 f967 	bl	8002954 <__aeabi_dmul>
 8029686:	0002      	movs	r2, r0
 8029688:	000b      	movs	r3, r1
 802968a:	2000      	movs	r0, #0
 802968c:	498c      	ldr	r1, [pc, #560]	@ (80298c0 <__ieee754_log+0x320>)
 802968e:	f7d9 fc47 	bl	8002f20 <__aeabi_dsub>
 8029692:	0032      	movs	r2, r6
 8029694:	0004      	movs	r4, r0
 8029696:	000d      	movs	r5, r1
 8029698:	003b      	movs	r3, r7
 802969a:	0030      	movs	r0, r6
 802969c:	0039      	movs	r1, r7
 802969e:	f7d9 f959 	bl	8002954 <__aeabi_dmul>
 80296a2:	000b      	movs	r3, r1
 80296a4:	0002      	movs	r2, r0
 80296a6:	0029      	movs	r1, r5
 80296a8:	0020      	movs	r0, r4
 80296aa:	f7d9 f953 	bl	8002954 <__aeabi_dmul>
 80296ae:	9b00      	ldr	r3, [sp, #0]
 80296b0:	9002      	str	r0, [sp, #8]
 80296b2:	9103      	str	r1, [sp, #12]
 80296b4:	2b00      	cmp	r3, #0
 80296b6:	d106      	bne.n	80296c6 <__ieee754_log+0x126>
 80296b8:	0002      	movs	r2, r0
 80296ba:	000b      	movs	r3, r1
 80296bc:	0030      	movs	r0, r6
 80296be:	0039      	movs	r1, r7
 80296c0:	f7d9 fc2e 	bl	8002f20 <__aeabi_dsub>
 80296c4:	e77d      	b.n	80295c2 <__ieee754_log+0x22>
 80296c6:	9800      	ldr	r0, [sp, #0]
 80296c8:	f7da f892 	bl	80037f0 <__aeabi_i2d>
 80296cc:	4a76      	ldr	r2, [pc, #472]	@ (80298a8 <__ieee754_log+0x308>)
 80296ce:	4b77      	ldr	r3, [pc, #476]	@ (80298ac <__ieee754_log+0x30c>)
 80296d0:	0004      	movs	r4, r0
 80296d2:	000d      	movs	r5, r1
 80296d4:	f7d9 f93e 	bl	8002954 <__aeabi_dmul>
 80296d8:	4a75      	ldr	r2, [pc, #468]	@ (80298b0 <__ieee754_log+0x310>)
 80296da:	9000      	str	r0, [sp, #0]
 80296dc:	9101      	str	r1, [sp, #4]
 80296de:	4b75      	ldr	r3, [pc, #468]	@ (80298b4 <__ieee754_log+0x314>)
 80296e0:	0020      	movs	r0, r4
 80296e2:	0029      	movs	r1, r5
 80296e4:	f7d9 f936 	bl	8002954 <__aeabi_dmul>
 80296e8:	0002      	movs	r2, r0
 80296ea:	000b      	movs	r3, r1
 80296ec:	9802      	ldr	r0, [sp, #8]
 80296ee:	9903      	ldr	r1, [sp, #12]
 80296f0:	f7d9 fc16 	bl	8002f20 <__aeabi_dsub>
 80296f4:	0032      	movs	r2, r6
 80296f6:	003b      	movs	r3, r7
 80296f8:	f7d9 fc12 	bl	8002f20 <__aeabi_dsub>
 80296fc:	0002      	movs	r2, r0
 80296fe:	000b      	movs	r3, r1
 8029700:	9800      	ldr	r0, [sp, #0]
 8029702:	9901      	ldr	r1, [sp, #4]
 8029704:	e7dc      	b.n	80296c0 <__ieee754_log+0x120>
 8029706:	2380      	movs	r3, #128	@ 0x80
 8029708:	05db      	lsls	r3, r3, #23
 802970a:	f7d8 f923 	bl	8001954 <__aeabi_dadd>
 802970e:	0002      	movs	r2, r0
 8029710:	000b      	movs	r3, r1
 8029712:	0030      	movs	r0, r6
 8029714:	0039      	movs	r1, r7
 8029716:	f7d8 fce3 	bl	80020e0 <__aeabi_ddiv>
 802971a:	9004      	str	r0, [sp, #16]
 802971c:	9105      	str	r1, [sp, #20]
 802971e:	9800      	ldr	r0, [sp, #0]
 8029720:	f7da f866 	bl	80037f0 <__aeabi_i2d>
 8029724:	9a04      	ldr	r2, [sp, #16]
 8029726:	9b05      	ldr	r3, [sp, #20]
 8029728:	9006      	str	r0, [sp, #24]
 802972a:	9107      	str	r1, [sp, #28]
 802972c:	0010      	movs	r0, r2
 802972e:	0019      	movs	r1, r3
 8029730:	f7d9 f910 	bl	8002954 <__aeabi_dmul>
 8029734:	4a63      	ldr	r2, [pc, #396]	@ (80298c4 <__ieee754_log+0x324>)
 8029736:	9b02      	ldr	r3, [sp, #8]
 8029738:	4694      	mov	ip, r2
 802973a:	4463      	add	r3, ip
 802973c:	0002      	movs	r2, r0
 802973e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029740:	000b      	movs	r3, r1
 8029742:	9008      	str	r0, [sp, #32]
 8029744:	9109      	str	r1, [sp, #36]	@ 0x24
 8029746:	f7d9 f905 	bl	8002954 <__aeabi_dmul>
 802974a:	0004      	movs	r4, r0
 802974c:	000d      	movs	r5, r1
 802974e:	4a5e      	ldr	r2, [pc, #376]	@ (80298c8 <__ieee754_log+0x328>)
 8029750:	4b5e      	ldr	r3, [pc, #376]	@ (80298cc <__ieee754_log+0x32c>)
 8029752:	f7d9 f8ff 	bl	8002954 <__aeabi_dmul>
 8029756:	4a5e      	ldr	r2, [pc, #376]	@ (80298d0 <__ieee754_log+0x330>)
 8029758:	4b5e      	ldr	r3, [pc, #376]	@ (80298d4 <__ieee754_log+0x334>)
 802975a:	f7d8 f8fb 	bl	8001954 <__aeabi_dadd>
 802975e:	0022      	movs	r2, r4
 8029760:	002b      	movs	r3, r5
 8029762:	f7d9 f8f7 	bl	8002954 <__aeabi_dmul>
 8029766:	4a5c      	ldr	r2, [pc, #368]	@ (80298d8 <__ieee754_log+0x338>)
 8029768:	4b5c      	ldr	r3, [pc, #368]	@ (80298dc <__ieee754_log+0x33c>)
 802976a:	f7d8 f8f3 	bl	8001954 <__aeabi_dadd>
 802976e:	0022      	movs	r2, r4
 8029770:	002b      	movs	r3, r5
 8029772:	f7d9 f8ef 	bl	8002954 <__aeabi_dmul>
 8029776:	4a5a      	ldr	r2, [pc, #360]	@ (80298e0 <__ieee754_log+0x340>)
 8029778:	4b5a      	ldr	r3, [pc, #360]	@ (80298e4 <__ieee754_log+0x344>)
 802977a:	f7d8 f8eb 	bl	8001954 <__aeabi_dadd>
 802977e:	9a08      	ldr	r2, [sp, #32]
 8029780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029782:	f7d9 f8e7 	bl	8002954 <__aeabi_dmul>
 8029786:	4a58      	ldr	r2, [pc, #352]	@ (80298e8 <__ieee754_log+0x348>)
 8029788:	9008      	str	r0, [sp, #32]
 802978a:	9109      	str	r1, [sp, #36]	@ 0x24
 802978c:	4b57      	ldr	r3, [pc, #348]	@ (80298ec <__ieee754_log+0x34c>)
 802978e:	0020      	movs	r0, r4
 8029790:	0029      	movs	r1, r5
 8029792:	f7d9 f8df 	bl	8002954 <__aeabi_dmul>
 8029796:	4a56      	ldr	r2, [pc, #344]	@ (80298f0 <__ieee754_log+0x350>)
 8029798:	4b56      	ldr	r3, [pc, #344]	@ (80298f4 <__ieee754_log+0x354>)
 802979a:	f7d8 f8db 	bl	8001954 <__aeabi_dadd>
 802979e:	0022      	movs	r2, r4
 80297a0:	002b      	movs	r3, r5
 80297a2:	f7d9 f8d7 	bl	8002954 <__aeabi_dmul>
 80297a6:	4a54      	ldr	r2, [pc, #336]	@ (80298f8 <__ieee754_log+0x358>)
 80297a8:	4b54      	ldr	r3, [pc, #336]	@ (80298fc <__ieee754_log+0x35c>)
 80297aa:	f7d8 f8d3 	bl	8001954 <__aeabi_dadd>
 80297ae:	0022      	movs	r2, r4
 80297b0:	002b      	movs	r3, r5
 80297b2:	f7d9 f8cf 	bl	8002954 <__aeabi_dmul>
 80297b6:	0002      	movs	r2, r0
 80297b8:	000b      	movs	r3, r1
 80297ba:	9808      	ldr	r0, [sp, #32]
 80297bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80297be:	f7d8 f8c9 	bl	8001954 <__aeabi_dadd>
 80297c2:	9a02      	ldr	r2, [sp, #8]
 80297c4:	4b4e      	ldr	r3, [pc, #312]	@ (8029900 <__ieee754_log+0x360>)
 80297c6:	0004      	movs	r4, r0
 80297c8:	1a9b      	subs	r3, r3, r2
 80297ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80297cc:	000d      	movs	r5, r1
 80297ce:	4313      	orrs	r3, r2
 80297d0:	2b00      	cmp	r3, #0
 80297d2:	dd34      	ble.n	802983e <__ieee754_log+0x29e>
 80297d4:	2200      	movs	r2, #0
 80297d6:	4b3a      	ldr	r3, [pc, #232]	@ (80298c0 <__ieee754_log+0x320>)
 80297d8:	0030      	movs	r0, r6
 80297da:	0039      	movs	r1, r7
 80297dc:	f7d9 f8ba 	bl	8002954 <__aeabi_dmul>
 80297e0:	0032      	movs	r2, r6
 80297e2:	003b      	movs	r3, r7
 80297e4:	f7d9 f8b6 	bl	8002954 <__aeabi_dmul>
 80297e8:	0002      	movs	r2, r0
 80297ea:	000b      	movs	r3, r1
 80297ec:	9002      	str	r0, [sp, #8]
 80297ee:	9103      	str	r1, [sp, #12]
 80297f0:	0020      	movs	r0, r4
 80297f2:	0029      	movs	r1, r5
 80297f4:	f7d8 f8ae 	bl	8001954 <__aeabi_dadd>
 80297f8:	9a04      	ldr	r2, [sp, #16]
 80297fa:	9b05      	ldr	r3, [sp, #20]
 80297fc:	f7d9 f8aa 	bl	8002954 <__aeabi_dmul>
 8029800:	9b00      	ldr	r3, [sp, #0]
 8029802:	0004      	movs	r4, r0
 8029804:	000d      	movs	r5, r1
 8029806:	2b00      	cmp	r3, #0
 8029808:	d106      	bne.n	8029818 <__ieee754_log+0x278>
 802980a:	0002      	movs	r2, r0
 802980c:	000b      	movs	r3, r1
 802980e:	9802      	ldr	r0, [sp, #8]
 8029810:	9903      	ldr	r1, [sp, #12]
 8029812:	f7d9 fb85 	bl	8002f20 <__aeabi_dsub>
 8029816:	e74f      	b.n	80296b8 <__ieee754_log+0x118>
 8029818:	4a23      	ldr	r2, [pc, #140]	@ (80298a8 <__ieee754_log+0x308>)
 802981a:	4b24      	ldr	r3, [pc, #144]	@ (80298ac <__ieee754_log+0x30c>)
 802981c:	9806      	ldr	r0, [sp, #24]
 802981e:	9907      	ldr	r1, [sp, #28]
 8029820:	f7d9 f898 	bl	8002954 <__aeabi_dmul>
 8029824:	4a22      	ldr	r2, [pc, #136]	@ (80298b0 <__ieee754_log+0x310>)
 8029826:	9000      	str	r0, [sp, #0]
 8029828:	9101      	str	r1, [sp, #4]
 802982a:	9806      	ldr	r0, [sp, #24]
 802982c:	9907      	ldr	r1, [sp, #28]
 802982e:	4b21      	ldr	r3, [pc, #132]	@ (80298b4 <__ieee754_log+0x314>)
 8029830:	f7d9 f890 	bl	8002954 <__aeabi_dmul>
 8029834:	0022      	movs	r2, r4
 8029836:	002b      	movs	r3, r5
 8029838:	f7d8 f88c 	bl	8001954 <__aeabi_dadd>
 802983c:	e754      	b.n	80296e8 <__ieee754_log+0x148>
 802983e:	0002      	movs	r2, r0
 8029840:	000b      	movs	r3, r1
 8029842:	0030      	movs	r0, r6
 8029844:	0039      	movs	r1, r7
 8029846:	f7d9 fb6b 	bl	8002f20 <__aeabi_dsub>
 802984a:	9a04      	ldr	r2, [sp, #16]
 802984c:	9b05      	ldr	r3, [sp, #20]
 802984e:	f7d9 f881 	bl	8002954 <__aeabi_dmul>
 8029852:	9b00      	ldr	r3, [sp, #0]
 8029854:	0004      	movs	r4, r0
 8029856:	000d      	movs	r5, r1
 8029858:	2b00      	cmp	r3, #0
 802985a:	d102      	bne.n	8029862 <__ieee754_log+0x2c2>
 802985c:	0002      	movs	r2, r0
 802985e:	000b      	movs	r3, r1
 8029860:	e72c      	b.n	80296bc <__ieee754_log+0x11c>
 8029862:	4a11      	ldr	r2, [pc, #68]	@ (80298a8 <__ieee754_log+0x308>)
 8029864:	4b11      	ldr	r3, [pc, #68]	@ (80298ac <__ieee754_log+0x30c>)
 8029866:	9806      	ldr	r0, [sp, #24]
 8029868:	9907      	ldr	r1, [sp, #28]
 802986a:	f7d9 f873 	bl	8002954 <__aeabi_dmul>
 802986e:	4a10      	ldr	r2, [pc, #64]	@ (80298b0 <__ieee754_log+0x310>)
 8029870:	9000      	str	r0, [sp, #0]
 8029872:	9101      	str	r1, [sp, #4]
 8029874:	9806      	ldr	r0, [sp, #24]
 8029876:	9907      	ldr	r1, [sp, #28]
 8029878:	4b0e      	ldr	r3, [pc, #56]	@ (80298b4 <__ieee754_log+0x314>)
 802987a:	f7d9 f86b 	bl	8002954 <__aeabi_dmul>
 802987e:	0002      	movs	r2, r0
 8029880:	000b      	movs	r3, r1
 8029882:	0020      	movs	r0, r4
 8029884:	0029      	movs	r1, r5
 8029886:	e733      	b.n	80296f0 <__ieee754_log+0x150>
 8029888:	2000      	movs	r0, #0
 802988a:	2100      	movs	r1, #0
 802988c:	e699      	b.n	80295c2 <__ieee754_log+0x22>
 802988e:	46c0      	nop			@ (mov r8, r8)
 8029890:	c3500000 	.word	0xc3500000
 8029894:	43500000 	.word	0x43500000
 8029898:	7fefffff 	.word	0x7fefffff
 802989c:	fffffc01 	.word	0xfffffc01
 80298a0:	00095f64 	.word	0x00095f64
 80298a4:	3ff00000 	.word	0x3ff00000
 80298a8:	fee00000 	.word	0xfee00000
 80298ac:	3fe62e42 	.word	0x3fe62e42
 80298b0:	35793c76 	.word	0x35793c76
 80298b4:	3dea39ef 	.word	0x3dea39ef
 80298b8:	55555555 	.word	0x55555555
 80298bc:	3fd55555 	.word	0x3fd55555
 80298c0:	3fe00000 	.word	0x3fe00000
 80298c4:	fff9eb86 	.word	0xfff9eb86
 80298c8:	df3e5244 	.word	0xdf3e5244
 80298cc:	3fc2f112 	.word	0x3fc2f112
 80298d0:	96cb03de 	.word	0x96cb03de
 80298d4:	3fc74664 	.word	0x3fc74664
 80298d8:	94229359 	.word	0x94229359
 80298dc:	3fd24924 	.word	0x3fd24924
 80298e0:	55555593 	.word	0x55555593
 80298e4:	3fe55555 	.word	0x3fe55555
 80298e8:	d078c69f 	.word	0xd078c69f
 80298ec:	3fc39a09 	.word	0x3fc39a09
 80298f0:	1d8e78af 	.word	0x1d8e78af
 80298f4:	3fcc71c5 	.word	0x3fcc71c5
 80298f8:	9997fa04 	.word	0x9997fa04
 80298fc:	3fd99999 	.word	0x3fd99999
 8029900:	0006b851 	.word	0x0006b851

08029904 <__ieee754_pow>:
 8029904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029906:	b095      	sub	sp, #84	@ 0x54
 8029908:	9204      	str	r2, [sp, #16]
 802990a:	9305      	str	r3, [sp, #20]
 802990c:	9b04      	ldr	r3, [sp, #16]
 802990e:	9f05      	ldr	r7, [sp, #20]
 8029910:	001a      	movs	r2, r3
 8029912:	007d      	lsls	r5, r7, #1
 8029914:	086d      	lsrs	r5, r5, #1
 8029916:	9002      	str	r0, [sp, #8]
 8029918:	9103      	str	r1, [sp, #12]
 802991a:	432a      	orrs	r2, r5
 802991c:	d11a      	bne.n	8029954 <__ieee754_pow+0x50>
 802991e:	2180      	movs	r1, #128	@ 0x80
 8029920:	9a02      	ldr	r2, [sp, #8]
 8029922:	9803      	ldr	r0, [sp, #12]
 8029924:	0309      	lsls	r1, r1, #12
 8029926:	4048      	eors	r0, r1
 8029928:	0003      	movs	r3, r0
 802992a:	1892      	adds	r2, r2, r2
 802992c:	415b      	adcs	r3, r3
 802992e:	4996      	ldr	r1, [pc, #600]	@ (8029b88 <__ieee754_pow+0x284>)
 8029930:	428b      	cmp	r3, r1
 8029932:	d806      	bhi.n	8029942 <__ieee754_pow+0x3e>
 8029934:	d001      	beq.n	802993a <__ieee754_pow+0x36>
 8029936:	f000 fcce 	bl	802a2d6 <__ieee754_pow+0x9d2>
 802993a:	2a00      	cmp	r2, #0
 802993c:	d101      	bne.n	8029942 <__ieee754_pow+0x3e>
 802993e:	f000 fcca 	bl	802a2d6 <__ieee754_pow+0x9d2>
 8029942:	9a04      	ldr	r2, [sp, #16]
 8029944:	9b05      	ldr	r3, [sp, #20]
 8029946:	9802      	ldr	r0, [sp, #8]
 8029948:	9903      	ldr	r1, [sp, #12]
 802994a:	f7d8 f803 	bl	8001954 <__aeabi_dadd>
 802994e:	9000      	str	r0, [sp, #0]
 8029950:	9101      	str	r1, [sp, #4]
 8029952:	e08e      	b.n	8029a72 <__ieee754_pow+0x16e>
 8029954:	9a03      	ldr	r2, [sp, #12]
 8029956:	9206      	str	r2, [sp, #24]
 8029958:	9a02      	ldr	r2, [sp, #8]
 802995a:	920a      	str	r2, [sp, #40]	@ 0x28
 802995c:	9a03      	ldr	r2, [sp, #12]
 802995e:	0054      	lsls	r4, r2, #1
 8029960:	4a8a      	ldr	r2, [pc, #552]	@ (8029b8c <__ieee754_pow+0x288>)
 8029962:	0864      	lsrs	r4, r4, #1
 8029964:	4294      	cmp	r4, r2
 8029966:	d80e      	bhi.n	8029986 <__ieee754_pow+0x82>
 8029968:	d105      	bne.n	8029976 <__ieee754_pow+0x72>
 802996a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802996c:	2a00      	cmp	r2, #0
 802996e:	d1e8      	bne.n	8029942 <__ieee754_pow+0x3e>
 8029970:	42a5      	cmp	r5, r4
 8029972:	d8e6      	bhi.n	8029942 <__ieee754_pow+0x3e>
 8029974:	e002      	b.n	802997c <__ieee754_pow+0x78>
 8029976:	4a85      	ldr	r2, [pc, #532]	@ (8029b8c <__ieee754_pow+0x288>)
 8029978:	4295      	cmp	r5, r2
 802997a:	d804      	bhi.n	8029986 <__ieee754_pow+0x82>
 802997c:	4a83      	ldr	r2, [pc, #524]	@ (8029b8c <__ieee754_pow+0x288>)
 802997e:	4295      	cmp	r5, r2
 8029980:	d10c      	bne.n	802999c <__ieee754_pow+0x98>
 8029982:	2b00      	cmp	r3, #0
 8029984:	d00a      	beq.n	802999c <__ieee754_pow+0x98>
 8029986:	4a82      	ldr	r2, [pc, #520]	@ (8029b90 <__ieee754_pow+0x28c>)
 8029988:	9b03      	ldr	r3, [sp, #12]
 802998a:	189b      	adds	r3, r3, r2
 802998c:	9a02      	ldr	r2, [sp, #8]
 802998e:	4313      	orrs	r3, r2
 8029990:	d1d7      	bne.n	8029942 <__ieee754_pow+0x3e>
 8029992:	2180      	movs	r1, #128	@ 0x80
 8029994:	9a04      	ldr	r2, [sp, #16]
 8029996:	9805      	ldr	r0, [sp, #20]
 8029998:	0309      	lsls	r1, r1, #12
 802999a:	e7c4      	b.n	8029926 <__ieee754_pow+0x22>
 802999c:	2600      	movs	r6, #0
 802999e:	9a06      	ldr	r2, [sp, #24]
 80299a0:	9408      	str	r4, [sp, #32]
 80299a2:	42b2      	cmp	r2, r6
 80299a4:	da42      	bge.n	8029a2c <__ieee754_pow+0x128>
 80299a6:	4a7b      	ldr	r2, [pc, #492]	@ (8029b94 <__ieee754_pow+0x290>)
 80299a8:	4295      	cmp	r5, r2
 80299aa:	d83e      	bhi.n	8029a2a <__ieee754_pow+0x126>
 80299ac:	4a7a      	ldr	r2, [pc, #488]	@ (8029b98 <__ieee754_pow+0x294>)
 80299ae:	4295      	cmp	r5, r2
 80299b0:	d910      	bls.n	80299d4 <__ieee754_pow+0xd0>
 80299b2:	497a      	ldr	r1, [pc, #488]	@ (8029b9c <__ieee754_pow+0x298>)
 80299b4:	152a      	asrs	r2, r5, #20
 80299b6:	1852      	adds	r2, r2, r1
 80299b8:	2a14      	cmp	r2, #20
 80299ba:	dd18      	ble.n	80299ee <__ieee754_pow+0xea>
 80299bc:	2134      	movs	r1, #52	@ 0x34
 80299be:	1a89      	subs	r1, r1, r2
 80299c0:	9a04      	ldr	r2, [sp, #16]
 80299c2:	40ca      	lsrs	r2, r1
 80299c4:	0010      	movs	r0, r2
 80299c6:	4088      	lsls	r0, r1
 80299c8:	4298      	cmp	r0, r3
 80299ca:	d103      	bne.n	80299d4 <__ieee754_pow+0xd0>
 80299cc:	2101      	movs	r1, #1
 80299ce:	3602      	adds	r6, #2
 80299d0:	400a      	ands	r2, r1
 80299d2:	1ab6      	subs	r6, r6, r2
 80299d4:	2b00      	cmp	r3, #0
 80299d6:	d15b      	bne.n	8029a90 <__ieee754_pow+0x18c>
 80299d8:	2380      	movs	r3, #128	@ 0x80
 80299da:	05db      	lsls	r3, r3, #23
 80299dc:	429f      	cmp	r7, r3
 80299de:	d14c      	bne.n	8029a7a <__ieee754_pow+0x176>
 80299e0:	9a02      	ldr	r2, [sp, #8]
 80299e2:	9b03      	ldr	r3, [sp, #12]
 80299e4:	0010      	movs	r0, r2
 80299e6:	0019      	movs	r1, r3
 80299e8:	f7d8 ffb4 	bl	8002954 <__aeabi_dmul>
 80299ec:	e7af      	b.n	802994e <__ieee754_pow+0x4a>
 80299ee:	2b00      	cmp	r3, #0
 80299f0:	d14e      	bne.n	8029a90 <__ieee754_pow+0x18c>
 80299f2:	3314      	adds	r3, #20
 80299f4:	1a9a      	subs	r2, r3, r2
 80299f6:	002b      	movs	r3, r5
 80299f8:	4113      	asrs	r3, r2
 80299fa:	0019      	movs	r1, r3
 80299fc:	4091      	lsls	r1, r2
 80299fe:	42a9      	cmp	r1, r5
 8029a00:	d103      	bne.n	8029a0a <__ieee754_pow+0x106>
 8029a02:	2201      	movs	r2, #1
 8029a04:	2602      	movs	r6, #2
 8029a06:	4013      	ands	r3, r2
 8029a08:	1af6      	subs	r6, r6, r3
 8029a0a:	4b65      	ldr	r3, [pc, #404]	@ (8029ba0 <__ieee754_pow+0x29c>)
 8029a0c:	429d      	cmp	r5, r3
 8029a0e:	d1e3      	bne.n	80299d8 <__ieee754_pow+0xd4>
 8029a10:	9b02      	ldr	r3, [sp, #8]
 8029a12:	9c03      	ldr	r4, [sp, #12]
 8029a14:	9300      	str	r3, [sp, #0]
 8029a16:	9401      	str	r4, [sp, #4]
 8029a18:	2f00      	cmp	r7, #0
 8029a1a:	da2a      	bge.n	8029a72 <__ieee754_pow+0x16e>
 8029a1c:	001a      	movs	r2, r3
 8029a1e:	2000      	movs	r0, #0
 8029a20:	0023      	movs	r3, r4
 8029a22:	495f      	ldr	r1, [pc, #380]	@ (8029ba0 <__ieee754_pow+0x29c>)
 8029a24:	f7d8 fb5c 	bl	80020e0 <__aeabi_ddiv>
 8029a28:	e791      	b.n	802994e <__ieee754_pow+0x4a>
 8029a2a:	2602      	movs	r6, #2
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	d12f      	bne.n	8029a90 <__ieee754_pow+0x18c>
 8029a30:	4b56      	ldr	r3, [pc, #344]	@ (8029b8c <__ieee754_pow+0x288>)
 8029a32:	429d      	cmp	r5, r3
 8029a34:	d1e9      	bne.n	8029a0a <__ieee754_pow+0x106>
 8029a36:	4b56      	ldr	r3, [pc, #344]	@ (8029b90 <__ieee754_pow+0x28c>)
 8029a38:	9a02      	ldr	r2, [sp, #8]
 8029a3a:	18e3      	adds	r3, r4, r3
 8029a3c:	4313      	orrs	r3, r2
 8029a3e:	d101      	bne.n	8029a44 <__ieee754_pow+0x140>
 8029a40:	f000 fc49 	bl	802a2d6 <__ieee754_pow+0x9d2>
 8029a44:	4b54      	ldr	r3, [pc, #336]	@ (8029b98 <__ieee754_pow+0x294>)
 8029a46:	429c      	cmp	r4, r3
 8029a48:	d909      	bls.n	8029a5e <__ieee754_pow+0x15a>
 8029a4a:	9b04      	ldr	r3, [sp, #16]
 8029a4c:	9c05      	ldr	r4, [sp, #20]
 8029a4e:	9300      	str	r3, [sp, #0]
 8029a50:	9401      	str	r4, [sp, #4]
 8029a52:	2f00      	cmp	r7, #0
 8029a54:	da0d      	bge.n	8029a72 <__ieee754_pow+0x16e>
 8029a56:	2300      	movs	r3, #0
 8029a58:	2400      	movs	r4, #0
 8029a5a:	f000 fc3e 	bl	802a2da <__ieee754_pow+0x9d6>
 8029a5e:	2f00      	cmp	r7, #0
 8029a60:	daf9      	bge.n	8029a56 <__ieee754_pow+0x152>
 8029a62:	2280      	movs	r2, #128	@ 0x80
 8029a64:	0612      	lsls	r2, r2, #24
 8029a66:	4694      	mov	ip, r2
 8029a68:	9b04      	ldr	r3, [sp, #16]
 8029a6a:	9300      	str	r3, [sp, #0]
 8029a6c:	9b05      	ldr	r3, [sp, #20]
 8029a6e:	4463      	add	r3, ip
 8029a70:	9301      	str	r3, [sp, #4]
 8029a72:	9800      	ldr	r0, [sp, #0]
 8029a74:	9901      	ldr	r1, [sp, #4]
 8029a76:	b015      	add	sp, #84	@ 0x54
 8029a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8029ba4 <__ieee754_pow+0x2a0>)
 8029a7c:	429f      	cmp	r7, r3
 8029a7e:	d107      	bne.n	8029a90 <__ieee754_pow+0x18c>
 8029a80:	9b06      	ldr	r3, [sp, #24]
 8029a82:	2b00      	cmp	r3, #0
 8029a84:	db04      	blt.n	8029a90 <__ieee754_pow+0x18c>
 8029a86:	9802      	ldr	r0, [sp, #8]
 8029a88:	9903      	ldr	r1, [sp, #12]
 8029a8a:	f000 fe03 	bl	802a694 <__ieee754_sqrt>
 8029a8e:	e75e      	b.n	802994e <__ieee754_pow+0x4a>
 8029a90:	9802      	ldr	r0, [sp, #8]
 8029a92:	9903      	ldr	r1, [sp, #12]
 8029a94:	f000 fc4e 	bl	802a334 <fabs>
 8029a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029a9a:	9000      	str	r0, [sp, #0]
 8029a9c:	9101      	str	r1, [sp, #4]
 8029a9e:	2b00      	cmp	r3, #0
 8029aa0:	d12c      	bne.n	8029afc <__ieee754_pow+0x1f8>
 8029aa2:	9b03      	ldr	r3, [sp, #12]
 8029aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8029ba0 <__ieee754_pow+0x29c>)
 8029aa6:	009b      	lsls	r3, r3, #2
 8029aa8:	089b      	lsrs	r3, r3, #2
 8029aaa:	4293      	cmp	r3, r2
 8029aac:	d001      	beq.n	8029ab2 <__ieee754_pow+0x1ae>
 8029aae:	2c00      	cmp	r4, #0
 8029ab0:	d124      	bne.n	8029afc <__ieee754_pow+0x1f8>
 8029ab2:	2f00      	cmp	r7, #0
 8029ab4:	da07      	bge.n	8029ac6 <__ieee754_pow+0x1c2>
 8029ab6:	9a00      	ldr	r2, [sp, #0]
 8029ab8:	9b01      	ldr	r3, [sp, #4]
 8029aba:	2000      	movs	r0, #0
 8029abc:	4938      	ldr	r1, [pc, #224]	@ (8029ba0 <__ieee754_pow+0x29c>)
 8029abe:	f7d8 fb0f 	bl	80020e0 <__aeabi_ddiv>
 8029ac2:	9000      	str	r0, [sp, #0]
 8029ac4:	9101      	str	r1, [sp, #4]
 8029ac6:	9b06      	ldr	r3, [sp, #24]
 8029ac8:	2b00      	cmp	r3, #0
 8029aca:	dad2      	bge.n	8029a72 <__ieee754_pow+0x16e>
 8029acc:	4b30      	ldr	r3, [pc, #192]	@ (8029b90 <__ieee754_pow+0x28c>)
 8029ace:	18e4      	adds	r4, r4, r3
 8029ad0:	4334      	orrs	r4, r6
 8029ad2:	d108      	bne.n	8029ae6 <__ieee754_pow+0x1e2>
 8029ad4:	9a00      	ldr	r2, [sp, #0]
 8029ad6:	9b01      	ldr	r3, [sp, #4]
 8029ad8:	0010      	movs	r0, r2
 8029ada:	0019      	movs	r1, r3
 8029adc:	f7d9 fa20 	bl	8002f20 <__aeabi_dsub>
 8029ae0:	0002      	movs	r2, r0
 8029ae2:	000b      	movs	r3, r1
 8029ae4:	e79e      	b.n	8029a24 <__ieee754_pow+0x120>
 8029ae6:	2e01      	cmp	r6, #1
 8029ae8:	d1c3      	bne.n	8029a72 <__ieee754_pow+0x16e>
 8029aea:	9800      	ldr	r0, [sp, #0]
 8029aec:	2180      	movs	r1, #128	@ 0x80
 8029aee:	0002      	movs	r2, r0
 8029af0:	9801      	ldr	r0, [sp, #4]
 8029af2:	0609      	lsls	r1, r1, #24
 8029af4:	1843      	adds	r3, r0, r1
 8029af6:	9200      	str	r2, [sp, #0]
 8029af8:	9301      	str	r3, [sp, #4]
 8029afa:	e7ba      	b.n	8029a72 <__ieee754_pow+0x16e>
 8029afc:	9b03      	ldr	r3, [sp, #12]
 8029afe:	0fdb      	lsrs	r3, r3, #31
 8029b00:	3b01      	subs	r3, #1
 8029b02:	001a      	movs	r2, r3
 8029b04:	4332      	orrs	r2, r6
 8029b06:	d102      	bne.n	8029b0e <__ieee754_pow+0x20a>
 8029b08:	9a02      	ldr	r2, [sp, #8]
 8029b0a:	9b03      	ldr	r3, [sp, #12]
 8029b0c:	e7e4      	b.n	8029ad8 <__ieee754_pow+0x1d4>
 8029b0e:	3e01      	subs	r6, #1
 8029b10:	2200      	movs	r2, #0
 8029b12:	431e      	orrs	r6, r3
 8029b14:	d013      	beq.n	8029b3e <__ieee754_pow+0x23a>
 8029b16:	4b22      	ldr	r3, [pc, #136]	@ (8029ba0 <__ieee754_pow+0x29c>)
 8029b18:	9206      	str	r2, [sp, #24]
 8029b1a:	9307      	str	r3, [sp, #28]
 8029b1c:	2384      	movs	r3, #132	@ 0x84
 8029b1e:	05db      	lsls	r3, r3, #23
 8029b20:	429d      	cmp	r5, r3
 8029b22:	d800      	bhi.n	8029b26 <__ieee754_pow+0x222>
 8029b24:	e0fa      	b.n	8029d1c <__ieee754_pow+0x418>
 8029b26:	4b20      	ldr	r3, [pc, #128]	@ (8029ba8 <__ieee754_pow+0x2a4>)
 8029b28:	429d      	cmp	r5, r3
 8029b2a:	d910      	bls.n	8029b4e <__ieee754_pow+0x24a>
 8029b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8029b98 <__ieee754_pow+0x294>)
 8029b2e:	429c      	cmp	r4, r3
 8029b30:	d807      	bhi.n	8029b42 <__ieee754_pow+0x23e>
 8029b32:	2f00      	cmp	r7, #0
 8029b34:	da07      	bge.n	8029b46 <__ieee754_pow+0x242>
 8029b36:	2000      	movs	r0, #0
 8029b38:	f000 fd82 	bl	802a640 <__math_oflow>
 8029b3c:	e707      	b.n	802994e <__ieee754_pow+0x4a>
 8029b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8029bac <__ieee754_pow+0x2a8>)
 8029b40:	e7ea      	b.n	8029b18 <__ieee754_pow+0x214>
 8029b42:	2f00      	cmp	r7, #0
 8029b44:	dcf7      	bgt.n	8029b36 <__ieee754_pow+0x232>
 8029b46:	2000      	movs	r0, #0
 8029b48:	f000 fd73 	bl	802a632 <__math_uflow>
 8029b4c:	e6ff      	b.n	802994e <__ieee754_pow+0x4a>
 8029b4e:	4b18      	ldr	r3, [pc, #96]	@ (8029bb0 <__ieee754_pow+0x2ac>)
 8029b50:	429c      	cmp	r4, r3
 8029b52:	d80a      	bhi.n	8029b6a <__ieee754_pow+0x266>
 8029b54:	9806      	ldr	r0, [sp, #24]
 8029b56:	9907      	ldr	r1, [sp, #28]
 8029b58:	2300      	movs	r3, #0
 8029b5a:	2200      	movs	r2, #0
 8029b5c:	f7d6 fcae 	bl	80004bc <__aeabi_dcmplt>
 8029b60:	1e43      	subs	r3, r0, #1
 8029b62:	4198      	sbcs	r0, r3
 8029b64:	2f00      	cmp	r7, #0
 8029b66:	daef      	bge.n	8029b48 <__ieee754_pow+0x244>
 8029b68:	e7e6      	b.n	8029b38 <__ieee754_pow+0x234>
 8029b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8029ba0 <__ieee754_pow+0x29c>)
 8029b6c:	2200      	movs	r2, #0
 8029b6e:	429c      	cmp	r4, r3
 8029b70:	d920      	bls.n	8029bb4 <__ieee754_pow+0x2b0>
 8029b72:	9806      	ldr	r0, [sp, #24]
 8029b74:	9907      	ldr	r1, [sp, #28]
 8029b76:	2300      	movs	r3, #0
 8029b78:	f7d6 fca0 	bl	80004bc <__aeabi_dcmplt>
 8029b7c:	1e43      	subs	r3, r0, #1
 8029b7e:	4198      	sbcs	r0, r3
 8029b80:	2f00      	cmp	r7, #0
 8029b82:	dcd9      	bgt.n	8029b38 <__ieee754_pow+0x234>
 8029b84:	e7e0      	b.n	8029b48 <__ieee754_pow+0x244>
 8029b86:	46c0      	nop			@ (mov r8, r8)
 8029b88:	fff00000 	.word	0xfff00000
 8029b8c:	7ff00000 	.word	0x7ff00000
 8029b90:	c0100000 	.word	0xc0100000
 8029b94:	433fffff 	.word	0x433fffff
 8029b98:	3fefffff 	.word	0x3fefffff
 8029b9c:	fffffc01 	.word	0xfffffc01
 8029ba0:	3ff00000 	.word	0x3ff00000
 8029ba4:	3fe00000 	.word	0x3fe00000
 8029ba8:	43f00000 	.word	0x43f00000
 8029bac:	bff00000 	.word	0xbff00000
 8029bb0:	3feffffe 	.word	0x3feffffe
 8029bb4:	9800      	ldr	r0, [sp, #0]
 8029bb6:	9901      	ldr	r1, [sp, #4]
 8029bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8029cf0 <__ieee754_pow+0x3ec>)
 8029bba:	f7d9 f9b1 	bl	8002f20 <__aeabi_dsub>
 8029bbe:	22c0      	movs	r2, #192	@ 0xc0
 8029bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8029cf4 <__ieee754_pow+0x3f0>)
 8029bc2:	05d2      	lsls	r2, r2, #23
 8029bc4:	0006      	movs	r6, r0
 8029bc6:	000f      	movs	r7, r1
 8029bc8:	f7d8 fec4 	bl	8002954 <__aeabi_dmul>
 8029bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8029cf8 <__ieee754_pow+0x3f4>)
 8029bce:	9002      	str	r0, [sp, #8]
 8029bd0:	9103      	str	r1, [sp, #12]
 8029bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8029cfc <__ieee754_pow+0x3f8>)
 8029bd4:	0030      	movs	r0, r6
 8029bd6:	0039      	movs	r1, r7
 8029bd8:	f7d8 febc 	bl	8002954 <__aeabi_dmul>
 8029bdc:	2200      	movs	r2, #0
 8029bde:	9000      	str	r0, [sp, #0]
 8029be0:	9101      	str	r1, [sp, #4]
 8029be2:	4b47      	ldr	r3, [pc, #284]	@ (8029d00 <__ieee754_pow+0x3fc>)
 8029be4:	0030      	movs	r0, r6
 8029be6:	0039      	movs	r1, r7
 8029be8:	f7d8 feb4 	bl	8002954 <__aeabi_dmul>
 8029bec:	0002      	movs	r2, r0
 8029bee:	000b      	movs	r3, r1
 8029bf0:	4844      	ldr	r0, [pc, #272]	@ (8029d04 <__ieee754_pow+0x400>)
 8029bf2:	4945      	ldr	r1, [pc, #276]	@ (8029d08 <__ieee754_pow+0x404>)
 8029bf4:	f7d9 f994 	bl	8002f20 <__aeabi_dsub>
 8029bf8:	0032      	movs	r2, r6
 8029bfa:	003b      	movs	r3, r7
 8029bfc:	f7d8 feaa 	bl	8002954 <__aeabi_dmul>
 8029c00:	0002      	movs	r2, r0
 8029c02:	000b      	movs	r3, r1
 8029c04:	2000      	movs	r0, #0
 8029c06:	4941      	ldr	r1, [pc, #260]	@ (8029d0c <__ieee754_pow+0x408>)
 8029c08:	f7d9 f98a 	bl	8002f20 <__aeabi_dsub>
 8029c0c:	0032      	movs	r2, r6
 8029c0e:	0004      	movs	r4, r0
 8029c10:	000d      	movs	r5, r1
 8029c12:	003b      	movs	r3, r7
 8029c14:	0030      	movs	r0, r6
 8029c16:	0039      	movs	r1, r7
 8029c18:	f7d8 fe9c 	bl	8002954 <__aeabi_dmul>
 8029c1c:	0002      	movs	r2, r0
 8029c1e:	000b      	movs	r3, r1
 8029c20:	0020      	movs	r0, r4
 8029c22:	0029      	movs	r1, r5
 8029c24:	f7d8 fe96 	bl	8002954 <__aeabi_dmul>
 8029c28:	4a39      	ldr	r2, [pc, #228]	@ (8029d10 <__ieee754_pow+0x40c>)
 8029c2a:	4b32      	ldr	r3, [pc, #200]	@ (8029cf4 <__ieee754_pow+0x3f0>)
 8029c2c:	f7d8 fe92 	bl	8002954 <__aeabi_dmul>
 8029c30:	0002      	movs	r2, r0
 8029c32:	000b      	movs	r3, r1
 8029c34:	9800      	ldr	r0, [sp, #0]
 8029c36:	9901      	ldr	r1, [sp, #4]
 8029c38:	f7d9 f972 	bl	8002f20 <__aeabi_dsub>
 8029c3c:	0002      	movs	r2, r0
 8029c3e:	000b      	movs	r3, r1
 8029c40:	0004      	movs	r4, r0
 8029c42:	000d      	movs	r5, r1
 8029c44:	9802      	ldr	r0, [sp, #8]
 8029c46:	9903      	ldr	r1, [sp, #12]
 8029c48:	f7d7 fe84 	bl	8001954 <__aeabi_dadd>
 8029c4c:	9a02      	ldr	r2, [sp, #8]
 8029c4e:	9b03      	ldr	r3, [sp, #12]
 8029c50:	2000      	movs	r0, #0
 8029c52:	9000      	str	r0, [sp, #0]
 8029c54:	9101      	str	r1, [sp, #4]
 8029c56:	f7d9 f963 	bl	8002f20 <__aeabi_dsub>
 8029c5a:	0002      	movs	r2, r0
 8029c5c:	000b      	movs	r3, r1
 8029c5e:	0020      	movs	r0, r4
 8029c60:	0029      	movs	r1, r5
 8029c62:	f7d9 f95d 	bl	8002f20 <__aeabi_dsub>
 8029c66:	9c04      	ldr	r4, [sp, #16]
 8029c68:	9d05      	ldr	r5, [sp, #20]
 8029c6a:	2400      	movs	r4, #0
 8029c6c:	0006      	movs	r6, r0
 8029c6e:	000f      	movs	r7, r1
 8029c70:	9804      	ldr	r0, [sp, #16]
 8029c72:	9905      	ldr	r1, [sp, #20]
 8029c74:	0022      	movs	r2, r4
 8029c76:	002b      	movs	r3, r5
 8029c78:	9402      	str	r4, [sp, #8]
 8029c7a:	9503      	str	r5, [sp, #12]
 8029c7c:	f7d9 f950 	bl	8002f20 <__aeabi_dsub>
 8029c80:	9a00      	ldr	r2, [sp, #0]
 8029c82:	9b01      	ldr	r3, [sp, #4]
 8029c84:	f7d8 fe66 	bl	8002954 <__aeabi_dmul>
 8029c88:	9a04      	ldr	r2, [sp, #16]
 8029c8a:	9b05      	ldr	r3, [sp, #20]
 8029c8c:	9008      	str	r0, [sp, #32]
 8029c8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029c90:	0030      	movs	r0, r6
 8029c92:	0039      	movs	r1, r7
 8029c94:	f7d8 fe5e 	bl	8002954 <__aeabi_dmul>
 8029c98:	0002      	movs	r2, r0
 8029c9a:	000b      	movs	r3, r1
 8029c9c:	9808      	ldr	r0, [sp, #32]
 8029c9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029ca0:	f7d7 fe58 	bl	8001954 <__aeabi_dadd>
 8029ca4:	0022      	movs	r2, r4
 8029ca6:	002b      	movs	r3, r5
 8029ca8:	9004      	str	r0, [sp, #16]
 8029caa:	9105      	str	r1, [sp, #20]
 8029cac:	9800      	ldr	r0, [sp, #0]
 8029cae:	9901      	ldr	r1, [sp, #4]
 8029cb0:	f7d8 fe50 	bl	8002954 <__aeabi_dmul>
 8029cb4:	000b      	movs	r3, r1
 8029cb6:	0002      	movs	r2, r0
 8029cb8:	9000      	str	r0, [sp, #0]
 8029cba:	9101      	str	r1, [sp, #4]
 8029cbc:	9804      	ldr	r0, [sp, #16]
 8029cbe:	9905      	ldr	r1, [sp, #20]
 8029cc0:	f7d7 fe48 	bl	8001954 <__aeabi_dadd>
 8029cc4:	4b13      	ldr	r3, [pc, #76]	@ (8029d14 <__ieee754_pow+0x410>)
 8029cc6:	0006      	movs	r6, r0
 8029cc8:	000f      	movs	r7, r1
 8029cca:	9108      	str	r1, [sp, #32]
 8029ccc:	4299      	cmp	r1, r3
 8029cce:	dc00      	bgt.n	8029cd2 <__ieee754_pow+0x3ce>
 8029cd0:	e1c0      	b.n	802a054 <__ieee754_pow+0x750>
 8029cd2:	4b11      	ldr	r3, [pc, #68]	@ (8029d18 <__ieee754_pow+0x414>)
 8029cd4:	18cb      	adds	r3, r1, r3
 8029cd6:	4303      	orrs	r3, r0
 8029cd8:	42a3      	cmp	r3, r4
 8029cda:	d100      	bne.n	8029cde <__ieee754_pow+0x3da>
 8029cdc:	e1a1      	b.n	802a022 <__ieee754_pow+0x71e>
 8029cde:	9806      	ldr	r0, [sp, #24]
 8029ce0:	9907      	ldr	r1, [sp, #28]
 8029ce2:	2300      	movs	r3, #0
 8029ce4:	2200      	movs	r2, #0
 8029ce6:	f7d6 fbe9 	bl	80004bc <__aeabi_dcmplt>
 8029cea:	1e43      	subs	r3, r0, #1
 8029cec:	4198      	sbcs	r0, r3
 8029cee:	e723      	b.n	8029b38 <__ieee754_pow+0x234>
 8029cf0:	3ff00000 	.word	0x3ff00000
 8029cf4:	3ff71547 	.word	0x3ff71547
 8029cf8:	f85ddf44 	.word	0xf85ddf44
 8029cfc:	3e54ae0b 	.word	0x3e54ae0b
 8029d00:	3fd00000 	.word	0x3fd00000
 8029d04:	55555555 	.word	0x55555555
 8029d08:	3fd55555 	.word	0x3fd55555
 8029d0c:	3fe00000 	.word	0x3fe00000
 8029d10:	652b82fe 	.word	0x652b82fe
 8029d14:	408fffff 	.word	0x408fffff
 8029d18:	bf700000 	.word	0xbf700000
 8029d1c:	4bdc      	ldr	r3, [pc, #880]	@ (802a090 <__ieee754_pow+0x78c>)
 8029d1e:	9903      	ldr	r1, [sp, #12]
 8029d20:	2200      	movs	r2, #0
 8029d22:	420b      	tst	r3, r1
 8029d24:	d10b      	bne.n	8029d3e <__ieee754_pow+0x43a>
 8029d26:	9800      	ldr	r0, [sp, #0]
 8029d28:	9901      	ldr	r1, [sp, #4]
 8029d2a:	2200      	movs	r2, #0
 8029d2c:	4bd9      	ldr	r3, [pc, #868]	@ (802a094 <__ieee754_pow+0x790>)
 8029d2e:	f7d8 fe11 	bl	8002954 <__aeabi_dmul>
 8029d32:	2235      	movs	r2, #53	@ 0x35
 8029d34:	9000      	str	r0, [sp, #0]
 8029d36:	9101      	str	r1, [sp, #4]
 8029d38:	9b01      	ldr	r3, [sp, #4]
 8029d3a:	4252      	negs	r2, r2
 8029d3c:	9308      	str	r3, [sp, #32]
 8029d3e:	9b08      	ldr	r3, [sp, #32]
 8029d40:	49d5      	ldr	r1, [pc, #852]	@ (802a098 <__ieee754_pow+0x794>)
 8029d42:	151b      	asrs	r3, r3, #20
 8029d44:	185b      	adds	r3, r3, r1
 8029d46:	189b      	adds	r3, r3, r2
 8029d48:	930e      	str	r3, [sp, #56]	@ 0x38
 8029d4a:	9b08      	ldr	r3, [sp, #32]
 8029d4c:	4dd3      	ldr	r5, [pc, #844]	@ (802a09c <__ieee754_pow+0x798>)
 8029d4e:	031b      	lsls	r3, r3, #12
 8029d50:	4ad3      	ldr	r2, [pc, #844]	@ (802a0a0 <__ieee754_pow+0x79c>)
 8029d52:	0b1b      	lsrs	r3, r3, #12
 8029d54:	2600      	movs	r6, #0
 8029d56:	431d      	orrs	r5, r3
 8029d58:	4293      	cmp	r3, r2
 8029d5a:	dd09      	ble.n	8029d70 <__ieee754_pow+0x46c>
 8029d5c:	4ad1      	ldr	r2, [pc, #836]	@ (802a0a4 <__ieee754_pow+0x7a0>)
 8029d5e:	3601      	adds	r6, #1
 8029d60:	4293      	cmp	r3, r2
 8029d62:	dd05      	ble.n	8029d70 <__ieee754_pow+0x46c>
 8029d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029d66:	199b      	adds	r3, r3, r6
 8029d68:	2600      	movs	r6, #0
 8029d6a:	930e      	str	r3, [sp, #56]	@ 0x38
 8029d6c:	4bce      	ldr	r3, [pc, #824]	@ (802a0a8 <__ieee754_pow+0x7a4>)
 8029d6e:	18ed      	adds	r5, r5, r3
 8029d70:	9800      	ldr	r0, [sp, #0]
 8029d72:	9901      	ldr	r1, [sp, #4]
 8029d74:	0029      	movs	r1, r5
 8029d76:	4bcd      	ldr	r3, [pc, #820]	@ (802a0ac <__ieee754_pow+0x7a8>)
 8029d78:	00f2      	lsls	r2, r6, #3
 8029d7a:	189b      	adds	r3, r3, r2
 8029d7c:	685c      	ldr	r4, [r3, #4]
 8029d7e:	681b      	ldr	r3, [r3, #0]
 8029d80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8029d84:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029d86:	001a      	movs	r2, r3
 8029d88:	0023      	movs	r3, r4
 8029d8a:	900c      	str	r0, [sp, #48]	@ 0x30
 8029d8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8029d8e:	f7d9 f8c7 	bl	8002f20 <__aeabi_dsub>
 8029d92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029d94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029d96:	9010      	str	r0, [sp, #64]	@ 0x40
 8029d98:	9111      	str	r1, [sp, #68]	@ 0x44
 8029d9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029d9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029d9e:	f7d7 fdd9 	bl	8001954 <__aeabi_dadd>
 8029da2:	0002      	movs	r2, r0
 8029da4:	000b      	movs	r3, r1
 8029da6:	2000      	movs	r0, #0
 8029da8:	49bc      	ldr	r1, [pc, #752]	@ (802a09c <__ieee754_pow+0x798>)
 8029daa:	f7d8 f999 	bl	80020e0 <__aeabi_ddiv>
 8029dae:	0002      	movs	r2, r0
 8029db0:	000b      	movs	r3, r1
 8029db2:	9012      	str	r0, [sp, #72]	@ 0x48
 8029db4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029db6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029db8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029dba:	f7d8 fdcb 	bl	8002954 <__aeabi_dmul>
 8029dbe:	9008      	str	r0, [sp, #32]
 8029dc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8029dc2:	9b08      	ldr	r3, [sp, #32]
 8029dc4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029dc6:	2180      	movs	r1, #128	@ 0x80
 8029dc8:	9302      	str	r3, [sp, #8]
 8029dca:	9403      	str	r4, [sp, #12]
 8029dcc:	2080      	movs	r0, #128	@ 0x80
 8029dce:	2300      	movs	r3, #0
 8029dd0:	2200      	movs	r2, #0
 8029dd2:	106d      	asrs	r5, r5, #1
 8029dd4:	0589      	lsls	r1, r1, #22
 8029dd6:	9302      	str	r3, [sp, #8]
 8029dd8:	4329      	orrs	r1, r5
 8029dda:	0300      	lsls	r0, r0, #12
 8029ddc:	9b02      	ldr	r3, [sp, #8]
 8029dde:	9c03      	ldr	r4, [sp, #12]
 8029de0:	1809      	adds	r1, r1, r0
 8029de2:	9300      	str	r3, [sp, #0]
 8029de4:	9401      	str	r4, [sp, #4]
 8029de6:	04b6      	lsls	r6, r6, #18
 8029de8:	198b      	adds	r3, r1, r6
 8029dea:	9800      	ldr	r0, [sp, #0]
 8029dec:	9901      	ldr	r1, [sp, #4]
 8029dee:	0014      	movs	r4, r2
 8029df0:	001d      	movs	r5, r3
 8029df2:	f7d8 fdaf 	bl	8002954 <__aeabi_dmul>
 8029df6:	0002      	movs	r2, r0
 8029df8:	000b      	movs	r3, r1
 8029dfa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029dfc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029dfe:	f7d9 f88f 	bl	8002f20 <__aeabi_dsub>
 8029e02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029e06:	0006      	movs	r6, r0
 8029e08:	000f      	movs	r7, r1
 8029e0a:	0020      	movs	r0, r4
 8029e0c:	0029      	movs	r1, r5
 8029e0e:	f7d9 f887 	bl	8002f20 <__aeabi_dsub>
 8029e12:	0002      	movs	r2, r0
 8029e14:	000b      	movs	r3, r1
 8029e16:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029e18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029e1a:	f7d9 f881 	bl	8002f20 <__aeabi_dsub>
 8029e1e:	9a00      	ldr	r2, [sp, #0]
 8029e20:	9b01      	ldr	r3, [sp, #4]
 8029e22:	f7d8 fd97 	bl	8002954 <__aeabi_dmul>
 8029e26:	0002      	movs	r2, r0
 8029e28:	000b      	movs	r3, r1
 8029e2a:	0030      	movs	r0, r6
 8029e2c:	0039      	movs	r1, r7
 8029e2e:	f7d9 f877 	bl	8002f20 <__aeabi_dsub>
 8029e32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029e34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029e36:	f7d8 fd8d 	bl	8002954 <__aeabi_dmul>
 8029e3a:	9a08      	ldr	r2, [sp, #32]
 8029e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029e3e:	900a      	str	r0, [sp, #40]	@ 0x28
 8029e40:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029e42:	0010      	movs	r0, r2
 8029e44:	0019      	movs	r1, r3
 8029e46:	f7d8 fd85 	bl	8002954 <__aeabi_dmul>
 8029e4a:	0006      	movs	r6, r0
 8029e4c:	000f      	movs	r7, r1
 8029e4e:	4a98      	ldr	r2, [pc, #608]	@ (802a0b0 <__ieee754_pow+0x7ac>)
 8029e50:	4b98      	ldr	r3, [pc, #608]	@ (802a0b4 <__ieee754_pow+0x7b0>)
 8029e52:	f7d8 fd7f 	bl	8002954 <__aeabi_dmul>
 8029e56:	4a98      	ldr	r2, [pc, #608]	@ (802a0b8 <__ieee754_pow+0x7b4>)
 8029e58:	4b98      	ldr	r3, [pc, #608]	@ (802a0bc <__ieee754_pow+0x7b8>)
 8029e5a:	f7d7 fd7b 	bl	8001954 <__aeabi_dadd>
 8029e5e:	0032      	movs	r2, r6
 8029e60:	003b      	movs	r3, r7
 8029e62:	f7d8 fd77 	bl	8002954 <__aeabi_dmul>
 8029e66:	4a96      	ldr	r2, [pc, #600]	@ (802a0c0 <__ieee754_pow+0x7bc>)
 8029e68:	4b96      	ldr	r3, [pc, #600]	@ (802a0c4 <__ieee754_pow+0x7c0>)
 8029e6a:	f7d7 fd73 	bl	8001954 <__aeabi_dadd>
 8029e6e:	0032      	movs	r2, r6
 8029e70:	003b      	movs	r3, r7
 8029e72:	f7d8 fd6f 	bl	8002954 <__aeabi_dmul>
 8029e76:	4a94      	ldr	r2, [pc, #592]	@ (802a0c8 <__ieee754_pow+0x7c4>)
 8029e78:	4b94      	ldr	r3, [pc, #592]	@ (802a0cc <__ieee754_pow+0x7c8>)
 8029e7a:	f7d7 fd6b 	bl	8001954 <__aeabi_dadd>
 8029e7e:	0032      	movs	r2, r6
 8029e80:	003b      	movs	r3, r7
 8029e82:	f7d8 fd67 	bl	8002954 <__aeabi_dmul>
 8029e86:	4a92      	ldr	r2, [pc, #584]	@ (802a0d0 <__ieee754_pow+0x7cc>)
 8029e88:	4b92      	ldr	r3, [pc, #584]	@ (802a0d4 <__ieee754_pow+0x7d0>)
 8029e8a:	f7d7 fd63 	bl	8001954 <__aeabi_dadd>
 8029e8e:	0032      	movs	r2, r6
 8029e90:	003b      	movs	r3, r7
 8029e92:	f7d8 fd5f 	bl	8002954 <__aeabi_dmul>
 8029e96:	4a90      	ldr	r2, [pc, #576]	@ (802a0d8 <__ieee754_pow+0x7d4>)
 8029e98:	4b90      	ldr	r3, [pc, #576]	@ (802a0dc <__ieee754_pow+0x7d8>)
 8029e9a:	f7d7 fd5b 	bl	8001954 <__aeabi_dadd>
 8029e9e:	0032      	movs	r2, r6
 8029ea0:	0004      	movs	r4, r0
 8029ea2:	000d      	movs	r5, r1
 8029ea4:	003b      	movs	r3, r7
 8029ea6:	0030      	movs	r0, r6
 8029ea8:	0039      	movs	r1, r7
 8029eaa:	f7d8 fd53 	bl	8002954 <__aeabi_dmul>
 8029eae:	0002      	movs	r2, r0
 8029eb0:	000b      	movs	r3, r1
 8029eb2:	0020      	movs	r0, r4
 8029eb4:	0029      	movs	r1, r5
 8029eb6:	f7d8 fd4d 	bl	8002954 <__aeabi_dmul>
 8029eba:	9a00      	ldr	r2, [sp, #0]
 8029ebc:	9b01      	ldr	r3, [sp, #4]
 8029ebe:	0004      	movs	r4, r0
 8029ec0:	000d      	movs	r5, r1
 8029ec2:	9808      	ldr	r0, [sp, #32]
 8029ec4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029ec6:	f7d7 fd45 	bl	8001954 <__aeabi_dadd>
 8029eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029ecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029ece:	f7d8 fd41 	bl	8002954 <__aeabi_dmul>
 8029ed2:	0022      	movs	r2, r4
 8029ed4:	002b      	movs	r3, r5
 8029ed6:	f7d7 fd3d 	bl	8001954 <__aeabi_dadd>
 8029eda:	9a00      	ldr	r2, [sp, #0]
 8029edc:	9b01      	ldr	r3, [sp, #4]
 8029ede:	900c      	str	r0, [sp, #48]	@ 0x30
 8029ee0:	910d      	str	r1, [sp, #52]	@ 0x34
 8029ee2:	0010      	movs	r0, r2
 8029ee4:	0019      	movs	r1, r3
 8029ee6:	f7d8 fd35 	bl	8002954 <__aeabi_dmul>
 8029eea:	2200      	movs	r2, #0
 8029eec:	4b7c      	ldr	r3, [pc, #496]	@ (802a0e0 <__ieee754_pow+0x7dc>)
 8029eee:	0004      	movs	r4, r0
 8029ef0:	000d      	movs	r5, r1
 8029ef2:	f7d7 fd2f 	bl	8001954 <__aeabi_dadd>
 8029ef6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029ef8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029efa:	f7d7 fd2b 	bl	8001954 <__aeabi_dadd>
 8029efe:	2000      	movs	r0, #0
 8029f00:	000f      	movs	r7, r1
 8029f02:	0006      	movs	r6, r0
 8029f04:	0002      	movs	r2, r0
 8029f06:	000b      	movs	r3, r1
 8029f08:	9800      	ldr	r0, [sp, #0]
 8029f0a:	9901      	ldr	r1, [sp, #4]
 8029f0c:	f7d8 fd22 	bl	8002954 <__aeabi_dmul>
 8029f10:	2200      	movs	r2, #0
 8029f12:	9000      	str	r0, [sp, #0]
 8029f14:	9101      	str	r1, [sp, #4]
 8029f16:	4b72      	ldr	r3, [pc, #456]	@ (802a0e0 <__ieee754_pow+0x7dc>)
 8029f18:	0030      	movs	r0, r6
 8029f1a:	0039      	movs	r1, r7
 8029f1c:	f7d9 f800 	bl	8002f20 <__aeabi_dsub>
 8029f20:	0022      	movs	r2, r4
 8029f22:	002b      	movs	r3, r5
 8029f24:	f7d8 fffc 	bl	8002f20 <__aeabi_dsub>
 8029f28:	0002      	movs	r2, r0
 8029f2a:	000b      	movs	r3, r1
 8029f2c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029f2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029f30:	f7d8 fff6 	bl	8002f20 <__aeabi_dsub>
 8029f34:	9a08      	ldr	r2, [sp, #32]
 8029f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f38:	f7d8 fd0c 	bl	8002954 <__aeabi_dmul>
 8029f3c:	0032      	movs	r2, r6
 8029f3e:	0004      	movs	r4, r0
 8029f40:	000d      	movs	r5, r1
 8029f42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029f44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029f46:	003b      	movs	r3, r7
 8029f48:	f7d8 fd04 	bl	8002954 <__aeabi_dmul>
 8029f4c:	0002      	movs	r2, r0
 8029f4e:	000b      	movs	r3, r1
 8029f50:	0020      	movs	r0, r4
 8029f52:	0029      	movs	r1, r5
 8029f54:	f7d7 fcfe 	bl	8001954 <__aeabi_dadd>
 8029f58:	0004      	movs	r4, r0
 8029f5a:	000d      	movs	r5, r1
 8029f5c:	0002      	movs	r2, r0
 8029f5e:	000b      	movs	r3, r1
 8029f60:	9800      	ldr	r0, [sp, #0]
 8029f62:	9901      	ldr	r1, [sp, #4]
 8029f64:	f7d7 fcf6 	bl	8001954 <__aeabi_dadd>
 8029f68:	22e0      	movs	r2, #224	@ 0xe0
 8029f6a:	2000      	movs	r0, #0
 8029f6c:	4b5d      	ldr	r3, [pc, #372]	@ (802a0e4 <__ieee754_pow+0x7e0>)
 8029f6e:	0612      	lsls	r2, r2, #24
 8029f70:	0006      	movs	r6, r0
 8029f72:	000f      	movs	r7, r1
 8029f74:	f7d8 fcee 	bl	8002954 <__aeabi_dmul>
 8029f78:	9008      	str	r0, [sp, #32]
 8029f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8029f7c:	9a00      	ldr	r2, [sp, #0]
 8029f7e:	9b01      	ldr	r3, [sp, #4]
 8029f80:	0030      	movs	r0, r6
 8029f82:	0039      	movs	r1, r7
 8029f84:	f7d8 ffcc 	bl	8002f20 <__aeabi_dsub>
 8029f88:	0002      	movs	r2, r0
 8029f8a:	000b      	movs	r3, r1
 8029f8c:	0020      	movs	r0, r4
 8029f8e:	0029      	movs	r1, r5
 8029f90:	f7d8 ffc6 	bl	8002f20 <__aeabi_dsub>
 8029f94:	4a54      	ldr	r2, [pc, #336]	@ (802a0e8 <__ieee754_pow+0x7e4>)
 8029f96:	4b53      	ldr	r3, [pc, #332]	@ (802a0e4 <__ieee754_pow+0x7e0>)
 8029f98:	f7d8 fcdc 	bl	8002954 <__aeabi_dmul>
 8029f9c:	4a53      	ldr	r2, [pc, #332]	@ (802a0ec <__ieee754_pow+0x7e8>)
 8029f9e:	0004      	movs	r4, r0
 8029fa0:	000d      	movs	r5, r1
 8029fa2:	0030      	movs	r0, r6
 8029fa4:	0039      	movs	r1, r7
 8029fa6:	4b52      	ldr	r3, [pc, #328]	@ (802a0f0 <__ieee754_pow+0x7ec>)
 8029fa8:	f7d8 fcd4 	bl	8002954 <__aeabi_dmul>
 8029fac:	0002      	movs	r2, r0
 8029fae:	000b      	movs	r3, r1
 8029fb0:	0020      	movs	r0, r4
 8029fb2:	0029      	movs	r1, r5
 8029fb4:	f7d7 fcce 	bl	8001954 <__aeabi_dadd>
 8029fb8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029fba:	4b4e      	ldr	r3, [pc, #312]	@ (802a0f4 <__ieee754_pow+0x7f0>)
 8029fbc:	189b      	adds	r3, r3, r2
 8029fbe:	681a      	ldr	r2, [r3, #0]
 8029fc0:	685b      	ldr	r3, [r3, #4]
 8029fc2:	f7d7 fcc7 	bl	8001954 <__aeabi_dadd>
 8029fc6:	900a      	str	r0, [sp, #40]	@ 0x28
 8029fc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029fca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029fcc:	f7d9 fc10 	bl	80037f0 <__aeabi_i2d>
 8029fd0:	0004      	movs	r4, r0
 8029fd2:	000d      	movs	r5, r1
 8029fd4:	9808      	ldr	r0, [sp, #32]
 8029fd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029fd8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029fda:	4b47      	ldr	r3, [pc, #284]	@ (802a0f8 <__ieee754_pow+0x7f4>)
 8029fdc:	189b      	adds	r3, r3, r2
 8029fde:	681e      	ldr	r6, [r3, #0]
 8029fe0:	685f      	ldr	r7, [r3, #4]
 8029fe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029fe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029fe6:	f7d7 fcb5 	bl	8001954 <__aeabi_dadd>
 8029fea:	0032      	movs	r2, r6
 8029fec:	003b      	movs	r3, r7
 8029fee:	f7d7 fcb1 	bl	8001954 <__aeabi_dadd>
 8029ff2:	0022      	movs	r2, r4
 8029ff4:	002b      	movs	r3, r5
 8029ff6:	f7d7 fcad 	bl	8001954 <__aeabi_dadd>
 8029ffa:	2000      	movs	r0, #0
 8029ffc:	0022      	movs	r2, r4
 8029ffe:	002b      	movs	r3, r5
 802a000:	9000      	str	r0, [sp, #0]
 802a002:	9101      	str	r1, [sp, #4]
 802a004:	f7d8 ff8c 	bl	8002f20 <__aeabi_dsub>
 802a008:	0032      	movs	r2, r6
 802a00a:	003b      	movs	r3, r7
 802a00c:	f7d8 ff88 	bl	8002f20 <__aeabi_dsub>
 802a010:	9a08      	ldr	r2, [sp, #32]
 802a012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a014:	f7d8 ff84 	bl	8002f20 <__aeabi_dsub>
 802a018:	0002      	movs	r2, r0
 802a01a:	000b      	movs	r3, r1
 802a01c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802a01e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a020:	e61f      	b.n	8029c62 <__ieee754_pow+0x35e>
 802a022:	4a36      	ldr	r2, [pc, #216]	@ (802a0fc <__ieee754_pow+0x7f8>)
 802a024:	4b36      	ldr	r3, [pc, #216]	@ (802a100 <__ieee754_pow+0x7fc>)
 802a026:	9804      	ldr	r0, [sp, #16]
 802a028:	9905      	ldr	r1, [sp, #20]
 802a02a:	f7d7 fc93 	bl	8001954 <__aeabi_dadd>
 802a02e:	9a00      	ldr	r2, [sp, #0]
 802a030:	9b01      	ldr	r3, [sp, #4]
 802a032:	0004      	movs	r4, r0
 802a034:	000d      	movs	r5, r1
 802a036:	0030      	movs	r0, r6
 802a038:	0039      	movs	r1, r7
 802a03a:	f7d8 ff71 	bl	8002f20 <__aeabi_dsub>
 802a03e:	0002      	movs	r2, r0
 802a040:	000b      	movs	r3, r1
 802a042:	0020      	movs	r0, r4
 802a044:	0029      	movs	r1, r5
 802a046:	f7d6 fa4d 	bl	80004e4 <__aeabi_dcmpgt>
 802a04a:	2800      	cmp	r0, #0
 802a04c:	d000      	beq.n	802a050 <__ieee754_pow+0x74c>
 802a04e:	e646      	b.n	8029cde <__ieee754_pow+0x3da>
 802a050:	4b2c      	ldr	r3, [pc, #176]	@ (802a104 <__ieee754_pow+0x800>)
 802a052:	e063      	b.n	802a11c <__ieee754_pow+0x818>
 802a054:	4a2c      	ldr	r2, [pc, #176]	@ (802a108 <__ieee754_pow+0x804>)
 802a056:	004b      	lsls	r3, r1, #1
 802a058:	085b      	lsrs	r3, r3, #1
 802a05a:	4293      	cmp	r3, r2
 802a05c:	d95a      	bls.n	802a114 <__ieee754_pow+0x810>
 802a05e:	4b2b      	ldr	r3, [pc, #172]	@ (802a10c <__ieee754_pow+0x808>)
 802a060:	18cb      	adds	r3, r1, r3
 802a062:	4303      	orrs	r3, r0
 802a064:	d008      	beq.n	802a078 <__ieee754_pow+0x774>
 802a066:	9806      	ldr	r0, [sp, #24]
 802a068:	9907      	ldr	r1, [sp, #28]
 802a06a:	2300      	movs	r3, #0
 802a06c:	2200      	movs	r2, #0
 802a06e:	f7d6 fa25 	bl	80004bc <__aeabi_dcmplt>
 802a072:	1e43      	subs	r3, r0, #1
 802a074:	4198      	sbcs	r0, r3
 802a076:	e567      	b.n	8029b48 <__ieee754_pow+0x244>
 802a078:	9a00      	ldr	r2, [sp, #0]
 802a07a:	9b01      	ldr	r3, [sp, #4]
 802a07c:	f7d8 ff50 	bl	8002f20 <__aeabi_dsub>
 802a080:	9a04      	ldr	r2, [sp, #16]
 802a082:	9b05      	ldr	r3, [sp, #20]
 802a084:	f7d6 fa38 	bl	80004f8 <__aeabi_dcmpge>
 802a088:	2800      	cmp	r0, #0
 802a08a:	d1ec      	bne.n	802a066 <__ieee754_pow+0x762>
 802a08c:	4b20      	ldr	r3, [pc, #128]	@ (802a110 <__ieee754_pow+0x80c>)
 802a08e:	e045      	b.n	802a11c <__ieee754_pow+0x818>
 802a090:	7ff00000 	.word	0x7ff00000
 802a094:	43400000 	.word	0x43400000
 802a098:	fffffc01 	.word	0xfffffc01
 802a09c:	3ff00000 	.word	0x3ff00000
 802a0a0:	0003988e 	.word	0x0003988e
 802a0a4:	000bb679 	.word	0x000bb679
 802a0a8:	fff00000 	.word	0xfff00000
 802a0ac:	0802f200 	.word	0x0802f200
 802a0b0:	4a454eef 	.word	0x4a454eef
 802a0b4:	3fca7e28 	.word	0x3fca7e28
 802a0b8:	93c9db65 	.word	0x93c9db65
 802a0bc:	3fcd864a 	.word	0x3fcd864a
 802a0c0:	a91d4101 	.word	0xa91d4101
 802a0c4:	3fd17460 	.word	0x3fd17460
 802a0c8:	518f264d 	.word	0x518f264d
 802a0cc:	3fd55555 	.word	0x3fd55555
 802a0d0:	db6fabff 	.word	0xdb6fabff
 802a0d4:	3fdb6db6 	.word	0x3fdb6db6
 802a0d8:	33333303 	.word	0x33333303
 802a0dc:	3fe33333 	.word	0x3fe33333
 802a0e0:	40080000 	.word	0x40080000
 802a0e4:	3feec709 	.word	0x3feec709
 802a0e8:	dc3a03fd 	.word	0xdc3a03fd
 802a0ec:	145b01f5 	.word	0x145b01f5
 802a0f0:	be3e2fe0 	.word	0xbe3e2fe0
 802a0f4:	0802f1e0 	.word	0x0802f1e0
 802a0f8:	0802f1f0 	.word	0x0802f1f0
 802a0fc:	652b82fe 	.word	0x652b82fe
 802a100:	3c971547 	.word	0x3c971547
 802a104:	40900000 	.word	0x40900000
 802a108:	4090cbff 	.word	0x4090cbff
 802a10c:	3f6f3400 	.word	0x3f6f3400
 802a110:	4090cc00 	.word	0x4090cc00
 802a114:	4a73      	ldr	r2, [pc, #460]	@ (802a2e4 <__ieee754_pow+0x9e0>)
 802a116:	9402      	str	r4, [sp, #8]
 802a118:	4293      	cmp	r3, r2
 802a11a:	d925      	bls.n	802a168 <__ieee754_pow+0x864>
 802a11c:	4a72      	ldr	r2, [pc, #456]	@ (802a2e8 <__ieee754_pow+0x9e4>)
 802a11e:	151b      	asrs	r3, r3, #20
 802a120:	189b      	adds	r3, r3, r2
 802a122:	2280      	movs	r2, #128	@ 0x80
 802a124:	0352      	lsls	r2, r2, #13
 802a126:	0011      	movs	r1, r2
 802a128:	4119      	asrs	r1, r3
 802a12a:	19cb      	adds	r3, r1, r7
 802a12c:	005c      	lsls	r4, r3, #1
 802a12e:	496f      	ldr	r1, [pc, #444]	@ (802a2ec <__ieee754_pow+0x9e8>)
 802a130:	4d6f      	ldr	r5, [pc, #444]	@ (802a2f0 <__ieee754_pow+0x9ec>)
 802a132:	0d64      	lsrs	r4, r4, #21
 802a134:	1864      	adds	r4, r4, r1
 802a136:	4125      	asrs	r5, r4
 802a138:	401d      	ands	r5, r3
 802a13a:	031b      	lsls	r3, r3, #12
 802a13c:	0b1b      	lsrs	r3, r3, #12
 802a13e:	4313      	orrs	r3, r2
 802a140:	2214      	movs	r2, #20
 802a142:	1b12      	subs	r2, r2, r4
 802a144:	4113      	asrs	r3, r2
 802a146:	9302      	str	r3, [sp, #8]
 802a148:	9b08      	ldr	r3, [sp, #32]
 802a14a:	2000      	movs	r0, #0
 802a14c:	0029      	movs	r1, r5
 802a14e:	2b00      	cmp	r3, #0
 802a150:	da02      	bge.n	802a158 <__ieee754_pow+0x854>
 802a152:	9b02      	ldr	r3, [sp, #8]
 802a154:	425b      	negs	r3, r3
 802a156:	9302      	str	r3, [sp, #8]
 802a158:	0002      	movs	r2, r0
 802a15a:	000b      	movs	r3, r1
 802a15c:	9800      	ldr	r0, [sp, #0]
 802a15e:	9901      	ldr	r1, [sp, #4]
 802a160:	f7d8 fede 	bl	8002f20 <__aeabi_dsub>
 802a164:	9000      	str	r0, [sp, #0]
 802a166:	9101      	str	r1, [sp, #4]
 802a168:	9a04      	ldr	r2, [sp, #16]
 802a16a:	9b05      	ldr	r3, [sp, #20]
 802a16c:	9800      	ldr	r0, [sp, #0]
 802a16e:	9901      	ldr	r1, [sp, #4]
 802a170:	f7d7 fbf0 	bl	8001954 <__aeabi_dadd>
 802a174:	2000      	movs	r0, #0
 802a176:	2200      	movs	r2, #0
 802a178:	4b5e      	ldr	r3, [pc, #376]	@ (802a2f4 <__ieee754_pow+0x9f0>)
 802a17a:	0006      	movs	r6, r0
 802a17c:	000f      	movs	r7, r1
 802a17e:	f7d8 fbe9 	bl	8002954 <__aeabi_dmul>
 802a182:	9a00      	ldr	r2, [sp, #0]
 802a184:	9b01      	ldr	r3, [sp, #4]
 802a186:	9008      	str	r0, [sp, #32]
 802a188:	9109      	str	r1, [sp, #36]	@ 0x24
 802a18a:	0030      	movs	r0, r6
 802a18c:	0039      	movs	r1, r7
 802a18e:	f7d8 fec7 	bl	8002f20 <__aeabi_dsub>
 802a192:	0002      	movs	r2, r0
 802a194:	000b      	movs	r3, r1
 802a196:	9804      	ldr	r0, [sp, #16]
 802a198:	9905      	ldr	r1, [sp, #20]
 802a19a:	f7d8 fec1 	bl	8002f20 <__aeabi_dsub>
 802a19e:	4a56      	ldr	r2, [pc, #344]	@ (802a2f8 <__ieee754_pow+0x9f4>)
 802a1a0:	4b56      	ldr	r3, [pc, #344]	@ (802a2fc <__ieee754_pow+0x9f8>)
 802a1a2:	f7d8 fbd7 	bl	8002954 <__aeabi_dmul>
 802a1a6:	4a56      	ldr	r2, [pc, #344]	@ (802a300 <__ieee754_pow+0x9fc>)
 802a1a8:	0004      	movs	r4, r0
 802a1aa:	000d      	movs	r5, r1
 802a1ac:	0030      	movs	r0, r6
 802a1ae:	0039      	movs	r1, r7
 802a1b0:	4b54      	ldr	r3, [pc, #336]	@ (802a304 <__ieee754_pow+0xa00>)
 802a1b2:	f7d8 fbcf 	bl	8002954 <__aeabi_dmul>
 802a1b6:	0002      	movs	r2, r0
 802a1b8:	000b      	movs	r3, r1
 802a1ba:	0020      	movs	r0, r4
 802a1bc:	0029      	movs	r1, r5
 802a1be:	f7d7 fbc9 	bl	8001954 <__aeabi_dadd>
 802a1c2:	0004      	movs	r4, r0
 802a1c4:	000d      	movs	r5, r1
 802a1c6:	0002      	movs	r2, r0
 802a1c8:	000b      	movs	r3, r1
 802a1ca:	9808      	ldr	r0, [sp, #32]
 802a1cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a1ce:	f7d7 fbc1 	bl	8001954 <__aeabi_dadd>
 802a1d2:	9a08      	ldr	r2, [sp, #32]
 802a1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a1d6:	0006      	movs	r6, r0
 802a1d8:	000f      	movs	r7, r1
 802a1da:	f7d8 fea1 	bl	8002f20 <__aeabi_dsub>
 802a1de:	0002      	movs	r2, r0
 802a1e0:	000b      	movs	r3, r1
 802a1e2:	0020      	movs	r0, r4
 802a1e4:	0029      	movs	r1, r5
 802a1e6:	f7d8 fe9b 	bl	8002f20 <__aeabi_dsub>
 802a1ea:	0032      	movs	r2, r6
 802a1ec:	9000      	str	r0, [sp, #0]
 802a1ee:	9101      	str	r1, [sp, #4]
 802a1f0:	003b      	movs	r3, r7
 802a1f2:	0030      	movs	r0, r6
 802a1f4:	0039      	movs	r1, r7
 802a1f6:	f7d8 fbad 	bl	8002954 <__aeabi_dmul>
 802a1fa:	0004      	movs	r4, r0
 802a1fc:	000d      	movs	r5, r1
 802a1fe:	4a42      	ldr	r2, [pc, #264]	@ (802a308 <__ieee754_pow+0xa04>)
 802a200:	4b42      	ldr	r3, [pc, #264]	@ (802a30c <__ieee754_pow+0xa08>)
 802a202:	f7d8 fba7 	bl	8002954 <__aeabi_dmul>
 802a206:	4a42      	ldr	r2, [pc, #264]	@ (802a310 <__ieee754_pow+0xa0c>)
 802a208:	4b42      	ldr	r3, [pc, #264]	@ (802a314 <__ieee754_pow+0xa10>)
 802a20a:	f7d8 fe89 	bl	8002f20 <__aeabi_dsub>
 802a20e:	0022      	movs	r2, r4
 802a210:	002b      	movs	r3, r5
 802a212:	f7d8 fb9f 	bl	8002954 <__aeabi_dmul>
 802a216:	4a40      	ldr	r2, [pc, #256]	@ (802a318 <__ieee754_pow+0xa14>)
 802a218:	4b40      	ldr	r3, [pc, #256]	@ (802a31c <__ieee754_pow+0xa18>)
 802a21a:	f7d7 fb9b 	bl	8001954 <__aeabi_dadd>
 802a21e:	0022      	movs	r2, r4
 802a220:	002b      	movs	r3, r5
 802a222:	f7d8 fb97 	bl	8002954 <__aeabi_dmul>
 802a226:	4a3e      	ldr	r2, [pc, #248]	@ (802a320 <__ieee754_pow+0xa1c>)
 802a228:	4b3e      	ldr	r3, [pc, #248]	@ (802a324 <__ieee754_pow+0xa20>)
 802a22a:	f7d8 fe79 	bl	8002f20 <__aeabi_dsub>
 802a22e:	0022      	movs	r2, r4
 802a230:	002b      	movs	r3, r5
 802a232:	f7d8 fb8f 	bl	8002954 <__aeabi_dmul>
 802a236:	4a3c      	ldr	r2, [pc, #240]	@ (802a328 <__ieee754_pow+0xa24>)
 802a238:	4b3c      	ldr	r3, [pc, #240]	@ (802a32c <__ieee754_pow+0xa28>)
 802a23a:	f7d7 fb8b 	bl	8001954 <__aeabi_dadd>
 802a23e:	0022      	movs	r2, r4
 802a240:	002b      	movs	r3, r5
 802a242:	f7d8 fb87 	bl	8002954 <__aeabi_dmul>
 802a246:	0002      	movs	r2, r0
 802a248:	000b      	movs	r3, r1
 802a24a:	0030      	movs	r0, r6
 802a24c:	0039      	movs	r1, r7
 802a24e:	f7d8 fe67 	bl	8002f20 <__aeabi_dsub>
 802a252:	0004      	movs	r4, r0
 802a254:	000d      	movs	r5, r1
 802a256:	0002      	movs	r2, r0
 802a258:	000b      	movs	r3, r1
 802a25a:	0030      	movs	r0, r6
 802a25c:	0039      	movs	r1, r7
 802a25e:	f7d8 fb79 	bl	8002954 <__aeabi_dmul>
 802a262:	2380      	movs	r3, #128	@ 0x80
 802a264:	9004      	str	r0, [sp, #16]
 802a266:	9105      	str	r1, [sp, #20]
 802a268:	2200      	movs	r2, #0
 802a26a:	0020      	movs	r0, r4
 802a26c:	0029      	movs	r1, r5
 802a26e:	05db      	lsls	r3, r3, #23
 802a270:	f7d8 fe56 	bl	8002f20 <__aeabi_dsub>
 802a274:	0002      	movs	r2, r0
 802a276:	000b      	movs	r3, r1
 802a278:	9804      	ldr	r0, [sp, #16]
 802a27a:	9905      	ldr	r1, [sp, #20]
 802a27c:	f7d7 ff30 	bl	80020e0 <__aeabi_ddiv>
 802a280:	9a00      	ldr	r2, [sp, #0]
 802a282:	9b01      	ldr	r3, [sp, #4]
 802a284:	0004      	movs	r4, r0
 802a286:	000d      	movs	r5, r1
 802a288:	0030      	movs	r0, r6
 802a28a:	0039      	movs	r1, r7
 802a28c:	f7d8 fb62 	bl	8002954 <__aeabi_dmul>
 802a290:	9a00      	ldr	r2, [sp, #0]
 802a292:	9b01      	ldr	r3, [sp, #4]
 802a294:	f7d7 fb5e 	bl	8001954 <__aeabi_dadd>
 802a298:	0002      	movs	r2, r0
 802a29a:	000b      	movs	r3, r1
 802a29c:	0020      	movs	r0, r4
 802a29e:	0029      	movs	r1, r5
 802a2a0:	f7d8 fe3e 	bl	8002f20 <__aeabi_dsub>
 802a2a4:	0032      	movs	r2, r6
 802a2a6:	003b      	movs	r3, r7
 802a2a8:	f7d8 fe3a 	bl	8002f20 <__aeabi_dsub>
 802a2ac:	0002      	movs	r2, r0
 802a2ae:	000b      	movs	r3, r1
 802a2b0:	2000      	movs	r0, #0
 802a2b2:	491f      	ldr	r1, [pc, #124]	@ (802a330 <__ieee754_pow+0xa2c>)
 802a2b4:	f7d8 fe34 	bl	8002f20 <__aeabi_dsub>
 802a2b8:	9b02      	ldr	r3, [sp, #8]
 802a2ba:	051b      	lsls	r3, r3, #20
 802a2bc:	185b      	adds	r3, r3, r1
 802a2be:	151a      	asrs	r2, r3, #20
 802a2c0:	2a00      	cmp	r2, #0
 802a2c2:	dc06      	bgt.n	802a2d2 <__ieee754_pow+0x9ce>
 802a2c4:	9a02      	ldr	r2, [sp, #8]
 802a2c6:	f000 f929 	bl	802a51c <scalbn>
 802a2ca:	9a06      	ldr	r2, [sp, #24]
 802a2cc:	9b07      	ldr	r3, [sp, #28]
 802a2ce:	f7ff fb8b 	bl	80299e8 <__ieee754_pow+0xe4>
 802a2d2:	0019      	movs	r1, r3
 802a2d4:	e7f9      	b.n	802a2ca <__ieee754_pow+0x9c6>
 802a2d6:	2300      	movs	r3, #0
 802a2d8:	4c15      	ldr	r4, [pc, #84]	@ (802a330 <__ieee754_pow+0xa2c>)
 802a2da:	9300      	str	r3, [sp, #0]
 802a2dc:	9401      	str	r4, [sp, #4]
 802a2de:	f7ff fbc8 	bl	8029a72 <__ieee754_pow+0x16e>
 802a2e2:	46c0      	nop			@ (mov r8, r8)
 802a2e4:	3fe00000 	.word	0x3fe00000
 802a2e8:	fffffc02 	.word	0xfffffc02
 802a2ec:	fffffc01 	.word	0xfffffc01
 802a2f0:	fff00000 	.word	0xfff00000
 802a2f4:	3fe62e43 	.word	0x3fe62e43
 802a2f8:	fefa39ef 	.word	0xfefa39ef
 802a2fc:	3fe62e42 	.word	0x3fe62e42
 802a300:	0ca86c39 	.word	0x0ca86c39
 802a304:	be205c61 	.word	0xbe205c61
 802a308:	72bea4d0 	.word	0x72bea4d0
 802a30c:	3e663769 	.word	0x3e663769
 802a310:	c5d26bf1 	.word	0xc5d26bf1
 802a314:	3ebbbd41 	.word	0x3ebbbd41
 802a318:	af25de2c 	.word	0xaf25de2c
 802a31c:	3f11566a 	.word	0x3f11566a
 802a320:	16bebd93 	.word	0x16bebd93
 802a324:	3f66c16c 	.word	0x3f66c16c
 802a328:	5555553e 	.word	0x5555553e
 802a32c:	3fc55555 	.word	0x3fc55555
 802a330:	3ff00000 	.word	0x3ff00000

0802a334 <fabs>:
 802a334:	0049      	lsls	r1, r1, #1
 802a336:	084b      	lsrs	r3, r1, #1
 802a338:	0019      	movs	r1, r3
 802a33a:	4770      	bx	lr

0802a33c <__ieee754_expf>:
 802a33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a33e:	21ff      	movs	r1, #255	@ 0xff
 802a340:	0043      	lsls	r3, r0, #1
 802a342:	1c04      	adds	r4, r0, #0
 802a344:	085b      	lsrs	r3, r3, #1
 802a346:	05c9      	lsls	r1, r1, #23
 802a348:	428b      	cmp	r3, r1
 802a34a:	d904      	bls.n	802a356 <__ieee754_expf+0x1a>
 802a34c:	1c01      	adds	r1, r0, #0
 802a34e:	1c20      	adds	r0, r4, #0
 802a350:	f7d6 fab6 	bl	80008c0 <__aeabi_fadd>
 802a354:	e00d      	b.n	802a372 <__ieee754_expf+0x36>
 802a356:	0fc6      	lsrs	r6, r0, #31
 802a358:	428b      	cmp	r3, r1
 802a35a:	d104      	bne.n	802a366 <__ieee754_expf+0x2a>
 802a35c:	2e00      	cmp	r6, #0
 802a35e:	d000      	beq.n	802a362 <__ieee754_expf+0x26>
 802a360:	e0ba      	b.n	802a4d8 <__ieee754_expf+0x19c>
 802a362:	1c20      	adds	r0, r4, #0
 802a364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a366:	495d      	ldr	r1, [pc, #372]	@ (802a4dc <__ieee754_expf+0x1a0>)
 802a368:	4288      	cmp	r0, r1
 802a36a:	dd04      	ble.n	802a376 <__ieee754_expf+0x3a>
 802a36c:	2000      	movs	r0, #0
 802a36e:	f000 f98a 	bl	802a686 <__math_oflowf>
 802a372:	1c04      	adds	r4, r0, #0
 802a374:	e7f5      	b.n	802a362 <__ieee754_expf+0x26>
 802a376:	2800      	cmp	r0, #0
 802a378:	da06      	bge.n	802a388 <__ieee754_expf+0x4c>
 802a37a:	4a59      	ldr	r2, [pc, #356]	@ (802a4e0 <__ieee754_expf+0x1a4>)
 802a37c:	4293      	cmp	r3, r2
 802a37e:	d903      	bls.n	802a388 <__ieee754_expf+0x4c>
 802a380:	2000      	movs	r0, #0
 802a382:	f000 f97a 	bl	802a67a <__math_uflowf>
 802a386:	e7f4      	b.n	802a372 <__ieee754_expf+0x36>
 802a388:	4a56      	ldr	r2, [pc, #344]	@ (802a4e4 <__ieee754_expf+0x1a8>)
 802a38a:	4293      	cmp	r3, r2
 802a38c:	d96e      	bls.n	802a46c <__ieee754_expf+0x130>
 802a38e:	4a56      	ldr	r2, [pc, #344]	@ (802a4e8 <__ieee754_expf+0x1ac>)
 802a390:	00b5      	lsls	r5, r6, #2
 802a392:	4293      	cmp	r3, r2
 802a394:	d84e      	bhi.n	802a434 <__ieee754_expf+0xf8>
 802a396:	4b55      	ldr	r3, [pc, #340]	@ (802a4ec <__ieee754_expf+0x1b0>)
 802a398:	1c20      	adds	r0, r4, #0
 802a39a:	5959      	ldr	r1, [r3, r5]
 802a39c:	f7d6 ffaa 	bl	80012f4 <__aeabi_fsub>
 802a3a0:	4b53      	ldr	r3, [pc, #332]	@ (802a4f0 <__ieee754_expf+0x1b4>)
 802a3a2:	1c07      	adds	r7, r0, #0
 802a3a4:	595b      	ldr	r3, [r3, r5]
 802a3a6:	2501      	movs	r5, #1
 802a3a8:	4075      	eors	r5, r6
 802a3aa:	9300      	str	r3, [sp, #0]
 802a3ac:	1bad      	subs	r5, r5, r6
 802a3ae:	9900      	ldr	r1, [sp, #0]
 802a3b0:	1c38      	adds	r0, r7, #0
 802a3b2:	f7d6 ff9f 	bl	80012f4 <__aeabi_fsub>
 802a3b6:	1c04      	adds	r4, r0, #0
 802a3b8:	1c21      	adds	r1, r4, #0
 802a3ba:	1c20      	adds	r0, r4, #0
 802a3bc:	f7d6 fe40 	bl	8001040 <__aeabi_fmul>
 802a3c0:	494c      	ldr	r1, [pc, #304]	@ (802a4f4 <__ieee754_expf+0x1b8>)
 802a3c2:	1c06      	adds	r6, r0, #0
 802a3c4:	f7d6 fe3c 	bl	8001040 <__aeabi_fmul>
 802a3c8:	494b      	ldr	r1, [pc, #300]	@ (802a4f8 <__ieee754_expf+0x1bc>)
 802a3ca:	f7d6 ff93 	bl	80012f4 <__aeabi_fsub>
 802a3ce:	1c31      	adds	r1, r6, #0
 802a3d0:	f7d6 fe36 	bl	8001040 <__aeabi_fmul>
 802a3d4:	4949      	ldr	r1, [pc, #292]	@ (802a4fc <__ieee754_expf+0x1c0>)
 802a3d6:	f7d6 fa73 	bl	80008c0 <__aeabi_fadd>
 802a3da:	1c31      	adds	r1, r6, #0
 802a3dc:	f7d6 fe30 	bl	8001040 <__aeabi_fmul>
 802a3e0:	4947      	ldr	r1, [pc, #284]	@ (802a500 <__ieee754_expf+0x1c4>)
 802a3e2:	f7d6 ff87 	bl	80012f4 <__aeabi_fsub>
 802a3e6:	1c31      	adds	r1, r6, #0
 802a3e8:	f7d6 fe2a 	bl	8001040 <__aeabi_fmul>
 802a3ec:	4945      	ldr	r1, [pc, #276]	@ (802a504 <__ieee754_expf+0x1c8>)
 802a3ee:	f7d6 fa67 	bl	80008c0 <__aeabi_fadd>
 802a3f2:	1c31      	adds	r1, r6, #0
 802a3f4:	f7d6 fe24 	bl	8001040 <__aeabi_fmul>
 802a3f8:	1c01      	adds	r1, r0, #0
 802a3fa:	1c20      	adds	r0, r4, #0
 802a3fc:	f7d6 ff7a 	bl	80012f4 <__aeabi_fsub>
 802a400:	1c01      	adds	r1, r0, #0
 802a402:	1c06      	adds	r6, r0, #0
 802a404:	1c20      	adds	r0, r4, #0
 802a406:	f7d6 fe1b 	bl	8001040 <__aeabi_fmul>
 802a40a:	9001      	str	r0, [sp, #4]
 802a40c:	2d00      	cmp	r5, #0
 802a40e:	d140      	bne.n	802a492 <__ieee754_expf+0x156>
 802a410:	2180      	movs	r1, #128	@ 0x80
 802a412:	1c30      	adds	r0, r6, #0
 802a414:	05c9      	lsls	r1, r1, #23
 802a416:	f7d6 ff6d 	bl	80012f4 <__aeabi_fsub>
 802a41a:	1c01      	adds	r1, r0, #0
 802a41c:	9801      	ldr	r0, [sp, #4]
 802a41e:	f7d6 fc41 	bl	8000ca4 <__aeabi_fdiv>
 802a422:	1c21      	adds	r1, r4, #0
 802a424:	f7d6 ff66 	bl	80012f4 <__aeabi_fsub>
 802a428:	1c01      	adds	r1, r0, #0
 802a42a:	20fe      	movs	r0, #254	@ 0xfe
 802a42c:	0580      	lsls	r0, r0, #22
 802a42e:	f7d6 ff61 	bl	80012f4 <__aeabi_fsub>
 802a432:	e79e      	b.n	802a372 <__ieee754_expf+0x36>
 802a434:	4934      	ldr	r1, [pc, #208]	@ (802a508 <__ieee754_expf+0x1cc>)
 802a436:	1c20      	adds	r0, r4, #0
 802a438:	f7d6 fe02 	bl	8001040 <__aeabi_fmul>
 802a43c:	4b33      	ldr	r3, [pc, #204]	@ (802a50c <__ieee754_expf+0x1d0>)
 802a43e:	5959      	ldr	r1, [r3, r5]
 802a440:	f7d6 fa3e 	bl	80008c0 <__aeabi_fadd>
 802a444:	f7d7 f9d0 	bl	80017e8 <__aeabi_f2iz>
 802a448:	0005      	movs	r5, r0
 802a44a:	f7d7 f9ed 	bl	8001828 <__aeabi_i2f>
 802a44e:	4930      	ldr	r1, [pc, #192]	@ (802a510 <__ieee754_expf+0x1d4>)
 802a450:	1c06      	adds	r6, r0, #0
 802a452:	f7d6 fdf5 	bl	8001040 <__aeabi_fmul>
 802a456:	1c01      	adds	r1, r0, #0
 802a458:	1c20      	adds	r0, r4, #0
 802a45a:	f7d6 ff4b 	bl	80012f4 <__aeabi_fsub>
 802a45e:	492d      	ldr	r1, [pc, #180]	@ (802a514 <__ieee754_expf+0x1d8>)
 802a460:	1c07      	adds	r7, r0, #0
 802a462:	1c30      	adds	r0, r6, #0
 802a464:	f7d6 fdec 	bl	8001040 <__aeabi_fmul>
 802a468:	9000      	str	r0, [sp, #0]
 802a46a:	e7a0      	b.n	802a3ae <__ieee754_expf+0x72>
 802a46c:	22d0      	movs	r2, #208	@ 0xd0
 802a46e:	0592      	lsls	r2, r2, #22
 802a470:	4293      	cmp	r3, r2
 802a472:	d20c      	bcs.n	802a48e <__ieee754_expf+0x152>
 802a474:	4928      	ldr	r1, [pc, #160]	@ (802a518 <__ieee754_expf+0x1dc>)
 802a476:	1c20      	adds	r0, r4, #0
 802a478:	f7d6 fa22 	bl	80008c0 <__aeabi_fadd>
 802a47c:	21fe      	movs	r1, #254	@ 0xfe
 802a47e:	0589      	lsls	r1, r1, #22
 802a480:	f7d6 f86a 	bl	8000558 <__aeabi_fcmpgt>
 802a484:	1e05      	subs	r5, r0, #0
 802a486:	d097      	beq.n	802a3b8 <__ieee754_expf+0x7c>
 802a488:	21fe      	movs	r1, #254	@ 0xfe
 802a48a:	0589      	lsls	r1, r1, #22
 802a48c:	e75f      	b.n	802a34e <__ieee754_expf+0x12>
 802a48e:	2500      	movs	r5, #0
 802a490:	e792      	b.n	802a3b8 <__ieee754_expf+0x7c>
 802a492:	2080      	movs	r0, #128	@ 0x80
 802a494:	1c31      	adds	r1, r6, #0
 802a496:	05c0      	lsls	r0, r0, #23
 802a498:	f7d6 ff2c 	bl	80012f4 <__aeabi_fsub>
 802a49c:	1c01      	adds	r1, r0, #0
 802a49e:	9801      	ldr	r0, [sp, #4]
 802a4a0:	f7d6 fc00 	bl	8000ca4 <__aeabi_fdiv>
 802a4a4:	1c01      	adds	r1, r0, #0
 802a4a6:	9800      	ldr	r0, [sp, #0]
 802a4a8:	f7d6 ff24 	bl	80012f4 <__aeabi_fsub>
 802a4ac:	1c39      	adds	r1, r7, #0
 802a4ae:	f7d6 ff21 	bl	80012f4 <__aeabi_fsub>
 802a4b2:	1c01      	adds	r1, r0, #0
 802a4b4:	20fe      	movs	r0, #254	@ 0xfe
 802a4b6:	0580      	lsls	r0, r0, #22
 802a4b8:	f7d6 ff1c 	bl	80012f4 <__aeabi_fsub>
 802a4bc:	002b      	movs	r3, r5
 802a4be:	337d      	adds	r3, #125	@ 0x7d
 802a4c0:	db02      	blt.n	802a4c8 <__ieee754_expf+0x18c>
 802a4c2:	05ec      	lsls	r4, r5, #23
 802a4c4:	1824      	adds	r4, r4, r0
 802a4c6:	e74c      	b.n	802a362 <__ieee754_expf+0x26>
 802a4c8:	21d8      	movs	r1, #216	@ 0xd8
 802a4ca:	3564      	adds	r5, #100	@ 0x64
 802a4cc:	05ed      	lsls	r5, r5, #23
 802a4ce:	1828      	adds	r0, r5, r0
 802a4d0:	0509      	lsls	r1, r1, #20
 802a4d2:	f7d6 fdb5 	bl	8001040 <__aeabi_fmul>
 802a4d6:	e74c      	b.n	802a372 <__ieee754_expf+0x36>
 802a4d8:	2400      	movs	r4, #0
 802a4da:	e742      	b.n	802a362 <__ieee754_expf+0x26>
 802a4dc:	42b17217 	.word	0x42b17217
 802a4e0:	42cff1b5 	.word	0x42cff1b5
 802a4e4:	3eb17218 	.word	0x3eb17218
 802a4e8:	3f851591 	.word	0x3f851591
 802a4ec:	0802f218 	.word	0x0802f218
 802a4f0:	0802f210 	.word	0x0802f210
 802a4f4:	3331bb4c 	.word	0x3331bb4c
 802a4f8:	35ddea0e 	.word	0x35ddea0e
 802a4fc:	388ab355 	.word	0x388ab355
 802a500:	3b360b61 	.word	0x3b360b61
 802a504:	3e2aaaab 	.word	0x3e2aaaab
 802a508:	3fb8aa3b 	.word	0x3fb8aa3b
 802a50c:	0802f220 	.word	0x0802f220
 802a510:	3f317180 	.word	0x3f317180
 802a514:	3717f7d1 	.word	0x3717f7d1
 802a518:	7149f2ca 	.word	0x7149f2ca

0802a51c <scalbn>:
 802a51c:	004b      	lsls	r3, r1, #1
 802a51e:	b570      	push	{r4, r5, r6, lr}
 802a520:	0d5b      	lsrs	r3, r3, #21
 802a522:	0014      	movs	r4, r2
 802a524:	000d      	movs	r5, r1
 802a526:	2b00      	cmp	r3, #0
 802a528:	d10f      	bne.n	802a54a <scalbn+0x2e>
 802a52a:	004b      	lsls	r3, r1, #1
 802a52c:	085b      	lsrs	r3, r3, #1
 802a52e:	4303      	orrs	r3, r0
 802a530:	d012      	beq.n	802a558 <scalbn+0x3c>
 802a532:	4b23      	ldr	r3, [pc, #140]	@ (802a5c0 <scalbn+0xa4>)
 802a534:	2200      	movs	r2, #0
 802a536:	f7d8 fa0d 	bl	8002954 <__aeabi_dmul>
 802a53a:	4b22      	ldr	r3, [pc, #136]	@ (802a5c4 <scalbn+0xa8>)
 802a53c:	429c      	cmp	r4, r3
 802a53e:	da0c      	bge.n	802a55a <scalbn+0x3e>
 802a540:	4a21      	ldr	r2, [pc, #132]	@ (802a5c8 <scalbn+0xac>)
 802a542:	4b22      	ldr	r3, [pc, #136]	@ (802a5cc <scalbn+0xb0>)
 802a544:	f7d8 fa06 	bl	8002954 <__aeabi_dmul>
 802a548:	e006      	b.n	802a558 <scalbn+0x3c>
 802a54a:	4a21      	ldr	r2, [pc, #132]	@ (802a5d0 <scalbn+0xb4>)
 802a54c:	4293      	cmp	r3, r2
 802a54e:	d108      	bne.n	802a562 <scalbn+0x46>
 802a550:	0002      	movs	r2, r0
 802a552:	000b      	movs	r3, r1
 802a554:	f7d7 f9fe 	bl	8001954 <__aeabi_dadd>
 802a558:	bd70      	pop	{r4, r5, r6, pc}
 802a55a:	000d      	movs	r5, r1
 802a55c:	004b      	lsls	r3, r1, #1
 802a55e:	0d5b      	lsrs	r3, r3, #21
 802a560:	3b36      	subs	r3, #54	@ 0x36
 802a562:	4a1c      	ldr	r2, [pc, #112]	@ (802a5d4 <scalbn+0xb8>)
 802a564:	4294      	cmp	r4, r2
 802a566:	dd0a      	ble.n	802a57e <scalbn+0x62>
 802a568:	4c1b      	ldr	r4, [pc, #108]	@ (802a5d8 <scalbn+0xbc>)
 802a56a:	4d1c      	ldr	r5, [pc, #112]	@ (802a5dc <scalbn+0xc0>)
 802a56c:	2900      	cmp	r1, #0
 802a56e:	da01      	bge.n	802a574 <scalbn+0x58>
 802a570:	4c19      	ldr	r4, [pc, #100]	@ (802a5d8 <scalbn+0xbc>)
 802a572:	4d1b      	ldr	r5, [pc, #108]	@ (802a5e0 <scalbn+0xc4>)
 802a574:	4a18      	ldr	r2, [pc, #96]	@ (802a5d8 <scalbn+0xbc>)
 802a576:	4b19      	ldr	r3, [pc, #100]	@ (802a5dc <scalbn+0xc0>)
 802a578:	0020      	movs	r0, r4
 802a57a:	0029      	movs	r1, r5
 802a57c:	e7e2      	b.n	802a544 <scalbn+0x28>
 802a57e:	18e2      	adds	r2, r4, r3
 802a580:	4b18      	ldr	r3, [pc, #96]	@ (802a5e4 <scalbn+0xc8>)
 802a582:	429a      	cmp	r2, r3
 802a584:	dcf0      	bgt.n	802a568 <scalbn+0x4c>
 802a586:	2a00      	cmp	r2, #0
 802a588:	dd05      	ble.n	802a596 <scalbn+0x7a>
 802a58a:	4b17      	ldr	r3, [pc, #92]	@ (802a5e8 <scalbn+0xcc>)
 802a58c:	0512      	lsls	r2, r2, #20
 802a58e:	402b      	ands	r3, r5
 802a590:	4313      	orrs	r3, r2
 802a592:	0019      	movs	r1, r3
 802a594:	e7e0      	b.n	802a558 <scalbn+0x3c>
 802a596:	0013      	movs	r3, r2
 802a598:	3335      	adds	r3, #53	@ 0x35
 802a59a:	da08      	bge.n	802a5ae <scalbn+0x92>
 802a59c:	4c0a      	ldr	r4, [pc, #40]	@ (802a5c8 <scalbn+0xac>)
 802a59e:	4d0b      	ldr	r5, [pc, #44]	@ (802a5cc <scalbn+0xb0>)
 802a5a0:	2900      	cmp	r1, #0
 802a5a2:	da01      	bge.n	802a5a8 <scalbn+0x8c>
 802a5a4:	4c08      	ldr	r4, [pc, #32]	@ (802a5c8 <scalbn+0xac>)
 802a5a6:	4d11      	ldr	r5, [pc, #68]	@ (802a5ec <scalbn+0xd0>)
 802a5a8:	4a07      	ldr	r2, [pc, #28]	@ (802a5c8 <scalbn+0xac>)
 802a5aa:	4b08      	ldr	r3, [pc, #32]	@ (802a5cc <scalbn+0xb0>)
 802a5ac:	e7e4      	b.n	802a578 <scalbn+0x5c>
 802a5ae:	4b0e      	ldr	r3, [pc, #56]	@ (802a5e8 <scalbn+0xcc>)
 802a5b0:	3236      	adds	r2, #54	@ 0x36
 802a5b2:	401d      	ands	r5, r3
 802a5b4:	0512      	lsls	r2, r2, #20
 802a5b6:	432a      	orrs	r2, r5
 802a5b8:	0011      	movs	r1, r2
 802a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (802a5f0 <scalbn+0xd4>)
 802a5bc:	2200      	movs	r2, #0
 802a5be:	e7c1      	b.n	802a544 <scalbn+0x28>
 802a5c0:	43500000 	.word	0x43500000
 802a5c4:	ffff3cb0 	.word	0xffff3cb0
 802a5c8:	c2f8f359 	.word	0xc2f8f359
 802a5cc:	01a56e1f 	.word	0x01a56e1f
 802a5d0:	000007ff 	.word	0x000007ff
 802a5d4:	0000c350 	.word	0x0000c350
 802a5d8:	8800759c 	.word	0x8800759c
 802a5dc:	7e37e43c 	.word	0x7e37e43c
 802a5e0:	fe37e43c 	.word	0xfe37e43c
 802a5e4:	000007fe 	.word	0x000007fe
 802a5e8:	800fffff 	.word	0x800fffff
 802a5ec:	81a56e1f 	.word	0x81a56e1f
 802a5f0:	3c900000 	.word	0x3c900000

0802a5f4 <with_errno>:
 802a5f4:	b570      	push	{r4, r5, r6, lr}
 802a5f6:	000d      	movs	r5, r1
 802a5f8:	0016      	movs	r6, r2
 802a5fa:	0004      	movs	r4, r0
 802a5fc:	f7fc f952 	bl	80268a4 <__errno>
 802a600:	0029      	movs	r1, r5
 802a602:	6006      	str	r6, [r0, #0]
 802a604:	0020      	movs	r0, r4
 802a606:	bd70      	pop	{r4, r5, r6, pc}

0802a608 <xflow>:
 802a608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a60a:	0014      	movs	r4, r2
 802a60c:	001d      	movs	r5, r3
 802a60e:	2800      	cmp	r0, #0
 802a610:	d002      	beq.n	802a618 <xflow+0x10>
 802a612:	2180      	movs	r1, #128	@ 0x80
 802a614:	0609      	lsls	r1, r1, #24
 802a616:	185b      	adds	r3, r3, r1
 802a618:	9200      	str	r2, [sp, #0]
 802a61a:	9301      	str	r3, [sp, #4]
 802a61c:	9a00      	ldr	r2, [sp, #0]
 802a61e:	9b01      	ldr	r3, [sp, #4]
 802a620:	0020      	movs	r0, r4
 802a622:	0029      	movs	r1, r5
 802a624:	f7d8 f996 	bl	8002954 <__aeabi_dmul>
 802a628:	2222      	movs	r2, #34	@ 0x22
 802a62a:	f7ff ffe3 	bl	802a5f4 <with_errno>
 802a62e:	b003      	add	sp, #12
 802a630:	bd30      	pop	{r4, r5, pc}

0802a632 <__math_uflow>:
 802a632:	2380      	movs	r3, #128	@ 0x80
 802a634:	b510      	push	{r4, lr}
 802a636:	2200      	movs	r2, #0
 802a638:	055b      	lsls	r3, r3, #21
 802a63a:	f7ff ffe5 	bl	802a608 <xflow>
 802a63e:	bd10      	pop	{r4, pc}

0802a640 <__math_oflow>:
 802a640:	23e0      	movs	r3, #224	@ 0xe0
 802a642:	b510      	push	{r4, lr}
 802a644:	2200      	movs	r2, #0
 802a646:	05db      	lsls	r3, r3, #23
 802a648:	f7ff ffde 	bl	802a608 <xflow>
 802a64c:	bd10      	pop	{r4, pc}

0802a64e <with_errnof>:
 802a64e:	b570      	push	{r4, r5, r6, lr}
 802a650:	000d      	movs	r5, r1
 802a652:	1c04      	adds	r4, r0, #0
 802a654:	f7fc f926 	bl	80268a4 <__errno>
 802a658:	6005      	str	r5, [r0, #0]
 802a65a:	1c20      	adds	r0, r4, #0
 802a65c:	bd70      	pop	{r4, r5, r6, pc}

0802a65e <xflowf>:
 802a65e:	b510      	push	{r4, lr}
 802a660:	1c0b      	adds	r3, r1, #0
 802a662:	2800      	cmp	r0, #0
 802a664:	d002      	beq.n	802a66c <xflowf+0xe>
 802a666:	2380      	movs	r3, #128	@ 0x80
 802a668:	061b      	lsls	r3, r3, #24
 802a66a:	18cb      	adds	r3, r1, r3
 802a66c:	1c18      	adds	r0, r3, #0
 802a66e:	f7d6 fce7 	bl	8001040 <__aeabi_fmul>
 802a672:	2122      	movs	r1, #34	@ 0x22
 802a674:	f7ff ffeb 	bl	802a64e <with_errnof>
 802a678:	bd10      	pop	{r4, pc}

0802a67a <__math_uflowf>:
 802a67a:	2180      	movs	r1, #128	@ 0x80
 802a67c:	b510      	push	{r4, lr}
 802a67e:	0549      	lsls	r1, r1, #21
 802a680:	f7ff ffed 	bl	802a65e <xflowf>
 802a684:	bd10      	pop	{r4, pc}

0802a686 <__math_oflowf>:
 802a686:	21e0      	movs	r1, #224	@ 0xe0
 802a688:	b510      	push	{r4, lr}
 802a68a:	05c9      	lsls	r1, r1, #23
 802a68c:	f7ff ffe7 	bl	802a65e <xflowf>
 802a690:	bd10      	pop	{r4, pc}
	...

0802a694 <__ieee754_sqrt>:
 802a694:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a696:	000a      	movs	r2, r1
 802a698:	000d      	movs	r5, r1
 802a69a:	496b      	ldr	r1, [pc, #428]	@ (802a848 <__ieee754_sqrt+0x1b4>)
 802a69c:	0004      	movs	r4, r0
 802a69e:	0003      	movs	r3, r0
 802a6a0:	0008      	movs	r0, r1
 802a6a2:	b087      	sub	sp, #28
 802a6a4:	4028      	ands	r0, r5
 802a6a6:	4288      	cmp	r0, r1
 802a6a8:	d111      	bne.n	802a6ce <__ieee754_sqrt+0x3a>
 802a6aa:	0022      	movs	r2, r4
 802a6ac:	002b      	movs	r3, r5
 802a6ae:	0020      	movs	r0, r4
 802a6b0:	0029      	movs	r1, r5
 802a6b2:	f7d8 f94f 	bl	8002954 <__aeabi_dmul>
 802a6b6:	0002      	movs	r2, r0
 802a6b8:	000b      	movs	r3, r1
 802a6ba:	0020      	movs	r0, r4
 802a6bc:	0029      	movs	r1, r5
 802a6be:	f7d7 f949 	bl	8001954 <__aeabi_dadd>
 802a6c2:	0004      	movs	r4, r0
 802a6c4:	000d      	movs	r5, r1
 802a6c6:	0020      	movs	r0, r4
 802a6c8:	0029      	movs	r1, r5
 802a6ca:	b007      	add	sp, #28
 802a6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a6ce:	2d00      	cmp	r5, #0
 802a6d0:	dc11      	bgt.n	802a6f6 <__ieee754_sqrt+0x62>
 802a6d2:	0069      	lsls	r1, r5, #1
 802a6d4:	0849      	lsrs	r1, r1, #1
 802a6d6:	4321      	orrs	r1, r4
 802a6d8:	d0f5      	beq.n	802a6c6 <__ieee754_sqrt+0x32>
 802a6da:	2000      	movs	r0, #0
 802a6dc:	4285      	cmp	r5, r0
 802a6de:	d010      	beq.n	802a702 <__ieee754_sqrt+0x6e>
 802a6e0:	0022      	movs	r2, r4
 802a6e2:	002b      	movs	r3, r5
 802a6e4:	0020      	movs	r0, r4
 802a6e6:	0029      	movs	r1, r5
 802a6e8:	f7d8 fc1a 	bl	8002f20 <__aeabi_dsub>
 802a6ec:	0002      	movs	r2, r0
 802a6ee:	000b      	movs	r3, r1
 802a6f0:	f7d7 fcf6 	bl	80020e0 <__aeabi_ddiv>
 802a6f4:	e7e5      	b.n	802a6c2 <__ieee754_sqrt+0x2e>
 802a6f6:	1528      	asrs	r0, r5, #20
 802a6f8:	d115      	bne.n	802a726 <__ieee754_sqrt+0x92>
 802a6fa:	2480      	movs	r4, #128	@ 0x80
 802a6fc:	2100      	movs	r1, #0
 802a6fe:	0364      	lsls	r4, r4, #13
 802a700:	e007      	b.n	802a712 <__ieee754_sqrt+0x7e>
 802a702:	0ada      	lsrs	r2, r3, #11
 802a704:	3815      	subs	r0, #21
 802a706:	055b      	lsls	r3, r3, #21
 802a708:	2a00      	cmp	r2, #0
 802a70a:	d0fa      	beq.n	802a702 <__ieee754_sqrt+0x6e>
 802a70c:	e7f5      	b.n	802a6fa <__ieee754_sqrt+0x66>
 802a70e:	0052      	lsls	r2, r2, #1
 802a710:	3101      	adds	r1, #1
 802a712:	4222      	tst	r2, r4
 802a714:	d0fb      	beq.n	802a70e <__ieee754_sqrt+0x7a>
 802a716:	1e4c      	subs	r4, r1, #1
 802a718:	1b00      	subs	r0, r0, r4
 802a71a:	2420      	movs	r4, #32
 802a71c:	001d      	movs	r5, r3
 802a71e:	1a64      	subs	r4, r4, r1
 802a720:	40e5      	lsrs	r5, r4
 802a722:	408b      	lsls	r3, r1
 802a724:	432a      	orrs	r2, r5
 802a726:	4949      	ldr	r1, [pc, #292]	@ (802a84c <__ieee754_sqrt+0x1b8>)
 802a728:	0312      	lsls	r2, r2, #12
 802a72a:	1844      	adds	r4, r0, r1
 802a72c:	2180      	movs	r1, #128	@ 0x80
 802a72e:	0b12      	lsrs	r2, r2, #12
 802a730:	0349      	lsls	r1, r1, #13
 802a732:	4311      	orrs	r1, r2
 802a734:	07c0      	lsls	r0, r0, #31
 802a736:	d403      	bmi.n	802a740 <__ieee754_sqrt+0xac>
 802a738:	0fda      	lsrs	r2, r3, #31
 802a73a:	0049      	lsls	r1, r1, #1
 802a73c:	1851      	adds	r1, r2, r1
 802a73e:	005b      	lsls	r3, r3, #1
 802a740:	2500      	movs	r5, #0
 802a742:	1062      	asrs	r2, r4, #1
 802a744:	0049      	lsls	r1, r1, #1
 802a746:	2480      	movs	r4, #128	@ 0x80
 802a748:	9205      	str	r2, [sp, #20]
 802a74a:	0fda      	lsrs	r2, r3, #31
 802a74c:	1852      	adds	r2, r2, r1
 802a74e:	2016      	movs	r0, #22
 802a750:	0029      	movs	r1, r5
 802a752:	005b      	lsls	r3, r3, #1
 802a754:	03a4      	lsls	r4, r4, #14
 802a756:	190e      	adds	r6, r1, r4
 802a758:	4296      	cmp	r6, r2
 802a75a:	dc02      	bgt.n	802a762 <__ieee754_sqrt+0xce>
 802a75c:	1931      	adds	r1, r6, r4
 802a75e:	1b92      	subs	r2, r2, r6
 802a760:	192d      	adds	r5, r5, r4
 802a762:	0fde      	lsrs	r6, r3, #31
 802a764:	0052      	lsls	r2, r2, #1
 802a766:	3801      	subs	r0, #1
 802a768:	1992      	adds	r2, r2, r6
 802a76a:	005b      	lsls	r3, r3, #1
 802a76c:	0864      	lsrs	r4, r4, #1
 802a76e:	2800      	cmp	r0, #0
 802a770:	d1f1      	bne.n	802a756 <__ieee754_sqrt+0xc2>
 802a772:	2620      	movs	r6, #32
 802a774:	2780      	movs	r7, #128	@ 0x80
 802a776:	0004      	movs	r4, r0
 802a778:	9604      	str	r6, [sp, #16]
 802a77a:	063f      	lsls	r7, r7, #24
 802a77c:	183e      	adds	r6, r7, r0
 802a77e:	46b4      	mov	ip, r6
 802a780:	428a      	cmp	r2, r1
 802a782:	dc02      	bgt.n	802a78a <__ieee754_sqrt+0xf6>
 802a784:	d114      	bne.n	802a7b0 <__ieee754_sqrt+0x11c>
 802a786:	429e      	cmp	r6, r3
 802a788:	d812      	bhi.n	802a7b0 <__ieee754_sqrt+0x11c>
 802a78a:	4660      	mov	r0, ip
 802a78c:	4666      	mov	r6, ip
 802a78e:	19c0      	adds	r0, r0, r7
 802a790:	9100      	str	r1, [sp, #0]
 802a792:	2e00      	cmp	r6, #0
 802a794:	da03      	bge.n	802a79e <__ieee754_sqrt+0x10a>
 802a796:	43c6      	mvns	r6, r0
 802a798:	0ff6      	lsrs	r6, r6, #31
 802a79a:	198e      	adds	r6, r1, r6
 802a79c:	9600      	str	r6, [sp, #0]
 802a79e:	1a52      	subs	r2, r2, r1
 802a7a0:	4563      	cmp	r3, ip
 802a7a2:	4189      	sbcs	r1, r1
 802a7a4:	4249      	negs	r1, r1
 802a7a6:	1a52      	subs	r2, r2, r1
 802a7a8:	4661      	mov	r1, ip
 802a7aa:	1a5b      	subs	r3, r3, r1
 802a7ac:	9900      	ldr	r1, [sp, #0]
 802a7ae:	19e4      	adds	r4, r4, r7
 802a7b0:	0fde      	lsrs	r6, r3, #31
 802a7b2:	0052      	lsls	r2, r2, #1
 802a7b4:	1992      	adds	r2, r2, r6
 802a7b6:	9e04      	ldr	r6, [sp, #16]
 802a7b8:	005b      	lsls	r3, r3, #1
 802a7ba:	3e01      	subs	r6, #1
 802a7bc:	087f      	lsrs	r7, r7, #1
 802a7be:	9604      	str	r6, [sp, #16]
 802a7c0:	2e00      	cmp	r6, #0
 802a7c2:	d1db      	bne.n	802a77c <__ieee754_sqrt+0xe8>
 802a7c4:	431a      	orrs	r2, r3
 802a7c6:	d01f      	beq.n	802a808 <__ieee754_sqrt+0x174>
 802a7c8:	4e21      	ldr	r6, [pc, #132]	@ (802a850 <__ieee754_sqrt+0x1bc>)
 802a7ca:	4f22      	ldr	r7, [pc, #136]	@ (802a854 <__ieee754_sqrt+0x1c0>)
 802a7cc:	6830      	ldr	r0, [r6, #0]
 802a7ce:	6871      	ldr	r1, [r6, #4]
 802a7d0:	683a      	ldr	r2, [r7, #0]
 802a7d2:	687b      	ldr	r3, [r7, #4]
 802a7d4:	9200      	str	r2, [sp, #0]
 802a7d6:	9301      	str	r3, [sp, #4]
 802a7d8:	6832      	ldr	r2, [r6, #0]
 802a7da:	6873      	ldr	r3, [r6, #4]
 802a7dc:	9202      	str	r2, [sp, #8]
 802a7de:	9303      	str	r3, [sp, #12]
 802a7e0:	9a00      	ldr	r2, [sp, #0]
 802a7e2:	9b01      	ldr	r3, [sp, #4]
 802a7e4:	f7d8 fb9c 	bl	8002f20 <__aeabi_dsub>
 802a7e8:	0002      	movs	r2, r0
 802a7ea:	000b      	movs	r3, r1
 802a7ec:	9802      	ldr	r0, [sp, #8]
 802a7ee:	9903      	ldr	r1, [sp, #12]
 802a7f0:	f7d5 fe6e 	bl	80004d0 <__aeabi_dcmple>
 802a7f4:	2800      	cmp	r0, #0
 802a7f6:	d007      	beq.n	802a808 <__ieee754_sqrt+0x174>
 802a7f8:	6830      	ldr	r0, [r6, #0]
 802a7fa:	6871      	ldr	r1, [r6, #4]
 802a7fc:	683a      	ldr	r2, [r7, #0]
 802a7fe:	687b      	ldr	r3, [r7, #4]
 802a800:	1c67      	adds	r7, r4, #1
 802a802:	d10c      	bne.n	802a81e <__ieee754_sqrt+0x18a>
 802a804:	9c04      	ldr	r4, [sp, #16]
 802a806:	3501      	adds	r5, #1
 802a808:	4a13      	ldr	r2, [pc, #76]	@ (802a858 <__ieee754_sqrt+0x1c4>)
 802a80a:	106b      	asrs	r3, r5, #1
 802a80c:	189b      	adds	r3, r3, r2
 802a80e:	9a05      	ldr	r2, [sp, #20]
 802a810:	07ed      	lsls	r5, r5, #31
 802a812:	0864      	lsrs	r4, r4, #1
 802a814:	0512      	lsls	r2, r2, #20
 802a816:	4325      	orrs	r5, r4
 802a818:	0028      	movs	r0, r5
 802a81a:	18d1      	adds	r1, r2, r3
 802a81c:	e751      	b.n	802a6c2 <__ieee754_sqrt+0x2e>
 802a81e:	f7d7 f899 	bl	8001954 <__aeabi_dadd>
 802a822:	6877      	ldr	r7, [r6, #4]
 802a824:	6836      	ldr	r6, [r6, #0]
 802a826:	0002      	movs	r2, r0
 802a828:	000b      	movs	r3, r1
 802a82a:	0030      	movs	r0, r6
 802a82c:	0039      	movs	r1, r7
 802a82e:	f7d5 fe45 	bl	80004bc <__aeabi_dcmplt>
 802a832:	2800      	cmp	r0, #0
 802a834:	d004      	beq.n	802a840 <__ieee754_sqrt+0x1ac>
 802a836:	3402      	adds	r4, #2
 802a838:	4263      	negs	r3, r4
 802a83a:	4163      	adcs	r3, r4
 802a83c:	18ed      	adds	r5, r5, r3
 802a83e:	e7e3      	b.n	802a808 <__ieee754_sqrt+0x174>
 802a840:	2301      	movs	r3, #1
 802a842:	3401      	adds	r4, #1
 802a844:	439c      	bics	r4, r3
 802a846:	e7df      	b.n	802a808 <__ieee754_sqrt+0x174>
 802a848:	7ff00000 	.word	0x7ff00000
 802a84c:	fffffc01 	.word	0xfffffc01
 802a850:	0802f230 	.word	0x0802f230
 802a854:	0802f228 	.word	0x0802f228
 802a858:	3fe00000 	.word	0x3fe00000

0802a85c <_init>:
 802a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a85e:	46c0      	nop			@ (mov r8, r8)
 802a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a862:	bc08      	pop	{r3}
 802a864:	469e      	mov	lr, r3
 802a866:	4770      	bx	lr

0802a868 <_fini>:
 802a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a86a:	46c0      	nop			@ (mov r8, r8)
 802a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a86e:	bc08      	pop	{r3}
 802a870:	469e      	mov	lr, r3
 802a872:	4770      	bx	lr
